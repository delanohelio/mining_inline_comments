{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MTU0MjU0", "number": 280, "reviewThreads": {"totalCount": 45, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODozNjo1N1rODooC0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMjozMzoyMVrOEloqcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTI1NzEzOnYy", "diffSide": "RIGHT", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODozNjo1N1rOF3ST8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjo1NDo0MFrOF3a52g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUxNjAxOQ==", "bodyText": "Why is this piece of code exactly the same as above? Also, you could add a test for a mix where the videoId is not part of the mix id (i.e. the current video is not the first one, so videoId is different from the video id in the mix id, as in YoutubePlaylistLinkHandlerFactoryTest.fromUrlIsMixVideo)", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393516019", "createdAt": "2020-03-17T08:36:57Z", "author": {"login": "Stypox"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeServiceTest.java", "diffHunk": "@@ -54,4 +58,24 @@ public void testGetKioskAvailableKiosks() throws Exception {\n     public void testGetDefaultKiosk() throws Exception {\n         assertEquals(kioskList.getDefaultKioskExtractor(null).getId(), \"Trending\");\n     }\n+\n+\n+    @Test\n+    public void getPlayListExtractorIsNormalPlaylist() throws Exception {\n+        PlaylistExtractor extractor = service.getPlaylistExtractor(\n+            \"https://www.youtube.com/watch?v=JhqtYOnNrTs&list=PL-EkZZikQIQVqk9rBWzEo5b-2GeozElS\");\n+        assertTrue(extractor instanceof YoutubePlaylistExtractor);\n+    }\n+\n+    @Test\n+    public void getPlaylistExtractorIsMix() throws Exception {\n+        String videoId = \"_AzeUSL9lZc\";\n+        PlaylistExtractor extractor = YouTube.getPlaylistExtractor(\n+            \"https://www.youtube.com/watch?v=\" + videoId + \"&list=RD\" + videoId);\n+        assertTrue(extractor instanceof YoutubeMixPlaylistExtractor);\n+\n+        extractor = YouTube.getPlaylistExtractor(\n+            \"https://www.youtube.com/watch?v=\" + videoId + \"&list=RD\" + videoId);\n+        assertTrue(extractor instanceof YoutubeMixPlaylistExtractor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2754133a8c7e3df041c11153c0f8c9f50b0465cd"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY1Njc5NA==", "bodyText": "Because i may have not paid attention and forgot to make the second one into RDMM for My Mix.\nI can add the test.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393656794", "createdAt": "2020-03-17T12:54:40Z", "author": {"login": "XiangRongLin"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeServiceTest.java", "diffHunk": "@@ -54,4 +58,24 @@ public void testGetKioskAvailableKiosks() throws Exception {\n     public void testGetDefaultKiosk() throws Exception {\n         assertEquals(kioskList.getDefaultKioskExtractor(null).getId(), \"Trending\");\n     }\n+\n+\n+    @Test\n+    public void getPlayListExtractorIsNormalPlaylist() throws Exception {\n+        PlaylistExtractor extractor = service.getPlaylistExtractor(\n+            \"https://www.youtube.com/watch?v=JhqtYOnNrTs&list=PL-EkZZikQIQVqk9rBWzEo5b-2GeozElS\");\n+        assertTrue(extractor instanceof YoutubePlaylistExtractor);\n+    }\n+\n+    @Test\n+    public void getPlaylistExtractorIsMix() throws Exception {\n+        String videoId = \"_AzeUSL9lZc\";\n+        PlaylistExtractor extractor = YouTube.getPlaylistExtractor(\n+            \"https://www.youtube.com/watch?v=\" + videoId + \"&list=RD\" + videoId);\n+        assertTrue(extractor instanceof YoutubeMixPlaylistExtractor);\n+\n+        extractor = YouTube.getPlaylistExtractor(\n+            \"https://www.youtube.com/watch?v=\" + videoId + \"&list=RD\" + videoId);\n+        assertTrue(extractor instanceof YoutubeMixPlaylistExtractor);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUxNjAxOQ=="}, "originalCommit": {"oid": "2754133a8c7e3df041c11153c0f8c9f50b0465cd"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTMyNTQ5OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODo1Nzo0M1rOF3S_9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNjoyMjowMlrOF5qSHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUyNzI4NQ==", "bodyText": "Undo this whitespace change", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393527285", "createdAt": "2020-03-17T08:57:43Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeService.java", "diffHunk": "@@ -111,7 +115,7 @@ public KioskList getKioskList() throws ExtractionException {\n                 public KioskExtractor createNewKiosk(StreamingService streamingService,\n                                                      String url,\n                                                      String id)\n-                        throws ExtractionException {\n+                throws ExtractionException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2754133a8c7e3df041c11153c0f8c9f50b0465cd"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwNTkxNg==", "bodyText": "This hasn't been resolved?", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396005916", "createdAt": "2020-03-21T16:22:02Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeService.java", "diffHunk": "@@ -111,7 +115,7 @@ public KioskList getKioskList() throws ExtractionException {\n                 public KioskExtractor createNewKiosk(StreamingService streamingService,\n                                                      String url,\n                                                      String id)\n-                        throws ExtractionException {\n+                throws ExtractionException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUyNzI4NQ=="}, "originalCommit": {"oid": "2754133a8c7e3df041c11153c0f8c9f50b0465cd"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTMzODU5OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOTowMTo1MlrOF3TImQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOTowMTo1MlrOF3TImQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUyOTQ5Nw==", "bodyText": "Rename, just to keep it the same as the string it is referring to\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final static String TWO_COLUMNS_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n          \n          \n            \n                private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393529497", "createdAt": "2020-03-17T09:01:52Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,182 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMNS_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2754133a8c7e3df041c11153c0f8c9f50b0465cd"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTM1Mzc1OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOTowNjowN1rOF3TR4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOTowNjowN1rOF3TR4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUzMTg3NQ==", "bodyText": "this should be indented one tab more\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    throws ExtractionException, IOException {\n          \n          \n            \n                        throws ExtractionException, IOException {", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393531875", "createdAt": "2020-03-17T09:06:07Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,182 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMNS_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        try {\n+            playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMNS_WATCH_NEXT_RESULTS)\n+                .getObject(PLAYLIST).getObject(PLAYLIST);\n+        } catch (NullPointerException e) {\n+            throw new ExtractionException(e);\n+        }\n+\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        try {\n+            final String name = playlistData.getString(\"title\");\n+            if (name != null) {\n+                return name;\n+            } else {\n+                return \"\";\n+            }\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist name\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            final String videoId;\n+            if (playlistId.startsWith(\"RDMM\")) {\n+                videoId = playlistId.substring(4);\n+            } else {\n+                videoId = playlistId.substring(2);\n+            }\n+            if (videoId.isEmpty()) {\n+                throw new ParsingException(\"\");\n+            }\n+            return getThumbnailUrlFromId(videoId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return 25;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(CONTENTS));\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    @Override\n+    public String getNextPageUrl() throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistData.getArray(CONTENTS)\n+            .get(playlistData.getArray(CONTENTS).size() - 1));\n+        if (lastStream == null || lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER) == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+        return \"https://youtube.com\" + lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER)\n+            .getObject(\"navigationEndpoint\").getObject(\"commandMetadata\")\n+            .getObject(\"webCommandMetadata\").getString(\"url\") + \"&pbj=1\";\n+    }\n+\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getPage(final String pageUrl)\n+        throws ExtractionException, IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2754133a8c7e3df041c11153c0f8c9f50b0465cd"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTM1NTg5OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOTowNjozN1rOF3TTPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOTowNjozN1rOF3TTPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUzMjIyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    @Nonnull StreamInfoItemsCollector collector,\n          \n          \n            \n                    @Nullable JsonArray streams) {\n          \n          \n            \n                        @Nonnull StreamInfoItemsCollector collector,\n          \n          \n            \n                        @Nullable JsonArray streams) {", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393532223", "createdAt": "2020-03-17T09:06:37Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,182 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMNS_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        try {\n+            playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMNS_WATCH_NEXT_RESULTS)\n+                .getObject(PLAYLIST).getObject(PLAYLIST);\n+        } catch (NullPointerException e) {\n+            throw new ExtractionException(e);\n+        }\n+\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        try {\n+            final String name = playlistData.getString(\"title\");\n+            if (name != null) {\n+                return name;\n+            } else {\n+                return \"\";\n+            }\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist name\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            final String videoId;\n+            if (playlistId.startsWith(\"RDMM\")) {\n+                videoId = playlistId.substring(4);\n+            } else {\n+                videoId = playlistId.substring(2);\n+            }\n+            if (videoId.isEmpty()) {\n+                throw new ParsingException(\"\");\n+            }\n+            return getThumbnailUrlFromId(videoId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return 25;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(CONTENTS));\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    @Override\n+    public String getNextPageUrl() throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistData.getArray(CONTENTS)\n+            .get(playlistData.getArray(CONTENTS).size() - 1));\n+        if (lastStream == null || lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER) == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+        return \"https://youtube.com\" + lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER)\n+            .getObject(\"navigationEndpoint\").getObject(\"commandMetadata\")\n+            .getObject(\"webCommandMetadata\").getString(\"url\") + \"&pbj=1\";\n+    }\n+\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getPage(final String pageUrl)\n+        throws ExtractionException, IOException {\n+        if (pageUrl == null || pageUrl.isEmpty()) {\n+            throw new ExtractionException(\n+                new IllegalArgumentException(\"Page url is empty or null\"));\n+        }\n+\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        final JsonArray ajaxJson = getJsonResponse(pageUrl, getExtractorLocalization());\n+        playlistData =\n+            ajaxJson.getObject(3).getObject(RESPONSE).getObject(CONTENTS)\n+                .getObject(TWO_COLUMNS_WATCH_NEXT_RESULTS).getObject(PLAYLIST)\n+                .getObject(PLAYLIST);\n+        final JsonArray streams = playlistData.getArray(CONTENTS);\n+        //Because continuation requests are created with the last video of previous request as start\n+        streams.remove(0);\n+        collectStreamsFrom(collector, streams);\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    private void collectStreamsFrom(\n+        @Nonnull StreamInfoItemsCollector collector,\n+        @Nullable JsonArray streams) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2754133a8c7e3df041c11153c0f8c9f50b0465cd"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTM4OTUwOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOToxNjozM1rOF3TopA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOToxNjozM1rOF3TopA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUzNzcwMA==", "bodyText": "You should throw the same ParsingException if the name could not be extracted. I don't think \"\" would be handled correctly by the client, i.e. considering that the title could not be extracted", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393537700", "createdAt": "2020-03-17T09:16:33Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,182 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMNS_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        try {\n+            playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMNS_WATCH_NEXT_RESULTS)\n+                .getObject(PLAYLIST).getObject(PLAYLIST);\n+        } catch (NullPointerException e) {\n+            throw new ExtractionException(e);\n+        }\n+\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        try {\n+            final String name = playlistData.getString(\"title\");\n+            if (name != null) {\n+                return name;\n+            } else {\n+                return \"\";\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2754133a8c7e3df041c11153c0f8c9f50b0465cd"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTM5OTc1OnYy", "diffSide": "RIGHT", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractorTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOToxOToyOVrOF3TvLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjo1MzoyM1rOF3a3Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUzOTM3NA==", "bodyText": "How can the thumbnail url be always the same if \"My Mix\" is different for everyone?", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393539374", "createdAt": "2020-03-17T09:19:29Z", "author": {"login": "Stypox"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractorTest.java", "diffHunk": "@@ -0,0 +1,225 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.junit.Assert.*;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ServiceList.YouTube;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.ListExtractor.InfoItemsPage;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+\n+public class YoutubeMixPlaylistExtractorTest {\n+\n+    private static YoutubeMixPlaylistExtractor extractor;\n+    private static String videoId = \"_AzeUSL9lZc\";\n+    private static String videoTitle = \"Most Beautiful And Emotional  Piano: Anime Music Shigatsu wa Kimi no Uso OST IMO\";\n+\n+    public static class Mix {\n+\n+        @Before\n+        public void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = (YoutubeMixPlaylistExtractor) YouTube\n+                .getPlaylistExtractor(\n+                    \"https://www.youtube.com/watch?v=\" + videoId + \"&list=RD\" + videoId);\n+            extractor.fetchPage();\n+        }\n+\n+        @Test\n+        public void getServiceId() {\n+            assertEquals(YouTube.getServiceId(), extractor.getServiceId());\n+        }\n+\n+        @Test\n+        public void getName() throws Exception {\n+            String name = extractor.getName();\n+            assertThat(name, startsWith(\"Mix\"));\n+            assertThat(name, containsString(videoTitle));\n+        }\n+\n+        @Test\n+        public void getThumbnailUrl() throws Exception {\n+            final String thumbnailUrl = extractor.getThumbnailUrl();\n+            assertIsSecureUrl(thumbnailUrl);\n+            assertThat(thumbnailUrl, containsString(\"yt\"));\n+            assertThat(thumbnailUrl, containsString(videoId));\n+        }\n+\n+        @Test\n+        public void getNextPageUrl() throws Exception {\n+            final String nextPageUrl = extractor.getNextPageUrl();\n+            assertIsSecureUrl(nextPageUrl);\n+            assertThat(nextPageUrl, containsString(\"list=RD\" + videoId));\n+        }\n+\n+        @Test\n+        public void getInitialPage() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getInitialPage();\n+            assertThat(streams.getItems().isEmpty(), is(false));\n+            assertThat(streams.hasNextPage(), is(true));\n+        }\n+\n+        @Test\n+        public void getPage() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getPage(extractor.getNextPageUrl());\n+            assertThat(streams.getItems().isEmpty(), is(false));\n+            assertThat(streams.hasNextPage(), is(true));\n+        }\n+\n+        @Test\n+        public void getPageMultipleTimes() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getPage(extractor.getNextPageUrl());\n+\n+            //Should work infinitely, but for testing purposes only 3 times\n+            for (int i = 0; i < 3; i++) {\n+                assertThat(streams.hasNextPage(), is(true));\n+                streams = extractor.getPage(streams.getNextPageUrl());\n+            }\n+        }\n+\n+        @Test(expected = ExtractionException.class)\n+        public void getPageEmptyUrl() throws Exception {\n+            extractor.getPage(\"\");\n+        }\n+\n+        @Test(expected = ExtractionException.class)\n+        public void invalidVideoId() throws Exception {\n+            extractor = (YoutubeMixPlaylistExtractor) YouTube\n+                .getPlaylistExtractor(\n+                    \"https://www.youtube.com/watch?v=\" + \"abcde\" + \"&list=RD\" + \"ancde\");\n+            extractor.fetchPage();\n+        }\n+    }\n+\n+    public static class MixWithIndex {\n+\n+        public static String index = \"&index=13\";\n+        public static String videoIdNumber13 = \"qHtzO49SDmk\";\n+\n+        @Before\n+        public void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = (YoutubeMixPlaylistExtractor) YouTube\n+                .getPlaylistExtractor(\n+                    \"https://www.youtube.com/watch?v=\" + videoIdNumber13 + \"&list=RD\" + videoId\n+                        + index);\n+            extractor.fetchPage();\n+        }\n+\n+        @Test\n+        public void getName() throws Exception {\n+            String name = extractor.getName();\n+            assertThat(name, startsWith(\"Mix\"));\n+            assertThat(name, containsString(videoTitle));\n+        }\n+\n+        @Test\n+        public void getThumbnailUrl() throws Exception {\n+            final String thumbnailUrl = extractor.getThumbnailUrl();\n+            assertIsSecureUrl(thumbnailUrl);\n+            assertThat(thumbnailUrl, containsString(\"yt\"));\n+            assertThat(thumbnailUrl, containsString(videoId));\n+        }\n+\n+        @Test\n+        public void getNextPageUrl() throws Exception {\n+            final String nextPageUrl = extractor.getNextPageUrl();\n+            assertIsSecureUrl(nextPageUrl);\n+            assertThat(nextPageUrl, containsString(\"list=RD\" + videoId));\n+        }\n+\n+        @Test\n+        public void getInitialPage() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getInitialPage();\n+            assertThat(streams.getItems().isEmpty(), is(false));\n+            assertThat(streams.hasNextPage(), is(true));\n+        }\n+\n+        @Test\n+        public void getPage() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getPage(extractor.getNextPageUrl());\n+            assertThat(streams.getItems().isEmpty(), is(false));\n+            assertThat(streams.hasNextPage(), is(true));\n+        }\n+\n+        @Test\n+        public void getPageMultipleTimes() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getPage(extractor.getNextPageUrl());\n+\n+            //Should work infinitely, but for testing purposes only 3 times\n+            for (int i = 0; i < 3; i++) {\n+                assertThat(streams.hasNextPage(), is(true));\n+                streams = extractor.getPage(streams.getNextPageUrl());\n+            }\n+        }\n+    }\n+\n+    public static class MyMix {\n+\n+        @Before\n+        public void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = (YoutubeMixPlaylistExtractor) YouTube\n+                .getPlaylistExtractor(\n+                    \"https://www.youtube.com/watch?v=\" + videoId + \"&list=RDMM\" + videoId);\n+            extractor.fetchPage();\n+        }\n+\n+        @Test\n+        public void getServiceId() {\n+            assertEquals(YouTube.getServiceId(), extractor.getServiceId());\n+        }\n+\n+        @Test\n+        public void getName() throws Exception {\n+            String name = extractor.getName();\n+            assertEquals(\"My Mix\", name);\n+        }\n+\n+        @Test\n+        public void getThumbnailUrl() throws Exception {\n+            final String thumbnailUrl = extractor.getThumbnailUrl();\n+            assertIsSecureUrl(thumbnailUrl);\n+            assertThat(thumbnailUrl, startsWith(\"https://i.ytimg.com/vi/_AzeUSL9lZc\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2754133a8c7e3df041c11153c0f8c9f50b0465cd"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY0NjY5NQ==", "bodyText": "Because the extractor is set up with a starting video (watch?v=videoId). The rest of the mix is indeed different for everyone, but because there is a starting video, the first one will always be that one.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393646695", "createdAt": "2020-03-17T12:36:13Z", "author": {"login": "XiangRongLin"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractorTest.java", "diffHunk": "@@ -0,0 +1,225 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.junit.Assert.*;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ServiceList.YouTube;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.ListExtractor.InfoItemsPage;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+\n+public class YoutubeMixPlaylistExtractorTest {\n+\n+    private static YoutubeMixPlaylistExtractor extractor;\n+    private static String videoId = \"_AzeUSL9lZc\";\n+    private static String videoTitle = \"Most Beautiful And Emotional  Piano: Anime Music Shigatsu wa Kimi no Uso OST IMO\";\n+\n+    public static class Mix {\n+\n+        @Before\n+        public void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = (YoutubeMixPlaylistExtractor) YouTube\n+                .getPlaylistExtractor(\n+                    \"https://www.youtube.com/watch?v=\" + videoId + \"&list=RD\" + videoId);\n+            extractor.fetchPage();\n+        }\n+\n+        @Test\n+        public void getServiceId() {\n+            assertEquals(YouTube.getServiceId(), extractor.getServiceId());\n+        }\n+\n+        @Test\n+        public void getName() throws Exception {\n+            String name = extractor.getName();\n+            assertThat(name, startsWith(\"Mix\"));\n+            assertThat(name, containsString(videoTitle));\n+        }\n+\n+        @Test\n+        public void getThumbnailUrl() throws Exception {\n+            final String thumbnailUrl = extractor.getThumbnailUrl();\n+            assertIsSecureUrl(thumbnailUrl);\n+            assertThat(thumbnailUrl, containsString(\"yt\"));\n+            assertThat(thumbnailUrl, containsString(videoId));\n+        }\n+\n+        @Test\n+        public void getNextPageUrl() throws Exception {\n+            final String nextPageUrl = extractor.getNextPageUrl();\n+            assertIsSecureUrl(nextPageUrl);\n+            assertThat(nextPageUrl, containsString(\"list=RD\" + videoId));\n+        }\n+\n+        @Test\n+        public void getInitialPage() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getInitialPage();\n+            assertThat(streams.getItems().isEmpty(), is(false));\n+            assertThat(streams.hasNextPage(), is(true));\n+        }\n+\n+        @Test\n+        public void getPage() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getPage(extractor.getNextPageUrl());\n+            assertThat(streams.getItems().isEmpty(), is(false));\n+            assertThat(streams.hasNextPage(), is(true));\n+        }\n+\n+        @Test\n+        public void getPageMultipleTimes() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getPage(extractor.getNextPageUrl());\n+\n+            //Should work infinitely, but for testing purposes only 3 times\n+            for (int i = 0; i < 3; i++) {\n+                assertThat(streams.hasNextPage(), is(true));\n+                streams = extractor.getPage(streams.getNextPageUrl());\n+            }\n+        }\n+\n+        @Test(expected = ExtractionException.class)\n+        public void getPageEmptyUrl() throws Exception {\n+            extractor.getPage(\"\");\n+        }\n+\n+        @Test(expected = ExtractionException.class)\n+        public void invalidVideoId() throws Exception {\n+            extractor = (YoutubeMixPlaylistExtractor) YouTube\n+                .getPlaylistExtractor(\n+                    \"https://www.youtube.com/watch?v=\" + \"abcde\" + \"&list=RD\" + \"ancde\");\n+            extractor.fetchPage();\n+        }\n+    }\n+\n+    public static class MixWithIndex {\n+\n+        public static String index = \"&index=13\";\n+        public static String videoIdNumber13 = \"qHtzO49SDmk\";\n+\n+        @Before\n+        public void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = (YoutubeMixPlaylistExtractor) YouTube\n+                .getPlaylistExtractor(\n+                    \"https://www.youtube.com/watch?v=\" + videoIdNumber13 + \"&list=RD\" + videoId\n+                        + index);\n+            extractor.fetchPage();\n+        }\n+\n+        @Test\n+        public void getName() throws Exception {\n+            String name = extractor.getName();\n+            assertThat(name, startsWith(\"Mix\"));\n+            assertThat(name, containsString(videoTitle));\n+        }\n+\n+        @Test\n+        public void getThumbnailUrl() throws Exception {\n+            final String thumbnailUrl = extractor.getThumbnailUrl();\n+            assertIsSecureUrl(thumbnailUrl);\n+            assertThat(thumbnailUrl, containsString(\"yt\"));\n+            assertThat(thumbnailUrl, containsString(videoId));\n+        }\n+\n+        @Test\n+        public void getNextPageUrl() throws Exception {\n+            final String nextPageUrl = extractor.getNextPageUrl();\n+            assertIsSecureUrl(nextPageUrl);\n+            assertThat(nextPageUrl, containsString(\"list=RD\" + videoId));\n+        }\n+\n+        @Test\n+        public void getInitialPage() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getInitialPage();\n+            assertThat(streams.getItems().isEmpty(), is(false));\n+            assertThat(streams.hasNextPage(), is(true));\n+        }\n+\n+        @Test\n+        public void getPage() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getPage(extractor.getNextPageUrl());\n+            assertThat(streams.getItems().isEmpty(), is(false));\n+            assertThat(streams.hasNextPage(), is(true));\n+        }\n+\n+        @Test\n+        public void getPageMultipleTimes() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getPage(extractor.getNextPageUrl());\n+\n+            //Should work infinitely, but for testing purposes only 3 times\n+            for (int i = 0; i < 3; i++) {\n+                assertThat(streams.hasNextPage(), is(true));\n+                streams = extractor.getPage(streams.getNextPageUrl());\n+            }\n+        }\n+    }\n+\n+    public static class MyMix {\n+\n+        @Before\n+        public void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = (YoutubeMixPlaylistExtractor) YouTube\n+                .getPlaylistExtractor(\n+                    \"https://www.youtube.com/watch?v=\" + videoId + \"&list=RDMM\" + videoId);\n+            extractor.fetchPage();\n+        }\n+\n+        @Test\n+        public void getServiceId() {\n+            assertEquals(YouTube.getServiceId(), extractor.getServiceId());\n+        }\n+\n+        @Test\n+        public void getName() throws Exception {\n+            String name = extractor.getName();\n+            assertEquals(\"My Mix\", name);\n+        }\n+\n+        @Test\n+        public void getThumbnailUrl() throws Exception {\n+            final String thumbnailUrl = extractor.getThumbnailUrl();\n+            assertIsSecureUrl(thumbnailUrl);\n+            assertThat(thumbnailUrl, startsWith(\"https://i.ytimg.com/vi/_AzeUSL9lZc\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUzOTM3NA=="}, "originalCommit": {"oid": "2754133a8c7e3df041c11153c0f8c9f50b0465cd"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY1NjA5NA==", "bodyText": "Oh, that's right, sorry ;-)", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393656094", "createdAt": "2020-03-17T12:53:23Z", "author": {"login": "Stypox"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractorTest.java", "diffHunk": "@@ -0,0 +1,225 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.junit.Assert.*;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ServiceList.YouTube;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.ListExtractor.InfoItemsPage;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+\n+public class YoutubeMixPlaylistExtractorTest {\n+\n+    private static YoutubeMixPlaylistExtractor extractor;\n+    private static String videoId = \"_AzeUSL9lZc\";\n+    private static String videoTitle = \"Most Beautiful And Emotional  Piano: Anime Music Shigatsu wa Kimi no Uso OST IMO\";\n+\n+    public static class Mix {\n+\n+        @Before\n+        public void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = (YoutubeMixPlaylistExtractor) YouTube\n+                .getPlaylistExtractor(\n+                    \"https://www.youtube.com/watch?v=\" + videoId + \"&list=RD\" + videoId);\n+            extractor.fetchPage();\n+        }\n+\n+        @Test\n+        public void getServiceId() {\n+            assertEquals(YouTube.getServiceId(), extractor.getServiceId());\n+        }\n+\n+        @Test\n+        public void getName() throws Exception {\n+            String name = extractor.getName();\n+            assertThat(name, startsWith(\"Mix\"));\n+            assertThat(name, containsString(videoTitle));\n+        }\n+\n+        @Test\n+        public void getThumbnailUrl() throws Exception {\n+            final String thumbnailUrl = extractor.getThumbnailUrl();\n+            assertIsSecureUrl(thumbnailUrl);\n+            assertThat(thumbnailUrl, containsString(\"yt\"));\n+            assertThat(thumbnailUrl, containsString(videoId));\n+        }\n+\n+        @Test\n+        public void getNextPageUrl() throws Exception {\n+            final String nextPageUrl = extractor.getNextPageUrl();\n+            assertIsSecureUrl(nextPageUrl);\n+            assertThat(nextPageUrl, containsString(\"list=RD\" + videoId));\n+        }\n+\n+        @Test\n+        public void getInitialPage() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getInitialPage();\n+            assertThat(streams.getItems().isEmpty(), is(false));\n+            assertThat(streams.hasNextPage(), is(true));\n+        }\n+\n+        @Test\n+        public void getPage() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getPage(extractor.getNextPageUrl());\n+            assertThat(streams.getItems().isEmpty(), is(false));\n+            assertThat(streams.hasNextPage(), is(true));\n+        }\n+\n+        @Test\n+        public void getPageMultipleTimes() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getPage(extractor.getNextPageUrl());\n+\n+            //Should work infinitely, but for testing purposes only 3 times\n+            for (int i = 0; i < 3; i++) {\n+                assertThat(streams.hasNextPage(), is(true));\n+                streams = extractor.getPage(streams.getNextPageUrl());\n+            }\n+        }\n+\n+        @Test(expected = ExtractionException.class)\n+        public void getPageEmptyUrl() throws Exception {\n+            extractor.getPage(\"\");\n+        }\n+\n+        @Test(expected = ExtractionException.class)\n+        public void invalidVideoId() throws Exception {\n+            extractor = (YoutubeMixPlaylistExtractor) YouTube\n+                .getPlaylistExtractor(\n+                    \"https://www.youtube.com/watch?v=\" + \"abcde\" + \"&list=RD\" + \"ancde\");\n+            extractor.fetchPage();\n+        }\n+    }\n+\n+    public static class MixWithIndex {\n+\n+        public static String index = \"&index=13\";\n+        public static String videoIdNumber13 = \"qHtzO49SDmk\";\n+\n+        @Before\n+        public void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = (YoutubeMixPlaylistExtractor) YouTube\n+                .getPlaylistExtractor(\n+                    \"https://www.youtube.com/watch?v=\" + videoIdNumber13 + \"&list=RD\" + videoId\n+                        + index);\n+            extractor.fetchPage();\n+        }\n+\n+        @Test\n+        public void getName() throws Exception {\n+            String name = extractor.getName();\n+            assertThat(name, startsWith(\"Mix\"));\n+            assertThat(name, containsString(videoTitle));\n+        }\n+\n+        @Test\n+        public void getThumbnailUrl() throws Exception {\n+            final String thumbnailUrl = extractor.getThumbnailUrl();\n+            assertIsSecureUrl(thumbnailUrl);\n+            assertThat(thumbnailUrl, containsString(\"yt\"));\n+            assertThat(thumbnailUrl, containsString(videoId));\n+        }\n+\n+        @Test\n+        public void getNextPageUrl() throws Exception {\n+            final String nextPageUrl = extractor.getNextPageUrl();\n+            assertIsSecureUrl(nextPageUrl);\n+            assertThat(nextPageUrl, containsString(\"list=RD\" + videoId));\n+        }\n+\n+        @Test\n+        public void getInitialPage() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getInitialPage();\n+            assertThat(streams.getItems().isEmpty(), is(false));\n+            assertThat(streams.hasNextPage(), is(true));\n+        }\n+\n+        @Test\n+        public void getPage() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getPage(extractor.getNextPageUrl());\n+            assertThat(streams.getItems().isEmpty(), is(false));\n+            assertThat(streams.hasNextPage(), is(true));\n+        }\n+\n+        @Test\n+        public void getPageMultipleTimes() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getPage(extractor.getNextPageUrl());\n+\n+            //Should work infinitely, but for testing purposes only 3 times\n+            for (int i = 0; i < 3; i++) {\n+                assertThat(streams.hasNextPage(), is(true));\n+                streams = extractor.getPage(streams.getNextPageUrl());\n+            }\n+        }\n+    }\n+\n+    public static class MyMix {\n+\n+        @Before\n+        public void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = (YoutubeMixPlaylistExtractor) YouTube\n+                .getPlaylistExtractor(\n+                    \"https://www.youtube.com/watch?v=\" + videoId + \"&list=RDMM\" + videoId);\n+            extractor.fetchPage();\n+        }\n+\n+        @Test\n+        public void getServiceId() {\n+            assertEquals(YouTube.getServiceId(), extractor.getServiceId());\n+        }\n+\n+        @Test\n+        public void getName() throws Exception {\n+            String name = extractor.getName();\n+            assertEquals(\"My Mix\", name);\n+        }\n+\n+        @Test\n+        public void getThumbnailUrl() throws Exception {\n+            final String thumbnailUrl = extractor.getThumbnailUrl();\n+            assertIsSecureUrl(thumbnailUrl);\n+            assertThat(thumbnailUrl, startsWith(\"https://i.ytimg.com/vi/_AzeUSL9lZc\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUzOTM3NA=="}, "originalCommit": {"oid": "2754133a8c7e3df041c11153c0f8c9f50b0465cd"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTQ4NjkyOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOTo0MzozOFrOF3UmGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOTo0MzozOFrOF3UmGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU1MzQzNA==", "bodyText": "Why throwing another exception from this one? I would let it throw a NullPointerException, it shouldn't be problematic and it would be shown correctly in the app error report page", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393553434", "createdAt": "2020-03-17T09:43:38Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,182 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMNS_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        try {\n+            playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMNS_WATCH_NEXT_RESULTS)\n+                .getObject(PLAYLIST).getObject(PLAYLIST);\n+        } catch (NullPointerException e) {\n+            throw new ExtractionException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2754133a8c7e3df041c11153c0f8c9f50b0465cd"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTU1MDM5OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMDowMDozNVrOF3VOCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMDowMDozNVrOF3VOCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU2MzY1Nw==", "bodyText": "I would move this piece of code into getThumbnailUrlFromId, and maybe throw a ParsingException with a description like \"videoId is empty\".", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393563657", "createdAt": "2020-03-17T10:00:35Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,182 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMNS_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        try {\n+            playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMNS_WATCH_NEXT_RESULTS)\n+                .getObject(PLAYLIST).getObject(PLAYLIST);\n+        } catch (NullPointerException e) {\n+            throw new ExtractionException(e);\n+        }\n+\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        try {\n+            final String name = playlistData.getString(\"title\");\n+            if (name != null) {\n+                return name;\n+            } else {\n+                return \"\";\n+            }\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist name\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            final String videoId;\n+            if (playlistId.startsWith(\"RDMM\")) {\n+                videoId = playlistId.substring(4);\n+            } else {\n+                videoId = playlistId.substring(2);\n+            }\n+            if (videoId.isEmpty()) {\n+                throw new ParsingException(\"\");\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2754133a8c7e3df041c11153c0f8c9f50b0465cd"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDE5MDk1OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzoxMzozMVrOF3bmlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDozMzowNVrOF3e_ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2ODI0Nw==", "bodyText": "Why are you using Long instead of long?", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393668247", "createdAt": "2020-03-17T13:13:31Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    public final static Long MORE_THAN_100 = -2L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec2b0e840adbcc8ae8c5fa25ac5a3420bc818e7"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyMzc1NA==", "bodyText": "Kotlin habit", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393723754", "createdAt": "2020-03-17T14:33:05Z", "author": {"login": "XiangRongLin"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    public final static Long MORE_THAN_100 = -2L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2ODI0Nw=="}, "originalCommit": {"oid": "fec2b0e840adbcc8ae8c5fa25ac5a3420bc818e7"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDE5ODYxOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzoxNTozN1rOF3breA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzoxNTozN1rOF3breA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2OTQ5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        }\n          \n          \n            \n                    }", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393669496", "createdAt": "2020-03-17T13:15:37Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    public final static Long MORE_THAN_100 = -2L;\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec2b0e840adbcc8ae8c5fa25ac5a3420bc818e7"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDcxMTg1OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNToxNTozOFrOF3g42A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzoxODo0N1rOF3mQIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc1NDg0MA==", "bodyText": "One more tab ;-)\nWraps should be indented with two more steps, otherwise they can be confused with the content below", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393754840", "createdAt": "2020-03-17T15:15:38Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeService.java", "diffHunk": "@@ -111,7 +115,7 @@ public KioskList getKioskList() throws ExtractionException {\n                 public KioskExtractor createNewKiosk(StreamingService streamingService,\n                                                      String url,\n                                                      String id)\n-                        throws ExtractionException {\n+                    throws ExtractionException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59e1398b6e61b4df49af3bfcf738b8d0c0a422ba"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgwMTAyOA==", "bodyText": "Done.\nI really hope we can have a code style file, so I can press autoformat again without worrying.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393801028", "createdAt": "2020-03-17T16:17:07Z", "author": {"login": "XiangRongLin"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeService.java", "diffHunk": "@@ -111,7 +115,7 @@ public KioskList getKioskList() throws ExtractionException {\n                 public KioskExtractor createNewKiosk(StreamingService streamingService,\n                                                      String url,\n                                                      String id)\n-                        throws ExtractionException {\n+                    throws ExtractionException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc1NDg0MA=="}, "originalCommit": {"oid": "59e1398b6e61b4df49af3bfcf738b8d0c0a422ba"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0MjcyMw==", "bodyText": "For some reason this in not yet done, even though GitHub told me the was a change on that line. But if on Android Studio you see everything as expected, it is ok. Is not so important ;-)", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393842723", "createdAt": "2020-03-17T17:18:47Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeService.java", "diffHunk": "@@ -111,7 +115,7 @@ public KioskList getKioskList() throws ExtractionException {\n                 public KioskExtractor createNewKiosk(StreamingService streamingService,\n                                                      String url,\n                                                      String id)\n-                        throws ExtractionException {\n+                    throws ExtractionException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc1NDg0MA=="}, "originalCommit": {"oid": "59e1398b6e61b4df49af3bfcf738b8d0c0a422ba"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDcyMTA1OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNToxNzo0NlrOF3g-1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNToxNzo0NlrOF3g-1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc1NjM3Mw==", "bodyText": "This would go in the base playlist extractor, so that it can be used by every service. Also, I just realized maybe a better name is MORE_THAN_100_ITEMS.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393756373", "createdAt": "2020-03-17T15:17:46Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    public final static long MORE_THAN_100 = -2L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59e1398b6e61b4df49af3bfcf738b8d0c0a422ba"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTYzNzA3OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/playlist/PlaylistExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOToxMTowM1rOF3qWAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOToxMTowM1rOF3qWAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkwOTc2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public final static long MORE_THAN_100_ITEMS = -2L;\n          \n          \n            \n                public final static long INFINITE_ITEMS = -2L;\n          \n          \n            \n                public final static long MORE_THAN_100_ITEMS = -3L;", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393909763", "createdAt": "2020-03-17T19:11:03Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/playlist/PlaylistExtractor.java", "diffHunk": "@@ -8,6 +8,8 @@\n \n public abstract class PlaylistExtractor extends ListExtractor<StreamInfoItem> {\n \n+    public final static long MORE_THAN_100_ITEMS = -2L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90b9682f93d7dbb94a387b55095ace3e7b1f40ad"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTYzODI3OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOToxMTozMFrOF3qW3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOToxMTozMFrOF3qW3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkwOTk4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return MORE_THAN_100_ITEMS;\n          \n          \n            \n                    return INFINITE_ITEMS;", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393909980", "createdAt": "2020-03-17T19:11:30Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            return getThumbnailUrlFromId(playlistId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return MORE_THAN_100_ITEMS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90b9682f93d7dbb94a387b55095ace3e7b1f40ad"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjIxMjMxOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "isResolved": true, "comments": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMTo0Mjo0OVrOF4X61g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOTo0NDo1N1rOF7AYkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjQ3MA==", "bodyText": "When using YouTube's logo here, we can also use in other places. We should check legal stuff first. CC @TheAssassin", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r394656470", "createdAt": "2020-03-18T21:42:49Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            return getThumbnailUrlFromId(playlistId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a23efa8d41a05f37b8f523aa08af7e0a9d6c4e1"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1ODQ0OQ==", "bodyText": "I think this should be handled differently in the frontend by not displaying an avatar. @Stypox, @wb9688 What do you think?", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r394658449", "createdAt": "2020-03-18T21:47:12Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            return getThumbnailUrlFromId(playlistId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjQ3MA=="}, "originalCommit": {"oid": "6a23efa8d41a05f37b8f523aa08af7e0a9d6c4e1"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2MTAxOQ==", "bodyText": "IANAL. However, using any brand icons is a bad idea, and might get us into trouble. I don't think it's worth the effort. I haven't had a look whether the linked file would be fine copyright wise either.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r394661019", "createdAt": "2020-03-18T21:53:06Z", "author": {"login": "TheAssassin"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            return getThumbnailUrlFromId(playlistId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjQ3MA=="}, "originalCommit": {"oid": "6a23efa8d41a05f37b8f523aa08af7e0a9d6c4e1"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAwMTg3MQ==", "bodyText": "Ok, so either we put no avatar (which would probably look strange) or we choose an icon from https://material.io/icons that somewhat represents the nature of the playlist and the uploader. I thought of these icons:\n\nRadio: \nAuto renew: \nBrowser:", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r395001871", "createdAt": "2020-03-19T12:52:02Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            return getThumbnailUrlFromId(playlistId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjQ3MA=="}, "originalCommit": {"oid": "6a23efa8d41a05f37b8f523aa08af7e0a9d6c4e1"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg0MDEwOA==", "bodyText": "@XiangRongLin what do you think about this?", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r395840108", "createdAt": "2020-03-20T19:10:17Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            return getThumbnailUrlFromId(playlistId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjQ3MA=="}, "originalCommit": {"oid": "6a23efa8d41a05f37b8f523aa08af7e0a9d6c4e1"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg0Nzg5Nw==", "bodyText": "I'm for either the Radio icon or no icon. Radio since the mix is basically a radio.\nBut that depends on which looks less out of place.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r395847897", "createdAt": "2020-03-20T19:27:32Z", "author": {"login": "XiangRongLin"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            return getThumbnailUrlFromId(playlistId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjQ3MA=="}, "originalCommit": {"oid": "6a23efa8d41a05f37b8f523aa08af7e0a9d6c4e1"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwMzc0MA==", "bodyText": "whatever icons we use, that should be set in the app. It might be okay to return the URL to YouTube's logo in the extractor. However, it should be replaced in the frontend. Our extractor is used by other applications, too. They might want to use the original logo.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r395903740", "createdAt": "2020-03-20T21:45:30Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            return getThumbnailUrlFromId(playlistId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjQ3MA=="}, "originalCommit": {"oid": "6a23efa8d41a05f37b8f523aa08af7e0a9d6c4e1"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk2OTAwOQ==", "bodyText": "Ok, that seems a good idea", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r395969009", "createdAt": "2020-03-21T07:05:06Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            return getThumbnailUrlFromId(playlistId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjQ3MA=="}, "originalCommit": {"oid": "6a23efa8d41a05f37b8f523aa08af7e0a9d6c4e1"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwNTEyNA==", "bodyText": "I don't think we should return a link to YouTube's logo.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396005124", "createdAt": "2020-03-21T16:11:59Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            return getThumbnailUrlFromId(playlistId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjQ3MA=="}, "originalCommit": {"oid": "6a23efa8d41a05f37b8f523aa08af7e0a9d6c4e1"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxNTY1Mg==", "bodyText": "My vote goes to the Radio icon as well.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396015652", "createdAt": "2020-03-21T18:16:46Z", "author": {"login": "opusforlife2"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            return getThumbnailUrlFromId(playlistId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjQ3MA=="}, "originalCommit": {"oid": "6a23efa8d41a05f37b8f523aa08af7e0a9d6c4e1"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA5ODQ2NQ==", "bodyText": "Then i would be for returning a constant and each frontend can decide themself what they want to display based on the constant and legal stuff.\nFor NewPipe it would then be the radio icon.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396098465", "createdAt": "2020-03-22T14:15:31Z", "author": {"login": "XiangRongLin"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            return getThumbnailUrlFromId(playlistId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjQ3MA=="}, "originalCommit": {"oid": "6a23efa8d41a05f37b8f523aa08af7e0a9d6c4e1"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjczMzk5MQ==", "bodyText": "We should not use the wikimedia image though. Here are the icons which are used on the website when the browser does not support SVG:\nhttps://s.ytimg.com/yts/img/favicon_144-vfliLAfaB.png\nhttps://s.ytimg.com/yts/img/favicon_96-vflW9Ec0w.png\nhttps://s.ytimg.com/yts/img/favicon_48-vflVjB_Qk.png\nhttps://s.ytimg.com/yts/img/favicon_32-vflOogEID.png\n\nThen i would be for returning a constant and each frontend can decide themself what they want to display based on the constant and legal stuff.\n\n@XiangRongLin What constant? Can you elaborate the idea? One can check whether the retrieved PlaylistInfo is a YTMix by using YouTubeParsingHelper.isYouTubeMixId(id)", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396733991", "createdAt": "2020-03-23T20:23:57Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            return getThumbnailUrlFromId(playlistId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjQ3MA=="}, "originalCommit": {"oid": "6a23efa8d41a05f37b8f523aa08af7e0a9d6c4e1"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0NTk3Ng==", "bodyText": "@TobiGr I meant as an arbitary string like public static final String YOUTUBE_LOGO = \"youtube_logo\"\nNice finding the png, i somehow only found svg.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396745976", "createdAt": "2020-03-23T20:46:28Z", "author": {"login": "XiangRongLin"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            return getThumbnailUrlFromId(playlistId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjQ3MA=="}, "originalCommit": {"oid": "6a23efa8d41a05f37b8f523aa08af7e0a9d6c4e1"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc1MzczMA==", "bodyText": "@gzsombor: We would like to know your opinion on this as well.\nI personally think it would be best to return \"\" here, but @TobiGr thinks we should return a link to YouTube's logo, as we always return a URL for all other kind of playlists, however @TheAssassin thinks we should avoid logos/brands.\nEither way, in the NewPipe front-end, we're gonna check if service ID equals YouTube's service ID and call YoutubeParsingHelper's function to check whether the playlist ID is a mix. When that's the case, NewPipe will replace it with a radio icon embedded in our app.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396753730", "createdAt": "2020-03-23T21:00:56Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            return getThumbnailUrlFromId(playlistId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjQ3MA=="}, "originalCommit": {"oid": "6a23efa8d41a05f37b8f523aa08af7e0a9d6c4e1"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc1NTcwNg==", "bodyText": "Why even return anything here?\nThis should return an empty string just like the uploader url and name, and this is actually already handled by the front end.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396755706", "createdAt": "2020-03-23T21:04:28Z", "author": {"login": "mauriciocolli"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            return getThumbnailUrlFromId(playlistId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjQ3MA=="}, "originalCommit": {"oid": "6a23efa8d41a05f37b8f523aa08af7e0a9d6c4e1"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2NjEyOQ==", "bodyText": "@gzsombor As a user of the extractor, what solution do you prefer?\nThe YouTube logo, an empty string or a constant?\n@mauriciocolli @wb9688 I'd be okay with returning nothing, too", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396766129", "createdAt": "2020-03-23T21:25:03Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            return getThumbnailUrlFromId(playlistId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjQ3MA=="}, "originalCommit": {"oid": "6a23efa8d41a05f37b8f523aa08af7e0a9d6c4e1"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5NTMzNg==", "bodyText": "What about returning a AvatarIcon class, something like this:\nclass AvatarIcon {\n   String url;\n   IconType type;\n   enum IconType { YOUTUBE_LOGO, OTHER_LOGO, .... }\n}\n\n\nEither the url or the type would be filled - if the URL the frontend could use that, if not, it should revert to some custom magic.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396795336", "createdAt": "2020-03-23T22:29:37Z", "author": {"login": "gzsombor"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            return getThumbnailUrlFromId(playlistId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjQ3MA=="}, "originalCommit": {"oid": "6a23efa8d41a05f37b8f523aa08af7e0a9d6c4e1"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM5NzMxNA==", "bodyText": "@gzsombor That's basically done in #268. So we should wait for this PR to be merged. Let's go with the empty string for now and change this later in or after #268\n@XiangRongLin Can you change this to\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";\n          \n          \n            \n                    return \"\";", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r397397314", "createdAt": "2020-03-24T19:10:00Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            return getThumbnailUrlFromId(playlistId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjQ3MA=="}, "originalCommit": {"oid": "6a23efa8d41a05f37b8f523aa08af7e0a9d6c4e1"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQxNjU5Mw==", "bodyText": "Ok, I was about to ask ;-)", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r397416593", "createdAt": "2020-03-24T19:44:57Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            return getThumbnailUrlFromId(playlistId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjQ3MA=="}, "originalCommit": {"oid": "6a23efa8d41a05f37b8f523aa08af7e0a9d6c4e1"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Mzc5Njc5OnYy", "diffSide": "RIGHT", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractorTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMDo1NjozOFrOF5i98A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwODozOToyMFrOF5oWwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4NjA2NA==", "bodyText": "These should be @BeforeClass, otherwise the testing time skyrockets (it just took me 2 minutes just to run this class).", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r395886064", "createdAt": "2020-03-20T20:56:38Z", "author": {"login": "Stypox"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractorTest.java", "diffHunk": "@@ -0,0 +1,241 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.junit.Assert.*;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ServiceList.YouTube;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.ListExtractor.InfoItemsPage;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+\n+public class YoutubeMixPlaylistExtractorTest {\n+\n+    private static YoutubeMixPlaylistExtractor extractor;\n+    private static String videoId = \"_AzeUSL9lZc\";\n+    private static String videoTitle = \"Most Beautiful And Emotional  Piano: Anime Music Shigatsu wa Kimi no Uso OST IMO\";\n+\n+    public static class Mix {\n+\n+        @Before", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9a084f8f9611a87d0f8d6f309a40429304b2ac9"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4ODgyNw==", "bodyText": "Yeah, that makes a lot of sense. That probably is also the reason why the recaptcha are appearing.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r395888827", "createdAt": "2020-03-20T21:03:48Z", "author": {"login": "XiangRongLin"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractorTest.java", "diffHunk": "@@ -0,0 +1,241 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.junit.Assert.*;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ServiceList.YouTube;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.ListExtractor.InfoItemsPage;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+\n+public class YoutubeMixPlaylistExtractorTest {\n+\n+    private static YoutubeMixPlaylistExtractor extractor;\n+    private static String videoId = \"_AzeUSL9lZc\";\n+    private static String videoTitle = \"Most Beautiful And Emotional  Piano: Anime Music Shigatsu wa Kimi no Uso OST IMO\";\n+\n+    public static class Mix {\n+\n+        @Before", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4NjA2NA=="}, "originalCommit": {"oid": "f9a084f8f9611a87d0f8d6f309a40429304b2ac9"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4OTU5OQ==", "bodyText": "May I change it or will you do it?", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r395889599", "createdAt": "2020-03-20T21:06:01Z", "author": {"login": "Stypox"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractorTest.java", "diffHunk": "@@ -0,0 +1,241 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.junit.Assert.*;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ServiceList.YouTube;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.ListExtractor.InfoItemsPage;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+\n+public class YoutubeMixPlaylistExtractorTest {\n+\n+    private static YoutubeMixPlaylistExtractor extractor;\n+    private static String videoId = \"_AzeUSL9lZc\";\n+    private static String videoTitle = \"Most Beautiful And Emotional  Piano: Anime Music Shigatsu wa Kimi no Uso OST IMO\";\n+\n+    public static class Mix {\n+\n+        @Before", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4NjA2NA=="}, "originalCommit": {"oid": "f9a084f8f9611a87d0f8d6f309a40429304b2ac9"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk3MjEwMQ==", "bodyText": "@Stypox Just changing it as is, produces NullPointerExceptions in some test. I'll have to look into it.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r395972101", "createdAt": "2020-03-21T08:00:09Z", "author": {"login": "XiangRongLin"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractorTest.java", "diffHunk": "@@ -0,0 +1,241 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.junit.Assert.*;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ServiceList.YouTube;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.ListExtractor.InfoItemsPage;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+\n+public class YoutubeMixPlaylistExtractorTest {\n+\n+    private static YoutubeMixPlaylistExtractor extractor;\n+    private static String videoId = \"_AzeUSL9lZc\";\n+    private static String videoTitle = \"Most Beautiful And Emotional  Piano: Anime Music Shigatsu wa Kimi no Uso OST IMO\";\n+\n+    public static class Mix {\n+\n+        @Before", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4NjA2NA=="}, "originalCommit": {"oid": "f9a084f8f9611a87d0f8d6f309a40429304b2ac9"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk3NDMzNg==", "bodyText": "@Stypox I changed it. Was because i had 2 tests for invalid urls, which set the data to null", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r395974336", "createdAt": "2020-03-21T08:39:20Z", "author": {"login": "XiangRongLin"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractorTest.java", "diffHunk": "@@ -0,0 +1,241 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.junit.Assert.*;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ServiceList.YouTube;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.ListExtractor.InfoItemsPage;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+\n+public class YoutubeMixPlaylistExtractorTest {\n+\n+    private static YoutubeMixPlaylistExtractor extractor;\n+    private static String videoId = \"_AzeUSL9lZc\";\n+    private static String videoTitle = \"Most Beautiful And Emotional  Piano: Anime Music Shigatsu wa Kimi no Uso OST IMO\";\n+\n+    public static class Mix {\n+\n+        @Before", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4NjA2NA=="}, "originalCommit": {"oid": "f9a084f8f9611a87d0f8d6f309a40429304b2ac9"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDY0MTQyOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeParsingHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNjoyNDo1NlrOF5qTHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNjoyNDo1NlrOF5qTHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwNjE3Mg==", "bodyText": "&& !playlistId.startsWith(\"RDAMVM\"), so that it won't accept YouTube Music mixes. You'll also need to do that in the LinkHandler, so that NewPipe will open those as just a video until we implement YouTube Music mixes.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396006172", "createdAt": "2020-03-21T16:24:56Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeParsingHelper.java", "diffHunk": "@@ -163,6 +163,16 @@ public static Calendar parseDateFrom(String textualUploadDate) throws ParsingExc\n         return uploadDate;\n     }\n \n+    /**\n+     * Checks if the given playlist id is a mix (auto-generated playlist)\n+     * Ids from a mix start with \"RD\"\n+     * @param playlistId\n+     * @return Whether given id belongs to a mix\n+     */\n+    public static boolean isYoutubeMixId(String playlistId) {\n+        return playlistId.startsWith(\"RD\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30b182516b4fff0d3b6986172ecfcd7ce34221c9"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDY0ODA4OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNjozNToyMlrOF5qWkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNzo0MTozN1rOF5qsIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwNzA1Ng==", "bodyText": "Why are you storing those as constants here? We don't do that anywhere else either\u2026", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396007056", "createdAt": "2020-03-21T16:35:22Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30b182516b4fff0d3b6986172ecfcd7ce34221c9"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwNzQ0Ng==", "bodyText": "Because i would sometime make a typo in those strings and wonder for 10 minutes where my error was. With the constants i can let my IDE autocomplete for me.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396007446", "createdAt": "2020-03-21T16:40:06Z", "author": {"login": "XiangRongLin"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwNzA1Ng=="}, "originalCommit": {"oid": "30b182516b4fff0d3b6986172ecfcd7ce34221c9"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxMjU3Nw==", "bodyText": "Please just follow the style of the rest of the extractors.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396012577", "createdAt": "2020-03-21T17:41:37Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwNzA1Ng=="}, "originalCommit": {"oid": "30b182516b4fff0d3b6986172ecfcd7ce34221c9"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDY0OTY3OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNjozNzo0OFrOF5qXWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNjozNzo0OFrOF5qXWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwNzI1Ng==", "bodyText": "You don't need to call collector.reset() here as every time you call it, you already have a new empty collector.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396007256", "createdAt": "2020-03-21T16:37:48Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            return getThumbnailUrlFromId(playlistId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return ListExtractor.ITEM_COUNT_INFINITE;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(CONTENTS));\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    @Override\n+    public String getNextPageUrl() throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistData.getArray(CONTENTS)\n+            .get(playlistData.getArray(CONTENTS).size() - 1));\n+        if (lastStream == null || lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER) == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+        return \"https://youtube.com\" + lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER)\n+            .getObject(\"navigationEndpoint\").getObject(\"commandMetadata\")\n+            .getObject(\"webCommandMetadata\").getString(\"url\") + \"&pbj=1\";\n+    }\n+\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getPage(final String pageUrl)\n+            throws ExtractionException, IOException {\n+        if (pageUrl == null || pageUrl.isEmpty()) {\n+            throw new ExtractionException(\n+                new IllegalArgumentException(\"Page url is empty or null\"));\n+        }\n+\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        final JsonArray ajaxJson = getJsonResponse(pageUrl, getExtractorLocalization());\n+        playlistData =\n+            ajaxJson.getObject(3).getObject(RESPONSE).getObject(CONTENTS)\n+                .getObject(TWO_COLUMN_WATCH_NEXT_RESULTS).getObject(PLAYLIST)\n+                .getObject(PLAYLIST);\n+        final JsonArray streams = playlistData.getArray(CONTENTS);\n+        //Because continuation requests are created with the last video of previous request as start\n+        streams.remove(0);\n+        collectStreamsFrom(collector, streams);\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    private void collectStreamsFrom(\n+            @Nonnull StreamInfoItemsCollector collector,\n+            @Nullable JsonArray streams) {\n+        collector.reset();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30b182516b4fff0d3b6986172ecfcd7ce34221c9"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDY1MjA5OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNjo0MTo0NVrOF5qYnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNzo1MToxMVrOF5qvqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwNzU4MQ==", "bodyText": "Why are you assigning playlistData again here? If you call getInitialPage() after that, it won't return the initial page.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396007581", "createdAt": "2020-03-21T16:41:45Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            return getThumbnailUrlFromId(playlistId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return ListExtractor.ITEM_COUNT_INFINITE;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(CONTENTS));\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    @Override\n+    public String getNextPageUrl() throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistData.getArray(CONTENTS)\n+            .get(playlistData.getArray(CONTENTS).size() - 1));\n+        if (lastStream == null || lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER) == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+        return \"https://youtube.com\" + lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER)\n+            .getObject(\"navigationEndpoint\").getObject(\"commandMetadata\")\n+            .getObject(\"webCommandMetadata\").getString(\"url\") + \"&pbj=1\";\n+    }\n+\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getPage(final String pageUrl)\n+            throws ExtractionException, IOException {\n+        if (pageUrl == null || pageUrl.isEmpty()) {\n+            throw new ExtractionException(\n+                new IllegalArgumentException(\"Page url is empty or null\"));\n+        }\n+\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        final JsonArray ajaxJson = getJsonResponse(pageUrl, getExtractorLocalization());\n+        playlistData =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30b182516b4fff0d3b6986172ecfcd7ce34221c9"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxMTAzNg==", "bodyText": "Because i needed the updated playlistData for when getNextPageUrl() gets called multiple times.\nI'just add a initialPlaylistData variable to the class", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396011036", "createdAt": "2020-03-21T17:22:52Z", "author": {"login": "XiangRongLin"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            return getThumbnailUrlFromId(playlistId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return ListExtractor.ITEM_COUNT_INFINITE;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(CONTENTS));\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    @Override\n+    public String getNextPageUrl() throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistData.getArray(CONTENTS)\n+            .get(playlistData.getArray(CONTENTS).size() - 1));\n+        if (lastStream == null || lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER) == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+        return \"https://youtube.com\" + lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER)\n+            .getObject(\"navigationEndpoint\").getObject(\"commandMetadata\")\n+            .getObject(\"webCommandMetadata\").getString(\"url\") + \"&pbj=1\";\n+    }\n+\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getPage(final String pageUrl)\n+            throws ExtractionException, IOException {\n+        if (pageUrl == null || pageUrl.isEmpty()) {\n+            throw new ExtractionException(\n+                new IllegalArgumentException(\"Page url is empty or null\"));\n+        }\n+\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        final JsonArray ajaxJson = getJsonResponse(pageUrl, getExtractorLocalization());\n+        playlistData =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwNzU4MQ=="}, "originalCommit": {"oid": "30b182516b4fff0d3b6986172ecfcd7ce34221c9"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxMjQzNQ==", "bodyText": "getNextPageUrl() should always be relative to the initial page: https://github.com/TeamNewPipe/NewPipeExtractor/blob/dev/extractor/src/main/java/org/schabi/newpipe/extractor/ListExtractor.java#L30. Make a separate getNextPageUrlFrom() function like in the other extractors.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396012435", "createdAt": "2020-03-21T17:40:19Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            return getThumbnailUrlFromId(playlistId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return ListExtractor.ITEM_COUNT_INFINITE;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(CONTENTS));\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    @Override\n+    public String getNextPageUrl() throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistData.getArray(CONTENTS)\n+            .get(playlistData.getArray(CONTENTS).size() - 1));\n+        if (lastStream == null || lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER) == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+        return \"https://youtube.com\" + lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER)\n+            .getObject(\"navigationEndpoint\").getObject(\"commandMetadata\")\n+            .getObject(\"webCommandMetadata\").getString(\"url\") + \"&pbj=1\";\n+    }\n+\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getPage(final String pageUrl)\n+            throws ExtractionException, IOException {\n+        if (pageUrl == null || pageUrl.isEmpty()) {\n+            throw new ExtractionException(\n+                new IllegalArgumentException(\"Page url is empty or null\"));\n+        }\n+\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        final JsonArray ajaxJson = getJsonResponse(pageUrl, getExtractorLocalization());\n+        playlistData =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwNzU4MQ=="}, "originalCommit": {"oid": "30b182516b4fff0d3b6986172ecfcd7ce34221c9"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxMzQ4MQ==", "bodyText": "oh, I completly missed that. I'll fix it", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396013481", "createdAt": "2020-03-21T17:51:11Z", "author": {"login": "XiangRongLin"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            return getThumbnailUrlFromId(playlistId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return ListExtractor.ITEM_COUNT_INFINITE;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(CONTENTS));\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    @Override\n+    public String getNextPageUrl() throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistData.getArray(CONTENTS)\n+            .get(playlistData.getArray(CONTENTS).size() - 1));\n+        if (lastStream == null || lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER) == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+        return \"https://youtube.com\" + lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER)\n+            .getObject(\"navigationEndpoint\").getObject(\"commandMetadata\")\n+            .getObject(\"webCommandMetadata\").getString(\"url\") + \"&pbj=1\";\n+    }\n+\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getPage(final String pageUrl)\n+            throws ExtractionException, IOException {\n+        if (pageUrl == null || pageUrl.isEmpty()) {\n+            throw new ExtractionException(\n+                new IllegalArgumentException(\"Page url is empty or null\"));\n+        }\n+\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        final JsonArray ajaxJson = getJsonResponse(pageUrl, getExtractorLocalization());\n+        playlistData =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwNzU4MQ=="}, "originalCommit": {"oid": "30b182516b4fff0d3b6986172ecfcd7ce34221c9"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDY1NDcyOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNjo0NTo0M1rOF5qZ6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQyMDoxMTowOFrOF5rdVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwNzkxNQ==", "bodyText": "You should call getUrlFromNavigationEndpoint() and just append &pbj=1. You'll first need to modify getUrlFromNavigationEndpoint() so that it handles the index parameter.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396007915", "createdAt": "2020-03-21T16:45:43Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            return getThumbnailUrlFromId(playlistId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return ListExtractor.ITEM_COUNT_INFINITE;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(CONTENTS));\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    @Override\n+    public String getNextPageUrl() throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistData.getArray(CONTENTS)\n+            .get(playlistData.getArray(CONTENTS).size() - 1));\n+        if (lastStream == null || lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER) == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+        return \"https://youtube.com\" + lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER)\n+            .getObject(\"navigationEndpoint\").getObject(\"commandMetadata\")\n+            .getObject(\"webCommandMetadata\").getString(\"url\") + \"&pbj=1\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30b182516b4fff0d3b6986172ecfcd7ce34221c9"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxNDE1Mg==", "bodyText": "I just saw that I already handled the index incorrectly, since i assumed the index in the url would count upwards. But it always stays at 25.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396014152", "createdAt": "2020-03-21T17:59:15Z", "author": {"login": "XiangRongLin"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            return getThumbnailUrlFromId(playlistId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return ListExtractor.ITEM_COUNT_INFINITE;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(CONTENTS));\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    @Override\n+    public String getNextPageUrl() throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistData.getArray(CONTENTS)\n+            .get(playlistData.getArray(CONTENTS).size() - 1));\n+        if (lastStream == null || lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER) == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+        return \"https://youtube.com\" + lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER)\n+            .getObject(\"navigationEndpoint\").getObject(\"commandMetadata\")\n+            .getObject(\"webCommandMetadata\").getString(\"url\") + \"&pbj=1\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwNzkxNQ=="}, "originalCommit": {"oid": "30b182516b4fff0d3b6986172ecfcd7ce34221c9"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAyNDgzMA==", "bodyText": "Is there a reason for using &amq; instead of just & since this is throwing a malformed url exception for me when i create new extractor with the return value of getUrlFromNavigationEndpoint()\nhttps://github.com/TeamNewPipe/NewPipeExtractor/blob/dev/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeParsingHelper.java#L302", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396024830", "createdAt": "2020-03-21T20:07:05Z", "author": {"login": "XiangRongLin"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            return getThumbnailUrlFromId(playlistId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return ListExtractor.ITEM_COUNT_INFINITE;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(CONTENTS));\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    @Override\n+    public String getNextPageUrl() throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistData.getArray(CONTENTS)\n+            .get(playlistData.getArray(CONTENTS).size() - 1));\n+        if (lastStream == null || lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER) == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+        return \"https://youtube.com\" + lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER)\n+            .getObject(\"navigationEndpoint\").getObject(\"commandMetadata\")\n+            .getObject(\"webCommandMetadata\").getString(\"url\") + \"&pbj=1\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwNzkxNQ=="}, "originalCommit": {"oid": "30b182516b4fff0d3b6986172ecfcd7ce34221c9"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAyNTE3NQ==", "bodyText": "Yes, there's a reason, but it's wrong. That function should return it with &, which should then be replaced with &amp; at https://github.com/TeamNewPipe/NewPipeExtractor/blob/dev/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeParsingHelper.java#L319.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396025175", "createdAt": "2020-03-21T20:11:08Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            return getThumbnailUrlFromId(playlistId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return ListExtractor.ITEM_COUNT_INFINITE;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(CONTENTS));\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    @Override\n+    public String getNextPageUrl() throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistData.getArray(CONTENTS)\n+            .get(playlistData.getArray(CONTENTS).size() - 1));\n+        if (lastStream == null || lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER) == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+        return \"https://youtube.com\" + lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER)\n+            .getObject(\"navigationEndpoint\").getObject(\"commandMetadata\")\n+            .getObject(\"webCommandMetadata\").getString(\"url\") + \"&pbj=1\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwNzkxNQ=="}, "originalCommit": {"oid": "30b182516b4fff0d3b6986172ecfcd7ce34221c9"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NTI2NDY0OnYy", "diffSide": "RIGHT", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxMjoyMTozMlrOF5vQGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODowMzoxMlrOF6Roag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4NzMyMg==", "bodyText": "Use assertTrue and assertFalse", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396087322", "createdAt": "2020-03-22T12:21:32Z", "author": {"login": "wb9688"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractorTest.java", "diffHunk": "@@ -0,0 +1,325 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.junit.Assert.*;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ServiceList.YouTube;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.ListExtractor.InfoItemsPage;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.services.DefaultTests;\n+import org.schabi.newpipe.extractor.stream.Stream;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+\n+public class YoutubeMixPlaylistExtractorTest {\n+\n+    private static YoutubeMixPlaylistExtractor extractor;\n+    private static String videoId = \"_AzeUSL9lZc\";\n+    private static String videoTitle = \"Most Beautiful And Emotional  Piano: Anime Music Shigatsu wa Kimi no Uso OST IMO\";\n+\n+    public static class Mix {\n+\n+        @BeforeClass\n+        public static void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = (YoutubeMixPlaylistExtractor) YouTube\n+                .getPlaylistExtractor(\n+                    \"https://www.youtube.com/watch?v=\" + videoId + \"&list=RD\" + videoId);\n+            extractor.fetchPage();\n+        }\n+\n+        @Test\n+        public void getServiceId() {\n+            assertEquals(YouTube.getServiceId(), extractor.getServiceId());\n+        }\n+\n+        @Test\n+        public void getName() throws Exception {\n+            String name = extractor.getName();\n+            assertThat(name, startsWith(\"Mix\"));\n+            assertThat(name, containsString(videoTitle));\n+        }\n+\n+        @Test\n+        public void getThumbnailUrl() throws Exception {\n+            final String thumbnailUrl = extractor.getThumbnailUrl();\n+            assertIsSecureUrl(thumbnailUrl);\n+            assertThat(thumbnailUrl, containsString(\"yt\"));\n+            assertThat(thumbnailUrl, containsString(videoId));\n+        }\n+\n+        @Test\n+        public void getNextPageUrl() throws Exception {\n+            final String nextPageUrl = extractor.getNextPageUrl();\n+            assertIsSecureUrl(nextPageUrl);\n+            assertThat(nextPageUrl, containsString(\"list=RD\" + videoId));\n+        }\n+\n+        @Test\n+        public void getInitialPage() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getInitialPage();\n+            assertThat(streams.getItems().isEmpty(), is(false));\n+            assertThat(streams.hasNextPage(), is(true));\n+        }\n+\n+        @Test\n+        public void getPage() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getPage(extractor.getNextPageUrl());\n+            assertThat(streams.getItems().isEmpty(), is(false));\n+            assertThat(streams.hasNextPage(), is(true));\n+        }\n+\n+        @Test\n+        public void getPageMultipleTimes() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getPage(extractor.getNextPageUrl());\n+\n+            //Should work infinitely, but for testing purposes only 3 times\n+            for (int i = 0; i < 3; i++) {\n+                assertThat(streams.hasNextPage(), is(true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ef3a27161170ca465012c61f782952e51b970be"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY1MDYwMg==", "bodyText": "IMO that's okay. We can keep it", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396650602", "createdAt": "2020-03-23T18:03:12Z", "author": {"login": "TobiGr"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractorTest.java", "diffHunk": "@@ -0,0 +1,325 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.junit.Assert.*;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ServiceList.YouTube;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.ListExtractor.InfoItemsPage;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.services.DefaultTests;\n+import org.schabi.newpipe.extractor.stream.Stream;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+\n+public class YoutubeMixPlaylistExtractorTest {\n+\n+    private static YoutubeMixPlaylistExtractor extractor;\n+    private static String videoId = \"_AzeUSL9lZc\";\n+    private static String videoTitle = \"Most Beautiful And Emotional  Piano: Anime Music Shigatsu wa Kimi no Uso OST IMO\";\n+\n+    public static class Mix {\n+\n+        @BeforeClass\n+        public static void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = (YoutubeMixPlaylistExtractor) YouTube\n+                .getPlaylistExtractor(\n+                    \"https://www.youtube.com/watch?v=\" + videoId + \"&list=RD\" + videoId);\n+            extractor.fetchPage();\n+        }\n+\n+        @Test\n+        public void getServiceId() {\n+            assertEquals(YouTube.getServiceId(), extractor.getServiceId());\n+        }\n+\n+        @Test\n+        public void getName() throws Exception {\n+            String name = extractor.getName();\n+            assertThat(name, startsWith(\"Mix\"));\n+            assertThat(name, containsString(videoTitle));\n+        }\n+\n+        @Test\n+        public void getThumbnailUrl() throws Exception {\n+            final String thumbnailUrl = extractor.getThumbnailUrl();\n+            assertIsSecureUrl(thumbnailUrl);\n+            assertThat(thumbnailUrl, containsString(\"yt\"));\n+            assertThat(thumbnailUrl, containsString(videoId));\n+        }\n+\n+        @Test\n+        public void getNextPageUrl() throws Exception {\n+            final String nextPageUrl = extractor.getNextPageUrl();\n+            assertIsSecureUrl(nextPageUrl);\n+            assertThat(nextPageUrl, containsString(\"list=RD\" + videoId));\n+        }\n+\n+        @Test\n+        public void getInitialPage() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getInitialPage();\n+            assertThat(streams.getItems().isEmpty(), is(false));\n+            assertThat(streams.hasNextPage(), is(true));\n+        }\n+\n+        @Test\n+        public void getPage() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getPage(extractor.getNextPageUrl());\n+            assertThat(streams.getItems().isEmpty(), is(false));\n+            assertThat(streams.hasNextPage(), is(true));\n+        }\n+\n+        @Test\n+        public void getPageMultipleTimes() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getPage(extractor.getNextPageUrl());\n+\n+            //Should work infinitely, but for testing purposes only 3 times\n+            for (int i = 0; i < 3; i++) {\n+                assertThat(streams.hasNextPage(), is(true));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4NzMyMg=="}, "originalCommit": {"oid": "0ef3a27161170ca465012c61f782952e51b970be"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NTI2ODgxOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxMjoyODowN1rOF5vSQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxMzoyMjowM1rOF5vmkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4Nzg3NQ==", "bodyText": "I still think getUrlFromNavigationEndpoint needs to put the index in the URL. You actually don't need to track it, you just need to do navigationEndpoint.getObject(\"watchEndpoint\").getInt(\"index\") + 1.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396087875", "createdAt": "2020-03-22T12:28:07Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,188 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    private JsonObject initialData;\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        initialData = ajaxJson.getObject(3).getObject(\"response\");\n+        playlistData = initialData.getObject(\"contents\").getObject(\"twoColumnWatchNextResults\")\n+            .getObject(\"playlist\").getObject(\"playlist\");\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            try {\n+                return getThumbnailUrlFromPlaylistId(playlistId);\n+            } catch (ParsingException e) {\n+                //fallback to thumbnail of current video. Always the case for channel mix\n+                return getThumbnailUrlFromVideoId(\n+                    initialData.getObject(\"currentVideoEndpoint\").getObject(\"watchEndpoint\")\n+                        .getString(\"videoId\"));\n+            }\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return ListExtractor.ITEM_COUNT_INFINITE;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(\"contents\"));\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    @Override\n+    public String getNextPageUrl() throws ExtractionException {\n+        return getNextPageUrlFrom(playlistData);\n+    }\n+\n+    private String getNextPageUrlFrom(JsonObject playlistData) throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistData.getArray(\"contents\")\n+            .get(playlistData.getArray(\"contents\").size() - 1));\n+        if (lastStream == null || lastStream.getObject(\"playlistPanelVideoRenderer\") == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+        //Index of video in mix is missing, but adding it doesn't appear to have any effect.\n+        //And since the index needs to be tracked by us, it is left out", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ef3a27161170ca465012c61f782952e51b970be"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4ODQ3Ng==", "bodyText": "With tracking i mean the behaviour you get when you play a mix on youtube.com\nIf you always select the last video in the mix the index jumps from 1 to 25 to 49 to 50 and then stays at 50.\nBut the index value in watchEndpoint is always 24.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396088476", "createdAt": "2020-03-22T12:34:42Z", "author": {"login": "XiangRongLin"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,188 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    private JsonObject initialData;\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        initialData = ajaxJson.getObject(3).getObject(\"response\");\n+        playlistData = initialData.getObject(\"contents\").getObject(\"twoColumnWatchNextResults\")\n+            .getObject(\"playlist\").getObject(\"playlist\");\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            try {\n+                return getThumbnailUrlFromPlaylistId(playlistId);\n+            } catch (ParsingException e) {\n+                //fallback to thumbnail of current video. Always the case for channel mix\n+                return getThumbnailUrlFromVideoId(\n+                    initialData.getObject(\"currentVideoEndpoint\").getObject(\"watchEndpoint\")\n+                        .getString(\"videoId\"));\n+            }\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return ListExtractor.ITEM_COUNT_INFINITE;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(\"contents\"));\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    @Override\n+    public String getNextPageUrl() throws ExtractionException {\n+        return getNextPageUrlFrom(playlistData);\n+    }\n+\n+    private String getNextPageUrlFrom(JsonObject playlistData) throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistData.getArray(\"contents\")\n+            .get(playlistData.getArray(\"contents\").size() - 1));\n+        if (lastStream == null || lastStream.getObject(\"playlistPanelVideoRenderer\") == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+        //Index of video in mix is missing, but adding it doesn't appear to have any effect.\n+        //And since the index needs to be tracked by us, it is left out", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4Nzg3NQ=="}, "originalCommit": {"oid": "0ef3a27161170ca465012c61f782952e51b970be"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4OTkyOQ==", "bodyText": "I don't think so:", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396089929", "createdAt": "2020-03-22T12:49:42Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,188 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    private JsonObject initialData;\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        initialData = ajaxJson.getObject(3).getObject(\"response\");\n+        playlistData = initialData.getObject(\"contents\").getObject(\"twoColumnWatchNextResults\")\n+            .getObject(\"playlist\").getObject(\"playlist\");\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            try {\n+                return getThumbnailUrlFromPlaylistId(playlistId);\n+            } catch (ParsingException e) {\n+                //fallback to thumbnail of current video. Always the case for channel mix\n+                return getThumbnailUrlFromVideoId(\n+                    initialData.getObject(\"currentVideoEndpoint\").getObject(\"watchEndpoint\")\n+                        .getString(\"videoId\"));\n+            }\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return ListExtractor.ITEM_COUNT_INFINITE;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(\"contents\"));\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    @Override\n+    public String getNextPageUrl() throws ExtractionException {\n+        return getNextPageUrlFrom(playlistData);\n+    }\n+\n+    private String getNextPageUrlFrom(JsonObject playlistData) throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistData.getArray(\"contents\")\n+            .get(playlistData.getArray(\"contents\").size() - 1));\n+        if (lastStream == null || lastStream.getObject(\"playlistPanelVideoRenderer\") == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+        //Index of video in mix is missing, but adding it doesn't appear to have any effect.\n+        //And since the index needs to be tracked by us, it is left out", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4Nzg3NQ=="}, "originalCommit": {"oid": "0ef3a27161170ca465012c61f782952e51b970be"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA5MDM4MQ==", "bodyText": "Is that in the browser?\nSince i couldn't get it to simulate that behaviour with the extractor", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396090381", "createdAt": "2020-03-22T12:54:26Z", "author": {"login": "XiangRongLin"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,188 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    private JsonObject initialData;\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        initialData = ajaxJson.getObject(3).getObject(\"response\");\n+        playlistData = initialData.getObject(\"contents\").getObject(\"twoColumnWatchNextResults\")\n+            .getObject(\"playlist\").getObject(\"playlist\");\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            try {\n+                return getThumbnailUrlFromPlaylistId(playlistId);\n+            } catch (ParsingException e) {\n+                //fallback to thumbnail of current video. Always the case for channel mix\n+                return getThumbnailUrlFromVideoId(\n+                    initialData.getObject(\"currentVideoEndpoint\").getObject(\"watchEndpoint\")\n+                        .getString(\"videoId\"));\n+            }\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return ListExtractor.ITEM_COUNT_INFINITE;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(\"contents\"));\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    @Override\n+    public String getNextPageUrl() throws ExtractionException {\n+        return getNextPageUrlFrom(playlistData);\n+    }\n+\n+    private String getNextPageUrlFrom(JsonObject playlistData) throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistData.getArray(\"contents\")\n+            .get(playlistData.getArray(\"contents\").size() - 1));\n+        if (lastStream == null || lastStream.getObject(\"playlistPanelVideoRenderer\") == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+        //Index of video in mix is missing, but adding it doesn't appear to have any effect.\n+        //And since the index needs to be tracked by us, it is left out", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4Nzg3NQ=="}, "originalCommit": {"oid": "0ef3a27161170ca465012c61f782952e51b970be"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA5MzA3Mw==", "bodyText": "Yes, that's in Firefox. I'll try to reproduce.\nEdit: it seems to have something to do with the cookies.\nEdit 2: it's the VISITOR_INFO1_LIVE cookie.\nEdit 3: I think you should leave it like you have it currently.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396093073", "createdAt": "2020-03-22T13:22:03Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,188 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    private JsonObject initialData;\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        initialData = ajaxJson.getObject(3).getObject(\"response\");\n+        playlistData = initialData.getObject(\"contents\").getObject(\"twoColumnWatchNextResults\")\n+            .getObject(\"playlist\").getObject(\"playlist\");\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            try {\n+                return getThumbnailUrlFromPlaylistId(playlistId);\n+            } catch (ParsingException e) {\n+                //fallback to thumbnail of current video. Always the case for channel mix\n+                return getThumbnailUrlFromVideoId(\n+                    initialData.getObject(\"currentVideoEndpoint\").getObject(\"watchEndpoint\")\n+                        .getString(\"videoId\"));\n+            }\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return ListExtractor.ITEM_COUNT_INFINITE;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(\"contents\"));\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    @Override\n+    public String getNextPageUrl() throws ExtractionException {\n+        return getNextPageUrlFrom(playlistData);\n+    }\n+\n+    private String getNextPageUrlFrom(JsonObject playlistData) throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistData.getArray(\"contents\")\n+            .get(playlistData.getArray(\"contents\").size() - 1));\n+        if (lastStream == null || lastStream.getObject(\"playlistPanelVideoRenderer\") == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+        //Index of video in mix is missing, but adding it doesn't appear to have any effect.\n+        //And since the index needs to be tracked by us, it is left out", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4Nzg3NQ=="}, "originalCommit": {"oid": "0ef3a27161170ca465012c61f782952e51b970be"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTk5MTIwOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzowMTo0OVrOG_gO1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzowMTo0OVrOG_gO1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0MTU1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Checks if the given playlist id is a youtube mix (auto-generated playlist)\n          \n          \n            \n                 * Ids from a youtube mix start with \"RD\"\n          \n          \n            \n                 * @param playlistId\n          \n          \n            \n                 * @return Whether given id belongs to a youtube mix\n          \n          \n            \n                 * Checks if the given playlist id is a YouTube Mix (auto-generated playlist)\n          \n          \n            \n                 * Ids from a YouTube Mix start with \"RD\"\n          \n          \n            \n                 * @param playlistId\n          \n          \n            \n                 * @return Whether given id belongs to a YouTube Mix", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469241558", "createdAt": "2020-08-12T13:01:49Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java", "diffHunk": "@@ -195,6 +202,26 @@ public static Calendar parseDateFrom(String textualUploadDate) throws ParsingExc\n         return uploadDate;\n     }\n \n+    /**\n+     * Checks if the given playlist id is a youtube mix (auto-generated playlist)\n+     * Ids from a youtube mix start with \"RD\"\n+     * @param playlistId\n+     * @return Whether given id belongs to a youtube mix", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f465837ec12a9b46fa41ff47881bc8936ff96892"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjAxMDk2OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzowNjozN1rOG_gaew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzowNjozN1rOG_gaew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0NDUzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Checks if the given playlist id is a youtube music mix (auto-generated playlist)\n          \n          \n            \n                 * Ids from a youtube music mix start with \"RD\"\n          \n          \n            \n                 * @param playlistId\n          \n          \n            \n                 * @return Whether given id belongs to a youtube music mix\n          \n          \n            \n                 * Checks if the given playlist id is a YouTube Music Mix (auto-generated playlist)\n          \n          \n            \n                 * Ids from a YouTube Music Mix start with \"RD\"\n          \n          \n            \n                 * @param playlistId\n          \n          \n            \n                 * @return Whether given id belongs to a YouTube Music Mix", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469244539", "createdAt": "2020-08-12T13:06:37Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java", "diffHunk": "@@ -195,6 +202,26 @@ public static Calendar parseDateFrom(String textualUploadDate) throws ParsingExc\n         return uploadDate;\n     }\n \n+    /**\n+     * Checks if the given playlist id is a youtube mix (auto-generated playlist)\n+     * Ids from a youtube mix start with \"RD\"\n+     * @param playlistId\n+     * @return Whether given id belongs to a youtube mix\n+     */\n+    public static boolean isYoutubeMixId(String playlistId) {\n+        return playlistId.startsWith(\"RD\") && !isYoutubeMusicMixId(playlistId);\n+    }\n+\n+    /**\n+     * Checks if the given playlist id is a youtube music mix (auto-generated playlist)\n+     * Ids from a youtube music mix start with \"RD\"\n+     * @param playlistId\n+     * @return Whether given id belongs to a youtube music mix", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f465837ec12a9b46fa41ff47881bc8936ff96892"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjAzODMwOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubePlaylistLinkHandlerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoxMzoxM1rOG_gq8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoxMzoxM1rOG_gq8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0ODc1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * If it is a mix (auto-generated playlist) url, return a Linkhandler where the url is like.\n          \n          \n            \n                 * youtube.com/watch?v=videoId&list=playlistId\n          \n          \n            \n                 * If it is a mix (auto-generated playlist) URL, return a {@link LinkHandler} where the URL is like\n          \n          \n            \n                 * <code>https://youtube.com/watch?v=videoId&list=playlistId</code>", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469248753", "createdAt": "2020-08-12T13:13:13Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubePlaylistLinkHandlerFactory.java", "diffHunk": "@@ -67,4 +74,31 @@ public boolean onAcceptUrl(final String url) {\n         }\n         return true;\n     }\n+\n+    /**\n+     * If it is a mix (auto-generated playlist) url, return a Linkhandler where the url is like.\n+     * youtube.com/watch?v=videoId&list=playlistId", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f465837ec12a9b46fa41ff47881bc8936ff96892"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjA1MTMyOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubePlaylistLinkHandlerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoxNjoxNVrOG_gynA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoxNjoxNVrOG_gynA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1MDcxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            String newUrl = \"https://www.youtube.com/watch?v=\" + videoID + \"&list=\" + listID;\n          \n          \n            \n                            final String newUrl = \"https://www.youtube.com/watch?v=\" + videoID + \"&list=\" + listID;", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469250716", "createdAt": "2020-08-12T13:16:15Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubePlaylistLinkHandlerFactory.java", "diffHunk": "@@ -67,4 +74,31 @@ public boolean onAcceptUrl(final String url) {\n         }\n         return true;\n     }\n+\n+    /**\n+     * If it is a mix (auto-generated playlist) url, return a Linkhandler where the url is like.\n+     * youtube.com/watch?v=videoId&list=playlistId\n+     * <p>Otherwise use super</p>\n+     */\n+    @Override\n+    public ListLinkHandler fromUrl(final String url) throws ParsingException {\n+        try {\n+            URL urlObj = Utils.stringToURL(url);\n+            String listID = Utils.getQueryValue(urlObj, \"list\");\n+            if (listID != null && YoutubeParsingHelper.isYoutubeMixId(listID)) {\n+                String videoID = Utils.getQueryValue(urlObj, \"v\");\n+                if (videoID == null) {\n+                    videoID = listID.substring(2);\n+                }\n+                String newUrl = \"https://www.youtube.com/watch?v=\" + videoID + \"&list=\" + listID;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f465837ec12a9b46fa41ff47881bc8936ff96892"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjA1MzAzOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubePlaylistLinkHandlerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoxNjo0M1rOG_gzsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoxNjo0M1rOG_gzsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1MDk5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String listID = Utils.getQueryValue(urlObj, \"list\");\n          \n          \n            \n                        final String listID = Utils.getQueryValue(urlObj, \"list\");", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469250995", "createdAt": "2020-08-12T13:16:43Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubePlaylistLinkHandlerFactory.java", "diffHunk": "@@ -67,4 +74,31 @@ public boolean onAcceptUrl(final String url) {\n         }\n         return true;\n     }\n+\n+    /**\n+     * If it is a mix (auto-generated playlist) url, return a Linkhandler where the url is like.\n+     * youtube.com/watch?v=videoId&list=playlistId\n+     * <p>Otherwise use super</p>\n+     */\n+    @Override\n+    public ListLinkHandler fromUrl(final String url) throws ParsingException {\n+        try {\n+            URL urlObj = Utils.stringToURL(url);\n+            String listID = Utils.getQueryValue(urlObj, \"list\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f465837ec12a9b46fa41ff47881bc8936ff96892"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjA1OTkwOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoxODoyNlrOG_g4Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoxODoyNlrOG_g4Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1MjA5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n          \n          \n            \n             * \"youtube.com/watch?v=videoId&list=playlistId\"\n          \n          \n            \n             * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist). It handles URLs in the format of\n          \n          \n            \n             * <code>youtube.com/watch?v=videoId&list=playlistId</code>", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469252099", "createdAt": "2020-08-12T13:18:26Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,228 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.Page;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Response;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.extractCookieValue;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.toJsonArray;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f465837ec12a9b46fa41ff47881bc8936ff96892"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjA3OTYyOnYy", "diffSide": "RIGHT", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoyMjo0NlrOG_hDvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoyMjo0NlrOG_hDvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1NTEwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String videoId = \"_AzeUSL9lZc\";\n          \n          \n            \n                    final String videoId = \"_AzeUSL9lZc\";", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469255101", "createdAt": "2020-08-12T13:22:46Z", "author": {"login": "TobiGr"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeServiceTest.java", "diffHunk": "@@ -54,4 +58,30 @@ public void testGetKioskAvailableKiosks() throws Exception {\n     public void testGetDefaultKiosk() throws Exception {\n         assertEquals(kioskList.getDefaultKioskExtractor(null).getId(), \"Trending\");\n     }\n+\n+\n+    @Test\n+    public void getPlayListExtractorIsNormalPlaylist() throws Exception {\n+        PlaylistExtractor extractor = service.getPlaylistExtractor(\n+            \"https://www.youtube.com/watch?v=JhqtYOnNrTs&list=PL-EkZZikQIQVqk9rBWzEo5b-2GeozElS\");\n+        assertTrue(extractor instanceof YoutubePlaylistExtractor);\n+    }\n+\n+    @Test\n+    public void getPlaylistExtractorIsMix() throws Exception {\n+        String videoId = \"_AzeUSL9lZc\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f465837ec12a9b46fa41ff47881bc8936ff96892"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjA4MDc3OnYy", "diffSide": "RIGHT", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoyMzowNFrOG_hEdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoyMzowNFrOG_hEdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1NTI4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    PlaylistExtractor extractor = service.getPlaylistExtractor(\n          \n          \n            \n                    final PlaylistExtractor extractor = service.getPlaylistExtractor(", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469255285", "createdAt": "2020-08-12T13:23:04Z", "author": {"login": "TobiGr"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeServiceTest.java", "diffHunk": "@@ -54,4 +58,30 @@ public void testGetKioskAvailableKiosks() throws Exception {\n     public void testGetDefaultKiosk() throws Exception {\n         assertEquals(kioskList.getDefaultKioskExtractor(null).getId(), \"Trending\");\n     }\n+\n+\n+    @Test\n+    public void getPlayListExtractorIsNormalPlaylist() throws Exception {\n+        PlaylistExtractor extractor = service.getPlaylistExtractor(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f465837ec12a9b46fa41ff47881bc8936ff96892"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzA4MTk1OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzoxMzoxMFrOG_qxHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODo1MzowOFrOG_uRjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQxNDE3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * <code>youtube.com/watch?v=videoId&list=playlistId\"</code>\n          \n          \n            \n             * <code>youtube.com/watch?v=videoId&list=playlistId</code>\n          \n      \n    \n    \n  \n\nLooks like I did not remove that in my suggestion.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469414173", "createdAt": "2020-08-12T17:13:10Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -30,8 +30,8 @@\n import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.toJsonArray;\n \n /**\n- * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n- * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist). It handles URLs in the format of\n+ * <code>youtube.com/watch?v=videoId&list=playlistId\"</code>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5733f6af5ca3ca4d081b8e22769e9822ba712514"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ3MTYzMQ==", "bodyText": "Also use {@code something} instead of <code>something</code>", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469471631", "createdAt": "2020-08-12T18:53:08Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -30,8 +30,8 @@\n import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.toJsonArray;\n \n /**\n- * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n- * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist). It handles URLs in the format of\n+ * <code>youtube.com/watch?v=videoId&list=playlistId\"</code>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQxNDE3Mw=="}, "originalCommit": {"oid": "5733f6af5ca3ca4d081b8e22769e9822ba712514"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzM1ODQwOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODozMDozNFrOG_tgFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODozMDozNFrOG_tgFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1ODk2Nw==", "bodyText": "Like above\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    getValidJsonResponseBody(response);\n          \n          \n            \n            \n          \n          \n            \n                    return toJsonArray(response.responseBody());\n          \n          \n            \n                    return toJsonArray(getValidJsonResponseBody(response));", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469458967", "createdAt": "2020-08-12T18:30:34Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java", "diffHunk": "@@ -504,22 +535,65 @@ public static String getValidJsonResponseBody(final Response response)\n         final String responseContentType = response.getHeader(\"Content-Type\");\n         if (responseContentType != null\n                 && responseContentType.toLowerCase().contains(\"text/html\")) {\n-            throw new ParsingException(\"Got HTML document, expected JSON response\" +\n-                    \" (latest url was: \\\"\" + response.latestUrl() + \"\\\")\");\n+            throw new ParsingException(\"Got HTML document, expected JSON response\"\n+                    + \" (latest url was: \\\"\" + response.latestUrl() + \"\\\")\");\n         }\n \n         return responseBody;\n     }\n \n+    public static Response getResponse(final String url, final Localization localization)\n+            throws IOException, ExtractionException {\n+        Map<String, List<String>> headers = new HashMap<>();\n+        headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(\"1\"));\n+        headers.put(\"X-YouTube-Client-Version\", Collections.singletonList(getClientVersion()));\n+\n+        final Response response = getDownloader().get(url, headers, localization);\n+        getValidJsonResponseBody(response);\n+\n+        return response;\n+    }\n+\n+    public static String extractCookieValue(final String cookieName, final Response response) {\n+        final List<String> cookies = response.responseHeaders().get(\"Set-Cookie\");\n+        int startIndex;\n+        String result = \"\";\n+        for (String cookie : cookies) {\n+            startIndex = cookie.indexOf(cookieName);\n+            if (startIndex != -1) {\n+                result = cookie.substring(startIndex + cookieName.length() + \"=\".length(),\n+                        cookie.indexOf(\";\", startIndex));\n+            }\n+        }\n+        return result;\n+    }\n+\n     public static JsonArray getJsonResponse(final String url, final Localization localization)\n             throws IOException, ExtractionException {\n         Map<String, List<String>> headers = new HashMap<>();\n         headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(\"1\"));\n         headers.put(\"X-YouTube-Client-Version\", Collections.singletonList(getClientVersion()));\n         final Response response = getDownloader().get(url, headers, localization);\n \n-        final String responseBody = getValidJsonResponseBody(response);\n+        return toJsonArray(getValidJsonResponseBody(response));\n+    }\n+\n+    public static JsonArray getJsonResponse(final Page page, final Localization localization)\n+            throws IOException, ExtractionException {\n+        final Map<String, List<String>> headers = new HashMap<>();\n+        if (!isNullOrEmpty(page.getCookies())) {\n+            headers.put(\"Cookie\", Collections.singletonList(join(\";\", \"=\", page.getCookies())));\n+        }\n+        headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(\"1\"));\n+        headers.put(\"X-YouTube-Client-Version\", Collections.singletonList(getClientVersion()));\n+\n+        final Response response = getDownloader().get(page.getUrl(), headers, localization);\n+        getValidJsonResponseBody(response);\n+\n+        return toJsonArray(response.responseBody());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5733f6af5ca3ca4d081b8e22769e9822ba712514"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzM3NjQzOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODozNTozNlrOG_trSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODozNTozNlrOG_trSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MTgzNQ==", "bodyText": "Do this, so that the original error is reported if even the fallback fails\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    try {\n          \n          \n            \n                        final String playlistId = playlistData.getString(\"playlistId\");\n          \n          \n            \n                        try {\n          \n          \n            \n                            return getThumbnailUrlFromPlaylistId(playlistId);\n          \n          \n            \n                        } catch (ParsingException e) {\n          \n          \n            \n                            //fallback to thumbnail of current video. Always the case for channel mix\n          \n          \n            \n                            return getThumbnailUrlFromVideoId(\n          \n          \n            \n                                initialData.getObject(\"currentVideoEndpoint\").getObject(\"watchEndpoint\")\n          \n          \n            \n                                    .getString(\"videoId\"));\n          \n          \n            \n                        }\n          \n          \n            \n                    } catch (Exception e) {\n          \n          \n            \n                        throw new ParsingException(\"Could not get playlist thumbnail\", e);\n          \n          \n            \n                    }\n          \n          \n            \n                    try {\n          \n          \n            \n                        return getThumbnailUrlFromPlaylistId(playlistData.getString(\"playlistId\"));\n          \n          \n            \n                    } catch (final Exception e) {\n          \n          \n            \n                        try {\n          \n          \n            \n                            //fallback to thumbnail of current video. Always the case for channel mix\n          \n          \n            \n                            return getThumbnailUrlFromVideoId(\n          \n          \n            \n                                initialData.getObject(\"currentVideoEndpoint\").getObject(\"watchEndpoint\")\n          \n          \n            \n                                    .getString(\"videoId\"));\n          \n          \n            \n                        } catch (final Exception ignored) {\n          \n          \n            \n                        }\n          \n          \n            \n                        throw new ParsingException(\"Could not get playlist thumbnail\", e);\n          \n          \n            \n                    }", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469461835", "createdAt": "2020-08-12T18:35:36Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,228 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.Page;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Response;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.extractCookieValue;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.toJsonArray;\n+\n+/**\n+ * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist). It handles URLs in the format of\n+ * <code>youtube.com/watch?v=videoId&list=playlistId\"</code>\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    /**\n+     * YouTube identifies mixes based on this cookie. With this information it can generate\n+     * continuations without duplicates.\n+     */\n+    private static final String COOKIE_NAME = \"VISITOR_INFO1_LIVE\";\n+\n+    private JsonObject initialData;\n+    private JsonObject playlistData;\n+    private String cookieValue;\n+\n+    public YoutubeMixPlaylistExtractor(final StreamingService service,\n+                                       final ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull final Downloader downloader)\n+            throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final Response response = getResponse(url, getExtractorLocalization());\n+        final JsonArray ajaxJson = toJsonArray(response.responseBody());\n+        initialData = ajaxJson.getObject(3).getObject(\"response\");\n+        playlistData = initialData.getObject(\"contents\").getObject(\"twoColumnWatchNextResults\")\n+                .getObject(\"playlist\").getObject(\"playlist\");\n+        cookieValue = extractCookieValue(COOKIE_NAME, response);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            try {\n+                return getThumbnailUrlFromPlaylistId(playlistId);\n+            } catch (ParsingException e) {\n+                //fallback to thumbnail of current video. Always the case for channel mix\n+                return getThumbnailUrlFromVideoId(\n+                    initialData.getObject(\"currentVideoEndpoint\").getObject(\"watchEndpoint\")\n+                        .getString(\"videoId\"));\n+            }\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5733f6af5ca3ca4d081b8e22769e9822ba712514"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzM4NTQzOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODozODowN1rOG_tw2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODozODowN1rOG_tw2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MzI1OQ==", "bodyText": "final", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469463259", "createdAt": "2020-08-12T18:38:07Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,228 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.Page;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Response;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.extractCookieValue;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.toJsonArray;\n+\n+/**\n+ * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist). It handles URLs in the format of\n+ * <code>youtube.com/watch?v=videoId&list=playlistId\"</code>\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    /**\n+     * YouTube identifies mixes based on this cookie. With this information it can generate\n+     * continuations without duplicates.\n+     */\n+    private static final String COOKIE_NAME = \"VISITOR_INFO1_LIVE\";\n+\n+    private JsonObject initialData;\n+    private JsonObject playlistData;\n+    private String cookieValue;\n+\n+    public YoutubeMixPlaylistExtractor(final StreamingService service,\n+                                       final ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull final Downloader downloader)\n+            throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final Response response = getResponse(url, getExtractorLocalization());\n+        final JsonArray ajaxJson = toJsonArray(response.responseBody());\n+        initialData = ajaxJson.getObject(3).getObject(\"response\");\n+        playlistData = initialData.getObject(\"contents\").getObject(\"twoColumnWatchNextResults\")\n+                .getObject(\"playlist\").getObject(\"playlist\");\n+        cookieValue = extractCookieValue(COOKIE_NAME, response);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            try {\n+                return getThumbnailUrlFromPlaylistId(playlistId);\n+            } catch (ParsingException e) {\n+                //fallback to thumbnail of current video. Always the case for channel mix\n+                return getThumbnailUrlFromVideoId(\n+                    initialData.getObject(\"currentVideoEndpoint\").getObject(\"watchEndpoint\")\n+                        .getString(\"videoId\"));\n+            }\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return ListExtractor.ITEM_COUNT_INFINITE;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        final StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(\"contents\"));\n+        return new InfoItemsPage<>(collector,\n+                new Page(getNextPageUrl(), Collections.singletonMap(COOKIE_NAME, cookieValue)));\n+    }\n+\n+    private String getNextPageUrl() throws ExtractionException {\n+        return getNextPageUrlFrom(playlistData);\n+    }\n+\n+    private String getNextPageUrlFrom(final JsonObject playlistJson) throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistJson.getArray(\"contents\")\n+                .get(playlistJson.getArray(\"contents\").size() - 1));\n+        if (lastStream == null || lastStream.getObject(\"playlistPanelVideoRenderer\") == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+\n+        return getUrlFromNavigationEndpoint(\n+                lastStream.getObject(\"playlistPanelVideoRenderer\").getObject(\"navigationEndpoint\"))\n+                + \"&pbj=1\";\n+    }\n+\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getPage(final Page page)\n+            throws ExtractionException, IOException {\n+        if (page == null || page.getUrl().isEmpty()) {\n+            throw new ExtractionException(\n+                new IllegalArgumentException(\"Page url is empty or null\"));\n+        }\n+\n+        final JsonArray ajaxJson = getJsonResponse(page, getExtractorLocalization());\n+        final JsonObject playlistJson =\n+                ajaxJson.getObject(3).getObject(\"response\").getObject(\"contents\")\n+                        .getObject(\"twoColumnWatchNextResults\").getObject(\"playlist\")\n+                        .getObject(\"playlist\");\n+        final JsonArray allStreams = playlistJson.getArray(\"contents\");\n+        // Sublist because youtube returns up to 24 previous streams in the mix\n+        // +1 because the stream of \"currentIndex\" was already extracted in previous request\n+        List<Object> newStreams =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5733f6af5ca3ca4d081b8e22769e9822ba712514"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzM4NTY1OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODozODoxMVrOG_tw_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODozODoxMVrOG_tw_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MzI5Mg==", "bodyText": "final", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469463292", "createdAt": "2020-08-12T18:38:11Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,228 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.Page;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Response;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.extractCookieValue;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.toJsonArray;\n+\n+/**\n+ * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist). It handles URLs in the format of\n+ * <code>youtube.com/watch?v=videoId&list=playlistId\"</code>\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    /**\n+     * YouTube identifies mixes based on this cookie. With this information it can generate\n+     * continuations without duplicates.\n+     */\n+    private static final String COOKIE_NAME = \"VISITOR_INFO1_LIVE\";\n+\n+    private JsonObject initialData;\n+    private JsonObject playlistData;\n+    private String cookieValue;\n+\n+    public YoutubeMixPlaylistExtractor(final StreamingService service,\n+                                       final ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull final Downloader downloader)\n+            throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final Response response = getResponse(url, getExtractorLocalization());\n+        final JsonArray ajaxJson = toJsonArray(response.responseBody());\n+        initialData = ajaxJson.getObject(3).getObject(\"response\");\n+        playlistData = initialData.getObject(\"contents\").getObject(\"twoColumnWatchNextResults\")\n+                .getObject(\"playlist\").getObject(\"playlist\");\n+        cookieValue = extractCookieValue(COOKIE_NAME, response);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            try {\n+                return getThumbnailUrlFromPlaylistId(playlistId);\n+            } catch (ParsingException e) {\n+                //fallback to thumbnail of current video. Always the case for channel mix\n+                return getThumbnailUrlFromVideoId(\n+                    initialData.getObject(\"currentVideoEndpoint\").getObject(\"watchEndpoint\")\n+                        .getString(\"videoId\"));\n+            }\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return ListExtractor.ITEM_COUNT_INFINITE;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        final StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(\"contents\"));\n+        return new InfoItemsPage<>(collector,\n+                new Page(getNextPageUrl(), Collections.singletonMap(COOKIE_NAME, cookieValue)));\n+    }\n+\n+    private String getNextPageUrl() throws ExtractionException {\n+        return getNextPageUrlFrom(playlistData);\n+    }\n+\n+    private String getNextPageUrlFrom(final JsonObject playlistJson) throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistJson.getArray(\"contents\")\n+                .get(playlistJson.getArray(\"contents\").size() - 1));\n+        if (lastStream == null || lastStream.getObject(\"playlistPanelVideoRenderer\") == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+\n+        return getUrlFromNavigationEndpoint(\n+                lastStream.getObject(\"playlistPanelVideoRenderer\").getObject(\"navigationEndpoint\"))\n+                + \"&pbj=1\";\n+    }\n+\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getPage(final Page page)\n+            throws ExtractionException, IOException {\n+        if (page == null || page.getUrl().isEmpty()) {\n+            throw new ExtractionException(\n+                new IllegalArgumentException(\"Page url is empty or null\"));\n+        }\n+\n+        final JsonArray ajaxJson = getJsonResponse(page, getExtractorLocalization());\n+        final JsonObject playlistJson =\n+                ajaxJson.getObject(3).getObject(\"response\").getObject(\"contents\")\n+                        .getObject(\"twoColumnWatchNextResults\").getObject(\"playlist\")\n+                        .getObject(\"playlist\");\n+        final JsonArray allStreams = playlistJson.getArray(\"contents\");\n+        // Sublist because youtube returns up to 24 previous streams in the mix\n+        // +1 because the stream of \"currentIndex\" was already extracted in previous request\n+        List<Object> newStreams =\n+                allStreams.subList(playlistJson.getInt(\"currentIndex\") + 1, allStreams.size());\n+\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5733f6af5ca3ca4d081b8e22769e9822ba712514"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzM4NjMxOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODozODoyM1rOG_txXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODozODoyM1rOG_txXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MzM5MQ==", "bodyText": "final", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469463391", "createdAt": "2020-08-12T18:38:23Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,228 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.Page;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Response;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.extractCookieValue;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.toJsonArray;\n+\n+/**\n+ * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist). It handles URLs in the format of\n+ * <code>youtube.com/watch?v=videoId&list=playlistId\"</code>\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    /**\n+     * YouTube identifies mixes based on this cookie. With this information it can generate\n+     * continuations without duplicates.\n+     */\n+    private static final String COOKIE_NAME = \"VISITOR_INFO1_LIVE\";\n+\n+    private JsonObject initialData;\n+    private JsonObject playlistData;\n+    private String cookieValue;\n+\n+    public YoutubeMixPlaylistExtractor(final StreamingService service,\n+                                       final ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull final Downloader downloader)\n+            throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final Response response = getResponse(url, getExtractorLocalization());\n+        final JsonArray ajaxJson = toJsonArray(response.responseBody());\n+        initialData = ajaxJson.getObject(3).getObject(\"response\");\n+        playlistData = initialData.getObject(\"contents\").getObject(\"twoColumnWatchNextResults\")\n+                .getObject(\"playlist\").getObject(\"playlist\");\n+        cookieValue = extractCookieValue(COOKIE_NAME, response);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            try {\n+                return getThumbnailUrlFromPlaylistId(playlistId);\n+            } catch (ParsingException e) {\n+                //fallback to thumbnail of current video. Always the case for channel mix\n+                return getThumbnailUrlFromVideoId(\n+                    initialData.getObject(\"currentVideoEndpoint\").getObject(\"watchEndpoint\")\n+                        .getString(\"videoId\"));\n+            }\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return ListExtractor.ITEM_COUNT_INFINITE;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        final StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(\"contents\"));\n+        return new InfoItemsPage<>(collector,\n+                new Page(getNextPageUrl(), Collections.singletonMap(COOKIE_NAME, cookieValue)));\n+    }\n+\n+    private String getNextPageUrl() throws ExtractionException {\n+        return getNextPageUrlFrom(playlistData);\n+    }\n+\n+    private String getNextPageUrlFrom(final JsonObject playlistJson) throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistJson.getArray(\"contents\")\n+                .get(playlistJson.getArray(\"contents\").size() - 1));\n+        if (lastStream == null || lastStream.getObject(\"playlistPanelVideoRenderer\") == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+\n+        return getUrlFromNavigationEndpoint(\n+                lastStream.getObject(\"playlistPanelVideoRenderer\").getObject(\"navigationEndpoint\"))\n+                + \"&pbj=1\";\n+    }\n+\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getPage(final Page page)\n+            throws ExtractionException, IOException {\n+        if (page == null || page.getUrl().isEmpty()) {\n+            throw new ExtractionException(\n+                new IllegalArgumentException(\"Page url is empty or null\"));\n+        }\n+\n+        final JsonArray ajaxJson = getJsonResponse(page, getExtractorLocalization());\n+        final JsonObject playlistJson =\n+                ajaxJson.getObject(3).getObject(\"response\").getObject(\"contents\")\n+                        .getObject(\"twoColumnWatchNextResults\").getObject(\"playlist\")\n+                        .getObject(\"playlist\");\n+        final JsonArray allStreams = playlistJson.getArray(\"contents\");\n+        // Sublist because youtube returns up to 24 previous streams in the mix\n+        // +1 because the stream of \"currentIndex\" was already extracted in previous request\n+        List<Object> newStreams =\n+                allStreams.subList(playlistJson.getInt(\"currentIndex\") + 1, allStreams.size());\n+\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, newStreams);\n+        return new InfoItemsPage<>(collector,\n+                new Page(getNextPageUrlFrom(playlistJson), page.getCookies()));\n+    }\n+\n+    private void collectStreamsFrom(\n+            @Nonnull final StreamInfoItemsCollector collector,\n+            @Nullable final List<Object> streams) {\n+\n+        if (streams == null) {\n+            return;\n+        }\n+\n+        final TimeAgoParser timeAgoParser = getTimeAgoParser();\n+\n+        for (Object stream : streams) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5733f6af5ca3ca4d081b8e22769e9822ba712514"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzM4NjY5OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODozODoyOVrOG_txkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODozODoyOVrOG_txkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MzQ0MA==", "bodyText": "final", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469463440", "createdAt": "2020-08-12T18:38:29Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,228 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.Page;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Response;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.extractCookieValue;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.toJsonArray;\n+\n+/**\n+ * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist). It handles URLs in the format of\n+ * <code>youtube.com/watch?v=videoId&list=playlistId\"</code>\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    /**\n+     * YouTube identifies mixes based on this cookie. With this information it can generate\n+     * continuations without duplicates.\n+     */\n+    private static final String COOKIE_NAME = \"VISITOR_INFO1_LIVE\";\n+\n+    private JsonObject initialData;\n+    private JsonObject playlistData;\n+    private String cookieValue;\n+\n+    public YoutubeMixPlaylistExtractor(final StreamingService service,\n+                                       final ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull final Downloader downloader)\n+            throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final Response response = getResponse(url, getExtractorLocalization());\n+        final JsonArray ajaxJson = toJsonArray(response.responseBody());\n+        initialData = ajaxJson.getObject(3).getObject(\"response\");\n+        playlistData = initialData.getObject(\"contents\").getObject(\"twoColumnWatchNextResults\")\n+                .getObject(\"playlist\").getObject(\"playlist\");\n+        cookieValue = extractCookieValue(COOKIE_NAME, response);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            try {\n+                return getThumbnailUrlFromPlaylistId(playlistId);\n+            } catch (ParsingException e) {\n+                //fallback to thumbnail of current video. Always the case for channel mix\n+                return getThumbnailUrlFromVideoId(\n+                    initialData.getObject(\"currentVideoEndpoint\").getObject(\"watchEndpoint\")\n+                        .getString(\"videoId\"));\n+            }\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return ListExtractor.ITEM_COUNT_INFINITE;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        final StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(\"contents\"));\n+        return new InfoItemsPage<>(collector,\n+                new Page(getNextPageUrl(), Collections.singletonMap(COOKIE_NAME, cookieValue)));\n+    }\n+\n+    private String getNextPageUrl() throws ExtractionException {\n+        return getNextPageUrlFrom(playlistData);\n+    }\n+\n+    private String getNextPageUrlFrom(final JsonObject playlistJson) throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistJson.getArray(\"contents\")\n+                .get(playlistJson.getArray(\"contents\").size() - 1));\n+        if (lastStream == null || lastStream.getObject(\"playlistPanelVideoRenderer\") == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+\n+        return getUrlFromNavigationEndpoint(\n+                lastStream.getObject(\"playlistPanelVideoRenderer\").getObject(\"navigationEndpoint\"))\n+                + \"&pbj=1\";\n+    }\n+\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getPage(final Page page)\n+            throws ExtractionException, IOException {\n+        if (page == null || page.getUrl().isEmpty()) {\n+            throw new ExtractionException(\n+                new IllegalArgumentException(\"Page url is empty or null\"));\n+        }\n+\n+        final JsonArray ajaxJson = getJsonResponse(page, getExtractorLocalization());\n+        final JsonObject playlistJson =\n+                ajaxJson.getObject(3).getObject(\"response\").getObject(\"contents\")\n+                        .getObject(\"twoColumnWatchNextResults\").getObject(\"playlist\")\n+                        .getObject(\"playlist\");\n+        final JsonArray allStreams = playlistJson.getArray(\"contents\");\n+        // Sublist because youtube returns up to 24 previous streams in the mix\n+        // +1 because the stream of \"currentIndex\" was already extracted in previous request\n+        List<Object> newStreams =\n+                allStreams.subList(playlistJson.getInt(\"currentIndex\") + 1, allStreams.size());\n+\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, newStreams);\n+        return new InfoItemsPage<>(collector,\n+                new Page(getNextPageUrlFrom(playlistJson), page.getCookies()));\n+    }\n+\n+    private void collectStreamsFrom(\n+            @Nonnull final StreamInfoItemsCollector collector,\n+            @Nullable final List<Object> streams) {\n+\n+        if (streams == null) {\n+            return;\n+        }\n+\n+        final TimeAgoParser timeAgoParser = getTimeAgoParser();\n+\n+        for (Object stream : streams) {\n+            if (stream instanceof JsonObject) {\n+                JsonObject streamInfo = ((JsonObject) stream)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5733f6af5ca3ca4d081b8e22769e9822ba712514"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxOTk4MDAwOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/utils/Utils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDowNzozMFrOHMoVHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDowNzozMFrOHMoVHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwNTcyNg==", "bodyText": "Maybe you could add a test for this to UtilsTest.testJoin(). But you can leave this to another PR, since the code looks correct ;-)", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r483005726", "createdAt": "2020-09-03T14:07:30Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/utils/Utils.java", "diffHunk": "@@ -235,4 +236,15 @@ public static String join(final CharSequence delimiter, final Iterable<? extends\n         }\n         return stringBuilder.toString();\n     }\n+\n+    public static String join(final String delimiter, final String mapJoin,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e930ec1c5d615f47ee524377c1ba7222177f9bc1"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODk1Mjc4OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMjoyNDoxM1rOHVNYBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwOTo0NzoyN1rOHYfOPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAwMTI4Ng==", "bodyText": "Please don't do this, it will break NewPipe Legacy unfortunately", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r492001286", "createdAt": "2020-09-21T12:24:13Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java", "diffHunk": "@@ -330,7 +358,7 @@ public static boolean areHardcodedYoutubeMusicKeysValid() throws IOException, Re\n                 .end()\n                 .value(\"query\", \"test\")\n                 .value(\"params\", \"Eg-KAQwIARAAGAAgACgAMABqChAEEAUQAxAKEAk%3D\")\n-            .end().done().getBytes(\"UTF-8\");\n+            .end().done().getBytes(StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e930ec1c5d615f47ee524377c1ba7222177f9bc1"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQzOTQyMg==", "bodyText": "wow, the cleanup feature on commit from Android Studio changed that to StandardCharsets when i changed it to the String.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r495439422", "createdAt": "2020-09-26T09:47:27Z", "author": {"login": "XiangRongLin"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java", "diffHunk": "@@ -330,7 +358,7 @@ public static boolean areHardcodedYoutubeMusicKeysValid() throws IOException, Re\n                 .end()\n                 .value(\"query\", \"test\")\n                 .value(\"params\", \"Eg-KAQwIARAAGAAgACgAMABqChAEEAUQAxAKEAk%3D\")\n-            .end().done().getBytes(\"UTF-8\");\n+            .end().done().getBytes(StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAwMTI4Ng=="}, "originalCommit": {"oid": "e930ec1c5d615f47ee524377c1ba7222177f9bc1"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODk2NzA2OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMjoyODowOFrOHVNgvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMjoyODowOFrOHVNgvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAwMzUxNg==", "bodyText": "This function is unnecessary imho", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r492003516", "createdAt": "2020-09-21T12:28:08Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,228 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.Page;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Response;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.extractCookieValue;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.toJsonArray;\n+\n+/**\n+ * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist).\n+ * It handles URLs in the format of\n+ * {@code youtube.com/watch?v=videoId&list=playlistId}\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    /**\n+     * YouTube identifies mixes based on this cookie. With this information it can generate\n+     * continuations without duplicates.\n+     */\n+    private static final String COOKIE_NAME = \"VISITOR_INFO1_LIVE\";\n+\n+    private JsonObject initialData;\n+    private JsonObject playlistData;\n+    private String cookieValue;\n+\n+    public YoutubeMixPlaylistExtractor(final StreamingService service,\n+                                       final ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull final Downloader downloader)\n+            throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final Response response = getResponse(url, getExtractorLocalization());\n+        final JsonArray ajaxJson = toJsonArray(response.responseBody());\n+        initialData = ajaxJson.getObject(3).getObject(\"response\");\n+        playlistData = initialData.getObject(\"contents\").getObject(\"twoColumnWatchNextResults\")\n+                .getObject(\"playlist\").getObject(\"playlist\");\n+        cookieValue = extractCookieValue(COOKIE_NAME, response);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            return getThumbnailUrlFromPlaylistId(playlistData.getString(\"playlistId\"));\n+        } catch (final Exception e) {\n+            try {\n+                //fallback to thumbnail of current video. Always the case for channel mix\n+                return getThumbnailUrlFromVideoId(\n+                    initialData.getObject(\"currentVideoEndpoint\").getObject(\"watchEndpoint\")\n+                        .getString(\"videoId\"));\n+            } catch (final Exception ignored) {\n+            }\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return ListExtractor.ITEM_COUNT_INFINITE;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        final StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(\"contents\"));\n+        return new InfoItemsPage<>(collector,\n+                new Page(getNextPageUrl(), Collections.singletonMap(COOKIE_NAME, cookieValue)));\n+    }\n+\n+    private String getNextPageUrl() throws ExtractionException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e930ec1c5d615f47ee524377c1ba7222177f9bc1"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODk4MDAxOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubePlaylistLinkHandlerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMjozMDo0NlrOHVNo8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMjozMDo0NlrOHVNo8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAwNTYxOA==", "bodyText": "This doesn't work properly for the Mix types having a prefix longer than 2 letters.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r492005618", "createdAt": "2020-09-21T12:30:46Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubePlaylistLinkHandlerFactory.java", "diffHunk": "@@ -67,4 +74,33 @@ public boolean onAcceptUrl(final String url) {\n         }\n         return true;\n     }\n+\n+    /**\n+     * * If it is a mix (auto-generated playlist) URL, return a {@link LinkHandler} where the URL is\n+     * like\n+     * <code>https://youtube.com/watch?v=videoId&list=playlistId</code>.\n+     * <p>Otherwise use super</p>\n+     */\n+    @Override\n+    public ListLinkHandler fromUrl(final String url) throws ParsingException {\n+        try {\n+            final URL urlObj = Utils.stringToURL(url);\n+            final String listID = Utils.getQueryValue(urlObj, \"list\");\n+            if (listID != null && YoutubeParsingHelper.isYoutubeMixId(listID)) {\n+                String videoID = Utils.getQueryValue(urlObj, \"v\");\n+                if (videoID == null) {\n+                    videoID = listID.substring(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e930ec1c5d615f47ee524377c1ba7222177f9bc1"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODk4ODY3OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMjozMzowMlrOHVNuJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMjozMzowMlrOHVNuJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAwNjk0OQ==", "bodyText": "It should require the cookie.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r492006949", "createdAt": "2020-09-21T12:33:02Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,228 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.Page;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Response;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.extractCookieValue;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.toJsonArray;\n+\n+/**\n+ * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist).\n+ * It handles URLs in the format of\n+ * {@code youtube.com/watch?v=videoId&list=playlistId}\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    /**\n+     * YouTube identifies mixes based on this cookie. With this information it can generate\n+     * continuations without duplicates.\n+     */\n+    private static final String COOKIE_NAME = \"VISITOR_INFO1_LIVE\";\n+\n+    private JsonObject initialData;\n+    private JsonObject playlistData;\n+    private String cookieValue;\n+\n+    public YoutubeMixPlaylistExtractor(final StreamingService service,\n+                                       final ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull final Downloader downloader)\n+            throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final Response response = getResponse(url, getExtractorLocalization());\n+        final JsonArray ajaxJson = toJsonArray(response.responseBody());\n+        initialData = ajaxJson.getObject(3).getObject(\"response\");\n+        playlistData = initialData.getObject(\"contents\").getObject(\"twoColumnWatchNextResults\")\n+                .getObject(\"playlist\").getObject(\"playlist\");\n+        cookieValue = extractCookieValue(COOKIE_NAME, response);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            return getThumbnailUrlFromPlaylistId(playlistData.getString(\"playlistId\"));\n+        } catch (final Exception e) {\n+            try {\n+                //fallback to thumbnail of current video. Always the case for channel mix\n+                return getThumbnailUrlFromVideoId(\n+                    initialData.getObject(\"currentVideoEndpoint\").getObject(\"watchEndpoint\")\n+                        .getString(\"videoId\"));\n+            } catch (final Exception ignored) {\n+            }\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return ListExtractor.ITEM_COUNT_INFINITE;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        final StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(\"contents\"));\n+        return new InfoItemsPage<>(collector,\n+                new Page(getNextPageUrl(), Collections.singletonMap(COOKIE_NAME, cookieValue)));\n+    }\n+\n+    private String getNextPageUrl() throws ExtractionException {\n+        return getNextPageUrlFrom(playlistData);\n+    }\n+\n+    private String getNextPageUrlFrom(final JsonObject playlistJson) throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistJson.getArray(\"contents\")\n+                .get(playlistJson.getArray(\"contents\").size() - 1));\n+        if (lastStream == null || lastStream.getObject(\"playlistPanelVideoRenderer\") == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+\n+        return getUrlFromNavigationEndpoint(\n+                lastStream.getObject(\"playlistPanelVideoRenderer\").getObject(\"navigationEndpoint\"))\n+                + \"&pbj=1\";\n+    }\n+\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getPage(final Page page)\n+            throws ExtractionException, IOException {\n+        if (page == null || page.getUrl().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e930ec1c5d615f47ee524377c1ba7222177f9bc1"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODk4OTk1OnYy", "diffSide": "RIGHT", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeMixPlaylistExtractorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMjozMzoyMVrOHVNu5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMjozMzoyMVrOHVNu5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAwNzE0MA==", "bodyText": "When requiring the cookie, this won't work anymore.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r492007140", "createdAt": "2020-09-21T12:33:21Z", "author": {"login": "wb9688"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeMixPlaylistExtractorTest.java", "diffHunk": "@@ -0,0 +1,341 @@\n+package org.schabi.newpipe.extractor.services.youtube;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ServiceList.YouTube;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.hamcrest.MatcherAssert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Suite;\n+import org.junit.runners.Suite.SuiteClasses;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.ListExtractor.InfoItemsPage;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.Page;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.services.youtube.YoutubeMixPlaylistExtractorTest.ChannelMix;\n+import org.schabi.newpipe.extractor.services.youtube.YoutubeMixPlaylistExtractorTest.Invalid;\n+import org.schabi.newpipe.extractor.services.youtube.YoutubeMixPlaylistExtractorTest.Mix;\n+import org.schabi.newpipe.extractor.services.youtube.YoutubeMixPlaylistExtractorTest.MixWithIndex;\n+import org.schabi.newpipe.extractor.services.youtube.YoutubeMixPlaylistExtractorTest.MyMix;\n+import org.schabi.newpipe.extractor.services.youtube.extractors.YoutubeMixPlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+\n+@RunWith(Suite.class)\n+@SuiteClasses({Mix.class, MixWithIndex.class, MyMix.class, Invalid.class, ChannelMix.class})\n+public class YoutubeMixPlaylistExtractorTest {\n+\n+    public static final String PBJ = \"&pbj=1\";\n+    private static final String VIDEO_ID = \"_AzeUSL9lZc\";\n+    private static final String VIDEO_TITLE =\n+            \"Most Beautiful And Emotional  Piano: Anime Music Shigatsu wa Kimi no Uso OST IMO\";\n+\n+    private static YoutubeMixPlaylistExtractor extractor;\n+\n+    public static class Mix {\n+\n+        @BeforeClass\n+        public static void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = (YoutubeMixPlaylistExtractor) YouTube\n+                    .getPlaylistExtractor(\n+                            \"https://www.youtube.com/watch?v=\" + VIDEO_ID + \"&list=RD\" + VIDEO_ID);\n+            extractor.fetchPage();\n+        }\n+\n+        @Test\n+        public void getServiceId() {\n+            assertEquals(YouTube.getServiceId(), extractor.getServiceId());\n+        }\n+\n+        @Test\n+        public void getName() throws Exception {\n+            final String name = extractor.getName();\n+            assertThat(name, startsWith(\"Mix\"));\n+            assertThat(name, containsString(VIDEO_TITLE));\n+        }\n+\n+        @Test\n+        public void getThumbnailUrl() throws Exception {\n+            final String thumbnailUrl = extractor.getThumbnailUrl();\n+            assertIsSecureUrl(thumbnailUrl);\n+            MatcherAssert.assertThat(thumbnailUrl, containsString(\"yt\"));\n+            assertThat(thumbnailUrl, containsString(VIDEO_ID));\n+        }\n+\n+        @Test\n+        public void getInitialPage() throws Exception {\n+            final InfoItemsPage<StreamInfoItem> streams = extractor.getInitialPage();\n+            assertFalse(streams.getItems().isEmpty());\n+            assertTrue(streams.hasNextPage());\n+        }\n+\n+        @Test\n+        public void getPage() throws Exception {\n+            final InfoItemsPage<StreamInfoItem> streams = extractor.getPage(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e930ec1c5d615f47ee524377c1ba7222177f9bc1"}, "originalPosition": 85}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2866, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}