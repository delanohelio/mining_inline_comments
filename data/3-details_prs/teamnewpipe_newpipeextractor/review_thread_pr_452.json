{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzNjgxMTU0", "number": 452, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMjowODo1N1rOE0ME_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMjowODo1N1rOE0ME_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTU5MjkyOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSubscriptionExtractor.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMjowODo1N1rOHryhWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMDowMjo0NFrOHr9oBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY3ODU1NQ==", "bodyText": "Is it intended to set the content language to en_GB?", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/452#discussion_r515678555", "createdAt": "2020-11-01T22:08:57Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSubscriptionExtractor.java", "diffHunk": "@@ -1,126 +1,71 @@\n package org.schabi.newpipe.extractor.services.youtube.extractors;\n \n-import org.jsoup.Jsoup;\n-import org.jsoup.nodes.Document;\n-import org.jsoup.nodes.Element;\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import com.grack.nanojson.JsonParser;\n+import com.grack.nanojson.JsonParserException;\n+\n import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n import org.schabi.newpipe.extractor.services.youtube.YoutubeService;\n import org.schabi.newpipe.extractor.subscription.SubscriptionExtractor;\n import org.schabi.newpipe.extractor.subscription.SubscriptionItem;\n-import org.schabi.newpipe.extractor.utils.Parser;\n \n-import java.io.IOException;\n import java.io.InputStream;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n \n+import javax.annotation.Nonnull;\n+\n import static org.schabi.newpipe.extractor.subscription.SubscriptionExtractor.ContentSource.INPUT_STREAM;\n \n /**\n- * Extract subscriptions from a YouTube export (OPML format supported)\n+ * Extract subscriptions from a Google takout export (the user has to get the JSON out of the zip)\n  */\n public class YoutubeSubscriptionExtractor extends SubscriptionExtractor {\n+    private static final String BASE_CHANNEL_URL = \"https://www.youtube.com/channel/\";\n \n-    public YoutubeSubscriptionExtractor(YoutubeService service) {\n-        super(service, Collections.singletonList(INPUT_STREAM));\n+    public YoutubeSubscriptionExtractor(final YoutubeService youtubeService) {\n+        super(youtubeService, Collections.singletonList(INPUT_STREAM));\n     }\n \n     @Override\n     public String getRelatedUrl() {\n-        return \"https://www.youtube.com/subscription_manager?action_takeout=1\";\n+        return \"https://takeout.google.com/takeout/custom/youtube?continue=https%3A%2F%2Fmyaccount.google.com%2Fyourdata%2Fyoutube%3Fhl%3Den_GB%26authuser%3D0\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfdb1d1661724d59d93bebd877e994469857bf16"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTczMDQ5NA==", "bodyText": "URL decoder at https://www.urldecoder.org/ shows that\nhttps://takeout.google.com/takeout/custom/youtube?continue=https%3A%2F%2Fmyaccount.google.com%2Fyourdata%2Fyoutube%3Fhl%3Den_GB%26authuser%3D0\nto be\nhttps://takeout.google.com/takeout/custom/youtube?continue=https://myaccount.google.com/yourdata/youtube?hl=en_GB&authuser=0\nRemoving the URL arguments:\nhttps://takeout.google.com/takeout/custom/youtube?continue=https%3A%2F%2Fmyaccount.google.com%2Fyourdata%2Fyoutube\nis\nhttps://takeout.google.com/takeout/custom/youtube?continue=https://myaccount.google.com/yourdata/youtube\nThis seems to work too for downloading the subscriptions", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/452#discussion_r515730494", "createdAt": "2020-11-02T04:04:22Z", "author": {"login": "simula67"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSubscriptionExtractor.java", "diffHunk": "@@ -1,126 +1,71 @@\n package org.schabi.newpipe.extractor.services.youtube.extractors;\n \n-import org.jsoup.Jsoup;\n-import org.jsoup.nodes.Document;\n-import org.jsoup.nodes.Element;\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import com.grack.nanojson.JsonParser;\n+import com.grack.nanojson.JsonParserException;\n+\n import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n import org.schabi.newpipe.extractor.services.youtube.YoutubeService;\n import org.schabi.newpipe.extractor.subscription.SubscriptionExtractor;\n import org.schabi.newpipe.extractor.subscription.SubscriptionItem;\n-import org.schabi.newpipe.extractor.utils.Parser;\n \n-import java.io.IOException;\n import java.io.InputStream;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n \n+import javax.annotation.Nonnull;\n+\n import static org.schabi.newpipe.extractor.subscription.SubscriptionExtractor.ContentSource.INPUT_STREAM;\n \n /**\n- * Extract subscriptions from a YouTube export (OPML format supported)\n+ * Extract subscriptions from a Google takout export (the user has to get the JSON out of the zip)\n  */\n public class YoutubeSubscriptionExtractor extends SubscriptionExtractor {\n+    private static final String BASE_CHANNEL_URL = \"https://www.youtube.com/channel/\";\n \n-    public YoutubeSubscriptionExtractor(YoutubeService service) {\n-        super(service, Collections.singletonList(INPUT_STREAM));\n+    public YoutubeSubscriptionExtractor(final YoutubeService youtubeService) {\n+        super(youtubeService, Collections.singletonList(INPUT_STREAM));\n     }\n \n     @Override\n     public String getRelatedUrl() {\n-        return \"https://www.youtube.com/subscription_manager?action_takeout=1\";\n+        return \"https://takeout.google.com/takeout/custom/youtube?continue=https%3A%2F%2Fmyaccount.google.com%2Fyourdata%2Fyoutube%3Fhl%3Den_GB%26authuser%3D0\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY3ODU1NQ=="}, "originalCommit": {"oid": "bfdb1d1661724d59d93bebd877e994469857bf16"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg1ODAzNg==", "bodyText": "I just used the url from TeamNewPipe/NewPipe#4759, but https://takeout.google.com/takeout/custom/youtube?continue=https://myaccount.google.com/yourdata/youtube is shorter and more human-readable, so I'm gonna use that", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/452#discussion_r515858036", "createdAt": "2020-11-02T09:58:43Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSubscriptionExtractor.java", "diffHunk": "@@ -1,126 +1,71 @@\n package org.schabi.newpipe.extractor.services.youtube.extractors;\n \n-import org.jsoup.Jsoup;\n-import org.jsoup.nodes.Document;\n-import org.jsoup.nodes.Element;\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import com.grack.nanojson.JsonParser;\n+import com.grack.nanojson.JsonParserException;\n+\n import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n import org.schabi.newpipe.extractor.services.youtube.YoutubeService;\n import org.schabi.newpipe.extractor.subscription.SubscriptionExtractor;\n import org.schabi.newpipe.extractor.subscription.SubscriptionItem;\n-import org.schabi.newpipe.extractor.utils.Parser;\n \n-import java.io.IOException;\n import java.io.InputStream;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n \n+import javax.annotation.Nonnull;\n+\n import static org.schabi.newpipe.extractor.subscription.SubscriptionExtractor.ContentSource.INPUT_STREAM;\n \n /**\n- * Extract subscriptions from a YouTube export (OPML format supported)\n+ * Extract subscriptions from a Google takout export (the user has to get the JSON out of the zip)\n  */\n public class YoutubeSubscriptionExtractor extends SubscriptionExtractor {\n+    private static final String BASE_CHANNEL_URL = \"https://www.youtube.com/channel/\";\n \n-    public YoutubeSubscriptionExtractor(YoutubeService service) {\n-        super(service, Collections.singletonList(INPUT_STREAM));\n+    public YoutubeSubscriptionExtractor(final YoutubeService youtubeService) {\n+        super(youtubeService, Collections.singletonList(INPUT_STREAM));\n     }\n \n     @Override\n     public String getRelatedUrl() {\n-        return \"https://www.youtube.com/subscription_manager?action_takeout=1\";\n+        return \"https://takeout.google.com/takeout/custom/youtube?continue=https%3A%2F%2Fmyaccount.google.com%2Fyourdata%2Fyoutube%3Fhl%3Den_GB%26authuser%3D0\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY3ODU1NQ=="}, "originalCommit": {"oid": "bfdb1d1661724d59d93bebd877e994469857bf16"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg1ODgyNw==", "bodyText": "Oh, it even works without any continue: https://takeout.google.com/takeout/custom/youtube", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/452#discussion_r515858827", "createdAt": "2020-11-02T09:59:56Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSubscriptionExtractor.java", "diffHunk": "@@ -1,126 +1,71 @@\n package org.schabi.newpipe.extractor.services.youtube.extractors;\n \n-import org.jsoup.Jsoup;\n-import org.jsoup.nodes.Document;\n-import org.jsoup.nodes.Element;\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import com.grack.nanojson.JsonParser;\n+import com.grack.nanojson.JsonParserException;\n+\n import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n import org.schabi.newpipe.extractor.services.youtube.YoutubeService;\n import org.schabi.newpipe.extractor.subscription.SubscriptionExtractor;\n import org.schabi.newpipe.extractor.subscription.SubscriptionItem;\n-import org.schabi.newpipe.extractor.utils.Parser;\n \n-import java.io.IOException;\n import java.io.InputStream;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n \n+import javax.annotation.Nonnull;\n+\n import static org.schabi.newpipe.extractor.subscription.SubscriptionExtractor.ContentSource.INPUT_STREAM;\n \n /**\n- * Extract subscriptions from a YouTube export (OPML format supported)\n+ * Extract subscriptions from a Google takout export (the user has to get the JSON out of the zip)\n  */\n public class YoutubeSubscriptionExtractor extends SubscriptionExtractor {\n+    private static final String BASE_CHANNEL_URL = \"https://www.youtube.com/channel/\";\n \n-    public YoutubeSubscriptionExtractor(YoutubeService service) {\n-        super(service, Collections.singletonList(INPUT_STREAM));\n+    public YoutubeSubscriptionExtractor(final YoutubeService youtubeService) {\n+        super(youtubeService, Collections.singletonList(INPUT_STREAM));\n     }\n \n     @Override\n     public String getRelatedUrl() {\n-        return \"https://www.youtube.com/subscription_manager?action_takeout=1\";\n+        return \"https://takeout.google.com/takeout/custom/youtube?continue=https%3A%2F%2Fmyaccount.google.com%2Fyourdata%2Fyoutube%3Fhl%3Den_GB%26authuser%3D0\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY3ODU1NQ=="}, "originalCommit": {"oid": "bfdb1d1661724d59d93bebd877e994469857bf16"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg2MDQ4NA==", "bodyText": "Done", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/452#discussion_r515860484", "createdAt": "2020-11-02T10:02:44Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSubscriptionExtractor.java", "diffHunk": "@@ -1,126 +1,71 @@\n package org.schabi.newpipe.extractor.services.youtube.extractors;\n \n-import org.jsoup.Jsoup;\n-import org.jsoup.nodes.Document;\n-import org.jsoup.nodes.Element;\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import com.grack.nanojson.JsonParser;\n+import com.grack.nanojson.JsonParserException;\n+\n import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n import org.schabi.newpipe.extractor.services.youtube.YoutubeService;\n import org.schabi.newpipe.extractor.subscription.SubscriptionExtractor;\n import org.schabi.newpipe.extractor.subscription.SubscriptionItem;\n-import org.schabi.newpipe.extractor.utils.Parser;\n \n-import java.io.IOException;\n import java.io.InputStream;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n \n+import javax.annotation.Nonnull;\n+\n import static org.schabi.newpipe.extractor.subscription.SubscriptionExtractor.ContentSource.INPUT_STREAM;\n \n /**\n- * Extract subscriptions from a YouTube export (OPML format supported)\n+ * Extract subscriptions from a Google takout export (the user has to get the JSON out of the zip)\n  */\n public class YoutubeSubscriptionExtractor extends SubscriptionExtractor {\n+    private static final String BASE_CHANNEL_URL = \"https://www.youtube.com/channel/\";\n \n-    public YoutubeSubscriptionExtractor(YoutubeService service) {\n-        super(service, Collections.singletonList(INPUT_STREAM));\n+    public YoutubeSubscriptionExtractor(final YoutubeService youtubeService) {\n+        super(youtubeService, Collections.singletonList(INPUT_STREAM));\n     }\n \n     @Override\n     public String getRelatedUrl() {\n-        return \"https://www.youtube.com/subscription_manager?action_takeout=1\";\n+        return \"https://takeout.google.com/takeout/custom/youtube?continue=https%3A%2F%2Fmyaccount.google.com%2Fyourdata%2Fyoutube%3Fhl%3Den_GB%26authuser%3D0\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY3ODU1NQ=="}, "originalCommit": {"oid": "bfdb1d1661724d59d93bebd877e994469857bf16"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2784, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}