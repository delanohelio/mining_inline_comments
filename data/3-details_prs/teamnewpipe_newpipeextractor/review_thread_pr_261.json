{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5Nzk2Njk0", "number": 261, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNjo0Njo1M1rODi9YHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNjo0Njo1M1rODi9YHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTgzNzczOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeChannelExtractor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNjo0Njo1M1rOFuf18w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNjo1Mjo1OFrOFuf8eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwMDUzMQ==", "bodyText": "@TobiGr @wb9688\nI noticed that this page is very heavy to download, about 300~400KB per request.\nWhat do you think of using the pbj parameter? Using it offers a big advantage: it's a JSON formatted response which is, as you might've imagine, much less error prone to parse (it is basically the initialData already extracted).\nAnother thing is that the size would be as tiny, or even tinier than it was, a gziped 15~20KB response.\nHere's an example using the /videos endpoint (could be another one as well or even the \"root\", but this one seems to be sufficient to parse all the things we need, like description, name, etc.):\ncurl 'https://www.youtube.com/channel/UCLA_DiR1FfKNvjuUpBHmylQ/videos?pbj=1' \\\n    -H 'x-youtube-client-name: 1' -H 'x-youtube-client-version: 2.20200224.11.00' \\\n    -H 'User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:68.0) Gecko/20100101 Firefox/68.0' \\\n    -H 'Accept-Encoding: gzip' --compressed -v | jq > videos.pbj1.json\nIt looks like the only headers that we need are those two, which maybe we can just hardcode it (who knows how long it remains valid) or even find some lightweight method to get it dynamically.\nI'll investigate more about it later.\nPS: This is used throughout YouTube, replacing the channel with a video url works like a charm. Worth investigating as well.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/261#discussion_r384300531", "createdAt": "2020-02-26T06:46:53Z", "author": {"login": "mauriciocolli"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeChannelExtractor.java", "diffHunk": "@@ -59,11 +67,13 @@ public void onFetchPage(@Nonnull Downloader downloader) throws IOException, Extr\n         String channelUrl = super.getUrl() + CHANNEL_URL_PARAMETERS;\n         final Response response = downloader.get(channelUrl, getExtractorLocalization());\n         doc = YoutubeParsingHelper.parseAndCheckPage(channelUrl, response);\n+        initialData = YoutubeParsingHelper.getInitialData(response.responseBody());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96285e08151ef5a48afdd7ba28b7857924ddd6ca"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwMjIwMA==", "bodyText": "We're using pbj for YoutubeSearchExtractor's next pages iirc, I just didn't realize that's possible with all pages. I don't think we could do that with YoutubeStreamExtractor though. I'll work on implementing that, see #262.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/261#discussion_r384302200", "createdAt": "2020-02-26T06:52:58Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeChannelExtractor.java", "diffHunk": "@@ -59,11 +67,13 @@ public void onFetchPage(@Nonnull Downloader downloader) throws IOException, Extr\n         String channelUrl = super.getUrl() + CHANNEL_URL_PARAMETERS;\n         final Response response = downloader.get(channelUrl, getExtractorLocalization());\n         doc = YoutubeParsingHelper.parseAndCheckPage(channelUrl, response);\n+        initialData = YoutubeParsingHelper.getInitialData(response.responseBody());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwMDUzMQ=="}, "originalCommit": {"oid": "96285e08151ef5a48afdd7ba28b7857924ddd6ca"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2842, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}