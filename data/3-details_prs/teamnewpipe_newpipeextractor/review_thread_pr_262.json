{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwMDgwMDYy", "number": 262, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNTo1NDowN1rODjIfbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQyMDo0MzoyMVrODkCt1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTY1ODcxOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeParsingHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNTo1NDowN1rOFuxPqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjowNDowM1rOFuxsXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU4NTY0MA==", "bodyText": "Did you mean two instead of do?", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r384585640", "createdAt": "2020-02-26T15:54:07Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeParsingHelper.java", "diffHunk": "@@ -162,55 +171,83 @@ public static JsonObject getInitialData(String html) throws ParsingException {\n \n     /**\n      * Get the client version from a page\n-     * @param initialData\n-     * @param html The page HTML\n      * @return\n      * @throws ParsingException\n      */\n-    public static String getClientVersion(JsonObject initialData, String html) throws ParsingException {\n-        if (initialData == null) initialData = getInitialData(html);\n-        JsonArray serviceTrackingParams = initialData.getObject(\"responseContext\").getArray(\"serviceTrackingParams\");\n-        String shortClientVersion = null;\n-\n-        // try to get version from initial data first\n-        for (Object service : serviceTrackingParams) {\n-            JsonObject s = (JsonObject) service;\n-            if (s.getString(\"service\").equals(\"CSI\")) {\n-                JsonArray params = s.getArray(\"params\");\n-                for (Object param: params) {\n-                    JsonObject p = (JsonObject) param;\n-                    String key = p.getString(\"key\");\n-                    if (key != null && key.equals(\"cver\")) {\n-                        return p.getString(\"value\");\n+    public static String getClientVersion() throws ParsingException {\n+        if (clientVersion != null && !clientVersion.isEmpty()) return clientVersion;\n+\n+        // Test if hard-coded client version is valid\n+        try {\n+            final String url = \"https://www.youtube.com/results?search_query=test&pbj=1\";\n+\n+            Map<String, List<String>> headers = new HashMap<>();\n+            headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(\"1\"));\n+            headers.put(\"X-YouTube-Client-Version\",\n+                    Collections.singletonList(HARDCODED_CLIENT_VERSION));\n+            final String response = getDownloader().get(url, headers).responseBody();\n+            if (response.length() > 50) { // ensure to have a valid response\n+                clientVersion = HARDCODED_CLIENT_VERSION;\n+                return clientVersion;\n+            }\n+        } catch (Exception ignored) {}\n+\n+        // Try extracting it from YouTube's website otherwise\n+        try {\n+            final String url = \"https://www.youtube.com/results?search_query=test\";\n+            final String html = getDownloader().get(url).responseBody();\n+            JsonObject initialData = getInitialData(html);\n+            JsonArray serviceTrackingParams = initialData.getObject(\"responseContext\").getArray(\"serviceTrackingParams\");\n+            String shortClientVersion = null;\n+\n+            // try to get version from initial data first\n+            for (Object service : serviceTrackingParams) {\n+                JsonObject s = (JsonObject) service;\n+                if (s.getString(\"service\").equals(\"CSI\")) {\n+                    JsonArray params = s.getArray(\"params\");\n+                    for (Object param : params) {\n+                        JsonObject p = (JsonObject) param;\n+                        String key = p.getString(\"key\");\n+                        if (key != null && key.equals(\"cver\")) {\n+                            clientVersion = p.getString(\"value\");\n+                            return clientVersion;\n+                        }\n                     }\n-                }\n-            } else if (s.getString(\"service\").equals(\"ECATCHER\")) {\n-                // fallback to get a shortened client version which does not contain the last do digits\n-                JsonArray params = s.getArray(\"params\");\n-                for (Object param: params) {\n-                    JsonObject p = (JsonObject) param;\n-                    String key = p.getString(\"key\");\n-                    if (key != null && key.equals(\"client.version\")) {\n-                        shortClientVersion = p.getString(\"value\");\n+                } else if (s.getString(\"service\").equals(\"ECATCHER\")) {\n+                    // fallback to get a shortened client version which does not contain the last do digits", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88282761f44921e0533afdf93a4d83de0c0a4c20"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU5Mjk5MQ==", "bodyText": "Blame @TobiGr ;)", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r384592991", "createdAt": "2020-02-26T16:04:03Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeParsingHelper.java", "diffHunk": "@@ -162,55 +171,83 @@ public static JsonObject getInitialData(String html) throws ParsingException {\n \n     /**\n      * Get the client version from a page\n-     * @param initialData\n-     * @param html The page HTML\n      * @return\n      * @throws ParsingException\n      */\n-    public static String getClientVersion(JsonObject initialData, String html) throws ParsingException {\n-        if (initialData == null) initialData = getInitialData(html);\n-        JsonArray serviceTrackingParams = initialData.getObject(\"responseContext\").getArray(\"serviceTrackingParams\");\n-        String shortClientVersion = null;\n-\n-        // try to get version from initial data first\n-        for (Object service : serviceTrackingParams) {\n-            JsonObject s = (JsonObject) service;\n-            if (s.getString(\"service\").equals(\"CSI\")) {\n-                JsonArray params = s.getArray(\"params\");\n-                for (Object param: params) {\n-                    JsonObject p = (JsonObject) param;\n-                    String key = p.getString(\"key\");\n-                    if (key != null && key.equals(\"cver\")) {\n-                        return p.getString(\"value\");\n+    public static String getClientVersion() throws ParsingException {\n+        if (clientVersion != null && !clientVersion.isEmpty()) return clientVersion;\n+\n+        // Test if hard-coded client version is valid\n+        try {\n+            final String url = \"https://www.youtube.com/results?search_query=test&pbj=1\";\n+\n+            Map<String, List<String>> headers = new HashMap<>();\n+            headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(\"1\"));\n+            headers.put(\"X-YouTube-Client-Version\",\n+                    Collections.singletonList(HARDCODED_CLIENT_VERSION));\n+            final String response = getDownloader().get(url, headers).responseBody();\n+            if (response.length() > 50) { // ensure to have a valid response\n+                clientVersion = HARDCODED_CLIENT_VERSION;\n+                return clientVersion;\n+            }\n+        } catch (Exception ignored) {}\n+\n+        // Try extracting it from YouTube's website otherwise\n+        try {\n+            final String url = \"https://www.youtube.com/results?search_query=test\";\n+            final String html = getDownloader().get(url).responseBody();\n+            JsonObject initialData = getInitialData(html);\n+            JsonArray serviceTrackingParams = initialData.getObject(\"responseContext\").getArray(\"serviceTrackingParams\");\n+            String shortClientVersion = null;\n+\n+            // try to get version from initial data first\n+            for (Object service : serviceTrackingParams) {\n+                JsonObject s = (JsonObject) service;\n+                if (s.getString(\"service\").equals(\"CSI\")) {\n+                    JsonArray params = s.getArray(\"params\");\n+                    for (Object param : params) {\n+                        JsonObject p = (JsonObject) param;\n+                        String key = p.getString(\"key\");\n+                        if (key != null && key.equals(\"cver\")) {\n+                            clientVersion = p.getString(\"value\");\n+                            return clientVersion;\n+                        }\n                     }\n-                }\n-            } else if (s.getString(\"service\").equals(\"ECATCHER\")) {\n-                // fallback to get a shortened client version which does not contain the last do digits\n-                JsonArray params = s.getArray(\"params\");\n-                for (Object param: params) {\n-                    JsonObject p = (JsonObject) param;\n-                    String key = p.getString(\"key\");\n-                    if (key != null && key.equals(\"client.version\")) {\n-                        shortClientVersion = p.getString(\"value\");\n+                } else if (s.getString(\"service\").equals(\"ECATCHER\")) {\n+                    // fallback to get a shortened client version which does not contain the last do digits", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU4NTY0MA=="}, "originalCommit": {"oid": "88282761f44921e0533afdf93a4d83de0c0a4c20"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTA2NjYxOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeChannelExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDo1MjoyN1rOFv3jzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDo1MjoyN1rOFv3jzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTczNzY3Ng==", "bodyText": "Since you are using getVideoTab() many times in many functions, I'd suggest saving it in a variable on initialization, in order to speed up things", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385737676", "createdAt": "2020-02-28T14:52:27Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeChannelExtractor.java", "diffHunk": "@@ -290,6 +293,14 @@ private JsonObject getVideoTab() throws ParsingException {\n             throw new ParsingException(\"Could not find Videos tab\");\n         }\n \n+        try {\n+            if (getTextFromObject(videoTab.getObject(\"content\").getObject(\"sectionListRenderer\")\n+                    .getArray(\"contents\").getObject(0).getObject(\"itemSectionRenderer\")\n+                    .getArray(\"contents\").getObject(0).getObject(\"messageRenderer\")\n+                    .getObject(\"text\")).equals(\"This channel has no videos.\"))\n+                return null;\n+        } catch (Exception ignored) {}\n+\n         return videoTab;\n     }\n }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "originalPosition": 224}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTA4OTcwOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDo1ODo1MVrOFv3x_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTo1OToyOVrOFv5-6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0MTMxMA==", "bodyText": "Could you extract these lines into a separate function taking just url as argument and returns initialData, put it in a common YouTube helper file, and use it whenever possible? I see it is being used in many places, and it's better to avoid duplicate code", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385741310", "createdAt": "2020-02-28T14:58:51Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java", "diffHunk": "@@ -41,11 +40,26 @@ public YoutubePlaylistExtractor(StreamingService service, ListLinkHandler linkHa\n \n     @Override\n     public void onFetchPage(@Nonnull Downloader downloader) throws IOException, ExtractionException {\n-        final String url = getUrl();\n-        final Response response = downloader.get(url, getExtractorLocalization());\n-        doc = YoutubeParsingHelper.parseAndCheckPage(url, response);\n-        initialData = YoutubeParsingHelper.getInitialData(response.responseBody());\n-        uploaderInfo = getUploaderInfo();\n+        final String url = getUrl() + \"&pbj=1\";\n+\n+        JsonArray ajaxJson;\n+\n+        Map<String, List<String>> headers = new HashMap<>();\n+        headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(\"1\"));\n+        headers.put(\"X-YouTube-Client-Version\",\n+                Collections.singletonList(YoutubeParsingHelper.getClientVersion()));\n+        final String response = getDownloader().get(url, headers, getExtractorLocalization()).responseBody();\n+        if (response.length() < 50) { // ensure to have a valid response\n+            throw new ParsingException(\"Could not parse json data for next streams\");\n+        }\n+\n+        try {\n+            ajaxJson = JsonParser.array().from(response);\n+        } catch (JsonParserException e) {\n+            throw new ParsingException(\"Could not parse json data for next streams\", e);\n+        }\n+\n+        initialData = ajaxJson.getObject(1).getObject(\"response\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc3NzM4Nw==", "bodyText": "Yes, that was actually my plan, but I forgot about it. Thanks for reminding me.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385777387", "createdAt": "2020-02-28T15:59:29Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java", "diffHunk": "@@ -41,11 +40,26 @@ public YoutubePlaylistExtractor(StreamingService service, ListLinkHandler linkHa\n \n     @Override\n     public void onFetchPage(@Nonnull Downloader downloader) throws IOException, ExtractionException {\n-        final String url = getUrl();\n-        final Response response = downloader.get(url, getExtractorLocalization());\n-        doc = YoutubeParsingHelper.parseAndCheckPage(url, response);\n-        initialData = YoutubeParsingHelper.getInitialData(response.responseBody());\n-        uploaderInfo = getUploaderInfo();\n+        final String url = getUrl() + \"&pbj=1\";\n+\n+        JsonArray ajaxJson;\n+\n+        Map<String, List<String>> headers = new HashMap<>();\n+        headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(\"1\"));\n+        headers.put(\"X-YouTube-Client-Version\",\n+                Collections.singletonList(YoutubeParsingHelper.getClientVersion()));\n+        final String response = getDownloader().get(url, headers, getExtractorLocalization()).responseBody();\n+        if (response.length() < 50) { // ensure to have a valid response\n+            throw new ParsingException(\"Could not parse json data for next streams\");\n+        }\n+\n+        try {\n+            ajaxJson = JsonParser.array().from(response);\n+        } catch (JsonParserException e) {\n+            throw new ParsingException(\"Could not parse json data for next streams\", e);\n+        }\n+\n+        initialData = ajaxJson.getObject(1).getObject(\"response\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0MTMxMA=="}, "originalCommit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTExMTA5OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamInfoItemExtractor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTowNDoyMFrOFv3--Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjowMDoyNFrOFv6A8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NDYzMw==", "bodyText": "This removes one check when the duration extractor was successful with first try\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            }\n          \n          \n            \n                        } catch (Exception ignored) {}\n          \n          \n            \n                    }\n          \n          \n            \n                    if (duration != null) return YoutubeParsingHelper.parseDurationString(duration);\n          \n          \n            \n                    throw new ParsingException(\"Could not get duration\");\n          \n          \n            \n                            }\n          \n          \n            \n                        } catch (Exception ignored) {}\n          \n          \n            \n                        \n          \n          \n            \n                        if (duration == null) {\n          \n          \n            \n                            throw new ParsingException(\"Could not get duration\");\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    return YoutubeParsingHelper.parseDurationString(duration);", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385744633", "createdAt": "2020-02-28T15:04:20Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamInfoItemExtractor.java", "diffHunk": "@@ -76,46 +79,46 @@ public String getUrl() throws ParsingException {\n \n     @Override\n     public String getName() throws ParsingException {\n-        String name = null;\n-        try {\n-            name = videoInfo.getObject(\"title\").getString(\"simpleText\");\n-        } catch (Exception ignored) {}\n-        if (name == null) {\n-            try {\n-                name = videoInfo.getObject(\"title\").getArray(\"runs\").getObject(0).getString(\"text\");\n-            } catch (Exception ignored) {}\n-        }\n+        String name = getTextFromObject(videoInfo.getObject(\"title\"));\n         if (name != null && !name.isEmpty()) return name;\n         throw new ParsingException(\"Could not get name\");\n     }\n \n     @Override\n     public long getDuration() throws ParsingException {\n+        if (getStreamType() == StreamType.LIVE_STREAM) return -1;\n+        String duration = null;\n         try {\n-            if (getStreamType() == StreamType.LIVE_STREAM) return -1;\n-            return YoutubeParsingHelper.parseDurationString(videoInfo.getObject(\"lengthText\").getString(\"simpleText\"));\n-        } catch (Exception e) {\n-            throw new ParsingException(\"Could not get duration\", e);\n+            duration = getTextFromObject(videoInfo.getObject(\"lengthText\"));\n+        } catch (Exception ignored) {}\n+        if (duration == null) {\n+            try {\n+                for (Object thumbnailOverlay : videoInfo.getArray(\"thumbnailOverlays\")) {\n+                    if (((JsonObject) thumbnailOverlay).getObject(\"thumbnailOverlayTimeStatusRenderer\") != null) {\n+                        duration = getTextFromObject(((JsonObject) thumbnailOverlay)\n+                                .getObject(\"thumbnailOverlayTimeStatusRenderer\").getObject(\"text\"));\n+                    }\n+                }\n+            } catch (Exception ignored) {}\n         }\n+        if (duration != null) return YoutubeParsingHelper.parseDurationString(duration);\n+        throw new ParsingException(\"Could not get duration\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc3NzkwNQ==", "bodyText": "True, this probably happens at a lot of other places as well, but makes almost no difference.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385777905", "createdAt": "2020-02-28T16:00:24Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamInfoItemExtractor.java", "diffHunk": "@@ -76,46 +79,46 @@ public String getUrl() throws ParsingException {\n \n     @Override\n     public String getName() throws ParsingException {\n-        String name = null;\n-        try {\n-            name = videoInfo.getObject(\"title\").getString(\"simpleText\");\n-        } catch (Exception ignored) {}\n-        if (name == null) {\n-            try {\n-                name = videoInfo.getObject(\"title\").getArray(\"runs\").getObject(0).getString(\"text\");\n-            } catch (Exception ignored) {}\n-        }\n+        String name = getTextFromObject(videoInfo.getObject(\"title\"));\n         if (name != null && !name.isEmpty()) return name;\n         throw new ParsingException(\"Could not get name\");\n     }\n \n     @Override\n     public long getDuration() throws ParsingException {\n+        if (getStreamType() == StreamType.LIVE_STREAM) return -1;\n+        String duration = null;\n         try {\n-            if (getStreamType() == StreamType.LIVE_STREAM) return -1;\n-            return YoutubeParsingHelper.parseDurationString(videoInfo.getObject(\"lengthText\").getString(\"simpleText\"));\n-        } catch (Exception e) {\n-            throw new ParsingException(\"Could not get duration\", e);\n+            duration = getTextFromObject(videoInfo.getObject(\"lengthText\"));\n+        } catch (Exception ignored) {}\n+        if (duration == null) {\n+            try {\n+                for (Object thumbnailOverlay : videoInfo.getArray(\"thumbnailOverlays\")) {\n+                    if (((JsonObject) thumbnailOverlay).getObject(\"thumbnailOverlayTimeStatusRenderer\") != null) {\n+                        duration = getTextFromObject(((JsonObject) thumbnailOverlay)\n+                                .getObject(\"thumbnailOverlayTimeStatusRenderer\").getObject(\"text\"));\n+                    }\n+                }\n+            } catch (Exception ignored) {}\n         }\n+        if (duration != null) return YoutubeParsingHelper.parseDurationString(duration);\n+        throw new ParsingException(\"Could not get duration\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NDYzMw=="}, "originalCommit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTEyNzc2OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamInfoItemExtractor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTowOToxMlrOFv4JaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMjowNzozMlrOFwEMdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NzMwNA==", "bodyText": "In order to remove some checks and make more clear that there are many methods to extract the url which are tried one after the other, I'd suggest doing something like this:\n// try method one\n\nif (url == null) {\n    // try method two\n\n    if (url == null) {\n        // try method three\n\n        if (url == null || url.isEmpty()) {\n            // throw exception\n        }\n    }\n}", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385747304", "createdAt": "2020-02-28T15:09:12Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamInfoItemExtractor.java", "diffHunk": "@@ -125,30 +128,27 @@ public String getUploaderName() throws ParsingException {\n     @Override\n     public String getUploaderUrl() throws ParsingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc3NTIzMg==", "bodyText": "As in the following?\ntry {\n    // Do whatever\n} catch (Exception ignored) {}\n\nif (url == null) {\n    try {\n        // Do whatever\n    } catch (Exception ignored) {}\n\n    if (url == null) {\n        try {\n            // Do whatever\n        } catch (Exception ignored) {}\n\n        if (url == null || url.isEmpty()) {\n           throw new ParsingException(\"whatever\");\n        }\n    }\n}\nOr what do you mean? I'm not sure if I think that's cleaner. @TobiGr: What do you think?", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385775232", "createdAt": "2020-02-28T15:55:45Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamInfoItemExtractor.java", "diffHunk": "@@ -125,30 +128,27 @@ public String getUploaderName() throws ParsingException {\n     @Override\n     public String getUploaderUrl() throws ParsingException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NzMwNA=="}, "originalCommit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg2NjI2Mw==", "bodyText": "Well, the code above has less url == null checks when the first extraction method returns a valid result and is therefore \"faster\". On the other hand when the url is empty, we might not throw an Exception, but return an empty string. So we'd need something like this.\ntry {\n    // Do whatever\n} catch (Exception ignored) {}\n\nif (url == null) {\n    try {\n        // Do whatever\n    } catch (Exception ignored) {}\n\n    if (url == null) {\n        try {\n            // Do whatever\n        } catch (Exception ignored) {}\n    }\n}\nif (url == null || url.isEmpty()) {\n    throw new ParsingException(\"whatever\");\n}\nreturn url;\nHowever, I do not understand, why we only check once whether the url is empty. We should do this either every time or not at all. I suggest to remove this isEmpty check, because the JSON fields won't be empty. They either exist and contain a valid value or do not exist. That's why I'd use the following, which might be more efficient when having a valid result at the beginning.\ntry {\n    // Do whatever\n} catch (Exception ignored) {}\n\nif (url == null) {\n    try {\n        // Do whatever\n    } catch (Exception ignored) {}\n\n    if (url == null) {\n        try {\n            // Do whatever\n        } catch (Exception ignored) {}\n\n        if (url == null) {\n            throw new ParsingException(\"whatever\");\n        }\n    }\n}\n\nreturn url;\nHowever, these kind of changes won't speed up anything in a way a user can recognize that. If you want, you can change it, but maybe we should ask @Stypox first, if we understood correctly what he meant.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385866263", "createdAt": "2020-02-28T18:57:06Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamInfoItemExtractor.java", "diffHunk": "@@ -125,30 +128,27 @@ public String getUploaderName() throws ParsingException {\n     @Override\n     public String getUploaderUrl() throws ParsingException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NzMwNA=="}, "originalCommit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk0NDY5Mw==", "bodyText": "In terms of speed up this does not actually do much, but I think the second snippet provided by @TobiGr is more readable, since the indentation makes it clear that if the first method succeeds, the function will return that result immediately. With the current implementation you have to read and process more lines in order to understand that if the first method succeeds nothing else happens (i.e. there is no post processing or other things) @TobiGr @wb9688", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385944693", "createdAt": "2020-02-28T22:07:32Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamInfoItemExtractor.java", "diffHunk": "@@ -125,30 +128,27 @@ public String getUploaderName() throws ParsingException {\n     @Override\n     public String getUploaderUrl() throws ParsingException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NzMwNA=="}, "originalCommit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTEzNDEwOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeParsingHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToxMDo1MFrOFv4NLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToxMDo1MFrOFv4NLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0ODI3MQ==", "bodyText": "Please do this in a separate method and add a test to check if the hard-coded client version is valid.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385748271", "createdAt": "2020-02-28T15:10:50Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeParsingHelper.java", "diffHunk": "@@ -162,56 +177,163 @@ public static JsonObject getInitialData(String html) throws ParsingException {\n \n     /**\n      * Get the client version from a page\n-     * @param initialData\n-     * @param html The page HTML\n      * @return\n      * @throws ParsingException\n      */\n-    public static String getClientVersion(JsonObject initialData, String html) throws ParsingException {\n-        if (initialData == null) initialData = getInitialData(html);\n-        JsonArray serviceTrackingParams = initialData.getObject(\"responseContext\").getArray(\"serviceTrackingParams\");\n-        String shortClientVersion = null;\n-\n-        // try to get version from initial data first\n-        for (Object service : serviceTrackingParams) {\n-            JsonObject s = (JsonObject) service;\n-            if (s.getString(\"service\").equals(\"CSI\")) {\n-                JsonArray params = s.getArray(\"params\");\n-                for (Object param: params) {\n-                    JsonObject p = (JsonObject) param;\n-                    String key = p.getString(\"key\");\n-                    if (key != null && key.equals(\"cver\")) {\n-                        return p.getString(\"value\");\n+    public static String getClientVersion() throws ParsingException {\n+        if (clientVersion != null && !clientVersion.isEmpty()) return clientVersion;\n+\n+        // Test if hard-coded client version is valid\n+        try {\n+            final String url = \"https://www.youtube.com/results?search_query=test&pbj=1\";\n+\n+            Map<String, List<String>> headers = new HashMap<>();\n+            headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(\"1\"));\n+            headers.put(\"X-YouTube-Client-Version\",\n+                    Collections.singletonList(HARDCODED_CLIENT_VERSION));\n+            final String response = getDownloader().get(url, headers).responseBody();\n+            if (response.length() > 50) { // ensure to have a valid response\n+                clientVersion = HARDCODED_CLIENT_VERSION;\n+                return clientVersion;\n+            }\n+        } catch (Exception ignored) {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTEzOTgzOnYy", "diffSide": "LEFT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToxMjoyMVrOFv4QlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToxMjoyMVrOFv4QlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0OTE0MQ==", "bodyText": "Same as above: since you often use getVideoPrimaryInfoRenderer(), it would be a good idea to save it in a variable", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385749141", "createdAt": "2020-02-28T15:12:21Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -116,7 +113,7 @@ public String getName() throws ParsingException {\n         assertPageFetched();\n         String title = null;\n         try {\n-            title = getVideoPrimaryInfoRenderer().getObject(\"title\").getArray(\"runs\").getObject(0).getString(\"text\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTE0MjQ0OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeChannelExtractor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToxMzowN1rOFv4STA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxODoyNjoxNVrOFv-hlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0OTU4MA==", "bodyText": "We might want to append response to the exception message. This could help us with debugging error reports later.\nApart from that, we could also add a\npublic static boolean isJsonResponseValid(String response) to YouTubeParsingHelper.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385749580", "createdAt": "2020-02-28T15:13:07Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeChannelExtractor.java", "diffHunk": "@@ -64,16 +60,35 @@ public YoutubeChannelExtractor(StreamingService service, ListLinkHandler linkHan\n \n     @Override\n     public void onFetchPage(@Nonnull Downloader downloader) throws IOException, ExtractionException {\n-        String channelUrl = super.getUrl() + CHANNEL_URL_PARAMETERS;\n-        final Response response = downloader.get(channelUrl, getExtractorLocalization());\n-        doc = YoutubeParsingHelper.parseAndCheckPage(channelUrl, response);\n-        initialData = YoutubeParsingHelper.getInitialData(response.responseBody());\n+        final String url = super.getUrl() + \"/videos?pbj=1&view=0&flow=grid\";\n+\n+        JsonArray ajaxJson;\n+\n+        Map<String, List<String>> headers = new HashMap<>();\n+        headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(\"1\"));\n+        headers.put(\"X-YouTube-Client-Version\",\n+                Collections.singletonList(YoutubeParsingHelper.getClientVersion()));\n+        final String response = getDownloader().get(url, headers, getExtractorLocalization()).responseBody();\n+        if (response.length() < 50) { // ensure to have a valid response\n+            throw new ParsingException(\"Could not parse json data for next streams\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1NjczMA==", "bodyText": "We might want to append response to the exception message. This could help us with debugging error reports later.\n\nI'll do that. The error message doesn't make sense (probably copied from somewhere), so I'll improve that as well.\n\nApart from that, we could also add a\npublic static boolean isJsonResponseValid(String response) to YouTubeParsingHelper.\n\nIs that really needed for just response.length() < 50?", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385756730", "createdAt": "2020-02-28T15:25:25Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeChannelExtractor.java", "diffHunk": "@@ -64,16 +60,35 @@ public YoutubeChannelExtractor(StreamingService service, ListLinkHandler linkHan\n \n     @Override\n     public void onFetchPage(@Nonnull Downloader downloader) throws IOException, ExtractionException {\n-        String channelUrl = super.getUrl() + CHANNEL_URL_PARAMETERS;\n-        final Response response = downloader.get(channelUrl, getExtractorLocalization());\n-        doc = YoutubeParsingHelper.parseAndCheckPage(channelUrl, response);\n-        initialData = YoutubeParsingHelper.getInitialData(response.responseBody());\n+        final String url = super.getUrl() + \"/videos?pbj=1&view=0&flow=grid\";\n+\n+        JsonArray ajaxJson;\n+\n+        Map<String, List<String>> headers = new HashMap<>();\n+        headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(\"1\"));\n+        headers.put(\"X-YouTube-Client-Version\",\n+                Collections.singletonList(YoutubeParsingHelper.getClientVersion()));\n+        final String response = getDownloader().get(url, headers, getExtractorLocalization()).responseBody();\n+        if (response.length() < 50) { // ensure to have a valid response\n+            throw new ParsingException(\"Could not parse json data for next streams\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0OTU4MA=="}, "originalCommit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg0ODQ4Mg==", "bodyText": "It is ok for now, but maybe we can validate a response in the future differently (and more accurate). We can leave it for now.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385848482", "createdAt": "2020-02-28T18:19:19Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeChannelExtractor.java", "diffHunk": "@@ -64,16 +60,35 @@ public YoutubeChannelExtractor(StreamingService service, ListLinkHandler linkHan\n \n     @Override\n     public void onFetchPage(@Nonnull Downloader downloader) throws IOException, ExtractionException {\n-        String channelUrl = super.getUrl() + CHANNEL_URL_PARAMETERS;\n-        final Response response = downloader.get(channelUrl, getExtractorLocalization());\n-        doc = YoutubeParsingHelper.parseAndCheckPage(channelUrl, response);\n-        initialData = YoutubeParsingHelper.getInitialData(response.responseBody());\n+        final String url = super.getUrl() + \"/videos?pbj=1&view=0&flow=grid\";\n+\n+        JsonArray ajaxJson;\n+\n+        Map<String, List<String>> headers = new HashMap<>();\n+        headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(\"1\"));\n+        headers.put(\"X-YouTube-Client-Version\",\n+                Collections.singletonList(YoutubeParsingHelper.getClientVersion()));\n+        final String response = getDownloader().get(url, headers, getExtractorLocalization()).responseBody();\n+        if (response.length() < 50) { // ensure to have a valid response\n+            throw new ParsingException(\"Could not parse json data for next streams\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0OTU4MA=="}, "originalCommit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg1MTc5OA==", "bodyText": "YouTube returns {\"reload\":\"now\"} iirc if the client version is incorrect. I think this check isn't needed anymore now that we check whether the client version is valid and stuff in getClientVersion().", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385851798", "createdAt": "2020-02-28T18:26:15Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeChannelExtractor.java", "diffHunk": "@@ -64,16 +60,35 @@ public YoutubeChannelExtractor(StreamingService service, ListLinkHandler linkHan\n \n     @Override\n     public void onFetchPage(@Nonnull Downloader downloader) throws IOException, ExtractionException {\n-        String channelUrl = super.getUrl() + CHANNEL_URL_PARAMETERS;\n-        final Response response = downloader.get(channelUrl, getExtractorLocalization());\n-        doc = YoutubeParsingHelper.parseAndCheckPage(channelUrl, response);\n-        initialData = YoutubeParsingHelper.getInitialData(response.responseBody());\n+        final String url = super.getUrl() + \"/videos?pbj=1&view=0&flow=grid\";\n+\n+        JsonArray ajaxJson;\n+\n+        Map<String, List<String>> headers = new HashMap<>();\n+        headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(\"1\"));\n+        headers.put(\"X-YouTube-Client-Version\",\n+                Collections.singletonList(YoutubeParsingHelper.getClientVersion()));\n+        final String response = getDownloader().get(url, headers, getExtractorLocalization()).responseBody();\n+        if (response.length() < 50) { // ensure to have a valid response\n+            throw new ParsingException(\"Could not parse json data for next streams\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0OTU4MA=="}, "originalCommit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTE0MjYyOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToxMzoxMFrOFv4SbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTozNzozNVrOFv5MCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0OTYxMw==", "bodyText": "Why doesn't assertPageFetched() work anymore?", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385749613", "createdAt": "2020-02-28T15:13:10Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -261,17 +212,14 @@ public Description getDescription() throws ParsingException {\n     }\n \n     @Override\n-    public int getAgeLimit() throws ParsingException {\n-        assertPageFetched();\n-        if (!isAgeRestricted) {\n+    public int getAgeLimit() {\n+        if (initialData == null || initialData.isEmpty()) throw new IllegalStateException(\"initialData is not parsed yet\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2NDM2Mw==", "bodyText": "Because getAgeLimit is (now indirectly) being called in onFetchPage().", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385764363", "createdAt": "2020-02-28T15:37:35Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -261,17 +212,14 @@ public Description getDescription() throws ParsingException {\n     }\n \n     @Override\n-    public int getAgeLimit() throws ParsingException {\n-        assertPageFetched();\n-        if (!isAgeRestricted) {\n+    public int getAgeLimit() {\n+        if (initialData == null || initialData.isEmpty()) throw new IllegalStateException(\"initialData is not parsed yet\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0OTYxMw=="}, "originalCommit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTE1MDc1OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToxNTozMlrOFv4XmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToxNTozMlrOFv4XmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1MDkzNw==", "bodyText": "Same as above to save if checks and improve code readability, I'd move if (uploaderId == null) throw new ParsingException(\"Could not get uploader url\"); at the end of the if just above", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385750937", "createdAt": "2020-02-28T15:15:32Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -381,17 +322,15 @@ public long getDislikeCount() throws ParsingException {\n     @Override\n     public String getUploaderUrl() throws ParsingException {\n         assertPageFetched();\n-        String uploaderId = null;\n         try {\n-            uploaderId = getVideoSecondaryInfoRenderer().getObject(\"owner\").getObject(\"videoOwnerRenderer\")\n-                    .getObject(\"navigationEndpoint\").getObject(\"browseEndpoint\").getString(\"browseId\");\n+            String uploaderUrl = getUrlFromNavigationEndpoint(getVideoSecondaryInfoRenderer()\n+                    .getObject(\"owner\").getObject(\"videoOwnerRenderer\").getObject(\"navigationEndpoint\"));\n+            if (uploaderUrl != null) return uploaderUrl;\n+        } catch (Exception ignored) {}\n+        try {\n+            String uploaderId = playerResponse.getObject(\"videoDetails\").getString(\"channelId\");\n+            if (uploaderId != null) return \"https://www.youtube.com/channel/\" + uploaderId;\n         } catch (Exception ignored) {}\n-        if (uploaderId == null) {\n-            try {\n-                uploaderId = playerResponse.getObject(\"videoDetails\").getString(\"channelId\");\n-            } catch (Exception ignored) {}\n-        }\n-        if (uploaderId != null) return \"https://www.youtube.com/channel/\" + uploaderId;\n         throw new ParsingException(\"Could not get uploader url\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "originalPosition": 221}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTE1Nzc4OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToxNzoxNVrOFv4buA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToxNzoxNVrOFv4buA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1MTk5Mg==", "bodyText": "The result of this function should, too, being cached, since it is used many times", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385751992", "createdAt": "2020-02-28T15:17:15Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -261,17 +212,14 @@ public Description getDescription() throws ParsingException {\n     }\n \n     @Override\n-    public int getAgeLimit() throws ParsingException {\n-        assertPageFetched();\n-        if (!isAgeRestricted) {\n+    public int getAgeLimit() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTE1OTUwOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToxNzo0NlrOFv4c0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTozODo0OVrOFv5PJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1MjI3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (getAgeLimit() == 18) {\n          \n          \n            \n                    if (getAgeLimit() != NO_AGE_LIMIT) {", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385752273", "createdAt": "2020-02-28T15:17:46Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -578,7 +504,7 @@ public StreamType getStreamType() throws ParsingException {\n     @Override\n     public StreamInfoItem getNextStream() throws ExtractionException {\n         assertPageFetched();\n-        if (isAgeRestricted) {\n+        if (getAgeLimit() == 18) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "originalPosition": 272}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2NTE1OA==", "bodyText": "That's better indeed, though getAgeLimit() will only ever return 18.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385765158", "createdAt": "2020-02-28T15:38:49Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -578,7 +504,7 @@ public StreamType getStreamType() throws ParsingException {\n     @Override\n     public StreamInfoItem getNextStream() throws ExtractionException {\n         assertPageFetched();\n-        if (isAgeRestricted) {\n+        if (getAgeLimit() == 18) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1MjI3Mw=="}, "originalCommit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "originalPosition": 272}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTE2MDQ2OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToxODowM1rOFv4dbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToxODowM1rOFv4dbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1MjQyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (getAgeLimit() == 18) {\n          \n          \n            \n                    if (getAgeLimit() != NO_AGE_LIMIT) {", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385752429", "createdAt": "2020-02-28T15:18:03Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -599,7 +525,7 @@ public StreamInfoItem getNextStream() throws ExtractionException {\n     @Override\n     public StreamInfoItemsCollector getRelatedStreams() throws ExtractionException {\n         assertPageFetched();\n-        if (isAgeRestricted) {\n+        if (getAgeLimit() == 18) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "originalPosition": 281}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTE2MjQwOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToxODozMFrOFv4ehA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToxODozMFrOFv4ehA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1MjcwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (getAgeLimit() == 18) return Collections.emptyList();\n          \n          \n            \n                    if (getAgeLimit() != NO_AGE_LIMIT) return Collections.emptyList();", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385752708", "createdAt": "2020-02-28T15:18:30Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -869,7 +773,7 @@ private String getDecryptionFuncName(String playerCode) throws DecryptException\n     @Nonnull\n     private List<SubtitlesInfo> getAvailableSubtitlesInfo() {\n         // If the video is age restricted getPlayerConfig will fail\n-        if (isAgeRestricted) return Collections.emptyList();\n+        if (getAgeLimit() == 18) return Collections.emptyList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "originalPosition": 408}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTE3NTcwOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToyMTo1OVrOFv4mfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxNToyNjowN1rOFwJtcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1NDc1MQ==", "bodyText": "Isn't there a way to always get the uploader url in the \"/channel/ID\" form? This would make it consistent with other urls in the app, preventing bugs such as duplicate subscriptions", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385754751", "createdAt": "2020-02-28T15:21:59Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java", "diffHunk": "@@ -127,8 +149,7 @@ public String getBannerUrl() {\n     @Override\n     public String getUploaderUrl() throws ParsingException {\n         try {\n-            return YoutubeChannelExtractor.CHANNEL_URL_BASE +\n-                    uploaderInfo.getObject(\"navigationEndpoint\").getObject(\"browseEndpoint\").getString(\"browseId\");\n+            return getUrlFromNavigationEndpoint(getUploaderInfo().getObject(\"navigationEndpoint\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2NjkyOQ==", "bodyText": "Yes, there is I think. Edit: namely reverting that change.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385766929", "createdAt": "2020-02-28T15:41:32Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java", "diffHunk": "@@ -127,8 +149,7 @@ public String getBannerUrl() {\n     @Override\n     public String getUploaderUrl() throws ParsingException {\n         try {\n-            return YoutubeChannelExtractor.CHANNEL_URL_BASE +\n-                    uploaderInfo.getObject(\"navigationEndpoint\").getObject(\"browseEndpoint\").getString(\"browseId\");\n+            return getUrlFromNavigationEndpoint(getUploaderInfo().getObject(\"navigationEndpoint\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1NDc1MQ=="}, "originalCommit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAzNTA1OA==", "bodyText": "@TobiGr: I don't think we should do that, as there are many other ways to get to a /user/name channel in NewPipe. Plus NewPipe could do a simple call to getId() or getUrl() in YoutubeChannelExtractor to get a /channel/id URL, if NewPipe isn't doing that already.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r386035058", "createdAt": "2020-02-29T15:26:07Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java", "diffHunk": "@@ -127,8 +149,7 @@ public String getBannerUrl() {\n     @Override\n     public String getUploaderUrl() throws ParsingException {\n         try {\n-            return YoutubeChannelExtractor.CHANNEL_URL_BASE +\n-                    uploaderInfo.getObject(\"navigationEndpoint\").getObject(\"browseEndpoint\").getString(\"browseId\");\n+            return getUrlFromNavigationEndpoint(getUploaderInfo().getObject(\"navigationEndpoint\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1NDc1MQ=="}, "originalCommit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDQ3Nzk3OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMjo0OTozM1rOFwE_2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMDozMzo0MlrOFwGZ5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk1Nzg1MA==", "bodyText": "This should be done using the\nYoutubeChannelLinkHandlerFactory.getUrl(iploaderId, null, null) method. But it seems to be buggy to me. It does not return \"https://www.youtube.com/channel/ID\", but \"https://www.youtube.com/ID\". I searched for a small random channel (www.youtube.com/user/effectpl) and looked up its channelId (UCuyC5c8JXzPx71aMg7rGFgQ). While www.youtube.com/UCuyC5c8JXzPx71aMg7rGFgQ results in a 404 response,  www.youtube.com/channel/UCuyC5c8JXzPx71aMg7rGFgQ is valid.\nDoes anyone know, why it is implemented that way?", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385957850", "createdAt": "2020-02-28T22:49:33Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -381,17 +321,15 @@ public long getDislikeCount() throws ParsingException {\n     @Override\n     public String getUploaderUrl() throws ParsingException {\n         assertPageFetched();\n-        String uploaderId = null;\n         try {\n-            uploaderId = getVideoSecondaryInfoRenderer().getObject(\"owner\").getObject(\"videoOwnerRenderer\")\n-                    .getObject(\"navigationEndpoint\").getObject(\"browseEndpoint\").getString(\"browseId\");\n+            String uploaderUrl = getUrlFromNavigationEndpoint(getVideoSecondaryInfoRenderer()\n+                    .getObject(\"owner\").getObject(\"videoOwnerRenderer\").getObject(\"navigationEndpoint\"));\n+            if (uploaderUrl != null) return uploaderUrl;\n+        } catch (Exception ignored) {}\n+        try {\n+            String uploaderId = playerResponse.getObject(\"videoDetails\").getString(\"channelId\");\n+            if (uploaderId != null) return \"https://www.youtube.com/channel/\" + uploaderId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ff655352de245dacc901c179ea70e7512ad853c"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk1ODk3MQ==", "bodyText": "That's something I noticed as well. It appears that someone wants to have channel/UCwhatever as input there, so that it would also accept e.g. user/whatever URLs without having to do a conversion of some kind.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385958971", "createdAt": "2020-02-28T22:53:32Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -381,17 +321,15 @@ public long getDislikeCount() throws ParsingException {\n     @Override\n     public String getUploaderUrl() throws ParsingException {\n         assertPageFetched();\n-        String uploaderId = null;\n         try {\n-            uploaderId = getVideoSecondaryInfoRenderer().getObject(\"owner\").getObject(\"videoOwnerRenderer\")\n-                    .getObject(\"navigationEndpoint\").getObject(\"browseEndpoint\").getString(\"browseId\");\n+            String uploaderUrl = getUrlFromNavigationEndpoint(getVideoSecondaryInfoRenderer()\n+                    .getObject(\"owner\").getObject(\"videoOwnerRenderer\").getObject(\"navigationEndpoint\"));\n+            if (uploaderUrl != null) return uploaderUrl;\n+        } catch (Exception ignored) {}\n+        try {\n+            String uploaderId = playerResponse.getObject(\"videoDetails\").getString(\"channelId\");\n+            if (uploaderId != null) return \"https://www.youtube.com/channel/\" + uploaderId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk1Nzg1MA=="}, "originalCommit": {"oid": "4ff655352de245dacc901c179ea70e7512ad853c"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4MDkwMQ==", "bodyText": "Ah yes, correct. That was the reason. Can you please add this info as Jdoc and use the method?", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385980901", "createdAt": "2020-02-29T00:33:42Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -381,17 +321,15 @@ public long getDislikeCount() throws ParsingException {\n     @Override\n     public String getUploaderUrl() throws ParsingException {\n         assertPageFetched();\n-        String uploaderId = null;\n         try {\n-            uploaderId = getVideoSecondaryInfoRenderer().getObject(\"owner\").getObject(\"videoOwnerRenderer\")\n-                    .getObject(\"navigationEndpoint\").getObject(\"browseEndpoint\").getString(\"browseId\");\n+            String uploaderUrl = getUrlFromNavigationEndpoint(getVideoSecondaryInfoRenderer()\n+                    .getObject(\"owner\").getObject(\"videoOwnerRenderer\").getObject(\"navigationEndpoint\"));\n+            if (uploaderUrl != null) return uploaderUrl;\n+        } catch (Exception ignored) {}\n+        try {\n+            String uploaderId = playerResponse.getObject(\"videoDetails\").getString(\"channelId\");\n+            if (uploaderId != null) return \"https://www.youtube.com/channel/\" + uploaderId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk1Nzg1MA=="}, "originalCommit": {"oid": "4ff655352de245dacc901c179ea70e7512ad853c"}, "originalPosition": 217}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTA3OTQxOnYy", "diffSide": "RIGHT", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/search/YoutubeSearchExtractorChannelOnlyTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxNjozODoxMVrOFwJ-mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxNzoxNjozNVrOFwKH0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAzOTQ1MQ==", "bodyText": "Is that a good idea? Because we are talking about channel name, something youtubers (can) change often & easily. Check for id would be better (unchangeable)", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r386039451", "createdAt": "2020-02-29T16:38:11Z", "author": {"login": "B0pol"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/search/YoutubeSearchExtractorChannelOnlyTest.java", "diffHunk": "@@ -77,7 +92,7 @@ public void testChannelUrl() {\n             if (item instanceof ChannelInfoItem) {\n                 ChannelInfoItem channel = (ChannelInfoItem) item;\n \n-                if (channel.getSubscriberCount() > 5e7) { // the real PewDiePie\n+                if (channel.getSubscriberCount() > 5e7 && channel.getName().equals(\"PewDiePie\")) { // the real PewDiePie", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6a63e957030429223ad824aa1e8ad46408e6c65"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAzOTQ5NQ==", "bodyText": "You're right, except that there's no way to get an ID from a ChannelInfoItem.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r386039495", "createdAt": "2020-02-29T16:38:49Z", "author": {"login": "wb9688"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/search/YoutubeSearchExtractorChannelOnlyTest.java", "diffHunk": "@@ -77,7 +92,7 @@ public void testChannelUrl() {\n             if (item instanceof ChannelInfoItem) {\n                 ChannelInfoItem channel = (ChannelInfoItem) item;\n \n-                if (channel.getSubscriberCount() > 5e7) { // the real PewDiePie\n+                if (channel.getSubscriberCount() > 5e7 && channel.getName().equals(\"PewDiePie\")) { // the real PewDiePie", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAzOTQ1MQ=="}, "originalCommit": {"oid": "a6a63e957030429223ad824aa1e8ad46408e6c65"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0MDI4Ng==", "bodyText": "Then change 5e7 (50M) to 1e8, ie 100M", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r386040286", "createdAt": "2020-02-29T16:51:29Z", "author": {"login": "B0pol"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/search/YoutubeSearchExtractorChannelOnlyTest.java", "diffHunk": "@@ -77,7 +92,7 @@ public void testChannelUrl() {\n             if (item instanceof ChannelInfoItem) {\n                 ChannelInfoItem channel = (ChannelInfoItem) item;\n \n-                if (channel.getSubscriberCount() > 5e7) { // the real PewDiePie\n+                if (channel.getSubscriberCount() > 5e7 && channel.getName().equals(\"PewDiePie\")) { // the real PewDiePie", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAzOTQ1MQ=="}, "originalCommit": {"oid": "a6a63e957030429223ad824aa1e8ad46408e6c65"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0MTgwOA==", "bodyText": "The problem is T-Series showing up in the results, so that won't help. What would help is a break after the first channel is found that matches the subscriber criteria.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r386041808", "createdAt": "2020-02-29T17:16:35Z", "author": {"login": "wb9688"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/search/YoutubeSearchExtractorChannelOnlyTest.java", "diffHunk": "@@ -77,7 +92,7 @@ public void testChannelUrl() {\n             if (item instanceof ChannelInfoItem) {\n                 ChannelInfoItem channel = (ChannelInfoItem) item;\n \n-                if (channel.getSubscriberCount() > 5e7) { // the real PewDiePie\n+                if (channel.getSubscriberCount() > 5e7 && channel.getName().equals(\"PewDiePie\")) { // the real PewDiePie", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAzOTQ1MQ=="}, "originalCommit": {"oid": "a6a63e957030429223ad824aa1e8ad46408e6c65"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTE1Mjk0OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeParsingHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxOTowODoxNlrOFwKizA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxOTowODoxNlrOFwKizA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0ODcxNg==", "bodyText": "This string sometimes doesn't exist and we end up with https://www.youtube.comnull.\nI think you mentioned in a comment above, and it seems like the browseId is returned everytime.\nWould have to watch out though, because browseEndpoint seems like a generic response and maybe other types of items are returned as well.\nIt'd also help with the consistency of the /channel endpoint use, as some VEVO channels still return their canonicalBaseUrl using /user. Although you already told you opinion about this, it isn't always possible to call that method everywhere (for example: show the subscribe button in lists isn't the most reliable thing when this sort of thing happens), but meh, it's a limitation that we have to live with.\nPS: Discovered with the improvements made in this PR: #265.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r386048716", "createdAt": "2020-02-29T19:08:16Z", "author": {"login": "mauriciocolli"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeParsingHelper.java", "diffHunk": "@@ -160,58 +178,189 @@ public static JsonObject getInitialData(String html) throws ParsingException {\n         }\n     }\n \n+    public static boolean isHardcodedClientVersionValid() throws IOException {\n+        try {\n+            final String url = \"https://www.youtube.com/results?search_query=test&pbj=1\";\n+\n+            Map<String, List<String>> headers = new HashMap<>();\n+            headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(\"1\"));\n+            headers.put(\"X-YouTube-Client-Version\",\n+                    Collections.singletonList(HARDCODED_CLIENT_VERSION));\n+            final String response = getDownloader().get(url, headers).responseBody();\n+            if (response.length() > 50) { // ensure to have a valid response\n+                return true;\n+            }\n+        } catch (ReCaptchaException ignored) {}\n+\n+        return false;\n+    }\n+\n     /**\n      * Get the client version from a page\n-     * @param initialData\n-     * @param html The page HTML\n      * @return\n      * @throws ParsingException\n      */\n-    public static String getClientVersion(JsonObject initialData, String html) throws ParsingException {\n-        if (initialData == null) initialData = getInitialData(html);\n-        JsonArray serviceTrackingParams = initialData.getObject(\"responseContext\").getArray(\"serviceTrackingParams\");\n-        String shortClientVersion = null;\n-\n-        // try to get version from initial data first\n-        for (Object service : serviceTrackingParams) {\n-            JsonObject s = (JsonObject) service;\n-            if (s.getString(\"service\").equals(\"CSI\")) {\n-                JsonArray params = s.getArray(\"params\");\n-                for (Object param: params) {\n-                    JsonObject p = (JsonObject) param;\n-                    String key = p.getString(\"key\");\n-                    if (key != null && key.equals(\"cver\")) {\n-                        return p.getString(\"value\");\n+    public static String getClientVersion() throws ParsingException, IOException {\n+        if (clientVersion != null && !clientVersion.isEmpty()) return clientVersion;\n+\n+        if (isHardcodedClientVersionValid()) {\n+            clientVersion = HARDCODED_CLIENT_VERSION;\n+            return clientVersion;\n+        }\n+\n+        // Try extracting it from YouTube's website otherwise\n+        try {\n+            final String url = \"https://www.youtube.com/results?search_query=test\";\n+            final String html = getDownloader().get(url).responseBody();\n+            JsonObject initialData = getInitialData(html);\n+            JsonArray serviceTrackingParams = initialData.getObject(\"responseContext\").getArray(\"serviceTrackingParams\");\n+            String shortClientVersion = null;\n+\n+            // try to get version from initial data first\n+            for (Object service : serviceTrackingParams) {\n+                JsonObject s = (JsonObject) service;\n+                if (s.getString(\"service\").equals(\"CSI\")) {\n+                    JsonArray params = s.getArray(\"params\");\n+                    for (Object param : params) {\n+                        JsonObject p = (JsonObject) param;\n+                        String key = p.getString(\"key\");\n+                        if (key != null && key.equals(\"cver\")) {\n+                            clientVersion = p.getString(\"value\");\n+                            return clientVersion;\n+                        }\n+                    }\n+                } else if (s.getString(\"service\").equals(\"ECATCHER\")) {\n+                    // fallback to get a shortened client version which does not contain the last two digits\n+                    JsonArray params = s.getArray(\"params\");\n+                    for (Object param : params) {\n+                        JsonObject p = (JsonObject) param;\n+                        String key = p.getString(\"key\");\n+                        if (key != null && key.equals(\"client.version\")) {\n+                            shortClientVersion = p.getString(\"value\");\n+                        }\n+                    }\n+                }\n+            }\n+\n+            String contextClientVersion;\n+            String[] patterns = {\n+                    \"INNERTUBE_CONTEXT_CLIENT_VERSION\\\":\\\"([0-9\\\\.]+?)\\\"\",\n+                    \"innertube_context_client_version\\\":\\\"([0-9\\\\.]+?)\\\"\",\n+                    \"client.version=([0-9\\\\.]+)\"\n+            };\n+            for (String pattern : patterns) {\n+                try {\n+                    contextClientVersion = Parser.matchGroup1(pattern, html);\n+                    if (contextClientVersion != null && !contextClientVersion.isEmpty()) {\n+                        clientVersion = contextClientVersion;\n+                        return clientVersion;\n                     }\n+                } catch (Exception ignored) {\n                 }\n-            } else if (s.getString(\"service\").equals(\"ECATCHER\")) {\n-                // fallback to get a shortened client version which does not contain the last do digits\n-                JsonArray params = s.getArray(\"params\");\n-                for (Object param: params) {\n-                    JsonObject p = (JsonObject) param;\n-                    String key = p.getString(\"key\");\n-                    if (key != null && key.equals(\"client.version\")) {\n-                        shortClientVersion = p.getString(\"value\");\n+            }\n+\n+            if (shortClientVersion != null) {\n+                clientVersion = shortClientVersion;\n+                return clientVersion;\n+            }\n+        } catch (Exception ignored) {}\n+\n+        throw new ParsingException(\"Could not get client version\");\n+    }\n+\n+    public static String getUrlFromNavigationEndpoint(JsonObject navigationEndpoint) {\n+        if (navigationEndpoint.getObject(\"urlEndpoint\") != null) {\n+            String internUrl = navigationEndpoint.getObject(\"urlEndpoint\").getString(\"url\");\n+            if (internUrl.startsWith(\"/redirect?\")) {\n+                // q parameter can be the first parameter\n+                internUrl = internUrl.substring(10);\n+                String[] params = internUrl.split(\"&\");\n+                for (String param : params) {\n+                    if (param.split(\"=\")[0].equals(\"q\")) {\n+                        String url;\n+                        try {\n+                            url = URLDecoder.decode(param.split(\"=\")[1], StandardCharsets.UTF_8.name());\n+                        } catch (UnsupportedEncodingException e) {\n+                            return null;\n+                        }\n+                        return url;\n                     }\n                 }\n+            } else if (internUrl.startsWith(\"http\")) {\n+                return internUrl;\n+            }\n+        } else if (navigationEndpoint.getObject(\"browseEndpoint\") != null) {\n+            return \"https://www.youtube.com\" + navigationEndpoint.getObject(\"browseEndpoint\").getString(\"canonicalBaseUrl\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e4d2fd64e4fd00f02ebacb8c31d9e3b2de7d6ed"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTE2NTEzOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamInfoItemExtractor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxOTozMToxOVrOFwKotQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxOTozMToxOVrOFwKotQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA1MDIyOQ==", "bodyText": "This doesn't take into account the \"No views\" case.\nAlso, shame there's no other way to detect this cases.\n@B0pol considering there's even more of these hard coded checks, it seems like parsing all the languages will be annoying, unless you map all the cases. A tremendous maintenance burden, even if it is automated (get the english and compare pages from other languages with it). Would increase the code complexity a lot I think.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r386050229", "createdAt": "2020-02-29T19:31:19Z", "author": {"login": "mauriciocolli"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamInfoItemExtractor.java", "diffHunk": "@@ -185,13 +194,7 @@ public long getViewCount() throws ParsingException {\n             if (videoInfo.getObject(\"topStandaloneBadge\") != null || isPremium()) {\n                 return -1;\n             }\n-            String viewCount;\n-            if (getStreamType() == StreamType.LIVE_STREAM)  {\n-                viewCount = videoInfo.getObject(\"viewCountText\")\n-                        .getArray(\"runs\").getObject(0).getString(\"text\");\n-            } else {\n-                viewCount = videoInfo.getObject(\"viewCountText\").getString(\"simpleText\");\n-            }\n+            String viewCount = getTextFromObject(videoInfo.getObject(\"viewCountText\"));\n             if (viewCount.equals(\"Recommended for you\")) return -1;\n             return Long.parseLong(Utils.removeNonDigitCharacters(viewCount));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e4d2fd64e4fd00f02ebacb8c31d9e3b2de7d6ed"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTE2NzA4OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamInfoItemExtractor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxOTozNTozOVrOFwKprA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxOTozNTozOVrOFwKprA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA1MDQ3Ng==", "bodyText": "This fails when a video has no views because they are hidden.\nFor example, the Vox channel has some videos which fall in this case, like this one.\nPS: Oddly enough, I went and checked the extractor for streams and for a surprise, there the views are actually available.  Oversight by YouTube I guess.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r386050476", "createdAt": "2020-02-29T19:35:39Z", "author": {"login": "mauriciocolli"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamInfoItemExtractor.java", "diffHunk": "@@ -185,13 +194,7 @@ public long getViewCount() throws ParsingException {\n             if (videoInfo.getObject(\"topStandaloneBadge\") != null || isPremium()) {\n                 return -1;\n             }\n-            String viewCount;\n-            if (getStreamType() == StreamType.LIVE_STREAM)  {\n-                viewCount = videoInfo.getObject(\"viewCountText\")\n-                        .getArray(\"runs\").getObject(0).getString(\"text\");\n-            } else {\n-                viewCount = videoInfo.getObject(\"viewCountText\").getString(\"simpleText\");\n-            }\n+            String viewCount = getTextFromObject(videoInfo.getObject(\"viewCountText\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e4d2fd64e4fd00f02ebacb8c31d9e3b2de7d6ed"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTE3NjYwOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamInfoItemExtractor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxOTo1NjoxOFrOFwKubw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxOTo1NjoxOFrOFwKubw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA1MTY5NQ==", "bodyText": "Should handle video premieres, as the date will be in the future.\nAvailable in the upcomingEventData object, I think the core of the old implementation could be reused here:\n\n  \n    \n      NewPipeExtractor/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamInfoItemExtractor.java\n    \n    \n        Lines 264 to 287\n      in\n      26234a1\n    \n    \n    \n    \n\n        \n          \n           private boolean isVideoReminder() { \n        \n\n        \n          \n               return !item.select(\"span.yt-uix-livereminder\").isEmpty(); \n        \n\n        \n          \n           } \n        \n\n        \n          \n            \n        \n\n        \n          \n           private Calendar getDateFromReminder() throws ParsingException { \n        \n\n        \n          \n               final Element timeFuture = item.select(\"span.yt-badge.localized-date\").first(); \n        \n\n        \n          \n            \n        \n\n        \n          \n               if (timeFuture == null) { \n        \n\n        \n          \n                   throw new ParsingException(\"Span timeFuture is null\"); \n        \n\n        \n          \n               } \n        \n\n        \n          \n            \n        \n\n        \n          \n               final String timestamp = timeFuture.attr(\"data-timestamp\"); \n        \n\n        \n          \n               if (!timestamp.isEmpty()) { \n        \n\n        \n          \n                   try { \n        \n\n        \n          \n                       final Calendar calendar = Calendar.getInstance(); \n        \n\n        \n          \n                       calendar.setTime(new Date(Long.parseLong(timestamp) * 1000L)); \n        \n\n        \n          \n                       return calendar; \n        \n\n        \n          \n                   } catch (Exception e) { \n        \n\n        \n          \n                       throw new ParsingException(\"Could not parse = \\\"\" + timestamp + \"\\\"\"); \n        \n\n        \n          \n                   } \n        \n\n        \n          \n               } \n        \n\n        \n          \n            \n        \n\n        \n          \n               throw new ParsingException(\"Could not parse date from reminder element: \\\"\" + timeFuture + \"\\\"\"); \n        \n\n        \n          \n           }", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r386051695", "createdAt": "2020-02-29T19:56:18Z", "author": {"login": "mauriciocolli"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamInfoItemExtractor.java", "diffHunk": "@@ -76,89 +79,95 @@ public String getUrl() throws ParsingException {\n \n     @Override\n     public String getName() throws ParsingException {\n-        String name = null;\n-        try {\n-            name = videoInfo.getObject(\"title\").getString(\"simpleText\");\n-        } catch (Exception ignored) {}\n-        if (name == null) {\n-            try {\n-                name = videoInfo.getObject(\"title\").getArray(\"runs\").getObject(0).getString(\"text\");\n-            } catch (Exception ignored) {}\n-        }\n+        String name = getTextFromObject(videoInfo.getObject(\"title\"));\n         if (name != null && !name.isEmpty()) return name;\n         throw new ParsingException(\"Could not get name\");\n     }\n \n     @Override\n     public long getDuration() throws ParsingException {\n+        if (getStreamType() == StreamType.LIVE_STREAM) return -1;\n+\n+        String duration = null;\n+\n         try {\n-            if (getStreamType() == StreamType.LIVE_STREAM) return -1;\n-            return YoutubeParsingHelper.parseDurationString(videoInfo.getObject(\"lengthText\").getString(\"simpleText\"));\n-        } catch (Exception e) {\n-            throw new ParsingException(\"Could not get duration\", e);\n+            duration = getTextFromObject(videoInfo.getObject(\"lengthText\"));\n+        } catch (Exception ignored) {}\n+\n+        if (duration == null) {\n+            try {\n+                for (Object thumbnailOverlay : videoInfo.getArray(\"thumbnailOverlays\")) {\n+                    if (((JsonObject) thumbnailOverlay).getObject(\"thumbnailOverlayTimeStatusRenderer\") != null) {\n+                        duration = getTextFromObject(((JsonObject) thumbnailOverlay)\n+                                .getObject(\"thumbnailOverlayTimeStatusRenderer\").getObject(\"text\"));\n+                    }\n+                }\n+            } catch (Exception ignored) {}\n+\n+            if (duration == null) throw new ParsingException(\"Could not get duration\");\n         }\n+\n+        return YoutubeParsingHelper.parseDurationString(duration);\n     }\n \n     @Override\n     public String getUploaderName() throws ParsingException {\n         String name = null;\n+\n         try {\n-            name = videoInfo.getObject(\"longBylineText\").getArray(\"runs\")\n-                    .getObject(0).getString(\"text\");\n+            name = getTextFromObject(videoInfo.getObject(\"longBylineText\"));\n         } catch (Exception ignored) {}\n+\n         if (name == null) {\n             try {\n-                name = videoInfo.getObject(\"ownerText\").getArray(\"runs\")\n-                        .getObject(0).getString(\"text\");\n-            } catch (Exception ignored) {}\n-        }\n-        if (name == null) {\n-            try {\n-                name = videoInfo.getObject(\"shortBylineText\").getArray(\"runs\")\n-                        .getObject(0).getString(\"text\");\n+                name = getTextFromObject(videoInfo.getObject(\"ownerText\"));\n             } catch (Exception ignored) {}\n+\n+            if (name == null) {\n+                try {\n+                    name = getTextFromObject(videoInfo.getObject(\"shortBylineText\"));\n+                } catch (Exception ignored) {}\n+\n+                if (name == null) throw new ParsingException(\"Could not get uploader name\");\n+            }\n         }\n-        if (name != null && !name.isEmpty()) return name;\n-        throw new ParsingException(\"Could not get uploader name\");\n+\n+        return name;\n     }\n \n     @Override\n     public String getUploaderUrl() throws ParsingException {\n+        String url = null;\n+\n         try {\n-            String id = null;\n+            url = getUrlFromNavigationEndpoint(videoInfo.getObject(\"longBylineText\")\n+                    .getArray(\"runs\").getObject(0).getObject(\"navigationEndpoint\"));\n+        } catch (Exception ignored) {}\n+\n+        if (url == null) {\n             try {\n-                id = videoInfo.getObject(\"longBylineText\").getArray(\"runs\")\n-                        .getObject(0).getObject(\"navigationEndpoint\")\n-                        .getObject(\"browseEndpoint\").getString(\"browseId\");\n+                url = getUrlFromNavigationEndpoint(videoInfo.getObject(\"ownerText\")\n+                        .getArray(\"runs\").getObject(0).getObject(\"navigationEndpoint\"));\n             } catch (Exception ignored) {}\n-            if (id == null) {\n-                try {\n-                    id = videoInfo.getObject(\"ownerText\").getArray(\"runs\")\n-                            .getObject(0).getObject(\"navigationEndpoint\")\n-                            .getObject(\"browseEndpoint\").getString(\"browseId\");\n-                } catch (Exception ignored) {}\n-            }\n-            if (id == null) {\n+\n+            if (url == null) {\n                 try {\n-                    id = videoInfo.getObject(\"shortBylineText\").getArray(\"runs\")\n-                            .getObject(0).getObject(\"navigationEndpoint\")\n-                            .getObject(\"browseEndpoint\").getString(\"browseId\");\n+                    url = getUrlFromNavigationEndpoint(videoInfo.getObject(\"shortBylineText\")\n+                            .getArray(\"runs\").getObject(0).getObject(\"navigationEndpoint\"));\n                 } catch (Exception ignored) {}\n+\n+                if (url == null) throw new ParsingException(\"Could not get uploader url\");\n             }\n-            if (id == null || id.isEmpty()) {\n-                throw new IllegalArgumentException(\"is empty\");\n-            }\n-            return YoutubeChannelLinkHandlerFactory.getInstance().getUrl(id);\n-        } catch (Exception e) {\n-            throw new ParsingException(\"Could not get uploader url\");\n         }\n+\n+        return url;\n     }\n \n     @Nullable\n     @Override\n     public String getTextualUploadDate() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e4d2fd64e4fd00f02ebacb8c31d9e3b2de7d6ed"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTE5ODI5OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamInfoItemExtractor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQyMDo0MzoyMVrOFwK5Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQyMDo0MzoyMVrOFwK5Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA1NDQ0Nw==", "bodyText": "Doesn't handle video premieres.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r386054447", "createdAt": "2020-02-29T20:43:21Z", "author": {"login": "mauriciocolli"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamInfoItemExtractor.java", "diffHunk": "@@ -76,89 +79,95 @@ public String getUrl() throws ParsingException {\n \n     @Override\n     public String getName() throws ParsingException {\n-        String name = null;\n-        try {\n-            name = videoInfo.getObject(\"title\").getString(\"simpleText\");\n-        } catch (Exception ignored) {}\n-        if (name == null) {\n-            try {\n-                name = videoInfo.getObject(\"title\").getArray(\"runs\").getObject(0).getString(\"text\");\n-            } catch (Exception ignored) {}\n-        }\n+        String name = getTextFromObject(videoInfo.getObject(\"title\"));\n         if (name != null && !name.isEmpty()) return name;\n         throw new ParsingException(\"Could not get name\");\n     }\n \n     @Override\n     public long getDuration() throws ParsingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e4d2fd64e4fd00f02ebacb8c31d9e3b2de7d6ed"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2847, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}