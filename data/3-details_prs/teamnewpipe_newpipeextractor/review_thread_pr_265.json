{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNjIxMDUx", "number": 265, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzoyODoyMVrODj0Bfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzoyODoyMVrODj0Bfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODc5MTAzOnYy", "diffSide": "RIGHT", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzoyODoyMVrOFv07Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQyMDo0ODozOFrOFwK6Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY5NDUzOQ==", "bodyText": "Shouldn'y the thumbnail url be tested here, too? I'd suggest creating a function in test utils that does this, so that it can be re-used anywhere:\nvoid assertThumbnailUrlOk(@Nullable String thumbnailUrl) {\n    if (thumbnailUrl != null && !thumbnailUrl.isEmpty()) {\n        assertIsSecureUrl(thumbnailUrl);\n    }\n}", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/265#discussion_r385694539", "createdAt": "2020-02-28T13:28:21Z", "author": {"login": "Stypox"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultTests.java", "diffHunk": "@@ -37,34 +51,56 @@ public static void defaultTestListOfItems(int expectedServiceId, List<? extends\n                     assertTrue(\"Upload date not in the past\", uploadDate.date().before(Calendar.getInstance()));\n                 }\n \n+            } else if (item instanceof ChannelInfoItem) {\n+                final ChannelInfoItem channelInfoItem = (ChannelInfoItem) item;\n+                assertExpectedLinkType(expectedService, channelInfoItem.getUrl(), LinkType.CHANNEL);\n+\n+            } else if (item instanceof PlaylistInfoItem) {\n+                final PlaylistInfoItem playlistInfoItem = (PlaylistInfoItem) item;\n+                assertExpectedLinkType(expectedService, playlistInfoItem.getUrl(), LinkType.PLAYLIST);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f51da738370954d5e925adaa7192bdf18568fd61"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA1NDcyNg==", "bodyText": "They are already being tested, look at this check above.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/265#discussion_r386054726", "createdAt": "2020-02-29T20:48:38Z", "author": {"login": "mauriciocolli"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultTests.java", "diffHunk": "@@ -37,34 +51,56 @@ public static void defaultTestListOfItems(int expectedServiceId, List<? extends\n                     assertTrue(\"Upload date not in the past\", uploadDate.date().before(Calendar.getInstance()));\n                 }\n \n+            } else if (item instanceof ChannelInfoItem) {\n+                final ChannelInfoItem channelInfoItem = (ChannelInfoItem) item;\n+                assertExpectedLinkType(expectedService, channelInfoItem.getUrl(), LinkType.CHANNEL);\n+\n+            } else if (item instanceof PlaylistInfoItem) {\n+                final PlaylistInfoItem playlistInfoItem = (PlaylistInfoItem) item;\n+                assertExpectedLinkType(expectedService, playlistInfoItem.getUrl(), LinkType.PLAYLIST);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY5NDUzOQ=="}, "originalCommit": {"oid": "f51da738370954d5e925adaa7192bdf18568fd61"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2851, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}