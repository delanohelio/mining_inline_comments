{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwMDgwMDYy", "number": 262, "title": "Improve yt_new", "bodyText": "I carefully read the contribution guidelines and agree to them.\n I did test the API against NewPipe.\n I agree to ASAP create a PULL request for NewPipe for making in compatible when I changed the api.\n\nThings I want to do in this PR:\n\n Use pbj=1 in YoutubeSearchExtractor\n Use pbj=1 in YoutubeChannelExtractor\n Use pbj=1 in YoutubePlaylistExtractor\n Use pbj=1 in YoutubeTrendingExtractor\n Use pbj=1 in YoutubeStreamExtractor (not possible due to age restriction stuff?)\n Improve getClientVersion() so that it's similar to the clientId() for SoundCloud\nUse new YouTube site for extracting comments\n Fix existing tests\n Fix TeamNewPipe/NewPipe#3145 (trending page not containing everything)\n Correctly parse links in e.g. https://www.youtube.com/watch?v=cV5TjZCJkuA\n Fix TeamNewPipe/NewPipe#3144 (pictures of certain channels)\n Fix #264 (YouTube Music playlists)\n Fix exception for channels without Videos tab\n Fix getUploaderUrl() in YoutubeStreamInfoItemExtractor\n Fix video titles with @ (and probably #)\n Make one helping function for text (as YouTube often provides that either as a simpleText or a runs array with text in them; this would prevent issues like those video titles or channel descriptions)\n Fix channel descriptions\n Fix subscribers count for channels with 0 subscribers\n Fix channels with multiple views on Videos tab\n Fix thumbnail URLs starting with //\n Fix TeamNewPipe/NewPipe#3153 (some search queries having 0 results)", "createdAt": "2020-02-26T08:40:04Z", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262", "merged": true, "mergeCommit": {"oid": "5a101fd17f20fd787d1969d9751e3b2126dd2cda"}, "closed": true, "closedAt": "2020-02-29T20:39:04Z", "author": {"login": "wb9688"}, "timelineItems": {"totalCount": 44, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIHlftAH2gAyMzgwMDgwMDYyOjA5NzMyNjNhYWIxNGI3NWFiNTYyMTZlYTc5NWIzMWM2ZjU2MmYxNWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcJKw33AFqTM2NjgxNDQ4Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0973263aab14b75ab56216ea795b31c6f562f15d", "author": {"user": {"login": "wb9688", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/0973263aab14b75ab56216ea795b31c6f562f15d", "committedDate": "2020-02-26T14:27:46Z", "message": "Use pbj in YoutubeSearchExtractor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89a41a7f69b63c09e4cc8b7f381e07380718c297", "author": {"user": {"login": "wb9688", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/89a41a7f69b63c09e4cc8b7f381e07380718c297", "committedDate": "2020-02-26T14:27:50Z", "message": "Use pbj in YoutubeChannelExtractor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15afbea3e19f83b33cabdca71fbdce669179b2ef", "author": {"user": {"login": "wb9688", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/15afbea3e19f83b33cabdca71fbdce669179b2ef", "committedDate": "2020-02-26T14:27:50Z", "message": "Use pbj in YoutubePlaylistExtractor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "985c3ec877fa8e62073bb1fc81135e08ac33fda2", "author": {"user": {"login": "wb9688", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/985c3ec877fa8e62073bb1fc81135e08ac33fda2", "committedDate": "2020-02-26T14:27:50Z", "message": "Improve getClientVersion()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c3a4e710ba820f43208a75045c03d61e914359a", "author": {"user": {"login": "wb9688", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/1c3a4e710ba820f43208a75045c03d61e914359a", "committedDate": "2020-02-26T15:03:06Z", "message": "Check if there are no related streams in getAgeLimit()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb3a3d70bf14cff501fbe514ce05f10cc6f4a148", "author": {"user": {"login": "wb9688", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/bb3a3d70bf14cff501fbe514ce05f10cc6f4a148", "committedDate": "2020-02-26T15:10:24Z", "message": "Use pbj in YoutubeTrendingExtractor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88282761f44921e0533afdf93a4d83de0c0a4c20", "author": {"user": {"login": "wb9688", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/88282761f44921e0533afdf93a4d83de0c0a4c20", "committedDate": "2020-02-26T15:19:42Z", "message": "Fix YoutubeStreamExtractor not being able to getAgeLimit() in onFetchPage()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MDE4NDky", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#pullrequestreview-365018492", "createdAt": "2020-02-26T15:54:07Z", "commit": {"oid": "88282761f44921e0533afdf93a4d83de0c0a4c20"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNTo1NDowN1rOFuxPqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNTo1NDowN1rOFuxPqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU4NTY0MA==", "bodyText": "Did you mean two instead of do?", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r384585640", "createdAt": "2020-02-26T15:54:07Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeParsingHelper.java", "diffHunk": "@@ -162,55 +171,83 @@ public static JsonObject getInitialData(String html) throws ParsingException {\n \n     /**\n      * Get the client version from a page\n-     * @param initialData\n-     * @param html The page HTML\n      * @return\n      * @throws ParsingException\n      */\n-    public static String getClientVersion(JsonObject initialData, String html) throws ParsingException {\n-        if (initialData == null) initialData = getInitialData(html);\n-        JsonArray serviceTrackingParams = initialData.getObject(\"responseContext\").getArray(\"serviceTrackingParams\");\n-        String shortClientVersion = null;\n-\n-        // try to get version from initial data first\n-        for (Object service : serviceTrackingParams) {\n-            JsonObject s = (JsonObject) service;\n-            if (s.getString(\"service\").equals(\"CSI\")) {\n-                JsonArray params = s.getArray(\"params\");\n-                for (Object param: params) {\n-                    JsonObject p = (JsonObject) param;\n-                    String key = p.getString(\"key\");\n-                    if (key != null && key.equals(\"cver\")) {\n-                        return p.getString(\"value\");\n+    public static String getClientVersion() throws ParsingException {\n+        if (clientVersion != null && !clientVersion.isEmpty()) return clientVersion;\n+\n+        // Test if hard-coded client version is valid\n+        try {\n+            final String url = \"https://www.youtube.com/results?search_query=test&pbj=1\";\n+\n+            Map<String, List<String>> headers = new HashMap<>();\n+            headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(\"1\"));\n+            headers.put(\"X-YouTube-Client-Version\",\n+                    Collections.singletonList(HARDCODED_CLIENT_VERSION));\n+            final String response = getDownloader().get(url, headers).responseBody();\n+            if (response.length() > 50) { // ensure to have a valid response\n+                clientVersion = HARDCODED_CLIENT_VERSION;\n+                return clientVersion;\n+            }\n+        } catch (Exception ignored) {}\n+\n+        // Try extracting it from YouTube's website otherwise\n+        try {\n+            final String url = \"https://www.youtube.com/results?search_query=test\";\n+            final String html = getDownloader().get(url).responseBody();\n+            JsonObject initialData = getInitialData(html);\n+            JsonArray serviceTrackingParams = initialData.getObject(\"responseContext\").getArray(\"serviceTrackingParams\");\n+            String shortClientVersion = null;\n+\n+            // try to get version from initial data first\n+            for (Object service : serviceTrackingParams) {\n+                JsonObject s = (JsonObject) service;\n+                if (s.getString(\"service\").equals(\"CSI\")) {\n+                    JsonArray params = s.getArray(\"params\");\n+                    for (Object param : params) {\n+                        JsonObject p = (JsonObject) param;\n+                        String key = p.getString(\"key\");\n+                        if (key != null && key.equals(\"cver\")) {\n+                            clientVersion = p.getString(\"value\");\n+                            return clientVersion;\n+                        }\n                     }\n-                }\n-            } else if (s.getString(\"service\").equals(\"ECATCHER\")) {\n-                // fallback to get a shortened client version which does not contain the last do digits\n-                JsonArray params = s.getArray(\"params\");\n-                for (Object param: params) {\n-                    JsonObject p = (JsonObject) param;\n-                    String key = p.getString(\"key\");\n-                    if (key != null && key.equals(\"client.version\")) {\n-                        shortClientVersion = p.getString(\"value\");\n+                } else if (s.getString(\"service\").equals(\"ECATCHER\")) {\n+                    // fallback to get a shortened client version which does not contain the last do digits", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88282761f44921e0533afdf93a4d83de0c0a4c20"}, "originalPosition": 106}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8dc39d517ae3e8080f902ceb28fe173cf0d75ff7", "author": {"user": {"login": "wb9688", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/8dc39d517ae3e8080f902ceb28fe173cf0d75ff7", "committedDate": "2020-02-26T16:31:01Z", "message": "Fix tests\n\nExcept testGetFullLinksInDescription() in DescriptionTestUnboxing, since that requires other changes first."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d503407ef32fe1cac5359f042e909ba4878a807", "author": {"user": {"login": "wb9688", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/8d503407ef32fe1cac5359f042e909ba4878a807", "committedDate": "2020-02-26T18:37:58Z", "message": "Parse browseEndpoint and watchEndpoint in descriptions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2d8489e169ce43d9d3646c9ccb21d56e7f79b2b", "author": {"user": {"login": "wb9688", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/a2d8489e169ce43d9d3646c9ccb21d56e7f79b2b", "committedDate": "2020-02-26T19:27:30Z", "message": "Parse timestamps in description"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db305408e906614fbdff44d963fc94aed1363c9c", "author": {"user": {"login": "wb9688", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/db305408e906614fbdff44d963fc94aed1363c9c", "committedDate": "2020-02-26T19:37:20Z", "message": "Get all expandedShelfContentsRenderers in YoutubeTrendingExtractor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdbc751b874a5f096a885a4f09b45efe6bfb403a", "author": {"user": {"login": "wb9688", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/cdbc751b874a5f096a885a4f09b45efe6bfb403a", "committedDate": "2020-02-27T08:05:41Z", "message": "Fix getUploaderUrl() in YoutubeStreamInfoItemExtractor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2399d46ab039c8e07b27885e3240cb8087e0ef57", "author": {"user": {"login": "wb9688", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/2399d46ab039c8e07b27885e3240cb8087e0ef57", "committedDate": "2020-02-27T08:21:25Z", "message": "Fix YoutubeChannelExtractor for channels without videos"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "951ed9f0d85b5a526b40d5883c676fb8069ea312", "author": {"user": {"login": "wb9688", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/951ed9f0d85b5a526b40d5883c676fb8069ea312", "committedDate": "2020-02-27T08:27:56Z", "message": "Don't call getUploaderInfo() in onFetchPage() for playlists\n\nThis way YouTube Music playlists will keep working in NewPipe"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8aa560bef4c23f5c0cb8c543a50a30226784c8ef", "author": {"user": {"login": "wb9688", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/8aa560bef4c23f5c0cb8c543a50a30226784c8ef", "committedDate": "2020-02-27T08:42:22Z", "message": "Fix video titles consisting of multiple parts due to @"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "880b9510880c9809dbd23e232bdbdb31d827d75c", "author": {"user": {"login": "wb9688", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/880b9510880c9809dbd23e232bdbdb31d827d75c", "committedDate": "2020-02-27T08:53:59Z", "message": "Fix getUploaderAvatarUrl() in YoutubeStreamExtractor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ebd971648729e397f63c4c24ca7ccc523d4ec94", "author": {"user": {"login": "wb9688", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/8ebd971648729e397f63c4c24ca7ccc523d4ec94", "committedDate": "2020-02-27T09:06:35Z", "message": "Fix channel descriptions consisting of multiple parts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0798bdd5cd03bb44c0593a28b9c23df472e762ef", "author": {"user": {"login": "wb9688", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/0798bdd5cd03bb44c0593a28b9c23df472e762ef", "committedDate": "2020-02-27T15:26:22Z", "message": "Fix getSubscriberCount() for 0 subscribers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "365b0329f3dfb0dba257d1399624b5e9a4a56822", "author": {"user": {"login": "wb9688", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/365b0329f3dfb0dba257d1399624b5e9a4a56822", "committedDate": "2020-02-27T16:39:23Z", "message": "Implement getTextFromObject() function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "838d834ce217037a6c3212458356053b289cc316", "author": {"user": {"login": "wb9688", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/838d834ce217037a6c3212458356053b289cc316", "committedDate": "2020-02-27T17:54:27Z", "message": "Get Uploads view of Videos tab"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94a2d5be463704dc551b1dca330110c36846ea7c", "author": {"user": {"login": "wb9688", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/94a2d5be463704dc551b1dca330110c36846ea7c", "committedDate": "2020-02-27T18:08:46Z", "message": "Fix thumbnail URLs starting with //"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f946310af590f5ef9d428cadd59113380d971d03", "author": {"user": {"login": "wb9688", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/f946310af590f5ef9d428cadd59113380d971d03", "committedDate": "2020-02-28T07:57:44Z", "message": "Fix search queries with a promotedSparklesTextSearchRenderer returning 0 results"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "612ec06839bfef5db6616f99aba81e243bc6cd14", "author": {"user": {"login": "wb9688", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/612ec06839bfef5db6616f99aba81e243bc6cd14", "committedDate": "2020-02-28T08:36:33Z", "message": "Actually fix thumbnail URLs starting with //"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0", "author": {"user": {"login": "wb9688", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/7898ba230d1ce192be343b16afc2e3d3dfb88ae0", "committedDate": "2020-02-28T14:17:47Z", "message": "Use pbj in YoutubeStreamExtractor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NDU5Mjc5", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#pullrequestreview-366459279", "createdAt": "2020-02-28T15:00:53Z", "commit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToxMDo1MFrOFv4NLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToxMzowN1rOFv4STA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0ODI3MQ==", "bodyText": "Please do this in a separate method and add a test to check if the hard-coded client version is valid.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385748271", "createdAt": "2020-02-28T15:10:50Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeParsingHelper.java", "diffHunk": "@@ -162,56 +177,163 @@ public static JsonObject getInitialData(String html) throws ParsingException {\n \n     /**\n      * Get the client version from a page\n-     * @param initialData\n-     * @param html The page HTML\n      * @return\n      * @throws ParsingException\n      */\n-    public static String getClientVersion(JsonObject initialData, String html) throws ParsingException {\n-        if (initialData == null) initialData = getInitialData(html);\n-        JsonArray serviceTrackingParams = initialData.getObject(\"responseContext\").getArray(\"serviceTrackingParams\");\n-        String shortClientVersion = null;\n-\n-        // try to get version from initial data first\n-        for (Object service : serviceTrackingParams) {\n-            JsonObject s = (JsonObject) service;\n-            if (s.getString(\"service\").equals(\"CSI\")) {\n-                JsonArray params = s.getArray(\"params\");\n-                for (Object param: params) {\n-                    JsonObject p = (JsonObject) param;\n-                    String key = p.getString(\"key\");\n-                    if (key != null && key.equals(\"cver\")) {\n-                        return p.getString(\"value\");\n+    public static String getClientVersion() throws ParsingException {\n+        if (clientVersion != null && !clientVersion.isEmpty()) return clientVersion;\n+\n+        // Test if hard-coded client version is valid\n+        try {\n+            final String url = \"https://www.youtube.com/results?search_query=test&pbj=1\";\n+\n+            Map<String, List<String>> headers = new HashMap<>();\n+            headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(\"1\"));\n+            headers.put(\"X-YouTube-Client-Version\",\n+                    Collections.singletonList(HARDCODED_CLIENT_VERSION));\n+            final String response = getDownloader().get(url, headers).responseBody();\n+            if (response.length() > 50) { // ensure to have a valid response\n+                clientVersion = HARDCODED_CLIENT_VERSION;\n+                return clientVersion;\n+            }\n+        } catch (Exception ignored) {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0OTU4MA==", "bodyText": "We might want to append response to the exception message. This could help us with debugging error reports later.\nApart from that, we could also add a\npublic static boolean isJsonResponseValid(String response) to YouTubeParsingHelper.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385749580", "createdAt": "2020-02-28T15:13:07Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeChannelExtractor.java", "diffHunk": "@@ -64,16 +60,35 @@ public YoutubeChannelExtractor(StreamingService service, ListLinkHandler linkHan\n \n     @Override\n     public void onFetchPage(@Nonnull Downloader downloader) throws IOException, ExtractionException {\n-        String channelUrl = super.getUrl() + CHANNEL_URL_PARAMETERS;\n-        final Response response = downloader.get(channelUrl, getExtractorLocalization());\n-        doc = YoutubeParsingHelper.parseAndCheckPage(channelUrl, response);\n-        initialData = YoutubeParsingHelper.getInitialData(response.responseBody());\n+        final String url = super.getUrl() + \"/videos?pbj=1&view=0&flow=grid\";\n+\n+        JsonArray ajaxJson;\n+\n+        Map<String, List<String>> headers = new HashMap<>();\n+        headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(\"1\"));\n+        headers.put(\"X-YouTube-Client-Version\",\n+                Collections.singletonList(YoutubeParsingHelper.getClientVersion()));\n+        final String response = getDownloader().get(url, headers, getExtractorLocalization()).responseBody();\n+        if (response.length() < 50) { // ensure to have a valid response\n+            throw new ParsingException(\"Could not parse json data for next streams\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NDUyOTAz", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#pullrequestreview-366452903", "createdAt": "2020-02-28T14:52:27Z", "commit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDo1MjoyN1rOFv3jzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToyMTo1OVrOFv4mfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTczNzY3Ng==", "bodyText": "Since you are using getVideoTab() many times in many functions, I'd suggest saving it in a variable on initialization, in order to speed up things", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385737676", "createdAt": "2020-02-28T14:52:27Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeChannelExtractor.java", "diffHunk": "@@ -290,6 +293,14 @@ private JsonObject getVideoTab() throws ParsingException {\n             throw new ParsingException(\"Could not find Videos tab\");\n         }\n \n+        try {\n+            if (getTextFromObject(videoTab.getObject(\"content\").getObject(\"sectionListRenderer\")\n+                    .getArray(\"contents\").getObject(0).getObject(\"itemSectionRenderer\")\n+                    .getArray(\"contents\").getObject(0).getObject(\"messageRenderer\")\n+                    .getObject(\"text\")).equals(\"This channel has no videos.\"))\n+                return null;\n+        } catch (Exception ignored) {}\n+\n         return videoTab;\n     }\n }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0MTMxMA==", "bodyText": "Could you extract these lines into a separate function taking just url as argument and returns initialData, put it in a common YouTube helper file, and use it whenever possible? I see it is being used in many places, and it's better to avoid duplicate code", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385741310", "createdAt": "2020-02-28T14:58:51Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java", "diffHunk": "@@ -41,11 +40,26 @@ public YoutubePlaylistExtractor(StreamingService service, ListLinkHandler linkHa\n \n     @Override\n     public void onFetchPage(@Nonnull Downloader downloader) throws IOException, ExtractionException {\n-        final String url = getUrl();\n-        final Response response = downloader.get(url, getExtractorLocalization());\n-        doc = YoutubeParsingHelper.parseAndCheckPage(url, response);\n-        initialData = YoutubeParsingHelper.getInitialData(response.responseBody());\n-        uploaderInfo = getUploaderInfo();\n+        final String url = getUrl() + \"&pbj=1\";\n+\n+        JsonArray ajaxJson;\n+\n+        Map<String, List<String>> headers = new HashMap<>();\n+        headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(\"1\"));\n+        headers.put(\"X-YouTube-Client-Version\",\n+                Collections.singletonList(YoutubeParsingHelper.getClientVersion()));\n+        final String response = getDownloader().get(url, headers, getExtractorLocalization()).responseBody();\n+        if (response.length() < 50) { // ensure to have a valid response\n+            throw new ParsingException(\"Could not parse json data for next streams\");\n+        }\n+\n+        try {\n+            ajaxJson = JsonParser.array().from(response);\n+        } catch (JsonParserException e) {\n+            throw new ParsingException(\"Could not parse json data for next streams\", e);\n+        }\n+\n+        initialData = ajaxJson.getObject(1).getObject(\"response\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NDYzMw==", "bodyText": "This removes one check when the duration extractor was successful with first try\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            }\n          \n          \n            \n                        } catch (Exception ignored) {}\n          \n          \n            \n                    }\n          \n          \n            \n                    if (duration != null) return YoutubeParsingHelper.parseDurationString(duration);\n          \n          \n            \n                    throw new ParsingException(\"Could not get duration\");\n          \n          \n            \n                            }\n          \n          \n            \n                        } catch (Exception ignored) {}\n          \n          \n            \n                        \n          \n          \n            \n                        if (duration == null) {\n          \n          \n            \n                            throw new ParsingException(\"Could not get duration\");\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    return YoutubeParsingHelper.parseDurationString(duration);", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385744633", "createdAt": "2020-02-28T15:04:20Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamInfoItemExtractor.java", "diffHunk": "@@ -76,46 +79,46 @@ public String getUrl() throws ParsingException {\n \n     @Override\n     public String getName() throws ParsingException {\n-        String name = null;\n-        try {\n-            name = videoInfo.getObject(\"title\").getString(\"simpleText\");\n-        } catch (Exception ignored) {}\n-        if (name == null) {\n-            try {\n-                name = videoInfo.getObject(\"title\").getArray(\"runs\").getObject(0).getString(\"text\");\n-            } catch (Exception ignored) {}\n-        }\n+        String name = getTextFromObject(videoInfo.getObject(\"title\"));\n         if (name != null && !name.isEmpty()) return name;\n         throw new ParsingException(\"Could not get name\");\n     }\n \n     @Override\n     public long getDuration() throws ParsingException {\n+        if (getStreamType() == StreamType.LIVE_STREAM) return -1;\n+        String duration = null;\n         try {\n-            if (getStreamType() == StreamType.LIVE_STREAM) return -1;\n-            return YoutubeParsingHelper.parseDurationString(videoInfo.getObject(\"lengthText\").getString(\"simpleText\"));\n-        } catch (Exception e) {\n-            throw new ParsingException(\"Could not get duration\", e);\n+            duration = getTextFromObject(videoInfo.getObject(\"lengthText\"));\n+        } catch (Exception ignored) {}\n+        if (duration == null) {\n+            try {\n+                for (Object thumbnailOverlay : videoInfo.getArray(\"thumbnailOverlays\")) {\n+                    if (((JsonObject) thumbnailOverlay).getObject(\"thumbnailOverlayTimeStatusRenderer\") != null) {\n+                        duration = getTextFromObject(((JsonObject) thumbnailOverlay)\n+                                .getObject(\"thumbnailOverlayTimeStatusRenderer\").getObject(\"text\"));\n+                    }\n+                }\n+            } catch (Exception ignored) {}\n         }\n+        if (duration != null) return YoutubeParsingHelper.parseDurationString(duration);\n+        throw new ParsingException(\"Could not get duration\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NzMwNA==", "bodyText": "In order to remove some checks and make more clear that there are many methods to extract the url which are tried one after the other, I'd suggest doing something like this:\n// try method one\n\nif (url == null) {\n    // try method two\n\n    if (url == null) {\n        // try method three\n\n        if (url == null || url.isEmpty()) {\n            // throw exception\n        }\n    }\n}", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385747304", "createdAt": "2020-02-28T15:09:12Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamInfoItemExtractor.java", "diffHunk": "@@ -125,30 +128,27 @@ public String getUploaderName() throws ParsingException {\n     @Override\n     public String getUploaderUrl() throws ParsingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0OTE0MQ==", "bodyText": "Same as above: since you often use getVideoPrimaryInfoRenderer(), it would be a good idea to save it in a variable", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385749141", "createdAt": "2020-02-28T15:12:21Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -116,7 +113,7 @@ public String getName() throws ParsingException {\n         assertPageFetched();\n         String title = null;\n         try {\n-            title = getVideoPrimaryInfoRenderer().getObject(\"title\").getArray(\"runs\").getObject(0).getString(\"text\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0OTYxMw==", "bodyText": "Why doesn't assertPageFetched() work anymore?", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385749613", "createdAt": "2020-02-28T15:13:10Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -261,17 +212,14 @@ public Description getDescription() throws ParsingException {\n     }\n \n     @Override\n-    public int getAgeLimit() throws ParsingException {\n-        assertPageFetched();\n-        if (!isAgeRestricted) {\n+    public int getAgeLimit() {\n+        if (initialData == null || initialData.isEmpty()) throw new IllegalStateException(\"initialData is not parsed yet\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1MDkzNw==", "bodyText": "Same as above to save if checks and improve code readability, I'd move if (uploaderId == null) throw new ParsingException(\"Could not get uploader url\"); at the end of the if just above", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385750937", "createdAt": "2020-02-28T15:15:32Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -381,17 +322,15 @@ public long getDislikeCount() throws ParsingException {\n     @Override\n     public String getUploaderUrl() throws ParsingException {\n         assertPageFetched();\n-        String uploaderId = null;\n         try {\n-            uploaderId = getVideoSecondaryInfoRenderer().getObject(\"owner\").getObject(\"videoOwnerRenderer\")\n-                    .getObject(\"navigationEndpoint\").getObject(\"browseEndpoint\").getString(\"browseId\");\n+            String uploaderUrl = getUrlFromNavigationEndpoint(getVideoSecondaryInfoRenderer()\n+                    .getObject(\"owner\").getObject(\"videoOwnerRenderer\").getObject(\"navigationEndpoint\"));\n+            if (uploaderUrl != null) return uploaderUrl;\n+        } catch (Exception ignored) {}\n+        try {\n+            String uploaderId = playerResponse.getObject(\"videoDetails\").getString(\"channelId\");\n+            if (uploaderId != null) return \"https://www.youtube.com/channel/\" + uploaderId;\n         } catch (Exception ignored) {}\n-        if (uploaderId == null) {\n-            try {\n-                uploaderId = playerResponse.getObject(\"videoDetails\").getString(\"channelId\");\n-            } catch (Exception ignored) {}\n-        }\n-        if (uploaderId != null) return \"https://www.youtube.com/channel/\" + uploaderId;\n         throw new ParsingException(\"Could not get uploader url\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "originalPosition": 221}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1MTk5Mg==", "bodyText": "The result of this function should, too, being cached, since it is used many times", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385751992", "createdAt": "2020-02-28T15:17:15Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -261,17 +212,14 @@ public Description getDescription() throws ParsingException {\n     }\n \n     @Override\n-    public int getAgeLimit() throws ParsingException {\n-        assertPageFetched();\n-        if (!isAgeRestricted) {\n+    public int getAgeLimit() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1MjI3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (getAgeLimit() == 18) {\n          \n          \n            \n                    if (getAgeLimit() != NO_AGE_LIMIT) {", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385752273", "createdAt": "2020-02-28T15:17:46Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -578,7 +504,7 @@ public StreamType getStreamType() throws ParsingException {\n     @Override\n     public StreamInfoItem getNextStream() throws ExtractionException {\n         assertPageFetched();\n-        if (isAgeRestricted) {\n+        if (getAgeLimit() == 18) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "originalPosition": 272}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1MjQyOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (getAgeLimit() == 18) {\n          \n          \n            \n                    if (getAgeLimit() != NO_AGE_LIMIT) {", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385752429", "createdAt": "2020-02-28T15:18:03Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -599,7 +525,7 @@ public StreamInfoItem getNextStream() throws ExtractionException {\n     @Override\n     public StreamInfoItemsCollector getRelatedStreams() throws ExtractionException {\n         assertPageFetched();\n-        if (isAgeRestricted) {\n+        if (getAgeLimit() == 18) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "originalPosition": 281}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1MjcwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (getAgeLimit() == 18) return Collections.emptyList();\n          \n          \n            \n                    if (getAgeLimit() != NO_AGE_LIMIT) return Collections.emptyList();", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385752708", "createdAt": "2020-02-28T15:18:30Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -869,7 +773,7 @@ private String getDecryptionFuncName(String playerCode) throws DecryptException\n     @Nonnull\n     private List<SubtitlesInfo> getAvailableSubtitlesInfo() {\n         // If the video is age restricted getPlayerConfig will fail\n-        if (isAgeRestricted) return Collections.emptyList();\n+        if (getAgeLimit() == 18) return Collections.emptyList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "originalPosition": 408}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1NDc1MQ==", "bodyText": "Isn't there a way to always get the uploader url in the \"/channel/ID\" form? This would make it consistent with other urls in the app, preventing bugs such as duplicate subscriptions", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385754751", "createdAt": "2020-02-28T15:21:59Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java", "diffHunk": "@@ -127,8 +149,7 @@ public String getBannerUrl() {\n     @Override\n     public String getUploaderUrl() throws ParsingException {\n         try {\n-            return YoutubeChannelExtractor.CHANNEL_URL_BASE +\n-                    uploaderInfo.getObject(\"navigationEndpoint\").getObject(\"browseEndpoint\").getString(\"browseId\");\n+            return getUrlFromNavigationEndpoint(getUploaderInfo().getObject(\"navigationEndpoint\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7898ba230d1ce192be343b16afc2e3d3dfb88ae0"}, "originalPosition": 106}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b89b6b1db229c522fd1eebbb6aed60ee41e8fc4d", "author": {"user": {"login": "wb9688", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/b89b6b1db229c522fd1eebbb6aed60ee41e8fc4d", "committedDate": "2020-02-28T15:35:24Z", "message": "Check if hard-coded client version is valid in separate function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "beb07a4852fc27c65ff2db56270085dd663a8012", "author": {"user": {"login": "wb9688", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/beb07a4852fc27c65ff2db56270085dd663a8012", "committedDate": "2020-02-28T15:36:14Z", "message": "Add test to check whether hardcoded client version is still valid"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b940f5cf47adbefc1f04df5d6232ef24b1cb895", "author": {"user": {"login": "wb9688", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/0b940f5cf47adbefc1f04df5d6232ef24b1cb895", "committedDate": "2020-02-28T15:40:50Z", "message": "Use \"getAgeLimit() != NO_AGE_LIMIT\" instead of \"getAgeLimit() == 18\""}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bfbae904d4b16ec3cc412f9877e725571094a66", "author": {"user": {"login": "wb9688", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/8bfbae904d4b16ec3cc412f9877e725571094a66", "committedDate": "2020-02-28T16:03:21Z", "message": "Cache getVideo(Primary|Secondary)InfoRenderer()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ba03e542bac3a088787a5db556d97d6f1205dc0", "author": {"user": {"login": "wb9688", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/6ba03e542bac3a088787a5db556d97d6f1205dc0", "committedDate": "2020-02-28T16:05:31Z", "message": "Cache getVideoTab()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ff655352de245dacc901c179ea70e7512ad853c", "author": {"user": {"login": "wb9688", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/4ff655352de245dacc901c179ea70e7512ad853c", "committedDate": "2020-02-28T16:14:26Z", "message": "Reimplement getAgeLimit()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NzMwNTQ4", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#pullrequestreview-366730548", "createdAt": "2020-02-28T22:49:33Z", "commit": {"oid": "4ff655352de245dacc901c179ea70e7512ad853c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMjo0OTozM1rOFwE_2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMjo0OTozM1rOFwE_2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk1Nzg1MA==", "bodyText": "This should be done using the\nYoutubeChannelLinkHandlerFactory.getUrl(iploaderId, null, null) method. But it seems to be buggy to me. It does not return \"https://www.youtube.com/channel/ID\", but \"https://www.youtube.com/ID\". I searched for a small random channel (www.youtube.com/user/effectpl) and looked up its channelId (UCuyC5c8JXzPx71aMg7rGFgQ). While www.youtube.com/UCuyC5c8JXzPx71aMg7rGFgQ results in a 404 response,  www.youtube.com/channel/UCuyC5c8JXzPx71aMg7rGFgQ is valid.\nDoes anyone know, why it is implemented that way?", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r385957850", "createdAt": "2020-02-28T22:49:33Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -381,17 +321,15 @@ public long getDislikeCount() throws ParsingException {\n     @Override\n     public String getUploaderUrl() throws ParsingException {\n         assertPageFetched();\n-        String uploaderId = null;\n         try {\n-            uploaderId = getVideoSecondaryInfoRenderer().getObject(\"owner\").getObject(\"videoOwnerRenderer\")\n-                    .getObject(\"navigationEndpoint\").getObject(\"browseEndpoint\").getString(\"browseId\");\n+            String uploaderUrl = getUrlFromNavigationEndpoint(getVideoSecondaryInfoRenderer()\n+                    .getObject(\"owner\").getObject(\"videoOwnerRenderer\").getObject(\"navigationEndpoint\"));\n+            if (uploaderUrl != null) return uploaderUrl;\n+        } catch (Exception ignored) {}\n+        try {\n+            String uploaderId = playerResponse.getObject(\"videoDetails\").getString(\"channelId\");\n+            if (uploaderId != null) return \"https://www.youtube.com/channel/\" + uploaderId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ff655352de245dacc901c179ea70e7512ad853c"}, "originalPosition": 217}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f406512c2eb0e7b2dfbdab6e17d94e36a8844bb", "author": {"user": {"login": "wb9688", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/4f406512c2eb0e7b2dfbdab6e17d94e36a8844bb", "committedDate": "2020-02-29T15:26:28Z", "message": "Use YoutubeChannelLinkHandlerFactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "157055fbfd7d9b125bdbcf286c7e8b33eb736def", "author": {"user": {"login": "wb9688", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/157055fbfd7d9b125bdbcf286c7e8b33eb736def", "committedDate": "2020-02-29T15:42:04Z", "message": "Create getJsonResponse() function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45df8248bfdb83696bf4f6f255e20abcdd162438", "author": {"user": {"login": "wb9688", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/45df8248bfdb83696bf4f6f255e20abcdd162438", "committedDate": "2020-02-29T15:55:07Z", "message": "Use Localization in getJsonResponse()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6a63e957030429223ad824aa1e8ad46408e6c65", "author": {"user": {"login": "wb9688", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/a6a63e957030429223ad824aa1e8ad46408e6c65", "committedDate": "2020-02-29T16:01:36Z", "message": "Let isHardcodedClientVersionValid() throw IOException"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfe3eb1409a63a2c83269a452940a141beec7007", "author": {"user": {"login": "wb9688", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/bfe3eb1409a63a2c83269a452940a141beec7007", "committedDate": "2020-02-29T16:18:50Z", "message": "Use suggested try-if code style"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2ODA2OTc2", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#pullrequestreview-366806976", "createdAt": "2020-02-29T16:38:10Z", "commit": {"oid": "a6a63e957030429223ad824aa1e8ad46408e6c65"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxNjozODoxMVrOFwJ-mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxNjozODoxMVrOFwJ-mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAzOTQ1MQ==", "bodyText": "Is that a good idea? Because we are talking about channel name, something youtubers (can) change often & easily. Check for id would be better (unchangeable)", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r386039451", "createdAt": "2020-02-29T16:38:11Z", "author": {"login": "B0pol"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/search/YoutubeSearchExtractorChannelOnlyTest.java", "diffHunk": "@@ -77,7 +92,7 @@ public void testChannelUrl() {\n             if (item instanceof ChannelInfoItem) {\n                 ChannelInfoItem channel = (ChannelInfoItem) item;\n \n-                if (channel.getSubscriberCount() > 5e7) { // the real PewDiePie\n+                if (channel.getSubscriberCount() > 5e7 && channel.getName().equals(\"PewDiePie\")) { // the real PewDiePie", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6a63e957030429223ad824aa1e8ad46408e6c65"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e4d2fd64e4fd00f02ebacb8c31d9e3b2de7d6ed", "author": {"user": {"login": "wb9688", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/3e4d2fd64e4fd00f02ebacb8c31d9e3b2de7d6ed", "committedDate": "2020-02-29T17:20:35Z", "message": "Improve testChannelUrl()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "280707953106ffa9f6ef719c4b76cac2865910eb", "author": {"user": {"login": "wb9688", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/280707953106ffa9f6ef719c4b76cac2865910eb", "committedDate": "2020-02-29T20:28:38Z", "message": "Catch NumberFormatException instead of checking whether viewCount equals \"Recommended for you\""}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2ODE4NTA4", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#pullrequestreview-366818508", "createdAt": "2020-02-29T20:31:10Z", "commit": {"oid": "280707953106ffa9f6ef719c4b76cac2865910eb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2ODE0NDgz", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#pullrequestreview-366814483", "createdAt": "2020-02-29T19:08:15Z", "commit": {"oid": "3e4d2fd64e4fd00f02ebacb8c31d9e3b2de7d6ed"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxOTowODoxNlrOFwKizA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQyMDo0MzoyMVrOFwK5Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0ODcxNg==", "bodyText": "This string sometimes doesn't exist and we end up with https://www.youtube.comnull.\nI think you mentioned in a comment above, and it seems like the browseId is returned everytime.\nWould have to watch out though, because browseEndpoint seems like a generic response and maybe other types of items are returned as well.\nIt'd also help with the consistency of the /channel endpoint use, as some VEVO channels still return their canonicalBaseUrl using /user. Although you already told you opinion about this, it isn't always possible to call that method everywhere (for example: show the subscribe button in lists isn't the most reliable thing when this sort of thing happens), but meh, it's a limitation that we have to live with.\nPS: Discovered with the improvements made in this PR: #265.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r386048716", "createdAt": "2020-02-29T19:08:16Z", "author": {"login": "mauriciocolli"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeParsingHelper.java", "diffHunk": "@@ -160,58 +178,189 @@ public static JsonObject getInitialData(String html) throws ParsingException {\n         }\n     }\n \n+    public static boolean isHardcodedClientVersionValid() throws IOException {\n+        try {\n+            final String url = \"https://www.youtube.com/results?search_query=test&pbj=1\";\n+\n+            Map<String, List<String>> headers = new HashMap<>();\n+            headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(\"1\"));\n+            headers.put(\"X-YouTube-Client-Version\",\n+                    Collections.singletonList(HARDCODED_CLIENT_VERSION));\n+            final String response = getDownloader().get(url, headers).responseBody();\n+            if (response.length() > 50) { // ensure to have a valid response\n+                return true;\n+            }\n+        } catch (ReCaptchaException ignored) {}\n+\n+        return false;\n+    }\n+\n     /**\n      * Get the client version from a page\n-     * @param initialData\n-     * @param html The page HTML\n      * @return\n      * @throws ParsingException\n      */\n-    public static String getClientVersion(JsonObject initialData, String html) throws ParsingException {\n-        if (initialData == null) initialData = getInitialData(html);\n-        JsonArray serviceTrackingParams = initialData.getObject(\"responseContext\").getArray(\"serviceTrackingParams\");\n-        String shortClientVersion = null;\n-\n-        // try to get version from initial data first\n-        for (Object service : serviceTrackingParams) {\n-            JsonObject s = (JsonObject) service;\n-            if (s.getString(\"service\").equals(\"CSI\")) {\n-                JsonArray params = s.getArray(\"params\");\n-                for (Object param: params) {\n-                    JsonObject p = (JsonObject) param;\n-                    String key = p.getString(\"key\");\n-                    if (key != null && key.equals(\"cver\")) {\n-                        return p.getString(\"value\");\n+    public static String getClientVersion() throws ParsingException, IOException {\n+        if (clientVersion != null && !clientVersion.isEmpty()) return clientVersion;\n+\n+        if (isHardcodedClientVersionValid()) {\n+            clientVersion = HARDCODED_CLIENT_VERSION;\n+            return clientVersion;\n+        }\n+\n+        // Try extracting it from YouTube's website otherwise\n+        try {\n+            final String url = \"https://www.youtube.com/results?search_query=test\";\n+            final String html = getDownloader().get(url).responseBody();\n+            JsonObject initialData = getInitialData(html);\n+            JsonArray serviceTrackingParams = initialData.getObject(\"responseContext\").getArray(\"serviceTrackingParams\");\n+            String shortClientVersion = null;\n+\n+            // try to get version from initial data first\n+            for (Object service : serviceTrackingParams) {\n+                JsonObject s = (JsonObject) service;\n+                if (s.getString(\"service\").equals(\"CSI\")) {\n+                    JsonArray params = s.getArray(\"params\");\n+                    for (Object param : params) {\n+                        JsonObject p = (JsonObject) param;\n+                        String key = p.getString(\"key\");\n+                        if (key != null && key.equals(\"cver\")) {\n+                            clientVersion = p.getString(\"value\");\n+                            return clientVersion;\n+                        }\n+                    }\n+                } else if (s.getString(\"service\").equals(\"ECATCHER\")) {\n+                    // fallback to get a shortened client version which does not contain the last two digits\n+                    JsonArray params = s.getArray(\"params\");\n+                    for (Object param : params) {\n+                        JsonObject p = (JsonObject) param;\n+                        String key = p.getString(\"key\");\n+                        if (key != null && key.equals(\"client.version\")) {\n+                            shortClientVersion = p.getString(\"value\");\n+                        }\n+                    }\n+                }\n+            }\n+\n+            String contextClientVersion;\n+            String[] patterns = {\n+                    \"INNERTUBE_CONTEXT_CLIENT_VERSION\\\":\\\"([0-9\\\\.]+?)\\\"\",\n+                    \"innertube_context_client_version\\\":\\\"([0-9\\\\.]+?)\\\"\",\n+                    \"client.version=([0-9\\\\.]+)\"\n+            };\n+            for (String pattern : patterns) {\n+                try {\n+                    contextClientVersion = Parser.matchGroup1(pattern, html);\n+                    if (contextClientVersion != null && !contextClientVersion.isEmpty()) {\n+                        clientVersion = contextClientVersion;\n+                        return clientVersion;\n                     }\n+                } catch (Exception ignored) {\n                 }\n-            } else if (s.getString(\"service\").equals(\"ECATCHER\")) {\n-                // fallback to get a shortened client version which does not contain the last do digits\n-                JsonArray params = s.getArray(\"params\");\n-                for (Object param: params) {\n-                    JsonObject p = (JsonObject) param;\n-                    String key = p.getString(\"key\");\n-                    if (key != null && key.equals(\"client.version\")) {\n-                        shortClientVersion = p.getString(\"value\");\n+            }\n+\n+            if (shortClientVersion != null) {\n+                clientVersion = shortClientVersion;\n+                return clientVersion;\n+            }\n+        } catch (Exception ignored) {}\n+\n+        throw new ParsingException(\"Could not get client version\");\n+    }\n+\n+    public static String getUrlFromNavigationEndpoint(JsonObject navigationEndpoint) {\n+        if (navigationEndpoint.getObject(\"urlEndpoint\") != null) {\n+            String internUrl = navigationEndpoint.getObject(\"urlEndpoint\").getString(\"url\");\n+            if (internUrl.startsWith(\"/redirect?\")) {\n+                // q parameter can be the first parameter\n+                internUrl = internUrl.substring(10);\n+                String[] params = internUrl.split(\"&\");\n+                for (String param : params) {\n+                    if (param.split(\"=\")[0].equals(\"q\")) {\n+                        String url;\n+                        try {\n+                            url = URLDecoder.decode(param.split(\"=\")[1], StandardCharsets.UTF_8.name());\n+                        } catch (UnsupportedEncodingException e) {\n+                            return null;\n+                        }\n+                        return url;\n                     }\n                 }\n+            } else if (internUrl.startsWith(\"http\")) {\n+                return internUrl;\n+            }\n+        } else if (navigationEndpoint.getObject(\"browseEndpoint\") != null) {\n+            return \"https://www.youtube.com\" + navigationEndpoint.getObject(\"browseEndpoint\").getString(\"canonicalBaseUrl\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e4d2fd64e4fd00f02ebacb8c31d9e3b2de7d6ed"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA1MDIyOQ==", "bodyText": "This doesn't take into account the \"No views\" case.\nAlso, shame there's no other way to detect this cases.\n@B0pol considering there's even more of these hard coded checks, it seems like parsing all the languages will be annoying, unless you map all the cases. A tremendous maintenance burden, even if it is automated (get the english and compare pages from other languages with it). Would increase the code complexity a lot I think.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r386050229", "createdAt": "2020-02-29T19:31:19Z", "author": {"login": "mauriciocolli"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamInfoItemExtractor.java", "diffHunk": "@@ -185,13 +194,7 @@ public long getViewCount() throws ParsingException {\n             if (videoInfo.getObject(\"topStandaloneBadge\") != null || isPremium()) {\n                 return -1;\n             }\n-            String viewCount;\n-            if (getStreamType() == StreamType.LIVE_STREAM)  {\n-                viewCount = videoInfo.getObject(\"viewCountText\")\n-                        .getArray(\"runs\").getObject(0).getString(\"text\");\n-            } else {\n-                viewCount = videoInfo.getObject(\"viewCountText\").getString(\"simpleText\");\n-            }\n+            String viewCount = getTextFromObject(videoInfo.getObject(\"viewCountText\"));\n             if (viewCount.equals(\"Recommended for you\")) return -1;\n             return Long.parseLong(Utils.removeNonDigitCharacters(viewCount));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e4d2fd64e4fd00f02ebacb8c31d9e3b2de7d6ed"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA1MDQ3Ng==", "bodyText": "This fails when a video has no views because they are hidden.\nFor example, the Vox channel has some videos which fall in this case, like this one.\nPS: Oddly enough, I went and checked the extractor for streams and for a surprise, there the views are actually available.  Oversight by YouTube I guess.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r386050476", "createdAt": "2020-02-29T19:35:39Z", "author": {"login": "mauriciocolli"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamInfoItemExtractor.java", "diffHunk": "@@ -185,13 +194,7 @@ public long getViewCount() throws ParsingException {\n             if (videoInfo.getObject(\"topStandaloneBadge\") != null || isPremium()) {\n                 return -1;\n             }\n-            String viewCount;\n-            if (getStreamType() == StreamType.LIVE_STREAM)  {\n-                viewCount = videoInfo.getObject(\"viewCountText\")\n-                        .getArray(\"runs\").getObject(0).getString(\"text\");\n-            } else {\n-                viewCount = videoInfo.getObject(\"viewCountText\").getString(\"simpleText\");\n-            }\n+            String viewCount = getTextFromObject(videoInfo.getObject(\"viewCountText\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e4d2fd64e4fd00f02ebacb8c31d9e3b2de7d6ed"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA1MTY5NQ==", "bodyText": "Should handle video premieres, as the date will be in the future.\nAvailable in the upcomingEventData object, I think the core of the old implementation could be reused here:\n\n  \n    \n      NewPipeExtractor/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamInfoItemExtractor.java\n    \n    \n        Lines 264 to 287\n      in\n      26234a1\n    \n    \n    \n    \n\n        \n          \n           private boolean isVideoReminder() { \n        \n\n        \n          \n               return !item.select(\"span.yt-uix-livereminder\").isEmpty(); \n        \n\n        \n          \n           } \n        \n\n        \n          \n            \n        \n\n        \n          \n           private Calendar getDateFromReminder() throws ParsingException { \n        \n\n        \n          \n               final Element timeFuture = item.select(\"span.yt-badge.localized-date\").first(); \n        \n\n        \n          \n            \n        \n\n        \n          \n               if (timeFuture == null) { \n        \n\n        \n          \n                   throw new ParsingException(\"Span timeFuture is null\"); \n        \n\n        \n          \n               } \n        \n\n        \n          \n            \n        \n\n        \n          \n               final String timestamp = timeFuture.attr(\"data-timestamp\"); \n        \n\n        \n          \n               if (!timestamp.isEmpty()) { \n        \n\n        \n          \n                   try { \n        \n\n        \n          \n                       final Calendar calendar = Calendar.getInstance(); \n        \n\n        \n          \n                       calendar.setTime(new Date(Long.parseLong(timestamp) * 1000L)); \n        \n\n        \n          \n                       return calendar; \n        \n\n        \n          \n                   } catch (Exception e) { \n        \n\n        \n          \n                       throw new ParsingException(\"Could not parse = \\\"\" + timestamp + \"\\\"\"); \n        \n\n        \n          \n                   } \n        \n\n        \n          \n               } \n        \n\n        \n          \n            \n        \n\n        \n          \n               throw new ParsingException(\"Could not parse date from reminder element: \\\"\" + timeFuture + \"\\\"\"); \n        \n\n        \n          \n           }", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r386051695", "createdAt": "2020-02-29T19:56:18Z", "author": {"login": "mauriciocolli"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamInfoItemExtractor.java", "diffHunk": "@@ -76,89 +79,95 @@ public String getUrl() throws ParsingException {\n \n     @Override\n     public String getName() throws ParsingException {\n-        String name = null;\n-        try {\n-            name = videoInfo.getObject(\"title\").getString(\"simpleText\");\n-        } catch (Exception ignored) {}\n-        if (name == null) {\n-            try {\n-                name = videoInfo.getObject(\"title\").getArray(\"runs\").getObject(0).getString(\"text\");\n-            } catch (Exception ignored) {}\n-        }\n+        String name = getTextFromObject(videoInfo.getObject(\"title\"));\n         if (name != null && !name.isEmpty()) return name;\n         throw new ParsingException(\"Could not get name\");\n     }\n \n     @Override\n     public long getDuration() throws ParsingException {\n+        if (getStreamType() == StreamType.LIVE_STREAM) return -1;\n+\n+        String duration = null;\n+\n         try {\n-            if (getStreamType() == StreamType.LIVE_STREAM) return -1;\n-            return YoutubeParsingHelper.parseDurationString(videoInfo.getObject(\"lengthText\").getString(\"simpleText\"));\n-        } catch (Exception e) {\n-            throw new ParsingException(\"Could not get duration\", e);\n+            duration = getTextFromObject(videoInfo.getObject(\"lengthText\"));\n+        } catch (Exception ignored) {}\n+\n+        if (duration == null) {\n+            try {\n+                for (Object thumbnailOverlay : videoInfo.getArray(\"thumbnailOverlays\")) {\n+                    if (((JsonObject) thumbnailOverlay).getObject(\"thumbnailOverlayTimeStatusRenderer\") != null) {\n+                        duration = getTextFromObject(((JsonObject) thumbnailOverlay)\n+                                .getObject(\"thumbnailOverlayTimeStatusRenderer\").getObject(\"text\"));\n+                    }\n+                }\n+            } catch (Exception ignored) {}\n+\n+            if (duration == null) throw new ParsingException(\"Could not get duration\");\n         }\n+\n+        return YoutubeParsingHelper.parseDurationString(duration);\n     }\n \n     @Override\n     public String getUploaderName() throws ParsingException {\n         String name = null;\n+\n         try {\n-            name = videoInfo.getObject(\"longBylineText\").getArray(\"runs\")\n-                    .getObject(0).getString(\"text\");\n+            name = getTextFromObject(videoInfo.getObject(\"longBylineText\"));\n         } catch (Exception ignored) {}\n+\n         if (name == null) {\n             try {\n-                name = videoInfo.getObject(\"ownerText\").getArray(\"runs\")\n-                        .getObject(0).getString(\"text\");\n-            } catch (Exception ignored) {}\n-        }\n-        if (name == null) {\n-            try {\n-                name = videoInfo.getObject(\"shortBylineText\").getArray(\"runs\")\n-                        .getObject(0).getString(\"text\");\n+                name = getTextFromObject(videoInfo.getObject(\"ownerText\"));\n             } catch (Exception ignored) {}\n+\n+            if (name == null) {\n+                try {\n+                    name = getTextFromObject(videoInfo.getObject(\"shortBylineText\"));\n+                } catch (Exception ignored) {}\n+\n+                if (name == null) throw new ParsingException(\"Could not get uploader name\");\n+            }\n         }\n-        if (name != null && !name.isEmpty()) return name;\n-        throw new ParsingException(\"Could not get uploader name\");\n+\n+        return name;\n     }\n \n     @Override\n     public String getUploaderUrl() throws ParsingException {\n+        String url = null;\n+\n         try {\n-            String id = null;\n+            url = getUrlFromNavigationEndpoint(videoInfo.getObject(\"longBylineText\")\n+                    .getArray(\"runs\").getObject(0).getObject(\"navigationEndpoint\"));\n+        } catch (Exception ignored) {}\n+\n+        if (url == null) {\n             try {\n-                id = videoInfo.getObject(\"longBylineText\").getArray(\"runs\")\n-                        .getObject(0).getObject(\"navigationEndpoint\")\n-                        .getObject(\"browseEndpoint\").getString(\"browseId\");\n+                url = getUrlFromNavigationEndpoint(videoInfo.getObject(\"ownerText\")\n+                        .getArray(\"runs\").getObject(0).getObject(\"navigationEndpoint\"));\n             } catch (Exception ignored) {}\n-            if (id == null) {\n-                try {\n-                    id = videoInfo.getObject(\"ownerText\").getArray(\"runs\")\n-                            .getObject(0).getObject(\"navigationEndpoint\")\n-                            .getObject(\"browseEndpoint\").getString(\"browseId\");\n-                } catch (Exception ignored) {}\n-            }\n-            if (id == null) {\n+\n+            if (url == null) {\n                 try {\n-                    id = videoInfo.getObject(\"shortBylineText\").getArray(\"runs\")\n-                            .getObject(0).getObject(\"navigationEndpoint\")\n-                            .getObject(\"browseEndpoint\").getString(\"browseId\");\n+                    url = getUrlFromNavigationEndpoint(videoInfo.getObject(\"shortBylineText\")\n+                            .getArray(\"runs\").getObject(0).getObject(\"navigationEndpoint\"));\n                 } catch (Exception ignored) {}\n+\n+                if (url == null) throw new ParsingException(\"Could not get uploader url\");\n             }\n-            if (id == null || id.isEmpty()) {\n-                throw new IllegalArgumentException(\"is empty\");\n-            }\n-            return YoutubeChannelLinkHandlerFactory.getInstance().getUrl(id);\n-        } catch (Exception e) {\n-            throw new ParsingException(\"Could not get uploader url\");\n         }\n+\n+        return url;\n     }\n \n     @Nullable\n     @Override\n     public String getTextualUploadDate() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e4d2fd64e4fd00f02ebacb8c31d9e3b2de7d6ed"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA1NDQ0Nw==", "bodyText": "Doesn't handle video premieres.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/262#discussion_r386054447", "createdAt": "2020-02-29T20:43:21Z", "author": {"login": "mauriciocolli"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamInfoItemExtractor.java", "diffHunk": "@@ -76,89 +79,95 @@ public String getUrl() throws ParsingException {\n \n     @Override\n     public String getName() throws ParsingException {\n-        String name = null;\n-        try {\n-            name = videoInfo.getObject(\"title\").getString(\"simpleText\");\n-        } catch (Exception ignored) {}\n-        if (name == null) {\n-            try {\n-                name = videoInfo.getObject(\"title\").getArray(\"runs\").getObject(0).getString(\"text\");\n-            } catch (Exception ignored) {}\n-        }\n+        String name = getTextFromObject(videoInfo.getObject(\"title\"));\n         if (name != null && !name.isEmpty()) return name;\n         throw new ParsingException(\"Could not get name\");\n     }\n \n     @Override\n     public long getDuration() throws ParsingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e4d2fd64e4fd00f02ebacb8c31d9e3b2de7d6ed"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3979, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}