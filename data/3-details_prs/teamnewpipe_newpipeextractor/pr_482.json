{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwMzIyMTU3", "number": 482, "title": "Mock mix pl tests", "bodyText": "I carefully read the contribution guidelines and agree to them.\n I have tested the API against NewPipe.\n I agree to create a pull request for NewPipe as soon as possible to make it compatible with the changed API.\n\nMy first draft to address the points abount mocking the responses in #481. Not yet merge ready, but before that i wanted to get some opinions on this type of solution.\n\nRecordingDownloader relays request to the existing DownloaderTestImpl, but saves the request/response pair into a json file inside a folder specific to the test class. This should be done locally when the requests that are made by a test class change.\nMockDownloader relies on the json files created by the RecordingDownloader. PR/Push CI jobs should then use this downloader.\nTo change the downloader type during development on the local machine change DownloaderFactory.DEFAULT_DOWNLOADER\nTo change the downloader depending on CI jobs, add a system property to gradle commands: -Ddownloader=ABCD, where ABCD is one of DownloaderType\nThe downloader specified through gradle takes precedence over the one specified inside DownloaderFactory. If none is giving it falls back to that one.\n\nSome sitenotes:\n\nYoutubeParsingHelper holds a global state about client version and client key. The first test class that gets executed with the RecordingDownloader makes a request and gets that request saved. Other test classes also need that request saved, but since the global state is then already initialized, that request won't be made. Currently I added that request as shared and add them to all MockDownloaders\napache-commons-io can be removed if needed. Was needed to clear the directories before RecordingDownloader fills them.\nGson is used over nanojson, because nanojson couldn't serialize the responseBody\nI couldn't test if gradle aggregatedJavadocs -Ddownloader=xyz works because it won't work on windows due to file encoding. I only tried gradle extractor:test -Ddownloader=xyz\nIgnore the first (move package) and last commit (generated jsons) for easier diffs\nWhat is that design pattern called, where you get a specific implementation based on an input. I don't think it's factory", "createdAt": "2020-12-15T15:11:00Z", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482", "merged": true, "mergeCommit": {"oid": "c2c4d97efdb87f29f3bf6fa50d778cce8d7c9e40"}, "closed": true, "closedAt": "2021-01-15T11:54:49Z", "author": {"login": "XiangRongLin"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdujjzSAFqTU2NDgwODYzMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdwXlXnAFqTU2OTE5NTU5OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0ODA4NjMy", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#pullrequestreview-564808632", "createdAt": "2021-01-09T20:26:44Z", "commit": {"oid": "2883e4a65180cdcddb00ae730f9ac8decd52a362"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOVQyMDoyNjo0NFrOIQyG9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOVQyMDozOTozMFrOIQyLpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ2OTEwOA==", "bodyText": "The base resource path should be put in some central class, like in DownloaderFactory. The root path should in that case be \"src/test/resources/org/schabi/newpipe/extractor/\"", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#discussion_r554469108", "createdAt": "2021-01-09T20:26:44Z", "author": {"login": "Stypox"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeMixPlaylistExtractorTest.java", "diffHunk": "@@ -41,6 +43,7 @@\n     private static final String VIDEO_ID = \"_AzeUSL9lZc\";\n     private static final String VIDEO_TITLE =\n             \"Most Beautiful And Emotional  Piano: Anime Music Shigatsu wa Kimi no Uso OST IMO\";\n+    private static final String RESOURCE_PATH = \"src/test/resources/org/schabi/newpipe/extractor/services/youtube/mix/\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2883e4a65180cdcddb00ae730f9ac8decd52a362"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ2OTMzNQ==", "bodyText": "Maybe you could also add a method to DownloaderFactory replacing these two lines, so that they don't have to be repeated every time. Something like DownloaderFactory.initNewPipeWithDownloader(RESOURCE_PATH + \"mix\"), and put the .getAbsolutePath() inside there, too.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#discussion_r554469335", "createdAt": "2021-01-09T20:29:09Z", "author": {"login": "Stypox"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeMixPlaylistExtractorTest.java", "diffHunk": "@@ -50,7 +53,8 @@\n \n         @BeforeClass\n         public static void setUp() throws Exception {\n-            NewPipe.init(DownloaderTestImpl.getInstance());\n+            final File file = new File(RESOURCE_PATH + \"mix\");\n+            NewPipe.init(new DownloaderFactory().getDownloader(file.getAbsolutePath()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2883e4a65180cdcddb00ae730f9ac8decd52a362"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ2OTQzOQ==", "bodyText": "Can this even happen? Doesn't Java disallow this impossible cases, since there are only three possible instances of the enum?", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#discussion_r554469439", "createdAt": "2021-01-09T20:30:26Z", "author": {"login": "Stypox"}, "path": "extractor/src/test/java/org/schabi/newpipe/downloader/DownloaderFactory.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.schabi.newpipe.downloader;\n+\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+\n+import java.io.IOException;\n+\n+public class DownloaderFactory {\n+\n+    private final static DownloaderType DEFAULT_DOWNLOADER = DownloaderType.REAL;\n+\n+    public Downloader getDownloader(String path) throws IOException {\n+        DownloaderType type;\n+        try {\n+            type = DownloaderType.valueOf(System.getProperty(\"downloader\"));\n+        } catch (Exception e) {\n+            type = DEFAULT_DOWNLOADER;\n+        }\n+\n+        switch (type) {\n+            case REAL:\n+                return DownloaderTestImpl.getInstance();\n+            case MOCK:\n+                return new MockDownloader(path);\n+            case RECORDING:\n+                return new RecordingDownloader(path);\n+            default:\n+                throw new UnsupportedOperationException(\"Unknown downloader type: \" + type.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2883e4a65180cdcddb00ae730f9ac8decd52a362"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ2OTY3OQ==", "bodyText": "Are there limitations with nanojson?", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#discussion_r554469679", "createdAt": "2021-01-09T20:33:13Z", "author": {"login": "Stypox"}, "path": "extractor/build.gradle", "diffHunk": "@@ -9,4 +9,6 @@ dependencies {\n \n     testImplementation 'junit:junit:4.13'\n     testImplementation \"com.squareup.okhttp3:okhttp:3.12.11\"\n+    testImplementation 'com.google.code.gson:gson:2.8.6'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2883e4a65180cdcddb00ae730f9ac8decd52a362"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ3MDMxMQ==", "bodyText": "I am not sure, but maybe here you should catch errors, so that if we put some files of a different format in the same folder there are no issues (we may want to do that at some point, maybe)", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#discussion_r554470311", "createdAt": "2021-01-09T20:39:30Z", "author": {"login": "Stypox"}, "path": "extractor/src/test/java/org/schabi/newpipe/downloader/MockDownloader.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package org.schabi.newpipe.downloader;\n+\n+import com.google.gson.GsonBuilder;\n+\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Request;\n+import org.schabi.newpipe.extractor.downloader.Response;\n+\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.annotation.Nonnull;\n+\n+class MockDownloader extends Downloader {\n+\n+    private final String path;\n+    private final Map<Request, Response> mocks;\n+\n+    public MockDownloader(@Nonnull String path) throws IOException {\n+        this.path = path;\n+        this.mocks = new HashMap<>();\n+        File folder = new File(path);\n+        for (File file : folder.listFiles()) {\n+            final FileReader reader = new FileReader(file);\n+            final TestRequestResponse response = new GsonBuilder()\n+                    .create()\n+                    .fromJson(reader, TestRequestResponse.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2883e4a65180cdcddb00ae730f9ac8decd52a362"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4dad3d60d65e33e012a1d853fc0128dd6287abae", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/4dad3d60d65e33e012a1d853fc0128dd6287abae", "committedDate": "2021-01-10T18:36:21Z", "message": "Move DownloaderTestImpl into downloader package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bcb9c76a7c62628d66d2aa5a9fe97e199f5a7a5", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/1bcb9c76a7c62628d66d2aa5a9fe97e199f5a7a5", "committedDate": "2021-01-10T18:36:24Z", "message": "Generate equals and hashCode for Request"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c40fb8bf70d225e553c7b0095d3929ade57fe65", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/7c40fb8bf70d225e553c7b0095d3929ade57fe65", "committedDate": "2021-01-10T18:36:24Z", "message": "Add additional downloader implementations\n\nRecordingDownloader relies on the real downloader and saves the request/response pair into a json file.\nMockDownloader uses json files from above and mocks responses for specific requests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6e8e39def57f71b635c2a47d078125adf8ea6f5", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/e6e8e39def57f71b635c2a47d078125adf8ea6f5", "committedDate": "2021-01-10T18:36:24Z", "message": "Add DownloaderFactory to return a specific downloader based on 2 variables.\n\nIf the system property 'downloader' is set that use that specific downloader. This is used from gradle by appending `-Ddownloader=ABCD to the command.\nABCD is one of DownloaderType.\nThe other variable is the static property `DEFAULT_DOWNLOADER` in DownloaderFactory, which can be easily changed as needed inside the IDE according to development needs`.\n\nNormal workflow would be to first use the recording downloader and afterwards only use mocks, if the requests are always staying the same."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "285c26eafa1df069a0e665a88d38ff460573a379", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/285c26eafa1df069a0e665a88d38ff460573a379", "committedDate": "2021-01-10T18:38:41Z", "message": "Adjust YoutubeMixPlaylistExtractorTest to use DownloaderFactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8aa989c42b20f7433dadd4c71c4277243b85e72", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/f8aa989c42b20f7433dadd4c71c4277243b85e72", "committedDate": "2021-01-10T18:38:47Z", "message": "Add generated json and manually copy client_version.json"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f447a7a4500f34006f671407e68deea3b2255749", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/f447a7a4500f34006f671407e68deea3b2255749", "committedDate": "2021-01-10T18:49:14Z", "message": "fix import due to downloader package move"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35e299759ecd09c020b93f59f2f94ad1c3d58b7e", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/35e299759ecd09c020b93f59f2f94ad1c3d58b7e", "committedDate": "2021-01-10T19:24:50Z", "message": "Add method to allow resetting youtube client version and key\n\nThis is needed so that a request is made for each test class when running multiple at once. This way RecordingDownloader records all necessary requests.\nThis works as long as tests are run sequentially and not in parallel."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "255c726f20254112e6459d58a979f0a136ad2503", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/255c726f20254112e6459d58a979f0a136ad2503", "committedDate": "2021-01-10T19:27:34Z", "message": "Add resource path base to DownloaderFactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f91916c017addeaa49ce15da8f6b37419b1ec649", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/f91916c017addeaa49ce15da8f6b37419b1ec649", "committedDate": "2021-01-10T19:39:22Z", "message": "Remove unnecessary file object creation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ea6c6ce543ae129423397f1e646abe2fee2a64d", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/1ea6c6ce543ae129423397f1e646abe2fee2a64d", "committedDate": "2021-01-10T19:46:42Z", "message": "Prefix mock file from RecordingDownloader with \"generated_mock_\"\n\nOnly read those files in MockDownloader"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e82cb1efeaf34a87072b6424aad4671796697396", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/e82cb1efeaf34a87072b6424aad4671796697396", "committedDate": "2021-01-10T19:50:38Z", "message": "Remove dependency to commons-io"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2883e4a65180cdcddb00ae730f9ac8decd52a362", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/2883e4a65180cdcddb00ae730f9ac8decd52a362", "committedDate": "2020-12-15T14:20:14Z", "message": "Add generated json and manually copy client_version.json"}, "afterCommit": {"oid": "e82cb1efeaf34a87072b6424aad4671796697396", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/e82cb1efeaf34a87072b6424aad4671796697396", "committedDate": "2021-01-10T19:50:38Z", "message": "Remove dependency to commons-io"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0ODk5MTA2", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#pullrequestreview-564899106", "createdAt": "2021-01-10T20:45:10Z", "commit": {"oid": "e82cb1efeaf34a87072b6424aad4671796697396"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQyMDo0NToxMFrOIQ7V8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQyMDo0NToxMFrOIQ7V8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYyMDQwMw==", "bodyText": "Todo for me", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#discussion_r554620403", "createdAt": "2021-01-10T20:45:10Z", "author": {"login": "XiangRongLin"}, "path": "extractor/src/test/java/org/schabi/newpipe/downloader/RecordingDownloader.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package org.schabi.newpipe.downloader;\n+\n+import com.google.gson.GsonBuilder;\n+\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Request;\n+import org.schabi.newpipe.extractor.downloader.Response;\n+import org.schabi.newpipe.extractor.exceptions.ReCaptchaException;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import javax.annotation.Nonnull;\n+\n+class RecordingDownloader extends Downloader {\n+\n+    public final static String FILE_NAME_PREFIX = \"generated_mock_\";\n+\n+    private int index = 0;\n+    private final String path;\n+\n+    public RecordingDownloader(String stringPath) throws IOException {\n+        this.path = stringPath;\n+        Path path = Paths.get(stringPath);\n+        File folder = path.toFile();\n+        if (folder.exists()) {\n+            for (File file : folder.listFiles()) {\n+                if (file.getName().startsWith(RecordingDownloader.FILE_NAME_PREFIX)) {\n+                    file.delete();\n+                }\n+            }\n+        }\n+        Files.createDirectories(path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e82cb1efeaf34a87072b6424aad4671796697396"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63c237db411f9f989527ffc17d817ba95c6bbd81", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/63c237db411f9f989527ffc17d817ba95c6bbd81", "committedDate": "2021-01-11T06:57:11Z", "message": "Only create directories if they do not exist"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3455f0f23c6e34a16e23bdb687037ea3849697f8", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/3455f0f23c6e34a16e23bdb687037ea3849697f8", "committedDate": "2021-01-12T08:37:48Z", "message": "Add documentation to testing with mocks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4af50c68709c96a3c57e5041f43520c319577609", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/4af50c68709c96a3c57e5041f43520c319577609", "committedDate": "2021-01-12T08:41:57Z", "message": "Use @link for downloader"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY4NDQ5NzI0", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#pullrequestreview-568449724", "createdAt": "2021-01-14T17:14:11Z", "commit": {"oid": "4af50c68709c96a3c57e5041f43520c319577609"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxNzoxNDoxMVrOITuokA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxNzoxNDoxMVrOITuokA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU1NzkwNA==", "bodyText": "Maybe add a comment saying that this is only to be used for tests.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#discussion_r557557904", "createdAt": "2021-01-14T17:14:11Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java", "diffHunk": "@@ -353,6 +353,11 @@ public static String getKey() throws IOException, ExtractionException {\n         return key;\n     }\n \n+    static void resetClientVersionAndKey() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af50c68709c96a3c57e5041f43520c319577609"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ca7123d5d87a19b17f2fd6f595e5b884b3bec73", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/6ca7123d5d87a19b17f2fd6f595e5b884b3bec73", "committedDate": "2021-01-14T19:01:52Z", "message": "Add comment for usage of YoutubeParsingHelper.resetClientVersionAndKey"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY4NjUwMzc0", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#pullrequestreview-568650374", "createdAt": "2021-01-14T21:44:06Z", "commit": {"oid": "6ca7123d5d87a19b17f2fd6f595e5b884b3bec73"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f81d9d6891fc34c85301487802fb0b5030e85ab", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/4f81d9d6891fc34c85301487802fb0b5030e85ab", "committedDate": "2021-01-15T08:51:23Z", "message": "Regenerate mock files"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY5MTk1NTk5", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#pullrequestreview-569195599", "createdAt": "2021-01-15T11:54:14Z", "commit": {"oid": "4f81d9d6891fc34c85301487802fb0b5030e85ab"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3960, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}