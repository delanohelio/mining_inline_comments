{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0NDUyNjQy", "number": 256, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODozNzowMlrODfSfCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoxMzowNVrODkzM4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTM1MzA0OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCConferenceLinkHandlerFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODozNzowMlrOFo6APQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDoyMjo1M1rOFo9VFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQzNzY5Mw==", "bodyText": "It looks like you want to check if the path starts with b/. if this is the case use\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (path.contains(\"b/\")) {\n          \n          \n            \n                    if (path.startsWith(\"b/\")) {\n          \n      \n    \n    \n  \n\nfor better performance. In which case can an url path start with b/? Do we need to check the host here or do we have only urls like /b/myConferenceId?", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/256#discussion_r378437693", "createdAt": "2020-02-12T18:37:02Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCConferenceLinkHandlerFactory.java", "diffHunk": "@@ -14,19 +18,43 @@ public String getUrl(String id, List<String> contentFilter, String sortFilter) t\n     }\n \n     @Override\n-    public String getId(String url) throws ParsingException {\n-        if(url.startsWith(\"https://api.media.ccc.de/public/conferences/\")) {\n-            return url.replace(\"https://api.media.ccc.de/public/conferences/\", \"\");\n-        } else if(url.startsWith(\"https://media.ccc.de/c/\")) {\n-            return Parser.matchGroup1(\"https://media.ccc.de/c/([^?#]*)\", url);\n-        } else {\n-            throw new ParsingException(\"Could not get id from url: \" + url);\n+    public String getId(String urlString) throws ParsingException {\n+        if (urlString.startsWith(\"https://api.media.ccc.de/public/conferences/\")) {\n+            return urlString.replace(\"https://api.media.ccc.de/public/conferences/\", \"\");\n+        } else if (urlString.startsWith(\"https://media.ccc.de/c/\")) {\n+            return Parser.matchGroup1(\"https://media.ccc.de/c/([^?#]*)\", urlString);\n         }\n+\n+        URL url;\n+        try {\n+            url = Utils.stringToURL(urlString);\n+        } catch (MalformedURLException e) {\n+            throw new IllegalArgumentException(\"The given URL is not valid\");\n+        }\n+\n+        String path = url.getPath();\n+        // remove leading \"/\" of URL-path if URL-path is given\n+        if (!path.isEmpty()) {\n+            path = path.substring(1);\n+        }\n+\n+        if (path.contains(\"b/\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff90d2233fc6e6422359276a28acb8fa3b88c07d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ1MTIzMw==", "bodyText": "Instead of this, just do urlString.startsWith(\"https://media.ccc.de/b/\") (and preferably change the name of the urlString variable back to just url)", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/256#discussion_r378451233", "createdAt": "2020-02-12T19:02:33Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCConferenceLinkHandlerFactory.java", "diffHunk": "@@ -14,19 +18,43 @@ public String getUrl(String id, List<String> contentFilter, String sortFilter) t\n     }\n \n     @Override\n-    public String getId(String url) throws ParsingException {\n-        if(url.startsWith(\"https://api.media.ccc.de/public/conferences/\")) {\n-            return url.replace(\"https://api.media.ccc.de/public/conferences/\", \"\");\n-        } else if(url.startsWith(\"https://media.ccc.de/c/\")) {\n-            return Parser.matchGroup1(\"https://media.ccc.de/c/([^?#]*)\", url);\n-        } else {\n-            throw new ParsingException(\"Could not get id from url: \" + url);\n+    public String getId(String urlString) throws ParsingException {\n+        if (urlString.startsWith(\"https://api.media.ccc.de/public/conferences/\")) {\n+            return urlString.replace(\"https://api.media.ccc.de/public/conferences/\", \"\");\n+        } else if (urlString.startsWith(\"https://media.ccc.de/c/\")) {\n+            return Parser.matchGroup1(\"https://media.ccc.de/c/([^?#]*)\", urlString);\n         }\n+\n+        URL url;\n+        try {\n+            url = Utils.stringToURL(urlString);\n+        } catch (MalformedURLException e) {\n+            throw new IllegalArgumentException(\"The given URL is not valid\");\n+        }\n+\n+        String path = url.getPath();\n+        // remove leading \"/\" of URL-path if URL-path is given\n+        if (!path.isEmpty()) {\n+            path = path.substring(1);\n+        }\n+\n+        if (path.contains(\"b/\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQzNzY5Mw=="}, "originalCommit": {"oid": "ff90d2233fc6e6422359276a28acb8fa3b88c07d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ5MjE4MA==", "bodyText": "Yes it's conferences @TobiGr\nI changed back to how it was and added an else if", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/256#discussion_r378492180", "createdAt": "2020-02-12T20:22:53Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCConferenceLinkHandlerFactory.java", "diffHunk": "@@ -14,19 +18,43 @@ public String getUrl(String id, List<String> contentFilter, String sortFilter) t\n     }\n \n     @Override\n-    public String getId(String url) throws ParsingException {\n-        if(url.startsWith(\"https://api.media.ccc.de/public/conferences/\")) {\n-            return url.replace(\"https://api.media.ccc.de/public/conferences/\", \"\");\n-        } else if(url.startsWith(\"https://media.ccc.de/c/\")) {\n-            return Parser.matchGroup1(\"https://media.ccc.de/c/([^?#]*)\", url);\n-        } else {\n-            throw new ParsingException(\"Could not get id from url: \" + url);\n+    public String getId(String urlString) throws ParsingException {\n+        if (urlString.startsWith(\"https://api.media.ccc.de/public/conferences/\")) {\n+            return urlString.replace(\"https://api.media.ccc.de/public/conferences/\", \"\");\n+        } else if (urlString.startsWith(\"https://media.ccc.de/c/\")) {\n+            return Parser.matchGroup1(\"https://media.ccc.de/c/([^?#]*)\", urlString);\n         }\n+\n+        URL url;\n+        try {\n+            url = Utils.stringToURL(urlString);\n+        } catch (MalformedURLException e) {\n+            throw new IllegalArgumentException(\"The given URL is not valid\");\n+        }\n+\n+        String path = url.getPath();\n+        // remove leading \"/\" of URL-path if URL-path is given\n+        if (!path.isEmpty()) {\n+            path = path.substring(1);\n+        }\n+\n+        if (path.contains(\"b/\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQzNzY5Mw=="}, "originalCommit": {"oid": "ff90d2233fc6e6422359276a28acb8fa3b88c07d"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTM4NzI2OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCStreamLinkHandlerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODo0ODoxNFrOFo6WoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODo0ODoxNFrOFo6WoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ0MzQyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (path.contains(\"v/\")) {\n          \n          \n            \n                    if (path.startsWith(\"v/\")) {", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/256#discussion_r378443425", "createdAt": "2020-02-12T18:48:14Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCStreamLinkHandlerFactory.java", "diffHunk": "@@ -1,16 +1,39 @@\n package org.schabi.newpipe.extractor.services.media_ccc.linkHandler;\n \n+import org.schabi.newpipe.extractor.exceptions.FoundAdException;\n import org.schabi.newpipe.extractor.exceptions.ParsingException;\n import org.schabi.newpipe.extractor.linkhandler.LinkHandlerFactory;\n+import org.schabi.newpipe.extractor.utils.Utils;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n \n public class MediaCCCStreamLinkHandlerFactory extends LinkHandlerFactory {\n \n     @Override\n-    public String getId(String url) throws ParsingException {\n-        if(url.startsWith(\"https://api.media.ccc.de/public/events/\") &&\n-            !url.contains(\"?q=\")) {\n-            return url.replace(\"https://api.media.ccc.de/public/events/\", \"\");\n+    public String getId(String urlString) throws ParsingException {\n+        if (urlString.startsWith(\"https://api.media.ccc.de/public/events/\") &&\n+                !urlString.contains(\"?q=\")) {\n+            return urlString.replace(\"https://api.media.ccc.de/public/events/\", \"\");\n+        }\n+        \n+        URL url;\n+        try {\n+            url = Utils.stringToURL(urlString);\n+        } catch (MalformedURLException e) {\n+            throw new IllegalArgumentException(\"The given URL is not valid\");\n+        }\n+\n+        String path = url.getPath();\n+        // remove leading \"/\" of URL-path if URL-path is given\n+        if (!path.isEmpty()) {\n+            path = path.substring(1);\n         }\n+\n+        if (path.contains(\"v/\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff90d2233fc6e6422359276a28acb8fa3b88c07d"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTQzNjM4OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCConferenceLinkHandlerFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTowMzoxOVrOFo62uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDoyMzo0OFrOFo9WuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ1MTY0MQ==", "bodyText": "Why are you catching that FoundAdException? getId doesn't even throw that.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/256#discussion_r378451641", "createdAt": "2020-02-12T19:03:19Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCConferenceLinkHandlerFactory.java", "diffHunk": "@@ -14,19 +18,43 @@ public String getUrl(String id, List<String> contentFilter, String sortFilter) t\n     }\n \n     @Override\n-    public String getId(String url) throws ParsingException {\n-        if(url.startsWith(\"https://api.media.ccc.de/public/conferences/\")) {\n-            return url.replace(\"https://api.media.ccc.de/public/conferences/\", \"\");\n-        } else if(url.startsWith(\"https://media.ccc.de/c/\")) {\n-            return Parser.matchGroup1(\"https://media.ccc.de/c/([^?#]*)\", url);\n-        } else {\n-            throw new ParsingException(\"Could not get id from url: \" + url);\n+    public String getId(String urlString) throws ParsingException {\n+        if (urlString.startsWith(\"https://api.media.ccc.de/public/conferences/\")) {\n+            return urlString.replace(\"https://api.media.ccc.de/public/conferences/\", \"\");\n+        } else if (urlString.startsWith(\"https://media.ccc.de/c/\")) {\n+            return Parser.matchGroup1(\"https://media.ccc.de/c/([^?#]*)\", urlString);\n         }\n+\n+        URL url;\n+        try {\n+            url = Utils.stringToURL(urlString);\n+        } catch (MalformedURLException e) {\n+            throw new IllegalArgumentException(\"The given URL is not valid\");\n+        }\n+\n+        String path = url.getPath();\n+        // remove leading \"/\" of URL-path if URL-path is given\n+        if (!path.isEmpty()) {\n+            path = path.substring(1);\n+        }\n+\n+        if (path.contains(\"b/\")) {\n+            return path.substring(2);\n+        }\n+\n+        throw new ParsingException(\"Could not get id from url: \" + url);\n+\n     }\n \n     @Override\n     public boolean onAcceptUrl(String url) throws ParsingException {\n-        return url.startsWith(\"https://api.media.ccc.de/public/conferences/\")\n-                || url.startsWith(\"https://media.ccc.de/c/\");\n+        try {\n+            getId(url);\n+            return true;\n+        } catch (FoundAdException fe) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff90d2233fc6e6422359276a28acb8fa3b88c07d"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ5MjYwMQ==", "bodyText": "my bad. because I used the same piece of code of youtubestreamlinkhandlerfactory and yeah, it's thrown on ad. I removed it.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/256#discussion_r378492601", "createdAt": "2020-02-12T20:23:48Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCConferenceLinkHandlerFactory.java", "diffHunk": "@@ -14,19 +18,43 @@ public String getUrl(String id, List<String> contentFilter, String sortFilter) t\n     }\n \n     @Override\n-    public String getId(String url) throws ParsingException {\n-        if(url.startsWith(\"https://api.media.ccc.de/public/conferences/\")) {\n-            return url.replace(\"https://api.media.ccc.de/public/conferences/\", \"\");\n-        } else if(url.startsWith(\"https://media.ccc.de/c/\")) {\n-            return Parser.matchGroup1(\"https://media.ccc.de/c/([^?#]*)\", url);\n-        } else {\n-            throw new ParsingException(\"Could not get id from url: \" + url);\n+    public String getId(String urlString) throws ParsingException {\n+        if (urlString.startsWith(\"https://api.media.ccc.de/public/conferences/\")) {\n+            return urlString.replace(\"https://api.media.ccc.de/public/conferences/\", \"\");\n+        } else if (urlString.startsWith(\"https://media.ccc.de/c/\")) {\n+            return Parser.matchGroup1(\"https://media.ccc.de/c/([^?#]*)\", urlString);\n         }\n+\n+        URL url;\n+        try {\n+            url = Utils.stringToURL(urlString);\n+        } catch (MalformedURLException e) {\n+            throw new IllegalArgumentException(\"The given URL is not valid\");\n+        }\n+\n+        String path = url.getPath();\n+        // remove leading \"/\" of URL-path if URL-path is given\n+        if (!path.isEmpty()) {\n+            path = path.substring(1);\n+        }\n+\n+        if (path.contains(\"b/\")) {\n+            return path.substring(2);\n+        }\n+\n+        throw new ParsingException(\"Could not get id from url: \" + url);\n+\n     }\n \n     @Override\n     public boolean onAcceptUrl(String url) throws ParsingException {\n-        return url.startsWith(\"https://api.media.ccc.de/public/conferences/\")\n-                || url.startsWith(\"https://media.ccc.de/c/\");\n+        try {\n+            getId(url);\n+            return true;\n+        } catch (FoundAdException fe) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ1MTY0MQ=="}, "originalCommit": {"oid": "ff90d2233fc6e6422359276a28acb8fa3b88c07d"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTEzMjM0OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDo0Nzo0OFrOFwur7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDo0Nzo0OFrOFwur7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0MDg3Ng==", "bodyText": "As far as I know this is not good practice, an empty List should be returned instead. Though I am not sure if it is normal to see null instead of empty lists in NewPipeExtractor. Same 5 lines below", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/256#discussion_r386640876", "createdAt": "2020-03-02T20:47:48Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java", "diffHunk": "@@ -170,15 +170,13 @@ public String getHlsUrl() throws ParsingException {\n         return null;\n     }\n \n-    @Nonnull\n     @Override\n     public List<SubtitlesStream> getSubtitlesDefault() throws IOException, ExtractionException {\n         return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85f6362c026b8ad02baff9f4b711ac2fa2ca34e4"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTEzOTY2OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCStreamLinkHandlerFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDo1MDoxOFrOFwuwpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTozOToxN1rOFwwPJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0MjA4Nw==", "bodyText": "Wouldn't it be a better idea to use substring? That's what we want, in the end", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/256#discussion_r386642087", "createdAt": "2020-03-02T20:50:18Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCStreamLinkHandlerFactory.java", "diffHunk": "@@ -1,16 +1,39 @@\n package org.schabi.newpipe.extractor.services.media_ccc.linkHandler;\n \n+import org.schabi.newpipe.extractor.exceptions.FoundAdException;\n import org.schabi.newpipe.extractor.exceptions.ParsingException;\n import org.schabi.newpipe.extractor.linkhandler.LinkHandlerFactory;\n+import org.schabi.newpipe.extractor.utils.Utils;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n \n public class MediaCCCStreamLinkHandlerFactory extends LinkHandlerFactory {\n \n     @Override\n-    public String getId(String url) throws ParsingException {\n-        if(url.startsWith(\"https://api.media.ccc.de/public/events/\") &&\n-            !url.contains(\"?q=\")) {\n-            return url.replace(\"https://api.media.ccc.de/public/events/\", \"\");\n+    public String getId(String urlString) throws ParsingException {\n+        if (urlString.startsWith(\"https://api.media.ccc.de/public/events/\") &&\n+                !urlString.contains(\"?q=\")) {\n+            return urlString.replace(\"https://api.media.ccc.de/public/events/\", \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85f6362c026b8ad02baff9f4b711ac2fa2ca34e4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY2NjI3Nw==", "bodyText": "You can notice I didn't changed anything here, just the parameter name.\nAnyway, I've done it, if I understood your request", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/256#discussion_r386666277", "createdAt": "2020-03-02T21:39:17Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCStreamLinkHandlerFactory.java", "diffHunk": "@@ -1,16 +1,39 @@\n package org.schabi.newpipe.extractor.services.media_ccc.linkHandler;\n \n+import org.schabi.newpipe.extractor.exceptions.FoundAdException;\n import org.schabi.newpipe.extractor.exceptions.ParsingException;\n import org.schabi.newpipe.extractor.linkhandler.LinkHandlerFactory;\n+import org.schabi.newpipe.extractor.utils.Utils;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n \n public class MediaCCCStreamLinkHandlerFactory extends LinkHandlerFactory {\n \n     @Override\n-    public String getId(String url) throws ParsingException {\n-        if(url.startsWith(\"https://api.media.ccc.de/public/events/\") &&\n-            !url.contains(\"?q=\")) {\n-            return url.replace(\"https://api.media.ccc.de/public/events/\", \"\");\n+    public String getId(String urlString) throws ParsingException {\n+        if (urlString.startsWith(\"https://api.media.ccc.de/public/events/\") &&\n+                !urlString.contains(\"?q=\")) {\n+            return urlString.replace(\"https://api.media.ccc.de/public/events/\", \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0MjA4Nw=="}, "originalCommit": {"oid": "85f6362c026b8ad02baff9f4b711ac2fa2ca34e4"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTE1MDI4OnYy", "diffSide": "RIGHT", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/media_ccc/MediaCCCStreamExtractorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDo1MzozN1rOFwu3QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNjowOToyNVrOFw5X6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0Mzc3Nw==", "bodyText": "In these stream tests you should also check if all stream urls are secure urls (i.e. start with https://)", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/256#discussion_r386643777", "createdAt": "2020-03-02T20:53:37Z", "author": {"login": "Stypox"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/media_ccc/MediaCCCStreamExtractorTest.java", "diffHunk": "@@ -21,81 +19,157 @@\n /**\n  * Test {@link MediaCCCStreamExtractor}\n  */\n-public class MediaCCCStreamExtractorTest implements BaseExtractorTest {\n-    private static StreamExtractor extractor;\n-\n-    @BeforeClass\n-    public static void setUpClass() throws Exception {\n-        NewPipe.init(DownloaderTestImpl.getInstance());\n-\n-        extractor =  MediaCCC.getStreamExtractor(\"https://api.media.ccc.de/public/events/8afc16c2-d76a-53f6-85e4-90494665835d\");\n-        extractor.fetchPage();\n-    }\n-\n-    @Override\n-    public void testServiceId() throws Exception {\n-        assertEquals(2, extractor.getServiceId());\n-    }\n-\n-    @Override\n-    public void testName() throws Exception {\n-        assertEquals(\"tmux - Warum ein schwarzes Fenster am Bildschirm reicht\", extractor.getName());\n-    }\n-\n-    @Override\n-    public void testId() throws Exception {\n-        assertEquals(\"\", extractor.getId());\n-    }\n-\n-    @Override\n-    public void testUrl() throws Exception {\n-        assertEquals(\"\", extractor.getUrl());\n-    }\n-\n-    @Override\n-    public void testOriginalUrl() throws Exception {\n-        assertEquals(\"\", extractor.getOriginalUrl());\n-    }\n-\n-    @Test\n-    public void testThumbnail() throws Exception {\n-        assertEquals(\"https://static.media.ccc.de/media/events/gpn/gpn18/105-hd.jpg\", extractor.getThumbnailUrl());\n-    }\n-\n-    @Test\n-    public void testUploaderName() throws Exception {\n-        assertEquals(\"gpn18\", extractor.getUploaderName());\n-    }\n-\n-    @Test\n-    public void testUploaderUrl() throws Exception {\n-        assertEquals(\"https://api.media.ccc.de/public/conferences/gpn18\", extractor.getUploaderUrl());\n-    }\n-\n-    @Test\n-    public void testUploaderAvatarUrl() throws Exception {\n-        assertEquals(\"https://static.media.ccc.de/media/events/gpn/gpn18/logo.png\", extractor.getUploaderAvatarUrl());\n-    }\n-\n-    @Test\n-    public void testVideoStreams() throws Exception {\n-        assertEquals(4, extractor.getVideoStreams().size());\n-    }\n-\n-    @Test\n-    public void testAudioStreams() throws Exception {\n-        assertEquals(2, extractor.getAudioStreams().size());\n-    }\n-\n-    @Test\n-    public void testGetTextualUploadDate() throws ParsingException {\n-        Assert.assertEquals(\"2018-05-11T02:00:00.000+02:00\", extractor.getTextualUploadDate());\n+public class MediaCCCStreamExtractorTest {\n+\n+    public static class Gpn18Tmux {\n+        private static MediaCCCStreamExtractor extractor;\n+\n+        @BeforeClass\n+        public static void setUpClass() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+\n+            extractor = (MediaCCCStreamExtractor) MediaCCC.getStreamExtractor(\"https://media.ccc.de/v/gpn18-105-tmux-warum-ein-schwarzes-fenster-am-bildschirm-reicht\");\n+            extractor.fetchPage();\n+        }\n+\n+        @Test\n+        public void testServiceId() throws Exception {\n+            assertEquals(2, extractor.getServiceId());\n+        }\n+\n+        @Test\n+        public void testName() throws Exception {\n+            assertEquals(\"tmux - Warum ein schwarzes Fenster am Bildschirm reicht\", extractor.getName());\n+        }\n+\n+        @Test\n+        public void testId() throws Exception {\n+            assertEquals(\"gpn18-105-tmux-warum-ein-schwarzes-fenster-am-bildschirm-reicht\", extractor.getId());\n+        }\n+\n+        @Test\n+        public void testUrl() throws Exception {\n+            assertEquals(\"https://api.media.ccc.de/public/events/gpn18-105-tmux-warum-ein-schwarzes-fenster-am-bildschirm-reicht\", extractor.getUrl());\n+        }\n+\n+        @Test\n+        public void testOriginalUrl() throws Exception {\n+            assertEquals(\"https://media.ccc.de/v/gpn18-105-tmux-warum-ein-schwarzes-fenster-am-bildschirm-reicht\", extractor.getOriginalUrl());\n+        }\n+\n+        @Test\n+        public void testThumbnail() throws Exception {\n+            assertEquals(\"https://static.media.ccc.de/media/events/gpn/gpn18/105-hd.jpg\", extractor.getThumbnailUrl());\n+        }\n+\n+        @Test\n+        public void testUploaderName() throws Exception {\n+            assertEquals(\"gpn18\", extractor.getUploaderName());\n+        }\n+\n+        @Test\n+        public void testUploaderUrl() throws Exception {\n+            assertEquals(\"https://api.media.ccc.de/public/conferences/gpn18\", extractor.getUploaderUrl());\n+        }\n+\n+        @Test\n+        public void testUploaderAvatarUrl() throws Exception {\n+            assertEquals(\"https://static.media.ccc.de/media/events/gpn/gpn18/logo.png\", extractor.getUploaderAvatarUrl());\n+        }\n+\n+        @Test\n+        public void testVideoStreams() throws Exception {\n+            assertEquals(4, extractor.getVideoStreams().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85f6362c026b8ad02baff9f4b711ac2fa2ca34e4"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgxNTk3Nw==", "bodyText": "for each stream run isSecureUrl(stream.getUrl())", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/256#discussion_r386815977", "createdAt": "2020-03-03T06:09:25Z", "author": {"login": "Stypox"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/media_ccc/MediaCCCStreamExtractorTest.java", "diffHunk": "@@ -21,81 +19,157 @@\n /**\n  * Test {@link MediaCCCStreamExtractor}\n  */\n-public class MediaCCCStreamExtractorTest implements BaseExtractorTest {\n-    private static StreamExtractor extractor;\n-\n-    @BeforeClass\n-    public static void setUpClass() throws Exception {\n-        NewPipe.init(DownloaderTestImpl.getInstance());\n-\n-        extractor =  MediaCCC.getStreamExtractor(\"https://api.media.ccc.de/public/events/8afc16c2-d76a-53f6-85e4-90494665835d\");\n-        extractor.fetchPage();\n-    }\n-\n-    @Override\n-    public void testServiceId() throws Exception {\n-        assertEquals(2, extractor.getServiceId());\n-    }\n-\n-    @Override\n-    public void testName() throws Exception {\n-        assertEquals(\"tmux - Warum ein schwarzes Fenster am Bildschirm reicht\", extractor.getName());\n-    }\n-\n-    @Override\n-    public void testId() throws Exception {\n-        assertEquals(\"\", extractor.getId());\n-    }\n-\n-    @Override\n-    public void testUrl() throws Exception {\n-        assertEquals(\"\", extractor.getUrl());\n-    }\n-\n-    @Override\n-    public void testOriginalUrl() throws Exception {\n-        assertEquals(\"\", extractor.getOriginalUrl());\n-    }\n-\n-    @Test\n-    public void testThumbnail() throws Exception {\n-        assertEquals(\"https://static.media.ccc.de/media/events/gpn/gpn18/105-hd.jpg\", extractor.getThumbnailUrl());\n-    }\n-\n-    @Test\n-    public void testUploaderName() throws Exception {\n-        assertEquals(\"gpn18\", extractor.getUploaderName());\n-    }\n-\n-    @Test\n-    public void testUploaderUrl() throws Exception {\n-        assertEquals(\"https://api.media.ccc.de/public/conferences/gpn18\", extractor.getUploaderUrl());\n-    }\n-\n-    @Test\n-    public void testUploaderAvatarUrl() throws Exception {\n-        assertEquals(\"https://static.media.ccc.de/media/events/gpn/gpn18/logo.png\", extractor.getUploaderAvatarUrl());\n-    }\n-\n-    @Test\n-    public void testVideoStreams() throws Exception {\n-        assertEquals(4, extractor.getVideoStreams().size());\n-    }\n-\n-    @Test\n-    public void testAudioStreams() throws Exception {\n-        assertEquals(2, extractor.getAudioStreams().size());\n-    }\n-\n-    @Test\n-    public void testGetTextualUploadDate() throws ParsingException {\n-        Assert.assertEquals(\"2018-05-11T02:00:00.000+02:00\", extractor.getTextualUploadDate());\n+public class MediaCCCStreamExtractorTest {\n+\n+    public static class Gpn18Tmux {\n+        private static MediaCCCStreamExtractor extractor;\n+\n+        @BeforeClass\n+        public static void setUpClass() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+\n+            extractor = (MediaCCCStreamExtractor) MediaCCC.getStreamExtractor(\"https://media.ccc.de/v/gpn18-105-tmux-warum-ein-schwarzes-fenster-am-bildschirm-reicht\");\n+            extractor.fetchPage();\n+        }\n+\n+        @Test\n+        public void testServiceId() throws Exception {\n+            assertEquals(2, extractor.getServiceId());\n+        }\n+\n+        @Test\n+        public void testName() throws Exception {\n+            assertEquals(\"tmux - Warum ein schwarzes Fenster am Bildschirm reicht\", extractor.getName());\n+        }\n+\n+        @Test\n+        public void testId() throws Exception {\n+            assertEquals(\"gpn18-105-tmux-warum-ein-schwarzes-fenster-am-bildschirm-reicht\", extractor.getId());\n+        }\n+\n+        @Test\n+        public void testUrl() throws Exception {\n+            assertEquals(\"https://api.media.ccc.de/public/events/gpn18-105-tmux-warum-ein-schwarzes-fenster-am-bildschirm-reicht\", extractor.getUrl());\n+        }\n+\n+        @Test\n+        public void testOriginalUrl() throws Exception {\n+            assertEquals(\"https://media.ccc.de/v/gpn18-105-tmux-warum-ein-schwarzes-fenster-am-bildschirm-reicht\", extractor.getOriginalUrl());\n+        }\n+\n+        @Test\n+        public void testThumbnail() throws Exception {\n+            assertEquals(\"https://static.media.ccc.de/media/events/gpn/gpn18/105-hd.jpg\", extractor.getThumbnailUrl());\n+        }\n+\n+        @Test\n+        public void testUploaderName() throws Exception {\n+            assertEquals(\"gpn18\", extractor.getUploaderName());\n+        }\n+\n+        @Test\n+        public void testUploaderUrl() throws Exception {\n+            assertEquals(\"https://api.media.ccc.de/public/conferences/gpn18\", extractor.getUploaderUrl());\n+        }\n+\n+        @Test\n+        public void testUploaderAvatarUrl() throws Exception {\n+            assertEquals(\"https://static.media.ccc.de/media/events/gpn/gpn18/logo.png\", extractor.getUploaderAvatarUrl());\n+        }\n+\n+        @Test\n+        public void testVideoStreams() throws Exception {\n+            assertEquals(4, extractor.getVideoStreams().size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0Mzc3Nw=="}, "originalCommit": {"oid": "85f6362c026b8ad02baff9f4b711ac2fa2ca34e4"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTE0MjEwOnYy", "diffSide": "RIGHT", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/media_ccc/MediaCCCStreamExtractorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoxMzowNVrOFxU6Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoxMzowNVrOFxU6Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI2NzE1NQ==", "bodyText": "Please do something like this (also below and in all MediaCCC testVideoStreams and testAudioStreams functions).\nThe below code is untested\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    public void testVideoStreams() throws Exception {\n          \n          \n            \n                        assertEquals(4, extractor.getVideoStreams().size());\n          \n          \n            \n                    }\n          \n          \n            \n                    public void testVideoStreams() throws Exception {\n          \n          \n            \n                        List<VideoStream> streams = extractor.getVideoStreams();\n          \n          \n            \n                        assertEquals(4, streams.size());\n          \n          \n            \n                        for (VideoStream stream : streams) {\n          \n          \n            \n                            assertIsSecureUrl(stream.getUrl())\n          \n          \n            \n                        }\n          \n          \n            \n                    }", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/256#discussion_r387267155", "createdAt": "2020-03-03T20:13:05Z", "author": {"login": "Stypox"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/media_ccc/MediaCCCStreamExtractorTest.java", "diffHunk": "@@ -6,96 +6,182 @@\n import org.schabi.newpipe.DownloaderTestImpl;\n import org.schabi.newpipe.extractor.NewPipe;\n import org.schabi.newpipe.extractor.exceptions.ParsingException;\n-import org.schabi.newpipe.extractor.services.BaseExtractorTest;\n import org.schabi.newpipe.extractor.services.media_ccc.extractors.MediaCCCStreamExtractor;\n-import org.schabi.newpipe.extractor.stream.StreamExtractor;\n+import org.schabi.newpipe.extractor.utils.UtilsTest;\n \n import java.text.ParseException;\n import java.text.SimpleDateFormat;\n import java.util.Calendar;\n \n import static java.util.Objects.requireNonNull;\n import static junit.framework.TestCase.assertEquals;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n import static org.schabi.newpipe.extractor.ServiceList.MediaCCC;\n \n /**\n  * Test {@link MediaCCCStreamExtractor}\n  */\n-public class MediaCCCStreamExtractorTest implements BaseExtractorTest {\n-    private static StreamExtractor extractor;\n-\n-    @BeforeClass\n-    public static void setUpClass() throws Exception {\n-        NewPipe.init(DownloaderTestImpl.getInstance());\n-\n-        extractor = MediaCCC.getStreamExtractor(\"https://api.media.ccc.de/public/events/8afc16c2-d76a-53f6-85e4-90494665835d\");\n-        extractor.fetchPage();\n-    }\n-\n-    @Override\n-    public void testServiceId() throws Exception {\n-        assertEquals(2, extractor.getServiceId());\n-    }\n-\n-    @Override\n-    public void testName() throws Exception {\n-        assertEquals(\"tmux - Warum ein schwarzes Fenster am Bildschirm reicht\", extractor.getName());\n-    }\n-\n-    @Override\n-    public void testId() throws Exception {\n-        assertEquals(\"\", extractor.getId());\n-    }\n-\n-    @Override\n-    public void testUrl() throws Exception {\n-        assertEquals(\"\", extractor.getUrl());\n-    }\n-\n-    @Override\n-    public void testOriginalUrl() throws Exception {\n-        assertEquals(\"\", extractor.getOriginalUrl());\n-    }\n-\n-    @Test\n-    public void testThumbnail() throws Exception {\n-        assertEquals(\"https://static.media.ccc.de/media/events/gpn/gpn18/105-hd.jpg\", extractor.getThumbnailUrl());\n-    }\n-\n-    @Test\n-    public void testUploaderName() throws Exception {\n-        assertEquals(\"gpn18\", extractor.getUploaderName());\n-    }\n-\n-    @Test\n-    public void testUploaderUrl() throws Exception {\n-        assertEquals(\"https://api.media.ccc.de/public/conferences/gpn18\", extractor.getUploaderUrl());\n-    }\n-\n-    @Test\n-    public void testUploaderAvatarUrl() throws Exception {\n-        assertEquals(\"https://static.media.ccc.de/media/events/gpn/gpn18/logo.png\", extractor.getUploaderAvatarUrl());\n-    }\n-\n-    @Test\n-    public void testVideoStreams() throws Exception {\n-        assertEquals(4, extractor.getVideoStreams().size());\n-    }\n-\n-    @Test\n-    public void testAudioStreams() throws Exception {\n-        assertEquals(2, extractor.getAudioStreams().size());\n-    }\n-\n-    @Test\n-    public void testGetTextualUploadDate() throws ParsingException {\n-        Assert.assertEquals(\"2018-05-11T02:00:00.000+02:00\", extractor.getTextualUploadDate());\n+public class MediaCCCStreamExtractorTest {\n+\n+    public static class Gpn18Tmux {\n+        private static MediaCCCStreamExtractor extractor;\n+\n+        @BeforeClass\n+        public static void setUpClass() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+\n+            extractor = (MediaCCCStreamExtractor) MediaCCC.getStreamExtractor(\"https://media.ccc.de/v/gpn18-105-tmux-warum-ein-schwarzes-fenster-am-bildschirm-reicht\");\n+            extractor.fetchPage();\n+        }\n+\n+        @Test\n+        public void testServiceId() throws Exception {\n+            assertEquals(2, extractor.getServiceId());\n+        }\n+\n+        @Test\n+        public void testName() throws Exception {\n+            assertEquals(\"tmux - Warum ein schwarzes Fenster am Bildschirm reicht\", extractor.getName());\n+        }\n+\n+        @Test\n+        public void testId() throws Exception {\n+            assertEquals(\"gpn18-105-tmux-warum-ein-schwarzes-fenster-am-bildschirm-reicht\", extractor.getId());\n+        }\n+\n+        @Test\n+        public void testUrl() throws Exception {\n+            assertIsSecureUrl(extractor.getUrl());\n+            assertEquals(\"https://api.media.ccc.de/public/events/gpn18-105-tmux-warum-ein-schwarzes-fenster-am-bildschirm-reicht\", extractor.getUrl());\n+        }\n+\n+        @Test\n+        public void testOriginalUrl() throws Exception {\n+            assertIsSecureUrl(extractor.getOriginalUrl());\n+            assertEquals(\"https://media.ccc.de/v/gpn18-105-tmux-warum-ein-schwarzes-fenster-am-bildschirm-reicht\", extractor.getOriginalUrl());\n+        }\n+\n+        @Test\n+        public void testThumbnail() throws Exception {\n+            assertIsSecureUrl(extractor.getThumbnailUrl());\n+            assertEquals(\"https://static.media.ccc.de/media/events/gpn/gpn18/105-hd.jpg\", extractor.getThumbnailUrl());\n+        }\n+\n+        @Test\n+        public void testUploaderName() throws Exception {\n+            assertEquals(\"gpn18\", extractor.getUploaderName());\n+        }\n+\n+        @Test\n+        public void testUploaderUrl() throws Exception {\n+            assertIsSecureUrl(extractor.getUploaderUrl());\n+            assertEquals(\"https://api.media.ccc.de/public/conferences/gpn18\", extractor.getUploaderUrl());\n+        }\n+\n+        @Test\n+        public void testUploaderAvatarUrl() throws Exception {\n+            assertIsSecureUrl(extractor.getUploaderAvatarUrl());\n+            assertEquals(\"https://static.media.ccc.de/media/events/gpn/gpn18/logo.png\", extractor.getUploaderAvatarUrl());\n+        }\n+\n+        @Test\n+        public void testVideoStreams() throws Exception {\n+            assertEquals(4, extractor.getVideoStreams().size());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6180226ec526861d6f8aacd4fe861a9dfcff41b6"}, "originalPosition": 156}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2839, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}