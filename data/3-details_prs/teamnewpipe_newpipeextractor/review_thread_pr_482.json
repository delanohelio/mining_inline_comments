{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwMzIyMTU3", "number": 482, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOVQyMDoyNjo0NFrOFM2X7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxNzoxNDoxMVrOFOxOWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5MDE4MDk0OnYy", "diffSide": "RIGHT", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeMixPlaylistExtractorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOVQyMDoyNjo0NFrOIQyG9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQxOTo1MzoyNFrOIQ6-qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ2OTEwOA==", "bodyText": "The base resource path should be put in some central class, like in DownloaderFactory. The root path should in that case be \"src/test/resources/org/schabi/newpipe/extractor/\"", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#discussion_r554469108", "createdAt": "2021-01-09T20:26:44Z", "author": {"login": "Stypox"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeMixPlaylistExtractorTest.java", "diffHunk": "@@ -41,6 +43,7 @@\n     private static final String VIDEO_ID = \"_AzeUSL9lZc\";\n     private static final String VIDEO_TITLE =\n             \"Most Beautiful And Emotional  Piano: Anime Music Shigatsu wa Kimi no Uso OST IMO\";\n+    private static final String RESOURCE_PATH = \"src/test/resources/org/schabi/newpipe/extractor/services/youtube/mix/\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2883e4a65180cdcddb00ae730f9ac8decd52a362"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYxNDQ0Mw==", "bodyText": "done", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#discussion_r554614443", "createdAt": "2021-01-10T19:53:24Z", "author": {"login": "XiangRongLin"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeMixPlaylistExtractorTest.java", "diffHunk": "@@ -41,6 +43,7 @@\n     private static final String VIDEO_ID = \"_AzeUSL9lZc\";\n     private static final String VIDEO_TITLE =\n             \"Most Beautiful And Emotional  Piano: Anime Music Shigatsu wa Kimi no Uso OST IMO\";\n+    private static final String RESOURCE_PATH = \"src/test/resources/org/schabi/newpipe/extractor/services/youtube/mix/\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ2OTEwOA=="}, "originalCommit": {"oid": "2883e4a65180cdcddb00ae730f9ac8decd52a362"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5MDE4Mjk5OnYy", "diffSide": "RIGHT", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeMixPlaylistExtractorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOVQyMDoyOTowOVrOIQyH1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQxOTo1MzowNFrOIQ6-eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ2OTMzNQ==", "bodyText": "Maybe you could also add a method to DownloaderFactory replacing these two lines, so that they don't have to be repeated every time. Something like DownloaderFactory.initNewPipeWithDownloader(RESOURCE_PATH + \"mix\"), and put the .getAbsolutePath() inside there, too.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#discussion_r554469335", "createdAt": "2021-01-09T20:29:09Z", "author": {"login": "Stypox"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeMixPlaylistExtractorTest.java", "diffHunk": "@@ -50,7 +53,8 @@\n \n         @BeforeClass\n         public static void setUp() throws Exception {\n-            NewPipe.init(DownloaderTestImpl.getInstance());\n+            final File file = new File(RESOURCE_PATH + \"mix\");\n+            NewPipe.init(new DownloaderFactory().getDownloader(file.getAbsolutePath()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2883e4a65180cdcddb00ae730f9ac8decd52a362"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYxNDM5Mw==", "bodyText": "I found that creating the file object itself is unnecessary. without that the line its already a single liner.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#discussion_r554614393", "createdAt": "2021-01-10T19:53:04Z", "author": {"login": "XiangRongLin"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeMixPlaylistExtractorTest.java", "diffHunk": "@@ -50,7 +53,8 @@\n \n         @BeforeClass\n         public static void setUp() throws Exception {\n-            NewPipe.init(DownloaderTestImpl.getInstance());\n+            final File file = new File(RESOURCE_PATH + \"mix\");\n+            NewPipe.init(new DownloaderFactory().getDownloader(file.getAbsolutePath()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ2OTMzNQ=="}, "originalCommit": {"oid": "2883e4a65180cdcddb00ae730f9ac8decd52a362"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5MDE4Mzg4OnYy", "diffSide": "RIGHT", "path": "extractor/src/test/java/org/schabi/newpipe/downloader/DownloaderFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOVQyMDozMDoyNlrOIQyIPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQxOTo1OToxN1rOIQ7BgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ2OTQzOQ==", "bodyText": "Can this even happen? Doesn't Java disallow this impossible cases, since there are only three possible instances of the enum?", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#discussion_r554469439", "createdAt": "2021-01-09T20:30:26Z", "author": {"login": "Stypox"}, "path": "extractor/src/test/java/org/schabi/newpipe/downloader/DownloaderFactory.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.schabi.newpipe.downloader;\n+\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+\n+import java.io.IOException;\n+\n+public class DownloaderFactory {\n+\n+    private final static DownloaderType DEFAULT_DOWNLOADER = DownloaderType.REAL;\n+\n+    public Downloader getDownloader(String path) throws IOException {\n+        DownloaderType type;\n+        try {\n+            type = DownloaderType.valueOf(System.getProperty(\"downloader\"));\n+        } catch (Exception e) {\n+            type = DEFAULT_DOWNLOADER;\n+        }\n+\n+        switch (type) {\n+            case REAL:\n+                return DownloaderTestImpl.getInstance();\n+            case MOCK:\n+                return new MockDownloader(path);\n+            case RECORDING:\n+                return new RecordingDownloader(path);\n+            default:\n+                throw new UnsupportedOperationException(\"Unknown downloader type: \" + type.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2883e4a65180cdcddb00ae730f9ac8decd52a362"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYxNTE2OA==", "bodyText": "It can not, but the compiler doesn't know it.\nFirst SO hit: https://stackoverflow.com/q/5013194", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#discussion_r554615168", "createdAt": "2021-01-10T19:59:17Z", "author": {"login": "XiangRongLin"}, "path": "extractor/src/test/java/org/schabi/newpipe/downloader/DownloaderFactory.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.schabi.newpipe.downloader;\n+\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+\n+import java.io.IOException;\n+\n+public class DownloaderFactory {\n+\n+    private final static DownloaderType DEFAULT_DOWNLOADER = DownloaderType.REAL;\n+\n+    public Downloader getDownloader(String path) throws IOException {\n+        DownloaderType type;\n+        try {\n+            type = DownloaderType.valueOf(System.getProperty(\"downloader\"));\n+        } catch (Exception e) {\n+            type = DEFAULT_DOWNLOADER;\n+        }\n+\n+        switch (type) {\n+            case REAL:\n+                return DownloaderTestImpl.getInstance();\n+            case MOCK:\n+                return new MockDownloader(path);\n+            case RECORDING:\n+                return new RecordingDownloader(path);\n+            default:\n+                throw new UnsupportedOperationException(\"Unknown downloader type: \" + type.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ2OTQzOQ=="}, "originalCommit": {"oid": "2883e4a65180cdcddb00ae730f9ac8decd52a362"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5MDE4NTkxOnYy", "diffSide": "RIGHT", "path": "extractor/build.gradle", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOVQyMDozMzoxM1rOIQyJLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMTo0MjoxMFrOIT4Vlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ2OTY3OQ==", "bodyText": "Are there limitations with nanojson?", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#discussion_r554469679", "createdAt": "2021-01-09T20:33:13Z", "author": {"login": "Stypox"}, "path": "extractor/build.gradle", "diffHunk": "@@ -9,4 +9,6 @@ dependencies {\n \n     testImplementation 'junit:junit:4.13'\n     testImplementation \"com.squareup.okhttp3:okhttp:3.12.11\"\n+    testImplementation 'com.google.code.gson:gson:2.8.6'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2883e4a65180cdcddb00ae730f9ac8decd52a362"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDUyMTAzMA==", "bodyText": "I don't quite remember what it was, but it did not work with nanojson", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#discussion_r554521030", "createdAt": "2021-01-10T06:47:21Z", "author": {"login": "XiangRongLin"}, "path": "extractor/build.gradle", "diffHunk": "@@ -9,4 +9,6 @@ dependencies {\n \n     testImplementation 'junit:junit:4.13'\n     testImplementation \"com.squareup.okhttp3:okhttp:3.12.11\"\n+    testImplementation 'com.google.code.gson:gson:2.8.6'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ2OTY3OQ=="}, "originalCommit": {"oid": "2883e4a65180cdcddb00ae730f9ac8decd52a362"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU1NzQ3NQ==", "bodyText": "Mmmh ok, this is anyway testImplementation so no need to bother about it ;-)", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#discussion_r557557475", "createdAt": "2021-01-14T17:13:29Z", "author": {"login": "Stypox"}, "path": "extractor/build.gradle", "diffHunk": "@@ -9,4 +9,6 @@ dependencies {\n \n     testImplementation 'junit:junit:4.13'\n     testImplementation \"com.squareup.okhttp3:okhttp:3.12.11\"\n+    testImplementation 'com.google.code.gson:gson:2.8.6'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ2OTY3OQ=="}, "originalCommit": {"oid": "2883e4a65180cdcddb00ae730f9ac8decd52a362"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY0MTY4OA==", "bodyText": "My initial idea behind saving it as json (human readable) was to be able to search through it. Because i remember that when i first made the mix extractor i saved the request with postman to do just that.\nIf that proves to not be needed, then ObjectInputStream ObjectOutputStream can be used.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#discussion_r557641688", "createdAt": "2021-01-14T19:27:35Z", "author": {"login": "XiangRongLin"}, "path": "extractor/build.gradle", "diffHunk": "@@ -9,4 +9,6 @@ dependencies {\n \n     testImplementation 'junit:junit:4.13'\n     testImplementation \"com.squareup.okhttp3:okhttp:3.12.11\"\n+    testImplementation 'com.google.code.gson:gson:2.8.6'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ2OTY3OQ=="}, "originalCommit": {"oid": "2883e4a65180cdcddb00ae730f9ac8decd52a362"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzcxNjg4Ng==", "bodyText": "No, we can stick to json, human readability is useful", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#discussion_r557716886", "createdAt": "2021-01-14T21:42:10Z", "author": {"login": "Stypox"}, "path": "extractor/build.gradle", "diffHunk": "@@ -9,4 +9,6 @@ dependencies {\n \n     testImplementation 'junit:junit:4.13'\n     testImplementation \"com.squareup.okhttp3:okhttp:3.12.11\"\n+    testImplementation 'com.google.code.gson:gson:2.8.6'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ2OTY3OQ=="}, "originalCommit": {"oid": "2883e4a65180cdcddb00ae730f9ac8decd52a362"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5MDE5MTI5OnYy", "diffSide": "RIGHT", "path": "extractor/src/test/java/org/schabi/newpipe/downloader/MockDownloader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOVQyMDozOTozMFrOIQyLpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQxOTo1MTo0NlrOIQ6-BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ3MDMxMQ==", "bodyText": "I am not sure, but maybe here you should catch errors, so that if we put some files of a different format in the same folder there are no issues (we may want to do that at some point, maybe)", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#discussion_r554470311", "createdAt": "2021-01-09T20:39:30Z", "author": {"login": "Stypox"}, "path": "extractor/src/test/java/org/schabi/newpipe/downloader/MockDownloader.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package org.schabi.newpipe.downloader;\n+\n+import com.google.gson.GsonBuilder;\n+\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Request;\n+import org.schabi.newpipe.extractor.downloader.Response;\n+\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.annotation.Nonnull;\n+\n+class MockDownloader extends Downloader {\n+\n+    private final String path;\n+    private final Map<Request, Response> mocks;\n+\n+    public MockDownloader(@Nonnull String path) throws IOException {\n+        this.path = path;\n+        this.mocks = new HashMap<>();\n+        File folder = new File(path);\n+        for (File file : folder.listFiles()) {\n+            final FileReader reader = new FileReader(file);\n+            final TestRequestResponse response = new GsonBuilder()\n+                    .create()\n+                    .fromJson(reader, TestRequestResponse.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2883e4a65180cdcddb00ae730f9ac8decd52a362"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYxNDI3Ng==", "bodyText": "I resolved this by prefixing the files and only writing/reading from those.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#discussion_r554614276", "createdAt": "2021-01-10T19:51:46Z", "author": {"login": "XiangRongLin"}, "path": "extractor/src/test/java/org/schabi/newpipe/downloader/MockDownloader.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package org.schabi.newpipe.downloader;\n+\n+import com.google.gson.GsonBuilder;\n+\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Request;\n+import org.schabi.newpipe.extractor.downloader.Response;\n+\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.annotation.Nonnull;\n+\n+class MockDownloader extends Downloader {\n+\n+    private final String path;\n+    private final Map<Request, Response> mocks;\n+\n+    public MockDownloader(@Nonnull String path) throws IOException {\n+        this.path = path;\n+        this.mocks = new HashMap<>();\n+        File folder = new File(path);\n+        for (File file : folder.listFiles()) {\n+            final FileReader reader = new FileReader(file);\n+            final TestRequestResponse response = new GsonBuilder()\n+                    .create()\n+                    .fromJson(reader, TestRequestResponse.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ3MDMxMQ=="}, "originalCommit": {"oid": "2883e4a65180cdcddb00ae730f9ac8decd52a362"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5MTQ0NDA1OnYy", "diffSide": "RIGHT", "path": "extractor/src/test/java/org/schabi/newpipe/downloader/RecordingDownloader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQyMDo0NToxMFrOIQ7V8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQyMDo0NToxMFrOIQ7V8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYyMDQwMw==", "bodyText": "Todo for me", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#discussion_r554620403", "createdAt": "2021-01-10T20:45:10Z", "author": {"login": "XiangRongLin"}, "path": "extractor/src/test/java/org/schabi/newpipe/downloader/RecordingDownloader.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package org.schabi.newpipe.downloader;\n+\n+import com.google.gson.GsonBuilder;\n+\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Request;\n+import org.schabi.newpipe.extractor.downloader.Response;\n+import org.schabi.newpipe.extractor.exceptions.ReCaptchaException;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import javax.annotation.Nonnull;\n+\n+class RecordingDownloader extends Downloader {\n+\n+    public final static String FILE_NAME_PREFIX = \"generated_mock_\";\n+\n+    private int index = 0;\n+    private final String path;\n+\n+    public RecordingDownloader(String stringPath) throws IOException {\n+        this.path = stringPath;\n+        Path path = Paths.get(stringPath);\n+        File folder = path.toFile();\n+        if (folder.exists()) {\n+            for (File file : folder.listFiles()) {\n+                if (file.getName().startsWith(RecordingDownloader.FILE_NAME_PREFIX)) {\n+                    file.delete();\n+                }\n+            }\n+        }\n+        Files.createDirectories(path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e82cb1efeaf34a87072b6424aad4671796697396"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMDMwODcyOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxNzoxNDoxMVrOITuokA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxOTowNDoyMFrOITyoRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU1NzkwNA==", "bodyText": "Maybe add a comment saying that this is only to be used for tests.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#discussion_r557557904", "createdAt": "2021-01-14T17:14:11Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java", "diffHunk": "@@ -353,6 +353,11 @@ public static String getKey() throws IOException, ExtractionException {\n         return key;\n     }\n \n+    static void resetClientVersionAndKey() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af50c68709c96a3c57e5041f43520c319577609"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU4NzkwOQ==", "bodyText": "I wouldn't add it, since android studio can already show you where a method is used. In this case it's only tests.\nAdditionally i did not make it public to only allow usage inside the extractor", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#discussion_r557587909", "createdAt": "2021-01-14T18:01:31Z", "author": {"login": "XiangRongLin"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java", "diffHunk": "@@ -353,6 +353,11 @@ public static String getKey() throws IOException, ExtractionException {\n         return key;\n     }\n \n+    static void resetClientVersionAndKey() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU1NzkwNA=="}, "originalCommit": {"oid": "4af50c68709c96a3c57e5041f43520c319577609"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzYxNzY3Mg==", "bodyText": "Ok, but I'd like to be able to tell just by looking at it that the method should not be used except for tests", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#discussion_r557617672", "createdAt": "2021-01-14T18:54:04Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java", "diffHunk": "@@ -353,6 +353,11 @@ public static String getKey() throws IOException, ExtractionException {\n         return key;\n     }\n \n+    static void resetClientVersionAndKey() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU1NzkwNA=="}, "originalCommit": {"oid": "4af50c68709c96a3c57e5041f43520c319577609"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzYyMzM2NQ==", "bodyText": "added", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/482#discussion_r557623365", "createdAt": "2021-01-14T19:04:20Z", "author": {"login": "XiangRongLin"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java", "diffHunk": "@@ -353,6 +353,11 @@ public static String getKey() throws IOException, ExtractionException {\n         return key;\n     }\n \n+    static void resetClientVersionAndKey() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU1NzkwNA=="}, "originalCommit": {"oid": "4af50c68709c96a3c57e5041f43520c319577609"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2791, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}