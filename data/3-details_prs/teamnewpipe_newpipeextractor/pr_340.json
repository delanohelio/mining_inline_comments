{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NTk4ODA1", "number": 340, "title": "Handle isDeleted for PeerTube comments", "bodyText": "I carefully read the contribution guidelines and agree to them.\n I have tested the API against NewPipe.\n I agree to create a pull request for NewPipe as soon as possible to make it compatible with the changed API.\n\nFix  #339", "createdAt": "2020-05-31T11:35:52Z", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/340", "merged": true, "mergeCommit": {"oid": "c0ceb5cb27d45b9177c3590d5088a3f30ac1e033"}, "closed": true, "closedAt": "2020-06-28T08:21:38Z", "author": {"login": "wb9688"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcrMpJnAFqTQzMDIyMjUzNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcvoBkFAFqTQzODc1NjM0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMjIyNTM0", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/340#pullrequestreview-430222534", "createdAt": "2020-06-14T14:08:38Z", "commit": {"oid": "1829a1a8a2021761b869607fd08ac717ab68267c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxNDowODozOFrOGjdUVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxNDowODozOFrOGjdUVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzMzY4Ng==", "bodyText": "I added the tests", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/340#discussion_r439833686", "createdAt": "2020-06-14T14:08:38Z", "author": {"login": "wb9688"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/peertube/PeertubeCommentsExtractorTest.java", "diffHunk": "@@ -18,74 +18,100 @@\n import static org.schabi.newpipe.extractor.ServiceList.PeerTube;\n \n public class PeertubeCommentsExtractorTest {\n+    public static class Default {\n+        private static PeertubeCommentsExtractor extractor;\n \n-    private static PeertubeCommentsExtractor extractor;\n+        @BeforeClass\n+        public static void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = (PeertubeCommentsExtractor) PeerTube\n+                    .getCommentsExtractor(\"https://framatube.org/videos/watch/04af977f-4201-4697-be67-a8d8cae6fa7a\");\n+        }\n \n-    @BeforeClass\n-    public static void setUp() throws Exception {\n-        NewPipe.init(DownloaderTestImpl.getInstance());\n-        extractor = (PeertubeCommentsExtractor) PeerTube\n-                .getCommentsExtractor(\"https://framatube.org/videos/watch/04af977f-4201-4697-be67-a8d8cae6fa7a\");\n-    }\n+        @Test\n+        public void testGetComments() throws IOException, ExtractionException {\n+            boolean result;\n+            InfoItemsPage<CommentsInfoItem> comments = extractor.getInitialPage();\n+            assertTrue(comments.getErrors().isEmpty());\n+            result = findInComments(comments, \"@root A great documentary on a great guy.\");\n \n-    @Test\n-    public void testGetComments() throws IOException, ExtractionException {\n-        boolean result = false;\n-        InfoItemsPage<CommentsInfoItem> comments = extractor.getInitialPage();\n-        result = findInComments(comments, \"@root A great documentary on a great guy.\");\n+            while (comments.hasNextPage() && !result) {\n+                comments = extractor.getPage(comments.getNextPageUrl());\n+                result = findInComments(comments, \"@root A great documentary on a great guy.\");\n+            }\n \n-        while (comments.hasNextPage() && !result) {\n-            comments = extractor.getPage(comments.getNextPageUrl());\n-            result = findInComments(comments, \"@root A great documentary on a great guy.\");\n+            assertTrue(result);\n         }\n \n-        assertTrue(result);\n-    }\n+        @Test\n+        public void testGetCommentsFromCommentsInfo() throws IOException, ExtractionException {\n+            boolean result;\n+            final CommentsInfo commentsInfo = CommentsInfo.getInfo(\"https://framatube.org/videos/watch/a8ea95b8-0396-49a6-8f30-e25e25fb2828\");\n+            assertTrue(commentsInfo.getErrors().isEmpty());\n+            assertEquals(\"Comments\", commentsInfo.getName());\n+            result = findInComments(commentsInfo.getRelatedItems(), \"Loved it!!!\");\n+\n+            String nextPage = commentsInfo.getNextPageUrl();\n+            while (!Utils.isBlank(nextPage) && !result) {\n+                final InfoItemsPage<CommentsInfoItem> moreItems = CommentsInfo.getMoreItems(PeerTube, commentsInfo, nextPage);\n+                result = findInComments(moreItems.getItems(), \"Loved it!!!\");\n+                nextPage = moreItems.getNextPageUrl();\n+            }\n \n-    @Test\n-    public void testGetCommentsFromCommentsInfo() throws IOException, ExtractionException {\n-        boolean result = false;\n-        CommentsInfo commentsInfo = CommentsInfo.getInfo(\"https://framatube.org/videos/watch/a8ea95b8-0396-49a6-8f30-e25e25fb2828\");\n-        assertEquals(\"Comments\", commentsInfo.getName());\n-        result = findInComments(commentsInfo.getRelatedItems(), \"Loved it!!!\");\n-\n-        String nextPage = commentsInfo.getNextPageUrl();\n-        while (!Utils.isBlank(nextPage) && !result) {\n-            InfoItemsPage<CommentsInfoItem> moreItems = CommentsInfo.getMoreItems(PeerTube, commentsInfo, nextPage);\n-            result = findInComments(moreItems.getItems(), \"Loved it!!!\");\n-            nextPage = moreItems.getNextPageUrl();\n+            assertTrue(result);\n         }\n \n-        assertTrue(result);\n-    }\n+        @Test\n+        public void testGetCommentsAllData() throws IOException, ExtractionException {\n+            final InfoItemsPage<CommentsInfoItem> comments = extractor.getInitialPage();\n+            for (final CommentsInfoItem c : comments.getItems()) {\n+                assertFalse(Utils.isBlank(c.getUploaderUrl()));\n+                assertFalse(Utils.isBlank(c.getUploaderName()));\n+                assertFalse(Utils.isBlank(c.getUploaderAvatarUrl()));\n+                assertFalse(Utils.isBlank(c.getCommentId()));\n+                assertFalse(Utils.isBlank(c.getCommentText()));\n+                assertFalse(Utils.isBlank(c.getName()));\n+                assertFalse(Utils.isBlank(c.getTextualUploadDate()));\n+                assertFalse(Utils.isBlank(c.getThumbnailUrl()));\n+                assertFalse(Utils.isBlank(c.getUrl()));\n+                assertFalse(c.getLikeCount() != -1);\n+            }\n+        }\n \n-    @Test\n-    public void testGetCommentsAllData() throws IOException, ExtractionException {\n-        InfoItemsPage<CommentsInfoItem> comments = extractor.getInitialPage();\n-        for (CommentsInfoItem c : comments.getItems()) {\n-            assertFalse(Utils.isBlank(c.getUploaderUrl()));\n-            assertFalse(Utils.isBlank(c.getUploaderName()));\n-            assertFalse(Utils.isBlank(c.getUploaderAvatarUrl()));\n-            assertFalse(Utils.isBlank(c.getCommentId()));\n-            assertFalse(Utils.isBlank(c.getCommentText()));\n-            assertFalse(Utils.isBlank(c.getName()));\n-            assertFalse(Utils.isBlank(c.getTextualUploadDate()));\n-            assertFalse(Utils.isBlank(c.getThumbnailUrl()));\n-            assertFalse(Utils.isBlank(c.getUrl()));\n-            assertFalse(c.getLikeCount() != -1);\n+        private boolean findInComments(final InfoItemsPage<CommentsInfoItem> comments, final String comment) {\n+            return findInComments(comments.getItems(), comment);\n         }\n-    }\n \n-    private boolean findInComments(InfoItemsPage<CommentsInfoItem> comments, String comment) {\n-        return findInComments(comments.getItems(), comment);\n+        private boolean findInComments(final List<CommentsInfoItem> comments, final String comment) {\n+            for (final CommentsInfoItem c : comments) {\n+                if (c.getCommentText().contains(comment)) {\n+                    return true;\n+                }\n+            }\n+            return false;\n+        }\n     }\n \n-    private boolean findInComments(List<CommentsInfoItem> comments, String comment) {\n-        for (CommentsInfoItem c : comments) {\n-            if (c.getCommentText().contains(comment)) {\n-                return true;\n-            }\n+    public static class DeletedComments {\n+        private static PeertubeCommentsExtractor extractor;\n+\n+        @BeforeClass\n+        public static void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = (PeertubeCommentsExtractor) PeerTube\n+                    .getCommentsExtractor(\"https://framatube.org/videos/watch/217eefeb-883d-45be-b7fc-a788ad8507d3\");\n+        }\n+\n+        @Test\n+        public void testGetComments() throws IOException, ExtractionException {\n+            final InfoItemsPage<CommentsInfoItem> comments = extractor.getInitialPage();\n+            assertTrue(comments.getErrors().isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1829a1a8a2021761b869607fd08ac717ab68267c"}, "originalPosition": 144}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMjI2MDU0", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/340#pullrequestreview-430226054", "createdAt": "2020-06-14T14:52:11Z", "commit": {"oid": "1829a1a8a2021761b869607fd08ac717ab68267c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxNDo1MjoxMVrOGjdj8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxNToxNzoxOFrOGjdspA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzNzY4Mg==", "bodyText": "do \u2026 while exist for something", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/340#discussion_r439837682", "createdAt": "2020-06-14T14:52:11Z", "author": {"login": "B0pol"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/peertube/PeertubeCommentsExtractorTest.java", "diffHunk": "@@ -18,74 +18,100 @@\n import static org.schabi.newpipe.extractor.ServiceList.PeerTube;\n \n public class PeertubeCommentsExtractorTest {\n+    public static class Default {\n+        private static PeertubeCommentsExtractor extractor;\n \n-    private static PeertubeCommentsExtractor extractor;\n+        @BeforeClass\n+        public static void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = (PeertubeCommentsExtractor) PeerTube\n+                    .getCommentsExtractor(\"https://framatube.org/videos/watch/04af977f-4201-4697-be67-a8d8cae6fa7a\");\n+        }\n \n-    @BeforeClass\n-    public static void setUp() throws Exception {\n-        NewPipe.init(DownloaderTestImpl.getInstance());\n-        extractor = (PeertubeCommentsExtractor) PeerTube\n-                .getCommentsExtractor(\"https://framatube.org/videos/watch/04af977f-4201-4697-be67-a8d8cae6fa7a\");\n-    }\n+        @Test\n+        public void testGetComments() throws IOException, ExtractionException {\n+            boolean result;\n+            InfoItemsPage<CommentsInfoItem> comments = extractor.getInitialPage();\n+            assertTrue(comments.getErrors().isEmpty());\n+            result = findInComments(comments, \"@root A great documentary on a great guy.\");\n \n-    @Test\n-    public void testGetComments() throws IOException, ExtractionException {\n-        boolean result = false;\n-        InfoItemsPage<CommentsInfoItem> comments = extractor.getInitialPage();\n-        result = findInComments(comments, \"@root A great documentary on a great guy.\");\n+            while (comments.hasNextPage() && !result) {\n+                comments = extractor.getPage(comments.getNextPageUrl());\n+                result = findInComments(comments, \"@root A great documentary on a great guy.\");\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1829a1a8a2021761b869607fd08ac717ab68267c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzNzc4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            assertFalse(c.getLikeCount() != -1);\n          \n          \n            \n                            assertTrue(c.getLikeCount() == -1);", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/340#discussion_r439837781", "createdAt": "2020-06-14T14:53:15Z", "author": {"login": "B0pol"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/peertube/PeertubeCommentsExtractorTest.java", "diffHunk": "@@ -18,74 +18,100 @@\n import static org.schabi.newpipe.extractor.ServiceList.PeerTube;\n \n public class PeertubeCommentsExtractorTest {\n+    public static class Default {\n+        private static PeertubeCommentsExtractor extractor;\n \n-    private static PeertubeCommentsExtractor extractor;\n+        @BeforeClass\n+        public static void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = (PeertubeCommentsExtractor) PeerTube\n+                    .getCommentsExtractor(\"https://framatube.org/videos/watch/04af977f-4201-4697-be67-a8d8cae6fa7a\");\n+        }\n \n-    @BeforeClass\n-    public static void setUp() throws Exception {\n-        NewPipe.init(DownloaderTestImpl.getInstance());\n-        extractor = (PeertubeCommentsExtractor) PeerTube\n-                .getCommentsExtractor(\"https://framatube.org/videos/watch/04af977f-4201-4697-be67-a8d8cae6fa7a\");\n-    }\n+        @Test\n+        public void testGetComments() throws IOException, ExtractionException {\n+            boolean result;\n+            InfoItemsPage<CommentsInfoItem> comments = extractor.getInitialPage();\n+            assertTrue(comments.getErrors().isEmpty());\n+            result = findInComments(comments, \"@root A great documentary on a great guy.\");\n \n-    @Test\n-    public void testGetComments() throws IOException, ExtractionException {\n-        boolean result = false;\n-        InfoItemsPage<CommentsInfoItem> comments = extractor.getInitialPage();\n-        result = findInComments(comments, \"@root A great documentary on a great guy.\");\n+            while (comments.hasNextPage() && !result) {\n+                comments = extractor.getPage(comments.getNextPageUrl());\n+                result = findInComments(comments, \"@root A great documentary on a great guy.\");\n+            }\n \n-        while (comments.hasNextPage() && !result) {\n-            comments = extractor.getPage(comments.getNextPageUrl());\n-            result = findInComments(comments, \"@root A great documentary on a great guy.\");\n+            assertTrue(result);\n         }\n \n-        assertTrue(result);\n-    }\n+        @Test\n+        public void testGetCommentsFromCommentsInfo() throws IOException, ExtractionException {\n+            boolean result;\n+            final CommentsInfo commentsInfo = CommentsInfo.getInfo(\"https://framatube.org/videos/watch/a8ea95b8-0396-49a6-8f30-e25e25fb2828\");\n+            assertTrue(commentsInfo.getErrors().isEmpty());\n+            assertEquals(\"Comments\", commentsInfo.getName());\n+            result = findInComments(commentsInfo.getRelatedItems(), \"Loved it!!!\");\n+\n+            String nextPage = commentsInfo.getNextPageUrl();\n+            while (!Utils.isBlank(nextPage) && !result) {\n+                final InfoItemsPage<CommentsInfoItem> moreItems = CommentsInfo.getMoreItems(PeerTube, commentsInfo, nextPage);\n+                result = findInComments(moreItems.getItems(), \"Loved it!!!\");\n+                nextPage = moreItems.getNextPageUrl();\n+            }\n \n-    @Test\n-    public void testGetCommentsFromCommentsInfo() throws IOException, ExtractionException {\n-        boolean result = false;\n-        CommentsInfo commentsInfo = CommentsInfo.getInfo(\"https://framatube.org/videos/watch/a8ea95b8-0396-49a6-8f30-e25e25fb2828\");\n-        assertEquals(\"Comments\", commentsInfo.getName());\n-        result = findInComments(commentsInfo.getRelatedItems(), \"Loved it!!!\");\n-\n-        String nextPage = commentsInfo.getNextPageUrl();\n-        while (!Utils.isBlank(nextPage) && !result) {\n-            InfoItemsPage<CommentsInfoItem> moreItems = CommentsInfo.getMoreItems(PeerTube, commentsInfo, nextPage);\n-            result = findInComments(moreItems.getItems(), \"Loved it!!!\");\n-            nextPage = moreItems.getNextPageUrl();\n+            assertTrue(result);\n         }\n \n-        assertTrue(result);\n-    }\n+        @Test\n+        public void testGetCommentsAllData() throws IOException, ExtractionException {\n+            final InfoItemsPage<CommentsInfoItem> comments = extractor.getInitialPage();\n+            for (final CommentsInfoItem c : comments.getItems()) {\n+                assertFalse(Utils.isBlank(c.getUploaderUrl()));\n+                assertFalse(Utils.isBlank(c.getUploaderName()));\n+                assertFalse(Utils.isBlank(c.getUploaderAvatarUrl()));\n+                assertFalse(Utils.isBlank(c.getCommentId()));\n+                assertFalse(Utils.isBlank(c.getCommentText()));\n+                assertFalse(Utils.isBlank(c.getName()));\n+                assertFalse(Utils.isBlank(c.getTextualUploadDate()));\n+                assertFalse(Utils.isBlank(c.getThumbnailUrl()));\n+                assertFalse(Utils.isBlank(c.getUrl()));\n+                assertFalse(c.getLikeCount() != -1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1829a1a8a2021761b869607fd08ac717ab68267c"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzODE5Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        contents = (JsonArray) JsonUtils.getValue(json, \"data\");\n          \n          \n            \n                        contents = json.getArray(\"data\");", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/340#discussion_r439838196", "createdAt": "2020-06-14T14:58:16Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeCommentsExtractor.java", "diffHunk": "@@ -38,22 +37,23 @@ public PeertubeCommentsExtractor(StreamingService service, ListLinkHandler uiHan\n         return initPage;\n     }\n \n-    private void collectStreamsFrom(CommentsInfoItemsCollector collector, JsonObject json, String pageUrl) throws ParsingException {\n-        JsonArray contents;\n+    private void collectCommentsFrom(final CommentsInfoItemsCollector collector, final JsonObject json) throws ParsingException {\n+        final JsonArray contents;\n         try {\n             contents = (JsonArray) JsonUtils.getValue(json, \"data\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1829a1a8a2021761b869607fd08ac717ab68267c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzODI1OQ==", "bodyText": "and remove the try catch because getValue throws ParsingException, getArray doesn't throw anything.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/340#discussion_r439838259", "createdAt": "2020-06-14T14:59:10Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeCommentsExtractor.java", "diffHunk": "@@ -38,22 +37,23 @@ public PeertubeCommentsExtractor(StreamingService service, ListLinkHandler uiHan\n         return initPage;\n     }\n \n-    private void collectStreamsFrom(CommentsInfoItemsCollector collector, JsonObject json, String pageUrl) throws ParsingException {\n-        JsonArray contents;\n+    private void collectCommentsFrom(final CommentsInfoItemsCollector collector, final JsonObject json) throws ParsingException {\n+        final JsonArray contents;\n         try {\n             contents = (JsonArray) JsonUtils.getValue(json, \"data\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzODE5Ng=="}, "originalCommit": {"oid": "1829a1a8a2021761b869607fd08ac717ab68267c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzOTkwOA==", "bodyText": "instead of checking whether there is no error (which will be broken for an unrelated error), you should check whether comment with id 9214 is not in the list of comment ids, via PeertubeCommentsInfoItemExtractor#getCommentId()", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/340#discussion_r439839908", "createdAt": "2020-06-14T15:17:18Z", "author": {"login": "B0pol"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/peertube/PeertubeCommentsExtractorTest.java", "diffHunk": "@@ -18,74 +18,100 @@\n import static org.schabi.newpipe.extractor.ServiceList.PeerTube;\n \n public class PeertubeCommentsExtractorTest {\n+    public static class Default {\n+        private static PeertubeCommentsExtractor extractor;\n \n-    private static PeertubeCommentsExtractor extractor;\n+        @BeforeClass\n+        public static void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = (PeertubeCommentsExtractor) PeerTube\n+                    .getCommentsExtractor(\"https://framatube.org/videos/watch/04af977f-4201-4697-be67-a8d8cae6fa7a\");\n+        }\n \n-    @BeforeClass\n-    public static void setUp() throws Exception {\n-        NewPipe.init(DownloaderTestImpl.getInstance());\n-        extractor = (PeertubeCommentsExtractor) PeerTube\n-                .getCommentsExtractor(\"https://framatube.org/videos/watch/04af977f-4201-4697-be67-a8d8cae6fa7a\");\n-    }\n+        @Test\n+        public void testGetComments() throws IOException, ExtractionException {\n+            boolean result;\n+            InfoItemsPage<CommentsInfoItem> comments = extractor.getInitialPage();\n+            assertTrue(comments.getErrors().isEmpty());\n+            result = findInComments(comments, \"@root A great documentary on a great guy.\");\n \n-    @Test\n-    public void testGetComments() throws IOException, ExtractionException {\n-        boolean result = false;\n-        InfoItemsPage<CommentsInfoItem> comments = extractor.getInitialPage();\n-        result = findInComments(comments, \"@root A great documentary on a great guy.\");\n+            while (comments.hasNextPage() && !result) {\n+                comments = extractor.getPage(comments.getNextPageUrl());\n+                result = findInComments(comments, \"@root A great documentary on a great guy.\");\n+            }\n \n-        while (comments.hasNextPage() && !result) {\n-            comments = extractor.getPage(comments.getNextPageUrl());\n-            result = findInComments(comments, \"@root A great documentary on a great guy.\");\n+            assertTrue(result);\n         }\n \n-        assertTrue(result);\n-    }\n+        @Test\n+        public void testGetCommentsFromCommentsInfo() throws IOException, ExtractionException {\n+            boolean result;\n+            final CommentsInfo commentsInfo = CommentsInfo.getInfo(\"https://framatube.org/videos/watch/a8ea95b8-0396-49a6-8f30-e25e25fb2828\");\n+            assertTrue(commentsInfo.getErrors().isEmpty());\n+            assertEquals(\"Comments\", commentsInfo.getName());\n+            result = findInComments(commentsInfo.getRelatedItems(), \"Loved it!!!\");\n+\n+            String nextPage = commentsInfo.getNextPageUrl();\n+            while (!Utils.isBlank(nextPage) && !result) {\n+                final InfoItemsPage<CommentsInfoItem> moreItems = CommentsInfo.getMoreItems(PeerTube, commentsInfo, nextPage);\n+                result = findInComments(moreItems.getItems(), \"Loved it!!!\");\n+                nextPage = moreItems.getNextPageUrl();\n+            }\n \n-    @Test\n-    public void testGetCommentsFromCommentsInfo() throws IOException, ExtractionException {\n-        boolean result = false;\n-        CommentsInfo commentsInfo = CommentsInfo.getInfo(\"https://framatube.org/videos/watch/a8ea95b8-0396-49a6-8f30-e25e25fb2828\");\n-        assertEquals(\"Comments\", commentsInfo.getName());\n-        result = findInComments(commentsInfo.getRelatedItems(), \"Loved it!!!\");\n-\n-        String nextPage = commentsInfo.getNextPageUrl();\n-        while (!Utils.isBlank(nextPage) && !result) {\n-            InfoItemsPage<CommentsInfoItem> moreItems = CommentsInfo.getMoreItems(PeerTube, commentsInfo, nextPage);\n-            result = findInComments(moreItems.getItems(), \"Loved it!!!\");\n-            nextPage = moreItems.getNextPageUrl();\n+            assertTrue(result);\n         }\n \n-        assertTrue(result);\n-    }\n+        @Test\n+        public void testGetCommentsAllData() throws IOException, ExtractionException {\n+            final InfoItemsPage<CommentsInfoItem> comments = extractor.getInitialPage();\n+            for (final CommentsInfoItem c : comments.getItems()) {\n+                assertFalse(Utils.isBlank(c.getUploaderUrl()));\n+                assertFalse(Utils.isBlank(c.getUploaderName()));\n+                assertFalse(Utils.isBlank(c.getUploaderAvatarUrl()));\n+                assertFalse(Utils.isBlank(c.getCommentId()));\n+                assertFalse(Utils.isBlank(c.getCommentText()));\n+                assertFalse(Utils.isBlank(c.getName()));\n+                assertFalse(Utils.isBlank(c.getTextualUploadDate()));\n+                assertFalse(Utils.isBlank(c.getThumbnailUrl()));\n+                assertFalse(Utils.isBlank(c.getUrl()));\n+                assertFalse(c.getLikeCount() != -1);\n+            }\n+        }\n \n-    @Test\n-    public void testGetCommentsAllData() throws IOException, ExtractionException {\n-        InfoItemsPage<CommentsInfoItem> comments = extractor.getInitialPage();\n-        for (CommentsInfoItem c : comments.getItems()) {\n-            assertFalse(Utils.isBlank(c.getUploaderUrl()));\n-            assertFalse(Utils.isBlank(c.getUploaderName()));\n-            assertFalse(Utils.isBlank(c.getUploaderAvatarUrl()));\n-            assertFalse(Utils.isBlank(c.getCommentId()));\n-            assertFalse(Utils.isBlank(c.getCommentText()));\n-            assertFalse(Utils.isBlank(c.getName()));\n-            assertFalse(Utils.isBlank(c.getTextualUploadDate()));\n-            assertFalse(Utils.isBlank(c.getThumbnailUrl()));\n-            assertFalse(Utils.isBlank(c.getUrl()));\n-            assertFalse(c.getLikeCount() != -1);\n+        private boolean findInComments(final InfoItemsPage<CommentsInfoItem> comments, final String comment) {\n+            return findInComments(comments.getItems(), comment);\n         }\n-    }\n \n-    private boolean findInComments(InfoItemsPage<CommentsInfoItem> comments, String comment) {\n-        return findInComments(comments.getItems(), comment);\n+        private boolean findInComments(final List<CommentsInfoItem> comments, final String comment) {\n+            for (final CommentsInfoItem c : comments) {\n+                if (c.getCommentText().contains(comment)) {\n+                    return true;\n+                }\n+            }\n+            return false;\n+        }\n     }\n \n-    private boolean findInComments(List<CommentsInfoItem> comments, String comment) {\n-        for (CommentsInfoItem c : comments) {\n-            if (c.getCommentText().contains(comment)) {\n-                return true;\n-            }\n+    public static class DeletedComments {\n+        private static PeertubeCommentsExtractor extractor;\n+\n+        @BeforeClass\n+        public static void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = (PeertubeCommentsExtractor) PeerTube\n+                    .getCommentsExtractor(\"https://framatube.org/videos/watch/217eefeb-883d-45be-b7fc-a788ad8507d3\");\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1829a1a8a2021761b869607fd08ac717ab68267c"}, "originalPosition": 140}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3239aa84f237d2af07a4d586bd282b335c188716", "author": {"user": {"login": "wb9688", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/3239aa84f237d2af07a4d586bd282b335c188716", "committedDate": "2020-06-14T17:27:20Z", "message": "Handle isDeleted for PeerTube comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NzU2MzQx", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/340#pullrequestreview-438756341", "createdAt": "2020-06-28T08:18:26Z", "commit": {"oid": "3239aa84f237d2af07a4d586bd282b335c188716"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4003, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}