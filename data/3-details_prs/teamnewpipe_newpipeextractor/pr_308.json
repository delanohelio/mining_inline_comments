{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNTY5NjY2", "number": 308, "title": "[PeerTube] channels support", "bodyText": "I carefully read the contribution guidelines and agree to them.\n I have tested the API against NewPipe.\n I agree to create a pull request for NewPipe as soon as possible to make it compatible with the changed API.\n\nadd support for peertube channels", "createdAt": "2020-04-09T18:08:33Z", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/308", "merged": true, "mergeCommit": {"oid": "1b522304c12f966b8adde5664bfb14a6e27545be"}, "closed": true, "closedAt": "2020-04-10T17:07:52Z", "author": {"login": "Royosef"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcWAE8cgH2gAyNDAxNTY5NjY2OmI2ZTZmNDAzYTgwZmU0YWU2OTFmODFiZmU1M2NmYzE3MjNkZTczNDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcWl1csgFqTM5MTc2NzAwOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b6e6f403a80fe4ae691f81bfe53cfc1723de7345", "author": {"user": {"login": "Royosef", "name": "Roy Yosef"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/b6e6f403a80fe4ae691f81bfe53cfc1723de7345", "committedDate": "2020-04-09T17:37:49Z", "message": "add support for PeerTube channels extraction"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMzU0MzI2", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/308#pullrequestreview-391354326", "createdAt": "2020-04-10T09:27:44Z", "commit": {"oid": "b6e6f403a80fe4ae691f81bfe53cfc1723de7345"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOToyNzo0NFrOGD117Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOTo0MzozNVrOGD2LBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4MTA2OQ==", "bodyText": "Please change it to:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return linkHandler.getUrl().matches(\"^.*\\\\/accounts\\\\/[^\\\\/]*$\") ?\n          \n          \n            \n                            new PeertubeUserExtractor(this, linkHandler) :\n          \n          \n            \n                            new PeertubeChannelExtractor(this, linkHandler);\n          \n          \n            \n                    if (linkHandler.getUrl().contains(\"/video-channels/\")) {\n          \n          \n            \n                        return new PeertubeChannelExtractor(this, linkHandler);\n          \n          \n            \n                    } else {\n          \n          \n            \n                        return new PeertubeUserExtractor(this, linkHandler);\n          \n          \n            \n                    }", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/308#discussion_r406681069", "createdAt": "2020-04-10T09:27:44Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/PeertubeService.java", "diffHunk": "@@ -77,7 +77,10 @@ public SubscriptionExtractor getSubscriptionExtractor() {\n     @Override\n     public ChannelExtractor getChannelExtractor(ListLinkHandler linkHandler)\n             throws ExtractionException {\n-        return new PeertubeChannelExtractor(this, linkHandler);\n+\n+        return linkHandler.getUrl().matches(\"^.*\\\\/accounts\\\\/[^\\\\/]*$\") ?\n+                new PeertubeUserExtractor(this, linkHandler) :\n+                new PeertubeChannelExtractor(this, linkHandler);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6e6f403a80fe4ae691f81bfe53cfc1723de7345"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4NTAyNg==", "bodyText": "Please change it to something like the following to remain backwards compatible:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return baseUrl + API_ENDPOINT + id;\n          \n          \n            \n                    if (id.matches(ID_PATTERN)) {\n          \n          \n            \n                        return baseUrl + API_ENDPOINT + id;\n          \n          \n            \n                    } else {\n          \n          \n            \n                        // This is needed for compatibility with older versions were we didn't support video channels yet\n          \n          \n            \n                        return baseUrl + API_ENDPOINT + \"accounts/\" + id;\n          \n          \n            \n                    }", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/308#discussion_r406685026", "createdAt": "2020-04-10T09:39:04Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeChannelLinkHandlerFactory.java", "diffHunk": "@@ -31,11 +31,11 @@ public String getUrl(String id, List<String> contentFilters, String searchFilter\n     @Override\n     public String getUrl(String id, List<String> contentFilter, String sortFilter, String baseUrl)\n             throws ParsingException {\n-        return baseUrl + ACCOUNTS_ENDPOINT + id;\n+        return baseUrl + API_ENDPOINT + id;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6e6f403a80fe4ae691f81bfe53cfc1723de7345"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4NTg5OQ==", "bodyText": "Please also add a test for getting an URL from an ID. It should test all of: whatever, video-channels/whatever, and accounts/whatever. Obviously don't use whatever, but actually existing things.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/308#discussion_r406685899", "createdAt": "2020-04-10T09:41:56Z", "author": {"login": "wb9688"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/peertube/PeertubeChannelLinkHandlerFactoryTest.java", "diffHunk": "@@ -30,7 +30,7 @@ public void acceptUrlTest() throws ParsingException {\n \n     @Test\n     public void getIdFromUrl() throws ParsingException {\n-        assertEquals(\"kranti@videos.squat.net\", linkHandler.fromUrl(\"https://peertube.mastodon.host/accounts/kranti@videos.squat.net\").getId());\n-        assertEquals(\"kranti@videos.squat.net\", linkHandler.fromUrl(\"https://peertube.mastodon.host/accounts/kranti@videos.squat.net/videos\").getId());\n+        assertEquals(\"accounts/kranti@videos.squat.net\", linkHandler.fromUrl(\"https://peertube.mastodon.host/accounts/kranti@videos.squat.net\").getId());\n+        assertEquals(\"accounts/kranti@videos.squat.net\", linkHandler.fromUrl(\"https://peertube.mastodon.host/accounts/kranti@videos.squat.net/videos\").getId());\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6e6f403a80fe4ae691f81bfe53cfc1723de7345"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4NjAzNA==", "bodyText": "Add tests for video channels as well.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/308#discussion_r406686034", "createdAt": "2020-04-10T09:42:23Z", "author": {"login": "wb9688"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/peertube/PeertubeChannelLinkHandlerFactoryTest.java", "diffHunk": "@@ -30,7 +30,7 @@ public void acceptUrlTest() throws ParsingException {\n \n     @Test\n     public void getIdFromUrl() throws ParsingException {\n-        assertEquals(\"kranti@videos.squat.net\", linkHandler.fromUrl(\"https://peertube.mastodon.host/accounts/kranti@videos.squat.net\").getId());\n-        assertEquals(\"kranti@videos.squat.net\", linkHandler.fromUrl(\"https://peertube.mastodon.host/accounts/kranti@videos.squat.net/videos\").getId());\n+        assertEquals(\"accounts/kranti@videos.squat.net\", linkHandler.fromUrl(\"https://peertube.mastodon.host/accounts/kranti@videos.squat.net\").getId());\n+        assertEquals(\"accounts/kranti@videos.squat.net\", linkHandler.fromUrl(\"https://peertube.mastodon.host/accounts/kranti@videos.squat.net/videos\").getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6e6f403a80fe4ae691f81bfe53cfc1723de7345"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4NjI0NQ==", "bodyText": "Rename this to PeertubeAccountExtractorTest", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/308#discussion_r406686245", "createdAt": "2020-04-10T09:42:58Z", "author": {"login": "wb9688"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/peertube/PeertubeUserExtractorTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+package org.schabi.newpipe.extractor.services.peertube;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.channel.ChannelExtractor;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.services.BaseChannelExtractorTest;\n+import org.schabi.newpipe.extractor.services.peertube.extractors.PeertubeUserExtractor;\n+\n+import static org.junit.Assert.*;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ServiceList.PeerTube;\n+import static org.schabi.newpipe.extractor.services.DefaultTests.*;\n+\n+/**\n+ * Test for {@link PeertubeUserExtractor}\n+ */\n+public class PeertubeUserExtractorTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6e6f403a80fe4ae691f81bfe53cfc1723de7345"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4NjQ3MA==", "bodyText": "Rename this to PeertubeAccountExtractor.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/308#discussion_r406686470", "createdAt": "2020-04-10T09:43:35Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeUserExtractor.java", "diffHunk": "@@ -0,0 +1,187 @@\n+package org.schabi.newpipe.extractor.services.peertube.extractors;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import com.grack.nanojson.JsonParser;\n+import com.grack.nanojson.JsonParserException;\n+import org.jsoup.helper.StringUtil;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.channel.ChannelExtractor;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Response;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.services.peertube.PeertubeParsingHelper;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+import org.schabi.newpipe.extractor.utils.JsonUtils;\n+import org.schabi.newpipe.extractor.utils.Parser;\n+import org.schabi.newpipe.extractor.utils.Parser.RegexException;\n+\n+import java.io.IOException;\n+\n+public class PeertubeUserExtractor extends ChannelExtractor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6e6f403a80fe4ae691f81bfe53cfc1723de7345"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c9f1260eb969fd98d147d5f9684370b855e0764", "author": {"user": {"login": "Royosef", "name": "Roy Yosef"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/2c9f1260eb969fd98d147d5f9684370b855e0764", "committedDate": "2020-04-10T13:40:53Z", "message": "Fix wb9688 review comments\n\n* Rename PeertubeUserExtractor to PeertubeAccountExtractor\n* Add test for video-channels in PeertubeChannelLinkHandlerFactoryTest\n* Compatibility support for older versions (use \"accounts/\" as default)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4afe657f6ff97860460dec391adabc0bc62afbb6", "author": {"user": {"login": "Royosef", "name": "Roy Yosef"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/4afe657f6ff97860460dec391adabc0bc62afbb6", "committedDate": "2020-04-10T16:05:38Z", "message": "Add tests for getUrlFromId and test for video-channels in acceptUrlTest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNTI3Mzcw", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/308#pullrequestreview-391527370", "createdAt": "2020-04-10T16:15:46Z", "commit": {"oid": "4afe657f6ff97860460dec391adabc0bc62afbb6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNzY3MDA4", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/308#pullrequestreview-391767008", "createdAt": "2020-04-11T13:37:16Z", "commit": {"oid": "4afe657f6ff97860460dec391adabc0bc62afbb6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMzozNzoxNlrOGENRsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMzozNzoxNlrOGENRsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA2NTAwOQ==", "bodyText": "I don't understand why this would be needed. Could you provide a url where this piece of code would run?", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/308#discussion_r407065009", "createdAt": "2020-04-11T13:37:16Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeChannelLinkHandlerFactory.java", "diffHunk": "@@ -31,11 +31,17 @@ public String getUrl(String id, List<String> contentFilters, String searchFilter\n     @Override\n     public String getUrl(String id, List<String> contentFilter, String sortFilter, String baseUrl)\n             throws ParsingException {\n-        return baseUrl + ACCOUNTS_ENDPOINT + id;\n+\n+        if (id.matches(ID_PATTERN)) {\n+            return baseUrl + API_ENDPOINT + id;\n+        } else {\n+            // This is needed for compatibility with older versions were we didn't support video channels yet\n+            return baseUrl + API_ENDPOINT + \"accounts/\" + id;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4afe657f6ff97860460dec391adabc0bc62afbb6"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3993, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}