{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0NDE3NDgx", "number": 494, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzozMTowMlrOFIVTgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQxMDoxOToxOFrOFJPJug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjgxOTg3OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCRecentKioskExtractor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzozMTowMlrOIKMMpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQyMTowOToyMVrOILe7vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1NjUxNw==", "bodyText": "event.getArray(\"persons\").getString(0)", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/494#discussion_r547556517", "createdAt": "2020-12-22T23:31:02Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCRecentKioskExtractor.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.schabi.newpipe.extractor.services.media_ccc.extractors;\n+\n+import com.grack.nanojson.JsonObject;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamType;\n+\n+import javax.annotation.Nullable;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+\n+public class MediaCCCRecentKioskExtractor implements StreamInfoItemExtractor {\n+\n+    private final JsonObject event;\n+\n+    public MediaCCCRecentKioskExtractor(final JsonObject event) {\n+        this.event = event;\n+    }\n+\n+    @Override\n+    public String getName() throws ParsingException {\n+        return event.getString(\"title\");\n+    }\n+\n+    @Override\n+    public String getUrl() throws ParsingException {\n+        return event.getString(\"frontend_link\");\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        return event.getString(\"thumb_url\");\n+    }\n+\n+    @Override\n+    public StreamType getStreamType() throws ParsingException {\n+        return StreamType.VIDEO_STREAM;\n+    }\n+\n+    @Override\n+    public boolean isAd() throws ParsingException {\n+        return false;\n+    }\n+\n+    @Override\n+    public long getDuration() throws ParsingException {\n+        return event.getInt(\"duration\");\n+    }\n+\n+    @Override\n+    public long getViewCount() throws ParsingException {\n+        return event.getInt(\"view_count\");\n+    }\n+\n+    @Override\n+    public String getUploaderName() throws ParsingException {\n+        return \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db2fe41a54ae85765b6cfec72c7101df104d053"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1OTQ2Mw==", "bodyText": "person contains people who participated in a talk / video. That's more like a tag.\nThe uploader is in our case the conference, but we only have the URL for that conference and making 100 requests to get conference names is a little out of scope.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/494#discussion_r547559463", "createdAt": "2020-12-22T23:41:47Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCRecentKioskExtractor.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.schabi.newpipe.extractor.services.media_ccc.extractors;\n+\n+import com.grack.nanojson.JsonObject;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamType;\n+\n+import javax.annotation.Nullable;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+\n+public class MediaCCCRecentKioskExtractor implements StreamInfoItemExtractor {\n+\n+    private final JsonObject event;\n+\n+    public MediaCCCRecentKioskExtractor(final JsonObject event) {\n+        this.event = event;\n+    }\n+\n+    @Override\n+    public String getName() throws ParsingException {\n+        return event.getString(\"title\");\n+    }\n+\n+    @Override\n+    public String getUrl() throws ParsingException {\n+        return event.getString(\"frontend_link\");\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        return event.getString(\"thumb_url\");\n+    }\n+\n+    @Override\n+    public StreamType getStreamType() throws ParsingException {\n+        return StreamType.VIDEO_STREAM;\n+    }\n+\n+    @Override\n+    public boolean isAd() throws ParsingException {\n+        return false;\n+    }\n+\n+    @Override\n+    public long getDuration() throws ParsingException {\n+        return event.getInt(\"duration\");\n+    }\n+\n+    @Override\n+    public long getViewCount() throws ParsingException {\n+        return event.getInt(\"view_count\");\n+    }\n+\n+    @Override\n+    public String getUploaderName() throws ParsingException {\n+        return \"\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1NjUxNw=="}, "originalCommit": {"oid": "1db2fe41a54ae85765b6cfec72c7101df104d053"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkxMjA2MQ==", "bodyText": "From the readme:\n\nEvery talk (alias event, in other systems also called lecture or session) is assigned to exactly one conference (e.g. the congress or lecture series like datengarten or openchaos) and consists of multiple files alias recordings. These files can be video or audio recordings of the talk in different formats and languages (live-translation), subtitle tracks as srt or slides as pdf.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/494#discussion_r548912061", "createdAt": "2020-12-25T21:09:21Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCRecentKioskExtractor.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.schabi.newpipe.extractor.services.media_ccc.extractors;\n+\n+import com.grack.nanojson.JsonObject;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamType;\n+\n+import javax.annotation.Nullable;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+\n+public class MediaCCCRecentKioskExtractor implements StreamInfoItemExtractor {\n+\n+    private final JsonObject event;\n+\n+    public MediaCCCRecentKioskExtractor(final JsonObject event) {\n+        this.event = event;\n+    }\n+\n+    @Override\n+    public String getName() throws ParsingException {\n+        return event.getString(\"title\");\n+    }\n+\n+    @Override\n+    public String getUrl() throws ParsingException {\n+        return event.getString(\"frontend_link\");\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        return event.getString(\"thumb_url\");\n+    }\n+\n+    @Override\n+    public StreamType getStreamType() throws ParsingException {\n+        return StreamType.VIDEO_STREAM;\n+    }\n+\n+    @Override\n+    public boolean isAd() throws ParsingException {\n+        return false;\n+    }\n+\n+    @Override\n+    public long getDuration() throws ParsingException {\n+        return event.getInt(\"duration\");\n+    }\n+\n+    @Override\n+    public long getViewCount() throws ParsingException {\n+        return event.getInt(\"view_count\");\n+    }\n+\n+    @Override\n+    public String getUploaderName() throws ParsingException {\n+        return \"\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1NjUxNw=="}, "originalCommit": {"oid": "1db2fe41a54ae85765b6cfec72c7101df104d053"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MjI5MzM0OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCRecentKioskExtractor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQxMDoxMzo0NlrOILiTow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQxMDo0MTo0N1rOILicYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk2NzMzMQ==", "bodyText": "do you know what's the difference between length and duration?", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/494#discussion_r548967331", "createdAt": "2020-12-26T10:13:46Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCRecentKioskExtractor.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.schabi.newpipe.extractor.services.media_ccc.extractors;\n+\n+import com.grack.nanojson.JsonObject;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamType;\n+\n+import javax.annotation.Nullable;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+\n+public class MediaCCCRecentKioskExtractor implements StreamInfoItemExtractor {\n+\n+    private final JsonObject event;\n+\n+    public MediaCCCRecentKioskExtractor(final JsonObject event) {\n+        this.event = event;\n+    }\n+\n+    @Override\n+    public String getName() throws ParsingException {\n+        return event.getString(\"title\");\n+    }\n+\n+    @Override\n+    public String getUrl() throws ParsingException {\n+        return event.getString(\"frontend_link\");\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        return event.getString(\"thumb_url\");\n+    }\n+\n+    @Override\n+    public StreamType getStreamType() throws ParsingException {\n+        return StreamType.VIDEO_STREAM;\n+    }\n+\n+    @Override\n+    public boolean isAd() throws ParsingException {\n+        return false;\n+    }\n+\n+    @Override\n+    public long getDuration() throws ParsingException {\n+        return event.getInt(\"duration\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2154c6e873cc6352e26e1cc0c110af8a3123166"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk2OTU2OA==", "bodyText": "no. both values are the same in all 100 entries.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/494#discussion_r548969568", "createdAt": "2020-12-26T10:41:47Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCRecentKioskExtractor.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.schabi.newpipe.extractor.services.media_ccc.extractors;\n+\n+import com.grack.nanojson.JsonObject;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamType;\n+\n+import javax.annotation.Nullable;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+\n+public class MediaCCCRecentKioskExtractor implements StreamInfoItemExtractor {\n+\n+    private final JsonObject event;\n+\n+    public MediaCCCRecentKioskExtractor(final JsonObject event) {\n+        this.event = event;\n+    }\n+\n+    @Override\n+    public String getName() throws ParsingException {\n+        return event.getString(\"title\");\n+    }\n+\n+    @Override\n+    public String getUrl() throws ParsingException {\n+        return event.getString(\"frontend_link\");\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        return event.getString(\"thumb_url\");\n+    }\n+\n+    @Override\n+    public StreamType getStreamType() throws ParsingException {\n+        return StreamType.VIDEO_STREAM;\n+    }\n+\n+    @Override\n+    public boolean isAd() throws ParsingException {\n+        return false;\n+    }\n+\n+    @Override\n+    public long getDuration() throws ParsingException {\n+        return event.getInt(\"duration\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk2NzMzMQ=="}, "originalCommit": {"oid": "b2154c6e873cc6352e26e1cc0c110af8a3123166"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MjI5NzU0OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCRecentKioskExtractor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQxMDoxOToxOFrOILiVbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQxMjoxODozMlrOILi6iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk2Nzc4OA==", "bodyText": "this returns an api link. Are you sure it is ok?\nWithout an api request you can build the uploader url, get the last part from this link and add it here: https://media.ccc.de/c/<uploader_id>", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/494#discussion_r548967788", "createdAt": "2020-12-26T10:19:18Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCRecentKioskExtractor.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.schabi.newpipe.extractor.services.media_ccc.extractors;\n+\n+import com.grack.nanojson.JsonObject;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamType;\n+\n+import javax.annotation.Nullable;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+\n+public class MediaCCCRecentKioskExtractor implements StreamInfoItemExtractor {\n+\n+    private final JsonObject event;\n+\n+    public MediaCCCRecentKioskExtractor(final JsonObject event) {\n+        this.event = event;\n+    }\n+\n+    @Override\n+    public String getName() throws ParsingException {\n+        return event.getString(\"title\");\n+    }\n+\n+    @Override\n+    public String getUrl() throws ParsingException {\n+        return event.getString(\"frontend_link\");\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        return event.getString(\"thumb_url\");\n+    }\n+\n+    @Override\n+    public StreamType getStreamType() throws ParsingException {\n+        return StreamType.VIDEO_STREAM;\n+    }\n+\n+    @Override\n+    public boolean isAd() throws ParsingException {\n+        return false;\n+    }\n+\n+    @Override\n+    public long getDuration() throws ParsingException {\n+        return event.getInt(\"duration\");\n+    }\n+\n+    @Override\n+    public long getViewCount() throws ParsingException {\n+        return event.getInt(\"view_count\");\n+    }\n+\n+    @Override\n+    public String getUploaderName() throws ParsingException {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() throws ParsingException {\n+        return event.getString(\"conference_url\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2154c6e873cc6352e26e1cc0c110af8a3123166"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk3NDU2MA==", "bodyText": "done.\nthe problem is still that the uploader is not shown, because we don't have the uploader name / conference name.\nWe could make an API request to get the conference name and store the value in some static map to reduce the number of requests. Do we need to conference name in the list?", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/494#discussion_r548974560", "createdAt": "2020-12-26T11:45:28Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCRecentKioskExtractor.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.schabi.newpipe.extractor.services.media_ccc.extractors;\n+\n+import com.grack.nanojson.JsonObject;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamType;\n+\n+import javax.annotation.Nullable;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+\n+public class MediaCCCRecentKioskExtractor implements StreamInfoItemExtractor {\n+\n+    private final JsonObject event;\n+\n+    public MediaCCCRecentKioskExtractor(final JsonObject event) {\n+        this.event = event;\n+    }\n+\n+    @Override\n+    public String getName() throws ParsingException {\n+        return event.getString(\"title\");\n+    }\n+\n+    @Override\n+    public String getUrl() throws ParsingException {\n+        return event.getString(\"frontend_link\");\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        return event.getString(\"thumb_url\");\n+    }\n+\n+    @Override\n+    public StreamType getStreamType() throws ParsingException {\n+        return StreamType.VIDEO_STREAM;\n+    }\n+\n+    @Override\n+    public boolean isAd() throws ParsingException {\n+        return false;\n+    }\n+\n+    @Override\n+    public long getDuration() throws ParsingException {\n+        return event.getInt(\"duration\");\n+    }\n+\n+    @Override\n+    public long getViewCount() throws ParsingException {\n+        return event.getInt(\"view_count\");\n+    }\n+\n+    @Override\n+    public String getUploaderName() throws ParsingException {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() throws ParsingException {\n+        return event.getString(\"conference_url\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk2Nzc4OA=="}, "originalCommit": {"oid": "b2154c6e873cc6352e26e1cc0c110af8a3123166"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk3NzI5MQ==", "bodyText": "I now get the conference URL.\nDisadvantage: ~560kB are downloaded, 7 requests made. The number of requests and the size of the retrieve JSON documents can vary extremely. This is because every conference documents contains massive data about their events.\n@Stypox @B0pol @TheAssassin\nEdit: I opened voc/voctoweb#495", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/494#discussion_r548977291", "createdAt": "2020-12-26T12:18:32Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCRecentKioskExtractor.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.schabi.newpipe.extractor.services.media_ccc.extractors;\n+\n+import com.grack.nanojson.JsonObject;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamType;\n+\n+import javax.annotation.Nullable;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+\n+public class MediaCCCRecentKioskExtractor implements StreamInfoItemExtractor {\n+\n+    private final JsonObject event;\n+\n+    public MediaCCCRecentKioskExtractor(final JsonObject event) {\n+        this.event = event;\n+    }\n+\n+    @Override\n+    public String getName() throws ParsingException {\n+        return event.getString(\"title\");\n+    }\n+\n+    @Override\n+    public String getUrl() throws ParsingException {\n+        return event.getString(\"frontend_link\");\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        return event.getString(\"thumb_url\");\n+    }\n+\n+    @Override\n+    public StreamType getStreamType() throws ParsingException {\n+        return StreamType.VIDEO_STREAM;\n+    }\n+\n+    @Override\n+    public boolean isAd() throws ParsingException {\n+        return false;\n+    }\n+\n+    @Override\n+    public long getDuration() throws ParsingException {\n+        return event.getInt(\"duration\");\n+    }\n+\n+    @Override\n+    public long getViewCount() throws ParsingException {\n+        return event.getInt(\"view_count\");\n+    }\n+\n+    @Override\n+    public String getUploaderName() throws ParsingException {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() throws ParsingException {\n+        return event.getString(\"conference_url\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk2Nzc4OA=="}, "originalCommit": {"oid": "b2154c6e873cc6352e26e1cc0c110af8a3123166"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2796, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}