{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3NDM1MDcy", "number": 406, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxNDowNjozN1rOEqGC5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNjozNzo1MlrOEsZmTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTc0Njk0OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxNDowNjozN1rOHcH09Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNzoxNjozMFrOHcQHQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1MDQyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (attempts <= 0) {\n          \n          \n            \n                            if (attempts == 0) {", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/406#discussion_r499250421", "createdAt": "2020-10-04T14:06:37Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -647,12 +646,31 @@ public void onFetchPage(@Nonnull Downloader downloader) throws IOException, Extr\n             final String infoPageResponse = downloader.get(videoInfoUrl, getExtractorLocalization()).responseBody();\n             videoInfoPage.putAll(Parser.compatParseMap(infoPageResponse));\n             playerUrl = info.url;\n+\n         } else {\n-            initialData = initialAjaxJson.getObject(3).getObject(\"response\");\n             ageLimit = NO_AGE_LIMIT;\n+            JsonObject playerConfig;\n+\n+            // sometimes at random YouTube does not provide the player config,\n+            // so just retry the same request three times\n+            int attempts = 2;\n+            while (true) {\n+                playerConfig = initialAjaxJson.getObject(2).getObject(\"player\", null);\n+                if (playerConfig != null) {\n+                    break;\n+                }\n+\n+                if (attempts <= 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f80cb3c99ac66507ee13ffe666f0dab6b449076"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM3ODI0Ng==", "bodyText": "Why? Doesn't hurt to be careful and cover all cases.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/406#discussion_r499378246", "createdAt": "2020-10-05T06:57:21Z", "author": {"login": "opusforlife2"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -647,12 +646,31 @@ public void onFetchPage(@Nonnull Downloader downloader) throws IOException, Extr\n             final String infoPageResponse = downloader.get(videoInfoUrl, getExtractorLocalization()).responseBody();\n             videoInfoPage.putAll(Parser.compatParseMap(infoPageResponse));\n             playerUrl = info.url;\n+\n         } else {\n-            initialData = initialAjaxJson.getObject(3).getObject(\"response\");\n             ageLimit = NO_AGE_LIMIT;\n+            JsonObject playerConfig;\n+\n+            // sometimes at random YouTube does not provide the player config,\n+            // so just retry the same request three times\n+            int attempts = 2;\n+            while (true) {\n+                playerConfig = initialAjaxJson.getObject(2).getObject(\"player\", null);\n+                if (playerConfig != null) {\n+                    break;\n+                }\n+\n+                if (attempts <= 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1MDQyMQ=="}, "originalCommit": {"oid": "0f80cb3c99ac66507ee13ffe666f0dab6b449076"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4NjE3Ng==", "bodyText": "Ok", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/406#discussion_r499386176", "createdAt": "2020-10-05T07:16:30Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -647,12 +646,31 @@ public void onFetchPage(@Nonnull Downloader downloader) throws IOException, Extr\n             final String infoPageResponse = downloader.get(videoInfoUrl, getExtractorLocalization()).responseBody();\n             videoInfoPage.putAll(Parser.compatParseMap(infoPageResponse));\n             playerUrl = info.url;\n+\n         } else {\n-            initialData = initialAjaxJson.getObject(3).getObject(\"response\");\n             ageLimit = NO_AGE_LIMIT;\n+            JsonObject playerConfig;\n+\n+            // sometimes at random YouTube does not provide the player config,\n+            // so just retry the same request three times\n+            int attempts = 2;\n+            while (true) {\n+                playerConfig = initialAjaxJson.getObject(2).getObject(\"player\", null);\n+                if (playerConfig != null) {\n+                    break;\n+                }\n+\n+                if (attempts <= 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1MDQyMQ=="}, "originalCommit": {"oid": "0f80cb3c99ac66507ee13ffe666f0dab6b449076"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTkyMTg1OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNjozNzozMFrOHfo5PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNjozNzozMFrOHfo5PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNzkxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new ParsingException(\"Could not extract js url from YouTube player config\");\n          \n          \n            \n                        throw new ParsingException(\"Could not extract js URL from YouTube player config\");", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/406#discussion_r502937917", "createdAt": "2020-10-11T16:37:30Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -674,36 +692,27 @@ public void onFetchPage(@Nonnull Downloader downloader) throws IOException, Extr\n         }\n     }\n \n-    private JsonObject getPlayerArgs(JsonObject playerConfig) throws ParsingException {\n-        JsonObject playerArgs;\n-\n+    private JsonObject getPlayerArgs(final JsonObject playerConfig) throws ParsingException {\n         //attempt to load the youtube js player JSON arguments\n-        try {\n-            playerArgs = playerConfig.getObject(\"args\");\n-        } catch (Exception e) {\n-            throw new ParsingException(\"Could not parse yt player config\", e);\n+        final JsonObject playerArgs = playerConfig.getObject(\"args\", null);\n+        if (playerArgs == null) {\n+            throw new ParsingException(\"Could not extract args from YouTube player config\");\n         }\n-\n         return playerArgs;\n     }\n \n-    private String getPlayerUrl(JsonObject playerConfig) throws ParsingException {\n-        try {\n-            // The Youtube service needs to be initialized by downloading the\n-            // js-Youtube-player. This is done in order to get the algorithm\n-            // for decrypting cryptic signatures inside certain stream urls.\n-            String playerUrl;\n-\n-            JsonObject ytAssets = playerConfig.getObject(\"assets\");\n-            playerUrl = ytAssets.getString(\"js\");\n+    private String getPlayerUrl(final JsonObject playerConfig) throws ParsingException {\n+        // The Youtube service needs to be initialized by downloading the\n+        // js-Youtube-player. This is done in order to get the algorithm\n+        // for decrypting cryptic signatures inside certain stream urls.\n+        final String playerUrl = playerConfig.getObject(\"assets\").getString(\"js\");\n \n-            if (playerUrl.startsWith(\"//\")) {\n-                playerUrl = HTTPS + playerUrl;\n-            }\n-            return playerUrl;\n-        } catch (Exception e) {\n-            throw new ParsingException(\"Could not load decryption code for the Youtube service.\", e);\n+        if (playerUrl == null) {\n+            throw new ParsingException(\"Could not extract js url from YouTube player config\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f80cb3c99ac66507ee13ffe666f0dab6b449076"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTkyMjA0OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNjozNzo1MlrOHfo5Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxNjozNzo1MlrOHfo5Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNzk0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // for decrypting cryptic signatures inside certain stream urls.\n          \n          \n            \n                    // for decrypting cryptic signatures inside certain stream URLs.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/406#discussion_r502937942", "createdAt": "2020-10-11T16:37:52Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -674,36 +692,27 @@ public void onFetchPage(@Nonnull Downloader downloader) throws IOException, Extr\n         }\n     }\n \n-    private JsonObject getPlayerArgs(JsonObject playerConfig) throws ParsingException {\n-        JsonObject playerArgs;\n-\n+    private JsonObject getPlayerArgs(final JsonObject playerConfig) throws ParsingException {\n         //attempt to load the youtube js player JSON arguments\n-        try {\n-            playerArgs = playerConfig.getObject(\"args\");\n-        } catch (Exception e) {\n-            throw new ParsingException(\"Could not parse yt player config\", e);\n+        final JsonObject playerArgs = playerConfig.getObject(\"args\", null);\n+        if (playerArgs == null) {\n+            throw new ParsingException(\"Could not extract args from YouTube player config\");\n         }\n-\n         return playerArgs;\n     }\n \n-    private String getPlayerUrl(JsonObject playerConfig) throws ParsingException {\n-        try {\n-            // The Youtube service needs to be initialized by downloading the\n-            // js-Youtube-player. This is done in order to get the algorithm\n-            // for decrypting cryptic signatures inside certain stream urls.\n-            String playerUrl;\n-\n-            JsonObject ytAssets = playerConfig.getObject(\"assets\");\n-            playerUrl = ytAssets.getString(\"js\");\n+    private String getPlayerUrl(final JsonObject playerConfig) throws ParsingException {\n+        // The Youtube service needs to be initialized by downloading the\n+        // js-Youtube-player. This is done in order to get the algorithm\n+        // for decrypting cryptic signatures inside certain stream urls.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f80cb3c99ac66507ee13ffe666f0dab6b449076"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2756, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}