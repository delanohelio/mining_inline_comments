{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzNjM1ODkx", "number": 451, "title": "Extract stream and search meta info for YouTube", "bodyText": "I carefully read the contribution guidelines and agree to them.\n I have tested the API against NewPipe.\n I agree to create a pull request for NewPipe as soon as possible to make it compatible with the changed API.\n\nExtract stream and search query meta data info which is provided by the service.\nThe meta info in distributed in two formats:\n\ninfo panel\nclarification renderer\n\n\n  \n    info panel (stream)\n     \n  \n  \n    The info panel mainly contains a short text (mostly one paragraph) and an link to the related Wikipedia article for more info.\n  \n  \n    clarification renderer (stream)\n     \n  \n  \n    The clarification renderer has a title, a text, a button which links to an official site (e.g. WHO). In a section below, there can be more links. I've only seen links to Google search results about the topic. That's why I did not implement fetching these links. \n  \n  \n    clarification renderer (search) \n     \n  \n\nToDo\n\n add tests for clarification renderer", "createdAt": "2020-11-01T14:55:35Z", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451", "merged": true, "mergeCommit": {"oid": "c682ea0d1808e95222917f5c49cecf649ee9f958"}, "closed": true, "closedAt": "2020-12-22T22:05:34Z", "author": {"login": "TobiGr"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdYRtPSgFqTUyMTIzNDYwNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdoxZmbgFqTU1NzM3NjQ4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMjM0NjA0", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#pullrequestreview-521234604", "createdAt": "2020-11-01T15:28:17Z", "commit": {"oid": "05675c9a90215abc23fe2b0b6355b855b7ab3304"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxNToyODoxN1rOHrv5JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxNToyODoxN1rOHrv5JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzNTQ5Mg==", "bodyText": "This will fail if there is no expected metadata info.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r515635492", "createdAt": "2020-11-01T15:28:17Z", "author": {"login": "Stypox"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java", "diffHunk": "@@ -382,4 +386,20 @@ public void testTags() throws Exception {\n     public void testSupportInfo() throws Exception {\n         assertEquals(expectedSupportInfo(), extractor().getSupportInfo());\n     }\n+\n+    @Test\n+    public void testMetadataInfo() throws Exception {\n+        final MetaInfo metaInfo = extractor().getMetaInfo().get(0);\n+        final MetaInfo expectedMetaInfo = expectedMetadataInfo().get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05675c9a90215abc23fe2b0b6355b855b7ab3304"}, "originalPosition": 33}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "05675c9a90215abc23fe2b0b6355b855b7ab3304", "author": {"user": {"login": "TobiGr", "name": "Tobi"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/05675c9a90215abc23fe2b0b6355b855b7ab3304", "committedDate": "2020-11-01T14:30:54Z", "message": "Extract stream and search meta info for YouTube"}, "afterCommit": {"oid": "daa6e980ef0ee30f714224ddd060d712ea8f0127", "author": {"user": {"login": "TobiGr", "name": "Tobi"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/daa6e980ef0ee30f714224ddd060d712ea8f0127", "committedDate": "2020-11-18T16:21:27Z", "message": "Extract stream and search meta info for YouTube\n\nAdd method to extract Google webcache URLs."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "daa6e980ef0ee30f714224ddd060d712ea8f0127", "author": {"user": {"login": "TobiGr", "name": "Tobi"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/daa6e980ef0ee30f714224ddd060d712ea8f0127", "committedDate": "2020-11-18T16:21:27Z", "message": "Extract stream and search meta info for YouTube\n\nAdd method to extract Google webcache URLs."}, "afterCommit": {"oid": "7def8d85194f7d5c53278ce67867777b7f8f06ea", "author": {"user": {"login": "TobiGr", "name": "Tobi"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/7def8d85194f7d5c53278ce67867777b7f8f06ea", "committedDate": "2020-11-18T16:25:01Z", "message": "Extract stream and search meta info for YouTube\n\nAdd method to extract Google webcache URLs."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7def8d85194f7d5c53278ce67867777b7f8f06ea", "author": {"user": {"login": "TobiGr", "name": "Tobi"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/7def8d85194f7d5c53278ce67867777b7f8f06ea", "committedDate": "2020-11-18T16:25:01Z", "message": "Extract stream and search meta info for YouTube\n\nAdd method to extract Google webcache URLs."}, "afterCommit": {"oid": "c7cf58bed632eec9b9322eb4b86a35fe22ea139d", "author": {"user": {"login": "TobiGr", "name": "Tobi"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/c7cf58bed632eec9b9322eb4b86a35fe22ea139d", "committedDate": "2020-11-24T10:38:07Z", "message": "Extract stream and search meta info for YouTube\n\nAdd method to extract Google webcache URLs.\nfixes\n\n\nNull checks"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c7cf58bed632eec9b9322eb4b86a35fe22ea139d", "author": {"user": {"login": "TobiGr", "name": "Tobi"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/c7cf58bed632eec9b9322eb4b86a35fe22ea139d", "committedDate": "2020-11-24T10:38:07Z", "message": "Extract stream and search meta info for YouTube\n\nAdd method to extract Google webcache URLs.\nfixes\n\n\nNull checks"}, "afterCommit": {"oid": "5a0dc24d6ac219dfb682d64daf1b24b87d3d6887", "author": {"user": {"login": "TobiGr", "name": "Tobi"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/5a0dc24d6ac219dfb682d64daf1b24b87d3d6887", "committedDate": "2020-11-24T10:42:08Z", "message": "Extract stream and search meta info for YouTube\n\nAdd method to extract Google webcache URLs.\nfixes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5a0dc24d6ac219dfb682d64daf1b24b87d3d6887", "author": {"user": {"login": "TobiGr", "name": "Tobi"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/5a0dc24d6ac219dfb682d64daf1b24b87d3d6887", "committedDate": "2020-11-24T10:42:08Z", "message": "Extract stream and search meta info for YouTube\n\nAdd method to extract Google webcache URLs.\nfixes"}, "afterCommit": {"oid": "f3764c5948cb731f5a674f714b302a52b66ebe68", "author": {"user": {"login": "TobiGr", "name": "Tobi"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/f3764c5948cb731f5a674f714b302a52b66ebe68", "committedDate": "2020-11-24T10:54:57Z", "message": "Extract stream and search meta info for YouTube\n\nAdd method to extract Google webcache URLs.\nfixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNzI2MzQy", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#pullrequestreview-550726342", "createdAt": "2020-12-12T13:12:26Z", "commit": {"oid": "f3764c5948cb731f5a674f714b302a52b66ebe68"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxMzoxMjoyNlrOIEfCiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxMzozNDoyOVrOIEfQQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3Mzc3MQ==", "bodyText": "This code should only add <br> in between paragraphs, not also at the end, or shouldn't it?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        sb.append(YoutubeParsingHelper.getTextFromObject((JsonObject) paragraph));\n          \n          \n            \n                        if (infoPanelContentRenderer.getArray(\"paragraphs\").size() > 1) {\n          \n          \n            \n                            sb.append(\"<br>\");\n          \n          \n            \n                        }\n          \n          \n            \n                        if (!sb.isEmpty()) {\n          \n          \n            \n                            sb.append(\"<br>\");\n          \n          \n            \n                        }\n          \n          \n            \n                        sb.append(YoutubeParsingHelper.getTextFromObject((JsonObject) paragraph));", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r541573771", "createdAt": "2020-12-12T13:12:26Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java", "diffHunk": "@@ -551,4 +548,116 @@ public static void defaultAlertsCheck(final JsonObject initialData) throws Parsi\n             }\n         }\n     }\n+\n+    @Nonnull\n+    public static List<MetaInfo> getMetaInfo(final JsonArray contents) throws ParsingException {\n+        final List<MetaInfo> metaInfo = new ArrayList<>();\n+        for (final Object content : contents) {\n+            final JsonObject resultObject = (JsonObject) content;\n+            if (resultObject.has(\"itemSectionRenderer\")) {\n+                for (final Object sectionContentObject :\n+                        resultObject.getObject(\"itemSectionRenderer\").getArray(\"contents\")) {\n+\n+                    final JsonObject sectionContent = (JsonObject) sectionContentObject;\n+                    if (sectionContent.has(\"infoPanelContentRenderer\")) {\n+                        metaInfo.add(getInfoPanelContent(sectionContent.getObject(\"infoPanelContentRenderer\")));\n+                    }\n+                    if (sectionContent.has(\"clarificationRenderer\")) {\n+                        metaInfo.add(getClarificationRendererContent(sectionContent.getObject(\"clarificationRenderer\")\n+                        ));\n+                    }\n+\n+                }\n+            }\n+        }\n+        return metaInfo;\n+    }\n+\n+    @Nonnull\n+    private static MetaInfo getInfoPanelContent(final JsonObject infoPanelContentRenderer)\n+            throws ParsingException {\n+        final MetaInfo metaInfo = new MetaInfo();\n+        final StringBuilder sb = new StringBuilder();\n+        for (final Object paragraph : infoPanelContentRenderer.getArray(\"paragraphs\")) {\n+            sb.append(YoutubeParsingHelper.getTextFromObject((JsonObject) paragraph));\n+            if (infoPanelContentRenderer.getArray(\"paragraphs\").size() > 1) {\n+                sb.append(\"<br>\");\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3764c5948cb731f5a674f714b302a52b66ebe68"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3NDE4NA==", "bodyText": "This should be avove the @", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r541574184", "createdAt": "2020-12-12T13:15:23Z", "author": {"login": "Stypox"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultSearchExtractorTest.java", "diffHunk": "@@ -41,4 +50,32 @@ public void testSearchSuggestion() throws Exception {\n     public void testSearchCorrected() throws Exception {\n         assertEquals(isCorrectedSearch(), extractor().isCorrectedSearch());\n     }\n+\n+    @Test\n+    /**\n+     * @see DefaultStreamExtractorTest#testMetaInfo()\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3764c5948cb731f5a674f714b302a52b66ebe68"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3NDIxNA==", "bodyText": "Also here", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r541574214", "createdAt": "2020-12-12T13:15:36Z", "author": {"login": "Stypox"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java", "diffHunk": "@@ -379,4 +384,33 @@ public void testTags() throws Exception {\n     public void testSupportInfo() throws Exception {\n         assertEquals(expectedSupportInfo(), extractor().getSupportInfo());\n     }\n+\n+    @Test\n+    /**\n+     * @see DefaultSearchExtractorTest#testMetaInfo()\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3764c5948cb731f5a674f714b302a52b66ebe68"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3NTczMA==", "bodyText": "This is not true, at least for me the secondary endpoint for e.g. covid 19 points to Learn about vaccine progress from the WHO. So I think you should add another url and another urlText. You could check with a rule of thumb if it is a google search or not (e.g. by looking for google inside the url), and only add it if it is not.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r541575730", "createdAt": "2020-12-12T13:25:14Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java", "diffHunk": "@@ -551,4 +548,116 @@ public static void defaultAlertsCheck(final JsonObject initialData) throws Parsi\n             }\n         }\n     }\n+\n+    @Nonnull\n+    public static List<MetaInfo> getMetaInfo(final JsonArray contents) throws ParsingException {\n+        final List<MetaInfo> metaInfo = new ArrayList<>();\n+        for (final Object content : contents) {\n+            final JsonObject resultObject = (JsonObject) content;\n+            if (resultObject.has(\"itemSectionRenderer\")) {\n+                for (final Object sectionContentObject :\n+                        resultObject.getObject(\"itemSectionRenderer\").getArray(\"contents\")) {\n+\n+                    final JsonObject sectionContent = (JsonObject) sectionContentObject;\n+                    if (sectionContent.has(\"infoPanelContentRenderer\")) {\n+                        metaInfo.add(getInfoPanelContent(sectionContent.getObject(\"infoPanelContentRenderer\")));\n+                    }\n+                    if (sectionContent.has(\"clarificationRenderer\")) {\n+                        metaInfo.add(getClarificationRendererContent(sectionContent.getObject(\"clarificationRenderer\")\n+                        ));\n+                    }\n+\n+                }\n+            }\n+        }\n+        return metaInfo;\n+    }\n+\n+    @Nonnull\n+    private static MetaInfo getInfoPanelContent(final JsonObject infoPanelContentRenderer)\n+            throws ParsingException {\n+        final MetaInfo metaInfo = new MetaInfo();\n+        final StringBuilder sb = new StringBuilder();\n+        for (final Object paragraph : infoPanelContentRenderer.getArray(\"paragraphs\")) {\n+            sb.append(YoutubeParsingHelper.getTextFromObject((JsonObject) paragraph));\n+            if (infoPanelContentRenderer.getArray(\"paragraphs\").size() > 1) {\n+                sb.append(\"<br>\");\n+            }\n+        }\n+        metaInfo.setText(sb.toString());\n+        if (infoPanelContentRenderer.has(\"sourceEndpoint\")) {\n+            final String metaInfoLinkUrl = YoutubeParsingHelper.getUrlFromNavigationEndpoint(\n+                    infoPanelContentRenderer.getObject(\"sourceEndpoint\"));\n+            try {\n+                metaInfo.addUrl(new URL(Objects.requireNonNull(extractedCachedUrlIfNeeded(metaInfoLinkUrl))));\n+            } catch (final NullPointerException | MalformedURLException e) {\n+                throw new ParsingException(\"Could not get metadata info URL\", e);\n+            }\n+\n+            final String metaInfoLinkText = YoutubeParsingHelper.getTextFromObject(\n+                    infoPanelContentRenderer.getObject(\"inlineSource\"));\n+            if (isNullOrEmpty(metaInfoLinkText)) {\n+                throw new ParsingException(\"Could not get metadata info link text.\");\n+            }\n+            metaInfo.addUrlText(metaInfoLinkText);\n+        }\n+\n+        return metaInfo;\n+    }\n+\n+    @Nonnull\n+    private static MetaInfo getClarificationRendererContent(final JsonObject clarificationRenderer)\n+            throws ParsingException {\n+        final MetaInfo metaInfo = new MetaInfo();\n+\n+        final String title = YoutubeParsingHelper.getTextFromObject(clarificationRenderer.getObject(\"contentTitle\"));\n+        final String text = YoutubeParsingHelper.getTextFromObject(clarificationRenderer.getObject(\"text\"));\n+        if (title == null || text ==  null) {\n+            throw new ParsingException(\"Could not extract clarification renderer content\");\n+        }\n+        metaInfo.setTitle(title);\n+        metaInfo.setText(text);\n+\n+        if (clarificationRenderer.has(\"actionButton\")) {\n+            final JsonObject actionButton = clarificationRenderer.getObject(\"actionButton\")\n+                    .getObject(\"buttonRenderer\");\n+            try {\n+                final String url = YoutubeParsingHelper.getUrlFromNavigationEndpoint(actionButton.getObject(\"command\"));\n+                metaInfo.addUrl(new URL(Objects.requireNonNull(extractedCachedUrlIfNeeded(url))));\n+            } catch (final NullPointerException | MalformedURLException e) {\n+                throw new ParsingException(\"Could not get metadata info URL\", e);\n+            }\n+\n+            final String metaInfoLinkText = YoutubeParsingHelper.getTextFromObject(\n+                    actionButton.getObject(\"text\"));\n+            if (isNullOrEmpty(metaInfoLinkText)) {\n+                throw new ParsingException(\"Could not get metadata info link text.\");\n+            }\n+            metaInfo.addUrlText(metaInfoLinkText);\n+        }\n+\n+        if (clarificationRenderer.has(\"secondaryEndpoint\")) {\n+            // TODO: implement\n+            // These URLs point to a Google search of the topic", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3764c5948cb731f5a674f714b302a52b66ebe68"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3Njc1MQ==", "bodyText": "I think this Javadoc is outdated\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return  The meta info of the stream or an empty String if not provided. If the info contains a link, the String\n          \n          \n            \n                 *          is HTML formatted.\n          \n          \n            \n                 * @return  The meta info of the stream or an empty List if not provided. If the info contains a link, the String\n          \n          \n            \n                 *          is HTML formatted.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r541576751", "createdAt": "2020-12-12T13:31:35Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "diffHunk": "@@ -476,4 +477,19 @@ protected long getTimestampSeconds(String regexPattern) throws ParsingException\n      */\n     @Nonnull\n     public abstract String getSupportInfo() throws ParsingException;\n+\n+    /**\n+     * Meta information about the stream.\n+     * <p>\n+     * This can be information about the stream creator (e.g. if the creator is a public broadcaster)\n+     * or further information on the topic (e.g. hints that the video might contain conspiracy theories\n+     * or contains information about a current health situation like the Covid-19 pandemic).\n+     * </p>\n+ *     The meta information often contains links to external sources like Wikipedia or the WHO.\n+     * @return  The meta info of the stream or an empty String if not provided. If the info contains a link, the String\n+     *          is HTML formatted.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3764c5948cb731f5a674f714b302a52b66ebe68"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3Njk3NA==", "bodyText": "Maybe the format of the text should be pointed out (like with video description)", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r541576974", "createdAt": "2020-12-12T13:32:29Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/MetaInfo.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package org.schabi.newpipe.extractor;\n+\n+import java.io.Serializable;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.annotation.Nonnull;\n+\n+public class MetaInfo implements Serializable {\n+\n+    private String title = \"\";\n+    private String text = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3764c5948cb731f5a674f714b302a52b66ebe68"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3NzI1OA==", "bodyText": "Make this return an empty list by default, to prevent having to point it out manually every time, like with DefaultStreamExtractorTest", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r541577258", "createdAt": "2020-12-12T13:34:20Z", "author": {"login": "Stypox"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultSearchExtractorTest.java", "diffHunk": "@@ -20,6 +27,8 @@ public boolean isCorrectedSearch() {\n         return false;\n     }\n \n+    public abstract List<MetaInfo> expectedMetaInfo() throws MalformedURLException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3764c5948cb731f5a674f714b302a52b66ebe68"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3NzI4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public List<MetaInfo> expectedMetaInfo() throws MalformedURLException {return Collections.emptyList(); } // default: no metadata info available\n          \n          \n            \n                public List<MetaInfo> expectedMetaInfo() throws MalformedURLException { return Collections.emptyList(); } // default: no metadata info available", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r541577281", "createdAt": "2020-12-12T13:34:29Z", "author": {"login": "Stypox"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java", "diffHunk": "@@ -66,6 +70,7 @@\n     public Locale expectedLanguageInfo() { return null; } // default: no language info available\n     public List<String> expectedTags() { return Collections.emptyList(); } // default: no tags\n     public String expectedSupportInfo() { return \"\"; } // default: no support info available\n+    public List<MetaInfo> expectedMetaInfo() throws MalformedURLException {return Collections.emptyList(); } // default: no metadata info available", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3764c5948cb731f5a674f714b302a52b66ebe68"}, "originalPosition": 25}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f3764c5948cb731f5a674f714b302a52b66ebe68", "author": {"user": {"login": "TobiGr", "name": "Tobi"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/f3764c5948cb731f5a674f714b302a52b66ebe68", "committedDate": "2020-11-24T10:54:57Z", "message": "Extract stream and search meta info for YouTube\n\nAdd method to extract Google webcache URLs.\nfixes"}, "afterCommit": {"oid": "63e89db979092e62dfa667de6e91b21d1ee03683", "author": {"user": {"login": "TobiGr", "name": "Tobi"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/63e89db979092e62dfa667de6e91b21d1ee03683", "committedDate": "2020-12-12T14:25:00Z", "message": "Extract stream and search meta info for YouTube\n\nAdd method to extract Google webcache URLs.\nfixes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "63e89db979092e62dfa667de6e91b21d1ee03683", "author": {"user": {"login": "TobiGr", "name": "Tobi"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/63e89db979092e62dfa667de6e91b21d1ee03683", "committedDate": "2020-12-12T14:25:00Z", "message": "Extract stream and search meta info for YouTube\n\nAdd method to extract Google webcache URLs.\nfixes"}, "afterCommit": {"oid": "79b5aa9760da52020821b68e2af41a9238943304", "author": {"user": {"login": "TobiGr", "name": "Tobi"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/79b5aa9760da52020821b68e2af41a9238943304", "committedDate": "2020-12-15T16:28:15Z", "message": "Make some vars final and add annotations to methods"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "79b5aa9760da52020821b68e2af41a9238943304", "author": {"user": {"login": "TobiGr", "name": "Tobi"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/79b5aa9760da52020821b68e2af41a9238943304", "committedDate": "2020-12-15T16:28:15Z", "message": "Make some vars final and add annotations to methods"}, "afterCommit": {"oid": "31a6fe1b9016dc0d02dc48580464b5599708c1da", "author": {"user": {"login": "TobiGr", "name": "Tobi"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/31a6fe1b9016dc0d02dc48580464b5599708c1da", "committedDate": "2020-12-19T13:30:37Z", "message": "Make some vars final and add annotations to methods"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MDIyMDI0", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#pullrequestreview-556022024", "createdAt": "2020-12-20T14:20:03Z", "commit": {"oid": "31a6fe1b9016dc0d02dc48580464b5599708c1da"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQxNDoyMDowNFrOIJEmWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQxNDoyMDo1MFrOIJEmnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjM4MzQ0OQ==", "bodyText": "These should also contain the other link", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r546383449", "createdAt": "2020-12-20T14:20:04Z", "author": {"login": "Stypox"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/search/YoutubeSearchExtractorTest.java", "diffHunk": "@@ -211,4 +215,33 @@ public void duplicatedItemsCheck() throws Exception {\n             assertNoDuplicatedItems(YouTube, page1, page2);\n         }\n     }\n+\n+    public static class MetaInfoTest extends DefaultSearchExtractorTest {\n+        private static SearchExtractor extractor;\n+        private static final String QUERY = \"Covid\";\n+\n+        @Test\n+        public void clarificationTest() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = YouTube.getSearchExtractor(QUERY, singletonList(VIDEOS), \"\");\n+            extractor.fetchPage();\n+        }\n+\n+        @Override public String expectedSearchString() { return QUERY; }\n+        @Override public String expectedSearchSuggestion() { return null; }\n+        @Override public List<MetaInfo> expectedMetaInfo() throws MalformedURLException {\n+            return Collections.singletonList(new MetaInfo(\n+                    \"COVID-19\",\n+                    new Description(\"Get the latest information from the WHO about coronavirus.\", Description.PLAIN_TEXT),\n+                    Collections.singletonList(new URL(\"https://www.who.int/emergencies/diseases/novel-coronavirus-2019\")),\n+                    Collections.singletonList(\"LEARN MORE\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31a6fe1b9016dc0d02dc48580464b5599708c1da"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjM4MzUxNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return  The meta info of the stream or an empty List if not provided.\n          \n          \n            \n                 * @return The meta info of the stream or an empty List if not provided.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r546383517", "createdAt": "2020-12-20T14:20:50Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "diffHunk": "@@ -486,4 +487,18 @@ protected long getTimestampSeconds(String regexPattern) throws ParsingException\n      */\n     @Nonnull\n     public abstract List<StreamSegment> getStreamSegments() throws ParsingException;\n+\n+    /**\n+     * Meta information about the stream.\n+     * <p>\n+     * This can be information about the stream creator (e.g. if the creator is a public broadcaster)\n+     * or further information on the topic (e.g. hints that the video might contain conspiracy theories\n+     * or contains information about a current health situation like the Covid-19 pandemic).\n+     * </p>\n+ *     The meta information often contains links to external sources like Wikipedia or the WHO.\n+     * @return  The meta info of the stream or an empty List if not provided.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31a6fe1b9016dc0d02dc48580464b5599708c1da"}, "originalPosition": 21}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "31a6fe1b9016dc0d02dc48580464b5599708c1da", "author": {"user": {"login": "TobiGr", "name": "Tobi"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/31a6fe1b9016dc0d02dc48580464b5599708c1da", "committedDate": "2020-12-19T13:30:37Z", "message": "Make some vars final and add annotations to methods"}, "afterCommit": {"oid": "17d48b26e3e7859440bc5d29a6576db49b740c61", "author": {"user": {"login": "TobiGr", "name": "Tobi"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/17d48b26e3e7859440bc5d29a6576db49b740c61", "committedDate": "2020-12-20T18:54:43Z", "message": "Make some vars final and add annotations to methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc6de149527fabb235068bfed538194316054ddb", "author": {"user": {"login": "TobiGr", "name": "Tobi"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/bc6de149527fabb235068bfed538194316054ddb", "committedDate": "2020-12-22T17:19:26Z", "message": "Extract stream and search meta info for YouTube\n\nAdd method to extract Google webcache URLs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41a8ed625d6dfbddc1c29f99586211e69207d662", "author": {"user": {"login": "TobiGr", "name": "Tobi"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/41a8ed625d6dfbddc1c29f99586211e69207d662", "committedDate": "2020-12-22T17:19:26Z", "message": "Make some vars final and add annotations to methods"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "17d48b26e3e7859440bc5d29a6576db49b740c61", "author": {"user": {"login": "TobiGr", "name": "Tobi"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/17d48b26e3e7859440bc5d29a6576db49b740c61", "committedDate": "2020-12-20T18:54:43Z", "message": "Make some vars final and add annotations to methods"}, "afterCommit": {"oid": "41a8ed625d6dfbddc1c29f99586211e69207d662", "author": {"user": {"login": "TobiGr", "name": "Tobi"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/41a8ed625d6dfbddc1c29f99586211e69207d662", "committedDate": "2020-12-22T17:19:26Z", "message": "Make some vars final and add annotations to methods"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3Mzc2NDg1", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#pullrequestreview-557376485", "createdAt": "2020-12-22T21:27:31Z", "commit": {"oid": "41a8ed625d6dfbddc1c29f99586211e69207d662"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3957, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}