{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5NzM4ODc3", "number": 233, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMjo0MjoxN1rODZMp0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMjo1NzoyOVrODZM5kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzQ4MzA1OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMjo0MjoxN1rOFfdJzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMjo0MjoxN1rOFfdJzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUyNzgyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return thumbnails.getObject(thumbnails.size()-1).getString(\"url\");\n          \n          \n            \n                        return thumbnails.getObject(thumbnails.size() - 1).getString(\"url\");", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/233#discussion_r368527822", "createdAt": "2020-01-20T12:42:17Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -149,34 +159,39 @@ public DateWrapper getUploadDate() throws ParsingException {\n     @Override\n     public String getThumbnailUrl() throws ParsingException {\n         assertPageFetched();\n-        // Try to get high resolution thumbnail first, if it fails, use low res from the player instead\n         try {\n-            return doc.select(\"link[itemprop=\\\"thumbnailUrl\\\"]\").first().attr(\"abs:href\");\n-        } catch (Exception ignored) {\n-            // Try other method...\n-        }\n+            JsonArray thumbnails = playerResponse.getObject(\"videoDetails\").getObject(\"thumbnail\").getArray(\"thumbnails\");\n+            // the last thumbnail is the one with the highest resolution\n+            return thumbnails.getObject(thumbnails.size()-1).getString(\"url\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0567c20549bd6f60ffe41514229a49b251a42937"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzUyMzM3OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMjo1NzoyOVrOFfdhdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMjo1NzoyOVrOFfdhdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUzMzg3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            return Math.round(Long.parseLong(durationMs)/1000.0f);\n          \n          \n            \n                            return Math.round(Long.parseLong(durationMs) / 1000f);", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/233#discussion_r368533879", "createdAt": "2020-01-20T12:57:29Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -269,25 +284,22 @@ public int getAgeLimit() throws ParsingException {\n     public long getLength() throws ParsingException {\n         assertPageFetched();\n \n-        // try getting duration from playerargs\n-        try {\n-            String durationMs = playerResponse\n-                    .getObject(\"streamingData\")\n-                    .getArray(\"formats\")\n-                    .getObject(0)\n-                    .getString(\"approxDurationMs\");\n-            return Long.parseLong(durationMs)/1000;\n-        } catch (Exception e) {\n-        }\n-\n-        //try getting value from age gated video\n         try {\n             String duration = playerResponse\n                     .getObject(\"videoDetails\")\n                     .getString(\"lengthSeconds\");\n             return Long.parseLong(duration);\n         } catch (Exception e) {\n-            throw new ParsingException(\"Every methode to get the duration has failed: \", e);\n+            try {\n+                String durationMs = playerResponse\n+                        .getObject(\"streamingData\")\n+                        .getArray(\"formats\")\n+                        .getObject(0)\n+                        .getString(\"approxDurationMs\");\n+                return Math.round(Long.parseLong(durationMs)/1000.0f);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0567c20549bd6f60ffe41514229a49b251a42937"}, "originalPosition": 136}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2818, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}