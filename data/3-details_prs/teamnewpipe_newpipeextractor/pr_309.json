{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNjMyODMx", "number": 309, "title": "Improve stream extractor tests & various fixes", "bodyText": "I carefully read the contribution guidelines and agree to them.\n I have tested the API against NewPipe.\n\nThis PR makes all stream extractor tests consistent by having them all extend the same default base class. I took inspiration from @mauriciocolli's work in #296. Note that I didn't add tests for metadata properties, that will fit in another PR after both this pr and #306 are merged.\nList of test improvements:\n\nAdd base classes for stream extractor tests with the same structure as in #296, and extend them in each and every StreamExtractorTest. Some methods are not abstract and they provide a default value; this does not imply risks (i.e. forgetting to change a default) since if a value is different from the default one the tests will fail (not silently)\nThumbnail urls and uploader avatar urls are only assertSecureUrl, but not compared, since they could change I think. In MediaCCC, where they were being tested before, I left those tests there untouched.\nPeertube has many description-only tests; I didn't create a whole test class for every one of them, but left them untouched, as a full test is not really needed imo.\nRename *StreamExtractorDefaultTest into *StreamExtractorTest for services when there is only one file containing stream tests (that's obviously the default one ;-) )\nRemove assert checking whether the upload date of list items is in the past. Actually, this does not have to hold true: youtube premieres turn up in search results even though they are in the future.\nAdd assertAtLeast method to utils\nOptimize imports\n\nList of fixes (taken from commit messages):\n\n[YouTube] Fix NullPointerException on obtaining error message when there is none: return null instead, as per javadoc\n[YouTube] Return 0 when there is no timestamp in a video url, not -2 (that internally indicates that the regex failed to match), as per javadoc\n[YouTube] Fix frame extraction for livestreams: another json field is used in that case. Also use saved playerResponse instead of parsing the same json once again.\n[SoundCloud] Return empty stream list instead of null in getVideoStreams() (best-practice). Also replace every instance of return new ArrayList<>(); with return Collections.emptyList();\n[PeerTube] Return empty audio stream list instead of null in getAudioStreams()\n[PeerTube] Fix link handler inconsistency, that used to provide API links to the user instead of the human-readable ones. Also improve stream and channel link handler tests.\n[PeerTube] Parse timestamp from url (previously unimplemented)\n[MediaCCC] Fix link handler inconsistency, that used to provide API links to the user instead of the human-readable ones. Use regex instead of substrings.\n[MediaCCC] Add tests for stream and conference link handlers.\n[MediaCCC] Implement tag metadata extraction (unrelated to the other fixes, will probably be overwritten by #306)\n[MediaCCC] Return null instead of empty items collector at getRelatedStreams(), as per javadoc\n[MediaCCC] Remove useless overridden method getOriginalUrl() that does the same as the base one\n[MediaCCC] Return empty video-only stream list instead of null in getVideoOnlyStreams()", "createdAt": "2020-04-09T20:37:06Z", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309", "merged": true, "mergeCommit": {"oid": "14c0c37d64883e795445bc8bd878df33ad6bdb9d"}, "closed": true, "closedAt": "2020-10-25T17:49:54Z", "author": {"login": "Stypox"}, "timelineItems": {"totalCount": 49, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcWNZ4VgFqTM5MTM0MzI0NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWDG6VAFqTUxNjM4MDAzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMzQzMjQ1", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#pullrequestreview-391343245", "createdAt": "2020-04-10T09:00:01Z", "commit": {"oid": "051e3fa5aa43417ac221ac030aa33ae2e3359cc0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOTowMDowMVrOGD1O4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOTowNjoyNFrOGD1Yow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3MTA3NQ==", "bodyText": "Why are you using a regex for conferences while using substring() for API URLs here and using URL#getPath() + substring() for non-API URLs here?", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r406671075", "createdAt": "2020-04-10T09:00:01Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/linkHandler/MediaCCCStreamLinkHandlerFactory.java", "diffHunk": "@@ -9,10 +8,12 @@\n import java.net.URL;\n \n public class MediaCCCStreamLinkHandlerFactory extends LinkHandlerFactory {\n+    public static final String VIDEO_API_ENDPOINT = \"https://api.media.ccc.de/public/events/\";\n+    private static final String VIDEO_PATH = \"https://media.ccc.de/v/\";\n \n     @Override\n     public String getId(String urlString) throws ParsingException {\n-        if (urlString.startsWith(\"https://api.media.ccc.de/public/events/\") &&\n+        if (urlString.startsWith(VIDEO_API_ENDPOINT) &&\n                 !urlString.contains(\"?q=\")) {\n             return urlString.substring(39); //remove api\u2026/public/events part\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "051e3fa5aa43417ac221ac030aa33ae2e3359cc0"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3MTgzMA==", "bodyText": "Please also handle the API URLs in getId() here", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r406671830", "createdAt": "2020-04-10T09:02:01Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeChannelLinkHandlerFactory.java", "diffHunk": "@@ -31,7 +32,7 @@ public String getUrl(String id, List<String> contentFilters, String searchFilter\n     @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "051e3fa5aa43417ac221ac030aa33ae2e3359cc0"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3MjI3MA==", "bodyText": "Please also handle the API URLs in getId() here", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r406672270", "createdAt": "2020-04-10T09:03:00Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeStreamLinkHandlerFactory.java", "diffHunk": "@@ -27,7 +28,7 @@ public String getUrl(String id) {\n \n     @Override\n     public String getUrl(String id, String baseUrl) {\n-        return baseUrl + VIDEO_ENDPOINT + id;\n+        return baseUrl + VIDEO_PATH + id;\n     }\n \n     @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "051e3fa5aa43417ac221ac030aa33ae2e3359cc0"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3MjYyOQ==", "bodyText": "Could be final", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r406672629", "createdAt": "2020-04-10T09:03:54Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -258,7 +258,14 @@ public long getLength() throws ParsingException {\n      */\n     @Override\n     public long getTimeStamp() throws ParsingException {\n-        return getTimestampSeconds(\"((#|&|\\\\?)t=\\\\d{0,3}h?\\\\d{0,3}m?\\\\d{1,3}s?)\");\n+        long timestamp = getTimestampSeconds(\"((#|&|\\\\?)t=\\\\d{0,3}h?\\\\d{0,3}m?\\\\d{1,3}s?)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "051e3fa5aa43417ac221ac030aa33ae2e3359cc0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3Mjc2Ng==", "bodyText": "Why was this changed?", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r406672766", "createdAt": "2020-04-10T09:04:14Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -579,7 +586,7 @@ public String getErrorMessage() {\n         try {\n             return getTextFromObject(initialAjaxJson.getObject(2).getObject(\"playerResponse\").getObject(\"playabilityStatus\")\n                     .getObject(\"errorScreen\").getObject(\"playerErrorMessageRenderer\").getObject(\"reason\"));\n-        } catch (ParsingException e) {\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "051e3fa5aa43417ac221ac030aa33ae2e3359cc0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3MzU3MQ==", "bodyText": "Could be final, just like a lot of variables in this class", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r406673571", "createdAt": "2020-04-10T09:06:24Z", "author": {"login": "wb9688"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java", "diffHunk": "@@ -0,0 +1,289 @@\n+package org.schabi.newpipe.extractor.services;\n+\n+import org.junit.Test;\n+import org.schabi.newpipe.extractor.MediaFormat;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.AudioStream;\n+import org.schabi.newpipe.extractor.stream.Description;\n+import org.schabi.newpipe.extractor.stream.Frameset;\n+import org.schabi.newpipe.extractor.stream.StreamExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+import org.schabi.newpipe.extractor.stream.StreamType;\n+import org.schabi.newpipe.extractor.stream.SubtitlesStream;\n+import org.schabi.newpipe.extractor.stream.VideoStream;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.List;\n+\n+import javax.annotation.Nullable;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertAtLeast;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsValidUrl;\n+import static org.schabi.newpipe.extractor.services.DefaultTests.defaultTestListOfItems;\n+\n+/**\n+ * Test for {@link StreamExtractor}\n+ */\n+public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<StreamExtractor>\n+        implements BaseStreamExtractorTest {\n+\n+    public abstract StreamType expectedStreamType();\n+    public abstract String expectedUploaderName();\n+    public abstract String expectedUploaderUrl();\n+    public abstract List<String> expectedDescriptionContains(); // e.g. for full links\n+    public abstract long expectedLength();\n+    public long expectedTimestamp() { return 0; }; // default: there is no timestamp\n+    public abstract long expectedViewCountAtLeast();\n+    @Nullable public abstract String expectedUploadDate(); // format: \"yyyy-MM-dd HH:mm:ss.SSS\"\n+    @Nullable public abstract String expectedTextualUploadDate();\n+    public abstract long expectedLikeCountAtLeast(); // return -1 if ratings are disabled\n+    public abstract long expectedDislikeCountAtLeast(); // return -1 if ratings are disabled\n+    public boolean expectedHasRelatedStreams() { return true; } // default: there are related videos\n+    public int expectedAgeLimit() { return StreamExtractor.NO_AGE_LIMIT; } // default: no limit\n+    @Nullable public String expectedErrorMessage() { return null; } // default: no error message\n+    public boolean expectedHasVideoStreams() { return true; } // default: there are video streams\n+    public boolean expectedHasAudioStreams() { return true; } // default: there are audio streams\n+    public boolean expectedHasSubtitles() { return true; } // default: there are subtitles streams\n+    public boolean expectedHasFrames() { return true; } // default: there are frames\n+    public boolean expectedHasNextStream() { return true; } // default: there is a next video\n+\n+    @Test\n+    @Override\n+    public void testStreamType() throws Exception {\n+        assertEquals(expectedStreamType(), extractor().getStreamType());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderName() throws Exception {\n+        assertEquals(expectedUploaderName(), extractor().getUploaderName());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderUrl() throws Exception {\n+        final String uploaderUrl = extractor().getUploaderUrl();\n+        assertIsSecureUrl(uploaderUrl);\n+        assertEquals(expectedUploaderUrl(), uploaderUrl);\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderAvatarUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getUploaderAvatarUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testThumbnailUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getThumbnailUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDescription() throws Exception {\n+        Description description = extractor().getDescription();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "051e3fa5aa43417ac221ac030aa33ae2e3359cc0"}, "originalPosition": 94}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "051e3fa5aa43417ac221ac030aa33ae2e3359cc0", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/051e3fa5aa43417ac221ac030aa33ae2e3359cc0", "committedDate": "2020-04-09T20:09:51Z", "message": "[Test] Optimize imports"}, "afterCommit": {"oid": "b6ae05794f0ec1620706af5df3c55ccfcbb3f091", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/b6ae05794f0ec1620706af5df3c55ccfcbb3f091", "committedDate": "2020-04-11T13:26:05Z", "message": "[Test] Optimize imports"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b296ca1c25994b0d8686c878d42538cd0d018d41", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/b296ca1c25994b0d8686c878d42538cd0d018d41", "committedDate": "2020-04-11T15:46:10Z", "message": "[YouTube] Fix livestream test actually having video streams\n\nAlso fix description test that was not valid anymore"}, "afterCommit": {"oid": "6dd5f016b1c9de508bc2d99105221aa8383a53c8", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/6dd5f016b1c9de508bc2d99105221aa8383a53c8", "committedDate": "2020-04-20T06:41:23Z", "message": "[YouTube] Fix livestream test actually having video streams\n\nAlso fix description test that was not valid anymore"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6dd5f016b1c9de508bc2d99105221aa8383a53c8", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/6dd5f016b1c9de508bc2d99105221aa8383a53c8", "committedDate": "2020-04-20T06:41:23Z", "message": "[YouTube] Fix livestream test actually having video streams\n\nAlso fix description test that was not valid anymore"}, "afterCommit": {"oid": "ab85fcb91ec4b916e7074fad565e2624e78c0cd1", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/ab85fcb91ec4b916e7074fad565e2624e78c0cd1", "committedDate": "2020-04-20T07:01:51Z", "message": "[MediaCCC] Return empty list of video-only streams instead of null"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ab85fcb91ec4b916e7074fad565e2624e78c0cd1", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/ab85fcb91ec4b916e7074fad565e2624e78c0cd1", "committedDate": "2020-04-20T07:01:51Z", "message": "[MediaCCC] Return empty list of video-only streams instead of null"}, "afterCommit": {"oid": "505f19c4db56f23a5a08d1cba66c2e9043b4964f", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/505f19c4db56f23a5a08d1cba66c2e9043b4964f", "committedDate": "2020-05-06T19:19:21Z", "message": "[MediaCCC] Return empty list of video-only streams instead of null"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "505f19c4db56f23a5a08d1cba66c2e9043b4964f", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/505f19c4db56f23a5a08d1cba66c2e9043b4964f", "committedDate": "2020-05-06T19:19:21Z", "message": "[MediaCCC] Return empty list of video-only streams instead of null"}, "afterCommit": {"oid": "e4ace2b0dc97db6df467f41a74219776304dac6f", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/e4ace2b0dc97db6df467f41a74219776304dac6f", "committedDate": "2020-05-09T14:23:48Z", "message": "[MediaCCC] Return empty list of video-only streams instead of null"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNzIwMTIz", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#pullrequestreview-411720123", "createdAt": "2020-05-14T11:42:03Z", "commit": {"oid": "e4ace2b0dc97db6df467f41a74219776304dac6f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMTo0MjowM1rOGVYXEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMTo0Mzo1OFrOGVYbDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3MjQwMw==", "bodyText": "final", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r425072403", "createdAt": "2020-05-14T11:42:03Z", "author": {"login": "wb9688"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java", "diffHunk": "@@ -0,0 +1,297 @@\n+package org.schabi.newpipe.extractor.services;\n+\n+import org.junit.Test;\n+import org.schabi.newpipe.extractor.MediaFormat;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.AudioStream;\n+import org.schabi.newpipe.extractor.stream.Description;\n+import org.schabi.newpipe.extractor.stream.Frameset;\n+import org.schabi.newpipe.extractor.stream.StreamExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+import org.schabi.newpipe.extractor.stream.StreamType;\n+import org.schabi.newpipe.extractor.stream.SubtitlesStream;\n+import org.schabi.newpipe.extractor.stream.VideoStream;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.List;\n+import java.util.TimeZone;\n+\n+import javax.annotation.Nullable;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertAtLeast;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsValidUrl;\n+import static org.schabi.newpipe.extractor.services.DefaultTests.defaultTestListOfItems;\n+\n+/**\n+ * Test for {@link StreamExtractor}\n+ */\n+public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<StreamExtractor>\n+        implements BaseStreamExtractorTest {\n+\n+    public abstract StreamType expectedStreamType();\n+    public abstract String expectedUploaderName();\n+    public abstract String expectedUploaderUrl();\n+    public abstract List<String> expectedDescriptionContains(); // e.g. for full links\n+    public abstract long expectedLength();\n+    public long expectedTimestamp() { return 0; }; // default: there is no timestamp\n+    public abstract long expectedViewCountAtLeast();\n+    @Nullable public abstract String expectedUploadDate(); // format: \"yyyy-MM-dd HH:mm:ss.SSS\"\n+    @Nullable public abstract String expectedTextualUploadDate();\n+    public abstract long expectedLikeCountAtLeast(); // return -1 if ratings are disabled\n+    public abstract long expectedDislikeCountAtLeast(); // return -1 if ratings are disabled\n+    public boolean expectedHasRelatedStreams() { return true; } // default: there are related videos\n+    public int expectedAgeLimit() { return StreamExtractor.NO_AGE_LIMIT; } // default: no limit\n+    @Nullable public String expectedErrorMessage() { return null; } // default: no error message\n+    public boolean expectedHasVideoStreams() { return true; } // default: there are video streams\n+    public boolean expectedHasAudioStreams() { return true; } // default: there are audio streams\n+    public boolean expectedHasSubtitles() { return true; } // default: there are subtitles streams\n+    public boolean expectedHasFrames() { return true; } // default: there are frames\n+    public boolean expectedHasNextStream() { return true; } // default: there is a next video\n+\n+    @Test\n+    @Override\n+    public void testStreamType() throws Exception {\n+        assertEquals(expectedStreamType(), extractor().getStreamType());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderName() throws Exception {\n+        assertEquals(expectedUploaderName(), extractor().getUploaderName());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderUrl() throws Exception {\n+        final String uploaderUrl = extractor().getUploaderUrl();\n+        assertIsSecureUrl(uploaderUrl);\n+        assertEquals(expectedUploaderUrl(), uploaderUrl);\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderAvatarUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getUploaderAvatarUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testThumbnailUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getThumbnailUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDescription() throws Exception {\n+        final Description description = extractor().getDescription();\n+        assertNotNull(description);\n+        assertFalse(\"description is empty\", description.getContent().isEmpty());\n+\n+        for (String s : expectedDescriptionContains()) {\n+            assertThat(description.getContent(), containsString(s));\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLength() throws Exception {\n+        assertEquals(expectedLength(), extractor().getLength());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTimestamp() throws Exception {\n+        assertEquals(expectedTimestamp(), extractor().getTimeStamp());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testViewCount() throws Exception {\n+        assertAtLeast(expectedViewCountAtLeast(), extractor().getViewCount());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploadDate() throws Exception {\n+        final DateWrapper dateWrapper = extractor().getUploadDate();\n+\n+        if (expectedUploadDate() == null) {\n+            assertNull(dateWrapper);\n+        } else {\n+            assertNotNull(dateWrapper);\n+\n+            final Calendar expectedDate = Calendar.getInstance();\n+            final Calendar actualDate = dateWrapper.date();\n+            expectedDate.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+            actualDate.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+\n+            final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.S\");\n+            expectedDate.setTime(sdf.parse(expectedUploadDate()));\n+            assertEquals(expectedDate, actualDate);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTextualUploadDate() throws Exception {\n+        assertEquals(expectedTextualUploadDate(), extractor().getTextualUploadDate());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLikeCount() throws Exception {\n+        if (expectedLikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getLikeCount());\n+        } else {\n+            assertAtLeast(expectedLikeCountAtLeast(), extractor().getLikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDislikeCount() throws Exception {\n+        if (expectedDislikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getDislikeCount());\n+        } else {\n+            assertAtLeast(expectedDislikeCountAtLeast(), extractor().getDislikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testRelatedStreams() throws Exception {\n+        final StreamInfoItemsCollector relatedStreams = extractor().getRelatedStreams();\n+\n+        if (expectedHasRelatedStreams()) {\n+            defaultTestListOfItems(extractor().getService(), relatedStreams.getItems(),\n+                    relatedStreams.getErrors());\n+        } else {\n+            assertNull(relatedStreams);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testAgeLimit() throws Exception {\n+        assertEquals(expectedAgeLimit(), extractor().getAgeLimit());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testErrorMessage() throws Exception {\n+        assertEquals(expectedErrorMessage(), extractor().getErrorMessage());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testVideoStreams() throws Exception {\n+        List<VideoStream> videoStreams = extractor().getVideoStreams();\n+        final List<VideoStream> videoOnlyStreams = extractor().getVideoOnlyStreams();\n+        assertNotNull(videoStreams);\n+        assertNotNull(videoOnlyStreams);\n+        videoStreams.addAll(videoOnlyStreams);\n+\n+        if (expectedHasVideoStreams()) {\n+            assertFalse(videoStreams.isEmpty());\n+\n+            for (VideoStream stream : videoStreams) {\n+                assertIsSecureUrl(stream.getUrl());\n+                assertFalse(stream.getResolution().isEmpty());\n+\n+                int formatId = stream.getFormatId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4ace2b0dc97db6df467f41a74219776304dac6f"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3MjQ1NA==", "bodyText": "final", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r425072454", "createdAt": "2020-05-14T11:42:09Z", "author": {"login": "wb9688"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java", "diffHunk": "@@ -0,0 +1,297 @@\n+package org.schabi.newpipe.extractor.services;\n+\n+import org.junit.Test;\n+import org.schabi.newpipe.extractor.MediaFormat;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.AudioStream;\n+import org.schabi.newpipe.extractor.stream.Description;\n+import org.schabi.newpipe.extractor.stream.Frameset;\n+import org.schabi.newpipe.extractor.stream.StreamExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+import org.schabi.newpipe.extractor.stream.StreamType;\n+import org.schabi.newpipe.extractor.stream.SubtitlesStream;\n+import org.schabi.newpipe.extractor.stream.VideoStream;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.List;\n+import java.util.TimeZone;\n+\n+import javax.annotation.Nullable;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertAtLeast;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsValidUrl;\n+import static org.schabi.newpipe.extractor.services.DefaultTests.defaultTestListOfItems;\n+\n+/**\n+ * Test for {@link StreamExtractor}\n+ */\n+public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<StreamExtractor>\n+        implements BaseStreamExtractorTest {\n+\n+    public abstract StreamType expectedStreamType();\n+    public abstract String expectedUploaderName();\n+    public abstract String expectedUploaderUrl();\n+    public abstract List<String> expectedDescriptionContains(); // e.g. for full links\n+    public abstract long expectedLength();\n+    public long expectedTimestamp() { return 0; }; // default: there is no timestamp\n+    public abstract long expectedViewCountAtLeast();\n+    @Nullable public abstract String expectedUploadDate(); // format: \"yyyy-MM-dd HH:mm:ss.SSS\"\n+    @Nullable public abstract String expectedTextualUploadDate();\n+    public abstract long expectedLikeCountAtLeast(); // return -1 if ratings are disabled\n+    public abstract long expectedDislikeCountAtLeast(); // return -1 if ratings are disabled\n+    public boolean expectedHasRelatedStreams() { return true; } // default: there are related videos\n+    public int expectedAgeLimit() { return StreamExtractor.NO_AGE_LIMIT; } // default: no limit\n+    @Nullable public String expectedErrorMessage() { return null; } // default: no error message\n+    public boolean expectedHasVideoStreams() { return true; } // default: there are video streams\n+    public boolean expectedHasAudioStreams() { return true; } // default: there are audio streams\n+    public boolean expectedHasSubtitles() { return true; } // default: there are subtitles streams\n+    public boolean expectedHasFrames() { return true; } // default: there are frames\n+    public boolean expectedHasNextStream() { return true; } // default: there is a next video\n+\n+    @Test\n+    @Override\n+    public void testStreamType() throws Exception {\n+        assertEquals(expectedStreamType(), extractor().getStreamType());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderName() throws Exception {\n+        assertEquals(expectedUploaderName(), extractor().getUploaderName());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderUrl() throws Exception {\n+        final String uploaderUrl = extractor().getUploaderUrl();\n+        assertIsSecureUrl(uploaderUrl);\n+        assertEquals(expectedUploaderUrl(), uploaderUrl);\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderAvatarUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getUploaderAvatarUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testThumbnailUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getThumbnailUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDescription() throws Exception {\n+        final Description description = extractor().getDescription();\n+        assertNotNull(description);\n+        assertFalse(\"description is empty\", description.getContent().isEmpty());\n+\n+        for (String s : expectedDescriptionContains()) {\n+            assertThat(description.getContent(), containsString(s));\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLength() throws Exception {\n+        assertEquals(expectedLength(), extractor().getLength());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTimestamp() throws Exception {\n+        assertEquals(expectedTimestamp(), extractor().getTimeStamp());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testViewCount() throws Exception {\n+        assertAtLeast(expectedViewCountAtLeast(), extractor().getViewCount());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploadDate() throws Exception {\n+        final DateWrapper dateWrapper = extractor().getUploadDate();\n+\n+        if (expectedUploadDate() == null) {\n+            assertNull(dateWrapper);\n+        } else {\n+            assertNotNull(dateWrapper);\n+\n+            final Calendar expectedDate = Calendar.getInstance();\n+            final Calendar actualDate = dateWrapper.date();\n+            expectedDate.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+            actualDate.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+\n+            final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.S\");\n+            expectedDate.setTime(sdf.parse(expectedUploadDate()));\n+            assertEquals(expectedDate, actualDate);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTextualUploadDate() throws Exception {\n+        assertEquals(expectedTextualUploadDate(), extractor().getTextualUploadDate());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLikeCount() throws Exception {\n+        if (expectedLikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getLikeCount());\n+        } else {\n+            assertAtLeast(expectedLikeCountAtLeast(), extractor().getLikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDislikeCount() throws Exception {\n+        if (expectedDislikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getDislikeCount());\n+        } else {\n+            assertAtLeast(expectedDislikeCountAtLeast(), extractor().getDislikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testRelatedStreams() throws Exception {\n+        final StreamInfoItemsCollector relatedStreams = extractor().getRelatedStreams();\n+\n+        if (expectedHasRelatedStreams()) {\n+            defaultTestListOfItems(extractor().getService(), relatedStreams.getItems(),\n+                    relatedStreams.getErrors());\n+        } else {\n+            assertNull(relatedStreams);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testAgeLimit() throws Exception {\n+        assertEquals(expectedAgeLimit(), extractor().getAgeLimit());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testErrorMessage() throws Exception {\n+        assertEquals(expectedErrorMessage(), extractor().getErrorMessage());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testVideoStreams() throws Exception {\n+        List<VideoStream> videoStreams = extractor().getVideoStreams();\n+        final List<VideoStream> videoOnlyStreams = extractor().getVideoOnlyStreams();\n+        assertNotNull(videoStreams);\n+        assertNotNull(videoOnlyStreams);\n+        videoStreams.addAll(videoOnlyStreams);\n+\n+        if (expectedHasVideoStreams()) {\n+            assertFalse(videoStreams.isEmpty());\n+\n+            for (VideoStream stream : videoStreams) {\n+                assertIsSecureUrl(stream.getUrl());\n+                assertFalse(stream.getResolution().isEmpty());\n+\n+                int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit a video stream: \" + formatId,\n+                        0 <= formatId && formatId < 0x100);\n+            }\n+        } else {\n+            assertTrue(videoStreams.isEmpty());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testAudioStreams() throws Exception {\n+        final List<AudioStream> audioStreams = extractor().getAudioStreams();\n+        assertNotNull(audioStreams);\n+\n+        if (expectedHasAudioStreams()) {\n+            assertFalse(audioStreams.isEmpty());\n+\n+            for (AudioStream stream : audioStreams) {\n+                assertIsSecureUrl(stream.getUrl());\n+\n+                int formatId = stream.getFormatId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4ace2b0dc97db6df467f41a74219776304dac6f"}, "originalPosition": 231}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3MjUyNQ==", "bodyText": "final", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r425072525", "createdAt": "2020-05-14T11:42:16Z", "author": {"login": "wb9688"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java", "diffHunk": "@@ -0,0 +1,297 @@\n+package org.schabi.newpipe.extractor.services;\n+\n+import org.junit.Test;\n+import org.schabi.newpipe.extractor.MediaFormat;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.AudioStream;\n+import org.schabi.newpipe.extractor.stream.Description;\n+import org.schabi.newpipe.extractor.stream.Frameset;\n+import org.schabi.newpipe.extractor.stream.StreamExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+import org.schabi.newpipe.extractor.stream.StreamType;\n+import org.schabi.newpipe.extractor.stream.SubtitlesStream;\n+import org.schabi.newpipe.extractor.stream.VideoStream;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.List;\n+import java.util.TimeZone;\n+\n+import javax.annotation.Nullable;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertAtLeast;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsValidUrl;\n+import static org.schabi.newpipe.extractor.services.DefaultTests.defaultTestListOfItems;\n+\n+/**\n+ * Test for {@link StreamExtractor}\n+ */\n+public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<StreamExtractor>\n+        implements BaseStreamExtractorTest {\n+\n+    public abstract StreamType expectedStreamType();\n+    public abstract String expectedUploaderName();\n+    public abstract String expectedUploaderUrl();\n+    public abstract List<String> expectedDescriptionContains(); // e.g. for full links\n+    public abstract long expectedLength();\n+    public long expectedTimestamp() { return 0; }; // default: there is no timestamp\n+    public abstract long expectedViewCountAtLeast();\n+    @Nullable public abstract String expectedUploadDate(); // format: \"yyyy-MM-dd HH:mm:ss.SSS\"\n+    @Nullable public abstract String expectedTextualUploadDate();\n+    public abstract long expectedLikeCountAtLeast(); // return -1 if ratings are disabled\n+    public abstract long expectedDislikeCountAtLeast(); // return -1 if ratings are disabled\n+    public boolean expectedHasRelatedStreams() { return true; } // default: there are related videos\n+    public int expectedAgeLimit() { return StreamExtractor.NO_AGE_LIMIT; } // default: no limit\n+    @Nullable public String expectedErrorMessage() { return null; } // default: no error message\n+    public boolean expectedHasVideoStreams() { return true; } // default: there are video streams\n+    public boolean expectedHasAudioStreams() { return true; } // default: there are audio streams\n+    public boolean expectedHasSubtitles() { return true; } // default: there are subtitles streams\n+    public boolean expectedHasFrames() { return true; } // default: there are frames\n+    public boolean expectedHasNextStream() { return true; } // default: there is a next video\n+\n+    @Test\n+    @Override\n+    public void testStreamType() throws Exception {\n+        assertEquals(expectedStreamType(), extractor().getStreamType());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderName() throws Exception {\n+        assertEquals(expectedUploaderName(), extractor().getUploaderName());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderUrl() throws Exception {\n+        final String uploaderUrl = extractor().getUploaderUrl();\n+        assertIsSecureUrl(uploaderUrl);\n+        assertEquals(expectedUploaderUrl(), uploaderUrl);\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderAvatarUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getUploaderAvatarUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testThumbnailUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getThumbnailUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDescription() throws Exception {\n+        final Description description = extractor().getDescription();\n+        assertNotNull(description);\n+        assertFalse(\"description is empty\", description.getContent().isEmpty());\n+\n+        for (String s : expectedDescriptionContains()) {\n+            assertThat(description.getContent(), containsString(s));\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLength() throws Exception {\n+        assertEquals(expectedLength(), extractor().getLength());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTimestamp() throws Exception {\n+        assertEquals(expectedTimestamp(), extractor().getTimeStamp());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testViewCount() throws Exception {\n+        assertAtLeast(expectedViewCountAtLeast(), extractor().getViewCount());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploadDate() throws Exception {\n+        final DateWrapper dateWrapper = extractor().getUploadDate();\n+\n+        if (expectedUploadDate() == null) {\n+            assertNull(dateWrapper);\n+        } else {\n+            assertNotNull(dateWrapper);\n+\n+            final Calendar expectedDate = Calendar.getInstance();\n+            final Calendar actualDate = dateWrapper.date();\n+            expectedDate.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+            actualDate.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+\n+            final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.S\");\n+            expectedDate.setTime(sdf.parse(expectedUploadDate()));\n+            assertEquals(expectedDate, actualDate);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTextualUploadDate() throws Exception {\n+        assertEquals(expectedTextualUploadDate(), extractor().getTextualUploadDate());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLikeCount() throws Exception {\n+        if (expectedLikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getLikeCount());\n+        } else {\n+            assertAtLeast(expectedLikeCountAtLeast(), extractor().getLikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDislikeCount() throws Exception {\n+        if (expectedDislikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getDislikeCount());\n+        } else {\n+            assertAtLeast(expectedDislikeCountAtLeast(), extractor().getDislikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testRelatedStreams() throws Exception {\n+        final StreamInfoItemsCollector relatedStreams = extractor().getRelatedStreams();\n+\n+        if (expectedHasRelatedStreams()) {\n+            defaultTestListOfItems(extractor().getService(), relatedStreams.getItems(),\n+                    relatedStreams.getErrors());\n+        } else {\n+            assertNull(relatedStreams);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testAgeLimit() throws Exception {\n+        assertEquals(expectedAgeLimit(), extractor().getAgeLimit());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testErrorMessage() throws Exception {\n+        assertEquals(expectedErrorMessage(), extractor().getErrorMessage());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testVideoStreams() throws Exception {\n+        List<VideoStream> videoStreams = extractor().getVideoStreams();\n+        final List<VideoStream> videoOnlyStreams = extractor().getVideoOnlyStreams();\n+        assertNotNull(videoStreams);\n+        assertNotNull(videoOnlyStreams);\n+        videoStreams.addAll(videoOnlyStreams);\n+\n+        if (expectedHasVideoStreams()) {\n+            assertFalse(videoStreams.isEmpty());\n+\n+            for (VideoStream stream : videoStreams) {\n+                assertIsSecureUrl(stream.getUrl());\n+                assertFalse(stream.getResolution().isEmpty());\n+\n+                int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit a video stream: \" + formatId,\n+                        0 <= formatId && formatId < 0x100);\n+            }\n+        } else {\n+            assertTrue(videoStreams.isEmpty());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testAudioStreams() throws Exception {\n+        final List<AudioStream> audioStreams = extractor().getAudioStreams();\n+        assertNotNull(audioStreams);\n+\n+        if (expectedHasAudioStreams()) {\n+            assertFalse(audioStreams.isEmpty());\n+\n+            for (AudioStream stream : audioStreams) {\n+                assertIsSecureUrl(stream.getUrl());\n+\n+                int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n+                        0x100 <= formatId && formatId < 0x1000);\n+            }\n+        } else {\n+            assertTrue(audioStreams.isEmpty());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testSubtitles() throws Exception {\n+        List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4ace2b0dc97db6df467f41a74219776304dac6f"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3MjU3NQ==", "bodyText": "final", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r425072575", "createdAt": "2020-05-14T11:42:21Z", "author": {"login": "wb9688"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java", "diffHunk": "@@ -0,0 +1,297 @@\n+package org.schabi.newpipe.extractor.services;\n+\n+import org.junit.Test;\n+import org.schabi.newpipe.extractor.MediaFormat;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.AudioStream;\n+import org.schabi.newpipe.extractor.stream.Description;\n+import org.schabi.newpipe.extractor.stream.Frameset;\n+import org.schabi.newpipe.extractor.stream.StreamExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+import org.schabi.newpipe.extractor.stream.StreamType;\n+import org.schabi.newpipe.extractor.stream.SubtitlesStream;\n+import org.schabi.newpipe.extractor.stream.VideoStream;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.List;\n+import java.util.TimeZone;\n+\n+import javax.annotation.Nullable;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertAtLeast;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsValidUrl;\n+import static org.schabi.newpipe.extractor.services.DefaultTests.defaultTestListOfItems;\n+\n+/**\n+ * Test for {@link StreamExtractor}\n+ */\n+public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<StreamExtractor>\n+        implements BaseStreamExtractorTest {\n+\n+    public abstract StreamType expectedStreamType();\n+    public abstract String expectedUploaderName();\n+    public abstract String expectedUploaderUrl();\n+    public abstract List<String> expectedDescriptionContains(); // e.g. for full links\n+    public abstract long expectedLength();\n+    public long expectedTimestamp() { return 0; }; // default: there is no timestamp\n+    public abstract long expectedViewCountAtLeast();\n+    @Nullable public abstract String expectedUploadDate(); // format: \"yyyy-MM-dd HH:mm:ss.SSS\"\n+    @Nullable public abstract String expectedTextualUploadDate();\n+    public abstract long expectedLikeCountAtLeast(); // return -1 if ratings are disabled\n+    public abstract long expectedDislikeCountAtLeast(); // return -1 if ratings are disabled\n+    public boolean expectedHasRelatedStreams() { return true; } // default: there are related videos\n+    public int expectedAgeLimit() { return StreamExtractor.NO_AGE_LIMIT; } // default: no limit\n+    @Nullable public String expectedErrorMessage() { return null; } // default: no error message\n+    public boolean expectedHasVideoStreams() { return true; } // default: there are video streams\n+    public boolean expectedHasAudioStreams() { return true; } // default: there are audio streams\n+    public boolean expectedHasSubtitles() { return true; } // default: there are subtitles streams\n+    public boolean expectedHasFrames() { return true; } // default: there are frames\n+    public boolean expectedHasNextStream() { return true; } // default: there is a next video\n+\n+    @Test\n+    @Override\n+    public void testStreamType() throws Exception {\n+        assertEquals(expectedStreamType(), extractor().getStreamType());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderName() throws Exception {\n+        assertEquals(expectedUploaderName(), extractor().getUploaderName());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderUrl() throws Exception {\n+        final String uploaderUrl = extractor().getUploaderUrl();\n+        assertIsSecureUrl(uploaderUrl);\n+        assertEquals(expectedUploaderUrl(), uploaderUrl);\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderAvatarUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getUploaderAvatarUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testThumbnailUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getThumbnailUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDescription() throws Exception {\n+        final Description description = extractor().getDescription();\n+        assertNotNull(description);\n+        assertFalse(\"description is empty\", description.getContent().isEmpty());\n+\n+        for (String s : expectedDescriptionContains()) {\n+            assertThat(description.getContent(), containsString(s));\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLength() throws Exception {\n+        assertEquals(expectedLength(), extractor().getLength());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTimestamp() throws Exception {\n+        assertEquals(expectedTimestamp(), extractor().getTimeStamp());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testViewCount() throws Exception {\n+        assertAtLeast(expectedViewCountAtLeast(), extractor().getViewCount());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploadDate() throws Exception {\n+        final DateWrapper dateWrapper = extractor().getUploadDate();\n+\n+        if (expectedUploadDate() == null) {\n+            assertNull(dateWrapper);\n+        } else {\n+            assertNotNull(dateWrapper);\n+\n+            final Calendar expectedDate = Calendar.getInstance();\n+            final Calendar actualDate = dateWrapper.date();\n+            expectedDate.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+            actualDate.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+\n+            final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.S\");\n+            expectedDate.setTime(sdf.parse(expectedUploadDate()));\n+            assertEquals(expectedDate, actualDate);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTextualUploadDate() throws Exception {\n+        assertEquals(expectedTextualUploadDate(), extractor().getTextualUploadDate());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLikeCount() throws Exception {\n+        if (expectedLikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getLikeCount());\n+        } else {\n+            assertAtLeast(expectedLikeCountAtLeast(), extractor().getLikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDislikeCount() throws Exception {\n+        if (expectedDislikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getDislikeCount());\n+        } else {\n+            assertAtLeast(expectedDislikeCountAtLeast(), extractor().getDislikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testRelatedStreams() throws Exception {\n+        final StreamInfoItemsCollector relatedStreams = extractor().getRelatedStreams();\n+\n+        if (expectedHasRelatedStreams()) {\n+            defaultTestListOfItems(extractor().getService(), relatedStreams.getItems(),\n+                    relatedStreams.getErrors());\n+        } else {\n+            assertNull(relatedStreams);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testAgeLimit() throws Exception {\n+        assertEquals(expectedAgeLimit(), extractor().getAgeLimit());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testErrorMessage() throws Exception {\n+        assertEquals(expectedErrorMessage(), extractor().getErrorMessage());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testVideoStreams() throws Exception {\n+        List<VideoStream> videoStreams = extractor().getVideoStreams();\n+        final List<VideoStream> videoOnlyStreams = extractor().getVideoOnlyStreams();\n+        assertNotNull(videoStreams);\n+        assertNotNull(videoOnlyStreams);\n+        videoStreams.addAll(videoOnlyStreams);\n+\n+        if (expectedHasVideoStreams()) {\n+            assertFalse(videoStreams.isEmpty());\n+\n+            for (VideoStream stream : videoStreams) {\n+                assertIsSecureUrl(stream.getUrl());\n+                assertFalse(stream.getResolution().isEmpty());\n+\n+                int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit a video stream: \" + formatId,\n+                        0 <= formatId && formatId < 0x100);\n+            }\n+        } else {\n+            assertTrue(videoStreams.isEmpty());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testAudioStreams() throws Exception {\n+        final List<AudioStream> audioStreams = extractor().getAudioStreams();\n+        assertNotNull(audioStreams);\n+\n+        if (expectedHasAudioStreams()) {\n+            assertFalse(audioStreams.isEmpty());\n+\n+            for (AudioStream stream : audioStreams) {\n+                assertIsSecureUrl(stream.getUrl());\n+\n+                int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n+                        0x100 <= formatId && formatId < 0x1000);\n+            }\n+        } else {\n+            assertTrue(audioStreams.isEmpty());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testSubtitles() throws Exception {\n+        List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n+        assertNotNull(subtitles);\n+\n+        if (expectedHasSubtitles()) {\n+            assertFalse(subtitles.isEmpty());\n+\n+            for (SubtitlesStream stream : subtitles) {\n+                assertIsSecureUrl(stream.getUrl());\n+\n+                int formatId = stream.getFormatId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4ace2b0dc97db6df467f41a74219776304dac6f"}, "originalPosition": 252}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3MjYxNA==", "bodyText": "final", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r425072614", "createdAt": "2020-05-14T11:42:26Z", "author": {"login": "wb9688"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java", "diffHunk": "@@ -0,0 +1,297 @@\n+package org.schabi.newpipe.extractor.services;\n+\n+import org.junit.Test;\n+import org.schabi.newpipe.extractor.MediaFormat;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.AudioStream;\n+import org.schabi.newpipe.extractor.stream.Description;\n+import org.schabi.newpipe.extractor.stream.Frameset;\n+import org.schabi.newpipe.extractor.stream.StreamExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+import org.schabi.newpipe.extractor.stream.StreamType;\n+import org.schabi.newpipe.extractor.stream.SubtitlesStream;\n+import org.schabi.newpipe.extractor.stream.VideoStream;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.List;\n+import java.util.TimeZone;\n+\n+import javax.annotation.Nullable;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertAtLeast;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsValidUrl;\n+import static org.schabi.newpipe.extractor.services.DefaultTests.defaultTestListOfItems;\n+\n+/**\n+ * Test for {@link StreamExtractor}\n+ */\n+public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<StreamExtractor>\n+        implements BaseStreamExtractorTest {\n+\n+    public abstract StreamType expectedStreamType();\n+    public abstract String expectedUploaderName();\n+    public abstract String expectedUploaderUrl();\n+    public abstract List<String> expectedDescriptionContains(); // e.g. for full links\n+    public abstract long expectedLength();\n+    public long expectedTimestamp() { return 0; }; // default: there is no timestamp\n+    public abstract long expectedViewCountAtLeast();\n+    @Nullable public abstract String expectedUploadDate(); // format: \"yyyy-MM-dd HH:mm:ss.SSS\"\n+    @Nullable public abstract String expectedTextualUploadDate();\n+    public abstract long expectedLikeCountAtLeast(); // return -1 if ratings are disabled\n+    public abstract long expectedDislikeCountAtLeast(); // return -1 if ratings are disabled\n+    public boolean expectedHasRelatedStreams() { return true; } // default: there are related videos\n+    public int expectedAgeLimit() { return StreamExtractor.NO_AGE_LIMIT; } // default: no limit\n+    @Nullable public String expectedErrorMessage() { return null; } // default: no error message\n+    public boolean expectedHasVideoStreams() { return true; } // default: there are video streams\n+    public boolean expectedHasAudioStreams() { return true; } // default: there are audio streams\n+    public boolean expectedHasSubtitles() { return true; } // default: there are subtitles streams\n+    public boolean expectedHasFrames() { return true; } // default: there are frames\n+    public boolean expectedHasNextStream() { return true; } // default: there is a next video\n+\n+    @Test\n+    @Override\n+    public void testStreamType() throws Exception {\n+        assertEquals(expectedStreamType(), extractor().getStreamType());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderName() throws Exception {\n+        assertEquals(expectedUploaderName(), extractor().getUploaderName());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderUrl() throws Exception {\n+        final String uploaderUrl = extractor().getUploaderUrl();\n+        assertIsSecureUrl(uploaderUrl);\n+        assertEquals(expectedUploaderUrl(), uploaderUrl);\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderAvatarUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getUploaderAvatarUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testThumbnailUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getThumbnailUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDescription() throws Exception {\n+        final Description description = extractor().getDescription();\n+        assertNotNull(description);\n+        assertFalse(\"description is empty\", description.getContent().isEmpty());\n+\n+        for (String s : expectedDescriptionContains()) {\n+            assertThat(description.getContent(), containsString(s));\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLength() throws Exception {\n+        assertEquals(expectedLength(), extractor().getLength());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTimestamp() throws Exception {\n+        assertEquals(expectedTimestamp(), extractor().getTimeStamp());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testViewCount() throws Exception {\n+        assertAtLeast(expectedViewCountAtLeast(), extractor().getViewCount());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploadDate() throws Exception {\n+        final DateWrapper dateWrapper = extractor().getUploadDate();\n+\n+        if (expectedUploadDate() == null) {\n+            assertNull(dateWrapper);\n+        } else {\n+            assertNotNull(dateWrapper);\n+\n+            final Calendar expectedDate = Calendar.getInstance();\n+            final Calendar actualDate = dateWrapper.date();\n+            expectedDate.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+            actualDate.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+\n+            final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.S\");\n+            expectedDate.setTime(sdf.parse(expectedUploadDate()));\n+            assertEquals(expectedDate, actualDate);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTextualUploadDate() throws Exception {\n+        assertEquals(expectedTextualUploadDate(), extractor().getTextualUploadDate());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLikeCount() throws Exception {\n+        if (expectedLikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getLikeCount());\n+        } else {\n+            assertAtLeast(expectedLikeCountAtLeast(), extractor().getLikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDislikeCount() throws Exception {\n+        if (expectedDislikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getDislikeCount());\n+        } else {\n+            assertAtLeast(expectedDislikeCountAtLeast(), extractor().getDislikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testRelatedStreams() throws Exception {\n+        final StreamInfoItemsCollector relatedStreams = extractor().getRelatedStreams();\n+\n+        if (expectedHasRelatedStreams()) {\n+            defaultTestListOfItems(extractor().getService(), relatedStreams.getItems(),\n+                    relatedStreams.getErrors());\n+        } else {\n+            assertNull(relatedStreams);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testAgeLimit() throws Exception {\n+        assertEquals(expectedAgeLimit(), extractor().getAgeLimit());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testErrorMessage() throws Exception {\n+        assertEquals(expectedErrorMessage(), extractor().getErrorMessage());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testVideoStreams() throws Exception {\n+        List<VideoStream> videoStreams = extractor().getVideoStreams();\n+        final List<VideoStream> videoOnlyStreams = extractor().getVideoOnlyStreams();\n+        assertNotNull(videoStreams);\n+        assertNotNull(videoOnlyStreams);\n+        videoStreams.addAll(videoOnlyStreams);\n+\n+        if (expectedHasVideoStreams()) {\n+            assertFalse(videoStreams.isEmpty());\n+\n+            for (VideoStream stream : videoStreams) {\n+                assertIsSecureUrl(stream.getUrl());\n+                assertFalse(stream.getResolution().isEmpty());\n+\n+                int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit a video stream: \" + formatId,\n+                        0 <= formatId && formatId < 0x100);\n+            }\n+        } else {\n+            assertTrue(videoStreams.isEmpty());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testAudioStreams() throws Exception {\n+        final List<AudioStream> audioStreams = extractor().getAudioStreams();\n+        assertNotNull(audioStreams);\n+\n+        if (expectedHasAudioStreams()) {\n+            assertFalse(audioStreams.isEmpty());\n+\n+            for (AudioStream stream : audioStreams) {\n+                assertIsSecureUrl(stream.getUrl());\n+\n+                int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n+                        0x100 <= formatId && formatId < 0x1000);\n+            }\n+        } else {\n+            assertTrue(audioStreams.isEmpty());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testSubtitles() throws Exception {\n+        List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n+        assertNotNull(subtitles);\n+\n+        if (expectedHasSubtitles()) {\n+            assertFalse(subtitles.isEmpty());\n+\n+            for (SubtitlesStream stream : subtitles) {\n+                assertIsSecureUrl(stream.getUrl());\n+\n+                int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n+                        0x1000 <= formatId && formatId < 0x10000);\n+            }\n+        } else {\n+            assertTrue(subtitles.isEmpty());\n+\n+            MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.TRANSCRIPT1,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4ace2b0dc97db6df467f41a74219776304dac6f"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3MzQyMA==", "bodyText": "Make this a variable that's declared here, because this is imho unclear", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r425073420", "createdAt": "2020-05-14T11:43:58Z", "author": {"login": "wb9688"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java", "diffHunk": "@@ -0,0 +1,297 @@\n+package org.schabi.newpipe.extractor.services;\n+\n+import org.junit.Test;\n+import org.schabi.newpipe.extractor.MediaFormat;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.AudioStream;\n+import org.schabi.newpipe.extractor.stream.Description;\n+import org.schabi.newpipe.extractor.stream.Frameset;\n+import org.schabi.newpipe.extractor.stream.StreamExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+import org.schabi.newpipe.extractor.stream.StreamType;\n+import org.schabi.newpipe.extractor.stream.SubtitlesStream;\n+import org.schabi.newpipe.extractor.stream.VideoStream;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.List;\n+import java.util.TimeZone;\n+\n+import javax.annotation.Nullable;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertAtLeast;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsValidUrl;\n+import static org.schabi.newpipe.extractor.services.DefaultTests.defaultTestListOfItems;\n+\n+/**\n+ * Test for {@link StreamExtractor}\n+ */\n+public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<StreamExtractor>\n+        implements BaseStreamExtractorTest {\n+\n+    public abstract StreamType expectedStreamType();\n+    public abstract String expectedUploaderName();\n+    public abstract String expectedUploaderUrl();\n+    public abstract List<String> expectedDescriptionContains(); // e.g. for full links\n+    public abstract long expectedLength();\n+    public long expectedTimestamp() { return 0; }; // default: there is no timestamp\n+    public abstract long expectedViewCountAtLeast();\n+    @Nullable public abstract String expectedUploadDate(); // format: \"yyyy-MM-dd HH:mm:ss.SSS\"\n+    @Nullable public abstract String expectedTextualUploadDate();\n+    public abstract long expectedLikeCountAtLeast(); // return -1 if ratings are disabled\n+    public abstract long expectedDislikeCountAtLeast(); // return -1 if ratings are disabled\n+    public boolean expectedHasRelatedStreams() { return true; } // default: there are related videos\n+    public int expectedAgeLimit() { return StreamExtractor.NO_AGE_LIMIT; } // default: no limit\n+    @Nullable public String expectedErrorMessage() { return null; } // default: no error message\n+    public boolean expectedHasVideoStreams() { return true; } // default: there are video streams\n+    public boolean expectedHasAudioStreams() { return true; } // default: there are audio streams\n+    public boolean expectedHasSubtitles() { return true; } // default: there are subtitles streams\n+    public boolean expectedHasFrames() { return true; } // default: there are frames\n+    public boolean expectedHasNextStream() { return true; } // default: there is a next video\n+\n+    @Test\n+    @Override\n+    public void testStreamType() throws Exception {\n+        assertEquals(expectedStreamType(), extractor().getStreamType());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderName() throws Exception {\n+        assertEquals(expectedUploaderName(), extractor().getUploaderName());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderUrl() throws Exception {\n+        final String uploaderUrl = extractor().getUploaderUrl();\n+        assertIsSecureUrl(uploaderUrl);\n+        assertEquals(expectedUploaderUrl(), uploaderUrl);\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderAvatarUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getUploaderAvatarUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testThumbnailUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getThumbnailUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDescription() throws Exception {\n+        final Description description = extractor().getDescription();\n+        assertNotNull(description);\n+        assertFalse(\"description is empty\", description.getContent().isEmpty());\n+\n+        for (String s : expectedDescriptionContains()) {\n+            assertThat(description.getContent(), containsString(s));\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLength() throws Exception {\n+        assertEquals(expectedLength(), extractor().getLength());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTimestamp() throws Exception {\n+        assertEquals(expectedTimestamp(), extractor().getTimeStamp());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testViewCount() throws Exception {\n+        assertAtLeast(expectedViewCountAtLeast(), extractor().getViewCount());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploadDate() throws Exception {\n+        final DateWrapper dateWrapper = extractor().getUploadDate();\n+\n+        if (expectedUploadDate() == null) {\n+            assertNull(dateWrapper);\n+        } else {\n+            assertNotNull(dateWrapper);\n+\n+            final Calendar expectedDate = Calendar.getInstance();\n+            final Calendar actualDate = dateWrapper.date();\n+            expectedDate.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+            actualDate.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+\n+            final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.S\");\n+            expectedDate.setTime(sdf.parse(expectedUploadDate()));\n+            assertEquals(expectedDate, actualDate);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTextualUploadDate() throws Exception {\n+        assertEquals(expectedTextualUploadDate(), extractor().getTextualUploadDate());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLikeCount() throws Exception {\n+        if (expectedLikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getLikeCount());\n+        } else {\n+            assertAtLeast(expectedLikeCountAtLeast(), extractor().getLikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDislikeCount() throws Exception {\n+        if (expectedDislikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getDislikeCount());\n+        } else {\n+            assertAtLeast(expectedDislikeCountAtLeast(), extractor().getDislikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testRelatedStreams() throws Exception {\n+        final StreamInfoItemsCollector relatedStreams = extractor().getRelatedStreams();\n+\n+        if (expectedHasRelatedStreams()) {\n+            defaultTestListOfItems(extractor().getService(), relatedStreams.getItems(),\n+                    relatedStreams.getErrors());\n+        } else {\n+            assertNull(relatedStreams);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testAgeLimit() throws Exception {\n+        assertEquals(expectedAgeLimit(), extractor().getAgeLimit());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testErrorMessage() throws Exception {\n+        assertEquals(expectedErrorMessage(), extractor().getErrorMessage());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testVideoStreams() throws Exception {\n+        List<VideoStream> videoStreams = extractor().getVideoStreams();\n+        final List<VideoStream> videoOnlyStreams = extractor().getVideoOnlyStreams();\n+        assertNotNull(videoStreams);\n+        assertNotNull(videoOnlyStreams);\n+        videoStreams.addAll(videoOnlyStreams);\n+\n+        if (expectedHasVideoStreams()) {\n+            assertFalse(videoStreams.isEmpty());\n+\n+            for (VideoStream stream : videoStreams) {\n+                assertIsSecureUrl(stream.getUrl());\n+                assertFalse(stream.getResolution().isEmpty());\n+\n+                int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit a video stream: \" + formatId,\n+                        0 <= formatId && formatId < 0x100);\n+            }\n+        } else {\n+            assertTrue(videoStreams.isEmpty());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testAudioStreams() throws Exception {\n+        final List<AudioStream> audioStreams = extractor().getAudioStreams();\n+        assertNotNull(audioStreams);\n+\n+        if (expectedHasAudioStreams()) {\n+            assertFalse(audioStreams.isEmpty());\n+\n+            for (AudioStream stream : audioStreams) {\n+                assertIsSecureUrl(stream.getUrl());\n+\n+                int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n+                        0x100 <= formatId && formatId < 0x1000);\n+            }\n+        } else {\n+            assertTrue(audioStreams.isEmpty());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testSubtitles() throws Exception {\n+        List<SubtitlesStream> subtitles = extractor().getSubtitlesDefault();\n+        assertNotNull(subtitles);\n+\n+        if (expectedHasSubtitles()) {\n+            assertFalse(subtitles.isEmpty());\n+\n+            for (SubtitlesStream stream : subtitles) {\n+                assertIsSecureUrl(stream.getUrl());\n+\n+                int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n+                        0x1000 <= formatId && formatId < 0x10000);\n+            }\n+        } else {\n+            assertTrue(subtitles.isEmpty());\n+\n+            MediaFormat[] formats = {MediaFormat.VTT, MediaFormat.TTML, MediaFormat.TRANSCRIPT1,\n+                    MediaFormat.TRANSCRIPT2, MediaFormat.TRANSCRIPT3, MediaFormat.SRT};\n+            for (MediaFormat format : formats) {\n+                subtitles = extractor().getSubtitles(format);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4ace2b0dc97db6df467f41a74219776304dac6f"}, "originalPosition": 262}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e4ace2b0dc97db6df467f41a74219776304dac6f", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/e4ace2b0dc97db6df467f41a74219776304dac6f", "committedDate": "2020-05-09T14:23:48Z", "message": "[MediaCCC] Return empty list of video-only streams instead of null"}, "afterCommit": {"oid": "fa29b78f77e1e323ec0512643f3bcaaf6bd13df0", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/fa29b78f77e1e323ec0512643f3bcaaf6bd13df0", "committedDate": "2020-05-16T18:27:58Z", "message": "[Test] Add sub channel name, url and thumbnail tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fa29b78f77e1e323ec0512643f3bcaaf6bd13df0", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/fa29b78f77e1e323ec0512643f3bcaaf6bd13df0", "committedDate": "2020-05-16T18:27:58Z", "message": "[Test] Add sub channel name, url and thumbnail tests"}, "afterCommit": {"oid": "d22a9638af630257daeab920f1adfb8aabc159b6", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/d22a9638af630257daeab920f1adfb8aabc159b6", "committedDate": "2020-05-16T18:29:42Z", "message": "[Test] Add sub channel name, url and thumbnail tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d22a9638af630257daeab920f1adfb8aabc159b6", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/d22a9638af630257daeab920f1adfb8aabc159b6", "committedDate": "2020-05-16T18:29:42Z", "message": "[Test] Add sub channel name, url and thumbnail tests"}, "afterCommit": {"oid": "d216b051dc5da6c63d601d243c8fa85492430894", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/d216b051dc5da6c63d601d243c8fa85492430894", "committedDate": "2020-05-16T19:19:18Z", "message": "[YouTube] Consider dates as GMT and not as local"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d216b051dc5da6c63d601d243c8fa85492430894", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/d216b051dc5da6c63d601d243c8fa85492430894", "committedDate": "2020-05-16T19:19:18Z", "message": "[YouTube] Consider dates as GMT and not as local"}, "afterCommit": {"oid": "95367dd038ba04e680290a2b56a7c34216c3dab1", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/95367dd038ba04e680290a2b56a7c34216c3dab1", "committedDate": "2020-05-16T19:23:38Z", "message": "[YouTube/MediaCCC] Consider dates as GMT and not as local"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "95367dd038ba04e680290a2b56a7c34216c3dab1", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/95367dd038ba04e680290a2b56a7c34216c3dab1", "committedDate": "2020-05-16T19:23:38Z", "message": "[YouTube/MediaCCC] Consider dates as GMT and not as local"}, "afterCommit": {"oid": "1ef0687e766dfa9a792039856052800adc61cc23", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/1ef0687e766dfa9a792039856052800adc61cc23", "committedDate": "2020-06-14T08:20:19Z", "message": "[YouTube/MediaCCC] Consider dates as GMT and not as local"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "93d731bd47dbb5a416d90e6408271026e9d7aaf8", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/93d731bd47dbb5a416d90e6408271026e9d7aaf8", "committedDate": "2020-06-14T17:51:54Z", "message": "[PeerTube] Change age restricted video in tests\n\nThe old one wasn't available anymore"}, "afterCommit": {"oid": "abbeacb312e1765afd9008cb61e6808c4544b701", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/abbeacb312e1765afd9008cb61e6808c4544b701", "committedDate": "2020-06-14T18:19:43Z", "message": "[PeerTube] Change age restricted video in tests\n\nThe old one wasn't available anymore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d7a86e664717d09e33371bc87c289903b19feb2", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/1d7a86e664717d09e33371bc87c289903b19feb2", "committedDate": "2020-10-24T16:22:44Z", "message": "[Test] Add base classes for stream extractor tests\n\nRefactor all stream extractor tests to use new base class.\n\nRemove check if upload date is in the past: this does not have to hold true: youtube premieres turn up in search results even though they are in the future"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7fb867c1662457c51d6579f2803c913f356126bf", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/7fb867c1662457c51d6579f2803c913f356126bf", "committedDate": "2020-10-24T16:22:44Z", "message": "[YouTube] Fix error message obtaining when there is none"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cd410f3fc304a9eb620fa28ba39f938e4565c2b", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/7cd410f3fc304a9eb620fa28ba39f938e4565c2b", "committedDate": "2020-10-24T16:23:45Z", "message": "[YouTube] Return 0 when there is no timestamp, not -2, as per javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "072bae321fdf9cca340d154d02b388623fadcc8a", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/072bae321fdf9cca340d154d02b388623fadcc8a", "committedDate": "2020-10-24T16:23:46Z", "message": "[YouTube] Fix frame extraction for livestreams\n\nUse saved playerResponse instead of parsing json every time"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b2cfb4ca2e9fbe9457e2a4551d97f7fa8bc6fec", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/3b2cfb4ca2e9fbe9457e2a4551d97f7fa8bc6fec", "committedDate": "2020-10-24T16:23:46Z", "message": "[SoundCloud] Return empty video stream list instead of null\n\nAlso replace every instance of `return new ArrayList<>();` with `return Collections.emptyList();`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4349be13af66aaf9af4c244d53cce1702b3a0782", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/4349be13af66aaf9af4c244d53cce1702b3a0782", "committedDate": "2020-10-24T16:25:56Z", "message": "[PeerTube] Return empty audio stream list instead of null"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ae3cb6d07cea6abb71d9c69eb2b1b276e5b795f", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/7ae3cb6d07cea6abb71d9c69eb2b1b276e5b795f", "committedDate": "2020-10-24T16:33:11Z", "message": "[PeerTube] Fix link handler inconsistency providing API links"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aeeae87641f8ca41e62b985ad20f0cf1ed565aa6", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/aeeae87641f8ca41e62b985ad20f0cf1ed565aa6", "committedDate": "2020-10-24T16:33:42Z", "message": "[PeerTube] Parse timestamp from url (previously unimplemented)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b461da792f375a8527587ff13ff8a6ed8c6f43b4", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/b461da792f375a8527587ff13ff8a6ed8c6f43b4", "committedDate": "2020-10-24T16:34:34Z", "message": "[MediaCCC] Fix link handler inconsistency providing API links"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b2a1829d466e0f1b3d0b6c5a43de49bfde5a287", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/3b2a1829d466e0f1b3d0b6c5a43de49bfde5a287", "committedDate": "2020-10-24T16:34:57Z", "message": "[MediaCCC] Extract tags"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "492db83ccff20a71a24aaab94e8968be3d4fffcd", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/492db83ccff20a71a24aaab94e8968be3d4fffcd", "committedDate": "2020-10-24T16:34:57Z", "message": "[MediaCCC] Return null instead of empty items collector\n\nAs per the documentation in the base getRelatedStreams()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d130fd79c31338293134f8416500f135fc57a63a", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/d130fd79c31338293134f8416500f135fc57a63a", "committedDate": "2020-10-24T16:36:21Z", "message": "[PeerTube] Prepend \"accounts/\" to channel id for backward compatibility"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c980b2d648b7eb72fa22482a390114da1d3f5ae", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/0c980b2d648b7eb72fa22482a390114da1d3f5ae", "committedDate": "2020-10-24T16:36:21Z", "message": "[PeerTube] Improve channel and stream link handler tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07a90d116a0059a027f158f59b5fe9d2720f361f", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/07a90d116a0059a027f158f59b5fe9d2720f361f", "committedDate": "2020-10-24T16:36:21Z", "message": "[MediaCCC] Use regex to parse stream and conference urls"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af5b8b1915a5ca4d7a79341e550ca64eda5e94e4", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/af5b8b1915a5ca4d7a79341e550ca64eda5e94e4", "committedDate": "2020-10-24T16:36:21Z", "message": "[MediaCCC] Add tests for stream and conference link handlers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcb9b6f855ddd5345a6cefcc9b82a0f5138719dd", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/fcb9b6f855ddd5345a6cefcc9b82a0f5138719dd", "committedDate": "2020-10-24T16:36:22Z", "message": "[MediaCCC] Use final when possible, ide refactorings\n\nRefactorings on `throws` clause"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06430c4749295309727f72c6ac18f036f22bdc19", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/06430c4749295309727f72c6ac18f036f22bdc19", "committedDate": "2020-10-24T16:39:06Z", "message": "[PeerTube] Use final when possible, ide refactorings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55bc01d1ce48404d6cb11cc419685696ba02eac5", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/55bc01d1ce48404d6cb11cc419685696ba02eac5", "committedDate": "2020-10-24T16:39:55Z", "message": "[SoundCloud] Use final when possible, ide refactorings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3191bd6c703e1a410a03b50c2d0e4cbe7b30d7b8", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/3191bd6c703e1a410a03b50c2d0e4cbe7b30d7b8", "committedDate": "2020-10-24T16:39:55Z", "message": "[YouTube] Use final when possible"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68d23defba04e3db08462d8268903ec23056fd5f", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/68d23defba04e3db08462d8268903ec23056fd5f", "committedDate": "2020-10-24T16:39:55Z", "message": "[YouTube] Do not catch every exception on getErrorMessage\n\n@B0pol suggestion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8dc3f28618d38c692f3abee1ae612e54ac1de3ee", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/8dc3f28618d38c692f3abee1ae612e54ac1de3ee", "committedDate": "2020-10-24T16:39:55Z", "message": "[PeerTube] Test one channel url with api and one without"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4097d8d0119cfc71a3b969aa117df924af60e3d", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/a4097d8d0119cfc71a3b969aa117df924af60e3d", "committedDate": "2020-10-24T16:39:55Z", "message": "[MediaCCC] Return empty list of video-only streams instead of null"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a087b092b401977bd58b279a3f285549db0e2160", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/a087b092b401977bd58b279a3f285549db0e2160", "committedDate": "2020-10-24T16:39:55Z", "message": "[Test] Improve code style and add final"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6127826571a9041cc9d9d264ac97239249f2aff9", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/6127826571a9041cc9d9d264ac97239249f2aff9", "committedDate": "2020-10-24T16:41:41Z", "message": "[Test] Add stream metadata tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ce711f40fe3667a9184da513a794d83c098985d", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/8ce711f40fe3667a9184da513a794d83c098985d", "committedDate": "2020-10-24T16:41:41Z", "message": "[Test] Add sub channel name, url and thumbnail tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0b14644bb9937d73137a4b8c0121a13defe9b56", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/d0b14644bb9937d73137a4b8c0121a13defe9b56", "committedDate": "2020-10-24T16:41:41Z", "message": "[YouTube/MediaCCC] Consider dates as GMT and not as local"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "880ff04a5c17086711c0d6d14d6aa46cf1943c54", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/880ff04a5c17086711c0d6d14d6aa46cf1943c54", "committedDate": "2020-10-24T16:41:41Z", "message": "[Test] Add stream dash mpd url test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c55ea93216a1bb1d75e16abf0509cdb9b42c61b", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/3c55ea93216a1bb1d75e16abf0509cdb9b42c61b", "committedDate": "2020-10-24T16:41:41Z", "message": "[PeerTube] Change age restricted video in tests\n\nThe old one wasn't available anymore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f11fe87688beb27a051608c4f0facb2d8214b6d1", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/f11fe87688beb27a051608c4f0facb2d8214b6d1", "committedDate": "2020-10-24T16:41:41Z", "message": "[YouTube] Replace outdated PewDiePie video test with another one\n\nThe old video was made private, and this video (wedding) is probably never going to be removed."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0ffd6ec5656ae32d2bf26db273c598664d3ac531", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/0ffd6ec5656ae32d2bf26db273c598664d3ac531", "committedDate": "2020-08-14T09:09:29Z", "message": "[YouTube] Replace outdated PewDiePie video test with another one\n\nThe old video was made private, and this video (wedding) is probably never going to be removed."}, "afterCommit": {"oid": "f11fe87688beb27a051608c4f0facb2d8214b6d1", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/f11fe87688beb27a051608c4f0facb2d8214b6d1", "committedDate": "2020-10-24T16:41:41Z", "message": "[YouTube] Replace outdated PewDiePie video test with another one\n\nThe old video was made private, and this video (wedding) is probably never going to be removed."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MjkxMjU0", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#pullrequestreview-516291254", "createdAt": "2020-10-24T16:51:40Z", "commit": {"oid": "f11fe87688beb27a051608c4f0facb2d8214b6d1"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxNjo1MTo0MFrOHny94g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxNzoxNDozMVrOHnzGKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5MTU1NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n          \n          \n            \n                        final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r511491554", "createdAt": "2020-10-24T16:51:40Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCParsingHelper.java", "diffHunk": "@@ -6,14 +6,17 @@\n import java.text.SimpleDateFormat;\n import java.util.Calendar;\n import java.util.Date;\n+import java.util.TimeZone;\n \n public final class MediaCCCParsingHelper {\n     private MediaCCCParsingHelper() { }\n \n     public static Calendar parseDateFrom(final String textualUploadDate) throws ParsingException {\n         Date date;\n         try {\n-            date = new SimpleDateFormat(\"yyyy-MM-dd\").parse(textualUploadDate);\n+            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f11fe87688beb27a051608c4f0facb2d8214b6d1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5MzY3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n          \n          \n            \n                        final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r511493672", "createdAt": "2020-10-24T17:14:31Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java", "diffHunk": "@@ -185,7 +185,9 @@ public static String getFeedUrlFrom(final String channelIdOrUser) {\n     public static Calendar parseDateFrom(String textualUploadDate) throws ParsingException {\n         Date date;\n         try {\n-            date = new SimpleDateFormat(\"yyyy-MM-dd\").parse(textualUploadDate);\n+            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f11fe87688beb27a051608c4f0facb2d8214b6d1"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MzAxNTkw", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#pullrequestreview-516301590", "createdAt": "2020-10-24T19:28:06Z", "commit": {"oid": "d007fb31dead50952899a87ed7facb590c18b829"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxOToyODowNlrOHnz2aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQyMDoxMDo1NFrOHn0FGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUwNjAyNA==", "bodyText": "Did you test against NewPipe this part? Will it create NullPointerException or there is already a null check?", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r511506024", "createdAt": "2020-10-24T19:28:06Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java", "diffHunk": "@@ -216,7 +219,7 @@ public StreamType getStreamType() {\n \n     @Override\n     public StreamInfoItemsCollector getRelatedStreams() {\n-        return new StreamInfoItemsCollector(getServiceId());\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d007fb31dead50952899a87ed7facb590c18b829"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUwOTc4NA==", "bodyText": "Could you explain why 0x100 <= formatId < 0x1000 and also above (video streams) or below (subtitles) and add comments for it?", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#discussion_r511509784", "createdAt": "2020-10-24T20:10:54Z", "author": {"login": "B0pol"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java", "diffHunk": "@@ -0,0 +1,382 @@\n+package org.schabi.newpipe.extractor.services;\n+\n+import org.junit.Test;\n+import org.schabi.newpipe.extractor.MediaFormat;\n+import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.AudioStream;\n+import org.schabi.newpipe.extractor.stream.Description;\n+import org.schabi.newpipe.extractor.stream.Frameset;\n+import org.schabi.newpipe.extractor.stream.StreamExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+import org.schabi.newpipe.extractor.stream.StreamType;\n+import org.schabi.newpipe.extractor.stream.SubtitlesStream;\n+import org.schabi.newpipe.extractor.stream.VideoStream;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import javax.annotation.Nullable;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertAtLeast;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertEqualsOrderIndependent;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsValidUrl;\n+import static org.schabi.newpipe.extractor.services.DefaultTests.defaultTestListOfItems;\n+\n+/**\n+ * Test for {@link StreamExtractor}\n+ */\n+public abstract class DefaultStreamExtractorTest extends DefaultExtractorTest<StreamExtractor>\n+        implements BaseStreamExtractorTest {\n+\n+    public abstract StreamType expectedStreamType();\n+    public abstract String expectedUploaderName();\n+    public abstract String expectedUploaderUrl();\n+    public String expectedSubChannelName() { return \"\"; } // default: there is no subchannel\n+    public String expectedSubChannelUrl() { return \"\"; } // default: there is no subchannel\n+    public abstract List<String> expectedDescriptionContains(); // e.g. for full links\n+    public abstract long expectedLength();\n+    public long expectedTimestamp() { return 0; } // default: there is no timestamp\n+    public abstract long expectedViewCountAtLeast();\n+    @Nullable public abstract String expectedUploadDate(); // format: \"yyyy-MM-dd HH:mm:ss.SSS\"\n+    @Nullable public abstract String expectedTextualUploadDate();\n+    public abstract long expectedLikeCountAtLeast(); // return -1 if ratings are disabled\n+    public abstract long expectedDislikeCountAtLeast(); // return -1 if ratings are disabled\n+    public boolean expectedHasRelatedStreams() { return true; } // default: there are related videos\n+    public int expectedAgeLimit() { return StreamExtractor.NO_AGE_LIMIT; } // default: no limit\n+    @Nullable public String expectedErrorMessage() { return null; } // default: no error message\n+    public boolean expectedHasVideoStreams() { return true; } // default: there are video streams\n+    public boolean expectedHasAudioStreams() { return true; } // default: there are audio streams\n+    public boolean expectedHasSubtitles() { return true; } // default: there are subtitles streams\n+    @Nullable public String expectedDashMpdUrlContains() { return null; } // default: no dash mpd\n+    public boolean expectedHasFrames() { return true; } // default: there are frames\n+    public String expectedHost() { return \"\"; } // default: no host for centralized platforms\n+    public String expectedPrivacy() { return \"\"; } // default: no privacy policy available\n+    public String expectedCategory() { return \"\"; } // default: no category\n+    public String expectedLicence() { return \"\"; } // default: no licence\n+    public Locale expectedLanguageInfo() { return null; } // default: no language info available\n+    public List<String> expectedTags() { return Collections.emptyList(); } // default: no tags\n+    public String expectedSupportInfo() { return \"\"; } // default: no support info available\n+\n+    @Test\n+    @Override\n+    public void testStreamType() throws Exception {\n+        assertEquals(expectedStreamType(), extractor().getStreamType());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderName() throws Exception {\n+        assertEquals(expectedUploaderName(), extractor().getUploaderName());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderUrl() throws Exception {\n+        final String uploaderUrl = extractor().getUploaderUrl();\n+        assertIsSecureUrl(uploaderUrl);\n+        assertEquals(expectedUploaderUrl(), uploaderUrl);\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploaderAvatarUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getUploaderAvatarUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testSubChannelName() throws Exception {\n+        assertEquals(expectedSubChannelName(), extractor().getSubChannelName());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testSubChannelUrl() throws Exception {\n+        final String subChannelUrl = extractor().getSubChannelUrl();\n+        assertEquals(expectedSubChannelUrl(), subChannelUrl);\n+\n+        if (!expectedSubChannelUrl().isEmpty()) {\n+            // this stream has a subchannel\n+            assertIsSecureUrl(subChannelUrl);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testSubChannelAvatarUrl() throws Exception {\n+        if (expectedSubChannelName().isEmpty() && expectedSubChannelUrl().isEmpty()) {\n+            // this stream has no subchannel\n+            assertEquals(\"\", extractor().getSubChannelAvatarUrl());\n+        } else {\n+            // this stream has a subchannel\n+            assertIsSecureUrl(extractor().getSubChannelAvatarUrl());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testThumbnailUrl() throws Exception {\n+        assertIsSecureUrl(extractor().getThumbnailUrl());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDescription() throws Exception {\n+        final Description description = extractor().getDescription();\n+        assertNotNull(description);\n+        assertFalse(\"description is empty\", description.getContent().isEmpty());\n+\n+        for (final String s : expectedDescriptionContains()) {\n+            assertThat(description.getContent(), containsString(s));\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLength() throws Exception {\n+        assertEquals(expectedLength(), extractor().getLength());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTimestamp() throws Exception {\n+        assertEquals(expectedTimestamp(), extractor().getTimeStamp());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testViewCount() throws Exception {\n+        assertAtLeast(expectedViewCountAtLeast(), extractor().getViewCount());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUploadDate() throws Exception {\n+        final DateWrapper dateWrapper = extractor().getUploadDate();\n+\n+        if (expectedUploadDate() == null) {\n+            assertNull(dateWrapper);\n+        } else {\n+            assertNotNull(dateWrapper);\n+\n+            final Calendar expectedDate = Calendar.getInstance();\n+            final Calendar actualDate = dateWrapper.date();\n+\n+            final SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.S\");\n+            sdf.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+            expectedDate.setTime(sdf.parse(expectedUploadDate()));\n+            assertEquals(expectedDate, actualDate);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testTextualUploadDate() throws Exception {\n+        assertEquals(expectedTextualUploadDate(), extractor().getTextualUploadDate());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLikeCount() throws Exception {\n+        if (expectedLikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getLikeCount());\n+        } else {\n+            assertAtLeast(expectedLikeCountAtLeast(), extractor().getLikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testDislikeCount() throws Exception {\n+        if (expectedDislikeCountAtLeast() == -1) {\n+            assertEquals(-1, extractor().getDislikeCount());\n+        } else {\n+            assertAtLeast(expectedDislikeCountAtLeast(), extractor().getDislikeCount());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testRelatedStreams() throws Exception {\n+        final StreamInfoItemsCollector relatedStreams = extractor().getRelatedStreams();\n+\n+        if (expectedHasRelatedStreams()) {\n+            defaultTestListOfItems(extractor().getService(), relatedStreams.getItems(),\n+                    relatedStreams.getErrors());\n+        } else {\n+            assertNull(relatedStreams);\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testAgeLimit() throws Exception {\n+        assertEquals(expectedAgeLimit(), extractor().getAgeLimit());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testErrorMessage() throws Exception {\n+        assertEquals(expectedErrorMessage(), extractor().getErrorMessage());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testVideoStreams() throws Exception {\n+        final List<VideoStream> videoStreams = extractor().getVideoStreams();\n+        final List<VideoStream> videoOnlyStreams = extractor().getVideoOnlyStreams();\n+        assertNotNull(videoStreams);\n+        assertNotNull(videoOnlyStreams);\n+        videoStreams.addAll(videoOnlyStreams);\n+\n+        if (expectedHasVideoStreams()) {\n+            assertFalse(videoStreams.isEmpty());\n+\n+            for (final VideoStream stream : videoStreams) {\n+                assertIsSecureUrl(stream.getUrl());\n+                assertFalse(stream.getResolution().isEmpty());\n+\n+                final int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit a video stream: \" + formatId,\n+                        0 <= formatId && formatId < 0x100);\n+            }\n+        } else {\n+            assertTrue(videoStreams.isEmpty());\n+        }\n+    }\n+\n+    @Test\n+    @Override\n+    public void testAudioStreams() throws Exception {\n+        final List<AudioStream> audioStreams = extractor().getAudioStreams();\n+        assertNotNull(audioStreams);\n+\n+        if (expectedHasAudioStreams()) {\n+            assertFalse(audioStreams.isEmpty());\n+\n+            for (final AudioStream stream : audioStreams) {\n+                assertIsSecureUrl(stream.getUrl());\n+\n+                final int formatId = stream.getFormatId();\n+                assertTrue(\"format id does not fit an audio stream: \" + formatId,\n+                        0x100 <= formatId && formatId < 0x1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d007fb31dead50952899a87ed7facb590c18b829"}, "originalPosition": 274}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d007fb31dead50952899a87ed7facb590c18b829", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/d007fb31dead50952899a87ed7facb590c18b829", "committedDate": "2020-10-24T19:19:14Z", "message": "Add some missing final-s"}, "afterCommit": {"oid": "cd32e7436ea4781939608c8a9ed36b72f2173bc0", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/cd32e7436ea4781939608c8a9ed36b72f2173bc0", "committedDate": "2020-10-25T07:09:53Z", "message": "Add some missing finals and nullables"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57e7994c9e46d068ba53cb320c91c22ec24f76de", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/57e7994c9e46d068ba53cb320c91c22ec24f76de", "committedDate": "2020-10-25T07:12:41Z", "message": "Add some missing finals, nullables and comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cd32e7436ea4781939608c8a9ed36b72f2173bc0", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/cd32e7436ea4781939608c8a9ed36b72f2173bc0", "committedDate": "2020-10-25T07:09:53Z", "message": "Add some missing finals and nullables"}, "afterCommit": {"oid": "57e7994c9e46d068ba53cb320c91c22ec24f76de", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/57e7994c9e46d068ba53cb320c91c22ec24f76de", "committedDate": "2020-10-25T07:12:41Z", "message": "Add some missing finals, nullables and comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MzgwMDMx", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/309#pullrequestreview-516380031", "createdAt": "2020-10-25T17:20:50Z", "commit": {"oid": "57e7994c9e46d068ba53cb320c91c22ec24f76de"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3994, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}