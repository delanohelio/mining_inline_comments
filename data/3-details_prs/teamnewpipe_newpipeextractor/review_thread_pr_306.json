{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxMzY4Mjc4", "number": 306, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoyODozNFrODwZ6Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMlQyMDozMDoxMVrOFZ_5yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDgyNzE1OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoyODozNFrOGDYsdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwODozMjozNFrOGETcFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIwMzUxMQ==", "bodyText": "You can't simply do that, see https://en.wikipedia.org/wiki/ISO_3166-1#Officially_assigned_code_elements https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r406203511", "createdAt": "2020-04-09T13:28:34Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java", "diffHunk": "@@ -249,13 +250,18 @@ public String getLicence() throws ParsingException {\n \n     @Override\n     public Locale getLanguageInfo() throws ParsingException {\n-        return null;\n+        String code = JsonUtils.getString(data, \"original_language\");\n+        code = code.substring(0, 2); //remove the last letter. new Locale (three_letter_code) don't work", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ddd76951a9914d959126cbd5f00d1aec4b5d0d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMyNTE5Nw==", "bodyText": "Yes, I know.\nFrom Java Locale documentation\n\nThree-letter language/country(region) codes\n\n\nThe Locale constructors have always specified that the language and the country param be two characters in length, although in practice they have accepted any length. The specification has now been relaxed to allow language codes of two to eight characters and country (region) codes of two to three characters, and in particular, three-letter language codes and three-digit region codes as specified in the IANA Language Subtag Registry. For compatibility, the implementation still does not impose a length constraint.\n\nBut in practice, it doesn't work.\nThe Locale object is created but\u2026 it's weird and seems thing aren't working with it, and most important getDisplayLanguage or getDisplayName. Try this in\nLocale locale = new Locale(\"deu\");\nSystem.out.println(locale.getDisplayLanguage(Locale.ENGLISH)); //deu, it should be German\nLocale locale = new Locale(\"de\");\nSystem.out.println(locale.getDisplayLanguage(Locale.ENGLISH)); //German\nSo if you have a proper way to convert three letter codes to two, I'd like to know.\nyou can try with eng, deu, fra\u2026 it never works, and also, new Locale(\"deu\").equals(new Locale(\"de\")) is false.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r406325197", "createdAt": "2020-04-09T16:25:30Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java", "diffHunk": "@@ -249,13 +250,18 @@ public String getLicence() throws ParsingException {\n \n     @Override\n     public Locale getLanguageInfo() throws ParsingException {\n-        return null;\n+        String code = JsonUtils.getString(data, \"original_language\");\n+        code = code.substring(0, 2); //remove the last letter. new Locale (three_letter_code) don't work", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIwMzUxMQ=="}, "originalCommit": {"oid": "d2ddd76951a9914d959126cbd5f00d1aec4b5d0d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzNzgxMg==", "bodyText": "@B0pol: You should use the bibliographic ones (ISO 639-2/B), not the terminology ones (ISO 639-2/T). I.e. ger instead of deu. Does YouTube return B or T?\nAlso, you can't simply remove the last character, as that doesn't work for all languages.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r406337812", "createdAt": "2020-04-09T16:46:23Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java", "diffHunk": "@@ -249,13 +250,18 @@ public String getLicence() throws ParsingException {\n \n     @Override\n     public Locale getLanguageInfo() throws ParsingException {\n-        return null;\n+        String code = JsonUtils.getString(data, \"original_language\");\n+        code = code.substring(0, 2); //remove the last letter. new Locale (three_letter_code) don't work", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIwMzUxMQ=="}, "originalCommit": {"oid": "d2ddd76951a9914d959126cbd5f00d1aec4b5d0d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2NTk3NA==", "bodyText": "It's MediaCCC, not YouTube.\nIt MediaCCC gives deu then ISO 639-3 (or 639-2/T???) and Java natively handles ISO 639-2/B through new Locale(\"ISO 639-2/B code\").\nThough java has Locale#getISO3Language(), so you can do a 639-3 -> 639-1 map. And if it fails, remove last letter. That's the best thing we can do, ISO codes are not backward compatible lol, and Java doesn't handle all of them.\nSee Localization.getLocaleFromThreeLetterCode(String code) in my latest commit.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r407165974", "createdAt": "2020-04-12T08:32:34Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java", "diffHunk": "@@ -249,13 +250,18 @@ public String getLicence() throws ParsingException {\n \n     @Override\n     public Locale getLanguageInfo() throws ParsingException {\n-        return null;\n+        String code = JsonUtils.getString(data, \"original_language\");\n+        code = code.substring(0, 2); //remove the last letter. new Locale (three_letter_code) don't work", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIwMzUxMQ=="}, "originalCommit": {"oid": "d2ddd76951a9914d959126cbd5f00d1aec4b5d0d"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDgyODQzOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoyODo1MFrOGDYtMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNTowODo0MFrOGDdCvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIwMzY5OQ==", "bodyText": "Why did you do this?", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r406203699", "createdAt": "2020-04-09T13:28:50Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -121,12 +99,14 @@ public String getName() throws ParsingException {\n \n         try {\n             title = getTextFromObject(getVideoPrimaryInfoRenderer().getObject(\"title\"));\n-        } catch (Exception ignored) {}\n+        } catch (Exception ignored) {\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ddd76951a9914d959126cbd5f00d1aec4b5d0d"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI3NDc1MA==", "bodyText": "Ctrl alt l", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r406274750", "createdAt": "2020-04-09T15:08:40Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -121,12 +99,14 @@ public String getName() throws ParsingException {\n \n         try {\n             title = getTextFromObject(getVideoPrimaryInfoRenderer().getObject(\"title\"));\n-        } catch (Exception ignored) {}\n+        } catch (Exception ignored) {\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIwMzY5OQ=="}, "originalCommit": {"oid": "d2ddd76951a9914d959126cbd5f00d1aec4b5d0d"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDgzODkyOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzozMToxM1rOGDYzqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjo1ODoxM1rOGDhUNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIwNTM1Mg==", "bodyText": "Is there a reason why you don't just do data.getString(\"original_language\")?", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r406205352", "createdAt": "2020-04-09T13:31:13Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java", "diffHunk": "@@ -249,13 +250,18 @@ public String getLicence() throws ParsingException {\n \n     @Override\n     public Locale getLanguageInfo() throws ParsingException {\n-        return null;\n+        String code = JsonUtils.getString(data, \"original_language\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ddd76951a9914d959126cbd5f00d1aec4b5d0d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzMjk4Mg==", "bodyText": "No, I don't know. Why people created JsonUtils.getString then?", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r406332982", "createdAt": "2020-04-09T16:38:12Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java", "diffHunk": "@@ -249,13 +250,18 @@ public String getLicence() throws ParsingException {\n \n     @Override\n     public Locale getLanguageInfo() throws ParsingException {\n-        return null;\n+        String code = JsonUtils.getString(data, \"original_language\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIwNTM1Mg=="}, "originalCommit": {"oid": "d2ddd76951a9914d959126cbd5f00d1aec4b5d0d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM0NDc1OQ==", "bodyText": "I think you could use it to do JsonUtils.getString(data, \"response.crappyRenderer.title.simpleText\") instead of data.getObject(\"response\").getObject(\"crappyRenderer\").getObject(\"title\").getString(\"simpleText\"), though I think the issue with it is that it doesn't support getting stuff from a JSON array.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r406344759", "createdAt": "2020-04-09T16:58:13Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java", "diffHunk": "@@ -249,13 +250,18 @@ public String getLicence() throws ParsingException {\n \n     @Override\n     public Locale getLanguageInfo() throws ParsingException {\n-        return null;\n+        String code = JsonUtils.getString(data, \"original_language\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIwNTM1Mg=="}, "originalCommit": {"oid": "d2ddd76951a9914d959126cbd5f00d1aec4b5d0d"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzExMTY4OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeStreamExtractor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODozMTo1OVrOGIiDXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwOToyNDo1OFrOGJsklQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5OTcxMQ==", "bodyText": "I'm interested in why the JsonUtils is not sufficient here. Is it for performance reasons or the the unchecked cast?\nThis section to transform the JsonArray to a ArrayList is written once for youtube, peertube and mediaccc. This could be extracted into the JsonUtils", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r411599711", "createdAt": "2020-04-20T18:31:59Z", "author": {"login": "XiangRongLin"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeStreamExtractor.java", "diffHunk": "@@ -236,10 +236,16 @@ public StreamInfoItemsCollector getRelatedStreams() throws IOException, Extracti\n         return collector;\n     }\n \n+    @Nonnull\n     @Override\n     public List<String> getTags() {\n         try {\n-            return (List) JsonUtils.getArray(json, \"tags\");\n+            JsonArray tagsArray = json.getArray(\"tags\");\n+            List<String> tagsList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c853365b49c0a8bad913f7a01ccc28d3d5e49b8"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI2MjkyOQ==", "bodyText": "@XiangRongLin is right that this code is stupid. return json.getArray(\"tags\"); would be sufficent, as it returns a JsonArray, which extends ArrayList.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r412262929", "createdAt": "2020-04-21T15:00:38Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeStreamExtractor.java", "diffHunk": "@@ -236,10 +236,16 @@ public StreamInfoItemsCollector getRelatedStreams() throws IOException, Extracti\n         return collector;\n     }\n \n+    @Nonnull\n     @Override\n     public List<String> getTags() {\n         try {\n-            return (List) JsonUtils.getArray(json, \"tags\");\n+            JsonArray tagsArray = json.getArray(\"tags\");\n+            List<String> tagsList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5OTcxMQ=="}, "originalCommit": {"oid": "9c853365b49c0a8bad913f7a01ccc28d3d5e49b8"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgyMDYyOQ==", "bodyText": "no, because then you return a JsonArray, i.e. ArrayList<Object>, and we want a List<String>, that <String> is the problem, because Object != String and in a JsonArray you can have often JsonObjects for example. Intellij says Unchecked assignment: 'java.util.List' to 'java.util.List<java.lang.String>' .\nThere is still one problem with the algorithm i did: if it's not a String but any other object, it should not be included. I changed it in the \"refactoring\" commit and moved it to JsonUtils", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r412820629", "createdAt": "2020-04-22T09:24:58Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeStreamExtractor.java", "diffHunk": "@@ -236,10 +236,16 @@ public StreamInfoItemsCollector getRelatedStreams() throws IOException, Extracti\n         return collector;\n     }\n \n+    @Nonnull\n     @Override\n     public List<String> getTags() {\n         try {\n-            return (List) JsonUtils.getArray(json, \"tags\");\n+            JsonArray tagsArray = json.getArray(\"tags\");\n+            List<String> tagsList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5OTcxMQ=="}, "originalCommit": {"oid": "9c853365b49c0a8bad913f7a01ccc28d3d5e49b8"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTI2MjQxOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/localization/Localization.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDowMTo0M1rOGJHY7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwOTowOToyMlrOGJr5fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIxMTQzOQ==", "bodyText": "According to https://docs.oracle.com/javase/8/docs/api/java/util/Locale.html#getISO3Language--, it returns ISO 639-2/T, not ISO 639-3.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r412211439", "createdAt": "2020-04-21T14:01:43Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/localization/Localization.java", "diffHunk": "@@ -99,4 +98,30 @@ public int hashCode() {\n         result = 31 * result + (countryCode != null ? countryCode.hashCode() : 0);\n         return result;\n     }\n+\n+    /**\n+     * Converts a three letter language code (ISO 639-3) to a Locale\n+     * in the limit of Java Locale class.\n+     * It can also handle 639-2/T but may return a wrong locale.\n+     * from https://stackoverflow.com/a/674122/12680950\n+     * <p>\n+     * It should not be used with 639-2/B, since java already handle it.\n+     * (Just use new Locale(\"an ISO 639-2/B code\")).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c853365b49c0a8bad913f7a01ccc28d3d5e49b8"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgwOTU5Ng==", "bodyText": "Wow they are terrible at naming functions then. Why are they naming getISO3Language and not getISO2TLanguage?????", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r412809596", "createdAt": "2020-04-22T09:09:22Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/localization/Localization.java", "diffHunk": "@@ -99,4 +98,30 @@ public int hashCode() {\n         result = 31 * result + (countryCode != null ? countryCode.hashCode() : 0);\n         return result;\n     }\n+\n+    /**\n+     * Converts a three letter language code (ISO 639-3) to a Locale\n+     * in the limit of Java Locale class.\n+     * It can also handle 639-2/T but may return a wrong locale.\n+     * from https://stackoverflow.com/a/674122/12680950\n+     * <p>\n+     * It should not be used with 639-2/B, since java already handle it.\n+     * (Just use new Locale(\"an ISO 639-2/B code\")).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIxMTQzOQ=="}, "originalCommit": {"oid": "9c853365b49c0a8bad913f7a01ccc28d3d5e49b8"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTI2Mzk0OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/localization/Localization.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDowMTo1N1rOGJHZ1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDowMTo1N1rOGJHZ1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIxMTY3MQ==", "bodyText": "final", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r412211671", "createdAt": "2020-04-21T14:01:57Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/localization/Localization.java", "diffHunk": "@@ -99,4 +98,30 @@ public int hashCode() {\n         result = 31 * result + (countryCode != null ? countryCode.hashCode() : 0);\n         return result;\n     }\n+\n+    /**\n+     * Converts a three letter language code (ISO 639-3) to a Locale\n+     * in the limit of Java Locale class.\n+     * It can also handle 639-2/T but may return a wrong locale.\n+     * from https://stackoverflow.com/a/674122/12680950\n+     * <p>\n+     * It should not be used with 639-2/B, since java already handle it.\n+     * (Just use new Locale(\"an ISO 639-2/B code\")).\n+     *\n+     * @param code a three letter language code\n+     * @return the Locale corresponding\n+     */\n+    public static Locale getLocaleFromThreeLetterCode(String code) {\n+        String[] languages = Locale.getISOLanguages();\n+        Map<String, Locale> localeMap = new HashMap<>(languages.length);\n+        for (String language : languages) {\n+            Locale locale = new Locale(language);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c853365b49c0a8bad913f7a01ccc28d3d5e49b8"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTI2NzAyOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/localization/Localization.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDowMjozM1rOGJHbtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDowMjozM1rOGJHbtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIxMjE0OQ==", "bodyText": "Remove this part, as it's technically incorrect. Just throw an exception if it's not in the localeMap.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r412212149", "createdAt": "2020-04-21T14:02:33Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/localization/Localization.java", "diffHunk": "@@ -99,4 +98,30 @@ public int hashCode() {\n         result = 31 * result + (countryCode != null ? countryCode.hashCode() : 0);\n         return result;\n     }\n+\n+    /**\n+     * Converts a three letter language code (ISO 639-3) to a Locale\n+     * in the limit of Java Locale class.\n+     * It can also handle 639-2/T but may return a wrong locale.\n+     * from https://stackoverflow.com/a/674122/12680950\n+     * <p>\n+     * It should not be used with 639-2/B, since java already handle it.\n+     * (Just use new Locale(\"an ISO 639-2/B code\")).\n+     *\n+     * @param code a three letter language code\n+     * @return the Locale corresponding\n+     */\n+    public static Locale getLocaleFromThreeLetterCode(String code) {\n+        String[] languages = Locale.getISOLanguages();\n+        Map<String, Locale> localeMap = new HashMap<>(languages.length);\n+        for (String language : languages) {\n+            Locale locale = new Locale(language);\n+            localeMap.put(locale.getISO3Language(), locale);\n+        }\n+        if (localeMap.containsKey(code)) {\n+            return localeMap.get(code);\n+        } else {\n+            return new Locale(code.substring(0, 2));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c853365b49c0a8bad913f7a01ccc28d3d5e49b8"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNDA5ODk2OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/SoundcloudStreamExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzo0MDoyN1rOGR_C4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzo0MDoyN1rOGR_C4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUxMTkwNw==", "bodyText": "Could you change these to just track.getString()?", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r421511907", "createdAt": "2020-05-07T13:40:27Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/SoundcloudStreamExtractor.java", "diffHunk": "@@ -269,17 +260,17 @@ public String getHost() throws ParsingException {\n \n     @Override\n     public String getPrivacy() throws ParsingException {\n-        return \"\";\n+        return JsonUtils.getString(track, \"sharing\");\n     }\n \n     @Override\n     public String getCategory() throws ParsingException {\n-        return \"\";\n+        return JsonUtils.getString(track, \"genre\");\n     }\n \n     @Override\n     public String getLicence() throws ParsingException {\n-        return \"\";\n+        return JsonUtils.getString(track, \"license\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e15bc41b8226fc1add76a6cf3a18c5f2ac8157a"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNDEwNTE5OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/SoundcloudStreamExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzo0MjowMFrOGR_G2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzo0MjowMFrOGR_G2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUxMjkyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String tags_string = track.getString(\"tag_list\");\n          \n          \n            \n                    return new ArrayList<>(Arrays.asList(tags_string.split(\" \")));\n          \n          \n            \n                    final String tags = track.getString(\"tag_list\");\n          \n          \n            \n                    return Arrays.asList(tags.split(\" \"));", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r421512923", "createdAt": "2020-05-07T13:42:00Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/SoundcloudStreamExtractor.java", "diffHunk": "@@ -290,7 +281,8 @@ public Locale getLanguageInfo() throws ParsingException {\n     @Nonnull\n     @Override\n     public List<String> getTags() throws ParsingException {\n-        return new ArrayList<>();\n+        String tags_string = track.getString(\"tag_list\");\n+        return new ArrayList<>(Arrays.asList(tags_string.split(\" \")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e15bc41b8226fc1add76a6cf3a18c5f2ac8157a"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNDExNjA3OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzo0NDowOFrOGR_Nag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMToyMTowM1rOGVXuAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUxNDYwMg==", "bodyText": "Do we have the possible options documented somewhere? And shouldn't we maybe use e.g. an Enum instead of just returning a String? Also for the getLicence() and maybe even for the getCategory() as well.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r421514602", "createdAt": "2020-05-07T13:44:08Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -980,20 +966,43 @@ public String getHost() {\n \n     @Nonnull\n     @Override\n-    public String getPrivacy() {\n-        return \"\";\n+    public String getPrivacy() throws ParsingException {\n+        boolean isUnlisted = playerResponse\n+                .getObject(\"microformat\")\n+                .getObject(\"playerMicroformatRenderer\")\n+                .getBoolean(\"isUnlisted\");\n+        return isUnlisted ? \"Unlisted\" : \"Public\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e15bc41b8226fc1add76a6cf3a18c5f2ac8157a"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk2NjUyNg==", "bodyText": "Yes it is documented: https://support.google.com/youtube/answer/157177 \"Click the down arrow under \"Visibility\" and choose Public, Private, or Unlisted\".\nI'll test again with private videos, but in my tests long ago iirc it was ok (it show only content not available I think).\nI'll see later for Enums", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r421966526", "createdAt": "2020-05-08T06:32:45Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -980,20 +966,43 @@ public String getHost() {\n \n     @Nonnull\n     @Override\n-    public String getPrivacy() {\n-        return \"\";\n+    public String getPrivacy() throws ParsingException {\n+        boolean isUnlisted = playerResponse\n+                .getObject(\"microformat\")\n+                .getObject(\"playerMicroformatRenderer\")\n+                .getBoolean(\"isUnlisted\");\n+        return isUnlisted ? \"Unlisted\" : \"Public\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUxNDYwMg=="}, "originalCommit": {"oid": "2e15bc41b8226fc1add76a6cf3a18c5f2ac8157a"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk2ODA2NQ==", "bodyText": "I meant in NewPipe. And what if another service calls e.g. \"Public\" \"World Visible\" or whatever? And you have to consider translations in NewPipe as well.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r421968065", "createdAt": "2020-05-08T06:36:36Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -980,20 +966,43 @@ public String getHost() {\n \n     @Nonnull\n     @Override\n-    public String getPrivacy() {\n-        return \"\";\n+    public String getPrivacy() throws ParsingException {\n+        boolean isUnlisted = playerResponse\n+                .getObject(\"microformat\")\n+                .getObject(\"playerMicroformatRenderer\")\n+                .getBoolean(\"isUnlisted\");\n+        return isUnlisted ? \"Unlisted\" : \"Public\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUxNDYwMg=="}, "originalCommit": {"oid": "2e15bc41b8226fc1add76a6cf3a18c5f2ac8157a"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIxNzE5Mg==", "bodyText": "Yes, I've already created some translators and have choosen Private / Public / Unlisted\nNote to self: todo: add internal privacy for PeerTube.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r423217192", "createdAt": "2020-05-11T17:55:54Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -980,20 +966,43 @@ public String getHost() {\n \n     @Nonnull\n     @Override\n-    public String getPrivacy() {\n-        return \"\";\n+    public String getPrivacy() throws ParsingException {\n+        boolean isUnlisted = playerResponse\n+                .getObject(\"microformat\")\n+                .getObject(\"playerMicroformatRenderer\")\n+                .getBoolean(\"isUnlisted\");\n+        return isUnlisted ? \"Unlisted\" : \"Public\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUxNDYwMg=="}, "originalCommit": {"oid": "2e15bc41b8226fc1add76a6cf3a18c5f2ac8157a"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIzMzgyMg==", "bodyText": "Yes, an enum would be better for privacy. For licence, it's not possible because it changes dynamically based on companies owning the copyrights.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r423233822", "createdAt": "2020-05-11T18:25:41Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -980,20 +966,43 @@ public String getHost() {\n \n     @Nonnull\n     @Override\n-    public String getPrivacy() {\n-        return \"\";\n+    public String getPrivacy() throws ParsingException {\n+        boolean isUnlisted = playerResponse\n+                .getObject(\"microformat\")\n+                .getObject(\"playerMicroformatRenderer\")\n+                .getBoolean(\"isUnlisted\");\n+        return isUnlisted ? \"Unlisted\" : \"Public\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUxNDYwMg=="}, "originalCommit": {"oid": "2e15bc41b8226fc1add76a6cf3a18c5f2ac8157a"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA2MTg4OQ==", "bodyText": "@B0pol: I rebased, removed Eclipse crap, and added a Privacy enum.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r425061889", "createdAt": "2020-05-14T11:21:03Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -980,20 +966,43 @@ public String getHost() {\n \n     @Nonnull\n     @Override\n-    public String getPrivacy() {\n-        return \"\";\n+    public String getPrivacy() throws ParsingException {\n+        boolean isUnlisted = playerResponse\n+                .getObject(\"microformat\")\n+                .getObject(\"playerMicroformatRenderer\")\n+                .getBoolean(\"isUnlisted\");\n+        return isUnlisted ? \"Unlisted\" : \"Public\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUxNDYwMg=="}, "originalCommit": {"oid": "2e15bc41b8226fc1add76a6cf3a18c5f2ac8157a"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Njk3ODU1OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMToyNDowNFrOGVXzsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMjoxNjo0N1rOGVZeTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA2MzM0NA==", "bodyText": "This doesn't actually get the license, but the licensor. See e.g. https://www.youtube.com/watch?v=IuArYvVbUo0 for a video that has listed its license. Also: final.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r425063344", "createdAt": "2020-05-14T11:24:04Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -1000,20 +1006,43 @@ public String getHost() {\n \n     @Nonnull\n     @Override\n-    public String getPrivacy() {\n-        return \"\";\n+    public Privacy getPrivacy() {\n+        boolean isUnlisted = playerResponse\n+                .getObject(\"microformat\")\n+                .getObject(\"playerMicroformatRenderer\")\n+                .getBoolean(\"isUnlisted\");\n+        return isUnlisted ? Privacy.UNLISTED : Privacy.PUBLIC;\n     }\n \n     @Nonnull\n     @Override\n     public String getCategory() {\n-        return \"\";\n+        try {\n+            return playerResponse.getObject(\"microformat\")\n+                    .getObject(\"playerMicroformatRenderer\")\n+                    .getString(\"category\");\n+        } catch (Exception ignored) {\n+            return \"\";\n+        }\n     }\n \n     @Nonnull\n     @Override\n     public String getLicence() {\n-        return \"\";\n+        try {\n+            JsonArray rows = initialData.getObject(\"contents\")\n+                    .getObject(\"twoColumnWatchNextResults\").getObject(\"results\").getObject(\"results\")\n+                    .getArray(\"contents\").getObject(1).getObject(\"videoSecondaryInfoRenderer\")\n+                    .getObject(\"metadataRowContainer\").getObject(\"metadataRowContainerRenderer\").getArray(\"rows\");\n+            JsonObject metadataRowRenderer = rows.getObject(rows.size() - 1) // it is usually last\n+                    .getObject(\"metadataRowRenderer\");\n+            String probablyLicence = getTextFromObject(metadataRowRenderer.getArray(\"contents\").getObject(0));\n+            return getTextFromObject(metadataRowRenderer.getObject(\"title\")).toLowerCase().contains(\"licensed\")\n+                    ? probablyLicence\n+                    : \"\";\n+        } catch (Exception e) {\n+            return \"\";\n+        }\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b45ac706bea8307954d29144d39390e5ebf9f1d"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3MTQyMQ==", "bodyText": "Ok, great. And for the licence, can we have something dynamic?\nI mean Peertube has only 7 licences: https://peertube.cpy.re/api/v1/videos/licences, then it'll make it easier to translate to have them dynamic, and the rest is untranslated.\nFor YouTube, it seems like it's either Youtube licence (default) or a CC-BY (attribution).\nhttps://www.youtube.com/static?template=terms (it states default licence is YouTube one).\nhttps://support.google.com/youtube/answer/2797468?hl=en (it states we can choose CC\u00a0by, i.e attribution, but can we have other CC licences?).\nThen for YouTube: if no licence is shown, it means YouTube licence. Otherwise for CC-BY, we can use the same field in enum as peertube.\nAnd for Soundcloud, I didn't really understand, there were several field, like C and P copyright (you should just download a track and look at the json).", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r425071421", "createdAt": "2020-05-14T11:40:07Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -1000,20 +1006,43 @@ public String getHost() {\n \n     @Nonnull\n     @Override\n-    public String getPrivacy() {\n-        return \"\";\n+    public Privacy getPrivacy() {\n+        boolean isUnlisted = playerResponse\n+                .getObject(\"microformat\")\n+                .getObject(\"playerMicroformatRenderer\")\n+                .getBoolean(\"isUnlisted\");\n+        return isUnlisted ? Privacy.UNLISTED : Privacy.PUBLIC;\n     }\n \n     @Nonnull\n     @Override\n     public String getCategory() {\n-        return \"\";\n+        try {\n+            return playerResponse.getObject(\"microformat\")\n+                    .getObject(\"playerMicroformatRenderer\")\n+                    .getString(\"category\");\n+        } catch (Exception ignored) {\n+            return \"\";\n+        }\n     }\n \n     @Nonnull\n     @Override\n     public String getLicence() {\n-        return \"\";\n+        try {\n+            JsonArray rows = initialData.getObject(\"contents\")\n+                    .getObject(\"twoColumnWatchNextResults\").getObject(\"results\").getObject(\"results\")\n+                    .getArray(\"contents\").getObject(1).getObject(\"videoSecondaryInfoRenderer\")\n+                    .getObject(\"metadataRowContainer\").getObject(\"metadataRowContainerRenderer\").getArray(\"rows\");\n+            JsonObject metadataRowRenderer = rows.getObject(rows.size() - 1) // it is usually last\n+                    .getObject(\"metadataRowRenderer\");\n+            String probablyLicence = getTextFromObject(metadataRowRenderer.getArray(\"contents\").getObject(0));\n+            return getTextFromObject(metadataRowRenderer.getObject(\"title\")).toLowerCase().contains(\"licensed\")\n+                    ? probablyLicence\n+                    : \"\";\n+        } catch (Exception e) {\n+            return \"\";\n+        }\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA2MzM0NA=="}, "originalCommit": {"oid": "4b45ac706bea8307954d29144d39390e5ebf9f1d"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA5MDYzOQ==", "bodyText": "On SoundCloud, there's the license field containing e.g. cc-by, see e.g. https://soundcloud.com/wearecc/plays-well-with-others-ep-2-what-do-an-army-of-ants-and-an-online-encyclopedia-have-in-common:\n{\n  \"comment_count\": 7,\n  \"full_duration\": 1400920,\n  \"downloadable\": false,\n  \"created_at\": \"2019-03-28T13:36:18Z\",\n  \"description\": \"\u201cStigmergy is a mechanism of indirect coordination, through the environment, between agents or actions,\u201d according to Wikipedia. \u201cThe principle is that the trace left in the environment by an action stimulates the performance of a next action, by the same or a different agent.\u201d Wikipedia should know all about stigmergy, since it\u2019s almost a perfect description of how Wikipedia itself is made. While this model of collaboration is most commonly associated with ants, not global knowledge sharing, we\u2019ll explore both and how they\u2019ve shaped our world through asynchronous collaboration.\\n\\nJoin us as we talk to Katherine Maher, the executive director of the Wikimedia Foundation (the nonprofit organization that runs Wikipedia), and Clint Penick, an ant researcher and assistant research professor in the Biomimicry Center at Arizona State University.\\n\\n===\\n\\nAll original content in Plays Well with Others is available under a Creative Commons BY license.\\n\\nThis episode contains music by Blue Dot Sessions, available under a Creative Commons BY-NC license at the Free Music Archive.\\n\\nWe also use sound effects, available under CC licenses and in the public domain, from Freesound.\\n\\nFor links to these tracks and for more information about our show, please visit playswellwithothers.org.\",\n  \"media\": {\n    \"transcodings\": [\n      {\n        \"url\": \"https://api-v2.soundcloud.com/media/soundcloud:tracks:597253485/dac2dc88-1b30-49aa-8f11-4176901591ec/stream/hls\",\n        \"preset\": \"mp3_0_0\",\n        \"duration\": 1400920,\n        \"snipped\": false,\n        \"format\": {\n          \"protocol\": \"hls\",\n          \"mime_type\": \"audio/mpeg\"\n        },\n        \"quality\": \"sq\"\n      },\n      {\n        \"url\": \"https://api-v2.soundcloud.com/media/soundcloud:tracks:597253485/dac2dc88-1b30-49aa-8f11-4176901591ec/stream/progressive\",\n        \"preset\": \"mp3_0_0\",\n        \"duration\": 1400920,\n        \"snipped\": false,\n        \"format\": {\n          \"protocol\": \"progressive\",\n          \"mime_type\": \"audio/mpeg\"\n        },\n        \"quality\": \"sq\"\n      },\n      {\n        \"url\": \"https://api-v2.soundcloud.com/media/soundcloud:tracks:597253485/452f1e05-f425-451f-a257-858c039c55b9/stream/hls\",\n        \"preset\": \"opus_0_0\",\n        \"duration\": 1400743,\n        \"snipped\": false,\n        \"format\": {\n          \"protocol\": \"hls\",\n          \"mime_type\": \"audio/ogg; codecs=\\\"opus\\\"\"\n        },\n        \"quality\": \"sq\"\n      }\n    ]\n  },\n  \"title\": \"Plays Well with Others, Ep 2: What Do an Army of Ants and an Online Encyclopedia Have in Common?\",\n  \"publisher_metadata\": {\n    \"urn\": \"soundcloud:tracks:597253485\",\n    \"contains_music\": true,\n    \"id\": 597253485\n  },\n  \"duration\": 1400920,\n  \"has_downloads_left\": true,\n  \"artwork_url\": \"https://i1.sndcdn.com/artworks-000511451328-51jljl-large.jpg\",\n  \"public\": true,\n  \"streamable\": true,\n  \"tag_list\": \"storytelling collaboration wikipedia ants stigmergy \\\"creative commons\\\"\",\n  \"genre\": \"Podcast\",\n  \"id\": 597253485,\n  \"reposts_count\": 6,\n  \"state\": \"finished\",\n  \"label_name\": null,\n  \"last_modified\": \"2019-09-06T21:39:16Z\",\n  \"commentable\": true,\n  \"policy\": \"ALLOW\",\n  \"visuals\": null,\n  \"kind\": \"track\",\n  \"purchase_url\": null,\n  \"sharing\": \"public\",\n  \"uri\": \"https://api.soundcloud.com/tracks/597253485\",\n  \"secret_token\": null,\n  \"download_count\": 0,\n  \"likes_count\": 23,\n  \"urn\": \"soundcloud:tracks:597253485\",\n  \"license\": \"cc-by\",\n  \"purchase_title\": null,\n  \"display_date\": \"2019-03-28T13:36:18Z\",\n  \"embeddable_by\": \"all\",\n  \"release_date\": null,\n  \"user_id\": 1457130,\n  \"monetization_model\": \"NOT_APPLICABLE\",\n  \"waveform_url\": \"https://wave.sndcdn.com/bKOA7Pwbut93_m.json\",\n  \"permalink\": \"plays-well-with-others-ep-2-what-do-an-army-of-ants-and-an-online-encyclopedia-have-in-common\",\n  \"permalink_url\": \"https://soundcloud.com/wearecc/plays-well-with-others-ep-2-what-do-an-army-of-ants-and-an-online-encyclopedia-have-in-common\",\n  \"user\": {\n    \"avatar_url\": \"https://i1.sndcdn.com/avatars-000001558477-l96tko-large.jpg\",\n    \"first_name\": \"Creative Commons\",\n    \"full_name\": \"Creative Commons\",\n    \"id\": 1457130,\n    \"kind\": \"user\",\n    \"last_modified\": \"2019-03-09T22:03:03Z\",\n    \"last_name\": \"\",\n    \"permalink\": \"wearecc\",\n    \"permalink_url\": \"https://soundcloud.com/wearecc\",\n    \"uri\": \"https://api.soundcloud.com/users/1457130\",\n    \"urn\": \"soundcloud:users:1457130\",\n    \"username\": \"Creative Commons\",\n    \"verified\": false,\n    \"city\": \"Internet\",\n    \"country_code\": null\n  },\n  \"playback_count\": 19946\n}\nI'm not sure what the possible options are for YouTube or SoundCloud though.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r425090639", "createdAt": "2020-05-14T12:16:47Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -1000,20 +1006,43 @@ public String getHost() {\n \n     @Nonnull\n     @Override\n-    public String getPrivacy() {\n-        return \"\";\n+    public Privacy getPrivacy() {\n+        boolean isUnlisted = playerResponse\n+                .getObject(\"microformat\")\n+                .getObject(\"playerMicroformatRenderer\")\n+                .getBoolean(\"isUnlisted\");\n+        return isUnlisted ? Privacy.UNLISTED : Privacy.PUBLIC;\n     }\n \n     @Nonnull\n     @Override\n     public String getCategory() {\n-        return \"\";\n+        try {\n+            return playerResponse.getObject(\"microformat\")\n+                    .getObject(\"playerMicroformatRenderer\")\n+                    .getString(\"category\");\n+        } catch (Exception ignored) {\n+            return \"\";\n+        }\n     }\n \n     @Nonnull\n     @Override\n     public String getLicence() {\n-        return \"\";\n+        try {\n+            JsonArray rows = initialData.getObject(\"contents\")\n+                    .getObject(\"twoColumnWatchNextResults\").getObject(\"results\").getObject(\"results\")\n+                    .getArray(\"contents\").getObject(1).getObject(\"videoSecondaryInfoRenderer\")\n+                    .getObject(\"metadataRowContainer\").getObject(\"metadataRowContainerRenderer\").getArray(\"rows\");\n+            JsonObject metadataRowRenderer = rows.getObject(rows.size() - 1) // it is usually last\n+                    .getObject(\"metadataRowRenderer\");\n+            String probablyLicence = getTextFromObject(metadataRowRenderer.getArray(\"contents\").getObject(0));\n+            return getTextFromObject(metadataRowRenderer.getObject(\"title\")).toLowerCase().contains(\"licensed\")\n+                    ? probablyLicence\n+                    : \"\";\n+        } catch (Exception e) {\n+            return \"\";\n+        }\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA2MzM0NA=="}, "originalCommit": {"oid": "4b45ac706bea8307954d29144d39390e5ebf9f1d"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTg0ODcwOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwODoxMzozNlrOGyf25w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMlQxOToyMjowMlrOIkz1xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYwMzk0Mw==", "bodyText": "YouTube themselves call it \"YouTube license\" so I wouldn't change the name even though you prefer \"licence\"", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r455603943", "createdAt": "2020-07-16T08:13:36Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -1002,20 +1008,43 @@ public String getHost() {\n \n     @Nonnull\n     @Override\n-    public String getPrivacy() {\n-        return \"\";\n+    public Privacy getPrivacy() {\n+        boolean isUnlisted = playerResponse\n+                .getObject(\"microformat\")\n+                .getObject(\"playerMicroformatRenderer\")\n+                .getBoolean(\"isUnlisted\");\n+        return isUnlisted ? Privacy.UNLISTED : Privacy.PUBLIC;\n     }\n \n     @Nonnull\n     @Override\n     public String getCategory() {\n-        return \"\";\n+        try {\n+            return playerResponse.getObject(\"microformat\")\n+                    .getObject(\"playerMicroformatRenderer\")\n+                    .getString(\"category\");\n+        } catch (Exception ignored) {\n+            return \"\";\n+        }\n     }\n \n     @Nonnull\n     @Override\n     public String getLicence() {\n-        return \"\";\n+        try {\n+            final JsonObject metadataRowRenderer = getVideoSecondaryInfoRenderer()\n+                    .getObject(\"metadataRowContainer\").getObject(\"metadataRowContainerRenderer\").getArray(\"rows\")\n+                    .getObject(0)\n+                    .getObject(\"metadataRowRenderer\");\n+\n+            final String probablyLicence = getTextFromObject(metadataRowRenderer\n+                    .getArray(\"contents\").getObject(0));\n+\n+            return probablyLicence == null || !probablyLicence.contains(\"Creative Commons\")\n+                    ? \"YouTube licence\" : probablyLicence;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78e418ce130568a9d8a4a689a6c48e5f6a318375"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTQ2ODk5Nw==", "bodyText": "No they use licence in the Terms of Service\nhttps://web.archive.org/web/20190723193439/https://www.youtube.com/static?template=terms&hl=en\n\nRights you licence\n8.1 When you upload or post Content to YouTube, you grant:\n\nto YouTube, a worldwide, non-exclusive, royalty-free, transferable licence (with right to sub-licence) to use, reproduce, distribute, prepare derivative works of, display, and perform that Content in connection with the provision of the Service and otherwise in connection with the provision of the Service and YouTube's business, including without limitation for promoting and redistributing part or all of the Service (and derivative works thereof) in any media formats and through any media channels;\nto each user of the Service, a worldwide, non-exclusive, royalty-free licence to access your Content through the Service, and to use, reproduce, distribute, prepare derivative works of, display and perform such Content to the extent permitted by the functionality of the Service and under these Terms.\n\n\nThey also call CC `Creative Commons Attribution licence (reuse allowed)", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r575468997", "createdAt": "2021-02-12T19:22:02Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -1002,20 +1008,43 @@ public String getHost() {\n \n     @Nonnull\n     @Override\n-    public String getPrivacy() {\n-        return \"\";\n+    public Privacy getPrivacy() {\n+        boolean isUnlisted = playerResponse\n+                .getObject(\"microformat\")\n+                .getObject(\"playerMicroformatRenderer\")\n+                .getBoolean(\"isUnlisted\");\n+        return isUnlisted ? Privacy.UNLISTED : Privacy.PUBLIC;\n     }\n \n     @Nonnull\n     @Override\n     public String getCategory() {\n-        return \"\";\n+        try {\n+            return playerResponse.getObject(\"microformat\")\n+                    .getObject(\"playerMicroformatRenderer\")\n+                    .getString(\"category\");\n+        } catch (Exception ignored) {\n+            return \"\";\n+        }\n     }\n \n     @Nonnull\n     @Override\n     public String getLicence() {\n-        return \"\";\n+        try {\n+            final JsonObject metadataRowRenderer = getVideoSecondaryInfoRenderer()\n+                    .getObject(\"metadataRowContainer\").getObject(\"metadataRowContainerRenderer\").getArray(\"rows\")\n+                    .getObject(0)\n+                    .getObject(\"metadataRowRenderer\");\n+\n+            final String probablyLicence = getTextFromObject(metadataRowRenderer\n+                    .getArray(\"contents\").getObject(0));\n+\n+            return probablyLicence == null || !probablyLicence.contains(\"Creative Commons\")\n+                    ? \"YouTube licence\" : probablyLicence;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYwMzk0Mw=="}, "originalCommit": {"oid": "78e418ce130568a9d8a4a689a6c48e5f6a318375"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTg1MzQ1OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/localization/Localization.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwODoxNDoyMVrOGyf6JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwODoxNDoyMVrOGyf6JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYwNDc3Mw==", "bodyText": "final", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r455604773", "createdAt": "2020-07-16T08:14:21Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/localization/Localization.java", "diffHunk": "@@ -99,4 +100,25 @@ public int hashCode() {\n         result = 31 * result + (countryCode != null ? countryCode.hashCode() : 0);\n         return result;\n     }\n+\n+    /**\n+     * Converts a three letter language code (ISO 639-2/T) to a Locale\n+     * in the limit of Java Locale class.\n+     *\n+     * @param code a three letter language code\n+     * @return the Locale corresponding\n+     */\n+    public static Locale getLocaleFromThreeLetterCode(@Nonnull String code) throws ParsingException {\n+        String[] languages = Locale.getISOLanguages();\n+        Map<String, Locale> localeMap = new HashMap<>(languages.length);\n+        for (String language : languages) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78e418ce130568a9d8a4a689a6c48e5f6a318375"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTg1NzIxOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwODoxNDo1NlrOGyf8kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwODoxNDo1NlrOGyf8kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYwNTM5NA==", "bodyText": "final (and uploaderId as well)", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r455605394", "createdAt": "2020-07-16T08:14:56Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -311,9 +316,9 @@ public long getDislikeCount() throws ParsingException {\n     public String getUploaderUrl() throws ParsingException {\n         assertPageFetched();\n \n-            String uploaderUrl = getUrlFromNavigationEndpoint(getVideoSecondaryInfoRenderer()\n-                    .getObject(\"owner\").getObject(\"videoOwnerRenderer\").getObject(\"navigationEndpoint\"));\n-            if (uploaderUrl != null && !uploaderUrl.isEmpty()) return uploaderUrl;\n+        String uploaderUrl = getUrlFromNavigationEndpoint(getVideoSecondaryInfoRenderer()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78e418ce130568a9d8a4a689a6c48e5f6a318375"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTg1Nzc4OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwODoxNTowM1rOGyf87Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwODoxNTowM1rOGyf87Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYwNTQ4NQ==", "bodyText": "final", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r455605485", "createdAt": "2020-07-16T08:15:03Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -1002,20 +1008,43 @@ public String getHost() {\n \n     @Nonnull\n     @Override\n-    public String getPrivacy() {\n-        return \"\";\n+    public Privacy getPrivacy() {\n+        boolean isUnlisted = playerResponse", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78e418ce130568a9d8a4a689a6c48e5f6a318375"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTg2MDEzOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/utils/JsonUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwODoxNToyOFrOGyf-hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwODoxNToyOFrOGyf-hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYwNTg5Mw==", "bodyText": "final", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r455605893", "createdAt": "2020-07-16T08:15:28Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/utils/JsonUtils.java", "diffHunk": "@@ -100,4 +100,14 @@ private static JsonObject getObject(@Nonnull JsonObject object, @Nonnull List<St\n         return result;\n     }\n \n+    public static List<String> getListStringFromJsonArray(@Nonnull JsonArray array) {\n+        List<String> tagsList = new ArrayList<>(array.size());\n+        for (Object tag : array) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78e418ce130568a9d8a4a689a6c48e5f6a318375"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTg2MTA4OnYy", "diffSide": "RIGHT", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/soundcloud/SoundcloudStreamExtractorDefaultTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwODoxNTozNVrOGyf_GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwODoxNTozNVrOGyf_GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYwNjA0MA==", "bodyText": "final", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r455606040", "createdAt": "2020-07-16T08:15:35Z", "author": {"login": "wb9688"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/soundcloud/SoundcloudStreamExtractorDefaultTest.java", "diffHunk": "@@ -159,5 +189,116 @@ public void bothHlsAndOpusAudioStreams() throws Exception {\n             extractor.getAudioStreams();\n         }\n     }\n+\n+    public static class YnwMellySuicidal {\n+        private static SoundcloudStreamExtractor extractor;\n+\n+        @BeforeClass\n+        public static void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = (SoundcloudStreamExtractor) SoundCloud.getStreamExtractor(\"https://soundcloud.com/ynwmelly/suicidal\");\n+            extractor.fetchPage();\n+        }\n+\n+        @Test\n+        public void testGetName() {\n+            assertEquals(\"Suicidal\", extractor.getName());\n+        }\n+\n+        @Test\n+        public void testGetUploaderName() {\n+            assertEquals(\"Ynw Melly\", extractor.getUploaderName());\n+        }\n+\n+        @Test\n+        public void testGetLength() {\n+            assertEquals(223, extractor.getLength());\n+        }\n+\n+        @Test\n+        public void testGetViewCount() {\n+            assertTrue(Long.toString(extractor.getViewCount()),\n+                    extractor.getViewCount() > 39000000);\n+        }\n+\n+        @Test\n+        public void testGetTextualUploadDate() throws ParsingException {\n+            Assert.assertEquals(\"2019-11-21 22:25:30\", extractor.getTextualUploadDate());\n+        }\n+\n+        @Test\n+        public void testGetUploadDate() throws ParsingException, ParseException {\n+            final Calendar instance = Calendar.getInstance();\n+            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss +0000\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78e418ce130568a9d8a4a689a6c48e5f6a318375"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTg2MjM2OnYy", "diffSide": "RIGHT", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/soundcloud/SoundcloudStreamExtractorDefaultTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwODoxNTo0OVrOGyf__w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwODoxNTo0OVrOGyf__w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYwNjI3MQ==", "bodyText": "final", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r455606271", "createdAt": "2020-07-16T08:15:49Z", "author": {"login": "wb9688"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/soundcloud/SoundcloudStreamExtractorDefaultTest.java", "diffHunk": "@@ -159,5 +189,116 @@ public void bothHlsAndOpusAudioStreams() throws Exception {\n             extractor.getAudioStreams();\n         }\n     }\n+\n+    public static class YnwMellySuicidal {\n+        private static SoundcloudStreamExtractor extractor;\n+\n+        @BeforeClass\n+        public static void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = (SoundcloudStreamExtractor) SoundCloud.getStreamExtractor(\"https://soundcloud.com/ynwmelly/suicidal\");\n+            extractor.fetchPage();\n+        }\n+\n+        @Test\n+        public void testGetName() {\n+            assertEquals(\"Suicidal\", extractor.getName());\n+        }\n+\n+        @Test\n+        public void testGetUploaderName() {\n+            assertEquals(\"Ynw Melly\", extractor.getUploaderName());\n+        }\n+\n+        @Test\n+        public void testGetLength() {\n+            assertEquals(223, extractor.getLength());\n+        }\n+\n+        @Test\n+        public void testGetViewCount() {\n+            assertTrue(Long.toString(extractor.getViewCount()),\n+                    extractor.getViewCount() > 39000000);\n+        }\n+\n+        @Test\n+        public void testGetTextualUploadDate() throws ParsingException {\n+            Assert.assertEquals(\"2019-11-21 22:25:30\", extractor.getTextualUploadDate());\n+        }\n+\n+        @Test\n+        public void testGetUploadDate() throws ParsingException, ParseException {\n+            final Calendar instance = Calendar.getInstance();\n+            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss +0000\");\n+            sdf.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+            instance.setTime(sdf.parse(\"2019/11/21 22:25:30 +0000\"));\n+            assertEquals(instance, requireNonNull(extractor.getUploadDate()).date());\n+        }\n+\n+        @Test\n+        public void testGetUploaderUrl() {\n+            assertIsSecureUrl(extractor.getUploaderUrl());\n+            assertEquals(\"https://soundcloud.com/ynwmelly\", extractor.getUploaderUrl());\n+        }\n+\n+        @Test\n+        public void testGetThumbnailUrl() {\n+            assertIsSecureUrl(extractor.getThumbnailUrl());\n+        }\n+\n+        @Test\n+        public void testGetUploaderAvatarUrl() {\n+            assertIsSecureUrl(extractor.getUploaderAvatarUrl());\n+        }\n+\n+        @Test\n+        public void testGetAudioStreams() throws IOException, ExtractionException {\n+            assertFalse(extractor.getAudioStreams().isEmpty());\n+        }\n+\n+        @Test\n+        public void testStreamType() {\n+            assertTrue(extractor.getStreamType() == StreamType.AUDIO_STREAM);\n+        }\n+\n+        @Test\n+        public void testGetRelatedVideos() throws ExtractionException, IOException {\n+            StreamInfoItemsCollector relatedVideos = extractor.getRelatedStreams();\n+            assertFalse(relatedVideos.getItems().isEmpty());\n+            assertTrue(relatedVideos.getErrors().isEmpty());\n+        }\n+\n+        @Test\n+        public void testGetSubtitlesListDefault() throws IOException, ExtractionException {\n+            assertTrue(extractor.getSubtitlesDefault().isEmpty());\n+        }\n+\n+        @Test\n+        public void testGetSubtitlesList() throws IOException, ExtractionException {\n+            assertTrue(extractor.getSubtitlesDefault().isEmpty());\n+        }\n+\n+        @Test\n+        public void testGetPrivacy() {\n+            assertEquals(StreamExtractor.Privacy.PUBLIC, extractor.getPrivacy());\n+        }\n+\n+        @Test\n+        public void testGetLicence() {\n+            assertEquals(\"all-rights-reserved\", extractor.getLicence());\n+        }\n+\n+        @Test\n+        public void testGetCategory() {\n+            assertEquals(\"Hip-hop & Rap\", extractor.getCategory());\n+        }\n+\n+        @Test\n+        public void testGetTags() throws ParsingException {\n+            List<String> tags = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78e418ce130568a9d8a4a689a6c48e5f6a318375"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTg2MzY1OnYy", "diffSide": "RIGHT", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/soundcloud/SoundcloudStreamExtractorDefaultTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwODoxNjowMlrOGygA2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwODoxNjowMlrOGygA2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYwNjQ5MQ==", "bodyText": "final", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r455606491", "createdAt": "2020-07-16T08:16:02Z", "author": {"login": "wb9688"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/soundcloud/SoundcloudStreamExtractorDefaultTest.java", "diffHunk": "@@ -135,6 +139,32 @@ public void testGetSubtitlesList() throws IOException, ExtractionException {\n             // Video (/view?v=YQHsXMglC9A) set in the setUp() method has no captions => null\n             assertTrue(extractor.getSubtitlesDefault().isEmpty());\n         }\n+\n+        @Test\n+        public void testGetPrivacy() {\n+            assertEquals(StreamExtractor.Privacy.PUBLIC, extractor.getPrivacy());\n+        }\n+\n+        @Test\n+        public void testGetLicence() {\n+            assertEquals(\"all-rights-reserved\", extractor.getLicence());\n+        }\n+\n+        @Test\n+        public void testGetCategory() {\n+            assertEquals(\"\", extractor.getCategory());\n+        }\n+\n+        @Test\n+        public void testGetTags() {\n+            List<String> tags = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78e418ce130568a9d8a4a689a6c48e5f6a318375"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTg2Mzk4OnYy", "diffSide": "RIGHT", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/media_ccc/MediaCCCStreamExtractorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwODoxNjowN1rOGygBEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwODoxNjowN1rOGygBEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYwNjU0Ng==", "bodyText": "final", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r455606546", "createdAt": "2020-07-16T08:16:07Z", "author": {"login": "wb9688"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/media_ccc/MediaCCCStreamExtractorTest.java", "diffHunk": "@@ -114,6 +113,19 @@ public void testGetUploadDate() throws ParsingException, ParseException {\n             instance.setTime(new SimpleDateFormat(\"yyyy-MM-dd\").parse(\"2018-05-11\"));\n             assertEquals(instance, requireNonNull(extractor.getUploadDate()).date());\n         }\n+\n+        @Test\n+        public void testGetTags() throws ParsingException {\n+            List<String> tags = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78e418ce130568a9d8a4a689a6c48e5f6a318375"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYyODA1NzA2OnYy", "diffSide": "RIGHT", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/media_ccc/MediaCCCStreamExtractorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMlQyMDozMDoxMVrOIk15ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xM1QwMDoxMzo1NVrOIk64hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTUwMjc1MA==", "bodyText": "I am not sure about these lines and the other test files. these changes make the tests longer and thus harder to read, because finding the important info takes longer.\nIMO, that can be kept in one line as long as that lines does not get way too long.\nCC @Stypox @XiangRongLin", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r575502750", "createdAt": "2021-02-12T20:30:11Z", "author": {"login": "TobiGr"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/media_ccc/MediaCCCStreamExtractorTest.java", "diffHunk": "@@ -42,26 +44,43 @@ public static void setUp() throws Exception {\n         @Override public String expectedId() { return ID; }\n         @Override public String expectedUrlContains() { return URL; }\n         @Override public String expectedOriginalUrlContains() { return URL; }\n-\n         @Override public StreamType expectedStreamType() { return StreamType.VIDEO_STREAM; }\n         @Override public String expectedUploaderName() { return \"gpn18\"; }\n         @Override public String expectedUploaderUrl() { return \"https://media.ccc.de/c/gpn18\"; }\n         @Override public List<String> expectedDescriptionContains() { return Arrays.asList(\"SSH-Sessions\", \"\\\"Terminal Multiplexer\\\"\"); }\n         @Override public long expectedLength() { return 3097; }\n         @Override public long expectedViewCountAtLeast() { return 2380; }\n         @Nullable @Override public String expectedUploadDate() { return \"2018-05-11 00:00:00.000\"; }\n-        @Nullable @Override public String expectedTextualUploadDate() { return \"2018-05-11T02:00:00.000+02:00\"; }\n-        @Override public long expectedLikeCountAtLeast() { return -1; }\n-        @Override public long expectedDislikeCountAtLeast() { return -1; }\n-        @Override public boolean expectedHasRelatedStreams() { return false; }\n-        @Override public boolean expectedHasSubtitles() { return false; }\n-        @Override public boolean expectedHasFrames() { return false; }\n-        @Override public List<String> expectedTags() { return Arrays.asList(\"gpn18\", \"105\"); }\n-        @Override public int expectedStreamSegmentsCount() { return 0; }\n+        @Nullable @Override public String expectedTextualUploadDate() {\n+            return \"2018-05-11T02:00:00.000+02:00\";\n+        }\n+        @Override public long expectedLikeCountAtLeast() {\n+            return -1;\n+        }\n+        @Override public long expectedDislikeCountAtLeast() {\n+            return -1;\n+        }\n+        @Override public boolean expectedHasRelatedStreams() {\n+            return false;\n+        }\n+        @Override public boolean expectedHasSubtitles() {\n+            return false;\n+        }\n+        @Override public boolean expectedHasFrames() {\n+            return false;\n+        }\n+        @Override public List<String> expectedTags() {\n+            return Arrays.asList(\"gpn18\", \"105\");\n+        }\n+        @Override public int expectedStreamSegmentsCount() {\n+            return 0;\n+        }\n+        @Override public Locale expectedLanguageInfo() {\n+            return new Locale(\"de\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce0bf6a7394323be052456b309162ef2fcac4517"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTU4NDM5MQ==", "bodyText": "I'm really confused, they are in one line in intellij, but not on GitHub / other editors\nfixed in the last push\ni agree it's more readable", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r575584391", "createdAt": "2021-02-13T00:13:55Z", "author": {"login": "B0pol"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/media_ccc/MediaCCCStreamExtractorTest.java", "diffHunk": "@@ -42,26 +44,43 @@ public static void setUp() throws Exception {\n         @Override public String expectedId() { return ID; }\n         @Override public String expectedUrlContains() { return URL; }\n         @Override public String expectedOriginalUrlContains() { return URL; }\n-\n         @Override public StreamType expectedStreamType() { return StreamType.VIDEO_STREAM; }\n         @Override public String expectedUploaderName() { return \"gpn18\"; }\n         @Override public String expectedUploaderUrl() { return \"https://media.ccc.de/c/gpn18\"; }\n         @Override public List<String> expectedDescriptionContains() { return Arrays.asList(\"SSH-Sessions\", \"\\\"Terminal Multiplexer\\\"\"); }\n         @Override public long expectedLength() { return 3097; }\n         @Override public long expectedViewCountAtLeast() { return 2380; }\n         @Nullable @Override public String expectedUploadDate() { return \"2018-05-11 00:00:00.000\"; }\n-        @Nullable @Override public String expectedTextualUploadDate() { return \"2018-05-11T02:00:00.000+02:00\"; }\n-        @Override public long expectedLikeCountAtLeast() { return -1; }\n-        @Override public long expectedDislikeCountAtLeast() { return -1; }\n-        @Override public boolean expectedHasRelatedStreams() { return false; }\n-        @Override public boolean expectedHasSubtitles() { return false; }\n-        @Override public boolean expectedHasFrames() { return false; }\n-        @Override public List<String> expectedTags() { return Arrays.asList(\"gpn18\", \"105\"); }\n-        @Override public int expectedStreamSegmentsCount() { return 0; }\n+        @Nullable @Override public String expectedTextualUploadDate() {\n+            return \"2018-05-11T02:00:00.000+02:00\";\n+        }\n+        @Override public long expectedLikeCountAtLeast() {\n+            return -1;\n+        }\n+        @Override public long expectedDislikeCountAtLeast() {\n+            return -1;\n+        }\n+        @Override public boolean expectedHasRelatedStreams() {\n+            return false;\n+        }\n+        @Override public boolean expectedHasSubtitles() {\n+            return false;\n+        }\n+        @Override public boolean expectedHasFrames() {\n+            return false;\n+        }\n+        @Override public List<String> expectedTags() {\n+            return Arrays.asList(\"gpn18\", \"105\");\n+        }\n+        @Override public int expectedStreamSegmentsCount() {\n+            return 0;\n+        }\n+        @Override public Locale expectedLanguageInfo() {\n+            return new Locale(\"de\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTUwMjc1MA=="}, "originalCommit": {"oid": "ce0bf6a7394323be052456b309162ef2fcac4517"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2887, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}