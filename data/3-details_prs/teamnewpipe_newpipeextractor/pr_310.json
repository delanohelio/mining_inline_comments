{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxOTAwMjM4", "number": 310, "title": "Add support for soundcloud comments", "bodyText": "I carefully read the contribution guidelines and agree to them.\n I have tested the API against NewPipe.\n I agree to create a pull request for NewPipe as soon as possible to make it compatible with the changed API. (just update extractor version)\n\nBy the way:\n\nI fixed by the way upload date wrong on soundcloud using API v2: it now displays the good time (we were not taking on board timezone.\nI reorganized soundcloud with the good packages (following youtube and peertube)\nI renamed methods in CommentsInfoItem to match the method names across NPE", "createdAt": "2020-04-10T13:02:32Z", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/310", "merged": true, "mergeCommit": {"oid": "665c69b5306d335985d5c0692f5119b5172c1b7a"}, "closed": true, "closedAt": "2020-05-07T13:35:58Z", "author": {"login": "B0pol"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcWNJEKgH2gAyNDAxOTAwMjM4OjYzNmM0MzA3NDNjOTg4ODhlZGQ5NjhhZGU0OTUwYjk5NzFhZTQwMDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABceTiMGgH2gAyNDAxOTAwMjM4OmJjMTNlMGM2MTZjN2EwMWM1ZjI1ODhlZDA4ZTQ5MTVlZjJlYTkxMDY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "636c430743c98888edd968ade4950b9971ae4001", "author": {"user": {"login": "B0pol", "name": "bopol"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/636c430743c98888edd968ade4950b9971ae4001", "committedDate": "2020-04-10T08:51:05Z", "message": "refactor: create extractors and linkHandler packages for SoundCloud, move YoutubeParsingHelper to youtube package (not linkhandler anymore)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNDY2Njg5", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/310#pullrequestreview-391466689", "createdAt": "2020-04-10T14:19:36Z", "commit": {"oid": "227f1612f66b1c0b3ebf18a34e81e08f86347f12"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNDoxOTozNlrOGD7x9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNDoxOTozNlrOGD7x9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3ODM1Ng==", "bodyText": "Remove the System.err.printlns", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/310#discussion_r406778356", "createdAt": "2020-04-10T14:19:36Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/extractors/SoundcloudCommentsExtractor.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package org.schabi.newpipe.extractor.services.soundcloud.extractors;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import com.grack.nanojson.JsonParser;\n+import com.grack.nanojson.JsonParserException;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.comments.CommentsExtractor;\n+import org.schabi.newpipe.extractor.comments.CommentsInfoItem;\n+import org.schabi.newpipe.extractor.comments.CommentsInfoItemsCollector;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Response;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+\n+public class SoundcloudCommentsExtractor extends CommentsExtractor {\n+\n+    private JsonObject json;\n+\n+    public SoundcloudCommentsExtractor(StreamingService service, ListLinkHandler uiHandler) {\n+        super(service, uiHandler);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<CommentsInfoItem> getInitialPage() throws IOException, ExtractionException {\n+        final CommentsInfoItemsCollector collector = new CommentsInfoItemsCollector(getServiceId());\n+\n+        collectStreamsFrom(collector, json.getArray(\"collection\"));\n+\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    @Override\n+    public String getNextPageUrl() throws IOException, ExtractionException {\n+        return json.getString(\"next_href\");\n+    }\n+\n+    @Override\n+    public InfoItemsPage<CommentsInfoItem> getPage(String pageUrl) throws IOException, ExtractionException {\n+        Downloader dl = NewPipe.getDownloader();\n+        Response rp = dl.get(pageUrl);\n+        try {\n+            json = JsonParser.object().from(rp.responseBody());\n+        } catch (JsonParserException e) {\n+            throw new ParsingException(\"Could not parse json\", e);\n+        }\n+\n+        final CommentsInfoItemsCollector collector = new CommentsInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, json.getArray(\"collection\"));\n+\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader) throws IOException, ExtractionException {\n+        Response response = downloader.get(getUrl());\n+        System.err.println(response.responseBody());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "227f1612f66b1c0b3ebf18a34e81e08f86347f12"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4352f9b848ee7e02c9523597399b4b3ccec9dac", "author": {"user": {"login": "B0pol", "name": "bopol"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/d4352f9b848ee7e02c9523597399b4b3ccec9dac", "committedDate": "2020-04-10T18:41:41Z", "message": "support comments for SoundCloud"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "227f1612f66b1c0b3ebf18a34e81e08f86347f12", "author": {"user": {"login": "B0pol", "name": "bopol"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/227f1612f66b1c0b3ebf18a34e81e08f86347f12", "committedDate": "2020-04-10T12:54:31Z", "message": "support comments for SoundCloud"}, "afterCommit": {"oid": "d4352f9b848ee7e02c9523597399b4b3ccec9dac", "author": {"user": {"login": "B0pol", "name": "bopol"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/d4352f9b848ee7e02c9523597399b4b3ccec9dac", "committedDate": "2020-04-10T18:41:41Z", "message": "support comments for SoundCloud"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1OTU5NTQw", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/310#pullrequestreview-395959540", "createdAt": "2020-04-18T23:21:07Z", "commit": {"oid": "d4352f9b848ee7e02c9523597399b4b3ccec9dac"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMzoyMTowN1rOGHvWmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMzoyMTowN1rOGHvWmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc2OTA1MQ==", "bodyText": "singletonList import is unused", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/310#discussion_r410769051", "createdAt": "2020-04-18T23:21:07Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/SoundcloudService.java", "diffHunk": "@@ -10,18 +10,22 @@\n import org.schabi.newpipe.extractor.localization.ContentCountry;\n import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n import org.schabi.newpipe.extractor.search.SearchExtractor;\n+import org.schabi.newpipe.extractor.services.soundcloud.extractors.*;\n+import org.schabi.newpipe.extractor.services.soundcloud.linkHandler.*;\n import org.schabi.newpipe.extractor.stream.StreamExtractor;\n import org.schabi.newpipe.extractor.subscription.SubscriptionExtractor;\n \n import java.util.List;\n \n+import static java.util.Arrays.asList;\n import static java.util.Collections.singletonList;\n import static org.schabi.newpipe.extractor.StreamingService.ServiceInfo.MediaCapability.AUDIO;\n+import static org.schabi.newpipe.extractor.StreamingService.ServiceInfo.MediaCapability.COMMENTS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4352f9b848ee7e02c9523597399b4b3ccec9dac"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0cbbc2a1f96838382b8200a208e8678f5eded77a", "author": {"user": {"login": "B0pol", "name": "bopol"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/0cbbc2a1f96838382b8200a208e8678f5eded77a", "committedDate": "2020-04-19T12:16:38Z", "message": "remove unused import"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2MjMzMTM0", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/310#pullrequestreview-396233134", "createdAt": "2020-04-20T08:15:06Z", "commit": {"oid": "0cbbc2a1f96838382b8200a208e8678f5eded77a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NDA0NzQ4", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/310#pullrequestreview-397404748", "createdAt": "2020-04-21T14:45:55Z", "commit": {"oid": "0cbbc2a1f96838382b8200a208e8678f5eded77a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDo0NTo1NlrOGJJvIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDo1NTowNVrOGJKOhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI0OTg4OA==", "bodyText": "Use @see", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/310#discussion_r412249888", "createdAt": "2020-04-21T14:45:56Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfoItemExtractor.java", "diffHunk": "@@ -3,17 +3,44 @@\n import org.schabi.newpipe.extractor.InfoItemExtractor;\n import org.schabi.newpipe.extractor.exceptions.ParsingException;\n import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.StreamExtractor;\n \n import javax.annotation.Nullable;\n \n public interface CommentsInfoItemExtractor extends InfoItemExtractor {\n-    String getCommentId() throws ParsingException;\n-    String getCommentText() throws ParsingException;\n-    String getAuthorName() throws ParsingException;\n-    String getAuthorThumbnail() throws ParsingException;\n+\n+    /**\n+     * AuthorEndpoint, in other words, link to authors' channel page\n+     */\n     String getAuthorEndpoint() throws ParsingException;\n+\n+    /**\n+     * Return the like count of the comment, or -1 if it's unavailable\n+     * see {@link StreamExtractor#getLikeCount()}\n+     */\n+    int getLikeCount() throws ParsingException;\n+\n+    /**\n+     * The text of the comment\n+     */\n+    String getCommentText() throws ParsingException;\n+\n+    /**\n+     * The upload date given by the service, unmodified\n+     * see {@link StreamExtractor#getTextualUploadDate()}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cbbc2a1f96838382b8200a208e8678f5eded77a"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI1MTcwNQ==", "bodyText": "Imho these should be renamed to getUploaderUrl(), getUploaderName(), and getUploaderAvatarUrl() to be consistent with the other Extractors.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/310#discussion_r412251705", "createdAt": "2020-04-21T14:47:57Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfoItemExtractor.java", "diffHunk": "@@ -3,17 +3,44 @@\n import org.schabi.newpipe.extractor.InfoItemExtractor;\n import org.schabi.newpipe.extractor.exceptions.ParsingException;\n import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.StreamExtractor;\n \n import javax.annotation.Nullable;\n \n public interface CommentsInfoItemExtractor extends InfoItemExtractor {\n-    String getCommentId() throws ParsingException;\n-    String getCommentText() throws ParsingException;\n-    String getAuthorName() throws ParsingException;\n-    String getAuthorThumbnail() throws ParsingException;\n+\n+    /**\n+     * AuthorEndpoint, in other words, link to authors' channel page\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4352f9b848ee7e02c9523597399b4b3ccec9dac"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI1NDY4Ng==", "bodyText": "Just return \"Comments\" like in PeerTube (and YouTube in my Page PR), as that function is just pointless. Maybe even do that in CommentsExtractor directly and remove the function from all the comments extractors.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/310#discussion_r412254686", "createdAt": "2020-04-21T14:51:23Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/extractors/SoundcloudCommentsExtractor.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package org.schabi.newpipe.extractor.services.soundcloud.extractors;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import com.grack.nanojson.JsonParser;\n+import com.grack.nanojson.JsonParserException;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.comments.CommentsExtractor;\n+import org.schabi.newpipe.extractor.comments.CommentsInfoItem;\n+import org.schabi.newpipe.extractor.comments.CommentsInfoItemsCollector;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Response;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+\n+public class SoundcloudCommentsExtractor extends CommentsExtractor {\n+\n+    private JsonObject json;\n+\n+    public SoundcloudCommentsExtractor(StreamingService service, ListLinkHandler uiHandler) {\n+        super(service, uiHandler);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<CommentsInfoItem> getInitialPage() throws IOException, ExtractionException {\n+        final CommentsInfoItemsCollector collector = new CommentsInfoItemsCollector(getServiceId());\n+\n+        collectStreamsFrom(collector, json.getArray(\"collection\"));\n+\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    @Override\n+    public String getNextPageUrl() throws IOException, ExtractionException {\n+        return json.getString(\"next_href\");\n+    }\n+\n+    @Override\n+    public InfoItemsPage<CommentsInfoItem> getPage(String pageUrl) throws IOException, ExtractionException {\n+        Downloader dl = NewPipe.getDownloader();\n+        Response rp = dl.get(pageUrl);\n+        try {\n+            json = JsonParser.object().from(rp.responseBody());\n+        } catch (JsonParserException e) {\n+            throw new ParsingException(\"Could not parse json\", e);\n+        }\n+\n+        final CommentsInfoItemsCollector collector = new CommentsInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, json.getArray(\"collection\"));\n+\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader) throws IOException, ExtractionException {\n+        Response response = downloader.get(getUrl());\n+        try {\n+            json = JsonParser.object().from(response.responseBody());\n+        } catch (JsonParserException e) {\n+            throw new ParsingException(\"Could not parse json\", e);\n+        }\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        return \"SoundCloud comments of track \" + getId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4352f9b848ee7e02c9523597399b4b3ccec9dac"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI1NTY0OQ==", "bodyText": "final", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/310#discussion_r412255649", "createdAt": "2020-04-21T14:52:35Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/extractors/SoundcloudCommentsExtractor.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package org.schabi.newpipe.extractor.services.soundcloud.extractors;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import com.grack.nanojson.JsonParser;\n+import com.grack.nanojson.JsonParserException;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.comments.CommentsExtractor;\n+import org.schabi.newpipe.extractor.comments.CommentsInfoItem;\n+import org.schabi.newpipe.extractor.comments.CommentsInfoItemsCollector;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Response;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+\n+public class SoundcloudCommentsExtractor extends CommentsExtractor {\n+\n+    private JsonObject json;\n+\n+    public SoundcloudCommentsExtractor(StreamingService service, ListLinkHandler uiHandler) {\n+        super(service, uiHandler);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<CommentsInfoItem> getInitialPage() throws IOException, ExtractionException {\n+        final CommentsInfoItemsCollector collector = new CommentsInfoItemsCollector(getServiceId());\n+\n+        collectStreamsFrom(collector, json.getArray(\"collection\"));\n+\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    @Override\n+    public String getNextPageUrl() throws IOException, ExtractionException {\n+        return json.getString(\"next_href\");\n+    }\n+\n+    @Override\n+    public InfoItemsPage<CommentsInfoItem> getPage(String pageUrl) throws IOException, ExtractionException {\n+        Downloader dl = NewPipe.getDownloader();\n+        Response rp = dl.get(pageUrl);\n+        try {\n+            json = JsonParser.object().from(rp.responseBody());\n+        } catch (JsonParserException e) {\n+            throw new ParsingException(\"Could not parse json\", e);\n+        }\n+\n+        final CommentsInfoItemsCollector collector = new CommentsInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, json.getArray(\"collection\"));\n+\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader) throws IOException, ExtractionException {\n+        Response response = downloader.get(getUrl());\n+        try {\n+            json = JsonParser.object().from(response.responseBody());\n+        } catch (JsonParserException e) {\n+            throw new ParsingException(\"Could not parse json\", e);\n+        }\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        return \"SoundCloud comments of track \" + getId();\n+    }\n+\n+    private void collectStreamsFrom(final CommentsInfoItemsCollector collector, final JsonArray entries) throws ParsingException {\n+        String url = getUrl();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4352f9b848ee7e02c9523597399b4b3ccec9dac"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI1NzkyNQ==", "bodyText": "getUrl() should never return an API URL.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/310#discussion_r412257925", "createdAt": "2020-04-21T14:55:05Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/linkHandler/SoundcloudCommentsLinkHandlerFactory.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.schabi.newpipe.extractor.services.soundcloud.linkHandler;\n+\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandlerFactory;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.schabi.newpipe.extractor.services.soundcloud.SoundcloudParsingHelper.clientId;\n+\n+public class SoundcloudCommentsLinkHandlerFactory extends ListLinkHandlerFactory {\n+\n+    private static final SoundcloudCommentsLinkHandlerFactory instance = new SoundcloudCommentsLinkHandlerFactory();\n+\n+    public static SoundcloudCommentsLinkHandlerFactory getInstance() {\n+        return instance;\n+    }\n+\n+    @Override\n+    public String getUrl(String id, List<String> contentFilter, String sortFilter) throws ParsingException {\n+        try {\n+            return \"https://api-v2.soundcloud.com/tracks/\" + id + \"/comments\" + \"?client_id=\" + clientId() +\n+                    \"&threaded=0\" + \"&filter_replies=1\"; // anything but 1 = sort by new\n+            // + \"&limit=NUMBER_OF_ITEMS_PER_REQUEST\". We let the API control (default = 10)\n+            // + \"&offset=OFFSET\". We let the API control (default = 0, then we use nextPageUrl)\n+        } catch (ExtractionException | IOException e) {\n+            throw new ParsingException(\"Could not get comments\");\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4352f9b848ee7e02c9523597399b4b3ccec9dac"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NTQ1MzQ1", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/310#pullrequestreview-397545345", "createdAt": "2020-04-21T17:59:39Z", "commit": {"oid": "1cca34ca272f0209a94b2298388994eff421a69d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNzo1OTozOVrOGJRP4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNzo1OTozOVrOGJRP4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM3Mjk2Mw==", "bodyText": "Why this indentation? Plus as you said, you shouldn't catch Throwable, and this file isn't even related to your PR", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/310#discussion_r412372963", "createdAt": "2020-04-21T17:59:39Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSubscriptionExtractor.java", "diffHunk": "@@ -103,7 +103,7 @@ private String readFromInputStream(InputStream inputStream) throws InvalidSource\n             }\n         } catch (InvalidSourceException e) {\n             throw e;\n-        } catch (Throwable e) {\n+        }   catch (Throwable e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cca34ca272f0209a94b2298388994eff421a69d"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1cca34ca272f0209a94b2298388994eff421a69d", "author": {"user": {"login": "B0pol", "name": "bopol"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/1cca34ca272f0209a94b2298388994eff421a69d", "committedDate": "2020-04-21T17:49:17Z", "message": "refactor comments\n\nrename methods in CommentsInfoItem interface to match the other method names across NewPipeExtractor\nremove getName in (Youtube|SoundCloud|Peertube)CommentsExtractor and move it up in CommentsExtractor, return \"Comments\" instead"}, "afterCommit": {"oid": "2ff4bf14faf52c21f91df23ad44cfd2b5a1f9120", "author": {"user": {"login": "B0pol", "name": "bopol"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/2ff4bf14faf52c21f91df23ad44cfd2b5a1f9120", "committedDate": "2020-04-21T18:04:38Z", "message": "refactor comments\n\nrename methods in CommentsInfoItem interface to match the other method names across NewPipeExtractor\nremove getName in (Youtube|SoundCloud|Peertube)CommentsExtractor and move it up in CommentsExtractor, return \"Comments\" instead"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2564bcf39997cbab8b6e331088c3ee41076e5e00", "author": {"user": {"login": "B0pol", "name": "bopol"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/2564bcf39997cbab8b6e331088c3ee41076e5e00", "committedDate": "2020-04-21T18:05:54Z", "message": "refactor comments\n\nrename methods in CommentsInfoItemExtractor interface to match the other method names across NewPipeExtractor\nremove getName in (Youtube|SoundCloud|Peertube)CommentsExtractor and move it up in CommentsExtractor, return \"Comments\" instead"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2ff4bf14faf52c21f91df23ad44cfd2b5a1f9120", "author": {"user": {"login": "B0pol", "name": "bopol"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/2ff4bf14faf52c21f91df23ad44cfd2b5a1f9120", "committedDate": "2020-04-21T18:04:38Z", "message": "refactor comments\n\nrename methods in CommentsInfoItem interface to match the other method names across NewPipeExtractor\nremove getName in (Youtube|SoundCloud|Peertube)CommentsExtractor and move it up in CommentsExtractor, return \"Comments\" instead"}, "afterCommit": {"oid": "2564bcf39997cbab8b6e331088c3ee41076e5e00", "author": {"user": {"login": "B0pol", "name": "bopol"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/2564bcf39997cbab8b6e331088c3ee41076e5e00", "committedDate": "2020-04-21T18:05:54Z", "message": "refactor comments\n\nrename methods in CommentsInfoItemExtractor interface to match the other method names across NewPipeExtractor\nremove getName in (Youtube|SoundCloud|Peertube)CommentsExtractor and move it up in CommentsExtractor, return \"Comments\" instead"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NTUxODcz", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/310#pullrequestreview-397551873", "createdAt": "2020-04-21T18:08:04Z", "commit": {"oid": "2564bcf39997cbab8b6e331088c3ee41076e5e00"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc13e0c616c7a01c5f2588ed08e4915ef2ea9106", "author": {"user": {"login": "B0pol", "name": "bopol"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/bc13e0c616c7a01c5f2588ed08e4915ef2ea9106", "committedDate": "2020-05-05T12:49:21Z", "message": "Merge remote-tracking branch 'upstream/dev' into soundcloudComments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3995, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}