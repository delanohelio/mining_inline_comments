{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2ODQzOTU4", "number": 479, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNDowODoyNlrOFEAHUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxMjozNjozM1rOFEZETg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NzQwNDk5OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNDowODoyNlrOID6Tfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNTowNToyOFrOID8t9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk3MTkwMw==", "bodyText": "Throwing Exceptions is expensive, because generating the tree of calls can take some time. Please invert the if statement as you are ignoring the thrown Exception anyway.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/479#discussion_r540971903", "createdAt": "2020-12-11T14:08:26Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -1061,4 +1062,54 @@ public Locale getLanguageInfo() {\n     public String getSupportInfo() {\n         return \"\";\n     }\n+\n+    @Nonnull\n+    @Override\n+    public List<StreamSegment> getStreamSegments() {\n+        final ArrayList<StreamSegment> segments = new ArrayList<>();\n+        try {\n+            final JsonArray panels = initialData.getArray(\"engagementPanels\");\n+            JsonArray segmentArray = null;\n+\n+            // Search for correct JsonObject containing the data => panelIdentifier == engagement-panel-macro-markers\n+            for (int i = 0; i < panels.size(); i++) {\n+                if (panels.getObject(i).getObject(\"engagementPanelSectionListRenderer\")\n+                        .getString(\"panelIdentifier\").equals(\"engagement-panel-macro-markers\")) {\n+                    segmentArray = panels.getObject(i).getObject(\"engagementPanelSectionListRenderer\")\n+                            .getObject(\"content\").getObject(\"macroMarkersListRenderer\").getArray(\"contents\");\n+                    break;\n+                }\n+            }\n+\n+            if (segmentArray == null) {\n+                throw new Exception(\"Couldn't find valid segments\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10100f290252296d5a1883f310e81362cbdadfd"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAxMTQ0NA==", "bodyText": "Alright, done.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/479#discussion_r541011444", "createdAt": "2020-12-11T15:05:28Z", "author": {"login": "vkay94"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -1061,4 +1062,54 @@ public Locale getLanguageInfo() {\n     public String getSupportInfo() {\n         return \"\";\n     }\n+\n+    @Nonnull\n+    @Override\n+    public List<StreamSegment> getStreamSegments() {\n+        final ArrayList<StreamSegment> segments = new ArrayList<>();\n+        try {\n+            final JsonArray panels = initialData.getArray(\"engagementPanels\");\n+            JsonArray segmentArray = null;\n+\n+            // Search for correct JsonObject containing the data => panelIdentifier == engagement-panel-macro-markers\n+            for (int i = 0; i < panels.size(); i++) {\n+                if (panels.getObject(i).getObject(\"engagementPanelSectionListRenderer\")\n+                        .getString(\"panelIdentifier\").equals(\"engagement-panel-macro-markers\")) {\n+                    segmentArray = panels.getObject(i).getObject(\"engagementPanelSectionListRenderer\")\n+                            .getObject(\"content\").getObject(\"macroMarkersListRenderer\").getArray(\"contents\");\n+                    break;\n+                }\n+            }\n+\n+            if (segmentArray == null) {\n+                throw new Exception(\"Couldn't find valid segments\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk3MTkwMw=="}, "originalCommit": {"oid": "c10100f290252296d5a1883f310e81362cbdadfd"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTg0MDI2OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMjoxNDowNVrOIERfFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMDowMzozMVrOIEWrTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM1MTcwMQ==", "bodyText": "why do you ignore all exceptions?", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/479#discussion_r541351701", "createdAt": "2020-12-11T22:14:05Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -1061,4 +1062,54 @@ public Locale getLanguageInfo() {\n     public String getSupportInfo() {\n         return \"\";\n     }\n+\n+    @Nonnull\n+    @Override\n+    public List<StreamSegment> getStreamSegments() {\n+        final ArrayList<StreamSegment> segments = new ArrayList<>();\n+        try {\n+            final JsonArray panels = initialData.getArray(\"engagementPanels\");\n+            JsonArray segmentArray = null;\n+\n+            // Search for correct JsonObject containing the data => panelIdentifier == engagement-panel-macro-markers\n+            for (int i = 0; i < panels.size(); i++) {\n+                if (panels.getObject(i).getObject(\"engagementPanelSectionListRenderer\")\n+                        .getString(\"panelIdentifier\").equals(\"engagement-panel-macro-markers\")) {\n+                    segmentArray = panels.getObject(i).getObject(\"engagementPanelSectionListRenderer\")\n+                            .getObject(\"content\").getObject(\"macroMarkersListRenderer\").getArray(\"contents\");\n+                    break;\n+                }\n+            }\n+\n+            if (segmentArray != null) {\n+                final long duration = getLength();\n+\n+                for (final Object object : segmentArray) {\n+                    final JsonObject segmentJson = ((JsonObject) object).getObject(\"macroMarkersListItemRenderer\");\n+\n+                    final int startTimeSeconds = segmentJson.getObject(\"onTap\").getObject(\"watchEndpoint\")\n+                            .getInt(\"startTimeSeconds\", -1);\n+\n+                    if (startTimeSeconds > duration) {\n+                        // Rarely there are streams which show a greater length in the search results\n+                        // than it's parsed on the details page, so ignore invalid segments set by uploader.\n+                        break;\n+                    }\n+\n+                    final String title = getTextFromObject(segmentJson.getObject(\"title\"));\n+                    final JsonArray previewsArray = segmentJson.getObject(\"thumbnail\").getArray(\"thumbnails\");\n+\n+                    final StreamSegment segment = new StreamSegment(title, startTimeSeconds);\n+                    if (!previewsArray.isEmpty()) {\n+                        // Assume that the thumbnail with the highest resolution is at the last position\n+                        segment.setPreviewUrl(previewsArray.getObject(previewsArray.size() - 1).getString(\"url\"));\n+                    }\n+                    segment.setUrl(getUrl() + \"?t=\" + startTimeSeconds);\n+                    segments.add(segment);\n+                }\n+            }\n+        } catch (Exception ignored) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34642c228ee84e771726d0cd4502f2d873a17b67"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQzNjc1MA==", "bodyText": "The reason I decided to ignore them is that there's the getLength method which could throw a ParsingException and because the segments are optional data, not like the title or description.\nBut thinking about it I should've worked with .has()  and return the empty list when it's \"obviouly\" not present by non-existing JSON-key, otherwise doing the actual parsing with its exceptions throwing if there are errors retrieving the objects etc.\nI'd reset the three commits and do it more clearer tomorrow, okay? ;)", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/479#discussion_r541436750", "createdAt": "2020-12-12T00:03:31Z", "author": {"login": "vkay94"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -1061,4 +1062,54 @@ public Locale getLanguageInfo() {\n     public String getSupportInfo() {\n         return \"\";\n     }\n+\n+    @Nonnull\n+    @Override\n+    public List<StreamSegment> getStreamSegments() {\n+        final ArrayList<StreamSegment> segments = new ArrayList<>();\n+        try {\n+            final JsonArray panels = initialData.getArray(\"engagementPanels\");\n+            JsonArray segmentArray = null;\n+\n+            // Search for correct JsonObject containing the data => panelIdentifier == engagement-panel-macro-markers\n+            for (int i = 0; i < panels.size(); i++) {\n+                if (panels.getObject(i).getObject(\"engagementPanelSectionListRenderer\")\n+                        .getString(\"panelIdentifier\").equals(\"engagement-panel-macro-markers\")) {\n+                    segmentArray = panels.getObject(i).getObject(\"engagementPanelSectionListRenderer\")\n+                            .getObject(\"content\").getObject(\"macroMarkersListRenderer\").getArray(\"contents\");\n+                    break;\n+                }\n+            }\n+\n+            if (segmentArray != null) {\n+                final long duration = getLength();\n+\n+                for (final Object object : segmentArray) {\n+                    final JsonObject segmentJson = ((JsonObject) object).getObject(\"macroMarkersListItemRenderer\");\n+\n+                    final int startTimeSeconds = segmentJson.getObject(\"onTap\").getObject(\"watchEndpoint\")\n+                            .getInt(\"startTimeSeconds\", -1);\n+\n+                    if (startTimeSeconds > duration) {\n+                        // Rarely there are streams which show a greater length in the search results\n+                        // than it's parsed on the details page, so ignore invalid segments set by uploader.\n+                        break;\n+                    }\n+\n+                    final String title = getTextFromObject(segmentJson.getObject(\"title\"));\n+                    final JsonArray previewsArray = segmentJson.getObject(\"thumbnail\").getArray(\"thumbnails\");\n+\n+                    final StreamSegment segment = new StreamSegment(title, startTimeSeconds);\n+                    if (!previewsArray.isEmpty()) {\n+                        // Assume that the thumbnail with the highest resolution is at the last position\n+                        segment.setPreviewUrl(previewsArray.getObject(previewsArray.size() - 1).getString(\"url\"));\n+                    }\n+                    segment.setUrl(getUrl() + \"?t=\" + startTimeSeconds);\n+                    segments.add(segment);\n+                }\n+            }\n+        } catch (Exception ignored) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM1MTcwMQ=="}, "originalCommit": {"oid": "34642c228ee84e771726d0cd4502f2d873a17b67"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMTQ5MzI2OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamSegment.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxMjozNjozM1rOIEes3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxMzozMjowM1rOIEfOnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU2ODIyMw==", "bodyText": "this looks YouTube specific and should therefore be moved from within the function to the function call.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/479#discussion_r541568223", "createdAt": "2020-12-12T12:36:33Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamSegment.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.schabi.newpipe.extractor.stream;\n+\n+\n+import javax.annotation.Nullable;\n+import java.io.Serializable;\n+\n+public class StreamSegment implements Serializable {\n+    /**\n+     * Title of this segment\n+     */\n+    private String title;\n+\n+    /**\n+     * Timestamp of the starting point in seconds\n+     */\n+    private int startTimeSeconds;\n+\n+    /**\n+     * Direct url to this segment. This can be null if the service doesn't provide such function.\n+     */\n+    @Nullable\n+    public String url;\n+\n+    /**\n+     * Preview url for this segment. This can be null if the service doesn't provide such function\n+     * or there is no resource found.\n+     */\n+    @Nullable\n+    private String previewUrl = null;\n+\n+    public StreamSegment(String title, int startTimeSeconds) {\n+        this.title = title;\n+        this.startTimeSeconds = startTimeSeconds;\n+    }\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    public void setTitle(final String title) {\n+        this.title = title;\n+    }\n+\n+    public int getStartTimeSeconds() {\n+        return startTimeSeconds;\n+    }\n+\n+    public void setStartTimeSeconds(final int startTimeSeconds) {\n+        this.startTimeSeconds = startTimeSeconds;\n+    }\n+\n+    @Nullable\n+    public String getUrl() {\n+        return url;\n+    }\n+\n+    public void setUrl(@Nullable final String url) {\n+        this.url = url;\n+    }\n+\n+    @Nullable\n+    public String getPreviewUrl() {\n+        return previewUrl;\n+    }\n+\n+    public void setPreviewUrl(@Nullable final String previewUrl) {\n+        this.previewUrl = previewUrl.replaceAll(\"\\\\u0026\", \"&\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a7a224a545e0dd5036b14e7e7a83e923be03d6a"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3Njg2Mw==", "bodyText": "Actually, it can be removed completely. The encoding when it's printed in the console is different to the one when saving the html itself from source tab in Chrome/Firefox (I checked it via System.out.println()) :')\nSo I'll wrap it with fixThumbnailUrl(url) then like the other getThumbnailUrl calls.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/479#discussion_r541576863", "createdAt": "2020-12-12T13:32:03Z", "author": {"login": "vkay94"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamSegment.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.schabi.newpipe.extractor.stream;\n+\n+\n+import javax.annotation.Nullable;\n+import java.io.Serializable;\n+\n+public class StreamSegment implements Serializable {\n+    /**\n+     * Title of this segment\n+     */\n+    private String title;\n+\n+    /**\n+     * Timestamp of the starting point in seconds\n+     */\n+    private int startTimeSeconds;\n+\n+    /**\n+     * Direct url to this segment. This can be null if the service doesn't provide such function.\n+     */\n+    @Nullable\n+    public String url;\n+\n+    /**\n+     * Preview url for this segment. This can be null if the service doesn't provide such function\n+     * or there is no resource found.\n+     */\n+    @Nullable\n+    private String previewUrl = null;\n+\n+    public StreamSegment(String title, int startTimeSeconds) {\n+        this.title = title;\n+        this.startTimeSeconds = startTimeSeconds;\n+    }\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    public void setTitle(final String title) {\n+        this.title = title;\n+    }\n+\n+    public int getStartTimeSeconds() {\n+        return startTimeSeconds;\n+    }\n+\n+    public void setStartTimeSeconds(final int startTimeSeconds) {\n+        this.startTimeSeconds = startTimeSeconds;\n+    }\n+\n+    @Nullable\n+    public String getUrl() {\n+        return url;\n+    }\n+\n+    public void setUrl(@Nullable final String url) {\n+        this.url = url;\n+    }\n+\n+    @Nullable\n+    public String getPreviewUrl() {\n+        return previewUrl;\n+    }\n+\n+    public void setPreviewUrl(@Nullable final String previewUrl) {\n+        this.previewUrl = previewUrl.replaceAll(\"\\\\u0026\", \"&\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU2ODIyMw=="}, "originalCommit": {"oid": "9a7a224a545e0dd5036b14e7e7a83e923be03d6a"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2787, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}