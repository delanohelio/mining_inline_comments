{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNTExNzMx", "number": 307, "title": "[PeerTube] playlist support", "bodyText": "I carefully read the contribution guidelines and agree to them.\n I have tested the API against NewPipe.\n I agree to create a pull request for NewPipe as soon as possible to make it compatible with the changed API.\n\nI've added playlist support and removed code duplication with getNextPageUrl() across peertube classes.", "createdAt": "2020-04-09T16:05:32Z", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/307", "merged": true, "mergeCommit": {"oid": "b40ccb507539dd7489775cca0187d6756bcb203a"}, "closed": true, "closedAt": "2020-05-11T18:53:03Z", "author": {"login": "B0pol"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcV_vhWgFqTM5MDk4MTM4Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcgQiX0gFqTQwOTIyNDM2NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwOTgxMzgy", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/307#pullrequestreview-390981382", "createdAt": "2020-04-09T17:14:24Z", "commit": {"oid": "d20d9148633128e36b6d9bb099d8ed1943414e02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzoxNDoyNFrOGDh35A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzoxNDoyNFrOGDh35A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM1Mzg5Mg==", "bodyText": "When getInitialPage() is called, fetchPage() should always already have been called, so no need to call it here. You also shouldn't fetch the initial page in onFetchPage() yet, but only in getInitialPage() and getNextPageUrl() if it hasn't been fetched yet.\nI see that something similar is done in some other services though, but that should also be changed, and imho we should just remove getNextPageUrl().", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/307#discussion_r406353892", "createdAt": "2020-04-09T17:14:24Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubePlaylistExtractor.java", "diffHunk": "@@ -1,85 +1,117 @@\n package org.schabi.newpipe.extractor.services.peertube.extractors;\n \n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import com.grack.nanojson.JsonParser;\n+import com.grack.nanojson.JsonParserException;\n import org.schabi.newpipe.extractor.StreamingService;\n import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Response;\n import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n import org.schabi.newpipe.extractor.exceptions.ParsingException;\n import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.services.peertube.PeertubeParsingHelper;\n import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+import org.schabi.newpipe.extractor.utils.JsonUtils;\n \n+import javax.annotation.Nonnull;\n import java.io.IOException;\n \n+import static org.schabi.newpipe.extractor.services.peertube.PeertubeParsingHelper.*;\n+\n public class PeertubePlaylistExtractor extends PlaylistExtractor {\n \n+    private JsonObject playlistInfo;\n+    private JsonObject playlistVideos;\n+\n+    private InfoItemsPage<StreamInfoItem> initPage;\n+    private long total;\n+\n     public PeertubePlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n         super(service, linkHandler);\n-        // TODO Auto-generated constructor stub\n     }\n \n     @Override\n     public String getThumbnailUrl() throws ParsingException {\n-        // TODO Auto-generated method stub\n-        return null;\n+        return getBaseUrl() + playlistInfo.getString(\"thumbnailPath\");\n     }\n \n     @Override\n     public String getBannerUrl() throws ParsingException {\n-        // TODO Auto-generated method stub\n         return null;\n     }\n \n     @Override\n     public String getUploaderUrl() throws ParsingException {\n-        // TODO Auto-generated method stub\n-        return null;\n+        return playlistInfo.getObject(\"ownerAccount\").getString(\"url\");\n     }\n \n     @Override\n     public String getUploaderName() throws ParsingException {\n-        // TODO Auto-generated method stub\n-        return null;\n+        return playlistInfo.getObject(\"ownerAccount\").getString(\"displayName\");\n     }\n \n     @Override\n     public String getUploaderAvatarUrl() throws ParsingException {\n-        // TODO Auto-generated method stub\n-        return null;\n+        return getBaseUrl() + playlistInfo.getObject(\"ownerAccount\").getObject(\"avatar\").getString(\"path\");\n     }\n \n     @Override\n     public long getStreamCount() throws ParsingException {\n-        // TODO Auto-generated method stub\n-        return 0;\n+        return playlistInfo.getNumber(\"videosLength\").longValue();\n     }\n \n+    @Nonnull\n     @Override\n     public InfoItemsPage<StreamInfoItem> getInitialPage() throws IOException, ExtractionException {\n-        // TODO Auto-generated method stub\n-        return null;\n+        super.fetchPage();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d20d9148633128e36b6d9bb099d8ed1943414e02"}, "originalPosition": 83}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cb6d4aba20ef5b5ced3e8ff09dd4690eca6291d6", "author": {"user": {"login": "B0pol", "name": "bopol"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/cb6d4aba20ef5b5ced3e8ff09dd4690eca6291d6", "committedDate": "2020-04-10T16:55:06Z", "message": "fetch initialpage only in getInitialPage"}, "afterCommit": {"oid": "fcb3f25bccb7ba1223908276f3b7998a7255010c", "author": {"user": {"login": "B0pol", "name": "bopol"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/fcb3f25bccb7ba1223908276f3b7998a7255010c", "committedDate": "2020-04-10T17:54:39Z", "message": "[PeerTube] playlist support & refactoring"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNzU2Mzc3", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/307#pullrequestreview-391756377", "createdAt": "2020-04-11T10:50:27Z", "commit": {"oid": "fcb3f25bccb7ba1223908276f3b7998a7255010c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1MDoyOFrOGEMShQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1MDoyOFrOGEMShQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODgzNw==", "bodyText": "maybe use /playlist/ ? that way it would not filter /videos/watch/696969playlist696969", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/307#discussion_r407048837", "createdAt": "2020-04-11T10:50:28Z", "author": {"login": "yausername"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeStreamLinkHandlerFactory.java", "diffHunk": "@@ -37,6 +37,12 @@ public String getId(String url) throws ParsingException, IllegalArgumentExceptio\n \n     @Override\n     public boolean onAcceptUrl(final String url) throws FoundAdException {\n-        return url.contains(\"/videos/\");\n+        if (url.contains(\"playlist\")) return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcb3f25bccb7ba1223908276f3b7998a7255010c"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a98e4174bf9ce30ab45ac44f08a421cf4b069efc", "author": {"user": {"login": "B0pol", "name": "bopol"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/a98e4174bf9ce30ab45ac44f08a421cf4b069efc", "committedDate": "2020-04-11T12:56:43Z", "message": "remove useless check"}, "afterCommit": {"oid": "982b28df5f0ac32aafce4c3766bb92798a23da40", "author": {"user": {"login": "B0pol", "name": "bopol"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/982b28df5f0ac32aafce4c3766bb92798a23da40", "committedDate": "2020-04-11T13:04:10Z", "message": "address yausername change"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "982b28df5f0ac32aafce4c3766bb92798a23da40", "author": {"user": {"login": "B0pol", "name": "bopol"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/982b28df5f0ac32aafce4c3766bb92798a23da40", "committedDate": "2020-04-11T13:04:10Z", "message": "address yausername change"}, "afterCommit": {"oid": "061720d137f3ca2cfa628f4ff699db3388d7ed5e", "author": {"user": {"login": "B0pol", "name": "bopol"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/061720d137f3ca2cfa628f4ff699db3388d7ed5e", "committedDate": "2020-05-05T13:26:48Z", "message": "address yausername change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bab9d9fc00cc36d4efc0170efa417db91e4eb51", "author": {"user": {"login": "B0pol", "name": "bopol"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/5bab9d9fc00cc36d4efc0170efa417db91e4eb51", "committedDate": "2020-05-08T22:52:04Z", "message": "[PeerTube] playlist support & refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf99107745a86c0f4f65a405e9eb7ebbe7673d38", "author": {"user": {"login": "B0pol", "name": "bopol"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/cf99107745a86c0f4f65a405e9eb7ebbe7673d38", "committedDate": "2020-05-08T22:52:04Z", "message": "address yausername change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a6e92ebf6e1ba2db6076cf06660991b8972cf8f", "author": {"user": {"login": "B0pol", "name": "bopol"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/1a6e92ebf6e1ba2db6076cf06660991b8972cf8f", "committedDate": "2020-05-09T07:52:24Z", "message": "add getSubChannel Name, Url and AvatarUrl for playlists"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cae95bf09ddc59ec77b3a905a23278318ef15f7", "author": {"user": {"login": "B0pol", "name": "bopol"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/7cae95bf09ddc59ec77b3a905a23278318ef15f7", "committedDate": "2020-05-09T08:15:35Z", "message": "add tests for subchannel stuff in playlists"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "061720d137f3ca2cfa628f4ff699db3388d7ed5e", "author": {"user": {"login": "B0pol", "name": "bopol"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/061720d137f3ca2cfa628f4ff699db3388d7ed5e", "committedDate": "2020-05-05T13:26:48Z", "message": "address yausername change"}, "afterCommit": {"oid": "7cae95bf09ddc59ec77b3a905a23278318ef15f7", "author": {"user": {"login": "B0pol", "name": "bopol"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/7cae95bf09ddc59ec77b3a905a23278318ef15f7", "committedDate": "2020-05-09T08:15:35Z", "message": "add tests for subchannel stuff in playlists"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5MjI0MzY1", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/307#pullrequestreview-409224365", "createdAt": "2020-05-11T14:26:51Z", "commit": {"oid": "7cae95bf09ddc59ec77b3a905a23278318ef15f7"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNDoyNjo1MVrOGTet4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNDoyNjo1MVrOGTet4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA3OTM5Mg==", "bodyText": "This shouldn't happen like this, however it's not worth fixing it until my next page PR (where you could just make it a normal variable in the function), especially as it's done like this in the other PeerTube ListExtractors as well.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/307#discussion_r423079392", "createdAt": "2020-05-11T14:26:51Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubePlaylistExtractor.java", "diffHunk": "@@ -1,85 +1,135 @@\n package org.schabi.newpipe.extractor.services.peertube.extractors;\n \n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import com.grack.nanojson.JsonParser;\n+import com.grack.nanojson.JsonParserException;\n import org.schabi.newpipe.extractor.StreamingService;\n import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Response;\n import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n import org.schabi.newpipe.extractor.exceptions.ParsingException;\n import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.services.peertube.PeertubeParsingHelper;\n import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+import org.schabi.newpipe.extractor.utils.JsonUtils;\n \n+import javax.annotation.Nonnull;\n import java.io.IOException;\n \n+import static org.schabi.newpipe.extractor.services.peertube.PeertubeParsingHelper.*;\n+\n public class PeertubePlaylistExtractor extends PlaylistExtractor {\n \n+    private JsonObject playlistInfo;\n+    private JsonObject playlistVideos;\n+    private String initialPageUrl;\n+\n+    private long total;\n+\n     public PeertubePlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n         super(service, linkHandler);\n-        // TODO Auto-generated constructor stub\n     }\n \n     @Override\n     public String getThumbnailUrl() throws ParsingException {\n-        // TODO Auto-generated method stub\n-        return null;\n+        return getBaseUrl() + playlistInfo.getString(\"thumbnailPath\");\n     }\n \n     @Override\n     public String getBannerUrl() throws ParsingException {\n-        // TODO Auto-generated method stub\n         return null;\n     }\n \n     @Override\n     public String getUploaderUrl() throws ParsingException {\n-        // TODO Auto-generated method stub\n-        return null;\n+        return playlistInfo.getObject(\"ownerAccount\").getString(\"url\");\n     }\n \n     @Override\n     public String getUploaderName() throws ParsingException {\n-        // TODO Auto-generated method stub\n-        return null;\n+        return playlistInfo.getObject(\"ownerAccount\").getString(\"displayName\");\n     }\n \n     @Override\n     public String getUploaderAvatarUrl() throws ParsingException {\n-        // TODO Auto-generated method stub\n-        return null;\n+        return getBaseUrl() + playlistInfo.getObject(\"ownerAccount\").getObject(\"avatar\").getString(\"path\");\n     }\n \n     @Override\n     public long getStreamCount() throws ParsingException {\n-        // TODO Auto-generated method stub\n-        return 0;\n+        return playlistInfo.getNumber(\"videosLength\").longValue();\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getSubChannelName() throws ParsingException {\n+        return playlistInfo.getObject(\"videoChannel\").getString(\"displayName\");\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getSubChannelUrl() throws ParsingException {\n+        return playlistInfo.getObject(\"videoChannel\").getString(\"url\");\n     }\n \n+    @Nonnull\n+    @Override\n+    public String getSubChannelAvatarUrl() throws ParsingException {\n+        return getBaseUrl() + playlistInfo.getObject(\"videoChannel\").getObject(\"avatar\").getString(\"path\");\n+    }\n+\n+    @Nonnull\n     @Override\n     public InfoItemsPage<StreamInfoItem> getInitialPage() throws IOException, ExtractionException {\n-        // TODO Auto-generated method stub\n-        return null;\n+        return getPage(initialPageUrl);\n     }\n \n     @Override\n     public String getNextPageUrl() throws IOException, ExtractionException {\n-        // TODO Auto-generated method stub\n-        return null;\n+        return PeertubeParsingHelper.getNextPageUrl(initialPageUrl, total);\n     }\n \n     @Override\n     public InfoItemsPage<StreamInfoItem> getPage(String pageUrl) throws IOException, ExtractionException {\n-        // TODO Auto-generated method stub\n-        return null;\n+        Response response = getDownloader().get(pageUrl);\n+        try {\n+            playlistVideos = JsonParser.object().from(response.responseBody());\n+        } catch (JsonParserException jpe) {\n+            throw new ExtractionException(\"Could not parse json\", jpe);\n+        }\n+        PeertubeParsingHelper.validate(playlistVideos);\n+\n+        this.total = JsonUtils.getNumber(playlistVideos, \"total\").longValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cae95bf09ddc59ec77b3a905a23278318ef15f7"}, "originalPosition": 123}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3992, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}