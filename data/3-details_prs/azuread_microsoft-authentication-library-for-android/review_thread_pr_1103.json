{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0Nzg4NTUz", "number": 1103, "reviewThreads": {"totalCount": 48, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzowNjo1MlrOEQ1AJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODo1MTowNVrOESg52w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDgxMDYwOnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzowNjo1MlrOG1M7Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzowNjo1MlrOG1M7Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzOTQzNQ==", "bodyText": "typo: change deviceto to device to", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458439435", "createdAt": "2020-07-21T23:06:52Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "diffHunk": "@@ -84,6 +85,19 @@ void acquireToken(@NonNull final Activity activity,\n     @WorkerThread\n     IAuthenticationResult acquireTokenSilent(@NonNull final AcquireTokenSilentParameters acquireTokenSilentParameters) throws InterruptedException, MsalException;\n \n+    /**\n+     * Perform the Device Code Flow (DCF) protocol to allow a deviceto authenticate and get a new access token without input capability.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d588b52959359cf0a4e0593829b2adf492fcccf"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDgxNDQ3OnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzowODo0MlrOG1M9Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzowODo0MlrOG1M9Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0MDAxNQ==", "bodyText": "We may not need to document all this here, and rather it would be better to document these in the javadoc for DeviceCodeFlowCallback class and over here a simple one line definition of a callback should suffice", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458440015", "createdAt": "2020-07-21T23:08:42Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "diffHunk": "@@ -84,6 +85,19 @@ void acquireToken(@NonNull final Activity activity,\n     @WorkerThread\n     IAuthenticationResult acquireTokenSilent(@NonNull final AcquireTokenSilentParameters acquireTokenSilentParameters) throws InterruptedException, MsalException;\n \n+    /**\n+     * Perform the Device Code Flow (DCF) protocol to allow a deviceto authenticate and get a new access token without input capability.\n+     * @param scopes\n+     * @param callback The {@link DeviceCodeFlowCallback} object to receive responses from the protocol.\n+     *                 1). Receiving authentication information (user_code, verification_uri, and instruction message)\n+     *                 via {@link DeviceCodeFlowCallback#getUserCode(String, String, String)}.\n+     *                 2). Receiving a successful authnetication result containing a fresh access token\n+     *                 via {@link DeviceCodeFlowCallback#getToken(AuthenticationResult)}.\n+     *                 3). Receiving an exception detailing what went wrong in the protocol\n+     *                 via {@link DeviceCodeFlowCallback#onError(MsalException)}.\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d588b52959359cf0a4e0593829b2adf492fcccf"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDgxODAyOnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoxMDoxNlrOG1M_bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoxMDoxNlrOG1M_bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0MDU1OA==", "bodyText": "nit: rename dcfCallback to dcfCommandCallback or deviceCodeFlowCommandCallback", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458440558", "createdAt": "2020-07-21T23:10:16Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "diffHunk": "@@ -1618,6 +1623,49 @@ public void onError(MsalException exception) {\n         }\n     }\n \n+    public void deviceCodeFlow(@Nullable String[] scopes, @NonNull final DeviceCodeFlowCallback callback) {\n+        // Create a DeviceCodeFlowCommandParameters object that takes in the desired scopes and the callback object\n+        // Use CommandParametersAdapter\n+        final DeviceCodeFlowCommandParameters commandParameters = CommandParametersAdapter\n+                    .createDeviceCodeFlowCommandParameters(\n+                            mPublicClientConfiguration,\n+                            mPublicClientConfiguration.getOAuth2TokenCache(),\n+                            scopes);\n+\n+        // Create a CommandCallback object from the DeviceCodeFlowCallback object\n+        final DeviceCodeFlowCommandCallback dcfCallback = getDeviceCodeFlowCommandCallback(callback);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d588b52959359cf0a4e0593829b2adf492fcccf"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDgzMjYxOnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoxNzowN1rOG1NH8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMTo0MjozNlrOG1er3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0MjczNg==", "bodyText": "Looking at your design doc, I see you called out that (at least for now), Device Code Flow is only supported for Local Msal and NOT supported via the Broker. Over here I see the DeviceCodeFlowCommand consuming the Default Controller by calling getDefaultController - that's contradicting what's in the design doc. getDefaultController returns the BrokerMsalController if a broker is installed on the device.\nWhat is our plan in this case? Do we let flow go over to the broker and then throw some exception indicating that the DCF is not supported? Or wouldn't it be better for the DeviceCodeFlowCommand to just consume the LocalMsalController (even if a broker is present on the device) to always use the local MSAL flow for the DeviceCodeFlowCommand ?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458442736", "createdAt": "2020-07-21T23:17:07Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "diffHunk": "@@ -1618,6 +1623,49 @@ public void onError(MsalException exception) {\n         }\n     }\n \n+    public void deviceCodeFlow(@Nullable String[] scopes, @NonNull final DeviceCodeFlowCallback callback) {\n+        // Create a DeviceCodeFlowCommandParameters object that takes in the desired scopes and the callback object\n+        // Use CommandParametersAdapter\n+        final DeviceCodeFlowCommandParameters commandParameters = CommandParametersAdapter\n+                    .createDeviceCodeFlowCommandParameters(\n+                            mPublicClientConfiguration,\n+                            mPublicClientConfiguration.getOAuth2TokenCache(),\n+                            scopes);\n+\n+        // Create a CommandCallback object from the DeviceCodeFlowCallback object\n+        final DeviceCodeFlowCommandCallback dcfCallback = getDeviceCodeFlowCommandCallback(callback);\n+\n+        // Attempt protocol\n+        try {\n+            // Create a DeviceCodeFlowCommand object\n+            // Pass the command parameters, default controller, and command callback\n+            // Telemetry with DEVICE_CODE_FLOW_CALLBACK\n+            final DeviceCodeFlowCommand deviceCodeFlowCommand = new DeviceCodeFlowCommand(\n+                    commandParameters,\n+                    MSALControllerFactory.getDefaultController(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d588b52959359cf0a4e0593829b2adf492fcccf"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODczMDQ2Mg==", "bodyText": "Yes, Scope is limited to MSAL. At the start of the design process, I was going to look into how to limit the command to a single controller instead of using default controller, but I forgot to do so as I was creating the design document and focused on other things. But yes, ideally I would want the API to just use LocalMsalController even if Broker is installed on the device (at least until Broker support is implemented).", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458730462", "createdAt": "2020-07-22T11:42:36Z", "author": {"login": "t-fadura"}, "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "diffHunk": "@@ -1618,6 +1623,49 @@ public void onError(MsalException exception) {\n         }\n     }\n \n+    public void deviceCodeFlow(@Nullable String[] scopes, @NonNull final DeviceCodeFlowCallback callback) {\n+        // Create a DeviceCodeFlowCommandParameters object that takes in the desired scopes and the callback object\n+        // Use CommandParametersAdapter\n+        final DeviceCodeFlowCommandParameters commandParameters = CommandParametersAdapter\n+                    .createDeviceCodeFlowCommandParameters(\n+                            mPublicClientConfiguration,\n+                            mPublicClientConfiguration.getOAuth2TokenCache(),\n+                            scopes);\n+\n+        // Create a CommandCallback object from the DeviceCodeFlowCallback object\n+        final DeviceCodeFlowCommandCallback dcfCallback = getDeviceCodeFlowCommandCallback(callback);\n+\n+        // Attempt protocol\n+        try {\n+            // Create a DeviceCodeFlowCommand object\n+            // Pass the command parameters, default controller, and command callback\n+            // Telemetry with DEVICE_CODE_FLOW_CALLBACK\n+            final DeviceCodeFlowCommand deviceCodeFlowCommand = new DeviceCodeFlowCommand(\n+                    commandParameters,\n+                    MSALControllerFactory.getDefaultController(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0MjczNg=="}, "originalCommit": {"oid": "2d588b52959359cf0a4e0593829b2adf492fcccf"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDgzOTcxOnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/internal/CommandParametersAdapter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoyMDoyMFrOG1NMAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjoxMzowNlrOG1foJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0Mzc3OQ==", "bodyText": "What Authentication Schemes are actually supported over DCF?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458443779", "createdAt": "2020-07-21T23:20:20Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/CommandParametersAdapter.java", "diffHunk": "@@ -193,6 +194,36 @@ public static SilentTokenCommandParameters createSilentTokenCommandParameters(\n         return commandParameters;\n     }\n \n+    public static DeviceCodeFlowCommandParameters createDeviceCodeFlowCommandParameters(\n+            @NonNull final PublicClientApplicationConfiguration configuration,\n+            @NonNull final OAuth2TokenCache tokenCache,\n+            @NonNull String[] scopes){\n+\n+        final AbstractAuthenticationScheme authenticationScheme = AuthenticationSchemeFactory.createScheme(\n+                configuration.getAppContext(),\n+                null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d588b52959359cf0a4e0593829b2adf492fcccf"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0NDA2NA==", "bodyText": "If it's just Bearer then we should hard code that here instead of null as the logic inside createScheme to handle null values may change and we don't want this to break when that happens", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458444064", "createdAt": "2020-07-21T23:21:19Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/CommandParametersAdapter.java", "diffHunk": "@@ -193,6 +194,36 @@ public static SilentTokenCommandParameters createSilentTokenCommandParameters(\n         return commandParameters;\n     }\n \n+    public static DeviceCodeFlowCommandParameters createDeviceCodeFlowCommandParameters(\n+            @NonNull final PublicClientApplicationConfiguration configuration,\n+            @NonNull final OAuth2TokenCache tokenCache,\n+            @NonNull String[] scopes){\n+\n+        final AbstractAuthenticationScheme authenticationScheme = AuthenticationSchemeFactory.createScheme(\n+                configuration.getAppContext(),\n+                null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0Mzc3OQ=="}, "originalCommit": {"oid": "2d588b52959359cf0a4e0593829b2adf492fcccf"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc0NTg5NA==", "bodyText": "I went ahead and hard coded a BearerAuthenticationSchemeInternal Object.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458745894", "createdAt": "2020-07-22T12:13:06Z", "author": {"login": "t-fadura"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/CommandParametersAdapter.java", "diffHunk": "@@ -193,6 +194,36 @@ public static SilentTokenCommandParameters createSilentTokenCommandParameters(\n         return commandParameters;\n     }\n \n+    public static DeviceCodeFlowCommandParameters createDeviceCodeFlowCommandParameters(\n+            @NonNull final PublicClientApplicationConfiguration configuration,\n+            @NonNull final OAuth2TokenCache tokenCache,\n+            @NonNull String[] scopes){\n+\n+        final AbstractAuthenticationScheme authenticationScheme = AuthenticationSchemeFactory.createScheme(\n+                configuration.getAppContext(),\n+                null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0Mzc3OQ=="}, "originalCommit": {"oid": "2d588b52959359cf0a4e0593829b2adf492fcccf"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDg0Mjg0OnYy", "diffSide": "RIGHT", "path": "msal/src/test/java/com/microsoft/identity/client/e2e/shadows/ShadowDeviceCodeFlowCommandSuccessful.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoyMTo1OFrOG1NN7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoyMTo1OFrOG1NN7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0NDI2OA==", "bodyText": "Would be good to have an empty line above this", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458444268", "createdAt": "2020-07-21T23:21:58Z", "author": {"login": "shahzaibj"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/shadows/ShadowDeviceCodeFlowCommandSuccessful.java", "diffHunk": "@@ -0,0 +1,80 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.shadows;\n+\n+import com.microsoft.identity.common.internal.cache.CacheRecord;\n+import com.microsoft.identity.common.internal.cache.ICacheRecord;\n+import com.microsoft.identity.common.internal.commands.DeviceCodeFlowCommand;\n+import com.microsoft.identity.common.internal.commands.DeviceCodeFlowCommandCallback;\n+import com.microsoft.identity.common.internal.dto.AccountRecord;\n+import com.microsoft.identity.common.internal.request.SdkType;\n+import com.microsoft.identity.common.internal.result.AcquireTokenResult;\n+import com.microsoft.identity.common.internal.result.ILocalAuthenticationResult;\n+import com.microsoft.identity.common.internal.result.LocalAuthenticationResult;\n+\n+import org.robolectric.annotation.Implementation;\n+import org.robolectric.annotation.Implements;\n+import org.robolectric.annotation.RealObject;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Shadow class that simulates Device Code Flow successfully returning an acquire token result object.\n+ */\n+@Implements(DeviceCodeFlowCommand.class)\n+public class ShadowDeviceCodeFlowCommandSuccessful {\n+    @RealObject", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d588b52959359cf0a4e0593829b2adf492fcccf"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDg0Mzg4OnYy", "diffSide": "RIGHT", "path": "msal/src/test/java/com/microsoft/identity/client/e2e/shadows/ShadowDeviceCodeFlowCommandSuccessful.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoyMjozMlrOG1NOig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoyMjozMlrOG1NOig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0NDQyNg==", "bodyText": "nit: add final here and everywhere as applicable", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458444426", "createdAt": "2020-07-21T23:22:32Z", "author": {"login": "shahzaibj"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/shadows/ShadowDeviceCodeFlowCommandSuccessful.java", "diffHunk": "@@ -0,0 +1,80 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.shadows;\n+\n+import com.microsoft.identity.common.internal.cache.CacheRecord;\n+import com.microsoft.identity.common.internal.cache.ICacheRecord;\n+import com.microsoft.identity.common.internal.commands.DeviceCodeFlowCommand;\n+import com.microsoft.identity.common.internal.commands.DeviceCodeFlowCommandCallback;\n+import com.microsoft.identity.common.internal.dto.AccountRecord;\n+import com.microsoft.identity.common.internal.request.SdkType;\n+import com.microsoft.identity.common.internal.result.AcquireTokenResult;\n+import com.microsoft.identity.common.internal.result.ILocalAuthenticationResult;\n+import com.microsoft.identity.common.internal.result.LocalAuthenticationResult;\n+\n+import org.robolectric.annotation.Implementation;\n+import org.robolectric.annotation.Implements;\n+import org.robolectric.annotation.RealObject;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Shadow class that simulates Device Code Flow successfully returning an acquire token result object.\n+ */\n+@Implements(DeviceCodeFlowCommand.class)\n+public class ShadowDeviceCodeFlowCommandSuccessful {\n+    @RealObject\n+    private DeviceCodeFlowCommand mDeviceCodeFlowCommand;\n+\n+    @Implementation\n+    public AcquireTokenResult execute() {\n+        DeviceCodeFlowCommandCallback callback = (DeviceCodeFlowCommandCallback) mDeviceCodeFlowCommand.getCallback();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d588b52959359cf0a4e0593829b2adf492fcccf"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDg0NDc0OnYy", "diffSide": "RIGHT", "path": "msal/src/test/java/com/microsoft/identity/client/e2e/shadows/ShadowDeviceCodeFlowCommandSuccessful.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoyMzowMVrOG1NO_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoyMzowMVrOG1NO_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0NDU0MQ==", "bodyText": "nit: rename to localAuthResult or localAuthenticationResult", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458444541", "createdAt": "2020-07-21T23:23:01Z", "author": {"login": "shahzaibj"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/shadows/ShadowDeviceCodeFlowCommandSuccessful.java", "diffHunk": "@@ -0,0 +1,80 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.shadows;\n+\n+import com.microsoft.identity.common.internal.cache.CacheRecord;\n+import com.microsoft.identity.common.internal.cache.ICacheRecord;\n+import com.microsoft.identity.common.internal.commands.DeviceCodeFlowCommand;\n+import com.microsoft.identity.common.internal.commands.DeviceCodeFlowCommandCallback;\n+import com.microsoft.identity.common.internal.dto.AccountRecord;\n+import com.microsoft.identity.common.internal.request.SdkType;\n+import com.microsoft.identity.common.internal.result.AcquireTokenResult;\n+import com.microsoft.identity.common.internal.result.ILocalAuthenticationResult;\n+import com.microsoft.identity.common.internal.result.LocalAuthenticationResult;\n+\n+import org.robolectric.annotation.Implementation;\n+import org.robolectric.annotation.Implements;\n+import org.robolectric.annotation.RealObject;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Shadow class that simulates Device Code Flow successfully returning an acquire token result object.\n+ */\n+@Implements(DeviceCodeFlowCommand.class)\n+public class ShadowDeviceCodeFlowCommandSuccessful {\n+    @RealObject\n+    private DeviceCodeFlowCommand mDeviceCodeFlowCommand;\n+\n+    @Implementation\n+    public AcquireTokenResult execute() {\n+        DeviceCodeFlowCommandCallback callback = (DeviceCodeFlowCommandCallback) mDeviceCodeFlowCommand.getCallback();\n+        callback.getUserCode(\n+                \"https://login.microsoftonline.com/common/oauth2/deviceauth\",\n+                \"ABCDEFGH\",\n+                \"Follow these instructions to authenticate.\");\n+\n+        // Create parameters for dummy authentication result\n+        CacheRecord cRecord = new CacheRecord();\n+        cRecord.setAccount(new AccountRecord());\n+        cRecord.getAccount().setHomeAccountId(\"abcd\");\n+        cRecord.getAccount().setLocalAccountId(\"abcd\");\n+        List<ICacheRecord> list = new ArrayList<>();\n+        list.add(cRecord);\n+\n+        // Create dummy authentication result\n+        ILocalAuthenticationResult localAuth = new LocalAuthenticationResult(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d588b52959359cf0a4e0593829b2adf492fcccf"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDg0NTYwOnYy", "diffSide": "RIGHT", "path": "msal/src/test/java/com/microsoft/identity/client/e2e/shadows/ShadowDeviceCodeFlowCommandSuccessful.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoyMzoyM1rOG1NPbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoyMzoyM1rOG1NPbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0NDY1NA==", "bodyText": "nit: rename to tokenResult or acquireTokenResult", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458444654", "createdAt": "2020-07-21T23:23:23Z", "author": {"login": "shahzaibj"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/shadows/ShadowDeviceCodeFlowCommandSuccessful.java", "diffHunk": "@@ -0,0 +1,80 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.shadows;\n+\n+import com.microsoft.identity.common.internal.cache.CacheRecord;\n+import com.microsoft.identity.common.internal.cache.ICacheRecord;\n+import com.microsoft.identity.common.internal.commands.DeviceCodeFlowCommand;\n+import com.microsoft.identity.common.internal.commands.DeviceCodeFlowCommandCallback;\n+import com.microsoft.identity.common.internal.dto.AccountRecord;\n+import com.microsoft.identity.common.internal.request.SdkType;\n+import com.microsoft.identity.common.internal.result.AcquireTokenResult;\n+import com.microsoft.identity.common.internal.result.ILocalAuthenticationResult;\n+import com.microsoft.identity.common.internal.result.LocalAuthenticationResult;\n+\n+import org.robolectric.annotation.Implementation;\n+import org.robolectric.annotation.Implements;\n+import org.robolectric.annotation.RealObject;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Shadow class that simulates Device Code Flow successfully returning an acquire token result object.\n+ */\n+@Implements(DeviceCodeFlowCommand.class)\n+public class ShadowDeviceCodeFlowCommandSuccessful {\n+    @RealObject\n+    private DeviceCodeFlowCommand mDeviceCodeFlowCommand;\n+\n+    @Implementation\n+    public AcquireTokenResult execute() {\n+        DeviceCodeFlowCommandCallback callback = (DeviceCodeFlowCommandCallback) mDeviceCodeFlowCommand.getCallback();\n+        callback.getUserCode(\n+                \"https://login.microsoftonline.com/common/oauth2/deviceauth\",\n+                \"ABCDEFGH\",\n+                \"Follow these instructions to authenticate.\");\n+\n+        // Create parameters for dummy authentication result\n+        CacheRecord cRecord = new CacheRecord();\n+        cRecord.setAccount(new AccountRecord());\n+        cRecord.getAccount().setHomeAccountId(\"abcd\");\n+        cRecord.getAccount().setLocalAccountId(\"abcd\");\n+        List<ICacheRecord> list = new ArrayList<>();\n+        list.add(cRecord);\n+\n+        // Create dummy authentication result\n+        ILocalAuthenticationResult localAuth = new LocalAuthenticationResult(\n+                cRecord,\n+                list,\n+                SdkType.MSAL,\n+                false\n+        );\n+\n+        // Create dummy token result\n+        AcquireTokenResult acqResult = new AcquireTokenResult();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d588b52959359cf0a4e0593829b2adf492fcccf"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDg0NjE4OnYy", "diffSide": "RIGHT", "path": "msal/src/test/java/com/microsoft/identity/client/e2e/shadows/ShadowDeviceCodeFlowCommandSuccessful.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoyMzo0MFrOG1NPwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoyMzo0MFrOG1NPwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0NDczNg==", "bodyText": "nit: rename to cacheRecord", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458444736", "createdAt": "2020-07-21T23:23:40Z", "author": {"login": "shahzaibj"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/shadows/ShadowDeviceCodeFlowCommandSuccessful.java", "diffHunk": "@@ -0,0 +1,80 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.shadows;\n+\n+import com.microsoft.identity.common.internal.cache.CacheRecord;\n+import com.microsoft.identity.common.internal.cache.ICacheRecord;\n+import com.microsoft.identity.common.internal.commands.DeviceCodeFlowCommand;\n+import com.microsoft.identity.common.internal.commands.DeviceCodeFlowCommandCallback;\n+import com.microsoft.identity.common.internal.dto.AccountRecord;\n+import com.microsoft.identity.common.internal.request.SdkType;\n+import com.microsoft.identity.common.internal.result.AcquireTokenResult;\n+import com.microsoft.identity.common.internal.result.ILocalAuthenticationResult;\n+import com.microsoft.identity.common.internal.result.LocalAuthenticationResult;\n+\n+import org.robolectric.annotation.Implementation;\n+import org.robolectric.annotation.Implements;\n+import org.robolectric.annotation.RealObject;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Shadow class that simulates Device Code Flow successfully returning an acquire token result object.\n+ */\n+@Implements(DeviceCodeFlowCommand.class)\n+public class ShadowDeviceCodeFlowCommandSuccessful {\n+    @RealObject\n+    private DeviceCodeFlowCommand mDeviceCodeFlowCommand;\n+\n+    @Implementation\n+    public AcquireTokenResult execute() {\n+        DeviceCodeFlowCommandCallback callback = (DeviceCodeFlowCommandCallback) mDeviceCodeFlowCommand.getCallback();\n+        callback.getUserCode(\n+                \"https://login.microsoftonline.com/common/oauth2/deviceauth\",\n+                \"ABCDEFGH\",\n+                \"Follow these instructions to authenticate.\");\n+\n+        // Create parameters for dummy authentication result\n+        CacheRecord cRecord = new CacheRecord();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d588b52959359cf0a4e0593829b2adf492fcccf"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDg0Njc2OnYy", "diffSide": "RIGHT", "path": "msal/src/test/java/com/microsoft/identity/client/e2e/shadows/ShadowDeviceCodeFlowCommandSuccessful.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoyMzo1OFrOG1NQFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoyMzo1OFrOG1NQFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0NDgyMA==", "bodyText": "nit: rename to cacheRecordList", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458444820", "createdAt": "2020-07-21T23:23:58Z", "author": {"login": "shahzaibj"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/shadows/ShadowDeviceCodeFlowCommandSuccessful.java", "diffHunk": "@@ -0,0 +1,80 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.shadows;\n+\n+import com.microsoft.identity.common.internal.cache.CacheRecord;\n+import com.microsoft.identity.common.internal.cache.ICacheRecord;\n+import com.microsoft.identity.common.internal.commands.DeviceCodeFlowCommand;\n+import com.microsoft.identity.common.internal.commands.DeviceCodeFlowCommandCallback;\n+import com.microsoft.identity.common.internal.dto.AccountRecord;\n+import com.microsoft.identity.common.internal.request.SdkType;\n+import com.microsoft.identity.common.internal.result.AcquireTokenResult;\n+import com.microsoft.identity.common.internal.result.ILocalAuthenticationResult;\n+import com.microsoft.identity.common.internal.result.LocalAuthenticationResult;\n+\n+import org.robolectric.annotation.Implementation;\n+import org.robolectric.annotation.Implements;\n+import org.robolectric.annotation.RealObject;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Shadow class that simulates Device Code Flow successfully returning an acquire token result object.\n+ */\n+@Implements(DeviceCodeFlowCommand.class)\n+public class ShadowDeviceCodeFlowCommandSuccessful {\n+    @RealObject\n+    private DeviceCodeFlowCommand mDeviceCodeFlowCommand;\n+\n+    @Implementation\n+    public AcquireTokenResult execute() {\n+        DeviceCodeFlowCommandCallback callback = (DeviceCodeFlowCommandCallback) mDeviceCodeFlowCommand.getCallback();\n+        callback.getUserCode(\n+                \"https://login.microsoftonline.com/common/oauth2/deviceauth\",\n+                \"ABCDEFGH\",\n+                \"Follow these instructions to authenticate.\");\n+\n+        // Create parameters for dummy authentication result\n+        CacheRecord cRecord = new CacheRecord();\n+        cRecord.setAccount(new AccountRecord());\n+        cRecord.getAccount().setHomeAccountId(\"abcd\");\n+        cRecord.getAccount().setLocalAccountId(\"abcd\");\n+        List<ICacheRecord> list = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d588b52959359cf0a4e0593829b2adf492fcccf"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDg0NzcwOnYy", "diffSide": "RIGHT", "path": "msal/src/test/java/com/microsoft/identity/client/e2e/shadows/ShadowDeviceCodeFlowCommandTokenError.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoyNDoyMVrOG1NQlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoyNDoyMVrOG1NQlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0NDk0OQ==", "bodyText": "nit: final here and everywhere as needed", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458444949", "createdAt": "2020-07-21T23:24:21Z", "author": {"login": "shahzaibj"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/shadows/ShadowDeviceCodeFlowCommandTokenError.java", "diffHunk": "@@ -0,0 +1,50 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.shadows;\n+\n+import com.microsoft.identity.client.exception.MsalServiceException;\n+import com.microsoft.identity.common.internal.commands.DeviceCodeFlowCommand;\n+import com.microsoft.identity.common.internal.commands.DeviceCodeFlowCommandCallback;\n+import com.microsoft.identity.common.internal.result.AcquireTokenResult;\n+\n+import org.robolectric.annotation.Implements;\n+import org.robolectric.annotation.RealObject;\n+\n+/**\n+ * Shadow class that simulates Device Code Flow failing due to an error in the token polling phase.\n+ */\n+@Implements(DeviceCodeFlowCommand.class)\n+public class ShadowDeviceCodeFlowCommandTokenError {\n+    @RealObject\n+    private DeviceCodeFlowCommand mDeviceCodeFlowCommand;\n+\n+    public AcquireTokenResult execute() throws Exception {\n+        DeviceCodeFlowCommandCallback callback = (DeviceCodeFlowCommandCallback) mDeviceCodeFlowCommand.getCallback();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d588b52959359cf0a4e0593829b2adf492fcccf"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDg0OTk4OnYy", "diffSide": "RIGHT", "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowAPITest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoyNToxM1rOG1NR0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoyNToxM1rOG1NR0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0NTI2NA==", "bodyText": "userCode?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458445264", "createdAt": "2020-07-21T23:25:13Z", "author": {"login": "shahzaibj"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowAPITest.java", "diffHunk": "@@ -0,0 +1,154 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.tests.mocked;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.AuthenticationResult;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandAuthError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandSuccessful;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandTokenError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowHttpRequestForMockedTest;\n+import com.microsoft.identity.client.e2e.shadows.ShadowMsalUtils;\n+import com.microsoft.identity.client.e2e.tests.PublicClientApplicationAbstractTest;\n+import com.microsoft.identity.client.e2e.utils.RoboTestUtils;\n+import com.microsoft.identity.client.exception.MsalException;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import static com.microsoft.identity.internal.testutils.TestConstants.Configurations.SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+\n+/**\n+ * Testing class for the device code flow protocol. Currently only supporting testing for the API-side\n+ * of the protocol. Will be extended to test individual aspects of the flow.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@Config(shadows = {ShadowMsalUtils.class, ShadowHttpRequestForMockedTest.class})\n+public class DeviceCodeFlowAPITest extends PublicClientApplicationAbstractTest {\n+\n+    private static Boolean uCode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d588b52959359cf0a4e0593829b2adf492fcccf"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDg1MTExOnYy", "diffSide": "RIGHT", "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowAPITest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoyNTo0NVrOG1NShg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoyNTo0NVrOG1NShg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0NTQ0Ng==", "bodyText": "nit: rename user_code to userCode", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458445446", "createdAt": "2020-07-21T23:25:45Z", "author": {"login": "shahzaibj"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowAPITest.java", "diffHunk": "@@ -0,0 +1,154 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.tests.mocked;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.AuthenticationResult;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandAuthError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandSuccessful;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandTokenError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowHttpRequestForMockedTest;\n+import com.microsoft.identity.client.e2e.shadows.ShadowMsalUtils;\n+import com.microsoft.identity.client.e2e.tests.PublicClientApplicationAbstractTest;\n+import com.microsoft.identity.client.e2e.utils.RoboTestUtils;\n+import com.microsoft.identity.client.exception.MsalException;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import static com.microsoft.identity.internal.testutils.TestConstants.Configurations.SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+\n+/**\n+ * Testing class for the device code flow protocol. Currently only supporting testing for the API-side\n+ * of the protocol. Will be extended to test individual aspects of the flow.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@Config(shadows = {ShadowMsalUtils.class, ShadowHttpRequestForMockedTest.class})\n+public class DeviceCodeFlowAPITest extends PublicClientApplicationAbstractTest {\n+\n+    private static Boolean uCode;\n+\n+    @Before\n+    public void setup() {\n+        super.setup();\n+        uCode = false;\n+    }\n+\n+    @Override\n+    public String getConfigFilePath() {\n+        return SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+    }\n+\n+    @Test\n+    @Config(shadows = {ShadowDeviceCodeFlowCommandAuthError.class})\n+    public void testDeviceCodeFlowAuthFailure() {\n+        String[] scope = {\"user.read\"};\n+        mApplication.deviceCodeFlow(scope, new IPublicClientApplication.DeviceCodeFlowCallback() {\n+            @Override\n+            public void getUserCode(@NonNull String vUri, @NonNull String user_code, @NonNull String message) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d588b52959359cf0a4e0593829b2adf492fcccf"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDg1MjEwOnYy", "diffSide": "RIGHT", "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowAPITest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoyNjoxOVrOG1NTLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoyNjoxOVrOG1NTLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0NTYxNQ==", "bodyText": "Does this have to be static?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458445615", "createdAt": "2020-07-21T23:26:19Z", "author": {"login": "shahzaibj"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowAPITest.java", "diffHunk": "@@ -0,0 +1,154 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.tests.mocked;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.AuthenticationResult;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandAuthError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandSuccessful;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandTokenError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowHttpRequestForMockedTest;\n+import com.microsoft.identity.client.e2e.shadows.ShadowMsalUtils;\n+import com.microsoft.identity.client.e2e.tests.PublicClientApplicationAbstractTest;\n+import com.microsoft.identity.client.e2e.utils.RoboTestUtils;\n+import com.microsoft.identity.client.exception.MsalException;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import static com.microsoft.identity.internal.testutils.TestConstants.Configurations.SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+\n+/**\n+ * Testing class for the device code flow protocol. Currently only supporting testing for the API-side\n+ * of the protocol. Will be extended to test individual aspects of the flow.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@Config(shadows = {ShadowMsalUtils.class, ShadowHttpRequestForMockedTest.class})\n+public class DeviceCodeFlowAPITest extends PublicClientApplicationAbstractTest {\n+\n+    private static Boolean uCode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d588b52959359cf0a4e0593829b2adf492fcccf"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDg1MjkxOnYy", "diffSide": "RIGHT", "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowAPITest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoyNjo0MFrOG1NTpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjoyMzo0NlrOG1f-Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0NTczNA==", "bodyText": "Can this be a primitive?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458445734", "createdAt": "2020-07-21T23:26:40Z", "author": {"login": "shahzaibj"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowAPITest.java", "diffHunk": "@@ -0,0 +1,154 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.tests.mocked;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.AuthenticationResult;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandAuthError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandSuccessful;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandTokenError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowHttpRequestForMockedTest;\n+import com.microsoft.identity.client.e2e.shadows.ShadowMsalUtils;\n+import com.microsoft.identity.client.e2e.tests.PublicClientApplicationAbstractTest;\n+import com.microsoft.identity.client.e2e.utils.RoboTestUtils;\n+import com.microsoft.identity.client.exception.MsalException;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import static com.microsoft.identity.internal.testutils.TestConstants.Configurations.SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+\n+/**\n+ * Testing class for the device code flow protocol. Currently only supporting testing for the API-side\n+ * of the protocol. Will be extended to test individual aspects of the flow.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@Config(shadows = {ShadowMsalUtils.class, ShadowHttpRequestForMockedTest.class})\n+public class DeviceCodeFlowAPITest extends PublicClientApplicationAbstractTest {\n+\n+    private static Boolean uCode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d588b52959359cf0a4e0593829b2adf492fcccf"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc1MTUzOA==", "bodyText": "Yes, it can be primitive. No, t doesn't need to be static.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458751538", "createdAt": "2020-07-22T12:23:46Z", "author": {"login": "t-fadura"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowAPITest.java", "diffHunk": "@@ -0,0 +1,154 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.tests.mocked;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.AuthenticationResult;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandAuthError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandSuccessful;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandTokenError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowHttpRequestForMockedTest;\n+import com.microsoft.identity.client.e2e.shadows.ShadowMsalUtils;\n+import com.microsoft.identity.client.e2e.tests.PublicClientApplicationAbstractTest;\n+import com.microsoft.identity.client.e2e.utils.RoboTestUtils;\n+import com.microsoft.identity.client.exception.MsalException;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import static com.microsoft.identity.internal.testutils.TestConstants.Configurations.SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+\n+/**\n+ * Testing class for the device code flow protocol. Currently only supporting testing for the API-side\n+ * of the protocol. Will be extended to test individual aspects of the flow.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@Config(shadows = {ShadowMsalUtils.class, ShadowHttpRequestForMockedTest.class})\n+public class DeviceCodeFlowAPITest extends PublicClientApplicationAbstractTest {\n+\n+    private static Boolean uCode;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0NTczNA=="}, "originalCommit": {"oid": "2d588b52959359cf0a4e0593829b2adf492fcccf"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDg1NDI1OnYy", "diffSide": "RIGHT", "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowAPITest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoyNzoxMlrOG1NUVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjoyODowNVrOG1gHpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0NTkwOA==", "bodyText": "Is this needed? (booleans are false by default)", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458445908", "createdAt": "2020-07-21T23:27:12Z", "author": {"login": "shahzaibj"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowAPITest.java", "diffHunk": "@@ -0,0 +1,154 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.tests.mocked;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.AuthenticationResult;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandAuthError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandSuccessful;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandTokenError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowHttpRequestForMockedTest;\n+import com.microsoft.identity.client.e2e.shadows.ShadowMsalUtils;\n+import com.microsoft.identity.client.e2e.tests.PublicClientApplicationAbstractTest;\n+import com.microsoft.identity.client.e2e.utils.RoboTestUtils;\n+import com.microsoft.identity.client.exception.MsalException;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import static com.microsoft.identity.internal.testutils.TestConstants.Configurations.SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+\n+/**\n+ * Testing class for the device code flow protocol. Currently only supporting testing for the API-side\n+ * of the protocol. Will be extended to test individual aspects of the flow.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@Config(shadows = {ShadowMsalUtils.class, ShadowHttpRequestForMockedTest.class})\n+public class DeviceCodeFlowAPITest extends PublicClientApplicationAbstractTest {\n+\n+    private static Boolean uCode;\n+\n+    @Before\n+    public void setup() {\n+        super.setup();\n+        uCode = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d588b52959359cf0a4e0593829b2adf492fcccf"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc1Mzk1OA==", "bodyText": "This is not needed, you're right.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458753958", "createdAt": "2020-07-22T12:28:05Z", "author": {"login": "t-fadura"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowAPITest.java", "diffHunk": "@@ -0,0 +1,154 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.tests.mocked;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.AuthenticationResult;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandAuthError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandSuccessful;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandTokenError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowHttpRequestForMockedTest;\n+import com.microsoft.identity.client.e2e.shadows.ShadowMsalUtils;\n+import com.microsoft.identity.client.e2e.tests.PublicClientApplicationAbstractTest;\n+import com.microsoft.identity.client.e2e.utils.RoboTestUtils;\n+import com.microsoft.identity.client.exception.MsalException;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import static com.microsoft.identity.internal.testutils.TestConstants.Configurations.SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+\n+/**\n+ * Testing class for the device code flow protocol. Currently only supporting testing for the API-side\n+ * of the protocol. Will be extended to test individual aspects of the flow.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@Config(shadows = {ShadowMsalUtils.class, ShadowHttpRequestForMockedTest.class})\n+public class DeviceCodeFlowAPITest extends PublicClientApplicationAbstractTest {\n+\n+    private static Boolean uCode;\n+\n+    @Before\n+    public void setup() {\n+        super.setup();\n+        uCode = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0NTkwOA=="}, "originalCommit": {"oid": "2d588b52959359cf0a4e0593829b2adf492fcccf"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDg1NTQxOnYy", "diffSide": "RIGHT", "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowAPITest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoyNzo0M1rOG1NVBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoyNzo0M1rOG1NVBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0NjA4Nw==", "bodyText": "nit: rename user_code to userCode", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458446087", "createdAt": "2020-07-21T23:27:43Z", "author": {"login": "shahzaibj"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowAPITest.java", "diffHunk": "@@ -0,0 +1,154 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.tests.mocked;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.AuthenticationResult;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandAuthError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandSuccessful;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandTokenError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowHttpRequestForMockedTest;\n+import com.microsoft.identity.client.e2e.shadows.ShadowMsalUtils;\n+import com.microsoft.identity.client.e2e.tests.PublicClientApplicationAbstractTest;\n+import com.microsoft.identity.client.e2e.utils.RoboTestUtils;\n+import com.microsoft.identity.client.exception.MsalException;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import static com.microsoft.identity.internal.testutils.TestConstants.Configurations.SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+\n+/**\n+ * Testing class for the device code flow protocol. Currently only supporting testing for the API-side\n+ * of the protocol. Will be extended to test individual aspects of the flow.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@Config(shadows = {ShadowMsalUtils.class, ShadowHttpRequestForMockedTest.class})\n+public class DeviceCodeFlowAPITest extends PublicClientApplicationAbstractTest {\n+\n+    private static Boolean uCode;\n+\n+    @Before\n+    public void setup() {\n+        super.setup();\n+        uCode = false;\n+    }\n+\n+    @Override\n+    public String getConfigFilePath() {\n+        return SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+    }\n+\n+    @Test\n+    @Config(shadows = {ShadowDeviceCodeFlowCommandAuthError.class})\n+    public void testDeviceCodeFlowAuthFailure() {\n+        String[] scope = {\"user.read\"};\n+        mApplication.deviceCodeFlow(scope, new IPublicClientApplication.DeviceCodeFlowCallback() {\n+            @Override\n+            public void getUserCode(@NonNull String vUri, @NonNull String user_code, @NonNull String message) {\n+                // This shouldn't run if authorization step fails\n+                Assert.fail();\n+            }\n+            @Override\n+            public void getToken(AuthenticationResult authResult) {\n+                // This shouldn't run if authorization step fails\n+                Assert.fail();\n+            }\n+            @Override\n+            public void onError(MsalException error) {\n+                // Handle exception when authorization fails\n+                Assert.assertFalse(uCode);\n+                Assert.assertTrue(error.getErrorCode().equals(\"invalid_scope\"));\n+            }\n+        });\n+\n+        RoboTestUtils.flushScheduler();\n+    }\n+\n+    @Test\n+    @Config(shadows = {ShadowDeviceCodeFlowCommandTokenError.class})\n+    public void testDeviceCodeFlowTokenFailure() {\n+        String[] scope = {\"user.read\"};\n+        mApplication.deviceCodeFlow(scope, new IPublicClientApplication.DeviceCodeFlowCallback() {\n+            @Override\n+            public void getUserCode(@NonNull String vUri, @NonNull String user_code, @NonNull String message) {\n+                // Assert that the protocol returns the user_code and others after successful authorization\n+                Assert.assertNotNull(vUri);\n+                Assert.assertNotNull(user_code);\n+                Assert.assertNotNull(message);\n+\n+                Assert.assertFalse(uCode);\n+                uCode = true;\n+            }\n+            @Override\n+            public void getToken(AuthenticationResult authResult) {\n+                // This shouldn't run\n+                Assert.fail();\n+            }\n+            @Override\n+            public void onError(MsalException error) {\n+                // Handle Exception\n+                Assert.assertTrue(uCode);\n+                Assert.assertTrue(error.getErrorCode().equals(\"expired_token\"));\n+            }\n+        });\n+\n+        RoboTestUtils.flushScheduler();\n+    }\n+\n+    @Test\n+    @Config(shadows = {ShadowDeviceCodeFlowCommandSuccessful.class})\n+    public void testDeviceCodeFlowSuccess() {\n+        String[] scope = {\"user.read\"};\n+        mApplication.deviceCodeFlow(scope, new IPublicClientApplication.DeviceCodeFlowCallback() {\n+            @Override\n+            public void getUserCode(@NonNull String vUri, @NonNull String user_code, @NonNull String message) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d588b52959359cf0a4e0593829b2adf492fcccf"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDg1NTkzOnYy", "diffSide": "RIGHT", "path": "msal/src/test/res/raw/single_account_dcf_test_config.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoyNzo1N1rOG1NVUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoyNzo1N1rOG1NVUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0NjE2Mw==", "bodyText": "Add new line at end of file", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458446163", "createdAt": "2020-07-21T23:27:57Z", "author": {"login": "shahzaibj"}, "path": "msal/src/test/res/raw/single_account_dcf_test_config.json", "diffHunk": "@@ -0,0 +1,12 @@\n+{\n+  \"client_id\": \"d335d85e-5aa7-4f03-8c2f-81b2699f30a6\",\n+  \"authorization_user_agent\": \"DEFAULT\",\n+  \"redirect_uri\": \"msauth://com.onmicrosoft.fadiorgorg/1wIqXSqBj7w%2Bh11ZifsnqwgyKrY%3D\",\n+  \"account_mode\" : \"SINGLE\",\n+  \"authorities\": [\n+    {\n+      \"type\": \"AAD\",\n+      \"authority_url\": \"https://login.microsoftonline.com/2d94acaa-ef23-4d35-9678-8995364ac965\"\n+    }\n+  ]\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d588b52959359cf0a4e0593829b2adf492fcccf"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDg2MDYzOnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzozMDowOFrOG1NYGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjoxODoyM1rOG1p8aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0Njg3NA==", "bodyText": "Doesn't seem like it returns anything so I think a name that start with get is not suitable. How about onUserCodeReceived?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458446874", "createdAt": "2020-07-21T23:30:08Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "diffHunk": "@@ -162,4 +176,29 @@ void acquireToken(@NonNull final Activity activity,\n         void onError(final MsalException exception);\n     }\n \n+    interface DeviceCodeFlowCallback{\n+        /**\n+         * Called to display verification uri, user code, and instruction message during device code flow.\n+         *\n+         * @param vUri verification uri\n+         * @param userCode user code\n+         * @param message instruction message\n+         */\n+        void getUserCode(@NonNull String vUri, @NonNull String userCode, @NonNull String message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d588b52959359cf0a4e0593829b2adf492fcccf"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODcyNTcxMQ==", "bodyText": "This makes sense, I should've done this for DeviceCodeFlowCommandCallback in Common, too.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458725711", "createdAt": "2020-07-22T11:33:06Z", "author": {"login": "t-fadura"}, "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "diffHunk": "@@ -162,4 +176,29 @@ void acquireToken(@NonNull final Activity activity,\n         void onError(final MsalException exception);\n     }\n \n+    interface DeviceCodeFlowCallback{\n+        /**\n+         * Called to display verification uri, user code, and instruction message during device code flow.\n+         *\n+         * @param vUri verification uri\n+         * @param userCode user code\n+         * @param message instruction message\n+         */\n+        void getUserCode(@NonNull String vUri, @NonNull String userCode, @NonNull String message);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0Njg3NA=="}, "originalCommit": {"oid": "2d588b52959359cf0a4e0593829b2adf492fcccf"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkwOTY0OA==", "bodyText": "@t-fadura You can open another PR in common to do the same (or do it as part of your next PR in common)", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458909648", "createdAt": "2020-07-22T16:10:22Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "diffHunk": "@@ -162,4 +176,29 @@ void acquireToken(@NonNull final Activity activity,\n         void onError(final MsalException exception);\n     }\n \n+    interface DeviceCodeFlowCallback{\n+        /**\n+         * Called to display verification uri, user code, and instruction message during device code flow.\n+         *\n+         * @param vUri verification uri\n+         * @param userCode user code\n+         * @param message instruction message\n+         */\n+        void getUserCode(@NonNull String vUri, @NonNull String userCode, @NonNull String message);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0Njg3NA=="}, "originalCommit": {"oid": "2d588b52959359cf0a4e0593829b2adf492fcccf"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxNDkyMw==", "bodyText": "I'd have to do a separate PR in common for it before this one is completed so I can change it in MSAL after it is changed in Common.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458914923", "createdAt": "2020-07-22T16:18:23Z", "author": {"login": "t-fadura"}, "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "diffHunk": "@@ -162,4 +176,29 @@ void acquireToken(@NonNull final Activity activity,\n         void onError(final MsalException exception);\n     }\n \n+    interface DeviceCodeFlowCallback{\n+        /**\n+         * Called to display verification uri, user code, and instruction message during device code flow.\n+         *\n+         * @param vUri verification uri\n+         * @param userCode user code\n+         * @param message instruction message\n+         */\n+        void getUserCode(@NonNull String vUri, @NonNull String userCode, @NonNull String message);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0Njg3NA=="}, "originalCommit": {"oid": "2d588b52959359cf0a4e0593829b2adf492fcccf"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDg2MTMyOnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzozMDoyM1rOG1NYfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzozMDoyM1rOG1NYfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0Njk3Mw==", "bodyText": "Doesn't seem like it returns anything so I think a name that start with get is not suitable. How about onTokenReceived?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458446973", "createdAt": "2020-07-21T23:30:23Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "diffHunk": "@@ -162,4 +176,29 @@ void acquireToken(@NonNull final Activity activity,\n         void onError(final MsalException exception);\n     }\n \n+    interface DeviceCodeFlowCallback{\n+        /**\n+         * Called to display verification uri, user code, and instruction message during device code flow.\n+         *\n+         * @param vUri verification uri\n+         * @param userCode user code\n+         * @param message instruction message\n+         */\n+        void getUserCode(@NonNull String vUri, @NonNull String userCode, @NonNull String message);\n+\n+        /**\n+         * Called once succeed and pass the result object.\n+         *\n+         * @param authResult the authentication result\n+         */\n+        void getToken(AuthenticationResult authResult);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d588b52959359cf0a4e0593829b2adf492fcccf"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDg2MjM5OnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzozMDo1M1rOG1NZIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzozMDo1M1rOG1NZIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0NzEzOA==", "bodyText": "The class itself should have some javadoc", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458447138", "createdAt": "2020-07-21T23:30:53Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "diffHunk": "@@ -162,4 +176,29 @@ void acquireToken(@NonNull final Activity activity,\n         void onError(final MsalException exception);\n     }\n \n+    interface DeviceCodeFlowCallback{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d588b52959359cf0a4e0593829b2adf492fcccf"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDg2MzUwOnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzozMToyNFrOG1NZxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzozMToyNFrOG1NZxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0NzMwMA==", "bodyText": "need space between DeviceCodeFlowCallback and {", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458447300", "createdAt": "2020-07-21T23:31:24Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "diffHunk": "@@ -162,4 +176,29 @@ void acquireToken(@NonNull final Activity activity,\n         void onError(final MsalException exception);\n     }\n \n+    interface DeviceCodeFlowCallback{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d588b52959359cf0a4e0593829b2adf492fcccf"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDg2Nzk0OnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzozMzozOVrOG1NcaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzozMzozOVrOG1NcaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0Nzk3Ng==", "bodyText": "nit: change Called to Invoked", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458447976", "createdAt": "2020-07-21T23:33:39Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "diffHunk": "@@ -162,4 +176,29 @@ void acquireToken(@NonNull final Activity activity,\n         void onError(final MsalException exception);\n     }\n \n+    interface DeviceCodeFlowCallback{\n+        /**\n+         * Called to display verification uri, user code, and instruction message during device code flow.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d588b52959359cf0a4e0593829b2adf492fcccf"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDg2ODM3OnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzozMzo1MVrOG1Ncpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzozMzo1MVrOG1Ncpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0ODAzOQ==", "bodyText": "nit: change Called to Invoked", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458448039", "createdAt": "2020-07-21T23:33:51Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "diffHunk": "@@ -162,4 +176,29 @@ void acquireToken(@NonNull final Activity activity,\n         void onError(final MsalException exception);\n     }\n \n+    interface DeviceCodeFlowCallback{\n+        /**\n+         * Called to display verification uri, user code, and instruction message during device code flow.\n+         *\n+         * @param vUri verification uri\n+         * @param userCode user code\n+         * @param message instruction message\n+         */\n+        void getUserCode(@NonNull String vUri, @NonNull String userCode, @NonNull String message);\n+\n+        /**\n+         * Called once succeed and pass the result object.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d588b52959359cf0a4e0593829b2adf492fcccf"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzgzOTM0OnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjoxMjo0MlrOG1pt7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjoxMjo0MlrOG1pt7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxMTIxMw==", "bodyText": "How about rephrase as follows:\n\nPerform the Device Code Flow (DCF) protocol to allow a device without input capability to authenticate and get a new access token.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458911213", "createdAt": "2020-07-22T16:12:42Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "diffHunk": "@@ -84,6 +86,13 @@ void acquireToken(@NonNull final Activity activity,\n     @WorkerThread\n     IAuthenticationResult acquireTokenSilent(@NonNull final AcquireTokenSilentParameters acquireTokenSilentParameters) throws InterruptedException, MsalException;\n \n+    /**\n+     * Perform the Device Code Flow (DCF) protocol to allow a device to authenticate and get a new access token without input capability.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb58f4a82aa5c3ee0c166152eac3293c7b93731d"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Mzg0MzA3OnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjoxMzozM1rOG1pwPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzowNzowM1rOG1sANg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxMTgwNg==", "bodyText": "Not quite sure why the last two String have underlines here", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458911806", "createdAt": "2020-07-22T16:13:33Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "diffHunk": "@@ -162,4 +171,39 @@ void acquireToken(@NonNull final Activity activity,\n         void onError(final MsalException exception);\n     }\n \n+    /**\n+     * Callback object used in Device Code Flow.\n+     * This callback provides the following methods for communicating with the protocol.\n+     *                 1). Receiving authentication information (user_code, verification_uri, and instruction message)\n+     *                 via {@link DeviceCodeFlowCallback#onUserCodeReceived(String, String, String)}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb58f4a82aa5c3ee0c166152eac3293c7b93731d"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkzMTMxMw==", "bodyText": "Hmm, not sure, seems to only show up in github", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458931313", "createdAt": "2020-07-22T16:38:28Z", "author": {"login": "t-fadura"}, "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "diffHunk": "@@ -162,4 +171,39 @@ void acquireToken(@NonNull final Activity activity,\n         void onError(final MsalException exception);\n     }\n \n+    /**\n+     * Callback object used in Device Code Flow.\n+     * This callback provides the following methods for communicating with the protocol.\n+     *                 1). Receiving authentication information (user_code, verification_uri, and instruction message)\n+     *                 via {@link DeviceCodeFlowCallback#onUserCodeReceived(String, String, String)}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxMTgwNg=="}, "originalCommit": {"oid": "fb58f4a82aa5c3ee0c166152eac3293c7b93731d"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0ODY2Mg==", "bodyText": "I guess it is okay then", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458948662", "createdAt": "2020-07-22T17:07:03Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "diffHunk": "@@ -162,4 +171,39 @@ void acquireToken(@NonNull final Activity activity,\n         void onError(final MsalException exception);\n     }\n \n+    /**\n+     * Callback object used in Device Code Flow.\n+     * This callback provides the following methods for communicating with the protocol.\n+     *                 1). Receiving authentication information (user_code, verification_uri, and instruction message)\n+     *                 via {@link DeviceCodeFlowCallback#onUserCodeReceived(String, String, String)}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxMTgwNg=="}, "originalCommit": {"oid": "fb58f4a82aa5c3ee0c166152eac3293c7b93731d"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Mzg1NDM2OnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjoxNjoxN1rOG1p3Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjoxNjoxN1rOG1p3Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxMzU4Mw==", "bodyText": "How about rephrase as:\n\nInvoked once token is received and passes the {@link AuthenticationResult} object", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458913583", "createdAt": "2020-07-22T16:16:17Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "diffHunk": "@@ -162,4 +171,39 @@ void acquireToken(@NonNull final Activity activity,\n         void onError(final MsalException exception);\n     }\n \n+    /**\n+     * Callback object used in Device Code Flow.\n+     * This callback provides the following methods for communicating with the protocol.\n+     *                 1). Receiving authentication information (user_code, verification_uri, and instruction message)\n+     *                 via {@link DeviceCodeFlowCallback#onUserCodeReceived(String, String, String)}.\n+     *                 2). Receiving a successful authnetication result containing a fresh access token\n+     *                 via {@link DeviceCodeFlowCallback#onTokenReceived(AuthenticationResult)}.\n+     *                 3). Receiving an exception detailing what went wrong in the protocol\n+     *                 via {@link DeviceCodeFlowCallback#onError(MsalServiceException)}.\n+     */\n+    interface DeviceCodeFlowCallback {\n+        /**\n+         * Invoked to display verification uri, user code, and instruction message during device code flow.\n+         *\n+         * @param vUri verification uri\n+         * @param userCode user code\n+         * @param message instruction message\n+         */\n+        void onUserCodeReceived(@NonNull String vUri, @NonNull String userCode, @NonNull String message);\n+\n+        /**\n+         * Invoked once succeed and pass the result object.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb58f4a82aa5c3ee0c166152eac3293c7b93731d"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Mzg1NzM3OnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjoxNzowMlrOG1p5AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjoxNzowMlrOG1p5AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxNDA0OA==", "bodyText": "How about rephrase as:\n\nInvoked if an error is encountered during the device code flow and passes the Exception object", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458914048", "createdAt": "2020-07-22T16:17:02Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "diffHunk": "@@ -162,4 +171,39 @@ void acquireToken(@NonNull final Activity activity,\n         void onError(final MsalException exception);\n     }\n \n+    /**\n+     * Callback object used in Device Code Flow.\n+     * This callback provides the following methods for communicating with the protocol.\n+     *                 1). Receiving authentication information (user_code, verification_uri, and instruction message)\n+     *                 via {@link DeviceCodeFlowCallback#onUserCodeReceived(String, String, String)}.\n+     *                 2). Receiving a successful authnetication result containing a fresh access token\n+     *                 via {@link DeviceCodeFlowCallback#onTokenReceived(AuthenticationResult)}.\n+     *                 3). Receiving an exception detailing what went wrong in the protocol\n+     *                 via {@link DeviceCodeFlowCallback#onError(MsalServiceException)}.\n+     */\n+    interface DeviceCodeFlowCallback {\n+        /**\n+         * Invoked to display verification uri, user code, and instruction message during device code flow.\n+         *\n+         * @param vUri verification uri\n+         * @param userCode user code\n+         * @param message instruction message\n+         */\n+        void onUserCodeReceived(@NonNull String vUri, @NonNull String userCode, @NonNull String message);\n+\n+        /**\n+         * Invoked once succeed and pass the result object.\n+         *\n+         * @param authResult the authentication result\n+         */\n+        void onTokenReceived(AuthenticationResult authResult);\n+\n+        /**\n+         * Invoked once exception thrown.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb58f4a82aa5c3ee0c166152eac3293c7b93731d"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Mzg2MDM0OnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjoxNzo0NFrOG1p6yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjo0Mjo1OFrOG1rHuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxNDUwNw==", "bodyText": "Can we get other types of Exceptions here? How about any MsalException?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458914507", "createdAt": "2020-07-22T16:17:44Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "diffHunk": "@@ -162,4 +171,39 @@ void acquireToken(@NonNull final Activity activity,\n         void onError(final MsalException exception);\n     }\n \n+    /**\n+     * Callback object used in Device Code Flow.\n+     * This callback provides the following methods for communicating with the protocol.\n+     *                 1). Receiving authentication information (user_code, verification_uri, and instruction message)\n+     *                 via {@link DeviceCodeFlowCallback#onUserCodeReceived(String, String, String)}.\n+     *                 2). Receiving a successful authnetication result containing a fresh access token\n+     *                 via {@link DeviceCodeFlowCallback#onTokenReceived(AuthenticationResult)}.\n+     *                 3). Receiving an exception detailing what went wrong in the protocol\n+     *                 via {@link DeviceCodeFlowCallback#onError(MsalServiceException)}.\n+     */\n+    interface DeviceCodeFlowCallback {\n+        /**\n+         * Invoked to display verification uri, user code, and instruction message during device code flow.\n+         *\n+         * @param vUri verification uri\n+         * @param userCode user code\n+         * @param message instruction message\n+         */\n+        void onUserCodeReceived(@NonNull String vUri, @NonNull String userCode, @NonNull String message);\n+\n+        /**\n+         * Invoked once succeed and pass the result object.\n+         *\n+         * @param authResult the authentication result\n+         */\n+        void onTokenReceived(AuthenticationResult authResult);\n+\n+        /**\n+         * Invoked once exception thrown.\n+         *\n+         * @param error error exception\n+         */\n+        void onError(MsalServiceException error);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb58f4a82aa5c3ee0c166152eac3293c7b93731d"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxNTQ2NQ==", "bodyText": "It originally was MsalException, but I think the command class will only be throwing MsalServiceException.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458915465", "createdAt": "2020-07-22T16:19:09Z", "author": {"login": "t-fadura"}, "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "diffHunk": "@@ -162,4 +171,39 @@ void acquireToken(@NonNull final Activity activity,\n         void onError(final MsalException exception);\n     }\n \n+    /**\n+     * Callback object used in Device Code Flow.\n+     * This callback provides the following methods for communicating with the protocol.\n+     *                 1). Receiving authentication information (user_code, verification_uri, and instruction message)\n+     *                 via {@link DeviceCodeFlowCallback#onUserCodeReceived(String, String, String)}.\n+     *                 2). Receiving a successful authnetication result containing a fresh access token\n+     *                 via {@link DeviceCodeFlowCallback#onTokenReceived(AuthenticationResult)}.\n+     *                 3). Receiving an exception detailing what went wrong in the protocol\n+     *                 via {@link DeviceCodeFlowCallback#onError(MsalServiceException)}.\n+     */\n+    interface DeviceCodeFlowCallback {\n+        /**\n+         * Invoked to display verification uri, user code, and instruction message during device code flow.\n+         *\n+         * @param vUri verification uri\n+         * @param userCode user code\n+         * @param message instruction message\n+         */\n+        void onUserCodeReceived(@NonNull String vUri, @NonNull String userCode, @NonNull String message);\n+\n+        /**\n+         * Invoked once succeed and pass the result object.\n+         *\n+         * @param authResult the authentication result\n+         */\n+        void onTokenReceived(AuthenticationResult authResult);\n+\n+        /**\n+         * Invoked once exception thrown.\n+         *\n+         * @param error error exception\n+         */\n+        void onError(MsalServiceException error);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxNDUwNw=="}, "originalCommit": {"oid": "fb58f4a82aa5c3ee0c166152eac3293c7b93731d"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkzNDIwMA==", "bodyText": "I think I will change it back to MsalException just to be safe.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458934200", "createdAt": "2020-07-22T16:42:58Z", "author": {"login": "t-fadura"}, "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "diffHunk": "@@ -162,4 +171,39 @@ void acquireToken(@NonNull final Activity activity,\n         void onError(final MsalException exception);\n     }\n \n+    /**\n+     * Callback object used in Device Code Flow.\n+     * This callback provides the following methods for communicating with the protocol.\n+     *                 1). Receiving authentication information (user_code, verification_uri, and instruction message)\n+     *                 via {@link DeviceCodeFlowCallback#onUserCodeReceived(String, String, String)}.\n+     *                 2). Receiving a successful authnetication result containing a fresh access token\n+     *                 via {@link DeviceCodeFlowCallback#onTokenReceived(AuthenticationResult)}.\n+     *                 3). Receiving an exception detailing what went wrong in the protocol\n+     *                 via {@link DeviceCodeFlowCallback#onError(MsalServiceException)}.\n+     */\n+    interface DeviceCodeFlowCallback {\n+        /**\n+         * Invoked to display verification uri, user code, and instruction message during device code flow.\n+         *\n+         * @param vUri verification uri\n+         * @param userCode user code\n+         * @param message instruction message\n+         */\n+        void onUserCodeReceived(@NonNull String vUri, @NonNull String userCode, @NonNull String message);\n+\n+        /**\n+         * Invoked once succeed and pass the result object.\n+         *\n+         * @param authResult the authentication result\n+         */\n+        void onTokenReceived(AuthenticationResult authResult);\n+\n+        /**\n+         * Invoked once exception thrown.\n+         *\n+         * @param error error exception\n+         */\n+        void onError(MsalServiceException error);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxNDUwNw=="}, "originalCommit": {"oid": "fb58f4a82aa5c3ee0c166152eac3293c7b93731d"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Mzg2NTkxOnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjoxOTowN1rOG1p-cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjo0NzoyNFrOG1rSXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxNTQ0Mg==", "bodyText": "Can you remind me why we need a new thread here? CommandDispatcher should be spinning up its own threads any way so I believe there shouldn't be any HTTP request that is made on the main thread.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458915442", "createdAt": "2020-07-22T16:19:07Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "diffHunk": "@@ -1618,6 +1624,38 @@ public void onError(MsalException exception) {\n         }\n     }\n \n+    public void deviceCodeFlow(@Nullable String[] scopes, @NonNull final DeviceCodeFlowCallback callback) {\n+        // Create a DeviceCodeFlowCommandParameters object that takes in the desired scopes and the callback object\n+        // Use CommandParametersAdapter\n+        final DeviceCodeFlowCommandParameters commandParameters = CommandParametersAdapter\n+                    .createDeviceCodeFlowCommandParameters(\n+                            mPublicClientConfiguration,\n+                            mPublicClientConfiguration.getOAuth2TokenCache(),\n+                            scopes);\n+\n+        // Create a CommandCallback object from the DeviceCodeFlowCallback object\n+        final DeviceCodeFlowCommandCallback deviceCodeFlowCommandCallback = getDeviceCodeFlowCommandCallback(callback);\n+\n+        // Create a DeviceCodeFlowCommand object\n+        // Pass the command parameters, default controller, and command callback\n+        // Telemetry with DEVICE_CODE_FLOW_CALLBACK\n+        final DeviceCodeFlowCommand deviceCodeFlowCommand = new DeviceCodeFlowCommand(\n+                commandParameters,\n+                new LocalMSALController(),\n+                deviceCodeFlowCommandCallback,\n+                PublicApiId.DEVICE_CODE_FLOW_WITH_CALLBACK\n+        );\n+\n+        // Run the command we created above in a separate thread to allow running HTTP Requests\n+        Thread thread = new Thread(new Runnable(){\n+            @Override\n+            public void run(){\n+                CommandDispatcher.submitSilent(deviceCodeFlowCommand);\n+            }\n+        });\n+        thread.start();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb58f4a82aa5c3ee0c166152eac3293c7b93731d"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkzMzU5MQ==", "bodyText": "You may be right about this. This may just be a remnant from the Proof of Concept. I'll test this without the thread in a bit.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458933591", "createdAt": "2020-07-22T16:41:59Z", "author": {"login": "t-fadura"}, "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "diffHunk": "@@ -1618,6 +1624,38 @@ public void onError(MsalException exception) {\n         }\n     }\n \n+    public void deviceCodeFlow(@Nullable String[] scopes, @NonNull final DeviceCodeFlowCallback callback) {\n+        // Create a DeviceCodeFlowCommandParameters object that takes in the desired scopes and the callback object\n+        // Use CommandParametersAdapter\n+        final DeviceCodeFlowCommandParameters commandParameters = CommandParametersAdapter\n+                    .createDeviceCodeFlowCommandParameters(\n+                            mPublicClientConfiguration,\n+                            mPublicClientConfiguration.getOAuth2TokenCache(),\n+                            scopes);\n+\n+        // Create a CommandCallback object from the DeviceCodeFlowCallback object\n+        final DeviceCodeFlowCommandCallback deviceCodeFlowCommandCallback = getDeviceCodeFlowCommandCallback(callback);\n+\n+        // Create a DeviceCodeFlowCommand object\n+        // Pass the command parameters, default controller, and command callback\n+        // Telemetry with DEVICE_CODE_FLOW_CALLBACK\n+        final DeviceCodeFlowCommand deviceCodeFlowCommand = new DeviceCodeFlowCommand(\n+                commandParameters,\n+                new LocalMSALController(),\n+                deviceCodeFlowCommandCallback,\n+                PublicApiId.DEVICE_CODE_FLOW_WITH_CALLBACK\n+        );\n+\n+        // Run the command we created above in a separate thread to allow running HTTP Requests\n+        Thread thread = new Thread(new Runnable(){\n+            @Override\n+            public void run(){\n+                CommandDispatcher.submitSilent(deviceCodeFlowCommand);\n+            }\n+        });\n+        thread.start();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxNTQ0Mg=="}, "originalCommit": {"oid": "fb58f4a82aa5c3ee0c166152eac3293c7b93731d"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkzNjkyNw==", "bodyText": "CommandDispatcher.submitSilent() documentation states that it uses a silent thread pool, so I will remove the new thread in PCA.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458936927", "createdAt": "2020-07-22T16:47:24Z", "author": {"login": "t-fadura"}, "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "diffHunk": "@@ -1618,6 +1624,38 @@ public void onError(MsalException exception) {\n         }\n     }\n \n+    public void deviceCodeFlow(@Nullable String[] scopes, @NonNull final DeviceCodeFlowCallback callback) {\n+        // Create a DeviceCodeFlowCommandParameters object that takes in the desired scopes and the callback object\n+        // Use CommandParametersAdapter\n+        final DeviceCodeFlowCommandParameters commandParameters = CommandParametersAdapter\n+                    .createDeviceCodeFlowCommandParameters(\n+                            mPublicClientConfiguration,\n+                            mPublicClientConfiguration.getOAuth2TokenCache(),\n+                            scopes);\n+\n+        // Create a CommandCallback object from the DeviceCodeFlowCallback object\n+        final DeviceCodeFlowCommandCallback deviceCodeFlowCommandCallback = getDeviceCodeFlowCommandCallback(callback);\n+\n+        // Create a DeviceCodeFlowCommand object\n+        // Pass the command parameters, default controller, and command callback\n+        // Telemetry with DEVICE_CODE_FLOW_CALLBACK\n+        final DeviceCodeFlowCommand deviceCodeFlowCommand = new DeviceCodeFlowCommand(\n+                commandParameters,\n+                new LocalMSALController(),\n+                deviceCodeFlowCommandCallback,\n+                PublicApiId.DEVICE_CODE_FLOW_WITH_CALLBACK\n+        );\n+\n+        // Run the command we created above in a separate thread to allow running HTTP Requests\n+        Thread thread = new Thread(new Runnable(){\n+            @Override\n+            public void run(){\n+                CommandDispatcher.submitSilent(deviceCodeFlowCommand);\n+            }\n+        });\n+        thread.start();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxNTQ0Mg=="}, "originalCommit": {"oid": "fb58f4a82aa5c3ee0c166152eac3293c7b93731d"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Mzg2ODI5OnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjoxOTo0M1rOG1qAAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjoxOTo0M1rOG1qAAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxNTg0Mg==", "bodyText": "Why can't we get any generic MsalException?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458915842", "createdAt": "2020-07-22T16:19:43Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "diffHunk": "@@ -1689,6 +1727,38 @@ public void onCancel() {\n         };\n     }\n \n+    protected DeviceCodeFlowCommandCallback getDeviceCodeFlowCommandCallback(@NonNull final DeviceCodeFlowCallback callback) {\n+        return new DeviceCodeFlowCommandCallback<LocalAuthenticationResult, MsalServiceException>() {\n+            @Override\n+            public void getUserCode(@NonNull String vUri, @NonNull String userCode, @NonNull String message){\n+                callback.onUserCodeReceived(vUri, userCode, message);\n+            }\n+\n+            @Override\n+            public void onTaskCompleted(LocalAuthenticationResult tokenResult) {\n+                // Convert tokenResult to an AuthenticationResult object\n+                IAuthenticationResult convertedResult = AuthenticationResultAdapter.adapt(\n+                        tokenResult);\n+\n+                // Type cast the interface object\n+                AuthenticationResult authResult = (AuthenticationResult) convertedResult;\n+\n+                callback.onTokenReceived(authResult);\n+            }\n+\n+            @Override\n+            public void onError(MsalServiceException msalError) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb58f4a82aa5c3ee0c166152eac3293c7b93731d"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Mzg4MDg4OnYy", "diffSide": "RIGHT", "path": "msal/src/test/java/com/microsoft/identity/client/e2e/shadows/ShadowDeviceCodeFlowCommandAuthError.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjoyMjoxOFrOG1qIGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjoyMjoxOFrOG1qIGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxNzkxNQ==", "bodyText": "Would be good to have an extra line above this", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458917915", "createdAt": "2020-07-22T16:22:18Z", "author": {"login": "shahzaibj"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/shadows/ShadowDeviceCodeFlowCommandAuthError.java", "diffHunk": "@@ -0,0 +1,39 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.shadows;\n+\n+import com.microsoft.identity.client.exception.MsalServiceException;\n+import com.microsoft.identity.common.internal.commands.DeviceCodeFlowCommand;\n+import com.microsoft.identity.common.internal.result.AcquireTokenResult;\n+\n+import org.robolectric.annotation.Implements;\n+\n+/**\n+ * Shadow class that simulates Device Code Flow failing due to an error in the authorization phase.\n+ */\n+@Implements(DeviceCodeFlowCommand.class)\n+public class ShadowDeviceCodeFlowCommandAuthError {\n+    public AcquireTokenResult execute() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb58f4a82aa5c3ee0c166152eac3293c7b93731d"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Mzg5MDk2OnYy", "diffSide": "RIGHT", "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowAPITest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjoyMzo1OVrOG1qO1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjo0MzozNlrOG1rJKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxOTYzNw==", "bodyText": "I'm not clear on what this variable is/does....does it determine if user code has been received? If yes, then can we rename to mUserCodeReceived?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458919637", "createdAt": "2020-07-22T16:23:59Z", "author": {"login": "shahzaibj"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowAPITest.java", "diffHunk": "@@ -0,0 +1,153 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.tests.mocked;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.AuthenticationResult;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandAuthError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandSuccessful;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandTokenError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowHttpRequestForMockedTest;\n+import com.microsoft.identity.client.e2e.shadows.ShadowMsalUtils;\n+import com.microsoft.identity.client.e2e.tests.PublicClientApplicationAbstractTest;\n+import com.microsoft.identity.client.e2e.utils.RoboTestUtils;\n+import com.microsoft.identity.client.exception.MsalServiceException;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import static com.microsoft.identity.internal.testutils.TestConstants.Configurations.SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+\n+/**\n+ * Testing class for the device code flow protocol. Currently only supporting testing for the API-side\n+ * of the protocol. Will be extended to test individual aspects of the flow.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@Config(shadows = {ShadowMsalUtils.class, ShadowHttpRequestForMockedTest.class})\n+public class DeviceCodeFlowAPITest extends PublicClientApplicationAbstractTest {\n+\n+    private boolean mUserCodeBoolean;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb58f4a82aa5c3ee0c166152eac3293c7b93731d"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkzNDU3MQ==", "bodyText": "Yes that's what I'm using it for. I will rename it", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458934571", "createdAt": "2020-07-22T16:43:36Z", "author": {"login": "t-fadura"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowAPITest.java", "diffHunk": "@@ -0,0 +1,153 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.tests.mocked;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.AuthenticationResult;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandAuthError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandSuccessful;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandTokenError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowHttpRequestForMockedTest;\n+import com.microsoft.identity.client.e2e.shadows.ShadowMsalUtils;\n+import com.microsoft.identity.client.e2e.tests.PublicClientApplicationAbstractTest;\n+import com.microsoft.identity.client.e2e.utils.RoboTestUtils;\n+import com.microsoft.identity.client.exception.MsalServiceException;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import static com.microsoft.identity.internal.testutils.TestConstants.Configurations.SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+\n+/**\n+ * Testing class for the device code flow protocol. Currently only supporting testing for the API-side\n+ * of the protocol. Will be extended to test individual aspects of the flow.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@Config(shadows = {ShadowMsalUtils.class, ShadowHttpRequestForMockedTest.class})\n+public class DeviceCodeFlowAPITest extends PublicClientApplicationAbstractTest {\n+\n+    private boolean mUserCodeBoolean;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxOTYzNw=="}, "originalCommit": {"oid": "fb58f4a82aa5c3ee0c166152eac3293c7b93731d"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzkwMjY0OnYy", "diffSide": "RIGHT", "path": "msal/src/test/res/raw/single_account_dcf_test_config.json", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjoyNTo0OFrOG1qWKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxOTowMTozN1rOG3vkqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkyMTUxMg==", "bodyText": "Can we use something that is already existing in the LAB?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458921512", "createdAt": "2020-07-22T16:25:48Z", "author": {"login": "shahzaibj"}, "path": "msal/src/test/res/raw/single_account_dcf_test_config.json", "diffHunk": "@@ -0,0 +1,12 @@\n+{\n+  \"client_id\": \"d335d85e-5aa7-4f03-8c2f-81b2699f30a6\",\n+  \"authorization_user_agent\": \"DEFAULT\",\n+  \"redirect_uri\": \"msauth://com.onmicrosoft.fadiorgorg/1wIqXSqBj7w%2Bh11ZifsnqwgyKrY%3D\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb58f4a82aa5c3ee0c166152eac3293c7b93731d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkzNTc5Nw==", "bodyText": "You mean one of the other .json files that was already there?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458935797", "createdAt": "2020-07-22T16:45:29Z", "author": {"login": "t-fadura"}, "path": "msal/src/test/res/raw/single_account_dcf_test_config.json", "diffHunk": "@@ -0,0 +1,12 @@\n+{\n+  \"client_id\": \"d335d85e-5aa7-4f03-8c2f-81b2699f30a6\",\n+  \"authorization_user_agent\": \"DEFAULT\",\n+  \"redirect_uri\": \"msauth://com.onmicrosoft.fadiorgorg/1wIqXSqBj7w%2Bh11ZifsnqwgyKrY%3D\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkyMTUxMg=="}, "originalCommit": {"oid": "fb58f4a82aa5c3ee0c166152eac3293c7b93731d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0OTQzNw==", "bodyText": "Yes, can we use one of those? Does support for DCF need to be turned on per tenant by the tenant admin? If yes, then we should start a thread with LAB Team to configure something for this. cc/ @rpdome", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458949437", "createdAt": "2020-07-22T17:08:24Z", "author": {"login": "shahzaibj"}, "path": "msal/src/test/res/raw/single_account_dcf_test_config.json", "diffHunk": "@@ -0,0 +1,12 @@\n+{\n+  \"client_id\": \"d335d85e-5aa7-4f03-8c2f-81b2699f30a6\",\n+  \"authorization_user_agent\": \"DEFAULT\",\n+  \"redirect_uri\": \"msauth://com.onmicrosoft.fadiorgorg/1wIqXSqBj7w%2Bh11ZifsnqwgyKrY%3D\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkyMTUxMg=="}, "originalCommit": {"oid": "fb58f4a82aa5c3ee0c166152eac3293c7b93731d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEwNDI5Ng==", "bodyText": "Yes, DCF has to be turned on. If no one has started the thread, let's create a work item and we can pick that up later.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r461104296", "createdAt": "2020-07-27T19:01:37Z", "author": {"login": "rpdome"}, "path": "msal/src/test/res/raw/single_account_dcf_test_config.json", "diffHunk": "@@ -0,0 +1,12 @@\n+{\n+  \"client_id\": \"d335d85e-5aa7-4f03-8c2f-81b2699f30a6\",\n+  \"authorization_user_agent\": \"DEFAULT\",\n+  \"redirect_uri\": \"msauth://com.onmicrosoft.fadiorgorg/1wIqXSqBj7w%2Bh11ZifsnqwgyKrY%3D\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkyMTUxMg=="}, "originalCommit": {"oid": "fb58f4a82aa5c3ee0c166152eac3293c7b93731d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzkxNDkzOnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/internal/CommandParametersAdapter.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjoyODoyNFrOG1qeYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMzozMjowNFrOG2e-Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkyMzYxOQ==", "bodyText": "Do we actually know if PoP is supported over DCF? Or is there a plan to support in the future?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458923619", "createdAt": "2020-07-22T16:28:24Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/CommandParametersAdapter.java", "diffHunk": "@@ -193,6 +195,33 @@ public static SilentTokenCommandParameters createSilentTokenCommandParameters(\n         return commandParameters;\n     }\n \n+    public static DeviceCodeFlowCommandParameters createDeviceCodeFlowCommandParameters(\n+            @NonNull final PublicClientApplicationConfiguration configuration,\n+            @NonNull final OAuth2TokenCache tokenCache,\n+            @NonNull String[] scopes){\n+\n+        final AbstractAuthenticationScheme authenticationScheme = new BearerAuthenticationSchemeInternal();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb58f4a82aa5c3ee0c166152eac3293c7b93731d"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0NDIwMw==", "bodyText": "@iambmelt , @rpdome Do you know if PoP is supported over DCF or is there a plan to support it?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458944203", "createdAt": "2020-07-22T16:59:39Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/CommandParametersAdapter.java", "diffHunk": "@@ -193,6 +195,33 @@ public static SilentTokenCommandParameters createSilentTokenCommandParameters(\n         return commandParameters;\n     }\n \n+    public static DeviceCodeFlowCommandParameters createDeviceCodeFlowCommandParameters(\n+            @NonNull final PublicClientApplicationConfiguration configuration,\n+            @NonNull final OAuth2TokenCache tokenCache,\n+            @NonNull String[] scopes){\n+\n+        final AbstractAuthenticationScheme authenticationScheme = new BearerAuthenticationSchemeInternal();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkyMzYxOQ=="}, "originalCommit": {"oid": "fb58f4a82aa5c3ee0c166152eac3293c7b93731d"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0ODE1Nw==", "bodyText": "I think it should be supported as AuthenticationScheme only has to do with /token endpoint (unless server has a logic to restrict PoP to specific grant types and dcf is explicitly blocked)", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458948157", "createdAt": "2020-07-22T17:06:14Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/CommandParametersAdapter.java", "diffHunk": "@@ -193,6 +195,33 @@ public static SilentTokenCommandParameters createSilentTokenCommandParameters(\n         return commandParameters;\n     }\n \n+    public static DeviceCodeFlowCommandParameters createDeviceCodeFlowCommandParameters(\n+            @NonNull final PublicClientApplicationConfiguration configuration,\n+            @NonNull final OAuth2TokenCache tokenCache,\n+            @NonNull String[] scopes){\n+\n+        final AbstractAuthenticationScheme authenticationScheme = new BearerAuthenticationSchemeInternal();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkyMzYxOQ=="}, "originalCommit": {"oid": "fb58f4a82aa5c3ee0c166152eac3293c7b93731d"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2OTIzMg==", "bodyText": "I guess I don't have enough context to answer this question. I agree with what you describe (that it should work, but I think we won't know for sure until we test it e2e.\nWe could add a comment (i.e. TODO here) and have that as a separate PR/ work item.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r459069232", "createdAt": "2020-07-22T20:39:35Z", "author": {"login": "rpdome"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/CommandParametersAdapter.java", "diffHunk": "@@ -193,6 +195,33 @@ public static SilentTokenCommandParameters createSilentTokenCommandParameters(\n         return commandParameters;\n     }\n \n+    public static DeviceCodeFlowCommandParameters createDeviceCodeFlowCommandParameters(\n+            @NonNull final PublicClientApplicationConfiguration configuration,\n+            @NonNull final OAuth2TokenCache tokenCache,\n+            @NonNull String[] scopes){\n+\n+        final AbstractAuthenticationScheme authenticationScheme = new BearerAuthenticationSchemeInternal();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkyMzYxOQ=="}, "originalCommit": {"oid": "fb58f4a82aa5c3ee0c166152eac3293c7b93731d"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc4MzY5Mg==", "bodyText": "This is not presently supported by ESTS. PoP support for DCF is a backlog item, that said, let's not make any implementation or design decisions that preclude us from adding this support in the future", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r459783692", "createdAt": "2020-07-23T23:31:53Z", "author": {"login": "iambmelt"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/CommandParametersAdapter.java", "diffHunk": "@@ -193,6 +195,33 @@ public static SilentTokenCommandParameters createSilentTokenCommandParameters(\n         return commandParameters;\n     }\n \n+    public static DeviceCodeFlowCommandParameters createDeviceCodeFlowCommandParameters(\n+            @NonNull final PublicClientApplicationConfiguration configuration,\n+            @NonNull final OAuth2TokenCache tokenCache,\n+            @NonNull String[] scopes){\n+\n+        final AbstractAuthenticationScheme authenticationScheme = new BearerAuthenticationSchemeInternal();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkyMzYxOQ=="}, "originalCommit": {"oid": "fb58f4a82aa5c3ee0c166152eac3293c7b93731d"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc4MzczNQ==", "bodyText": "@rpdome @shahzaibj ^^", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r459783735", "createdAt": "2020-07-23T23:32:04Z", "author": {"login": "iambmelt"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/CommandParametersAdapter.java", "diffHunk": "@@ -193,6 +195,33 @@ public static SilentTokenCommandParameters createSilentTokenCommandParameters(\n         return commandParameters;\n     }\n \n+    public static DeviceCodeFlowCommandParameters createDeviceCodeFlowCommandParameters(\n+            @NonNull final PublicClientApplicationConfiguration configuration,\n+            @NonNull final OAuth2TokenCache tokenCache,\n+            @NonNull String[] scopes){\n+\n+        final AbstractAuthenticationScheme authenticationScheme = new BearerAuthenticationSchemeInternal();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkyMzYxOQ=="}, "originalCommit": {"oid": "fb58f4a82aa5c3ee0c166152eac3293c7b93731d"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDA4OTE1OnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerMsalController.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzoxMjowNlrOG1sL8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMToyNzo1OFrOG2GcFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk1MTY2NQ==", "bodyText": "When will these be declared in BaseController? These would need the @override annotation when that happens. I suggest opening a PR for common now to take care of that and then add the annotation here so that we don't have to open a separate PR later to address the annotation.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458951665", "createdAt": "2020-07-22T17:12:06Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerMsalController.java", "diffHunk": "@@ -555,6 +557,16 @@ public void putValueInSuccessEvent(ApiEndEvent event, Boolean result) {\n                 });\n     }\n \n+    // Placeholder methods to avoid inheritance error (these methods will be declared in BaseController)\n+    // Also why the @Override annotation is missing\n+    public AuthorizationResult deviceCodeFlowAuthRequest(DeviceCodeFlowCommandParameters parameters) throws ClientException {\n+        throw new ClientException(\"deviceCodeFlowAuthRequest() not supported in BrokerMsalController\");\n+    }\n+\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(AuthorizationResult authorizationResult) throws ClientException {\n+        throw new ClientException(\"deviceCodeFlowAuthRequest() not supported in BrokerMsalController\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e03ef8aef229b6117ac2e211f1dbacbbf861aaa7"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk1MjA1Nw==", "bodyText": "Also JFYI, you will probably need to open a PR for broker (ad-accounts) as well to do the same in BrokerLocalController", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458952057", "createdAt": "2020-07-22T17:12:45Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerMsalController.java", "diffHunk": "@@ -555,6 +557,16 @@ public void putValueInSuccessEvent(ApiEndEvent event, Boolean result) {\n                 });\n     }\n \n+    // Placeholder methods to avoid inheritance error (these methods will be declared in BaseController)\n+    // Also why the @Override annotation is missing\n+    public AuthorizationResult deviceCodeFlowAuthRequest(DeviceCodeFlowCommandParameters parameters) throws ClientException {\n+        throw new ClientException(\"deviceCodeFlowAuthRequest() not supported in BrokerMsalController\");\n+    }\n+\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(AuthorizationResult authorizationResult) throws ClientException {\n+        throw new ClientException(\"deviceCodeFlowAuthRequest() not supported in BrokerMsalController\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk1MTY2NQ=="}, "originalCommit": {"oid": "e03ef8aef229b6117ac2e211f1dbacbbf861aaa7"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk2NzU1Mg==", "bodyText": "Yes The broker code is pushed to my branch, just need to make the PR", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458967552", "createdAt": "2020-07-22T17:38:16Z", "author": {"login": "t-fadura"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerMsalController.java", "diffHunk": "@@ -555,6 +557,16 @@ public void putValueInSuccessEvent(ApiEndEvent event, Boolean result) {\n                 });\n     }\n \n+    // Placeholder methods to avoid inheritance error (these methods will be declared in BaseController)\n+    // Also why the @Override annotation is missing\n+    public AuthorizationResult deviceCodeFlowAuthRequest(DeviceCodeFlowCommandParameters parameters) throws ClientException {\n+        throw new ClientException(\"deviceCodeFlowAuthRequest() not supported in BrokerMsalController\");\n+    }\n+\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(AuthorizationResult authorizationResult) throws ClientException {\n+        throw new ClientException(\"deviceCodeFlowAuthRequest() not supported in BrokerMsalController\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk1MTY2NQ=="}, "originalCommit": {"oid": "e03ef8aef229b6117ac2e211f1dbacbbf861aaa7"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk2ODE1Nw==", "bodyText": "My timeline for the PR's was complete this one, then send out a Broker PR for BrokerLocalController, and then a PR to common for adding the methods to BaseController", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458968157", "createdAt": "2020-07-22T17:39:17Z", "author": {"login": "t-fadura"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerMsalController.java", "diffHunk": "@@ -555,6 +557,16 @@ public void putValueInSuccessEvent(ApiEndEvent event, Boolean result) {\n                 });\n     }\n \n+    // Placeholder methods to avoid inheritance error (these methods will be declared in BaseController)\n+    // Also why the @Override annotation is missing\n+    public AuthorizationResult deviceCodeFlowAuthRequest(DeviceCodeFlowCommandParameters parameters) throws ClientException {\n+        throw new ClientException(\"deviceCodeFlowAuthRequest() not supported in BrokerMsalController\");\n+    }\n+\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(AuthorizationResult authorizationResult) throws ClientException {\n+        throw new ClientException(\"deviceCodeFlowAuthRequest() not supported in BrokerMsalController\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk1MTY2NQ=="}, "originalCommit": {"oid": "e03ef8aef229b6117ac2e211f1dbacbbf861aaa7"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk2ODcxOA==", "bodyText": "I don't need to wait for this PR to be complete to open the broker PR. But I will need this PR and the broker PR to be complete before I can complete the next Common PR.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458968718", "createdAt": "2020-07-22T17:40:06Z", "author": {"login": "t-fadura"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerMsalController.java", "diffHunk": "@@ -555,6 +557,16 @@ public void putValueInSuccessEvent(ApiEndEvent event, Boolean result) {\n                 });\n     }\n \n+    // Placeholder methods to avoid inheritance error (these methods will be declared in BaseController)\n+    // Also why the @Override annotation is missing\n+    public AuthorizationResult deviceCodeFlowAuthRequest(DeviceCodeFlowCommandParameters parameters) throws ClientException {\n+        throw new ClientException(\"deviceCodeFlowAuthRequest() not supported in BrokerMsalController\");\n+    }\n+\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(AuthorizationResult authorizationResult) throws ClientException {\n+        throw new ClientException(\"deviceCodeFlowAuthRequest() not supported in BrokerMsalController\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk1MTY2NQ=="}, "originalCommit": {"oid": "e03ef8aef229b6117ac2e211f1dbacbbf861aaa7"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk2OTgwMw==", "bodyText": "I'm confused why it is like that. It should be the other way around i.e. you need the Common PR to be complete before you can complete this PR and the Broker PR.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458969803", "createdAt": "2020-07-22T17:41:56Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerMsalController.java", "diffHunk": "@@ -555,6 +557,16 @@ public void putValueInSuccessEvent(ApiEndEvent event, Boolean result) {\n                 });\n     }\n \n+    // Placeholder methods to avoid inheritance error (these methods will be declared in BaseController)\n+    // Also why the @Override annotation is missing\n+    public AuthorizationResult deviceCodeFlowAuthRequest(DeviceCodeFlowCommandParameters parameters) throws ClientException {\n+        throw new ClientException(\"deviceCodeFlowAuthRequest() not supported in BrokerMsalController\");\n+    }\n+\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(AuthorizationResult authorizationResult) throws ClientException {\n+        throw new ClientException(\"deviceCodeFlowAuthRequest() not supported in BrokerMsalController\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk1MTY2NQ=="}, "originalCommit": {"oid": "e03ef8aef229b6117ac2e211f1dbacbbf861aaa7"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4MTc4MA==", "bodyText": "If I declare new abstract methods to BaseController in Common, I'll need to implement them in the controller classes that extend BaseController. Wouldn't this mean that until the PRs for MSAL and Broker that implement these methods are pushed, the controller classes will have compilation errors? I'm trying to avoid these errors by pushing the methods in LocalMsalController and other classes first, before declaring in BaseController.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r459381780", "createdAt": "2020-07-23T11:27:58Z", "author": {"login": "t-fadura"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerMsalController.java", "diffHunk": "@@ -555,6 +557,16 @@ public void putValueInSuccessEvent(ApiEndEvent event, Boolean result) {\n                 });\n     }\n \n+    // Placeholder methods to avoid inheritance error (these methods will be declared in BaseController)\n+    // Also why the @Override annotation is missing\n+    public AuthorizationResult deviceCodeFlowAuthRequest(DeviceCodeFlowCommandParameters parameters) throws ClientException {\n+        throw new ClientException(\"deviceCodeFlowAuthRequest() not supported in BrokerMsalController\");\n+    }\n+\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(AuthorizationResult authorizationResult) throws ClientException {\n+        throw new ClientException(\"deviceCodeFlowAuthRequest() not supported in BrokerMsalController\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk1MTY2NQ=="}, "originalCommit": {"oid": "e03ef8aef229b6117ac2e211f1dbacbbf861aaa7"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDA5MzYzOnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzoxMzoyMFrOG1sOrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDo0NDo0NFrOG1zh_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk1MjM2NQ==", "bodyText": "Same feedback as given above for BrokerMsalController", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r458952365", "createdAt": "2020-07-22T17:13:20Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -457,4 +458,15 @@ public boolean getDeviceMode(CommandParameters parameters) throws Exception {\n     public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) throws Exception {\n         return removeAccount(parameters);\n     }\n+\n+    // Placeholder methods to avoid inheritance error (these methods will be declared in BaseController)\n+    // Also why the @Override annotation is missing\n+    public AuthorizationResult deviceCodeFlowAuthRequest(DeviceCodeFlowCommandParameters parameters) throws Exception {\n+        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n+        return null;\n+    }\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(AuthorizationResult authorizationResult) throws Exception {\n+        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n+        return null;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e03ef8aef229b6117ac2e211f1dbacbbf861aaa7"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3MTk5Nw==", "bodyText": "+1. Should be declared in BaseController", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r459071997", "createdAt": "2020-07-22T20:44:44Z", "author": {"login": "rpdome"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -457,4 +458,15 @@ public boolean getDeviceMode(CommandParameters parameters) throws Exception {\n     public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) throws Exception {\n         return removeAccount(parameters);\n     }\n+\n+    // Placeholder methods to avoid inheritance error (these methods will be declared in BaseController)\n+    // Also why the @Override annotation is missing\n+    public AuthorizationResult deviceCodeFlowAuthRequest(DeviceCodeFlowCommandParameters parameters) throws Exception {\n+        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n+        return null;\n+    }\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(AuthorizationResult authorizationResult) throws Exception {\n+        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n+        return null;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk1MjM2NQ=="}, "originalCommit": {"oid": "e03ef8aef229b6117ac2e211f1dbacbbf861aaa7"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDc3NDEzOnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDoyNToyMFrOG1y58g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDoyNToyMFrOG1y58g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2MTc0Ng==", "bodyText": "nit: NonNull final", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r459061746", "createdAt": "2020-07-22T20:25:20Z", "author": {"login": "rpdome"}, "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "diffHunk": "@@ -162,4 +170,39 @@ void acquireToken(@NonNull final Activity activity,\n         void onError(final MsalException exception);\n     }\n \n+    /**\n+     * Callback object used in Device Code Flow.\n+     * This callback provides the following methods for communicating with the protocol.\n+     *                 1). Receiving authentication information (user_code, verification_uri, and instruction message)\n+     *                 via {@link DeviceCodeFlowCallback#onUserCodeReceived(String, String, String)}.\n+     *                 2). Receiving a successful authentication result containing a fresh access token\n+     *                 via {@link DeviceCodeFlowCallback#onTokenReceived(AuthenticationResult)}.\n+     *                 3). Receiving an exception detailing what went wrong in the protocol\n+     *                 via {@link DeviceCodeFlowCallback#onError(MsalException)}.\n+     */\n+    interface DeviceCodeFlowCallback {\n+        /**\n+         * Invoked to display verification uri, user code, and instruction message during device code flow.\n+         *\n+         * @param vUri verification uri\n+         * @param userCode user code\n+         * @param message instruction message\n+         */\n+        void onUserCodeReceived(@NonNull String vUri, @NonNull String userCode, @NonNull String message);\n+\n+        /**\n+         * Invoked once token is received and passes the {@link AuthenticationResult} object.\n+         *\n+         * @param authResult the authentication result\n+         */\n+        void onTokenReceived(AuthenticationResult authResult);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e03ef8aef229b6117ac2e211f1dbacbbf861aaa7"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDc3NTM2OnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDoyNTo0MVrOG1y6qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDoyNTo0MVrOG1y6qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2MTkzMQ==", "bodyText": "nit: NonNull final", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r459061931", "createdAt": "2020-07-22T20:25:41Z", "author": {"login": "rpdome"}, "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "diffHunk": "@@ -162,4 +170,39 @@ void acquireToken(@NonNull final Activity activity,\n         void onError(final MsalException exception);\n     }\n \n+    /**\n+     * Callback object used in Device Code Flow.\n+     * This callback provides the following methods for communicating with the protocol.\n+     *                 1). Receiving authentication information (user_code, verification_uri, and instruction message)\n+     *                 via {@link DeviceCodeFlowCallback#onUserCodeReceived(String, String, String)}.\n+     *                 2). Receiving a successful authentication result containing a fresh access token\n+     *                 via {@link DeviceCodeFlowCallback#onTokenReceived(AuthenticationResult)}.\n+     *                 3). Receiving an exception detailing what went wrong in the protocol\n+     *                 via {@link DeviceCodeFlowCallback#onError(MsalException)}.\n+     */\n+    interface DeviceCodeFlowCallback {\n+        /**\n+         * Invoked to display verification uri, user code, and instruction message during device code flow.\n+         *\n+         * @param vUri verification uri\n+         * @param userCode user code\n+         * @param message instruction message\n+         */\n+        void onUserCodeReceived(@NonNull String vUri, @NonNull String userCode, @NonNull String message);\n+\n+        /**\n+         * Invoked once token is received and passes the {@link AuthenticationResult} object.\n+         *\n+         * @param authResult the authentication result\n+         */\n+        void onTokenReceived(AuthenticationResult authResult);\n+\n+        /**\n+         * Invoked if an error is encountered during the device code flow and passes the exception object.\n+         *\n+         * @param error error exception\n+         */\n+        void onError(MsalException error);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e03ef8aef229b6117ac2e211f1dbacbbf861aaa7"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDc4NTg4OnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDoyOTowMVrOG1zBVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDoyOTowMVrOG1zBVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2MzYzNg==", "bodyText": "nit: final", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r459063636", "createdAt": "2020-07-22T20:29:01Z", "author": {"login": "rpdome"}, "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "diffHunk": "@@ -1689,6 +1720,38 @@ public void onCancel() {\n         };\n     }\n \n+    protected DeviceCodeFlowCommandCallback getDeviceCodeFlowCommandCallback(@NonNull final DeviceCodeFlowCallback callback) {\n+        return new DeviceCodeFlowCommandCallback<LocalAuthenticationResult, MsalException>() {\n+            @Override\n+            public void onUserCodeReceived(@NonNull String vUri, @NonNull String userCode, @NonNull String message){\n+                callback.onUserCodeReceived(vUri, userCode, message);\n+            }\n+\n+            @Override\n+            public void onTaskCompleted(LocalAuthenticationResult tokenResult) {\n+                // Convert tokenResult to an AuthenticationResult object\n+                IAuthenticationResult convertedResult = AuthenticationResultAdapter.adapt(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e03ef8aef229b6117ac2e211f1dbacbbf861aaa7"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDc4NjIzOnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDoyOToxMVrOG1zBmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDoyOToxMVrOG1zBmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2MzcwNQ==", "bodyText": "nit: final", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r459063705", "createdAt": "2020-07-22T20:29:11Z", "author": {"login": "rpdome"}, "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "diffHunk": "@@ -1689,6 +1720,38 @@ public void onCancel() {\n         };\n     }\n \n+    protected DeviceCodeFlowCommandCallback getDeviceCodeFlowCommandCallback(@NonNull final DeviceCodeFlowCallback callback) {\n+        return new DeviceCodeFlowCommandCallback<LocalAuthenticationResult, MsalException>() {\n+            @Override\n+            public void onUserCodeReceived(@NonNull String vUri, @NonNull String userCode, @NonNull String message){\n+                callback.onUserCodeReceived(vUri, userCode, message);\n+            }\n+\n+            @Override\n+            public void onTaskCompleted(LocalAuthenticationResult tokenResult) {\n+                // Convert tokenResult to an AuthenticationResult object\n+                IAuthenticationResult convertedResult = AuthenticationResultAdapter.adapt(\n+                        tokenResult);\n+\n+                // Type cast the interface object\n+                AuthenticationResult authResult = (AuthenticationResult) convertedResult;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e03ef8aef229b6117ac2e211f1dbacbbf861aaa7"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDc4ODg4OnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDoyOTo1NVrOG1zDOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDoyOTo1NVrOG1zDOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2NDEyMA==", "bodyText": "nit: Add a comment that this does not support brokered authentication.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r459064120", "createdAt": "2020-07-22T20:29:55Z", "author": {"login": "rpdome"}, "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "diffHunk": "@@ -84,6 +85,13 @@ void acquireToken(@NonNull final Activity activity,\n     @WorkerThread\n     IAuthenticationResult acquireTokenSilent(@NonNull final AcquireTokenSilentParameters acquireTokenSilentParameters) throws InterruptedException, MsalException;\n \n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e03ef8aef229b6117ac2e211f1dbacbbf861aaa7"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTMzNDQzOnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjo0NDo0N1rOG2eDvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjo0NDo0N1rOG2eDvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2ODc2Ng==", "bodyText": "The formatting of this javadoc looks like it might be chewed up by the code formatter :/\nCan you do actrl + alt + l on this and confirm it won't get munged? If it doesn't all good, otherwise you might want to use some <p> or <li> tags to keep it formatted properly if/when formatter is run", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r459768766", "createdAt": "2020-07-23T22:44:47Z", "author": {"login": "iambmelt"}, "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "diffHunk": "@@ -162,4 +171,39 @@ void acquireToken(@NonNull final Activity activity,\n         void onError(final MsalException exception);\n     }\n \n+    /**\n+     * Callback object used in Device Code Flow.\n+     * This callback provides the following methods for communicating with the protocol.\n+     *                 1). Receiving authentication information (user_code, verification_uri, and instruction message)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0160efd7172b279d86d79e42e2b58254ed175884"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTMzNTk2OnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjo0NToyMVrOG2eEnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjo0NToyMVrOG2eEnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2ODk4OA==", "bodyText": "Excellent javadocs here \ud83d\udc4d", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r459768988", "createdAt": "2020-07-23T22:45:21Z", "author": {"login": "iambmelt"}, "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "diffHunk": "@@ -162,4 +171,39 @@ void acquireToken(@NonNull final Activity activity,\n         void onError(final MsalException exception);\n     }\n \n+    /**\n+     * Callback object used in Device Code Flow.\n+     * This callback provides the following methods for communicating with the protocol.\n+     *                 1). Receiving authentication information (user_code, verification_uri, and instruction message)\n+     *                 via {@link DeviceCodeFlowCallback#onUserCodeReceived(String, String, String)}.\n+     *                 2). Receiving a successful authentication result containing a fresh access token\n+     *                 via {@link DeviceCodeFlowCallback#onTokenReceived(AuthenticationResult)}.\n+     *                 3). Receiving an exception detailing what went wrong in the protocol\n+     *                 via {@link DeviceCodeFlowCallback#onError(MsalException)}.\n+     */\n+    interface DeviceCodeFlowCallback {\n+        /**\n+         * Invoked to display verification uri, user code, and instruction message during device code flow.\n+         *\n+         * @param vUri verification uri\n+         * @param userCode user code\n+         * @param message instruction message\n+         */\n+        void onUserCodeReceived(@NonNull String vUri, @NonNull String userCode, @NonNull String message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0160efd7172b279d86d79e42e2b58254ed175884"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTM4MTE5OnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMzowNjoxNVrOG2efHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMTo1Nzo0OVrOG2ss0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3NTc3NQ==", "bodyText": "Should we call this something like acquireTokenWithDeviceCode()? This seems to be the naming that .NET used\n/cc @jennyf19", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r459775775", "createdAt": "2020-07-23T23:06:15Z", "author": {"login": "iambmelt"}, "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "diffHunk": "@@ -84,6 +85,14 @@ void acquireToken(@NonNull final Activity activity,\n     @WorkerThread\n     IAuthenticationResult acquireTokenSilent(@NonNull final AcquireTokenSilentParameters acquireTokenSilentParameters) throws InterruptedException, MsalException;\n \n+    /**\n+     * Perform the Device Code Flow (DCF) protocol to allow a device without input capability to authenticate and get a new access token.\n+     * Currently, flow is only supported in local MSAL. No Broker support.\n+     * @param scopes the desired access scopes\n+     * @param callback callback object used to communicate with the API throughout the protocol\n+     */\n+    void deviceCodeFlow(@Nullable String[] scopes, @NonNull final DeviceCodeFlowCallback callback);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0160efd7172b279d86d79e42e2b58254ed175884"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2MjM5MA==", "bodyText": "are most of your methods acquiretokenWith*? Java looks to be slightly different too.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r459862390", "createdAt": "2020-07-24T05:46:52Z", "author": {"login": "jennyf19"}, "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "diffHunk": "@@ -84,6 +85,14 @@ void acquireToken(@NonNull final Activity activity,\n     @WorkerThread\n     IAuthenticationResult acquireTokenSilent(@NonNull final AcquireTokenSilentParameters acquireTokenSilentParameters) throws InterruptedException, MsalException;\n \n+    /**\n+     * Perform the Device Code Flow (DCF) protocol to allow a device without input capability to authenticate and get a new access token.\n+     * Currently, flow is only supported in local MSAL. No Broker support.\n+     * @param scopes the desired access scopes\n+     * @param callback callback object used to communicate with the API throughout the protocol\n+     */\n+    void deviceCodeFlow(@Nullable String[] scopes, @NonNull final DeviceCodeFlowCallback callback);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3NTc3NQ=="}, "originalCommit": {"oid": "0160efd7172b279d86d79e42e2b58254ed175884"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAwODY1OA==", "bodyText": "I think that's a better name for it", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r460008658", "createdAt": "2020-07-24T11:57:49Z", "author": {"login": "t-fadura"}, "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "diffHunk": "@@ -84,6 +85,14 @@ void acquireToken(@NonNull final Activity activity,\n     @WorkerThread\n     IAuthenticationResult acquireTokenSilent(@NonNull final AcquireTokenSilentParameters acquireTokenSilentParameters) throws InterruptedException, MsalException;\n \n+    /**\n+     * Perform the Device Code Flow (DCF) protocol to allow a device without input capability to authenticate and get a new access token.\n+     * Currently, flow is only supported in local MSAL. No Broker support.\n+     * @param scopes the desired access scopes\n+     * @param callback callback object used to communicate with the API throughout the protocol\n+     */\n+    void deviceCodeFlow(@Nullable String[] scopes, @NonNull final DeviceCodeFlowCallback callback);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3NTc3NQ=="}, "originalCommit": {"oid": "0160efd7172b279d86d79e42e2b58254ed175884"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODEwNjE5OnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzowNDoyNlrOG3rhqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxOTozOTowMlrOG3wxDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAzNzk5NQ==", "bodyText": "should this return MsalServiceException instead? Also may be this should go in the ExceptionAdapter class?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r461037995", "createdAt": "2020-07-27T17:04:26Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -457,4 +461,35 @@ public boolean getDeviceMode(CommandParameters parameters) throws Exception {\n     public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) throws Exception {\n         return removeAccount(parameters);\n     }\n+\n+    @Override\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n+        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n+        return null;\n+    }\n+\n+    @Override\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(final AuthorizationResult authorizationResult, DeviceCodeFlowCommandParameters commandParameters) throws Exception {\n+        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n+        return null;\n+    }\n+\n+    /**\n+     * Helper method to check if a result object is valid (was a success). If not, an exception will be generated and thrown.\n+     * @param result result object to be checked\n+     * @throws MsalServiceException MsalServiceException object reflecting error code returned by the result\n+     */\n+    private void validateServiceResult(@NonNull IResult result) throws MsalServiceException {\n+        //TODO: Will be implemented after Command/Controller level PR in Common\n+    }\n+\n+    /**\n+     * Given an error response object, create a serviceException object using the predefined error codes.\n+     * @param response error response object to be checked\n+     * @return an exception object\n+     */\n+    private ServiceException createServiceExceptionFromErrorResponse(IErrorResponse response) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b26dd13ea284e411e9cea42a96752b0c5ec95483"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA4NDEyOQ==", "bodyText": "The conversion to MsalServiceException happens inside LocalMsalController. I made it return ServiceException so that it can be used in Broker later. I made it a private, local function since It's only being used for DCF currently, so placing in ExceptionAdapter may be a bit misleading.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r461084129", "createdAt": "2020-07-27T18:24:50Z", "author": {"login": "t-fadura"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -457,4 +461,35 @@ public boolean getDeviceMode(CommandParameters parameters) throws Exception {\n     public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) throws Exception {\n         return removeAccount(parameters);\n     }\n+\n+    @Override\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n+        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n+        return null;\n+    }\n+\n+    @Override\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(final AuthorizationResult authorizationResult, DeviceCodeFlowCommandParameters commandParameters) throws Exception {\n+        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n+        return null;\n+    }\n+\n+    /**\n+     * Helper method to check if a result object is valid (was a success). If not, an exception will be generated and thrown.\n+     * @param result result object to be checked\n+     * @throws MsalServiceException MsalServiceException object reflecting error code returned by the result\n+     */\n+    private void validateServiceResult(@NonNull IResult result) throws MsalServiceException {\n+        //TODO: Will be implemented after Command/Controller level PR in Common\n+    }\n+\n+    /**\n+     * Given an error response object, create a serviceException object using the predefined error codes.\n+     * @param response error response object to be checked\n+     * @return an exception object\n+     */\n+    private ServiceException createServiceExceptionFromErrorResponse(IErrorResponse response) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAzNzk5NQ=="}, "originalCommit": {"oid": "b26dd13ea284e411e9cea42a96752b0c5ec95483"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEwMjg4Nw==", "bodyText": "I'd suggest renaming it to be DCF-specific. (You can even remove it for now, since this is not really required in this PR).", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r461102887", "createdAt": "2020-07-27T18:58:58Z", "author": {"login": "rpdome"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -457,4 +461,35 @@ public boolean getDeviceMode(CommandParameters parameters) throws Exception {\n     public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) throws Exception {\n         return removeAccount(parameters);\n     }\n+\n+    @Override\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n+        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n+        return null;\n+    }\n+\n+    @Override\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(final AuthorizationResult authorizationResult, DeviceCodeFlowCommandParameters commandParameters) throws Exception {\n+        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n+        return null;\n+    }\n+\n+    /**\n+     * Helper method to check if a result object is valid (was a success). If not, an exception will be generated and thrown.\n+     * @param result result object to be checked\n+     * @throws MsalServiceException MsalServiceException object reflecting error code returned by the result\n+     */\n+    private void validateServiceResult(@NonNull IResult result) throws MsalServiceException {\n+        //TODO: Will be implemented after Command/Controller level PR in Common\n+    }\n+\n+    /**\n+     * Given an error response object, create a serviceException object using the predefined error codes.\n+     * @param response error response object to be checked\n+     * @return an exception object\n+     */\n+    private ServiceException createServiceExceptionFromErrorResponse(IErrorResponse response) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAzNzk5NQ=="}, "originalCommit": {"oid": "b26dd13ea284e411e9cea42a96752b0c5ec95483"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEyMzg1Mw==", "bodyText": "I will remove it from this PR and include it in the next one.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r461123853", "createdAt": "2020-07-27T19:39:02Z", "author": {"login": "t-fadura"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -457,4 +461,35 @@ public boolean getDeviceMode(CommandParameters parameters) throws Exception {\n     public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) throws Exception {\n         return removeAccount(parameters);\n     }\n+\n+    @Override\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n+        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n+        return null;\n+    }\n+\n+    @Override\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(final AuthorizationResult authorizationResult, DeviceCodeFlowCommandParameters commandParameters) throws Exception {\n+        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n+        return null;\n+    }\n+\n+    /**\n+     * Helper method to check if a result object is valid (was a success). If not, an exception will be generated and thrown.\n+     * @param result result object to be checked\n+     * @throws MsalServiceException MsalServiceException object reflecting error code returned by the result\n+     */\n+    private void validateServiceResult(@NonNull IResult result) throws MsalServiceException {\n+        //TODO: Will be implemented after Command/Controller level PR in Common\n+    }\n+\n+    /**\n+     * Given an error response object, create a serviceException object using the predefined error codes.\n+     * @param response error response object to be checked\n+     * @return an exception object\n+     */\n+    private ServiceException createServiceExceptionFromErrorResponse(IErrorResponse response) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAzNzk5NQ=="}, "originalCommit": {"oid": "b26dd13ea284e411e9cea42a96752b0c5ec95483"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODQ4OTIzOnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODo1MTowNVrOG3vONQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxOTo1NDoxNlrOG3xQ_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5ODU0OQ==", "bodyText": "super minor nit: put a link to the device code flow protocol here.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r461098549", "createdAt": "2020-07-27T18:51:05Z", "author": {"login": "rpdome"}, "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "diffHunk": "@@ -162,4 +171,39 @@ void acquireToken(@NonNull final Activity activity,\n         void onError(final MsalException exception);\n     }\n \n+    /**\n+     * Callback object used in Device Code Flow.\n+     * This callback provides the following methods for communicating with the protocol.\n+     * 1). Receiving authentication information (user_code, verification_uri, and instruction message)\n+     * via {@link DeviceCodeFlowCallback#onUserCodeReceived(String, String, String)}.\n+     * 2). Receiving a successful authentication result containing a fresh access token\n+     * via {@link DeviceCodeFlowCallback#onTokenReceived(AuthenticationResult)}.\n+     * 3). Receiving an exception detailing what went wrong in the protocol\n+     * via {@link DeviceCodeFlowCallback#onError(MsalException)}.\n+     */\n+    interface DeviceCodeFlowCallback {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b26dd13ea284e411e9cea42a96752b0c5ec95483"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEzMjAzMA==", "bodyText": "Will include in next PR", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1103#discussion_r461132030", "createdAt": "2020-07-27T19:54:16Z", "author": {"login": "t-fadura"}, "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "diffHunk": "@@ -162,4 +171,39 @@ void acquireToken(@NonNull final Activity activity,\n         void onError(final MsalException exception);\n     }\n \n+    /**\n+     * Callback object used in Device Code Flow.\n+     * This callback provides the following methods for communicating with the protocol.\n+     * 1). Receiving authentication information (user_code, verification_uri, and instruction message)\n+     * via {@link DeviceCodeFlowCallback#onUserCodeReceived(String, String, String)}.\n+     * 2). Receiving a successful authentication result containing a fresh access token\n+     * via {@link DeviceCodeFlowCallback#onTokenReceived(AuthenticationResult)}.\n+     * 3). Receiving an exception detailing what went wrong in the protocol\n+     * via {@link DeviceCodeFlowCallback#onError(MsalException)}.\n+     */\n+    interface DeviceCodeFlowCallback {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5ODU0OQ=="}, "originalCommit": {"oid": "b26dd13ea284e411e9cea42a96752b0c5ec95483"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1787, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}