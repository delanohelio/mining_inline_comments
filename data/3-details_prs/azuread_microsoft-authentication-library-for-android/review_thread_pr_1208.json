{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1MDkyNzgx", "number": 1208, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMzoyMzowMFrOE17ltw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMDoxMToxNFrOE4aVAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTg2Mjk1OnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMzoyMzowMFrOHue1Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMzo1OTo1OVrOHvBAUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUwMTY3OQ==", "bodyText": "?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1208#discussion_r518501679", "createdAt": "2020-11-06T03:23:00Z", "author": {"login": "iambmelt"}, "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "diffHunk": "@@ -1263,6 +1266,123 @@ public boolean isSharedDevice() {\n         return mPublicClientConfiguration.getIsSharedDevice();\n     }\n \n+    @Override\n+    public String generateSignedHttpRequest(@NonNull final IAccount account,\n+                                            @NonNull final PoPAuthenticationScheme popParameters) throws MsalException {\n+        final ResultFuture<AsyncResult<GenerateShrResult>> future = new ResultFuture<>();\n+\n+        final GenerateShrCommandParameters cmdParams =\n+                CommandParametersAdapter.createGenerateShrCommandParameters(\n+                        mPublicClientConfiguration,\n+                        mPublicClientConfiguration.getOAuth2TokenCache(),\n+                        ((Account) account).getHomeAccountId(), // TODO Cleanup?\n+                        popParameters\n+                );\n+        final GenerateShrCommand generateShrCommand = new GenerateShrCommand(\n+                cmdParams,\n+                MSALControllerFactory.getAllControllers(\n+                        mPublicClientConfiguration.getAppContext(),\n+                        mPublicClientConfiguration.getDefaultAuthority(),\n+                        mPublicClientConfiguration\n+                ),\n+                new CommandCallback<GenerateShrResult, BaseException>() {\n+                    @Override\n+                    public void onCancel() {\n+                        // Not cancellable\n+                    }\n+\n+                    @Override\n+                    public void onError(BaseException error) {\n+                        future.setResult(\n+                                new AsyncResult<GenerateShrResult>(\n+                                        null,\n+                                        baseExceptionToMsalException(error)\n+                                )\n+                        );\n+                    }\n+\n+                    @Override\n+                    public void onTaskCompleted(GenerateShrResult generateShrResult) {\n+                        future.setResult(new AsyncResult<>(generateShrResult, null));\n+                    }\n+                },\n+                \"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c4e69e3f09c7c4c440d7a47e7c5f221b098cdbb"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA2MTU4NQ==", "bodyText": "27e1d49", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1208#discussion_r519061585", "createdAt": "2020-11-06T23:59:59Z", "author": {"login": "iambmelt"}, "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "diffHunk": "@@ -1263,6 +1266,123 @@ public boolean isSharedDevice() {\n         return mPublicClientConfiguration.getIsSharedDevice();\n     }\n \n+    @Override\n+    public String generateSignedHttpRequest(@NonNull final IAccount account,\n+                                            @NonNull final PoPAuthenticationScheme popParameters) throws MsalException {\n+        final ResultFuture<AsyncResult<GenerateShrResult>> future = new ResultFuture<>();\n+\n+        final GenerateShrCommandParameters cmdParams =\n+                CommandParametersAdapter.createGenerateShrCommandParameters(\n+                        mPublicClientConfiguration,\n+                        mPublicClientConfiguration.getOAuth2TokenCache(),\n+                        ((Account) account).getHomeAccountId(), // TODO Cleanup?\n+                        popParameters\n+                );\n+        final GenerateShrCommand generateShrCommand = new GenerateShrCommand(\n+                cmdParams,\n+                MSALControllerFactory.getAllControllers(\n+                        mPublicClientConfiguration.getAppContext(),\n+                        mPublicClientConfiguration.getDefaultAuthority(),\n+                        mPublicClientConfiguration\n+                ),\n+                new CommandCallback<GenerateShrResult, BaseException>() {\n+                    @Override\n+                    public void onCancel() {\n+                        // Not cancellable\n+                    }\n+\n+                    @Override\n+                    public void onError(BaseException error) {\n+                        future.setResult(\n+                                new AsyncResult<GenerateShrResult>(\n+                                        null,\n+                                        baseExceptionToMsalException(error)\n+                                )\n+                        );\n+                    }\n+\n+                    @Override\n+                    public void onTaskCompleted(GenerateShrResult generateShrResult) {\n+                        future.setResult(new AsyncResult<>(generateShrResult, null));\n+                    }\n+                },\n+                \"\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUwMTY3OQ=="}, "originalCommit": {"oid": "3c4e69e3f09c7c4c440d7a47e7c5f221b098cdbb"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTg2NDAyOnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMzoyMzozOVrOHue1ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwMDowMTowNFrOHvBBNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUwMTgyNw==", "bodyText": "remove todo, this is fine", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1208#discussion_r518501827", "createdAt": "2020-11-06T03:23:39Z", "author": {"login": "iambmelt"}, "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "diffHunk": "@@ -1263,6 +1266,123 @@ public boolean isSharedDevice() {\n         return mPublicClientConfiguration.getIsSharedDevice();\n     }\n \n+    @Override\n+    public String generateSignedHttpRequest(@NonNull final IAccount account,\n+                                            @NonNull final PoPAuthenticationScheme popParameters) throws MsalException {\n+        final ResultFuture<AsyncResult<GenerateShrResult>> future = new ResultFuture<>();\n+\n+        final GenerateShrCommandParameters cmdParams =\n+                CommandParametersAdapter.createGenerateShrCommandParameters(\n+                        mPublicClientConfiguration,\n+                        mPublicClientConfiguration.getOAuth2TokenCache(),\n+                        ((Account) account).getHomeAccountId(), // TODO Cleanup?\n+                        popParameters\n+                );\n+        final GenerateShrCommand generateShrCommand = new GenerateShrCommand(\n+                cmdParams,\n+                MSALControllerFactory.getAllControllers(\n+                        mPublicClientConfiguration.getAppContext(),\n+                        mPublicClientConfiguration.getDefaultAuthority(),\n+                        mPublicClientConfiguration\n+                ),\n+                new CommandCallback<GenerateShrResult, BaseException>() {\n+                    @Override\n+                    public void onCancel() {\n+                        // Not cancellable\n+                    }\n+\n+                    @Override\n+                    public void onError(BaseException error) {\n+                        future.setResult(\n+                                new AsyncResult<GenerateShrResult>(\n+                                        null,\n+                                        baseExceptionToMsalException(error)\n+                                )\n+                        );\n+                    }\n+\n+                    @Override\n+                    public void onTaskCompleted(GenerateShrResult generateShrResult) {\n+                        future.setResult(new AsyncResult<>(generateShrResult, null));\n+                    }\n+                },\n+                \"\"\n+        );\n+\n+        // Execute this command silently...\n+        CommandDispatcher.submitSilent(generateShrCommand);\n+\n+        try {\n+            final AsyncResult<GenerateShrResult> asyncResult = future.get();\n+\n+            if (asyncResult.getSuccess()) {\n+                return asyncResult.getResult().getShr();\n+            } else {\n+                throw asyncResult.getException();\n+            }\n+        } catch (ExecutionException | InterruptedException e) {\n+            throw new MsalClientException(\n+                    UNKNOWN_ERROR,\n+                    \"Unexpected error while generating SHR.\",\n+                    e\n+            );\n+        }\n+    }\n+\n+    @Override\n+    public void generateSignedHttpRequest(@NonNull final IAccount account,\n+                                          @NonNull final PoPAuthenticationScheme popParameters,\n+                                          @NonNull final SignedHttpRequestRequestCallback callback) {\n+        final GenerateShrCommandParameters cmdParams =\n+                CommandParametersAdapter.createGenerateShrCommandParameters(\n+                        mPublicClientConfiguration,\n+                        mPublicClientConfiguration.getOAuth2TokenCache(),\n+                        ((Account) account).getHomeAccountId(), // TODO Cleanup?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c4e69e3f09c7c4c440d7a47e7c5f221b098cdbb"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA2MTgxNQ==", "bodyText": "7941303", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1208#discussion_r519061815", "createdAt": "2020-11-07T00:01:04Z", "author": {"login": "iambmelt"}, "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "diffHunk": "@@ -1263,6 +1266,123 @@ public boolean isSharedDevice() {\n         return mPublicClientConfiguration.getIsSharedDevice();\n     }\n \n+    @Override\n+    public String generateSignedHttpRequest(@NonNull final IAccount account,\n+                                            @NonNull final PoPAuthenticationScheme popParameters) throws MsalException {\n+        final ResultFuture<AsyncResult<GenerateShrResult>> future = new ResultFuture<>();\n+\n+        final GenerateShrCommandParameters cmdParams =\n+                CommandParametersAdapter.createGenerateShrCommandParameters(\n+                        mPublicClientConfiguration,\n+                        mPublicClientConfiguration.getOAuth2TokenCache(),\n+                        ((Account) account).getHomeAccountId(), // TODO Cleanup?\n+                        popParameters\n+                );\n+        final GenerateShrCommand generateShrCommand = new GenerateShrCommand(\n+                cmdParams,\n+                MSALControllerFactory.getAllControllers(\n+                        mPublicClientConfiguration.getAppContext(),\n+                        mPublicClientConfiguration.getDefaultAuthority(),\n+                        mPublicClientConfiguration\n+                ),\n+                new CommandCallback<GenerateShrResult, BaseException>() {\n+                    @Override\n+                    public void onCancel() {\n+                        // Not cancellable\n+                    }\n+\n+                    @Override\n+                    public void onError(BaseException error) {\n+                        future.setResult(\n+                                new AsyncResult<GenerateShrResult>(\n+                                        null,\n+                                        baseExceptionToMsalException(error)\n+                                )\n+                        );\n+                    }\n+\n+                    @Override\n+                    public void onTaskCompleted(GenerateShrResult generateShrResult) {\n+                        future.setResult(new AsyncResult<>(generateShrResult, null));\n+                    }\n+                },\n+                \"\"\n+        );\n+\n+        // Execute this command silently...\n+        CommandDispatcher.submitSilent(generateShrCommand);\n+\n+        try {\n+            final AsyncResult<GenerateShrResult> asyncResult = future.get();\n+\n+            if (asyncResult.getSuccess()) {\n+                return asyncResult.getResult().getShr();\n+            } else {\n+                throw asyncResult.getException();\n+            }\n+        } catch (ExecutionException | InterruptedException e) {\n+            throw new MsalClientException(\n+                    UNKNOWN_ERROR,\n+                    \"Unexpected error while generating SHR.\",\n+                    e\n+            );\n+        }\n+    }\n+\n+    @Override\n+    public void generateSignedHttpRequest(@NonNull final IAccount account,\n+                                          @NonNull final PoPAuthenticationScheme popParameters,\n+                                          @NonNull final SignedHttpRequestRequestCallback callback) {\n+        final GenerateShrCommandParameters cmdParams =\n+                CommandParametersAdapter.createGenerateShrCommandParameters(\n+                        mPublicClientConfiguration,\n+                        mPublicClientConfiguration.getOAuth2TokenCache(),\n+                        ((Account) account).getHomeAccountId(), // TODO Cleanup?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUwMTgyNw=="}, "originalCommit": {"oid": "3c4e69e3f09c7c4c440d7a47e7c5f221b098cdbb"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTg2NDM3OnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMzoyMzo0OVrOHue18w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwMDoxNjowNFrOHvBNmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUwMTg3NQ==", "bodyText": "final", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1208#discussion_r518501875", "createdAt": "2020-11-06T03:23:49Z", "author": {"login": "iambmelt"}, "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "diffHunk": "@@ -1263,6 +1266,123 @@ public boolean isSharedDevice() {\n         return mPublicClientConfiguration.getIsSharedDevice();\n     }\n \n+    @Override\n+    public String generateSignedHttpRequest(@NonNull final IAccount account,\n+                                            @NonNull final PoPAuthenticationScheme popParameters) throws MsalException {\n+        final ResultFuture<AsyncResult<GenerateShrResult>> future = new ResultFuture<>();\n+\n+        final GenerateShrCommandParameters cmdParams =\n+                CommandParametersAdapter.createGenerateShrCommandParameters(\n+                        mPublicClientConfiguration,\n+                        mPublicClientConfiguration.getOAuth2TokenCache(),\n+                        ((Account) account).getHomeAccountId(), // TODO Cleanup?\n+                        popParameters\n+                );\n+        final GenerateShrCommand generateShrCommand = new GenerateShrCommand(\n+                cmdParams,\n+                MSALControllerFactory.getAllControllers(\n+                        mPublicClientConfiguration.getAppContext(),\n+                        mPublicClientConfiguration.getDefaultAuthority(),\n+                        mPublicClientConfiguration\n+                ),\n+                new CommandCallback<GenerateShrResult, BaseException>() {\n+                    @Override\n+                    public void onCancel() {\n+                        // Not cancellable\n+                    }\n+\n+                    @Override\n+                    public void onError(BaseException error) {\n+                        future.setResult(\n+                                new AsyncResult<GenerateShrResult>(\n+                                        null,\n+                                        baseExceptionToMsalException(error)\n+                                )\n+                        );\n+                    }\n+\n+                    @Override\n+                    public void onTaskCompleted(GenerateShrResult generateShrResult) {\n+                        future.setResult(new AsyncResult<>(generateShrResult, null));\n+                    }\n+                },\n+                \"\"\n+        );\n+\n+        // Execute this command silently...\n+        CommandDispatcher.submitSilent(generateShrCommand);\n+\n+        try {\n+            final AsyncResult<GenerateShrResult> asyncResult = future.get();\n+\n+            if (asyncResult.getSuccess()) {\n+                return asyncResult.getResult().getShr();\n+            } else {\n+                throw asyncResult.getException();\n+            }\n+        } catch (ExecutionException | InterruptedException e) {\n+            throw new MsalClientException(\n+                    UNKNOWN_ERROR,\n+                    \"Unexpected error while generating SHR.\",\n+                    e\n+            );\n+        }\n+    }\n+\n+    @Override\n+    public void generateSignedHttpRequest(@NonNull final IAccount account,\n+                                          @NonNull final PoPAuthenticationScheme popParameters,\n+                                          @NonNull final SignedHttpRequestRequestCallback callback) {\n+        final GenerateShrCommandParameters cmdParams =\n+                CommandParametersAdapter.createGenerateShrCommandParameters(\n+                        mPublicClientConfiguration,\n+                        mPublicClientConfiguration.getOAuth2TokenCache(),\n+                        ((Account) account).getHomeAccountId(), // TODO Cleanup?\n+                        popParameters\n+                );\n+        try {\n+            final GenerateShrCommand generateShrCommand = new GenerateShrCommand(\n+                    cmdParams,\n+                    MSALControllerFactory.getAllControllers(\n+                            mPublicClientConfiguration.getAppContext(),\n+                            mPublicClientConfiguration.getDefaultAuthority(),\n+                            mPublicClientConfiguration\n+                    ),\n+                    new CommandCallback<GenerateShrResult, BaseException>() {\n+                        @Override\n+                        public void onCancel() {\n+                            // Not cancellable\n+                        }\n+\n+                        @Override\n+                        public void onError(BaseException error) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c4e69e3f09c7c4c440d7a47e7c5f221b098cdbb"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA2NDk4Nw==", "bodyText": "08cb11b", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1208#discussion_r519064987", "createdAt": "2020-11-07T00:16:04Z", "author": {"login": "iambmelt"}, "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "diffHunk": "@@ -1263,6 +1266,123 @@ public boolean isSharedDevice() {\n         return mPublicClientConfiguration.getIsSharedDevice();\n     }\n \n+    @Override\n+    public String generateSignedHttpRequest(@NonNull final IAccount account,\n+                                            @NonNull final PoPAuthenticationScheme popParameters) throws MsalException {\n+        final ResultFuture<AsyncResult<GenerateShrResult>> future = new ResultFuture<>();\n+\n+        final GenerateShrCommandParameters cmdParams =\n+                CommandParametersAdapter.createGenerateShrCommandParameters(\n+                        mPublicClientConfiguration,\n+                        mPublicClientConfiguration.getOAuth2TokenCache(),\n+                        ((Account) account).getHomeAccountId(), // TODO Cleanup?\n+                        popParameters\n+                );\n+        final GenerateShrCommand generateShrCommand = new GenerateShrCommand(\n+                cmdParams,\n+                MSALControllerFactory.getAllControllers(\n+                        mPublicClientConfiguration.getAppContext(),\n+                        mPublicClientConfiguration.getDefaultAuthority(),\n+                        mPublicClientConfiguration\n+                ),\n+                new CommandCallback<GenerateShrResult, BaseException>() {\n+                    @Override\n+                    public void onCancel() {\n+                        // Not cancellable\n+                    }\n+\n+                    @Override\n+                    public void onError(BaseException error) {\n+                        future.setResult(\n+                                new AsyncResult<GenerateShrResult>(\n+                                        null,\n+                                        baseExceptionToMsalException(error)\n+                                )\n+                        );\n+                    }\n+\n+                    @Override\n+                    public void onTaskCompleted(GenerateShrResult generateShrResult) {\n+                        future.setResult(new AsyncResult<>(generateShrResult, null));\n+                    }\n+                },\n+                \"\"\n+        );\n+\n+        // Execute this command silently...\n+        CommandDispatcher.submitSilent(generateShrCommand);\n+\n+        try {\n+            final AsyncResult<GenerateShrResult> asyncResult = future.get();\n+\n+            if (asyncResult.getSuccess()) {\n+                return asyncResult.getResult().getShr();\n+            } else {\n+                throw asyncResult.getException();\n+            }\n+        } catch (ExecutionException | InterruptedException e) {\n+            throw new MsalClientException(\n+                    UNKNOWN_ERROR,\n+                    \"Unexpected error while generating SHR.\",\n+                    e\n+            );\n+        }\n+    }\n+\n+    @Override\n+    public void generateSignedHttpRequest(@NonNull final IAccount account,\n+                                          @NonNull final PoPAuthenticationScheme popParameters,\n+                                          @NonNull final SignedHttpRequestRequestCallback callback) {\n+        final GenerateShrCommandParameters cmdParams =\n+                CommandParametersAdapter.createGenerateShrCommandParameters(\n+                        mPublicClientConfiguration,\n+                        mPublicClientConfiguration.getOAuth2TokenCache(),\n+                        ((Account) account).getHomeAccountId(), // TODO Cleanup?\n+                        popParameters\n+                );\n+        try {\n+            final GenerateShrCommand generateShrCommand = new GenerateShrCommand(\n+                    cmdParams,\n+                    MSALControllerFactory.getAllControllers(\n+                            mPublicClientConfiguration.getAppContext(),\n+                            mPublicClientConfiguration.getDefaultAuthority(),\n+                            mPublicClientConfiguration\n+                    ),\n+                    new CommandCallback<GenerateShrResult, BaseException>() {\n+                        @Override\n+                        public void onCancel() {\n+                            // Not cancellable\n+                        }\n+\n+                        @Override\n+                        public void onError(BaseException error) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUwMTg3NQ=="}, "originalCommit": {"oid": "3c4e69e3f09c7c4c440d7a47e7c5f221b098cdbb"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTg2NDU0OnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMzoyMzo1NFrOHue2Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwMDoxNjowOVrOHvBNqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUwMTg5NA==", "bodyText": "final", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1208#discussion_r518501894", "createdAt": "2020-11-06T03:23:54Z", "author": {"login": "iambmelt"}, "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "diffHunk": "@@ -1263,6 +1266,123 @@ public boolean isSharedDevice() {\n         return mPublicClientConfiguration.getIsSharedDevice();\n     }\n \n+    @Override\n+    public String generateSignedHttpRequest(@NonNull final IAccount account,\n+                                            @NonNull final PoPAuthenticationScheme popParameters) throws MsalException {\n+        final ResultFuture<AsyncResult<GenerateShrResult>> future = new ResultFuture<>();\n+\n+        final GenerateShrCommandParameters cmdParams =\n+                CommandParametersAdapter.createGenerateShrCommandParameters(\n+                        mPublicClientConfiguration,\n+                        mPublicClientConfiguration.getOAuth2TokenCache(),\n+                        ((Account) account).getHomeAccountId(), // TODO Cleanup?\n+                        popParameters\n+                );\n+        final GenerateShrCommand generateShrCommand = new GenerateShrCommand(\n+                cmdParams,\n+                MSALControllerFactory.getAllControllers(\n+                        mPublicClientConfiguration.getAppContext(),\n+                        mPublicClientConfiguration.getDefaultAuthority(),\n+                        mPublicClientConfiguration\n+                ),\n+                new CommandCallback<GenerateShrResult, BaseException>() {\n+                    @Override\n+                    public void onCancel() {\n+                        // Not cancellable\n+                    }\n+\n+                    @Override\n+                    public void onError(BaseException error) {\n+                        future.setResult(\n+                                new AsyncResult<GenerateShrResult>(\n+                                        null,\n+                                        baseExceptionToMsalException(error)\n+                                )\n+                        );\n+                    }\n+\n+                    @Override\n+                    public void onTaskCompleted(GenerateShrResult generateShrResult) {\n+                        future.setResult(new AsyncResult<>(generateShrResult, null));\n+                    }\n+                },\n+                \"\"\n+        );\n+\n+        // Execute this command silently...\n+        CommandDispatcher.submitSilent(generateShrCommand);\n+\n+        try {\n+            final AsyncResult<GenerateShrResult> asyncResult = future.get();\n+\n+            if (asyncResult.getSuccess()) {\n+                return asyncResult.getResult().getShr();\n+            } else {\n+                throw asyncResult.getException();\n+            }\n+        } catch (ExecutionException | InterruptedException e) {\n+            throw new MsalClientException(\n+                    UNKNOWN_ERROR,\n+                    \"Unexpected error while generating SHR.\",\n+                    e\n+            );\n+        }\n+    }\n+\n+    @Override\n+    public void generateSignedHttpRequest(@NonNull final IAccount account,\n+                                          @NonNull final PoPAuthenticationScheme popParameters,\n+                                          @NonNull final SignedHttpRequestRequestCallback callback) {\n+        final GenerateShrCommandParameters cmdParams =\n+                CommandParametersAdapter.createGenerateShrCommandParameters(\n+                        mPublicClientConfiguration,\n+                        mPublicClientConfiguration.getOAuth2TokenCache(),\n+                        ((Account) account).getHomeAccountId(), // TODO Cleanup?\n+                        popParameters\n+                );\n+        try {\n+            final GenerateShrCommand generateShrCommand = new GenerateShrCommand(\n+                    cmdParams,\n+                    MSALControllerFactory.getAllControllers(\n+                            mPublicClientConfiguration.getAppContext(),\n+                            mPublicClientConfiguration.getDefaultAuthority(),\n+                            mPublicClientConfiguration\n+                    ),\n+                    new CommandCallback<GenerateShrResult, BaseException>() {\n+                        @Override\n+                        public void onCancel() {\n+                            // Not cancellable\n+                        }\n+\n+                        @Override\n+                        public void onError(BaseException error) {\n+                            callback.onError(baseExceptionToMsalException(error));\n+                        }\n+\n+                        @Override\n+                        public void onTaskCompleted(GenerateShrResult generateShrResult) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c4e69e3f09c7c4c440d7a47e7c5f221b098cdbb"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA2NTAwMA==", "bodyText": "08cb11b", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1208#discussion_r519065000", "createdAt": "2020-11-07T00:16:09Z", "author": {"login": "iambmelt"}, "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "diffHunk": "@@ -1263,6 +1266,123 @@ public boolean isSharedDevice() {\n         return mPublicClientConfiguration.getIsSharedDevice();\n     }\n \n+    @Override\n+    public String generateSignedHttpRequest(@NonNull final IAccount account,\n+                                            @NonNull final PoPAuthenticationScheme popParameters) throws MsalException {\n+        final ResultFuture<AsyncResult<GenerateShrResult>> future = new ResultFuture<>();\n+\n+        final GenerateShrCommandParameters cmdParams =\n+                CommandParametersAdapter.createGenerateShrCommandParameters(\n+                        mPublicClientConfiguration,\n+                        mPublicClientConfiguration.getOAuth2TokenCache(),\n+                        ((Account) account).getHomeAccountId(), // TODO Cleanup?\n+                        popParameters\n+                );\n+        final GenerateShrCommand generateShrCommand = new GenerateShrCommand(\n+                cmdParams,\n+                MSALControllerFactory.getAllControllers(\n+                        mPublicClientConfiguration.getAppContext(),\n+                        mPublicClientConfiguration.getDefaultAuthority(),\n+                        mPublicClientConfiguration\n+                ),\n+                new CommandCallback<GenerateShrResult, BaseException>() {\n+                    @Override\n+                    public void onCancel() {\n+                        // Not cancellable\n+                    }\n+\n+                    @Override\n+                    public void onError(BaseException error) {\n+                        future.setResult(\n+                                new AsyncResult<GenerateShrResult>(\n+                                        null,\n+                                        baseExceptionToMsalException(error)\n+                                )\n+                        );\n+                    }\n+\n+                    @Override\n+                    public void onTaskCompleted(GenerateShrResult generateShrResult) {\n+                        future.setResult(new AsyncResult<>(generateShrResult, null));\n+                    }\n+                },\n+                \"\"\n+        );\n+\n+        // Execute this command silently...\n+        CommandDispatcher.submitSilent(generateShrCommand);\n+\n+        try {\n+            final AsyncResult<GenerateShrResult> asyncResult = future.get();\n+\n+            if (asyncResult.getSuccess()) {\n+                return asyncResult.getResult().getShr();\n+            } else {\n+                throw asyncResult.getException();\n+            }\n+        } catch (ExecutionException | InterruptedException e) {\n+            throw new MsalClientException(\n+                    UNKNOWN_ERROR,\n+                    \"Unexpected error while generating SHR.\",\n+                    e\n+            );\n+        }\n+    }\n+\n+    @Override\n+    public void generateSignedHttpRequest(@NonNull final IAccount account,\n+                                          @NonNull final PoPAuthenticationScheme popParameters,\n+                                          @NonNull final SignedHttpRequestRequestCallback callback) {\n+        final GenerateShrCommandParameters cmdParams =\n+                CommandParametersAdapter.createGenerateShrCommandParameters(\n+                        mPublicClientConfiguration,\n+                        mPublicClientConfiguration.getOAuth2TokenCache(),\n+                        ((Account) account).getHomeAccountId(), // TODO Cleanup?\n+                        popParameters\n+                );\n+        try {\n+            final GenerateShrCommand generateShrCommand = new GenerateShrCommand(\n+                    cmdParams,\n+                    MSALControllerFactory.getAllControllers(\n+                            mPublicClientConfiguration.getAppContext(),\n+                            mPublicClientConfiguration.getDefaultAuthority(),\n+                            mPublicClientConfiguration\n+                    ),\n+                    new CommandCallback<GenerateShrResult, BaseException>() {\n+                        @Override\n+                        public void onCancel() {\n+                            // Not cancellable\n+                        }\n+\n+                        @Override\n+                        public void onError(BaseException error) {\n+                            callback.onError(baseExceptionToMsalException(error));\n+                        }\n+\n+                        @Override\n+                        public void onTaskCompleted(GenerateShrResult generateShrResult) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUwMTg5NA=="}, "originalCommit": {"oid": "3c4e69e3f09c7c4c440d7a47e7c5f221b098cdbb"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTg2NDk4OnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/internal/CommandParametersAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMzoyNDoxMlrOHue2RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwMDoyNjozM1rOHvBVow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUwMTk1Ng==", "bodyText": "javadoc", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1208#discussion_r518501956", "createdAt": "2020-11-06T03:24:12Z", "author": {"login": "iambmelt"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/CommandParametersAdapter.java", "diffHunk": "@@ -405,4 +406,27 @@ private static OpenIdConnectPromptParameter getPromptParameter(@NonNull final Ac\n             return parameters.getPrompt().toOpenIdConnectPromptParameter();\n         }\n     }\n+\n+    public static GenerateShrCommandParameters createGenerateShrCommandParameters(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c4e69e3f09c7c4c440d7a47e7c5f221b098cdbb"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA2NzA0Mw==", "bodyText": "e1f276e", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1208#discussion_r519067043", "createdAt": "2020-11-07T00:26:33Z", "author": {"login": "iambmelt"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/CommandParametersAdapter.java", "diffHunk": "@@ -405,4 +406,27 @@ private static OpenIdConnectPromptParameter getPromptParameter(@NonNull final Ac\n             return parameters.getPrompt().toOpenIdConnectPromptParameter();\n         }\n     }\n+\n+    public static GenerateShrCommandParameters createGenerateShrCommandParameters(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUwMTk1Ng=="}, "originalCommit": {"oid": "3c4e69e3f09c7c4c440d7a47e7c5f221b098cdbb"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTg2NjkyOnYy", "diffSide": "RIGHT", "path": "testapps/testapp/src/main/java/com/microsoft/identity/client/testapp/SingleAccountModeWrapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMzoyNToxOFrOHue3Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwMDozMTo0NlrOHvBZog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUwMjIxNQ==", "bodyText": "Wire this up", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1208#discussion_r518502215", "createdAt": "2020-11-06T03:25:18Z", "author": {"login": "iambmelt"}, "path": "testapps/testapp/src/main/java/com/microsoft/identity/client/testapp/SingleAccountModeWrapper.java", "diffHunk": "@@ -129,4 +130,12 @@ void acquireTokenWithDeviceCodeFlowInternal(@NonNull String[] scopes,\n                                                 @NonNull final IPublicClientApplication.DeviceCodeFlowCallback callback) {\n         mApp.acquireTokenWithDeviceCode(scopes, callback);\n     }\n+\n+    @Override\n+    public void generateSignedHttpRequestInternal(@NonNull final IAccount account,\n+                                                  @NonNull final PoPAuthenticationScheme params,\n+                                                  @NonNull final INotifyOperationResultCallback<String> generateShrCallback) {\n+        // TODO Make async!\n+        generateShrCallback.onSuccess(\"Result!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c4e69e3f09c7c4c440d7a47e7c5f221b098cdbb"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA2ODA2Ng==", "bodyText": "5cab112", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1208#discussion_r519068066", "createdAt": "2020-11-07T00:31:46Z", "author": {"login": "iambmelt"}, "path": "testapps/testapp/src/main/java/com/microsoft/identity/client/testapp/SingleAccountModeWrapper.java", "diffHunk": "@@ -129,4 +130,12 @@ void acquireTokenWithDeviceCodeFlowInternal(@NonNull String[] scopes,\n                                                 @NonNull final IPublicClientApplication.DeviceCodeFlowCallback callback) {\n         mApp.acquireTokenWithDeviceCode(scopes, callback);\n     }\n+\n+    @Override\n+    public void generateSignedHttpRequestInternal(@NonNull final IAccount account,\n+                                                  @NonNull final PoPAuthenticationScheme params,\n+                                                  @NonNull final INotifyOperationResultCallback<String> generateShrCallback) {\n+        // TODO Make async!\n+        generateShrCallback.onSuccess(\"Result!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUwMjIxNQ=="}, "originalCommit": {"oid": "3c4e69e3f09c7c4c440d7a47e7c5f221b098cdbb"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDEwMDI2OnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODo1OToyNVrOHv9Bvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwMTo0NDoxM1rOHwIe8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA0NDk5MQ==", "bodyText": "Use value 1100", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1208#discussion_r520044991", "createdAt": "2020-11-09T18:59:25Z", "author": {"login": "iambmelt"}, "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "diffHunk": "@@ -1263,6 +1267,130 @@ public boolean isSharedDevice() {\n         return mPublicClientConfiguration.getIsSharedDevice();\n     }\n \n+    @Override\n+    public String generateSignedHttpRequest(@NonNull final IAccount account,\n+                                            @NonNull final PoPAuthenticationScheme popParameters) throws MsalException {\n+        final ResultFuture<AsyncResult<GenerateShrResult>> future = new ResultFuture<>();\n+\n+        final GenerateShrCommandParameters cmdParams =\n+                CommandParametersAdapter.createGenerateShrCommandParameters(\n+                        mPublicClientConfiguration,\n+                        mPublicClientConfiguration.getOAuth2TokenCache(),\n+                        ((Account) account).getHomeAccountId(),\n+                        popParameters\n+                );\n+        final GenerateShrCommand generateShrCommand = new GenerateShrCommand(\n+                cmdParams,\n+                MSALControllerFactory.getAllControllers(\n+                        mPublicClientConfiguration.getAppContext(),\n+                        mPublicClientConfiguration.getDefaultAuthority(),\n+                        mPublicClientConfiguration\n+                ),\n+                new CommandCallback<GenerateShrResult, BaseException>() {\n+                    @Override\n+                    public void onCancel() {\n+                        // Not cancellable\n+                    }\n+\n+                    @Override\n+                    public void onError(@NonNull final BaseException error) {\n+                        future.setResult(\n+                                new AsyncResult<GenerateShrResult>(\n+                                        null,\n+                                        baseExceptionToMsalException(error)\n+                                )\n+                        );\n+                    }\n+\n+                    @Override\n+                    public void onTaskCompleted(@NonNull final GenerateShrResult generateShrResult) {\n+                        future.setResult(new AsyncResult<>(generateShrResult, null));\n+                    }\n+                },\n+                \"\" // Public API ID", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2deaf8fdf18d55e64b716647184e6df66782a4f3"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIzMjY4OQ==", "bodyText": "9451ca5", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1208#discussion_r520232689", "createdAt": "2020-11-10T01:44:13Z", "author": {"login": "iambmelt"}, "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "diffHunk": "@@ -1263,6 +1267,130 @@ public boolean isSharedDevice() {\n         return mPublicClientConfiguration.getIsSharedDevice();\n     }\n \n+    @Override\n+    public String generateSignedHttpRequest(@NonNull final IAccount account,\n+                                            @NonNull final PoPAuthenticationScheme popParameters) throws MsalException {\n+        final ResultFuture<AsyncResult<GenerateShrResult>> future = new ResultFuture<>();\n+\n+        final GenerateShrCommandParameters cmdParams =\n+                CommandParametersAdapter.createGenerateShrCommandParameters(\n+                        mPublicClientConfiguration,\n+                        mPublicClientConfiguration.getOAuth2TokenCache(),\n+                        ((Account) account).getHomeAccountId(),\n+                        popParameters\n+                );\n+        final GenerateShrCommand generateShrCommand = new GenerateShrCommand(\n+                cmdParams,\n+                MSALControllerFactory.getAllControllers(\n+                        mPublicClientConfiguration.getAppContext(),\n+                        mPublicClientConfiguration.getDefaultAuthority(),\n+                        mPublicClientConfiguration\n+                ),\n+                new CommandCallback<GenerateShrResult, BaseException>() {\n+                    @Override\n+                    public void onCancel() {\n+                        // Not cancellable\n+                    }\n+\n+                    @Override\n+                    public void onError(@NonNull final BaseException error) {\n+                        future.setResult(\n+                                new AsyncResult<GenerateShrResult>(\n+                                        null,\n+                                        baseExceptionToMsalException(error)\n+                                )\n+                        );\n+                    }\n+\n+                    @Override\n+                    public void onTaskCompleted(@NonNull final GenerateShrResult generateShrResult) {\n+                        future.setResult(new AsyncResult<>(generateShrResult, null));\n+                    }\n+                },\n+                \"\" // Public API ID", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA0NDk5MQ=="}, "originalCommit": {"oid": "2deaf8fdf18d55e64b716647184e6df66782a4f3"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDEwMTMzOnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODo1OTo0MVrOHv9CZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwMTo0NDoxN1rOHwIe_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA0NTE1OA==", "bodyText": "Use value: 1101", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1208#discussion_r520045158", "createdAt": "2020-11-09T18:59:41Z", "author": {"login": "iambmelt"}, "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "diffHunk": "@@ -1263,6 +1267,130 @@ public boolean isSharedDevice() {\n         return mPublicClientConfiguration.getIsSharedDevice();\n     }\n \n+    @Override\n+    public String generateSignedHttpRequest(@NonNull final IAccount account,\n+                                            @NonNull final PoPAuthenticationScheme popParameters) throws MsalException {\n+        final ResultFuture<AsyncResult<GenerateShrResult>> future = new ResultFuture<>();\n+\n+        final GenerateShrCommandParameters cmdParams =\n+                CommandParametersAdapter.createGenerateShrCommandParameters(\n+                        mPublicClientConfiguration,\n+                        mPublicClientConfiguration.getOAuth2TokenCache(),\n+                        ((Account) account).getHomeAccountId(),\n+                        popParameters\n+                );\n+        final GenerateShrCommand generateShrCommand = new GenerateShrCommand(\n+                cmdParams,\n+                MSALControllerFactory.getAllControllers(\n+                        mPublicClientConfiguration.getAppContext(),\n+                        mPublicClientConfiguration.getDefaultAuthority(),\n+                        mPublicClientConfiguration\n+                ),\n+                new CommandCallback<GenerateShrResult, BaseException>() {\n+                    @Override\n+                    public void onCancel() {\n+                        // Not cancellable\n+                    }\n+\n+                    @Override\n+                    public void onError(@NonNull final BaseException error) {\n+                        future.setResult(\n+                                new AsyncResult<GenerateShrResult>(\n+                                        null,\n+                                        baseExceptionToMsalException(error)\n+                                )\n+                        );\n+                    }\n+\n+                    @Override\n+                    public void onTaskCompleted(@NonNull final GenerateShrResult generateShrResult) {\n+                        future.setResult(new AsyncResult<>(generateShrResult, null));\n+                    }\n+                },\n+                \"\" // Public API ID\n+        );\n+\n+        // Execute this command silently...\n+        CommandDispatcher.submitSilent(generateShrCommand);\n+\n+        try {\n+            final AsyncResult<GenerateShrResult> asyncResult = future.get();\n+\n+            if (asyncResult.getSuccess()) {\n+                return asyncResult.getResult().getShr();\n+            } else {\n+                throw asyncResult.getException();\n+            }\n+        } catch (ExecutionException | InterruptedException e) {\n+            throw new MsalClientException(\n+                    UNKNOWN_ERROR,\n+                    \"Unexpected error while generating SHR.\",\n+                    e\n+            );\n+        }\n+    }\n+\n+    @Override\n+    public void generateSignedHttpRequest(@NonNull final IAccount account,\n+                                          @NonNull final PoPAuthenticationScheme popParameters,\n+                                          @NonNull final SignedHttpRequestRequestCallback callback) {\n+        final GenerateShrCommandParameters cmdParams =\n+                CommandParametersAdapter.createGenerateShrCommandParameters(\n+                        mPublicClientConfiguration,\n+                        mPublicClientConfiguration.getOAuth2TokenCache(),\n+                        ((Account) account).getHomeAccountId(),\n+                        popParameters\n+                );\n+        try {\n+            final GenerateShrCommand generateShrCommand = new GenerateShrCommand(\n+                    cmdParams,\n+                    MSALControllerFactory.getAllControllers(\n+                            mPublicClientConfiguration.getAppContext(),\n+                            mPublicClientConfiguration.getDefaultAuthority(),\n+                            mPublicClientConfiguration\n+                    ),\n+                    new CommandCallback<GenerateShrResult, BaseException>() {\n+                        @Override\n+                        public void onCancel() {\n+                            // Not cancellable\n+                        }\n+\n+                        @Override\n+                        public void onError(@NonNull final BaseException error) {\n+                            callback.onError(baseExceptionToMsalException(error));\n+                        }\n+\n+                        @Override\n+                        public void onTaskCompleted(@NonNull final GenerateShrResult generateShrResult) {\n+                            callback.onTaskCompleted(generateShrResult.getShr());\n+                        }\n+                    },\n+                    \"\" // Public API ID", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2deaf8fdf18d55e64b716647184e6df66782a4f3"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIzMjcwMw==", "bodyText": "9451ca5", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1208#discussion_r520232703", "createdAt": "2020-11-10T01:44:17Z", "author": {"login": "iambmelt"}, "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "diffHunk": "@@ -1263,6 +1267,130 @@ public boolean isSharedDevice() {\n         return mPublicClientConfiguration.getIsSharedDevice();\n     }\n \n+    @Override\n+    public String generateSignedHttpRequest(@NonNull final IAccount account,\n+                                            @NonNull final PoPAuthenticationScheme popParameters) throws MsalException {\n+        final ResultFuture<AsyncResult<GenerateShrResult>> future = new ResultFuture<>();\n+\n+        final GenerateShrCommandParameters cmdParams =\n+                CommandParametersAdapter.createGenerateShrCommandParameters(\n+                        mPublicClientConfiguration,\n+                        mPublicClientConfiguration.getOAuth2TokenCache(),\n+                        ((Account) account).getHomeAccountId(),\n+                        popParameters\n+                );\n+        final GenerateShrCommand generateShrCommand = new GenerateShrCommand(\n+                cmdParams,\n+                MSALControllerFactory.getAllControllers(\n+                        mPublicClientConfiguration.getAppContext(),\n+                        mPublicClientConfiguration.getDefaultAuthority(),\n+                        mPublicClientConfiguration\n+                ),\n+                new CommandCallback<GenerateShrResult, BaseException>() {\n+                    @Override\n+                    public void onCancel() {\n+                        // Not cancellable\n+                    }\n+\n+                    @Override\n+                    public void onError(@NonNull final BaseException error) {\n+                        future.setResult(\n+                                new AsyncResult<GenerateShrResult>(\n+                                        null,\n+                                        baseExceptionToMsalException(error)\n+                                )\n+                        );\n+                    }\n+\n+                    @Override\n+                    public void onTaskCompleted(@NonNull final GenerateShrResult generateShrResult) {\n+                        future.setResult(new AsyncResult<>(generateShrResult, null));\n+                    }\n+                },\n+                \"\" // Public API ID\n+        );\n+\n+        // Execute this command silently...\n+        CommandDispatcher.submitSilent(generateShrCommand);\n+\n+        try {\n+            final AsyncResult<GenerateShrResult> asyncResult = future.get();\n+\n+            if (asyncResult.getSuccess()) {\n+                return asyncResult.getResult().getShr();\n+            } else {\n+                throw asyncResult.getException();\n+            }\n+        } catch (ExecutionException | InterruptedException e) {\n+            throw new MsalClientException(\n+                    UNKNOWN_ERROR,\n+                    \"Unexpected error while generating SHR.\",\n+                    e\n+            );\n+        }\n+    }\n+\n+    @Override\n+    public void generateSignedHttpRequest(@NonNull final IAccount account,\n+                                          @NonNull final PoPAuthenticationScheme popParameters,\n+                                          @NonNull final SignedHttpRequestRequestCallback callback) {\n+        final GenerateShrCommandParameters cmdParams =\n+                CommandParametersAdapter.createGenerateShrCommandParameters(\n+                        mPublicClientConfiguration,\n+                        mPublicClientConfiguration.getOAuth2TokenCache(),\n+                        ((Account) account).getHomeAccountId(),\n+                        popParameters\n+                );\n+        try {\n+            final GenerateShrCommand generateShrCommand = new GenerateShrCommand(\n+                    cmdParams,\n+                    MSALControllerFactory.getAllControllers(\n+                            mPublicClientConfiguration.getAppContext(),\n+                            mPublicClientConfiguration.getDefaultAuthority(),\n+                            mPublicClientConfiguration\n+                    ),\n+                    new CommandCallback<GenerateShrResult, BaseException>() {\n+                        @Override\n+                        public void onCancel() {\n+                            // Not cancellable\n+                        }\n+\n+                        @Override\n+                        public void onError(@NonNull final BaseException error) {\n+                            callback.onError(baseExceptionToMsalException(error));\n+                        }\n+\n+                        @Override\n+                        public void onTaskCompleted(@NonNull final GenerateShrResult generateShrResult) {\n+                            callback.onTaskCompleted(generateShrResult.getShr());\n+                        }\n+                    },\n+                    \"\" // Public API ID", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA0NTE1OA=="}, "originalCommit": {"oid": "2deaf8fdf18d55e64b716647184e6df66782a4f3"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NjgxMDYwOnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/PoPAuthenticationScheme.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNDoxODoyM1rOHw9kLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMzo0MDoyMlrOHxidJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEwMjM4MA==", "bodyText": "return type", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1208#discussion_r521102380", "createdAt": "2020-11-11T04:18:23Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/PoPAuthenticationScheme.java", "diffHunk": "@@ -98,14 +107,28 @@ public Builder withNonce(@Nullable final String nonce) {\n             return this;\n         }\n \n+        /**\n+         * Sets the client_claims to be embedded in the resulting SHR.\n+         * <p>\n+         * Important: Use of this API requires setting the minimum_required_broker_protocol_version to\n+         * \"6.0\" or higher.\n+         *\n+         * @param clientClaims\n+         * @return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2b8e46e4e7c2824cbf6124975e1d90b3b91892b"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTcwNjc5MA==", "bodyText": "448954f", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1208#discussion_r521706790", "createdAt": "2020-11-11T23:40:22Z", "author": {"login": "iambmelt"}, "path": "msal/src/main/java/com/microsoft/identity/client/PoPAuthenticationScheme.java", "diffHunk": "@@ -98,14 +107,28 @@ public Builder withNonce(@Nullable final String nonce) {\n             return this;\n         }\n \n+        /**\n+         * Sets the client_claims to be embedded in the resulting SHR.\n+         * <p>\n+         * Important: Use of this API requires setting the minimum_required_broker_protocol_version to\n+         * \"6.0\" or higher.\n+         *\n+         * @param clientClaims\n+         * @return", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEwMjM4MA=="}, "originalCommit": {"oid": "a2b8e46e4e7c2824cbf6124975e1d90b3b91892b"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NjgyMDI2OnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNDoyMzo0OVrOHw9pjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMjo0MDo1NVrOHxg6qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEwMzc1Ng==", "bodyText": "so basically the user needs to get a token? even though they don't want it", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1208#discussion_r521103756", "createdAt": "2020-11-11T04:23:49Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "diffHunk": "@@ -1263,6 +1267,130 @@ public boolean isSharedDevice() {\n         return mPublicClientConfiguration.getIsSharedDevice();\n     }\n \n+    @Override\n+    public String generateSignedHttpRequest(@NonNull final IAccount account,\n+                                            @NonNull final PoPAuthenticationScheme popParameters) throws MsalException {\n+        final ResultFuture<AsyncResult<GenerateShrResult>> future = new ResultFuture<>();\n+\n+        final GenerateShrCommandParameters cmdParams =\n+                CommandParametersAdapter.createGenerateShrCommandParameters(\n+                        mPublicClientConfiguration,\n+                        mPublicClientConfiguration.getOAuth2TokenCache(),\n+                        ((Account) account).getHomeAccountId(),\n+                        popParameters\n+                );\n+        final GenerateShrCommand generateShrCommand = new GenerateShrCommand(\n+                cmdParams,\n+                MSALControllerFactory.getAllControllers(\n+                        mPublicClientConfiguration.getAppContext(),\n+                        mPublicClientConfiguration.getDefaultAuthority(),\n+                        mPublicClientConfiguration\n+                ),\n+                new CommandCallback<GenerateShrResult, BaseException>() {\n+                    @Override\n+                    public void onCancel() {\n+                        // Not cancellable\n+                    }\n+\n+                    @Override\n+                    public void onError(@NonNull final BaseException error) {\n+                        future.setResult(\n+                                new AsyncResult<GenerateShrResult>(\n+                                        null,\n+                                        baseExceptionToMsalException(error)\n+                                )\n+                        );\n+                    }\n+\n+                    @Override\n+                    public void onTaskCompleted(@NonNull final GenerateShrResult generateShrResult) {\n+                        future.setResult(new AsyncResult<>(generateShrResult, null));\n+                    }\n+                },\n+                \"1100\" // Public API ID\n+        );\n+\n+        // Execute this command silently...\n+        CommandDispatcher.submitSilent(generateShrCommand);\n+\n+        try {\n+            final AsyncResult<GenerateShrResult> asyncResult = future.get();\n+\n+            if (asyncResult.getSuccess()) {\n+                return asyncResult.getResult().getShr();\n+            } else {\n+                throw asyncResult.getException();\n+            }\n+        } catch (ExecutionException | InterruptedException e) {\n+            throw new MsalClientException(\n+                    UNKNOWN_ERROR,\n+                    \"Unexpected error while generating SHR.\",\n+                    e\n+            );\n+        }\n+    }\n+\n+    @Override\n+    public void generateSignedHttpRequest(@NonNull final IAccount account,\n+                                          @NonNull final PoPAuthenticationScheme popParameters,\n+                                          @NonNull final SignedHttpRequestRequestCallback callback) {\n+        final GenerateShrCommandParameters cmdParams =\n+                CommandParametersAdapter.createGenerateShrCommandParameters(\n+                        mPublicClientConfiguration,\n+                        mPublicClientConfiguration.getOAuth2TokenCache(),\n+                        ((Account) account).getHomeAccountId(),\n+                        popParameters\n+                );\n+        try {\n+            final GenerateShrCommand generateShrCommand = new GenerateShrCommand(\n+                    cmdParams,\n+                    MSALControllerFactory.getAllControllers(\n+                            mPublicClientConfiguration.getAppContext(),\n+                            mPublicClientConfiguration.getDefaultAuthority(),\n+                            mPublicClientConfiguration\n+                    ),\n+                    new CommandCallback<GenerateShrResult, BaseException>() {\n+                        @Override\n+                        public void onCancel() {\n+                            // Not cancellable\n+                        }\n+\n+                        @Override\n+                        public void onError(@NonNull final BaseException error) {\n+                            callback.onError(baseExceptionToMsalException(error));\n+                        }\n+\n+                        @Override\n+                        public void onTaskCompleted(@NonNull final GenerateShrResult generateShrResult) {\n+                            callback.onTaskCompleted(generateShrResult.getShr());\n+                        }\n+                    },\n+                    \"1101\" // Public API ID\n+            );\n+\n+            // Execute this command silently...\n+            CommandDispatcher.submitSilent(generateShrCommand);\n+        } catch (final MsalClientException e) {\n+            final MsalClientException clientException = new MsalClientException(\n+                    UNKNOWN_ERROR,\n+                    \"Unexpected error while generating SHR.\",\n+                    e\n+            );\n+            callback.onError(clientException);\n+        }\n+    }\n+\n+    private MsalException baseExceptionToMsalException(@NonNull final BaseException exception) {\n+        if (GenerateShrResult.Errors.NO_ACCOUNT_FOUND.equalsIgnoreCase(exception.getErrorCode())) {\n+            return new MsalUiRequiredException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2b8e46e4e7c2824cbf6124975e1d90b3b91892b"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY4MTU3OQ==", "bodyText": "Yep. This is by design. The only way to get an SPO cookie to sign is by redeeming a PoP-AT for it -- the generateShr proposal is predicated on using the same signing keys for a user as would have been used to sign an AT, even though the AT is not included in the resulting payload.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1208#discussion_r521681579", "createdAt": "2020-11-11T22:40:55Z", "author": {"login": "iambmelt"}, "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "diffHunk": "@@ -1263,6 +1267,130 @@ public boolean isSharedDevice() {\n         return mPublicClientConfiguration.getIsSharedDevice();\n     }\n \n+    @Override\n+    public String generateSignedHttpRequest(@NonNull final IAccount account,\n+                                            @NonNull final PoPAuthenticationScheme popParameters) throws MsalException {\n+        final ResultFuture<AsyncResult<GenerateShrResult>> future = new ResultFuture<>();\n+\n+        final GenerateShrCommandParameters cmdParams =\n+                CommandParametersAdapter.createGenerateShrCommandParameters(\n+                        mPublicClientConfiguration,\n+                        mPublicClientConfiguration.getOAuth2TokenCache(),\n+                        ((Account) account).getHomeAccountId(),\n+                        popParameters\n+                );\n+        final GenerateShrCommand generateShrCommand = new GenerateShrCommand(\n+                cmdParams,\n+                MSALControllerFactory.getAllControllers(\n+                        mPublicClientConfiguration.getAppContext(),\n+                        mPublicClientConfiguration.getDefaultAuthority(),\n+                        mPublicClientConfiguration\n+                ),\n+                new CommandCallback<GenerateShrResult, BaseException>() {\n+                    @Override\n+                    public void onCancel() {\n+                        // Not cancellable\n+                    }\n+\n+                    @Override\n+                    public void onError(@NonNull final BaseException error) {\n+                        future.setResult(\n+                                new AsyncResult<GenerateShrResult>(\n+                                        null,\n+                                        baseExceptionToMsalException(error)\n+                                )\n+                        );\n+                    }\n+\n+                    @Override\n+                    public void onTaskCompleted(@NonNull final GenerateShrResult generateShrResult) {\n+                        future.setResult(new AsyncResult<>(generateShrResult, null));\n+                    }\n+                },\n+                \"1100\" // Public API ID\n+        );\n+\n+        // Execute this command silently...\n+        CommandDispatcher.submitSilent(generateShrCommand);\n+\n+        try {\n+            final AsyncResult<GenerateShrResult> asyncResult = future.get();\n+\n+            if (asyncResult.getSuccess()) {\n+                return asyncResult.getResult().getShr();\n+            } else {\n+                throw asyncResult.getException();\n+            }\n+        } catch (ExecutionException | InterruptedException e) {\n+            throw new MsalClientException(\n+                    UNKNOWN_ERROR,\n+                    \"Unexpected error while generating SHR.\",\n+                    e\n+            );\n+        }\n+    }\n+\n+    @Override\n+    public void generateSignedHttpRequest(@NonNull final IAccount account,\n+                                          @NonNull final PoPAuthenticationScheme popParameters,\n+                                          @NonNull final SignedHttpRequestRequestCallback callback) {\n+        final GenerateShrCommandParameters cmdParams =\n+                CommandParametersAdapter.createGenerateShrCommandParameters(\n+                        mPublicClientConfiguration,\n+                        mPublicClientConfiguration.getOAuth2TokenCache(),\n+                        ((Account) account).getHomeAccountId(),\n+                        popParameters\n+                );\n+        try {\n+            final GenerateShrCommand generateShrCommand = new GenerateShrCommand(\n+                    cmdParams,\n+                    MSALControllerFactory.getAllControllers(\n+                            mPublicClientConfiguration.getAppContext(),\n+                            mPublicClientConfiguration.getDefaultAuthority(),\n+                            mPublicClientConfiguration\n+                    ),\n+                    new CommandCallback<GenerateShrResult, BaseException>() {\n+                        @Override\n+                        public void onCancel() {\n+                            // Not cancellable\n+                        }\n+\n+                        @Override\n+                        public void onError(@NonNull final BaseException error) {\n+                            callback.onError(baseExceptionToMsalException(error));\n+                        }\n+\n+                        @Override\n+                        public void onTaskCompleted(@NonNull final GenerateShrResult generateShrResult) {\n+                            callback.onTaskCompleted(generateShrResult.getShr());\n+                        }\n+                    },\n+                    \"1101\" // Public API ID\n+            );\n+\n+            // Execute this command silently...\n+            CommandDispatcher.submitSilent(generateShrCommand);\n+        } catch (final MsalClientException e) {\n+            final MsalClientException clientException = new MsalClientException(\n+                    UNKNOWN_ERROR,\n+                    \"Unexpected error while generating SHR.\",\n+                    e\n+            );\n+            callback.onError(clientException);\n+        }\n+    }\n+\n+    private MsalException baseExceptionToMsalException(@NonNull final BaseException exception) {\n+        if (GenerateShrResult.Errors.NO_ACCOUNT_FOUND.equalsIgnoreCase(exception.getErrorCode())) {\n+            return new MsalUiRequiredException(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEwMzc1Ng=="}, "originalCommit": {"oid": "a2b8e46e4e7c2824cbf6124975e1d90b3b91892b"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MDU5NDAxOnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMzoxMDozNlrOHxhlmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMzo0Mjo1N1rOHxigrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY5MjU3MQ==", "bodyText": "This should never return null?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1208#discussion_r521692571", "createdAt": "2020-11-11T23:10:36Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "diffHunk": "@@ -109,6 +110,58 @@ void acquireToken(@NonNull final Activity activity,\n      */\n     boolean isSharedDevice();\n \n+    /**\n+     * Signs the provided {@link PoPAuthenticationScheme} parameters into a JWT on behalf of the\n+     * provided {@link IAccount}.\n+     * <p>\n+     * Important: Use of this API requires setting the minimum_required_broker_protocol_version to\n+     * \"6.0\" or higher.\n+     *\n+     * @param account       The account for whom signing shall occur.\n+     * @param popParameters The input parameters.\n+     * @return The resulting SHR.\n+     */\n+    String generateSignedHttpRequest(@NonNull final IAccount account,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "053671396f45f872257bf9f6c9bcac3ee5dba6cd"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY5MjYyMg==", "bodyText": "what about empty strings?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1208#discussion_r521692622", "createdAt": "2020-11-11T23:10:45Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "diffHunk": "@@ -109,6 +110,58 @@ void acquireToken(@NonNull final Activity activity,\n      */\n     boolean isSharedDevice();\n \n+    /**\n+     * Signs the provided {@link PoPAuthenticationScheme} parameters into a JWT on behalf of the\n+     * provided {@link IAccount}.\n+     * <p>\n+     * Important: Use of this API requires setting the minimum_required_broker_protocol_version to\n+     * \"6.0\" or higher.\n+     *\n+     * @param account       The account for whom signing shall occur.\n+     * @param popParameters The input parameters.\n+     * @return The resulting SHR.\n+     */\n+    String generateSignedHttpRequest(@NonNull final IAccount account,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY5MjU3MQ=="}, "originalCommit": {"oid": "053671396f45f872257bf9f6c9bcac3ee5dba6cd"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTcwNzY5NA==", "bodyText": "Neither are allowed -- either the SHR or an Exception, if there was a problem\n1fc28b4", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1208#discussion_r521707694", "createdAt": "2020-11-11T23:42:57Z", "author": {"login": "iambmelt"}, "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "diffHunk": "@@ -109,6 +110,58 @@ void acquireToken(@NonNull final Activity activity,\n      */\n     boolean isSharedDevice();\n \n+    /**\n+     * Signs the provided {@link PoPAuthenticationScheme} parameters into a JWT on behalf of the\n+     * provided {@link IAccount}.\n+     * <p>\n+     * Important: Use of this API requires setting the minimum_required_broker_protocol_version to\n+     * \"6.0\" or higher.\n+     *\n+     * @param account       The account for whom signing shall occur.\n+     * @param popParameters The input parameters.\n+     * @return The resulting SHR.\n+     */\n+    String generateSignedHttpRequest(@NonNull final IAccount account,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY5MjU3MQ=="}, "originalCommit": {"oid": "053671396f45f872257bf9f6c9bcac3ee5dba6cd"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MDU5OTgwOnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMzoxMzoyN1rOHxhpMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMDowNDo1M1rOHxjILg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY5MzQ4OA==", "bodyText": "Instead of writing all this, could potentially just call the overload below by passing a custom callback that sets the result on the future....so we can avoid this mostly identical code.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1208#discussion_r521693488", "createdAt": "2020-11-11T23:13:27Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "diffHunk": "@@ -1263,6 +1267,130 @@ public boolean isSharedDevice() {\n         return mPublicClientConfiguration.getIsSharedDevice();\n     }\n \n+    @Override\n+    public String generateSignedHttpRequest(@NonNull final IAccount account,\n+                                            @NonNull final PoPAuthenticationScheme popParameters) throws MsalException {\n+        final ResultFuture<AsyncResult<GenerateShrResult>> future = new ResultFuture<>();\n+\n+        final GenerateShrCommandParameters cmdParams =\n+                CommandParametersAdapter.createGenerateShrCommandParameters(\n+                        mPublicClientConfiguration,\n+                        mPublicClientConfiguration.getOAuth2TokenCache(),\n+                        ((Account) account).getHomeAccountId(),\n+                        popParameters\n+                );\n+        final GenerateShrCommand generateShrCommand = new GenerateShrCommand(\n+                cmdParams,\n+                MSALControllerFactory.getAllControllers(\n+                        mPublicClientConfiguration.getAppContext(),\n+                        mPublicClientConfiguration.getDefaultAuthority(),\n+                        mPublicClientConfiguration\n+                ),\n+                new CommandCallback<GenerateShrResult, BaseException>() {\n+                    @Override\n+                    public void onCancel() {\n+                        // Not cancellable\n+                    }\n+\n+                    @Override\n+                    public void onError(@NonNull final BaseException error) {\n+                        future.setResult(\n+                                new AsyncResult<GenerateShrResult>(\n+                                        null,\n+                                        baseExceptionToMsalException(error)\n+                                )\n+                        );\n+                    }\n+\n+                    @Override\n+                    public void onTaskCompleted(@NonNull final GenerateShrResult generateShrResult) {\n+                        future.setResult(new AsyncResult<>(generateShrResult, null));\n+                    }\n+                },\n+                \"1100\" // Public API ID\n+        );\n+\n+        // Execute this command silently...\n+        CommandDispatcher.submitSilent(generateShrCommand);\n+\n+        try {\n+            final AsyncResult<GenerateShrResult> asyncResult = future.get();\n+\n+            if (asyncResult.getSuccess()) {\n+                return asyncResult.getResult().getShr();\n+            } else {\n+                throw asyncResult.getException();\n+            }\n+        } catch (ExecutionException | InterruptedException e) {\n+            throw new MsalClientException(\n+                    UNKNOWN_ERROR,\n+                    \"Unexpected error while generating SHR.\",\n+                    e\n+            );\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "053671396f45f872257bf9f6c9bcac3ee5dba6cd"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTcxNzgwNg==", "bodyText": "2d3ded5", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1208#discussion_r521717806", "createdAt": "2020-11-12T00:04:53Z", "author": {"login": "iambmelt"}, "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "diffHunk": "@@ -1263,6 +1267,130 @@ public boolean isSharedDevice() {\n         return mPublicClientConfiguration.getIsSharedDevice();\n     }\n \n+    @Override\n+    public String generateSignedHttpRequest(@NonNull final IAccount account,\n+                                            @NonNull final PoPAuthenticationScheme popParameters) throws MsalException {\n+        final ResultFuture<AsyncResult<GenerateShrResult>> future = new ResultFuture<>();\n+\n+        final GenerateShrCommandParameters cmdParams =\n+                CommandParametersAdapter.createGenerateShrCommandParameters(\n+                        mPublicClientConfiguration,\n+                        mPublicClientConfiguration.getOAuth2TokenCache(),\n+                        ((Account) account).getHomeAccountId(),\n+                        popParameters\n+                );\n+        final GenerateShrCommand generateShrCommand = new GenerateShrCommand(\n+                cmdParams,\n+                MSALControllerFactory.getAllControllers(\n+                        mPublicClientConfiguration.getAppContext(),\n+                        mPublicClientConfiguration.getDefaultAuthority(),\n+                        mPublicClientConfiguration\n+                ),\n+                new CommandCallback<GenerateShrResult, BaseException>() {\n+                    @Override\n+                    public void onCancel() {\n+                        // Not cancellable\n+                    }\n+\n+                    @Override\n+                    public void onError(@NonNull final BaseException error) {\n+                        future.setResult(\n+                                new AsyncResult<GenerateShrResult>(\n+                                        null,\n+                                        baseExceptionToMsalException(error)\n+                                )\n+                        );\n+                    }\n+\n+                    @Override\n+                    public void onTaskCompleted(@NonNull final GenerateShrResult generateShrResult) {\n+                        future.setResult(new AsyncResult<>(generateShrResult, null));\n+                    }\n+                },\n+                \"1100\" // Public API ID\n+        );\n+\n+        // Execute this command silently...\n+        CommandDispatcher.submitSilent(generateShrCommand);\n+\n+        try {\n+            final AsyncResult<GenerateShrResult> asyncResult = future.get();\n+\n+            if (asyncResult.getSuccess()) {\n+                return asyncResult.getResult().getShr();\n+            } else {\n+                throw asyncResult.getException();\n+            }\n+        } catch (ExecutionException | InterruptedException e) {\n+            throw new MsalClientException(\n+                    UNKNOWN_ERROR,\n+                    \"Unexpected error while generating SHR.\",\n+                    e\n+            );\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY5MzQ4OA=="}, "originalCommit": {"oid": "053671396f45f872257bf9f6c9bcac3ee5dba6cd"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NTg2OTIyOnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMDoxMDozNFrOHyUHrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMjo0NjowMlrOHyXjhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMDQ5NA==", "bodyText": "move this to PublicApiId.java", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1208#discussion_r522520494", "createdAt": "2020-11-13T00:10:34Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "diffHunk": "@@ -1263,6 +1268,131 @@ public boolean isSharedDevice() {\n         return mPublicClientConfiguration.getIsSharedDevice();\n     }\n \n+    @Override\n+    public String generateSignedHttpRequest(@NonNull final IAccount account,\n+                                            @NonNull final PoPAuthenticationScheme popParameters) throws MsalException {\n+        final ResultFuture<AsyncResult<GenerateShrResult>> future = new ResultFuture<>();\n+\n+        final GenerateShrCommand generateShrCommand = createGenerateShrCommand(\n+                account,\n+                popParameters,\n+                new CommandCallback<GenerateShrResult, BaseException>() {\n+                    @Override\n+                    public void onCancel() {\n+                        // Not cancellable\n+                    }\n+\n+                    @Override\n+                    public void onError(@NonNull final BaseException error) {\n+                        future.setResult(\n+                                new AsyncResult<GenerateShrResult>(\n+                                        null,\n+                                        baseExceptionToMsalException(error)\n+                                )\n+                        );\n+                    }\n+\n+                    @Override\n+                    public void onTaskCompleted(@NonNull final GenerateShrResult generateShrResult) {\n+                        future.setResult(new AsyncResult<>(generateShrResult, null));\n+                    }\n+                },\n+                \"1100\" // Public API ID", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c972a288487ee9ff3cee369d502593dac38fc6e"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU3Njc3Mg==", "bodyText": "cc33739", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1208#discussion_r522576772", "createdAt": "2020-11-13T02:46:02Z", "author": {"login": "iambmelt"}, "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "diffHunk": "@@ -1263,6 +1268,131 @@ public boolean isSharedDevice() {\n         return mPublicClientConfiguration.getIsSharedDevice();\n     }\n \n+    @Override\n+    public String generateSignedHttpRequest(@NonNull final IAccount account,\n+                                            @NonNull final PoPAuthenticationScheme popParameters) throws MsalException {\n+        final ResultFuture<AsyncResult<GenerateShrResult>> future = new ResultFuture<>();\n+\n+        final GenerateShrCommand generateShrCommand = createGenerateShrCommand(\n+                account,\n+                popParameters,\n+                new CommandCallback<GenerateShrResult, BaseException>() {\n+                    @Override\n+                    public void onCancel() {\n+                        // Not cancellable\n+                    }\n+\n+                    @Override\n+                    public void onError(@NonNull final BaseException error) {\n+                        future.setResult(\n+                                new AsyncResult<GenerateShrResult>(\n+                                        null,\n+                                        baseExceptionToMsalException(error)\n+                                )\n+                        );\n+                    }\n+\n+                    @Override\n+                    public void onTaskCompleted(@NonNull final GenerateShrResult generateShrResult) {\n+                        future.setResult(new AsyncResult<>(generateShrResult, null));\n+                    }\n+                },\n+                \"1100\" // Public API ID", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMDQ5NA=="}, "originalCommit": {"oid": "3c972a288487ee9ff3cee369d502593dac38fc6e"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NTg3MDczOnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMDoxMToxNVrOHyUIlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMjo0NTo1N1rOHyXjYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMDcyNA==", "bodyText": "move this constant to PublicApiId.java", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1208#discussion_r522520724", "createdAt": "2020-11-13T00:11:15Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "diffHunk": "@@ -1263,6 +1268,131 @@ public boolean isSharedDevice() {\n         return mPublicClientConfiguration.getIsSharedDevice();\n     }\n \n+    @Override\n+    public String generateSignedHttpRequest(@NonNull final IAccount account,\n+                                            @NonNull final PoPAuthenticationScheme popParameters) throws MsalException {\n+        final ResultFuture<AsyncResult<GenerateShrResult>> future = new ResultFuture<>();\n+\n+        final GenerateShrCommand generateShrCommand = createGenerateShrCommand(\n+                account,\n+                popParameters,\n+                new CommandCallback<GenerateShrResult, BaseException>() {\n+                    @Override\n+                    public void onCancel() {\n+                        // Not cancellable\n+                    }\n+\n+                    @Override\n+                    public void onError(@NonNull final BaseException error) {\n+                        future.setResult(\n+                                new AsyncResult<GenerateShrResult>(\n+                                        null,\n+                                        baseExceptionToMsalException(error)\n+                                )\n+                        );\n+                    }\n+\n+                    @Override\n+                    public void onTaskCompleted(@NonNull final GenerateShrResult generateShrResult) {\n+                        future.setResult(new AsyncResult<>(generateShrResult, null));\n+                    }\n+                },\n+                \"1100\" // Public API ID\n+        );\n+\n+        // Execute this command silently...\n+        CommandDispatcher.submitSilent(generateShrCommand);\n+\n+        try {\n+            final AsyncResult<GenerateShrResult> asyncResult = future.get();\n+\n+            if (asyncResult.getSuccess()) {\n+                return asyncResult.getResult().getShr();\n+            } else {\n+                throw asyncResult.getException();\n+            }\n+        } catch (ExecutionException | InterruptedException e) {\n+            throw new MsalClientException(\n+                    UNKNOWN_ERROR,\n+                    \"Unexpected error while generating SHR.\",\n+                    e\n+            );\n+        }\n+    }\n+\n+    @Override\n+    public void generateSignedHttpRequest(@NonNull final IAccount account,\n+                                          @NonNull final PoPAuthenticationScheme popParameters,\n+                                          @NonNull final SignedHttpRequestRequestCallback callback) {\n+        try {\n+            final GenerateShrCommand generateShrCommand = createGenerateShrCommand(\n+                    account,\n+                    popParameters,\n+                    new CommandCallback<GenerateShrResult, BaseException>() {\n+                        @Override\n+                        public void onCancel() {\n+                            // Not cancellable\n+                        }\n+\n+                        @Override\n+                        public void onError(@NonNull final BaseException error) {\n+                            callback.onError(baseExceptionToMsalException(error));\n+                        }\n+\n+                        @Override\n+                        public void onTaskCompleted(@NonNull final GenerateShrResult generateShrResult) {\n+                            callback.onTaskCompleted(generateShrResult.getShr());\n+                        }\n+                    },\n+                    \"1101\" // Public API ID", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c972a288487ee9ff3cee369d502593dac38fc6e"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU3NjczNw==", "bodyText": "cc33739", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1208#discussion_r522576737", "createdAt": "2020-11-13T02:45:57Z", "author": {"login": "iambmelt"}, "path": "msal/src/main/java/com/microsoft/identity/client/PublicClientApplication.java", "diffHunk": "@@ -1263,6 +1268,131 @@ public boolean isSharedDevice() {\n         return mPublicClientConfiguration.getIsSharedDevice();\n     }\n \n+    @Override\n+    public String generateSignedHttpRequest(@NonNull final IAccount account,\n+                                            @NonNull final PoPAuthenticationScheme popParameters) throws MsalException {\n+        final ResultFuture<AsyncResult<GenerateShrResult>> future = new ResultFuture<>();\n+\n+        final GenerateShrCommand generateShrCommand = createGenerateShrCommand(\n+                account,\n+                popParameters,\n+                new CommandCallback<GenerateShrResult, BaseException>() {\n+                    @Override\n+                    public void onCancel() {\n+                        // Not cancellable\n+                    }\n+\n+                    @Override\n+                    public void onError(@NonNull final BaseException error) {\n+                        future.setResult(\n+                                new AsyncResult<GenerateShrResult>(\n+                                        null,\n+                                        baseExceptionToMsalException(error)\n+                                )\n+                        );\n+                    }\n+\n+                    @Override\n+                    public void onTaskCompleted(@NonNull final GenerateShrResult generateShrResult) {\n+                        future.setResult(new AsyncResult<>(generateShrResult, null));\n+                    }\n+                },\n+                \"1100\" // Public API ID\n+        );\n+\n+        // Execute this command silently...\n+        CommandDispatcher.submitSilent(generateShrCommand);\n+\n+        try {\n+            final AsyncResult<GenerateShrResult> asyncResult = future.get();\n+\n+            if (asyncResult.getSuccess()) {\n+                return asyncResult.getResult().getShr();\n+            } else {\n+                throw asyncResult.getException();\n+            }\n+        } catch (ExecutionException | InterruptedException e) {\n+            throw new MsalClientException(\n+                    UNKNOWN_ERROR,\n+                    \"Unexpected error while generating SHR.\",\n+                    e\n+            );\n+        }\n+    }\n+\n+    @Override\n+    public void generateSignedHttpRequest(@NonNull final IAccount account,\n+                                          @NonNull final PoPAuthenticationScheme popParameters,\n+                                          @NonNull final SignedHttpRequestRequestCallback callback) {\n+        try {\n+            final GenerateShrCommand generateShrCommand = createGenerateShrCommand(\n+                    account,\n+                    popParameters,\n+                    new CommandCallback<GenerateShrResult, BaseException>() {\n+                        @Override\n+                        public void onCancel() {\n+                            // Not cancellable\n+                        }\n+\n+                        @Override\n+                        public void onError(@NonNull final BaseException error) {\n+                            callback.onError(baseExceptionToMsalException(error));\n+                        }\n+\n+                        @Override\n+                        public void onTaskCompleted(@NonNull final GenerateShrResult generateShrResult) {\n+                            callback.onTaskCompleted(generateShrResult.getShr());\n+                        }\n+                    },\n+                    \"1101\" // Public API ID", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyMDcyNA=="}, "originalCommit": {"oid": "3c972a288487ee9ff3cee369d502593dac38fc6e"}, "originalPosition": 118}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1860, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}