{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2NTMzMzAy", "number": 1110, "title": "Add more msal, msal w/ broker, usgov UI Automated Tests", "bodyText": "Add more tests cases from the following test plans:\n\nMSAL without Broker\nMSAL with Broker\nMSAL UsGov Test Plan\nMSAL with Broker UsGov Test Plan\n\nOverall, across the above test plans, I think we have more than 60% automated. I'll try to find the exact percentage.\nAlso ignored the B2C Test due to issues with parameterization and rules. I added TODO for fixing that.\nThis PR depends on common PR: AzureAD/microsoft-authentication-library-common-for-android#982", "createdAt": "2020-07-24T23:51:28Z", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1110", "merged": true, "mergeCommit": {"oid": "033821da689a6e6e096acdfa693669729f93535c"}, "closed": true, "closedAt": "2020-08-09T21:14:34Z", "author": {"login": "shahzaibj"}, "timelineItems": {"totalCount": 39, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABctil95gH2gAyNDU2NTMzMzAyOjlhZjdkOTgzYjExNjRjZTVhZDI4YzY1NDEyMDVkNjM1ZWYzODU4NzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc9TT2AAH2gAyNDU2NTMzMzAyOjY1NmE5OTExMmM1ODgzNTMwMGM1MzM0ZmU0OTc1OTJhYjU1YTk0MzM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9af7d983b1164ce5ad28c6541205d635ef385874", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/9af7d983b1164ce5ad28c6541205d635ef385874", "committedDate": "2020-06-21T20:50:55Z", "message": "Add CP specific UI tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0945a02061db80b3ad8bb4498a40420aa7e0f905", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/0945a02061db80b3ad8bb4498a40420aa7e0f905", "committedDate": "2020-06-26T21:34:20Z", "message": "Merge branch 'dev' into shahzaibj/more-msal-ui-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e671073502787cabd7eb7517edbeee46a7d37467", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/e671073502787cabd7eb7517edbeee46a7d37467", "committedDate": "2020-06-26T21:36:52Z", "message": "Merge branch 'dev' into shahzaibj/more-msal-ui-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3d561fb1afdacc8e684acbca6e6e0cfe2f37a10", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/e3d561fb1afdacc8e684acbca6e6e0cfe2f37a10", "committedDate": "2020-06-27T00:55:10Z", "message": "Refactor after package rename"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a3f25867eb6be40e51b993df11e3ca32b5436f7", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/1a3f25867eb6be40e51b993df11e3ca32b5436f7", "committedDate": "2020-06-27T00:55:36Z", "message": "Deactivate CP device admin then delete again"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25015ef03655a9c5be44d3f68179a1901f044af3", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/25015ef03655a9c5be44d3f68179a1901f044af3", "committedDate": "2020-06-30T00:09:34Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a281d14a243fcc251caae8496a4b4f245c4320e", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/0a281d14a243fcc251caae8496a4b4f245c4320e", "committedDate": "2020-07-06T23:43:07Z", "message": "Merge branch 'dev' into shahzaibj/more-msal-ui-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc0185e00e340941ca443b942fc1ea5ddcafa354", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/fc0185e00e340941ca443b942fc1ea5ddcafa354", "committedDate": "2020-07-06T23:59:22Z", "message": "Refactor per broker class rename"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b9f6418d9893d1b5cffa16d24e14fd0dd989d94", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/0b9f6418d9893d1b5cffa16d24e14fd0dd989d94", "committedDate": "2020-07-07T00:08:12Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca8ee9ebeef14ade349714d93f75fbe5cb5aec26", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/ca8ee9ebeef14ade349714d93f75fbe5cb5aec26", "committedDate": "2020-07-07T00:09:03Z", "message": "Update submodule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b3ed80c9eac3c856a07f44838bbfb3ade12fca7", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/8b3ed80c9eac3c856a07f44838bbfb3ade12fca7", "committedDate": "2020-07-13T17:32:15Z", "message": "Automate broker msal usgov tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e2a7751176b78f6fb0a5fd86929583f9da96302", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/2e2a7751176b78f6fb0a5fd86929583f9da96302", "committedDate": "2020-07-20T18:25:38Z", "message": "Add more msal and broker UI tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1405606660b06b3e106475da08d764083fcc27a", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/e1405606660b06b3e106475da08d764083fcc27a", "committedDate": "2020-07-20T20:50:18Z", "message": "Add test rules"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "974538c76a7df4e106b7b95942c1eab4a4345358", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/974538c76a7df4e106b7b95942c1eab4a4345358", "committedDate": "2020-07-22T01:28:06Z", "message": "Add device enrollment failure recovery rule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a3b549dc9fab5779ee263077173297fee379dcd", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/2a3b549dc9fab5779ee263077173297fee379dcd", "committedDate": "2020-07-22T01:32:41Z", "message": "Rename rules package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a29f26d91b91080526ef073b280de812e5ae6df1", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/a29f26d91b91080526ef073b280de812e5ae6df1", "committedDate": "2020-07-22T17:44:34Z", "message": "Add retry on failure annotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe1b2365564f3e3df55229fc444e31e9051d2c3d", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/fe1b2365564f3e3df55229fc444e31e9051d2c3d", "committedDate": "2020-07-24T23:41:01Z", "message": "Use device settings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48de8249cdb82b6f55497389d94f6f998f9e3428", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/48de8249cdb82b6f55497389d94f6f998f9e3428", "committedDate": "2020-07-25T23:14:39Z", "message": "Add missing licenses"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20ee7dd3ba9315e6398ec2af238a067977720afc", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/20ee7dd3ba9315e6398ec2af238a067977720afc", "committedDate": "2020-07-26T00:31:30Z", "message": "Add comments to MSAL test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "247562c7718e5e0cd0b5331b822617f9b744a2c8", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/247562c7718e5e0cd0b5331b822617f9b744a2c8", "committedDate": "2020-07-28T19:19:59Z", "message": "Make broker rule non-null"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a04ac449d236c337c4b8592f444f0afa51fd6d5", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/7a04ac449d236c337c4b8592f444f0afa51fd6d5", "committedDate": "2020-07-28T19:20:09Z", "message": "Merge branch 'dev' into shahzaibj/msal-broker-usgov-test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38f83a69cb0402c0d8f13d316ce50a34c2253566", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/38f83a69cb0402c0d8f13d316ce50a34c2253566", "committedDate": "2020-07-28T20:11:09Z", "message": "Refactor get broker application"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18e5b3af071d889fa693cc2ebb298ea5066f3bfe", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/18e5b3af071d889fa693cc2ebb298ea5066f3bfe", "committedDate": "2020-07-28T22:07:45Z", "message": "Changes per changes in uiautomationutilities"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a87653c94ab94e3f134ffee853dcdd2619bf7ab3", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/a87653c94ab94e3f134ffee853dcdd2619bf7ab3", "committedDate": "2020-07-28T22:08:16Z", "message": "Update submodule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57f419185356cd90f96a0d814864ff683b5021b6", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/57f419185356cd90f96a0d814864ff683b5021b6", "committedDate": "2020-07-28T22:59:53Z", "message": "Remove ignored tests for now"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44850c9673aa8229459944fc82859b38eedf3f24", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/44850c9673aa8229459944fc82859b38eedf3f24", "committedDate": "2020-07-28T23:30:22Z", "message": "Add todo to fix B2C test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c003e2df125015a8e1011619f35e1f191979f9c", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/5c003e2df125015a8e1011619f35e1f191979f9c", "committedDate": "2020-07-28T23:38:44Z", "message": "Add missing javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56f9d94641cd9a7f99474d93fbcb5d0c8e258576", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/56f9d94641cd9a7f99474d93fbcb5d0c8e258576", "committedDate": "2020-08-05T17:20:18Z", "message": "Add links to ADO test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5dc204aff70a859bf8c7cf24ae7c69d4ea136a68", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/5dc204aff70a859bf8c7cf24ae7c69d4ea136a68", "committedDate": "2020-08-06T03:01:37Z", "message": "Merge branch 'dev' into shahzaibj/msal-broker-usgov-test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acc36652dd8e714abbe27580640df1ced6d083a7", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/acc36652dd8e714abbe27580640df1ced6d083a7", "committedDate": "2020-08-06T03:02:19Z", "message": "Update submodule"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyODg2Mzkz", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1110#pullrequestreview-462886393", "createdAt": "2020-08-06T21:23:01Z", "commit": {"oid": "acc36652dd8e714abbe27580640df1ced6d083a7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMToyMzowMlrOG9Eusw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMToyMzowMlrOG9Eusw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY5MzgxMQ==", "bodyText": "Very minor nit: could be Assert.fail (assuming this is imported)", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1110#discussion_r466693811", "createdAt": "2020-08-06T21:23:02Z", "author": {"login": "iambmelt"}, "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/AbstractMsalUiTest.java", "diffHunk": "@@ -0,0 +1,314 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.rule.ActivityTestRule;\n+\n+import com.microsoft.identity.client.AuthenticationCallback;\n+import com.microsoft.identity.client.IAccount;\n+import com.microsoft.identity.client.IAuthenticationResult;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplication;\n+import com.microsoft.identity.client.SilentAuthenticationCallback;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.client.ui.automation.ILabTest;\n+import com.microsoft.identity.client.ui.automation.browser.BrowserChrome;\n+import com.microsoft.identity.client.ui.automation.browser.IBrowser;\n+import com.microsoft.identity.client.ui.automation.rules.DeviceEnrollmentFailureRecoveryRule;\n+import com.microsoft.identity.client.ui.automation.rules.LoadLabUserTestRule;\n+import com.microsoft.identity.client.ui.automation.rules.RemoveBrokersBeforeTestRule;\n+import com.microsoft.identity.client.ui.automation.rules.ResetAutomaticTimeZoneTestRule;\n+import com.microsoft.identity.client.ui.automation.rules.RetryTestRule;\n+import com.microsoft.identity.client.ui.automation.rules.UiAutomatorTestRule;\n+import com.microsoft.identity.common.internal.util.StringUtil;\n+\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.TestRule;\n+\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * A base model for an E2E MSAL UI Test. This class will apply all the rules required for an MSAL\n+ * test and will get everything setup for use by child classes.\n+ */\n+public abstract class AbstractMsalUiTest implements IMsalTest, ILabTest {\n+\n+    protected Context mContext;\n+    protected Activity mActivity;\n+    protected IPublicClientApplication mApplication;\n+\n+    protected String[] mScopes;\n+    protected IAccount mAccount;\n+    protected IBrowser mBrowser;\n+    protected String mLoginHint;\n+\n+    @Rule(order = 0)\n+    public TestRule retryRule = new RetryTestRule();\n+\n+    @Rule(order = 1)\n+    public final TestRule uiAutomatorTestRule = new UiAutomatorTestRule();\n+\n+    @Rule(order = 2)\n+    public final TestRule resetAutomaticTimeRule = new ResetAutomaticTimeZoneTestRule();\n+\n+    @Rule(order = 3)\n+    public final TestRule loadLabUserRule = getLabUserQuery() != null\n+            ? new LoadLabUserTestRule(getLabUserQuery())\n+            : new LoadLabUserTestRule(getTempUserType());\n+\n+    @Rule(order = 4)\n+    public final TestRule removeBrokersRule = new RemoveBrokersBeforeTestRule();\n+\n+    @Rule(order = 5)\n+    public ActivityTestRule<MainActivity> mActivityRule =\n+            new ActivityTestRule(MainActivity.class);\n+\n+    @Rule(order = 6)\n+    public TestRule deviceEnrollmentFailureRecoveryRule = new DeviceEnrollmentFailureRecoveryRule();\n+\n+    @Before\n+    public void setup() {\n+        mScopes = getScopes();\n+        mBrowser = getBrowser();\n+\n+        // clear all cookies in the browser\n+        mBrowser.clear();\n+\n+        mLoginHint = ((LoadLabUserTestRule) loadLabUserRule).getLabUserUpn();\n+\n+        mContext = ApplicationProvider.getApplicationContext();\n+        mActivity = mActivityRule.getActivity();\n+        setupPCA();\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        mAccount = null;\n+    }\n+\n+    @Override\n+    public IBrowser getBrowser() {\n+        return new BrowserChrome();\n+    }\n+\n+    private void setupPCA() {\n+        try {\n+            mApplication = PublicClientApplication.create(mContext, getConfigFileResourceId());\n+        } catch (InterruptedException e) {\n+            fail(e.getMessage());\n+        } catch (MsalException e) {\n+            fail(e.getMessage());\n+        }\n+    }\n+\n+    protected IAccount getAccount() {\n+        return mAccount;\n+    }\n+\n+    /**\n+     * A callback that can be used to perform assertions on completion of an interactive request\n+     * (success case) test.\n+     *\n+     * @param latch the latch associated to this request\n+     * @return an {@link AuthenticationCallback} object\n+     */\n+    protected AuthenticationCallback successfulInteractiveCallback(final CountDownLatch latch) {\n+        return new AuthenticationCallback() {\n+            @Override\n+            public void onSuccess(IAuthenticationResult authenticationResult) {\n+                Assert.assertFalse(StringUtil.isEmpty(authenticationResult.getAccessToken()));\n+                mAccount = authenticationResult.getAccount();\n+                latch.countDown();\n+            }\n+\n+            @Override\n+            public void onError(MsalException exception) {\n+                junit.framework.Assert.fail(exception.getMessage());\n+                latch.countDown();\n+            }\n+\n+            @Override\n+            public void onCancel() {\n+                junit.framework.Assert.fail(\"User cancelled flow\");\n+                latch.countDown();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * A callback that can be used to perform assertions on completion of an interactive request\n+     * (success case) test.\n+     *\n+     * @param latch the latch associated to this request\n+     * @return an {@link AuthenticationCallback} object\n+     */\n+    protected AuthenticationCallback successfulClaimsRequestInIdTokenInteractiveCallback(\n+            @NonNull final CountDownLatch latch,\n+            @NonNull final String requestedClaim,\n+            @Nullable final String expectedValue\n+    ) {\n+        return new AuthenticationCallback() {\n+            @Override\n+            public void onSuccess(IAuthenticationResult authenticationResult) {\n+                Assert.assertFalse(StringUtil.isEmpty(authenticationResult.getAccessToken()));\n+                mAccount = authenticationResult.getAccount();\n+                final Map<String, ?> claims = authenticationResult.getAccount().getClaims();\n+                Assert.assertTrue(claims.containsKey(requestedClaim));\n+                if (!TextUtils.isEmpty(expectedValue)) {\n+                    final Object claimValue = claims.get(requestedClaim);\n+                    Assert.assertEquals(expectedValue, claimValue.toString());\n+                }\n+                latch.countDown();\n+            }\n+\n+            @Override\n+            public void onError(MsalException exception) {\n+                junit.framework.Assert.fail(exception.getMessage());\n+                latch.countDown();\n+            }\n+\n+            @Override\n+            public void onCancel() {\n+                junit.framework.Assert.fail(\"User cancelled flow\");\n+                latch.countDown();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * A callback that can be used to perform assertions on completion of an interactive request\n+     * (cancel case) test.\n+     *\n+     * @param latch the latch associated to this request\n+     * @return an {@link AuthenticationCallback} object\n+     */\n+    protected AuthenticationCallback cancelInteractiveCallback(final CountDownLatch latch) {\n+        return new AuthenticationCallback() {\n+            @Override\n+            public void onSuccess(IAuthenticationResult authenticationResult) {\n+                Assert.fail(\"Unexpected Success!\");\n+                latch.countDown();\n+            }\n+\n+            @Override\n+            public void onError(MsalException exception) {\n+                Assert.fail(exception.getMessage());\n+                latch.countDown();\n+            }\n+\n+            @Override\n+            public void onCancel() {\n+                latch.countDown();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * A callback that can be used to perform assertions on completion of an silent request\n+     * (success case) test.\n+     *\n+     * @param latch the latch associated to this request\n+     * @return an {@link AuthenticationCallback} object\n+     */\n+    protected SilentAuthenticationCallback successfulSilentCallback(final CountDownLatch latch) {\n+        return new SilentAuthenticationCallback() {\n+            @Override\n+            public void onSuccess(IAuthenticationResult authenticationResult) {\n+                Assert.assertFalse(StringUtil.isEmpty(authenticationResult.getAccessToken()));\n+                mAccount = authenticationResult.getAccount();\n+                latch.countDown();\n+            }\n+\n+            @Override\n+            public void onError(MsalException exception) {\n+                junit.framework.Assert.fail(exception.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acc36652dd8e714abbe27580640df1ced6d083a7"}, "originalPosition": 257}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyODg2NDM0", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1110#pullrequestreview-462886434", "createdAt": "2020-08-06T21:23:06Z", "commit": {"oid": "acc36652dd8e714abbe27580640df1ced6d083a7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNTc2ODgx", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1110#pullrequestreview-463576881", "createdAt": "2020-08-07T19:58:03Z", "commit": {"oid": "acc36652dd8e714abbe27580640df1ced6d083a7"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxOTo1ODowM1rOG9mMDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMDozMjo0MlrOG9nB-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI0MTk5Nw==", "bodyText": "missing \"Change the device time one hour forward.\"", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1110#discussion_r467241997", "createdAt": "2020-08-07T19:58:03Z", "author": {"login": "rpdome"}, "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/broker/TestCase796050.java", "diffHunk": "@@ -0,0 +1,184 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.testpass.broker;\n+\n+import androidx.test.uiautomator.UiObject;\n+\n+import com.microsoft.identity.client.AcquireTokenParameters;\n+import com.microsoft.identity.client.AcquireTokenSilentParameters;\n+import com.microsoft.identity.client.IAccount;\n+import com.microsoft.identity.client.Prompt;\n+import com.microsoft.identity.client.msal.automationapp.AbstractMsalUiTest;\n+import com.microsoft.identity.client.msal.automationapp.R;\n+import com.microsoft.identity.client.msal.automationapp.interaction.InteractiveRequest;\n+import com.microsoft.identity.client.msal.automationapp.interaction.OnInteractionRequired;\n+import com.microsoft.identity.client.ui.automation.broker.BrokerMicrosoftAuthenticator;\n+import com.microsoft.identity.client.ui.automation.broker.ITestBroker;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptHandlerParameters;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptParameter;\n+import com.microsoft.identity.client.ui.automation.interaction.microsoftsts.AadPromptHandler;\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+import com.microsoft.identity.internal.testutils.labutils.LabConfig;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserHelper;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserQuery;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.CountDownLatch;\n+\n+// Multi-accounts for Broker - Add Account in Account Chooser Activity\n+// The goal of the test case is to ensure that we can add accounts in broker via the\n+// \"Add another account\" option in Account Chooser Activity\n+// https://identitydivision.visualstudio.com/DevEx/_workitems/edit/796050\n+public class TestCase796050 extends AbstractMsalBrokerTest {\n+\n+    @Test\n+    public void test_796050() throws InterruptedException {\n+\n+        // already created test user\n+        final String username1 = mLoginHint;\n+        final String password1 = LabConfig.getCurrentLabConfig().getLabUserPassword();\n+\n+        // create another temp user\n+        final String username2 = LabUserHelper.loadTempUser(getTempUserType());\n+        final String password2 = LabConfig.getCurrentLabConfig().getLabUserPassword();\n+\n+        Assert.assertNotEquals(username1, username2);\n+\n+        // perform device registration with one of the accounts (account 1 here)\n+        mBroker.performDeviceRegistration(\n+                username1, password1\n+        );\n+\n+        final CountDownLatch latch = new CountDownLatch(1);\n+\n+        final AcquireTokenParameters parameters = new AcquireTokenParameters.Builder()\n+                .startAuthorizationFromActivity(mActivity)\n+                .withScopes(Arrays.asList(mScopes))\n+                .withCallback(successfulInteractiveCallback(latch))\n+                .withPrompt(Prompt.SELECT_ACCOUNT)\n+                .build();\n+\n+        // Start interactive token request in MSAL (without login hint)\n+        final InteractiveRequest interactiveRequest = new InteractiveRequest(\n+                mApplication,\n+                parameters,\n+                new OnInteractionRequired() {\n+                    @Override\n+                    public void handleUserInteraction() {\n+                        // Account Chooser Activity should be displayed by broker after calling\n+                        // acquire token. In Account Choose Activity, click on \"Add another account\"\n+                        // When a username is not provided to the below method, it clicks on\n+                        // \"Add another account\"\n+                        mBroker.handleAccountPicker(null);\n+\n+                        final PromptHandlerParameters promptHandlerParameters = PromptHandlerParameters.builder()\n+                                .prompt(PromptParameter.SELECT_ACCOUNT)\n+                                .loginHint(null)\n+                                .sessionExpected(false)\n+                                .consentPageExpected(false)\n+                                .speedBumpExpected(false)\n+                                // already in webview as we handled account picker above\n+                                // and this would behave the same as no broker\n+                                .broker(null)\n+                                .build();\n+\n+                        // In the WebView AAD login page, login with credentials for the other\n+                        // account aka Account 2 that we created earlier\n+                        new AadPromptHandler(promptHandlerParameters)\n+                                .handlePrompt(username2, password2);\n+\n+                    }\n+                }\n+        );\n+\n+        interactiveRequest.execute();\n+        latch.await();\n+\n+        // Assert Authenticator Account screen has both accounts\n+\n+        mBroker.launch(); // open Authenticator App\n+\n+        final UiObject account1 = UiAutomatorUtils.obtainUiObjectWithText(username1);\n+        Assert.assertTrue(account1.exists()); // make sure account 1 is there\n+\n+        final UiObject account2 = UiAutomatorUtils.obtainUiObjectWithText(username2);\n+        Assert.assertTrue(account2.exists()); // make sure account 2 is there\n+\n+        // SILENT REQUEST - start a acquireTokenSilent request in MSAL with the Account 2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acc36652dd8e714abbe27580640df1ced6d083a7"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI0NDI4MQ==", "bodyText": "It's not matching the test case (the test case asks the tester to launch AzureSample).\nLet's make sure they're matching. In this case, I'm fine either making changes here or there.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1110#discussion_r467244281", "createdAt": "2020-08-07T20:03:40Z", "author": {"login": "rpdome"}, "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/broker/TestCase833513.java", "diffHunk": "@@ -0,0 +1,140 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.testpass.broker;\n+\n+import androidx.test.uiautomator.UiObject;\n+\n+import com.microsoft.identity.client.MultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplication;\n+import com.microsoft.identity.client.SingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.client.msal.automationapp.AbstractMsalUiTest;\n+import com.microsoft.identity.client.msal.automationapp.R;\n+import com.microsoft.identity.client.ui.automation.broker.BrokerMicrosoftAuthenticator;\n+import com.microsoft.identity.client.ui.automation.broker.ITestBroker;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptHandlerParameters;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptParameter;\n+import com.microsoft.identity.client.ui.automation.interaction.microsoftsts.AdfsPromptHandler;\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+import com.microsoft.identity.internal.testutils.labutils.LabConfig;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserHelper;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserQuery;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+// End My Shift - In Shared device mode, only account from the same tenant should be able to acquire token.\n+// https://identitydivision.visualstudio.com/DevEx/_workitems/edit/833513\n+public class TestCase833513 extends AbstractMsalBrokerTest {\n+\n+    @Test\n+    public void test_833513() throws MsalException, InterruptedException {\n+        // pca should be in MULTIPLE account mode starting out\n+        Assert.assertTrue(mApplication instanceof MultipleAccountPublicClientApplication);\n+\n+        //we should NOT be in shared device mode\n+        Assert.assertFalse(mApplication.isSharedDevice());\n+\n+        // perform shared device registration\n+        mBroker.performSharedDeviceRegistration(\n+                mLoginHint, LabConfig.getCurrentLabConfig().getLabUserPassword()\n+        );\n+\n+        // re-create PCA after device registration\n+        mApplication = PublicClientApplication.create(mContext, getConfigFileResourceId());\n+\n+        // pca should now be in SINGLE account mode\n+        Assert.assertTrue(mApplication instanceof SingleAccountPublicClientApplication);\n+\n+        // we should be in shared device mode\n+        Assert.assertTrue(mApplication.isSharedDevice());\n+\n+        // query to load a user from a different tenant that was used for WPJ\n+        final LabUserQuery query = new LabUserQuery();\n+        query.userType = LabConstants.UserType.FEDERATED;\n+        query.federationProvider = LabConstants.FederationProvider.ADFS_V3;\n+\n+        final String username = LabUserHelper.loadUserForTest(query);\n+        String password = LabConfig.getCurrentLabConfig().getLabUserPassword();\n+\n+        final SingleAccountPublicClientApplication singleAccountPCA =\n+                (SingleAccountPublicClientApplication) mApplication;\n+\n+        // try sign in with an account from a different tenant\n+        // passing null for latch as we don't need to receive the result from this call\n+        // we just want to get into the webview and look for the error in AAD page\n+        singleAccountPCA.signIn(mActivity, username, mScopes, successfulInteractiveCallback(null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acc36652dd8e714abbe27580640df1ced6d083a7"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI1MzY2Nw==", "bodyText": "curious, how does the test case handle MFA prompt?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1110#discussion_r467253667", "createdAt": "2020-08-07T20:27:29Z", "author": {"login": "rpdome"}, "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/local/TestCase497044.java", "diffHunk": "@@ -0,0 +1,115 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.testpass.local;\n+\n+import com.microsoft.identity.client.AcquireTokenParameters;\n+import com.microsoft.identity.client.Prompt;\n+import com.microsoft.identity.client.msal.automationapp.AbstractMsalUiTest;\n+import com.microsoft.identity.client.msal.automationapp.R;\n+import com.microsoft.identity.client.msal.automationapp.interaction.InteractiveRequest;\n+import com.microsoft.identity.client.msal.automationapp.interaction.OnInteractionRequired;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptHandlerParameters;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptParameter;\n+import com.microsoft.identity.client.ui.automation.interaction.microsoftsts.AadPromptHandler;\n+import com.microsoft.identity.internal.testutils.labutils.LabConfig;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserQuery;\n+\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.CountDownLatch;\n+\n+// Interactive auth w/ force_login w/ MFA\n+// https://identitydivision.visualstudio.com/DefaultCollection/DevEx/_workitems/edit/497044\n+public class TestCase497044 extends AbstractMsalUiTest {\n+\n+    @Test\n+    public void test_99652() throws InterruptedException {\n+        final CountDownLatch latch = new CountDownLatch(1);\n+\n+        final AcquireTokenParameters parameters = new AcquireTokenParameters.Builder()\n+                .startAuthorizationFromActivity(mActivity)\n+                .withLoginHint(mLoginHint)\n+                .withScopes(Arrays.asList(mScopes))\n+                .withCallback(successfulInteractiveCallback(latch))\n+                .withPrompt(Prompt.LOGIN)\n+                .build();\n+\n+        // start interactive request in MSAL (should succeed)\n+        final InteractiveRequest interactiveRequest = new InteractiveRequest(\n+                mApplication,\n+                parameters,\n+                new OnInteractionRequired() {\n+                    @Override\n+                    public void handleUserInteraction() {\n+                        final String username = mLoginHint;\n+                        final String password = LabConfig.getCurrentLabConfig().getLabUserPassword();\n+\n+                        final PromptHandlerParameters promptHandlerParameters = PromptHandlerParameters.builder()\n+                                .prompt(PromptParameter.LOGIN)\n+                                .loginHint(mLoginHint)\n+                                .sessionExpected(false)\n+                                .consentPageExpected(false)\n+                                .speedBumpExpected(false)\n+                                .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acc36652dd8e714abbe27580640df1ced6d083a7"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI1NTgwMg==", "bodyText": "nit: can we rename this function to something like \"forwardDeviceTimeForOneHour()\"?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1110#discussion_r467255802", "createdAt": "2020-08-07T20:32:42Z", "author": {"login": "rpdome"}, "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/usgov/TestCase938383.java", "diffHunk": "@@ -0,0 +1,137 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.testpass.usgov;\n+\n+import com.microsoft.identity.client.AcquireTokenParameters;\n+import com.microsoft.identity.client.AcquireTokenSilentParameters;\n+import com.microsoft.identity.client.IAccount;\n+import com.microsoft.identity.client.Prompt;\n+import com.microsoft.identity.client.msal.automationapp.AbstractMsalUiTest;\n+import com.microsoft.identity.client.msal.automationapp.R;\n+import com.microsoft.identity.client.msal.automationapp.interaction.InteractiveRequest;\n+import com.microsoft.identity.client.msal.automationapp.interaction.OnInteractionRequired;\n+import com.microsoft.identity.client.ui.automation.TestContext;\n+import com.microsoft.identity.client.ui.automation.app.IApp;\n+import com.microsoft.identity.client.ui.automation.broker.ITestBroker;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptHandlerParameters;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptParameter;\n+import com.microsoft.identity.client.ui.automation.interaction.microsoftsts.AadPromptHandler;\n+import com.microsoft.identity.internal.testutils.labutils.LabConfig;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserQuery;\n+\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.CountDownLatch;\n+\n+// Silent token acquisition with unexpired RT with USGov authority\n+// https://identitydivision.visualstudio.com/Engineering/_workitems/edit/938383\n+public class TestCase938383 extends AbstractMsalUiTest {\n+\n+    @Test\n+    public void test_938383() throws InterruptedException {\n+        final CountDownLatch latch = new CountDownLatch(1);\n+\n+        final AcquireTokenParameters parameters = new AcquireTokenParameters.Builder()\n+                .startAuthorizationFromActivity(mActivity)\n+                .withScopes(Arrays.asList(mScopes))\n+                .withCallback(successfulInteractiveCallback(latch))\n+                .withPrompt(Prompt.SELECT_ACCOUNT)\n+                .build();\n+\n+        // Start interactive token request in MSAL (should succeed)\n+        final InteractiveRequest interactiveRequest = new InteractiveRequest(\n+                mApplication,\n+                parameters,\n+                new OnInteractionRequired() {\n+                    @Override\n+                    public void handleUserInteraction() {\n+                        ((IApp) mBrowser).handleFirstRun();\n+\n+                        final String username = mLoginHint;\n+                        final String password = LabConfig.getCurrentLabConfig().getLabUserPassword();\n+\n+                        final PromptHandlerParameters promptHandlerParameters = PromptHandlerParameters.builder()\n+                                .prompt(PromptParameter.SELECT_ACCOUNT)\n+                                .loginHint(null)\n+                                .sessionExpected(false)\n+                                .consentPageExpected(false)\n+                                .speedBumpExpected(false)\n+                                .build();\n+\n+                        new AadPromptHandler(promptHandlerParameters)\n+                                .handlePrompt(username, password);\n+                    }\n+                }\n+        );\n+\n+        interactiveRequest.execute();\n+        latch.await();\n+\n+        // change the time on the device\n+        TestContext.getTestContext().getTestDevice().getSettings().changeDeviceTime();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acc36652dd8e714abbe27580640df1ced6d083a7"}, "originalPosition": 93}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c712613d043feac8e3f44611e27d4a4c2a02583", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/8c712613d043feac8e3f44611e27d4a4c2a02583", "committedDate": "2020-08-08T03:17:11Z", "message": "Rename method to change device time"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8557524a7932928e4ca5b9fe506605d3371cce94", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/8557524a7932928e4ca5b9fe506605d3371cce94", "committedDate": "2020-08-08T03:27:02Z", "message": "Address comment about test 796050"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7baac5052d2dae32af293420fdc4fa17d12d434d", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/7baac5052d2dae32af293420fdc4fa17d12d434d", "committedDate": "2020-08-08T03:28:04Z", "message": "Address comment about assert"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f123af6347b54672c611cf772abdddb9bee42936", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/f123af6347b54672c611cf772abdddb9bee42936", "committedDate": "2020-08-08T03:30:27Z", "message": "Merge branch 'dev' into shahzaibj/msal-broker-usgov-test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c66c1bb8227eb7488e8e94a625133f59287d1e87", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/c66c1bb8227eb7488e8e94a625133f59287d1e87", "committedDate": "2020-08-08T03:31:20Z", "message": "Update submodule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "656a99112c58835300c5334fe497592ab55a9433", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/656a99112c58835300c5334fe497592ab55a9433", "committedDate": "2020-08-09T20:05:20Z", "message": "Update submodule"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1235, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}