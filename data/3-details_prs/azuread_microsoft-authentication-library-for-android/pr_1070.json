{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0ODc1MTY0", "number": 1070, "title": "Add single account overload tests", "bodyText": "Single Account PCA provides unique behaviour across each of its methods and overloads such as signIn, signInAgain, acquireToken, signOut etc. In this PR, I've added tests for those overloads.\nRelated PR: AzureAD/microsoft-authentication-library-common-for-android#936", "createdAt": "2020-06-15T23:22:54Z", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1070", "merged": true, "mergeCommit": {"oid": "060fd3df558cbe2409e891d797541baa6e703fe0"}, "closed": true, "closedAt": "2020-06-16T20:40:18Z", "author": {"login": "shahzaibj"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABceaPqbgH2gAyNDM0ODc1MTY0OjY2ZjJhYjI0MDk5OWJhYzRiN2ExOWIzM2Y0MWE5MTE4MjdkZDA3ODE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcr7GS3AH2gAyNDM0ODc1MTY0OmVhMjAxMzJiODBlYTI3NjFhZWU4YTgyYTA0OGNhZDg0ZTA0YmM1Y2I=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "66f2ab240999bac4b7a19b33f41a911827dd0781", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/66f2ab240999bac4b7a19b33f41a911827dd0781", "committedDate": "2020-05-05T20:38:27Z", "message": "Add single account pca overload network tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f375bfe7f30d8b332a38c3c3bf439f6f0c90f7d", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/8f375bfe7f30d8b332a38c3c3bf439f6f0c90f7d", "committedDate": "2020-05-27T00:55:30Z", "message": "Merge branch 'dev' into shahzaibj/single-account-overload-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6783930737a8164fa736b477b50f1fd1830f6c9", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/b6783930737a8164fa736b477b50f1fd1830f6c9", "committedDate": "2020-06-02T00:59:18Z", "message": "Merge branch 'dev' into shahzaibj/single-account-overload-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7f48a974beea98aff60fac2271135ca0eb43681", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/a7f48a974beea98aff60fac2271135ca0eb43681", "committedDate": "2020-06-08T23:16:16Z", "message": "Merge branch 'dev' into shahzaibj/single-account-overload-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40e6685c4e0223839771ce214ecb639b4db129da", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/40e6685c4e0223839771ce214ecb639b4db129da", "committedDate": "2020-06-15T23:07:01Z", "message": "Merge branch 'dev' into shahzaibj/single-account-overload-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec412d7ff2ab033c7f2cac39d0f629e98b5fbc6a", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/ec412d7ff2ab033c7f2cac39d0f629e98b5fbc6a", "committedDate": "2020-06-15T23:22:01Z", "message": "Add mocked tests for single account overloads"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b99d57e4945cab1e9e96f52af24ceabcfd81e78", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/1b99d57e4945cab1e9e96f52af24ceabcfd81e78", "committedDate": "2020-06-15T23:34:57Z", "message": "Remove unused code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1cf9c388866bc759547333c6bc674f0f19ad4be4", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/1cf9c388866bc759547333c6bc674f0f19ad4be4", "committedDate": "2020-06-15T23:35:26Z", "message": "Update submodule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d69f605ed03a32ad5df149fcf2c219aeab02472", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/4d69f605ed03a32ad5df149fcf2c219aeab02472", "committedDate": "2020-06-15T23:40:04Z", "message": "Add back private"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxODMxNTMz", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1070#pullrequestreview-431831533", "createdAt": "2020-06-16T19:36:17Z", "commit": {"oid": "4d69f605ed03a32ad5df149fcf2c219aeab02472"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxOTozNjoxN1rOGkqU5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxOTozNjoxN1rOGkqU5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA5NTM5Ng==", "bodyText": "I see this at the conclusion of a few different tests; would this block make sense to put into an @After block?\n(Also, I can't remember why we need to flush the scheduler here; is this to reset thread state after test?)", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1070#discussion_r441095396", "createdAt": "2020-06-16T19:36:17Z", "author": {"login": "iambmelt"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/SingleAccountOverloadsMockedTest.java", "diffHunk": "@@ -0,0 +1,419 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.tests.mocked;\n+\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.client.Account;\n+import com.microsoft.identity.client.AcquireTokenParameters;\n+import com.microsoft.identity.client.AcquireTokenSilentParameters;\n+import com.microsoft.identity.client.AuthenticationCallback;\n+import com.microsoft.identity.client.IAccount;\n+import com.microsoft.identity.client.IAuthenticationResult;\n+import com.microsoft.identity.client.ISingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.Prompt;\n+import com.microsoft.identity.client.SingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.e2e.shadows.ShadowAuthorityForMockHttpResponse;\n+import com.microsoft.identity.client.e2e.shadows.ShadowHttpRequestForMockedTest;\n+import com.microsoft.identity.client.e2e.shadows.ShadowMsalUtils;\n+import com.microsoft.identity.client.e2e.shadows.ShadowOpenIdProviderConfigurationClient;\n+import com.microsoft.identity.client.e2e.shadows.ShadowStorageHelper;\n+import com.microsoft.identity.client.e2e.tests.AcquireTokenAbstractTest;\n+import com.microsoft.identity.client.e2e.utils.AcquireTokenTestHelper;\n+import com.microsoft.identity.client.e2e.utils.RoboTestUtils;\n+import com.microsoft.identity.client.exception.MsalClientException;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.common.exception.ServiceException;\n+import com.microsoft.identity.common.internal.providers.oauth2.IDToken;\n+import com.microsoft.identity.internal.testutils.MockHttpResponse;\n+import com.microsoft.identity.internal.testutils.TestConstants;\n+import com.microsoft.identity.internal.testutils.TestUtils;\n+import com.microsoft.identity.internal.testutils.mocks.MockServerResponse;\n+import com.microsoft.identity.internal.testutils.mocks.MockTokenCreator;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import edu.emory.mathcs.backport.java.util.Arrays;\n+\n+import static com.microsoft.identity.internal.testutils.TestConstants.Scopes.USER_READ_SCOPE;\n+import static com.microsoft.identity.internal.testutils.mocks.MockTokenCreator.MOCK_PREFERRED_USERNAME_VALUE;\n+import static org.junit.Assert.fail;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(shadows = {\n+        ShadowStorageHelper.class,\n+        ShadowAuthorityForMockHttpResponse.class,\n+        ShadowHttpRequestForMockedTest.class,\n+        ShadowMsalUtils.class,\n+        ShadowOpenIdProviderConfigurationClient.class\n+})\n+public class SingleAccountOverloadsMockedTest extends AcquireTokenAbstractTest {\n+\n+    private SingleAccountPublicClientApplication mSingleAccountPCA;\n+    private String mUsername = MOCK_PREFERRED_USERNAME_VALUE;\n+\n+    @Before\n+    public void setup() {\n+        super.setup();\n+        TestUtils.clearCache(SingleAccountPublicClientApplication.SINGLE_ACCOUNT_CREDENTIAL_SHARED_PREFERENCES);\n+        mSingleAccountPCA = (SingleAccountPublicClientApplication) mApplication;\n+        MockHttpResponse.setHttpResponse(MockServerResponse.getMockTokenSuccessResponse());\n+    }\n+\n+    @Test\n+    public void testSignInOnlyAllowedOnce() {\n+        mSingleAccountPCA.signIn(mActivity, mUsername, mScopes, getSuccessExpectedCallback());\n+        RoboTestUtils.flushScheduler();\n+\n+        mSingleAccountPCA.signIn(mActivity, mUsername, mScopes, getInvalidParameterExpectedCallback());\n+    }\n+\n+    @Test\n+    public void testSignInWithPromptOnlyAllowedOnce() {\n+        mSingleAccountPCA.signIn(mActivity, mUsername, mScopes, Prompt.LOGIN, getSuccessExpectedCallback());\n+        RoboTestUtils.flushScheduler();\n+\n+        mSingleAccountPCA.signIn(mActivity, mUsername, mScopes, Prompt.LOGIN, getInvalidParameterExpectedCallback());\n+    }\n+\n+    @Test\n+    public void testSignInAgainAllowsSignInAgain() {\n+        mSingleAccountPCA.signIn(mActivity, mUsername, mScopes, getSuccessExpectedCallback());\n+        RoboTestUtils.flushScheduler();\n+\n+        mSingleAccountPCA.signInAgain(mActivity, mScopes, Prompt.LOGIN, getSuccessExpectedCallback());\n+        RoboTestUtils.flushScheduler();\n+    }\n+\n+    @Test\n+    public void testCannotSignInAgainIfNeverSignedInBefore() {\n+        mSingleAccountPCA.signInAgain(mActivity, mScopes, Prompt.LOGIN, getNoCurrentAccountExpectedCallback());\n+    }\n+\n+    @Test\n+    public void testCanSignOutIfAlreadySignedIn() {\n+        mSingleAccountPCA.signIn(mActivity, mUsername, mScopes, getSuccessExpectedCallback());\n+        RoboTestUtils.flushScheduler();\n+\n+        mSingleAccountPCA.signOut(new ISingleAccountPublicClientApplication.SignOutCallback() {\n+            @Override\n+            public void onSignOut() {\n+                Assert.assertTrue(\"Successfully signed out\", true);\n+            }\n+\n+            @Override\n+            public void onError(@NonNull MsalException exception) {\n+                fail(exception.getMessage());\n+            }\n+        });\n+\n+        RoboTestUtils.flushScheduler();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d69f605ed03a32ad5df149fcf2c219aeab02472"}, "originalPosition": 138}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxODMxODc3", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1070#pullrequestreview-431831877", "createdAt": "2020-06-16T19:36:51Z", "commit": {"oid": "4d69f605ed03a32ad5df149fcf2c219aeab02472"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxODM1MzQ0", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1070#pullrequestreview-431835344", "createdAt": "2020-06-16T19:42:07Z", "commit": {"oid": "4d69f605ed03a32ad5df149fcf2c219aeab02472"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea20132b80ea2761aee8a82a048cad84e04bc5cb", "author": {"user": {"login": "shahzaibj", "name": "Shahzaib"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/ea20132b80ea2761aee8a82a048cad84e04bc5cb", "committedDate": "2020-06-16T20:16:06Z", "message": "Update submodule"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1349, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}