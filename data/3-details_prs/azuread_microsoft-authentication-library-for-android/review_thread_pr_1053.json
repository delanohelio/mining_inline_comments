{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzNTQ1MTIx", "number": 1053, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxOToxNDowNlrOEAPYFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToyOTo0M1rOECnZJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4Njg3MzgwOnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerContentProviderStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxOToxNDowNlrOGbZgdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxOToyOTozM1rOGbaIIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM4MjY0NQ==", "bodyText": "since we have specific broker request classes now for other operations such as hello, remove account etc. I would suggest renaming BrokerRequest.java to something like BrokerSilentTokenRequest.java as I believe this will now be only used for silent token requests?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053#discussion_r431382645", "createdAt": "2020-05-27T19:14:06Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerContentProviderStrategy.java", "diffHunk": "@@ -0,0 +1,487 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.internal.controllers;\n+\n+import android.content.Context;\n+import android.content.Intent;\n+import android.database.Cursor;\n+import android.net.Uri;\n+import android.os.Bundle;\n+\n+import com.google.gson.Gson;\n+import com.microsoft.identity.client.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.adal.internal.AuthenticationConstants;\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.internal.broker.BrokerRequest;\n+import com.microsoft.identity.common.internal.broker.BrokerValidator;\n+import com.microsoft.identity.common.internal.cache.ICacheRecord;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.InteractiveTokenCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.RemoveAccountCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.SilentTokenCommandParameters;\n+import com.microsoft.identity.common.internal.logging.Logger;\n+import com.microsoft.identity.common.internal.result.AcquireTokenResult;\n+import com.microsoft.identity.common.internal.telemetry.Telemetry;\n+import com.microsoft.identity.common.internal.telemetry.TelemetryEventStrings;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerEndEvent;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerStartEvent;\n+\n+import java.util.List;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.Broker.BROKER_ACTIVITY_NAME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.Broker.BROKER_PACKAGE_NAME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_SILENT_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.AUTHORITY;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.CONTENT_SCHEME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_CURRENT_ACCOUNT_SHARED_DEVICe_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_DEVICE_MODE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.HELLO_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.REMOVE_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.SIGN_OUT_FROM_SHARED_DEVICE_PATH;\n+\n+public class BrokerContentProviderStrategy extends BrokerBaseStrategy {\n+\n+    private static final String TAG = BrokerContentProviderStrategy.class.getName();\n+\n+    public interface ContentProviderOperation<T extends CommandParameters, U> {\n+\n+        /**\n+         * Constructs and returns a data string for the request to the broker from the CommandParameters.\n+         */\n+        @Nullable\n+        String getRequestString(T parameters);\n+\n+        /**\n+         * Returns a String[] with options to be sent to the broker.\n+         * Currently we only send negotiatedBrokerProtocolVersion if available.\n+         *\n+         * @return\n+         */\n+        @Nullable\n+        String[] getOptions();\n+\n+        /**\n+         * Name of task for logging and telemetry purposes\n+         */\n+        @NonNull\n+        String getMethodName();\n+\n+        /**\n+         * Uri path for specific broker operation\n+         */\n+        @NonNull\n+        String getUriPath();\n+\n+        /**\n+         * Constructs and returns the result from the request bundle returned by the broker.\n+         */\n+        @NonNull\n+        U getResultFromBundle(Bundle resultBundle) throws BaseException;\n+    }\n+\n+    private <T extends CommandParameters, U> U performContentProviderOperation(\n+            @NonNull final T parameters,\n+            @NonNull final ContentProviderOperation<T, U> contentProviderOperation) throws BaseException {\n+\n+        final String methodName = contentProviderOperation.getMethodName();\n+\n+        Telemetry.emit(\n+                new BrokerStartEvent()\n+                        .putAction(methodName)\n+                        .putStrategy(TelemetryEventStrings.Value.CONTENT_PROVIDER)\n+        );\n+        final Uri uri = getContentProviderURI(\n+                parameters.getAndroidApplicationContext(),\n+                contentProviderOperation.getUriPath()\n+        );\n+        Logger.info(TAG + methodName, \"Request to BrokerContentProvider for uri path \" +\n+                contentProviderOperation.getUriPath()\n+        );\n+        final Cursor cursor = parameters.getAndroidApplicationContext().getContentResolver().query(\n+                uri,\n+                contentProviderOperation.getOptions(),\n+                contentProviderOperation.getRequestString(parameters),\n+                null,\n+                null\n+        );\n+\n+        if (cursor != null) {\n+            final U result = contentProviderOperation.getResultFromBundle(cursor.getExtras());\n+            cursor.close();\n+            Telemetry.emit(\n+                    new BrokerEndEvent()\n+                            .putAction(methodName)\n+                            .isSuccessful(true)\n+            );\n+            Logger.info(TAG + methodName, \"Received successful result from broker\");\n+            return result;\n+        } else {\n+            final String message = \"Failed to get result from Broker Content Provider, cursor is null\";\n+            Logger.error(TAG + methodName, message, null);\n+            Telemetry.emit(\n+                    new BrokerEndEvent()\n+                            .putAction(methodName)\n+                            .isSuccessful(false)\n+                            .putErrorDescription(message)\n+            );\n+            throw new BrokerCommunicationException(message, null);\n+        }\n+    }\n+\n+    @Override\n+    String hello(@NonNull CommandParameters parameters) throws BaseException {\n+        final String methodName = \"helloWithContentProvider\";\n+\n+        return performContentProviderOperation(parameters, new ContentProviderOperation<CommandParameters, String>() {\n+            @Override\n+            public String getRequestString(CommandParameters parameters) {\n+                return mRequestAdapter.getRequestStringForHello(parameters);\n+            }\n+\n+            @Override\n+            public String[] getOptions() {\n+                return null; // no additional options to be sent for hello\n+            }\n+\n+            @Override\n+            public String getMethodName() {\n+                return methodName;\n+            }\n+\n+            @Override\n+            public String getUriPath() {\n+                return HELLO_PATH;\n+            }\n+\n+            @Override\n+            public String getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                return mResultAdapter.verifyHelloFromResultBundle(resultBundle);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    Intent getBrokerAuthorizationIntent(@NonNull final InteractiveTokenCommandParameters parameters,\n+                                        @Nullable final String negotiatedBrokerProtocolVersion)\n+            throws BaseException {\n+        final String methodName = \"getBrokerAuthorizationIntentForContentProvider\";\n+\n+        return performContentProviderOperation(parameters, new ContentProviderOperation<InteractiveTokenCommandParameters, Intent>() {\n+\n+            @Override\n+            public String getRequestString(InteractiveTokenCommandParameters parameters) {\n+                return null; // broker returns us an intent based on calling uid , no request string needed\n+            }\n+\n+            @Override\n+            public String[] getOptions() {\n+                return new String[]{negotiatedBrokerProtocolVersion};\n+            }\n+\n+            @Override\n+            public String getMethodName() {\n+                return methodName;\n+            }\n+\n+            @Override\n+            public String getUriPath() {\n+                return ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+            }\n+\n+            @Override\n+            public Intent getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                final Bundle requestBundle = mRequestAdapter.getRequestBundleForAcquireTokenInteractive(\n+                        parameters,\n+                        negotiatedBrokerProtocolVersion\n+                );\n+                Intent interactiveRequestIntent = new Intent();\n+                interactiveRequestIntent.putExtras(requestBundle);\n+                interactiveRequestIntent.putExtras(resultBundle);\n+                interactiveRequestIntent.setPackage(resultBundle.getString(BROKER_PACKAGE_NAME));\n+                interactiveRequestIntent.setClassName(\n+                        resultBundle.getString(BROKER_PACKAGE_NAME, \"\"),\n+                        resultBundle.getString(BROKER_ACTIVITY_NAME, \"\")\n+                );\n+                interactiveRequestIntent.putExtra(\n+                        AuthenticationConstants.Broker.NEGOTIATED_BP_VERSION_KEY,\n+                        negotiatedBrokerProtocolVersion\n+                );\n+                return interactiveRequestIntent;\n+            }\n+        });\n+    }\n+\n+    @Override\n+    AcquireTokenResult acquireTokenSilent(@NonNull final SilentTokenCommandParameters parameters,\n+                                          @Nullable final String negotiatedBrokerProtocolVersion)\n+            throws BaseException {\n+        final String methodName = \"acquireTokenSilentWithContentProvider\";\n+\n+        return performContentProviderOperation(\n+                parameters,\n+                new ContentProviderOperation<SilentTokenCommandParameters, AcquireTokenResult>() {\n+                    @Nullable\n+                    @Override\n+                    public String getRequestString(SilentTokenCommandParameters parameters) {\n+                        final BrokerRequest brokerRequest = mRequestAdapter.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7899bcaa59d3a9fc5b7de645c6eb073bf9b660d6"}, "originalPosition": 251}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5MjgwMg==", "bodyText": "BrokerRequest will be used to pass all the request parameters for both silent and interactive requests. Given we need to support back compat with old MSAL and old brokers. I am not inclined  to split and create two new classes for silent and interactive , so leaving as - is", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053#discussion_r431392802", "createdAt": "2020-05-27T19:29:33Z", "author": {"login": "kreedula"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerContentProviderStrategy.java", "diffHunk": "@@ -0,0 +1,487 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.internal.controllers;\n+\n+import android.content.Context;\n+import android.content.Intent;\n+import android.database.Cursor;\n+import android.net.Uri;\n+import android.os.Bundle;\n+\n+import com.google.gson.Gson;\n+import com.microsoft.identity.client.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.adal.internal.AuthenticationConstants;\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.internal.broker.BrokerRequest;\n+import com.microsoft.identity.common.internal.broker.BrokerValidator;\n+import com.microsoft.identity.common.internal.cache.ICacheRecord;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.InteractiveTokenCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.RemoveAccountCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.SilentTokenCommandParameters;\n+import com.microsoft.identity.common.internal.logging.Logger;\n+import com.microsoft.identity.common.internal.result.AcquireTokenResult;\n+import com.microsoft.identity.common.internal.telemetry.Telemetry;\n+import com.microsoft.identity.common.internal.telemetry.TelemetryEventStrings;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerEndEvent;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerStartEvent;\n+\n+import java.util.List;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.Broker.BROKER_ACTIVITY_NAME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.Broker.BROKER_PACKAGE_NAME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_SILENT_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.AUTHORITY;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.CONTENT_SCHEME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_CURRENT_ACCOUNT_SHARED_DEVICe_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_DEVICE_MODE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.HELLO_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.REMOVE_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.SIGN_OUT_FROM_SHARED_DEVICE_PATH;\n+\n+public class BrokerContentProviderStrategy extends BrokerBaseStrategy {\n+\n+    private static final String TAG = BrokerContentProviderStrategy.class.getName();\n+\n+    public interface ContentProviderOperation<T extends CommandParameters, U> {\n+\n+        /**\n+         * Constructs and returns a data string for the request to the broker from the CommandParameters.\n+         */\n+        @Nullable\n+        String getRequestString(T parameters);\n+\n+        /**\n+         * Returns a String[] with options to be sent to the broker.\n+         * Currently we only send negotiatedBrokerProtocolVersion if available.\n+         *\n+         * @return\n+         */\n+        @Nullable\n+        String[] getOptions();\n+\n+        /**\n+         * Name of task for logging and telemetry purposes\n+         */\n+        @NonNull\n+        String getMethodName();\n+\n+        /**\n+         * Uri path for specific broker operation\n+         */\n+        @NonNull\n+        String getUriPath();\n+\n+        /**\n+         * Constructs and returns the result from the request bundle returned by the broker.\n+         */\n+        @NonNull\n+        U getResultFromBundle(Bundle resultBundle) throws BaseException;\n+    }\n+\n+    private <T extends CommandParameters, U> U performContentProviderOperation(\n+            @NonNull final T parameters,\n+            @NonNull final ContentProviderOperation<T, U> contentProviderOperation) throws BaseException {\n+\n+        final String methodName = contentProviderOperation.getMethodName();\n+\n+        Telemetry.emit(\n+                new BrokerStartEvent()\n+                        .putAction(methodName)\n+                        .putStrategy(TelemetryEventStrings.Value.CONTENT_PROVIDER)\n+        );\n+        final Uri uri = getContentProviderURI(\n+                parameters.getAndroidApplicationContext(),\n+                contentProviderOperation.getUriPath()\n+        );\n+        Logger.info(TAG + methodName, \"Request to BrokerContentProvider for uri path \" +\n+                contentProviderOperation.getUriPath()\n+        );\n+        final Cursor cursor = parameters.getAndroidApplicationContext().getContentResolver().query(\n+                uri,\n+                contentProviderOperation.getOptions(),\n+                contentProviderOperation.getRequestString(parameters),\n+                null,\n+                null\n+        );\n+\n+        if (cursor != null) {\n+            final U result = contentProviderOperation.getResultFromBundle(cursor.getExtras());\n+            cursor.close();\n+            Telemetry.emit(\n+                    new BrokerEndEvent()\n+                            .putAction(methodName)\n+                            .isSuccessful(true)\n+            );\n+            Logger.info(TAG + methodName, \"Received successful result from broker\");\n+            return result;\n+        } else {\n+            final String message = \"Failed to get result from Broker Content Provider, cursor is null\";\n+            Logger.error(TAG + methodName, message, null);\n+            Telemetry.emit(\n+                    new BrokerEndEvent()\n+                            .putAction(methodName)\n+                            .isSuccessful(false)\n+                            .putErrorDescription(message)\n+            );\n+            throw new BrokerCommunicationException(message, null);\n+        }\n+    }\n+\n+    @Override\n+    String hello(@NonNull CommandParameters parameters) throws BaseException {\n+        final String methodName = \"helloWithContentProvider\";\n+\n+        return performContentProviderOperation(parameters, new ContentProviderOperation<CommandParameters, String>() {\n+            @Override\n+            public String getRequestString(CommandParameters parameters) {\n+                return mRequestAdapter.getRequestStringForHello(parameters);\n+            }\n+\n+            @Override\n+            public String[] getOptions() {\n+                return null; // no additional options to be sent for hello\n+            }\n+\n+            @Override\n+            public String getMethodName() {\n+                return methodName;\n+            }\n+\n+            @Override\n+            public String getUriPath() {\n+                return HELLO_PATH;\n+            }\n+\n+            @Override\n+            public String getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                return mResultAdapter.verifyHelloFromResultBundle(resultBundle);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    Intent getBrokerAuthorizationIntent(@NonNull final InteractiveTokenCommandParameters parameters,\n+                                        @Nullable final String negotiatedBrokerProtocolVersion)\n+            throws BaseException {\n+        final String methodName = \"getBrokerAuthorizationIntentForContentProvider\";\n+\n+        return performContentProviderOperation(parameters, new ContentProviderOperation<InteractiveTokenCommandParameters, Intent>() {\n+\n+            @Override\n+            public String getRequestString(InteractiveTokenCommandParameters parameters) {\n+                return null; // broker returns us an intent based on calling uid , no request string needed\n+            }\n+\n+            @Override\n+            public String[] getOptions() {\n+                return new String[]{negotiatedBrokerProtocolVersion};\n+            }\n+\n+            @Override\n+            public String getMethodName() {\n+                return methodName;\n+            }\n+\n+            @Override\n+            public String getUriPath() {\n+                return ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+            }\n+\n+            @Override\n+            public Intent getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                final Bundle requestBundle = mRequestAdapter.getRequestBundleForAcquireTokenInteractive(\n+                        parameters,\n+                        negotiatedBrokerProtocolVersion\n+                );\n+                Intent interactiveRequestIntent = new Intent();\n+                interactiveRequestIntent.putExtras(requestBundle);\n+                interactiveRequestIntent.putExtras(resultBundle);\n+                interactiveRequestIntent.setPackage(resultBundle.getString(BROKER_PACKAGE_NAME));\n+                interactiveRequestIntent.setClassName(\n+                        resultBundle.getString(BROKER_PACKAGE_NAME, \"\"),\n+                        resultBundle.getString(BROKER_ACTIVITY_NAME, \"\")\n+                );\n+                interactiveRequestIntent.putExtra(\n+                        AuthenticationConstants.Broker.NEGOTIATED_BP_VERSION_KEY,\n+                        negotiatedBrokerProtocolVersion\n+                );\n+                return interactiveRequestIntent;\n+            }\n+        });\n+    }\n+\n+    @Override\n+    AcquireTokenResult acquireTokenSilent(@NonNull final SilentTokenCommandParameters parameters,\n+                                          @Nullable final String negotiatedBrokerProtocolVersion)\n+            throws BaseException {\n+        final String methodName = \"acquireTokenSilentWithContentProvider\";\n+\n+        return performContentProviderOperation(\n+                parameters,\n+                new ContentProviderOperation<SilentTokenCommandParameters, AcquireTokenResult>() {\n+                    @Nullable\n+                    @Override\n+                    public String getRequestString(SilentTokenCommandParameters parameters) {\n+                        final BrokerRequest brokerRequest = mRequestAdapter.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM4MjY0NQ=="}, "originalCommit": {"oid": "7899bcaa59d3a9fc5b7de645c6eb073bf9b660d6"}, "originalPosition": 251}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4Njg5MDc1OnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerContentProviderStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxOToxNzoxOFrOGbZqvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxOTozMTo0NlrOGbaNGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM4NTI3OA==", "bodyText": "Having null seems confusing and seems like nothing is being sent to the broker. I believe this is NULL because the only thing we are sending is basically telling the broker that we need to get the device mode? and due to the nature of the get device mode command, it doesn't need any additional parameters to be sent along unlike other operations such as remove account?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053#discussion_r431385278", "createdAt": "2020-05-27T19:17:18Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerContentProviderStrategy.java", "diffHunk": "@@ -0,0 +1,487 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.internal.controllers;\n+\n+import android.content.Context;\n+import android.content.Intent;\n+import android.database.Cursor;\n+import android.net.Uri;\n+import android.os.Bundle;\n+\n+import com.google.gson.Gson;\n+import com.microsoft.identity.client.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.adal.internal.AuthenticationConstants;\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.internal.broker.BrokerRequest;\n+import com.microsoft.identity.common.internal.broker.BrokerValidator;\n+import com.microsoft.identity.common.internal.cache.ICacheRecord;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.InteractiveTokenCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.RemoveAccountCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.SilentTokenCommandParameters;\n+import com.microsoft.identity.common.internal.logging.Logger;\n+import com.microsoft.identity.common.internal.result.AcquireTokenResult;\n+import com.microsoft.identity.common.internal.telemetry.Telemetry;\n+import com.microsoft.identity.common.internal.telemetry.TelemetryEventStrings;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerEndEvent;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerStartEvent;\n+\n+import java.util.List;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.Broker.BROKER_ACTIVITY_NAME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.Broker.BROKER_PACKAGE_NAME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_SILENT_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.AUTHORITY;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.CONTENT_SCHEME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_CURRENT_ACCOUNT_SHARED_DEVICe_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_DEVICE_MODE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.HELLO_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.REMOVE_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.SIGN_OUT_FROM_SHARED_DEVICE_PATH;\n+\n+public class BrokerContentProviderStrategy extends BrokerBaseStrategy {\n+\n+    private static final String TAG = BrokerContentProviderStrategy.class.getName();\n+\n+    public interface ContentProviderOperation<T extends CommandParameters, U> {\n+\n+        /**\n+         * Constructs and returns a data string for the request to the broker from the CommandParameters.\n+         */\n+        @Nullable\n+        String getRequestString(T parameters);\n+\n+        /**\n+         * Returns a String[] with options to be sent to the broker.\n+         * Currently we only send negotiatedBrokerProtocolVersion if available.\n+         *\n+         * @return\n+         */\n+        @Nullable\n+        String[] getOptions();\n+\n+        /**\n+         * Name of task for logging and telemetry purposes\n+         */\n+        @NonNull\n+        String getMethodName();\n+\n+        /**\n+         * Uri path for specific broker operation\n+         */\n+        @NonNull\n+        String getUriPath();\n+\n+        /**\n+         * Constructs and returns the result from the request bundle returned by the broker.\n+         */\n+        @NonNull\n+        U getResultFromBundle(Bundle resultBundle) throws BaseException;\n+    }\n+\n+    private <T extends CommandParameters, U> U performContentProviderOperation(\n+            @NonNull final T parameters,\n+            @NonNull final ContentProviderOperation<T, U> contentProviderOperation) throws BaseException {\n+\n+        final String methodName = contentProviderOperation.getMethodName();\n+\n+        Telemetry.emit(\n+                new BrokerStartEvent()\n+                        .putAction(methodName)\n+                        .putStrategy(TelemetryEventStrings.Value.CONTENT_PROVIDER)\n+        );\n+        final Uri uri = getContentProviderURI(\n+                parameters.getAndroidApplicationContext(),\n+                contentProviderOperation.getUriPath()\n+        );\n+        Logger.info(TAG + methodName, \"Request to BrokerContentProvider for uri path \" +\n+                contentProviderOperation.getUriPath()\n+        );\n+        final Cursor cursor = parameters.getAndroidApplicationContext().getContentResolver().query(\n+                uri,\n+                contentProviderOperation.getOptions(),\n+                contentProviderOperation.getRequestString(parameters),\n+                null,\n+                null\n+        );\n+\n+        if (cursor != null) {\n+            final U result = contentProviderOperation.getResultFromBundle(cursor.getExtras());\n+            cursor.close();\n+            Telemetry.emit(\n+                    new BrokerEndEvent()\n+                            .putAction(methodName)\n+                            .isSuccessful(true)\n+            );\n+            Logger.info(TAG + methodName, \"Received successful result from broker\");\n+            return result;\n+        } else {\n+            final String message = \"Failed to get result from Broker Content Provider, cursor is null\";\n+            Logger.error(TAG + methodName, message, null);\n+            Telemetry.emit(\n+                    new BrokerEndEvent()\n+                            .putAction(methodName)\n+                            .isSuccessful(false)\n+                            .putErrorDescription(message)\n+            );\n+            throw new BrokerCommunicationException(message, null);\n+        }\n+    }\n+\n+    @Override\n+    String hello(@NonNull CommandParameters parameters) throws BaseException {\n+        final String methodName = \"helloWithContentProvider\";\n+\n+        return performContentProviderOperation(parameters, new ContentProviderOperation<CommandParameters, String>() {\n+            @Override\n+            public String getRequestString(CommandParameters parameters) {\n+                return mRequestAdapter.getRequestStringForHello(parameters);\n+            }\n+\n+            @Override\n+            public String[] getOptions() {\n+                return null; // no additional options to be sent for hello\n+            }\n+\n+            @Override\n+            public String getMethodName() {\n+                return methodName;\n+            }\n+\n+            @Override\n+            public String getUriPath() {\n+                return HELLO_PATH;\n+            }\n+\n+            @Override\n+            public String getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                return mResultAdapter.verifyHelloFromResultBundle(resultBundle);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    Intent getBrokerAuthorizationIntent(@NonNull final InteractiveTokenCommandParameters parameters,\n+                                        @Nullable final String negotiatedBrokerProtocolVersion)\n+            throws BaseException {\n+        final String methodName = \"getBrokerAuthorizationIntentForContentProvider\";\n+\n+        return performContentProviderOperation(parameters, new ContentProviderOperation<InteractiveTokenCommandParameters, Intent>() {\n+\n+            @Override\n+            public String getRequestString(InteractiveTokenCommandParameters parameters) {\n+                return null; // broker returns us an intent based on calling uid , no request string needed\n+            }\n+\n+            @Override\n+            public String[] getOptions() {\n+                return new String[]{negotiatedBrokerProtocolVersion};\n+            }\n+\n+            @Override\n+            public String getMethodName() {\n+                return methodName;\n+            }\n+\n+            @Override\n+            public String getUriPath() {\n+                return ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+            }\n+\n+            @Override\n+            public Intent getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                final Bundle requestBundle = mRequestAdapter.getRequestBundleForAcquireTokenInteractive(\n+                        parameters,\n+                        negotiatedBrokerProtocolVersion\n+                );\n+                Intent interactiveRequestIntent = new Intent();\n+                interactiveRequestIntent.putExtras(requestBundle);\n+                interactiveRequestIntent.putExtras(resultBundle);\n+                interactiveRequestIntent.setPackage(resultBundle.getString(BROKER_PACKAGE_NAME));\n+                interactiveRequestIntent.setClassName(\n+                        resultBundle.getString(BROKER_PACKAGE_NAME, \"\"),\n+                        resultBundle.getString(BROKER_ACTIVITY_NAME, \"\")\n+                );\n+                interactiveRequestIntent.putExtra(\n+                        AuthenticationConstants.Broker.NEGOTIATED_BP_VERSION_KEY,\n+                        negotiatedBrokerProtocolVersion\n+                );\n+                return interactiveRequestIntent;\n+            }\n+        });\n+    }\n+\n+    @Override\n+    AcquireTokenResult acquireTokenSilent(@NonNull final SilentTokenCommandParameters parameters,\n+                                          @Nullable final String negotiatedBrokerProtocolVersion)\n+            throws BaseException {\n+        final String methodName = \"acquireTokenSilentWithContentProvider\";\n+\n+        return performContentProviderOperation(\n+                parameters,\n+                new ContentProviderOperation<SilentTokenCommandParameters, AcquireTokenResult>() {\n+                    @Nullable\n+                    @Override\n+                    public String getRequestString(SilentTokenCommandParameters parameters) {\n+                        final BrokerRequest brokerRequest = mRequestAdapter.\n+                                brokerRequestFromSilentOperationParameters(parameters);\n+                        return new Gson().toJson(brokerRequest);\n+                    }\n+\n+                    @Nullable\n+                    @Override\n+                    public String[] getOptions() {\n+                        return new String[]{negotiatedBrokerProtocolVersion};\n+                    }\n+\n+                    @NonNull\n+                    @Override\n+                    public String getMethodName() {\n+                        return methodName;\n+                    }\n+\n+                    @NonNull\n+                    @Override\n+                    public String getUriPath() {\n+                        return ACQUIRE_TOKEN_SILENT_PATH;\n+                    }\n+\n+                    @NonNull\n+                    @Override\n+                    public AcquireTokenResult getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                        return mResultAdapter.getAcquireTokenResultFromResultBundle(resultBundle);\n+                    }\n+                });\n+    }\n+\n+    @Override\n+    List<ICacheRecord> getBrokerAccounts(@NonNull final CommandParameters parameters,\n+                                         @Nullable final String negotiatedBrokerProtocolVersion) throws BaseException {\n+        final String methodName = \"getBrokerAccountsWithContentProvider\";\n+        return performContentProviderOperation(\n+                parameters,\n+                new ContentProviderOperation<CommandParameters, List<ICacheRecord>>() {\n+            @Nullable\n+            @Override\n+            public String getRequestString(CommandParameters parameters) {\n+                return mRequestAdapter.getRequestStringForGetAccounts(parameters);\n+            }\n+\n+            @Nullable\n+            @Override\n+            public String[] getOptions() {\n+                return new String[]{negotiatedBrokerProtocolVersion};\n+            }\n+\n+            @NonNull\n+            @Override\n+            public String getMethodName() {\n+                return methodName;\n+            }\n+\n+            @NonNull\n+            @Override\n+            public String getUriPath() {\n+                return GET_ACCOUNTS_PATH;\n+            }\n+\n+            @NonNull\n+            @Override\n+            public List<ICacheRecord> getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                return mResultAdapter.getAccountsFromResultBundle(resultBundle);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    void removeBrokerAccount(@NonNull final RemoveAccountCommandParameters parameters,\n+                             @Nullable final String negotiatedBrokerProtocolVersion) throws BaseException {\n+\n+        final String methodName = \"removeBrokerAccountWithContentProvider\";\n+\n+        performContentProviderOperation(\n+                parameters,\n+                new ContentProviderOperation<RemoveAccountCommandParameters, Void>() {\n+            @Nullable\n+            @Override\n+            public String getRequestString(RemoveAccountCommandParameters parameters) {\n+                return mRequestAdapter.getRequestStringForRemoveAccount(parameters);\n+            }\n+\n+            @Nullable\n+            @Override\n+            public String[] getOptions() {\n+                return new String[]{negotiatedBrokerProtocolVersion};\n+            }\n+\n+            @NonNull\n+            @Override\n+            public String getMethodName() {\n+                return methodName;\n+            }\n+\n+            @NonNull\n+            @Override\n+            public String getUriPath() {\n+                return REMOVE_ACCOUNTS_PATH;\n+            }\n+\n+            @NonNull\n+            @Override\n+            public Void getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                mResultAdapter.verifyRemoveAccountResultFromBundle(resultBundle);\n+                return null;\n+            }\n+        });\n+    }\n+\n+    @Override\n+    boolean getDeviceMode(@NonNull final CommandParameters parameters,\n+                          @Nullable final String negotiatedBrokerProtocolVersion) throws BaseException {\n+        final String methodName = \"getDeviceModeWithContentProvider\";\n+        return performContentProviderOperation(\n+                parameters,\n+                new ContentProviderOperation<CommandParameters, Boolean>() {\n+\n+            @Nullable\n+            @Override\n+            public String getRequestString(CommandParameters parameters) {\n+                return null; // broker returns a boolean to indicate the device mode, no request string needed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7899bcaa59d3a9fc5b7de645c6eb073bf9b660d6"}, "originalPosition": 374}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5NDA3Mw==", "bodyText": "Yes, requestString is different from requestOperation in itself. There could be operations to broker which doesn't need any additional request data to be passed , like getDeviceMode here. But the interface is common for all the operations , hence I tagged this with Nullable", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053#discussion_r431394073", "createdAt": "2020-05-27T19:31:46Z", "author": {"login": "kreedula"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerContentProviderStrategy.java", "diffHunk": "@@ -0,0 +1,487 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.internal.controllers;\n+\n+import android.content.Context;\n+import android.content.Intent;\n+import android.database.Cursor;\n+import android.net.Uri;\n+import android.os.Bundle;\n+\n+import com.google.gson.Gson;\n+import com.microsoft.identity.client.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.adal.internal.AuthenticationConstants;\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.internal.broker.BrokerRequest;\n+import com.microsoft.identity.common.internal.broker.BrokerValidator;\n+import com.microsoft.identity.common.internal.cache.ICacheRecord;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.InteractiveTokenCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.RemoveAccountCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.SilentTokenCommandParameters;\n+import com.microsoft.identity.common.internal.logging.Logger;\n+import com.microsoft.identity.common.internal.result.AcquireTokenResult;\n+import com.microsoft.identity.common.internal.telemetry.Telemetry;\n+import com.microsoft.identity.common.internal.telemetry.TelemetryEventStrings;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerEndEvent;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerStartEvent;\n+\n+import java.util.List;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.Broker.BROKER_ACTIVITY_NAME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.Broker.BROKER_PACKAGE_NAME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_SILENT_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.AUTHORITY;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.CONTENT_SCHEME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_CURRENT_ACCOUNT_SHARED_DEVICe_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_DEVICE_MODE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.HELLO_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.REMOVE_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.SIGN_OUT_FROM_SHARED_DEVICE_PATH;\n+\n+public class BrokerContentProviderStrategy extends BrokerBaseStrategy {\n+\n+    private static final String TAG = BrokerContentProviderStrategy.class.getName();\n+\n+    public interface ContentProviderOperation<T extends CommandParameters, U> {\n+\n+        /**\n+         * Constructs and returns a data string for the request to the broker from the CommandParameters.\n+         */\n+        @Nullable\n+        String getRequestString(T parameters);\n+\n+        /**\n+         * Returns a String[] with options to be sent to the broker.\n+         * Currently we only send negotiatedBrokerProtocolVersion if available.\n+         *\n+         * @return\n+         */\n+        @Nullable\n+        String[] getOptions();\n+\n+        /**\n+         * Name of task for logging and telemetry purposes\n+         */\n+        @NonNull\n+        String getMethodName();\n+\n+        /**\n+         * Uri path for specific broker operation\n+         */\n+        @NonNull\n+        String getUriPath();\n+\n+        /**\n+         * Constructs and returns the result from the request bundle returned by the broker.\n+         */\n+        @NonNull\n+        U getResultFromBundle(Bundle resultBundle) throws BaseException;\n+    }\n+\n+    private <T extends CommandParameters, U> U performContentProviderOperation(\n+            @NonNull final T parameters,\n+            @NonNull final ContentProviderOperation<T, U> contentProviderOperation) throws BaseException {\n+\n+        final String methodName = contentProviderOperation.getMethodName();\n+\n+        Telemetry.emit(\n+                new BrokerStartEvent()\n+                        .putAction(methodName)\n+                        .putStrategy(TelemetryEventStrings.Value.CONTENT_PROVIDER)\n+        );\n+        final Uri uri = getContentProviderURI(\n+                parameters.getAndroidApplicationContext(),\n+                contentProviderOperation.getUriPath()\n+        );\n+        Logger.info(TAG + methodName, \"Request to BrokerContentProvider for uri path \" +\n+                contentProviderOperation.getUriPath()\n+        );\n+        final Cursor cursor = parameters.getAndroidApplicationContext().getContentResolver().query(\n+                uri,\n+                contentProviderOperation.getOptions(),\n+                contentProviderOperation.getRequestString(parameters),\n+                null,\n+                null\n+        );\n+\n+        if (cursor != null) {\n+            final U result = contentProviderOperation.getResultFromBundle(cursor.getExtras());\n+            cursor.close();\n+            Telemetry.emit(\n+                    new BrokerEndEvent()\n+                            .putAction(methodName)\n+                            .isSuccessful(true)\n+            );\n+            Logger.info(TAG + methodName, \"Received successful result from broker\");\n+            return result;\n+        } else {\n+            final String message = \"Failed to get result from Broker Content Provider, cursor is null\";\n+            Logger.error(TAG + methodName, message, null);\n+            Telemetry.emit(\n+                    new BrokerEndEvent()\n+                            .putAction(methodName)\n+                            .isSuccessful(false)\n+                            .putErrorDescription(message)\n+            );\n+            throw new BrokerCommunicationException(message, null);\n+        }\n+    }\n+\n+    @Override\n+    String hello(@NonNull CommandParameters parameters) throws BaseException {\n+        final String methodName = \"helloWithContentProvider\";\n+\n+        return performContentProviderOperation(parameters, new ContentProviderOperation<CommandParameters, String>() {\n+            @Override\n+            public String getRequestString(CommandParameters parameters) {\n+                return mRequestAdapter.getRequestStringForHello(parameters);\n+            }\n+\n+            @Override\n+            public String[] getOptions() {\n+                return null; // no additional options to be sent for hello\n+            }\n+\n+            @Override\n+            public String getMethodName() {\n+                return methodName;\n+            }\n+\n+            @Override\n+            public String getUriPath() {\n+                return HELLO_PATH;\n+            }\n+\n+            @Override\n+            public String getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                return mResultAdapter.verifyHelloFromResultBundle(resultBundle);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    Intent getBrokerAuthorizationIntent(@NonNull final InteractiveTokenCommandParameters parameters,\n+                                        @Nullable final String negotiatedBrokerProtocolVersion)\n+            throws BaseException {\n+        final String methodName = \"getBrokerAuthorizationIntentForContentProvider\";\n+\n+        return performContentProviderOperation(parameters, new ContentProviderOperation<InteractiveTokenCommandParameters, Intent>() {\n+\n+            @Override\n+            public String getRequestString(InteractiveTokenCommandParameters parameters) {\n+                return null; // broker returns us an intent based on calling uid , no request string needed\n+            }\n+\n+            @Override\n+            public String[] getOptions() {\n+                return new String[]{negotiatedBrokerProtocolVersion};\n+            }\n+\n+            @Override\n+            public String getMethodName() {\n+                return methodName;\n+            }\n+\n+            @Override\n+            public String getUriPath() {\n+                return ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+            }\n+\n+            @Override\n+            public Intent getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                final Bundle requestBundle = mRequestAdapter.getRequestBundleForAcquireTokenInteractive(\n+                        parameters,\n+                        negotiatedBrokerProtocolVersion\n+                );\n+                Intent interactiveRequestIntent = new Intent();\n+                interactiveRequestIntent.putExtras(requestBundle);\n+                interactiveRequestIntent.putExtras(resultBundle);\n+                interactiveRequestIntent.setPackage(resultBundle.getString(BROKER_PACKAGE_NAME));\n+                interactiveRequestIntent.setClassName(\n+                        resultBundle.getString(BROKER_PACKAGE_NAME, \"\"),\n+                        resultBundle.getString(BROKER_ACTIVITY_NAME, \"\")\n+                );\n+                interactiveRequestIntent.putExtra(\n+                        AuthenticationConstants.Broker.NEGOTIATED_BP_VERSION_KEY,\n+                        negotiatedBrokerProtocolVersion\n+                );\n+                return interactiveRequestIntent;\n+            }\n+        });\n+    }\n+\n+    @Override\n+    AcquireTokenResult acquireTokenSilent(@NonNull final SilentTokenCommandParameters parameters,\n+                                          @Nullable final String negotiatedBrokerProtocolVersion)\n+            throws BaseException {\n+        final String methodName = \"acquireTokenSilentWithContentProvider\";\n+\n+        return performContentProviderOperation(\n+                parameters,\n+                new ContentProviderOperation<SilentTokenCommandParameters, AcquireTokenResult>() {\n+                    @Nullable\n+                    @Override\n+                    public String getRequestString(SilentTokenCommandParameters parameters) {\n+                        final BrokerRequest brokerRequest = mRequestAdapter.\n+                                brokerRequestFromSilentOperationParameters(parameters);\n+                        return new Gson().toJson(brokerRequest);\n+                    }\n+\n+                    @Nullable\n+                    @Override\n+                    public String[] getOptions() {\n+                        return new String[]{negotiatedBrokerProtocolVersion};\n+                    }\n+\n+                    @NonNull\n+                    @Override\n+                    public String getMethodName() {\n+                        return methodName;\n+                    }\n+\n+                    @NonNull\n+                    @Override\n+                    public String getUriPath() {\n+                        return ACQUIRE_TOKEN_SILENT_PATH;\n+                    }\n+\n+                    @NonNull\n+                    @Override\n+                    public AcquireTokenResult getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                        return mResultAdapter.getAcquireTokenResultFromResultBundle(resultBundle);\n+                    }\n+                });\n+    }\n+\n+    @Override\n+    List<ICacheRecord> getBrokerAccounts(@NonNull final CommandParameters parameters,\n+                                         @Nullable final String negotiatedBrokerProtocolVersion) throws BaseException {\n+        final String methodName = \"getBrokerAccountsWithContentProvider\";\n+        return performContentProviderOperation(\n+                parameters,\n+                new ContentProviderOperation<CommandParameters, List<ICacheRecord>>() {\n+            @Nullable\n+            @Override\n+            public String getRequestString(CommandParameters parameters) {\n+                return mRequestAdapter.getRequestStringForGetAccounts(parameters);\n+            }\n+\n+            @Nullable\n+            @Override\n+            public String[] getOptions() {\n+                return new String[]{negotiatedBrokerProtocolVersion};\n+            }\n+\n+            @NonNull\n+            @Override\n+            public String getMethodName() {\n+                return methodName;\n+            }\n+\n+            @NonNull\n+            @Override\n+            public String getUriPath() {\n+                return GET_ACCOUNTS_PATH;\n+            }\n+\n+            @NonNull\n+            @Override\n+            public List<ICacheRecord> getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                return mResultAdapter.getAccountsFromResultBundle(resultBundle);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    void removeBrokerAccount(@NonNull final RemoveAccountCommandParameters parameters,\n+                             @Nullable final String negotiatedBrokerProtocolVersion) throws BaseException {\n+\n+        final String methodName = \"removeBrokerAccountWithContentProvider\";\n+\n+        performContentProviderOperation(\n+                parameters,\n+                new ContentProviderOperation<RemoveAccountCommandParameters, Void>() {\n+            @Nullable\n+            @Override\n+            public String getRequestString(RemoveAccountCommandParameters parameters) {\n+                return mRequestAdapter.getRequestStringForRemoveAccount(parameters);\n+            }\n+\n+            @Nullable\n+            @Override\n+            public String[] getOptions() {\n+                return new String[]{negotiatedBrokerProtocolVersion};\n+            }\n+\n+            @NonNull\n+            @Override\n+            public String getMethodName() {\n+                return methodName;\n+            }\n+\n+            @NonNull\n+            @Override\n+            public String getUriPath() {\n+                return REMOVE_ACCOUNTS_PATH;\n+            }\n+\n+            @NonNull\n+            @Override\n+            public Void getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                mResultAdapter.verifyRemoveAccountResultFromBundle(resultBundle);\n+                return null;\n+            }\n+        });\n+    }\n+\n+    @Override\n+    boolean getDeviceMode(@NonNull final CommandParameters parameters,\n+                          @Nullable final String negotiatedBrokerProtocolVersion) throws BaseException {\n+        final String methodName = \"getDeviceModeWithContentProvider\";\n+        return performContentProviderOperation(\n+                parameters,\n+                new ContentProviderOperation<CommandParameters, Boolean>() {\n+\n+            @Nullable\n+            @Override\n+            public String getRequestString(CommandParameters parameters) {\n+                return null; // broker returns a boolean to indicate the device mode, no request string needed.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM4NTI3OA=="}, "originalCommit": {"oid": "7899bcaa59d3a9fc5b7de645c6eb073bf9b660d6"}, "originalPosition": 374}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTYwMDM4OnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerContentProviderStrategy.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjowMzoxMFrOGcIT9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjowNjo1M1rOGctnVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE0OTQ5Mg==", "bodyText": "call BrokerBaseStrategy.completeInteractiveRequestIntent()?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053#discussion_r432149492", "createdAt": "2020-05-28T22:03:10Z", "author": {"login": "rpdome"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerContentProviderStrategy.java", "diffHunk": "@@ -0,0 +1,487 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.internal.controllers;\n+\n+import android.content.Context;\n+import android.content.Intent;\n+import android.database.Cursor;\n+import android.net.Uri;\n+import android.os.Bundle;\n+\n+import com.google.gson.Gson;\n+import com.microsoft.identity.client.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.adal.internal.AuthenticationConstants;\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.internal.broker.BrokerRequest;\n+import com.microsoft.identity.common.internal.broker.BrokerValidator;\n+import com.microsoft.identity.common.internal.cache.ICacheRecord;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.InteractiveTokenCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.RemoveAccountCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.SilentTokenCommandParameters;\n+import com.microsoft.identity.common.internal.logging.Logger;\n+import com.microsoft.identity.common.internal.result.AcquireTokenResult;\n+import com.microsoft.identity.common.internal.telemetry.Telemetry;\n+import com.microsoft.identity.common.internal.telemetry.TelemetryEventStrings;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerEndEvent;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerStartEvent;\n+\n+import java.util.List;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.Broker.BROKER_ACTIVITY_NAME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.Broker.BROKER_PACKAGE_NAME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_SILENT_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.AUTHORITY;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.CONTENT_SCHEME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_CURRENT_ACCOUNT_SHARED_DEVICe_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_DEVICE_MODE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.HELLO_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.REMOVE_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.SIGN_OUT_FROM_SHARED_DEVICE_PATH;\n+\n+public class BrokerContentProviderStrategy extends BrokerBaseStrategy {\n+\n+    private static final String TAG = BrokerContentProviderStrategy.class.getName();\n+\n+    public interface ContentProviderOperation<T extends CommandParameters, U> {\n+\n+        /**\n+         * Constructs and returns a data string for the request to the broker from the CommandParameters.\n+         */\n+        @Nullable\n+        String getRequestString(T parameters);\n+\n+        /**\n+         * Returns a String[] with options to be sent to the broker.\n+         * Currently we only send negotiatedBrokerProtocolVersion if available.\n+         *\n+         * @return\n+         */\n+        @Nullable\n+        String[] getOptions();\n+\n+        /**\n+         * Name of task for logging and telemetry purposes\n+         */\n+        @NonNull\n+        String getMethodName();\n+\n+        /**\n+         * Uri path for specific broker operation\n+         */\n+        @NonNull\n+        String getUriPath();\n+\n+        /**\n+         * Constructs and returns the result from the request bundle returned by the broker.\n+         */\n+        @NonNull\n+        U getResultFromBundle(Bundle resultBundle) throws BaseException;\n+    }\n+\n+    private <T extends CommandParameters, U> U performContentProviderOperation(\n+            @NonNull final T parameters,\n+            @NonNull final ContentProviderOperation<T, U> contentProviderOperation) throws BaseException {\n+\n+        final String methodName = contentProviderOperation.getMethodName();\n+\n+        Telemetry.emit(\n+                new BrokerStartEvent()\n+                        .putAction(methodName)\n+                        .putStrategy(TelemetryEventStrings.Value.CONTENT_PROVIDER)\n+        );\n+        final Uri uri = getContentProviderURI(\n+                parameters.getAndroidApplicationContext(),\n+                contentProviderOperation.getUriPath()\n+        );\n+        Logger.info(TAG + methodName, \"Request to BrokerContentProvider for uri path \" +\n+                contentProviderOperation.getUriPath()\n+        );\n+        final Cursor cursor = parameters.getAndroidApplicationContext().getContentResolver().query(\n+                uri,\n+                contentProviderOperation.getOptions(),\n+                contentProviderOperation.getRequestString(parameters),\n+                null,\n+                null\n+        );\n+\n+        if (cursor != null) {\n+            final U result = contentProviderOperation.getResultFromBundle(cursor.getExtras());\n+            cursor.close();\n+            Telemetry.emit(\n+                    new BrokerEndEvent()\n+                            .putAction(methodName)\n+                            .isSuccessful(true)\n+            );\n+            Logger.info(TAG + methodName, \"Received successful result from broker\");\n+            return result;\n+        } else {\n+            final String message = \"Failed to get result from Broker Content Provider, cursor is null\";\n+            Logger.error(TAG + methodName, message, null);\n+            Telemetry.emit(\n+                    new BrokerEndEvent()\n+                            .putAction(methodName)\n+                            .isSuccessful(false)\n+                            .putErrorDescription(message)\n+            );\n+            throw new BrokerCommunicationException(message, null);\n+        }\n+    }\n+\n+    @Override\n+    String hello(@NonNull CommandParameters parameters) throws BaseException {\n+        final String methodName = \"helloWithContentProvider\";\n+\n+        return performContentProviderOperation(parameters, new ContentProviderOperation<CommandParameters, String>() {\n+            @Override\n+            public String getRequestString(CommandParameters parameters) {\n+                return mRequestAdapter.getRequestStringForHello(parameters);\n+            }\n+\n+            @Override\n+            public String[] getOptions() {\n+                return null; // no additional options to be sent for hello\n+            }\n+\n+            @Override\n+            public String getMethodName() {\n+                return methodName;\n+            }\n+\n+            @Override\n+            public String getUriPath() {\n+                return HELLO_PATH;\n+            }\n+\n+            @Override\n+            public String getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                return mResultAdapter.verifyHelloFromResultBundle(resultBundle);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    Intent getBrokerAuthorizationIntent(@NonNull final InteractiveTokenCommandParameters parameters,\n+                                        @Nullable final String negotiatedBrokerProtocolVersion)\n+            throws BaseException {\n+        final String methodName = \"getBrokerAuthorizationIntentForContentProvider\";\n+\n+        return performContentProviderOperation(parameters, new ContentProviderOperation<InteractiveTokenCommandParameters, Intent>() {\n+\n+            @Override\n+            public String getRequestString(InteractiveTokenCommandParameters parameters) {\n+                return null; // broker returns us an intent based on calling uid , no request string needed\n+            }\n+\n+            @Override\n+            public String[] getOptions() {\n+                return new String[]{negotiatedBrokerProtocolVersion};\n+            }\n+\n+            @Override\n+            public String getMethodName() {\n+                return methodName;\n+            }\n+\n+            @Override\n+            public String getUriPath() {\n+                return ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+            }\n+\n+            @Override\n+            public Intent getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                final Bundle requestBundle = mRequestAdapter.getRequestBundleForAcquireTokenInteractive(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "403d258cd4f89909e852c175a72174972a9a6b9f"}, "originalPosition": 218}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1MDE1MA==", "bodyText": "(and we might want to move this function to MsalBrokerResultAdapter too)", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053#discussion_r432150150", "createdAt": "2020-05-28T22:04:44Z", "author": {"login": "rpdome"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerContentProviderStrategy.java", "diffHunk": "@@ -0,0 +1,487 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.internal.controllers;\n+\n+import android.content.Context;\n+import android.content.Intent;\n+import android.database.Cursor;\n+import android.net.Uri;\n+import android.os.Bundle;\n+\n+import com.google.gson.Gson;\n+import com.microsoft.identity.client.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.adal.internal.AuthenticationConstants;\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.internal.broker.BrokerRequest;\n+import com.microsoft.identity.common.internal.broker.BrokerValidator;\n+import com.microsoft.identity.common.internal.cache.ICacheRecord;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.InteractiveTokenCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.RemoveAccountCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.SilentTokenCommandParameters;\n+import com.microsoft.identity.common.internal.logging.Logger;\n+import com.microsoft.identity.common.internal.result.AcquireTokenResult;\n+import com.microsoft.identity.common.internal.telemetry.Telemetry;\n+import com.microsoft.identity.common.internal.telemetry.TelemetryEventStrings;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerEndEvent;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerStartEvent;\n+\n+import java.util.List;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.Broker.BROKER_ACTIVITY_NAME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.Broker.BROKER_PACKAGE_NAME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_SILENT_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.AUTHORITY;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.CONTENT_SCHEME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_CURRENT_ACCOUNT_SHARED_DEVICe_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_DEVICE_MODE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.HELLO_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.REMOVE_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.SIGN_OUT_FROM_SHARED_DEVICE_PATH;\n+\n+public class BrokerContentProviderStrategy extends BrokerBaseStrategy {\n+\n+    private static final String TAG = BrokerContentProviderStrategy.class.getName();\n+\n+    public interface ContentProviderOperation<T extends CommandParameters, U> {\n+\n+        /**\n+         * Constructs and returns a data string for the request to the broker from the CommandParameters.\n+         */\n+        @Nullable\n+        String getRequestString(T parameters);\n+\n+        /**\n+         * Returns a String[] with options to be sent to the broker.\n+         * Currently we only send negotiatedBrokerProtocolVersion if available.\n+         *\n+         * @return\n+         */\n+        @Nullable\n+        String[] getOptions();\n+\n+        /**\n+         * Name of task for logging and telemetry purposes\n+         */\n+        @NonNull\n+        String getMethodName();\n+\n+        /**\n+         * Uri path for specific broker operation\n+         */\n+        @NonNull\n+        String getUriPath();\n+\n+        /**\n+         * Constructs and returns the result from the request bundle returned by the broker.\n+         */\n+        @NonNull\n+        U getResultFromBundle(Bundle resultBundle) throws BaseException;\n+    }\n+\n+    private <T extends CommandParameters, U> U performContentProviderOperation(\n+            @NonNull final T parameters,\n+            @NonNull final ContentProviderOperation<T, U> contentProviderOperation) throws BaseException {\n+\n+        final String methodName = contentProviderOperation.getMethodName();\n+\n+        Telemetry.emit(\n+                new BrokerStartEvent()\n+                        .putAction(methodName)\n+                        .putStrategy(TelemetryEventStrings.Value.CONTENT_PROVIDER)\n+        );\n+        final Uri uri = getContentProviderURI(\n+                parameters.getAndroidApplicationContext(),\n+                contentProviderOperation.getUriPath()\n+        );\n+        Logger.info(TAG + methodName, \"Request to BrokerContentProvider for uri path \" +\n+                contentProviderOperation.getUriPath()\n+        );\n+        final Cursor cursor = parameters.getAndroidApplicationContext().getContentResolver().query(\n+                uri,\n+                contentProviderOperation.getOptions(),\n+                contentProviderOperation.getRequestString(parameters),\n+                null,\n+                null\n+        );\n+\n+        if (cursor != null) {\n+            final U result = contentProviderOperation.getResultFromBundle(cursor.getExtras());\n+            cursor.close();\n+            Telemetry.emit(\n+                    new BrokerEndEvent()\n+                            .putAction(methodName)\n+                            .isSuccessful(true)\n+            );\n+            Logger.info(TAG + methodName, \"Received successful result from broker\");\n+            return result;\n+        } else {\n+            final String message = \"Failed to get result from Broker Content Provider, cursor is null\";\n+            Logger.error(TAG + methodName, message, null);\n+            Telemetry.emit(\n+                    new BrokerEndEvent()\n+                            .putAction(methodName)\n+                            .isSuccessful(false)\n+                            .putErrorDescription(message)\n+            );\n+            throw new BrokerCommunicationException(message, null);\n+        }\n+    }\n+\n+    @Override\n+    String hello(@NonNull CommandParameters parameters) throws BaseException {\n+        final String methodName = \"helloWithContentProvider\";\n+\n+        return performContentProviderOperation(parameters, new ContentProviderOperation<CommandParameters, String>() {\n+            @Override\n+            public String getRequestString(CommandParameters parameters) {\n+                return mRequestAdapter.getRequestStringForHello(parameters);\n+            }\n+\n+            @Override\n+            public String[] getOptions() {\n+                return null; // no additional options to be sent for hello\n+            }\n+\n+            @Override\n+            public String getMethodName() {\n+                return methodName;\n+            }\n+\n+            @Override\n+            public String getUriPath() {\n+                return HELLO_PATH;\n+            }\n+\n+            @Override\n+            public String getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                return mResultAdapter.verifyHelloFromResultBundle(resultBundle);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    Intent getBrokerAuthorizationIntent(@NonNull final InteractiveTokenCommandParameters parameters,\n+                                        @Nullable final String negotiatedBrokerProtocolVersion)\n+            throws BaseException {\n+        final String methodName = \"getBrokerAuthorizationIntentForContentProvider\";\n+\n+        return performContentProviderOperation(parameters, new ContentProviderOperation<InteractiveTokenCommandParameters, Intent>() {\n+\n+            @Override\n+            public String getRequestString(InteractiveTokenCommandParameters parameters) {\n+                return null; // broker returns us an intent based on calling uid , no request string needed\n+            }\n+\n+            @Override\n+            public String[] getOptions() {\n+                return new String[]{negotiatedBrokerProtocolVersion};\n+            }\n+\n+            @Override\n+            public String getMethodName() {\n+                return methodName;\n+            }\n+\n+            @Override\n+            public String getUriPath() {\n+                return ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+            }\n+\n+            @Override\n+            public Intent getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                final Bundle requestBundle = mRequestAdapter.getRequestBundleForAcquireTokenInteractive(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE0OTQ5Mg=="}, "originalCommit": {"oid": "403d258cd4f89909e852c175a72174972a9a6b9f"}, "originalPosition": 218}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2MDY2MQ==", "bodyText": "moved it to MsalBrokerResultAdapter, we don't need to call completeInteractiveRequestIntent , as we construct the intent here using the bundle", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053#discussion_r432760661", "createdAt": "2020-05-29T22:06:53Z", "author": {"login": "kreedula"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerContentProviderStrategy.java", "diffHunk": "@@ -0,0 +1,487 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.internal.controllers;\n+\n+import android.content.Context;\n+import android.content.Intent;\n+import android.database.Cursor;\n+import android.net.Uri;\n+import android.os.Bundle;\n+\n+import com.google.gson.Gson;\n+import com.microsoft.identity.client.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.adal.internal.AuthenticationConstants;\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.internal.broker.BrokerRequest;\n+import com.microsoft.identity.common.internal.broker.BrokerValidator;\n+import com.microsoft.identity.common.internal.cache.ICacheRecord;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.InteractiveTokenCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.RemoveAccountCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.SilentTokenCommandParameters;\n+import com.microsoft.identity.common.internal.logging.Logger;\n+import com.microsoft.identity.common.internal.result.AcquireTokenResult;\n+import com.microsoft.identity.common.internal.telemetry.Telemetry;\n+import com.microsoft.identity.common.internal.telemetry.TelemetryEventStrings;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerEndEvent;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerStartEvent;\n+\n+import java.util.List;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.Broker.BROKER_ACTIVITY_NAME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.Broker.BROKER_PACKAGE_NAME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_SILENT_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.AUTHORITY;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.CONTENT_SCHEME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_CURRENT_ACCOUNT_SHARED_DEVICe_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_DEVICE_MODE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.HELLO_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.REMOVE_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.SIGN_OUT_FROM_SHARED_DEVICE_PATH;\n+\n+public class BrokerContentProviderStrategy extends BrokerBaseStrategy {\n+\n+    private static final String TAG = BrokerContentProviderStrategy.class.getName();\n+\n+    public interface ContentProviderOperation<T extends CommandParameters, U> {\n+\n+        /**\n+         * Constructs and returns a data string for the request to the broker from the CommandParameters.\n+         */\n+        @Nullable\n+        String getRequestString(T parameters);\n+\n+        /**\n+         * Returns a String[] with options to be sent to the broker.\n+         * Currently we only send negotiatedBrokerProtocolVersion if available.\n+         *\n+         * @return\n+         */\n+        @Nullable\n+        String[] getOptions();\n+\n+        /**\n+         * Name of task for logging and telemetry purposes\n+         */\n+        @NonNull\n+        String getMethodName();\n+\n+        /**\n+         * Uri path for specific broker operation\n+         */\n+        @NonNull\n+        String getUriPath();\n+\n+        /**\n+         * Constructs and returns the result from the request bundle returned by the broker.\n+         */\n+        @NonNull\n+        U getResultFromBundle(Bundle resultBundle) throws BaseException;\n+    }\n+\n+    private <T extends CommandParameters, U> U performContentProviderOperation(\n+            @NonNull final T parameters,\n+            @NonNull final ContentProviderOperation<T, U> contentProviderOperation) throws BaseException {\n+\n+        final String methodName = contentProviderOperation.getMethodName();\n+\n+        Telemetry.emit(\n+                new BrokerStartEvent()\n+                        .putAction(methodName)\n+                        .putStrategy(TelemetryEventStrings.Value.CONTENT_PROVIDER)\n+        );\n+        final Uri uri = getContentProviderURI(\n+                parameters.getAndroidApplicationContext(),\n+                contentProviderOperation.getUriPath()\n+        );\n+        Logger.info(TAG + methodName, \"Request to BrokerContentProvider for uri path \" +\n+                contentProviderOperation.getUriPath()\n+        );\n+        final Cursor cursor = parameters.getAndroidApplicationContext().getContentResolver().query(\n+                uri,\n+                contentProviderOperation.getOptions(),\n+                contentProviderOperation.getRequestString(parameters),\n+                null,\n+                null\n+        );\n+\n+        if (cursor != null) {\n+            final U result = contentProviderOperation.getResultFromBundle(cursor.getExtras());\n+            cursor.close();\n+            Telemetry.emit(\n+                    new BrokerEndEvent()\n+                            .putAction(methodName)\n+                            .isSuccessful(true)\n+            );\n+            Logger.info(TAG + methodName, \"Received successful result from broker\");\n+            return result;\n+        } else {\n+            final String message = \"Failed to get result from Broker Content Provider, cursor is null\";\n+            Logger.error(TAG + methodName, message, null);\n+            Telemetry.emit(\n+                    new BrokerEndEvent()\n+                            .putAction(methodName)\n+                            .isSuccessful(false)\n+                            .putErrorDescription(message)\n+            );\n+            throw new BrokerCommunicationException(message, null);\n+        }\n+    }\n+\n+    @Override\n+    String hello(@NonNull CommandParameters parameters) throws BaseException {\n+        final String methodName = \"helloWithContentProvider\";\n+\n+        return performContentProviderOperation(parameters, new ContentProviderOperation<CommandParameters, String>() {\n+            @Override\n+            public String getRequestString(CommandParameters parameters) {\n+                return mRequestAdapter.getRequestStringForHello(parameters);\n+            }\n+\n+            @Override\n+            public String[] getOptions() {\n+                return null; // no additional options to be sent for hello\n+            }\n+\n+            @Override\n+            public String getMethodName() {\n+                return methodName;\n+            }\n+\n+            @Override\n+            public String getUriPath() {\n+                return HELLO_PATH;\n+            }\n+\n+            @Override\n+            public String getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                return mResultAdapter.verifyHelloFromResultBundle(resultBundle);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    Intent getBrokerAuthorizationIntent(@NonNull final InteractiveTokenCommandParameters parameters,\n+                                        @Nullable final String negotiatedBrokerProtocolVersion)\n+            throws BaseException {\n+        final String methodName = \"getBrokerAuthorizationIntentForContentProvider\";\n+\n+        return performContentProviderOperation(parameters, new ContentProviderOperation<InteractiveTokenCommandParameters, Intent>() {\n+\n+            @Override\n+            public String getRequestString(InteractiveTokenCommandParameters parameters) {\n+                return null; // broker returns us an intent based on calling uid , no request string needed\n+            }\n+\n+            @Override\n+            public String[] getOptions() {\n+                return new String[]{negotiatedBrokerProtocolVersion};\n+            }\n+\n+            @Override\n+            public String getMethodName() {\n+                return methodName;\n+            }\n+\n+            @Override\n+            public String getUriPath() {\n+                return ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+            }\n+\n+            @Override\n+            public Intent getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                final Bundle requestBundle = mRequestAdapter.getRequestBundleForAcquireTokenInteractive(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE0OTQ5Mg=="}, "originalCommit": {"oid": "403d258cd4f89909e852c175a72174972a9a6b9f"}, "originalPosition": 218}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTYwOTk4OnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerContentProviderStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjowNjo0OFrOGcIZ-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjowODowNFrOGctppg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1MTAzMw==", "bodyText": "nit: if possible to serialize/marshall the request bundle (as suggested in ad-accounts), I suggest renaming this to something like 'get Marshalled/Serialized RequestBundle'.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053#discussion_r432151033", "createdAt": "2020-05-28T22:06:48Z", "author": {"login": "rpdome"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerContentProviderStrategy.java", "diffHunk": "@@ -0,0 +1,487 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.internal.controllers;\n+\n+import android.content.Context;\n+import android.content.Intent;\n+import android.database.Cursor;\n+import android.net.Uri;\n+import android.os.Bundle;\n+\n+import com.google.gson.Gson;\n+import com.microsoft.identity.client.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.adal.internal.AuthenticationConstants;\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.internal.broker.BrokerRequest;\n+import com.microsoft.identity.common.internal.broker.BrokerValidator;\n+import com.microsoft.identity.common.internal.cache.ICacheRecord;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.InteractiveTokenCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.RemoveAccountCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.SilentTokenCommandParameters;\n+import com.microsoft.identity.common.internal.logging.Logger;\n+import com.microsoft.identity.common.internal.result.AcquireTokenResult;\n+import com.microsoft.identity.common.internal.telemetry.Telemetry;\n+import com.microsoft.identity.common.internal.telemetry.TelemetryEventStrings;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerEndEvent;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerStartEvent;\n+\n+import java.util.List;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.Broker.BROKER_ACTIVITY_NAME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.Broker.BROKER_PACKAGE_NAME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_SILENT_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.AUTHORITY;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.CONTENT_SCHEME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_CURRENT_ACCOUNT_SHARED_DEVICe_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_DEVICE_MODE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.HELLO_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.REMOVE_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.SIGN_OUT_FROM_SHARED_DEVICE_PATH;\n+\n+public class BrokerContentProviderStrategy extends BrokerBaseStrategy {\n+\n+    private static final String TAG = BrokerContentProviderStrategy.class.getName();\n+\n+    public interface ContentProviderOperation<T extends CommandParameters, U> {\n+\n+        /**\n+         * Constructs and returns a data string for the request to the broker from the CommandParameters.\n+         */\n+        @Nullable\n+        String getRequestString(T parameters);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "403d258cd4f89909e852c175a72174972a9a6b9f"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2MTI1NA==", "bodyText": "renamed to getRequestBundle as appropriately", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053#discussion_r432761254", "createdAt": "2020-05-29T22:08:04Z", "author": {"login": "kreedula"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerContentProviderStrategy.java", "diffHunk": "@@ -0,0 +1,487 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.internal.controllers;\n+\n+import android.content.Context;\n+import android.content.Intent;\n+import android.database.Cursor;\n+import android.net.Uri;\n+import android.os.Bundle;\n+\n+import com.google.gson.Gson;\n+import com.microsoft.identity.client.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.adal.internal.AuthenticationConstants;\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.internal.broker.BrokerRequest;\n+import com.microsoft.identity.common.internal.broker.BrokerValidator;\n+import com.microsoft.identity.common.internal.cache.ICacheRecord;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.InteractiveTokenCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.RemoveAccountCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.SilentTokenCommandParameters;\n+import com.microsoft.identity.common.internal.logging.Logger;\n+import com.microsoft.identity.common.internal.result.AcquireTokenResult;\n+import com.microsoft.identity.common.internal.telemetry.Telemetry;\n+import com.microsoft.identity.common.internal.telemetry.TelemetryEventStrings;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerEndEvent;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerStartEvent;\n+\n+import java.util.List;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.Broker.BROKER_ACTIVITY_NAME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.Broker.BROKER_PACKAGE_NAME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_SILENT_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.AUTHORITY;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.CONTENT_SCHEME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_CURRENT_ACCOUNT_SHARED_DEVICe_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_DEVICE_MODE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.HELLO_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.REMOVE_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.SIGN_OUT_FROM_SHARED_DEVICE_PATH;\n+\n+public class BrokerContentProviderStrategy extends BrokerBaseStrategy {\n+\n+    private static final String TAG = BrokerContentProviderStrategy.class.getName();\n+\n+    public interface ContentProviderOperation<T extends CommandParameters, U> {\n+\n+        /**\n+         * Constructs and returns a data string for the request to the broker from the CommandParameters.\n+         */\n+        @Nullable\n+        String getRequestString(T parameters);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1MTAzMw=="}, "originalCommit": {"oid": "403d258cd4f89909e852c175a72174972a9a6b9f"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTYxNzMzOnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerContentProviderStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjowOTo0OVrOGcIejQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjowNzozMVrOGctpHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1MjIwNQ==", "bodyText": "not particularly related to this PR, but if we manage to be able to reuse the request bundle here, can you move negotiatedBrokerProtocolVersion into MsalBrokerRequestAdapter as well? (there will be some change to clean up redundant codes in the other two strategy).", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053#discussion_r432152205", "createdAt": "2020-05-28T22:09:49Z", "author": {"login": "rpdome"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerContentProviderStrategy.java", "diffHunk": "@@ -0,0 +1,487 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.internal.controllers;\n+\n+import android.content.Context;\n+import android.content.Intent;\n+import android.database.Cursor;\n+import android.net.Uri;\n+import android.os.Bundle;\n+\n+import com.google.gson.Gson;\n+import com.microsoft.identity.client.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.adal.internal.AuthenticationConstants;\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.internal.broker.BrokerRequest;\n+import com.microsoft.identity.common.internal.broker.BrokerValidator;\n+import com.microsoft.identity.common.internal.cache.ICacheRecord;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.InteractiveTokenCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.RemoveAccountCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.SilentTokenCommandParameters;\n+import com.microsoft.identity.common.internal.logging.Logger;\n+import com.microsoft.identity.common.internal.result.AcquireTokenResult;\n+import com.microsoft.identity.common.internal.telemetry.Telemetry;\n+import com.microsoft.identity.common.internal.telemetry.TelemetryEventStrings;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerEndEvent;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerStartEvent;\n+\n+import java.util.List;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.Broker.BROKER_ACTIVITY_NAME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.Broker.BROKER_PACKAGE_NAME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_SILENT_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.AUTHORITY;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.CONTENT_SCHEME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_CURRENT_ACCOUNT_SHARED_DEVICe_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_DEVICE_MODE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.HELLO_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.REMOVE_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.SIGN_OUT_FROM_SHARED_DEVICE_PATH;\n+\n+public class BrokerContentProviderStrategy extends BrokerBaseStrategy {\n+\n+    private static final String TAG = BrokerContentProviderStrategy.class.getName();\n+\n+    public interface ContentProviderOperation<T extends CommandParameters, U> {\n+\n+        /**\n+         * Constructs and returns a data string for the request to the broker from the CommandParameters.\n+         */\n+        @Nullable\n+        String getRequestString(T parameters);\n+\n+        /**\n+         * Returns a String[] with options to be sent to the broker.\n+         * Currently we only send negotiatedBrokerProtocolVersion if available.\n+         *\n+         * @return\n+         */\n+        @Nullable\n+        String[] getOptions();\n+\n+        /**\n+         * Name of task for logging and telemetry purposes\n+         */\n+        @NonNull\n+        String getMethodName();\n+\n+        /**\n+         * Uri path for specific broker operation\n+         */\n+        @NonNull\n+        String getUriPath();\n+\n+        /**\n+         * Constructs and returns the result from the request bundle returned by the broker.\n+         */\n+        @NonNull\n+        U getResultFromBundle(Bundle resultBundle) throws BaseException;\n+    }\n+\n+    private <T extends CommandParameters, U> U performContentProviderOperation(\n+            @NonNull final T parameters,\n+            @NonNull final ContentProviderOperation<T, U> contentProviderOperation) throws BaseException {\n+\n+        final String methodName = contentProviderOperation.getMethodName();\n+\n+        Telemetry.emit(\n+                new BrokerStartEvent()\n+                        .putAction(methodName)\n+                        .putStrategy(TelemetryEventStrings.Value.CONTENT_PROVIDER)\n+        );\n+        final Uri uri = getContentProviderURI(\n+                parameters.getAndroidApplicationContext(),\n+                contentProviderOperation.getUriPath()\n+        );\n+        Logger.info(TAG + methodName, \"Request to BrokerContentProvider for uri path \" +\n+                contentProviderOperation.getUriPath()\n+        );\n+        final Cursor cursor = parameters.getAndroidApplicationContext().getContentResolver().query(\n+                uri,\n+                contentProviderOperation.getOptions(),\n+                contentProviderOperation.getRequestString(parameters),\n+                null,\n+                null\n+        );\n+\n+        if (cursor != null) {\n+            final U result = contentProviderOperation.getResultFromBundle(cursor.getExtras());\n+            cursor.close();\n+            Telemetry.emit(\n+                    new BrokerEndEvent()\n+                            .putAction(methodName)\n+                            .isSuccessful(true)\n+            );\n+            Logger.info(TAG + methodName, \"Received successful result from broker\");\n+            return result;\n+        } else {\n+            final String message = \"Failed to get result from Broker Content Provider, cursor is null\";\n+            Logger.error(TAG + methodName, message, null);\n+            Telemetry.emit(\n+                    new BrokerEndEvent()\n+                            .putAction(methodName)\n+                            .isSuccessful(false)\n+                            .putErrorDescription(message)\n+            );\n+            throw new BrokerCommunicationException(message, null);\n+        }\n+    }\n+\n+    @Override\n+    String hello(@NonNull CommandParameters parameters) throws BaseException {\n+        final String methodName = \"helloWithContentProvider\";\n+\n+        return performContentProviderOperation(parameters, new ContentProviderOperation<CommandParameters, String>() {\n+            @Override\n+            public String getRequestString(CommandParameters parameters) {\n+                return mRequestAdapter.getRequestStringForHello(parameters);\n+            }\n+\n+            @Override\n+            public String[] getOptions() {\n+                return null; // no additional options to be sent for hello\n+            }\n+\n+            @Override\n+            public String getMethodName() {\n+                return methodName;\n+            }\n+\n+            @Override\n+            public String getUriPath() {\n+                return HELLO_PATH;\n+            }\n+\n+            @Override\n+            public String getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                return mResultAdapter.verifyHelloFromResultBundle(resultBundle);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    Intent getBrokerAuthorizationIntent(@NonNull final InteractiveTokenCommandParameters parameters,\n+                                        @Nullable final String negotiatedBrokerProtocolVersion)\n+            throws BaseException {\n+        final String methodName = \"getBrokerAuthorizationIntentForContentProvider\";\n+\n+        return performContentProviderOperation(parameters, new ContentProviderOperation<InteractiveTokenCommandParameters, Intent>() {\n+\n+            @Override\n+            public String getRequestString(InteractiveTokenCommandParameters parameters) {\n+                return null; // broker returns us an intent based on calling uid , no request string needed\n+            }\n+\n+            @Override\n+            public String[] getOptions() {\n+                return new String[]{negotiatedBrokerProtocolVersion};\n+            }\n+\n+            @Override\n+            public String getMethodName() {\n+                return methodName;\n+            }\n+\n+            @Override\n+            public String getUriPath() {\n+                return ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+            }\n+\n+            @Override\n+            public Intent getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                final Bundle requestBundle = mRequestAdapter.getRequestBundleForAcquireTokenInteractive(\n+                        parameters,\n+                        negotiatedBrokerProtocolVersion\n+                );\n+                Intent interactiveRequestIntent = new Intent();\n+                interactiveRequestIntent.putExtras(requestBundle);\n+                interactiveRequestIntent.putExtras(resultBundle);\n+                interactiveRequestIntent.setPackage(resultBundle.getString(BROKER_PACKAGE_NAME));\n+                interactiveRequestIntent.setClassName(\n+                        resultBundle.getString(BROKER_PACKAGE_NAME, \"\"),\n+                        resultBundle.getString(BROKER_ACTIVITY_NAME, \"\")\n+                );\n+                interactiveRequestIntent.putExtra(\n+                        AuthenticationConstants.Broker.NEGOTIATED_BP_VERSION_KEY,\n+                        negotiatedBrokerProtocolVersion\n+                );\n+                return interactiveRequestIntent;\n+            }\n+        });\n+    }\n+\n+    @Override\n+    AcquireTokenResult acquireTokenSilent(@NonNull final SilentTokenCommandParameters parameters,\n+                                          @Nullable final String negotiatedBrokerProtocolVersion)\n+            throws BaseException {\n+        final String methodName = \"acquireTokenSilentWithContentProvider\";\n+\n+        return performContentProviderOperation(\n+                parameters,\n+                new ContentProviderOperation<SilentTokenCommandParameters, AcquireTokenResult>() {\n+                    @Nullable\n+                    @Override\n+                    public String getRequestString(SilentTokenCommandParameters parameters) {\n+                        final BrokerRequest brokerRequest = mRequestAdapter.\n+                                brokerRequestFromSilentOperationParameters(parameters);\n+                        return new Gson().toJson(brokerRequest);\n+                    }\n+\n+                    @Nullable\n+                    @Override\n+                    public String[] getOptions() {\n+                        return new String[]{negotiatedBrokerProtocolVersion};\n+                    }\n+\n+                    @NonNull\n+                    @Override\n+                    public String getMethodName() {\n+                        return methodName;\n+                    }\n+\n+                    @NonNull\n+                    @Override\n+                    public String getUriPath() {\n+                        return ACQUIRE_TOKEN_SILENT_PATH;\n+                    }\n+\n+                    @NonNull\n+                    @Override\n+                    public AcquireTokenResult getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                        return mResultAdapter.getAcquireTokenResultFromResultBundle(resultBundle);\n+                    }\n+                });\n+    }\n+\n+    @Override\n+    List<ICacheRecord> getBrokerAccounts(@NonNull final CommandParameters parameters,\n+                                         @Nullable final String negotiatedBrokerProtocolVersion) throws BaseException {\n+        final String methodName = \"getBrokerAccountsWithContentProvider\";\n+        return performContentProviderOperation(\n+                parameters,\n+                new ContentProviderOperation<CommandParameters, List<ICacheRecord>>() {\n+            @Nullable\n+            @Override\n+            public String getRequestString(CommandParameters parameters) {\n+                return mRequestAdapter.getRequestStringForGetAccounts(parameters);\n+            }\n+\n+            @Nullable\n+            @Override\n+            public String[] getOptions() {\n+                return new String[]{negotiatedBrokerProtocolVersion};\n+            }\n+\n+            @NonNull\n+            @Override\n+            public String getMethodName() {\n+                return methodName;\n+            }\n+\n+            @NonNull\n+            @Override\n+            public String getUriPath() {\n+                return GET_ACCOUNTS_PATH;\n+            }\n+\n+            @NonNull\n+            @Override\n+            public List<ICacheRecord> getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                return mResultAdapter.getAccountsFromResultBundle(resultBundle);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    void removeBrokerAccount(@NonNull final RemoveAccountCommandParameters parameters,\n+                             @Nullable final String negotiatedBrokerProtocolVersion) throws BaseException {\n+\n+        final String methodName = \"removeBrokerAccountWithContentProvider\";\n+\n+        performContentProviderOperation(\n+                parameters,\n+                new ContentProviderOperation<RemoveAccountCommandParameters, Void>() {\n+            @Nullable\n+            @Override\n+            public String getRequestString(RemoveAccountCommandParameters parameters) {\n+                return mRequestAdapter.getRequestStringForRemoveAccount(parameters);\n+            }\n+\n+            @Nullable\n+            @Override\n+            public String[] getOptions() {\n+                return new String[]{negotiatedBrokerProtocolVersion};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "403d258cd4f89909e852c175a72174972a9a6b9f"}, "originalPosition": 339}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2MTExNw==", "bodyText": "resolved via 9020493", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053#discussion_r432761117", "createdAt": "2020-05-29T22:07:31Z", "author": {"login": "kreedula"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerContentProviderStrategy.java", "diffHunk": "@@ -0,0 +1,487 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.internal.controllers;\n+\n+import android.content.Context;\n+import android.content.Intent;\n+import android.database.Cursor;\n+import android.net.Uri;\n+import android.os.Bundle;\n+\n+import com.google.gson.Gson;\n+import com.microsoft.identity.client.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.adal.internal.AuthenticationConstants;\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.internal.broker.BrokerRequest;\n+import com.microsoft.identity.common.internal.broker.BrokerValidator;\n+import com.microsoft.identity.common.internal.cache.ICacheRecord;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.InteractiveTokenCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.RemoveAccountCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.SilentTokenCommandParameters;\n+import com.microsoft.identity.common.internal.logging.Logger;\n+import com.microsoft.identity.common.internal.result.AcquireTokenResult;\n+import com.microsoft.identity.common.internal.telemetry.Telemetry;\n+import com.microsoft.identity.common.internal.telemetry.TelemetryEventStrings;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerEndEvent;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerStartEvent;\n+\n+import java.util.List;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.Broker.BROKER_ACTIVITY_NAME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.Broker.BROKER_PACKAGE_NAME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_SILENT_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.AUTHORITY;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.CONTENT_SCHEME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_CURRENT_ACCOUNT_SHARED_DEVICe_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_DEVICE_MODE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.HELLO_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.REMOVE_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.SIGN_OUT_FROM_SHARED_DEVICE_PATH;\n+\n+public class BrokerContentProviderStrategy extends BrokerBaseStrategy {\n+\n+    private static final String TAG = BrokerContentProviderStrategy.class.getName();\n+\n+    public interface ContentProviderOperation<T extends CommandParameters, U> {\n+\n+        /**\n+         * Constructs and returns a data string for the request to the broker from the CommandParameters.\n+         */\n+        @Nullable\n+        String getRequestString(T parameters);\n+\n+        /**\n+         * Returns a String[] with options to be sent to the broker.\n+         * Currently we only send negotiatedBrokerProtocolVersion if available.\n+         *\n+         * @return\n+         */\n+        @Nullable\n+        String[] getOptions();\n+\n+        /**\n+         * Name of task for logging and telemetry purposes\n+         */\n+        @NonNull\n+        String getMethodName();\n+\n+        /**\n+         * Uri path for specific broker operation\n+         */\n+        @NonNull\n+        String getUriPath();\n+\n+        /**\n+         * Constructs and returns the result from the request bundle returned by the broker.\n+         */\n+        @NonNull\n+        U getResultFromBundle(Bundle resultBundle) throws BaseException;\n+    }\n+\n+    private <T extends CommandParameters, U> U performContentProviderOperation(\n+            @NonNull final T parameters,\n+            @NonNull final ContentProviderOperation<T, U> contentProviderOperation) throws BaseException {\n+\n+        final String methodName = contentProviderOperation.getMethodName();\n+\n+        Telemetry.emit(\n+                new BrokerStartEvent()\n+                        .putAction(methodName)\n+                        .putStrategy(TelemetryEventStrings.Value.CONTENT_PROVIDER)\n+        );\n+        final Uri uri = getContentProviderURI(\n+                parameters.getAndroidApplicationContext(),\n+                contentProviderOperation.getUriPath()\n+        );\n+        Logger.info(TAG + methodName, \"Request to BrokerContentProvider for uri path \" +\n+                contentProviderOperation.getUriPath()\n+        );\n+        final Cursor cursor = parameters.getAndroidApplicationContext().getContentResolver().query(\n+                uri,\n+                contentProviderOperation.getOptions(),\n+                contentProviderOperation.getRequestString(parameters),\n+                null,\n+                null\n+        );\n+\n+        if (cursor != null) {\n+            final U result = contentProviderOperation.getResultFromBundle(cursor.getExtras());\n+            cursor.close();\n+            Telemetry.emit(\n+                    new BrokerEndEvent()\n+                            .putAction(methodName)\n+                            .isSuccessful(true)\n+            );\n+            Logger.info(TAG + methodName, \"Received successful result from broker\");\n+            return result;\n+        } else {\n+            final String message = \"Failed to get result from Broker Content Provider, cursor is null\";\n+            Logger.error(TAG + methodName, message, null);\n+            Telemetry.emit(\n+                    new BrokerEndEvent()\n+                            .putAction(methodName)\n+                            .isSuccessful(false)\n+                            .putErrorDescription(message)\n+            );\n+            throw new BrokerCommunicationException(message, null);\n+        }\n+    }\n+\n+    @Override\n+    String hello(@NonNull CommandParameters parameters) throws BaseException {\n+        final String methodName = \"helloWithContentProvider\";\n+\n+        return performContentProviderOperation(parameters, new ContentProviderOperation<CommandParameters, String>() {\n+            @Override\n+            public String getRequestString(CommandParameters parameters) {\n+                return mRequestAdapter.getRequestStringForHello(parameters);\n+            }\n+\n+            @Override\n+            public String[] getOptions() {\n+                return null; // no additional options to be sent for hello\n+            }\n+\n+            @Override\n+            public String getMethodName() {\n+                return methodName;\n+            }\n+\n+            @Override\n+            public String getUriPath() {\n+                return HELLO_PATH;\n+            }\n+\n+            @Override\n+            public String getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                return mResultAdapter.verifyHelloFromResultBundle(resultBundle);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    Intent getBrokerAuthorizationIntent(@NonNull final InteractiveTokenCommandParameters parameters,\n+                                        @Nullable final String negotiatedBrokerProtocolVersion)\n+            throws BaseException {\n+        final String methodName = \"getBrokerAuthorizationIntentForContentProvider\";\n+\n+        return performContentProviderOperation(parameters, new ContentProviderOperation<InteractiveTokenCommandParameters, Intent>() {\n+\n+            @Override\n+            public String getRequestString(InteractiveTokenCommandParameters parameters) {\n+                return null; // broker returns us an intent based on calling uid , no request string needed\n+            }\n+\n+            @Override\n+            public String[] getOptions() {\n+                return new String[]{negotiatedBrokerProtocolVersion};\n+            }\n+\n+            @Override\n+            public String getMethodName() {\n+                return methodName;\n+            }\n+\n+            @Override\n+            public String getUriPath() {\n+                return ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+            }\n+\n+            @Override\n+            public Intent getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                final Bundle requestBundle = mRequestAdapter.getRequestBundleForAcquireTokenInteractive(\n+                        parameters,\n+                        negotiatedBrokerProtocolVersion\n+                );\n+                Intent interactiveRequestIntent = new Intent();\n+                interactiveRequestIntent.putExtras(requestBundle);\n+                interactiveRequestIntent.putExtras(resultBundle);\n+                interactiveRequestIntent.setPackage(resultBundle.getString(BROKER_PACKAGE_NAME));\n+                interactiveRequestIntent.setClassName(\n+                        resultBundle.getString(BROKER_PACKAGE_NAME, \"\"),\n+                        resultBundle.getString(BROKER_ACTIVITY_NAME, \"\")\n+                );\n+                interactiveRequestIntent.putExtra(\n+                        AuthenticationConstants.Broker.NEGOTIATED_BP_VERSION_KEY,\n+                        negotiatedBrokerProtocolVersion\n+                );\n+                return interactiveRequestIntent;\n+            }\n+        });\n+    }\n+\n+    @Override\n+    AcquireTokenResult acquireTokenSilent(@NonNull final SilentTokenCommandParameters parameters,\n+                                          @Nullable final String negotiatedBrokerProtocolVersion)\n+            throws BaseException {\n+        final String methodName = \"acquireTokenSilentWithContentProvider\";\n+\n+        return performContentProviderOperation(\n+                parameters,\n+                new ContentProviderOperation<SilentTokenCommandParameters, AcquireTokenResult>() {\n+                    @Nullable\n+                    @Override\n+                    public String getRequestString(SilentTokenCommandParameters parameters) {\n+                        final BrokerRequest brokerRequest = mRequestAdapter.\n+                                brokerRequestFromSilentOperationParameters(parameters);\n+                        return new Gson().toJson(brokerRequest);\n+                    }\n+\n+                    @Nullable\n+                    @Override\n+                    public String[] getOptions() {\n+                        return new String[]{negotiatedBrokerProtocolVersion};\n+                    }\n+\n+                    @NonNull\n+                    @Override\n+                    public String getMethodName() {\n+                        return methodName;\n+                    }\n+\n+                    @NonNull\n+                    @Override\n+                    public String getUriPath() {\n+                        return ACQUIRE_TOKEN_SILENT_PATH;\n+                    }\n+\n+                    @NonNull\n+                    @Override\n+                    public AcquireTokenResult getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                        return mResultAdapter.getAcquireTokenResultFromResultBundle(resultBundle);\n+                    }\n+                });\n+    }\n+\n+    @Override\n+    List<ICacheRecord> getBrokerAccounts(@NonNull final CommandParameters parameters,\n+                                         @Nullable final String negotiatedBrokerProtocolVersion) throws BaseException {\n+        final String methodName = \"getBrokerAccountsWithContentProvider\";\n+        return performContentProviderOperation(\n+                parameters,\n+                new ContentProviderOperation<CommandParameters, List<ICacheRecord>>() {\n+            @Nullable\n+            @Override\n+            public String getRequestString(CommandParameters parameters) {\n+                return mRequestAdapter.getRequestStringForGetAccounts(parameters);\n+            }\n+\n+            @Nullable\n+            @Override\n+            public String[] getOptions() {\n+                return new String[]{negotiatedBrokerProtocolVersion};\n+            }\n+\n+            @NonNull\n+            @Override\n+            public String getMethodName() {\n+                return methodName;\n+            }\n+\n+            @NonNull\n+            @Override\n+            public String getUriPath() {\n+                return GET_ACCOUNTS_PATH;\n+            }\n+\n+            @NonNull\n+            @Override\n+            public List<ICacheRecord> getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                return mResultAdapter.getAccountsFromResultBundle(resultBundle);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    void removeBrokerAccount(@NonNull final RemoveAccountCommandParameters parameters,\n+                             @Nullable final String negotiatedBrokerProtocolVersion) throws BaseException {\n+\n+        final String methodName = \"removeBrokerAccountWithContentProvider\";\n+\n+        performContentProviderOperation(\n+                parameters,\n+                new ContentProviderOperation<RemoveAccountCommandParameters, Void>() {\n+            @Nullable\n+            @Override\n+            public String getRequestString(RemoveAccountCommandParameters parameters) {\n+                return mRequestAdapter.getRequestStringForRemoveAccount(parameters);\n+            }\n+\n+            @Nullable\n+            @Override\n+            public String[] getOptions() {\n+                return new String[]{negotiatedBrokerProtocolVersion};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1MjIwNQ=="}, "originalCommit": {"oid": "403d258cd4f89909e852c175a72174972a9a6b9f"}, "originalPosition": 339}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTczODE4OnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerMsalController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODoyNDo0NVrOGdVOSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMzoyNjoyM1rOGeHM5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwOTYwOQ==", "bodyText": "Should we try authService first for a couple of release? Once it's tried and tested (i.e. with Teams), then we can switch it to the first one in the list.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053#discussion_r433409609", "createdAt": "2020-06-01T18:24:45Z", "author": {"login": "rpdome"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerMsalController.java", "diffHunk": "@@ -246,6 +246,7 @@ public AcquireTokenResult acquireToken(InteractiveTokenCommandParameters paramet\n     // The order matters.\n     private List<BrokerBaseStrategy> getStrategies() {\n         final List<BrokerBaseStrategy> strategies = new ArrayList<>();\n+        strategies.add(new BrokerContentProviderStrategy());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9020493baf4c990129af7f4d303efd5a03c85c22"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIyODQ1Mg==", "bodyText": "Teams needs to test this on prod brokers right, if we add AuthService first, they will still run into this issue and ContentProvider fallback might not work. ContentProvider does the data transfer using android shared memory but it still uses Binder to communicate, and if the process is dead due to the exception before, this can' communicate as well.\nAlso, Since we always fallback to other strategies, it should work like before", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053#discussion_r434228452", "createdAt": "2020-06-02T23:26:23Z", "author": {"login": "kreedula"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerMsalController.java", "diffHunk": "@@ -246,6 +246,7 @@ public AcquireTokenResult acquireToken(InteractiveTokenCommandParameters paramet\n     // The order matters.\n     private List<BrokerBaseStrategy> getStrategies() {\n         final List<BrokerBaseStrategy> strategies = new ArrayList<>();\n+        strategies.add(new BrokerContentProviderStrategy());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwOTYwOQ=="}, "originalCommit": {"oid": "9020493baf4c990129af7f4d303efd5a03c85c22"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTc5NzU0OnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerContentProviderStrategy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODo0Mjo0MlrOGdVzZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMzoxODo1OVrOGeHDvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQxOTEwOA==", "bodyText": "Is this doing the same thing as completeInteractiveRequestIntent()?\n(Other strategies are using that, let's refactor in such a way that they're doing the same thing - either using that function or keep using this).", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053#discussion_r433419108", "createdAt": "2020-06-01T18:42:42Z", "author": {"login": "rpdome"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerContentProviderStrategy.java", "diffHunk": "@@ -0,0 +1,446 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.internal.controllers;\n+\n+import android.content.Context;\n+import android.content.Intent;\n+import android.database.Cursor;\n+import android.net.Uri;\n+import android.os.Bundle;\n+import android.util.Base64;\n+\n+import com.microsoft.identity.client.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.internal.broker.BrokerValidator;\n+import com.microsoft.identity.common.internal.cache.ICacheRecord;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.InteractiveTokenCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.RemoveAccountCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.SilentTokenCommandParameters;\n+import com.microsoft.identity.common.internal.logging.Logger;\n+import com.microsoft.identity.common.internal.result.AcquireTokenResult;\n+import com.microsoft.identity.common.internal.telemetry.Telemetry;\n+import com.microsoft.identity.common.internal.telemetry.TelemetryEventStrings;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerEndEvent;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerStartEvent;\n+import com.microsoft.identity.common.internal.util.ParcelableUtil;\n+\n+import java.util.List;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_SILENT_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.AUTHORITY;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.CONTENT_SCHEME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_CURRENT_ACCOUNT_SHARED_DEVICE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_DEVICE_MODE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.HELLO_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.REMOVE_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.SIGN_OUT_FROM_SHARED_DEVICE_PATH;\n+\n+public class BrokerContentProviderStrategy extends BrokerBaseStrategy {\n+\n+    private static final String TAG = BrokerContentProviderStrategy.class.getName();\n+\n+    public interface ContentProviderOperation<T extends CommandParameters, U> {\n+\n+        /**\n+         * Constructs and returns a data string for the request to the broker from the CommandParameters.\n+         */\n+        @Nullable\n+        Bundle getRequestBundle(T parameters);\n+\n+        /**\n+         * Name of task for logging and telemetry purposes\n+         */\n+        @NonNull\n+        String getMethodName();\n+\n+        /**\n+         * Uri path for specific broker operation\n+         */\n+        @NonNull\n+        String getUriPath();\n+\n+        /**\n+         * Constructs and returns the result from the request bundle returned by the broker.\n+         */\n+        @NonNull\n+        U getResultFromBundle(Bundle resultBundle) throws BaseException;\n+    }\n+\n+    private <T extends CommandParameters, U> U performContentProviderOperation(\n+            @NonNull final T parameters,\n+            @NonNull final ContentProviderOperation<T, U> contentProviderOperation) throws BaseException {\n+\n+        final String methodName = contentProviderOperation.getMethodName();\n+\n+        Telemetry.emit(\n+                new BrokerStartEvent()\n+                        .putAction(methodName)\n+                        .putStrategy(TelemetryEventStrings.Value.CONTENT_PROVIDER)\n+        );\n+        final Uri uri = getContentProviderURI(\n+                parameters.getAndroidApplicationContext(),\n+                contentProviderOperation.getUriPath()\n+        );\n+        Logger.info(TAG + methodName, \"Request to BrokerContentProvider for uri path \" +\n+                contentProviderOperation.getUriPath()\n+        );\n+\n+        String marshalledRequestString = null;\n+\n+        final Bundle requestBundle = contentProviderOperation.getRequestBundle(parameters);\n+        if (requestBundle != null) {\n+            byte[] marshalledBytes = ParcelableUtil.marshall(requestBundle);\n+            marshalledRequestString = Base64.encodeToString(marshalledBytes, 0);\n+        }\n+\n+        final Cursor cursor = parameters.getAndroidApplicationContext().getContentResolver().query(\n+                uri,\n+                null,\n+                marshalledRequestString,\n+                null,\n+                null\n+        );\n+\n+        if (cursor != null) {\n+            final U result = contentProviderOperation.getResultFromBundle(cursor.getExtras());\n+            cursor.close();\n+            Telemetry.emit(\n+                    new BrokerEndEvent()\n+                            .putAction(methodName)\n+                            .isSuccessful(true)\n+            );\n+            Logger.info(TAG + methodName, \"Received successful result from broker\");\n+            return result;\n+        } else {\n+            final String message = \"Failed to get result from Broker Content Provider, cursor is null\";\n+            Logger.error(TAG + methodName, message, null);\n+            Telemetry.emit(\n+                    new BrokerEndEvent()\n+                            .putAction(methodName)\n+                            .isSuccessful(false)\n+                            .putErrorDescription(message)\n+            );\n+            throw new BrokerCommunicationException(message, null);\n+        }\n+    }\n+\n+    @Override\n+    String hello(@NonNull CommandParameters parameters) throws BaseException {\n+        final String methodName = \"helloWithContentProvider\";\n+\n+        return performContentProviderOperation(parameters, new ContentProviderOperation<CommandParameters, String>() {\n+            @Override\n+            public Bundle getRequestBundle(CommandParameters parameters) {\n+                return mRequestAdapter.getRequestBundleForHello(parameters);\n+            }\n+\n+            @Override\n+            public String getMethodName() {\n+                return methodName;\n+            }\n+\n+            @Override\n+            public String getUriPath() {\n+                return HELLO_PATH;\n+            }\n+\n+            @Override\n+            public String getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                return mResultAdapter.verifyHelloFromResultBundle(resultBundle);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    Intent getBrokerAuthorizationIntent(@NonNull final InteractiveTokenCommandParameters parameters,\n+                                        @Nullable final String negotiatedBrokerProtocolVersion)\n+            throws BaseException {\n+        final String methodName = \"getBrokerAuthorizationIntentForContentProvider\";\n+\n+        return performContentProviderOperation(\n+                parameters,\n+                new ContentProviderOperation<InteractiveTokenCommandParameters, Intent>() {\n+\n+                    @Override\n+                    public Bundle getRequestBundle(InteractiveTokenCommandParameters parameters) {\n+                        return null; // broker returns us an intent based on calling uid , no request string needed\n+                    }\n+\n+                    @Override\n+                    public String getMethodName() {\n+                        return methodName;\n+                    }\n+\n+                    @Override\n+                    public String getUriPath() {\n+                        return ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+                    }\n+\n+                    @Override\n+                    public Intent getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                        return mRequestAdapter.getRequestIntentForAcquireTokenInteractive(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9020493baf4c990129af7f4d303efd5a03c85c22"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIyNjEwOQ==", "bodyText": "Nope, it's not exactly doing the same thing. We can get an Intent as a result using ContentProvider . I mean technically we don't need an Intent here for other strategies as well, all we need is a bundle or data to launch the AccountChooserActivity. So I consolidated constructing the bundle logic in broker , but it returns an intent for auth and accountmanager strategies and bundle here , so we need to construct the intent and launch the activity", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053#discussion_r434226109", "createdAt": "2020-06-02T23:18:59Z", "author": {"login": "kreedula"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerContentProviderStrategy.java", "diffHunk": "@@ -0,0 +1,446 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.internal.controllers;\n+\n+import android.content.Context;\n+import android.content.Intent;\n+import android.database.Cursor;\n+import android.net.Uri;\n+import android.os.Bundle;\n+import android.util.Base64;\n+\n+import com.microsoft.identity.client.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.internal.broker.BrokerValidator;\n+import com.microsoft.identity.common.internal.cache.ICacheRecord;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.InteractiveTokenCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.RemoveAccountCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.SilentTokenCommandParameters;\n+import com.microsoft.identity.common.internal.logging.Logger;\n+import com.microsoft.identity.common.internal.result.AcquireTokenResult;\n+import com.microsoft.identity.common.internal.telemetry.Telemetry;\n+import com.microsoft.identity.common.internal.telemetry.TelemetryEventStrings;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerEndEvent;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerStartEvent;\n+import com.microsoft.identity.common.internal.util.ParcelableUtil;\n+\n+import java.util.List;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_SILENT_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.AUTHORITY;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.CONTENT_SCHEME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_CURRENT_ACCOUNT_SHARED_DEVICE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_DEVICE_MODE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.HELLO_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.REMOVE_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.SIGN_OUT_FROM_SHARED_DEVICE_PATH;\n+\n+public class BrokerContentProviderStrategy extends BrokerBaseStrategy {\n+\n+    private static final String TAG = BrokerContentProviderStrategy.class.getName();\n+\n+    public interface ContentProviderOperation<T extends CommandParameters, U> {\n+\n+        /**\n+         * Constructs and returns a data string for the request to the broker from the CommandParameters.\n+         */\n+        @Nullable\n+        Bundle getRequestBundle(T parameters);\n+\n+        /**\n+         * Name of task for logging and telemetry purposes\n+         */\n+        @NonNull\n+        String getMethodName();\n+\n+        /**\n+         * Uri path for specific broker operation\n+         */\n+        @NonNull\n+        String getUriPath();\n+\n+        /**\n+         * Constructs and returns the result from the request bundle returned by the broker.\n+         */\n+        @NonNull\n+        U getResultFromBundle(Bundle resultBundle) throws BaseException;\n+    }\n+\n+    private <T extends CommandParameters, U> U performContentProviderOperation(\n+            @NonNull final T parameters,\n+            @NonNull final ContentProviderOperation<T, U> contentProviderOperation) throws BaseException {\n+\n+        final String methodName = contentProviderOperation.getMethodName();\n+\n+        Telemetry.emit(\n+                new BrokerStartEvent()\n+                        .putAction(methodName)\n+                        .putStrategy(TelemetryEventStrings.Value.CONTENT_PROVIDER)\n+        );\n+        final Uri uri = getContentProviderURI(\n+                parameters.getAndroidApplicationContext(),\n+                contentProviderOperation.getUriPath()\n+        );\n+        Logger.info(TAG + methodName, \"Request to BrokerContentProvider for uri path \" +\n+                contentProviderOperation.getUriPath()\n+        );\n+\n+        String marshalledRequestString = null;\n+\n+        final Bundle requestBundle = contentProviderOperation.getRequestBundle(parameters);\n+        if (requestBundle != null) {\n+            byte[] marshalledBytes = ParcelableUtil.marshall(requestBundle);\n+            marshalledRequestString = Base64.encodeToString(marshalledBytes, 0);\n+        }\n+\n+        final Cursor cursor = parameters.getAndroidApplicationContext().getContentResolver().query(\n+                uri,\n+                null,\n+                marshalledRequestString,\n+                null,\n+                null\n+        );\n+\n+        if (cursor != null) {\n+            final U result = contentProviderOperation.getResultFromBundle(cursor.getExtras());\n+            cursor.close();\n+            Telemetry.emit(\n+                    new BrokerEndEvent()\n+                            .putAction(methodName)\n+                            .isSuccessful(true)\n+            );\n+            Logger.info(TAG + methodName, \"Received successful result from broker\");\n+            return result;\n+        } else {\n+            final String message = \"Failed to get result from Broker Content Provider, cursor is null\";\n+            Logger.error(TAG + methodName, message, null);\n+            Telemetry.emit(\n+                    new BrokerEndEvent()\n+                            .putAction(methodName)\n+                            .isSuccessful(false)\n+                            .putErrorDescription(message)\n+            );\n+            throw new BrokerCommunicationException(message, null);\n+        }\n+    }\n+\n+    @Override\n+    String hello(@NonNull CommandParameters parameters) throws BaseException {\n+        final String methodName = \"helloWithContentProvider\";\n+\n+        return performContentProviderOperation(parameters, new ContentProviderOperation<CommandParameters, String>() {\n+            @Override\n+            public Bundle getRequestBundle(CommandParameters parameters) {\n+                return mRequestAdapter.getRequestBundleForHello(parameters);\n+            }\n+\n+            @Override\n+            public String getMethodName() {\n+                return methodName;\n+            }\n+\n+            @Override\n+            public String getUriPath() {\n+                return HELLO_PATH;\n+            }\n+\n+            @Override\n+            public String getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                return mResultAdapter.verifyHelloFromResultBundle(resultBundle);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    Intent getBrokerAuthorizationIntent(@NonNull final InteractiveTokenCommandParameters parameters,\n+                                        @Nullable final String negotiatedBrokerProtocolVersion)\n+            throws BaseException {\n+        final String methodName = \"getBrokerAuthorizationIntentForContentProvider\";\n+\n+        return performContentProviderOperation(\n+                parameters,\n+                new ContentProviderOperation<InteractiveTokenCommandParameters, Intent>() {\n+\n+                    @Override\n+                    public Bundle getRequestBundle(InteractiveTokenCommandParameters parameters) {\n+                        return null; // broker returns us an intent based on calling uid , no request string needed\n+                    }\n+\n+                    @Override\n+                    public String getMethodName() {\n+                        return methodName;\n+                    }\n+\n+                    @Override\n+                    public String getUriPath() {\n+                        return ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+                    }\n+\n+                    @Override\n+                    public Intent getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                        return mRequestAdapter.getRequestIntentForAcquireTokenInteractive(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQxOTEwOA=="}, "originalCommit": {"oid": "9020493baf4c990129af7f4d303efd5a03c85c22"}, "originalPosition": 207}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTIwOTIzOnYy", "diffSide": "LEFT", "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerAccountManagerStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMTowMDo1OVrOGeyVuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMToxNzoyOFrOGeykwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkzNTIyNA==", "bodyText": "Are we no longer sending this?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053#discussion_r434935224", "createdAt": "2020-06-04T01:00:59Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerAccountManagerStrategy.java", "diffHunk": "@@ -212,11 +212,9 @@ public Bundle getRequestBundle(SilentTokenCommandParameters parameters) {\n                                 parameters,\n                                 negotiatedBrokerProtocolVersion\n                         );\n-                        requestBundle.putString(AuthenticationConstants.Broker.BROKER_ACCOUNT_MANAGER_OPERATION_KEY,\n-                                AuthenticationConstants.BrokerAccountManagerOperation.ACQUIRE_TOKEN_SILENT);\n                         requestBundle.putString(\n-                                AuthenticationConstants.Broker.NEGOTIATED_BP_VERSION_KEY,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "971d018289bf08a1ed0aacb2dda511b52ecb0872"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkzOTA3NA==", "bodyText": "We do, but i moved the logic to MsalBrokerRequestAdapter where the bundle is constructed to avoid duplicating in all strategies", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053#discussion_r434939074", "createdAt": "2020-06-04T01:17:28Z", "author": {"login": "kreedula"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerAccountManagerStrategy.java", "diffHunk": "@@ -212,11 +212,9 @@ public Bundle getRequestBundle(SilentTokenCommandParameters parameters) {\n                                 parameters,\n                                 negotiatedBrokerProtocolVersion\n                         );\n-                        requestBundle.putString(AuthenticationConstants.Broker.BROKER_ACCOUNT_MANAGER_OPERATION_KEY,\n-                                AuthenticationConstants.BrokerAccountManagerOperation.ACQUIRE_TOKEN_SILENT);\n                         requestBundle.putString(\n-                                AuthenticationConstants.Broker.NEGOTIATED_BP_VERSION_KEY,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkzNTIyNA=="}, "originalCommit": {"oid": "971d018289bf08a1ed0aacb2dda511b52ecb0872"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTI3Mzg3OnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerMsalController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMTo0MjoxNlrOGey92g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMTo0MjoxNlrOGey92g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk0NTQ5OA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053#discussion_r434945498", "createdAt": "2020-06-04T01:42:16Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerMsalController.java", "diffHunk": "@@ -254,14 +256,26 @@ public AcquireTokenResult acquireToken(InteractiveTokenCommandParameters paramet\n     // The order matters.\n     private List<BrokerBaseStrategy> getStrategies() {\n         final List<BrokerBaseStrategy> strategies = new ArrayList<>();\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(\"Broker Strategies added : \");\n \n-        if (isMicrosoftAuthServiceSupported(mApplicationContext)) {\n+        if(isBrokerContentProviderAvailable()){\n+            sb.append(\"ContentProviderStrategy, \");\n+            strategies.add(new BrokerContentProviderStrategy());\n+        }\n+\n+        if (isMicrosoftAuthServiceSupported()) {\n+            sb.append(\"AuthServiceStrategy, \");\n             strategies.add(new BrokerAuthServiceStrategy());\n         }\n+\n         if (AccountManagerUtil.canUseAccountManagerOperation(mApplicationContext)){\n+            sb.append(\"AccountManagerStrategy.\");\n             strategies.add(new BrokerAccountManagerStrategy());\n         }\n \n+        Logger.info(TAG, sb.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1dde4bf1271b4ac4456bc8dc87aa1b3b8bc53ca"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTc4MDIzOnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerContentProviderStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToyOTo0M1rOGfLkbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToyOTo0M1rOGfLkbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0ODU5MA==", "bodyText": "Class description?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053#discussion_r435348590", "createdAt": "2020-06-04T15:29:43Z", "author": {"login": "iambmelt"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerContentProviderStrategy.java", "diffHunk": "@@ -0,0 +1,446 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.internal.controllers;\n+\n+import android.content.Context;\n+import android.content.Intent;\n+import android.database.Cursor;\n+import android.net.Uri;\n+import android.os.Bundle;\n+import android.util.Base64;\n+\n+import com.microsoft.identity.client.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.internal.broker.BrokerValidator;\n+import com.microsoft.identity.common.internal.cache.ICacheRecord;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.InteractiveTokenCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.RemoveAccountCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.SilentTokenCommandParameters;\n+import com.microsoft.identity.common.internal.logging.Logger;\n+import com.microsoft.identity.common.internal.result.AcquireTokenResult;\n+import com.microsoft.identity.common.internal.telemetry.Telemetry;\n+import com.microsoft.identity.common.internal.telemetry.TelemetryEventStrings;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerEndEvent;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerStartEvent;\n+import com.microsoft.identity.common.internal.util.ParcelableUtil;\n+\n+import java.util.List;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_SILENT_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.AUTHORITY;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.CONTENT_SCHEME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_CURRENT_ACCOUNT_SHARED_DEVICE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_DEVICE_MODE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.HELLO_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.REMOVE_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.SIGN_OUT_FROM_SHARED_DEVICE_PATH;\n+\n+public class BrokerContentProviderStrategy extends BrokerBaseStrategy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1dde4bf1271b4ac4456bc8dc87aa1b3b8bc53ca"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1945, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}