{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4NTUxOTMw", "number": 1112, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1MjowMVrOETbCZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjoyNToyNFrOEVmTOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODAxMzgyOnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1MjowMVrOG5JtVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1MjowMVrOG5JtVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4MTA3Nw==", "bodyText": "authorization_pending is declared too many times. It must go in a constant in the appropriate constants file.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r462581077", "createdAt": "2020-07-29T20:52:01Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -463,14 +468,224 @@ public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) t\n     }\n \n     @Override\n-    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws MsalException, ClientException, IOException {\n+        // Logging start of method\n+        final String methodName = \":deviceCodeFlowAuthRequest\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Authorizing user code...\"\n+        );\n+\n+        // Default scopes here\n+        final Set<String> mergedScopes = addDefaultScopes(parameters);\n+\n+        final DeviceCodeFlowCommandParameters parametersWithScopes = parameters\n+                .toBuilder()\n+                .scopes(mergedScopes)\n+                .build();\n+\n+        logParameters(TAG, parametersWithScopes);\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putProperties(parametersWithScopes)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parametersWithScopes.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parametersWithScopes\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 1: Get user code\n+        // Populate global authorization request\n+        mAuthorizationRequest = getAuthorizationRequest(oAuth2Strategy, parametersWithScopes);\n+\n+        // Call method defined in oAuth2Strategy to request authorization\n+        final AuthorizationResult authorizationResult = oAuth2Strategy.getDeviceCode((MicrosoftStsAuthorizationRequest) mAuthorizationRequest, null);\n+\n+        validateServiceResult(authorizationResult);\n+\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow authorization step finished...\"\n+        );\n+        logResult(TAG, authorizationResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        return authorizationResult;\n     }\n \n     @Override\n-    public AcquireTokenResult acquireDeviceCodeFlowToken(final AuthorizationResult authorizationResult, DeviceCodeFlowCommandParameters commandParameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(\n+            final AuthorizationResult authorizationResult,\n+            final DeviceCodeFlowCommandParameters parameters)\n+            throws MsalException, ClientException, IOException, InterruptedException {\n+\n+        // Logging start of method\n+        final String methodName = \":acquireDeviceCodeFlowToken\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Polling for token...\"\n+        );\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_POLLING\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_POLLING)\n+        );\n+\n+        // Create empty AcquireTokenResult object\n+        final AcquireTokenResult acquireTokenResult = new AcquireTokenResult();\n+\n+        // Assign authorization result\n+        acquireTokenResult.setAuthorizationResult(authorizationResult);\n+\n+        // Fetch the Authorization Response\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parameters.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parameters\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 2: Poll for token\n+        TokenResult tokenResult = null;\n+\n+        // Create token request outside of loop so it isn't re-created after every loop\n+        final MicrosoftStsTokenRequest tokenRequest = (MicrosoftStsTokenRequest) oAuth2Strategy.createTokenRequest(\n+                mAuthorizationRequest,\n+                authorizationResponse,\n+                parameters.getAuthenticationScheme()\n+        );\n+\n+        // Fetch wait interval\n+        final int interval = Integer.parseInt(authorizationResponse.getInterval()) * 1000;\n+\n+        String errorCode = \"authorization_pending\";\n+\n+        // Loop to send multiple requests checking for token\n+        while (errorCode.equals(\"authorization_pending\")) {\n+            errorCode = \"\"; // Reset error code\n+\n+            // Execute Token Request\n+            tokenResult = oAuth2Strategy.requestToken(tokenRequest);\n+\n+            if (tokenResult.getErrorResponse() != null) {\n+                errorCode = tokenResult.getErrorResponse().getError();\n+            }\n+\n+            if (errorCode.equals(\"authorization_pending\")) {\n+                // interval is passed through params\n+                Thread.sleep(interval);\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc5440c3b99b8d2f8ef041617e51269c48b71bd2"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODAxNjAyOnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1Mjo0MFrOG5JupA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1Mjo0MFrOG5JupA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4MTQxMg==", "bodyText": "Consider refactoring into a boolean method such as:\n   while (authorizationPending())", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r462581412", "createdAt": "2020-07-29T20:52:40Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -463,14 +468,224 @@ public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) t\n     }\n \n     @Override\n-    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws MsalException, ClientException, IOException {\n+        // Logging start of method\n+        final String methodName = \":deviceCodeFlowAuthRequest\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Authorizing user code...\"\n+        );\n+\n+        // Default scopes here\n+        final Set<String> mergedScopes = addDefaultScopes(parameters);\n+\n+        final DeviceCodeFlowCommandParameters parametersWithScopes = parameters\n+                .toBuilder()\n+                .scopes(mergedScopes)\n+                .build();\n+\n+        logParameters(TAG, parametersWithScopes);\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putProperties(parametersWithScopes)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parametersWithScopes.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parametersWithScopes\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 1: Get user code\n+        // Populate global authorization request\n+        mAuthorizationRequest = getAuthorizationRequest(oAuth2Strategy, parametersWithScopes);\n+\n+        // Call method defined in oAuth2Strategy to request authorization\n+        final AuthorizationResult authorizationResult = oAuth2Strategy.getDeviceCode((MicrosoftStsAuthorizationRequest) mAuthorizationRequest, null);\n+\n+        validateServiceResult(authorizationResult);\n+\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow authorization step finished...\"\n+        );\n+        logResult(TAG, authorizationResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        return authorizationResult;\n     }\n \n     @Override\n-    public AcquireTokenResult acquireDeviceCodeFlowToken(final AuthorizationResult authorizationResult, DeviceCodeFlowCommandParameters commandParameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(\n+            final AuthorizationResult authorizationResult,\n+            final DeviceCodeFlowCommandParameters parameters)\n+            throws MsalException, ClientException, IOException, InterruptedException {\n+\n+        // Logging start of method\n+        final String methodName = \":acquireDeviceCodeFlowToken\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Polling for token...\"\n+        );\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_POLLING\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_POLLING)\n+        );\n+\n+        // Create empty AcquireTokenResult object\n+        final AcquireTokenResult acquireTokenResult = new AcquireTokenResult();\n+\n+        // Assign authorization result\n+        acquireTokenResult.setAuthorizationResult(authorizationResult);\n+\n+        // Fetch the Authorization Response\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parameters.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parameters\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 2: Poll for token\n+        TokenResult tokenResult = null;\n+\n+        // Create token request outside of loop so it isn't re-created after every loop\n+        final MicrosoftStsTokenRequest tokenRequest = (MicrosoftStsTokenRequest) oAuth2Strategy.createTokenRequest(\n+                mAuthorizationRequest,\n+                authorizationResponse,\n+                parameters.getAuthenticationScheme()\n+        );\n+\n+        // Fetch wait interval\n+        final int interval = Integer.parseInt(authorizationResponse.getInterval()) * 1000;\n+\n+        String errorCode = \"authorization_pending\";\n+\n+        // Loop to send multiple requests checking for token\n+        while (errorCode.equals(\"authorization_pending\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc5440c3b99b8d2f8ef041617e51269c48b71bd2"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODAyMjU1OnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1NDoyNFrOG5Jygw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMjoyMTo1M1rOG5QsGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4MjQwMw==", "bodyText": "Do we actually want to throw all these exceptions? Or should this method handle some of these directly?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r462582403", "createdAt": "2020-07-29T20:54:24Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -463,14 +468,224 @@ public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) t\n     }\n \n     @Override\n-    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws MsalException, ClientException, IOException {\n+        // Logging start of method\n+        final String methodName = \":deviceCodeFlowAuthRequest\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Authorizing user code...\"\n+        );\n+\n+        // Default scopes here\n+        final Set<String> mergedScopes = addDefaultScopes(parameters);\n+\n+        final DeviceCodeFlowCommandParameters parametersWithScopes = parameters\n+                .toBuilder()\n+                .scopes(mergedScopes)\n+                .build();\n+\n+        logParameters(TAG, parametersWithScopes);\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putProperties(parametersWithScopes)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parametersWithScopes.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parametersWithScopes\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 1: Get user code\n+        // Populate global authorization request\n+        mAuthorizationRequest = getAuthorizationRequest(oAuth2Strategy, parametersWithScopes);\n+\n+        // Call method defined in oAuth2Strategy to request authorization\n+        final AuthorizationResult authorizationResult = oAuth2Strategy.getDeviceCode((MicrosoftStsAuthorizationRequest) mAuthorizationRequest, null);\n+\n+        validateServiceResult(authorizationResult);\n+\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow authorization step finished...\"\n+        );\n+        logResult(TAG, authorizationResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        return authorizationResult;\n     }\n \n     @Override\n-    public AcquireTokenResult acquireDeviceCodeFlowToken(final AuthorizationResult authorizationResult, DeviceCodeFlowCommandParameters commandParameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(\n+            final AuthorizationResult authorizationResult,\n+            final DeviceCodeFlowCommandParameters parameters)\n+            throws MsalException, ClientException, IOException, InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc5440c3b99b8d2f8ef041617e51269c48b71bd2"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5NTQ1MA==", "bodyText": "I think it's fine as is? MsalException should be thrown since we want to communicate that to the command class. I feel the other three would point to an error on our end.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r462695450", "createdAt": "2020-07-30T02:21:53Z", "author": {"login": "t-fadura"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -463,14 +468,224 @@ public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) t\n     }\n \n     @Override\n-    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws MsalException, ClientException, IOException {\n+        // Logging start of method\n+        final String methodName = \":deviceCodeFlowAuthRequest\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Authorizing user code...\"\n+        );\n+\n+        // Default scopes here\n+        final Set<String> mergedScopes = addDefaultScopes(parameters);\n+\n+        final DeviceCodeFlowCommandParameters parametersWithScopes = parameters\n+                .toBuilder()\n+                .scopes(mergedScopes)\n+                .build();\n+\n+        logParameters(TAG, parametersWithScopes);\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putProperties(parametersWithScopes)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parametersWithScopes.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parametersWithScopes\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 1: Get user code\n+        // Populate global authorization request\n+        mAuthorizationRequest = getAuthorizationRequest(oAuth2Strategy, parametersWithScopes);\n+\n+        // Call method defined in oAuth2Strategy to request authorization\n+        final AuthorizationResult authorizationResult = oAuth2Strategy.getDeviceCode((MicrosoftStsAuthorizationRequest) mAuthorizationRequest, null);\n+\n+        validateServiceResult(authorizationResult);\n+\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow authorization step finished...\"\n+        );\n+        logResult(TAG, authorizationResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        return authorizationResult;\n     }\n \n     @Override\n-    public AcquireTokenResult acquireDeviceCodeFlowToken(final AuthorizationResult authorizationResult, DeviceCodeFlowCommandParameters commandParameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(\n+            final AuthorizationResult authorizationResult,\n+            final DeviceCodeFlowCommandParameters parameters)\n+            throws MsalException, ClientException, IOException, InterruptedException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4MjQwMw=="}, "originalCommit": {"oid": "dc5440c3b99b8d2f8ef041617e51269c48b71bd2"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODAyOTk0OnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1Njo0MFrOG5J3Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMjowNDoyMlrOG5QaYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4MzU4Ng==", "bodyText": "Can we get here and get method invoked on null object?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r462583586", "createdAt": "2020-07-29T20:56:40Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -463,14 +468,224 @@ public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) t\n     }\n \n     @Override\n-    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws MsalException, ClientException, IOException {\n+        // Logging start of method\n+        final String methodName = \":deviceCodeFlowAuthRequest\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Authorizing user code...\"\n+        );\n+\n+        // Default scopes here\n+        final Set<String> mergedScopes = addDefaultScopes(parameters);\n+\n+        final DeviceCodeFlowCommandParameters parametersWithScopes = parameters\n+                .toBuilder()\n+                .scopes(mergedScopes)\n+                .build();\n+\n+        logParameters(TAG, parametersWithScopes);\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putProperties(parametersWithScopes)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parametersWithScopes.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parametersWithScopes\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 1: Get user code\n+        // Populate global authorization request\n+        mAuthorizationRequest = getAuthorizationRequest(oAuth2Strategy, parametersWithScopes);\n+\n+        // Call method defined in oAuth2Strategy to request authorization\n+        final AuthorizationResult authorizationResult = oAuth2Strategy.getDeviceCode((MicrosoftStsAuthorizationRequest) mAuthorizationRequest, null);\n+\n+        validateServiceResult(authorizationResult);\n+\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow authorization step finished...\"\n+        );\n+        logResult(TAG, authorizationResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        return authorizationResult;\n     }\n \n     @Override\n-    public AcquireTokenResult acquireDeviceCodeFlowToken(final AuthorizationResult authorizationResult, DeviceCodeFlowCommandParameters commandParameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(\n+            final AuthorizationResult authorizationResult,\n+            final DeviceCodeFlowCommandParameters parameters)\n+            throws MsalException, ClientException, IOException, InterruptedException {\n+\n+        // Logging start of method\n+        final String methodName = \":acquireDeviceCodeFlowToken\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Polling for token...\"\n+        );\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_POLLING\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_POLLING)\n+        );\n+\n+        // Create empty AcquireTokenResult object\n+        final AcquireTokenResult acquireTokenResult = new AcquireTokenResult();\n+\n+        // Assign authorization result\n+        acquireTokenResult.setAuthorizationResult(authorizationResult);\n+\n+        // Fetch the Authorization Response\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parameters.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parameters\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 2: Poll for token\n+        TokenResult tokenResult = null;\n+\n+        // Create token request outside of loop so it isn't re-created after every loop\n+        final MicrosoftStsTokenRequest tokenRequest = (MicrosoftStsTokenRequest) oAuth2Strategy.createTokenRequest(\n+                mAuthorizationRequest,\n+                authorizationResponse,\n+                parameters.getAuthenticationScheme()\n+        );\n+\n+        // Fetch wait interval\n+        final int interval = Integer.parseInt(authorizationResponse.getInterval()) * 1000;\n+\n+        String errorCode = \"authorization_pending\";\n+\n+        // Loop to send multiple requests checking for token\n+        while (errorCode.equals(\"authorization_pending\")) {\n+            errorCode = \"\"; // Reset error code\n+\n+            // Execute Token Request\n+            tokenResult = oAuth2Strategy.requestToken(tokenRequest);\n+\n+            if (tokenResult.getErrorResponse() != null) {\n+                errorCode = tokenResult.getErrorResponse().getError();\n+            }\n+\n+            if (errorCode.equals(\"authorization_pending\")) {\n+                // interval is passed through params\n+                Thread.sleep(interval);\n+            }\n+        }\n+\n+        // Assign token result\n+        acquireTokenResult.setTokenResult(tokenResult);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc5440c3b99b8d2f8ef041617e51269c48b71bd2"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5MDkxNA==", "bodyText": "I don't think so, acquireTokenResult is manually created earlier in the method.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r462690914", "createdAt": "2020-07-30T02:04:22Z", "author": {"login": "t-fadura"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -463,14 +468,224 @@ public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) t\n     }\n \n     @Override\n-    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws MsalException, ClientException, IOException {\n+        // Logging start of method\n+        final String methodName = \":deviceCodeFlowAuthRequest\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Authorizing user code...\"\n+        );\n+\n+        // Default scopes here\n+        final Set<String> mergedScopes = addDefaultScopes(parameters);\n+\n+        final DeviceCodeFlowCommandParameters parametersWithScopes = parameters\n+                .toBuilder()\n+                .scopes(mergedScopes)\n+                .build();\n+\n+        logParameters(TAG, parametersWithScopes);\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putProperties(parametersWithScopes)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parametersWithScopes.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parametersWithScopes\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 1: Get user code\n+        // Populate global authorization request\n+        mAuthorizationRequest = getAuthorizationRequest(oAuth2Strategy, parametersWithScopes);\n+\n+        // Call method defined in oAuth2Strategy to request authorization\n+        final AuthorizationResult authorizationResult = oAuth2Strategy.getDeviceCode((MicrosoftStsAuthorizationRequest) mAuthorizationRequest, null);\n+\n+        validateServiceResult(authorizationResult);\n+\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow authorization step finished...\"\n+        );\n+        logResult(TAG, authorizationResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        return authorizationResult;\n     }\n \n     @Override\n-    public AcquireTokenResult acquireDeviceCodeFlowToken(final AuthorizationResult authorizationResult, DeviceCodeFlowCommandParameters commandParameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(\n+            final AuthorizationResult authorizationResult,\n+            final DeviceCodeFlowCommandParameters parameters)\n+            throws MsalException, ClientException, IOException, InterruptedException {\n+\n+        // Logging start of method\n+        final String methodName = \":acquireDeviceCodeFlowToken\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Polling for token...\"\n+        );\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_POLLING\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_POLLING)\n+        );\n+\n+        // Create empty AcquireTokenResult object\n+        final AcquireTokenResult acquireTokenResult = new AcquireTokenResult();\n+\n+        // Assign authorization result\n+        acquireTokenResult.setAuthorizationResult(authorizationResult);\n+\n+        // Fetch the Authorization Response\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parameters.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parameters\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 2: Poll for token\n+        TokenResult tokenResult = null;\n+\n+        // Create token request outside of loop so it isn't re-created after every loop\n+        final MicrosoftStsTokenRequest tokenRequest = (MicrosoftStsTokenRequest) oAuth2Strategy.createTokenRequest(\n+                mAuthorizationRequest,\n+                authorizationResponse,\n+                parameters.getAuthenticationScheme()\n+        );\n+\n+        // Fetch wait interval\n+        final int interval = Integer.parseInt(authorizationResponse.getInterval()) * 1000;\n+\n+        String errorCode = \"authorization_pending\";\n+\n+        // Loop to send multiple requests checking for token\n+        while (errorCode.equals(\"authorization_pending\")) {\n+            errorCode = \"\"; // Reset error code\n+\n+            // Execute Token Request\n+            tokenResult = oAuth2Strategy.requestToken(tokenRequest);\n+\n+            if (tokenResult.getErrorResponse() != null) {\n+                errorCode = tokenResult.getErrorResponse().getError();\n+            }\n+\n+            if (errorCode.equals(\"authorization_pending\")) {\n+                // interval is passed through params\n+                Thread.sleep(interval);\n+            }\n+        }\n+\n+        // Assign token result\n+        acquireTokenResult.setTokenResult(tokenResult);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4MzU4Ng=="}, "originalCommit": {"oid": "dc5440c3b99b8d2f8ef041617e51269c48b71bd2"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODAzMTE1OnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1NzowM1rOG5J36A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNjo0NjozOVrOG5rXYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4Mzc4NA==", "bodyText": "@AdamBJohnsonx recently wrote a sleepSafely method, consider using that here", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r462583784", "createdAt": "2020-07-29T20:57:03Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -463,14 +468,224 @@ public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) t\n     }\n \n     @Override\n-    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws MsalException, ClientException, IOException {\n+        // Logging start of method\n+        final String methodName = \":deviceCodeFlowAuthRequest\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Authorizing user code...\"\n+        );\n+\n+        // Default scopes here\n+        final Set<String> mergedScopes = addDefaultScopes(parameters);\n+\n+        final DeviceCodeFlowCommandParameters parametersWithScopes = parameters\n+                .toBuilder()\n+                .scopes(mergedScopes)\n+                .build();\n+\n+        logParameters(TAG, parametersWithScopes);\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putProperties(parametersWithScopes)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parametersWithScopes.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parametersWithScopes\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 1: Get user code\n+        // Populate global authorization request\n+        mAuthorizationRequest = getAuthorizationRequest(oAuth2Strategy, parametersWithScopes);\n+\n+        // Call method defined in oAuth2Strategy to request authorization\n+        final AuthorizationResult authorizationResult = oAuth2Strategy.getDeviceCode((MicrosoftStsAuthorizationRequest) mAuthorizationRequest, null);\n+\n+        validateServiceResult(authorizationResult);\n+\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow authorization step finished...\"\n+        );\n+        logResult(TAG, authorizationResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        return authorizationResult;\n     }\n \n     @Override\n-    public AcquireTokenResult acquireDeviceCodeFlowToken(final AuthorizationResult authorizationResult, DeviceCodeFlowCommandParameters commandParameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(\n+            final AuthorizationResult authorizationResult,\n+            final DeviceCodeFlowCommandParameters parameters)\n+            throws MsalException, ClientException, IOException, InterruptedException {\n+\n+        // Logging start of method\n+        final String methodName = \":acquireDeviceCodeFlowToken\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Polling for token...\"\n+        );\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_POLLING\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_POLLING)\n+        );\n+\n+        // Create empty AcquireTokenResult object\n+        final AcquireTokenResult acquireTokenResult = new AcquireTokenResult();\n+\n+        // Assign authorization result\n+        acquireTokenResult.setAuthorizationResult(authorizationResult);\n+\n+        // Fetch the Authorization Response\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parameters.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parameters\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 2: Poll for token\n+        TokenResult tokenResult = null;\n+\n+        // Create token request outside of loop so it isn't re-created after every loop\n+        final MicrosoftStsTokenRequest tokenRequest = (MicrosoftStsTokenRequest) oAuth2Strategy.createTokenRequest(\n+                mAuthorizationRequest,\n+                authorizationResponse,\n+                parameters.getAuthenticationScheme()\n+        );\n+\n+        // Fetch wait interval\n+        final int interval = Integer.parseInt(authorizationResponse.getInterval()) * 1000;\n+\n+        String errorCode = \"authorization_pending\";\n+\n+        // Loop to send multiple requests checking for token\n+        while (errorCode.equals(\"authorization_pending\")) {\n+            errorCode = \"\"; // Reset error code\n+\n+            // Execute Token Request\n+            tokenResult = oAuth2Strategy.requestToken(tokenRequest);\n+\n+            if (tokenResult.getErrorResponse() != null) {\n+                errorCode = tokenResult.getErrorResponse().getError();\n+            }\n+\n+            if (errorCode.equals(\"authorization_pending\")) {\n+                // interval is passed through params\n+                Thread.sleep(interval);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc5440c3b99b8d2f8ef041617e51269c48b71bd2"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEzMjUxNQ==", "bodyText": "Using that now!", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r463132515", "createdAt": "2020-07-30T16:46:39Z", "author": {"login": "t-fadura"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -463,14 +468,224 @@ public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) t\n     }\n \n     @Override\n-    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws MsalException, ClientException, IOException {\n+        // Logging start of method\n+        final String methodName = \":deviceCodeFlowAuthRequest\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Authorizing user code...\"\n+        );\n+\n+        // Default scopes here\n+        final Set<String> mergedScopes = addDefaultScopes(parameters);\n+\n+        final DeviceCodeFlowCommandParameters parametersWithScopes = parameters\n+                .toBuilder()\n+                .scopes(mergedScopes)\n+                .build();\n+\n+        logParameters(TAG, parametersWithScopes);\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putProperties(parametersWithScopes)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parametersWithScopes.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parametersWithScopes\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 1: Get user code\n+        // Populate global authorization request\n+        mAuthorizationRequest = getAuthorizationRequest(oAuth2Strategy, parametersWithScopes);\n+\n+        // Call method defined in oAuth2Strategy to request authorization\n+        final AuthorizationResult authorizationResult = oAuth2Strategy.getDeviceCode((MicrosoftStsAuthorizationRequest) mAuthorizationRequest, null);\n+\n+        validateServiceResult(authorizationResult);\n+\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow authorization step finished...\"\n+        );\n+        logResult(TAG, authorizationResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        return authorizationResult;\n     }\n \n     @Override\n-    public AcquireTokenResult acquireDeviceCodeFlowToken(final AuthorizationResult authorizationResult, DeviceCodeFlowCommandParameters commandParameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(\n+            final AuthorizationResult authorizationResult,\n+            final DeviceCodeFlowCommandParameters parameters)\n+            throws MsalException, ClientException, IOException, InterruptedException {\n+\n+        // Logging start of method\n+        final String methodName = \":acquireDeviceCodeFlowToken\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Polling for token...\"\n+        );\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_POLLING\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_POLLING)\n+        );\n+\n+        // Create empty AcquireTokenResult object\n+        final AcquireTokenResult acquireTokenResult = new AcquireTokenResult();\n+\n+        // Assign authorization result\n+        acquireTokenResult.setAuthorizationResult(authorizationResult);\n+\n+        // Fetch the Authorization Response\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parameters.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parameters\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 2: Poll for token\n+        TokenResult tokenResult = null;\n+\n+        // Create token request outside of loop so it isn't re-created after every loop\n+        final MicrosoftStsTokenRequest tokenRequest = (MicrosoftStsTokenRequest) oAuth2Strategy.createTokenRequest(\n+                mAuthorizationRequest,\n+                authorizationResponse,\n+                parameters.getAuthenticationScheme()\n+        );\n+\n+        // Fetch wait interval\n+        final int interval = Integer.parseInt(authorizationResponse.getInterval()) * 1000;\n+\n+        String errorCode = \"authorization_pending\";\n+\n+        // Loop to send multiple requests checking for token\n+        while (errorCode.equals(\"authorization_pending\")) {\n+            errorCode = \"\"; // Reset error code\n+\n+            // Execute Token Request\n+            tokenResult = oAuth2Strategy.requestToken(tokenRequest);\n+\n+            if (tokenResult.getErrorResponse() != null) {\n+                errorCode = tokenResult.getErrorResponse().getError();\n+            }\n+\n+            if (errorCode.equals(\"authorization_pending\")) {\n+                // interval is passed through params\n+                Thread.sleep(interval);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4Mzc4NA=="}, "originalCommit": {"oid": "dc5440c3b99b8d2f8ef041617e51269c48b71bd2"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODAzMzQ2OnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1Nzo0NlrOG5J5Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1Nzo0NlrOG5J5Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4NDE2Nw==", "bodyText": "nit: final", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r462584167", "createdAt": "2020-07-29T20:57:46Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -463,14 +468,224 @@ public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) t\n     }\n \n     @Override\n-    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws MsalException, ClientException, IOException {\n+        // Logging start of method\n+        final String methodName = \":deviceCodeFlowAuthRequest\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Authorizing user code...\"\n+        );\n+\n+        // Default scopes here\n+        final Set<String> mergedScopes = addDefaultScopes(parameters);\n+\n+        final DeviceCodeFlowCommandParameters parametersWithScopes = parameters\n+                .toBuilder()\n+                .scopes(mergedScopes)\n+                .build();\n+\n+        logParameters(TAG, parametersWithScopes);\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putProperties(parametersWithScopes)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parametersWithScopes.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parametersWithScopes\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 1: Get user code\n+        // Populate global authorization request\n+        mAuthorizationRequest = getAuthorizationRequest(oAuth2Strategy, parametersWithScopes);\n+\n+        // Call method defined in oAuth2Strategy to request authorization\n+        final AuthorizationResult authorizationResult = oAuth2Strategy.getDeviceCode((MicrosoftStsAuthorizationRequest) mAuthorizationRequest, null);\n+\n+        validateServiceResult(authorizationResult);\n+\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow authorization step finished...\"\n+        );\n+        logResult(TAG, authorizationResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        return authorizationResult;\n     }\n \n     @Override\n-    public AcquireTokenResult acquireDeviceCodeFlowToken(final AuthorizationResult authorizationResult, DeviceCodeFlowCommandParameters commandParameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(\n+            final AuthorizationResult authorizationResult,\n+            final DeviceCodeFlowCommandParameters parameters)\n+            throws MsalException, ClientException, IOException, InterruptedException {\n+\n+        // Logging start of method\n+        final String methodName = \":acquireDeviceCodeFlowToken\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Polling for token...\"\n+        );\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_POLLING\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_POLLING)\n+        );\n+\n+        // Create empty AcquireTokenResult object\n+        final AcquireTokenResult acquireTokenResult = new AcquireTokenResult();\n+\n+        // Assign authorization result\n+        acquireTokenResult.setAuthorizationResult(authorizationResult);\n+\n+        // Fetch the Authorization Response\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parameters.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parameters\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 2: Poll for token\n+        TokenResult tokenResult = null;\n+\n+        // Create token request outside of loop so it isn't re-created after every loop\n+        final MicrosoftStsTokenRequest tokenRequest = (MicrosoftStsTokenRequest) oAuth2Strategy.createTokenRequest(\n+                mAuthorizationRequest,\n+                authorizationResponse,\n+                parameters.getAuthenticationScheme()\n+        );\n+\n+        // Fetch wait interval\n+        final int interval = Integer.parseInt(authorizationResponse.getInterval()) * 1000;\n+\n+        String errorCode = \"authorization_pending\";\n+\n+        // Loop to send multiple requests checking for token\n+        while (errorCode.equals(\"authorization_pending\")) {\n+            errorCode = \"\"; // Reset error code\n+\n+            // Execute Token Request\n+            tokenResult = oAuth2Strategy.requestToken(tokenRequest);\n+\n+            if (tokenResult.getErrorResponse() != null) {\n+                errorCode = tokenResult.getErrorResponse().getError();\n+            }\n+\n+            if (errorCode.equals(\"authorization_pending\")) {\n+                // interval is passed through params\n+                Thread.sleep(interval);\n+            }\n+        }\n+\n+        // Assign token result\n+        acquireTokenResult.setTokenResult(tokenResult);\n+\n+        // Validate request success, may throw MsalServiceException\n+        validateServiceResult(tokenResult);\n+\n+        // If the token is valid, save it into token cache\n+        final List<ICacheRecord> records = saveTokens(\n+                oAuth2Strategy,\n+                mAuthorizationRequest,\n+                acquireTokenResult.getTokenResult().getTokenResponse(),\n+                parameters.getOAuth2TokenCache()\n+        );\n+\n+        // Once the token is stored, fetch and assign the authentication result\n+        final ICacheRecord newestRecord = records.get(0);\n+        acquireTokenResult.setLocalAuthenticationResult(\n+                new LocalAuthenticationResult(\n+                        finalizeCacheRecordForResult(\n+                                newestRecord,\n+                                parameters.getAuthenticationScheme()\n+                        ),\n+                        records,\n+                        SdkType.MSAL,\n+                        false\n+                )\n+        );\n+\n+        logResult(TAG, tokenResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_POLLING\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putResult(acquireTokenResult)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_POLLING)\n+        );\n+\n+        return acquireTokenResult;\n+    }\n+\n+    /**\n+     * Helper method to check if a result object is valid (was a success). If not, an exception will be generated and thrown.\n+     * This method is called in both parts of the DCF protocol.\n+     * @param result result object to be checked\n+     * @throws MsalServiceException MsalServiceException object reflecting error code returned by the result\n+     */\n+    private void validateServiceResult(@NonNull IResult result) throws MsalServiceException {\n+        // If result was unsuccessful, create an exception\n+        if (!result.getSuccess()) {\n+            // Create ServiceException object\n+            ServiceException serviceException = createServiceExceptionForDeviceCodeFlow(result.getErrorResponse());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc5440c3b99b8d2f8ef041617e51269c48b71bd2"}, "originalPosition": 208}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODAzNjQ0OnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1ODozNVrOG5J7LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMToyMjo1NlrOG5KtKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4NDYyMA==", "bodyText": "Why are we creating a ServiceException when we want to throw MsalServiceException? Why not create the latter directly?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r462584620", "createdAt": "2020-07-29T20:58:35Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -463,14 +468,224 @@ public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) t\n     }\n \n     @Override\n-    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws MsalException, ClientException, IOException {\n+        // Logging start of method\n+        final String methodName = \":deviceCodeFlowAuthRequest\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Authorizing user code...\"\n+        );\n+\n+        // Default scopes here\n+        final Set<String> mergedScopes = addDefaultScopes(parameters);\n+\n+        final DeviceCodeFlowCommandParameters parametersWithScopes = parameters\n+                .toBuilder()\n+                .scopes(mergedScopes)\n+                .build();\n+\n+        logParameters(TAG, parametersWithScopes);\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putProperties(parametersWithScopes)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parametersWithScopes.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parametersWithScopes\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 1: Get user code\n+        // Populate global authorization request\n+        mAuthorizationRequest = getAuthorizationRequest(oAuth2Strategy, parametersWithScopes);\n+\n+        // Call method defined in oAuth2Strategy to request authorization\n+        final AuthorizationResult authorizationResult = oAuth2Strategy.getDeviceCode((MicrosoftStsAuthorizationRequest) mAuthorizationRequest, null);\n+\n+        validateServiceResult(authorizationResult);\n+\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow authorization step finished...\"\n+        );\n+        logResult(TAG, authorizationResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        return authorizationResult;\n     }\n \n     @Override\n-    public AcquireTokenResult acquireDeviceCodeFlowToken(final AuthorizationResult authorizationResult, DeviceCodeFlowCommandParameters commandParameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(\n+            final AuthorizationResult authorizationResult,\n+            final DeviceCodeFlowCommandParameters parameters)\n+            throws MsalException, ClientException, IOException, InterruptedException {\n+\n+        // Logging start of method\n+        final String methodName = \":acquireDeviceCodeFlowToken\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Polling for token...\"\n+        );\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_POLLING\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_POLLING)\n+        );\n+\n+        // Create empty AcquireTokenResult object\n+        final AcquireTokenResult acquireTokenResult = new AcquireTokenResult();\n+\n+        // Assign authorization result\n+        acquireTokenResult.setAuthorizationResult(authorizationResult);\n+\n+        // Fetch the Authorization Response\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parameters.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parameters\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 2: Poll for token\n+        TokenResult tokenResult = null;\n+\n+        // Create token request outside of loop so it isn't re-created after every loop\n+        final MicrosoftStsTokenRequest tokenRequest = (MicrosoftStsTokenRequest) oAuth2Strategy.createTokenRequest(\n+                mAuthorizationRequest,\n+                authorizationResponse,\n+                parameters.getAuthenticationScheme()\n+        );\n+\n+        // Fetch wait interval\n+        final int interval = Integer.parseInt(authorizationResponse.getInterval()) * 1000;\n+\n+        String errorCode = \"authorization_pending\";\n+\n+        // Loop to send multiple requests checking for token\n+        while (errorCode.equals(\"authorization_pending\")) {\n+            errorCode = \"\"; // Reset error code\n+\n+            // Execute Token Request\n+            tokenResult = oAuth2Strategy.requestToken(tokenRequest);\n+\n+            if (tokenResult.getErrorResponse() != null) {\n+                errorCode = tokenResult.getErrorResponse().getError();\n+            }\n+\n+            if (errorCode.equals(\"authorization_pending\")) {\n+                // interval is passed through params\n+                Thread.sleep(interval);\n+            }\n+        }\n+\n+        // Assign token result\n+        acquireTokenResult.setTokenResult(tokenResult);\n+\n+        // Validate request success, may throw MsalServiceException\n+        validateServiceResult(tokenResult);\n+\n+        // If the token is valid, save it into token cache\n+        final List<ICacheRecord> records = saveTokens(\n+                oAuth2Strategy,\n+                mAuthorizationRequest,\n+                acquireTokenResult.getTokenResult().getTokenResponse(),\n+                parameters.getOAuth2TokenCache()\n+        );\n+\n+        // Once the token is stored, fetch and assign the authentication result\n+        final ICacheRecord newestRecord = records.get(0);\n+        acquireTokenResult.setLocalAuthenticationResult(\n+                new LocalAuthenticationResult(\n+                        finalizeCacheRecordForResult(\n+                                newestRecord,\n+                                parameters.getAuthenticationScheme()\n+                        ),\n+                        records,\n+                        SdkType.MSAL,\n+                        false\n+                )\n+        );\n+\n+        logResult(TAG, tokenResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_POLLING\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putResult(acquireTokenResult)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_POLLING)\n+        );\n+\n+        return acquireTokenResult;\n+    }\n+\n+    /**\n+     * Helper method to check if a result object is valid (was a success). If not, an exception will be generated and thrown.\n+     * This method is called in both parts of the DCF protocol.\n+     * @param result result object to be checked\n+     * @throws MsalServiceException MsalServiceException object reflecting error code returned by the result\n+     */\n+    private void validateServiceResult(@NonNull IResult result) throws MsalServiceException {\n+        // If result was unsuccessful, create an exception\n+        if (!result.getSuccess()) {\n+            // Create ServiceException object\n+            ServiceException serviceException = createServiceExceptionForDeviceCodeFlow(result.getErrorResponse());\n+\n+            // Convert ServiceException to MsalServiceException, then throw\n+            throw new MsalServiceException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc5440c3b99b8d2f8ef041617e51269c48b71bd2"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU5NzQxNw==", "bodyText": "I was looking at some other code and it seems like a ServiceException is part of creating an MsalServiceExeption object. the ServiceException is included as the \"throwable\". I figured this would be useful somepoint down the line but it would make sense to just create an MsalServiceException right away.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r462597417", "createdAt": "2020-07-29T21:22:56Z", "author": {"login": "t-fadura"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -463,14 +468,224 @@ public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) t\n     }\n \n     @Override\n-    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws MsalException, ClientException, IOException {\n+        // Logging start of method\n+        final String methodName = \":deviceCodeFlowAuthRequest\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Authorizing user code...\"\n+        );\n+\n+        // Default scopes here\n+        final Set<String> mergedScopes = addDefaultScopes(parameters);\n+\n+        final DeviceCodeFlowCommandParameters parametersWithScopes = parameters\n+                .toBuilder()\n+                .scopes(mergedScopes)\n+                .build();\n+\n+        logParameters(TAG, parametersWithScopes);\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putProperties(parametersWithScopes)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parametersWithScopes.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parametersWithScopes\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 1: Get user code\n+        // Populate global authorization request\n+        mAuthorizationRequest = getAuthorizationRequest(oAuth2Strategy, parametersWithScopes);\n+\n+        // Call method defined in oAuth2Strategy to request authorization\n+        final AuthorizationResult authorizationResult = oAuth2Strategy.getDeviceCode((MicrosoftStsAuthorizationRequest) mAuthorizationRequest, null);\n+\n+        validateServiceResult(authorizationResult);\n+\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow authorization step finished...\"\n+        );\n+        logResult(TAG, authorizationResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        return authorizationResult;\n     }\n \n     @Override\n-    public AcquireTokenResult acquireDeviceCodeFlowToken(final AuthorizationResult authorizationResult, DeviceCodeFlowCommandParameters commandParameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(\n+            final AuthorizationResult authorizationResult,\n+            final DeviceCodeFlowCommandParameters parameters)\n+            throws MsalException, ClientException, IOException, InterruptedException {\n+\n+        // Logging start of method\n+        final String methodName = \":acquireDeviceCodeFlowToken\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Polling for token...\"\n+        );\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_POLLING\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_POLLING)\n+        );\n+\n+        // Create empty AcquireTokenResult object\n+        final AcquireTokenResult acquireTokenResult = new AcquireTokenResult();\n+\n+        // Assign authorization result\n+        acquireTokenResult.setAuthorizationResult(authorizationResult);\n+\n+        // Fetch the Authorization Response\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parameters.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parameters\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 2: Poll for token\n+        TokenResult tokenResult = null;\n+\n+        // Create token request outside of loop so it isn't re-created after every loop\n+        final MicrosoftStsTokenRequest tokenRequest = (MicrosoftStsTokenRequest) oAuth2Strategy.createTokenRequest(\n+                mAuthorizationRequest,\n+                authorizationResponse,\n+                parameters.getAuthenticationScheme()\n+        );\n+\n+        // Fetch wait interval\n+        final int interval = Integer.parseInt(authorizationResponse.getInterval()) * 1000;\n+\n+        String errorCode = \"authorization_pending\";\n+\n+        // Loop to send multiple requests checking for token\n+        while (errorCode.equals(\"authorization_pending\")) {\n+            errorCode = \"\"; // Reset error code\n+\n+            // Execute Token Request\n+            tokenResult = oAuth2Strategy.requestToken(tokenRequest);\n+\n+            if (tokenResult.getErrorResponse() != null) {\n+                errorCode = tokenResult.getErrorResponse().getError();\n+            }\n+\n+            if (errorCode.equals(\"authorization_pending\")) {\n+                // interval is passed through params\n+                Thread.sleep(interval);\n+            }\n+        }\n+\n+        // Assign token result\n+        acquireTokenResult.setTokenResult(tokenResult);\n+\n+        // Validate request success, may throw MsalServiceException\n+        validateServiceResult(tokenResult);\n+\n+        // If the token is valid, save it into token cache\n+        final List<ICacheRecord> records = saveTokens(\n+                oAuth2Strategy,\n+                mAuthorizationRequest,\n+                acquireTokenResult.getTokenResult().getTokenResponse(),\n+                parameters.getOAuth2TokenCache()\n+        );\n+\n+        // Once the token is stored, fetch and assign the authentication result\n+        final ICacheRecord newestRecord = records.get(0);\n+        acquireTokenResult.setLocalAuthenticationResult(\n+                new LocalAuthenticationResult(\n+                        finalizeCacheRecordForResult(\n+                                newestRecord,\n+                                parameters.getAuthenticationScheme()\n+                        ),\n+                        records,\n+                        SdkType.MSAL,\n+                        false\n+                )\n+        );\n+\n+        logResult(TAG, tokenResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_POLLING\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putResult(acquireTokenResult)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_POLLING)\n+        );\n+\n+        return acquireTokenResult;\n+    }\n+\n+    /**\n+     * Helper method to check if a result object is valid (was a success). If not, an exception will be generated and thrown.\n+     * This method is called in both parts of the DCF protocol.\n+     * @param result result object to be checked\n+     * @throws MsalServiceException MsalServiceException object reflecting error code returned by the result\n+     */\n+    private void validateServiceResult(@NonNull IResult result) throws MsalServiceException {\n+        // If result was unsuccessful, create an exception\n+        if (!result.getSuccess()) {\n+            // Create ServiceException object\n+            ServiceException serviceException = createServiceExceptionForDeviceCodeFlow(result.getErrorResponse());\n+\n+            // Convert ServiceException to MsalServiceException, then throw\n+            throw new MsalServiceException(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4NDYyMA=="}, "originalCommit": {"oid": "dc5440c3b99b8d2f8ef041617e51269c48b71bd2"}, "originalPosition": 211}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODAzODE1OnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1ODo1NFrOG5J8Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1ODo1NFrOG5J8Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4NDg2Mg==", "bodyText": "nit: final", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r462584862", "createdAt": "2020-07-29T20:58:54Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -463,14 +468,224 @@ public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) t\n     }\n \n     @Override\n-    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws MsalException, ClientException, IOException {\n+        // Logging start of method\n+        final String methodName = \":deviceCodeFlowAuthRequest\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Authorizing user code...\"\n+        );\n+\n+        // Default scopes here\n+        final Set<String> mergedScopes = addDefaultScopes(parameters);\n+\n+        final DeviceCodeFlowCommandParameters parametersWithScopes = parameters\n+                .toBuilder()\n+                .scopes(mergedScopes)\n+                .build();\n+\n+        logParameters(TAG, parametersWithScopes);\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putProperties(parametersWithScopes)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parametersWithScopes.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parametersWithScopes\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 1: Get user code\n+        // Populate global authorization request\n+        mAuthorizationRequest = getAuthorizationRequest(oAuth2Strategy, parametersWithScopes);\n+\n+        // Call method defined in oAuth2Strategy to request authorization\n+        final AuthorizationResult authorizationResult = oAuth2Strategy.getDeviceCode((MicrosoftStsAuthorizationRequest) mAuthorizationRequest, null);\n+\n+        validateServiceResult(authorizationResult);\n+\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow authorization step finished...\"\n+        );\n+        logResult(TAG, authorizationResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        return authorizationResult;\n     }\n \n     @Override\n-    public AcquireTokenResult acquireDeviceCodeFlowToken(final AuthorizationResult authorizationResult, DeviceCodeFlowCommandParameters commandParameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(\n+            final AuthorizationResult authorizationResult,\n+            final DeviceCodeFlowCommandParameters parameters)\n+            throws MsalException, ClientException, IOException, InterruptedException {\n+\n+        // Logging start of method\n+        final String methodName = \":acquireDeviceCodeFlowToken\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Polling for token...\"\n+        );\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_POLLING\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_POLLING)\n+        );\n+\n+        // Create empty AcquireTokenResult object\n+        final AcquireTokenResult acquireTokenResult = new AcquireTokenResult();\n+\n+        // Assign authorization result\n+        acquireTokenResult.setAuthorizationResult(authorizationResult);\n+\n+        // Fetch the Authorization Response\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parameters.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parameters\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 2: Poll for token\n+        TokenResult tokenResult = null;\n+\n+        // Create token request outside of loop so it isn't re-created after every loop\n+        final MicrosoftStsTokenRequest tokenRequest = (MicrosoftStsTokenRequest) oAuth2Strategy.createTokenRequest(\n+                mAuthorizationRequest,\n+                authorizationResponse,\n+                parameters.getAuthenticationScheme()\n+        );\n+\n+        // Fetch wait interval\n+        final int interval = Integer.parseInt(authorizationResponse.getInterval()) * 1000;\n+\n+        String errorCode = \"authorization_pending\";\n+\n+        // Loop to send multiple requests checking for token\n+        while (errorCode.equals(\"authorization_pending\")) {\n+            errorCode = \"\"; // Reset error code\n+\n+            // Execute Token Request\n+            tokenResult = oAuth2Strategy.requestToken(tokenRequest);\n+\n+            if (tokenResult.getErrorResponse() != null) {\n+                errorCode = tokenResult.getErrorResponse().getError();\n+            }\n+\n+            if (errorCode.equals(\"authorization_pending\")) {\n+                // interval is passed through params\n+                Thread.sleep(interval);\n+            }\n+        }\n+\n+        // Assign token result\n+        acquireTokenResult.setTokenResult(tokenResult);\n+\n+        // Validate request success, may throw MsalServiceException\n+        validateServiceResult(tokenResult);\n+\n+        // If the token is valid, save it into token cache\n+        final List<ICacheRecord> records = saveTokens(\n+                oAuth2Strategy,\n+                mAuthorizationRequest,\n+                acquireTokenResult.getTokenResult().getTokenResponse(),\n+                parameters.getOAuth2TokenCache()\n+        );\n+\n+        // Once the token is stored, fetch and assign the authentication result\n+        final ICacheRecord newestRecord = records.get(0);\n+        acquireTokenResult.setLocalAuthenticationResult(\n+                new LocalAuthenticationResult(\n+                        finalizeCacheRecordForResult(\n+                                newestRecord,\n+                                parameters.getAuthenticationScheme()\n+                        ),\n+                        records,\n+                        SdkType.MSAL,\n+                        false\n+                )\n+        );\n+\n+        logResult(TAG, tokenResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_POLLING\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putResult(acquireTokenResult)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_POLLING)\n+        );\n+\n+        return acquireTokenResult;\n+    }\n+\n+    /**\n+     * Helper method to check if a result object is valid (was a success). If not, an exception will be generated and thrown.\n+     * This method is called in both parts of the DCF protocol.\n+     * @param result result object to be checked\n+     * @throws MsalServiceException MsalServiceException object reflecting error code returned by the result\n+     */\n+    private void validateServiceResult(@NonNull IResult result) throws MsalServiceException {\n+        // If result was unsuccessful, create an exception\n+        if (!result.getSuccess()) {\n+            // Create ServiceException object\n+            ServiceException serviceException = createServiceExceptionForDeviceCodeFlow(result.getErrorResponse());\n+\n+            // Convert ServiceException to MsalServiceException, then throw\n+            throw new MsalServiceException(\n+                    serviceException.getErrorCode(),\n+                    serviceException.getMessage(),\n+                    serviceException.getHttpStatusCode(),\n+                    serviceException\n+            );\n+        }\n+    }\n+\n+    /**\n+     * Given an error response object, create a serviceException object using the predefined error codes.\n+     * @param response error response object to be checked\n+     * @return an exception object\n+     */\n+    private ServiceException createServiceExceptionForDeviceCodeFlow(IErrorResponse response) {\n+        // Based on error code, fetch the error message\n+        String errorCode = response.getError();\n+        String errorMessage = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc5440c3b99b8d2f8ef041617e51269c48b71bd2"}, "originalPosition": 228}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODAzODc0OnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1OTowM1rOG5J8fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1OTowM1rOG5J8fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4NDk1OQ==", "bodyText": "nit: nonnull and final", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r462584959", "createdAt": "2020-07-29T20:59:03Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -463,14 +468,224 @@ public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) t\n     }\n \n     @Override\n-    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws MsalException, ClientException, IOException {\n+        // Logging start of method\n+        final String methodName = \":deviceCodeFlowAuthRequest\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Authorizing user code...\"\n+        );\n+\n+        // Default scopes here\n+        final Set<String> mergedScopes = addDefaultScopes(parameters);\n+\n+        final DeviceCodeFlowCommandParameters parametersWithScopes = parameters\n+                .toBuilder()\n+                .scopes(mergedScopes)\n+                .build();\n+\n+        logParameters(TAG, parametersWithScopes);\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putProperties(parametersWithScopes)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parametersWithScopes.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parametersWithScopes\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 1: Get user code\n+        // Populate global authorization request\n+        mAuthorizationRequest = getAuthorizationRequest(oAuth2Strategy, parametersWithScopes);\n+\n+        // Call method defined in oAuth2Strategy to request authorization\n+        final AuthorizationResult authorizationResult = oAuth2Strategy.getDeviceCode((MicrosoftStsAuthorizationRequest) mAuthorizationRequest, null);\n+\n+        validateServiceResult(authorizationResult);\n+\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow authorization step finished...\"\n+        );\n+        logResult(TAG, authorizationResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        return authorizationResult;\n     }\n \n     @Override\n-    public AcquireTokenResult acquireDeviceCodeFlowToken(final AuthorizationResult authorizationResult, DeviceCodeFlowCommandParameters commandParameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(\n+            final AuthorizationResult authorizationResult,\n+            final DeviceCodeFlowCommandParameters parameters)\n+            throws MsalException, ClientException, IOException, InterruptedException {\n+\n+        // Logging start of method\n+        final String methodName = \":acquireDeviceCodeFlowToken\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Polling for token...\"\n+        );\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_POLLING\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_POLLING)\n+        );\n+\n+        // Create empty AcquireTokenResult object\n+        final AcquireTokenResult acquireTokenResult = new AcquireTokenResult();\n+\n+        // Assign authorization result\n+        acquireTokenResult.setAuthorizationResult(authorizationResult);\n+\n+        // Fetch the Authorization Response\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parameters.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parameters\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 2: Poll for token\n+        TokenResult tokenResult = null;\n+\n+        // Create token request outside of loop so it isn't re-created after every loop\n+        final MicrosoftStsTokenRequest tokenRequest = (MicrosoftStsTokenRequest) oAuth2Strategy.createTokenRequest(\n+                mAuthorizationRequest,\n+                authorizationResponse,\n+                parameters.getAuthenticationScheme()\n+        );\n+\n+        // Fetch wait interval\n+        final int interval = Integer.parseInt(authorizationResponse.getInterval()) * 1000;\n+\n+        String errorCode = \"authorization_pending\";\n+\n+        // Loop to send multiple requests checking for token\n+        while (errorCode.equals(\"authorization_pending\")) {\n+            errorCode = \"\"; // Reset error code\n+\n+            // Execute Token Request\n+            tokenResult = oAuth2Strategy.requestToken(tokenRequest);\n+\n+            if (tokenResult.getErrorResponse() != null) {\n+                errorCode = tokenResult.getErrorResponse().getError();\n+            }\n+\n+            if (errorCode.equals(\"authorization_pending\")) {\n+                // interval is passed through params\n+                Thread.sleep(interval);\n+            }\n+        }\n+\n+        // Assign token result\n+        acquireTokenResult.setTokenResult(tokenResult);\n+\n+        // Validate request success, may throw MsalServiceException\n+        validateServiceResult(tokenResult);\n+\n+        // If the token is valid, save it into token cache\n+        final List<ICacheRecord> records = saveTokens(\n+                oAuth2Strategy,\n+                mAuthorizationRequest,\n+                acquireTokenResult.getTokenResult().getTokenResponse(),\n+                parameters.getOAuth2TokenCache()\n+        );\n+\n+        // Once the token is stored, fetch and assign the authentication result\n+        final ICacheRecord newestRecord = records.get(0);\n+        acquireTokenResult.setLocalAuthenticationResult(\n+                new LocalAuthenticationResult(\n+                        finalizeCacheRecordForResult(\n+                                newestRecord,\n+                                parameters.getAuthenticationScheme()\n+                        ),\n+                        records,\n+                        SdkType.MSAL,\n+                        false\n+                )\n+        );\n+\n+        logResult(TAG, tokenResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_POLLING\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putResult(acquireTokenResult)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_POLLING)\n+        );\n+\n+        return acquireTokenResult;\n+    }\n+\n+    /**\n+     * Helper method to check if a result object is valid (was a success). If not, an exception will be generated and thrown.\n+     * This method is called in both parts of the DCF protocol.\n+     * @param result result object to be checked\n+     * @throws MsalServiceException MsalServiceException object reflecting error code returned by the result\n+     */\n+    private void validateServiceResult(@NonNull IResult result) throws MsalServiceException {\n+        // If result was unsuccessful, create an exception\n+        if (!result.getSuccess()) {\n+            // Create ServiceException object\n+            ServiceException serviceException = createServiceExceptionForDeviceCodeFlow(result.getErrorResponse());\n+\n+            // Convert ServiceException to MsalServiceException, then throw\n+            throw new MsalServiceException(\n+                    serviceException.getErrorCode(),\n+                    serviceException.getMessage(),\n+                    serviceException.getHttpStatusCode(),\n+                    serviceException\n+            );\n+        }\n+    }\n+\n+    /**\n+     * Given an error response object, create a serviceException object using the predefined error codes.\n+     * @param response error response object to be checked\n+     * @return an exception object\n+     */\n+    private ServiceException createServiceExceptionForDeviceCodeFlow(IErrorResponse response) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc5440c3b99b8d2f8ef041617e51269c48b71bd2"}, "originalPosition": 225}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODA0MTk5OnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMTowMDowNFrOG5J-pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMjowNDowNVrOG5L3fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4NTUwOA==", "bodyText": "At this point, is this error code coming from the service?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r462585508", "createdAt": "2020-07-29T21:00:04Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -463,14 +468,224 @@ public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) t\n     }\n \n     @Override\n-    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws MsalException, ClientException, IOException {\n+        // Logging start of method\n+        final String methodName = \":deviceCodeFlowAuthRequest\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Authorizing user code...\"\n+        );\n+\n+        // Default scopes here\n+        final Set<String> mergedScopes = addDefaultScopes(parameters);\n+\n+        final DeviceCodeFlowCommandParameters parametersWithScopes = parameters\n+                .toBuilder()\n+                .scopes(mergedScopes)\n+                .build();\n+\n+        logParameters(TAG, parametersWithScopes);\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putProperties(parametersWithScopes)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parametersWithScopes.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parametersWithScopes\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 1: Get user code\n+        // Populate global authorization request\n+        mAuthorizationRequest = getAuthorizationRequest(oAuth2Strategy, parametersWithScopes);\n+\n+        // Call method defined in oAuth2Strategy to request authorization\n+        final AuthorizationResult authorizationResult = oAuth2Strategy.getDeviceCode((MicrosoftStsAuthorizationRequest) mAuthorizationRequest, null);\n+\n+        validateServiceResult(authorizationResult);\n+\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow authorization step finished...\"\n+        );\n+        logResult(TAG, authorizationResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        return authorizationResult;\n     }\n \n     @Override\n-    public AcquireTokenResult acquireDeviceCodeFlowToken(final AuthorizationResult authorizationResult, DeviceCodeFlowCommandParameters commandParameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(\n+            final AuthorizationResult authorizationResult,\n+            final DeviceCodeFlowCommandParameters parameters)\n+            throws MsalException, ClientException, IOException, InterruptedException {\n+\n+        // Logging start of method\n+        final String methodName = \":acquireDeviceCodeFlowToken\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Polling for token...\"\n+        );\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_POLLING\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_POLLING)\n+        );\n+\n+        // Create empty AcquireTokenResult object\n+        final AcquireTokenResult acquireTokenResult = new AcquireTokenResult();\n+\n+        // Assign authorization result\n+        acquireTokenResult.setAuthorizationResult(authorizationResult);\n+\n+        // Fetch the Authorization Response\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parameters.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parameters\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 2: Poll for token\n+        TokenResult tokenResult = null;\n+\n+        // Create token request outside of loop so it isn't re-created after every loop\n+        final MicrosoftStsTokenRequest tokenRequest = (MicrosoftStsTokenRequest) oAuth2Strategy.createTokenRequest(\n+                mAuthorizationRequest,\n+                authorizationResponse,\n+                parameters.getAuthenticationScheme()\n+        );\n+\n+        // Fetch wait interval\n+        final int interval = Integer.parseInt(authorizationResponse.getInterval()) * 1000;\n+\n+        String errorCode = \"authorization_pending\";\n+\n+        // Loop to send multiple requests checking for token\n+        while (errorCode.equals(\"authorization_pending\")) {\n+            errorCode = \"\"; // Reset error code\n+\n+            // Execute Token Request\n+            tokenResult = oAuth2Strategy.requestToken(tokenRequest);\n+\n+            if (tokenResult.getErrorResponse() != null) {\n+                errorCode = tokenResult.getErrorResponse().getError();\n+            }\n+\n+            if (errorCode.equals(\"authorization_pending\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc5440c3b99b8d2f8ef041617e51269c48b71bd2"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYxNjQ0Nw==", "bodyText": "Error is returned from server after each token poll attempt", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r462616447", "createdAt": "2020-07-29T22:04:05Z", "author": {"login": "t-fadura"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -463,14 +468,224 @@ public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) t\n     }\n \n     @Override\n-    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws MsalException, ClientException, IOException {\n+        // Logging start of method\n+        final String methodName = \":deviceCodeFlowAuthRequest\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Authorizing user code...\"\n+        );\n+\n+        // Default scopes here\n+        final Set<String> mergedScopes = addDefaultScopes(parameters);\n+\n+        final DeviceCodeFlowCommandParameters parametersWithScopes = parameters\n+                .toBuilder()\n+                .scopes(mergedScopes)\n+                .build();\n+\n+        logParameters(TAG, parametersWithScopes);\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putProperties(parametersWithScopes)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parametersWithScopes.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parametersWithScopes\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 1: Get user code\n+        // Populate global authorization request\n+        mAuthorizationRequest = getAuthorizationRequest(oAuth2Strategy, parametersWithScopes);\n+\n+        // Call method defined in oAuth2Strategy to request authorization\n+        final AuthorizationResult authorizationResult = oAuth2Strategy.getDeviceCode((MicrosoftStsAuthorizationRequest) mAuthorizationRequest, null);\n+\n+        validateServiceResult(authorizationResult);\n+\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow authorization step finished...\"\n+        );\n+        logResult(TAG, authorizationResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        return authorizationResult;\n     }\n \n     @Override\n-    public AcquireTokenResult acquireDeviceCodeFlowToken(final AuthorizationResult authorizationResult, DeviceCodeFlowCommandParameters commandParameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(\n+            final AuthorizationResult authorizationResult,\n+            final DeviceCodeFlowCommandParameters parameters)\n+            throws MsalException, ClientException, IOException, InterruptedException {\n+\n+        // Logging start of method\n+        final String methodName = \":acquireDeviceCodeFlowToken\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Polling for token...\"\n+        );\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_POLLING\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_POLLING)\n+        );\n+\n+        // Create empty AcquireTokenResult object\n+        final AcquireTokenResult acquireTokenResult = new AcquireTokenResult();\n+\n+        // Assign authorization result\n+        acquireTokenResult.setAuthorizationResult(authorizationResult);\n+\n+        // Fetch the Authorization Response\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parameters.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parameters\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 2: Poll for token\n+        TokenResult tokenResult = null;\n+\n+        // Create token request outside of loop so it isn't re-created after every loop\n+        final MicrosoftStsTokenRequest tokenRequest = (MicrosoftStsTokenRequest) oAuth2Strategy.createTokenRequest(\n+                mAuthorizationRequest,\n+                authorizationResponse,\n+                parameters.getAuthenticationScheme()\n+        );\n+\n+        // Fetch wait interval\n+        final int interval = Integer.parseInt(authorizationResponse.getInterval()) * 1000;\n+\n+        String errorCode = \"authorization_pending\";\n+\n+        // Loop to send multiple requests checking for token\n+        while (errorCode.equals(\"authorization_pending\")) {\n+            errorCode = \"\"; // Reset error code\n+\n+            // Execute Token Request\n+            tokenResult = oAuth2Strategy.requestToken(tokenRequest);\n+\n+            if (tokenResult.getErrorResponse() != null) {\n+                errorCode = tokenResult.getErrorResponse().getError();\n+            }\n+\n+            if (errorCode.equals(\"authorization_pending\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4NTUwOA=="}, "originalCommit": {"oid": "dc5440c3b99b8d2f8ef041617e51269c48b71bd2"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NjE1Njg2OnYy", "diffSide": "RIGHT", "path": "msal/src/test/java/com/microsoft/identity/client/e2e/shadows/ShadowDeviceCodeFlowCommandTokenError.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMTowNDowN1rOG6WjpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMTowNDowN1rOG6WjpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg0MDE2NQ==", "bodyText": "nit: \"The device_code expires.  No need to continue polling for the token\"", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r463840165", "createdAt": "2020-07-31T21:04:07Z", "author": {"login": "rpdome"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/shadows/ShadowDeviceCodeFlowCommandTokenError.java", "diffHunk": "@@ -46,6 +46,6 @@ public AcquireTokenResult execute() throws Exception {\n                 \"ABCDEFGH\",\n                 \"Follow these instructions to authenticate.\");\n \n-        throw new MsalServiceException(\"expired_token\", \"This exception reflects an error in the token polling step in Device Code Flow (expired token).\", null);\n+        throw new ServiceException(\"expired_token\", \"This exception reflects an error in the token polling step in Device Code Flow (expired token).\", null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5154a1a543fdabc8926ae55b899a7ea4c4e457f7"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NjE2MDUzOnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMTowNDozOVrOG6WlVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMzozNjo1N1rOG6Zb-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg0MDU5OA==", "bodyText": "why removing NonNull?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r463840598", "createdAt": "2020-07-31T21:04:39Z", "author": {"login": "rpdome"}, "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "diffHunk": "@@ -189,21 +191,21 @@ void acquireToken(@NonNull final Activity activity,\n          * @param userCode user code\n          * @param message instruction message\n          */\n-        void onUserCodeReceived(@NonNull String vUri, @NonNull String userCode, @NonNull String message);\n+        void onUserCodeReceived(String vUri, String userCode, String message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5154a1a543fdabc8926ae55b899a7ea4c4e457f7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg0MDc3OQ==", "bodyText": "here and below", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r463840779", "createdAt": "2020-07-31T21:04:55Z", "author": {"login": "rpdome"}, "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "diffHunk": "@@ -189,21 +191,21 @@ void acquireToken(@NonNull final Activity activity,\n          * @param userCode user code\n          * @param message instruction message\n          */\n-        void onUserCodeReceived(@NonNull String vUri, @NonNull String userCode, @NonNull String message);\n+        void onUserCodeReceived(String vUri, String userCode, String message);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg0MDU5OA=="}, "originalCommit": {"oid": "5154a1a543fdabc8926ae55b899a7ea4c4e457f7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg4NzM1Mg==", "bodyText": "I think it was because this was inconsistent with the rest of the code, but I went ahead and added NonNull to the rest of the callback", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r463887352", "createdAt": "2020-07-31T23:36:57Z", "author": {"login": "t-fadura"}, "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "diffHunk": "@@ -189,21 +191,21 @@ void acquireToken(@NonNull final Activity activity,\n          * @param userCode user code\n          * @param message instruction message\n          */\n-        void onUserCodeReceived(@NonNull String vUri, @NonNull String userCode, @NonNull String message);\n+        void onUserCodeReceived(String vUri, String userCode, String message);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg0MDU5OA=="}, "originalCommit": {"oid": "5154a1a543fdabc8926ae55b899a7ea4c4e457f7"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NjE2Nzc1OnYy", "diffSide": "RIGHT", "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/GetDeviceCodeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMTowNTo1MVrOG6Woog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMzozMDoyOVrOG6ZWrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg0MTQ0Mg==", "bodyText": "what is this testing? why are we expecting IOException?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r463841442", "createdAt": "2020-07-31T21:05:51Z", "author": {"login": "rpdome"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/GetDeviceCodeTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.tests.mocked;\n+\n+import com.microsoft.identity.client.PublicClientApplicationConfiguration;\n+import com.microsoft.identity.client.e2e.shadows.ShadowMsalUtils;\n+import com.microsoft.identity.client.e2e.tests.PublicClientApplicationAbstractTest;\n+import com.microsoft.identity.common.internal.authorities.AzureActiveDirectoryAuthority;\n+import com.microsoft.identity.common.internal.providers.microsoft.azureactivedirectory.AzureActiveDirectoryOAuth2Configuration;\n+import com.microsoft.identity.common.internal.providers.microsoft.azureactivedirectory.AzureActiveDirectoryOAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationErrorResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationRequest;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationResponse;\n+import com.microsoft.identity.common.internal.providers.oauth2.AuthorizationResult;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2StrategyParameters;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.io.IOException;\n+\n+import static com.microsoft.identity.internal.testutils.TestConstants.Configurations.SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(shadows = {ShadowMsalUtils.class})\n+public class GetDeviceCodeTest extends PublicClientApplicationAbstractTest {\n+\n+    private MicrosoftStsAuthorizationRequest.Builder builder;\n+    private String urlBody;\n+    private OAuth2Strategy strategy;\n+\n+    @Before\n+    public void setup() {\n+        super.setup();\n+\n+        final PublicClientApplicationConfiguration config = mApplication.getConfiguration();\n+        urlBody = ((AzureActiveDirectoryAuthority) config.getAuthorities().get(0)).getAudience().getCloudUrl();\n+        builder = new MicrosoftStsAuthorizationRequest.Builder();\n+        builder.setClientId(config.getClientId())\n+                .setScope(\"user.read\")\n+                .setState(\"State!\");\n+\n+        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+        strategy = new AzureActiveDirectoryOAuth2Strategy(\n+                new AzureActiveDirectoryOAuth2Configuration(),\n+                options\n+        );\n+    }\n+\n+    @Override\n+    public String getConfigFilePath() {\n+        return SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeSuccessResult() {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = builder.build();\n+        final AuthorizationResult authorizationResult = runGetDeviceCodeThread(authorizationRequest, urlBody);\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        Assert.assertTrue(authorizationResult.getSuccess());\n+        Assert.assertNotNull(authorizationResponse);\n+\n+        Assert.assertNotNull(authorizationResponse.getDeviceCode());\n+        Assert.assertNotNull(authorizationResponse.getUserCode());\n+        Assert.assertNotNull(authorizationResponse.getMessage());\n+        Assert.assertNotNull(authorizationResponse.getInterval());\n+        Assert.assertNotNull(authorizationResponse.getExpiresIn());\n+        Assert.assertNotNull(authorizationResponse.getVerificationUri());\n+\n+        Assert.assertNull(authorizationResult.getAuthorizationErrorResponse());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureNoClientId() {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = builder.setClientId(null).build();\n+        final AuthorizationResult authorizationResult = runGetDeviceCodeThread(authorizationRequest, urlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(\"invalid_request\", authorizationErrorResponse.getError());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureNoScope() {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = builder.setScope(null).build();\n+        final AuthorizationResult authorizationResult = runGetDeviceCodeThread(authorizationRequest, urlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(\"invalid_request\", authorizationErrorResponse.getError());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureBadScope() {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = builder.setScope(\"/\").build();\n+        final AuthorizationResult authorizationResult = runGetDeviceCodeThread(authorizationRequest, urlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(\"invalid_scope\", authorizationErrorResponse.getError());\n+    }\n+\n+    /**\n+     * Helper function to run getDeviceCode(). Catches exception\n+     * @param authorizationRequest request to send to getDeviceCode()\n+     * @param urlBody url to send to getDeviceCode()\n+     * @return authorizationResult from getDeviceCode()\n+     */\n+    private AuthorizationResult runGetDeviceCodeThread(final MicrosoftStsAuthorizationRequest authorizationRequest, final String urlBody) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5154a1a543fdabc8926ae55b899a7ea4c4e457f7"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg4NTk5OQ==", "bodyText": "This should be removed. I was originally running getDeviceCode in a separate thread each time but I realized that wasn't necessary when testing. This was a helper function that set up the thread and everything, it's not actually a test method. The try catch just made it fail if an exception was thrown.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r463885999", "createdAt": "2020-07-31T23:30:29Z", "author": {"login": "t-fadura"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/GetDeviceCodeTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.tests.mocked;\n+\n+import com.microsoft.identity.client.PublicClientApplicationConfiguration;\n+import com.microsoft.identity.client.e2e.shadows.ShadowMsalUtils;\n+import com.microsoft.identity.client.e2e.tests.PublicClientApplicationAbstractTest;\n+import com.microsoft.identity.common.internal.authorities.AzureActiveDirectoryAuthority;\n+import com.microsoft.identity.common.internal.providers.microsoft.azureactivedirectory.AzureActiveDirectoryOAuth2Configuration;\n+import com.microsoft.identity.common.internal.providers.microsoft.azureactivedirectory.AzureActiveDirectoryOAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationErrorResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationRequest;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationResponse;\n+import com.microsoft.identity.common.internal.providers.oauth2.AuthorizationResult;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2StrategyParameters;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.io.IOException;\n+\n+import static com.microsoft.identity.internal.testutils.TestConstants.Configurations.SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(shadows = {ShadowMsalUtils.class})\n+public class GetDeviceCodeTest extends PublicClientApplicationAbstractTest {\n+\n+    private MicrosoftStsAuthorizationRequest.Builder builder;\n+    private String urlBody;\n+    private OAuth2Strategy strategy;\n+\n+    @Before\n+    public void setup() {\n+        super.setup();\n+\n+        final PublicClientApplicationConfiguration config = mApplication.getConfiguration();\n+        urlBody = ((AzureActiveDirectoryAuthority) config.getAuthorities().get(0)).getAudience().getCloudUrl();\n+        builder = new MicrosoftStsAuthorizationRequest.Builder();\n+        builder.setClientId(config.getClientId())\n+                .setScope(\"user.read\")\n+                .setState(\"State!\");\n+\n+        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+        strategy = new AzureActiveDirectoryOAuth2Strategy(\n+                new AzureActiveDirectoryOAuth2Configuration(),\n+                options\n+        );\n+    }\n+\n+    @Override\n+    public String getConfigFilePath() {\n+        return SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeSuccessResult() {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = builder.build();\n+        final AuthorizationResult authorizationResult = runGetDeviceCodeThread(authorizationRequest, urlBody);\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        Assert.assertTrue(authorizationResult.getSuccess());\n+        Assert.assertNotNull(authorizationResponse);\n+\n+        Assert.assertNotNull(authorizationResponse.getDeviceCode());\n+        Assert.assertNotNull(authorizationResponse.getUserCode());\n+        Assert.assertNotNull(authorizationResponse.getMessage());\n+        Assert.assertNotNull(authorizationResponse.getInterval());\n+        Assert.assertNotNull(authorizationResponse.getExpiresIn());\n+        Assert.assertNotNull(authorizationResponse.getVerificationUri());\n+\n+        Assert.assertNull(authorizationResult.getAuthorizationErrorResponse());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureNoClientId() {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = builder.setClientId(null).build();\n+        final AuthorizationResult authorizationResult = runGetDeviceCodeThread(authorizationRequest, urlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(\"invalid_request\", authorizationErrorResponse.getError());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureNoScope() {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = builder.setScope(null).build();\n+        final AuthorizationResult authorizationResult = runGetDeviceCodeThread(authorizationRequest, urlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(\"invalid_request\", authorizationErrorResponse.getError());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureBadScope() {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = builder.setScope(\"/\").build();\n+        final AuthorizationResult authorizationResult = runGetDeviceCodeThread(authorizationRequest, urlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(\"invalid_scope\", authorizationErrorResponse.getError());\n+    }\n+\n+    /**\n+     * Helper function to run getDeviceCode(). Catches exception\n+     * @param authorizationRequest request to send to getDeviceCode()\n+     * @param urlBody url to send to getDeviceCode()\n+     * @return authorizationResult from getDeviceCode()\n+     */\n+    private AuthorizationResult runGetDeviceCodeThread(final MicrosoftStsAuthorizationRequest authorizationRequest, final String urlBody) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg0MTQ0Mg=="}, "originalCommit": {"oid": "5154a1a543fdabc8926ae55b899a7ea4c4e457f7"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NjE4NjQwOnYy", "diffSide": "RIGHT", "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/GetDeviceCodeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMTowOToxNFrOG6Wx6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMzozNDo1OVrOG6ZafA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg0MzgxOQ==", "bodyText": "Where are we using ShadowDeviceCodeFlowCommandTokenError?\nAlso can we have test cases for each expected error from the token endpoint?\nauthorization_declined, bad_verification_code, expired_token", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r463843819", "createdAt": "2020-07-31T21:09:14Z", "author": {"login": "rpdome"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/GetDeviceCodeTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.tests.mocked;\n+\n+import com.microsoft.identity.client.PublicClientApplicationConfiguration;\n+import com.microsoft.identity.client.e2e.shadows.ShadowMsalUtils;\n+import com.microsoft.identity.client.e2e.tests.PublicClientApplicationAbstractTest;\n+import com.microsoft.identity.common.internal.authorities.AzureActiveDirectoryAuthority;\n+import com.microsoft.identity.common.internal.providers.microsoft.azureactivedirectory.AzureActiveDirectoryOAuth2Configuration;\n+import com.microsoft.identity.common.internal.providers.microsoft.azureactivedirectory.AzureActiveDirectoryOAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationErrorResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationRequest;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationResponse;\n+import com.microsoft.identity.common.internal.providers.oauth2.AuthorizationResult;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2StrategyParameters;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.io.IOException;\n+\n+import static com.microsoft.identity.internal.testutils.TestConstants.Configurations.SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(shadows = {ShadowMsalUtils.class})\n+public class GetDeviceCodeTest extends PublicClientApplicationAbstractTest {\n+\n+    private MicrosoftStsAuthorizationRequest.Builder builder;\n+    private String urlBody;\n+    private OAuth2Strategy strategy;\n+\n+    @Before\n+    public void setup() {\n+        super.setup();\n+\n+        final PublicClientApplicationConfiguration config = mApplication.getConfiguration();\n+        urlBody = ((AzureActiveDirectoryAuthority) config.getAuthorities().get(0)).getAudience().getCloudUrl();\n+        builder = new MicrosoftStsAuthorizationRequest.Builder();\n+        builder.setClientId(config.getClientId())\n+                .setScope(\"user.read\")\n+                .setState(\"State!\");\n+\n+        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+        strategy = new AzureActiveDirectoryOAuth2Strategy(\n+                new AzureActiveDirectoryOAuth2Configuration(),\n+                options\n+        );\n+    }\n+\n+    @Override\n+    public String getConfigFilePath() {\n+        return SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeSuccessResult() {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = builder.build();\n+        final AuthorizationResult authorizationResult = runGetDeviceCodeThread(authorizationRequest, urlBody);\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        Assert.assertTrue(authorizationResult.getSuccess());\n+        Assert.assertNotNull(authorizationResponse);\n+\n+        Assert.assertNotNull(authorizationResponse.getDeviceCode());\n+        Assert.assertNotNull(authorizationResponse.getUserCode());\n+        Assert.assertNotNull(authorizationResponse.getMessage());\n+        Assert.assertNotNull(authorizationResponse.getInterval());\n+        Assert.assertNotNull(authorizationResponse.getExpiresIn());\n+        Assert.assertNotNull(authorizationResponse.getVerificationUri());\n+\n+        Assert.assertNull(authorizationResult.getAuthorizationErrorResponse());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureNoClientId() {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = builder.setClientId(null).build();\n+        final AuthorizationResult authorizationResult = runGetDeviceCodeThread(authorizationRequest, urlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(\"invalid_request\", authorizationErrorResponse.getError());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureNoScope() {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = builder.setScope(null).build();\n+        final AuthorizationResult authorizationResult = runGetDeviceCodeThread(authorizationRequest, urlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(\"invalid_request\", authorizationErrorResponse.getError());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureBadScope() {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = builder.setScope(\"/\").build();\n+        final AuthorizationResult authorizationResult = runGetDeviceCodeThread(authorizationRequest, urlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(\"invalid_scope\", authorizationErrorResponse.getError());\n+    }\n+\n+    /**\n+     * Helper function to run getDeviceCode(). Catches exception\n+     * @param authorizationRequest request to send to getDeviceCode()\n+     * @param urlBody url to send to getDeviceCode()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5154a1a543fdabc8926ae55b899a7ea4c4e457f7"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg4Njk3Mg==", "bodyText": "ShadowDeviceCodeFlowCommandTokenError is used in DeviceCodeFlowAPITest. I was thinking of moving my getDeviceCode tests into that file and then adding the token tests into there as well.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r463886972", "createdAt": "2020-07-31T23:34:59Z", "author": {"login": "t-fadura"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/GetDeviceCodeTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.tests.mocked;\n+\n+import com.microsoft.identity.client.PublicClientApplicationConfiguration;\n+import com.microsoft.identity.client.e2e.shadows.ShadowMsalUtils;\n+import com.microsoft.identity.client.e2e.tests.PublicClientApplicationAbstractTest;\n+import com.microsoft.identity.common.internal.authorities.AzureActiveDirectoryAuthority;\n+import com.microsoft.identity.common.internal.providers.microsoft.azureactivedirectory.AzureActiveDirectoryOAuth2Configuration;\n+import com.microsoft.identity.common.internal.providers.microsoft.azureactivedirectory.AzureActiveDirectoryOAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationErrorResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationRequest;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationResponse;\n+import com.microsoft.identity.common.internal.providers.oauth2.AuthorizationResult;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2StrategyParameters;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.io.IOException;\n+\n+import static com.microsoft.identity.internal.testutils.TestConstants.Configurations.SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(shadows = {ShadowMsalUtils.class})\n+public class GetDeviceCodeTest extends PublicClientApplicationAbstractTest {\n+\n+    private MicrosoftStsAuthorizationRequest.Builder builder;\n+    private String urlBody;\n+    private OAuth2Strategy strategy;\n+\n+    @Before\n+    public void setup() {\n+        super.setup();\n+\n+        final PublicClientApplicationConfiguration config = mApplication.getConfiguration();\n+        urlBody = ((AzureActiveDirectoryAuthority) config.getAuthorities().get(0)).getAudience().getCloudUrl();\n+        builder = new MicrosoftStsAuthorizationRequest.Builder();\n+        builder.setClientId(config.getClientId())\n+                .setScope(\"user.read\")\n+                .setState(\"State!\");\n+\n+        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+        strategy = new AzureActiveDirectoryOAuth2Strategy(\n+                new AzureActiveDirectoryOAuth2Configuration(),\n+                options\n+        );\n+    }\n+\n+    @Override\n+    public String getConfigFilePath() {\n+        return SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeSuccessResult() {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = builder.build();\n+        final AuthorizationResult authorizationResult = runGetDeviceCodeThread(authorizationRequest, urlBody);\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        Assert.assertTrue(authorizationResult.getSuccess());\n+        Assert.assertNotNull(authorizationResponse);\n+\n+        Assert.assertNotNull(authorizationResponse.getDeviceCode());\n+        Assert.assertNotNull(authorizationResponse.getUserCode());\n+        Assert.assertNotNull(authorizationResponse.getMessage());\n+        Assert.assertNotNull(authorizationResponse.getInterval());\n+        Assert.assertNotNull(authorizationResponse.getExpiresIn());\n+        Assert.assertNotNull(authorizationResponse.getVerificationUri());\n+\n+        Assert.assertNull(authorizationResult.getAuthorizationErrorResponse());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureNoClientId() {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = builder.setClientId(null).build();\n+        final AuthorizationResult authorizationResult = runGetDeviceCodeThread(authorizationRequest, urlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(\"invalid_request\", authorizationErrorResponse.getError());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureNoScope() {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = builder.setScope(null).build();\n+        final AuthorizationResult authorizationResult = runGetDeviceCodeThread(authorizationRequest, urlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(\"invalid_request\", authorizationErrorResponse.getError());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureBadScope() {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = builder.setScope(\"/\").build();\n+        final AuthorizationResult authorizationResult = runGetDeviceCodeThread(authorizationRequest, urlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(\"invalid_scope\", authorizationErrorResponse.getError());\n+    }\n+\n+    /**\n+     * Helper function to run getDeviceCode(). Catches exception\n+     * @param authorizationRequest request to send to getDeviceCode()\n+     * @param urlBody url to send to getDeviceCode()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg0MzgxOQ=="}, "originalCommit": {"oid": "5154a1a543fdabc8926ae55b899a7ea4c4e457f7"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjg0ODIwOnYy", "diffSide": "RIGHT", "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowApiTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDo1ODowMFrOG72bEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMTowNjowN1rOG72jpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxMDgzMw==", "bodyText": "Should these be removed?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r465410833", "createdAt": "2020-08-05T00:58:00Z", "author": {"login": "shahzaibj"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowApiTest.java", "diffHunk": "@@ -0,0 +1,329 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.tests.mocked;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.AuthenticationResult;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplicationConfiguration;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandAuthError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandSuccessful;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandTokenError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowHttpRequestForMockedTest;\n+import com.microsoft.identity.client.e2e.shadows.ShadowMsalUtils;\n+import com.microsoft.identity.client.e2e.tests.PublicClientApplicationAbstractTest;\n+import com.microsoft.identity.client.e2e.utils.RoboTestUtils;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.authorities.AzureActiveDirectoryAuthority;\n+import com.microsoft.identity.common.internal.providers.microsoft.azureactivedirectory.AzureActiveDirectoryOAuth2Configuration;\n+import com.microsoft.identity.common.internal.providers.microsoft.azureactivedirectory.AzureActiveDirectoryOAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationErrorResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationRequest;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Configuration;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsTokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.AuthorizationResult;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2StrategyParameters;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenResult;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.UUID;\n+\n+import static com.microsoft.identity.internal.testutils.TestConstants.Configurations.SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+\n+/**\n+ * Testing class for the device code flow protocol. Currently only supporting testing for the API-side\n+ * of the protocol. Will be extended to test individual aspects of the flow.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@Config(shadows = {ShadowMsalUtils.class})\n+public class DeviceCodeFlowApiTest extends PublicClientApplicationAbstractTest {\n+\n+    private MicrosoftStsAuthorizationRequest.Builder mBuilder;\n+    private String mUrlBody;\n+    private OAuth2Strategy mStrategy;\n+    private MicrosoftStsTokenRequest mTokenRequest;\n+    private boolean mUserCodeReceived;\n+\n+    @Before\n+    public void setup() {\n+        super.setup();\n+\n+        // getDeviceCode() testing variables\n+        final PublicClientApplicationConfiguration config = mApplication.getConfiguration();\n+        mUrlBody = ((AzureActiveDirectoryAuthority) config.getAuthorities().get(0)).getAudience().getCloudUrl();\n+        mBuilder = new MicrosoftStsAuthorizationRequest.Builder();\n+        mBuilder.setClientId(config.getClientId())\n+                .setScope(\"user.read\")\n+                .setState(\"State!\");\n+\n+        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+        mStrategy = new AzureActiveDirectoryOAuth2Strategy(\n+                new AzureActiveDirectoryOAuth2Configuration(),\n+                options\n+        );\n+\n+        // token request testing variable\n+        mTokenRequest = new MicrosoftStsTokenRequest();\n+        mTokenRequest.setCodeVerifier(\"\");\n+        mTokenRequest.setCorrelationId(UUID.fromString(\"a-b-c-d-e\"));\n+        mTokenRequest.setClientId(config.getClientId());\n+        mTokenRequest.setGrantType(TokenRequest.GrantTypes.DEVICE_CODE);\n+        mTokenRequest.setRedirectUri(config.getRedirectUri());\n+    }\n+\n+    @Override\n+    public String getConfigFilePath() {\n+        return SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+    }\n+\n+    //===========================================================================================================\n+    // getDeviceCode() Testing\n+    //===========================================================================================================\n+    @Test\n+    public void testGetDeviceCodeSuccessResult() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        Assert.assertTrue(authorizationResult.getSuccess());\n+        Assert.assertNotNull(authorizationResponse);\n+\n+        Assert.assertNotNull(authorizationResponse.getDeviceCode());\n+        Assert.assertNotNull(authorizationResponse.getUserCode());\n+        Assert.assertNotNull(authorizationResponse.getMessage());\n+        Assert.assertNotNull(authorizationResponse.getInterval());\n+        Assert.assertNotNull(authorizationResponse.getExpiresIn());\n+        Assert.assertNotNull(authorizationResponse.getVerificationUri());\n+\n+        Assert.assertNull(authorizationResult.getAuthorizationErrorResponse());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureNoClientId() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.setClientId(null).build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(ErrorStrings.INVALID_REQUEST, authorizationErrorResponse.getError());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureNoScope() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.setScope(null).build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(ErrorStrings.INVALID_REQUEST, authorizationErrorResponse.getError());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureBadScope() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.setScope(\"/\").build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(ErrorStrings.INVALID_SCOPE, authorizationErrorResponse.getError());\n+    }\n+\n+    //===========================================================================================================\n+    // Token Request Testing\n+    //===========================================================================================================x\n+    @Test\n+    public void testDeviceCodeFlowTokenInvalidRequest() throws IOException, ClientException {\n+        final MicrosoftStsOAuth2Configuration config = new MicrosoftStsOAuth2Configuration();\n+        config.setAuthorityUrl(new URL(mUrlBody));\n+        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+        final OAuth2Strategy strategy = new MicrosoftStsOAuth2Strategy(config, options);\n+\n+        final TokenResult tokenResult = strategy.requestToken(mTokenRequest);\n+        Assert.assertNull(tokenResult.getTokenResponse());\n+        Assert.assertNotNull(tokenResult.getErrorResponse());\n+        Assert.assertEquals(ErrorStrings.INVALID_REQUEST, tokenResult.getErrorResponse().getError());\n+    }\n+\n+    @Test\n+    public void testDeviceCodeFlowTokenExpiredToken() throws IOException, ClientException {\n+        final MicrosoftStsOAuth2Configuration config = new MicrosoftStsOAuth2Configuration();\n+        config.setAuthorityUrl(new URL(mUrlBody));\n+        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+        final OAuth2Strategy strategy = new MicrosoftStsOAuth2Strategy(config, options);\n+\n+        // Previously authenticated code\n+        mTokenRequest.setDeviceCode(\n+                \"AAQABAAEAAAAm-06blBE1TpVMil8KPQ41e5vDLI7te0y-3XHYO_uurPryAiyBiPiKnjEVzAQZQzCyGZERne4a\" +\n+                        \"IwYAiBlQ8an93ENYuVOO-vEAt48FEJSEMQqq-zHZVD59bkc6eYIAViZKVvTv5_qilKj4uEjVE9BGkIxY5B6Uq1K8oWHEqzH-w6CiWjC8vQc6mSV_FPCbnAggAA\");\n+\n+        final TokenResult tokenResult = strategy.requestToken(mTokenRequest);\n+        Assert.assertNull(tokenResult.getTokenResponse());\n+        Assert.assertNotNull(tokenResult.getErrorResponse());\n+        Assert.assertEquals(ErrorStrings.DEVICE_CODE_FLOW_EXPIRED_TOKEN_CODE, tokenResult.getErrorResponse().getError());\n+    }\n+\n+    // A device code that has not yet been registered leads to invalid_grant, not bad_verification_code\n+//    @Test\n+//    public void testDeviceCodeFlowTokenBadVerificationCode() throws IOException, ClientException {\n+//        final MicrosoftStsOAuth2Configuration config = new MicrosoftStsOAuth2Configuration();\n+//        config.setAuthorityUrl(new URL(mUrlBody));\n+//        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+//        final OAuth2Strategy strategy = new MicrosoftStsOAuth2Strategy(config, options);\n+//        mTokenRequest.setDeviceCode(\n+//                \"AAQABAAEAAAAm-06blBE1TpVMil8KPQ41e5vDLI7te0y-3XHYO_uurPryAiyBiPiKnjEVzAQZQzCyGZERne4a\" +\n+//                        \"IwYAiBlQ8an93ENYuVOO-vEAt48FEJSEMQqq-zHZVD59bkc6eYIAViZKVvTv5_qilKj4uEjVE9BGkIxY5B6Uq1K8oWHEqzH-w6CiWjC8vQc6mSV_FPCbnAggBA\");\n+//\n+//        final TokenResult tokenResult = strategy.requestToken(mTokenRequest);\n+//        Assert.assertNull(tokenResult.getTokenResponse());\n+//        Assert.assertNotNull(tokenResult.getErrorResponse());\n+//        Assert.assertEquals(ErrorStrings.DEVICE_CODE_FLOW_BAD_VERIFICATION_CODE, tokenResult.getErrorResponse().getError());\n+//    }\n+\n+    // authorization_declined is triggered in the actual auth side\n+//    @Test\n+//    public void testDeviceCodeFlowTokenAuthorizationDeclined() throws IOException, ClientException {\n+//        final MicrosoftStsOAuth2Configuration config = new MicrosoftStsOAuth2Configuration();\n+//        config.setAuthorityUrl(new URL(mUrlBody));\n+//        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+//        final OAuth2Strategy strategy = new MicrosoftStsOAuth2Strategy(config, options);\n+//\n+//        final TokenResult tokenResult = strategy.requestToken(mTokenRequest);\n+//        Assert.assertNull(tokenResult.getTokenResponse());\n+//        Assert.assertNotNull(tokenResult.getErrorResponse());\n+//        Assert.assertEquals(ErrorStrings.DEVICE_CODE_FLOW_AUTHORIZATION_DECLINED_CODE, tokenResult.getErrorResponse().getError());\n+//    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9edceae36e8b147447f66f78e14543d1a77c4532"}, "originalPosition": 238}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxMzAyOA==", "bodyText": "I think so, I wanted to let people take a look at them before I removed them, but I don't think they serve much purpose as is.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r465413028", "createdAt": "2020-08-05T01:06:07Z", "author": {"login": "t-fadura"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowApiTest.java", "diffHunk": "@@ -0,0 +1,329 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.tests.mocked;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.AuthenticationResult;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplicationConfiguration;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandAuthError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandSuccessful;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandTokenError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowHttpRequestForMockedTest;\n+import com.microsoft.identity.client.e2e.shadows.ShadowMsalUtils;\n+import com.microsoft.identity.client.e2e.tests.PublicClientApplicationAbstractTest;\n+import com.microsoft.identity.client.e2e.utils.RoboTestUtils;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.authorities.AzureActiveDirectoryAuthority;\n+import com.microsoft.identity.common.internal.providers.microsoft.azureactivedirectory.AzureActiveDirectoryOAuth2Configuration;\n+import com.microsoft.identity.common.internal.providers.microsoft.azureactivedirectory.AzureActiveDirectoryOAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationErrorResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationRequest;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Configuration;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsTokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.AuthorizationResult;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2StrategyParameters;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenResult;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.UUID;\n+\n+import static com.microsoft.identity.internal.testutils.TestConstants.Configurations.SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+\n+/**\n+ * Testing class for the device code flow protocol. Currently only supporting testing for the API-side\n+ * of the protocol. Will be extended to test individual aspects of the flow.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@Config(shadows = {ShadowMsalUtils.class})\n+public class DeviceCodeFlowApiTest extends PublicClientApplicationAbstractTest {\n+\n+    private MicrosoftStsAuthorizationRequest.Builder mBuilder;\n+    private String mUrlBody;\n+    private OAuth2Strategy mStrategy;\n+    private MicrosoftStsTokenRequest mTokenRequest;\n+    private boolean mUserCodeReceived;\n+\n+    @Before\n+    public void setup() {\n+        super.setup();\n+\n+        // getDeviceCode() testing variables\n+        final PublicClientApplicationConfiguration config = mApplication.getConfiguration();\n+        mUrlBody = ((AzureActiveDirectoryAuthority) config.getAuthorities().get(0)).getAudience().getCloudUrl();\n+        mBuilder = new MicrosoftStsAuthorizationRequest.Builder();\n+        mBuilder.setClientId(config.getClientId())\n+                .setScope(\"user.read\")\n+                .setState(\"State!\");\n+\n+        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+        mStrategy = new AzureActiveDirectoryOAuth2Strategy(\n+                new AzureActiveDirectoryOAuth2Configuration(),\n+                options\n+        );\n+\n+        // token request testing variable\n+        mTokenRequest = new MicrosoftStsTokenRequest();\n+        mTokenRequest.setCodeVerifier(\"\");\n+        mTokenRequest.setCorrelationId(UUID.fromString(\"a-b-c-d-e\"));\n+        mTokenRequest.setClientId(config.getClientId());\n+        mTokenRequest.setGrantType(TokenRequest.GrantTypes.DEVICE_CODE);\n+        mTokenRequest.setRedirectUri(config.getRedirectUri());\n+    }\n+\n+    @Override\n+    public String getConfigFilePath() {\n+        return SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+    }\n+\n+    //===========================================================================================================\n+    // getDeviceCode() Testing\n+    //===========================================================================================================\n+    @Test\n+    public void testGetDeviceCodeSuccessResult() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        Assert.assertTrue(authorizationResult.getSuccess());\n+        Assert.assertNotNull(authorizationResponse);\n+\n+        Assert.assertNotNull(authorizationResponse.getDeviceCode());\n+        Assert.assertNotNull(authorizationResponse.getUserCode());\n+        Assert.assertNotNull(authorizationResponse.getMessage());\n+        Assert.assertNotNull(authorizationResponse.getInterval());\n+        Assert.assertNotNull(authorizationResponse.getExpiresIn());\n+        Assert.assertNotNull(authorizationResponse.getVerificationUri());\n+\n+        Assert.assertNull(authorizationResult.getAuthorizationErrorResponse());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureNoClientId() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.setClientId(null).build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(ErrorStrings.INVALID_REQUEST, authorizationErrorResponse.getError());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureNoScope() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.setScope(null).build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(ErrorStrings.INVALID_REQUEST, authorizationErrorResponse.getError());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureBadScope() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.setScope(\"/\").build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(ErrorStrings.INVALID_SCOPE, authorizationErrorResponse.getError());\n+    }\n+\n+    //===========================================================================================================\n+    // Token Request Testing\n+    //===========================================================================================================x\n+    @Test\n+    public void testDeviceCodeFlowTokenInvalidRequest() throws IOException, ClientException {\n+        final MicrosoftStsOAuth2Configuration config = new MicrosoftStsOAuth2Configuration();\n+        config.setAuthorityUrl(new URL(mUrlBody));\n+        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+        final OAuth2Strategy strategy = new MicrosoftStsOAuth2Strategy(config, options);\n+\n+        final TokenResult tokenResult = strategy.requestToken(mTokenRequest);\n+        Assert.assertNull(tokenResult.getTokenResponse());\n+        Assert.assertNotNull(tokenResult.getErrorResponse());\n+        Assert.assertEquals(ErrorStrings.INVALID_REQUEST, tokenResult.getErrorResponse().getError());\n+    }\n+\n+    @Test\n+    public void testDeviceCodeFlowTokenExpiredToken() throws IOException, ClientException {\n+        final MicrosoftStsOAuth2Configuration config = new MicrosoftStsOAuth2Configuration();\n+        config.setAuthorityUrl(new URL(mUrlBody));\n+        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+        final OAuth2Strategy strategy = new MicrosoftStsOAuth2Strategy(config, options);\n+\n+        // Previously authenticated code\n+        mTokenRequest.setDeviceCode(\n+                \"AAQABAAEAAAAm-06blBE1TpVMil8KPQ41e5vDLI7te0y-3XHYO_uurPryAiyBiPiKnjEVzAQZQzCyGZERne4a\" +\n+                        \"IwYAiBlQ8an93ENYuVOO-vEAt48FEJSEMQqq-zHZVD59bkc6eYIAViZKVvTv5_qilKj4uEjVE9BGkIxY5B6Uq1K8oWHEqzH-w6CiWjC8vQc6mSV_FPCbnAggAA\");\n+\n+        final TokenResult tokenResult = strategy.requestToken(mTokenRequest);\n+        Assert.assertNull(tokenResult.getTokenResponse());\n+        Assert.assertNotNull(tokenResult.getErrorResponse());\n+        Assert.assertEquals(ErrorStrings.DEVICE_CODE_FLOW_EXPIRED_TOKEN_CODE, tokenResult.getErrorResponse().getError());\n+    }\n+\n+    // A device code that has not yet been registered leads to invalid_grant, not bad_verification_code\n+//    @Test\n+//    public void testDeviceCodeFlowTokenBadVerificationCode() throws IOException, ClientException {\n+//        final MicrosoftStsOAuth2Configuration config = new MicrosoftStsOAuth2Configuration();\n+//        config.setAuthorityUrl(new URL(mUrlBody));\n+//        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+//        final OAuth2Strategy strategy = new MicrosoftStsOAuth2Strategy(config, options);\n+//        mTokenRequest.setDeviceCode(\n+//                \"AAQABAAEAAAAm-06blBE1TpVMil8KPQ41e5vDLI7te0y-3XHYO_uurPryAiyBiPiKnjEVzAQZQzCyGZERne4a\" +\n+//                        \"IwYAiBlQ8an93ENYuVOO-vEAt48FEJSEMQqq-zHZVD59bkc6eYIAViZKVvTv5_qilKj4uEjVE9BGkIxY5B6Uq1K8oWHEqzH-w6CiWjC8vQc6mSV_FPCbnAggBA\");\n+//\n+//        final TokenResult tokenResult = strategy.requestToken(mTokenRequest);\n+//        Assert.assertNull(tokenResult.getTokenResponse());\n+//        Assert.assertNotNull(tokenResult.getErrorResponse());\n+//        Assert.assertEquals(ErrorStrings.DEVICE_CODE_FLOW_BAD_VERIFICATION_CODE, tokenResult.getErrorResponse().getError());\n+//    }\n+\n+    // authorization_declined is triggered in the actual auth side\n+//    @Test\n+//    public void testDeviceCodeFlowTokenAuthorizationDeclined() throws IOException, ClientException {\n+//        final MicrosoftStsOAuth2Configuration config = new MicrosoftStsOAuth2Configuration();\n+//        config.setAuthorityUrl(new URL(mUrlBody));\n+//        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+//        final OAuth2Strategy strategy = new MicrosoftStsOAuth2Strategy(config, options);\n+//\n+//        final TokenResult tokenResult = strategy.requestToken(mTokenRequest);\n+//        Assert.assertNull(tokenResult.getTokenResponse());\n+//        Assert.assertNotNull(tokenResult.getErrorResponse());\n+//        Assert.assertEquals(ErrorStrings.DEVICE_CODE_FLOW_AUTHORIZATION_DECLINED_CODE, tokenResult.getErrorResponse().getError());\n+//    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxMDgzMw=="}, "originalCommit": {"oid": "9edceae36e8b147447f66f78e14543d1a77c4532"}, "originalPosition": 238}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjg2OTE2OnYy", "diffSide": "RIGHT", "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowApiTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMTowOTo1OVrOG72nhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMTo0OTowNVrOG73Qzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxNDAyMA==", "bodyText": "nit: Let's not use a class variable. Can we create a function that returns a new (mock) token request instead.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r465414020", "createdAt": "2020-08-05T01:09:59Z", "author": {"login": "rpdome"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowApiTest.java", "diffHunk": "@@ -0,0 +1,329 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.tests.mocked;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.AuthenticationResult;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplicationConfiguration;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandAuthError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandSuccessful;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandTokenError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowHttpRequestForMockedTest;\n+import com.microsoft.identity.client.e2e.shadows.ShadowMsalUtils;\n+import com.microsoft.identity.client.e2e.tests.PublicClientApplicationAbstractTest;\n+import com.microsoft.identity.client.e2e.utils.RoboTestUtils;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.authorities.AzureActiveDirectoryAuthority;\n+import com.microsoft.identity.common.internal.providers.microsoft.azureactivedirectory.AzureActiveDirectoryOAuth2Configuration;\n+import com.microsoft.identity.common.internal.providers.microsoft.azureactivedirectory.AzureActiveDirectoryOAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationErrorResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationRequest;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Configuration;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsTokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.AuthorizationResult;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2StrategyParameters;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenResult;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.UUID;\n+\n+import static com.microsoft.identity.internal.testutils.TestConstants.Configurations.SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+\n+/**\n+ * Testing class for the device code flow protocol. Currently only supporting testing for the API-side\n+ * of the protocol. Will be extended to test individual aspects of the flow.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@Config(shadows = {ShadowMsalUtils.class})\n+public class DeviceCodeFlowApiTest extends PublicClientApplicationAbstractTest {\n+\n+    private MicrosoftStsAuthorizationRequest.Builder mBuilder;\n+    private String mUrlBody;\n+    private OAuth2Strategy mStrategy;\n+    private MicrosoftStsTokenRequest mTokenRequest;\n+    private boolean mUserCodeReceived;\n+\n+    @Before\n+    public void setup() {\n+        super.setup();\n+\n+        // getDeviceCode() testing variables\n+        final PublicClientApplicationConfiguration config = mApplication.getConfiguration();\n+        mUrlBody = ((AzureActiveDirectoryAuthority) config.getAuthorities().get(0)).getAudience().getCloudUrl();\n+        mBuilder = new MicrosoftStsAuthorizationRequest.Builder();\n+        mBuilder.setClientId(config.getClientId())\n+                .setScope(\"user.read\")\n+                .setState(\"State!\");\n+\n+        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+        mStrategy = new AzureActiveDirectoryOAuth2Strategy(\n+                new AzureActiveDirectoryOAuth2Configuration(),\n+                options\n+        );\n+\n+        // token request testing variable\n+        mTokenRequest = new MicrosoftStsTokenRequest();\n+        mTokenRequest.setCodeVerifier(\"\");\n+        mTokenRequest.setCorrelationId(UUID.fromString(\"a-b-c-d-e\"));\n+        mTokenRequest.setClientId(config.getClientId());\n+        mTokenRequest.setGrantType(TokenRequest.GrantTypes.DEVICE_CODE);\n+        mTokenRequest.setRedirectUri(config.getRedirectUri());\n+    }\n+\n+    @Override\n+    public String getConfigFilePath() {\n+        return SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+    }\n+\n+    //===========================================================================================================\n+    // getDeviceCode() Testing\n+    //===========================================================================================================\n+    @Test\n+    public void testGetDeviceCodeSuccessResult() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        Assert.assertTrue(authorizationResult.getSuccess());\n+        Assert.assertNotNull(authorizationResponse);\n+\n+        Assert.assertNotNull(authorizationResponse.getDeviceCode());\n+        Assert.assertNotNull(authorizationResponse.getUserCode());\n+        Assert.assertNotNull(authorizationResponse.getMessage());\n+        Assert.assertNotNull(authorizationResponse.getInterval());\n+        Assert.assertNotNull(authorizationResponse.getExpiresIn());\n+        Assert.assertNotNull(authorizationResponse.getVerificationUri());\n+\n+        Assert.assertNull(authorizationResult.getAuthorizationErrorResponse());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureNoClientId() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.setClientId(null).build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(ErrorStrings.INVALID_REQUEST, authorizationErrorResponse.getError());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureNoScope() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.setScope(null).build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(ErrorStrings.INVALID_REQUEST, authorizationErrorResponse.getError());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureBadScope() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.setScope(\"/\").build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(ErrorStrings.INVALID_SCOPE, authorizationErrorResponse.getError());\n+    }\n+\n+    //===========================================================================================================\n+    // Token Request Testing\n+    //===========================================================================================================x\n+    @Test\n+    public void testDeviceCodeFlowTokenInvalidRequest() throws IOException, ClientException {\n+        final MicrosoftStsOAuth2Configuration config = new MicrosoftStsOAuth2Configuration();\n+        config.setAuthorityUrl(new URL(mUrlBody));\n+        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+        final OAuth2Strategy strategy = new MicrosoftStsOAuth2Strategy(config, options);\n+\n+        final TokenResult tokenResult = strategy.requestToken(mTokenRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9edceae36e8b147447f66f78e14543d1a77c4532"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNDU5MA==", "bodyText": "Will do, cleaned out most of the setup methods and got rid of most class variables.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r465424590", "createdAt": "2020-08-05T01:49:05Z", "author": {"login": "t-fadura"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowApiTest.java", "diffHunk": "@@ -0,0 +1,329 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.tests.mocked;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.AuthenticationResult;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplicationConfiguration;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandAuthError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandSuccessful;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandTokenError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowHttpRequestForMockedTest;\n+import com.microsoft.identity.client.e2e.shadows.ShadowMsalUtils;\n+import com.microsoft.identity.client.e2e.tests.PublicClientApplicationAbstractTest;\n+import com.microsoft.identity.client.e2e.utils.RoboTestUtils;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.authorities.AzureActiveDirectoryAuthority;\n+import com.microsoft.identity.common.internal.providers.microsoft.azureactivedirectory.AzureActiveDirectoryOAuth2Configuration;\n+import com.microsoft.identity.common.internal.providers.microsoft.azureactivedirectory.AzureActiveDirectoryOAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationErrorResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationRequest;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Configuration;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsTokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.AuthorizationResult;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2StrategyParameters;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenResult;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.UUID;\n+\n+import static com.microsoft.identity.internal.testutils.TestConstants.Configurations.SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+\n+/**\n+ * Testing class for the device code flow protocol. Currently only supporting testing for the API-side\n+ * of the protocol. Will be extended to test individual aspects of the flow.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@Config(shadows = {ShadowMsalUtils.class})\n+public class DeviceCodeFlowApiTest extends PublicClientApplicationAbstractTest {\n+\n+    private MicrosoftStsAuthorizationRequest.Builder mBuilder;\n+    private String mUrlBody;\n+    private OAuth2Strategy mStrategy;\n+    private MicrosoftStsTokenRequest mTokenRequest;\n+    private boolean mUserCodeReceived;\n+\n+    @Before\n+    public void setup() {\n+        super.setup();\n+\n+        // getDeviceCode() testing variables\n+        final PublicClientApplicationConfiguration config = mApplication.getConfiguration();\n+        mUrlBody = ((AzureActiveDirectoryAuthority) config.getAuthorities().get(0)).getAudience().getCloudUrl();\n+        mBuilder = new MicrosoftStsAuthorizationRequest.Builder();\n+        mBuilder.setClientId(config.getClientId())\n+                .setScope(\"user.read\")\n+                .setState(\"State!\");\n+\n+        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+        mStrategy = new AzureActiveDirectoryOAuth2Strategy(\n+                new AzureActiveDirectoryOAuth2Configuration(),\n+                options\n+        );\n+\n+        // token request testing variable\n+        mTokenRequest = new MicrosoftStsTokenRequest();\n+        mTokenRequest.setCodeVerifier(\"\");\n+        mTokenRequest.setCorrelationId(UUID.fromString(\"a-b-c-d-e\"));\n+        mTokenRequest.setClientId(config.getClientId());\n+        mTokenRequest.setGrantType(TokenRequest.GrantTypes.DEVICE_CODE);\n+        mTokenRequest.setRedirectUri(config.getRedirectUri());\n+    }\n+\n+    @Override\n+    public String getConfigFilePath() {\n+        return SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+    }\n+\n+    //===========================================================================================================\n+    // getDeviceCode() Testing\n+    //===========================================================================================================\n+    @Test\n+    public void testGetDeviceCodeSuccessResult() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        Assert.assertTrue(authorizationResult.getSuccess());\n+        Assert.assertNotNull(authorizationResponse);\n+\n+        Assert.assertNotNull(authorizationResponse.getDeviceCode());\n+        Assert.assertNotNull(authorizationResponse.getUserCode());\n+        Assert.assertNotNull(authorizationResponse.getMessage());\n+        Assert.assertNotNull(authorizationResponse.getInterval());\n+        Assert.assertNotNull(authorizationResponse.getExpiresIn());\n+        Assert.assertNotNull(authorizationResponse.getVerificationUri());\n+\n+        Assert.assertNull(authorizationResult.getAuthorizationErrorResponse());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureNoClientId() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.setClientId(null).build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(ErrorStrings.INVALID_REQUEST, authorizationErrorResponse.getError());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureNoScope() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.setScope(null).build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(ErrorStrings.INVALID_REQUEST, authorizationErrorResponse.getError());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureBadScope() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.setScope(\"/\").build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(ErrorStrings.INVALID_SCOPE, authorizationErrorResponse.getError());\n+    }\n+\n+    //===========================================================================================================\n+    // Token Request Testing\n+    //===========================================================================================================x\n+    @Test\n+    public void testDeviceCodeFlowTokenInvalidRequest() throws IOException, ClientException {\n+        final MicrosoftStsOAuth2Configuration config = new MicrosoftStsOAuth2Configuration();\n+        config.setAuthorityUrl(new URL(mUrlBody));\n+        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+        final OAuth2Strategy strategy = new MicrosoftStsOAuth2Strategy(config, options);\n+\n+        final TokenResult tokenResult = strategy.requestToken(mTokenRequest);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxNDAyMA=="}, "originalCommit": {"oid": "9edceae36e8b147447f66f78e14543d1a77c4532"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjg3MDc4OnYy", "diffSide": "RIGHT", "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowApiTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMToxMDo1NVrOG72oeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMTo1MTo1MlrOG73UJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxNDI2NA==", "bodyText": "given that it's the same mTokenRequest object with the test case above, why won't I hit ErrorStrings.INVALID_REQUEST here?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r465414264", "createdAt": "2020-08-05T01:10:55Z", "author": {"login": "rpdome"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowApiTest.java", "diffHunk": "@@ -0,0 +1,329 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.tests.mocked;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.AuthenticationResult;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplicationConfiguration;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandAuthError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandSuccessful;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandTokenError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowHttpRequestForMockedTest;\n+import com.microsoft.identity.client.e2e.shadows.ShadowMsalUtils;\n+import com.microsoft.identity.client.e2e.tests.PublicClientApplicationAbstractTest;\n+import com.microsoft.identity.client.e2e.utils.RoboTestUtils;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.authorities.AzureActiveDirectoryAuthority;\n+import com.microsoft.identity.common.internal.providers.microsoft.azureactivedirectory.AzureActiveDirectoryOAuth2Configuration;\n+import com.microsoft.identity.common.internal.providers.microsoft.azureactivedirectory.AzureActiveDirectoryOAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationErrorResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationRequest;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Configuration;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsTokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.AuthorizationResult;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2StrategyParameters;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenResult;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.UUID;\n+\n+import static com.microsoft.identity.internal.testutils.TestConstants.Configurations.SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+\n+/**\n+ * Testing class for the device code flow protocol. Currently only supporting testing for the API-side\n+ * of the protocol. Will be extended to test individual aspects of the flow.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@Config(shadows = {ShadowMsalUtils.class})\n+public class DeviceCodeFlowApiTest extends PublicClientApplicationAbstractTest {\n+\n+    private MicrosoftStsAuthorizationRequest.Builder mBuilder;\n+    private String mUrlBody;\n+    private OAuth2Strategy mStrategy;\n+    private MicrosoftStsTokenRequest mTokenRequest;\n+    private boolean mUserCodeReceived;\n+\n+    @Before\n+    public void setup() {\n+        super.setup();\n+\n+        // getDeviceCode() testing variables\n+        final PublicClientApplicationConfiguration config = mApplication.getConfiguration();\n+        mUrlBody = ((AzureActiveDirectoryAuthority) config.getAuthorities().get(0)).getAudience().getCloudUrl();\n+        mBuilder = new MicrosoftStsAuthorizationRequest.Builder();\n+        mBuilder.setClientId(config.getClientId())\n+                .setScope(\"user.read\")\n+                .setState(\"State!\");\n+\n+        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+        mStrategy = new AzureActiveDirectoryOAuth2Strategy(\n+                new AzureActiveDirectoryOAuth2Configuration(),\n+                options\n+        );\n+\n+        // token request testing variable\n+        mTokenRequest = new MicrosoftStsTokenRequest();\n+        mTokenRequest.setCodeVerifier(\"\");\n+        mTokenRequest.setCorrelationId(UUID.fromString(\"a-b-c-d-e\"));\n+        mTokenRequest.setClientId(config.getClientId());\n+        mTokenRequest.setGrantType(TokenRequest.GrantTypes.DEVICE_CODE);\n+        mTokenRequest.setRedirectUri(config.getRedirectUri());\n+    }\n+\n+    @Override\n+    public String getConfigFilePath() {\n+        return SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+    }\n+\n+    //===========================================================================================================\n+    // getDeviceCode() Testing\n+    //===========================================================================================================\n+    @Test\n+    public void testGetDeviceCodeSuccessResult() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        Assert.assertTrue(authorizationResult.getSuccess());\n+        Assert.assertNotNull(authorizationResponse);\n+\n+        Assert.assertNotNull(authorizationResponse.getDeviceCode());\n+        Assert.assertNotNull(authorizationResponse.getUserCode());\n+        Assert.assertNotNull(authorizationResponse.getMessage());\n+        Assert.assertNotNull(authorizationResponse.getInterval());\n+        Assert.assertNotNull(authorizationResponse.getExpiresIn());\n+        Assert.assertNotNull(authorizationResponse.getVerificationUri());\n+\n+        Assert.assertNull(authorizationResult.getAuthorizationErrorResponse());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureNoClientId() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.setClientId(null).build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(ErrorStrings.INVALID_REQUEST, authorizationErrorResponse.getError());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureNoScope() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.setScope(null).build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(ErrorStrings.INVALID_REQUEST, authorizationErrorResponse.getError());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureBadScope() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.setScope(\"/\").build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(ErrorStrings.INVALID_SCOPE, authorizationErrorResponse.getError());\n+    }\n+\n+    //===========================================================================================================\n+    // Token Request Testing\n+    //===========================================================================================================x\n+    @Test\n+    public void testDeviceCodeFlowTokenInvalidRequest() throws IOException, ClientException {\n+        final MicrosoftStsOAuth2Configuration config = new MicrosoftStsOAuth2Configuration();\n+        config.setAuthorityUrl(new URL(mUrlBody));\n+        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+        final OAuth2Strategy strategy = new MicrosoftStsOAuth2Strategy(config, options);\n+\n+        final TokenResult tokenResult = strategy.requestToken(mTokenRequest);\n+        Assert.assertNull(tokenResult.getTokenResponse());\n+        Assert.assertNotNull(tokenResult.getErrorResponse());\n+        Assert.assertEquals(ErrorStrings.INVALID_REQUEST, tokenResult.getErrorResponse().getError());\n+    }\n+\n+    @Test\n+    public void testDeviceCodeFlowTokenExpiredToken() throws IOException, ClientException {\n+        final MicrosoftStsOAuth2Configuration config = new MicrosoftStsOAuth2Configuration();\n+        config.setAuthorityUrl(new URL(mUrlBody));\n+        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+        final OAuth2Strategy strategy = new MicrosoftStsOAuth2Strategy(config, options);\n+\n+        // Previously authenticated code\n+        mTokenRequest.setDeviceCode(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9edceae36e8b147447f66f78e14543d1a77c4532"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNTQ0NA==", "bodyText": "INVALID_REQUEST was triggered in the test case above this one because the device code was not included. This one has a device code that I already authenticated on so it returns expired token.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r465425444", "createdAt": "2020-08-05T01:51:52Z", "author": {"login": "t-fadura"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowApiTest.java", "diffHunk": "@@ -0,0 +1,329 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.tests.mocked;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.AuthenticationResult;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplicationConfiguration;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandAuthError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandSuccessful;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandTokenError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowHttpRequestForMockedTest;\n+import com.microsoft.identity.client.e2e.shadows.ShadowMsalUtils;\n+import com.microsoft.identity.client.e2e.tests.PublicClientApplicationAbstractTest;\n+import com.microsoft.identity.client.e2e.utils.RoboTestUtils;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.authorities.AzureActiveDirectoryAuthority;\n+import com.microsoft.identity.common.internal.providers.microsoft.azureactivedirectory.AzureActiveDirectoryOAuth2Configuration;\n+import com.microsoft.identity.common.internal.providers.microsoft.azureactivedirectory.AzureActiveDirectoryOAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationErrorResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationRequest;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Configuration;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsTokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.AuthorizationResult;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2StrategyParameters;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenResult;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.UUID;\n+\n+import static com.microsoft.identity.internal.testutils.TestConstants.Configurations.SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+\n+/**\n+ * Testing class for the device code flow protocol. Currently only supporting testing for the API-side\n+ * of the protocol. Will be extended to test individual aspects of the flow.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@Config(shadows = {ShadowMsalUtils.class})\n+public class DeviceCodeFlowApiTest extends PublicClientApplicationAbstractTest {\n+\n+    private MicrosoftStsAuthorizationRequest.Builder mBuilder;\n+    private String mUrlBody;\n+    private OAuth2Strategy mStrategy;\n+    private MicrosoftStsTokenRequest mTokenRequest;\n+    private boolean mUserCodeReceived;\n+\n+    @Before\n+    public void setup() {\n+        super.setup();\n+\n+        // getDeviceCode() testing variables\n+        final PublicClientApplicationConfiguration config = mApplication.getConfiguration();\n+        mUrlBody = ((AzureActiveDirectoryAuthority) config.getAuthorities().get(0)).getAudience().getCloudUrl();\n+        mBuilder = new MicrosoftStsAuthorizationRequest.Builder();\n+        mBuilder.setClientId(config.getClientId())\n+                .setScope(\"user.read\")\n+                .setState(\"State!\");\n+\n+        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+        mStrategy = new AzureActiveDirectoryOAuth2Strategy(\n+                new AzureActiveDirectoryOAuth2Configuration(),\n+                options\n+        );\n+\n+        // token request testing variable\n+        mTokenRequest = new MicrosoftStsTokenRequest();\n+        mTokenRequest.setCodeVerifier(\"\");\n+        mTokenRequest.setCorrelationId(UUID.fromString(\"a-b-c-d-e\"));\n+        mTokenRequest.setClientId(config.getClientId());\n+        mTokenRequest.setGrantType(TokenRequest.GrantTypes.DEVICE_CODE);\n+        mTokenRequest.setRedirectUri(config.getRedirectUri());\n+    }\n+\n+    @Override\n+    public String getConfigFilePath() {\n+        return SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+    }\n+\n+    //===========================================================================================================\n+    // getDeviceCode() Testing\n+    //===========================================================================================================\n+    @Test\n+    public void testGetDeviceCodeSuccessResult() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        Assert.assertTrue(authorizationResult.getSuccess());\n+        Assert.assertNotNull(authorizationResponse);\n+\n+        Assert.assertNotNull(authorizationResponse.getDeviceCode());\n+        Assert.assertNotNull(authorizationResponse.getUserCode());\n+        Assert.assertNotNull(authorizationResponse.getMessage());\n+        Assert.assertNotNull(authorizationResponse.getInterval());\n+        Assert.assertNotNull(authorizationResponse.getExpiresIn());\n+        Assert.assertNotNull(authorizationResponse.getVerificationUri());\n+\n+        Assert.assertNull(authorizationResult.getAuthorizationErrorResponse());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureNoClientId() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.setClientId(null).build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(ErrorStrings.INVALID_REQUEST, authorizationErrorResponse.getError());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureNoScope() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.setScope(null).build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(ErrorStrings.INVALID_REQUEST, authorizationErrorResponse.getError());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureBadScope() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.setScope(\"/\").build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(ErrorStrings.INVALID_SCOPE, authorizationErrorResponse.getError());\n+    }\n+\n+    //===========================================================================================================\n+    // Token Request Testing\n+    //===========================================================================================================x\n+    @Test\n+    public void testDeviceCodeFlowTokenInvalidRequest() throws IOException, ClientException {\n+        final MicrosoftStsOAuth2Configuration config = new MicrosoftStsOAuth2Configuration();\n+        config.setAuthorityUrl(new URL(mUrlBody));\n+        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+        final OAuth2Strategy strategy = new MicrosoftStsOAuth2Strategy(config, options);\n+\n+        final TokenResult tokenResult = strategy.requestToken(mTokenRequest);\n+        Assert.assertNull(tokenResult.getTokenResponse());\n+        Assert.assertNotNull(tokenResult.getErrorResponse());\n+        Assert.assertEquals(ErrorStrings.INVALID_REQUEST, tokenResult.getErrorResponse().getError());\n+    }\n+\n+    @Test\n+    public void testDeviceCodeFlowTokenExpiredToken() throws IOException, ClientException {\n+        final MicrosoftStsOAuth2Configuration config = new MicrosoftStsOAuth2Configuration();\n+        config.setAuthorityUrl(new URL(mUrlBody));\n+        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+        final OAuth2Strategy strategy = new MicrosoftStsOAuth2Strategy(config, options);\n+\n+        // Previously authenticated code\n+        mTokenRequest.setDeviceCode(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxNDI2NA=="}, "originalCommit": {"oid": "9edceae36e8b147447f66f78e14543d1a77c4532"}, "originalPosition": 199}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjg3MjAzOnYy", "diffSide": "RIGHT", "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowApiTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMToxMTozNlrOG72pNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMTozNDo1OFrOG73B9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxNDQ1Mw==", "bodyText": "Why commented out?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r465414453", "createdAt": "2020-08-05T01:11:36Z", "author": {"login": "rpdome"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowApiTest.java", "diffHunk": "@@ -0,0 +1,329 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.tests.mocked;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.AuthenticationResult;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplicationConfiguration;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandAuthError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandSuccessful;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandTokenError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowHttpRequestForMockedTest;\n+import com.microsoft.identity.client.e2e.shadows.ShadowMsalUtils;\n+import com.microsoft.identity.client.e2e.tests.PublicClientApplicationAbstractTest;\n+import com.microsoft.identity.client.e2e.utils.RoboTestUtils;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.authorities.AzureActiveDirectoryAuthority;\n+import com.microsoft.identity.common.internal.providers.microsoft.azureactivedirectory.AzureActiveDirectoryOAuth2Configuration;\n+import com.microsoft.identity.common.internal.providers.microsoft.azureactivedirectory.AzureActiveDirectoryOAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationErrorResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationRequest;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Configuration;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsTokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.AuthorizationResult;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2StrategyParameters;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenResult;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.UUID;\n+\n+import static com.microsoft.identity.internal.testutils.TestConstants.Configurations.SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+\n+/**\n+ * Testing class for the device code flow protocol. Currently only supporting testing for the API-side\n+ * of the protocol. Will be extended to test individual aspects of the flow.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@Config(shadows = {ShadowMsalUtils.class})\n+public class DeviceCodeFlowApiTest extends PublicClientApplicationAbstractTest {\n+\n+    private MicrosoftStsAuthorizationRequest.Builder mBuilder;\n+    private String mUrlBody;\n+    private OAuth2Strategy mStrategy;\n+    private MicrosoftStsTokenRequest mTokenRequest;\n+    private boolean mUserCodeReceived;\n+\n+    @Before\n+    public void setup() {\n+        super.setup();\n+\n+        // getDeviceCode() testing variables\n+        final PublicClientApplicationConfiguration config = mApplication.getConfiguration();\n+        mUrlBody = ((AzureActiveDirectoryAuthority) config.getAuthorities().get(0)).getAudience().getCloudUrl();\n+        mBuilder = new MicrosoftStsAuthorizationRequest.Builder();\n+        mBuilder.setClientId(config.getClientId())\n+                .setScope(\"user.read\")\n+                .setState(\"State!\");\n+\n+        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+        mStrategy = new AzureActiveDirectoryOAuth2Strategy(\n+                new AzureActiveDirectoryOAuth2Configuration(),\n+                options\n+        );\n+\n+        // token request testing variable\n+        mTokenRequest = new MicrosoftStsTokenRequest();\n+        mTokenRequest.setCodeVerifier(\"\");\n+        mTokenRequest.setCorrelationId(UUID.fromString(\"a-b-c-d-e\"));\n+        mTokenRequest.setClientId(config.getClientId());\n+        mTokenRequest.setGrantType(TokenRequest.GrantTypes.DEVICE_CODE);\n+        mTokenRequest.setRedirectUri(config.getRedirectUri());\n+    }\n+\n+    @Override\n+    public String getConfigFilePath() {\n+        return SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+    }\n+\n+    //===========================================================================================================\n+    // getDeviceCode() Testing\n+    //===========================================================================================================\n+    @Test\n+    public void testGetDeviceCodeSuccessResult() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        Assert.assertTrue(authorizationResult.getSuccess());\n+        Assert.assertNotNull(authorizationResponse);\n+\n+        Assert.assertNotNull(authorizationResponse.getDeviceCode());\n+        Assert.assertNotNull(authorizationResponse.getUserCode());\n+        Assert.assertNotNull(authorizationResponse.getMessage());\n+        Assert.assertNotNull(authorizationResponse.getInterval());\n+        Assert.assertNotNull(authorizationResponse.getExpiresIn());\n+        Assert.assertNotNull(authorizationResponse.getVerificationUri());\n+\n+        Assert.assertNull(authorizationResult.getAuthorizationErrorResponse());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureNoClientId() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.setClientId(null).build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(ErrorStrings.INVALID_REQUEST, authorizationErrorResponse.getError());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureNoScope() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.setScope(null).build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(ErrorStrings.INVALID_REQUEST, authorizationErrorResponse.getError());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureBadScope() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.setScope(\"/\").build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(ErrorStrings.INVALID_SCOPE, authorizationErrorResponse.getError());\n+    }\n+\n+    //===========================================================================================================\n+    // Token Request Testing\n+    //===========================================================================================================x\n+    @Test\n+    public void testDeviceCodeFlowTokenInvalidRequest() throws IOException, ClientException {\n+        final MicrosoftStsOAuth2Configuration config = new MicrosoftStsOAuth2Configuration();\n+        config.setAuthorityUrl(new URL(mUrlBody));\n+        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+        final OAuth2Strategy strategy = new MicrosoftStsOAuth2Strategy(config, options);\n+\n+        final TokenResult tokenResult = strategy.requestToken(mTokenRequest);\n+        Assert.assertNull(tokenResult.getTokenResponse());\n+        Assert.assertNotNull(tokenResult.getErrorResponse());\n+        Assert.assertEquals(ErrorStrings.INVALID_REQUEST, tokenResult.getErrorResponse().getError());\n+    }\n+\n+    @Test\n+    public void testDeviceCodeFlowTokenExpiredToken() throws IOException, ClientException {\n+        final MicrosoftStsOAuth2Configuration config = new MicrosoftStsOAuth2Configuration();\n+        config.setAuthorityUrl(new URL(mUrlBody));\n+        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+        final OAuth2Strategy strategy = new MicrosoftStsOAuth2Strategy(config, options);\n+\n+        // Previously authenticated code\n+        mTokenRequest.setDeviceCode(\n+                \"AAQABAAEAAAAm-06blBE1TpVMil8KPQ41e5vDLI7te0y-3XHYO_uurPryAiyBiPiKnjEVzAQZQzCyGZERne4a\" +\n+                        \"IwYAiBlQ8an93ENYuVOO-vEAt48FEJSEMQqq-zHZVD59bkc6eYIAViZKVvTv5_qilKj4uEjVE9BGkIxY5B6Uq1K8oWHEqzH-w6CiWjC8vQc6mSV_FPCbnAggAA\");\n+\n+        final TokenResult tokenResult = strategy.requestToken(mTokenRequest);\n+        Assert.assertNull(tokenResult.getTokenResponse());\n+        Assert.assertNotNull(tokenResult.getErrorResponse());\n+        Assert.assertEquals(ErrorStrings.DEVICE_CODE_FLOW_EXPIRED_TOKEN_CODE, tokenResult.getErrorResponse().getError());\n+    }\n+\n+    // A device code that has not yet been registered leads to invalid_grant, not bad_verification_code", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9edceae36e8b147447f66f78e14543d1a77c4532"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyMDc4OQ==", "bodyText": "Removed these", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r465420789", "createdAt": "2020-08-05T01:34:58Z", "author": {"login": "t-fadura"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowApiTest.java", "diffHunk": "@@ -0,0 +1,329 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.tests.mocked;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.AuthenticationResult;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplicationConfiguration;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandAuthError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandSuccessful;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandTokenError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowHttpRequestForMockedTest;\n+import com.microsoft.identity.client.e2e.shadows.ShadowMsalUtils;\n+import com.microsoft.identity.client.e2e.tests.PublicClientApplicationAbstractTest;\n+import com.microsoft.identity.client.e2e.utils.RoboTestUtils;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.authorities.AzureActiveDirectoryAuthority;\n+import com.microsoft.identity.common.internal.providers.microsoft.azureactivedirectory.AzureActiveDirectoryOAuth2Configuration;\n+import com.microsoft.identity.common.internal.providers.microsoft.azureactivedirectory.AzureActiveDirectoryOAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationErrorResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationRequest;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Configuration;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsTokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.AuthorizationResult;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2StrategyParameters;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenResult;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.UUID;\n+\n+import static com.microsoft.identity.internal.testutils.TestConstants.Configurations.SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+\n+/**\n+ * Testing class for the device code flow protocol. Currently only supporting testing for the API-side\n+ * of the protocol. Will be extended to test individual aspects of the flow.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@Config(shadows = {ShadowMsalUtils.class})\n+public class DeviceCodeFlowApiTest extends PublicClientApplicationAbstractTest {\n+\n+    private MicrosoftStsAuthorizationRequest.Builder mBuilder;\n+    private String mUrlBody;\n+    private OAuth2Strategy mStrategy;\n+    private MicrosoftStsTokenRequest mTokenRequest;\n+    private boolean mUserCodeReceived;\n+\n+    @Before\n+    public void setup() {\n+        super.setup();\n+\n+        // getDeviceCode() testing variables\n+        final PublicClientApplicationConfiguration config = mApplication.getConfiguration();\n+        mUrlBody = ((AzureActiveDirectoryAuthority) config.getAuthorities().get(0)).getAudience().getCloudUrl();\n+        mBuilder = new MicrosoftStsAuthorizationRequest.Builder();\n+        mBuilder.setClientId(config.getClientId())\n+                .setScope(\"user.read\")\n+                .setState(\"State!\");\n+\n+        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+        mStrategy = new AzureActiveDirectoryOAuth2Strategy(\n+                new AzureActiveDirectoryOAuth2Configuration(),\n+                options\n+        );\n+\n+        // token request testing variable\n+        mTokenRequest = new MicrosoftStsTokenRequest();\n+        mTokenRequest.setCodeVerifier(\"\");\n+        mTokenRequest.setCorrelationId(UUID.fromString(\"a-b-c-d-e\"));\n+        mTokenRequest.setClientId(config.getClientId());\n+        mTokenRequest.setGrantType(TokenRequest.GrantTypes.DEVICE_CODE);\n+        mTokenRequest.setRedirectUri(config.getRedirectUri());\n+    }\n+\n+    @Override\n+    public String getConfigFilePath() {\n+        return SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+    }\n+\n+    //===========================================================================================================\n+    // getDeviceCode() Testing\n+    //===========================================================================================================\n+    @Test\n+    public void testGetDeviceCodeSuccessResult() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        Assert.assertTrue(authorizationResult.getSuccess());\n+        Assert.assertNotNull(authorizationResponse);\n+\n+        Assert.assertNotNull(authorizationResponse.getDeviceCode());\n+        Assert.assertNotNull(authorizationResponse.getUserCode());\n+        Assert.assertNotNull(authorizationResponse.getMessage());\n+        Assert.assertNotNull(authorizationResponse.getInterval());\n+        Assert.assertNotNull(authorizationResponse.getExpiresIn());\n+        Assert.assertNotNull(authorizationResponse.getVerificationUri());\n+\n+        Assert.assertNull(authorizationResult.getAuthorizationErrorResponse());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureNoClientId() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.setClientId(null).build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(ErrorStrings.INVALID_REQUEST, authorizationErrorResponse.getError());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureNoScope() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.setScope(null).build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(ErrorStrings.INVALID_REQUEST, authorizationErrorResponse.getError());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureBadScope() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.setScope(\"/\").build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(ErrorStrings.INVALID_SCOPE, authorizationErrorResponse.getError());\n+    }\n+\n+    //===========================================================================================================\n+    // Token Request Testing\n+    //===========================================================================================================x\n+    @Test\n+    public void testDeviceCodeFlowTokenInvalidRequest() throws IOException, ClientException {\n+        final MicrosoftStsOAuth2Configuration config = new MicrosoftStsOAuth2Configuration();\n+        config.setAuthorityUrl(new URL(mUrlBody));\n+        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+        final OAuth2Strategy strategy = new MicrosoftStsOAuth2Strategy(config, options);\n+\n+        final TokenResult tokenResult = strategy.requestToken(mTokenRequest);\n+        Assert.assertNull(tokenResult.getTokenResponse());\n+        Assert.assertNotNull(tokenResult.getErrorResponse());\n+        Assert.assertEquals(ErrorStrings.INVALID_REQUEST, tokenResult.getErrorResponse().getError());\n+    }\n+\n+    @Test\n+    public void testDeviceCodeFlowTokenExpiredToken() throws IOException, ClientException {\n+        final MicrosoftStsOAuth2Configuration config = new MicrosoftStsOAuth2Configuration();\n+        config.setAuthorityUrl(new URL(mUrlBody));\n+        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+        final OAuth2Strategy strategy = new MicrosoftStsOAuth2Strategy(config, options);\n+\n+        // Previously authenticated code\n+        mTokenRequest.setDeviceCode(\n+                \"AAQABAAEAAAAm-06blBE1TpVMil8KPQ41e5vDLI7te0y-3XHYO_uurPryAiyBiPiKnjEVzAQZQzCyGZERne4a\" +\n+                        \"IwYAiBlQ8an93ENYuVOO-vEAt48FEJSEMQqq-zHZVD59bkc6eYIAViZKVvTv5_qilKj4uEjVE9BGkIxY5B6Uq1K8oWHEqzH-w6CiWjC8vQc6mSV_FPCbnAggAA\");\n+\n+        final TokenResult tokenResult = strategy.requestToken(mTokenRequest);\n+        Assert.assertNull(tokenResult.getTokenResponse());\n+        Assert.assertNotNull(tokenResult.getErrorResponse());\n+        Assert.assertEquals(ErrorStrings.DEVICE_CODE_FLOW_EXPIRED_TOKEN_CODE, tokenResult.getErrorResponse().getError());\n+    }\n+\n+    // A device code that has not yet been registered leads to invalid_grant, not bad_verification_code", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxNDQ1Mw=="}, "originalCommit": {"oid": "9edceae36e8b147447f66f78e14543d1a77c4532"}, "originalPosition": 209}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDgyMzk4OnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/internal/CommandParametersAdapter.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjoyMjo1MFrOG8cpjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMDozNjowN1rOG8fMLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzNzEzNQ==", "bodyText": "Why can't we just use default authority?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r466037135", "createdAt": "2020-08-05T22:22:50Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/CommandParametersAdapter.java", "diffHunk": "@@ -201,6 +201,10 @@ public static DeviceCodeFlowCommandParameters createDeviceCodeFlowCommandParamet\n             @NonNull String[] scopes){\n \n         // TODO: Consider implementing support for PoP\n+\n+        final String uri = ((AzureActiveDirectoryAuthority) configuration.getAuthorities().get(0)).getAudience().getCloudUrl();\n+        final Authority authority = Authority.getAuthorityFromAuthorityUrl(uri);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83d94b3b9b23dacdbd8d35a0914be2dbfd901bcd"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA0MDk0Mg==", "bodyText": "Default authority has \"common\" as tenantID", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r466040942", "createdAt": "2020-08-05T22:33:38Z", "author": {"login": "t-fadura"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/CommandParametersAdapter.java", "diffHunk": "@@ -201,6 +201,10 @@ public static DeviceCodeFlowCommandParameters createDeviceCodeFlowCommandParamet\n             @NonNull String[] scopes){\n \n         // TODO: Consider implementing support for PoP\n+\n+        final String uri = ((AzureActiveDirectoryAuthority) configuration.getAuthorities().get(0)).getAudience().getCloudUrl();\n+        final Authority authority = Authority.getAuthorityFromAuthorityUrl(uri);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzNzEzNQ=="}, "originalCommit": {"oid": "83d94b3b9b23dacdbd8d35a0914be2dbfd901bcd"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2MDYwNA==", "bodyText": "Default authority would be whatever was declared default in the config....or if there is only one declared then it would be that one authority. It would have common if the dev put common in the config, otherwise it won't. If it does have common, why is that a problem?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r466060604", "createdAt": "2020-08-05T23:32:42Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/CommandParametersAdapter.java", "diffHunk": "@@ -201,6 +201,10 @@ public static DeviceCodeFlowCommandParameters createDeviceCodeFlowCommandParamet\n             @NonNull String[] scopes){\n \n         // TODO: Consider implementing support for PoP\n+\n+        final String uri = ((AzureActiveDirectoryAuthority) configuration.getAuthorities().get(0)).getAudience().getCloudUrl();\n+        final Authority authority = Authority.getAuthorityFromAuthorityUrl(uri);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzNzEzNQ=="}, "originalCommit": {"oid": "83d94b3b9b23dacdbd8d35a0914be2dbfd901bcd"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2Mzk4OA==", "bodyText": "This is my config:\n\nCommon as the tenantID is what's causing /common to be added to the end of the authority url later down the line. This issue doesn't occur in acquireToken() because the command parameters for that also use a custom authority.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r466063988", "createdAt": "2020-08-05T23:43:56Z", "author": {"login": "t-fadura"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/CommandParametersAdapter.java", "diffHunk": "@@ -201,6 +201,10 @@ public static DeviceCodeFlowCommandParameters createDeviceCodeFlowCommandParamet\n             @NonNull String[] scopes){\n \n         // TODO: Consider implementing support for PoP\n+\n+        final String uri = ((AzureActiveDirectoryAuthority) configuration.getAuthorities().get(0)).getAudience().getCloudUrl();\n+        final Authority authority = Authority.getAuthorityFromAuthorityUrl(uri);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzNzEzNQ=="}, "originalCommit": {"oid": "83d94b3b9b23dacdbd8d35a0914be2dbfd901bcd"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2NDQ2MQ==", "bodyText": "refer to getAuthorityUri() in AzureActiveDirectoryAuthroity, this is where the tenant is appended to the end of the authority.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r466064461", "createdAt": "2020-08-05T23:45:27Z", "author": {"login": "t-fadura"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/CommandParametersAdapter.java", "diffHunk": "@@ -201,6 +201,10 @@ public static DeviceCodeFlowCommandParameters createDeviceCodeFlowCommandParamet\n             @NonNull String[] scopes){\n \n         // TODO: Consider implementing support for PoP\n+\n+        final String uri = ((AzureActiveDirectoryAuthority) configuration.getAuthorities().get(0)).getAudience().getCloudUrl();\n+        final Authority authority = Authority.getAuthorityFromAuthorityUrl(uri);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzNzEzNQ=="}, "originalCommit": {"oid": "83d94b3b9b23dacdbd8d35a0914be2dbfd901bcd"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2NDkyMw==", "bodyText": "Okay, I'm not completely clear on this. Let's sync up offline.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r466064923", "createdAt": "2020-08-05T23:47:08Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/CommandParametersAdapter.java", "diffHunk": "@@ -201,6 +201,10 @@ public static DeviceCodeFlowCommandParameters createDeviceCodeFlowCommandParamet\n             @NonNull String[] scopes){\n \n         // TODO: Consider implementing support for PoP\n+\n+        final String uri = ((AzureActiveDirectoryAuthority) configuration.getAuthorities().get(0)).getAudience().getCloudUrl();\n+        final Authority authority = Authority.getAuthorityFromAuthorityUrl(uri);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzNzEzNQ=="}, "originalCommit": {"oid": "83d94b3b9b23dacdbd8d35a0914be2dbfd901bcd"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3ODc2NQ==", "bodyText": "Synced offline with @t-fadura. There's a bug in MSAL and has been for quite some time and that's what's causing this issue. Created GitHub issue here: #1121", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r466078765", "createdAt": "2020-08-06T00:36:07Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/CommandParametersAdapter.java", "diffHunk": "@@ -201,6 +201,10 @@ public static DeviceCodeFlowCommandParameters createDeviceCodeFlowCommandParamet\n             @NonNull String[] scopes){\n \n         // TODO: Consider implementing support for PoP\n+\n+        final String uri = ((AzureActiveDirectoryAuthority) configuration.getAuthorities().get(0)).getAudience().getCloudUrl();\n+        final Authority authority = Authority.getAuthorityFromAuthorityUrl(uri);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzNzEzNQ=="}, "originalCommit": {"oid": "83d94b3b9b23dacdbd8d35a0914be2dbfd901bcd"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDgzMDY2OnYy", "diffSide": "RIGHT", "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowApiTest.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjoyNToyNFrOG8ctLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMDozNjoxN1rOG8fMSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzODA2MQ==", "bodyText": "Why not config.getDefaultAuthority().getAuthorityUrl().toString()?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r466038061", "createdAt": "2020-08-05T22:25:24Z", "author": {"login": "shahzaibj"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowApiTest.java", "diffHunk": "@@ -0,0 +1,329 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.tests.mocked;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.AuthenticationResult;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplicationConfiguration;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandAuthError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandSuccessful;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandTokenError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowMsalUtils;\n+import com.microsoft.identity.client.e2e.tests.PublicClientApplicationAbstractTest;\n+import com.microsoft.identity.client.e2e.utils.RoboTestUtils;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.authorities.Authority;\n+import com.microsoft.identity.common.internal.authorities.AzureActiveDirectoryAuthority;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationErrorResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationRequest;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Configuration;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsTokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.AuthorizationResult;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2StrategyParameters;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenResult;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.UUID;\n+\n+import static com.microsoft.identity.internal.testutils.TestConstants.Configurations.SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+\n+/**\n+ * Testing class for the device code flow protocol. Currently only supporting testing for the API-side\n+ * of the protocol. Will be extended to test individual aspects of the flow.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@Config(shadows = {ShadowMsalUtils.class})\n+public class DeviceCodeFlowApiTest extends PublicClientApplicationAbstractTest {\n+\n+    private String mUrlBody;\n+    private boolean mUserCodeReceived;\n+\n+    @Before\n+    public void setup() {\n+        super.setup();\n+\n+        final PublicClientApplicationConfiguration config = mApplication.getConfiguration();\n+        mUrlBody = ((AzureActiveDirectoryAuthority) config.getAuthorities().get(0)).getAudience().getCloudUrl();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83d94b3b9b23dacdbd8d35a0914be2dbfd901bcd"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA0MjM3NA==", "bodyText": ".getAuthorityUrl() is not defined here, checked it in my code\nAlso tried type casting to AzureActiveDirectoryAuthority", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r466042374", "createdAt": "2020-08-05T22:37:41Z", "author": {"login": "t-fadura"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowApiTest.java", "diffHunk": "@@ -0,0 +1,329 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.tests.mocked;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.AuthenticationResult;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplicationConfiguration;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandAuthError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandSuccessful;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandTokenError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowMsalUtils;\n+import com.microsoft.identity.client.e2e.tests.PublicClientApplicationAbstractTest;\n+import com.microsoft.identity.client.e2e.utils.RoboTestUtils;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.authorities.Authority;\n+import com.microsoft.identity.common.internal.authorities.AzureActiveDirectoryAuthority;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationErrorResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationRequest;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Configuration;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsTokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.AuthorizationResult;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2StrategyParameters;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenResult;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.UUID;\n+\n+import static com.microsoft.identity.internal.testutils.TestConstants.Configurations.SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+\n+/**\n+ * Testing class for the device code flow protocol. Currently only supporting testing for the API-side\n+ * of the protocol. Will be extended to test individual aspects of the flow.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@Config(shadows = {ShadowMsalUtils.class})\n+public class DeviceCodeFlowApiTest extends PublicClientApplicationAbstractTest {\n+\n+    private String mUrlBody;\n+    private boolean mUserCodeReceived;\n+\n+    @Before\n+    public void setup() {\n+        super.setup();\n+\n+        final PublicClientApplicationConfiguration config = mApplication.getConfiguration();\n+        mUrlBody = ((AzureActiveDirectoryAuthority) config.getAuthorities().get(0)).getAudience().getCloudUrl();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzODA2MQ=="}, "originalCommit": {"oid": "83d94b3b9b23dacdbd8d35a0914be2dbfd901bcd"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA0MjY1Nw==", "bodyText": "sorry, it was .getAuthorityURL, which returns a url with /common at the end", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r466042657", "createdAt": "2020-08-05T22:38:30Z", "author": {"login": "t-fadura"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowApiTest.java", "diffHunk": "@@ -0,0 +1,329 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.tests.mocked;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.AuthenticationResult;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplicationConfiguration;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandAuthError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandSuccessful;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandTokenError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowMsalUtils;\n+import com.microsoft.identity.client.e2e.tests.PublicClientApplicationAbstractTest;\n+import com.microsoft.identity.client.e2e.utils.RoboTestUtils;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.authorities.Authority;\n+import com.microsoft.identity.common.internal.authorities.AzureActiveDirectoryAuthority;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationErrorResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationRequest;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Configuration;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsTokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.AuthorizationResult;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2StrategyParameters;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenResult;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.UUID;\n+\n+import static com.microsoft.identity.internal.testutils.TestConstants.Configurations.SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+\n+/**\n+ * Testing class for the device code flow protocol. Currently only supporting testing for the API-side\n+ * of the protocol. Will be extended to test individual aspects of the flow.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@Config(shadows = {ShadowMsalUtils.class})\n+public class DeviceCodeFlowApiTest extends PublicClientApplicationAbstractTest {\n+\n+    private String mUrlBody;\n+    private boolean mUserCodeReceived;\n+\n+    @Before\n+    public void setup() {\n+        super.setup();\n+\n+        final PublicClientApplicationConfiguration config = mApplication.getConfiguration();\n+        mUrlBody = ((AzureActiveDirectoryAuthority) config.getAuthorities().get(0)).getAudience().getCloudUrl();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzODA2MQ=="}, "originalCommit": {"oid": "83d94b3b9b23dacdbd8d35a0914be2dbfd901bcd"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2MDkxMg==", "bodyText": "It probably returns /common at the end because you probably have common in your config. Even if it does, I'm not clear on why that is a problem and why we can't use that?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r466060912", "createdAt": "2020-08-05T23:33:42Z", "author": {"login": "shahzaibj"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowApiTest.java", "diffHunk": "@@ -0,0 +1,329 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.tests.mocked;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.AuthenticationResult;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplicationConfiguration;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandAuthError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandSuccessful;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandTokenError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowMsalUtils;\n+import com.microsoft.identity.client.e2e.tests.PublicClientApplicationAbstractTest;\n+import com.microsoft.identity.client.e2e.utils.RoboTestUtils;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.authorities.Authority;\n+import com.microsoft.identity.common.internal.authorities.AzureActiveDirectoryAuthority;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationErrorResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationRequest;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Configuration;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsTokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.AuthorizationResult;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2StrategyParameters;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenResult;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.UUID;\n+\n+import static com.microsoft.identity.internal.testutils.TestConstants.Configurations.SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+\n+/**\n+ * Testing class for the device code flow protocol. Currently only supporting testing for the API-side\n+ * of the protocol. Will be extended to test individual aspects of the flow.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@Config(shadows = {ShadowMsalUtils.class})\n+public class DeviceCodeFlowApiTest extends PublicClientApplicationAbstractTest {\n+\n+    private String mUrlBody;\n+    private boolean mUserCodeReceived;\n+\n+    @Before\n+    public void setup() {\n+        super.setup();\n+\n+        final PublicClientApplicationConfiguration config = mApplication.getConfiguration();\n+        mUrlBody = ((AzureActiveDirectoryAuthority) config.getAuthorities().get(0)).getAudience().getCloudUrl();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzODA2MQ=="}, "originalCommit": {"oid": "83d94b3b9b23dacdbd8d35a0914be2dbfd901bcd"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2MzkwMA==", "bodyText": "So that's essentially a developer error right? (They need to make sure they declare the correct authority in the config). In this case, it looks @t-fadura did declare the correct authority. I see his config authority is of the form cloud/tenantId. So getDefaultAuthority() should be returning that right?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r466063900", "createdAt": "2020-08-05T23:43:39Z", "author": {"login": "shahzaibj"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowApiTest.java", "diffHunk": "@@ -0,0 +1,329 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.tests.mocked;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.AuthenticationResult;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplicationConfiguration;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandAuthError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandSuccessful;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandTokenError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowMsalUtils;\n+import com.microsoft.identity.client.e2e.tests.PublicClientApplicationAbstractTest;\n+import com.microsoft.identity.client.e2e.utils.RoboTestUtils;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.authorities.Authority;\n+import com.microsoft.identity.common.internal.authorities.AzureActiveDirectoryAuthority;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationErrorResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationRequest;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Configuration;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsTokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.AuthorizationResult;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2StrategyParameters;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenResult;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.UUID;\n+\n+import static com.microsoft.identity.internal.testutils.TestConstants.Configurations.SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+\n+/**\n+ * Testing class for the device code flow protocol. Currently only supporting testing for the API-side\n+ * of the protocol. Will be extended to test individual aspects of the flow.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@Config(shadows = {ShadowMsalUtils.class})\n+public class DeviceCodeFlowApiTest extends PublicClientApplicationAbstractTest {\n+\n+    private String mUrlBody;\n+    private boolean mUserCodeReceived;\n+\n+    @Before\n+    public void setup() {\n+        super.setup();\n+\n+        final PublicClientApplicationConfiguration config = mApplication.getConfiguration();\n+        mUrlBody = ((AzureActiveDirectoryAuthority) config.getAuthorities().get(0)).getAudience().getCloudUrl();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzODA2MQ=="}, "originalCommit": {"oid": "83d94b3b9b23dacdbd8d35a0914be2dbfd901bcd"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2Nzk4MQ==", "bodyText": "My bad. I removed my original comment because I thought I was talking about a different thing.\nWhat Fadi was seeing is that somehow his authority has /common appended after tenant id, which is really weird. I'm not familiar with this layer, but most likely there's a bug here.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r466067981", "createdAt": "2020-08-05T23:57:33Z", "author": {"login": "rpdome"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowApiTest.java", "diffHunk": "@@ -0,0 +1,329 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.tests.mocked;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.AuthenticationResult;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplicationConfiguration;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandAuthError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandSuccessful;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandTokenError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowMsalUtils;\n+import com.microsoft.identity.client.e2e.tests.PublicClientApplicationAbstractTest;\n+import com.microsoft.identity.client.e2e.utils.RoboTestUtils;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.authorities.Authority;\n+import com.microsoft.identity.common.internal.authorities.AzureActiveDirectoryAuthority;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationErrorResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationRequest;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Configuration;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsTokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.AuthorizationResult;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2StrategyParameters;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenResult;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.UUID;\n+\n+import static com.microsoft.identity.internal.testutils.TestConstants.Configurations.SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+\n+/**\n+ * Testing class for the device code flow protocol. Currently only supporting testing for the API-side\n+ * of the protocol. Will be extended to test individual aspects of the flow.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@Config(shadows = {ShadowMsalUtils.class})\n+public class DeviceCodeFlowApiTest extends PublicClientApplicationAbstractTest {\n+\n+    private String mUrlBody;\n+    private boolean mUserCodeReceived;\n+\n+    @Before\n+    public void setup() {\n+        super.setup();\n+\n+        final PublicClientApplicationConfiguration config = mApplication.getConfiguration();\n+        mUrlBody = ((AzureActiveDirectoryAuthority) config.getAuthorities().get(0)).getAudience().getCloudUrl();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzODA2MQ=="}, "originalCommit": {"oid": "83d94b3b9b23dacdbd8d35a0914be2dbfd901bcd"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NzU1Mg==", "bodyText": "Yup, sycned offline with @t-fadura, there's a bug here in MSAL and has been like this forever.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r466077552", "createdAt": "2020-08-06T00:31:38Z", "author": {"login": "shahzaibj"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowApiTest.java", "diffHunk": "@@ -0,0 +1,329 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.tests.mocked;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.AuthenticationResult;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplicationConfiguration;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandAuthError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandSuccessful;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandTokenError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowMsalUtils;\n+import com.microsoft.identity.client.e2e.tests.PublicClientApplicationAbstractTest;\n+import com.microsoft.identity.client.e2e.utils.RoboTestUtils;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.authorities.Authority;\n+import com.microsoft.identity.common.internal.authorities.AzureActiveDirectoryAuthority;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationErrorResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationRequest;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Configuration;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsTokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.AuthorizationResult;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2StrategyParameters;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenResult;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.UUID;\n+\n+import static com.microsoft.identity.internal.testutils.TestConstants.Configurations.SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+\n+/**\n+ * Testing class for the device code flow protocol. Currently only supporting testing for the API-side\n+ * of the protocol. Will be extended to test individual aspects of the flow.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@Config(shadows = {ShadowMsalUtils.class})\n+public class DeviceCodeFlowApiTest extends PublicClientApplicationAbstractTest {\n+\n+    private String mUrlBody;\n+    private boolean mUserCodeReceived;\n+\n+    @Before\n+    public void setup() {\n+        super.setup();\n+\n+        final PublicClientApplicationConfiguration config = mApplication.getConfiguration();\n+        mUrlBody = ((AzureActiveDirectoryAuthority) config.getAuthorities().get(0)).getAudience().getCloudUrl();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzODA2MQ=="}, "originalCommit": {"oid": "83d94b3b9b23dacdbd8d35a0914be2dbfd901bcd"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3ODc5NA==", "bodyText": "Created GitHub issue: #1121", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r466078794", "createdAt": "2020-08-06T00:36:17Z", "author": {"login": "shahzaibj"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowApiTest.java", "diffHunk": "@@ -0,0 +1,329 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.tests.mocked;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.AuthenticationResult;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplicationConfiguration;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandAuthError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandSuccessful;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandTokenError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowMsalUtils;\n+import com.microsoft.identity.client.e2e.tests.PublicClientApplicationAbstractTest;\n+import com.microsoft.identity.client.e2e.utils.RoboTestUtils;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.authorities.Authority;\n+import com.microsoft.identity.common.internal.authorities.AzureActiveDirectoryAuthority;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationErrorResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationRequest;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Configuration;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsTokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.AuthorizationResult;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2StrategyParameters;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenResult;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.UUID;\n+\n+import static com.microsoft.identity.internal.testutils.TestConstants.Configurations.SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+\n+/**\n+ * Testing class for the device code flow protocol. Currently only supporting testing for the API-side\n+ * of the protocol. Will be extended to test individual aspects of the flow.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@Config(shadows = {ShadowMsalUtils.class})\n+public class DeviceCodeFlowApiTest extends PublicClientApplicationAbstractTest {\n+\n+    private String mUrlBody;\n+    private boolean mUserCodeReceived;\n+\n+    @Before\n+    public void setup() {\n+        super.setup();\n+\n+        final PublicClientApplicationConfiguration config = mApplication.getConfiguration();\n+        mUrlBody = ((AzureActiveDirectoryAuthority) config.getAuthorities().get(0)).getAudience().getCloudUrl();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzODA2MQ=="}, "originalCommit": {"oid": "83d94b3b9b23dacdbd8d35a0914be2dbfd901bcd"}, "originalPosition": 82}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1803, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}