{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4NTUxOTMw", "number": 1112, "title": "Device Code Flow Final PR on MSAL", "bodyText": "Final major PR on MSAL as part of my internship project. End-to-end Device Code Flow is working alongside Common PR at: AzureAD/microsoft-authentication-library-common-for-android#983\nSince LocalMsalController was moved to common, this PR is mainly just test cases now.", "createdAt": "2020-07-29T16:34:50Z", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112", "merged": true, "mergeCommit": {"oid": "50a90023fb523097a1fe7f13e589365cc7a6c0fa"}, "closed": true, "closedAt": "2020-08-07T01:00:13Z", "author": {"login": "t-fadura"}, "timelineItems": {"totalCount": 52, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc4bZeNAH2gAyNDU4NTUxOTMwOjI5Nzg3OTIxZTQxNDgzNWI1YTUzNzY2MGYxM2FmY2Q3OTM3MWZjZDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8Zm4ZAFqTQ2Mjk2NzkzMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "29787921e414835b5a537660f13afcd79371fcd7", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/29787921e414835b5a537660f13afcd79371fcd7", "committedDate": "2020-07-25T16:41:06Z", "message": "side branch while PRs complete"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97fd721583643faa64a9da3292a7af67dbb27eec", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/97fd721583643faa64a9da3292a7af67dbb27eec", "committedDate": "2020-07-27T19:37:25Z", "message": "Added acquireDeviceCodeFlowToken"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "690f693de473b88b0c7cd22b49635fba8abfe4fd", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/690f693de473b88b0c7cd22b49635fba8abfe4fd", "committedDate": "2020-07-27T19:57:58Z", "message": "Worked on deviceCodeFlowAuthRequest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "316f2b96bb64807c4f892ddad13e2600b84a402f", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/316f2b96bb64807c4f892ddad13e2600b84a402f", "committedDate": "2020-07-28T14:05:04Z", "message": "Before merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97d3e15cd050fce2462a9b43b3a36b296de32fec", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/97d3e15cd050fce2462a9b43b3a36b296de32fec", "committedDate": "2020-07-28T14:06:31Z", "message": "Fixed conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b29f9d2179e7cb62e350b057c7a238546d97c71", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/0b29f9d2179e7cb62e350b057c7a238546d97c71", "committedDate": "2020-07-28T14:07:16Z", "message": "Merge branch 't-fadura/dcf-main' of https://github.com/AzureAD/microsoft-authentication-library-for-android into t-fadura/dcf-main"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "440a8633bfc63572dfe756ad94abb6e40c1456d0", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/440a8633bfc63572dfe756ad94abb6e40c1456d0", "committedDate": "2020-07-28T15:01:30Z", "message": "Merge branch 'dev' of https://github.com/AzureAD/microsoft-authentication-library-for-android into t-fadura/dcf-main"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adaa450623bf701b7f929ea67e076795e3dd8f08", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/adaa450623bf701b7f929ea67e076795e3dd8f08", "committedDate": "2020-07-28T15:03:47Z", "message": "Added Exception handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d30c589039258e4a4212cc833a37762835e3dbb", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/9d30c589039258e4a4212cc833a37762835e3dbb", "committedDate": "2020-07-28T15:14:45Z", "message": "removed typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24a92811f0ad5124edbf3ecd1f18d2b1b8f9d3b5", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/24a92811f0ad5124edbf3ecd1f18d2b1b8f9d3b5", "committedDate": "2020-07-29T15:52:16Z", "message": "End-to-end working"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc5440c3b99b8d2f8ef041617e51269c48b71bd2", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/dc5440c3b99b8d2f8ef041617e51269c48b71bd2", "committedDate": "2020-07-29T16:26:45Z", "message": "Small tweaks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3ODg3OTIy", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#pullrequestreview-457887922", "createdAt": "2020-07-29T20:52:01Z", "commit": {"oid": "dc5440c3b99b8d2f8ef041617e51269c48b71bd2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1MjowMVrOG5JtVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1MjowMVrOG5JtVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4MTA3Nw==", "bodyText": "authorization_pending is declared too many times. It must go in a constant in the appropriate constants file.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r462581077", "createdAt": "2020-07-29T20:52:01Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -463,14 +468,224 @@ public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) t\n     }\n \n     @Override\n-    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws MsalException, ClientException, IOException {\n+        // Logging start of method\n+        final String methodName = \":deviceCodeFlowAuthRequest\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Authorizing user code...\"\n+        );\n+\n+        // Default scopes here\n+        final Set<String> mergedScopes = addDefaultScopes(parameters);\n+\n+        final DeviceCodeFlowCommandParameters parametersWithScopes = parameters\n+                .toBuilder()\n+                .scopes(mergedScopes)\n+                .build();\n+\n+        logParameters(TAG, parametersWithScopes);\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putProperties(parametersWithScopes)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parametersWithScopes.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parametersWithScopes\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 1: Get user code\n+        // Populate global authorization request\n+        mAuthorizationRequest = getAuthorizationRequest(oAuth2Strategy, parametersWithScopes);\n+\n+        // Call method defined in oAuth2Strategy to request authorization\n+        final AuthorizationResult authorizationResult = oAuth2Strategy.getDeviceCode((MicrosoftStsAuthorizationRequest) mAuthorizationRequest, null);\n+\n+        validateServiceResult(authorizationResult);\n+\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow authorization step finished...\"\n+        );\n+        logResult(TAG, authorizationResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        return authorizationResult;\n     }\n \n     @Override\n-    public AcquireTokenResult acquireDeviceCodeFlowToken(final AuthorizationResult authorizationResult, DeviceCodeFlowCommandParameters commandParameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(\n+            final AuthorizationResult authorizationResult,\n+            final DeviceCodeFlowCommandParameters parameters)\n+            throws MsalException, ClientException, IOException, InterruptedException {\n+\n+        // Logging start of method\n+        final String methodName = \":acquireDeviceCodeFlowToken\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Polling for token...\"\n+        );\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_POLLING\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_POLLING)\n+        );\n+\n+        // Create empty AcquireTokenResult object\n+        final AcquireTokenResult acquireTokenResult = new AcquireTokenResult();\n+\n+        // Assign authorization result\n+        acquireTokenResult.setAuthorizationResult(authorizationResult);\n+\n+        // Fetch the Authorization Response\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parameters.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parameters\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 2: Poll for token\n+        TokenResult tokenResult = null;\n+\n+        // Create token request outside of loop so it isn't re-created after every loop\n+        final MicrosoftStsTokenRequest tokenRequest = (MicrosoftStsTokenRequest) oAuth2Strategy.createTokenRequest(\n+                mAuthorizationRequest,\n+                authorizationResponse,\n+                parameters.getAuthenticationScheme()\n+        );\n+\n+        // Fetch wait interval\n+        final int interval = Integer.parseInt(authorizationResponse.getInterval()) * 1000;\n+\n+        String errorCode = \"authorization_pending\";\n+\n+        // Loop to send multiple requests checking for token\n+        while (errorCode.equals(\"authorization_pending\")) {\n+            errorCode = \"\"; // Reset error code\n+\n+            // Execute Token Request\n+            tokenResult = oAuth2Strategy.requestToken(tokenRequest);\n+\n+            if (tokenResult.getErrorResponse() != null) {\n+                errorCode = tokenResult.getErrorResponse().getError();\n+            }\n+\n+            if (errorCode.equals(\"authorization_pending\")) {\n+                // interval is passed through params\n+                Thread.sleep(interval);\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc5440c3b99b8d2f8ef041617e51269c48b71bd2"}, "originalPosition": 156}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3ODg4MzI5", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#pullrequestreview-457888329", "createdAt": "2020-07-29T20:52:40Z", "commit": {"oid": "dc5440c3b99b8d2f8ef041617e51269c48b71bd2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1Mjo0MFrOG5JupA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1Mjo0MFrOG5JupA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4MTQxMg==", "bodyText": "Consider refactoring into a boolean method such as:\n   while (authorizationPending())", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r462581412", "createdAt": "2020-07-29T20:52:40Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -463,14 +468,224 @@ public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) t\n     }\n \n     @Override\n-    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws MsalException, ClientException, IOException {\n+        // Logging start of method\n+        final String methodName = \":deviceCodeFlowAuthRequest\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Authorizing user code...\"\n+        );\n+\n+        // Default scopes here\n+        final Set<String> mergedScopes = addDefaultScopes(parameters);\n+\n+        final DeviceCodeFlowCommandParameters parametersWithScopes = parameters\n+                .toBuilder()\n+                .scopes(mergedScopes)\n+                .build();\n+\n+        logParameters(TAG, parametersWithScopes);\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putProperties(parametersWithScopes)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parametersWithScopes.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parametersWithScopes\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 1: Get user code\n+        // Populate global authorization request\n+        mAuthorizationRequest = getAuthorizationRequest(oAuth2Strategy, parametersWithScopes);\n+\n+        // Call method defined in oAuth2Strategy to request authorization\n+        final AuthorizationResult authorizationResult = oAuth2Strategy.getDeviceCode((MicrosoftStsAuthorizationRequest) mAuthorizationRequest, null);\n+\n+        validateServiceResult(authorizationResult);\n+\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow authorization step finished...\"\n+        );\n+        logResult(TAG, authorizationResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        return authorizationResult;\n     }\n \n     @Override\n-    public AcquireTokenResult acquireDeviceCodeFlowToken(final AuthorizationResult authorizationResult, DeviceCodeFlowCommandParameters commandParameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(\n+            final AuthorizationResult authorizationResult,\n+            final DeviceCodeFlowCommandParameters parameters)\n+            throws MsalException, ClientException, IOException, InterruptedException {\n+\n+        // Logging start of method\n+        final String methodName = \":acquireDeviceCodeFlowToken\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Polling for token...\"\n+        );\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_POLLING\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_POLLING)\n+        );\n+\n+        // Create empty AcquireTokenResult object\n+        final AcquireTokenResult acquireTokenResult = new AcquireTokenResult();\n+\n+        // Assign authorization result\n+        acquireTokenResult.setAuthorizationResult(authorizationResult);\n+\n+        // Fetch the Authorization Response\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parameters.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parameters\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 2: Poll for token\n+        TokenResult tokenResult = null;\n+\n+        // Create token request outside of loop so it isn't re-created after every loop\n+        final MicrosoftStsTokenRequest tokenRequest = (MicrosoftStsTokenRequest) oAuth2Strategy.createTokenRequest(\n+                mAuthorizationRequest,\n+                authorizationResponse,\n+                parameters.getAuthenticationScheme()\n+        );\n+\n+        // Fetch wait interval\n+        final int interval = Integer.parseInt(authorizationResponse.getInterval()) * 1000;\n+\n+        String errorCode = \"authorization_pending\";\n+\n+        // Loop to send multiple requests checking for token\n+        while (errorCode.equals(\"authorization_pending\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc5440c3b99b8d2f8ef041617e51269c48b71bd2"}, "originalPosition": 142}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3ODg5NTMw", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#pullrequestreview-457889530", "createdAt": "2020-07-29T20:54:24Z", "commit": {"oid": "dc5440c3b99b8d2f8ef041617e51269c48b71bd2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1NDoyNFrOG5Jygw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1NDoyNFrOG5Jygw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4MjQwMw==", "bodyText": "Do we actually want to throw all these exceptions? Or should this method handle some of these directly?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r462582403", "createdAt": "2020-07-29T20:54:24Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -463,14 +468,224 @@ public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) t\n     }\n \n     @Override\n-    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws MsalException, ClientException, IOException {\n+        // Logging start of method\n+        final String methodName = \":deviceCodeFlowAuthRequest\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Authorizing user code...\"\n+        );\n+\n+        // Default scopes here\n+        final Set<String> mergedScopes = addDefaultScopes(parameters);\n+\n+        final DeviceCodeFlowCommandParameters parametersWithScopes = parameters\n+                .toBuilder()\n+                .scopes(mergedScopes)\n+                .build();\n+\n+        logParameters(TAG, parametersWithScopes);\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putProperties(parametersWithScopes)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parametersWithScopes.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parametersWithScopes\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 1: Get user code\n+        // Populate global authorization request\n+        mAuthorizationRequest = getAuthorizationRequest(oAuth2Strategy, parametersWithScopes);\n+\n+        // Call method defined in oAuth2Strategy to request authorization\n+        final AuthorizationResult authorizationResult = oAuth2Strategy.getDeviceCode((MicrosoftStsAuthorizationRequest) mAuthorizationRequest, null);\n+\n+        validateServiceResult(authorizationResult);\n+\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow authorization step finished...\"\n+        );\n+        logResult(TAG, authorizationResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        return authorizationResult;\n     }\n \n     @Override\n-    public AcquireTokenResult acquireDeviceCodeFlowToken(final AuthorizationResult authorizationResult, DeviceCodeFlowCommandParameters commandParameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(\n+            final AuthorizationResult authorizationResult,\n+            final DeviceCodeFlowCommandParameters parameters)\n+            throws MsalException, ClientException, IOException, InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc5440c3b99b8d2f8ef041617e51269c48b71bd2"}, "originalPosition": 94}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3ODkxMDI2", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#pullrequestreview-457891026", "createdAt": "2020-07-29T20:56:40Z", "commit": {"oid": "dc5440c3b99b8d2f8ef041617e51269c48b71bd2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1Njo0MFrOG5J3Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1Njo0MFrOG5J3Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4MzU4Ng==", "bodyText": "Can we get here and get method invoked on null object?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r462583586", "createdAt": "2020-07-29T20:56:40Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -463,14 +468,224 @@ public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) t\n     }\n \n     @Override\n-    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws MsalException, ClientException, IOException {\n+        // Logging start of method\n+        final String methodName = \":deviceCodeFlowAuthRequest\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Authorizing user code...\"\n+        );\n+\n+        // Default scopes here\n+        final Set<String> mergedScopes = addDefaultScopes(parameters);\n+\n+        final DeviceCodeFlowCommandParameters parametersWithScopes = parameters\n+                .toBuilder()\n+                .scopes(mergedScopes)\n+                .build();\n+\n+        logParameters(TAG, parametersWithScopes);\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putProperties(parametersWithScopes)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parametersWithScopes.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parametersWithScopes\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 1: Get user code\n+        // Populate global authorization request\n+        mAuthorizationRequest = getAuthorizationRequest(oAuth2Strategy, parametersWithScopes);\n+\n+        // Call method defined in oAuth2Strategy to request authorization\n+        final AuthorizationResult authorizationResult = oAuth2Strategy.getDeviceCode((MicrosoftStsAuthorizationRequest) mAuthorizationRequest, null);\n+\n+        validateServiceResult(authorizationResult);\n+\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow authorization step finished...\"\n+        );\n+        logResult(TAG, authorizationResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        return authorizationResult;\n     }\n \n     @Override\n-    public AcquireTokenResult acquireDeviceCodeFlowToken(final AuthorizationResult authorizationResult, DeviceCodeFlowCommandParameters commandParameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(\n+            final AuthorizationResult authorizationResult,\n+            final DeviceCodeFlowCommandParameters parameters)\n+            throws MsalException, ClientException, IOException, InterruptedException {\n+\n+        // Logging start of method\n+        final String methodName = \":acquireDeviceCodeFlowToken\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Polling for token...\"\n+        );\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_POLLING\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_POLLING)\n+        );\n+\n+        // Create empty AcquireTokenResult object\n+        final AcquireTokenResult acquireTokenResult = new AcquireTokenResult();\n+\n+        // Assign authorization result\n+        acquireTokenResult.setAuthorizationResult(authorizationResult);\n+\n+        // Fetch the Authorization Response\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parameters.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parameters\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 2: Poll for token\n+        TokenResult tokenResult = null;\n+\n+        // Create token request outside of loop so it isn't re-created after every loop\n+        final MicrosoftStsTokenRequest tokenRequest = (MicrosoftStsTokenRequest) oAuth2Strategy.createTokenRequest(\n+                mAuthorizationRequest,\n+                authorizationResponse,\n+                parameters.getAuthenticationScheme()\n+        );\n+\n+        // Fetch wait interval\n+        final int interval = Integer.parseInt(authorizationResponse.getInterval()) * 1000;\n+\n+        String errorCode = \"authorization_pending\";\n+\n+        // Loop to send multiple requests checking for token\n+        while (errorCode.equals(\"authorization_pending\")) {\n+            errorCode = \"\"; // Reset error code\n+\n+            // Execute Token Request\n+            tokenResult = oAuth2Strategy.requestToken(tokenRequest);\n+\n+            if (tokenResult.getErrorResponse() != null) {\n+                errorCode = tokenResult.getErrorResponse().getError();\n+            }\n+\n+            if (errorCode.equals(\"authorization_pending\")) {\n+                // interval is passed through params\n+                Thread.sleep(interval);\n+            }\n+        }\n+\n+        // Assign token result\n+        acquireTokenResult.setTokenResult(tokenResult);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc5440c3b99b8d2f8ef041617e51269c48b71bd2"}, "originalPosition": 159}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3ODkxMjc1", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#pullrequestreview-457891275", "createdAt": "2020-07-29T20:57:02Z", "commit": {"oid": "dc5440c3b99b8d2f8ef041617e51269c48b71bd2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1NzowM1rOG5J36A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1NzowM1rOG5J36A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4Mzc4NA==", "bodyText": "@AdamBJohnsonx recently wrote a sleepSafely method, consider using that here", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r462583784", "createdAt": "2020-07-29T20:57:03Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -463,14 +468,224 @@ public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) t\n     }\n \n     @Override\n-    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws MsalException, ClientException, IOException {\n+        // Logging start of method\n+        final String methodName = \":deviceCodeFlowAuthRequest\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Authorizing user code...\"\n+        );\n+\n+        // Default scopes here\n+        final Set<String> mergedScopes = addDefaultScopes(parameters);\n+\n+        final DeviceCodeFlowCommandParameters parametersWithScopes = parameters\n+                .toBuilder()\n+                .scopes(mergedScopes)\n+                .build();\n+\n+        logParameters(TAG, parametersWithScopes);\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putProperties(parametersWithScopes)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parametersWithScopes.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parametersWithScopes\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 1: Get user code\n+        // Populate global authorization request\n+        mAuthorizationRequest = getAuthorizationRequest(oAuth2Strategy, parametersWithScopes);\n+\n+        // Call method defined in oAuth2Strategy to request authorization\n+        final AuthorizationResult authorizationResult = oAuth2Strategy.getDeviceCode((MicrosoftStsAuthorizationRequest) mAuthorizationRequest, null);\n+\n+        validateServiceResult(authorizationResult);\n+\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow authorization step finished...\"\n+        );\n+        logResult(TAG, authorizationResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        return authorizationResult;\n     }\n \n     @Override\n-    public AcquireTokenResult acquireDeviceCodeFlowToken(final AuthorizationResult authorizationResult, DeviceCodeFlowCommandParameters commandParameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(\n+            final AuthorizationResult authorizationResult,\n+            final DeviceCodeFlowCommandParameters parameters)\n+            throws MsalException, ClientException, IOException, InterruptedException {\n+\n+        // Logging start of method\n+        final String methodName = \":acquireDeviceCodeFlowToken\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Polling for token...\"\n+        );\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_POLLING\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_POLLING)\n+        );\n+\n+        // Create empty AcquireTokenResult object\n+        final AcquireTokenResult acquireTokenResult = new AcquireTokenResult();\n+\n+        // Assign authorization result\n+        acquireTokenResult.setAuthorizationResult(authorizationResult);\n+\n+        // Fetch the Authorization Response\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parameters.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parameters\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 2: Poll for token\n+        TokenResult tokenResult = null;\n+\n+        // Create token request outside of loop so it isn't re-created after every loop\n+        final MicrosoftStsTokenRequest tokenRequest = (MicrosoftStsTokenRequest) oAuth2Strategy.createTokenRequest(\n+                mAuthorizationRequest,\n+                authorizationResponse,\n+                parameters.getAuthenticationScheme()\n+        );\n+\n+        // Fetch wait interval\n+        final int interval = Integer.parseInt(authorizationResponse.getInterval()) * 1000;\n+\n+        String errorCode = \"authorization_pending\";\n+\n+        // Loop to send multiple requests checking for token\n+        while (errorCode.equals(\"authorization_pending\")) {\n+            errorCode = \"\"; // Reset error code\n+\n+            // Execute Token Request\n+            tokenResult = oAuth2Strategy.requestToken(tokenRequest);\n+\n+            if (tokenResult.getErrorResponse() != null) {\n+                errorCode = tokenResult.getErrorResponse().getError();\n+            }\n+\n+            if (errorCode.equals(\"authorization_pending\")) {\n+                // interval is passed through params\n+                Thread.sleep(interval);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc5440c3b99b8d2f8ef041617e51269c48b71bd2"}, "originalPosition": 154}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3ODkxNzU2", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#pullrequestreview-457891756", "createdAt": "2020-07-29T20:57:45Z", "commit": {"oid": "dc5440c3b99b8d2f8ef041617e51269c48b71bd2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1Nzo0NlrOG5J5Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1Nzo0NlrOG5J5Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4NDE2Nw==", "bodyText": "nit: final", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r462584167", "createdAt": "2020-07-29T20:57:46Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -463,14 +468,224 @@ public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) t\n     }\n \n     @Override\n-    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws MsalException, ClientException, IOException {\n+        // Logging start of method\n+        final String methodName = \":deviceCodeFlowAuthRequest\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Authorizing user code...\"\n+        );\n+\n+        // Default scopes here\n+        final Set<String> mergedScopes = addDefaultScopes(parameters);\n+\n+        final DeviceCodeFlowCommandParameters parametersWithScopes = parameters\n+                .toBuilder()\n+                .scopes(mergedScopes)\n+                .build();\n+\n+        logParameters(TAG, parametersWithScopes);\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putProperties(parametersWithScopes)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parametersWithScopes.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parametersWithScopes\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 1: Get user code\n+        // Populate global authorization request\n+        mAuthorizationRequest = getAuthorizationRequest(oAuth2Strategy, parametersWithScopes);\n+\n+        // Call method defined in oAuth2Strategy to request authorization\n+        final AuthorizationResult authorizationResult = oAuth2Strategy.getDeviceCode((MicrosoftStsAuthorizationRequest) mAuthorizationRequest, null);\n+\n+        validateServiceResult(authorizationResult);\n+\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow authorization step finished...\"\n+        );\n+        logResult(TAG, authorizationResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        return authorizationResult;\n     }\n \n     @Override\n-    public AcquireTokenResult acquireDeviceCodeFlowToken(final AuthorizationResult authorizationResult, DeviceCodeFlowCommandParameters commandParameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(\n+            final AuthorizationResult authorizationResult,\n+            final DeviceCodeFlowCommandParameters parameters)\n+            throws MsalException, ClientException, IOException, InterruptedException {\n+\n+        // Logging start of method\n+        final String methodName = \":acquireDeviceCodeFlowToken\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Polling for token...\"\n+        );\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_POLLING\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_POLLING)\n+        );\n+\n+        // Create empty AcquireTokenResult object\n+        final AcquireTokenResult acquireTokenResult = new AcquireTokenResult();\n+\n+        // Assign authorization result\n+        acquireTokenResult.setAuthorizationResult(authorizationResult);\n+\n+        // Fetch the Authorization Response\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parameters.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parameters\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 2: Poll for token\n+        TokenResult tokenResult = null;\n+\n+        // Create token request outside of loop so it isn't re-created after every loop\n+        final MicrosoftStsTokenRequest tokenRequest = (MicrosoftStsTokenRequest) oAuth2Strategy.createTokenRequest(\n+                mAuthorizationRequest,\n+                authorizationResponse,\n+                parameters.getAuthenticationScheme()\n+        );\n+\n+        // Fetch wait interval\n+        final int interval = Integer.parseInt(authorizationResponse.getInterval()) * 1000;\n+\n+        String errorCode = \"authorization_pending\";\n+\n+        // Loop to send multiple requests checking for token\n+        while (errorCode.equals(\"authorization_pending\")) {\n+            errorCode = \"\"; // Reset error code\n+\n+            // Execute Token Request\n+            tokenResult = oAuth2Strategy.requestToken(tokenRequest);\n+\n+            if (tokenResult.getErrorResponse() != null) {\n+                errorCode = tokenResult.getErrorResponse().getError();\n+            }\n+\n+            if (errorCode.equals(\"authorization_pending\")) {\n+                // interval is passed through params\n+                Thread.sleep(interval);\n+            }\n+        }\n+\n+        // Assign token result\n+        acquireTokenResult.setTokenResult(tokenResult);\n+\n+        // Validate request success, may throw MsalServiceException\n+        validateServiceResult(tokenResult);\n+\n+        // If the token is valid, save it into token cache\n+        final List<ICacheRecord> records = saveTokens(\n+                oAuth2Strategy,\n+                mAuthorizationRequest,\n+                acquireTokenResult.getTokenResult().getTokenResponse(),\n+                parameters.getOAuth2TokenCache()\n+        );\n+\n+        // Once the token is stored, fetch and assign the authentication result\n+        final ICacheRecord newestRecord = records.get(0);\n+        acquireTokenResult.setLocalAuthenticationResult(\n+                new LocalAuthenticationResult(\n+                        finalizeCacheRecordForResult(\n+                                newestRecord,\n+                                parameters.getAuthenticationScheme()\n+                        ),\n+                        records,\n+                        SdkType.MSAL,\n+                        false\n+                )\n+        );\n+\n+        logResult(TAG, tokenResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_POLLING\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putResult(acquireTokenResult)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_POLLING)\n+        );\n+\n+        return acquireTokenResult;\n+    }\n+\n+    /**\n+     * Helper method to check if a result object is valid (was a success). If not, an exception will be generated and thrown.\n+     * This method is called in both parts of the DCF protocol.\n+     * @param result result object to be checked\n+     * @throws MsalServiceException MsalServiceException object reflecting error code returned by the result\n+     */\n+    private void validateServiceResult(@NonNull IResult result) throws MsalServiceException {\n+        // If result was unsuccessful, create an exception\n+        if (!result.getSuccess()) {\n+            // Create ServiceException object\n+            ServiceException serviceException = createServiceExceptionForDeviceCodeFlow(result.getErrorResponse());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc5440c3b99b8d2f8ef041617e51269c48b71bd2"}, "originalPosition": 208}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3ODkyMzM3", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#pullrequestreview-457892337", "createdAt": "2020-07-29T20:58:35Z", "commit": {"oid": "dc5440c3b99b8d2f8ef041617e51269c48b71bd2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1ODozNVrOG5J7LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1ODozNVrOG5J7LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4NDYyMA==", "bodyText": "Why are we creating a ServiceException when we want to throw MsalServiceException? Why not create the latter directly?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r462584620", "createdAt": "2020-07-29T20:58:35Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -463,14 +468,224 @@ public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) t\n     }\n \n     @Override\n-    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws MsalException, ClientException, IOException {\n+        // Logging start of method\n+        final String methodName = \":deviceCodeFlowAuthRequest\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Authorizing user code...\"\n+        );\n+\n+        // Default scopes here\n+        final Set<String> mergedScopes = addDefaultScopes(parameters);\n+\n+        final DeviceCodeFlowCommandParameters parametersWithScopes = parameters\n+                .toBuilder()\n+                .scopes(mergedScopes)\n+                .build();\n+\n+        logParameters(TAG, parametersWithScopes);\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putProperties(parametersWithScopes)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parametersWithScopes.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parametersWithScopes\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 1: Get user code\n+        // Populate global authorization request\n+        mAuthorizationRequest = getAuthorizationRequest(oAuth2Strategy, parametersWithScopes);\n+\n+        // Call method defined in oAuth2Strategy to request authorization\n+        final AuthorizationResult authorizationResult = oAuth2Strategy.getDeviceCode((MicrosoftStsAuthorizationRequest) mAuthorizationRequest, null);\n+\n+        validateServiceResult(authorizationResult);\n+\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow authorization step finished...\"\n+        );\n+        logResult(TAG, authorizationResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        return authorizationResult;\n     }\n \n     @Override\n-    public AcquireTokenResult acquireDeviceCodeFlowToken(final AuthorizationResult authorizationResult, DeviceCodeFlowCommandParameters commandParameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(\n+            final AuthorizationResult authorizationResult,\n+            final DeviceCodeFlowCommandParameters parameters)\n+            throws MsalException, ClientException, IOException, InterruptedException {\n+\n+        // Logging start of method\n+        final String methodName = \":acquireDeviceCodeFlowToken\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Polling for token...\"\n+        );\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_POLLING\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_POLLING)\n+        );\n+\n+        // Create empty AcquireTokenResult object\n+        final AcquireTokenResult acquireTokenResult = new AcquireTokenResult();\n+\n+        // Assign authorization result\n+        acquireTokenResult.setAuthorizationResult(authorizationResult);\n+\n+        // Fetch the Authorization Response\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parameters.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parameters\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 2: Poll for token\n+        TokenResult tokenResult = null;\n+\n+        // Create token request outside of loop so it isn't re-created after every loop\n+        final MicrosoftStsTokenRequest tokenRequest = (MicrosoftStsTokenRequest) oAuth2Strategy.createTokenRequest(\n+                mAuthorizationRequest,\n+                authorizationResponse,\n+                parameters.getAuthenticationScheme()\n+        );\n+\n+        // Fetch wait interval\n+        final int interval = Integer.parseInt(authorizationResponse.getInterval()) * 1000;\n+\n+        String errorCode = \"authorization_pending\";\n+\n+        // Loop to send multiple requests checking for token\n+        while (errorCode.equals(\"authorization_pending\")) {\n+            errorCode = \"\"; // Reset error code\n+\n+            // Execute Token Request\n+            tokenResult = oAuth2Strategy.requestToken(tokenRequest);\n+\n+            if (tokenResult.getErrorResponse() != null) {\n+                errorCode = tokenResult.getErrorResponse().getError();\n+            }\n+\n+            if (errorCode.equals(\"authorization_pending\")) {\n+                // interval is passed through params\n+                Thread.sleep(interval);\n+            }\n+        }\n+\n+        // Assign token result\n+        acquireTokenResult.setTokenResult(tokenResult);\n+\n+        // Validate request success, may throw MsalServiceException\n+        validateServiceResult(tokenResult);\n+\n+        // If the token is valid, save it into token cache\n+        final List<ICacheRecord> records = saveTokens(\n+                oAuth2Strategy,\n+                mAuthorizationRequest,\n+                acquireTokenResult.getTokenResult().getTokenResponse(),\n+                parameters.getOAuth2TokenCache()\n+        );\n+\n+        // Once the token is stored, fetch and assign the authentication result\n+        final ICacheRecord newestRecord = records.get(0);\n+        acquireTokenResult.setLocalAuthenticationResult(\n+                new LocalAuthenticationResult(\n+                        finalizeCacheRecordForResult(\n+                                newestRecord,\n+                                parameters.getAuthenticationScheme()\n+                        ),\n+                        records,\n+                        SdkType.MSAL,\n+                        false\n+                )\n+        );\n+\n+        logResult(TAG, tokenResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_POLLING\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putResult(acquireTokenResult)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_POLLING)\n+        );\n+\n+        return acquireTokenResult;\n+    }\n+\n+    /**\n+     * Helper method to check if a result object is valid (was a success). If not, an exception will be generated and thrown.\n+     * This method is called in both parts of the DCF protocol.\n+     * @param result result object to be checked\n+     * @throws MsalServiceException MsalServiceException object reflecting error code returned by the result\n+     */\n+    private void validateServiceResult(@NonNull IResult result) throws MsalServiceException {\n+        // If result was unsuccessful, create an exception\n+        if (!result.getSuccess()) {\n+            // Create ServiceException object\n+            ServiceException serviceException = createServiceExceptionForDeviceCodeFlow(result.getErrorResponse());\n+\n+            // Convert ServiceException to MsalServiceException, then throw\n+            throw new MsalServiceException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc5440c3b99b8d2f8ef041617e51269c48b71bd2"}, "originalPosition": 211}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3ODkyNTk3", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#pullrequestreview-457892597", "createdAt": "2020-07-29T20:58:53Z", "commit": {"oid": "dc5440c3b99b8d2f8ef041617e51269c48b71bd2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1ODo1NFrOG5J8Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1ODo1NFrOG5J8Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4NDg2Mg==", "bodyText": "nit: final", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r462584862", "createdAt": "2020-07-29T20:58:54Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -463,14 +468,224 @@ public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) t\n     }\n \n     @Override\n-    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws MsalException, ClientException, IOException {\n+        // Logging start of method\n+        final String methodName = \":deviceCodeFlowAuthRequest\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Authorizing user code...\"\n+        );\n+\n+        // Default scopes here\n+        final Set<String> mergedScopes = addDefaultScopes(parameters);\n+\n+        final DeviceCodeFlowCommandParameters parametersWithScopes = parameters\n+                .toBuilder()\n+                .scopes(mergedScopes)\n+                .build();\n+\n+        logParameters(TAG, parametersWithScopes);\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putProperties(parametersWithScopes)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parametersWithScopes.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parametersWithScopes\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 1: Get user code\n+        // Populate global authorization request\n+        mAuthorizationRequest = getAuthorizationRequest(oAuth2Strategy, parametersWithScopes);\n+\n+        // Call method defined in oAuth2Strategy to request authorization\n+        final AuthorizationResult authorizationResult = oAuth2Strategy.getDeviceCode((MicrosoftStsAuthorizationRequest) mAuthorizationRequest, null);\n+\n+        validateServiceResult(authorizationResult);\n+\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow authorization step finished...\"\n+        );\n+        logResult(TAG, authorizationResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        return authorizationResult;\n     }\n \n     @Override\n-    public AcquireTokenResult acquireDeviceCodeFlowToken(final AuthorizationResult authorizationResult, DeviceCodeFlowCommandParameters commandParameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(\n+            final AuthorizationResult authorizationResult,\n+            final DeviceCodeFlowCommandParameters parameters)\n+            throws MsalException, ClientException, IOException, InterruptedException {\n+\n+        // Logging start of method\n+        final String methodName = \":acquireDeviceCodeFlowToken\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Polling for token...\"\n+        );\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_POLLING\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_POLLING)\n+        );\n+\n+        // Create empty AcquireTokenResult object\n+        final AcquireTokenResult acquireTokenResult = new AcquireTokenResult();\n+\n+        // Assign authorization result\n+        acquireTokenResult.setAuthorizationResult(authorizationResult);\n+\n+        // Fetch the Authorization Response\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parameters.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parameters\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 2: Poll for token\n+        TokenResult tokenResult = null;\n+\n+        // Create token request outside of loop so it isn't re-created after every loop\n+        final MicrosoftStsTokenRequest tokenRequest = (MicrosoftStsTokenRequest) oAuth2Strategy.createTokenRequest(\n+                mAuthorizationRequest,\n+                authorizationResponse,\n+                parameters.getAuthenticationScheme()\n+        );\n+\n+        // Fetch wait interval\n+        final int interval = Integer.parseInt(authorizationResponse.getInterval()) * 1000;\n+\n+        String errorCode = \"authorization_pending\";\n+\n+        // Loop to send multiple requests checking for token\n+        while (errorCode.equals(\"authorization_pending\")) {\n+            errorCode = \"\"; // Reset error code\n+\n+            // Execute Token Request\n+            tokenResult = oAuth2Strategy.requestToken(tokenRequest);\n+\n+            if (tokenResult.getErrorResponse() != null) {\n+                errorCode = tokenResult.getErrorResponse().getError();\n+            }\n+\n+            if (errorCode.equals(\"authorization_pending\")) {\n+                // interval is passed through params\n+                Thread.sleep(interval);\n+            }\n+        }\n+\n+        // Assign token result\n+        acquireTokenResult.setTokenResult(tokenResult);\n+\n+        // Validate request success, may throw MsalServiceException\n+        validateServiceResult(tokenResult);\n+\n+        // If the token is valid, save it into token cache\n+        final List<ICacheRecord> records = saveTokens(\n+                oAuth2Strategy,\n+                mAuthorizationRequest,\n+                acquireTokenResult.getTokenResult().getTokenResponse(),\n+                parameters.getOAuth2TokenCache()\n+        );\n+\n+        // Once the token is stored, fetch and assign the authentication result\n+        final ICacheRecord newestRecord = records.get(0);\n+        acquireTokenResult.setLocalAuthenticationResult(\n+                new LocalAuthenticationResult(\n+                        finalizeCacheRecordForResult(\n+                                newestRecord,\n+                                parameters.getAuthenticationScheme()\n+                        ),\n+                        records,\n+                        SdkType.MSAL,\n+                        false\n+                )\n+        );\n+\n+        logResult(TAG, tokenResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_POLLING\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putResult(acquireTokenResult)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_POLLING)\n+        );\n+\n+        return acquireTokenResult;\n+    }\n+\n+    /**\n+     * Helper method to check if a result object is valid (was a success). If not, an exception will be generated and thrown.\n+     * This method is called in both parts of the DCF protocol.\n+     * @param result result object to be checked\n+     * @throws MsalServiceException MsalServiceException object reflecting error code returned by the result\n+     */\n+    private void validateServiceResult(@NonNull IResult result) throws MsalServiceException {\n+        // If result was unsuccessful, create an exception\n+        if (!result.getSuccess()) {\n+            // Create ServiceException object\n+            ServiceException serviceException = createServiceExceptionForDeviceCodeFlow(result.getErrorResponse());\n+\n+            // Convert ServiceException to MsalServiceException, then throw\n+            throw new MsalServiceException(\n+                    serviceException.getErrorCode(),\n+                    serviceException.getMessage(),\n+                    serviceException.getHttpStatusCode(),\n+                    serviceException\n+            );\n+        }\n+    }\n+\n+    /**\n+     * Given an error response object, create a serviceException object using the predefined error codes.\n+     * @param response error response object to be checked\n+     * @return an exception object\n+     */\n+    private ServiceException createServiceExceptionForDeviceCodeFlow(IErrorResponse response) {\n+        // Based on error code, fetch the error message\n+        String errorCode = response.getError();\n+        String errorMessage = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc5440c3b99b8d2f8ef041617e51269c48b71bd2"}, "originalPosition": 228}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3ODkyNzE3", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#pullrequestreview-457892717", "createdAt": "2020-07-29T20:59:03Z", "commit": {"oid": "dc5440c3b99b8d2f8ef041617e51269c48b71bd2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1OTowM1rOG5J8fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1OTowM1rOG5J8fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4NDk1OQ==", "bodyText": "nit: nonnull and final", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r462584959", "createdAt": "2020-07-29T20:59:03Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -463,14 +468,224 @@ public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) t\n     }\n \n     @Override\n-    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws MsalException, ClientException, IOException {\n+        // Logging start of method\n+        final String methodName = \":deviceCodeFlowAuthRequest\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Authorizing user code...\"\n+        );\n+\n+        // Default scopes here\n+        final Set<String> mergedScopes = addDefaultScopes(parameters);\n+\n+        final DeviceCodeFlowCommandParameters parametersWithScopes = parameters\n+                .toBuilder()\n+                .scopes(mergedScopes)\n+                .build();\n+\n+        logParameters(TAG, parametersWithScopes);\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putProperties(parametersWithScopes)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parametersWithScopes.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parametersWithScopes\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 1: Get user code\n+        // Populate global authorization request\n+        mAuthorizationRequest = getAuthorizationRequest(oAuth2Strategy, parametersWithScopes);\n+\n+        // Call method defined in oAuth2Strategy to request authorization\n+        final AuthorizationResult authorizationResult = oAuth2Strategy.getDeviceCode((MicrosoftStsAuthorizationRequest) mAuthorizationRequest, null);\n+\n+        validateServiceResult(authorizationResult);\n+\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow authorization step finished...\"\n+        );\n+        logResult(TAG, authorizationResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        return authorizationResult;\n     }\n \n     @Override\n-    public AcquireTokenResult acquireDeviceCodeFlowToken(final AuthorizationResult authorizationResult, DeviceCodeFlowCommandParameters commandParameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(\n+            final AuthorizationResult authorizationResult,\n+            final DeviceCodeFlowCommandParameters parameters)\n+            throws MsalException, ClientException, IOException, InterruptedException {\n+\n+        // Logging start of method\n+        final String methodName = \":acquireDeviceCodeFlowToken\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Polling for token...\"\n+        );\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_POLLING\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_POLLING)\n+        );\n+\n+        // Create empty AcquireTokenResult object\n+        final AcquireTokenResult acquireTokenResult = new AcquireTokenResult();\n+\n+        // Assign authorization result\n+        acquireTokenResult.setAuthorizationResult(authorizationResult);\n+\n+        // Fetch the Authorization Response\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parameters.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parameters\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 2: Poll for token\n+        TokenResult tokenResult = null;\n+\n+        // Create token request outside of loop so it isn't re-created after every loop\n+        final MicrosoftStsTokenRequest tokenRequest = (MicrosoftStsTokenRequest) oAuth2Strategy.createTokenRequest(\n+                mAuthorizationRequest,\n+                authorizationResponse,\n+                parameters.getAuthenticationScheme()\n+        );\n+\n+        // Fetch wait interval\n+        final int interval = Integer.parseInt(authorizationResponse.getInterval()) * 1000;\n+\n+        String errorCode = \"authorization_pending\";\n+\n+        // Loop to send multiple requests checking for token\n+        while (errorCode.equals(\"authorization_pending\")) {\n+            errorCode = \"\"; // Reset error code\n+\n+            // Execute Token Request\n+            tokenResult = oAuth2Strategy.requestToken(tokenRequest);\n+\n+            if (tokenResult.getErrorResponse() != null) {\n+                errorCode = tokenResult.getErrorResponse().getError();\n+            }\n+\n+            if (errorCode.equals(\"authorization_pending\")) {\n+                // interval is passed through params\n+                Thread.sleep(interval);\n+            }\n+        }\n+\n+        // Assign token result\n+        acquireTokenResult.setTokenResult(tokenResult);\n+\n+        // Validate request success, may throw MsalServiceException\n+        validateServiceResult(tokenResult);\n+\n+        // If the token is valid, save it into token cache\n+        final List<ICacheRecord> records = saveTokens(\n+                oAuth2Strategy,\n+                mAuthorizationRequest,\n+                acquireTokenResult.getTokenResult().getTokenResponse(),\n+                parameters.getOAuth2TokenCache()\n+        );\n+\n+        // Once the token is stored, fetch and assign the authentication result\n+        final ICacheRecord newestRecord = records.get(0);\n+        acquireTokenResult.setLocalAuthenticationResult(\n+                new LocalAuthenticationResult(\n+                        finalizeCacheRecordForResult(\n+                                newestRecord,\n+                                parameters.getAuthenticationScheme()\n+                        ),\n+                        records,\n+                        SdkType.MSAL,\n+                        false\n+                )\n+        );\n+\n+        logResult(TAG, tokenResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_POLLING\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putResult(acquireTokenResult)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_POLLING)\n+        );\n+\n+        return acquireTokenResult;\n+    }\n+\n+    /**\n+     * Helper method to check if a result object is valid (was a success). If not, an exception will be generated and thrown.\n+     * This method is called in both parts of the DCF protocol.\n+     * @param result result object to be checked\n+     * @throws MsalServiceException MsalServiceException object reflecting error code returned by the result\n+     */\n+    private void validateServiceResult(@NonNull IResult result) throws MsalServiceException {\n+        // If result was unsuccessful, create an exception\n+        if (!result.getSuccess()) {\n+            // Create ServiceException object\n+            ServiceException serviceException = createServiceExceptionForDeviceCodeFlow(result.getErrorResponse());\n+\n+            // Convert ServiceException to MsalServiceException, then throw\n+            throw new MsalServiceException(\n+                    serviceException.getErrorCode(),\n+                    serviceException.getMessage(),\n+                    serviceException.getHttpStatusCode(),\n+                    serviceException\n+            );\n+        }\n+    }\n+\n+    /**\n+     * Given an error response object, create a serviceException object using the predefined error codes.\n+     * @param response error response object to be checked\n+     * @return an exception object\n+     */\n+    private ServiceException createServiceExceptionForDeviceCodeFlow(IErrorResponse response) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc5440c3b99b8d2f8ef041617e51269c48b71bd2"}, "originalPosition": 225}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3ODkzNDY1", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#pullrequestreview-457893465", "createdAt": "2020-07-29T21:00:04Z", "commit": {"oid": "dc5440c3b99b8d2f8ef041617e51269c48b71bd2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMTowMDowNFrOG5J-pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMTowMDowNFrOG5J-pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4NTUwOA==", "bodyText": "At this point, is this error code coming from the service?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r462585508", "createdAt": "2020-07-29T21:00:04Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -463,14 +468,224 @@ public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) t\n     }\n \n     @Override\n-    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws MsalException, ClientException, IOException {\n+        // Logging start of method\n+        final String methodName = \":deviceCodeFlowAuthRequest\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Authorizing user code...\"\n+        );\n+\n+        // Default scopes here\n+        final Set<String> mergedScopes = addDefaultScopes(parameters);\n+\n+        final DeviceCodeFlowCommandParameters parametersWithScopes = parameters\n+                .toBuilder()\n+                .scopes(mergedScopes)\n+                .build();\n+\n+        logParameters(TAG, parametersWithScopes);\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putProperties(parametersWithScopes)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parametersWithScopes.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parametersWithScopes\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 1: Get user code\n+        // Populate global authorization request\n+        mAuthorizationRequest = getAuthorizationRequest(oAuth2Strategy, parametersWithScopes);\n+\n+        // Call method defined in oAuth2Strategy to request authorization\n+        final AuthorizationResult authorizationResult = oAuth2Strategy.getDeviceCode((MicrosoftStsAuthorizationRequest) mAuthorizationRequest, null);\n+\n+        validateServiceResult(authorizationResult);\n+\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow authorization step finished...\"\n+        );\n+        logResult(TAG, authorizationResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        return authorizationResult;\n     }\n \n     @Override\n-    public AcquireTokenResult acquireDeviceCodeFlowToken(final AuthorizationResult authorizationResult, DeviceCodeFlowCommandParameters commandParameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(\n+            final AuthorizationResult authorizationResult,\n+            final DeviceCodeFlowCommandParameters parameters)\n+            throws MsalException, ClientException, IOException, InterruptedException {\n+\n+        // Logging start of method\n+        final String methodName = \":acquireDeviceCodeFlowToken\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Polling for token...\"\n+        );\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_POLLING\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_POLLING)\n+        );\n+\n+        // Create empty AcquireTokenResult object\n+        final AcquireTokenResult acquireTokenResult = new AcquireTokenResult();\n+\n+        // Assign authorization result\n+        acquireTokenResult.setAuthorizationResult(authorizationResult);\n+\n+        // Fetch the Authorization Response\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parameters.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parameters\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 2: Poll for token\n+        TokenResult tokenResult = null;\n+\n+        // Create token request outside of loop so it isn't re-created after every loop\n+        final MicrosoftStsTokenRequest tokenRequest = (MicrosoftStsTokenRequest) oAuth2Strategy.createTokenRequest(\n+                mAuthorizationRequest,\n+                authorizationResponse,\n+                parameters.getAuthenticationScheme()\n+        );\n+\n+        // Fetch wait interval\n+        final int interval = Integer.parseInt(authorizationResponse.getInterval()) * 1000;\n+\n+        String errorCode = \"authorization_pending\";\n+\n+        // Loop to send multiple requests checking for token\n+        while (errorCode.equals(\"authorization_pending\")) {\n+            errorCode = \"\"; // Reset error code\n+\n+            // Execute Token Request\n+            tokenResult = oAuth2Strategy.requestToken(tokenRequest);\n+\n+            if (tokenResult.getErrorResponse() != null) {\n+                errorCode = tokenResult.getErrorResponse().getError();\n+            }\n+\n+            if (errorCode.equals(\"authorization_pending\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc5440c3b99b8d2f8ef041617e51269c48b71bd2"}, "originalPosition": 152}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9bd9ff763ae426bda2ff76d03e0bcd2edf3ce33", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/b9bd9ff763ae426bda2ff76d03e0bcd2edf3ce33", "committedDate": "2020-07-29T22:07:58Z", "message": "Updated internal, some suggestion fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3OTMyNzIw", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#pullrequestreview-457932720", "createdAt": "2020-07-29T22:08:33Z", "commit": {"oid": "b9bd9ff763ae426bda2ff76d03e0bcd2edf3ce33"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec58b60875ed8e3ee1bfb32d7d76f2d5e0dc5b0f", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/ec58b60875ed8e3ee1bfb32d7d76f2d5e0dc5b0f", "committedDate": "2020-07-30T01:17:39Z", "message": "Fix conflict in internal common"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd94dcfb8599f62be4075a22a4c5cd01ec2df967", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/bd94dcfb8599f62be4075a22a4c5cd01ec2df967", "committedDate": "2020-07-30T18:49:53Z", "message": "Boolean method for authorization_pending"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07d8d0130b81edad5f81e5cd913165918e18e9fc", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/07d8d0130b81edad5f81e5cd913165918e18e9fc", "committedDate": "2020-07-30T18:51:14Z", "message": "removed one exception from acquireDeviceCodeFlowToken"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9533e83c83fc43b81c52415b260940eacc70983", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/b9533e83c83fc43b81c52415b260940eacc70983", "committedDate": "2020-07-30T19:24:04Z", "message": "Merge branch 'dev' of https://github.com/AzureAD/microsoft-authentication-library-for-android into t-fadura/dcf-main"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b74cf6df0979cbdc8310699c308dc29d46468b0", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/7b74cf6df0979cbdc8310699c308dc29d46468b0", "committedDate": "2020-07-30T21:34:18Z", "message": "Passing authorityUri for tenant without parsing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4Nzc3MjMw", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#pullrequestreview-458777230", "createdAt": "2020-07-30T21:42:51Z", "commit": {"oid": "7b74cf6df0979cbdc8310699c308dc29d46468b0"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8e585d5780d1fc22c47b42c308c0c55a2459553", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/d8e585d5780d1fc22c47b42c308c0c55a2459553", "committedDate": "2020-07-31T16:21:12Z", "message": "working on test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d9b236bf4d92c725a0adac7f86574a526d1951d", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/2d9b236bf4d92c725a0adac7f86574a526d1951d", "committedDate": "2020-07-31T16:55:01Z", "message": "Migration into Common update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55e8153e3426f096df3710411a8b3932f054c27b", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/55e8153e3426f096df3710411a8b3932f054c27b", "committedDate": "2020-07-31T16:57:34Z", "message": "removed LocalMsalController.java from branch (now in common)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87888ba41b406e4b13f370d4a9fb42328cb540fe", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/87888ba41b406e4b13f370d4a9fb42328cb540fe", "committedDate": "2020-07-31T17:13:28Z", "message": "Fixed api-side tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5154a1a543fdabc8926ae55b899a7ea4c4e457f7", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/5154a1a543fdabc8926ae55b899a7ea4c4e457f7", "committedDate": "2020-07-31T18:45:57Z", "message": "getDeviceCode() testing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NDc2ODgx", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#pullrequestreview-459476881", "createdAt": "2020-07-31T21:04:07Z", "commit": {"oid": "5154a1a543fdabc8926ae55b899a7ea4c4e457f7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMTowNDowN1rOG6WjpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMTowNDowN1rOG6WjpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg0MDE2NQ==", "bodyText": "nit: \"The device_code expires.  No need to continue polling for the token\"", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r463840165", "createdAt": "2020-07-31T21:04:07Z", "author": {"login": "rpdome"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/shadows/ShadowDeviceCodeFlowCommandTokenError.java", "diffHunk": "@@ -46,6 +46,6 @@ public AcquireTokenResult execute() throws Exception {\n                 \"ABCDEFGH\",\n                 \"Follow these instructions to authenticate.\");\n \n-        throw new MsalServiceException(\"expired_token\", \"This exception reflects an error in the token polling step in Device Code Flow (expired token).\", null);\n+        throw new ServiceException(\"expired_token\", \"This exception reflects an error in the token polling step in Device Code Flow (expired token).\", null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5154a1a543fdabc8926ae55b899a7ea4c4e457f7"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NDc3MTM5", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#pullrequestreview-459477139", "createdAt": "2020-07-31T21:04:39Z", "commit": {"oid": "5154a1a543fdabc8926ae55b899a7ea4c4e457f7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMTowNDozOVrOG6WlVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMTowNDozOVrOG6WlVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg0MDU5OA==", "bodyText": "why removing NonNull?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r463840598", "createdAt": "2020-07-31T21:04:39Z", "author": {"login": "rpdome"}, "path": "msal/src/main/java/com/microsoft/identity/client/IPublicClientApplication.java", "diffHunk": "@@ -189,21 +191,21 @@ void acquireToken(@NonNull final Activity activity,\n          * @param userCode user code\n          * @param message instruction message\n          */\n-        void onUserCodeReceived(@NonNull String vUri, @NonNull String userCode, @NonNull String message);\n+        void onUserCodeReceived(String vUri, String userCode, String message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5154a1a543fdabc8926ae55b899a7ea4c4e457f7"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NDc3NjMy", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#pullrequestreview-459477632", "createdAt": "2020-07-31T21:05:51Z", "commit": {"oid": "5154a1a543fdabc8926ae55b899a7ea4c4e457f7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMTowNTo1MVrOG6Woog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMTowNTo1MVrOG6Woog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg0MTQ0Mg==", "bodyText": "what is this testing? why are we expecting IOException?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r463841442", "createdAt": "2020-07-31T21:05:51Z", "author": {"login": "rpdome"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/GetDeviceCodeTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.tests.mocked;\n+\n+import com.microsoft.identity.client.PublicClientApplicationConfiguration;\n+import com.microsoft.identity.client.e2e.shadows.ShadowMsalUtils;\n+import com.microsoft.identity.client.e2e.tests.PublicClientApplicationAbstractTest;\n+import com.microsoft.identity.common.internal.authorities.AzureActiveDirectoryAuthority;\n+import com.microsoft.identity.common.internal.providers.microsoft.azureactivedirectory.AzureActiveDirectoryOAuth2Configuration;\n+import com.microsoft.identity.common.internal.providers.microsoft.azureactivedirectory.AzureActiveDirectoryOAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationErrorResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationRequest;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationResponse;\n+import com.microsoft.identity.common.internal.providers.oauth2.AuthorizationResult;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2StrategyParameters;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.io.IOException;\n+\n+import static com.microsoft.identity.internal.testutils.TestConstants.Configurations.SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(shadows = {ShadowMsalUtils.class})\n+public class GetDeviceCodeTest extends PublicClientApplicationAbstractTest {\n+\n+    private MicrosoftStsAuthorizationRequest.Builder builder;\n+    private String urlBody;\n+    private OAuth2Strategy strategy;\n+\n+    @Before\n+    public void setup() {\n+        super.setup();\n+\n+        final PublicClientApplicationConfiguration config = mApplication.getConfiguration();\n+        urlBody = ((AzureActiveDirectoryAuthority) config.getAuthorities().get(0)).getAudience().getCloudUrl();\n+        builder = new MicrosoftStsAuthorizationRequest.Builder();\n+        builder.setClientId(config.getClientId())\n+                .setScope(\"user.read\")\n+                .setState(\"State!\");\n+\n+        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+        strategy = new AzureActiveDirectoryOAuth2Strategy(\n+                new AzureActiveDirectoryOAuth2Configuration(),\n+                options\n+        );\n+    }\n+\n+    @Override\n+    public String getConfigFilePath() {\n+        return SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeSuccessResult() {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = builder.build();\n+        final AuthorizationResult authorizationResult = runGetDeviceCodeThread(authorizationRequest, urlBody);\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        Assert.assertTrue(authorizationResult.getSuccess());\n+        Assert.assertNotNull(authorizationResponse);\n+\n+        Assert.assertNotNull(authorizationResponse.getDeviceCode());\n+        Assert.assertNotNull(authorizationResponse.getUserCode());\n+        Assert.assertNotNull(authorizationResponse.getMessage());\n+        Assert.assertNotNull(authorizationResponse.getInterval());\n+        Assert.assertNotNull(authorizationResponse.getExpiresIn());\n+        Assert.assertNotNull(authorizationResponse.getVerificationUri());\n+\n+        Assert.assertNull(authorizationResult.getAuthorizationErrorResponse());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureNoClientId() {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = builder.setClientId(null).build();\n+        final AuthorizationResult authorizationResult = runGetDeviceCodeThread(authorizationRequest, urlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(\"invalid_request\", authorizationErrorResponse.getError());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureNoScope() {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = builder.setScope(null).build();\n+        final AuthorizationResult authorizationResult = runGetDeviceCodeThread(authorizationRequest, urlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(\"invalid_request\", authorizationErrorResponse.getError());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureBadScope() {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = builder.setScope(\"/\").build();\n+        final AuthorizationResult authorizationResult = runGetDeviceCodeThread(authorizationRequest, urlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(\"invalid_scope\", authorizationErrorResponse.getError());\n+    }\n+\n+    /**\n+     * Helper function to run getDeviceCode(). Catches exception\n+     * @param authorizationRequest request to send to getDeviceCode()\n+     * @param urlBody url to send to getDeviceCode()\n+     * @return authorizationResult from getDeviceCode()\n+     */\n+    private AuthorizationResult runGetDeviceCodeThread(final MicrosoftStsAuthorizationRequest authorizationRequest, final String urlBody) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5154a1a543fdabc8926ae55b899a7ea4c4e457f7"}, "originalPosition": 144}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NDc5MTY4", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#pullrequestreview-459479168", "createdAt": "2020-07-31T21:09:14Z", "commit": {"oid": "5154a1a543fdabc8926ae55b899a7ea4c4e457f7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMTowOToxNFrOG6Wx6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMTowOToxNFrOG6Wx6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg0MzgxOQ==", "bodyText": "Where are we using ShadowDeviceCodeFlowCommandTokenError?\nAlso can we have test cases for each expected error from the token endpoint?\nauthorization_declined, bad_verification_code, expired_token", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r463843819", "createdAt": "2020-07-31T21:09:14Z", "author": {"login": "rpdome"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/GetDeviceCodeTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.tests.mocked;\n+\n+import com.microsoft.identity.client.PublicClientApplicationConfiguration;\n+import com.microsoft.identity.client.e2e.shadows.ShadowMsalUtils;\n+import com.microsoft.identity.client.e2e.tests.PublicClientApplicationAbstractTest;\n+import com.microsoft.identity.common.internal.authorities.AzureActiveDirectoryAuthority;\n+import com.microsoft.identity.common.internal.providers.microsoft.azureactivedirectory.AzureActiveDirectoryOAuth2Configuration;\n+import com.microsoft.identity.common.internal.providers.microsoft.azureactivedirectory.AzureActiveDirectoryOAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationErrorResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationRequest;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationResponse;\n+import com.microsoft.identity.common.internal.providers.oauth2.AuthorizationResult;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2StrategyParameters;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.io.IOException;\n+\n+import static com.microsoft.identity.internal.testutils.TestConstants.Configurations.SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(shadows = {ShadowMsalUtils.class})\n+public class GetDeviceCodeTest extends PublicClientApplicationAbstractTest {\n+\n+    private MicrosoftStsAuthorizationRequest.Builder builder;\n+    private String urlBody;\n+    private OAuth2Strategy strategy;\n+\n+    @Before\n+    public void setup() {\n+        super.setup();\n+\n+        final PublicClientApplicationConfiguration config = mApplication.getConfiguration();\n+        urlBody = ((AzureActiveDirectoryAuthority) config.getAuthorities().get(0)).getAudience().getCloudUrl();\n+        builder = new MicrosoftStsAuthorizationRequest.Builder();\n+        builder.setClientId(config.getClientId())\n+                .setScope(\"user.read\")\n+                .setState(\"State!\");\n+\n+        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+        strategy = new AzureActiveDirectoryOAuth2Strategy(\n+                new AzureActiveDirectoryOAuth2Configuration(),\n+                options\n+        );\n+    }\n+\n+    @Override\n+    public String getConfigFilePath() {\n+        return SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeSuccessResult() {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = builder.build();\n+        final AuthorizationResult authorizationResult = runGetDeviceCodeThread(authorizationRequest, urlBody);\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        Assert.assertTrue(authorizationResult.getSuccess());\n+        Assert.assertNotNull(authorizationResponse);\n+\n+        Assert.assertNotNull(authorizationResponse.getDeviceCode());\n+        Assert.assertNotNull(authorizationResponse.getUserCode());\n+        Assert.assertNotNull(authorizationResponse.getMessage());\n+        Assert.assertNotNull(authorizationResponse.getInterval());\n+        Assert.assertNotNull(authorizationResponse.getExpiresIn());\n+        Assert.assertNotNull(authorizationResponse.getVerificationUri());\n+\n+        Assert.assertNull(authorizationResult.getAuthorizationErrorResponse());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureNoClientId() {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = builder.setClientId(null).build();\n+        final AuthorizationResult authorizationResult = runGetDeviceCodeThread(authorizationRequest, urlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(\"invalid_request\", authorizationErrorResponse.getError());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureNoScope() {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = builder.setScope(null).build();\n+        final AuthorizationResult authorizationResult = runGetDeviceCodeThread(authorizationRequest, urlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(\"invalid_request\", authorizationErrorResponse.getError());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureBadScope() {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = builder.setScope(\"/\").build();\n+        final AuthorizationResult authorizationResult = runGetDeviceCodeThread(authorizationRequest, urlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(\"invalid_scope\", authorizationErrorResponse.getError());\n+    }\n+\n+    /**\n+     * Helper function to run getDeviceCode(). Catches exception\n+     * @param authorizationRequest request to send to getDeviceCode()\n+     * @param urlBody url to send to getDeviceCode()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5154a1a543fdabc8926ae55b899a7ea4c4e457f7"}, "originalPosition": 141}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fd81d1809ed7e2a1fce83f7d36c946018694fa6", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/8fd81d1809ed7e2a1fce83f7d36c946018694fa6", "committedDate": "2020-08-01T04:43:07Z", "message": "All testing for DCF in one file, DeviceCodeFlowApiTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2fbaf322e7e7e813b0bcfd38fed73ab23dbda2c", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/e2fbaf322e7e7e813b0bcfd38fed73ab23dbda2c", "committedDate": "2020-08-04T15:57:44Z", "message": "update internal"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9edceae36e8b147447f66f78e14543d1a77c4532", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/9edceae36e8b147447f66f78e14543d1a77c4532", "committedDate": "2020-08-04T16:01:38Z", "message": "fix conflict"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMjcwNTEy", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#pullrequestreview-461270512", "createdAt": "2020-08-05T00:58:00Z", "commit": {"oid": "9edceae36e8b147447f66f78e14543d1a77c4532"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDo1ODowMFrOG72bEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDo1ODowMFrOG72bEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxMDgzMw==", "bodyText": "Should these be removed?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r465410833", "createdAt": "2020-08-05T00:58:00Z", "author": {"login": "shahzaibj"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowApiTest.java", "diffHunk": "@@ -0,0 +1,329 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.tests.mocked;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.AuthenticationResult;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplicationConfiguration;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandAuthError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandSuccessful;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandTokenError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowHttpRequestForMockedTest;\n+import com.microsoft.identity.client.e2e.shadows.ShadowMsalUtils;\n+import com.microsoft.identity.client.e2e.tests.PublicClientApplicationAbstractTest;\n+import com.microsoft.identity.client.e2e.utils.RoboTestUtils;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.authorities.AzureActiveDirectoryAuthority;\n+import com.microsoft.identity.common.internal.providers.microsoft.azureactivedirectory.AzureActiveDirectoryOAuth2Configuration;\n+import com.microsoft.identity.common.internal.providers.microsoft.azureactivedirectory.AzureActiveDirectoryOAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationErrorResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationRequest;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Configuration;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsTokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.AuthorizationResult;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2StrategyParameters;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenResult;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.UUID;\n+\n+import static com.microsoft.identity.internal.testutils.TestConstants.Configurations.SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+\n+/**\n+ * Testing class for the device code flow protocol. Currently only supporting testing for the API-side\n+ * of the protocol. Will be extended to test individual aspects of the flow.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@Config(shadows = {ShadowMsalUtils.class})\n+public class DeviceCodeFlowApiTest extends PublicClientApplicationAbstractTest {\n+\n+    private MicrosoftStsAuthorizationRequest.Builder mBuilder;\n+    private String mUrlBody;\n+    private OAuth2Strategy mStrategy;\n+    private MicrosoftStsTokenRequest mTokenRequest;\n+    private boolean mUserCodeReceived;\n+\n+    @Before\n+    public void setup() {\n+        super.setup();\n+\n+        // getDeviceCode() testing variables\n+        final PublicClientApplicationConfiguration config = mApplication.getConfiguration();\n+        mUrlBody = ((AzureActiveDirectoryAuthority) config.getAuthorities().get(0)).getAudience().getCloudUrl();\n+        mBuilder = new MicrosoftStsAuthorizationRequest.Builder();\n+        mBuilder.setClientId(config.getClientId())\n+                .setScope(\"user.read\")\n+                .setState(\"State!\");\n+\n+        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+        mStrategy = new AzureActiveDirectoryOAuth2Strategy(\n+                new AzureActiveDirectoryOAuth2Configuration(),\n+                options\n+        );\n+\n+        // token request testing variable\n+        mTokenRequest = new MicrosoftStsTokenRequest();\n+        mTokenRequest.setCodeVerifier(\"\");\n+        mTokenRequest.setCorrelationId(UUID.fromString(\"a-b-c-d-e\"));\n+        mTokenRequest.setClientId(config.getClientId());\n+        mTokenRequest.setGrantType(TokenRequest.GrantTypes.DEVICE_CODE);\n+        mTokenRequest.setRedirectUri(config.getRedirectUri());\n+    }\n+\n+    @Override\n+    public String getConfigFilePath() {\n+        return SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+    }\n+\n+    //===========================================================================================================\n+    // getDeviceCode() Testing\n+    //===========================================================================================================\n+    @Test\n+    public void testGetDeviceCodeSuccessResult() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        Assert.assertTrue(authorizationResult.getSuccess());\n+        Assert.assertNotNull(authorizationResponse);\n+\n+        Assert.assertNotNull(authorizationResponse.getDeviceCode());\n+        Assert.assertNotNull(authorizationResponse.getUserCode());\n+        Assert.assertNotNull(authorizationResponse.getMessage());\n+        Assert.assertNotNull(authorizationResponse.getInterval());\n+        Assert.assertNotNull(authorizationResponse.getExpiresIn());\n+        Assert.assertNotNull(authorizationResponse.getVerificationUri());\n+\n+        Assert.assertNull(authorizationResult.getAuthorizationErrorResponse());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureNoClientId() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.setClientId(null).build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(ErrorStrings.INVALID_REQUEST, authorizationErrorResponse.getError());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureNoScope() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.setScope(null).build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(ErrorStrings.INVALID_REQUEST, authorizationErrorResponse.getError());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureBadScope() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.setScope(\"/\").build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(ErrorStrings.INVALID_SCOPE, authorizationErrorResponse.getError());\n+    }\n+\n+    //===========================================================================================================\n+    // Token Request Testing\n+    //===========================================================================================================x\n+    @Test\n+    public void testDeviceCodeFlowTokenInvalidRequest() throws IOException, ClientException {\n+        final MicrosoftStsOAuth2Configuration config = new MicrosoftStsOAuth2Configuration();\n+        config.setAuthorityUrl(new URL(mUrlBody));\n+        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+        final OAuth2Strategy strategy = new MicrosoftStsOAuth2Strategy(config, options);\n+\n+        final TokenResult tokenResult = strategy.requestToken(mTokenRequest);\n+        Assert.assertNull(tokenResult.getTokenResponse());\n+        Assert.assertNotNull(tokenResult.getErrorResponse());\n+        Assert.assertEquals(ErrorStrings.INVALID_REQUEST, tokenResult.getErrorResponse().getError());\n+    }\n+\n+    @Test\n+    public void testDeviceCodeFlowTokenExpiredToken() throws IOException, ClientException {\n+        final MicrosoftStsOAuth2Configuration config = new MicrosoftStsOAuth2Configuration();\n+        config.setAuthorityUrl(new URL(mUrlBody));\n+        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+        final OAuth2Strategy strategy = new MicrosoftStsOAuth2Strategy(config, options);\n+\n+        // Previously authenticated code\n+        mTokenRequest.setDeviceCode(\n+                \"AAQABAAEAAAAm-06blBE1TpVMil8KPQ41e5vDLI7te0y-3XHYO_uurPryAiyBiPiKnjEVzAQZQzCyGZERne4a\" +\n+                        \"IwYAiBlQ8an93ENYuVOO-vEAt48FEJSEMQqq-zHZVD59bkc6eYIAViZKVvTv5_qilKj4uEjVE9BGkIxY5B6Uq1K8oWHEqzH-w6CiWjC8vQc6mSV_FPCbnAggAA\");\n+\n+        final TokenResult tokenResult = strategy.requestToken(mTokenRequest);\n+        Assert.assertNull(tokenResult.getTokenResponse());\n+        Assert.assertNotNull(tokenResult.getErrorResponse());\n+        Assert.assertEquals(ErrorStrings.DEVICE_CODE_FLOW_EXPIRED_TOKEN_CODE, tokenResult.getErrorResponse().getError());\n+    }\n+\n+    // A device code that has not yet been registered leads to invalid_grant, not bad_verification_code\n+//    @Test\n+//    public void testDeviceCodeFlowTokenBadVerificationCode() throws IOException, ClientException {\n+//        final MicrosoftStsOAuth2Configuration config = new MicrosoftStsOAuth2Configuration();\n+//        config.setAuthorityUrl(new URL(mUrlBody));\n+//        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+//        final OAuth2Strategy strategy = new MicrosoftStsOAuth2Strategy(config, options);\n+//        mTokenRequest.setDeviceCode(\n+//                \"AAQABAAEAAAAm-06blBE1TpVMil8KPQ41e5vDLI7te0y-3XHYO_uurPryAiyBiPiKnjEVzAQZQzCyGZERne4a\" +\n+//                        \"IwYAiBlQ8an93ENYuVOO-vEAt48FEJSEMQqq-zHZVD59bkc6eYIAViZKVvTv5_qilKj4uEjVE9BGkIxY5B6Uq1K8oWHEqzH-w6CiWjC8vQc6mSV_FPCbnAggBA\");\n+//\n+//        final TokenResult tokenResult = strategy.requestToken(mTokenRequest);\n+//        Assert.assertNull(tokenResult.getTokenResponse());\n+//        Assert.assertNotNull(tokenResult.getErrorResponse());\n+//        Assert.assertEquals(ErrorStrings.DEVICE_CODE_FLOW_BAD_VERIFICATION_CODE, tokenResult.getErrorResponse().getError());\n+//    }\n+\n+    // authorization_declined is triggered in the actual auth side\n+//    @Test\n+//    public void testDeviceCodeFlowTokenAuthorizationDeclined() throws IOException, ClientException {\n+//        final MicrosoftStsOAuth2Configuration config = new MicrosoftStsOAuth2Configuration();\n+//        config.setAuthorityUrl(new URL(mUrlBody));\n+//        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+//        final OAuth2Strategy strategy = new MicrosoftStsOAuth2Strategy(config, options);\n+//\n+//        final TokenResult tokenResult = strategy.requestToken(mTokenRequest);\n+//        Assert.assertNull(tokenResult.getTokenResponse());\n+//        Assert.assertNotNull(tokenResult.getErrorResponse());\n+//        Assert.assertEquals(ErrorStrings.DEVICE_CODE_FLOW_AUTHORIZATION_DECLINED_CODE, tokenResult.getErrorResponse().getError());\n+//    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9edceae36e8b147447f66f78e14543d1a77c4532"}, "originalPosition": 238}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMjc0MDY1", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#pullrequestreview-461274065", "createdAt": "2020-08-05T01:09:59Z", "commit": {"oid": "9edceae36e8b147447f66f78e14543d1a77c4532"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMTowOTo1OVrOG72nhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMToxMTozNlrOG72pNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxNDAyMA==", "bodyText": "nit: Let's not use a class variable. Can we create a function that returns a new (mock) token request instead.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r465414020", "createdAt": "2020-08-05T01:09:59Z", "author": {"login": "rpdome"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowApiTest.java", "diffHunk": "@@ -0,0 +1,329 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.tests.mocked;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.AuthenticationResult;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplicationConfiguration;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandAuthError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandSuccessful;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandTokenError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowHttpRequestForMockedTest;\n+import com.microsoft.identity.client.e2e.shadows.ShadowMsalUtils;\n+import com.microsoft.identity.client.e2e.tests.PublicClientApplicationAbstractTest;\n+import com.microsoft.identity.client.e2e.utils.RoboTestUtils;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.authorities.AzureActiveDirectoryAuthority;\n+import com.microsoft.identity.common.internal.providers.microsoft.azureactivedirectory.AzureActiveDirectoryOAuth2Configuration;\n+import com.microsoft.identity.common.internal.providers.microsoft.azureactivedirectory.AzureActiveDirectoryOAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationErrorResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationRequest;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Configuration;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsTokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.AuthorizationResult;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2StrategyParameters;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenResult;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.UUID;\n+\n+import static com.microsoft.identity.internal.testutils.TestConstants.Configurations.SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+\n+/**\n+ * Testing class for the device code flow protocol. Currently only supporting testing for the API-side\n+ * of the protocol. Will be extended to test individual aspects of the flow.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@Config(shadows = {ShadowMsalUtils.class})\n+public class DeviceCodeFlowApiTest extends PublicClientApplicationAbstractTest {\n+\n+    private MicrosoftStsAuthorizationRequest.Builder mBuilder;\n+    private String mUrlBody;\n+    private OAuth2Strategy mStrategy;\n+    private MicrosoftStsTokenRequest mTokenRequest;\n+    private boolean mUserCodeReceived;\n+\n+    @Before\n+    public void setup() {\n+        super.setup();\n+\n+        // getDeviceCode() testing variables\n+        final PublicClientApplicationConfiguration config = mApplication.getConfiguration();\n+        mUrlBody = ((AzureActiveDirectoryAuthority) config.getAuthorities().get(0)).getAudience().getCloudUrl();\n+        mBuilder = new MicrosoftStsAuthorizationRequest.Builder();\n+        mBuilder.setClientId(config.getClientId())\n+                .setScope(\"user.read\")\n+                .setState(\"State!\");\n+\n+        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+        mStrategy = new AzureActiveDirectoryOAuth2Strategy(\n+                new AzureActiveDirectoryOAuth2Configuration(),\n+                options\n+        );\n+\n+        // token request testing variable\n+        mTokenRequest = new MicrosoftStsTokenRequest();\n+        mTokenRequest.setCodeVerifier(\"\");\n+        mTokenRequest.setCorrelationId(UUID.fromString(\"a-b-c-d-e\"));\n+        mTokenRequest.setClientId(config.getClientId());\n+        mTokenRequest.setGrantType(TokenRequest.GrantTypes.DEVICE_CODE);\n+        mTokenRequest.setRedirectUri(config.getRedirectUri());\n+    }\n+\n+    @Override\n+    public String getConfigFilePath() {\n+        return SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+    }\n+\n+    //===========================================================================================================\n+    // getDeviceCode() Testing\n+    //===========================================================================================================\n+    @Test\n+    public void testGetDeviceCodeSuccessResult() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        Assert.assertTrue(authorizationResult.getSuccess());\n+        Assert.assertNotNull(authorizationResponse);\n+\n+        Assert.assertNotNull(authorizationResponse.getDeviceCode());\n+        Assert.assertNotNull(authorizationResponse.getUserCode());\n+        Assert.assertNotNull(authorizationResponse.getMessage());\n+        Assert.assertNotNull(authorizationResponse.getInterval());\n+        Assert.assertNotNull(authorizationResponse.getExpiresIn());\n+        Assert.assertNotNull(authorizationResponse.getVerificationUri());\n+\n+        Assert.assertNull(authorizationResult.getAuthorizationErrorResponse());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureNoClientId() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.setClientId(null).build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(ErrorStrings.INVALID_REQUEST, authorizationErrorResponse.getError());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureNoScope() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.setScope(null).build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(ErrorStrings.INVALID_REQUEST, authorizationErrorResponse.getError());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureBadScope() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.setScope(\"/\").build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(ErrorStrings.INVALID_SCOPE, authorizationErrorResponse.getError());\n+    }\n+\n+    //===========================================================================================================\n+    // Token Request Testing\n+    //===========================================================================================================x\n+    @Test\n+    public void testDeviceCodeFlowTokenInvalidRequest() throws IOException, ClientException {\n+        final MicrosoftStsOAuth2Configuration config = new MicrosoftStsOAuth2Configuration();\n+        config.setAuthorityUrl(new URL(mUrlBody));\n+        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+        final OAuth2Strategy strategy = new MicrosoftStsOAuth2Strategy(config, options);\n+\n+        final TokenResult tokenResult = strategy.requestToken(mTokenRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9edceae36e8b147447f66f78e14543d1a77c4532"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxNDI2NA==", "bodyText": "given that it's the same mTokenRequest object with the test case above, why won't I hit ErrorStrings.INVALID_REQUEST here?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r465414264", "createdAt": "2020-08-05T01:10:55Z", "author": {"login": "rpdome"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowApiTest.java", "diffHunk": "@@ -0,0 +1,329 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.tests.mocked;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.AuthenticationResult;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplicationConfiguration;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandAuthError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandSuccessful;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandTokenError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowHttpRequestForMockedTest;\n+import com.microsoft.identity.client.e2e.shadows.ShadowMsalUtils;\n+import com.microsoft.identity.client.e2e.tests.PublicClientApplicationAbstractTest;\n+import com.microsoft.identity.client.e2e.utils.RoboTestUtils;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.authorities.AzureActiveDirectoryAuthority;\n+import com.microsoft.identity.common.internal.providers.microsoft.azureactivedirectory.AzureActiveDirectoryOAuth2Configuration;\n+import com.microsoft.identity.common.internal.providers.microsoft.azureactivedirectory.AzureActiveDirectoryOAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationErrorResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationRequest;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Configuration;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsTokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.AuthorizationResult;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2StrategyParameters;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenResult;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.UUID;\n+\n+import static com.microsoft.identity.internal.testutils.TestConstants.Configurations.SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+\n+/**\n+ * Testing class for the device code flow protocol. Currently only supporting testing for the API-side\n+ * of the protocol. Will be extended to test individual aspects of the flow.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@Config(shadows = {ShadowMsalUtils.class})\n+public class DeviceCodeFlowApiTest extends PublicClientApplicationAbstractTest {\n+\n+    private MicrosoftStsAuthorizationRequest.Builder mBuilder;\n+    private String mUrlBody;\n+    private OAuth2Strategy mStrategy;\n+    private MicrosoftStsTokenRequest mTokenRequest;\n+    private boolean mUserCodeReceived;\n+\n+    @Before\n+    public void setup() {\n+        super.setup();\n+\n+        // getDeviceCode() testing variables\n+        final PublicClientApplicationConfiguration config = mApplication.getConfiguration();\n+        mUrlBody = ((AzureActiveDirectoryAuthority) config.getAuthorities().get(0)).getAudience().getCloudUrl();\n+        mBuilder = new MicrosoftStsAuthorizationRequest.Builder();\n+        mBuilder.setClientId(config.getClientId())\n+                .setScope(\"user.read\")\n+                .setState(\"State!\");\n+\n+        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+        mStrategy = new AzureActiveDirectoryOAuth2Strategy(\n+                new AzureActiveDirectoryOAuth2Configuration(),\n+                options\n+        );\n+\n+        // token request testing variable\n+        mTokenRequest = new MicrosoftStsTokenRequest();\n+        mTokenRequest.setCodeVerifier(\"\");\n+        mTokenRequest.setCorrelationId(UUID.fromString(\"a-b-c-d-e\"));\n+        mTokenRequest.setClientId(config.getClientId());\n+        mTokenRequest.setGrantType(TokenRequest.GrantTypes.DEVICE_CODE);\n+        mTokenRequest.setRedirectUri(config.getRedirectUri());\n+    }\n+\n+    @Override\n+    public String getConfigFilePath() {\n+        return SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+    }\n+\n+    //===========================================================================================================\n+    // getDeviceCode() Testing\n+    //===========================================================================================================\n+    @Test\n+    public void testGetDeviceCodeSuccessResult() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        Assert.assertTrue(authorizationResult.getSuccess());\n+        Assert.assertNotNull(authorizationResponse);\n+\n+        Assert.assertNotNull(authorizationResponse.getDeviceCode());\n+        Assert.assertNotNull(authorizationResponse.getUserCode());\n+        Assert.assertNotNull(authorizationResponse.getMessage());\n+        Assert.assertNotNull(authorizationResponse.getInterval());\n+        Assert.assertNotNull(authorizationResponse.getExpiresIn());\n+        Assert.assertNotNull(authorizationResponse.getVerificationUri());\n+\n+        Assert.assertNull(authorizationResult.getAuthorizationErrorResponse());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureNoClientId() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.setClientId(null).build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(ErrorStrings.INVALID_REQUEST, authorizationErrorResponse.getError());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureNoScope() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.setScope(null).build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(ErrorStrings.INVALID_REQUEST, authorizationErrorResponse.getError());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureBadScope() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.setScope(\"/\").build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(ErrorStrings.INVALID_SCOPE, authorizationErrorResponse.getError());\n+    }\n+\n+    //===========================================================================================================\n+    // Token Request Testing\n+    //===========================================================================================================x\n+    @Test\n+    public void testDeviceCodeFlowTokenInvalidRequest() throws IOException, ClientException {\n+        final MicrosoftStsOAuth2Configuration config = new MicrosoftStsOAuth2Configuration();\n+        config.setAuthorityUrl(new URL(mUrlBody));\n+        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+        final OAuth2Strategy strategy = new MicrosoftStsOAuth2Strategy(config, options);\n+\n+        final TokenResult tokenResult = strategy.requestToken(mTokenRequest);\n+        Assert.assertNull(tokenResult.getTokenResponse());\n+        Assert.assertNotNull(tokenResult.getErrorResponse());\n+        Assert.assertEquals(ErrorStrings.INVALID_REQUEST, tokenResult.getErrorResponse().getError());\n+    }\n+\n+    @Test\n+    public void testDeviceCodeFlowTokenExpiredToken() throws IOException, ClientException {\n+        final MicrosoftStsOAuth2Configuration config = new MicrosoftStsOAuth2Configuration();\n+        config.setAuthorityUrl(new URL(mUrlBody));\n+        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+        final OAuth2Strategy strategy = new MicrosoftStsOAuth2Strategy(config, options);\n+\n+        // Previously authenticated code\n+        mTokenRequest.setDeviceCode(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9edceae36e8b147447f66f78e14543d1a77c4532"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxNDQ1Mw==", "bodyText": "Why commented out?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r465414453", "createdAt": "2020-08-05T01:11:36Z", "author": {"login": "rpdome"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowApiTest.java", "diffHunk": "@@ -0,0 +1,329 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.tests.mocked;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.AuthenticationResult;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplicationConfiguration;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandAuthError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandSuccessful;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandTokenError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowHttpRequestForMockedTest;\n+import com.microsoft.identity.client.e2e.shadows.ShadowMsalUtils;\n+import com.microsoft.identity.client.e2e.tests.PublicClientApplicationAbstractTest;\n+import com.microsoft.identity.client.e2e.utils.RoboTestUtils;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.authorities.AzureActiveDirectoryAuthority;\n+import com.microsoft.identity.common.internal.providers.microsoft.azureactivedirectory.AzureActiveDirectoryOAuth2Configuration;\n+import com.microsoft.identity.common.internal.providers.microsoft.azureactivedirectory.AzureActiveDirectoryOAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationErrorResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationRequest;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Configuration;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsTokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.AuthorizationResult;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2StrategyParameters;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenResult;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.UUID;\n+\n+import static com.microsoft.identity.internal.testutils.TestConstants.Configurations.SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+\n+/**\n+ * Testing class for the device code flow protocol. Currently only supporting testing for the API-side\n+ * of the protocol. Will be extended to test individual aspects of the flow.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@Config(shadows = {ShadowMsalUtils.class})\n+public class DeviceCodeFlowApiTest extends PublicClientApplicationAbstractTest {\n+\n+    private MicrosoftStsAuthorizationRequest.Builder mBuilder;\n+    private String mUrlBody;\n+    private OAuth2Strategy mStrategy;\n+    private MicrosoftStsTokenRequest mTokenRequest;\n+    private boolean mUserCodeReceived;\n+\n+    @Before\n+    public void setup() {\n+        super.setup();\n+\n+        // getDeviceCode() testing variables\n+        final PublicClientApplicationConfiguration config = mApplication.getConfiguration();\n+        mUrlBody = ((AzureActiveDirectoryAuthority) config.getAuthorities().get(0)).getAudience().getCloudUrl();\n+        mBuilder = new MicrosoftStsAuthorizationRequest.Builder();\n+        mBuilder.setClientId(config.getClientId())\n+                .setScope(\"user.read\")\n+                .setState(\"State!\");\n+\n+        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+        mStrategy = new AzureActiveDirectoryOAuth2Strategy(\n+                new AzureActiveDirectoryOAuth2Configuration(),\n+                options\n+        );\n+\n+        // token request testing variable\n+        mTokenRequest = new MicrosoftStsTokenRequest();\n+        mTokenRequest.setCodeVerifier(\"\");\n+        mTokenRequest.setCorrelationId(UUID.fromString(\"a-b-c-d-e\"));\n+        mTokenRequest.setClientId(config.getClientId());\n+        mTokenRequest.setGrantType(TokenRequest.GrantTypes.DEVICE_CODE);\n+        mTokenRequest.setRedirectUri(config.getRedirectUri());\n+    }\n+\n+    @Override\n+    public String getConfigFilePath() {\n+        return SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+    }\n+\n+    //===========================================================================================================\n+    // getDeviceCode() Testing\n+    //===========================================================================================================\n+    @Test\n+    public void testGetDeviceCodeSuccessResult() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        Assert.assertTrue(authorizationResult.getSuccess());\n+        Assert.assertNotNull(authorizationResponse);\n+\n+        Assert.assertNotNull(authorizationResponse.getDeviceCode());\n+        Assert.assertNotNull(authorizationResponse.getUserCode());\n+        Assert.assertNotNull(authorizationResponse.getMessage());\n+        Assert.assertNotNull(authorizationResponse.getInterval());\n+        Assert.assertNotNull(authorizationResponse.getExpiresIn());\n+        Assert.assertNotNull(authorizationResponse.getVerificationUri());\n+\n+        Assert.assertNull(authorizationResult.getAuthorizationErrorResponse());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureNoClientId() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.setClientId(null).build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(ErrorStrings.INVALID_REQUEST, authorizationErrorResponse.getError());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureNoScope() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.setScope(null).build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(ErrorStrings.INVALID_REQUEST, authorizationErrorResponse.getError());\n+    }\n+\n+    @Test\n+    public void testGetDeviceCodeFailureBadScope() throws IOException {\n+        final MicrosoftStsAuthorizationRequest authorizationRequest = mBuilder.setScope(\"/\").build();\n+        final AuthorizationResult authorizationResult = mStrategy.getDeviceCode(authorizationRequest, mUrlBody);\n+        final MicrosoftStsAuthorizationErrorResponse authorizationErrorResponse = (MicrosoftStsAuthorizationErrorResponse) authorizationResult.getAuthorizationErrorResponse();\n+\n+        Assert.assertFalse(authorizationResult.getSuccess());\n+        Assert.assertNull(authorizationResult.getAuthorizationResponse());\n+\n+        Assert.assertNotNull(authorizationErrorResponse);\n+        Assert.assertEquals(ErrorStrings.INVALID_SCOPE, authorizationErrorResponse.getError());\n+    }\n+\n+    //===========================================================================================================\n+    // Token Request Testing\n+    //===========================================================================================================x\n+    @Test\n+    public void testDeviceCodeFlowTokenInvalidRequest() throws IOException, ClientException {\n+        final MicrosoftStsOAuth2Configuration config = new MicrosoftStsOAuth2Configuration();\n+        config.setAuthorityUrl(new URL(mUrlBody));\n+        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+        final OAuth2Strategy strategy = new MicrosoftStsOAuth2Strategy(config, options);\n+\n+        final TokenResult tokenResult = strategy.requestToken(mTokenRequest);\n+        Assert.assertNull(tokenResult.getTokenResponse());\n+        Assert.assertNotNull(tokenResult.getErrorResponse());\n+        Assert.assertEquals(ErrorStrings.INVALID_REQUEST, tokenResult.getErrorResponse().getError());\n+    }\n+\n+    @Test\n+    public void testDeviceCodeFlowTokenExpiredToken() throws IOException, ClientException {\n+        final MicrosoftStsOAuth2Configuration config = new MicrosoftStsOAuth2Configuration();\n+        config.setAuthorityUrl(new URL(mUrlBody));\n+        final OAuth2StrategyParameters options = new OAuth2StrategyParameters();\n+        final OAuth2Strategy strategy = new MicrosoftStsOAuth2Strategy(config, options);\n+\n+        // Previously authenticated code\n+        mTokenRequest.setDeviceCode(\n+                \"AAQABAAEAAAAm-06blBE1TpVMil8KPQ41e5vDLI7te0y-3XHYO_uurPryAiyBiPiKnjEVzAQZQzCyGZERne4a\" +\n+                        \"IwYAiBlQ8an93ENYuVOO-vEAt48FEJSEMQqq-zHZVD59bkc6eYIAViZKVvTv5_qilKj4uEjVE9BGkIxY5B6Uq1K8oWHEqzH-w6CiWjC8vQc6mSV_FPCbnAggAA\");\n+\n+        final TokenResult tokenResult = strategy.requestToken(mTokenRequest);\n+        Assert.assertNull(tokenResult.getTokenResponse());\n+        Assert.assertNotNull(tokenResult.getErrorResponse());\n+        Assert.assertEquals(ErrorStrings.DEVICE_CODE_FLOW_EXPIRED_TOKEN_CODE, tokenResult.getErrorResponse().getError());\n+    }\n+\n+    // A device code that has not yet been registered leads to invalid_grant, not bad_verification_code", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9edceae36e8b147447f66f78e14543d1a77c4532"}, "originalPosition": 209}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e705026b5c605415cf6e5cc2a6f97cb06a26c0f1", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/e705026b5c605415cf6e5cc2a6f97cb06a26c0f1", "committedDate": "2020-08-05T01:53:00Z", "message": "less class variables in testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11935e901123d08c11b2ca54a3d4675215ccb052", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/11935e901123d08c11b2ca54a3d4675215ccb052", "committedDate": "2020-08-05T02:15:41Z", "message": "updated internal lib"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83d94b3b9b23dacdbd8d35a0914be2dbfd901bcd", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/83d94b3b9b23dacdbd8d35a0914be2dbfd901bcd", "committedDate": "2020-08-05T21:07:07Z", "message": "fixed authority issue, testing fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMDY0NDM5", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#pullrequestreview-462064439", "createdAt": "2020-08-05T22:22:50Z", "commit": {"oid": "83d94b3b9b23dacdbd8d35a0914be2dbfd901bcd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjoyMjo1MFrOG8cpjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjoyMjo1MFrOG8cpjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzNzEzNQ==", "bodyText": "Why can't we just use default authority?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r466037135", "createdAt": "2020-08-05T22:22:50Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/CommandParametersAdapter.java", "diffHunk": "@@ -201,6 +201,10 @@ public static DeviceCodeFlowCommandParameters createDeviceCodeFlowCommandParamet\n             @NonNull String[] scopes){\n \n         // TODO: Consider implementing support for PoP\n+\n+        final String uri = ((AzureActiveDirectoryAuthority) configuration.getAuthorities().get(0)).getAudience().getCloudUrl();\n+        final Authority authority = Authority.getAuthorityFromAuthorityUrl(uri);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83d94b3b9b23dacdbd8d35a0914be2dbfd901bcd"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMDY1NDI5", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#pullrequestreview-462065429", "createdAt": "2020-08-05T22:25:24Z", "commit": {"oid": "83d94b3b9b23dacdbd8d35a0914be2dbfd901bcd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjoyNToyNFrOG8ctLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjoyNToyNFrOG8ctLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzODA2MQ==", "bodyText": "Why not config.getDefaultAuthority().getAuthorityUrl().toString()?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#discussion_r466038061", "createdAt": "2020-08-05T22:25:24Z", "author": {"login": "shahzaibj"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/DeviceCodeFlowApiTest.java", "diffHunk": "@@ -0,0 +1,329 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.tests.mocked;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.AuthenticationResult;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplicationConfiguration;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandAuthError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandSuccessful;\n+import com.microsoft.identity.client.e2e.shadows.ShadowDeviceCodeFlowCommandTokenError;\n+import com.microsoft.identity.client.e2e.shadows.ShadowMsalUtils;\n+import com.microsoft.identity.client.e2e.tests.PublicClientApplicationAbstractTest;\n+import com.microsoft.identity.client.e2e.utils.RoboTestUtils;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.authorities.Authority;\n+import com.microsoft.identity.common.internal.authorities.AzureActiveDirectoryAuthority;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationErrorResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationRequest;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsAuthorizationResponse;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Configuration;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsOAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.microsoft.microsoftsts.MicrosoftStsTokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.AuthorizationResult;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2Strategy;\n+import com.microsoft.identity.common.internal.providers.oauth2.OAuth2StrategyParameters;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenRequest;\n+import com.microsoft.identity.common.internal.providers.oauth2.TokenResult;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.UUID;\n+\n+import static com.microsoft.identity.internal.testutils.TestConstants.Configurations.SINGLE_ACCOUNT_DCF_TEST_CONFIG_FILE_PATH;\n+\n+/**\n+ * Testing class for the device code flow protocol. Currently only supporting testing for the API-side\n+ * of the protocol. Will be extended to test individual aspects of the flow.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@Config(shadows = {ShadowMsalUtils.class})\n+public class DeviceCodeFlowApiTest extends PublicClientApplicationAbstractTest {\n+\n+    private String mUrlBody;\n+    private boolean mUserCodeReceived;\n+\n+    @Before\n+    public void setup() {\n+        super.setup();\n+\n+        final PublicClientApplicationConfiguration config = mApplication.getConfiguration();\n+        mUrlBody = ((AzureActiveDirectoryAuthority) config.getAuthorities().get(0)).getAudience().getCloudUrl();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83d94b3b9b23dacdbd8d35a0914be2dbfd901bcd"}, "originalPosition": 82}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80b1e9f89635b5550246874c5663bf01f7dfa735", "author": {"user": {"login": "t-fadura", "name": "Fadi Durah"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/80b1e9f89635b5550246874c5663bf01f7dfa735", "committedDate": "2020-08-06T01:01:14Z", "message": "Changed config file to fix default authority"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyODM5Mjcy", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#pullrequestreview-462839272", "createdAt": "2020-08-06T20:07:10Z", "commit": {"oid": "80b1e9f89635b5550246874c5663bf01f7dfa735"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyODc5MDQ2", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#pullrequestreview-462879046", "createdAt": "2020-08-06T21:10:00Z", "commit": {"oid": "80b1e9f89635b5550246874c5663bf01f7dfa735"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyOTY3OTMz", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1112#pullrequestreview-462967933", "createdAt": "2020-08-07T00:51:38Z", "commit": {"oid": "80b1e9f89635b5550246874c5663bf01f7dfa735"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1240, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}