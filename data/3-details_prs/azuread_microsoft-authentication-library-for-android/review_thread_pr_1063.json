{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxOTc1ODYz", "number": 1063, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMzozNjoxOVrOEEF1lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjoxMDozMlrOEFHPtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzI1Mzk5OnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/TokenParameters.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMzozNjoxOVrOGhf8tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMToyMzowOFrOGi0HBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc3OTYzNw==", "bodyText": "Javadoc public methods.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1063#discussion_r437779637", "createdAt": "2020-06-09T23:36:19Z", "author": {"login": "AdamBJohnsonx"}, "path": "msal/src/main/java/com/microsoft/identity/client/TokenParameters.java", "diffHunk": "@@ -137,6 +140,10 @@ public AccountRecord getAccountRecord() {\n         return mAccountRecord;\n     }\n \n+    public String getCorrelationId() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23cdbc28feda6f781e8a46f55424a81578a837bb"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE1ODUzMg==", "bodyText": "Addressed here: 6a71d1d", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1063#discussion_r439158532", "createdAt": "2020-06-12T01:23:08Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/TokenParameters.java", "diffHunk": "@@ -137,6 +140,10 @@ public AccountRecord getAccountRecord() {\n         return mAccountRecord;\n     }\n \n+    public String getCorrelationId() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc3OTYzNw=="}, "originalCommit": {"oid": "23cdbc28feda6f781e8a46f55424a81578a837bb"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzI1NTYzOnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/TokenParameters.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMzozNzoxOVrOGhf9xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzo1ODoyN1rOGiowNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc3OTkwOQ==", "bodyText": "Is it possible that these could be final?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1063#discussion_r437779909", "createdAt": "2020-06-09T23:37:19Z", "author": {"login": "AdamBJohnsonx"}, "path": "msal/src/main/java/com/microsoft/identity/client/TokenParameters.java", "diffHunk": "@@ -42,13 +43,15 @@\n     private ClaimsRequest mClaimsRequest;\n     private AccountRecord mAccountRecord;\n     private AuthenticationScheme mAuthenticationScheme;\n+    private String mCorrelationId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23cdbc28feda6f781e8a46f55424a81578a837bb"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MjQ2OA==", "bodyText": "Nope, these have setters and can get modified after initialization: https://github.com/AzureAD/microsoft-authentication-library-for-android/blob/dev/msal/src/main/java/com/microsoft/identity/client/TokenParameters.java#L80-L134", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1063#discussion_r438972468", "createdAt": "2020-06-11T17:58:27Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/TokenParameters.java", "diffHunk": "@@ -42,13 +43,15 @@\n     private ClaimsRequest mClaimsRequest;\n     private AccountRecord mAccountRecord;\n     private AuthenticationScheme mAuthenticationScheme;\n+    private String mCorrelationId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc3OTkwOQ=="}, "originalCommit": {"oid": "23cdbc28feda6f781e8a46f55424a81578a837bb"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzI2MDExOnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/AuthenticationResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMzozOTozMVrOGhgAgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMToyMzozM1rOGi0HaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4MDYwOA==", "bodyText": "nit: missing id", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1063#discussion_r437780608", "createdAt": "2020-06-09T23:39:31Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/AuthenticationResult.java", "diffHunk": "@@ -108,4 +117,26 @@ public IAccount getAccount() {\n     public String[] getScope() {\n         return mAccessToken.getTarget().split(\"\\\\s\");\n     }\n+\n+    @Nullable\n+    @Override\n+    public UUID getCorrelationId() {\n+        return mCorrelationId;\n+    }\n+\n+    private UUID sanitizeCorrelationId(@Nullable final String correlationId) {\n+        final String methodName = \"sanitizeCorrelationId\";\n+\n+        if (TextUtils.isEmpty(correlationId)) {\n+            Logger.warn(TAG + methodName, \"Correlation was empty, returning null.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23cdbc28feda6f781e8a46f55424a81578a837bb"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE1ODYzMw==", "bodyText": "Addressed here: 6a71d1d", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1063#discussion_r439158633", "createdAt": "2020-06-12T01:23:33Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/AuthenticationResult.java", "diffHunk": "@@ -108,4 +117,26 @@ public IAccount getAccount() {\n     public String[] getScope() {\n         return mAccessToken.getTarget().split(\"\\\\s\");\n     }\n+\n+    @Nullable\n+    @Override\n+    public UUID getCorrelationId() {\n+        return mCorrelationId;\n+    }\n+\n+    private UUID sanitizeCorrelationId(@Nullable final String correlationId) {\n+        final String methodName = \"sanitizeCorrelationId\";\n+\n+        if (TextUtils.isEmpty(correlationId)) {\n+            Logger.warn(TAG + methodName, \"Correlation was empty, returning null.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4MDYwOA=="}, "originalCommit": {"oid": "23cdbc28feda6f781e8a46f55424a81578a837bb"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzI2MDY0OnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/AuthenticationResult.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMzozOTo0OFrOGhgAzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODo0Njo1OVrOGiB-nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4MDY4Ng==", "bodyText": "Should we have one of these that just takes a UUID where we don't need to convert it?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1063#discussion_r437780686", "createdAt": "2020-06-09T23:39:48Z", "author": {"login": "AdamBJohnsonx"}, "path": "msal/src/main/java/com/microsoft/identity/client/AuthenticationResult.java", "diffHunk": "@@ -39,15 +43,20 @@\n  */\n public final class AuthenticationResult implements IAuthenticationResult {\n \n+    private static final String TAG = AuthenticationResult.class.getSimpleName();\n+\n     private final String mTenantId;\n     private final AccessTokenRecord mAccessToken;\n     private final IAccount mAccount;\n+    private final UUID mCorrelationId;\n \n-    AuthenticationResult(@NonNull final List<ICacheRecord> cacheRecords) {\n+    AuthenticationResult(@NonNull final List<ICacheRecord> cacheRecords,\n+                         @Nullable final String correlationId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23cdbc28feda6f781e8a46f55424a81578a837bb"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxNDA5NA==", "bodyText": "We can expose a constructor overload that takes a UUID directly, but the conversion would have to happen somewhere as the correlation id that we pass around internally is a String.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1063#discussion_r438314094", "createdAt": "2020-06-10T18:05:14Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/AuthenticationResult.java", "diffHunk": "@@ -39,15 +43,20 @@\n  */\n public final class AuthenticationResult implements IAuthenticationResult {\n \n+    private static final String TAG = AuthenticationResult.class.getSimpleName();\n+\n     private final String mTenantId;\n     private final AccessTokenRecord mAccessToken;\n     private final IAccount mAccount;\n+    private final UUID mCorrelationId;\n \n-    AuthenticationResult(@NonNull final List<ICacheRecord> cacheRecords) {\n+    AuthenticationResult(@NonNull final List<ICacheRecord> cacheRecords,\n+                         @Nullable final String correlationId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4MDY4Ng=="}, "originalCommit": {"oid": "23cdbc28feda6f781e8a46f55424a81578a837bb"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMzNzE4Mw==", "bodyText": "Offline conversation, we emit this value on log lines, so an eager conversion is valid, and having this constructor is therefore appropriate.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1063#discussion_r438337183", "createdAt": "2020-06-10T18:46:59Z", "author": {"login": "AdamBJohnsonx"}, "path": "msal/src/main/java/com/microsoft/identity/client/AuthenticationResult.java", "diffHunk": "@@ -39,15 +43,20 @@\n  */\n public final class AuthenticationResult implements IAuthenticationResult {\n \n+    private static final String TAG = AuthenticationResult.class.getSimpleName();\n+\n     private final String mTenantId;\n     private final AccessTokenRecord mAccessToken;\n     private final IAccount mAccount;\n+    private final UUID mCorrelationId;\n \n-    AuthenticationResult(@NonNull final List<ICacheRecord> cacheRecords) {\n+    AuthenticationResult(@NonNull final List<ICacheRecord> cacheRecords,\n+                         @Nullable final String correlationId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4MDY4Ng=="}, "originalCommit": {"oid": "23cdbc28feda6f781e8a46f55424a81578a837bb"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzI2MzExOnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/TokenParameters.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMzo0MTowNVrOGhgCPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODo0Mzo0NFrOGiB3cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4MTA1Mg==", "bodyText": "Any need to eagerly convert it to a string here?  We could wait...", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1063#discussion_r437781052", "createdAt": "2020-06-09T23:41:05Z", "author": {"login": "AdamBJohnsonx"}, "path": "msal/src/main/java/com/microsoft/identity/client/TokenParameters.java", "diffHunk": "@@ -201,6 +209,11 @@ public B withResource(final String resource) {\n             return self();\n         }\n \n+        public B withCorrelationId(final UUID correlationId) {\n+            mCorrelationId = correlationId.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23cdbc28feda6f781e8a46f55424a81578a837bb"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxODA0Mg==", "bodyText": "If we do it later we would need to a check like this:\nif (tokenParameters.getCorrelationId() != null)\nbefore we try to convert it. I was just trying to avoid that, but we could certainly do what you are suggesting.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1063#discussion_r438318042", "createdAt": "2020-06-10T18:12:10Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/TokenParameters.java", "diffHunk": "@@ -201,6 +209,11 @@ public B withResource(final String resource) {\n             return self();\n         }\n \n+        public B withCorrelationId(final UUID correlationId) {\n+            mCorrelationId = correlationId.toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4MTA1Mg=="}, "originalCommit": {"oid": "23cdbc28feda6f781e8a46f55424a81578a837bb"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMzNTM0Nw==", "bodyText": "OK, via offline conversation, the reason to eagerly convert is so that we don't need to do it on every log statement.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1063#discussion_r438335347", "createdAt": "2020-06-10T18:43:44Z", "author": {"login": "AdamBJohnsonx"}, "path": "msal/src/main/java/com/microsoft/identity/client/TokenParameters.java", "diffHunk": "@@ -201,6 +209,11 @@ public B withResource(final String resource) {\n             return self();\n         }\n \n+        public B withCorrelationId(final UUID correlationId) {\n+            mCorrelationId = correlationId.toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4MTA1Mg=="}, "originalCommit": {"oid": "23cdbc28feda6f781e8a46f55424a81578a837bb"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDUyMTMxOnYy", "diffSide": "RIGHT", "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/AcquireTokenMockTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzo1NToyNlrOGiAN7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMToyNDo0OVrOGi0IqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwODMzMg==", "bodyText": "Should we test the behavior here with strings that are not valid UUIDs?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1063#discussion_r438308332", "createdAt": "2020-06-10T17:55:26Z", "author": {"login": "AdamBJohnsonx"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/AcquireTokenMockTest.java", "diffHunk": "@@ -335,6 +342,136 @@ public void testAcquireTokenSilentFailureNoCallback() {\n         flushScheduler();\n     }\n \n+    @Test\n+    public void testAcquireTokenInteractiveResultContainsSomeCorrelationId() {\n+        final String username = \"fake@test.com\";\n+\n+        final AcquireTokenParameters parameters = new AcquireTokenParameters.Builder()\n+                .startAuthorizationFromActivity(mActivity)\n+                .withLoginHint(username)\n+                .withScopes(Arrays.asList(mScopes))\n+                .fromAuthority(getAuthority())\n+                .withCallback(new AuthenticationCallback() {\n+                    @Override\n+                    public void onCancel() {\n+                        Assert.fail(\"Unexpected cancel\");\n+                    }\n+\n+                    @Override\n+                    public void onSuccess(IAuthenticationResult authenticationResult) {\n+                        Assert.assertFalse(StringUtil.isEmpty(authenticationResult.getAccessToken()));\n+                        Assert.assertNotNull(authenticationResult.getCorrelationId());\n+                        final String correlationId = authenticationResult.getCorrelationId().toString();\n+                        Assert.assertFalse(StringUtil.isEmpty(correlationId));\n+                    }\n+\n+                    @Override\n+                    public void onError(MsalException exception) {\n+                        Assert.fail(exception.getMessage());\n+                    }\n+                })\n+                .build();\n+\n+        mApplication.acquireToken(parameters);\n+        flushScheduler();\n+    }\n+\n+    @Test\n+    public void testAcquireTokenSilentResultContainsSomeCorrelationId() {\n+        final IAccount account = loadAccountForTest(mApplication);\n+\n+        final AcquireTokenSilentParameters silentParameters = new AcquireTokenSilentParameters.Builder()\n+                .withScopes(Arrays.asList(mScopes))\n+                .forceRefresh(true)\n+                .forAccount(account)\n+                .fromAuthority(getAuthority())\n+                .withCallback(new SilentAuthenticationCallback() {\n+                    @Override\n+                    public void onSuccess(IAuthenticationResult authenticationResult) {\n+                        Assert.assertFalse(StringUtil.isEmpty(authenticationResult.getAccessToken()));\n+                        Assert.assertNotNull(authenticationResult.getCorrelationId());\n+                        final String correlationId = authenticationResult.getCorrelationId().toString();\n+                        Assert.assertFalse(StringUtil.isEmpty(correlationId));\n+                    }\n+\n+                    @Override\n+                    public void onError(MsalException exception) {\n+                        Assert.fail(exception.getMessage());\n+                    }\n+                })\n+                .build();\n+\n+        mApplication.acquireTokenSilentAsync(silentParameters);\n+        flushScheduler();\n+    }\n+\n+    @Test\n+    public void testAcquireTokenInteractiveResultContainsProvidedCorrelationId() {\n+        final String username = \"fake@test.com\";\n+\n+        final UUID correlationId = UUID.randomUUID();\n+\n+        final AcquireTokenParameters parameters = new AcquireTokenParameters.Builder()\n+                .startAuthorizationFromActivity(mActivity)\n+                .withLoginHint(username)\n+                .withScopes(Arrays.asList(mScopes))\n+                .fromAuthority(getAuthority())\n+                .withCorrelationId(correlationId)\n+                .withCallback(new AuthenticationCallback() {\n+                    @Override\n+                    public void onCancel() {\n+                        Assert.fail(\"Unexpected cancel\");\n+                    }\n+\n+                    @Override\n+                    public void onSuccess(IAuthenticationResult authenticationResult) {\n+                        Assert.assertFalse(StringUtil.isEmpty(authenticationResult.getAccessToken()));\n+                        Assert.assertNotNull(authenticationResult.getCorrelationId());\n+                        Assert.assertEquals(correlationId, authenticationResult.getCorrelationId());\n+                    }\n+\n+                    @Override\n+                    public void onError(MsalException exception) {\n+                        Assert.fail(exception.getMessage());\n+                    }\n+                })\n+                .build();\n+\n+        mApplication.acquireToken(parameters);\n+        flushScheduler();\n+    }\n+\n+    @Test\n+    public void testAcquireTokenSilentResultContainsProvidedCorrelationId() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23cdbc28feda6f781e8a46f55424a81578a837bb"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxOTAzNw==", "bodyText": "I don't think we need to, the withCorrelationId method on TokenParametersBuilder only accepts a UUID. So if we actually pass a String, the compilation would break.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1063#discussion_r438319037", "createdAt": "2020-06-10T18:13:54Z", "author": {"login": "shahzaibj"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/AcquireTokenMockTest.java", "diffHunk": "@@ -335,6 +342,136 @@ public void testAcquireTokenSilentFailureNoCallback() {\n         flushScheduler();\n     }\n \n+    @Test\n+    public void testAcquireTokenInteractiveResultContainsSomeCorrelationId() {\n+        final String username = \"fake@test.com\";\n+\n+        final AcquireTokenParameters parameters = new AcquireTokenParameters.Builder()\n+                .startAuthorizationFromActivity(mActivity)\n+                .withLoginHint(username)\n+                .withScopes(Arrays.asList(mScopes))\n+                .fromAuthority(getAuthority())\n+                .withCallback(new AuthenticationCallback() {\n+                    @Override\n+                    public void onCancel() {\n+                        Assert.fail(\"Unexpected cancel\");\n+                    }\n+\n+                    @Override\n+                    public void onSuccess(IAuthenticationResult authenticationResult) {\n+                        Assert.assertFalse(StringUtil.isEmpty(authenticationResult.getAccessToken()));\n+                        Assert.assertNotNull(authenticationResult.getCorrelationId());\n+                        final String correlationId = authenticationResult.getCorrelationId().toString();\n+                        Assert.assertFalse(StringUtil.isEmpty(correlationId));\n+                    }\n+\n+                    @Override\n+                    public void onError(MsalException exception) {\n+                        Assert.fail(exception.getMessage());\n+                    }\n+                })\n+                .build();\n+\n+        mApplication.acquireToken(parameters);\n+        flushScheduler();\n+    }\n+\n+    @Test\n+    public void testAcquireTokenSilentResultContainsSomeCorrelationId() {\n+        final IAccount account = loadAccountForTest(mApplication);\n+\n+        final AcquireTokenSilentParameters silentParameters = new AcquireTokenSilentParameters.Builder()\n+                .withScopes(Arrays.asList(mScopes))\n+                .forceRefresh(true)\n+                .forAccount(account)\n+                .fromAuthority(getAuthority())\n+                .withCallback(new SilentAuthenticationCallback() {\n+                    @Override\n+                    public void onSuccess(IAuthenticationResult authenticationResult) {\n+                        Assert.assertFalse(StringUtil.isEmpty(authenticationResult.getAccessToken()));\n+                        Assert.assertNotNull(authenticationResult.getCorrelationId());\n+                        final String correlationId = authenticationResult.getCorrelationId().toString();\n+                        Assert.assertFalse(StringUtil.isEmpty(correlationId));\n+                    }\n+\n+                    @Override\n+                    public void onError(MsalException exception) {\n+                        Assert.fail(exception.getMessage());\n+                    }\n+                })\n+                .build();\n+\n+        mApplication.acquireTokenSilentAsync(silentParameters);\n+        flushScheduler();\n+    }\n+\n+    @Test\n+    public void testAcquireTokenInteractiveResultContainsProvidedCorrelationId() {\n+        final String username = \"fake@test.com\";\n+\n+        final UUID correlationId = UUID.randomUUID();\n+\n+        final AcquireTokenParameters parameters = new AcquireTokenParameters.Builder()\n+                .startAuthorizationFromActivity(mActivity)\n+                .withLoginHint(username)\n+                .withScopes(Arrays.asList(mScopes))\n+                .fromAuthority(getAuthority())\n+                .withCorrelationId(correlationId)\n+                .withCallback(new AuthenticationCallback() {\n+                    @Override\n+                    public void onCancel() {\n+                        Assert.fail(\"Unexpected cancel\");\n+                    }\n+\n+                    @Override\n+                    public void onSuccess(IAuthenticationResult authenticationResult) {\n+                        Assert.assertFalse(StringUtil.isEmpty(authenticationResult.getAccessToken()));\n+                        Assert.assertNotNull(authenticationResult.getCorrelationId());\n+                        Assert.assertEquals(correlationId, authenticationResult.getCorrelationId());\n+                    }\n+\n+                    @Override\n+                    public void onError(MsalException exception) {\n+                        Assert.fail(exception.getMessage());\n+                    }\n+                })\n+                .build();\n+\n+        mApplication.acquireToken(parameters);\n+        flushScheduler();\n+    }\n+\n+    @Test\n+    public void testAcquireTokenSilentResultContainsProvidedCorrelationId() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwODMzMg=="}, "originalCommit": {"oid": "23cdbc28feda6f781e8a46f55424a81578a837bb"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMyNjkyOQ==", "bodyText": "I didn't mean passing it in as invalid, I meant on the return in the LocalAuthenticationResult, so that we would exercise the code that sanitizes it.  We have it there, so we should be able to hit it in our tests.  Full discosure - I did not see whether this was possible using our testing strategy.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1063#discussion_r438326929", "createdAt": "2020-06-10T18:28:06Z", "author": {"login": "AdamBJohnsonx"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/AcquireTokenMockTest.java", "diffHunk": "@@ -335,6 +342,136 @@ public void testAcquireTokenSilentFailureNoCallback() {\n         flushScheduler();\n     }\n \n+    @Test\n+    public void testAcquireTokenInteractiveResultContainsSomeCorrelationId() {\n+        final String username = \"fake@test.com\";\n+\n+        final AcquireTokenParameters parameters = new AcquireTokenParameters.Builder()\n+                .startAuthorizationFromActivity(mActivity)\n+                .withLoginHint(username)\n+                .withScopes(Arrays.asList(mScopes))\n+                .fromAuthority(getAuthority())\n+                .withCallback(new AuthenticationCallback() {\n+                    @Override\n+                    public void onCancel() {\n+                        Assert.fail(\"Unexpected cancel\");\n+                    }\n+\n+                    @Override\n+                    public void onSuccess(IAuthenticationResult authenticationResult) {\n+                        Assert.assertFalse(StringUtil.isEmpty(authenticationResult.getAccessToken()));\n+                        Assert.assertNotNull(authenticationResult.getCorrelationId());\n+                        final String correlationId = authenticationResult.getCorrelationId().toString();\n+                        Assert.assertFalse(StringUtil.isEmpty(correlationId));\n+                    }\n+\n+                    @Override\n+                    public void onError(MsalException exception) {\n+                        Assert.fail(exception.getMessage());\n+                    }\n+                })\n+                .build();\n+\n+        mApplication.acquireToken(parameters);\n+        flushScheduler();\n+    }\n+\n+    @Test\n+    public void testAcquireTokenSilentResultContainsSomeCorrelationId() {\n+        final IAccount account = loadAccountForTest(mApplication);\n+\n+        final AcquireTokenSilentParameters silentParameters = new AcquireTokenSilentParameters.Builder()\n+                .withScopes(Arrays.asList(mScopes))\n+                .forceRefresh(true)\n+                .forAccount(account)\n+                .fromAuthority(getAuthority())\n+                .withCallback(new SilentAuthenticationCallback() {\n+                    @Override\n+                    public void onSuccess(IAuthenticationResult authenticationResult) {\n+                        Assert.assertFalse(StringUtil.isEmpty(authenticationResult.getAccessToken()));\n+                        Assert.assertNotNull(authenticationResult.getCorrelationId());\n+                        final String correlationId = authenticationResult.getCorrelationId().toString();\n+                        Assert.assertFalse(StringUtil.isEmpty(correlationId));\n+                    }\n+\n+                    @Override\n+                    public void onError(MsalException exception) {\n+                        Assert.fail(exception.getMessage());\n+                    }\n+                })\n+                .build();\n+\n+        mApplication.acquireTokenSilentAsync(silentParameters);\n+        flushScheduler();\n+    }\n+\n+    @Test\n+    public void testAcquireTokenInteractiveResultContainsProvidedCorrelationId() {\n+        final String username = \"fake@test.com\";\n+\n+        final UUID correlationId = UUID.randomUUID();\n+\n+        final AcquireTokenParameters parameters = new AcquireTokenParameters.Builder()\n+                .startAuthorizationFromActivity(mActivity)\n+                .withLoginHint(username)\n+                .withScopes(Arrays.asList(mScopes))\n+                .fromAuthority(getAuthority())\n+                .withCorrelationId(correlationId)\n+                .withCallback(new AuthenticationCallback() {\n+                    @Override\n+                    public void onCancel() {\n+                        Assert.fail(\"Unexpected cancel\");\n+                    }\n+\n+                    @Override\n+                    public void onSuccess(IAuthenticationResult authenticationResult) {\n+                        Assert.assertFalse(StringUtil.isEmpty(authenticationResult.getAccessToken()));\n+                        Assert.assertNotNull(authenticationResult.getCorrelationId());\n+                        Assert.assertEquals(correlationId, authenticationResult.getCorrelationId());\n+                    }\n+\n+                    @Override\n+                    public void onError(MsalException exception) {\n+                        Assert.fail(exception.getMessage());\n+                    }\n+                })\n+                .build();\n+\n+        mApplication.acquireToken(parameters);\n+        flushScheduler();\n+    }\n+\n+    @Test\n+    public void testAcquireTokenSilentResultContainsProvidedCorrelationId() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwODMzMg=="}, "originalCommit": {"oid": "23cdbc28feda6f781e8a46f55424a81578a837bb"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMyODk1Ng==", "bodyText": "I see - that shouldn't ever happen in MSAL, but you raise a good point, we can exercise it in UNIT test specifically for that scenario or we can change behavior using a Robolectric Shadow.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1063#discussion_r438328956", "createdAt": "2020-06-10T18:31:40Z", "author": {"login": "shahzaibj"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/AcquireTokenMockTest.java", "diffHunk": "@@ -335,6 +342,136 @@ public void testAcquireTokenSilentFailureNoCallback() {\n         flushScheduler();\n     }\n \n+    @Test\n+    public void testAcquireTokenInteractiveResultContainsSomeCorrelationId() {\n+        final String username = \"fake@test.com\";\n+\n+        final AcquireTokenParameters parameters = new AcquireTokenParameters.Builder()\n+                .startAuthorizationFromActivity(mActivity)\n+                .withLoginHint(username)\n+                .withScopes(Arrays.asList(mScopes))\n+                .fromAuthority(getAuthority())\n+                .withCallback(new AuthenticationCallback() {\n+                    @Override\n+                    public void onCancel() {\n+                        Assert.fail(\"Unexpected cancel\");\n+                    }\n+\n+                    @Override\n+                    public void onSuccess(IAuthenticationResult authenticationResult) {\n+                        Assert.assertFalse(StringUtil.isEmpty(authenticationResult.getAccessToken()));\n+                        Assert.assertNotNull(authenticationResult.getCorrelationId());\n+                        final String correlationId = authenticationResult.getCorrelationId().toString();\n+                        Assert.assertFalse(StringUtil.isEmpty(correlationId));\n+                    }\n+\n+                    @Override\n+                    public void onError(MsalException exception) {\n+                        Assert.fail(exception.getMessage());\n+                    }\n+                })\n+                .build();\n+\n+        mApplication.acquireToken(parameters);\n+        flushScheduler();\n+    }\n+\n+    @Test\n+    public void testAcquireTokenSilentResultContainsSomeCorrelationId() {\n+        final IAccount account = loadAccountForTest(mApplication);\n+\n+        final AcquireTokenSilentParameters silentParameters = new AcquireTokenSilentParameters.Builder()\n+                .withScopes(Arrays.asList(mScopes))\n+                .forceRefresh(true)\n+                .forAccount(account)\n+                .fromAuthority(getAuthority())\n+                .withCallback(new SilentAuthenticationCallback() {\n+                    @Override\n+                    public void onSuccess(IAuthenticationResult authenticationResult) {\n+                        Assert.assertFalse(StringUtil.isEmpty(authenticationResult.getAccessToken()));\n+                        Assert.assertNotNull(authenticationResult.getCorrelationId());\n+                        final String correlationId = authenticationResult.getCorrelationId().toString();\n+                        Assert.assertFalse(StringUtil.isEmpty(correlationId));\n+                    }\n+\n+                    @Override\n+                    public void onError(MsalException exception) {\n+                        Assert.fail(exception.getMessage());\n+                    }\n+                })\n+                .build();\n+\n+        mApplication.acquireTokenSilentAsync(silentParameters);\n+        flushScheduler();\n+    }\n+\n+    @Test\n+    public void testAcquireTokenInteractiveResultContainsProvidedCorrelationId() {\n+        final String username = \"fake@test.com\";\n+\n+        final UUID correlationId = UUID.randomUUID();\n+\n+        final AcquireTokenParameters parameters = new AcquireTokenParameters.Builder()\n+                .startAuthorizationFromActivity(mActivity)\n+                .withLoginHint(username)\n+                .withScopes(Arrays.asList(mScopes))\n+                .fromAuthority(getAuthority())\n+                .withCorrelationId(correlationId)\n+                .withCallback(new AuthenticationCallback() {\n+                    @Override\n+                    public void onCancel() {\n+                        Assert.fail(\"Unexpected cancel\");\n+                    }\n+\n+                    @Override\n+                    public void onSuccess(IAuthenticationResult authenticationResult) {\n+                        Assert.assertFalse(StringUtil.isEmpty(authenticationResult.getAccessToken()));\n+                        Assert.assertNotNull(authenticationResult.getCorrelationId());\n+                        Assert.assertEquals(correlationId, authenticationResult.getCorrelationId());\n+                    }\n+\n+                    @Override\n+                    public void onError(MsalException exception) {\n+                        Assert.fail(exception.getMessage());\n+                    }\n+                })\n+                .build();\n+\n+        mApplication.acquireToken(parameters);\n+        flushScheduler();\n+    }\n+\n+    @Test\n+    public void testAcquireTokenSilentResultContainsProvidedCorrelationId() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwODMzMg=="}, "originalCommit": {"oid": "23cdbc28feda6f781e8a46f55424a81578a837bb"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE1ODk1Mg==", "bodyText": "@AdamBJohnsonx Added unit tests for command parameters here: 4b194eb\nand added unit tests for Authentication Result here: 2d7e100", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1063#discussion_r439158952", "createdAt": "2020-06-12T01:24:49Z", "author": {"login": "shahzaibj"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/AcquireTokenMockTest.java", "diffHunk": "@@ -335,6 +342,136 @@ public void testAcquireTokenSilentFailureNoCallback() {\n         flushScheduler();\n     }\n \n+    @Test\n+    public void testAcquireTokenInteractiveResultContainsSomeCorrelationId() {\n+        final String username = \"fake@test.com\";\n+\n+        final AcquireTokenParameters parameters = new AcquireTokenParameters.Builder()\n+                .startAuthorizationFromActivity(mActivity)\n+                .withLoginHint(username)\n+                .withScopes(Arrays.asList(mScopes))\n+                .fromAuthority(getAuthority())\n+                .withCallback(new AuthenticationCallback() {\n+                    @Override\n+                    public void onCancel() {\n+                        Assert.fail(\"Unexpected cancel\");\n+                    }\n+\n+                    @Override\n+                    public void onSuccess(IAuthenticationResult authenticationResult) {\n+                        Assert.assertFalse(StringUtil.isEmpty(authenticationResult.getAccessToken()));\n+                        Assert.assertNotNull(authenticationResult.getCorrelationId());\n+                        final String correlationId = authenticationResult.getCorrelationId().toString();\n+                        Assert.assertFalse(StringUtil.isEmpty(correlationId));\n+                    }\n+\n+                    @Override\n+                    public void onError(MsalException exception) {\n+                        Assert.fail(exception.getMessage());\n+                    }\n+                })\n+                .build();\n+\n+        mApplication.acquireToken(parameters);\n+        flushScheduler();\n+    }\n+\n+    @Test\n+    public void testAcquireTokenSilentResultContainsSomeCorrelationId() {\n+        final IAccount account = loadAccountForTest(mApplication);\n+\n+        final AcquireTokenSilentParameters silentParameters = new AcquireTokenSilentParameters.Builder()\n+                .withScopes(Arrays.asList(mScopes))\n+                .forceRefresh(true)\n+                .forAccount(account)\n+                .fromAuthority(getAuthority())\n+                .withCallback(new SilentAuthenticationCallback() {\n+                    @Override\n+                    public void onSuccess(IAuthenticationResult authenticationResult) {\n+                        Assert.assertFalse(StringUtil.isEmpty(authenticationResult.getAccessToken()));\n+                        Assert.assertNotNull(authenticationResult.getCorrelationId());\n+                        final String correlationId = authenticationResult.getCorrelationId().toString();\n+                        Assert.assertFalse(StringUtil.isEmpty(correlationId));\n+                    }\n+\n+                    @Override\n+                    public void onError(MsalException exception) {\n+                        Assert.fail(exception.getMessage());\n+                    }\n+                })\n+                .build();\n+\n+        mApplication.acquireTokenSilentAsync(silentParameters);\n+        flushScheduler();\n+    }\n+\n+    @Test\n+    public void testAcquireTokenInteractiveResultContainsProvidedCorrelationId() {\n+        final String username = \"fake@test.com\";\n+\n+        final UUID correlationId = UUID.randomUUID();\n+\n+        final AcquireTokenParameters parameters = new AcquireTokenParameters.Builder()\n+                .startAuthorizationFromActivity(mActivity)\n+                .withLoginHint(username)\n+                .withScopes(Arrays.asList(mScopes))\n+                .fromAuthority(getAuthority())\n+                .withCorrelationId(correlationId)\n+                .withCallback(new AuthenticationCallback() {\n+                    @Override\n+                    public void onCancel() {\n+                        Assert.fail(\"Unexpected cancel\");\n+                    }\n+\n+                    @Override\n+                    public void onSuccess(IAuthenticationResult authenticationResult) {\n+                        Assert.assertFalse(StringUtil.isEmpty(authenticationResult.getAccessToken()));\n+                        Assert.assertNotNull(authenticationResult.getCorrelationId());\n+                        Assert.assertEquals(correlationId, authenticationResult.getCorrelationId());\n+                    }\n+\n+                    @Override\n+                    public void onError(MsalException exception) {\n+                        Assert.fail(exception.getMessage());\n+                    }\n+                })\n+                .build();\n+\n+        mApplication.acquireToken(parameters);\n+        flushScheduler();\n+    }\n+\n+    @Test\n+    public void testAcquireTokenSilentResultContainsProvidedCorrelationId() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwODMzMg=="}, "originalCommit": {"oid": "23cdbc28feda6f781e8a46f55424a81578a837bb"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDU2OTg0OnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/TokenParameters.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODowOToyM1rOGiAteQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMToyMzo0NVrOGi0HmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxNjQwOQ==", "bodyText": "Needs NonNull annotation", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1063#discussion_r438316409", "createdAt": "2020-06-10T18:09:23Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/TokenParameters.java", "diffHunk": "@@ -201,6 +209,11 @@ public B withResource(final String resource) {\n             return self();\n         }\n \n+        public B withCorrelationId(final UUID correlationId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23cdbc28feda6f781e8a46f55424a81578a837bb"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE1ODY4MQ==", "bodyText": "Addressed here: 6a71d1d", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1063#discussion_r439158681", "createdAt": "2020-06-12T01:23:45Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/TokenParameters.java", "diffHunk": "@@ -201,6 +209,11 @@ public B withResource(final String resource) {\n             return self();\n         }\n \n+        public B withCorrelationId(final UUID correlationId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxNjQwOQ=="}, "originalCommit": {"oid": "23cdbc28feda6f781e8a46f55424a81578a837bb"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNzk2NjQzOnYy", "diffSide": "RIGHT", "path": "msal/src/main/java/com/microsoft/identity/client/AuthenticationResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjowOTo0OFrOGjJmhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoyNzo0NFrOGjMFTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUxMDY2Mg==", "bodyText": "Could declare return value @Nullable", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1063#discussion_r439510662", "createdAt": "2020-06-12T16:09:48Z", "author": {"login": "iambmelt"}, "path": "msal/src/main/java/com/microsoft/identity/client/AuthenticationResult.java", "diffHunk": "@@ -108,4 +117,26 @@ public IAccount getAccount() {\n     public String[] getScope() {\n         return mAccessToken.getTarget().split(\"\\\\s\");\n     }\n+\n+    @Nullable\n+    @Override\n+    public UUID getCorrelationId() {\n+        return mCorrelationId;\n+    }\n+\n+    private UUID sanitizeCorrelationId(@Nullable final String correlationId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9a6fca96846ea1cb7a388be86669bec12900b95"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1MTMxMA==", "bodyText": "Addressed here: 353f465", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1063#discussion_r439551310", "createdAt": "2020-06-12T17:27:44Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/AuthenticationResult.java", "diffHunk": "@@ -108,4 +117,26 @@ public IAccount getAccount() {\n     public String[] getScope() {\n         return mAccessToken.getTarget().split(\"\\\\s\");\n     }\n+\n+    @Nullable\n+    @Override\n+    public UUID getCorrelationId() {\n+        return mCorrelationId;\n+    }\n+\n+    private UUID sanitizeCorrelationId(@Nullable final String correlationId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUxMDY2Mg=="}, "originalCommit": {"oid": "c9a6fca96846ea1cb7a388be86669bec12900b95"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNzk3MDQ1OnYy", "diffSide": "RIGHT", "path": "msal/src/test/java/com/microsoft/identity/client/AuthenticationResultTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjoxMDozMlrOGjJoyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzoyNzo1MVrOGjMFmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUxMTI0MA==", "bodyText": "License info?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1063#discussion_r439511240", "createdAt": "2020-06-12T16:10:32Z", "author": {"login": "iambmelt"}, "path": "msal/src/test/java/com/microsoft/identity/client/AuthenticationResultTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.microsoft.identity.client;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9a6fca96846ea1cb7a388be86669bec12900b95"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1MTM4NQ==", "bodyText": "Addressed here: 353f465", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1063#discussion_r439551385", "createdAt": "2020-06-12T17:27:51Z", "author": {"login": "shahzaibj"}, "path": "msal/src/test/java/com/microsoft/identity/client/AuthenticationResultTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.microsoft.identity.client;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUxMTI0MA=="}, "originalCommit": {"oid": "c9a6fca96846ea1cb7a388be86669bec12900b95"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1952, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}