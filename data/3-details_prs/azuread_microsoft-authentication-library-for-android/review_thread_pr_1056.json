{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1Mjg3Mjk0", "number": 1056, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjoxMzoyMlrOEBDeTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjoxMzoyMlrOEBDeTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTQwOTQzOnYy", "diffSide": "LEFT", "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/MSALControllerFactory.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjoxMzoyMlrOGctvrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMDoxMDozNVrOGcvUXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2Mjc5Ng==", "bodyText": "With this change, if in any case, AuthService, AccountManager and now ContentProvider , we will not try local right ?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1056#discussion_r432762796", "createdAt": "2020-05-29T22:13:22Z", "author": {"login": "kreedula"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/MSALControllerFactory.java", "diffHunk": "@@ -121,49 +121,36 @@ public static boolean brokerEligible(@NonNull final Context applicationContext,\n                                          @NonNull Authority authority,\n                                          @NonNull PublicClientApplicationConfiguration applicationConfiguration) throws MsalClientException {\n         final String methodName = \":brokerEligible\";\n-        final String logBrokerEligibleFalse = \"Eligible to call broker? [false]\";\n+        final String logBrokerEligibleFalse = \"Eligible to call broker? [false]. \";\n \n         //If app has asked for Broker or if the authority is not AAD return false\n         if (!applicationConfiguration.getUseBroker() || !(authority instanceof AzureActiveDirectoryAuthority)) {\n-            Logger.verbose(TAG + methodName, logBrokerEligibleFalse);\n-            Logger.verbose(TAG + methodName, \"App does not ask for Broker or the authority is not AAD authority.\");\n+            Logger.verbose(TAG + methodName, logBrokerEligibleFalse +\n+                    \"App does not ask for Broker or the authority is not AAD authority.\");\n             return false;\n         }\n \n         //Do not use broker when the audience is MSA only (personal accounts / consumers tenant alias)\n         AzureActiveDirectoryAuthority azureActiveDirectoryAuthority = (AzureActiveDirectoryAuthority) authority;\n \n         if (azureActiveDirectoryAuthority.getAudience() instanceof AnyPersonalAccount) {\n-            Logger.verbose(TAG + methodName, logBrokerEligibleFalse);\n-            Logger.verbose(TAG + methodName, \"The audience is MSA only.\");\n+            Logger.verbose(TAG + methodName, logBrokerEligibleFalse +\n+                    \"The audience is MSA only.\");\n             return false;\n         }\n \n         // Check if broker installed\n         if (!brokerInstalled(applicationContext)) {\n-            Logger.verbose(TAG + methodName, logBrokerEligibleFalse);\n-            Logger.verbose(TAG + methodName, \"Broker application is not installed.\");\n+            Logger.verbose(TAG + methodName, logBrokerEligibleFalse +\n+                    \"Broker application is not installed.\");\n             return false;\n         }\n \n-        // Check if MicrosoftAuthService supported or AccountManager permission granted", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "413eb1affdbf81fa4c480e953e52a0ed56f1ed9b"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2NTIyNw==", "bodyText": "yup it'll always return true (= try broker). at this stage we don't care if any of them are available (or not). We know that broker app is installed and the app is configured to use broker. that's it.\nerror checking will be done when we actually are getting strategies.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1056#discussion_r432765227", "createdAt": "2020-05-29T22:22:09Z", "author": {"login": "rpdome"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/MSALControllerFactory.java", "diffHunk": "@@ -121,49 +121,36 @@ public static boolean brokerEligible(@NonNull final Context applicationContext,\n                                          @NonNull Authority authority,\n                                          @NonNull PublicClientApplicationConfiguration applicationConfiguration) throws MsalClientException {\n         final String methodName = \":brokerEligible\";\n-        final String logBrokerEligibleFalse = \"Eligible to call broker? [false]\";\n+        final String logBrokerEligibleFalse = \"Eligible to call broker? [false]. \";\n \n         //If app has asked for Broker or if the authority is not AAD return false\n         if (!applicationConfiguration.getUseBroker() || !(authority instanceof AzureActiveDirectoryAuthority)) {\n-            Logger.verbose(TAG + methodName, logBrokerEligibleFalse);\n-            Logger.verbose(TAG + methodName, \"App does not ask for Broker or the authority is not AAD authority.\");\n+            Logger.verbose(TAG + methodName, logBrokerEligibleFalse +\n+                    \"App does not ask for Broker or the authority is not AAD authority.\");\n             return false;\n         }\n \n         //Do not use broker when the audience is MSA only (personal accounts / consumers tenant alias)\n         AzureActiveDirectoryAuthority azureActiveDirectoryAuthority = (AzureActiveDirectoryAuthority) authority;\n \n         if (azureActiveDirectoryAuthority.getAudience() instanceof AnyPersonalAccount) {\n-            Logger.verbose(TAG + methodName, logBrokerEligibleFalse);\n-            Logger.verbose(TAG + methodName, \"The audience is MSA only.\");\n+            Logger.verbose(TAG + methodName, logBrokerEligibleFalse +\n+                    \"The audience is MSA only.\");\n             return false;\n         }\n \n         // Check if broker installed\n         if (!brokerInstalled(applicationContext)) {\n-            Logger.verbose(TAG + methodName, logBrokerEligibleFalse);\n-            Logger.verbose(TAG + methodName, \"Broker application is not installed.\");\n+            Logger.verbose(TAG + methodName, logBrokerEligibleFalse +\n+                    \"Broker application is not installed.\");\n             return false;\n         }\n \n-        // Check if MicrosoftAuthService supported or AccountManager permission granted", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2Mjc5Ng=="}, "originalCommit": {"oid": "413eb1affdbf81fa4c480e953e52a0ed56f1ed9b"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3MDUwOQ==", "bodyText": "Is this the desired behavior though, with the previous check, if we can't connect to either of the strategies, we can atleast try local authentication. But with this change, we don't have the fallback of local authentication right?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1056#discussion_r432770509", "createdAt": "2020-05-29T22:41:51Z", "author": {"login": "kreedula"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/MSALControllerFactory.java", "diffHunk": "@@ -121,49 +121,36 @@ public static boolean brokerEligible(@NonNull final Context applicationContext,\n                                          @NonNull Authority authority,\n                                          @NonNull PublicClientApplicationConfiguration applicationConfiguration) throws MsalClientException {\n         final String methodName = \":brokerEligible\";\n-        final String logBrokerEligibleFalse = \"Eligible to call broker? [false]\";\n+        final String logBrokerEligibleFalse = \"Eligible to call broker? [false]. \";\n \n         //If app has asked for Broker or if the authority is not AAD return false\n         if (!applicationConfiguration.getUseBroker() || !(authority instanceof AzureActiveDirectoryAuthority)) {\n-            Logger.verbose(TAG + methodName, logBrokerEligibleFalse);\n-            Logger.verbose(TAG + methodName, \"App does not ask for Broker or the authority is not AAD authority.\");\n+            Logger.verbose(TAG + methodName, logBrokerEligibleFalse +\n+                    \"App does not ask for Broker or the authority is not AAD authority.\");\n             return false;\n         }\n \n         //Do not use broker when the audience is MSA only (personal accounts / consumers tenant alias)\n         AzureActiveDirectoryAuthority azureActiveDirectoryAuthority = (AzureActiveDirectoryAuthority) authority;\n \n         if (azureActiveDirectoryAuthority.getAudience() instanceof AnyPersonalAccount) {\n-            Logger.verbose(TAG + methodName, logBrokerEligibleFalse);\n-            Logger.verbose(TAG + methodName, \"The audience is MSA only.\");\n+            Logger.verbose(TAG + methodName, logBrokerEligibleFalse +\n+                    \"The audience is MSA only.\");\n             return false;\n         }\n \n         // Check if broker installed\n         if (!brokerInstalled(applicationContext)) {\n-            Logger.verbose(TAG + methodName, logBrokerEligibleFalse);\n-            Logger.verbose(TAG + methodName, \"Broker application is not installed.\");\n+            Logger.verbose(TAG + methodName, logBrokerEligibleFalse +\n+                    \"Broker application is not installed.\");\n             return false;\n         }\n \n-        // Check if MicrosoftAuthService supported or AccountManager permission granted", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2Mjc5Ng=="}, "originalCommit": {"oid": "413eb1affdbf81fa4c480e953e52a0ed56f1ed9b"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3OTgyMw==", "bodyText": "Actually, for get/remove account, acquiretokensilent call, throwing an exception here means that it won't be using local cache...\nIn this case this is a behavior change. The question is what should be the desired one? Given that local is always called first, maybe the code was bugged all along?\n(Note that these are actually not trying to 'connect'. We just verify if broker with a valid service/permission is there. Maybe that's why we never notice the issue.)", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1056#discussion_r432779823", "createdAt": "2020-05-29T23:22:05Z", "author": {"login": "rpdome"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/MSALControllerFactory.java", "diffHunk": "@@ -121,49 +121,36 @@ public static boolean brokerEligible(@NonNull final Context applicationContext,\n                                          @NonNull Authority authority,\n                                          @NonNull PublicClientApplicationConfiguration applicationConfiguration) throws MsalClientException {\n         final String methodName = \":brokerEligible\";\n-        final String logBrokerEligibleFalse = \"Eligible to call broker? [false]\";\n+        final String logBrokerEligibleFalse = \"Eligible to call broker? [false]. \";\n \n         //If app has asked for Broker or if the authority is not AAD return false\n         if (!applicationConfiguration.getUseBroker() || !(authority instanceof AzureActiveDirectoryAuthority)) {\n-            Logger.verbose(TAG + methodName, logBrokerEligibleFalse);\n-            Logger.verbose(TAG + methodName, \"App does not ask for Broker or the authority is not AAD authority.\");\n+            Logger.verbose(TAG + methodName, logBrokerEligibleFalse +\n+                    \"App does not ask for Broker or the authority is not AAD authority.\");\n             return false;\n         }\n \n         //Do not use broker when the audience is MSA only (personal accounts / consumers tenant alias)\n         AzureActiveDirectoryAuthority azureActiveDirectoryAuthority = (AzureActiveDirectoryAuthority) authority;\n \n         if (azureActiveDirectoryAuthority.getAudience() instanceof AnyPersonalAccount) {\n-            Logger.verbose(TAG + methodName, logBrokerEligibleFalse);\n-            Logger.verbose(TAG + methodName, \"The audience is MSA only.\");\n+            Logger.verbose(TAG + methodName, logBrokerEligibleFalse +\n+                    \"The audience is MSA only.\");\n             return false;\n         }\n \n         // Check if broker installed\n         if (!brokerInstalled(applicationContext)) {\n-            Logger.verbose(TAG + methodName, logBrokerEligibleFalse);\n-            Logger.verbose(TAG + methodName, \"Broker application is not installed.\");\n+            Logger.verbose(TAG + methodName, logBrokerEligibleFalse +\n+                    \"Broker application is not installed.\");\n             return false;\n         }\n \n-        // Check if MicrosoftAuthService supported or AccountManager permission granted", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2Mjc5Ng=="}, "originalCommit": {"oid": "413eb1affdbf81fa4c480e953e52a0ed56f1ed9b"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc4NDEzNA==", "bodyText": "We use MSALControllerFactory.getAllControllers for all silent/get/remove accounts right. It will add LocalMsalController first and then checks eligilibilty for BrokerMsalController and adds it. So, no behavior change here.\nFor interactive requests we use MSALControllerFactory.getDefaultController right, where if broker is eligible, we use BrokerMsalController and else LocalMsalController , so that would be a behavior chang.  If validation checks for these strategies are removed, we pick BrokerMSalController and then if validation fails later , we wont do local authentication.\nBut again, are these checks to validate AuthService and AccountManager can ever be false ?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1056#discussion_r432784134", "createdAt": "2020-05-29T23:44:15Z", "author": {"login": "kreedula"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/MSALControllerFactory.java", "diffHunk": "@@ -121,49 +121,36 @@ public static boolean brokerEligible(@NonNull final Context applicationContext,\n                                          @NonNull Authority authority,\n                                          @NonNull PublicClientApplicationConfiguration applicationConfiguration) throws MsalClientException {\n         final String methodName = \":brokerEligible\";\n-        final String logBrokerEligibleFalse = \"Eligible to call broker? [false]\";\n+        final String logBrokerEligibleFalse = \"Eligible to call broker? [false]. \";\n \n         //If app has asked for Broker or if the authority is not AAD return false\n         if (!applicationConfiguration.getUseBroker() || !(authority instanceof AzureActiveDirectoryAuthority)) {\n-            Logger.verbose(TAG + methodName, logBrokerEligibleFalse);\n-            Logger.verbose(TAG + methodName, \"App does not ask for Broker or the authority is not AAD authority.\");\n+            Logger.verbose(TAG + methodName, logBrokerEligibleFalse +\n+                    \"App does not ask for Broker or the authority is not AAD authority.\");\n             return false;\n         }\n \n         //Do not use broker when the audience is MSA only (personal accounts / consumers tenant alias)\n         AzureActiveDirectoryAuthority azureActiveDirectoryAuthority = (AzureActiveDirectoryAuthority) authority;\n \n         if (azureActiveDirectoryAuthority.getAudience() instanceof AnyPersonalAccount) {\n-            Logger.verbose(TAG + methodName, logBrokerEligibleFalse);\n-            Logger.verbose(TAG + methodName, \"The audience is MSA only.\");\n+            Logger.verbose(TAG + methodName, logBrokerEligibleFalse +\n+                    \"The audience is MSA only.\");\n             return false;\n         }\n \n         // Check if broker installed\n         if (!brokerInstalled(applicationContext)) {\n-            Logger.verbose(TAG + methodName, logBrokerEligibleFalse);\n-            Logger.verbose(TAG + methodName, \"Broker application is not installed.\");\n+            Logger.verbose(TAG + methodName, logBrokerEligibleFalse +\n+                    \"Broker application is not installed.\");\n             return false;\n         }\n \n-        // Check if MicrosoftAuthService supported or AccountManager permission granted", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2Mjc5Ng=="}, "originalCommit": {"oid": "413eb1affdbf81fa4c480e953e52a0ed56f1ed9b"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc4NjMwNQ==", "bodyText": "with the old logic, if any of the checks failed it would throw exception right away. Given that this function is invoked in getAllController(), it means that it won't proceed with the LocalMsalController that was previously added to the list.\nWith this change, it would return true. BrokerMsalStrategy will be added to the list and will be executed after LocalMsalStrategy, but it won't be using any strategy (as the checks will fail in getStrategies())\nisMicrosoftAuthServiceSupported() checks if the bind service exists in broker, so the only scenario it would fail would be when the user uses BrokerV1.\naccount manager looks for API version, permission, etc, but given that the is an or clause, this should never fail if BrokerV2 is installed.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1056#discussion_r432786305", "createdAt": "2020-05-29T23:55:37Z", "author": {"login": "rpdome"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/MSALControllerFactory.java", "diffHunk": "@@ -121,49 +121,36 @@ public static boolean brokerEligible(@NonNull final Context applicationContext,\n                                          @NonNull Authority authority,\n                                          @NonNull PublicClientApplicationConfiguration applicationConfiguration) throws MsalClientException {\n         final String methodName = \":brokerEligible\";\n-        final String logBrokerEligibleFalse = \"Eligible to call broker? [false]\";\n+        final String logBrokerEligibleFalse = \"Eligible to call broker? [false]. \";\n \n         //If app has asked for Broker or if the authority is not AAD return false\n         if (!applicationConfiguration.getUseBroker() || !(authority instanceof AzureActiveDirectoryAuthority)) {\n-            Logger.verbose(TAG + methodName, logBrokerEligibleFalse);\n-            Logger.verbose(TAG + methodName, \"App does not ask for Broker or the authority is not AAD authority.\");\n+            Logger.verbose(TAG + methodName, logBrokerEligibleFalse +\n+                    \"App does not ask for Broker or the authority is not AAD authority.\");\n             return false;\n         }\n \n         //Do not use broker when the audience is MSA only (personal accounts / consumers tenant alias)\n         AzureActiveDirectoryAuthority azureActiveDirectoryAuthority = (AzureActiveDirectoryAuthority) authority;\n \n         if (azureActiveDirectoryAuthority.getAudience() instanceof AnyPersonalAccount) {\n-            Logger.verbose(TAG + methodName, logBrokerEligibleFalse);\n-            Logger.verbose(TAG + methodName, \"The audience is MSA only.\");\n+            Logger.verbose(TAG + methodName, logBrokerEligibleFalse +\n+                    \"The audience is MSA only.\");\n             return false;\n         }\n \n         // Check if broker installed\n         if (!brokerInstalled(applicationContext)) {\n-            Logger.verbose(TAG + methodName, logBrokerEligibleFalse);\n-            Logger.verbose(TAG + methodName, \"Broker application is not installed.\");\n+            Logger.verbose(TAG + methodName, logBrokerEligibleFalse +\n+                    \"Broker application is not installed.\");\n             return false;\n         }\n \n-        // Check if MicrosoftAuthService supported or AccountManager permission granted", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2Mjc5Ng=="}, "originalCommit": {"oid": "413eb1affdbf81fa4c480e953e52a0ed56f1ed9b"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc4ODU3NA==", "bodyText": "Wow I was under the impression, it returns a boolean, so it's busted all along \ud83d\ude06", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1056#discussion_r432788574", "createdAt": "2020-05-30T00:10:35Z", "author": {"login": "kreedula"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/MSALControllerFactory.java", "diffHunk": "@@ -121,49 +121,36 @@ public static boolean brokerEligible(@NonNull final Context applicationContext,\n                                          @NonNull Authority authority,\n                                          @NonNull PublicClientApplicationConfiguration applicationConfiguration) throws MsalClientException {\n         final String methodName = \":brokerEligible\";\n-        final String logBrokerEligibleFalse = \"Eligible to call broker? [false]\";\n+        final String logBrokerEligibleFalse = \"Eligible to call broker? [false]. \";\n \n         //If app has asked for Broker or if the authority is not AAD return false\n         if (!applicationConfiguration.getUseBroker() || !(authority instanceof AzureActiveDirectoryAuthority)) {\n-            Logger.verbose(TAG + methodName, logBrokerEligibleFalse);\n-            Logger.verbose(TAG + methodName, \"App does not ask for Broker or the authority is not AAD authority.\");\n+            Logger.verbose(TAG + methodName, logBrokerEligibleFalse +\n+                    \"App does not ask for Broker or the authority is not AAD authority.\");\n             return false;\n         }\n \n         //Do not use broker when the audience is MSA only (personal accounts / consumers tenant alias)\n         AzureActiveDirectoryAuthority azureActiveDirectoryAuthority = (AzureActiveDirectoryAuthority) authority;\n \n         if (azureActiveDirectoryAuthority.getAudience() instanceof AnyPersonalAccount) {\n-            Logger.verbose(TAG + methodName, logBrokerEligibleFalse);\n-            Logger.verbose(TAG + methodName, \"The audience is MSA only.\");\n+            Logger.verbose(TAG + methodName, logBrokerEligibleFalse +\n+                    \"The audience is MSA only.\");\n             return false;\n         }\n \n         // Check if broker installed\n         if (!brokerInstalled(applicationContext)) {\n-            Logger.verbose(TAG + methodName, logBrokerEligibleFalse);\n-            Logger.verbose(TAG + methodName, \"Broker application is not installed.\");\n+            Logger.verbose(TAG + methodName, logBrokerEligibleFalse +\n+                    \"Broker application is not installed.\");\n             return false;\n         }\n \n-        // Check if MicrosoftAuthService supported or AccountManager permission granted", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2Mjc5Ng=="}, "originalCommit": {"oid": "413eb1affdbf81fa4c480e953e52a0ed56f1ed9b"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1948, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}