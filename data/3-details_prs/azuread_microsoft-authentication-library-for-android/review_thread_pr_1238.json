{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2NzU5NTky", "number": 1238, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMjozOToxNFrOE9dLvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMjozOTozMlrOE9dL_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODc2NzM0OnYy", "diffSide": "RIGHT", "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/MsalLoggingRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMjozOToxNFrOH6J4HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQyMTo1MTo1N1rOH7dcug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc0MTI3Nw==", "bodyText": "nit: if you converted the level first, or used a function to do it, there would only be one call to msialfilelogappender.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1238#discussion_r530741277", "createdAt": "2020-11-26T02:39:14Z", "author": {"login": "AdamBJohnsonx"}, "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/MsalLoggingRule.java", "diffHunk": "@@ -0,0 +1,92 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp;\n+\n+import com.microsoft.identity.client.ILoggerCallback;\n+import com.microsoft.identity.client.Logger;\n+import com.microsoft.identity.client.ui.automation.logging.LogLevel;\n+import com.microsoft.identity.client.ui.automation.logging.appender.FileAppender;\n+import com.microsoft.identity.client.ui.automation.logging.formatter.LogcatLikeFormatter;\n+import com.microsoft.identity.client.ui.automation.utils.CommonUtils;\n+\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import java.io.IOException;\n+\n+/**\n+ * A Junit Rule to enable MSAL logging during automation and set external logger to dump these logs\n+ * to a separate file.\n+ */\n+public class MsalLoggingRule implements TestRule {\n+\n+    final static String LOG_FOLDER_NAME = \"automation\";\n+\n+    @Override\n+    public Statement apply(final Statement base, final Description description) {\n+        return new Statement() {\n+            @Override\n+            public void evaluate() throws Throwable {\n+                final FileAppender msalLogFileAppender = turnOnMsalLogging(description);\n+\n+                base.evaluate();\n+\n+                msalLogFileAppender.closeWriter();\n+\n+                CommonUtils.copyFileToFolderInSdCard(\n+                        msalLogFileAppender.getLogFile(),\n+                        LOG_FOLDER_NAME\n+                );\n+            }\n+        };\n+    }\n+\n+    private FileAppender turnOnMsalLogging(final Description description) throws IOException {\n+        final String msalLogFileName = description.getMethodName() + \"-msal.log\";\n+        final FileAppender msalfileLogAppender = new FileAppender(msalLogFileName, new LogcatLikeFormatter());\n+        Logger.getInstance().setLogLevel(Logger.LogLevel.VERBOSE);\n+        Logger.getInstance().setEnableLogcatLog(false);\n+        Logger.getInstance().setExternalLogger(new ILoggerCallback() {\n+            @Override\n+            public void log(String tag, Logger.LogLevel logLevel, String message, boolean containsPII) {\n+                switch (logLevel) {\n+                    case VERBOSE:\n+                        msalfileLogAppender.append(LogLevel.VERBOSE, tag, message, null);\n+                        break;\n+                    case INFO:\n+                        msalfileLogAppender.append(LogLevel.INFO, tag, message, null);\n+                        break;\n+                    case ERROR:\n+                        msalfileLogAppender.append(LogLevel.ERROR, tag, message, null);\n+                        break;\n+                    case WARNING:\n+                        msalfileLogAppender.append(LogLevel.WARN, tag, message, null);\n+                        break;\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "636a46fe87e86f7e7cae3f85568d1cc05219c1d5"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjExMDUyMg==", "bodyText": "Addressed", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1238#discussion_r532110522", "createdAt": "2020-11-28T21:51:57Z", "author": {"login": "shahzaibj"}, "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/MsalLoggingRule.java", "diffHunk": "@@ -0,0 +1,92 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp;\n+\n+import com.microsoft.identity.client.ILoggerCallback;\n+import com.microsoft.identity.client.Logger;\n+import com.microsoft.identity.client.ui.automation.logging.LogLevel;\n+import com.microsoft.identity.client.ui.automation.logging.appender.FileAppender;\n+import com.microsoft.identity.client.ui.automation.logging.formatter.LogcatLikeFormatter;\n+import com.microsoft.identity.client.ui.automation.utils.CommonUtils;\n+\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import java.io.IOException;\n+\n+/**\n+ * A Junit Rule to enable MSAL logging during automation and set external logger to dump these logs\n+ * to a separate file.\n+ */\n+public class MsalLoggingRule implements TestRule {\n+\n+    final static String LOG_FOLDER_NAME = \"automation\";\n+\n+    @Override\n+    public Statement apply(final Statement base, final Description description) {\n+        return new Statement() {\n+            @Override\n+            public void evaluate() throws Throwable {\n+                final FileAppender msalLogFileAppender = turnOnMsalLogging(description);\n+\n+                base.evaluate();\n+\n+                msalLogFileAppender.closeWriter();\n+\n+                CommonUtils.copyFileToFolderInSdCard(\n+                        msalLogFileAppender.getLogFile(),\n+                        LOG_FOLDER_NAME\n+                );\n+            }\n+        };\n+    }\n+\n+    private FileAppender turnOnMsalLogging(final Description description) throws IOException {\n+        final String msalLogFileName = description.getMethodName() + \"-msal.log\";\n+        final FileAppender msalfileLogAppender = new FileAppender(msalLogFileName, new LogcatLikeFormatter());\n+        Logger.getInstance().setLogLevel(Logger.LogLevel.VERBOSE);\n+        Logger.getInstance().setEnableLogcatLog(false);\n+        Logger.getInstance().setExternalLogger(new ILoggerCallback() {\n+            @Override\n+            public void log(String tag, Logger.LogLevel logLevel, String message, boolean containsPII) {\n+                switch (logLevel) {\n+                    case VERBOSE:\n+                        msalfileLogAppender.append(LogLevel.VERBOSE, tag, message, null);\n+                        break;\n+                    case INFO:\n+                        msalfileLogAppender.append(LogLevel.INFO, tag, message, null);\n+                        break;\n+                    case ERROR:\n+                        msalfileLogAppender.append(LogLevel.ERROR, tag, message, null);\n+                        break;\n+                    case WARNING:\n+                        msalfileLogAppender.append(LogLevel.WARN, tag, message, null);\n+                        break;\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc0MTI3Nw=="}, "originalCommit": {"oid": "636a46fe87e86f7e7cae3f85568d1cc05219c1d5"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODc2Nzk3OnYy", "diffSide": "RIGHT", "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/MsalLoggingRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMjozOTozMlrOH6J4cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQyMTo1MjowMlrOH7dcwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc0MTM2Mg==", "bodyText": "nit: msalFileLogAppender?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1238#discussion_r530741362", "createdAt": "2020-11-26T02:39:32Z", "author": {"login": "AdamBJohnsonx"}, "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/MsalLoggingRule.java", "diffHunk": "@@ -0,0 +1,92 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp;\n+\n+import com.microsoft.identity.client.ILoggerCallback;\n+import com.microsoft.identity.client.Logger;\n+import com.microsoft.identity.client.ui.automation.logging.LogLevel;\n+import com.microsoft.identity.client.ui.automation.logging.appender.FileAppender;\n+import com.microsoft.identity.client.ui.automation.logging.formatter.LogcatLikeFormatter;\n+import com.microsoft.identity.client.ui.automation.utils.CommonUtils;\n+\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import java.io.IOException;\n+\n+/**\n+ * A Junit Rule to enable MSAL logging during automation and set external logger to dump these logs\n+ * to a separate file.\n+ */\n+public class MsalLoggingRule implements TestRule {\n+\n+    final static String LOG_FOLDER_NAME = \"automation\";\n+\n+    @Override\n+    public Statement apply(final Statement base, final Description description) {\n+        return new Statement() {\n+            @Override\n+            public void evaluate() throws Throwable {\n+                final FileAppender msalLogFileAppender = turnOnMsalLogging(description);\n+\n+                base.evaluate();\n+\n+                msalLogFileAppender.closeWriter();\n+\n+                CommonUtils.copyFileToFolderInSdCard(\n+                        msalLogFileAppender.getLogFile(),\n+                        LOG_FOLDER_NAME\n+                );\n+            }\n+        };\n+    }\n+\n+    private FileAppender turnOnMsalLogging(final Description description) throws IOException {\n+        final String msalLogFileName = description.getMethodName() + \"-msal.log\";\n+        final FileAppender msalfileLogAppender = new FileAppender(msalLogFileName, new LogcatLikeFormatter());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "636a46fe87e86f7e7cae3f85568d1cc05219c1d5"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjExMDUyOA==", "bodyText": "Addressed", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1238#discussion_r532110528", "createdAt": "2020-11-28T21:52:02Z", "author": {"login": "shahzaibj"}, "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/MsalLoggingRule.java", "diffHunk": "@@ -0,0 +1,92 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp;\n+\n+import com.microsoft.identity.client.ILoggerCallback;\n+import com.microsoft.identity.client.Logger;\n+import com.microsoft.identity.client.ui.automation.logging.LogLevel;\n+import com.microsoft.identity.client.ui.automation.logging.appender.FileAppender;\n+import com.microsoft.identity.client.ui.automation.logging.formatter.LogcatLikeFormatter;\n+import com.microsoft.identity.client.ui.automation.utils.CommonUtils;\n+\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import java.io.IOException;\n+\n+/**\n+ * A Junit Rule to enable MSAL logging during automation and set external logger to dump these logs\n+ * to a separate file.\n+ */\n+public class MsalLoggingRule implements TestRule {\n+\n+    final static String LOG_FOLDER_NAME = \"automation\";\n+\n+    @Override\n+    public Statement apply(final Statement base, final Description description) {\n+        return new Statement() {\n+            @Override\n+            public void evaluate() throws Throwable {\n+                final FileAppender msalLogFileAppender = turnOnMsalLogging(description);\n+\n+                base.evaluate();\n+\n+                msalLogFileAppender.closeWriter();\n+\n+                CommonUtils.copyFileToFolderInSdCard(\n+                        msalLogFileAppender.getLogFile(),\n+                        LOG_FOLDER_NAME\n+                );\n+            }\n+        };\n+    }\n+\n+    private FileAppender turnOnMsalLogging(final Description description) throws IOException {\n+        final String msalLogFileName = description.getMethodName() + \"-msal.log\";\n+        final FileAppender msalfileLogAppender = new FileAppender(msalLogFileName, new LogcatLikeFormatter());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc0MTM2Mg=="}, "originalCommit": {"oid": "636a46fe87e86f7e7cae3f85568d1cc05219c1d5"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1878, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}