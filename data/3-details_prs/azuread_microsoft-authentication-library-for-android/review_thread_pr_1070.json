{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0ODc1MTY0", "number": 1070, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxOTozNjoxN1rOEGFMZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxOTozNjoxN1rOEGFMZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODEyMDA3OnYy", "diffSide": "RIGHT", "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/SingleAccountOverloadsMockedTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxOTozNjoxN1rOGkqU5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDoxMjoxMVrOGkrccQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA5NTM5Ng==", "bodyText": "I see this at the conclusion of a few different tests; would this block make sense to put into an @After block?\n(Also, I can't remember why we need to flush the scheduler here; is this to reset thread state after test?)", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1070#discussion_r441095396", "createdAt": "2020-06-16T19:36:17Z", "author": {"login": "iambmelt"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/SingleAccountOverloadsMockedTest.java", "diffHunk": "@@ -0,0 +1,419 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.tests.mocked;\n+\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.client.Account;\n+import com.microsoft.identity.client.AcquireTokenParameters;\n+import com.microsoft.identity.client.AcquireTokenSilentParameters;\n+import com.microsoft.identity.client.AuthenticationCallback;\n+import com.microsoft.identity.client.IAccount;\n+import com.microsoft.identity.client.IAuthenticationResult;\n+import com.microsoft.identity.client.ISingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.Prompt;\n+import com.microsoft.identity.client.SingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.e2e.shadows.ShadowAuthorityForMockHttpResponse;\n+import com.microsoft.identity.client.e2e.shadows.ShadowHttpRequestForMockedTest;\n+import com.microsoft.identity.client.e2e.shadows.ShadowMsalUtils;\n+import com.microsoft.identity.client.e2e.shadows.ShadowOpenIdProviderConfigurationClient;\n+import com.microsoft.identity.client.e2e.shadows.ShadowStorageHelper;\n+import com.microsoft.identity.client.e2e.tests.AcquireTokenAbstractTest;\n+import com.microsoft.identity.client.e2e.utils.AcquireTokenTestHelper;\n+import com.microsoft.identity.client.e2e.utils.RoboTestUtils;\n+import com.microsoft.identity.client.exception.MsalClientException;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.common.exception.ServiceException;\n+import com.microsoft.identity.common.internal.providers.oauth2.IDToken;\n+import com.microsoft.identity.internal.testutils.MockHttpResponse;\n+import com.microsoft.identity.internal.testutils.TestConstants;\n+import com.microsoft.identity.internal.testutils.TestUtils;\n+import com.microsoft.identity.internal.testutils.mocks.MockServerResponse;\n+import com.microsoft.identity.internal.testutils.mocks.MockTokenCreator;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import edu.emory.mathcs.backport.java.util.Arrays;\n+\n+import static com.microsoft.identity.internal.testutils.TestConstants.Scopes.USER_READ_SCOPE;\n+import static com.microsoft.identity.internal.testutils.mocks.MockTokenCreator.MOCK_PREFERRED_USERNAME_VALUE;\n+import static org.junit.Assert.fail;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(shadows = {\n+        ShadowStorageHelper.class,\n+        ShadowAuthorityForMockHttpResponse.class,\n+        ShadowHttpRequestForMockedTest.class,\n+        ShadowMsalUtils.class,\n+        ShadowOpenIdProviderConfigurationClient.class\n+})\n+public class SingleAccountOverloadsMockedTest extends AcquireTokenAbstractTest {\n+\n+    private SingleAccountPublicClientApplication mSingleAccountPCA;\n+    private String mUsername = MOCK_PREFERRED_USERNAME_VALUE;\n+\n+    @Before\n+    public void setup() {\n+        super.setup();\n+        TestUtils.clearCache(SingleAccountPublicClientApplication.SINGLE_ACCOUNT_CREDENTIAL_SHARED_PREFERENCES);\n+        mSingleAccountPCA = (SingleAccountPublicClientApplication) mApplication;\n+        MockHttpResponse.setHttpResponse(MockServerResponse.getMockTokenSuccessResponse());\n+    }\n+\n+    @Test\n+    public void testSignInOnlyAllowedOnce() {\n+        mSingleAccountPCA.signIn(mActivity, mUsername, mScopes, getSuccessExpectedCallback());\n+        RoboTestUtils.flushScheduler();\n+\n+        mSingleAccountPCA.signIn(mActivity, mUsername, mScopes, getInvalidParameterExpectedCallback());\n+    }\n+\n+    @Test\n+    public void testSignInWithPromptOnlyAllowedOnce() {\n+        mSingleAccountPCA.signIn(mActivity, mUsername, mScopes, Prompt.LOGIN, getSuccessExpectedCallback());\n+        RoboTestUtils.flushScheduler();\n+\n+        mSingleAccountPCA.signIn(mActivity, mUsername, mScopes, Prompt.LOGIN, getInvalidParameterExpectedCallback());\n+    }\n+\n+    @Test\n+    public void testSignInAgainAllowsSignInAgain() {\n+        mSingleAccountPCA.signIn(mActivity, mUsername, mScopes, getSuccessExpectedCallback());\n+        RoboTestUtils.flushScheduler();\n+\n+        mSingleAccountPCA.signInAgain(mActivity, mScopes, Prompt.LOGIN, getSuccessExpectedCallback());\n+        RoboTestUtils.flushScheduler();\n+    }\n+\n+    @Test\n+    public void testCannotSignInAgainIfNeverSignedInBefore() {\n+        mSingleAccountPCA.signInAgain(mActivity, mScopes, Prompt.LOGIN, getNoCurrentAccountExpectedCallback());\n+    }\n+\n+    @Test\n+    public void testCanSignOutIfAlreadySignedIn() {\n+        mSingleAccountPCA.signIn(mActivity, mUsername, mScopes, getSuccessExpectedCallback());\n+        RoboTestUtils.flushScheduler();\n+\n+        mSingleAccountPCA.signOut(new ISingleAccountPublicClientApplication.SignOutCallback() {\n+            @Override\n+            public void onSignOut() {\n+                Assert.assertTrue(\"Successfully signed out\", true);\n+            }\n+\n+            @Override\n+            public void onError(@NonNull MsalException exception) {\n+                fail(exception.getMessage());\n+            }\n+        });\n+\n+        RoboTestUtils.flushScheduler();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d69f605ed03a32ad5df149fcf2c219aeab02472"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEwNzE2Mw==", "bodyText": "flushScheduler is being used in Robolectric tests to wait for the current runnable to finish executing and advance to the next runnable. It is similar to the CountDownLatch mechanism.\nThis is not being used on per-test basis but rather on every request that is expected to go through the command dispatcher i.e any request that is going to be run on a different thread. So we use flushScheduler to advance in that case otherwise Robolectric tests will just be hung forever.\nSo essentially it can't go on the @After block as it would have to be done on the level of each token request or other API execution.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1070#discussion_r441107163", "createdAt": "2020-06-16T19:58:46Z", "author": {"login": "shahzaibj"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/SingleAccountOverloadsMockedTest.java", "diffHunk": "@@ -0,0 +1,419 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.tests.mocked;\n+\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.client.Account;\n+import com.microsoft.identity.client.AcquireTokenParameters;\n+import com.microsoft.identity.client.AcquireTokenSilentParameters;\n+import com.microsoft.identity.client.AuthenticationCallback;\n+import com.microsoft.identity.client.IAccount;\n+import com.microsoft.identity.client.IAuthenticationResult;\n+import com.microsoft.identity.client.ISingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.Prompt;\n+import com.microsoft.identity.client.SingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.e2e.shadows.ShadowAuthorityForMockHttpResponse;\n+import com.microsoft.identity.client.e2e.shadows.ShadowHttpRequestForMockedTest;\n+import com.microsoft.identity.client.e2e.shadows.ShadowMsalUtils;\n+import com.microsoft.identity.client.e2e.shadows.ShadowOpenIdProviderConfigurationClient;\n+import com.microsoft.identity.client.e2e.shadows.ShadowStorageHelper;\n+import com.microsoft.identity.client.e2e.tests.AcquireTokenAbstractTest;\n+import com.microsoft.identity.client.e2e.utils.AcquireTokenTestHelper;\n+import com.microsoft.identity.client.e2e.utils.RoboTestUtils;\n+import com.microsoft.identity.client.exception.MsalClientException;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.common.exception.ServiceException;\n+import com.microsoft.identity.common.internal.providers.oauth2.IDToken;\n+import com.microsoft.identity.internal.testutils.MockHttpResponse;\n+import com.microsoft.identity.internal.testutils.TestConstants;\n+import com.microsoft.identity.internal.testutils.TestUtils;\n+import com.microsoft.identity.internal.testutils.mocks.MockServerResponse;\n+import com.microsoft.identity.internal.testutils.mocks.MockTokenCreator;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import edu.emory.mathcs.backport.java.util.Arrays;\n+\n+import static com.microsoft.identity.internal.testutils.TestConstants.Scopes.USER_READ_SCOPE;\n+import static com.microsoft.identity.internal.testutils.mocks.MockTokenCreator.MOCK_PREFERRED_USERNAME_VALUE;\n+import static org.junit.Assert.fail;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(shadows = {\n+        ShadowStorageHelper.class,\n+        ShadowAuthorityForMockHttpResponse.class,\n+        ShadowHttpRequestForMockedTest.class,\n+        ShadowMsalUtils.class,\n+        ShadowOpenIdProviderConfigurationClient.class\n+})\n+public class SingleAccountOverloadsMockedTest extends AcquireTokenAbstractTest {\n+\n+    private SingleAccountPublicClientApplication mSingleAccountPCA;\n+    private String mUsername = MOCK_PREFERRED_USERNAME_VALUE;\n+\n+    @Before\n+    public void setup() {\n+        super.setup();\n+        TestUtils.clearCache(SingleAccountPublicClientApplication.SINGLE_ACCOUNT_CREDENTIAL_SHARED_PREFERENCES);\n+        mSingleAccountPCA = (SingleAccountPublicClientApplication) mApplication;\n+        MockHttpResponse.setHttpResponse(MockServerResponse.getMockTokenSuccessResponse());\n+    }\n+\n+    @Test\n+    public void testSignInOnlyAllowedOnce() {\n+        mSingleAccountPCA.signIn(mActivity, mUsername, mScopes, getSuccessExpectedCallback());\n+        RoboTestUtils.flushScheduler();\n+\n+        mSingleAccountPCA.signIn(mActivity, mUsername, mScopes, getInvalidParameterExpectedCallback());\n+    }\n+\n+    @Test\n+    public void testSignInWithPromptOnlyAllowedOnce() {\n+        mSingleAccountPCA.signIn(mActivity, mUsername, mScopes, Prompt.LOGIN, getSuccessExpectedCallback());\n+        RoboTestUtils.flushScheduler();\n+\n+        mSingleAccountPCA.signIn(mActivity, mUsername, mScopes, Prompt.LOGIN, getInvalidParameterExpectedCallback());\n+    }\n+\n+    @Test\n+    public void testSignInAgainAllowsSignInAgain() {\n+        mSingleAccountPCA.signIn(mActivity, mUsername, mScopes, getSuccessExpectedCallback());\n+        RoboTestUtils.flushScheduler();\n+\n+        mSingleAccountPCA.signInAgain(mActivity, mScopes, Prompt.LOGIN, getSuccessExpectedCallback());\n+        RoboTestUtils.flushScheduler();\n+    }\n+\n+    @Test\n+    public void testCannotSignInAgainIfNeverSignedInBefore() {\n+        mSingleAccountPCA.signInAgain(mActivity, mScopes, Prompt.LOGIN, getNoCurrentAccountExpectedCallback());\n+    }\n+\n+    @Test\n+    public void testCanSignOutIfAlreadySignedIn() {\n+        mSingleAccountPCA.signIn(mActivity, mUsername, mScopes, getSuccessExpectedCallback());\n+        RoboTestUtils.flushScheduler();\n+\n+        mSingleAccountPCA.signOut(new ISingleAccountPublicClientApplication.SignOutCallback() {\n+            @Override\n+            public void onSignOut() {\n+                Assert.assertTrue(\"Successfully signed out\", true);\n+            }\n+\n+            @Override\n+            public void onError(@NonNull MsalException exception) {\n+                fail(exception.getMessage());\n+            }\n+        });\n+\n+        RoboTestUtils.flushScheduler();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA5NTM5Ng=="}, "originalCommit": {"oid": "4d69f605ed03a32ad5df149fcf2c219aeab02472"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExMzcxMw==", "bodyText": "Thanks for clarifying, @shahzaibj -- resolving this", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1070#discussion_r441113713", "createdAt": "2020-06-16T20:12:11Z", "author": {"login": "iambmelt"}, "path": "msal/src/test/java/com/microsoft/identity/client/e2e/tests/mocked/SingleAccountOverloadsMockedTest.java", "diffHunk": "@@ -0,0 +1,419 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.e2e.tests.mocked;\n+\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.client.Account;\n+import com.microsoft.identity.client.AcquireTokenParameters;\n+import com.microsoft.identity.client.AcquireTokenSilentParameters;\n+import com.microsoft.identity.client.AuthenticationCallback;\n+import com.microsoft.identity.client.IAccount;\n+import com.microsoft.identity.client.IAuthenticationResult;\n+import com.microsoft.identity.client.ISingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.Prompt;\n+import com.microsoft.identity.client.SingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.e2e.shadows.ShadowAuthorityForMockHttpResponse;\n+import com.microsoft.identity.client.e2e.shadows.ShadowHttpRequestForMockedTest;\n+import com.microsoft.identity.client.e2e.shadows.ShadowMsalUtils;\n+import com.microsoft.identity.client.e2e.shadows.ShadowOpenIdProviderConfigurationClient;\n+import com.microsoft.identity.client.e2e.shadows.ShadowStorageHelper;\n+import com.microsoft.identity.client.e2e.tests.AcquireTokenAbstractTest;\n+import com.microsoft.identity.client.e2e.utils.AcquireTokenTestHelper;\n+import com.microsoft.identity.client.e2e.utils.RoboTestUtils;\n+import com.microsoft.identity.client.exception.MsalClientException;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.common.exception.ServiceException;\n+import com.microsoft.identity.common.internal.providers.oauth2.IDToken;\n+import com.microsoft.identity.internal.testutils.MockHttpResponse;\n+import com.microsoft.identity.internal.testutils.TestConstants;\n+import com.microsoft.identity.internal.testutils.TestUtils;\n+import com.microsoft.identity.internal.testutils.mocks.MockServerResponse;\n+import com.microsoft.identity.internal.testutils.mocks.MockTokenCreator;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import edu.emory.mathcs.backport.java.util.Arrays;\n+\n+import static com.microsoft.identity.internal.testutils.TestConstants.Scopes.USER_READ_SCOPE;\n+import static com.microsoft.identity.internal.testutils.mocks.MockTokenCreator.MOCK_PREFERRED_USERNAME_VALUE;\n+import static org.junit.Assert.fail;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(shadows = {\n+        ShadowStorageHelper.class,\n+        ShadowAuthorityForMockHttpResponse.class,\n+        ShadowHttpRequestForMockedTest.class,\n+        ShadowMsalUtils.class,\n+        ShadowOpenIdProviderConfigurationClient.class\n+})\n+public class SingleAccountOverloadsMockedTest extends AcquireTokenAbstractTest {\n+\n+    private SingleAccountPublicClientApplication mSingleAccountPCA;\n+    private String mUsername = MOCK_PREFERRED_USERNAME_VALUE;\n+\n+    @Before\n+    public void setup() {\n+        super.setup();\n+        TestUtils.clearCache(SingleAccountPublicClientApplication.SINGLE_ACCOUNT_CREDENTIAL_SHARED_PREFERENCES);\n+        mSingleAccountPCA = (SingleAccountPublicClientApplication) mApplication;\n+        MockHttpResponse.setHttpResponse(MockServerResponse.getMockTokenSuccessResponse());\n+    }\n+\n+    @Test\n+    public void testSignInOnlyAllowedOnce() {\n+        mSingleAccountPCA.signIn(mActivity, mUsername, mScopes, getSuccessExpectedCallback());\n+        RoboTestUtils.flushScheduler();\n+\n+        mSingleAccountPCA.signIn(mActivity, mUsername, mScopes, getInvalidParameterExpectedCallback());\n+    }\n+\n+    @Test\n+    public void testSignInWithPromptOnlyAllowedOnce() {\n+        mSingleAccountPCA.signIn(mActivity, mUsername, mScopes, Prompt.LOGIN, getSuccessExpectedCallback());\n+        RoboTestUtils.flushScheduler();\n+\n+        mSingleAccountPCA.signIn(mActivity, mUsername, mScopes, Prompt.LOGIN, getInvalidParameterExpectedCallback());\n+    }\n+\n+    @Test\n+    public void testSignInAgainAllowsSignInAgain() {\n+        mSingleAccountPCA.signIn(mActivity, mUsername, mScopes, getSuccessExpectedCallback());\n+        RoboTestUtils.flushScheduler();\n+\n+        mSingleAccountPCA.signInAgain(mActivity, mScopes, Prompt.LOGIN, getSuccessExpectedCallback());\n+        RoboTestUtils.flushScheduler();\n+    }\n+\n+    @Test\n+    public void testCannotSignInAgainIfNeverSignedInBefore() {\n+        mSingleAccountPCA.signInAgain(mActivity, mScopes, Prompt.LOGIN, getNoCurrentAccountExpectedCallback());\n+    }\n+\n+    @Test\n+    public void testCanSignOutIfAlreadySignedIn() {\n+        mSingleAccountPCA.signIn(mActivity, mUsername, mScopes, getSuccessExpectedCallback());\n+        RoboTestUtils.flushScheduler();\n+\n+        mSingleAccountPCA.signOut(new ISingleAccountPublicClientApplication.SignOutCallback() {\n+            @Override\n+            public void onSignOut() {\n+                Assert.assertTrue(\"Successfully signed out\", true);\n+            }\n+\n+            @Override\n+            public void onError(@NonNull MsalException exception) {\n+                fail(exception.getMessage());\n+            }\n+        });\n+\n+        RoboTestUtils.flushScheduler();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA5NTM5Ng=="}, "originalCommit": {"oid": "4d69f605ed03a32ad5df149fcf2c219aeab02472"}, "originalPosition": 138}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1960, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}