{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2NTMzMzAy", "number": 1110, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMToyMzowMlrOEV_1mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMDozMjo0MlrOEWWIjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTAxNDY1OnYy", "diffSide": "RIGHT", "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/AbstractMsalUiTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMToyMzowMlrOG9Eusw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMzozMzo0N1rOG9tIxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY5MzgxMQ==", "bodyText": "Very minor nit: could be Assert.fail (assuming this is imported)", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1110#discussion_r466693811", "createdAt": "2020-08-06T21:23:02Z", "author": {"login": "iambmelt"}, "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/AbstractMsalUiTest.java", "diffHunk": "@@ -0,0 +1,314 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.rule.ActivityTestRule;\n+\n+import com.microsoft.identity.client.AuthenticationCallback;\n+import com.microsoft.identity.client.IAccount;\n+import com.microsoft.identity.client.IAuthenticationResult;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplication;\n+import com.microsoft.identity.client.SilentAuthenticationCallback;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.client.ui.automation.ILabTest;\n+import com.microsoft.identity.client.ui.automation.browser.BrowserChrome;\n+import com.microsoft.identity.client.ui.automation.browser.IBrowser;\n+import com.microsoft.identity.client.ui.automation.rules.DeviceEnrollmentFailureRecoveryRule;\n+import com.microsoft.identity.client.ui.automation.rules.LoadLabUserTestRule;\n+import com.microsoft.identity.client.ui.automation.rules.RemoveBrokersBeforeTestRule;\n+import com.microsoft.identity.client.ui.automation.rules.ResetAutomaticTimeZoneTestRule;\n+import com.microsoft.identity.client.ui.automation.rules.RetryTestRule;\n+import com.microsoft.identity.client.ui.automation.rules.UiAutomatorTestRule;\n+import com.microsoft.identity.common.internal.util.StringUtil;\n+\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.TestRule;\n+\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * A base model for an E2E MSAL UI Test. This class will apply all the rules required for an MSAL\n+ * test and will get everything setup for use by child classes.\n+ */\n+public abstract class AbstractMsalUiTest implements IMsalTest, ILabTest {\n+\n+    protected Context mContext;\n+    protected Activity mActivity;\n+    protected IPublicClientApplication mApplication;\n+\n+    protected String[] mScopes;\n+    protected IAccount mAccount;\n+    protected IBrowser mBrowser;\n+    protected String mLoginHint;\n+\n+    @Rule(order = 0)\n+    public TestRule retryRule = new RetryTestRule();\n+\n+    @Rule(order = 1)\n+    public final TestRule uiAutomatorTestRule = new UiAutomatorTestRule();\n+\n+    @Rule(order = 2)\n+    public final TestRule resetAutomaticTimeRule = new ResetAutomaticTimeZoneTestRule();\n+\n+    @Rule(order = 3)\n+    public final TestRule loadLabUserRule = getLabUserQuery() != null\n+            ? new LoadLabUserTestRule(getLabUserQuery())\n+            : new LoadLabUserTestRule(getTempUserType());\n+\n+    @Rule(order = 4)\n+    public final TestRule removeBrokersRule = new RemoveBrokersBeforeTestRule();\n+\n+    @Rule(order = 5)\n+    public ActivityTestRule<MainActivity> mActivityRule =\n+            new ActivityTestRule(MainActivity.class);\n+\n+    @Rule(order = 6)\n+    public TestRule deviceEnrollmentFailureRecoveryRule = new DeviceEnrollmentFailureRecoveryRule();\n+\n+    @Before\n+    public void setup() {\n+        mScopes = getScopes();\n+        mBrowser = getBrowser();\n+\n+        // clear all cookies in the browser\n+        mBrowser.clear();\n+\n+        mLoginHint = ((LoadLabUserTestRule) loadLabUserRule).getLabUserUpn();\n+\n+        mContext = ApplicationProvider.getApplicationContext();\n+        mActivity = mActivityRule.getActivity();\n+        setupPCA();\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        mAccount = null;\n+    }\n+\n+    @Override\n+    public IBrowser getBrowser() {\n+        return new BrowserChrome();\n+    }\n+\n+    private void setupPCA() {\n+        try {\n+            mApplication = PublicClientApplication.create(mContext, getConfigFileResourceId());\n+        } catch (InterruptedException e) {\n+            fail(e.getMessage());\n+        } catch (MsalException e) {\n+            fail(e.getMessage());\n+        }\n+    }\n+\n+    protected IAccount getAccount() {\n+        return mAccount;\n+    }\n+\n+    /**\n+     * A callback that can be used to perform assertions on completion of an interactive request\n+     * (success case) test.\n+     *\n+     * @param latch the latch associated to this request\n+     * @return an {@link AuthenticationCallback} object\n+     */\n+    protected AuthenticationCallback successfulInteractiveCallback(final CountDownLatch latch) {\n+        return new AuthenticationCallback() {\n+            @Override\n+            public void onSuccess(IAuthenticationResult authenticationResult) {\n+                Assert.assertFalse(StringUtil.isEmpty(authenticationResult.getAccessToken()));\n+                mAccount = authenticationResult.getAccount();\n+                latch.countDown();\n+            }\n+\n+            @Override\n+            public void onError(MsalException exception) {\n+                junit.framework.Assert.fail(exception.getMessage());\n+                latch.countDown();\n+            }\n+\n+            @Override\n+            public void onCancel() {\n+                junit.framework.Assert.fail(\"User cancelled flow\");\n+                latch.countDown();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * A callback that can be used to perform assertions on completion of an interactive request\n+     * (success case) test.\n+     *\n+     * @param latch the latch associated to this request\n+     * @return an {@link AuthenticationCallback} object\n+     */\n+    protected AuthenticationCallback successfulClaimsRequestInIdTokenInteractiveCallback(\n+            @NonNull final CountDownLatch latch,\n+            @NonNull final String requestedClaim,\n+            @Nullable final String expectedValue\n+    ) {\n+        return new AuthenticationCallback() {\n+            @Override\n+            public void onSuccess(IAuthenticationResult authenticationResult) {\n+                Assert.assertFalse(StringUtil.isEmpty(authenticationResult.getAccessToken()));\n+                mAccount = authenticationResult.getAccount();\n+                final Map<String, ?> claims = authenticationResult.getAccount().getClaims();\n+                Assert.assertTrue(claims.containsKey(requestedClaim));\n+                if (!TextUtils.isEmpty(expectedValue)) {\n+                    final Object claimValue = claims.get(requestedClaim);\n+                    Assert.assertEquals(expectedValue, claimValue.toString());\n+                }\n+                latch.countDown();\n+            }\n+\n+            @Override\n+            public void onError(MsalException exception) {\n+                junit.framework.Assert.fail(exception.getMessage());\n+                latch.countDown();\n+            }\n+\n+            @Override\n+            public void onCancel() {\n+                junit.framework.Assert.fail(\"User cancelled flow\");\n+                latch.countDown();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * A callback that can be used to perform assertions on completion of an interactive request\n+     * (cancel case) test.\n+     *\n+     * @param latch the latch associated to this request\n+     * @return an {@link AuthenticationCallback} object\n+     */\n+    protected AuthenticationCallback cancelInteractiveCallback(final CountDownLatch latch) {\n+        return new AuthenticationCallback() {\n+            @Override\n+            public void onSuccess(IAuthenticationResult authenticationResult) {\n+                Assert.fail(\"Unexpected Success!\");\n+                latch.countDown();\n+            }\n+\n+            @Override\n+            public void onError(MsalException exception) {\n+                Assert.fail(exception.getMessage());\n+                latch.countDown();\n+            }\n+\n+            @Override\n+            public void onCancel() {\n+                latch.countDown();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * A callback that can be used to perform assertions on completion of an silent request\n+     * (success case) test.\n+     *\n+     * @param latch the latch associated to this request\n+     * @return an {@link AuthenticationCallback} object\n+     */\n+    protected SilentAuthenticationCallback successfulSilentCallback(final CountDownLatch latch) {\n+        return new SilentAuthenticationCallback() {\n+            @Override\n+            public void onSuccess(IAuthenticationResult authenticationResult) {\n+                Assert.assertFalse(StringUtil.isEmpty(authenticationResult.getAccessToken()));\n+                mAccount = authenticationResult.getAccount();\n+                latch.countDown();\n+            }\n+\n+            @Override\n+            public void onError(MsalException exception) {\n+                junit.framework.Assert.fail(exception.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acc36652dd8e714abbe27580640df1ced6d083a7"}, "originalPosition": 257}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1NTg0NA==", "bodyText": "Addressed", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1110#discussion_r467355844", "createdAt": "2020-08-08T03:33:47Z", "author": {"login": "shahzaibj"}, "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/AbstractMsalUiTest.java", "diffHunk": "@@ -0,0 +1,314 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+import android.text.TextUtils;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.rule.ActivityTestRule;\n+\n+import com.microsoft.identity.client.AuthenticationCallback;\n+import com.microsoft.identity.client.IAccount;\n+import com.microsoft.identity.client.IAuthenticationResult;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplication;\n+import com.microsoft.identity.client.SilentAuthenticationCallback;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.client.ui.automation.ILabTest;\n+import com.microsoft.identity.client.ui.automation.browser.BrowserChrome;\n+import com.microsoft.identity.client.ui.automation.browser.IBrowser;\n+import com.microsoft.identity.client.ui.automation.rules.DeviceEnrollmentFailureRecoveryRule;\n+import com.microsoft.identity.client.ui.automation.rules.LoadLabUserTestRule;\n+import com.microsoft.identity.client.ui.automation.rules.RemoveBrokersBeforeTestRule;\n+import com.microsoft.identity.client.ui.automation.rules.ResetAutomaticTimeZoneTestRule;\n+import com.microsoft.identity.client.ui.automation.rules.RetryTestRule;\n+import com.microsoft.identity.client.ui.automation.rules.UiAutomatorTestRule;\n+import com.microsoft.identity.common.internal.util.StringUtil;\n+\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.TestRule;\n+\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * A base model for an E2E MSAL UI Test. This class will apply all the rules required for an MSAL\n+ * test and will get everything setup for use by child classes.\n+ */\n+public abstract class AbstractMsalUiTest implements IMsalTest, ILabTest {\n+\n+    protected Context mContext;\n+    protected Activity mActivity;\n+    protected IPublicClientApplication mApplication;\n+\n+    protected String[] mScopes;\n+    protected IAccount mAccount;\n+    protected IBrowser mBrowser;\n+    protected String mLoginHint;\n+\n+    @Rule(order = 0)\n+    public TestRule retryRule = new RetryTestRule();\n+\n+    @Rule(order = 1)\n+    public final TestRule uiAutomatorTestRule = new UiAutomatorTestRule();\n+\n+    @Rule(order = 2)\n+    public final TestRule resetAutomaticTimeRule = new ResetAutomaticTimeZoneTestRule();\n+\n+    @Rule(order = 3)\n+    public final TestRule loadLabUserRule = getLabUserQuery() != null\n+            ? new LoadLabUserTestRule(getLabUserQuery())\n+            : new LoadLabUserTestRule(getTempUserType());\n+\n+    @Rule(order = 4)\n+    public final TestRule removeBrokersRule = new RemoveBrokersBeforeTestRule();\n+\n+    @Rule(order = 5)\n+    public ActivityTestRule<MainActivity> mActivityRule =\n+            new ActivityTestRule(MainActivity.class);\n+\n+    @Rule(order = 6)\n+    public TestRule deviceEnrollmentFailureRecoveryRule = new DeviceEnrollmentFailureRecoveryRule();\n+\n+    @Before\n+    public void setup() {\n+        mScopes = getScopes();\n+        mBrowser = getBrowser();\n+\n+        // clear all cookies in the browser\n+        mBrowser.clear();\n+\n+        mLoginHint = ((LoadLabUserTestRule) loadLabUserRule).getLabUserUpn();\n+\n+        mContext = ApplicationProvider.getApplicationContext();\n+        mActivity = mActivityRule.getActivity();\n+        setupPCA();\n+    }\n+\n+    @After\n+    public void cleanup() {\n+        mAccount = null;\n+    }\n+\n+    @Override\n+    public IBrowser getBrowser() {\n+        return new BrowserChrome();\n+    }\n+\n+    private void setupPCA() {\n+        try {\n+            mApplication = PublicClientApplication.create(mContext, getConfigFileResourceId());\n+        } catch (InterruptedException e) {\n+            fail(e.getMessage());\n+        } catch (MsalException e) {\n+            fail(e.getMessage());\n+        }\n+    }\n+\n+    protected IAccount getAccount() {\n+        return mAccount;\n+    }\n+\n+    /**\n+     * A callback that can be used to perform assertions on completion of an interactive request\n+     * (success case) test.\n+     *\n+     * @param latch the latch associated to this request\n+     * @return an {@link AuthenticationCallback} object\n+     */\n+    protected AuthenticationCallback successfulInteractiveCallback(final CountDownLatch latch) {\n+        return new AuthenticationCallback() {\n+            @Override\n+            public void onSuccess(IAuthenticationResult authenticationResult) {\n+                Assert.assertFalse(StringUtil.isEmpty(authenticationResult.getAccessToken()));\n+                mAccount = authenticationResult.getAccount();\n+                latch.countDown();\n+            }\n+\n+            @Override\n+            public void onError(MsalException exception) {\n+                junit.framework.Assert.fail(exception.getMessage());\n+                latch.countDown();\n+            }\n+\n+            @Override\n+            public void onCancel() {\n+                junit.framework.Assert.fail(\"User cancelled flow\");\n+                latch.countDown();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * A callback that can be used to perform assertions on completion of an interactive request\n+     * (success case) test.\n+     *\n+     * @param latch the latch associated to this request\n+     * @return an {@link AuthenticationCallback} object\n+     */\n+    protected AuthenticationCallback successfulClaimsRequestInIdTokenInteractiveCallback(\n+            @NonNull final CountDownLatch latch,\n+            @NonNull final String requestedClaim,\n+            @Nullable final String expectedValue\n+    ) {\n+        return new AuthenticationCallback() {\n+            @Override\n+            public void onSuccess(IAuthenticationResult authenticationResult) {\n+                Assert.assertFalse(StringUtil.isEmpty(authenticationResult.getAccessToken()));\n+                mAccount = authenticationResult.getAccount();\n+                final Map<String, ?> claims = authenticationResult.getAccount().getClaims();\n+                Assert.assertTrue(claims.containsKey(requestedClaim));\n+                if (!TextUtils.isEmpty(expectedValue)) {\n+                    final Object claimValue = claims.get(requestedClaim);\n+                    Assert.assertEquals(expectedValue, claimValue.toString());\n+                }\n+                latch.countDown();\n+            }\n+\n+            @Override\n+            public void onError(MsalException exception) {\n+                junit.framework.Assert.fail(exception.getMessage());\n+                latch.countDown();\n+            }\n+\n+            @Override\n+            public void onCancel() {\n+                junit.framework.Assert.fail(\"User cancelled flow\");\n+                latch.countDown();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * A callback that can be used to perform assertions on completion of an interactive request\n+     * (cancel case) test.\n+     *\n+     * @param latch the latch associated to this request\n+     * @return an {@link AuthenticationCallback} object\n+     */\n+    protected AuthenticationCallback cancelInteractiveCallback(final CountDownLatch latch) {\n+        return new AuthenticationCallback() {\n+            @Override\n+            public void onSuccess(IAuthenticationResult authenticationResult) {\n+                Assert.fail(\"Unexpected Success!\");\n+                latch.countDown();\n+            }\n+\n+            @Override\n+            public void onError(MsalException exception) {\n+                Assert.fail(exception.getMessage());\n+                latch.countDown();\n+            }\n+\n+            @Override\n+            public void onCancel() {\n+                latch.countDown();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * A callback that can be used to perform assertions on completion of an silent request\n+     * (success case) test.\n+     *\n+     * @param latch the latch associated to this request\n+     * @return an {@link AuthenticationCallback} object\n+     */\n+    protected SilentAuthenticationCallback successfulSilentCallback(final CountDownLatch latch) {\n+        return new SilentAuthenticationCallback() {\n+            @Override\n+            public void onSuccess(IAuthenticationResult authenticationResult) {\n+                Assert.assertFalse(StringUtil.isEmpty(authenticationResult.getAccessToken()));\n+                mAccount = authenticationResult.getAccount();\n+                latch.countDown();\n+            }\n+\n+            @Override\n+            public void onError(MsalException exception) {\n+                junit.framework.Assert.fail(exception.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY5MzgxMQ=="}, "originalCommit": {"oid": "acc36652dd8e714abbe27580640df1ced6d083a7"}, "originalPosition": 257}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODU3OTM5OnYy", "diffSide": "RIGHT", "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/broker/TestCase796050.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxOTo1ODowM1rOG9mMDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMzozMzo1M1rOG9tIxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI0MTk5Nw==", "bodyText": "missing \"Change the device time one hour forward.\"", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1110#discussion_r467241997", "createdAt": "2020-08-07T19:58:03Z", "author": {"login": "rpdome"}, "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/broker/TestCase796050.java", "diffHunk": "@@ -0,0 +1,184 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.testpass.broker;\n+\n+import androidx.test.uiautomator.UiObject;\n+\n+import com.microsoft.identity.client.AcquireTokenParameters;\n+import com.microsoft.identity.client.AcquireTokenSilentParameters;\n+import com.microsoft.identity.client.IAccount;\n+import com.microsoft.identity.client.Prompt;\n+import com.microsoft.identity.client.msal.automationapp.AbstractMsalUiTest;\n+import com.microsoft.identity.client.msal.automationapp.R;\n+import com.microsoft.identity.client.msal.automationapp.interaction.InteractiveRequest;\n+import com.microsoft.identity.client.msal.automationapp.interaction.OnInteractionRequired;\n+import com.microsoft.identity.client.ui.automation.broker.BrokerMicrosoftAuthenticator;\n+import com.microsoft.identity.client.ui.automation.broker.ITestBroker;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptHandlerParameters;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptParameter;\n+import com.microsoft.identity.client.ui.automation.interaction.microsoftsts.AadPromptHandler;\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+import com.microsoft.identity.internal.testutils.labutils.LabConfig;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserHelper;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserQuery;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.CountDownLatch;\n+\n+// Multi-accounts for Broker - Add Account in Account Chooser Activity\n+// The goal of the test case is to ensure that we can add accounts in broker via the\n+// \"Add another account\" option in Account Chooser Activity\n+// https://identitydivision.visualstudio.com/DevEx/_workitems/edit/796050\n+public class TestCase796050 extends AbstractMsalBrokerTest {\n+\n+    @Test\n+    public void test_796050() throws InterruptedException {\n+\n+        // already created test user\n+        final String username1 = mLoginHint;\n+        final String password1 = LabConfig.getCurrentLabConfig().getLabUserPassword();\n+\n+        // create another temp user\n+        final String username2 = LabUserHelper.loadTempUser(getTempUserType());\n+        final String password2 = LabConfig.getCurrentLabConfig().getLabUserPassword();\n+\n+        Assert.assertNotEquals(username1, username2);\n+\n+        // perform device registration with one of the accounts (account 1 here)\n+        mBroker.performDeviceRegistration(\n+                username1, password1\n+        );\n+\n+        final CountDownLatch latch = new CountDownLatch(1);\n+\n+        final AcquireTokenParameters parameters = new AcquireTokenParameters.Builder()\n+                .startAuthorizationFromActivity(mActivity)\n+                .withScopes(Arrays.asList(mScopes))\n+                .withCallback(successfulInteractiveCallback(latch))\n+                .withPrompt(Prompt.SELECT_ACCOUNT)\n+                .build();\n+\n+        // Start interactive token request in MSAL (without login hint)\n+        final InteractiveRequest interactiveRequest = new InteractiveRequest(\n+                mApplication,\n+                parameters,\n+                new OnInteractionRequired() {\n+                    @Override\n+                    public void handleUserInteraction() {\n+                        // Account Chooser Activity should be displayed by broker after calling\n+                        // acquire token. In Account Choose Activity, click on \"Add another account\"\n+                        // When a username is not provided to the below method, it clicks on\n+                        // \"Add another account\"\n+                        mBroker.handleAccountPicker(null);\n+\n+                        final PromptHandlerParameters promptHandlerParameters = PromptHandlerParameters.builder()\n+                                .prompt(PromptParameter.SELECT_ACCOUNT)\n+                                .loginHint(null)\n+                                .sessionExpected(false)\n+                                .consentPageExpected(false)\n+                                .speedBumpExpected(false)\n+                                // already in webview as we handled account picker above\n+                                // and this would behave the same as no broker\n+                                .broker(null)\n+                                .build();\n+\n+                        // In the WebView AAD login page, login with credentials for the other\n+                        // account aka Account 2 that we created earlier\n+                        new AadPromptHandler(promptHandlerParameters)\n+                                .handlePrompt(username2, password2);\n+\n+                    }\n+                }\n+        );\n+\n+        interactiveRequest.execute();\n+        latch.await();\n+\n+        // Assert Authenticator Account screen has both accounts\n+\n+        mBroker.launch(); // open Authenticator App\n+\n+        final UiObject account1 = UiAutomatorUtils.obtainUiObjectWithText(username1);\n+        Assert.assertTrue(account1.exists()); // make sure account 1 is there\n+\n+        final UiObject account2 = UiAutomatorUtils.obtainUiObjectWithText(username2);\n+        Assert.assertTrue(account2.exists()); // make sure account 2 is there\n+\n+        // SILENT REQUEST - start a acquireTokenSilent request in MSAL with the Account 2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acc36652dd8e714abbe27580640df1ced6d083a7"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1NTg0Ng==", "bodyText": "Addressed", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1110#discussion_r467355846", "createdAt": "2020-08-08T03:33:53Z", "author": {"login": "shahzaibj"}, "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/broker/TestCase796050.java", "diffHunk": "@@ -0,0 +1,184 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.testpass.broker;\n+\n+import androidx.test.uiautomator.UiObject;\n+\n+import com.microsoft.identity.client.AcquireTokenParameters;\n+import com.microsoft.identity.client.AcquireTokenSilentParameters;\n+import com.microsoft.identity.client.IAccount;\n+import com.microsoft.identity.client.Prompt;\n+import com.microsoft.identity.client.msal.automationapp.AbstractMsalUiTest;\n+import com.microsoft.identity.client.msal.automationapp.R;\n+import com.microsoft.identity.client.msal.automationapp.interaction.InteractiveRequest;\n+import com.microsoft.identity.client.msal.automationapp.interaction.OnInteractionRequired;\n+import com.microsoft.identity.client.ui.automation.broker.BrokerMicrosoftAuthenticator;\n+import com.microsoft.identity.client.ui.automation.broker.ITestBroker;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptHandlerParameters;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptParameter;\n+import com.microsoft.identity.client.ui.automation.interaction.microsoftsts.AadPromptHandler;\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+import com.microsoft.identity.internal.testutils.labutils.LabConfig;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserHelper;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserQuery;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.CountDownLatch;\n+\n+// Multi-accounts for Broker - Add Account in Account Chooser Activity\n+// The goal of the test case is to ensure that we can add accounts in broker via the\n+// \"Add another account\" option in Account Chooser Activity\n+// https://identitydivision.visualstudio.com/DevEx/_workitems/edit/796050\n+public class TestCase796050 extends AbstractMsalBrokerTest {\n+\n+    @Test\n+    public void test_796050() throws InterruptedException {\n+\n+        // already created test user\n+        final String username1 = mLoginHint;\n+        final String password1 = LabConfig.getCurrentLabConfig().getLabUserPassword();\n+\n+        // create another temp user\n+        final String username2 = LabUserHelper.loadTempUser(getTempUserType());\n+        final String password2 = LabConfig.getCurrentLabConfig().getLabUserPassword();\n+\n+        Assert.assertNotEquals(username1, username2);\n+\n+        // perform device registration with one of the accounts (account 1 here)\n+        mBroker.performDeviceRegistration(\n+                username1, password1\n+        );\n+\n+        final CountDownLatch latch = new CountDownLatch(1);\n+\n+        final AcquireTokenParameters parameters = new AcquireTokenParameters.Builder()\n+                .startAuthorizationFromActivity(mActivity)\n+                .withScopes(Arrays.asList(mScopes))\n+                .withCallback(successfulInteractiveCallback(latch))\n+                .withPrompt(Prompt.SELECT_ACCOUNT)\n+                .build();\n+\n+        // Start interactive token request in MSAL (without login hint)\n+        final InteractiveRequest interactiveRequest = new InteractiveRequest(\n+                mApplication,\n+                parameters,\n+                new OnInteractionRequired() {\n+                    @Override\n+                    public void handleUserInteraction() {\n+                        // Account Chooser Activity should be displayed by broker after calling\n+                        // acquire token. In Account Choose Activity, click on \"Add another account\"\n+                        // When a username is not provided to the below method, it clicks on\n+                        // \"Add another account\"\n+                        mBroker.handleAccountPicker(null);\n+\n+                        final PromptHandlerParameters promptHandlerParameters = PromptHandlerParameters.builder()\n+                                .prompt(PromptParameter.SELECT_ACCOUNT)\n+                                .loginHint(null)\n+                                .sessionExpected(false)\n+                                .consentPageExpected(false)\n+                                .speedBumpExpected(false)\n+                                // already in webview as we handled account picker above\n+                                // and this would behave the same as no broker\n+                                .broker(null)\n+                                .build();\n+\n+                        // In the WebView AAD login page, login with credentials for the other\n+                        // account aka Account 2 that we created earlier\n+                        new AadPromptHandler(promptHandlerParameters)\n+                                .handlePrompt(username2, password2);\n+\n+                    }\n+                }\n+        );\n+\n+        interactiveRequest.execute();\n+        latch.await();\n+\n+        // Assert Authenticator Account screen has both accounts\n+\n+        mBroker.launch(); // open Authenticator App\n+\n+        final UiObject account1 = UiAutomatorUtils.obtainUiObjectWithText(username1);\n+        Assert.assertTrue(account1.exists()); // make sure account 1 is there\n+\n+        final UiObject account2 = UiAutomatorUtils.obtainUiObjectWithText(username2);\n+        Assert.assertTrue(account2.exists()); // make sure account 2 is there\n+\n+        // SILENT REQUEST - start a acquireTokenSilent request in MSAL with the Account 2", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI0MTk5Nw=="}, "originalCommit": {"oid": "acc36652dd8e714abbe27580640df1ced6d083a7"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODU5MzgyOnYy", "diffSide": "RIGHT", "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/broker/TestCase833513.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMDowMzo0MFrOG9mU-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMzoxODozN1rOG9tECw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI0NDI4MQ==", "bodyText": "It's not matching the test case (the test case asks the tester to launch AzureSample).\nLet's make sure they're matching. In this case, I'm fine either making changes here or there.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1110#discussion_r467244281", "createdAt": "2020-08-07T20:03:40Z", "author": {"login": "rpdome"}, "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/broker/TestCase833513.java", "diffHunk": "@@ -0,0 +1,140 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.testpass.broker;\n+\n+import androidx.test.uiautomator.UiObject;\n+\n+import com.microsoft.identity.client.MultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplication;\n+import com.microsoft.identity.client.SingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.client.msal.automationapp.AbstractMsalUiTest;\n+import com.microsoft.identity.client.msal.automationapp.R;\n+import com.microsoft.identity.client.ui.automation.broker.BrokerMicrosoftAuthenticator;\n+import com.microsoft.identity.client.ui.automation.broker.ITestBroker;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptHandlerParameters;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptParameter;\n+import com.microsoft.identity.client.ui.automation.interaction.microsoftsts.AdfsPromptHandler;\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+import com.microsoft.identity.internal.testutils.labutils.LabConfig;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserHelper;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserQuery;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+// End My Shift - In Shared device mode, only account from the same tenant should be able to acquire token.\n+// https://identitydivision.visualstudio.com/DevEx/_workitems/edit/833513\n+public class TestCase833513 extends AbstractMsalBrokerTest {\n+\n+    @Test\n+    public void test_833513() throws MsalException, InterruptedException {\n+        // pca should be in MULTIPLE account mode starting out\n+        Assert.assertTrue(mApplication instanceof MultipleAccountPublicClientApplication);\n+\n+        //we should NOT be in shared device mode\n+        Assert.assertFalse(mApplication.isSharedDevice());\n+\n+        // perform shared device registration\n+        mBroker.performSharedDeviceRegistration(\n+                mLoginHint, LabConfig.getCurrentLabConfig().getLabUserPassword()\n+        );\n+\n+        // re-create PCA after device registration\n+        mApplication = PublicClientApplication.create(mContext, getConfigFileResourceId());\n+\n+        // pca should now be in SINGLE account mode\n+        Assert.assertTrue(mApplication instanceof SingleAccountPublicClientApplication);\n+\n+        // we should be in shared device mode\n+        Assert.assertTrue(mApplication.isSharedDevice());\n+\n+        // query to load a user from a different tenant that was used for WPJ\n+        final LabUserQuery query = new LabUserQuery();\n+        query.userType = LabConstants.UserType.FEDERATED;\n+        query.federationProvider = LabConstants.FederationProvider.ADFS_V3;\n+\n+        final String username = LabUserHelper.loadUserForTest(query);\n+        String password = LabConfig.getCurrentLabConfig().getLabUserPassword();\n+\n+        final SingleAccountPublicClientApplication singleAccountPCA =\n+                (SingleAccountPublicClientApplication) mApplication;\n+\n+        // try sign in with an account from a different tenant\n+        // passing null for latch as we don't need to receive the result from this call\n+        // we just want to get into the webview and look for the error in AAD page\n+        singleAccountPCA.signIn(mActivity, username, mScopes, successfulInteractiveCallback(null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acc36652dd8e714abbe27580640df1ced6d083a7"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1MjE0OA==", "bodyText": "I'll update the test case in ADO.....as I remember that I did it this way because I realized we didn't need to go into AzureSampleApp to test this", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1110#discussion_r467352148", "createdAt": "2020-08-08T02:49:25Z", "author": {"login": "shahzaibj"}, "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/broker/TestCase833513.java", "diffHunk": "@@ -0,0 +1,140 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.testpass.broker;\n+\n+import androidx.test.uiautomator.UiObject;\n+\n+import com.microsoft.identity.client.MultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplication;\n+import com.microsoft.identity.client.SingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.client.msal.automationapp.AbstractMsalUiTest;\n+import com.microsoft.identity.client.msal.automationapp.R;\n+import com.microsoft.identity.client.ui.automation.broker.BrokerMicrosoftAuthenticator;\n+import com.microsoft.identity.client.ui.automation.broker.ITestBroker;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptHandlerParameters;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptParameter;\n+import com.microsoft.identity.client.ui.automation.interaction.microsoftsts.AdfsPromptHandler;\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+import com.microsoft.identity.internal.testutils.labutils.LabConfig;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserHelper;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserQuery;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+// End My Shift - In Shared device mode, only account from the same tenant should be able to acquire token.\n+// https://identitydivision.visualstudio.com/DevEx/_workitems/edit/833513\n+public class TestCase833513 extends AbstractMsalBrokerTest {\n+\n+    @Test\n+    public void test_833513() throws MsalException, InterruptedException {\n+        // pca should be in MULTIPLE account mode starting out\n+        Assert.assertTrue(mApplication instanceof MultipleAccountPublicClientApplication);\n+\n+        //we should NOT be in shared device mode\n+        Assert.assertFalse(mApplication.isSharedDevice());\n+\n+        // perform shared device registration\n+        mBroker.performSharedDeviceRegistration(\n+                mLoginHint, LabConfig.getCurrentLabConfig().getLabUserPassword()\n+        );\n+\n+        // re-create PCA after device registration\n+        mApplication = PublicClientApplication.create(mContext, getConfigFileResourceId());\n+\n+        // pca should now be in SINGLE account mode\n+        Assert.assertTrue(mApplication instanceof SingleAccountPublicClientApplication);\n+\n+        // we should be in shared device mode\n+        Assert.assertTrue(mApplication.isSharedDevice());\n+\n+        // query to load a user from a different tenant that was used for WPJ\n+        final LabUserQuery query = new LabUserQuery();\n+        query.userType = LabConstants.UserType.FEDERATED;\n+        query.federationProvider = LabConstants.FederationProvider.ADFS_V3;\n+\n+        final String username = LabUserHelper.loadUserForTest(query);\n+        String password = LabConfig.getCurrentLabConfig().getLabUserPassword();\n+\n+        final SingleAccountPublicClientApplication singleAccountPCA =\n+                (SingleAccountPublicClientApplication) mApplication;\n+\n+        // try sign in with an account from a different tenant\n+        // passing null for latch as we don't need to receive the result from this call\n+        // we just want to get into the webview and look for the error in AAD page\n+        singleAccountPCA.signIn(mActivity, username, mScopes, successfulInteractiveCallback(null));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI0NDI4MQ=="}, "originalCommit": {"oid": "acc36652dd8e714abbe27580640df1ced6d083a7"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1NDYzNQ==", "bodyText": "Updated test case in ADO: https://identitydivision.visualstudio.com/DevEx/_workitems/edit/833513", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1110#discussion_r467354635", "createdAt": "2020-08-08T03:18:37Z", "author": {"login": "shahzaibj"}, "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/broker/TestCase833513.java", "diffHunk": "@@ -0,0 +1,140 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.testpass.broker;\n+\n+import androidx.test.uiautomator.UiObject;\n+\n+import com.microsoft.identity.client.MultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplication;\n+import com.microsoft.identity.client.SingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.client.msal.automationapp.AbstractMsalUiTest;\n+import com.microsoft.identity.client.msal.automationapp.R;\n+import com.microsoft.identity.client.ui.automation.broker.BrokerMicrosoftAuthenticator;\n+import com.microsoft.identity.client.ui.automation.broker.ITestBroker;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptHandlerParameters;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptParameter;\n+import com.microsoft.identity.client.ui.automation.interaction.microsoftsts.AdfsPromptHandler;\n+import com.microsoft.identity.client.ui.automation.utils.UiAutomatorUtils;\n+import com.microsoft.identity.internal.testutils.labutils.LabConfig;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserHelper;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserQuery;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+// End My Shift - In Shared device mode, only account from the same tenant should be able to acquire token.\n+// https://identitydivision.visualstudio.com/DevEx/_workitems/edit/833513\n+public class TestCase833513 extends AbstractMsalBrokerTest {\n+\n+    @Test\n+    public void test_833513() throws MsalException, InterruptedException {\n+        // pca should be in MULTIPLE account mode starting out\n+        Assert.assertTrue(mApplication instanceof MultipleAccountPublicClientApplication);\n+\n+        //we should NOT be in shared device mode\n+        Assert.assertFalse(mApplication.isSharedDevice());\n+\n+        // perform shared device registration\n+        mBroker.performSharedDeviceRegistration(\n+                mLoginHint, LabConfig.getCurrentLabConfig().getLabUserPassword()\n+        );\n+\n+        // re-create PCA after device registration\n+        mApplication = PublicClientApplication.create(mContext, getConfigFileResourceId());\n+\n+        // pca should now be in SINGLE account mode\n+        Assert.assertTrue(mApplication instanceof SingleAccountPublicClientApplication);\n+\n+        // we should be in shared device mode\n+        Assert.assertTrue(mApplication.isSharedDevice());\n+\n+        // query to load a user from a different tenant that was used for WPJ\n+        final LabUserQuery query = new LabUserQuery();\n+        query.userType = LabConstants.UserType.FEDERATED;\n+        query.federationProvider = LabConstants.FederationProvider.ADFS_V3;\n+\n+        final String username = LabUserHelper.loadUserForTest(query);\n+        String password = LabConfig.getCurrentLabConfig().getLabUserPassword();\n+\n+        final SingleAccountPublicClientApplication singleAccountPCA =\n+                (SingleAccountPublicClientApplication) mApplication;\n+\n+        // try sign in with an account from a different tenant\n+        // passing null for latch as we don't need to receive the result from this call\n+        // we just want to get into the webview and look for the error in AAD page\n+        singleAccountPCA.signIn(mActivity, username, mScopes, successfulInteractiveCallback(null));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI0NDI4MQ=="}, "originalCommit": {"oid": "acc36652dd8e714abbe27580640df1ced6d083a7"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODY1NDI3OnYy", "diffSide": "RIGHT", "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/local/TestCase497044.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMDoyNzoyOVrOG9m5ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMjo0Njo0N1rOG9s5cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI1MzY2Nw==", "bodyText": "curious, how does the test case handle MFA prompt?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1110#discussion_r467253667", "createdAt": "2020-08-07T20:27:29Z", "author": {"login": "rpdome"}, "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/local/TestCase497044.java", "diffHunk": "@@ -0,0 +1,115 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.testpass.local;\n+\n+import com.microsoft.identity.client.AcquireTokenParameters;\n+import com.microsoft.identity.client.Prompt;\n+import com.microsoft.identity.client.msal.automationapp.AbstractMsalUiTest;\n+import com.microsoft.identity.client.msal.automationapp.R;\n+import com.microsoft.identity.client.msal.automationapp.interaction.InteractiveRequest;\n+import com.microsoft.identity.client.msal.automationapp.interaction.OnInteractionRequired;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptHandlerParameters;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptParameter;\n+import com.microsoft.identity.client.ui.automation.interaction.microsoftsts.AadPromptHandler;\n+import com.microsoft.identity.internal.testutils.labutils.LabConfig;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserQuery;\n+\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.CountDownLatch;\n+\n+// Interactive auth w/ force_login w/ MFA\n+// https://identitydivision.visualstudio.com/DefaultCollection/DevEx/_workitems/edit/497044\n+public class TestCase497044 extends AbstractMsalUiTest {\n+\n+    @Test\n+    public void test_99652() throws InterruptedException {\n+        final CountDownLatch latch = new CountDownLatch(1);\n+\n+        final AcquireTokenParameters parameters = new AcquireTokenParameters.Builder()\n+                .startAuthorizationFromActivity(mActivity)\n+                .withLoginHint(mLoginHint)\n+                .withScopes(Arrays.asList(mScopes))\n+                .withCallback(successfulInteractiveCallback(latch))\n+                .withPrompt(Prompt.LOGIN)\n+                .build();\n+\n+        // start interactive request in MSAL (should succeed)\n+        final InteractiveRequest interactiveRequest = new InteractiveRequest(\n+                mApplication,\n+                parameters,\n+                new OnInteractionRequired() {\n+                    @Override\n+                    public void handleUserInteraction() {\n+                        final String username = mLoginHint;\n+                        final String password = LabConfig.getCurrentLabConfig().getLabUserPassword();\n+\n+                        final PromptHandlerParameters promptHandlerParameters = PromptHandlerParameters.builder()\n+                                .prompt(PromptParameter.LOGIN)\n+                                .loginHint(mLoginHint)\n+                                .sessionExpected(false)\n+                                .consentPageExpected(false)\n+                                .speedBumpExpected(false)\n+                                .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acc36652dd8e714abbe27580640df1ced6d083a7"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1MTkyMg==", "bodyText": "AUTO MFA (provided by LAB). Not sure how it works exactly. But the server calls the phone number registered with the account (I don't know what that number is) and some automated setup from the LAB Team responds to that phone call. So there is really nothing required from us....we are just waiting for the MFA prompt to be handled automatically by the LAB setup.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1110#discussion_r467351922", "createdAt": "2020-08-08T02:46:47Z", "author": {"login": "shahzaibj"}, "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/local/TestCase497044.java", "diffHunk": "@@ -0,0 +1,115 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.testpass.local;\n+\n+import com.microsoft.identity.client.AcquireTokenParameters;\n+import com.microsoft.identity.client.Prompt;\n+import com.microsoft.identity.client.msal.automationapp.AbstractMsalUiTest;\n+import com.microsoft.identity.client.msal.automationapp.R;\n+import com.microsoft.identity.client.msal.automationapp.interaction.InteractiveRequest;\n+import com.microsoft.identity.client.msal.automationapp.interaction.OnInteractionRequired;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptHandlerParameters;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptParameter;\n+import com.microsoft.identity.client.ui.automation.interaction.microsoftsts.AadPromptHandler;\n+import com.microsoft.identity.internal.testutils.labutils.LabConfig;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserQuery;\n+\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.CountDownLatch;\n+\n+// Interactive auth w/ force_login w/ MFA\n+// https://identitydivision.visualstudio.com/DefaultCollection/DevEx/_workitems/edit/497044\n+public class TestCase497044 extends AbstractMsalUiTest {\n+\n+    @Test\n+    public void test_99652() throws InterruptedException {\n+        final CountDownLatch latch = new CountDownLatch(1);\n+\n+        final AcquireTokenParameters parameters = new AcquireTokenParameters.Builder()\n+                .startAuthorizationFromActivity(mActivity)\n+                .withLoginHint(mLoginHint)\n+                .withScopes(Arrays.asList(mScopes))\n+                .withCallback(successfulInteractiveCallback(latch))\n+                .withPrompt(Prompt.LOGIN)\n+                .build();\n+\n+        // start interactive request in MSAL (should succeed)\n+        final InteractiveRequest interactiveRequest = new InteractiveRequest(\n+                mApplication,\n+                parameters,\n+                new OnInteractionRequired() {\n+                    @Override\n+                    public void handleUserInteraction() {\n+                        final String username = mLoginHint;\n+                        final String password = LabConfig.getCurrentLabConfig().getLabUserPassword();\n+\n+                        final PromptHandlerParameters promptHandlerParameters = PromptHandlerParameters.builder()\n+                                .prompt(PromptParameter.LOGIN)\n+                                .loginHint(mLoginHint)\n+                                .sessionExpected(false)\n+                                .consentPageExpected(false)\n+                                .speedBumpExpected(false)\n+                                .build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI1MzY2Nw=="}, "originalCommit": {"oid": "acc36652dd8e714abbe27580640df1ced6d083a7"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODY2NzY1OnYy", "diffSide": "RIGHT", "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/usgov/TestCase938383.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMDozMjo0MlrOG9nB-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMzozMzo1OFrOG9tIyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI1NTgwMg==", "bodyText": "nit: can we rename this function to something like \"forwardDeviceTimeForOneHour()\"?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1110#discussion_r467255802", "createdAt": "2020-08-07T20:32:42Z", "author": {"login": "rpdome"}, "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/usgov/TestCase938383.java", "diffHunk": "@@ -0,0 +1,137 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.testpass.usgov;\n+\n+import com.microsoft.identity.client.AcquireTokenParameters;\n+import com.microsoft.identity.client.AcquireTokenSilentParameters;\n+import com.microsoft.identity.client.IAccount;\n+import com.microsoft.identity.client.Prompt;\n+import com.microsoft.identity.client.msal.automationapp.AbstractMsalUiTest;\n+import com.microsoft.identity.client.msal.automationapp.R;\n+import com.microsoft.identity.client.msal.automationapp.interaction.InteractiveRequest;\n+import com.microsoft.identity.client.msal.automationapp.interaction.OnInteractionRequired;\n+import com.microsoft.identity.client.ui.automation.TestContext;\n+import com.microsoft.identity.client.ui.automation.app.IApp;\n+import com.microsoft.identity.client.ui.automation.broker.ITestBroker;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptHandlerParameters;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptParameter;\n+import com.microsoft.identity.client.ui.automation.interaction.microsoftsts.AadPromptHandler;\n+import com.microsoft.identity.internal.testutils.labutils.LabConfig;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserQuery;\n+\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.CountDownLatch;\n+\n+// Silent token acquisition with unexpired RT with USGov authority\n+// https://identitydivision.visualstudio.com/Engineering/_workitems/edit/938383\n+public class TestCase938383 extends AbstractMsalUiTest {\n+\n+    @Test\n+    public void test_938383() throws InterruptedException {\n+        final CountDownLatch latch = new CountDownLatch(1);\n+\n+        final AcquireTokenParameters parameters = new AcquireTokenParameters.Builder()\n+                .startAuthorizationFromActivity(mActivity)\n+                .withScopes(Arrays.asList(mScopes))\n+                .withCallback(successfulInteractiveCallback(latch))\n+                .withPrompt(Prompt.SELECT_ACCOUNT)\n+                .build();\n+\n+        // Start interactive token request in MSAL (should succeed)\n+        final InteractiveRequest interactiveRequest = new InteractiveRequest(\n+                mApplication,\n+                parameters,\n+                new OnInteractionRequired() {\n+                    @Override\n+                    public void handleUserInteraction() {\n+                        ((IApp) mBrowser).handleFirstRun();\n+\n+                        final String username = mLoginHint;\n+                        final String password = LabConfig.getCurrentLabConfig().getLabUserPassword();\n+\n+                        final PromptHandlerParameters promptHandlerParameters = PromptHandlerParameters.builder()\n+                                .prompt(PromptParameter.SELECT_ACCOUNT)\n+                                .loginHint(null)\n+                                .sessionExpected(false)\n+                                .consentPageExpected(false)\n+                                .speedBumpExpected(false)\n+                                .build();\n+\n+                        new AadPromptHandler(promptHandlerParameters)\n+                                .handlePrompt(username, password);\n+                    }\n+                }\n+        );\n+\n+        interactiveRequest.execute();\n+        latch.await();\n+\n+        // change the time on the device\n+        TestContext.getTestContext().getTestDevice().getSettings().changeDeviceTime();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acc36652dd8e714abbe27580640df1ced6d083a7"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1MTk5MQ==", "bodyText": "I'll rename to forwardDeviceTimeForOneDay() as that's what it does \ud83d\ude01", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1110#discussion_r467351991", "createdAt": "2020-08-08T02:47:28Z", "author": {"login": "shahzaibj"}, "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/usgov/TestCase938383.java", "diffHunk": "@@ -0,0 +1,137 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.testpass.usgov;\n+\n+import com.microsoft.identity.client.AcquireTokenParameters;\n+import com.microsoft.identity.client.AcquireTokenSilentParameters;\n+import com.microsoft.identity.client.IAccount;\n+import com.microsoft.identity.client.Prompt;\n+import com.microsoft.identity.client.msal.automationapp.AbstractMsalUiTest;\n+import com.microsoft.identity.client.msal.automationapp.R;\n+import com.microsoft.identity.client.msal.automationapp.interaction.InteractiveRequest;\n+import com.microsoft.identity.client.msal.automationapp.interaction.OnInteractionRequired;\n+import com.microsoft.identity.client.ui.automation.TestContext;\n+import com.microsoft.identity.client.ui.automation.app.IApp;\n+import com.microsoft.identity.client.ui.automation.broker.ITestBroker;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptHandlerParameters;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptParameter;\n+import com.microsoft.identity.client.ui.automation.interaction.microsoftsts.AadPromptHandler;\n+import com.microsoft.identity.internal.testutils.labutils.LabConfig;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserQuery;\n+\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.CountDownLatch;\n+\n+// Silent token acquisition with unexpired RT with USGov authority\n+// https://identitydivision.visualstudio.com/Engineering/_workitems/edit/938383\n+public class TestCase938383 extends AbstractMsalUiTest {\n+\n+    @Test\n+    public void test_938383() throws InterruptedException {\n+        final CountDownLatch latch = new CountDownLatch(1);\n+\n+        final AcquireTokenParameters parameters = new AcquireTokenParameters.Builder()\n+                .startAuthorizationFromActivity(mActivity)\n+                .withScopes(Arrays.asList(mScopes))\n+                .withCallback(successfulInteractiveCallback(latch))\n+                .withPrompt(Prompt.SELECT_ACCOUNT)\n+                .build();\n+\n+        // Start interactive token request in MSAL (should succeed)\n+        final InteractiveRequest interactiveRequest = new InteractiveRequest(\n+                mApplication,\n+                parameters,\n+                new OnInteractionRequired() {\n+                    @Override\n+                    public void handleUserInteraction() {\n+                        ((IApp) mBrowser).handleFirstRun();\n+\n+                        final String username = mLoginHint;\n+                        final String password = LabConfig.getCurrentLabConfig().getLabUserPassword();\n+\n+                        final PromptHandlerParameters promptHandlerParameters = PromptHandlerParameters.builder()\n+                                .prompt(PromptParameter.SELECT_ACCOUNT)\n+                                .loginHint(null)\n+                                .sessionExpected(false)\n+                                .consentPageExpected(false)\n+                                .speedBumpExpected(false)\n+                                .build();\n+\n+                        new AadPromptHandler(promptHandlerParameters)\n+                                .handlePrompt(username, password);\n+                    }\n+                }\n+        );\n+\n+        interactiveRequest.execute();\n+        latch.await();\n+\n+        // change the time on the device\n+        TestContext.getTestContext().getTestDevice().getSettings().changeDeviceTime();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI1NTgwMg=="}, "originalCommit": {"oid": "acc36652dd8e714abbe27580640df1ced6d083a7"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1NTg0OA==", "bodyText": "Addressed", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1110#discussion_r467355848", "createdAt": "2020-08-08T03:33:58Z", "author": {"login": "shahzaibj"}, "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/usgov/TestCase938383.java", "diffHunk": "@@ -0,0 +1,137 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.testpass.usgov;\n+\n+import com.microsoft.identity.client.AcquireTokenParameters;\n+import com.microsoft.identity.client.AcquireTokenSilentParameters;\n+import com.microsoft.identity.client.IAccount;\n+import com.microsoft.identity.client.Prompt;\n+import com.microsoft.identity.client.msal.automationapp.AbstractMsalUiTest;\n+import com.microsoft.identity.client.msal.automationapp.R;\n+import com.microsoft.identity.client.msal.automationapp.interaction.InteractiveRequest;\n+import com.microsoft.identity.client.msal.automationapp.interaction.OnInteractionRequired;\n+import com.microsoft.identity.client.ui.automation.TestContext;\n+import com.microsoft.identity.client.ui.automation.app.IApp;\n+import com.microsoft.identity.client.ui.automation.broker.ITestBroker;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptHandlerParameters;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptParameter;\n+import com.microsoft.identity.client.ui.automation.interaction.microsoftsts.AadPromptHandler;\n+import com.microsoft.identity.internal.testutils.labutils.LabConfig;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserQuery;\n+\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.CountDownLatch;\n+\n+// Silent token acquisition with unexpired RT with USGov authority\n+// https://identitydivision.visualstudio.com/Engineering/_workitems/edit/938383\n+public class TestCase938383 extends AbstractMsalUiTest {\n+\n+    @Test\n+    public void test_938383() throws InterruptedException {\n+        final CountDownLatch latch = new CountDownLatch(1);\n+\n+        final AcquireTokenParameters parameters = new AcquireTokenParameters.Builder()\n+                .startAuthorizationFromActivity(mActivity)\n+                .withScopes(Arrays.asList(mScopes))\n+                .withCallback(successfulInteractiveCallback(latch))\n+                .withPrompt(Prompt.SELECT_ACCOUNT)\n+                .build();\n+\n+        // Start interactive token request in MSAL (should succeed)\n+        final InteractiveRequest interactiveRequest = new InteractiveRequest(\n+                mApplication,\n+                parameters,\n+                new OnInteractionRequired() {\n+                    @Override\n+                    public void handleUserInteraction() {\n+                        ((IApp) mBrowser).handleFirstRun();\n+\n+                        final String username = mLoginHint;\n+                        final String password = LabConfig.getCurrentLabConfig().getLabUserPassword();\n+\n+                        final PromptHandlerParameters promptHandlerParameters = PromptHandlerParameters.builder()\n+                                .prompt(PromptParameter.SELECT_ACCOUNT)\n+                                .loginHint(null)\n+                                .sessionExpected(false)\n+                                .consentPageExpected(false)\n+                                .speedBumpExpected(false)\n+                                .build();\n+\n+                        new AadPromptHandler(promptHandlerParameters)\n+                                .handlePrompt(username, password);\n+                    }\n+                }\n+        );\n+\n+        interactiveRequest.execute();\n+        latch.await();\n+\n+        // change the time on the device\n+        TestContext.getTestContext().getTestDevice().getSettings().changeDeviceTime();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI1NTgwMg=="}, "originalCommit": {"oid": "acc36652dd8e714abbe27580640df1ced6d083a7"}, "originalPosition": 93}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1794, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}