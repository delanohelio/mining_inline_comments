{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1NDI2MjQw", "number": 1264, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwNDoxMDo0MVrOFLipLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwMDoxODoyOVrOFMV47A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NjQ2MjU0OnYy", "diffSide": "RIGHT", "path": "msalautomationapp/src/main/java/com/microsoft/identity/client/msal/automationapp/sdk/MsalSdk.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwNDoxMDo0MVrOIOxR-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNzowNzoxOFrOIPNNuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM1ODM5Mg==", "bodyText": "Remove this?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552358392", "createdAt": "2021-01-06T04:10:41Z", "author": {"login": "shahzaibj"}, "path": "msalautomationapp/src/main/java/com/microsoft/identity/client/msal/automationapp/sdk/MsalSdk.java", "diffHunk": "@@ -0,0 +1,254 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.sdk;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.client.AcquireTokenParameters;\n+import com.microsoft.identity.client.AcquireTokenSilentParameters;\n+import com.microsoft.identity.client.AuthenticationCallback;\n+import com.microsoft.identity.client.IAccount;\n+import com.microsoft.identity.client.IAuthenticationResult;\n+import com.microsoft.identity.client.IMultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.ISingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.MultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplication;\n+import com.microsoft.identity.client.SingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.client.exception.MsalUserCancelException;\n+import com.microsoft.identity.client.ui.automation.TokenRequestTimeout;\n+import com.microsoft.identity.client.ui.automation.interaction.OnInteractionRequired;\n+import com.microsoft.identity.client.ui.automation.sdk.ResultFuture;\n+\n+import java.util.ArrayList;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+/**\n+ * A Sdk wrapper for Microsoft Authentication Library (MSAL) which implements\n+ * both the methods of acquire token interactively and silently and returns back the\n+ * AuthResult, MSAL tests can leverage this sdk for acquiring token with specific\n+ * parameters and get back the final result.\n+ */\n+public class MsalSdk implements IAuthSdk {\n+\n+    protected Map<String, String> upnUserIdMap = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n+\n+    @Override\n+    public MsalAuthResult acquireTokenInteractive(@NonNull MsalAuthTestParams authTestParams, OnInteractionRequired interactionRequiredCallback, TokenRequestTimeout tokenRequestTimeout) throws Throwable {\n+        final IPublicClientApplication pca = setupPCA(\n+                authTestParams.getActivity(),\n+                authTestParams.getMsalConfigResourceId()\n+        );\n+\n+        final ResultFuture<IAuthenticationResult, Exception> future = new ResultFuture<>();\n+\n+        final AcquireTokenParameters.Builder acquireTokenParametersBuilder = new AcquireTokenParameters.Builder()\n+                .startAuthorizationFromActivity(authTestParams.getActivity())\n+                .withLoginHint(authTestParams.getLoginHint())\n+                .withPrompt(authTestParams.getPromptParameter())\n+                .fromAuthority(authTestParams.getAuthority())\n+                .withCallback(getAuthCallback(future));\n+\n+        if (authTestParams.getScopes() == null || authTestParams.getScopes().isEmpty()) {\n+            acquireTokenParametersBuilder.withResource(authTestParams.getResource());\n+        } else {\n+            acquireTokenParametersBuilder.withScopes(new ArrayList<>(authTestParams.getScopes()));\n+        }\n+\n+        final AcquireTokenParameters acquireTokenParameters = acquireTokenParametersBuilder.build();\n+\n+        pca.acquireToken(acquireTokenParameters);\n+\n+        interactionRequiredCallback.handleUserInteraction();\n+\n+        try {\n+            final IAuthenticationResult result = future.get();\n+            return new MsalAuthResult(result);\n+        } catch (Exception exception) {\n+            return new MsalAuthResult(exception);\n+        }\n+    }\n+\n+    @Override\n+    public MsalAuthResult acquireTokenSilent(@NonNull MsalAuthTestParams authTestParams, TokenRequestTimeout tokenRequestTimeout) throws Throwable {\n+        final IPublicClientApplication pca = setupPCA(\n+            authTestParams.getActivity(),\n+            authTestParams.getMsalConfigResourceId()\n+        );\n+\n+        final ResultFuture<IAuthenticationResult, Exception> future = new ResultFuture<>();\n+\n+        final IAccount account = getAccount(\n+                authTestParams.getActivity(),\n+                authTestParams.getMsalConfigResourceId(),\n+                authTestParams.getLoginHint()\n+        );\n+\n+        final AcquireTokenSilentParameters.Builder acquireTokenParametersBuilder = new AcquireTokenSilentParameters.Builder()\n+                .forAccount(account)\n+                .forceRefresh(authTestParams.isForceRefresh())\n+                .fromAuthority(authTestParams.getAuthority())\n+                .withCallback(getAuthCallback(future));\n+\n+        if (authTestParams.getScopes() == null || authTestParams.getScopes().isEmpty()) {\n+            acquireTokenParametersBuilder.withResource(authTestParams.getResource());\n+        } else {\n+            acquireTokenParametersBuilder.withScopes(new ArrayList<>(authTestParams.getScopes()));\n+        }\n+\n+        final AcquireTokenSilentParameters acquireTokenParameters = acquireTokenParametersBuilder.build();\n+\n+        pca.acquireTokenSilentAsync(acquireTokenParameters);\n+\n+        try {\n+            final IAuthenticationResult result = future.get();\n+            return new MsalAuthResult(result);\n+        } catch (Exception exception) {\n+            return new MsalAuthResult(exception);\n+        }\n+    }\n+\n+    private IPublicClientApplication setupPCA(@NonNull final Context context,\n+                                             int msalConfigResourceId) {\n+        try {\n+            return PublicClientApplication.create(context, msalConfigResourceId);\n+        } catch (InterruptedException | MsalException e) {\n+            throw new AssertionError(e);\n+        }\n+    }\n+\n+    private AuthenticationCallback getAuthCallback(final ResultFuture<IAuthenticationResult, Exception> future) {\n+        return new AuthenticationCallback() {\n+            @Override\n+            public void onSuccess(IAuthenticationResult authenticationResult) {\n+                future.setResult(authenticationResult);\n+            }\n+\n+            @Override\n+            public void onError(MsalException exception) {\n+                future.setException(exception);\n+            }\n+\n+            @Override\n+            public void onCancel() {\n+                future.setException(new MsalUserCancelException());\n+            }\n+        };\n+    }\n+\n+    private IAccount getAccount(@NonNull final Activity activity,\n+                                final int msalConfigResourceId,\n+                                @NonNull final String username) {\n+        final IPublicClientApplication pca = setupPCA(\n+                activity,\n+                msalConfigResourceId\n+        );\n+\n+        if (pca instanceof SingleAccountPublicClientApplication) {\n+            return getAccountForSingleAccountPca((SingleAccountPublicClientApplication) pca);\n+        } else if (pca instanceof MultipleAccountPublicClientApplication) {\n+            return getAccountForMultipleAccountPca((MultipleAccountPublicClientApplication) pca, username);\n+        } else {\n+            throw new AssertionError(\"Weird\");\n+        }\n+    }\n+\n+    private IAccount getAccountForSingleAccountPca(SingleAccountPublicClientApplication pca) {\n+        final ResultFuture<IAccount, Exception> future = new ResultFuture<>();\n+\n+        pca.getCurrentAccountAsync(new ISingleAccountPublicClientApplication.CurrentAccountCallback() {\n+            @Override\n+            public void onAccountLoaded(@Nullable IAccount activeAccount) {\n+                future.setResult(activeAccount);\n+            }\n+\n+            @Override\n+            public void onAccountChanged(@Nullable IAccount priorAccount, @Nullable IAccount currentAccount) {\n+                future.setResult(currentAccount);\n+            }\n+\n+            @Override\n+            public void onError(@NonNull MsalException exception) {\n+                future.setException(exception);\n+            }\n+        });\n+\n+        try {\n+            return future.get();\n+        } catch (Exception exception) {\n+            throw new AssertionError(exception);\n+        }\n+    }\n+\n+    private IAccount getAccountForMultipleAccountPca(MultipleAccountPublicClientApplication pca,\n+                                                     final String username) {\n+        final ResultFuture<IAccount, Exception> future = new ResultFuture<>();\n+\n+        pca.getAccount(username, new IMultipleAccountPublicClientApplication.GetAccountCallback() {\n+            @Override\n+            public void onTaskCompleted(IAccount result) {\n+                future.setResult(result);\n+            }\n+\n+            @Override\n+            public void onError(MsalException exception) {\n+                future.setException(exception);\n+            }\n+        });\n+\n+        try {\n+            return future.get();\n+        } catch (Exception exception) {\n+            throw new AssertionError(exception);\n+        }\n+    }\n+\n+//    private AuthenticationContext createAuthContext(final Context context, final String authority) {\n+//        return new AuthenticationContext(context, authority, true);\n+//    }\n+//\n+//    private AuthenticationCallback getAuthenticationCallback(\n+//            final ResultFuture<AuthenticationResult, Exception> future) {\n+//        return new AuthenticationCallback<AuthenticationResult>() {\n+//            @Override\n+//            public void onSuccess(final AuthenticationResult authenticationResult) {\n+//                upnUserIdMap.put(\n+//                        authenticationResult.getUserInfo().getDisplayableId(),\n+//                        authenticationResult.getUserInfo().getUserId()\n+//                );\n+//                future.setResult(authenticationResult);\n+//            }\n+//\n+//            @Override\n+//            public void onError(final Exception e) {\n+//                future.setException(e);\n+//            }\n+//        };\n+//    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32457cb697599d08d9cfd8e5c9d53828e31d8f56"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgxNjA1OQ==", "bodyText": "removed", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552816059", "createdAt": "2021-01-06T17:07:18Z", "author": {"login": "ayushmeghwani"}, "path": "msalautomationapp/src/main/java/com/microsoft/identity/client/msal/automationapp/sdk/MsalSdk.java", "diffHunk": "@@ -0,0 +1,254 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.sdk;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.client.AcquireTokenParameters;\n+import com.microsoft.identity.client.AcquireTokenSilentParameters;\n+import com.microsoft.identity.client.AuthenticationCallback;\n+import com.microsoft.identity.client.IAccount;\n+import com.microsoft.identity.client.IAuthenticationResult;\n+import com.microsoft.identity.client.IMultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.ISingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.MultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplication;\n+import com.microsoft.identity.client.SingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.client.exception.MsalUserCancelException;\n+import com.microsoft.identity.client.ui.automation.TokenRequestTimeout;\n+import com.microsoft.identity.client.ui.automation.interaction.OnInteractionRequired;\n+import com.microsoft.identity.client.ui.automation.sdk.ResultFuture;\n+\n+import java.util.ArrayList;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+/**\n+ * A Sdk wrapper for Microsoft Authentication Library (MSAL) which implements\n+ * both the methods of acquire token interactively and silently and returns back the\n+ * AuthResult, MSAL tests can leverage this sdk for acquiring token with specific\n+ * parameters and get back the final result.\n+ */\n+public class MsalSdk implements IAuthSdk {\n+\n+    protected Map<String, String> upnUserIdMap = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n+\n+    @Override\n+    public MsalAuthResult acquireTokenInteractive(@NonNull MsalAuthTestParams authTestParams, OnInteractionRequired interactionRequiredCallback, TokenRequestTimeout tokenRequestTimeout) throws Throwable {\n+        final IPublicClientApplication pca = setupPCA(\n+                authTestParams.getActivity(),\n+                authTestParams.getMsalConfigResourceId()\n+        );\n+\n+        final ResultFuture<IAuthenticationResult, Exception> future = new ResultFuture<>();\n+\n+        final AcquireTokenParameters.Builder acquireTokenParametersBuilder = new AcquireTokenParameters.Builder()\n+                .startAuthorizationFromActivity(authTestParams.getActivity())\n+                .withLoginHint(authTestParams.getLoginHint())\n+                .withPrompt(authTestParams.getPromptParameter())\n+                .fromAuthority(authTestParams.getAuthority())\n+                .withCallback(getAuthCallback(future));\n+\n+        if (authTestParams.getScopes() == null || authTestParams.getScopes().isEmpty()) {\n+            acquireTokenParametersBuilder.withResource(authTestParams.getResource());\n+        } else {\n+            acquireTokenParametersBuilder.withScopes(new ArrayList<>(authTestParams.getScopes()));\n+        }\n+\n+        final AcquireTokenParameters acquireTokenParameters = acquireTokenParametersBuilder.build();\n+\n+        pca.acquireToken(acquireTokenParameters);\n+\n+        interactionRequiredCallback.handleUserInteraction();\n+\n+        try {\n+            final IAuthenticationResult result = future.get();\n+            return new MsalAuthResult(result);\n+        } catch (Exception exception) {\n+            return new MsalAuthResult(exception);\n+        }\n+    }\n+\n+    @Override\n+    public MsalAuthResult acquireTokenSilent(@NonNull MsalAuthTestParams authTestParams, TokenRequestTimeout tokenRequestTimeout) throws Throwable {\n+        final IPublicClientApplication pca = setupPCA(\n+            authTestParams.getActivity(),\n+            authTestParams.getMsalConfigResourceId()\n+        );\n+\n+        final ResultFuture<IAuthenticationResult, Exception> future = new ResultFuture<>();\n+\n+        final IAccount account = getAccount(\n+                authTestParams.getActivity(),\n+                authTestParams.getMsalConfigResourceId(),\n+                authTestParams.getLoginHint()\n+        );\n+\n+        final AcquireTokenSilentParameters.Builder acquireTokenParametersBuilder = new AcquireTokenSilentParameters.Builder()\n+                .forAccount(account)\n+                .forceRefresh(authTestParams.isForceRefresh())\n+                .fromAuthority(authTestParams.getAuthority())\n+                .withCallback(getAuthCallback(future));\n+\n+        if (authTestParams.getScopes() == null || authTestParams.getScopes().isEmpty()) {\n+            acquireTokenParametersBuilder.withResource(authTestParams.getResource());\n+        } else {\n+            acquireTokenParametersBuilder.withScopes(new ArrayList<>(authTestParams.getScopes()));\n+        }\n+\n+        final AcquireTokenSilentParameters acquireTokenParameters = acquireTokenParametersBuilder.build();\n+\n+        pca.acquireTokenSilentAsync(acquireTokenParameters);\n+\n+        try {\n+            final IAuthenticationResult result = future.get();\n+            return new MsalAuthResult(result);\n+        } catch (Exception exception) {\n+            return new MsalAuthResult(exception);\n+        }\n+    }\n+\n+    private IPublicClientApplication setupPCA(@NonNull final Context context,\n+                                             int msalConfigResourceId) {\n+        try {\n+            return PublicClientApplication.create(context, msalConfigResourceId);\n+        } catch (InterruptedException | MsalException e) {\n+            throw new AssertionError(e);\n+        }\n+    }\n+\n+    private AuthenticationCallback getAuthCallback(final ResultFuture<IAuthenticationResult, Exception> future) {\n+        return new AuthenticationCallback() {\n+            @Override\n+            public void onSuccess(IAuthenticationResult authenticationResult) {\n+                future.setResult(authenticationResult);\n+            }\n+\n+            @Override\n+            public void onError(MsalException exception) {\n+                future.setException(exception);\n+            }\n+\n+            @Override\n+            public void onCancel() {\n+                future.setException(new MsalUserCancelException());\n+            }\n+        };\n+    }\n+\n+    private IAccount getAccount(@NonNull final Activity activity,\n+                                final int msalConfigResourceId,\n+                                @NonNull final String username) {\n+        final IPublicClientApplication pca = setupPCA(\n+                activity,\n+                msalConfigResourceId\n+        );\n+\n+        if (pca instanceof SingleAccountPublicClientApplication) {\n+            return getAccountForSingleAccountPca((SingleAccountPublicClientApplication) pca);\n+        } else if (pca instanceof MultipleAccountPublicClientApplication) {\n+            return getAccountForMultipleAccountPca((MultipleAccountPublicClientApplication) pca, username);\n+        } else {\n+            throw new AssertionError(\"Weird\");\n+        }\n+    }\n+\n+    private IAccount getAccountForSingleAccountPca(SingleAccountPublicClientApplication pca) {\n+        final ResultFuture<IAccount, Exception> future = new ResultFuture<>();\n+\n+        pca.getCurrentAccountAsync(new ISingleAccountPublicClientApplication.CurrentAccountCallback() {\n+            @Override\n+            public void onAccountLoaded(@Nullable IAccount activeAccount) {\n+                future.setResult(activeAccount);\n+            }\n+\n+            @Override\n+            public void onAccountChanged(@Nullable IAccount priorAccount, @Nullable IAccount currentAccount) {\n+                future.setResult(currentAccount);\n+            }\n+\n+            @Override\n+            public void onError(@NonNull MsalException exception) {\n+                future.setException(exception);\n+            }\n+        });\n+\n+        try {\n+            return future.get();\n+        } catch (Exception exception) {\n+            throw new AssertionError(exception);\n+        }\n+    }\n+\n+    private IAccount getAccountForMultipleAccountPca(MultipleAccountPublicClientApplication pca,\n+                                                     final String username) {\n+        final ResultFuture<IAccount, Exception> future = new ResultFuture<>();\n+\n+        pca.getAccount(username, new IMultipleAccountPublicClientApplication.GetAccountCallback() {\n+            @Override\n+            public void onTaskCompleted(IAccount result) {\n+                future.setResult(result);\n+            }\n+\n+            @Override\n+            public void onError(MsalException exception) {\n+                future.setException(exception);\n+            }\n+        });\n+\n+        try {\n+            return future.get();\n+        } catch (Exception exception) {\n+            throw new AssertionError(exception);\n+        }\n+    }\n+\n+//    private AuthenticationContext createAuthContext(final Context context, final String authority) {\n+//        return new AuthenticationContext(context, authority, true);\n+//    }\n+//\n+//    private AuthenticationCallback getAuthenticationCallback(\n+//            final ResultFuture<AuthenticationResult, Exception> future) {\n+//        return new AuthenticationCallback<AuthenticationResult>() {\n+//            @Override\n+//            public void onSuccess(final AuthenticationResult authenticationResult) {\n+//                upnUserIdMap.put(\n+//                        authenticationResult.getUserInfo().getDisplayableId(),\n+//                        authenticationResult.getUserInfo().getUserId()\n+//                );\n+//                future.setResult(authenticationResult);\n+//            }\n+//\n+//            @Override\n+//            public void onError(final Exception e) {\n+//                future.setException(e);\n+//            }\n+//        };\n+//    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM1ODM5Mg=="}, "originalCommit": {"oid": "32457cb697599d08d9cfd8e5c9d53828e31d8f56"}, "originalPosition": 253}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NjQ3MjMwOnYy", "diffSide": "RIGHT", "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/broker/TestCase796048Clone.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwNDoxNjoxMFrOIOxXNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNzowNzoyNVrOIPNOQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM1OTczMw==", "bodyText": "add new line at end of file", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552359733", "createdAt": "2021-01-06T04:16:10Z", "author": {"login": "shahzaibj"}, "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/broker/TestCase796048Clone.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package com.microsoft.identity.client.msal.automationapp.testpass.broker;\n+\n+import com.microsoft.identity.client.Prompt;\n+import com.microsoft.identity.client.msal.automationapp.R;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalAuthResult;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalAuthTestParams;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalSdk;\n+import com.microsoft.identity.client.ui.automation.TestContext;\n+import com.microsoft.identity.client.ui.automation.interaction.OnInteractionRequired;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptHandlerParameters;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptParameter;\n+import com.microsoft.identity.client.ui.automation.interaction.microsoftsts.AadPromptHandler;\n+import com.microsoft.identity.internal.testutils.labutils.LabConfig;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserQuery;\n+\n+import org.junit.Test;\n+\n+public class TestCase796048Clone extends AbstractMsalBrokerTest {\n+\n+    @Test\n+    public void test_796048Clone() throws Throwable {\n+        final String username = mLoginHint;\n+        final String password = LabConfig.getCurrentLabConfig().getLabUserPassword();\n+\n+        final MsalSdk msalSdk = new MsalSdk();\n+\n+        final MsalAuthTestParams authTestParams = MsalAuthTestParams.builder()\n+                .activity(mActivity)\n+                .loginHint(mLoginHint)\n+                .resource(mScopes[0])\n+                .msalConfigResourceId(getConfigFileResourceId())\n+                .promptParameter(Prompt.SELECT_ACCOUNT)\n+                .build();\n+\n+        final MsalAuthResult authResult = msalSdk.acquireTokenInteractive(authTestParams, new OnInteractionRequired() {\n+            @Override\n+            public void handleUserInteraction() {\n+                final PromptHandlerParameters promptHandlerParameters = PromptHandlerParameters.builder()\n+                        .prompt(PromptParameter.SELECT_ACCOUNT)\n+                        .loginHint(mLoginHint)\n+                        .sessionExpected(false)\n+                        .consentPageExpected(false)\n+                        .speedBumpExpected(false)\n+                        .broker(mBroker)\n+                        .expectingBrokerAccountChooserActivity(false)\n+                        .build();\n+\n+                new AadPromptHandler(promptHandlerParameters)\n+                        .handlePrompt(username, password);\n+            }\n+        },null);\n+\n+        authResult.assertSuccess();\n+\n+        // now expire AT\n+\n+        TestContext.getTestContext().getTestDevice().getSettings().forwardDeviceTimeForOneDay();\n+\n+        // SILENT REQUEST\n+\n+        final MsalAuthTestParams authTestSilentParams = MsalAuthTestParams.builder()\n+                .activity(mActivity)\n+                .loginHint(mLoginHint)\n+                .resource(mScopes[0])\n+                .authority(getAuthority())\n+                .forceRefresh(true)\n+                .msalConfigResourceId(getConfigFileResourceId())\n+                .build();\n+\n+        final MsalAuthResult silentAuthResult = msalSdk.acquireTokenSilent(authTestSilentParams, null);\n+\n+        silentAuthResult.assertSuccess();\n+    }\n+\n+\n+    @Override\n+    public LabUserQuery getLabUserQuery() {\n+        final LabUserQuery query = new LabUserQuery();\n+        query.azureEnvironment = LabConstants.AzureEnvironment.AZURE_GERMANY_CLOUD;\n+        return query;\n+    }\n+\n+    @Override\n+    public String getTempUserType() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String[] getScopes() {\n+        return new String[]{\"00000002-0000-0000-c000-000000000000\"};\n+    }\n+\n+    @Override\n+    public String getAuthority() {\n+        return \"https://login.microsoftonline.de/common\";\n+    }\n+\n+    @Override\n+    public int getConfigFileResourceId() {\n+        return R.raw.msal_config_instance_aware_common;\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32457cb697599d08d9cfd8e5c9d53828e31d8f56"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgxNjE5Mg==", "bodyText": "added.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552816192", "createdAt": "2021-01-06T17:07:25Z", "author": {"login": "ayushmeghwani"}, "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/broker/TestCase796048Clone.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package com.microsoft.identity.client.msal.automationapp.testpass.broker;\n+\n+import com.microsoft.identity.client.Prompt;\n+import com.microsoft.identity.client.msal.automationapp.R;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalAuthResult;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalAuthTestParams;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalSdk;\n+import com.microsoft.identity.client.ui.automation.TestContext;\n+import com.microsoft.identity.client.ui.automation.interaction.OnInteractionRequired;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptHandlerParameters;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptParameter;\n+import com.microsoft.identity.client.ui.automation.interaction.microsoftsts.AadPromptHandler;\n+import com.microsoft.identity.internal.testutils.labutils.LabConfig;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserQuery;\n+\n+import org.junit.Test;\n+\n+public class TestCase796048Clone extends AbstractMsalBrokerTest {\n+\n+    @Test\n+    public void test_796048Clone() throws Throwable {\n+        final String username = mLoginHint;\n+        final String password = LabConfig.getCurrentLabConfig().getLabUserPassword();\n+\n+        final MsalSdk msalSdk = new MsalSdk();\n+\n+        final MsalAuthTestParams authTestParams = MsalAuthTestParams.builder()\n+                .activity(mActivity)\n+                .loginHint(mLoginHint)\n+                .resource(mScopes[0])\n+                .msalConfigResourceId(getConfigFileResourceId())\n+                .promptParameter(Prompt.SELECT_ACCOUNT)\n+                .build();\n+\n+        final MsalAuthResult authResult = msalSdk.acquireTokenInteractive(authTestParams, new OnInteractionRequired() {\n+            @Override\n+            public void handleUserInteraction() {\n+                final PromptHandlerParameters promptHandlerParameters = PromptHandlerParameters.builder()\n+                        .prompt(PromptParameter.SELECT_ACCOUNT)\n+                        .loginHint(mLoginHint)\n+                        .sessionExpected(false)\n+                        .consentPageExpected(false)\n+                        .speedBumpExpected(false)\n+                        .broker(mBroker)\n+                        .expectingBrokerAccountChooserActivity(false)\n+                        .build();\n+\n+                new AadPromptHandler(promptHandlerParameters)\n+                        .handlePrompt(username, password);\n+            }\n+        },null);\n+\n+        authResult.assertSuccess();\n+\n+        // now expire AT\n+\n+        TestContext.getTestContext().getTestDevice().getSettings().forwardDeviceTimeForOneDay();\n+\n+        // SILENT REQUEST\n+\n+        final MsalAuthTestParams authTestSilentParams = MsalAuthTestParams.builder()\n+                .activity(mActivity)\n+                .loginHint(mLoginHint)\n+                .resource(mScopes[0])\n+                .authority(getAuthority())\n+                .forceRefresh(true)\n+                .msalConfigResourceId(getConfigFileResourceId())\n+                .build();\n+\n+        final MsalAuthResult silentAuthResult = msalSdk.acquireTokenSilent(authTestSilentParams, null);\n+\n+        silentAuthResult.assertSuccess();\n+    }\n+\n+\n+    @Override\n+    public LabUserQuery getLabUserQuery() {\n+        final LabUserQuery query = new LabUserQuery();\n+        query.azureEnvironment = LabConstants.AzureEnvironment.AZURE_GERMANY_CLOUD;\n+        return query;\n+    }\n+\n+    @Override\n+    public String getTempUserType() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String[] getScopes() {\n+        return new String[]{\"00000002-0000-0000-c000-000000000000\"};\n+    }\n+\n+    @Override\n+    public String getAuthority() {\n+        return \"https://login.microsoftonline.de/common\";\n+    }\n+\n+    @Override\n+    public int getConfigFileResourceId() {\n+        return R.raw.msal_config_instance_aware_common;\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM1OTczMw=="}, "originalCommit": {"oid": "32457cb697599d08d9cfd8e5c9d53828e31d8f56"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NjQ4MjIyOnYy", "diffSide": "RIGHT", "path": "msalautomationapp/src/main/java/com/microsoft/identity/client/msal/automationapp/sdk/IAuthSdk.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwNDoyMzowNlrOIOxc4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNzowODoxOVrOIPNRig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MTE4NA==", "bodyText": "Can we move this as a generic interface to uiautomationutilities? that way it can used by both MSAL and ADAL automation", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552361184", "createdAt": "2021-01-06T04:23:06Z", "author": {"login": "shahzaibj"}, "path": "msalautomationapp/src/main/java/com/microsoft/identity/client/msal/automationapp/sdk/IAuthSdk.java", "diffHunk": "@@ -0,0 +1,51 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.sdk;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.ui.automation.TokenRequestTimeout;\n+import com.microsoft.identity.client.ui.automation.interaction.OnInteractionRequired;\n+\n+/**\n+ * An interface describing methods of acquire token. Implementing this interface\n+ * on a test facilitates specifying the necessary parameters required to acquire\n+ * token either interactively or silently.\n+ */\n+public interface IAuthSdk {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32457cb697599d08d9cfd8e5c9d53828e31d8f56"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2Mjc0Ng==", "bodyText": "you could do something like this:\npublic interface IAuthSdk<T extends AuthTestParams> {\n\n    /**\n     * Get the token interactively that can be used to access resources.\n     *\n     * @return A resultant token or an exception occurred while acquiring token interactively\n     */\n    AuthResult acquireTokenInteractive(@NonNull final T authTestParams,\n                                       final OnInteractionRequired interactionRequiredCallback, final TokenRequestTimeout tokenRequestTimeout) throws Throwable;\n\n    /**\n     * Get the token silently that can be used to access resources.\n     *\n     * @return A resultant token or an exception occurred while acquiring token silently\n     */\n    AuthResult acquireTokenSilent(@NonNull final T authTestParams, final TokenRequestTimeout tokenRequestTimeout) throws Throwable;\n}\nand then in the MSAL SDK you could do something like this:\npublic class MsalSdk implements IAuthSdk<MsalAuthTestParams> {\n // remaining code here won't need to change\n}\nThis would allow you to have a much more generic IAuthSdk and move it to uiautomationutilities", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552362746", "createdAt": "2021-01-06T04:29:39Z", "author": {"login": "shahzaibj"}, "path": "msalautomationapp/src/main/java/com/microsoft/identity/client/msal/automationapp/sdk/IAuthSdk.java", "diffHunk": "@@ -0,0 +1,51 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.sdk;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.ui.automation.TokenRequestTimeout;\n+import com.microsoft.identity.client.ui.automation.interaction.OnInteractionRequired;\n+\n+/**\n+ * An interface describing methods of acquire token. Implementing this interface\n+ * on a test facilitates specifying the necessary parameters required to acquire\n+ * token either interactively or silently.\n+ */\n+public interface IAuthSdk {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MTE4NA=="}, "originalCommit": {"oid": "32457cb697599d08d9cfd8e5c9d53828e31d8f56"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgxNzAzNA==", "bodyText": "added the generic Auth Sdk in uiautomation utilities (common) and using here now.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552817034", "createdAt": "2021-01-06T17:08:19Z", "author": {"login": "ayushmeghwani"}, "path": "msalautomationapp/src/main/java/com/microsoft/identity/client/msal/automationapp/sdk/IAuthSdk.java", "diffHunk": "@@ -0,0 +1,51 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.sdk;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.ui.automation.TokenRequestTimeout;\n+import com.microsoft.identity.client.ui.automation.interaction.OnInteractionRequired;\n+\n+/**\n+ * An interface describing methods of acquire token. Implementing this interface\n+ * on a test facilitates specifying the necessary parameters required to acquire\n+ * token either interactively or silently.\n+ */\n+public interface IAuthSdk {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MTE4NA=="}, "originalCommit": {"oid": "32457cb697599d08d9cfd8e5c9d53828e31d8f56"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NjQ4NzAyOnYy", "diffSide": "RIGHT", "path": "msalautomationapp/src/main/java/com/microsoft/identity/client/msal/automationapp/sdk/MsalSdk.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwNDoyNTo1OFrOIOxfXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNzoyMjozM1rOIPOFQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MTgyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } catch (Exception exception) {\n          \n          \n            \n                    } catch (final Exception exception) {", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552361822", "createdAt": "2021-01-06T04:25:58Z", "author": {"login": "shahzaibj"}, "path": "msalautomationapp/src/main/java/com/microsoft/identity/client/msal/automationapp/sdk/MsalSdk.java", "diffHunk": "@@ -0,0 +1,254 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.sdk;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.client.AcquireTokenParameters;\n+import com.microsoft.identity.client.AcquireTokenSilentParameters;\n+import com.microsoft.identity.client.AuthenticationCallback;\n+import com.microsoft.identity.client.IAccount;\n+import com.microsoft.identity.client.IAuthenticationResult;\n+import com.microsoft.identity.client.IMultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.ISingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.MultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplication;\n+import com.microsoft.identity.client.SingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.client.exception.MsalUserCancelException;\n+import com.microsoft.identity.client.ui.automation.TokenRequestTimeout;\n+import com.microsoft.identity.client.ui.automation.interaction.OnInteractionRequired;\n+import com.microsoft.identity.client.ui.automation.sdk.ResultFuture;\n+\n+import java.util.ArrayList;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+/**\n+ * A Sdk wrapper for Microsoft Authentication Library (MSAL) which implements\n+ * both the methods of acquire token interactively and silently and returns back the\n+ * AuthResult, MSAL tests can leverage this sdk for acquiring token with specific\n+ * parameters and get back the final result.\n+ */\n+public class MsalSdk implements IAuthSdk {\n+\n+    protected Map<String, String> upnUserIdMap = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n+\n+    @Override\n+    public MsalAuthResult acquireTokenInteractive(@NonNull MsalAuthTestParams authTestParams, OnInteractionRequired interactionRequiredCallback, TokenRequestTimeout tokenRequestTimeout) throws Throwable {\n+        final IPublicClientApplication pca = setupPCA(\n+                authTestParams.getActivity(),\n+                authTestParams.getMsalConfigResourceId()\n+        );\n+\n+        final ResultFuture<IAuthenticationResult, Exception> future = new ResultFuture<>();\n+\n+        final AcquireTokenParameters.Builder acquireTokenParametersBuilder = new AcquireTokenParameters.Builder()\n+                .startAuthorizationFromActivity(authTestParams.getActivity())\n+                .withLoginHint(authTestParams.getLoginHint())\n+                .withPrompt(authTestParams.getPromptParameter())\n+                .fromAuthority(authTestParams.getAuthority())\n+                .withCallback(getAuthCallback(future));\n+\n+        if (authTestParams.getScopes() == null || authTestParams.getScopes().isEmpty()) {\n+            acquireTokenParametersBuilder.withResource(authTestParams.getResource());\n+        } else {\n+            acquireTokenParametersBuilder.withScopes(new ArrayList<>(authTestParams.getScopes()));\n+        }\n+\n+        final AcquireTokenParameters acquireTokenParameters = acquireTokenParametersBuilder.build();\n+\n+        pca.acquireToken(acquireTokenParameters);\n+\n+        interactionRequiredCallback.handleUserInteraction();\n+\n+        try {\n+            final IAuthenticationResult result = future.get();\n+            return new MsalAuthResult(result);\n+        } catch (Exception exception) {\n+            return new MsalAuthResult(exception);\n+        }\n+    }\n+\n+    @Override\n+    public MsalAuthResult acquireTokenSilent(@NonNull MsalAuthTestParams authTestParams, TokenRequestTimeout tokenRequestTimeout) throws Throwable {\n+        final IPublicClientApplication pca = setupPCA(\n+            authTestParams.getActivity(),\n+            authTestParams.getMsalConfigResourceId()\n+        );\n+\n+        final ResultFuture<IAuthenticationResult, Exception> future = new ResultFuture<>();\n+\n+        final IAccount account = getAccount(\n+                authTestParams.getActivity(),\n+                authTestParams.getMsalConfigResourceId(),\n+                authTestParams.getLoginHint()\n+        );\n+\n+        final AcquireTokenSilentParameters.Builder acquireTokenParametersBuilder = new AcquireTokenSilentParameters.Builder()\n+                .forAccount(account)\n+                .forceRefresh(authTestParams.isForceRefresh())\n+                .fromAuthority(authTestParams.getAuthority())\n+                .withCallback(getAuthCallback(future));\n+\n+        if (authTestParams.getScopes() == null || authTestParams.getScopes().isEmpty()) {\n+            acquireTokenParametersBuilder.withResource(authTestParams.getResource());\n+        } else {\n+            acquireTokenParametersBuilder.withScopes(new ArrayList<>(authTestParams.getScopes()));\n+        }\n+\n+        final AcquireTokenSilentParameters acquireTokenParameters = acquireTokenParametersBuilder.build();\n+\n+        pca.acquireTokenSilentAsync(acquireTokenParameters);\n+\n+        try {\n+            final IAuthenticationResult result = future.get();\n+            return new MsalAuthResult(result);\n+        } catch (Exception exception) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32457cb697599d08d9cfd8e5c9d53828e31d8f56"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgzMDI3NQ==", "bodyText": "added", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552830275", "createdAt": "2021-01-06T17:22:33Z", "author": {"login": "ayushmeghwani"}, "path": "msalautomationapp/src/main/java/com/microsoft/identity/client/msal/automationapp/sdk/MsalSdk.java", "diffHunk": "@@ -0,0 +1,254 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.sdk;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.client.AcquireTokenParameters;\n+import com.microsoft.identity.client.AcquireTokenSilentParameters;\n+import com.microsoft.identity.client.AuthenticationCallback;\n+import com.microsoft.identity.client.IAccount;\n+import com.microsoft.identity.client.IAuthenticationResult;\n+import com.microsoft.identity.client.IMultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.ISingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.MultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplication;\n+import com.microsoft.identity.client.SingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.client.exception.MsalUserCancelException;\n+import com.microsoft.identity.client.ui.automation.TokenRequestTimeout;\n+import com.microsoft.identity.client.ui.automation.interaction.OnInteractionRequired;\n+import com.microsoft.identity.client.ui.automation.sdk.ResultFuture;\n+\n+import java.util.ArrayList;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+/**\n+ * A Sdk wrapper for Microsoft Authentication Library (MSAL) which implements\n+ * both the methods of acquire token interactively and silently and returns back the\n+ * AuthResult, MSAL tests can leverage this sdk for acquiring token with specific\n+ * parameters and get back the final result.\n+ */\n+public class MsalSdk implements IAuthSdk {\n+\n+    protected Map<String, String> upnUserIdMap = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n+\n+    @Override\n+    public MsalAuthResult acquireTokenInteractive(@NonNull MsalAuthTestParams authTestParams, OnInteractionRequired interactionRequiredCallback, TokenRequestTimeout tokenRequestTimeout) throws Throwable {\n+        final IPublicClientApplication pca = setupPCA(\n+                authTestParams.getActivity(),\n+                authTestParams.getMsalConfigResourceId()\n+        );\n+\n+        final ResultFuture<IAuthenticationResult, Exception> future = new ResultFuture<>();\n+\n+        final AcquireTokenParameters.Builder acquireTokenParametersBuilder = new AcquireTokenParameters.Builder()\n+                .startAuthorizationFromActivity(authTestParams.getActivity())\n+                .withLoginHint(authTestParams.getLoginHint())\n+                .withPrompt(authTestParams.getPromptParameter())\n+                .fromAuthority(authTestParams.getAuthority())\n+                .withCallback(getAuthCallback(future));\n+\n+        if (authTestParams.getScopes() == null || authTestParams.getScopes().isEmpty()) {\n+            acquireTokenParametersBuilder.withResource(authTestParams.getResource());\n+        } else {\n+            acquireTokenParametersBuilder.withScopes(new ArrayList<>(authTestParams.getScopes()));\n+        }\n+\n+        final AcquireTokenParameters acquireTokenParameters = acquireTokenParametersBuilder.build();\n+\n+        pca.acquireToken(acquireTokenParameters);\n+\n+        interactionRequiredCallback.handleUserInteraction();\n+\n+        try {\n+            final IAuthenticationResult result = future.get();\n+            return new MsalAuthResult(result);\n+        } catch (Exception exception) {\n+            return new MsalAuthResult(exception);\n+        }\n+    }\n+\n+    @Override\n+    public MsalAuthResult acquireTokenSilent(@NonNull MsalAuthTestParams authTestParams, TokenRequestTimeout tokenRequestTimeout) throws Throwable {\n+        final IPublicClientApplication pca = setupPCA(\n+            authTestParams.getActivity(),\n+            authTestParams.getMsalConfigResourceId()\n+        );\n+\n+        final ResultFuture<IAuthenticationResult, Exception> future = new ResultFuture<>();\n+\n+        final IAccount account = getAccount(\n+                authTestParams.getActivity(),\n+                authTestParams.getMsalConfigResourceId(),\n+                authTestParams.getLoginHint()\n+        );\n+\n+        final AcquireTokenSilentParameters.Builder acquireTokenParametersBuilder = new AcquireTokenSilentParameters.Builder()\n+                .forAccount(account)\n+                .forceRefresh(authTestParams.isForceRefresh())\n+                .fromAuthority(authTestParams.getAuthority())\n+                .withCallback(getAuthCallback(future));\n+\n+        if (authTestParams.getScopes() == null || authTestParams.getScopes().isEmpty()) {\n+            acquireTokenParametersBuilder.withResource(authTestParams.getResource());\n+        } else {\n+            acquireTokenParametersBuilder.withScopes(new ArrayList<>(authTestParams.getScopes()));\n+        }\n+\n+        final AcquireTokenSilentParameters acquireTokenParameters = acquireTokenParametersBuilder.build();\n+\n+        pca.acquireTokenSilentAsync(acquireTokenParameters);\n+\n+        try {\n+            final IAuthenticationResult result = future.get();\n+            return new MsalAuthResult(result);\n+        } catch (Exception exception) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MTgyMg=="}, "originalCommit": {"oid": "32457cb697599d08d9cfd8e5c9d53828e31d8f56"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NjQ4NzY3OnYy", "diffSide": "RIGHT", "path": "msalautomationapp/src/main/java/com/microsoft/identity/client/msal/automationapp/sdk/MsalSdk.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwNDoyNjoxNlrOIOxfqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNzoxNzowMlrOIPNyXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MTg5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private IAccount getAccountForSingleAccountPca(SingleAccountPublicClientApplication pca) {\n          \n          \n            \n                private IAccount getAccountForSingleAccountPca(@NonNull final SingleAccountPublicClientApplication pca) {", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552361897", "createdAt": "2021-01-06T04:26:16Z", "author": {"login": "shahzaibj"}, "path": "msalautomationapp/src/main/java/com/microsoft/identity/client/msal/automationapp/sdk/MsalSdk.java", "diffHunk": "@@ -0,0 +1,254 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.sdk;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.client.AcquireTokenParameters;\n+import com.microsoft.identity.client.AcquireTokenSilentParameters;\n+import com.microsoft.identity.client.AuthenticationCallback;\n+import com.microsoft.identity.client.IAccount;\n+import com.microsoft.identity.client.IAuthenticationResult;\n+import com.microsoft.identity.client.IMultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.ISingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.MultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplication;\n+import com.microsoft.identity.client.SingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.client.exception.MsalUserCancelException;\n+import com.microsoft.identity.client.ui.automation.TokenRequestTimeout;\n+import com.microsoft.identity.client.ui.automation.interaction.OnInteractionRequired;\n+import com.microsoft.identity.client.ui.automation.sdk.ResultFuture;\n+\n+import java.util.ArrayList;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+/**\n+ * A Sdk wrapper for Microsoft Authentication Library (MSAL) which implements\n+ * both the methods of acquire token interactively and silently and returns back the\n+ * AuthResult, MSAL tests can leverage this sdk for acquiring token with specific\n+ * parameters and get back the final result.\n+ */\n+public class MsalSdk implements IAuthSdk {\n+\n+    protected Map<String, String> upnUserIdMap = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n+\n+    @Override\n+    public MsalAuthResult acquireTokenInteractive(@NonNull MsalAuthTestParams authTestParams, OnInteractionRequired interactionRequiredCallback, TokenRequestTimeout tokenRequestTimeout) throws Throwable {\n+        final IPublicClientApplication pca = setupPCA(\n+                authTestParams.getActivity(),\n+                authTestParams.getMsalConfigResourceId()\n+        );\n+\n+        final ResultFuture<IAuthenticationResult, Exception> future = new ResultFuture<>();\n+\n+        final AcquireTokenParameters.Builder acquireTokenParametersBuilder = new AcquireTokenParameters.Builder()\n+                .startAuthorizationFromActivity(authTestParams.getActivity())\n+                .withLoginHint(authTestParams.getLoginHint())\n+                .withPrompt(authTestParams.getPromptParameter())\n+                .fromAuthority(authTestParams.getAuthority())\n+                .withCallback(getAuthCallback(future));\n+\n+        if (authTestParams.getScopes() == null || authTestParams.getScopes().isEmpty()) {\n+            acquireTokenParametersBuilder.withResource(authTestParams.getResource());\n+        } else {\n+            acquireTokenParametersBuilder.withScopes(new ArrayList<>(authTestParams.getScopes()));\n+        }\n+\n+        final AcquireTokenParameters acquireTokenParameters = acquireTokenParametersBuilder.build();\n+\n+        pca.acquireToken(acquireTokenParameters);\n+\n+        interactionRequiredCallback.handleUserInteraction();\n+\n+        try {\n+            final IAuthenticationResult result = future.get();\n+            return new MsalAuthResult(result);\n+        } catch (Exception exception) {\n+            return new MsalAuthResult(exception);\n+        }\n+    }\n+\n+    @Override\n+    public MsalAuthResult acquireTokenSilent(@NonNull MsalAuthTestParams authTestParams, TokenRequestTimeout tokenRequestTimeout) throws Throwable {\n+        final IPublicClientApplication pca = setupPCA(\n+            authTestParams.getActivity(),\n+            authTestParams.getMsalConfigResourceId()\n+        );\n+\n+        final ResultFuture<IAuthenticationResult, Exception> future = new ResultFuture<>();\n+\n+        final IAccount account = getAccount(\n+                authTestParams.getActivity(),\n+                authTestParams.getMsalConfigResourceId(),\n+                authTestParams.getLoginHint()\n+        );\n+\n+        final AcquireTokenSilentParameters.Builder acquireTokenParametersBuilder = new AcquireTokenSilentParameters.Builder()\n+                .forAccount(account)\n+                .forceRefresh(authTestParams.isForceRefresh())\n+                .fromAuthority(authTestParams.getAuthority())\n+                .withCallback(getAuthCallback(future));\n+\n+        if (authTestParams.getScopes() == null || authTestParams.getScopes().isEmpty()) {\n+            acquireTokenParametersBuilder.withResource(authTestParams.getResource());\n+        } else {\n+            acquireTokenParametersBuilder.withScopes(new ArrayList<>(authTestParams.getScopes()));\n+        }\n+\n+        final AcquireTokenSilentParameters acquireTokenParameters = acquireTokenParametersBuilder.build();\n+\n+        pca.acquireTokenSilentAsync(acquireTokenParameters);\n+\n+        try {\n+            final IAuthenticationResult result = future.get();\n+            return new MsalAuthResult(result);\n+        } catch (Exception exception) {\n+            return new MsalAuthResult(exception);\n+        }\n+    }\n+\n+    private IPublicClientApplication setupPCA(@NonNull final Context context,\n+                                             int msalConfigResourceId) {\n+        try {\n+            return PublicClientApplication.create(context, msalConfigResourceId);\n+        } catch (InterruptedException | MsalException e) {\n+            throw new AssertionError(e);\n+        }\n+    }\n+\n+    private AuthenticationCallback getAuthCallback(final ResultFuture<IAuthenticationResult, Exception> future) {\n+        return new AuthenticationCallback() {\n+            @Override\n+            public void onSuccess(IAuthenticationResult authenticationResult) {\n+                future.setResult(authenticationResult);\n+            }\n+\n+            @Override\n+            public void onError(MsalException exception) {\n+                future.setException(exception);\n+            }\n+\n+            @Override\n+            public void onCancel() {\n+                future.setException(new MsalUserCancelException());\n+            }\n+        };\n+    }\n+\n+    private IAccount getAccount(@NonNull final Activity activity,\n+                                final int msalConfigResourceId,\n+                                @NonNull final String username) {\n+        final IPublicClientApplication pca = setupPCA(\n+                activity,\n+                msalConfigResourceId\n+        );\n+\n+        if (pca instanceof SingleAccountPublicClientApplication) {\n+            return getAccountForSingleAccountPca((SingleAccountPublicClientApplication) pca);\n+        } else if (pca instanceof MultipleAccountPublicClientApplication) {\n+            return getAccountForMultipleAccountPca((MultipleAccountPublicClientApplication) pca, username);\n+        } else {\n+            throw new AssertionError(\"Weird\");\n+        }\n+    }\n+\n+    private IAccount getAccountForSingleAccountPca(SingleAccountPublicClientApplication pca) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32457cb697599d08d9cfd8e5c9d53828e31d8f56"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgyNTQzNw==", "bodyText": "added", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552825437", "createdAt": "2021-01-06T17:17:02Z", "author": {"login": "ayushmeghwani"}, "path": "msalautomationapp/src/main/java/com/microsoft/identity/client/msal/automationapp/sdk/MsalSdk.java", "diffHunk": "@@ -0,0 +1,254 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.sdk;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.client.AcquireTokenParameters;\n+import com.microsoft.identity.client.AcquireTokenSilentParameters;\n+import com.microsoft.identity.client.AuthenticationCallback;\n+import com.microsoft.identity.client.IAccount;\n+import com.microsoft.identity.client.IAuthenticationResult;\n+import com.microsoft.identity.client.IMultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.ISingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.MultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplication;\n+import com.microsoft.identity.client.SingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.client.exception.MsalUserCancelException;\n+import com.microsoft.identity.client.ui.automation.TokenRequestTimeout;\n+import com.microsoft.identity.client.ui.automation.interaction.OnInteractionRequired;\n+import com.microsoft.identity.client.ui.automation.sdk.ResultFuture;\n+\n+import java.util.ArrayList;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+/**\n+ * A Sdk wrapper for Microsoft Authentication Library (MSAL) which implements\n+ * both the methods of acquire token interactively and silently and returns back the\n+ * AuthResult, MSAL tests can leverage this sdk for acquiring token with specific\n+ * parameters and get back the final result.\n+ */\n+public class MsalSdk implements IAuthSdk {\n+\n+    protected Map<String, String> upnUserIdMap = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n+\n+    @Override\n+    public MsalAuthResult acquireTokenInteractive(@NonNull MsalAuthTestParams authTestParams, OnInteractionRequired interactionRequiredCallback, TokenRequestTimeout tokenRequestTimeout) throws Throwable {\n+        final IPublicClientApplication pca = setupPCA(\n+                authTestParams.getActivity(),\n+                authTestParams.getMsalConfigResourceId()\n+        );\n+\n+        final ResultFuture<IAuthenticationResult, Exception> future = new ResultFuture<>();\n+\n+        final AcquireTokenParameters.Builder acquireTokenParametersBuilder = new AcquireTokenParameters.Builder()\n+                .startAuthorizationFromActivity(authTestParams.getActivity())\n+                .withLoginHint(authTestParams.getLoginHint())\n+                .withPrompt(authTestParams.getPromptParameter())\n+                .fromAuthority(authTestParams.getAuthority())\n+                .withCallback(getAuthCallback(future));\n+\n+        if (authTestParams.getScopes() == null || authTestParams.getScopes().isEmpty()) {\n+            acquireTokenParametersBuilder.withResource(authTestParams.getResource());\n+        } else {\n+            acquireTokenParametersBuilder.withScopes(new ArrayList<>(authTestParams.getScopes()));\n+        }\n+\n+        final AcquireTokenParameters acquireTokenParameters = acquireTokenParametersBuilder.build();\n+\n+        pca.acquireToken(acquireTokenParameters);\n+\n+        interactionRequiredCallback.handleUserInteraction();\n+\n+        try {\n+            final IAuthenticationResult result = future.get();\n+            return new MsalAuthResult(result);\n+        } catch (Exception exception) {\n+            return new MsalAuthResult(exception);\n+        }\n+    }\n+\n+    @Override\n+    public MsalAuthResult acquireTokenSilent(@NonNull MsalAuthTestParams authTestParams, TokenRequestTimeout tokenRequestTimeout) throws Throwable {\n+        final IPublicClientApplication pca = setupPCA(\n+            authTestParams.getActivity(),\n+            authTestParams.getMsalConfigResourceId()\n+        );\n+\n+        final ResultFuture<IAuthenticationResult, Exception> future = new ResultFuture<>();\n+\n+        final IAccount account = getAccount(\n+                authTestParams.getActivity(),\n+                authTestParams.getMsalConfigResourceId(),\n+                authTestParams.getLoginHint()\n+        );\n+\n+        final AcquireTokenSilentParameters.Builder acquireTokenParametersBuilder = new AcquireTokenSilentParameters.Builder()\n+                .forAccount(account)\n+                .forceRefresh(authTestParams.isForceRefresh())\n+                .fromAuthority(authTestParams.getAuthority())\n+                .withCallback(getAuthCallback(future));\n+\n+        if (authTestParams.getScopes() == null || authTestParams.getScopes().isEmpty()) {\n+            acquireTokenParametersBuilder.withResource(authTestParams.getResource());\n+        } else {\n+            acquireTokenParametersBuilder.withScopes(new ArrayList<>(authTestParams.getScopes()));\n+        }\n+\n+        final AcquireTokenSilentParameters acquireTokenParameters = acquireTokenParametersBuilder.build();\n+\n+        pca.acquireTokenSilentAsync(acquireTokenParameters);\n+\n+        try {\n+            final IAuthenticationResult result = future.get();\n+            return new MsalAuthResult(result);\n+        } catch (Exception exception) {\n+            return new MsalAuthResult(exception);\n+        }\n+    }\n+\n+    private IPublicClientApplication setupPCA(@NonNull final Context context,\n+                                             int msalConfigResourceId) {\n+        try {\n+            return PublicClientApplication.create(context, msalConfigResourceId);\n+        } catch (InterruptedException | MsalException e) {\n+            throw new AssertionError(e);\n+        }\n+    }\n+\n+    private AuthenticationCallback getAuthCallback(final ResultFuture<IAuthenticationResult, Exception> future) {\n+        return new AuthenticationCallback() {\n+            @Override\n+            public void onSuccess(IAuthenticationResult authenticationResult) {\n+                future.setResult(authenticationResult);\n+            }\n+\n+            @Override\n+            public void onError(MsalException exception) {\n+                future.setException(exception);\n+            }\n+\n+            @Override\n+            public void onCancel() {\n+                future.setException(new MsalUserCancelException());\n+            }\n+        };\n+    }\n+\n+    private IAccount getAccount(@NonNull final Activity activity,\n+                                final int msalConfigResourceId,\n+                                @NonNull final String username) {\n+        final IPublicClientApplication pca = setupPCA(\n+                activity,\n+                msalConfigResourceId\n+        );\n+\n+        if (pca instanceof SingleAccountPublicClientApplication) {\n+            return getAccountForSingleAccountPca((SingleAccountPublicClientApplication) pca);\n+        } else if (pca instanceof MultipleAccountPublicClientApplication) {\n+            return getAccountForMultipleAccountPca((MultipleAccountPublicClientApplication) pca, username);\n+        } else {\n+            throw new AssertionError(\"Weird\");\n+        }\n+    }\n+\n+    private IAccount getAccountForSingleAccountPca(SingleAccountPublicClientApplication pca) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MTg5Nw=="}, "originalCommit": {"oid": "32457cb697599d08d9cfd8e5c9d53828e31d8f56"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NjQ4ODE0OnYy", "diffSide": "RIGHT", "path": "msalautomationapp/src/main/java/com/microsoft/identity/client/msal/automationapp/sdk/MsalSdk.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwNDoyNjozM1rOIOxf6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNzoxNjozM1rOIPNwlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MTk2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private IAccount getAccountForMultipleAccountPca(MultipleAccountPublicClientApplication pca,\n          \n          \n            \n                private IAccount getAccountForMultipleAccountPca(@NonNull final MultipleAccountPublicClientApplication pca,", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552361963", "createdAt": "2021-01-06T04:26:33Z", "author": {"login": "shahzaibj"}, "path": "msalautomationapp/src/main/java/com/microsoft/identity/client/msal/automationapp/sdk/MsalSdk.java", "diffHunk": "@@ -0,0 +1,254 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.sdk;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.client.AcquireTokenParameters;\n+import com.microsoft.identity.client.AcquireTokenSilentParameters;\n+import com.microsoft.identity.client.AuthenticationCallback;\n+import com.microsoft.identity.client.IAccount;\n+import com.microsoft.identity.client.IAuthenticationResult;\n+import com.microsoft.identity.client.IMultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.ISingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.MultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplication;\n+import com.microsoft.identity.client.SingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.client.exception.MsalUserCancelException;\n+import com.microsoft.identity.client.ui.automation.TokenRequestTimeout;\n+import com.microsoft.identity.client.ui.automation.interaction.OnInteractionRequired;\n+import com.microsoft.identity.client.ui.automation.sdk.ResultFuture;\n+\n+import java.util.ArrayList;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+/**\n+ * A Sdk wrapper for Microsoft Authentication Library (MSAL) which implements\n+ * both the methods of acquire token interactively and silently and returns back the\n+ * AuthResult, MSAL tests can leverage this sdk for acquiring token with specific\n+ * parameters and get back the final result.\n+ */\n+public class MsalSdk implements IAuthSdk {\n+\n+    protected Map<String, String> upnUserIdMap = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n+\n+    @Override\n+    public MsalAuthResult acquireTokenInteractive(@NonNull MsalAuthTestParams authTestParams, OnInteractionRequired interactionRequiredCallback, TokenRequestTimeout tokenRequestTimeout) throws Throwable {\n+        final IPublicClientApplication pca = setupPCA(\n+                authTestParams.getActivity(),\n+                authTestParams.getMsalConfigResourceId()\n+        );\n+\n+        final ResultFuture<IAuthenticationResult, Exception> future = new ResultFuture<>();\n+\n+        final AcquireTokenParameters.Builder acquireTokenParametersBuilder = new AcquireTokenParameters.Builder()\n+                .startAuthorizationFromActivity(authTestParams.getActivity())\n+                .withLoginHint(authTestParams.getLoginHint())\n+                .withPrompt(authTestParams.getPromptParameter())\n+                .fromAuthority(authTestParams.getAuthority())\n+                .withCallback(getAuthCallback(future));\n+\n+        if (authTestParams.getScopes() == null || authTestParams.getScopes().isEmpty()) {\n+            acquireTokenParametersBuilder.withResource(authTestParams.getResource());\n+        } else {\n+            acquireTokenParametersBuilder.withScopes(new ArrayList<>(authTestParams.getScopes()));\n+        }\n+\n+        final AcquireTokenParameters acquireTokenParameters = acquireTokenParametersBuilder.build();\n+\n+        pca.acquireToken(acquireTokenParameters);\n+\n+        interactionRequiredCallback.handleUserInteraction();\n+\n+        try {\n+            final IAuthenticationResult result = future.get();\n+            return new MsalAuthResult(result);\n+        } catch (Exception exception) {\n+            return new MsalAuthResult(exception);\n+        }\n+    }\n+\n+    @Override\n+    public MsalAuthResult acquireTokenSilent(@NonNull MsalAuthTestParams authTestParams, TokenRequestTimeout tokenRequestTimeout) throws Throwable {\n+        final IPublicClientApplication pca = setupPCA(\n+            authTestParams.getActivity(),\n+            authTestParams.getMsalConfigResourceId()\n+        );\n+\n+        final ResultFuture<IAuthenticationResult, Exception> future = new ResultFuture<>();\n+\n+        final IAccount account = getAccount(\n+                authTestParams.getActivity(),\n+                authTestParams.getMsalConfigResourceId(),\n+                authTestParams.getLoginHint()\n+        );\n+\n+        final AcquireTokenSilentParameters.Builder acquireTokenParametersBuilder = new AcquireTokenSilentParameters.Builder()\n+                .forAccount(account)\n+                .forceRefresh(authTestParams.isForceRefresh())\n+                .fromAuthority(authTestParams.getAuthority())\n+                .withCallback(getAuthCallback(future));\n+\n+        if (authTestParams.getScopes() == null || authTestParams.getScopes().isEmpty()) {\n+            acquireTokenParametersBuilder.withResource(authTestParams.getResource());\n+        } else {\n+            acquireTokenParametersBuilder.withScopes(new ArrayList<>(authTestParams.getScopes()));\n+        }\n+\n+        final AcquireTokenSilentParameters acquireTokenParameters = acquireTokenParametersBuilder.build();\n+\n+        pca.acquireTokenSilentAsync(acquireTokenParameters);\n+\n+        try {\n+            final IAuthenticationResult result = future.get();\n+            return new MsalAuthResult(result);\n+        } catch (Exception exception) {\n+            return new MsalAuthResult(exception);\n+        }\n+    }\n+\n+    private IPublicClientApplication setupPCA(@NonNull final Context context,\n+                                             int msalConfigResourceId) {\n+        try {\n+            return PublicClientApplication.create(context, msalConfigResourceId);\n+        } catch (InterruptedException | MsalException e) {\n+            throw new AssertionError(e);\n+        }\n+    }\n+\n+    private AuthenticationCallback getAuthCallback(final ResultFuture<IAuthenticationResult, Exception> future) {\n+        return new AuthenticationCallback() {\n+            @Override\n+            public void onSuccess(IAuthenticationResult authenticationResult) {\n+                future.setResult(authenticationResult);\n+            }\n+\n+            @Override\n+            public void onError(MsalException exception) {\n+                future.setException(exception);\n+            }\n+\n+            @Override\n+            public void onCancel() {\n+                future.setException(new MsalUserCancelException());\n+            }\n+        };\n+    }\n+\n+    private IAccount getAccount(@NonNull final Activity activity,\n+                                final int msalConfigResourceId,\n+                                @NonNull final String username) {\n+        final IPublicClientApplication pca = setupPCA(\n+                activity,\n+                msalConfigResourceId\n+        );\n+\n+        if (pca instanceof SingleAccountPublicClientApplication) {\n+            return getAccountForSingleAccountPca((SingleAccountPublicClientApplication) pca);\n+        } else if (pca instanceof MultipleAccountPublicClientApplication) {\n+            return getAccountForMultipleAccountPca((MultipleAccountPublicClientApplication) pca, username);\n+        } else {\n+            throw new AssertionError(\"Weird\");\n+        }\n+    }\n+\n+    private IAccount getAccountForSingleAccountPca(SingleAccountPublicClientApplication pca) {\n+        final ResultFuture<IAccount, Exception> future = new ResultFuture<>();\n+\n+        pca.getCurrentAccountAsync(new ISingleAccountPublicClientApplication.CurrentAccountCallback() {\n+            @Override\n+            public void onAccountLoaded(@Nullable IAccount activeAccount) {\n+                future.setResult(activeAccount);\n+            }\n+\n+            @Override\n+            public void onAccountChanged(@Nullable IAccount priorAccount, @Nullable IAccount currentAccount) {\n+                future.setResult(currentAccount);\n+            }\n+\n+            @Override\n+            public void onError(@NonNull MsalException exception) {\n+                future.setException(exception);\n+            }\n+        });\n+\n+        try {\n+            return future.get();\n+        } catch (Exception exception) {\n+            throw new AssertionError(exception);\n+        }\n+    }\n+\n+    private IAccount getAccountForMultipleAccountPca(MultipleAccountPublicClientApplication pca,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32457cb697599d08d9cfd8e5c9d53828e31d8f56"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgyNDk4MQ==", "bodyText": "added", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552824981", "createdAt": "2021-01-06T17:16:33Z", "author": {"login": "ayushmeghwani"}, "path": "msalautomationapp/src/main/java/com/microsoft/identity/client/msal/automationapp/sdk/MsalSdk.java", "diffHunk": "@@ -0,0 +1,254 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.sdk;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.client.AcquireTokenParameters;\n+import com.microsoft.identity.client.AcquireTokenSilentParameters;\n+import com.microsoft.identity.client.AuthenticationCallback;\n+import com.microsoft.identity.client.IAccount;\n+import com.microsoft.identity.client.IAuthenticationResult;\n+import com.microsoft.identity.client.IMultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.ISingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.MultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplication;\n+import com.microsoft.identity.client.SingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.client.exception.MsalUserCancelException;\n+import com.microsoft.identity.client.ui.automation.TokenRequestTimeout;\n+import com.microsoft.identity.client.ui.automation.interaction.OnInteractionRequired;\n+import com.microsoft.identity.client.ui.automation.sdk.ResultFuture;\n+\n+import java.util.ArrayList;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+/**\n+ * A Sdk wrapper for Microsoft Authentication Library (MSAL) which implements\n+ * both the methods of acquire token interactively and silently and returns back the\n+ * AuthResult, MSAL tests can leverage this sdk for acquiring token with specific\n+ * parameters and get back the final result.\n+ */\n+public class MsalSdk implements IAuthSdk {\n+\n+    protected Map<String, String> upnUserIdMap = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n+\n+    @Override\n+    public MsalAuthResult acquireTokenInteractive(@NonNull MsalAuthTestParams authTestParams, OnInteractionRequired interactionRequiredCallback, TokenRequestTimeout tokenRequestTimeout) throws Throwable {\n+        final IPublicClientApplication pca = setupPCA(\n+                authTestParams.getActivity(),\n+                authTestParams.getMsalConfigResourceId()\n+        );\n+\n+        final ResultFuture<IAuthenticationResult, Exception> future = new ResultFuture<>();\n+\n+        final AcquireTokenParameters.Builder acquireTokenParametersBuilder = new AcquireTokenParameters.Builder()\n+                .startAuthorizationFromActivity(authTestParams.getActivity())\n+                .withLoginHint(authTestParams.getLoginHint())\n+                .withPrompt(authTestParams.getPromptParameter())\n+                .fromAuthority(authTestParams.getAuthority())\n+                .withCallback(getAuthCallback(future));\n+\n+        if (authTestParams.getScopes() == null || authTestParams.getScopes().isEmpty()) {\n+            acquireTokenParametersBuilder.withResource(authTestParams.getResource());\n+        } else {\n+            acquireTokenParametersBuilder.withScopes(new ArrayList<>(authTestParams.getScopes()));\n+        }\n+\n+        final AcquireTokenParameters acquireTokenParameters = acquireTokenParametersBuilder.build();\n+\n+        pca.acquireToken(acquireTokenParameters);\n+\n+        interactionRequiredCallback.handleUserInteraction();\n+\n+        try {\n+            final IAuthenticationResult result = future.get();\n+            return new MsalAuthResult(result);\n+        } catch (Exception exception) {\n+            return new MsalAuthResult(exception);\n+        }\n+    }\n+\n+    @Override\n+    public MsalAuthResult acquireTokenSilent(@NonNull MsalAuthTestParams authTestParams, TokenRequestTimeout tokenRequestTimeout) throws Throwable {\n+        final IPublicClientApplication pca = setupPCA(\n+            authTestParams.getActivity(),\n+            authTestParams.getMsalConfigResourceId()\n+        );\n+\n+        final ResultFuture<IAuthenticationResult, Exception> future = new ResultFuture<>();\n+\n+        final IAccount account = getAccount(\n+                authTestParams.getActivity(),\n+                authTestParams.getMsalConfigResourceId(),\n+                authTestParams.getLoginHint()\n+        );\n+\n+        final AcquireTokenSilentParameters.Builder acquireTokenParametersBuilder = new AcquireTokenSilentParameters.Builder()\n+                .forAccount(account)\n+                .forceRefresh(authTestParams.isForceRefresh())\n+                .fromAuthority(authTestParams.getAuthority())\n+                .withCallback(getAuthCallback(future));\n+\n+        if (authTestParams.getScopes() == null || authTestParams.getScopes().isEmpty()) {\n+            acquireTokenParametersBuilder.withResource(authTestParams.getResource());\n+        } else {\n+            acquireTokenParametersBuilder.withScopes(new ArrayList<>(authTestParams.getScopes()));\n+        }\n+\n+        final AcquireTokenSilentParameters acquireTokenParameters = acquireTokenParametersBuilder.build();\n+\n+        pca.acquireTokenSilentAsync(acquireTokenParameters);\n+\n+        try {\n+            final IAuthenticationResult result = future.get();\n+            return new MsalAuthResult(result);\n+        } catch (Exception exception) {\n+            return new MsalAuthResult(exception);\n+        }\n+    }\n+\n+    private IPublicClientApplication setupPCA(@NonNull final Context context,\n+                                             int msalConfigResourceId) {\n+        try {\n+            return PublicClientApplication.create(context, msalConfigResourceId);\n+        } catch (InterruptedException | MsalException e) {\n+            throw new AssertionError(e);\n+        }\n+    }\n+\n+    private AuthenticationCallback getAuthCallback(final ResultFuture<IAuthenticationResult, Exception> future) {\n+        return new AuthenticationCallback() {\n+            @Override\n+            public void onSuccess(IAuthenticationResult authenticationResult) {\n+                future.setResult(authenticationResult);\n+            }\n+\n+            @Override\n+            public void onError(MsalException exception) {\n+                future.setException(exception);\n+            }\n+\n+            @Override\n+            public void onCancel() {\n+                future.setException(new MsalUserCancelException());\n+            }\n+        };\n+    }\n+\n+    private IAccount getAccount(@NonNull final Activity activity,\n+                                final int msalConfigResourceId,\n+                                @NonNull final String username) {\n+        final IPublicClientApplication pca = setupPCA(\n+                activity,\n+                msalConfigResourceId\n+        );\n+\n+        if (pca instanceof SingleAccountPublicClientApplication) {\n+            return getAccountForSingleAccountPca((SingleAccountPublicClientApplication) pca);\n+        } else if (pca instanceof MultipleAccountPublicClientApplication) {\n+            return getAccountForMultipleAccountPca((MultipleAccountPublicClientApplication) pca, username);\n+        } else {\n+            throw new AssertionError(\"Weird\");\n+        }\n+    }\n+\n+    private IAccount getAccountForSingleAccountPca(SingleAccountPublicClientApplication pca) {\n+        final ResultFuture<IAccount, Exception> future = new ResultFuture<>();\n+\n+        pca.getCurrentAccountAsync(new ISingleAccountPublicClientApplication.CurrentAccountCallback() {\n+            @Override\n+            public void onAccountLoaded(@Nullable IAccount activeAccount) {\n+                future.setResult(activeAccount);\n+            }\n+\n+            @Override\n+            public void onAccountChanged(@Nullable IAccount priorAccount, @Nullable IAccount currentAccount) {\n+                future.setResult(currentAccount);\n+            }\n+\n+            @Override\n+            public void onError(@NonNull MsalException exception) {\n+                future.setException(exception);\n+            }\n+        });\n+\n+        try {\n+            return future.get();\n+        } catch (Exception exception) {\n+            throw new AssertionError(exception);\n+        }\n+    }\n+\n+    private IAccount getAccountForMultipleAccountPca(MultipleAccountPublicClientApplication pca,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MTk2Mw=="}, "originalCommit": {"oid": "32457cb697599d08d9cfd8e5c9d53828e31d8f56"}, "originalPosition": 209}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NjQ4ODU2OnYy", "diffSide": "RIGHT", "path": "msalautomationapp/src/main/java/com/microsoft/identity/client/msal/automationapp/sdk/MsalSdk.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwNDoyNjo0MlrOIOxgHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNzoxNjowOFrOIPNvAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MjAxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } catch (Exception exception) {\n          \n          \n            \n                    } catch (final Exception exception) {", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552362015", "createdAt": "2021-01-06T04:26:42Z", "author": {"login": "shahzaibj"}, "path": "msalautomationapp/src/main/java/com/microsoft/identity/client/msal/automationapp/sdk/MsalSdk.java", "diffHunk": "@@ -0,0 +1,254 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.sdk;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.client.AcquireTokenParameters;\n+import com.microsoft.identity.client.AcquireTokenSilentParameters;\n+import com.microsoft.identity.client.AuthenticationCallback;\n+import com.microsoft.identity.client.IAccount;\n+import com.microsoft.identity.client.IAuthenticationResult;\n+import com.microsoft.identity.client.IMultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.ISingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.MultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplication;\n+import com.microsoft.identity.client.SingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.client.exception.MsalUserCancelException;\n+import com.microsoft.identity.client.ui.automation.TokenRequestTimeout;\n+import com.microsoft.identity.client.ui.automation.interaction.OnInteractionRequired;\n+import com.microsoft.identity.client.ui.automation.sdk.ResultFuture;\n+\n+import java.util.ArrayList;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+/**\n+ * A Sdk wrapper for Microsoft Authentication Library (MSAL) which implements\n+ * both the methods of acquire token interactively and silently and returns back the\n+ * AuthResult, MSAL tests can leverage this sdk for acquiring token with specific\n+ * parameters and get back the final result.\n+ */\n+public class MsalSdk implements IAuthSdk {\n+\n+    protected Map<String, String> upnUserIdMap = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n+\n+    @Override\n+    public MsalAuthResult acquireTokenInteractive(@NonNull MsalAuthTestParams authTestParams, OnInteractionRequired interactionRequiredCallback, TokenRequestTimeout tokenRequestTimeout) throws Throwable {\n+        final IPublicClientApplication pca = setupPCA(\n+                authTestParams.getActivity(),\n+                authTestParams.getMsalConfigResourceId()\n+        );\n+\n+        final ResultFuture<IAuthenticationResult, Exception> future = new ResultFuture<>();\n+\n+        final AcquireTokenParameters.Builder acquireTokenParametersBuilder = new AcquireTokenParameters.Builder()\n+                .startAuthorizationFromActivity(authTestParams.getActivity())\n+                .withLoginHint(authTestParams.getLoginHint())\n+                .withPrompt(authTestParams.getPromptParameter())\n+                .fromAuthority(authTestParams.getAuthority())\n+                .withCallback(getAuthCallback(future));\n+\n+        if (authTestParams.getScopes() == null || authTestParams.getScopes().isEmpty()) {\n+            acquireTokenParametersBuilder.withResource(authTestParams.getResource());\n+        } else {\n+            acquireTokenParametersBuilder.withScopes(new ArrayList<>(authTestParams.getScopes()));\n+        }\n+\n+        final AcquireTokenParameters acquireTokenParameters = acquireTokenParametersBuilder.build();\n+\n+        pca.acquireToken(acquireTokenParameters);\n+\n+        interactionRequiredCallback.handleUserInteraction();\n+\n+        try {\n+            final IAuthenticationResult result = future.get();\n+            return new MsalAuthResult(result);\n+        } catch (Exception exception) {\n+            return new MsalAuthResult(exception);\n+        }\n+    }\n+\n+    @Override\n+    public MsalAuthResult acquireTokenSilent(@NonNull MsalAuthTestParams authTestParams, TokenRequestTimeout tokenRequestTimeout) throws Throwable {\n+        final IPublicClientApplication pca = setupPCA(\n+            authTestParams.getActivity(),\n+            authTestParams.getMsalConfigResourceId()\n+        );\n+\n+        final ResultFuture<IAuthenticationResult, Exception> future = new ResultFuture<>();\n+\n+        final IAccount account = getAccount(\n+                authTestParams.getActivity(),\n+                authTestParams.getMsalConfigResourceId(),\n+                authTestParams.getLoginHint()\n+        );\n+\n+        final AcquireTokenSilentParameters.Builder acquireTokenParametersBuilder = new AcquireTokenSilentParameters.Builder()\n+                .forAccount(account)\n+                .forceRefresh(authTestParams.isForceRefresh())\n+                .fromAuthority(authTestParams.getAuthority())\n+                .withCallback(getAuthCallback(future));\n+\n+        if (authTestParams.getScopes() == null || authTestParams.getScopes().isEmpty()) {\n+            acquireTokenParametersBuilder.withResource(authTestParams.getResource());\n+        } else {\n+            acquireTokenParametersBuilder.withScopes(new ArrayList<>(authTestParams.getScopes()));\n+        }\n+\n+        final AcquireTokenSilentParameters acquireTokenParameters = acquireTokenParametersBuilder.build();\n+\n+        pca.acquireTokenSilentAsync(acquireTokenParameters);\n+\n+        try {\n+            final IAuthenticationResult result = future.get();\n+            return new MsalAuthResult(result);\n+        } catch (Exception exception) {\n+            return new MsalAuthResult(exception);\n+        }\n+    }\n+\n+    private IPublicClientApplication setupPCA(@NonNull final Context context,\n+                                             int msalConfigResourceId) {\n+        try {\n+            return PublicClientApplication.create(context, msalConfigResourceId);\n+        } catch (InterruptedException | MsalException e) {\n+            throw new AssertionError(e);\n+        }\n+    }\n+\n+    private AuthenticationCallback getAuthCallback(final ResultFuture<IAuthenticationResult, Exception> future) {\n+        return new AuthenticationCallback() {\n+            @Override\n+            public void onSuccess(IAuthenticationResult authenticationResult) {\n+                future.setResult(authenticationResult);\n+            }\n+\n+            @Override\n+            public void onError(MsalException exception) {\n+                future.setException(exception);\n+            }\n+\n+            @Override\n+            public void onCancel() {\n+                future.setException(new MsalUserCancelException());\n+            }\n+        };\n+    }\n+\n+    private IAccount getAccount(@NonNull final Activity activity,\n+                                final int msalConfigResourceId,\n+                                @NonNull final String username) {\n+        final IPublicClientApplication pca = setupPCA(\n+                activity,\n+                msalConfigResourceId\n+        );\n+\n+        if (pca instanceof SingleAccountPublicClientApplication) {\n+            return getAccountForSingleAccountPca((SingleAccountPublicClientApplication) pca);\n+        } else if (pca instanceof MultipleAccountPublicClientApplication) {\n+            return getAccountForMultipleAccountPca((MultipleAccountPublicClientApplication) pca, username);\n+        } else {\n+            throw new AssertionError(\"Weird\");\n+        }\n+    }\n+\n+    private IAccount getAccountForSingleAccountPca(SingleAccountPublicClientApplication pca) {\n+        final ResultFuture<IAccount, Exception> future = new ResultFuture<>();\n+\n+        pca.getCurrentAccountAsync(new ISingleAccountPublicClientApplication.CurrentAccountCallback() {\n+            @Override\n+            public void onAccountLoaded(@Nullable IAccount activeAccount) {\n+                future.setResult(activeAccount);\n+            }\n+\n+            @Override\n+            public void onAccountChanged(@Nullable IAccount priorAccount, @Nullable IAccount currentAccount) {\n+                future.setResult(currentAccount);\n+            }\n+\n+            @Override\n+            public void onError(@NonNull MsalException exception) {\n+                future.setException(exception);\n+            }\n+        });\n+\n+        try {\n+            return future.get();\n+        } catch (Exception exception) {\n+            throw new AssertionError(exception);\n+        }\n+    }\n+\n+    private IAccount getAccountForMultipleAccountPca(MultipleAccountPublicClientApplication pca,\n+                                                     final String username) {\n+        final ResultFuture<IAccount, Exception> future = new ResultFuture<>();\n+\n+        pca.getAccount(username, new IMultipleAccountPublicClientApplication.GetAccountCallback() {\n+            @Override\n+            public void onTaskCompleted(IAccount result) {\n+                future.setResult(result);\n+            }\n+\n+            @Override\n+            public void onError(MsalException exception) {\n+                future.setException(exception);\n+            }\n+        });\n+\n+        try {\n+            return future.get();\n+        } catch (Exception exception) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32457cb697599d08d9cfd8e5c9d53828e31d8f56"}, "originalPosition": 227}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgyNDU3Nw==", "bodyText": "added", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552824577", "createdAt": "2021-01-06T17:16:08Z", "author": {"login": "ayushmeghwani"}, "path": "msalautomationapp/src/main/java/com/microsoft/identity/client/msal/automationapp/sdk/MsalSdk.java", "diffHunk": "@@ -0,0 +1,254 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.sdk;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.client.AcquireTokenParameters;\n+import com.microsoft.identity.client.AcquireTokenSilentParameters;\n+import com.microsoft.identity.client.AuthenticationCallback;\n+import com.microsoft.identity.client.IAccount;\n+import com.microsoft.identity.client.IAuthenticationResult;\n+import com.microsoft.identity.client.IMultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.ISingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.MultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplication;\n+import com.microsoft.identity.client.SingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.client.exception.MsalUserCancelException;\n+import com.microsoft.identity.client.ui.automation.TokenRequestTimeout;\n+import com.microsoft.identity.client.ui.automation.interaction.OnInteractionRequired;\n+import com.microsoft.identity.client.ui.automation.sdk.ResultFuture;\n+\n+import java.util.ArrayList;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+/**\n+ * A Sdk wrapper for Microsoft Authentication Library (MSAL) which implements\n+ * both the methods of acquire token interactively and silently and returns back the\n+ * AuthResult, MSAL tests can leverage this sdk for acquiring token with specific\n+ * parameters and get back the final result.\n+ */\n+public class MsalSdk implements IAuthSdk {\n+\n+    protected Map<String, String> upnUserIdMap = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n+\n+    @Override\n+    public MsalAuthResult acquireTokenInteractive(@NonNull MsalAuthTestParams authTestParams, OnInteractionRequired interactionRequiredCallback, TokenRequestTimeout tokenRequestTimeout) throws Throwable {\n+        final IPublicClientApplication pca = setupPCA(\n+                authTestParams.getActivity(),\n+                authTestParams.getMsalConfigResourceId()\n+        );\n+\n+        final ResultFuture<IAuthenticationResult, Exception> future = new ResultFuture<>();\n+\n+        final AcquireTokenParameters.Builder acquireTokenParametersBuilder = new AcquireTokenParameters.Builder()\n+                .startAuthorizationFromActivity(authTestParams.getActivity())\n+                .withLoginHint(authTestParams.getLoginHint())\n+                .withPrompt(authTestParams.getPromptParameter())\n+                .fromAuthority(authTestParams.getAuthority())\n+                .withCallback(getAuthCallback(future));\n+\n+        if (authTestParams.getScopes() == null || authTestParams.getScopes().isEmpty()) {\n+            acquireTokenParametersBuilder.withResource(authTestParams.getResource());\n+        } else {\n+            acquireTokenParametersBuilder.withScopes(new ArrayList<>(authTestParams.getScopes()));\n+        }\n+\n+        final AcquireTokenParameters acquireTokenParameters = acquireTokenParametersBuilder.build();\n+\n+        pca.acquireToken(acquireTokenParameters);\n+\n+        interactionRequiredCallback.handleUserInteraction();\n+\n+        try {\n+            final IAuthenticationResult result = future.get();\n+            return new MsalAuthResult(result);\n+        } catch (Exception exception) {\n+            return new MsalAuthResult(exception);\n+        }\n+    }\n+\n+    @Override\n+    public MsalAuthResult acquireTokenSilent(@NonNull MsalAuthTestParams authTestParams, TokenRequestTimeout tokenRequestTimeout) throws Throwable {\n+        final IPublicClientApplication pca = setupPCA(\n+            authTestParams.getActivity(),\n+            authTestParams.getMsalConfigResourceId()\n+        );\n+\n+        final ResultFuture<IAuthenticationResult, Exception> future = new ResultFuture<>();\n+\n+        final IAccount account = getAccount(\n+                authTestParams.getActivity(),\n+                authTestParams.getMsalConfigResourceId(),\n+                authTestParams.getLoginHint()\n+        );\n+\n+        final AcquireTokenSilentParameters.Builder acquireTokenParametersBuilder = new AcquireTokenSilentParameters.Builder()\n+                .forAccount(account)\n+                .forceRefresh(authTestParams.isForceRefresh())\n+                .fromAuthority(authTestParams.getAuthority())\n+                .withCallback(getAuthCallback(future));\n+\n+        if (authTestParams.getScopes() == null || authTestParams.getScopes().isEmpty()) {\n+            acquireTokenParametersBuilder.withResource(authTestParams.getResource());\n+        } else {\n+            acquireTokenParametersBuilder.withScopes(new ArrayList<>(authTestParams.getScopes()));\n+        }\n+\n+        final AcquireTokenSilentParameters acquireTokenParameters = acquireTokenParametersBuilder.build();\n+\n+        pca.acquireTokenSilentAsync(acquireTokenParameters);\n+\n+        try {\n+            final IAuthenticationResult result = future.get();\n+            return new MsalAuthResult(result);\n+        } catch (Exception exception) {\n+            return new MsalAuthResult(exception);\n+        }\n+    }\n+\n+    private IPublicClientApplication setupPCA(@NonNull final Context context,\n+                                             int msalConfigResourceId) {\n+        try {\n+            return PublicClientApplication.create(context, msalConfigResourceId);\n+        } catch (InterruptedException | MsalException e) {\n+            throw new AssertionError(e);\n+        }\n+    }\n+\n+    private AuthenticationCallback getAuthCallback(final ResultFuture<IAuthenticationResult, Exception> future) {\n+        return new AuthenticationCallback() {\n+            @Override\n+            public void onSuccess(IAuthenticationResult authenticationResult) {\n+                future.setResult(authenticationResult);\n+            }\n+\n+            @Override\n+            public void onError(MsalException exception) {\n+                future.setException(exception);\n+            }\n+\n+            @Override\n+            public void onCancel() {\n+                future.setException(new MsalUserCancelException());\n+            }\n+        };\n+    }\n+\n+    private IAccount getAccount(@NonNull final Activity activity,\n+                                final int msalConfigResourceId,\n+                                @NonNull final String username) {\n+        final IPublicClientApplication pca = setupPCA(\n+                activity,\n+                msalConfigResourceId\n+        );\n+\n+        if (pca instanceof SingleAccountPublicClientApplication) {\n+            return getAccountForSingleAccountPca((SingleAccountPublicClientApplication) pca);\n+        } else if (pca instanceof MultipleAccountPublicClientApplication) {\n+            return getAccountForMultipleAccountPca((MultipleAccountPublicClientApplication) pca, username);\n+        } else {\n+            throw new AssertionError(\"Weird\");\n+        }\n+    }\n+\n+    private IAccount getAccountForSingleAccountPca(SingleAccountPublicClientApplication pca) {\n+        final ResultFuture<IAccount, Exception> future = new ResultFuture<>();\n+\n+        pca.getCurrentAccountAsync(new ISingleAccountPublicClientApplication.CurrentAccountCallback() {\n+            @Override\n+            public void onAccountLoaded(@Nullable IAccount activeAccount) {\n+                future.setResult(activeAccount);\n+            }\n+\n+            @Override\n+            public void onAccountChanged(@Nullable IAccount priorAccount, @Nullable IAccount currentAccount) {\n+                future.setResult(currentAccount);\n+            }\n+\n+            @Override\n+            public void onError(@NonNull MsalException exception) {\n+                future.setException(exception);\n+            }\n+        });\n+\n+        try {\n+            return future.get();\n+        } catch (Exception exception) {\n+            throw new AssertionError(exception);\n+        }\n+    }\n+\n+    private IAccount getAccountForMultipleAccountPca(MultipleAccountPublicClientApplication pca,\n+                                                     final String username) {\n+        final ResultFuture<IAccount, Exception> future = new ResultFuture<>();\n+\n+        pca.getAccount(username, new IMultipleAccountPublicClientApplication.GetAccountCallback() {\n+            @Override\n+            public void onTaskCompleted(IAccount result) {\n+                future.setResult(result);\n+            }\n+\n+            @Override\n+            public void onError(MsalException exception) {\n+                future.setException(exception);\n+            }\n+        });\n+\n+        try {\n+            return future.get();\n+        } catch (Exception exception) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MjAxNQ=="}, "originalCommit": {"oid": "32457cb697599d08d9cfd8e5c9d53828e31d8f56"}, "originalPosition": 227}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NjQ5MDU3OnYy", "diffSide": "RIGHT", "path": "msalautomationapp/src/main/java/com/microsoft/identity/client/msal/automationapp/sdk/MsalSdk.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwNDoyNzoyM1rOIOxhCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNzoxNTozMVrOIPNsOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MjI0OA==", "bodyText": "I don't think we need this", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552362248", "createdAt": "2021-01-06T04:27:23Z", "author": {"login": "shahzaibj"}, "path": "msalautomationapp/src/main/java/com/microsoft/identity/client/msal/automationapp/sdk/MsalSdk.java", "diffHunk": "@@ -0,0 +1,254 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.sdk;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.client.AcquireTokenParameters;\n+import com.microsoft.identity.client.AcquireTokenSilentParameters;\n+import com.microsoft.identity.client.AuthenticationCallback;\n+import com.microsoft.identity.client.IAccount;\n+import com.microsoft.identity.client.IAuthenticationResult;\n+import com.microsoft.identity.client.IMultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.ISingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.MultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplication;\n+import com.microsoft.identity.client.SingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.client.exception.MsalUserCancelException;\n+import com.microsoft.identity.client.ui.automation.TokenRequestTimeout;\n+import com.microsoft.identity.client.ui.automation.interaction.OnInteractionRequired;\n+import com.microsoft.identity.client.ui.automation.sdk.ResultFuture;\n+\n+import java.util.ArrayList;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+/**\n+ * A Sdk wrapper for Microsoft Authentication Library (MSAL) which implements\n+ * both the methods of acquire token interactively and silently and returns back the\n+ * AuthResult, MSAL tests can leverage this sdk for acquiring token with specific\n+ * parameters and get back the final result.\n+ */\n+public class MsalSdk implements IAuthSdk {\n+\n+    protected Map<String, String> upnUserIdMap = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32457cb697599d08d9cfd8e5c9d53828e31d8f56"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgyMzg2Nw==", "bodyText": "removed.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552823867", "createdAt": "2021-01-06T17:15:31Z", "author": {"login": "ayushmeghwani"}, "path": "msalautomationapp/src/main/java/com/microsoft/identity/client/msal/automationapp/sdk/MsalSdk.java", "diffHunk": "@@ -0,0 +1,254 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.sdk;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.client.AcquireTokenParameters;\n+import com.microsoft.identity.client.AcquireTokenSilentParameters;\n+import com.microsoft.identity.client.AuthenticationCallback;\n+import com.microsoft.identity.client.IAccount;\n+import com.microsoft.identity.client.IAuthenticationResult;\n+import com.microsoft.identity.client.IMultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.IPublicClientApplication;\n+import com.microsoft.identity.client.ISingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.MultipleAccountPublicClientApplication;\n+import com.microsoft.identity.client.PublicClientApplication;\n+import com.microsoft.identity.client.SingleAccountPublicClientApplication;\n+import com.microsoft.identity.client.exception.MsalException;\n+import com.microsoft.identity.client.exception.MsalUserCancelException;\n+import com.microsoft.identity.client.ui.automation.TokenRequestTimeout;\n+import com.microsoft.identity.client.ui.automation.interaction.OnInteractionRequired;\n+import com.microsoft.identity.client.ui.automation.sdk.ResultFuture;\n+\n+import java.util.ArrayList;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+/**\n+ * A Sdk wrapper for Microsoft Authentication Library (MSAL) which implements\n+ * both the methods of acquire token interactively and silently and returns back the\n+ * AuthResult, MSAL tests can leverage this sdk for acquiring token with specific\n+ * parameters and get back the final result.\n+ */\n+public class MsalSdk implements IAuthSdk {\n+\n+    protected Map<String, String> upnUserIdMap = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MjI0OA=="}, "originalCommit": {"oid": "32457cb697599d08d9cfd8e5c9d53828e31d8f56"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NjQ5NTE0OnYy", "diffSide": "RIGHT", "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/local/TestCase99267Clone.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwNDozMDoyNlrOIOxjrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNzoxMjoyNlrOIPNgdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MjkyNQ==", "bodyText": "not needed?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552362925", "createdAt": "2021-01-06T04:30:26Z", "author": {"login": "shahzaibj"}, "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/local/TestCase99267Clone.java", "diffHunk": "@@ -0,0 +1,117 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.testpass.local;\n+\n+import com.microsoft.identity.client.Prompt;\n+import com.microsoft.identity.client.msal.automationapp.AbstractMsalUiTest;\n+import com.microsoft.identity.client.msal.automationapp.R;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalAuthResult;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalAuthTestParams;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalSdk;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptHandlerParameters;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptParameter;\n+import com.microsoft.identity.client.ui.automation.interaction.UiResponse;\n+import com.microsoft.identity.client.ui.automation.interaction.microsoftsts.AadPromptHandler;\n+import com.microsoft.identity.internal.testutils.labutils.LabConfig;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserQuery;\n+\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+\n+// Interactive Auth with select_account (no consent record)\n+// https://identitydivision.visualstudio.com/DefaultCollection/IDDP/_workitems/edit/99267\n+public class TestCase99267Clone extends AbstractMsalUiTest {\n+\n+    @Test\n+    public void test_99267Clone() throws Throwable {\n+        final String username = mLoginHint;\n+        final String password = LabConfig.getCurrentLabConfig().getLabUserPassword();\n+\n+        final MsalSdk msalSdk = new MsalSdk();\n+\n+        final MsalAuthTestParams authTestParams = MsalAuthTestParams.builder()\n+                .activity(mActivity)\n+                .loginHint(mLoginHint)\n+                .scopes(Arrays.asList(mScopes))\n+                .promptParameter(Prompt.SELECT_ACCOUNT)\n+                .msalConfigResourceId(getConfigFileResourceId())\n+                .build();\n+\n+//        final AcquireTokenParameters parameters = new AcquireTokenParameters.Builder()\n+//                .startAuthorizationFromActivity(mActivity)\n+//                .withLoginHint(mLoginHint)\n+//                .withScopes(Arrays.asList(mScopes))\n+//                .withCallback(successfulInteractiveCallback(latch))\n+//                .withPrompt(Prompt.SELECT_ACCOUNT)\n+//                .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32457cb697599d08d9cfd8e5c9d53828e31d8f56"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgyMDg1Mw==", "bodyText": "removed.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552820853", "createdAt": "2021-01-06T17:12:26Z", "author": {"login": "ayushmeghwani"}, "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/local/TestCase99267Clone.java", "diffHunk": "@@ -0,0 +1,117 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.testpass.local;\n+\n+import com.microsoft.identity.client.Prompt;\n+import com.microsoft.identity.client.msal.automationapp.AbstractMsalUiTest;\n+import com.microsoft.identity.client.msal.automationapp.R;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalAuthResult;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalAuthTestParams;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalSdk;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptHandlerParameters;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptParameter;\n+import com.microsoft.identity.client.ui.automation.interaction.UiResponse;\n+import com.microsoft.identity.client.ui.automation.interaction.microsoftsts.AadPromptHandler;\n+import com.microsoft.identity.internal.testutils.labutils.LabConfig;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserQuery;\n+\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+\n+// Interactive Auth with select_account (no consent record)\n+// https://identitydivision.visualstudio.com/DefaultCollection/IDDP/_workitems/edit/99267\n+public class TestCase99267Clone extends AbstractMsalUiTest {\n+\n+    @Test\n+    public void test_99267Clone() throws Throwable {\n+        final String username = mLoginHint;\n+        final String password = LabConfig.getCurrentLabConfig().getLabUserPassword();\n+\n+        final MsalSdk msalSdk = new MsalSdk();\n+\n+        final MsalAuthTestParams authTestParams = MsalAuthTestParams.builder()\n+                .activity(mActivity)\n+                .loginHint(mLoginHint)\n+                .scopes(Arrays.asList(mScopes))\n+                .promptParameter(Prompt.SELECT_ACCOUNT)\n+                .msalConfigResourceId(getConfigFileResourceId())\n+                .build();\n+\n+//        final AcquireTokenParameters parameters = new AcquireTokenParameters.Builder()\n+//                .startAuthorizationFromActivity(mActivity)\n+//                .withLoginHint(mLoginHint)\n+//                .withScopes(Arrays.asList(mScopes))\n+//                .withCallback(successfulInteractiveCallback(latch))\n+//                .withPrompt(Prompt.SELECT_ACCOUNT)\n+//                .build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MjkyNQ=="}, "originalCommit": {"oid": "32457cb697599d08d9cfd8e5c9d53828e31d8f56"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NjQ5NjI4OnYy", "diffSide": "RIGHT", "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/local/TestCase99267Clone.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwNDozMToxOFrOIOxkWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNzoxMjo1MVrOIPNiSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MzA5Nw==", "bodyText": "Can we just import the class directly at the top of the file?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552363097", "createdAt": "2021-01-06T04:31:18Z", "author": {"login": "shahzaibj"}, "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/local/TestCase99267Clone.java", "diffHunk": "@@ -0,0 +1,117 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.testpass.local;\n+\n+import com.microsoft.identity.client.Prompt;\n+import com.microsoft.identity.client.msal.automationapp.AbstractMsalUiTest;\n+import com.microsoft.identity.client.msal.automationapp.R;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalAuthResult;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalAuthTestParams;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalSdk;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptHandlerParameters;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptParameter;\n+import com.microsoft.identity.client.ui.automation.interaction.UiResponse;\n+import com.microsoft.identity.client.ui.automation.interaction.microsoftsts.AadPromptHandler;\n+import com.microsoft.identity.internal.testutils.labutils.LabConfig;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserQuery;\n+\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+\n+// Interactive Auth with select_account (no consent record)\n+// https://identitydivision.visualstudio.com/DefaultCollection/IDDP/_workitems/edit/99267\n+public class TestCase99267Clone extends AbstractMsalUiTest {\n+\n+    @Test\n+    public void test_99267Clone() throws Throwable {\n+        final String username = mLoginHint;\n+        final String password = LabConfig.getCurrentLabConfig().getLabUserPassword();\n+\n+        final MsalSdk msalSdk = new MsalSdk();\n+\n+        final MsalAuthTestParams authTestParams = MsalAuthTestParams.builder()\n+                .activity(mActivity)\n+                .loginHint(mLoginHint)\n+                .scopes(Arrays.asList(mScopes))\n+                .promptParameter(Prompt.SELECT_ACCOUNT)\n+                .msalConfigResourceId(getConfigFileResourceId())\n+                .build();\n+\n+//        final AcquireTokenParameters parameters = new AcquireTokenParameters.Builder()\n+//                .startAuthorizationFromActivity(mActivity)\n+//                .withLoginHint(mLoginHint)\n+//                .withScopes(Arrays.asList(mScopes))\n+//                .withCallback(successfulInteractiveCallback(latch))\n+//                .withPrompt(Prompt.SELECT_ACCOUNT)\n+//                .build();\n+\n+        final MsalAuthResult authResult = msalSdk.acquireTokenInteractive(authTestParams, new com.microsoft.identity.client.ui.automation.interaction.OnInteractionRequired() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32457cb697599d08d9cfd8e5c9d53828e31d8f56"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgyMTMyMA==", "bodyText": "done.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552821320", "createdAt": "2021-01-06T17:12:51Z", "author": {"login": "ayushmeghwani"}, "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/local/TestCase99267Clone.java", "diffHunk": "@@ -0,0 +1,117 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.testpass.local;\n+\n+import com.microsoft.identity.client.Prompt;\n+import com.microsoft.identity.client.msal.automationapp.AbstractMsalUiTest;\n+import com.microsoft.identity.client.msal.automationapp.R;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalAuthResult;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalAuthTestParams;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalSdk;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptHandlerParameters;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptParameter;\n+import com.microsoft.identity.client.ui.automation.interaction.UiResponse;\n+import com.microsoft.identity.client.ui.automation.interaction.microsoftsts.AadPromptHandler;\n+import com.microsoft.identity.internal.testutils.labutils.LabConfig;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserQuery;\n+\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+\n+// Interactive Auth with select_account (no consent record)\n+// https://identitydivision.visualstudio.com/DefaultCollection/IDDP/_workitems/edit/99267\n+public class TestCase99267Clone extends AbstractMsalUiTest {\n+\n+    @Test\n+    public void test_99267Clone() throws Throwable {\n+        final String username = mLoginHint;\n+        final String password = LabConfig.getCurrentLabConfig().getLabUserPassword();\n+\n+        final MsalSdk msalSdk = new MsalSdk();\n+\n+        final MsalAuthTestParams authTestParams = MsalAuthTestParams.builder()\n+                .activity(mActivity)\n+                .loginHint(mLoginHint)\n+                .scopes(Arrays.asList(mScopes))\n+                .promptParameter(Prompt.SELECT_ACCOUNT)\n+                .msalConfigResourceId(getConfigFileResourceId())\n+                .build();\n+\n+//        final AcquireTokenParameters parameters = new AcquireTokenParameters.Builder()\n+//                .startAuthorizationFromActivity(mActivity)\n+//                .withLoginHint(mLoginHint)\n+//                .withScopes(Arrays.asList(mScopes))\n+//                .withCallback(successfulInteractiveCallback(latch))\n+//                .withPrompt(Prompt.SELECT_ACCOUNT)\n+//                .build();\n+\n+        final MsalAuthResult authResult = msalSdk.acquireTokenInteractive(authTestParams, new com.microsoft.identity.client.ui.automation.interaction.OnInteractionRequired() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2MzA5Nw=="}, "originalCommit": {"oid": "32457cb697599d08d9cfd8e5c9d53828e31d8f56"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NjUxNzMyOnYy", "diffSide": "RIGHT", "path": "msalautomationapp/src/main/java/com/microsoft/identity/client/msal/automationapp/sdk/MsalAuthResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwNDo0Mzo1M1rOIOxv6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxODozOToxNVrOIPR_7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2NjA1Ng==", "bodyText": "we should change the parent to make these private and the parent should initialize these...over here we would just call super", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552366056", "createdAt": "2021-01-06T04:43:53Z", "author": {"login": "shahzaibj"}, "path": "msalautomationapp/src/main/java/com/microsoft/identity/client/msal/automationapp/sdk/MsalAuthResult.java", "diffHunk": "@@ -0,0 +1,49 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.sdk;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.IAuthenticationResult;\n+import com.microsoft.identity.client.ui.automation.sdk.AuthResult;\n+\n+import java.util.Map;\n+\n+// MSAL Result Class to handle asserting success or failure on execution of Automated Test Cases\n+public class MsalAuthResult extends AuthResult {\n+\n+    private Map<String, ?> claims;\n+\n+    public MsalAuthResult(@NonNull final IAuthenticationResult authenticationResult) {\n+        this.accessToken = authenticationResult.getAccessToken();\n+        this.idToken = authenticationResult.getAccount().getIdToken();\n+        this.userId = authenticationResult.getAccount().getId();\n+        this.username = authenticationResult.getAccount().getUsername();\n+        this.authority = authenticationResult.getAccount().getAuthority();\n+        this.claims = authenticationResult.getAccount().getClaims();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32457cb697599d08d9cfd8e5c9d53828e31d8f56"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg5NDQ0Nw==", "bodyText": "calling super() of parent class's constructor now.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r552894447", "createdAt": "2021-01-06T18:39:15Z", "author": {"login": "ayushmeghwani"}, "path": "msalautomationapp/src/main/java/com/microsoft/identity/client/msal/automationapp/sdk/MsalAuthResult.java", "diffHunk": "@@ -0,0 +1,49 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.sdk;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.IAuthenticationResult;\n+import com.microsoft.identity.client.ui.automation.sdk.AuthResult;\n+\n+import java.util.Map;\n+\n+// MSAL Result Class to handle asserting success or failure on execution of Automated Test Cases\n+public class MsalAuthResult extends AuthResult {\n+\n+    private Map<String, ?> claims;\n+\n+    public MsalAuthResult(@NonNull final IAuthenticationResult authenticationResult) {\n+        this.accessToken = authenticationResult.getAccessToken();\n+        this.idToken = authenticationResult.getAccount().getIdToken();\n+        this.userId = authenticationResult.getAccount().getId();\n+        this.username = authenticationResult.getAccount().getUsername();\n+        this.authority = authenticationResult.getAccount().getAuthority();\n+        this.claims = authenticationResult.getAccount().getClaims();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2NjA1Ng=="}, "originalCommit": {"oid": "32457cb697599d08d9cfd8e5c9d53828e31d8f56"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTE5OTQ1OnYy", "diffSide": "RIGHT", "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/broker/TestCase796048Clone.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNDo0NzowNVrOIPe9nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwOTo1MDoxM1rOIQL_mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzEwNjg0NQ==", "bodyText": "Missing license", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r553106845", "createdAt": "2021-01-07T04:47:05Z", "author": {"login": "shahzaibj"}, "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/broker/TestCase796048Clone.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package com.microsoft.identity.client.msal.automationapp.testpass.broker;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "632d9c14700e355f95e1dc804712af55143c0a31"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg0NDYzMw==", "bodyText": "added.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r553844633", "createdAt": "2021-01-08T09:50:13Z", "author": {"login": "ayushmeghwani"}, "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/broker/TestCase796048Clone.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package com.microsoft.identity.client.msal.automationapp.testpass.broker;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzEwNjg0NQ=="}, "originalCommit": {"oid": "632d9c14700e355f95e1dc804712af55143c0a31"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTIzNDY5OnYy", "diffSide": "RIGHT", "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/broker/TestCase796048Clone.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNTowOTowOFrOIPfRfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwOTo1MDo1M1rOIQMA3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzExMTkzMg==", "bodyText": "Why no timeout supplied?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r553111932", "createdAt": "2021-01-07T05:09:08Z", "author": {"login": "shahzaibj"}, "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/broker/TestCase796048Clone.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package com.microsoft.identity.client.msal.automationapp.testpass.broker;\n+\n+import com.microsoft.identity.client.Prompt;\n+import com.microsoft.identity.client.msal.automationapp.R;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalAuthResult;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalAuthTestParams;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalSdk;\n+import com.microsoft.identity.client.ui.automation.TestContext;\n+import com.microsoft.identity.client.ui.automation.interaction.OnInteractionRequired;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptHandlerParameters;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptParameter;\n+import com.microsoft.identity.client.ui.automation.interaction.microsoftsts.AadPromptHandler;\n+import com.microsoft.identity.internal.testutils.labutils.LabConfig;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserQuery;\n+\n+import org.junit.Test;\n+\n+public class TestCase796048Clone extends AbstractMsalBrokerTest {\n+\n+    @Test\n+    public void test_796048Clone() throws Throwable {\n+        final String username = mLoginHint;\n+        final String password = LabConfig.getCurrentLabConfig().getLabUserPassword();\n+\n+        final MsalSdk msalSdk = new MsalSdk();\n+\n+        final MsalAuthTestParams authTestParams = MsalAuthTestParams.builder()\n+                .activity(mActivity)\n+                .loginHint(mLoginHint)\n+                .resource(mScopes[0])\n+                .msalConfigResourceId(getConfigFileResourceId())\n+                .promptParameter(Prompt.SELECT_ACCOUNT)\n+                .build();\n+\n+        final MsalAuthResult authResult = msalSdk.acquireTokenInteractive(authTestParams, new OnInteractionRequired() {\n+            @Override\n+            public void handleUserInteraction() {\n+                final PromptHandlerParameters promptHandlerParameters = PromptHandlerParameters.builder()\n+                        .prompt(PromptParameter.SELECT_ACCOUNT)\n+                        .loginHint(mLoginHint)\n+                        .sessionExpected(false)\n+                        .consentPageExpected(false)\n+                        .speedBumpExpected(false)\n+                        .broker(mBroker)\n+                        .expectingBrokerAccountChooserActivity(false)\n+                        .build();\n+\n+                new AadPromptHandler(promptHandlerParameters)\n+                        .handlePrompt(username, password);\n+            }\n+        },null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "632d9c14700e355f95e1dc804712af55143c0a31"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg0NDk1OQ==", "bodyText": "added.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r553844959", "createdAt": "2021-01-08T09:50:53Z", "author": {"login": "ayushmeghwani"}, "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/broker/TestCase796048Clone.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package com.microsoft.identity.client.msal.automationapp.testpass.broker;\n+\n+import com.microsoft.identity.client.Prompt;\n+import com.microsoft.identity.client.msal.automationapp.R;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalAuthResult;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalAuthTestParams;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalSdk;\n+import com.microsoft.identity.client.ui.automation.TestContext;\n+import com.microsoft.identity.client.ui.automation.interaction.OnInteractionRequired;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptHandlerParameters;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptParameter;\n+import com.microsoft.identity.client.ui.automation.interaction.microsoftsts.AadPromptHandler;\n+import com.microsoft.identity.internal.testutils.labutils.LabConfig;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserQuery;\n+\n+import org.junit.Test;\n+\n+public class TestCase796048Clone extends AbstractMsalBrokerTest {\n+\n+    @Test\n+    public void test_796048Clone() throws Throwable {\n+        final String username = mLoginHint;\n+        final String password = LabConfig.getCurrentLabConfig().getLabUserPassword();\n+\n+        final MsalSdk msalSdk = new MsalSdk();\n+\n+        final MsalAuthTestParams authTestParams = MsalAuthTestParams.builder()\n+                .activity(mActivity)\n+                .loginHint(mLoginHint)\n+                .resource(mScopes[0])\n+                .msalConfigResourceId(getConfigFileResourceId())\n+                .promptParameter(Prompt.SELECT_ACCOUNT)\n+                .build();\n+\n+        final MsalAuthResult authResult = msalSdk.acquireTokenInteractive(authTestParams, new OnInteractionRequired() {\n+            @Override\n+            public void handleUserInteraction() {\n+                final PromptHandlerParameters promptHandlerParameters = PromptHandlerParameters.builder()\n+                        .prompt(PromptParameter.SELECT_ACCOUNT)\n+                        .loginHint(mLoginHint)\n+                        .sessionExpected(false)\n+                        .consentPageExpected(false)\n+                        .speedBumpExpected(false)\n+                        .broker(mBroker)\n+                        .expectingBrokerAccountChooserActivity(false)\n+                        .build();\n+\n+                new AadPromptHandler(promptHandlerParameters)\n+                        .handlePrompt(username, password);\n+            }\n+        },null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzExMTkzMg=="}, "originalCommit": {"oid": "632d9c14700e355f95e1dc804712af55143c0a31"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTIzNTEwOnYy", "diffSide": "RIGHT", "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/local/TestCase99267Clone.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNTowOToyNVrOIPfRvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwOTo1MDo1OFrOIQMBBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzExMTk5Nw==", "bodyText": "Why no timeout supplied?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r553111997", "createdAt": "2021-01-07T05:09:25Z", "author": {"login": "shahzaibj"}, "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/local/TestCase99267Clone.java", "diffHunk": "@@ -0,0 +1,110 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.testpass.local;\n+\n+import com.microsoft.identity.client.Prompt;\n+import com.microsoft.identity.client.msal.automationapp.AbstractMsalUiTest;\n+import com.microsoft.identity.client.msal.automationapp.R;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalAuthResult;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalAuthTestParams;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalSdk;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptHandlerParameters;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptParameter;\n+import com.microsoft.identity.client.ui.automation.interaction.UiResponse;\n+import com.microsoft.identity.client.ui.automation.interaction.microsoftsts.AadPromptHandler;\n+import com.microsoft.identity.internal.testutils.labutils.LabConfig;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserQuery;\n+import com.microsoft.identity.client.ui.automation.interaction.OnInteractionRequired;\n+\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+\n+// Interactive Auth with select_account (no consent record)\n+// https://identitydivision.visualstudio.com/DefaultCollection/IDDP/_workitems/edit/99267\n+public class TestCase99267Clone extends AbstractMsalUiTest {\n+\n+    @Test\n+    public void test_99267Clone() throws Throwable {\n+        final String username = mLoginHint;\n+        final String password = LabConfig.getCurrentLabConfig().getLabUserPassword();\n+\n+        final MsalSdk msalSdk = new MsalSdk();\n+\n+        final MsalAuthTestParams authTestParams = MsalAuthTestParams.builder()\n+                .activity(mActivity)\n+                .loginHint(mLoginHint)\n+                .scopes(Arrays.asList(mScopes))\n+                .promptParameter(Prompt.SELECT_ACCOUNT)\n+                .msalConfigResourceId(getConfigFileResourceId())\n+                .build();\n+\n+        final MsalAuthResult authResult = msalSdk.acquireTokenInteractive(authTestParams, new OnInteractionRequired() {\n+            @Override\n+            public void handleUserInteraction() {\n+                final PromptHandlerParameters promptHandlerParameters = PromptHandlerParameters.builder()\n+                        .prompt(PromptParameter.SELECT_ACCOUNT)\n+                        .loginHint(mLoginHint)\n+                        .sessionExpected(false)\n+                        .consentPageExpected(true)\n+                        .speedBumpExpected(false)\n+                        .consentPageResponse(UiResponse.ACCEPT)\n+                        .build();\n+\n+                new AadPromptHandler(promptHandlerParameters)\n+                        .handlePrompt(username, password);\n+            }\n+        },null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "632d9c14700e355f95e1dc804712af55143c0a31"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg0NDk5OQ==", "bodyText": "added", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r553844999", "createdAt": "2021-01-08T09:50:58Z", "author": {"login": "ayushmeghwani"}, "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/local/TestCase99267Clone.java", "diffHunk": "@@ -0,0 +1,110 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.msal.automationapp.testpass.local;\n+\n+import com.microsoft.identity.client.Prompt;\n+import com.microsoft.identity.client.msal.automationapp.AbstractMsalUiTest;\n+import com.microsoft.identity.client.msal.automationapp.R;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalAuthResult;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalAuthTestParams;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalSdk;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptHandlerParameters;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptParameter;\n+import com.microsoft.identity.client.ui.automation.interaction.UiResponse;\n+import com.microsoft.identity.client.ui.automation.interaction.microsoftsts.AadPromptHandler;\n+import com.microsoft.identity.internal.testutils.labutils.LabConfig;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserQuery;\n+import com.microsoft.identity.client.ui.automation.interaction.OnInteractionRequired;\n+\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+\n+// Interactive Auth with select_account (no consent record)\n+// https://identitydivision.visualstudio.com/DefaultCollection/IDDP/_workitems/edit/99267\n+public class TestCase99267Clone extends AbstractMsalUiTest {\n+\n+    @Test\n+    public void test_99267Clone() throws Throwable {\n+        final String username = mLoginHint;\n+        final String password = LabConfig.getCurrentLabConfig().getLabUserPassword();\n+\n+        final MsalSdk msalSdk = new MsalSdk();\n+\n+        final MsalAuthTestParams authTestParams = MsalAuthTestParams.builder()\n+                .activity(mActivity)\n+                .loginHint(mLoginHint)\n+                .scopes(Arrays.asList(mScopes))\n+                .promptParameter(Prompt.SELECT_ACCOUNT)\n+                .msalConfigResourceId(getConfigFileResourceId())\n+                .build();\n+\n+        final MsalAuthResult authResult = msalSdk.acquireTokenInteractive(authTestParams, new OnInteractionRequired() {\n+            @Override\n+            public void handleUserInteraction() {\n+                final PromptHandlerParameters promptHandlerParameters = PromptHandlerParameters.builder()\n+                        .prompt(PromptParameter.SELECT_ACCOUNT)\n+                        .loginHint(mLoginHint)\n+                        .sessionExpected(false)\n+                        .consentPageExpected(true)\n+                        .speedBumpExpected(false)\n+                        .consentPageResponse(UiResponse.ACCEPT)\n+                        .build();\n+\n+                new AadPromptHandler(promptHandlerParameters)\n+                        .handlePrompt(username, password);\n+            }\n+        },null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzExMTk5Nw=="}, "originalCommit": {"oid": "632d9c14700e355f95e1dc804712af55143c0a31"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NDg1ODY4OnYy", "diffSide": "RIGHT", "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/broker/TestCase796048Clone.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwMDoxODoyOVrOIQBOJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwOTo1MDoyMlrOIQL_7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzY2ODEzMg==", "bodyText": "add link to test case in ADO (can just copy from the non-clone test case)", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r553668132", "createdAt": "2021-01-08T00:18:29Z", "author": {"login": "shahzaibj"}, "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/broker/TestCase796048Clone.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.microsoft.identity.client.msal.automationapp.testpass.broker;\n+\n+import com.microsoft.identity.client.Prompt;\n+import com.microsoft.identity.client.msal.automationapp.R;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalAuthResult;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalAuthTestParams;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalSdk;\n+import com.microsoft.identity.client.ui.automation.TestContext;\n+import com.microsoft.identity.client.ui.automation.TokenRequestTimeout;\n+import com.microsoft.identity.client.ui.automation.interaction.OnInteractionRequired;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptHandlerParameters;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptParameter;\n+import com.microsoft.identity.client.ui.automation.interaction.microsoftsts.AadPromptHandler;\n+import com.microsoft.identity.internal.testutils.labutils.LabConfig;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserQuery;\n+\n+import org.junit.Test;\n+\n+public class TestCase796048Clone extends AbstractMsalBrokerTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "625ab13d9753c852176129a1ce887d4b501c7886"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg0NDcxNw==", "bodyText": "added.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1264#discussion_r553844717", "createdAt": "2021-01-08T09:50:22Z", "author": {"login": "ayushmeghwani"}, "path": "msalautomationapp/src/androidTest/java/com/microsoft/identity/client/msal/automationapp/testpass/broker/TestCase796048Clone.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.microsoft.identity.client.msal.automationapp.testpass.broker;\n+\n+import com.microsoft.identity.client.Prompt;\n+import com.microsoft.identity.client.msal.automationapp.R;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalAuthResult;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalAuthTestParams;\n+import com.microsoft.identity.client.msal.automationapp.sdk.MsalSdk;\n+import com.microsoft.identity.client.ui.automation.TestContext;\n+import com.microsoft.identity.client.ui.automation.TokenRequestTimeout;\n+import com.microsoft.identity.client.ui.automation.interaction.OnInteractionRequired;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptHandlerParameters;\n+import com.microsoft.identity.client.ui.automation.interaction.PromptParameter;\n+import com.microsoft.identity.client.ui.automation.interaction.microsoftsts.AadPromptHandler;\n+import com.microsoft.identity.internal.testutils.labutils.LabConfig;\n+import com.microsoft.identity.internal.testutils.labutils.LabConstants;\n+import com.microsoft.identity.internal.testutils.labutils.LabUserQuery;\n+\n+import org.junit.Test;\n+\n+public class TestCase796048Clone extends AbstractMsalBrokerTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzY2ODEzMg=="}, "originalCommit": {"oid": "625ab13d9753c852176129a1ce887d4b501c7886"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1778, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}