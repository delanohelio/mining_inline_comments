{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzNTQ1MTIx", "number": 1053, "title": "Changes related to add Content Provider Strategy to MSAL", "bodyText": "Common PR : AzureAD/microsoft-authentication-library-common-for-android#918\nBroker PR : https://github.com/AzureAD/ad-accounts-for-android/pull/1298\nChange Doc : https://identitydivision.visualstudio.com/DefaultCollection/DevEx/_git/AuthLibrariesApiReview/pullrequest/1554", "createdAt": "2020-05-27T01:01:20Z", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053", "merged": true, "mergeCommit": {"oid": "184efabb279739475a9439338df8e5d1557263db"}, "closed": true, "closedAt": "2020-06-04T17:48:42Z", "author": {"login": "kreedula"}, "timelineItems": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcgG8MNAH2gAyNDIzNTQ1MTIxOjQ2OGNhZDM0ZThmYjJmY2M1OTJhNzUyNzg4NTdlM2E2NGQ2ZmJkYWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcoBREUAH2gAyNDIzNTQ1MTIxOmY2NDY2MGQ3MmNlNTU2YzdhZWE5ZjdlNGM2ODk2YWVlYTlmNDFiOTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "468cad34e8fb2fcc592a75278857e3a64d6fbdab", "author": {"user": null}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/468cad34e8fb2fcc592a75278857e3a64d6fbdab", "committedDate": "2020-05-11T03:16:50Z", "message": "Changes related to add Content Provider Strategy to MSAL"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aaf40fda369f2eabc5033d5c22baf05fd6c44f9a", "author": {"user": null}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/aaf40fda369f2eabc5033d5c22baf05fd6c44f9a", "committedDate": "2020-05-11T04:59:54Z", "message": "Submodule update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc8986605ce8504a3ea76444b2d369910132bd86", "author": {"user": null}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/cc8986605ce8504a3ea76444b2d369910132bd86", "committedDate": "2020-05-15T21:21:37Z", "message": "Minor refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfc4bcae968a9526d28baf9479c131b4194482e0", "author": {"user": null}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/bfc4bcae968a9526d28baf9479c131b4194482e0", "committedDate": "2020-05-19T22:55:27Z", "message": "Merge branch 'dev' into kreedula/content-provider"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffcb3bf0a4bab9cf44f05e8c294ac2e015aa2ad0", "author": {"user": null}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/ffcb3bf0a4bab9cf44f05e8c294ac2e015aa2ad0", "committedDate": "2020-05-27T00:53:48Z", "message": "Minor update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7899bcaa59d3a9fc5b7de645c6eb073bf9b660d6", "author": {"user": {"login": "kreedula", "name": "Krishna Eedula"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/7899bcaa59d3a9fc5b7de645c6eb073bf9b660d6", "committedDate": "2020-05-27T01:43:25Z", "message": "Merge branch 'dev' into kreedula/content-provider"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NTMzOTI4", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053#pullrequestreview-419533928", "createdAt": "2020-05-27T19:14:06Z", "commit": {"oid": "7899bcaa59d3a9fc5b7de645c6eb073bf9b660d6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxOToxNDowNlrOGbZgdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxOToxNDowNlrOGbZgdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM4MjY0NQ==", "bodyText": "since we have specific broker request classes now for other operations such as hello, remove account etc. I would suggest renaming BrokerRequest.java to something like BrokerSilentTokenRequest.java as I believe this will now be only used for silent token requests?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053#discussion_r431382645", "createdAt": "2020-05-27T19:14:06Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerContentProviderStrategy.java", "diffHunk": "@@ -0,0 +1,487 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.internal.controllers;\n+\n+import android.content.Context;\n+import android.content.Intent;\n+import android.database.Cursor;\n+import android.net.Uri;\n+import android.os.Bundle;\n+\n+import com.google.gson.Gson;\n+import com.microsoft.identity.client.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.adal.internal.AuthenticationConstants;\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.internal.broker.BrokerRequest;\n+import com.microsoft.identity.common.internal.broker.BrokerValidator;\n+import com.microsoft.identity.common.internal.cache.ICacheRecord;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.InteractiveTokenCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.RemoveAccountCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.SilentTokenCommandParameters;\n+import com.microsoft.identity.common.internal.logging.Logger;\n+import com.microsoft.identity.common.internal.result.AcquireTokenResult;\n+import com.microsoft.identity.common.internal.telemetry.Telemetry;\n+import com.microsoft.identity.common.internal.telemetry.TelemetryEventStrings;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerEndEvent;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerStartEvent;\n+\n+import java.util.List;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.Broker.BROKER_ACTIVITY_NAME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.Broker.BROKER_PACKAGE_NAME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_SILENT_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.AUTHORITY;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.CONTENT_SCHEME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_CURRENT_ACCOUNT_SHARED_DEVICe_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_DEVICE_MODE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.HELLO_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.REMOVE_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.SIGN_OUT_FROM_SHARED_DEVICE_PATH;\n+\n+public class BrokerContentProviderStrategy extends BrokerBaseStrategy {\n+\n+    private static final String TAG = BrokerContentProviderStrategy.class.getName();\n+\n+    public interface ContentProviderOperation<T extends CommandParameters, U> {\n+\n+        /**\n+         * Constructs and returns a data string for the request to the broker from the CommandParameters.\n+         */\n+        @Nullable\n+        String getRequestString(T parameters);\n+\n+        /**\n+         * Returns a String[] with options to be sent to the broker.\n+         * Currently we only send negotiatedBrokerProtocolVersion if available.\n+         *\n+         * @return\n+         */\n+        @Nullable\n+        String[] getOptions();\n+\n+        /**\n+         * Name of task for logging and telemetry purposes\n+         */\n+        @NonNull\n+        String getMethodName();\n+\n+        /**\n+         * Uri path for specific broker operation\n+         */\n+        @NonNull\n+        String getUriPath();\n+\n+        /**\n+         * Constructs and returns the result from the request bundle returned by the broker.\n+         */\n+        @NonNull\n+        U getResultFromBundle(Bundle resultBundle) throws BaseException;\n+    }\n+\n+    private <T extends CommandParameters, U> U performContentProviderOperation(\n+            @NonNull final T parameters,\n+            @NonNull final ContentProviderOperation<T, U> contentProviderOperation) throws BaseException {\n+\n+        final String methodName = contentProviderOperation.getMethodName();\n+\n+        Telemetry.emit(\n+                new BrokerStartEvent()\n+                        .putAction(methodName)\n+                        .putStrategy(TelemetryEventStrings.Value.CONTENT_PROVIDER)\n+        );\n+        final Uri uri = getContentProviderURI(\n+                parameters.getAndroidApplicationContext(),\n+                contentProviderOperation.getUriPath()\n+        );\n+        Logger.info(TAG + methodName, \"Request to BrokerContentProvider for uri path \" +\n+                contentProviderOperation.getUriPath()\n+        );\n+        final Cursor cursor = parameters.getAndroidApplicationContext().getContentResolver().query(\n+                uri,\n+                contentProviderOperation.getOptions(),\n+                contentProviderOperation.getRequestString(parameters),\n+                null,\n+                null\n+        );\n+\n+        if (cursor != null) {\n+            final U result = contentProviderOperation.getResultFromBundle(cursor.getExtras());\n+            cursor.close();\n+            Telemetry.emit(\n+                    new BrokerEndEvent()\n+                            .putAction(methodName)\n+                            .isSuccessful(true)\n+            );\n+            Logger.info(TAG + methodName, \"Received successful result from broker\");\n+            return result;\n+        } else {\n+            final String message = \"Failed to get result from Broker Content Provider, cursor is null\";\n+            Logger.error(TAG + methodName, message, null);\n+            Telemetry.emit(\n+                    new BrokerEndEvent()\n+                            .putAction(methodName)\n+                            .isSuccessful(false)\n+                            .putErrorDescription(message)\n+            );\n+            throw new BrokerCommunicationException(message, null);\n+        }\n+    }\n+\n+    @Override\n+    String hello(@NonNull CommandParameters parameters) throws BaseException {\n+        final String methodName = \"helloWithContentProvider\";\n+\n+        return performContentProviderOperation(parameters, new ContentProviderOperation<CommandParameters, String>() {\n+            @Override\n+            public String getRequestString(CommandParameters parameters) {\n+                return mRequestAdapter.getRequestStringForHello(parameters);\n+            }\n+\n+            @Override\n+            public String[] getOptions() {\n+                return null; // no additional options to be sent for hello\n+            }\n+\n+            @Override\n+            public String getMethodName() {\n+                return methodName;\n+            }\n+\n+            @Override\n+            public String getUriPath() {\n+                return HELLO_PATH;\n+            }\n+\n+            @Override\n+            public String getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                return mResultAdapter.verifyHelloFromResultBundle(resultBundle);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    Intent getBrokerAuthorizationIntent(@NonNull final InteractiveTokenCommandParameters parameters,\n+                                        @Nullable final String negotiatedBrokerProtocolVersion)\n+            throws BaseException {\n+        final String methodName = \"getBrokerAuthorizationIntentForContentProvider\";\n+\n+        return performContentProviderOperation(parameters, new ContentProviderOperation<InteractiveTokenCommandParameters, Intent>() {\n+\n+            @Override\n+            public String getRequestString(InteractiveTokenCommandParameters parameters) {\n+                return null; // broker returns us an intent based on calling uid , no request string needed\n+            }\n+\n+            @Override\n+            public String[] getOptions() {\n+                return new String[]{negotiatedBrokerProtocolVersion};\n+            }\n+\n+            @Override\n+            public String getMethodName() {\n+                return methodName;\n+            }\n+\n+            @Override\n+            public String getUriPath() {\n+                return ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+            }\n+\n+            @Override\n+            public Intent getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                final Bundle requestBundle = mRequestAdapter.getRequestBundleForAcquireTokenInteractive(\n+                        parameters,\n+                        negotiatedBrokerProtocolVersion\n+                );\n+                Intent interactiveRequestIntent = new Intent();\n+                interactiveRequestIntent.putExtras(requestBundle);\n+                interactiveRequestIntent.putExtras(resultBundle);\n+                interactiveRequestIntent.setPackage(resultBundle.getString(BROKER_PACKAGE_NAME));\n+                interactiveRequestIntent.setClassName(\n+                        resultBundle.getString(BROKER_PACKAGE_NAME, \"\"),\n+                        resultBundle.getString(BROKER_ACTIVITY_NAME, \"\")\n+                );\n+                interactiveRequestIntent.putExtra(\n+                        AuthenticationConstants.Broker.NEGOTIATED_BP_VERSION_KEY,\n+                        negotiatedBrokerProtocolVersion\n+                );\n+                return interactiveRequestIntent;\n+            }\n+        });\n+    }\n+\n+    @Override\n+    AcquireTokenResult acquireTokenSilent(@NonNull final SilentTokenCommandParameters parameters,\n+                                          @Nullable final String negotiatedBrokerProtocolVersion)\n+            throws BaseException {\n+        final String methodName = \"acquireTokenSilentWithContentProvider\";\n+\n+        return performContentProviderOperation(\n+                parameters,\n+                new ContentProviderOperation<SilentTokenCommandParameters, AcquireTokenResult>() {\n+                    @Nullable\n+                    @Override\n+                    public String getRequestString(SilentTokenCommandParameters parameters) {\n+                        final BrokerRequest brokerRequest = mRequestAdapter.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7899bcaa59d3a9fc5b7de645c6eb073bf9b660d6"}, "originalPosition": 251}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NTM2MDEy", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053#pullrequestreview-419536012", "createdAt": "2020-05-27T19:17:18Z", "commit": {"oid": "7899bcaa59d3a9fc5b7de645c6eb073bf9b660d6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxOToxNzoxOFrOGbZqvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxOToxNzoxOFrOGbZqvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM4NTI3OA==", "bodyText": "Having null seems confusing and seems like nothing is being sent to the broker. I believe this is NULL because the only thing we are sending is basically telling the broker that we need to get the device mode? and due to the nature of the get device mode command, it doesn't need any additional parameters to be sent along unlike other operations such as remove account?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053#discussion_r431385278", "createdAt": "2020-05-27T19:17:18Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerContentProviderStrategy.java", "diffHunk": "@@ -0,0 +1,487 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.internal.controllers;\n+\n+import android.content.Context;\n+import android.content.Intent;\n+import android.database.Cursor;\n+import android.net.Uri;\n+import android.os.Bundle;\n+\n+import com.google.gson.Gson;\n+import com.microsoft.identity.client.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.adal.internal.AuthenticationConstants;\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.internal.broker.BrokerRequest;\n+import com.microsoft.identity.common.internal.broker.BrokerValidator;\n+import com.microsoft.identity.common.internal.cache.ICacheRecord;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.InteractiveTokenCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.RemoveAccountCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.SilentTokenCommandParameters;\n+import com.microsoft.identity.common.internal.logging.Logger;\n+import com.microsoft.identity.common.internal.result.AcquireTokenResult;\n+import com.microsoft.identity.common.internal.telemetry.Telemetry;\n+import com.microsoft.identity.common.internal.telemetry.TelemetryEventStrings;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerEndEvent;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerStartEvent;\n+\n+import java.util.List;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.Broker.BROKER_ACTIVITY_NAME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.Broker.BROKER_PACKAGE_NAME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_SILENT_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.AUTHORITY;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.CONTENT_SCHEME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_CURRENT_ACCOUNT_SHARED_DEVICe_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_DEVICE_MODE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.HELLO_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.REMOVE_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.SIGN_OUT_FROM_SHARED_DEVICE_PATH;\n+\n+public class BrokerContentProviderStrategy extends BrokerBaseStrategy {\n+\n+    private static final String TAG = BrokerContentProviderStrategy.class.getName();\n+\n+    public interface ContentProviderOperation<T extends CommandParameters, U> {\n+\n+        /**\n+         * Constructs and returns a data string for the request to the broker from the CommandParameters.\n+         */\n+        @Nullable\n+        String getRequestString(T parameters);\n+\n+        /**\n+         * Returns a String[] with options to be sent to the broker.\n+         * Currently we only send negotiatedBrokerProtocolVersion if available.\n+         *\n+         * @return\n+         */\n+        @Nullable\n+        String[] getOptions();\n+\n+        /**\n+         * Name of task for logging and telemetry purposes\n+         */\n+        @NonNull\n+        String getMethodName();\n+\n+        /**\n+         * Uri path for specific broker operation\n+         */\n+        @NonNull\n+        String getUriPath();\n+\n+        /**\n+         * Constructs and returns the result from the request bundle returned by the broker.\n+         */\n+        @NonNull\n+        U getResultFromBundle(Bundle resultBundle) throws BaseException;\n+    }\n+\n+    private <T extends CommandParameters, U> U performContentProviderOperation(\n+            @NonNull final T parameters,\n+            @NonNull final ContentProviderOperation<T, U> contentProviderOperation) throws BaseException {\n+\n+        final String methodName = contentProviderOperation.getMethodName();\n+\n+        Telemetry.emit(\n+                new BrokerStartEvent()\n+                        .putAction(methodName)\n+                        .putStrategy(TelemetryEventStrings.Value.CONTENT_PROVIDER)\n+        );\n+        final Uri uri = getContentProviderURI(\n+                parameters.getAndroidApplicationContext(),\n+                contentProviderOperation.getUriPath()\n+        );\n+        Logger.info(TAG + methodName, \"Request to BrokerContentProvider for uri path \" +\n+                contentProviderOperation.getUriPath()\n+        );\n+        final Cursor cursor = parameters.getAndroidApplicationContext().getContentResolver().query(\n+                uri,\n+                contentProviderOperation.getOptions(),\n+                contentProviderOperation.getRequestString(parameters),\n+                null,\n+                null\n+        );\n+\n+        if (cursor != null) {\n+            final U result = contentProviderOperation.getResultFromBundle(cursor.getExtras());\n+            cursor.close();\n+            Telemetry.emit(\n+                    new BrokerEndEvent()\n+                            .putAction(methodName)\n+                            .isSuccessful(true)\n+            );\n+            Logger.info(TAG + methodName, \"Received successful result from broker\");\n+            return result;\n+        } else {\n+            final String message = \"Failed to get result from Broker Content Provider, cursor is null\";\n+            Logger.error(TAG + methodName, message, null);\n+            Telemetry.emit(\n+                    new BrokerEndEvent()\n+                            .putAction(methodName)\n+                            .isSuccessful(false)\n+                            .putErrorDescription(message)\n+            );\n+            throw new BrokerCommunicationException(message, null);\n+        }\n+    }\n+\n+    @Override\n+    String hello(@NonNull CommandParameters parameters) throws BaseException {\n+        final String methodName = \"helloWithContentProvider\";\n+\n+        return performContentProviderOperation(parameters, new ContentProviderOperation<CommandParameters, String>() {\n+            @Override\n+            public String getRequestString(CommandParameters parameters) {\n+                return mRequestAdapter.getRequestStringForHello(parameters);\n+            }\n+\n+            @Override\n+            public String[] getOptions() {\n+                return null; // no additional options to be sent for hello\n+            }\n+\n+            @Override\n+            public String getMethodName() {\n+                return methodName;\n+            }\n+\n+            @Override\n+            public String getUriPath() {\n+                return HELLO_PATH;\n+            }\n+\n+            @Override\n+            public String getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                return mResultAdapter.verifyHelloFromResultBundle(resultBundle);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    Intent getBrokerAuthorizationIntent(@NonNull final InteractiveTokenCommandParameters parameters,\n+                                        @Nullable final String negotiatedBrokerProtocolVersion)\n+            throws BaseException {\n+        final String methodName = \"getBrokerAuthorizationIntentForContentProvider\";\n+\n+        return performContentProviderOperation(parameters, new ContentProviderOperation<InteractiveTokenCommandParameters, Intent>() {\n+\n+            @Override\n+            public String getRequestString(InteractiveTokenCommandParameters parameters) {\n+                return null; // broker returns us an intent based on calling uid , no request string needed\n+            }\n+\n+            @Override\n+            public String[] getOptions() {\n+                return new String[]{negotiatedBrokerProtocolVersion};\n+            }\n+\n+            @Override\n+            public String getMethodName() {\n+                return methodName;\n+            }\n+\n+            @Override\n+            public String getUriPath() {\n+                return ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+            }\n+\n+            @Override\n+            public Intent getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                final Bundle requestBundle = mRequestAdapter.getRequestBundleForAcquireTokenInteractive(\n+                        parameters,\n+                        negotiatedBrokerProtocolVersion\n+                );\n+                Intent interactiveRequestIntent = new Intent();\n+                interactiveRequestIntent.putExtras(requestBundle);\n+                interactiveRequestIntent.putExtras(resultBundle);\n+                interactiveRequestIntent.setPackage(resultBundle.getString(BROKER_PACKAGE_NAME));\n+                interactiveRequestIntent.setClassName(\n+                        resultBundle.getString(BROKER_PACKAGE_NAME, \"\"),\n+                        resultBundle.getString(BROKER_ACTIVITY_NAME, \"\")\n+                );\n+                interactiveRequestIntent.putExtra(\n+                        AuthenticationConstants.Broker.NEGOTIATED_BP_VERSION_KEY,\n+                        negotiatedBrokerProtocolVersion\n+                );\n+                return interactiveRequestIntent;\n+            }\n+        });\n+    }\n+\n+    @Override\n+    AcquireTokenResult acquireTokenSilent(@NonNull final SilentTokenCommandParameters parameters,\n+                                          @Nullable final String negotiatedBrokerProtocolVersion)\n+            throws BaseException {\n+        final String methodName = \"acquireTokenSilentWithContentProvider\";\n+\n+        return performContentProviderOperation(\n+                parameters,\n+                new ContentProviderOperation<SilentTokenCommandParameters, AcquireTokenResult>() {\n+                    @Nullable\n+                    @Override\n+                    public String getRequestString(SilentTokenCommandParameters parameters) {\n+                        final BrokerRequest brokerRequest = mRequestAdapter.\n+                                brokerRequestFromSilentOperationParameters(parameters);\n+                        return new Gson().toJson(brokerRequest);\n+                    }\n+\n+                    @Nullable\n+                    @Override\n+                    public String[] getOptions() {\n+                        return new String[]{negotiatedBrokerProtocolVersion};\n+                    }\n+\n+                    @NonNull\n+                    @Override\n+                    public String getMethodName() {\n+                        return methodName;\n+                    }\n+\n+                    @NonNull\n+                    @Override\n+                    public String getUriPath() {\n+                        return ACQUIRE_TOKEN_SILENT_PATH;\n+                    }\n+\n+                    @NonNull\n+                    @Override\n+                    public AcquireTokenResult getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                        return mResultAdapter.getAcquireTokenResultFromResultBundle(resultBundle);\n+                    }\n+                });\n+    }\n+\n+    @Override\n+    List<ICacheRecord> getBrokerAccounts(@NonNull final CommandParameters parameters,\n+                                         @Nullable final String negotiatedBrokerProtocolVersion) throws BaseException {\n+        final String methodName = \"getBrokerAccountsWithContentProvider\";\n+        return performContentProviderOperation(\n+                parameters,\n+                new ContentProviderOperation<CommandParameters, List<ICacheRecord>>() {\n+            @Nullable\n+            @Override\n+            public String getRequestString(CommandParameters parameters) {\n+                return mRequestAdapter.getRequestStringForGetAccounts(parameters);\n+            }\n+\n+            @Nullable\n+            @Override\n+            public String[] getOptions() {\n+                return new String[]{negotiatedBrokerProtocolVersion};\n+            }\n+\n+            @NonNull\n+            @Override\n+            public String getMethodName() {\n+                return methodName;\n+            }\n+\n+            @NonNull\n+            @Override\n+            public String getUriPath() {\n+                return GET_ACCOUNTS_PATH;\n+            }\n+\n+            @NonNull\n+            @Override\n+            public List<ICacheRecord> getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                return mResultAdapter.getAccountsFromResultBundle(resultBundle);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    void removeBrokerAccount(@NonNull final RemoveAccountCommandParameters parameters,\n+                             @Nullable final String negotiatedBrokerProtocolVersion) throws BaseException {\n+\n+        final String methodName = \"removeBrokerAccountWithContentProvider\";\n+\n+        performContentProviderOperation(\n+                parameters,\n+                new ContentProviderOperation<RemoveAccountCommandParameters, Void>() {\n+            @Nullable\n+            @Override\n+            public String getRequestString(RemoveAccountCommandParameters parameters) {\n+                return mRequestAdapter.getRequestStringForRemoveAccount(parameters);\n+            }\n+\n+            @Nullable\n+            @Override\n+            public String[] getOptions() {\n+                return new String[]{negotiatedBrokerProtocolVersion};\n+            }\n+\n+            @NonNull\n+            @Override\n+            public String getMethodName() {\n+                return methodName;\n+            }\n+\n+            @NonNull\n+            @Override\n+            public String getUriPath() {\n+                return REMOVE_ACCOUNTS_PATH;\n+            }\n+\n+            @NonNull\n+            @Override\n+            public Void getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                mResultAdapter.verifyRemoveAccountResultFromBundle(resultBundle);\n+                return null;\n+            }\n+        });\n+    }\n+\n+    @Override\n+    boolean getDeviceMode(@NonNull final CommandParameters parameters,\n+                          @Nullable final String negotiatedBrokerProtocolVersion) throws BaseException {\n+        final String methodName = \"getDeviceModeWithContentProvider\";\n+        return performContentProviderOperation(\n+                parameters,\n+                new ContentProviderOperation<CommandParameters, Boolean>() {\n+\n+            @Nullable\n+            @Override\n+            public String getRequestString(CommandParameters parameters) {\n+                return null; // broker returns a boolean to indicate the device mode, no request string needed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7899bcaa59d3a9fc5b7de645c6eb073bf9b660d6"}, "originalPosition": 374}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "403d258cd4f89909e852c175a72174972a9a6b9f", "author": {"user": {"login": "kreedula", "name": "Krishna Eedula"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/403d258cd4f89909e852c175a72174972a9a6b9f", "committedDate": "2020-05-27T19:32:00Z", "message": "Merge branch 'dev' into kreedula/content-provider"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8ffa0b5f05d87812fd5671ada5ff2e829ac222b", "author": {"user": null}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/d8ffa0b5f05d87812fd5671ada5ff2e829ac222b", "committedDate": "2020-05-28T17:59:36Z", "message": "Addressing comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7df04278cc4b767aea9ca09184e6e39684c480e6", "author": {"user": null}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/7df04278cc4b767aea9ca09184e6e39684c480e6", "committedDate": "2020-05-28T18:00:14Z", "message": "Merge branch 'kreedula/content-provider' of https://github.com/AzureAD/microsoft-authentication-library-for-android into kreedula/content-provider"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNTI0NzMw", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053#pullrequestreview-420524730", "createdAt": "2020-05-28T22:03:10Z", "commit": {"oid": "403d258cd4f89909e852c175a72174972a9a6b9f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjowMzoxMFrOGcIT9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjowOTo0OVrOGcIejQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE0OTQ5Mg==", "bodyText": "call BrokerBaseStrategy.completeInteractiveRequestIntent()?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053#discussion_r432149492", "createdAt": "2020-05-28T22:03:10Z", "author": {"login": "rpdome"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerContentProviderStrategy.java", "diffHunk": "@@ -0,0 +1,487 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.internal.controllers;\n+\n+import android.content.Context;\n+import android.content.Intent;\n+import android.database.Cursor;\n+import android.net.Uri;\n+import android.os.Bundle;\n+\n+import com.google.gson.Gson;\n+import com.microsoft.identity.client.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.adal.internal.AuthenticationConstants;\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.internal.broker.BrokerRequest;\n+import com.microsoft.identity.common.internal.broker.BrokerValidator;\n+import com.microsoft.identity.common.internal.cache.ICacheRecord;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.InteractiveTokenCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.RemoveAccountCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.SilentTokenCommandParameters;\n+import com.microsoft.identity.common.internal.logging.Logger;\n+import com.microsoft.identity.common.internal.result.AcquireTokenResult;\n+import com.microsoft.identity.common.internal.telemetry.Telemetry;\n+import com.microsoft.identity.common.internal.telemetry.TelemetryEventStrings;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerEndEvent;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerStartEvent;\n+\n+import java.util.List;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.Broker.BROKER_ACTIVITY_NAME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.Broker.BROKER_PACKAGE_NAME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_SILENT_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.AUTHORITY;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.CONTENT_SCHEME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_CURRENT_ACCOUNT_SHARED_DEVICe_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_DEVICE_MODE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.HELLO_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.REMOVE_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.SIGN_OUT_FROM_SHARED_DEVICE_PATH;\n+\n+public class BrokerContentProviderStrategy extends BrokerBaseStrategy {\n+\n+    private static final String TAG = BrokerContentProviderStrategy.class.getName();\n+\n+    public interface ContentProviderOperation<T extends CommandParameters, U> {\n+\n+        /**\n+         * Constructs and returns a data string for the request to the broker from the CommandParameters.\n+         */\n+        @Nullable\n+        String getRequestString(T parameters);\n+\n+        /**\n+         * Returns a String[] with options to be sent to the broker.\n+         * Currently we only send negotiatedBrokerProtocolVersion if available.\n+         *\n+         * @return\n+         */\n+        @Nullable\n+        String[] getOptions();\n+\n+        /**\n+         * Name of task for logging and telemetry purposes\n+         */\n+        @NonNull\n+        String getMethodName();\n+\n+        /**\n+         * Uri path for specific broker operation\n+         */\n+        @NonNull\n+        String getUriPath();\n+\n+        /**\n+         * Constructs and returns the result from the request bundle returned by the broker.\n+         */\n+        @NonNull\n+        U getResultFromBundle(Bundle resultBundle) throws BaseException;\n+    }\n+\n+    private <T extends CommandParameters, U> U performContentProviderOperation(\n+            @NonNull final T parameters,\n+            @NonNull final ContentProviderOperation<T, U> contentProviderOperation) throws BaseException {\n+\n+        final String methodName = contentProviderOperation.getMethodName();\n+\n+        Telemetry.emit(\n+                new BrokerStartEvent()\n+                        .putAction(methodName)\n+                        .putStrategy(TelemetryEventStrings.Value.CONTENT_PROVIDER)\n+        );\n+        final Uri uri = getContentProviderURI(\n+                parameters.getAndroidApplicationContext(),\n+                contentProviderOperation.getUriPath()\n+        );\n+        Logger.info(TAG + methodName, \"Request to BrokerContentProvider for uri path \" +\n+                contentProviderOperation.getUriPath()\n+        );\n+        final Cursor cursor = parameters.getAndroidApplicationContext().getContentResolver().query(\n+                uri,\n+                contentProviderOperation.getOptions(),\n+                contentProviderOperation.getRequestString(parameters),\n+                null,\n+                null\n+        );\n+\n+        if (cursor != null) {\n+            final U result = contentProviderOperation.getResultFromBundle(cursor.getExtras());\n+            cursor.close();\n+            Telemetry.emit(\n+                    new BrokerEndEvent()\n+                            .putAction(methodName)\n+                            .isSuccessful(true)\n+            );\n+            Logger.info(TAG + methodName, \"Received successful result from broker\");\n+            return result;\n+        } else {\n+            final String message = \"Failed to get result from Broker Content Provider, cursor is null\";\n+            Logger.error(TAG + methodName, message, null);\n+            Telemetry.emit(\n+                    new BrokerEndEvent()\n+                            .putAction(methodName)\n+                            .isSuccessful(false)\n+                            .putErrorDescription(message)\n+            );\n+            throw new BrokerCommunicationException(message, null);\n+        }\n+    }\n+\n+    @Override\n+    String hello(@NonNull CommandParameters parameters) throws BaseException {\n+        final String methodName = \"helloWithContentProvider\";\n+\n+        return performContentProviderOperation(parameters, new ContentProviderOperation<CommandParameters, String>() {\n+            @Override\n+            public String getRequestString(CommandParameters parameters) {\n+                return mRequestAdapter.getRequestStringForHello(parameters);\n+            }\n+\n+            @Override\n+            public String[] getOptions() {\n+                return null; // no additional options to be sent for hello\n+            }\n+\n+            @Override\n+            public String getMethodName() {\n+                return methodName;\n+            }\n+\n+            @Override\n+            public String getUriPath() {\n+                return HELLO_PATH;\n+            }\n+\n+            @Override\n+            public String getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                return mResultAdapter.verifyHelloFromResultBundle(resultBundle);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    Intent getBrokerAuthorizationIntent(@NonNull final InteractiveTokenCommandParameters parameters,\n+                                        @Nullable final String negotiatedBrokerProtocolVersion)\n+            throws BaseException {\n+        final String methodName = \"getBrokerAuthorizationIntentForContentProvider\";\n+\n+        return performContentProviderOperation(parameters, new ContentProviderOperation<InteractiveTokenCommandParameters, Intent>() {\n+\n+            @Override\n+            public String getRequestString(InteractiveTokenCommandParameters parameters) {\n+                return null; // broker returns us an intent based on calling uid , no request string needed\n+            }\n+\n+            @Override\n+            public String[] getOptions() {\n+                return new String[]{negotiatedBrokerProtocolVersion};\n+            }\n+\n+            @Override\n+            public String getMethodName() {\n+                return methodName;\n+            }\n+\n+            @Override\n+            public String getUriPath() {\n+                return ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+            }\n+\n+            @Override\n+            public Intent getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                final Bundle requestBundle = mRequestAdapter.getRequestBundleForAcquireTokenInteractive(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "403d258cd4f89909e852c175a72174972a9a6b9f"}, "originalPosition": 218}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1MDE1MA==", "bodyText": "(and we might want to move this function to MsalBrokerResultAdapter too)", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053#discussion_r432150150", "createdAt": "2020-05-28T22:04:44Z", "author": {"login": "rpdome"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerContentProviderStrategy.java", "diffHunk": "@@ -0,0 +1,487 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.internal.controllers;\n+\n+import android.content.Context;\n+import android.content.Intent;\n+import android.database.Cursor;\n+import android.net.Uri;\n+import android.os.Bundle;\n+\n+import com.google.gson.Gson;\n+import com.microsoft.identity.client.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.adal.internal.AuthenticationConstants;\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.internal.broker.BrokerRequest;\n+import com.microsoft.identity.common.internal.broker.BrokerValidator;\n+import com.microsoft.identity.common.internal.cache.ICacheRecord;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.InteractiveTokenCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.RemoveAccountCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.SilentTokenCommandParameters;\n+import com.microsoft.identity.common.internal.logging.Logger;\n+import com.microsoft.identity.common.internal.result.AcquireTokenResult;\n+import com.microsoft.identity.common.internal.telemetry.Telemetry;\n+import com.microsoft.identity.common.internal.telemetry.TelemetryEventStrings;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerEndEvent;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerStartEvent;\n+\n+import java.util.List;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.Broker.BROKER_ACTIVITY_NAME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.Broker.BROKER_PACKAGE_NAME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_SILENT_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.AUTHORITY;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.CONTENT_SCHEME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_CURRENT_ACCOUNT_SHARED_DEVICe_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_DEVICE_MODE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.HELLO_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.REMOVE_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.SIGN_OUT_FROM_SHARED_DEVICE_PATH;\n+\n+public class BrokerContentProviderStrategy extends BrokerBaseStrategy {\n+\n+    private static final String TAG = BrokerContentProviderStrategy.class.getName();\n+\n+    public interface ContentProviderOperation<T extends CommandParameters, U> {\n+\n+        /**\n+         * Constructs and returns a data string for the request to the broker from the CommandParameters.\n+         */\n+        @Nullable\n+        String getRequestString(T parameters);\n+\n+        /**\n+         * Returns a String[] with options to be sent to the broker.\n+         * Currently we only send negotiatedBrokerProtocolVersion if available.\n+         *\n+         * @return\n+         */\n+        @Nullable\n+        String[] getOptions();\n+\n+        /**\n+         * Name of task for logging and telemetry purposes\n+         */\n+        @NonNull\n+        String getMethodName();\n+\n+        /**\n+         * Uri path for specific broker operation\n+         */\n+        @NonNull\n+        String getUriPath();\n+\n+        /**\n+         * Constructs and returns the result from the request bundle returned by the broker.\n+         */\n+        @NonNull\n+        U getResultFromBundle(Bundle resultBundle) throws BaseException;\n+    }\n+\n+    private <T extends CommandParameters, U> U performContentProviderOperation(\n+            @NonNull final T parameters,\n+            @NonNull final ContentProviderOperation<T, U> contentProviderOperation) throws BaseException {\n+\n+        final String methodName = contentProviderOperation.getMethodName();\n+\n+        Telemetry.emit(\n+                new BrokerStartEvent()\n+                        .putAction(methodName)\n+                        .putStrategy(TelemetryEventStrings.Value.CONTENT_PROVIDER)\n+        );\n+        final Uri uri = getContentProviderURI(\n+                parameters.getAndroidApplicationContext(),\n+                contentProviderOperation.getUriPath()\n+        );\n+        Logger.info(TAG + methodName, \"Request to BrokerContentProvider for uri path \" +\n+                contentProviderOperation.getUriPath()\n+        );\n+        final Cursor cursor = parameters.getAndroidApplicationContext().getContentResolver().query(\n+                uri,\n+                contentProviderOperation.getOptions(),\n+                contentProviderOperation.getRequestString(parameters),\n+                null,\n+                null\n+        );\n+\n+        if (cursor != null) {\n+            final U result = contentProviderOperation.getResultFromBundle(cursor.getExtras());\n+            cursor.close();\n+            Telemetry.emit(\n+                    new BrokerEndEvent()\n+                            .putAction(methodName)\n+                            .isSuccessful(true)\n+            );\n+            Logger.info(TAG + methodName, \"Received successful result from broker\");\n+            return result;\n+        } else {\n+            final String message = \"Failed to get result from Broker Content Provider, cursor is null\";\n+            Logger.error(TAG + methodName, message, null);\n+            Telemetry.emit(\n+                    new BrokerEndEvent()\n+                            .putAction(methodName)\n+                            .isSuccessful(false)\n+                            .putErrorDescription(message)\n+            );\n+            throw new BrokerCommunicationException(message, null);\n+        }\n+    }\n+\n+    @Override\n+    String hello(@NonNull CommandParameters parameters) throws BaseException {\n+        final String methodName = \"helloWithContentProvider\";\n+\n+        return performContentProviderOperation(parameters, new ContentProviderOperation<CommandParameters, String>() {\n+            @Override\n+            public String getRequestString(CommandParameters parameters) {\n+                return mRequestAdapter.getRequestStringForHello(parameters);\n+            }\n+\n+            @Override\n+            public String[] getOptions() {\n+                return null; // no additional options to be sent for hello\n+            }\n+\n+            @Override\n+            public String getMethodName() {\n+                return methodName;\n+            }\n+\n+            @Override\n+            public String getUriPath() {\n+                return HELLO_PATH;\n+            }\n+\n+            @Override\n+            public String getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                return mResultAdapter.verifyHelloFromResultBundle(resultBundle);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    Intent getBrokerAuthorizationIntent(@NonNull final InteractiveTokenCommandParameters parameters,\n+                                        @Nullable final String negotiatedBrokerProtocolVersion)\n+            throws BaseException {\n+        final String methodName = \"getBrokerAuthorizationIntentForContentProvider\";\n+\n+        return performContentProviderOperation(parameters, new ContentProviderOperation<InteractiveTokenCommandParameters, Intent>() {\n+\n+            @Override\n+            public String getRequestString(InteractiveTokenCommandParameters parameters) {\n+                return null; // broker returns us an intent based on calling uid , no request string needed\n+            }\n+\n+            @Override\n+            public String[] getOptions() {\n+                return new String[]{negotiatedBrokerProtocolVersion};\n+            }\n+\n+            @Override\n+            public String getMethodName() {\n+                return methodName;\n+            }\n+\n+            @Override\n+            public String getUriPath() {\n+                return ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+            }\n+\n+            @Override\n+            public Intent getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                final Bundle requestBundle = mRequestAdapter.getRequestBundleForAcquireTokenInteractive(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE0OTQ5Mg=="}, "originalCommit": {"oid": "403d258cd4f89909e852c175a72174972a9a6b9f"}, "originalPosition": 218}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1MTAzMw==", "bodyText": "nit: if possible to serialize/marshall the request bundle (as suggested in ad-accounts), I suggest renaming this to something like 'get Marshalled/Serialized RequestBundle'.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053#discussion_r432151033", "createdAt": "2020-05-28T22:06:48Z", "author": {"login": "rpdome"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerContentProviderStrategy.java", "diffHunk": "@@ -0,0 +1,487 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.internal.controllers;\n+\n+import android.content.Context;\n+import android.content.Intent;\n+import android.database.Cursor;\n+import android.net.Uri;\n+import android.os.Bundle;\n+\n+import com.google.gson.Gson;\n+import com.microsoft.identity.client.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.adal.internal.AuthenticationConstants;\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.internal.broker.BrokerRequest;\n+import com.microsoft.identity.common.internal.broker.BrokerValidator;\n+import com.microsoft.identity.common.internal.cache.ICacheRecord;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.InteractiveTokenCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.RemoveAccountCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.SilentTokenCommandParameters;\n+import com.microsoft.identity.common.internal.logging.Logger;\n+import com.microsoft.identity.common.internal.result.AcquireTokenResult;\n+import com.microsoft.identity.common.internal.telemetry.Telemetry;\n+import com.microsoft.identity.common.internal.telemetry.TelemetryEventStrings;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerEndEvent;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerStartEvent;\n+\n+import java.util.List;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.Broker.BROKER_ACTIVITY_NAME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.Broker.BROKER_PACKAGE_NAME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_SILENT_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.AUTHORITY;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.CONTENT_SCHEME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_CURRENT_ACCOUNT_SHARED_DEVICe_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_DEVICE_MODE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.HELLO_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.REMOVE_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.SIGN_OUT_FROM_SHARED_DEVICE_PATH;\n+\n+public class BrokerContentProviderStrategy extends BrokerBaseStrategy {\n+\n+    private static final String TAG = BrokerContentProviderStrategy.class.getName();\n+\n+    public interface ContentProviderOperation<T extends CommandParameters, U> {\n+\n+        /**\n+         * Constructs and returns a data string for the request to the broker from the CommandParameters.\n+         */\n+        @Nullable\n+        String getRequestString(T parameters);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "403d258cd4f89909e852c175a72174972a9a6b9f"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1MjIwNQ==", "bodyText": "not particularly related to this PR, but if we manage to be able to reuse the request bundle here, can you move negotiatedBrokerProtocolVersion into MsalBrokerRequestAdapter as well? (there will be some change to clean up redundant codes in the other two strategy).", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053#discussion_r432152205", "createdAt": "2020-05-28T22:09:49Z", "author": {"login": "rpdome"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerContentProviderStrategy.java", "diffHunk": "@@ -0,0 +1,487 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.internal.controllers;\n+\n+import android.content.Context;\n+import android.content.Intent;\n+import android.database.Cursor;\n+import android.net.Uri;\n+import android.os.Bundle;\n+\n+import com.google.gson.Gson;\n+import com.microsoft.identity.client.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.adal.internal.AuthenticationConstants;\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.internal.broker.BrokerRequest;\n+import com.microsoft.identity.common.internal.broker.BrokerValidator;\n+import com.microsoft.identity.common.internal.cache.ICacheRecord;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.InteractiveTokenCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.RemoveAccountCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.SilentTokenCommandParameters;\n+import com.microsoft.identity.common.internal.logging.Logger;\n+import com.microsoft.identity.common.internal.result.AcquireTokenResult;\n+import com.microsoft.identity.common.internal.telemetry.Telemetry;\n+import com.microsoft.identity.common.internal.telemetry.TelemetryEventStrings;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerEndEvent;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerStartEvent;\n+\n+import java.util.List;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.Broker.BROKER_ACTIVITY_NAME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.Broker.BROKER_PACKAGE_NAME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_SILENT_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.AUTHORITY;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.CONTENT_SCHEME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_CURRENT_ACCOUNT_SHARED_DEVICe_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_DEVICE_MODE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.HELLO_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.REMOVE_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.SIGN_OUT_FROM_SHARED_DEVICE_PATH;\n+\n+public class BrokerContentProviderStrategy extends BrokerBaseStrategy {\n+\n+    private static final String TAG = BrokerContentProviderStrategy.class.getName();\n+\n+    public interface ContentProviderOperation<T extends CommandParameters, U> {\n+\n+        /**\n+         * Constructs and returns a data string for the request to the broker from the CommandParameters.\n+         */\n+        @Nullable\n+        String getRequestString(T parameters);\n+\n+        /**\n+         * Returns a String[] with options to be sent to the broker.\n+         * Currently we only send negotiatedBrokerProtocolVersion if available.\n+         *\n+         * @return\n+         */\n+        @Nullable\n+        String[] getOptions();\n+\n+        /**\n+         * Name of task for logging and telemetry purposes\n+         */\n+        @NonNull\n+        String getMethodName();\n+\n+        /**\n+         * Uri path for specific broker operation\n+         */\n+        @NonNull\n+        String getUriPath();\n+\n+        /**\n+         * Constructs and returns the result from the request bundle returned by the broker.\n+         */\n+        @NonNull\n+        U getResultFromBundle(Bundle resultBundle) throws BaseException;\n+    }\n+\n+    private <T extends CommandParameters, U> U performContentProviderOperation(\n+            @NonNull final T parameters,\n+            @NonNull final ContentProviderOperation<T, U> contentProviderOperation) throws BaseException {\n+\n+        final String methodName = contentProviderOperation.getMethodName();\n+\n+        Telemetry.emit(\n+                new BrokerStartEvent()\n+                        .putAction(methodName)\n+                        .putStrategy(TelemetryEventStrings.Value.CONTENT_PROVIDER)\n+        );\n+        final Uri uri = getContentProviderURI(\n+                parameters.getAndroidApplicationContext(),\n+                contentProviderOperation.getUriPath()\n+        );\n+        Logger.info(TAG + methodName, \"Request to BrokerContentProvider for uri path \" +\n+                contentProviderOperation.getUriPath()\n+        );\n+        final Cursor cursor = parameters.getAndroidApplicationContext().getContentResolver().query(\n+                uri,\n+                contentProviderOperation.getOptions(),\n+                contentProviderOperation.getRequestString(parameters),\n+                null,\n+                null\n+        );\n+\n+        if (cursor != null) {\n+            final U result = contentProviderOperation.getResultFromBundle(cursor.getExtras());\n+            cursor.close();\n+            Telemetry.emit(\n+                    new BrokerEndEvent()\n+                            .putAction(methodName)\n+                            .isSuccessful(true)\n+            );\n+            Logger.info(TAG + methodName, \"Received successful result from broker\");\n+            return result;\n+        } else {\n+            final String message = \"Failed to get result from Broker Content Provider, cursor is null\";\n+            Logger.error(TAG + methodName, message, null);\n+            Telemetry.emit(\n+                    new BrokerEndEvent()\n+                            .putAction(methodName)\n+                            .isSuccessful(false)\n+                            .putErrorDescription(message)\n+            );\n+            throw new BrokerCommunicationException(message, null);\n+        }\n+    }\n+\n+    @Override\n+    String hello(@NonNull CommandParameters parameters) throws BaseException {\n+        final String methodName = \"helloWithContentProvider\";\n+\n+        return performContentProviderOperation(parameters, new ContentProviderOperation<CommandParameters, String>() {\n+            @Override\n+            public String getRequestString(CommandParameters parameters) {\n+                return mRequestAdapter.getRequestStringForHello(parameters);\n+            }\n+\n+            @Override\n+            public String[] getOptions() {\n+                return null; // no additional options to be sent for hello\n+            }\n+\n+            @Override\n+            public String getMethodName() {\n+                return methodName;\n+            }\n+\n+            @Override\n+            public String getUriPath() {\n+                return HELLO_PATH;\n+            }\n+\n+            @Override\n+            public String getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                return mResultAdapter.verifyHelloFromResultBundle(resultBundle);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    Intent getBrokerAuthorizationIntent(@NonNull final InteractiveTokenCommandParameters parameters,\n+                                        @Nullable final String negotiatedBrokerProtocolVersion)\n+            throws BaseException {\n+        final String methodName = \"getBrokerAuthorizationIntentForContentProvider\";\n+\n+        return performContentProviderOperation(parameters, new ContentProviderOperation<InteractiveTokenCommandParameters, Intent>() {\n+\n+            @Override\n+            public String getRequestString(InteractiveTokenCommandParameters parameters) {\n+                return null; // broker returns us an intent based on calling uid , no request string needed\n+            }\n+\n+            @Override\n+            public String[] getOptions() {\n+                return new String[]{negotiatedBrokerProtocolVersion};\n+            }\n+\n+            @Override\n+            public String getMethodName() {\n+                return methodName;\n+            }\n+\n+            @Override\n+            public String getUriPath() {\n+                return ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+            }\n+\n+            @Override\n+            public Intent getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                final Bundle requestBundle = mRequestAdapter.getRequestBundleForAcquireTokenInteractive(\n+                        parameters,\n+                        negotiatedBrokerProtocolVersion\n+                );\n+                Intent interactiveRequestIntent = new Intent();\n+                interactiveRequestIntent.putExtras(requestBundle);\n+                interactiveRequestIntent.putExtras(resultBundle);\n+                interactiveRequestIntent.setPackage(resultBundle.getString(BROKER_PACKAGE_NAME));\n+                interactiveRequestIntent.setClassName(\n+                        resultBundle.getString(BROKER_PACKAGE_NAME, \"\"),\n+                        resultBundle.getString(BROKER_ACTIVITY_NAME, \"\")\n+                );\n+                interactiveRequestIntent.putExtra(\n+                        AuthenticationConstants.Broker.NEGOTIATED_BP_VERSION_KEY,\n+                        negotiatedBrokerProtocolVersion\n+                );\n+                return interactiveRequestIntent;\n+            }\n+        });\n+    }\n+\n+    @Override\n+    AcquireTokenResult acquireTokenSilent(@NonNull final SilentTokenCommandParameters parameters,\n+                                          @Nullable final String negotiatedBrokerProtocolVersion)\n+            throws BaseException {\n+        final String methodName = \"acquireTokenSilentWithContentProvider\";\n+\n+        return performContentProviderOperation(\n+                parameters,\n+                new ContentProviderOperation<SilentTokenCommandParameters, AcquireTokenResult>() {\n+                    @Nullable\n+                    @Override\n+                    public String getRequestString(SilentTokenCommandParameters parameters) {\n+                        final BrokerRequest brokerRequest = mRequestAdapter.\n+                                brokerRequestFromSilentOperationParameters(parameters);\n+                        return new Gson().toJson(brokerRequest);\n+                    }\n+\n+                    @Nullable\n+                    @Override\n+                    public String[] getOptions() {\n+                        return new String[]{negotiatedBrokerProtocolVersion};\n+                    }\n+\n+                    @NonNull\n+                    @Override\n+                    public String getMethodName() {\n+                        return methodName;\n+                    }\n+\n+                    @NonNull\n+                    @Override\n+                    public String getUriPath() {\n+                        return ACQUIRE_TOKEN_SILENT_PATH;\n+                    }\n+\n+                    @NonNull\n+                    @Override\n+                    public AcquireTokenResult getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                        return mResultAdapter.getAcquireTokenResultFromResultBundle(resultBundle);\n+                    }\n+                });\n+    }\n+\n+    @Override\n+    List<ICacheRecord> getBrokerAccounts(@NonNull final CommandParameters parameters,\n+                                         @Nullable final String negotiatedBrokerProtocolVersion) throws BaseException {\n+        final String methodName = \"getBrokerAccountsWithContentProvider\";\n+        return performContentProviderOperation(\n+                parameters,\n+                new ContentProviderOperation<CommandParameters, List<ICacheRecord>>() {\n+            @Nullable\n+            @Override\n+            public String getRequestString(CommandParameters parameters) {\n+                return mRequestAdapter.getRequestStringForGetAccounts(parameters);\n+            }\n+\n+            @Nullable\n+            @Override\n+            public String[] getOptions() {\n+                return new String[]{negotiatedBrokerProtocolVersion};\n+            }\n+\n+            @NonNull\n+            @Override\n+            public String getMethodName() {\n+                return methodName;\n+            }\n+\n+            @NonNull\n+            @Override\n+            public String getUriPath() {\n+                return GET_ACCOUNTS_PATH;\n+            }\n+\n+            @NonNull\n+            @Override\n+            public List<ICacheRecord> getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                return mResultAdapter.getAccountsFromResultBundle(resultBundle);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    void removeBrokerAccount(@NonNull final RemoveAccountCommandParameters parameters,\n+                             @Nullable final String negotiatedBrokerProtocolVersion) throws BaseException {\n+\n+        final String methodName = \"removeBrokerAccountWithContentProvider\";\n+\n+        performContentProviderOperation(\n+                parameters,\n+                new ContentProviderOperation<RemoveAccountCommandParameters, Void>() {\n+            @Nullable\n+            @Override\n+            public String getRequestString(RemoveAccountCommandParameters parameters) {\n+                return mRequestAdapter.getRequestStringForRemoveAccount(parameters);\n+            }\n+\n+            @Nullable\n+            @Override\n+            public String[] getOptions() {\n+                return new String[]{negotiatedBrokerProtocolVersion};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "403d258cd4f89909e852c175a72174972a9a6b9f"}, "originalPosition": 339}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9020493baf4c990129af7f4d303efd5a03c85c22", "author": {"user": null}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/9020493baf4c990129af7f4d303efd5a03c85c22", "committedDate": "2020-05-29T21:07:13Z", "message": "Marshalling changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMDc3Nzk2", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053#pullrequestreview-422077796", "createdAt": "2020-06-01T18:24:45Z", "commit": {"oid": "9020493baf4c990129af7f4d303efd5a03c85c22"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODoyNDo0NVrOGdVOSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODoyNDo0NVrOGdVOSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwOTYwOQ==", "bodyText": "Should we try authService first for a couple of release? Once it's tried and tested (i.e. with Teams), then we can switch it to the first one in the list.", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053#discussion_r433409609", "createdAt": "2020-06-01T18:24:45Z", "author": {"login": "rpdome"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerMsalController.java", "diffHunk": "@@ -246,6 +246,7 @@ public AcquireTokenResult acquireToken(InteractiveTokenCommandParameters paramet\n     // The order matters.\n     private List<BrokerBaseStrategy> getStrategies() {\n         final List<BrokerBaseStrategy> strategies = new ArrayList<>();\n+        strategies.add(new BrokerContentProviderStrategy());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9020493baf4c990129af7f4d303efd5a03c85c22"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMDg5OTAz", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053#pullrequestreview-422089903", "createdAt": "2020-06-01T18:42:42Z", "commit": {"oid": "9020493baf4c990129af7f4d303efd5a03c85c22"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODo0Mjo0MlrOGdVzZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODo0Mjo0MlrOGdVzZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQxOTEwOA==", "bodyText": "Is this doing the same thing as completeInteractiveRequestIntent()?\n(Other strategies are using that, let's refactor in such a way that they're doing the same thing - either using that function or keep using this).", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053#discussion_r433419108", "createdAt": "2020-06-01T18:42:42Z", "author": {"login": "rpdome"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerContentProviderStrategy.java", "diffHunk": "@@ -0,0 +1,446 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.internal.controllers;\n+\n+import android.content.Context;\n+import android.content.Intent;\n+import android.database.Cursor;\n+import android.net.Uri;\n+import android.os.Bundle;\n+import android.util.Base64;\n+\n+import com.microsoft.identity.client.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.internal.broker.BrokerValidator;\n+import com.microsoft.identity.common.internal.cache.ICacheRecord;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.InteractiveTokenCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.RemoveAccountCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.SilentTokenCommandParameters;\n+import com.microsoft.identity.common.internal.logging.Logger;\n+import com.microsoft.identity.common.internal.result.AcquireTokenResult;\n+import com.microsoft.identity.common.internal.telemetry.Telemetry;\n+import com.microsoft.identity.common.internal.telemetry.TelemetryEventStrings;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerEndEvent;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerStartEvent;\n+import com.microsoft.identity.common.internal.util.ParcelableUtil;\n+\n+import java.util.List;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_SILENT_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.AUTHORITY;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.CONTENT_SCHEME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_CURRENT_ACCOUNT_SHARED_DEVICE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_DEVICE_MODE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.HELLO_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.REMOVE_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.SIGN_OUT_FROM_SHARED_DEVICE_PATH;\n+\n+public class BrokerContentProviderStrategy extends BrokerBaseStrategy {\n+\n+    private static final String TAG = BrokerContentProviderStrategy.class.getName();\n+\n+    public interface ContentProviderOperation<T extends CommandParameters, U> {\n+\n+        /**\n+         * Constructs and returns a data string for the request to the broker from the CommandParameters.\n+         */\n+        @Nullable\n+        Bundle getRequestBundle(T parameters);\n+\n+        /**\n+         * Name of task for logging and telemetry purposes\n+         */\n+        @NonNull\n+        String getMethodName();\n+\n+        /**\n+         * Uri path for specific broker operation\n+         */\n+        @NonNull\n+        String getUriPath();\n+\n+        /**\n+         * Constructs and returns the result from the request bundle returned by the broker.\n+         */\n+        @NonNull\n+        U getResultFromBundle(Bundle resultBundle) throws BaseException;\n+    }\n+\n+    private <T extends CommandParameters, U> U performContentProviderOperation(\n+            @NonNull final T parameters,\n+            @NonNull final ContentProviderOperation<T, U> contentProviderOperation) throws BaseException {\n+\n+        final String methodName = contentProviderOperation.getMethodName();\n+\n+        Telemetry.emit(\n+                new BrokerStartEvent()\n+                        .putAction(methodName)\n+                        .putStrategy(TelemetryEventStrings.Value.CONTENT_PROVIDER)\n+        );\n+        final Uri uri = getContentProviderURI(\n+                parameters.getAndroidApplicationContext(),\n+                contentProviderOperation.getUriPath()\n+        );\n+        Logger.info(TAG + methodName, \"Request to BrokerContentProvider for uri path \" +\n+                contentProviderOperation.getUriPath()\n+        );\n+\n+        String marshalledRequestString = null;\n+\n+        final Bundle requestBundle = contentProviderOperation.getRequestBundle(parameters);\n+        if (requestBundle != null) {\n+            byte[] marshalledBytes = ParcelableUtil.marshall(requestBundle);\n+            marshalledRequestString = Base64.encodeToString(marshalledBytes, 0);\n+        }\n+\n+        final Cursor cursor = parameters.getAndroidApplicationContext().getContentResolver().query(\n+                uri,\n+                null,\n+                marshalledRequestString,\n+                null,\n+                null\n+        );\n+\n+        if (cursor != null) {\n+            final U result = contentProviderOperation.getResultFromBundle(cursor.getExtras());\n+            cursor.close();\n+            Telemetry.emit(\n+                    new BrokerEndEvent()\n+                            .putAction(methodName)\n+                            .isSuccessful(true)\n+            );\n+            Logger.info(TAG + methodName, \"Received successful result from broker\");\n+            return result;\n+        } else {\n+            final String message = \"Failed to get result from Broker Content Provider, cursor is null\";\n+            Logger.error(TAG + methodName, message, null);\n+            Telemetry.emit(\n+                    new BrokerEndEvent()\n+                            .putAction(methodName)\n+                            .isSuccessful(false)\n+                            .putErrorDescription(message)\n+            );\n+            throw new BrokerCommunicationException(message, null);\n+        }\n+    }\n+\n+    @Override\n+    String hello(@NonNull CommandParameters parameters) throws BaseException {\n+        final String methodName = \"helloWithContentProvider\";\n+\n+        return performContentProviderOperation(parameters, new ContentProviderOperation<CommandParameters, String>() {\n+            @Override\n+            public Bundle getRequestBundle(CommandParameters parameters) {\n+                return mRequestAdapter.getRequestBundleForHello(parameters);\n+            }\n+\n+            @Override\n+            public String getMethodName() {\n+                return methodName;\n+            }\n+\n+            @Override\n+            public String getUriPath() {\n+                return HELLO_PATH;\n+            }\n+\n+            @Override\n+            public String getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                return mResultAdapter.verifyHelloFromResultBundle(resultBundle);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    Intent getBrokerAuthorizationIntent(@NonNull final InteractiveTokenCommandParameters parameters,\n+                                        @Nullable final String negotiatedBrokerProtocolVersion)\n+            throws BaseException {\n+        final String methodName = \"getBrokerAuthorizationIntentForContentProvider\";\n+\n+        return performContentProviderOperation(\n+                parameters,\n+                new ContentProviderOperation<InteractiveTokenCommandParameters, Intent>() {\n+\n+                    @Override\n+                    public Bundle getRequestBundle(InteractiveTokenCommandParameters parameters) {\n+                        return null; // broker returns us an intent based on calling uid , no request string needed\n+                    }\n+\n+                    @Override\n+                    public String getMethodName() {\n+                        return methodName;\n+                    }\n+\n+                    @Override\n+                    public String getUriPath() {\n+                        return ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+                    }\n+\n+                    @Override\n+                    public Intent getResultFromBundle(Bundle resultBundle) throws BaseException {\n+                        return mRequestAdapter.getRequestIntentForAcquireTokenInteractive(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9020493baf4c990129af7f4d303efd5a03c85c22"}, "originalPosition": 207}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMTEwOTE1", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053#pullrequestreview-422110915", "createdAt": "2020-06-01T19:14:55Z", "commit": {"oid": "9020493baf4c990129af7f4d303efd5a03c85c22"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5ce6912bfb594dc24a8fbed1ae10fa88f4021f8", "author": {"user": null}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/d5ce6912bfb594dc24a8fbed1ae10fa88f4021f8", "committedDate": "2020-06-03T01:06:21Z", "message": "More changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "577ba0f3692f9c6fca2c8f7281cb7709dde5f273", "author": {"user": null}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/577ba0f3692f9c6fca2c8f7281cb7709dde5f273", "committedDate": "2020-06-03T01:15:42Z", "message": "Merge branch 'dev' into kreedula/content-provider"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f10075dadc2af9430a7cca5048e48588fdc15ca", "author": {"user": null}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/1f10075dadc2af9430a7cca5048e48588fdc15ca", "committedDate": "2020-06-03T01:31:32Z", "message": "Added a check to verify if content provider is available"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f55bad1e2536c855e5f14e1aec5c4a6238374d22", "author": {"user": null}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/f55bad1e2536c855e5f14e1aec5c4a6238374d22", "committedDate": "2020-06-03T19:28:28Z", "message": "Rebase and added logic to check if content provider is available"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6485338d8f55ab8e390b6fe982d1027b1f0bad58", "author": {"user": null}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/6485338d8f55ab8e390b6fe982d1027b1f0bad58", "committedDate": "2020-06-03T19:29:05Z", "message": "Submodule update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab20b754979312bb1b83bde1b2bf6ca92481dc3b", "author": {"user": null}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/ab20b754979312bb1b83bde1b2bf6ca92481dc3b", "committedDate": "2020-06-03T21:52:20Z", "message": "Submodule updaye"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "971d018289bf08a1ed0aacb2dda511b52ecb0872", "author": {"user": null}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/971d018289bf08a1ed0aacb2dda511b52ecb0872", "committedDate": "2020-06-03T22:30:37Z", "message": "Merge branch 'dev' into kreedula/content-provider"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MDMyNzg3", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053#pullrequestreview-424032787", "createdAt": "2020-06-04T01:00:59Z", "commit": {"oid": "971d018289bf08a1ed0aacb2dda511b52ecb0872"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMTowMDo1OVrOGeyVuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMTowMDo1OVrOGeyVuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkzNTIyNA==", "bodyText": "Are we no longer sending this?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053#discussion_r434935224", "createdAt": "2020-06-04T01:00:59Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerAccountManagerStrategy.java", "diffHunk": "@@ -212,11 +212,9 @@ public Bundle getRequestBundle(SilentTokenCommandParameters parameters) {\n                                 parameters,\n                                 negotiatedBrokerProtocolVersion\n                         );\n-                        requestBundle.putString(AuthenticationConstants.Broker.BROKER_ACCOUNT_MANAGER_OPERATION_KEY,\n-                                AuthenticationConstants.BrokerAccountManagerOperation.ACQUIRE_TOKEN_SILENT);\n                         requestBundle.putString(\n-                                AuthenticationConstants.Broker.NEGOTIATED_BP_VERSION_KEY,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "971d018289bf08a1ed0aacb2dda511b52ecb0872"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1dde4bf1271b4ac4456bc8dc87aa1b3b8bc53ca", "author": {"user": {"login": "kreedula", "name": "Krishna Eedula"}}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/d1dde4bf1271b4ac4456bc8dc87aa1b3b8bc53ca", "committedDate": "2020-06-04T01:29:56Z", "message": "Merge branch 'dev' into kreedula/content-provider"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MDQ1NDE4", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053#pullrequestreview-424045418", "createdAt": "2020-06-04T01:42:16Z", "commit": {"oid": "d1dde4bf1271b4ac4456bc8dc87aa1b3b8bc53ca"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMTo0MjoxNlrOGey92g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMTo0MjoxNlrOGey92g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk0NTQ5OA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053#discussion_r434945498", "createdAt": "2020-06-04T01:42:16Z", "author": {"login": "shahzaibj"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerMsalController.java", "diffHunk": "@@ -254,14 +256,26 @@ public AcquireTokenResult acquireToken(InteractiveTokenCommandParameters paramet\n     // The order matters.\n     private List<BrokerBaseStrategy> getStrategies() {\n         final List<BrokerBaseStrategy> strategies = new ArrayList<>();\n+        final StringBuilder sb = new StringBuilder();\n+        sb.append(\"Broker Strategies added : \");\n \n-        if (isMicrosoftAuthServiceSupported(mApplicationContext)) {\n+        if(isBrokerContentProviderAvailable()){\n+            sb.append(\"ContentProviderStrategy, \");\n+            strategies.add(new BrokerContentProviderStrategy());\n+        }\n+\n+        if (isMicrosoftAuthServiceSupported()) {\n+            sb.append(\"AuthServiceStrategy, \");\n             strategies.add(new BrokerAuthServiceStrategy());\n         }\n+\n         if (AccountManagerUtil.canUseAccountManagerOperation(mApplicationContext)){\n+            sb.append(\"AccountManagerStrategy.\");\n             strategies.add(new BrokerAccountManagerStrategy());\n         }\n \n+        Logger.info(TAG, sb.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1dde4bf1271b4ac4456bc8dc87aa1b3b8bc53ca"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MDQ1NjU0", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053#pullrequestreview-424045654", "createdAt": "2020-06-04T01:42:56Z", "commit": {"oid": "d1dde4bf1271b4ac4456bc8dc87aa1b3b8bc53ca"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NTY5ODc5", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053#pullrequestreview-424569879", "createdAt": "2020-06-04T15:29:43Z", "commit": {"oid": "d1dde4bf1271b4ac4456bc8dc87aa1b3b8bc53ca"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToyOTo0M1rOGfLkbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToyOTo0M1rOGfLkbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0ODU5MA==", "bodyText": "Class description?", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053#discussion_r435348590", "createdAt": "2020-06-04T15:29:43Z", "author": {"login": "iambmelt"}, "path": "msal/src/main/java/com/microsoft/identity/client/internal/controllers/BrokerContentProviderStrategy.java", "diffHunk": "@@ -0,0 +1,446 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.client.internal.controllers;\n+\n+import android.content.Context;\n+import android.content.Intent;\n+import android.database.Cursor;\n+import android.net.Uri;\n+import android.os.Bundle;\n+import android.util.Base64;\n+\n+import com.microsoft.identity.client.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.internal.broker.BrokerValidator;\n+import com.microsoft.identity.common.internal.cache.ICacheRecord;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.InteractiveTokenCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.RemoveAccountCommandParameters;\n+import com.microsoft.identity.common.internal.commands.parameters.SilentTokenCommandParameters;\n+import com.microsoft.identity.common.internal.logging.Logger;\n+import com.microsoft.identity.common.internal.result.AcquireTokenResult;\n+import com.microsoft.identity.common.internal.telemetry.Telemetry;\n+import com.microsoft.identity.common.internal.telemetry.TelemetryEventStrings;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerEndEvent;\n+import com.microsoft.identity.common.internal.telemetry.events.BrokerStartEvent;\n+import com.microsoft.identity.common.internal.util.ParcelableUtil;\n+\n+import java.util.List;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_INTERACTIVE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.ACQUIRE_TOKEN_SILENT_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.AUTHORITY;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.CONTENT_SCHEME;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_CURRENT_ACCOUNT_SHARED_DEVICE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.GET_DEVICE_MODE_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.HELLO_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.REMOVE_ACCOUNTS_PATH;\n+import static com.microsoft.identity.common.adal.internal.AuthenticationConstants.BrokerContentProvider.SIGN_OUT_FROM_SHARED_DEVICE_PATH;\n+\n+public class BrokerContentProviderStrategy extends BrokerBaseStrategy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1dde4bf1271b4ac4456bc8dc87aa1b3b8bc53ca"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NTcxMzY3", "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/pull/1053#pullrequestreview-424571367", "createdAt": "2020-06-04T15:30:36Z", "commit": {"oid": "d1dde4bf1271b4ac4456bc8dc87aa1b3b8bc53ca"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c6e346564c99cb042440a05eb6c6da598086d06", "author": {"user": null}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/7c6e346564c99cb042440a05eb6c6da598086d06", "committedDate": "2020-06-04T17:10:50Z", "message": "Added javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f64660d72ce556c7aea9f7e4c6896aeea9f41b96", "author": {"user": null}, "url": "https://github.com/AzureAD/microsoft-authentication-library-for-android/commit/f64660d72ce556c7aea9f7e4c6896aeea9f41b96", "committedDate": "2020-06-04T17:11:36Z", "message": "Merge branch 'kreedula/content-provider' of https://github.com/AzureAD/microsoft-authentication-library-for-android into kreedula/content-provider"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1342, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}