{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyOTA2NDU3", "number": 6604, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxODo0OTozMVrODYRrHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMTozMDoyN1rODYUYTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NzgxOTgxOnYy", "diffSide": "RIGHT", "path": "examples/example-hostname/src/main/java/io/grpc/examples/hostname/HostnameServer.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxODo0OTozMVrOFeCtHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMDoyMjoxM1rOFeFSBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA0NTkxNg==", "bodyText": "Make port and hostname flags?\nI think flags are easier to use, and it can use default port but override the hostname.", "url": "https://github.com/grpc/grpc-java/pull/6604#discussion_r367045916", "createdAt": "2020-01-15T18:49:31Z", "author": {"login": "menghanl"}, "path": "examples/example-hostname/src/main/java/io/grpc/examples/hostname/HostnameServer.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.hostname;\n+\n+import io.grpc.Server;\n+import io.grpc.ServerBuilder;\n+import io.grpc.health.v1.HealthCheckResponse.ServingStatus;\n+import io.grpc.protobuf.services.ProtoReflectionService;\n+import io.grpc.services.HealthStatusManager;\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A server that hosts HostnameGreeter, plus infrastructure services like health and reflection.\n+ *\n+ * <p>This server is intended to be a general purpose \"dummy\" server.\n+ */\n+public final class HostnameServer {\n+  public static void main(String[] args) throws IOException, InterruptedException {\n+    int port = 50051;\n+    String hostname = null;\n+    if (args.length >= 1) {\n+      try {\n+        port = Integer.parseInt(args[0]);\n+      } catch (NumberFormatException ex) {\n+        System.err.println(\"Usage: [port [hostname]]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d71e6e4d9b3a155c4487b2292bf2000578bfacac"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA0ODI5Mw==", "bodyText": "We don't use flags in java OSS.", "url": "https://github.com/grpc/grpc-java/pull/6604#discussion_r367048293", "createdAt": "2020-01-15T18:54:47Z", "author": {"login": "dapengzhang0"}, "path": "examples/example-hostname/src/main/java/io/grpc/examples/hostname/HostnameServer.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.hostname;\n+\n+import io.grpc.Server;\n+import io.grpc.ServerBuilder;\n+import io.grpc.health.v1.HealthCheckResponse.ServingStatus;\n+import io.grpc.protobuf.services.ProtoReflectionService;\n+import io.grpc.services.HealthStatusManager;\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A server that hosts HostnameGreeter, plus infrastructure services like health and reflection.\n+ *\n+ * <p>This server is intended to be a general purpose \"dummy\" server.\n+ */\n+public final class HostnameServer {\n+  public static void main(String[] args) throws IOException, InterruptedException {\n+    int port = 50051;\n+    String hostname = null;\n+    if (args.length >= 1) {\n+      try {\n+        port = Integer.parseInt(args[0]);\n+      } catch (NumberFormatException ex) {\n+        System.err.println(\"Usage: [port [hostname]]\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA0NTkxNg=="}, "originalCommit": {"oid": "d71e6e4d9b3a155c4487b2292bf2000578bfacac"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA1ODIzNQ==", "bodyText": "OK...\nDo we want to also not use flags in the other languages, to be consistent?", "url": "https://github.com/grpc/grpc-java/pull/6604#discussion_r367058235", "createdAt": "2020-01-15T19:16:20Z", "author": {"login": "menghanl"}, "path": "examples/example-hostname/src/main/java/io/grpc/examples/hostname/HostnameServer.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.hostname;\n+\n+import io.grpc.Server;\n+import io.grpc.ServerBuilder;\n+import io.grpc.health.v1.HealthCheckResponse.ServingStatus;\n+import io.grpc.protobuf.services.ProtoReflectionService;\n+import io.grpc.services.HealthStatusManager;\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A server that hosts HostnameGreeter, plus infrastructure services like health and reflection.\n+ *\n+ * <p>This server is intended to be a general purpose \"dummy\" server.\n+ */\n+public final class HostnameServer {\n+  public static void main(String[] args) throws IOException, InterruptedException {\n+    int port = 50051;\n+    String hostname = null;\n+    if (args.length >= 1) {\n+      try {\n+        port = Integer.parseInt(args[0]);\n+      } catch (NumberFormatException ex) {\n+        System.err.println(\"Usage: [port [hostname]]\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA0NTkxNg=="}, "originalCommit": {"oid": "d71e6e4d9b3a155c4487b2292bf2000578bfacac"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4ODEzNA==", "bodyText": "The problem is that Java lacks basic things like a flag parsing library. So I'd get to implement the parser. For an example, that seemed a bit much as it makes the example harder to understand. I guess there is also the issue that different languages handle flags differently; I don't know if we want to keep the command-line arguments the same cross-language. I don't see it being a big deal to repeat the port if you want to specify the hostname.", "url": "https://github.com/grpc/grpc-java/pull/6604#discussion_r367088134", "createdAt": "2020-01-15T20:22:13Z", "author": {"login": "ejona86"}, "path": "examples/example-hostname/src/main/java/io/grpc/examples/hostname/HostnameServer.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.hostname;\n+\n+import io.grpc.Server;\n+import io.grpc.ServerBuilder;\n+import io.grpc.health.v1.HealthCheckResponse.ServingStatus;\n+import io.grpc.protobuf.services.ProtoReflectionService;\n+import io.grpc.services.HealthStatusManager;\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A server that hosts HostnameGreeter, plus infrastructure services like health and reflection.\n+ *\n+ * <p>This server is intended to be a general purpose \"dummy\" server.\n+ */\n+public final class HostnameServer {\n+  public static void main(String[] args) throws IOException, InterruptedException {\n+    int port = 50051;\n+    String hostname = null;\n+    if (args.length >= 1) {\n+      try {\n+        port = Integer.parseInt(args[0]);\n+      } catch (NumberFormatException ex) {\n+        System.err.println(\"Usage: [port [hostname]]\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA0NTkxNg=="}, "originalCommit": {"oid": "d71e6e4d9b3a155c4487b2292bf2000578bfacac"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODA2NzczOnYy", "diffSide": "RIGHT", "path": "examples/example-hostname/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMDoxNzozMVrOFeFKMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMDoxNzozMVrOFeFKMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4NjEyOA==", "bodyText": "As your comment says, should this be '1.28.0-SNAPSHOT' now?", "url": "https://github.com/grpc/grpc-java/pull/6604#discussion_r367086128", "createdAt": "2020-01-15T20:17:31Z", "author": {"login": "voidzcy"}, "path": "examples/example-hostname/build.gradle", "diffHunk": "@@ -0,0 +1,54 @@\n+plugins {\n+    id 'application' // Provide convenience executables for trying out the examples.\n+    id 'java'\n+\n+    id \"com.google.protobuf\" version \"0.8.10\"\n+}\n+\n+repositories {\n+    maven { // The google mirror is less flaky than mavenCentral()\n+        url \"https://maven-central.storage-download.googleapis.com/repos/central/data/\" }\n+    mavenCentral()\n+    mavenLocal()\n+}\n+\n+sourceCompatibility = 1.7\n+targetCompatibility = 1.7\n+\n+// IMPORTANT: You probably want the non-SNAPSHOT version of gRPC. Make sure you\n+// are looking at a tagged version of the example and not \"master\"!\n+\n+// Feel free to delete the comment at the next line. It is just for safely\n+// updating the version in our release process.\n+def grpcVersion = '1.27.0-SNAPSHOT' // CURRENT_GRPC_VERSION", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d71e6e4d9b3a155c4487b2292bf2000578bfacac"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODA3ODQ1OnYy", "diffSide": "RIGHT", "path": "examples/example-hostname/src/main/java/io/grpc/examples/hostname/HostnameGreeter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMDoyMTo0MFrOFeFREA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMToyMTozMFrOFeG0zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4Nzg4OA==", "bodyText": "We may want to have some String instead of just a number, to let the client side know that the server is having trouble knowing its hostname.", "url": "https://github.com/grpc/grpc-java/pull/6604#discussion_r367087888", "createdAt": "2020-01-15T20:21:40Z", "author": {"login": "voidzcy"}, "path": "examples/example-hostname/src/main/java/io/grpc/examples/hostname/HostnameGreeter.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.hostname;\n+\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.stub.StreamObserver;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.util.Random;\n+\n+/** Greeter implementation which replies identifying itself with its hostname. */\n+public final class HostnameGreeter extends GreeterGrpc.GreeterImplBase {\n+  private final String serverName;\n+\n+  public HostnameGreeter(String serverName) {\n+    if (serverName == null) {\n+      serverName = determineHostname();\n+    }\n+    this.serverName = serverName;\n+  }\n+\n+  @Override\n+  public void sayHello(HelloRequest req, StreamObserver<HelloReply> responseObserver) {\n+    HelloReply reply = HelloReply.newBuilder()\n+        .setMessage(\"Hello \" + req.getName() + \", from \" + serverName)\n+        .build();\n+    responseObserver.onNext(reply);\n+    responseObserver.onCompleted();\n+  }\n+\n+  private static String determineHostname() {\n+    try {\n+      return InetAddress.getLocalHost().getHostName();\n+    } catch (IOException ex) {\n+      ex.printStackTrace();\n+    }\n+    // Strange. Well, let's make an identifier for ourselves.\n+    return \"\" + new Random().nextInt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d71e6e4d9b3a155c4487b2292bf2000578bfacac"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzExMzQyMA==", "bodyText": "I've prefixed \"generated-\" to the string now. That doesn't seem great to me, but it is something. If there's something more clear, then I can change it to that.", "url": "https://github.com/grpc/grpc-java/pull/6604#discussion_r367113420", "createdAt": "2020-01-15T21:21:30Z", "author": {"login": "ejona86"}, "path": "examples/example-hostname/src/main/java/io/grpc/examples/hostname/HostnameGreeter.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.hostname;\n+\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.stub.StreamObserver;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.util.Random;\n+\n+/** Greeter implementation which replies identifying itself with its hostname. */\n+public final class HostnameGreeter extends GreeterGrpc.GreeterImplBase {\n+  private final String serverName;\n+\n+  public HostnameGreeter(String serverName) {\n+    if (serverName == null) {\n+      serverName = determineHostname();\n+    }\n+    this.serverName = serverName;\n+  }\n+\n+  @Override\n+  public void sayHello(HelloRequest req, StreamObserver<HelloReply> responseObserver) {\n+    HelloReply reply = HelloReply.newBuilder()\n+        .setMessage(\"Hello \" + req.getName() + \", from \" + serverName)\n+        .build();\n+    responseObserver.onNext(reply);\n+    responseObserver.onCompleted();\n+  }\n+\n+  private static String determineHostname() {\n+    try {\n+      return InetAddress.getLocalHost().getHostName();\n+    } catch (IOException ex) {\n+      ex.printStackTrace();\n+    }\n+    // Strange. Well, let's make an identifier for ourselves.\n+    return \"\" + new Random().nextInt();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4Nzg4OA=="}, "originalCommit": {"oid": "d71e6e4d9b3a155c4487b2292bf2000578bfacac"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODA4OTY4OnYy", "diffSide": "RIGHT", "path": "examples/example-hostname/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMDoyNjowMFrOFeFYBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMTowNTo1M1rOFeGaIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4OTY2OQ==", "bodyText": "s/require/requires/", "url": "https://github.com/grpc/grpc-java/pull/6604#discussion_r367089669", "createdAt": "2020-01-15T20:26:00Z", "author": {"login": "ericgribkoff"}, "path": "examples/example-hostname/README.md", "diffHunk": "@@ -0,0 +1,60 @@\n+gRPC Hostname Example\n+=====================\n+\n+The hostname example is a Hello World server whose response includes its\n+hostname. It also supports health and reflection services. This makes it a good\n+server to test infrastructure, like load balancing.\n+\n+The example require grpc-java to already be built. You are strongly encouraged", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d71e6e4d9b3a155c4487b2292bf2000578bfacac"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEwNjU5NA==", "bodyText": "Nobody noticed this for any other example!  (Only TLS example has the same typo)", "url": "https://github.com/grpc/grpc-java/pull/6604#discussion_r367106594", "createdAt": "2020-01-15T21:05:53Z", "author": {"login": "dapengzhang0"}, "path": "examples/example-hostname/README.md", "diffHunk": "@@ -0,0 +1,60 @@\n+gRPC Hostname Example\n+=====================\n+\n+The hostname example is a Hello World server whose response includes its\n+hostname. It also supports health and reflection services. This makes it a good\n+server to test infrastructure, like load balancing.\n+\n+The example require grpc-java to already be built. You are strongly encouraged", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4OTY2OQ=="}, "originalCommit": {"oid": "d71e6e4d9b3a155c4487b2292bf2000578bfacac"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODEwMTQ2OnYy", "diffSide": "RIGHT", "path": "examples/example-hostname/src/main/java/io/grpc/examples/hostname/HostnameServer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMDozMDoxNVrOFeFfOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMToxODowNlrOFeGulw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA5MTUxNA==", "bodyText": "shutdownNow() again? Seems not necessary. Anyway, not a big issue.", "url": "https://github.com/grpc/grpc-java/pull/6604#discussion_r367091514", "createdAt": "2020-01-15T20:30:15Z", "author": {"login": "voidzcy"}, "path": "examples/example-hostname/src/main/java/io/grpc/examples/hostname/HostnameServer.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.hostname;\n+\n+import io.grpc.Server;\n+import io.grpc.ServerBuilder;\n+import io.grpc.health.v1.HealthCheckResponse.ServingStatus;\n+import io.grpc.protobuf.services.ProtoReflectionService;\n+import io.grpc.services.HealthStatusManager;\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A server that hosts HostnameGreeter, plus infrastructure services like health and reflection.\n+ *\n+ * <p>This server is intended to be a general purpose \"dummy\" server.\n+ */\n+public final class HostnameServer {\n+  public static void main(String[] args) throws IOException, InterruptedException {\n+    int port = 50051;\n+    String hostname = null;\n+    if (args.length >= 1) {\n+      try {\n+        port = Integer.parseInt(args[0]);\n+      } catch (NumberFormatException ex) {\n+        System.err.println(\"Usage: [port [hostname]]\");\n+        System.exit(1);\n+      }\n+    }\n+    if (args.length >= 2) {\n+      hostname = args[1];\n+    }\n+    HealthStatusManager health = new HealthStatusManager();\n+    final Server server = ServerBuilder.forPort(port)\n+        .addService(new HostnameGreeter(hostname))\n+        .addService(ProtoReflectionService.newInstance())\n+        .addService(health.getHealthService())\n+        .build()\n+        .start();\n+    System.out.println(\"Listening on port \" + port);\n+    Runtime.getRuntime().addShutdownHook(new Thread() {\n+      @Override\n+      public void run() {\n+        // Start graceful shutdown\n+        server.shutdown();\n+        try {\n+          // Wait for RPCs to complete processing\n+          if (!server.awaitTermination(30, TimeUnit.SECONDS)) {\n+            // That was plenty of time. Let's cancel the remaining RPCs\n+            server.shutdownNow();\n+            // shutdownNow isn't instantaneous, so give a bit of time to clean resources up\n+            // gracefully. Normally this will be well under a second.\n+            server.awaitTermination(5, TimeUnit.SECONDS);\n+          }\n+        } catch (InterruptedException ex) {\n+          server.shutdownNow();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d71e6e4d9b3a155c4487b2292bf2000578bfacac"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzExMTgzMQ==", "bodyText": "This shutdownNow is really for the first awaitTermination(), which if interrupted would not have a shutdownNow(). I found it awkward as well, but didn't see a clear way to make it more natural.", "url": "https://github.com/grpc/grpc-java/pull/6604#discussion_r367111831", "createdAt": "2020-01-15T21:18:06Z", "author": {"login": "ejona86"}, "path": "examples/example-hostname/src/main/java/io/grpc/examples/hostname/HostnameServer.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.hostname;\n+\n+import io.grpc.Server;\n+import io.grpc.ServerBuilder;\n+import io.grpc.health.v1.HealthCheckResponse.ServingStatus;\n+import io.grpc.protobuf.services.ProtoReflectionService;\n+import io.grpc.services.HealthStatusManager;\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A server that hosts HostnameGreeter, plus infrastructure services like health and reflection.\n+ *\n+ * <p>This server is intended to be a general purpose \"dummy\" server.\n+ */\n+public final class HostnameServer {\n+  public static void main(String[] args) throws IOException, InterruptedException {\n+    int port = 50051;\n+    String hostname = null;\n+    if (args.length >= 1) {\n+      try {\n+        port = Integer.parseInt(args[0]);\n+      } catch (NumberFormatException ex) {\n+        System.err.println(\"Usage: [port [hostname]]\");\n+        System.exit(1);\n+      }\n+    }\n+    if (args.length >= 2) {\n+      hostname = args[1];\n+    }\n+    HealthStatusManager health = new HealthStatusManager();\n+    final Server server = ServerBuilder.forPort(port)\n+        .addService(new HostnameGreeter(hostname))\n+        .addService(ProtoReflectionService.newInstance())\n+        .addService(health.getHealthService())\n+        .build()\n+        .start();\n+    System.out.println(\"Listening on port \" + port);\n+    Runtime.getRuntime().addShutdownHook(new Thread() {\n+      @Override\n+      public void run() {\n+        // Start graceful shutdown\n+        server.shutdown();\n+        try {\n+          // Wait for RPCs to complete processing\n+          if (!server.awaitTermination(30, TimeUnit.SECONDS)) {\n+            // That was plenty of time. Let's cancel the remaining RPCs\n+            server.shutdownNow();\n+            // shutdownNow isn't instantaneous, so give a bit of time to clean resources up\n+            // gracefully. Normally this will be well under a second.\n+            server.awaitTermination(5, TimeUnit.SECONDS);\n+          }\n+        } catch (InterruptedException ex) {\n+          server.shutdownNow();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA5MTUxNA=="}, "originalCommit": {"oid": "d71e6e4d9b3a155c4487b2292bf2000578bfacac"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODI1MTk0OnYy", "diffSide": "RIGHT", "path": "examples/example-hostname/src/main/java/io/grpc/examples/hostname/HostnameGreeter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMToyNjoxMVrOFeG8tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMToyNjoxMVrOFeG8tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzExNTQ0NA==", "bodyText": "@SuppressWarnings(\"CatchAndPrintStackTrace\")  or use a logger.", "url": "https://github.com/grpc/grpc-java/pull/6604#discussion_r367115444", "createdAt": "2020-01-15T21:26:11Z", "author": {"login": "dapengzhang0"}, "path": "examples/example-hostname/src/main/java/io/grpc/examples/hostname/HostnameGreeter.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.hostname;\n+\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.stub.StreamObserver;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.util.Random;\n+\n+/** Greeter implementation which replies identifying itself with its hostname. */\n+public final class HostnameGreeter extends GreeterGrpc.GreeterImplBase {\n+  private final String serverName;\n+\n+  public HostnameGreeter(String serverName) {\n+    if (serverName == null) {\n+      serverName = determineHostname();\n+    }\n+    this.serverName = serverName;\n+  }\n+\n+  @Override\n+  public void sayHello(HelloRequest req, StreamObserver<HelloReply> responseObserver) {\n+    HelloReply reply = HelloReply.newBuilder()\n+        .setMessage(\"Hello \" + req.getName() + \", from \" + serverName)\n+        .build();\n+    responseObserver.onNext(reply);\n+    responseObserver.onCompleted();\n+  }\n+\n+  private static String determineHostname() {\n+    try {\n+      return InetAddress.getLocalHost().getHostName();\n+    } catch (IOException ex) {\n+      ex.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483fabc63bb12d7623cedc0635384217b65b64c1"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODI2MzE4OnYy", "diffSide": "RIGHT", "path": "examples/example-hostname/src/main/java/io/grpc/examples/hostname/HostnameServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMTozMDoyOFrOFeHDsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMTozMDoyOFrOFeHDsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzExNzIzMg==", "bodyText": "this.interrupt();\nalthough this may not matter much because the thread just ends.", "url": "https://github.com/grpc/grpc-java/pull/6604#discussion_r367117232", "createdAt": "2020-01-15T21:30:28Z", "author": {"login": "dapengzhang0"}, "path": "examples/example-hostname/src/main/java/io/grpc/examples/hostname/HostnameServer.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.hostname;\n+\n+import io.grpc.Server;\n+import io.grpc.ServerBuilder;\n+import io.grpc.health.v1.HealthCheckResponse.ServingStatus;\n+import io.grpc.protobuf.services.ProtoReflectionService;\n+import io.grpc.services.HealthStatusManager;\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A server that hosts HostnameGreeter, plus infrastructure services like health and reflection.\n+ *\n+ * <p>This server is intended to be a general purpose \"dummy\" server.\n+ */\n+public final class HostnameServer {\n+  public static void main(String[] args) throws IOException, InterruptedException {\n+    int port = 50051;\n+    String hostname = null;\n+    if (args.length >= 1) {\n+      try {\n+        port = Integer.parseInt(args[0]);\n+      } catch (NumberFormatException ex) {\n+        System.err.println(\"Usage: [port [hostname]]\");\n+        System.exit(1);\n+      }\n+    }\n+    if (args.length >= 2) {\n+      hostname = args[1];\n+    }\n+    HealthStatusManager health = new HealthStatusManager();\n+    final Server server = ServerBuilder.forPort(port)\n+        .addService(new HostnameGreeter(hostname))\n+        .addService(ProtoReflectionService.newInstance())\n+        .addService(health.getHealthService())\n+        .build()\n+        .start();\n+    System.out.println(\"Listening on port \" + port);\n+    Runtime.getRuntime().addShutdownHook(new Thread() {\n+      @Override\n+      public void run() {\n+        // Start graceful shutdown\n+        server.shutdown();\n+        try {\n+          // Wait for RPCs to complete processing\n+          if (!server.awaitTermination(30, TimeUnit.SECONDS)) {\n+            // That was plenty of time. Let's cancel the remaining RPCs\n+            server.shutdownNow();\n+            // shutdownNow isn't instantaneous, so give a bit of time to clean resources up\n+            // gracefully. Normally this will be well under a second.\n+            server.awaitTermination(5, TimeUnit.SECONDS);\n+          }\n+        } catch (InterruptedException ex) {\n+          server.shutdownNow();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "483fabc63bb12d7623cedc0635384217b65b64c1"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3060, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}