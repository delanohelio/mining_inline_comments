{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2Njk3MTg4", "number": 6883, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzoyNjoxM1rODxv3DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMzoyMTo1NFrODz9x9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDkwOTU2OnYy", "diffSide": "RIGHT", "path": "rls/src/main/java/io/grpc/rls/internal/LbPolicyConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzoyNjoxM1rOGFZOmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxODoyMTozNlrOGHYgZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMwOTQwMQ==", "bodyText": "I don't see its entries are used in this class and I don't see any getter of it. How is this map going to be used?", "url": "https://github.com/grpc/grpc-java/pull/6883#discussion_r408309401", "createdAt": "2020-04-14T17:26:13Z", "author": {"login": "dapengzhang0"}, "path": "rls/src/main/java/io/grpc/rls/internal/LbPolicyConfiguration.java", "diffHunk": "@@ -0,0 +1,372 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls.internal;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.collect.Iterables;\n+import io.grpc.ConnectivityState;\n+import io.grpc.ConnectivityStateInfo;\n+import io.grpc.LoadBalancer.Helper;\n+import io.grpc.LoadBalancer.SubchannelPicker;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.LoadBalancerRegistry;\n+import io.grpc.internal.BackoffPolicy;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupConfig;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupRequest;\n+import java.io.Closeable;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.annotation.Nullable;\n+\n+/** Configuration for RLS load balancing policy. */\n+public final class LbPolicyConfiguration {\n+\n+  private final RouteLookupConfig routeLookupConfig;\n+  private final ChildLoadBalancingPolicy policy;\n+\n+  public LbPolicyConfiguration(\n+      RouteLookupConfig routeLookupConfig, ChildLoadBalancingPolicy policy) {\n+    this.routeLookupConfig = checkNotNull(routeLookupConfig, \"routeLookupConfig\");\n+    this.policy = checkNotNull(policy, \"policy\");\n+  }\n+\n+  public RouteLookupConfig getRouteLookupConfig() {\n+    return routeLookupConfig;\n+  }\n+\n+  public ChildLoadBalancingPolicy getLoadBalancingPolicy() {\n+    return policy;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    LbPolicyConfiguration that = (LbPolicyConfiguration) o;\n+    return Objects.equals(routeLookupConfig, that.routeLookupConfig)\n+        && Objects.equals(policy, that.policy);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(routeLookupConfig, policy);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return MoreObjects.toStringHelper(this)\n+        .add(\"routeLookupConfig\", routeLookupConfig)\n+        .add(\"policy\", policy)\n+        .toString();\n+  }\n+\n+  /** ChildLoadBalancingPolicy is an elected child policy to delegate requests. */\n+  public static final class ChildLoadBalancingPolicy {\n+\n+    private final Map<String, Object> effectiveRawChildPolicy;\n+    private final LoadBalancerProvider effectiveLbProvider;\n+    private final String childPolicyConfigTargetFieldName;\n+    private final Map<RouteLookupRequest, BackoffPolicy> pendingRequests = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c45c46caab0e671cffe5a4c85185a0d91e4ebcc7"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM5NDcyNA==", "bodyText": "oops, yes this is no longer used (moved to PendingCacheEntry which contains BackoffPolicy so we don't need to maintain a map). removed.", "url": "https://github.com/grpc/grpc-java/pull/6883#discussion_r410394724", "createdAt": "2020-04-17T18:21:36Z", "author": {"login": "creamsoup"}, "path": "rls/src/main/java/io/grpc/rls/internal/LbPolicyConfiguration.java", "diffHunk": "@@ -0,0 +1,372 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls.internal;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.collect.Iterables;\n+import io.grpc.ConnectivityState;\n+import io.grpc.ConnectivityStateInfo;\n+import io.grpc.LoadBalancer.Helper;\n+import io.grpc.LoadBalancer.SubchannelPicker;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.LoadBalancerRegistry;\n+import io.grpc.internal.BackoffPolicy;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupConfig;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupRequest;\n+import java.io.Closeable;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.annotation.Nullable;\n+\n+/** Configuration for RLS load balancing policy. */\n+public final class LbPolicyConfiguration {\n+\n+  private final RouteLookupConfig routeLookupConfig;\n+  private final ChildLoadBalancingPolicy policy;\n+\n+  public LbPolicyConfiguration(\n+      RouteLookupConfig routeLookupConfig, ChildLoadBalancingPolicy policy) {\n+    this.routeLookupConfig = checkNotNull(routeLookupConfig, \"routeLookupConfig\");\n+    this.policy = checkNotNull(policy, \"policy\");\n+  }\n+\n+  public RouteLookupConfig getRouteLookupConfig() {\n+    return routeLookupConfig;\n+  }\n+\n+  public ChildLoadBalancingPolicy getLoadBalancingPolicy() {\n+    return policy;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    LbPolicyConfiguration that = (LbPolicyConfiguration) o;\n+    return Objects.equals(routeLookupConfig, that.routeLookupConfig)\n+        && Objects.equals(policy, that.policy);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(routeLookupConfig, policy);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return MoreObjects.toStringHelper(this)\n+        .add(\"routeLookupConfig\", routeLookupConfig)\n+        .add(\"policy\", policy)\n+        .toString();\n+  }\n+\n+  /** ChildLoadBalancingPolicy is an elected child policy to delegate requests. */\n+  public static final class ChildLoadBalancingPolicy {\n+\n+    private final Map<String, Object> effectiveRawChildPolicy;\n+    private final LoadBalancerProvider effectiveLbProvider;\n+    private final String childPolicyConfigTargetFieldName;\n+    private final Map<RouteLookupRequest, BackoffPolicy> pendingRequests = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMwOTQwMQ=="}, "originalCommit": {"oid": "c45c46caab0e671cffe5a4c85185a0d91e4ebcc7"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDk2MzM0OnYy", "diffSide": "RIGHT", "path": "rls/src/main/java/io/grpc/rls/internal/LbPolicyConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzo0MDoxN1rOGFZwVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzo0NTo1MFrOGHXXMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxODAzOA==", "bodyText": "Can helper be final? Is there a case it could change?", "url": "https://github.com/grpc/grpc-java/pull/6883#discussion_r408318038", "createdAt": "2020-04-14T17:40:17Z", "author": {"login": "dapengzhang0"}, "path": "rls/src/main/java/io/grpc/rls/internal/LbPolicyConfiguration.java", "diffHunk": "@@ -0,0 +1,372 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls.internal;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.collect.Iterables;\n+import io.grpc.ConnectivityState;\n+import io.grpc.ConnectivityStateInfo;\n+import io.grpc.LoadBalancer.Helper;\n+import io.grpc.LoadBalancer.SubchannelPicker;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.LoadBalancerRegistry;\n+import io.grpc.internal.BackoffPolicy;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupConfig;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupRequest;\n+import java.io.Closeable;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.annotation.Nullable;\n+\n+/** Configuration for RLS load balancing policy. */\n+public final class LbPolicyConfiguration {\n+\n+  private final RouteLookupConfig routeLookupConfig;\n+  private final ChildLoadBalancingPolicy policy;\n+\n+  public LbPolicyConfiguration(\n+      RouteLookupConfig routeLookupConfig, ChildLoadBalancingPolicy policy) {\n+    this.routeLookupConfig = checkNotNull(routeLookupConfig, \"routeLookupConfig\");\n+    this.policy = checkNotNull(policy, \"policy\");\n+  }\n+\n+  public RouteLookupConfig getRouteLookupConfig() {\n+    return routeLookupConfig;\n+  }\n+\n+  public ChildLoadBalancingPolicy getLoadBalancingPolicy() {\n+    return policy;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    LbPolicyConfiguration that = (LbPolicyConfiguration) o;\n+    return Objects.equals(routeLookupConfig, that.routeLookupConfig)\n+        && Objects.equals(policy, that.policy);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(routeLookupConfig, policy);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return MoreObjects.toStringHelper(this)\n+        .add(\"routeLookupConfig\", routeLookupConfig)\n+        .add(\"policy\", policy)\n+        .toString();\n+  }\n+\n+  /** ChildLoadBalancingPolicy is an elected child policy to delegate requests. */\n+  public static final class ChildLoadBalancingPolicy {\n+\n+    private final Map<String, Object> effectiveRawChildPolicy;\n+    private final LoadBalancerProvider effectiveLbProvider;\n+    private final String childPolicyConfigTargetFieldName;\n+    private final Map<RouteLookupRequest, BackoffPolicy> pendingRequests = new HashMap<>();\n+\n+    @VisibleForTesting\n+    ChildLoadBalancingPolicy(\n+        String childPolicyConfigTargetFieldName,\n+        Map<String, Object> effectiveRawChildPolicy,\n+        LoadBalancerProvider effectiveLbProvider) {\n+      checkArgument(\n+          childPolicyConfigTargetFieldName != null && !childPolicyConfigTargetFieldName.isEmpty(),\n+          \"childPolicyConfigTargetFieldName cannot be empty or null\");\n+      this.childPolicyConfigTargetFieldName = childPolicyConfigTargetFieldName;\n+      this.effectiveRawChildPolicy =\n+          checkNotNull(effectiveRawChildPolicy, \"effectiveRawChildPolicy\");\n+      this.effectiveLbProvider = checkNotNull(effectiveLbProvider, \"effectiveLbProvider\");\n+    }\n+\n+    /** Creates ChildLoadBalancingPolicy. */\n+    @SuppressWarnings(\"unchecked\")\n+    public static ChildLoadBalancingPolicy create(\n+        String childPolicyConfigTargetFieldName,\n+        List<Map<String, ?>> childPolicies) {\n+      Map<String, Object> effectiveChildPolicy = null;\n+      LoadBalancerProvider effectiveLbProvider = null;\n+      List<String> policyTried = new ArrayList<>();\n+\n+      LoadBalancerRegistry lbRegistry = LoadBalancerRegistry.getDefaultRegistry();\n+      for (Map<String, ?> childPolicy : childPolicies) {\n+        if (childPolicy.isEmpty()) {\n+          continue;\n+        }\n+        String policyName = Iterables.getOnlyElement(childPolicy.keySet());\n+        LoadBalancerProvider provider = lbRegistry.getProvider(policyName);\n+        if (provider != null) {\n+          effectiveLbProvider = provider;\n+          effectiveChildPolicy = Collections.unmodifiableMap(childPolicy);\n+          break;\n+        }\n+        policyTried.add(policyName);\n+      }\n+      checkState(\n+          effectiveChildPolicy != null,\n+          \"no valid childPolicy found, policy tried: %s\", policyTried);\n+      checkArgument(\n+          effectiveChildPolicy.size() == 1,\n+          \"childPolicy should have exactly one loadbalancing policy\");\n+      return\n+          new ChildLoadBalancingPolicy(\n+              childPolicyConfigTargetFieldName,\n+              (Map<String, Object>) effectiveChildPolicy.values().iterator().next(),\n+              effectiveLbProvider);\n+    }\n+\n+    /** Creates a child load balancer config for given target from elected raw child policy. */\n+    public Map<String, ?> getEffectiveChildPolicy(String target) {\n+      Map<String, Object> childPolicy = new HashMap<>(effectiveRawChildPolicy);\n+      childPolicy.put(childPolicyConfigTargetFieldName, target);\n+      return childPolicy;\n+    }\n+\n+    /** Returns the elected child {@link LoadBalancerProvider}. */\n+    public LoadBalancerProvider getEffectiveLbProvider() {\n+      return effectiveLbProvider;\n+    }\n+\n+    void addPendingRequest(RouteLookupRequest request, BackoffPolicy backoffPolicy) {\n+      checkNotNull(request, \"request\");\n+      checkNotNull(backoffPolicy, \"backoffPolicy\");\n+      BackoffPolicy existing = pendingRequests.put(request, backoffPolicy);\n+      checkState(\n+          existing == null,\n+          \"This is a bug, there should be at most one outstanding pending request\");\n+    }\n+\n+    void removePendingRequest(RouteLookupRequest request) {\n+      BackoffPolicy policy = pendingRequests.remove(request);\n+      checkState(policy != null, \"This is a bug, untracked pending request found\");\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      ChildLoadBalancingPolicy that = (ChildLoadBalancingPolicy) o;\n+      return Objects.equals(effectiveRawChildPolicy, that.effectiveRawChildPolicy)\n+          && Objects.equals(effectiveLbProvider, that.effectiveLbProvider)\n+          && Objects.equals(childPolicyConfigTargetFieldName, that.childPolicyConfigTargetFieldName)\n+          && Objects.equals(pendingRequests, that.pendingRequests);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return\n+          Objects\n+              .hash(\n+                  effectiveRawChildPolicy,\n+                  effectiveLbProvider,\n+                  childPolicyConfigTargetFieldName,\n+                  pendingRequests);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return MoreObjects.toStringHelper(this)\n+          .add(\"effectiveRawChildPolicy\", effectiveRawChildPolicy)\n+          .add(\"effectiveLbProvider\", effectiveLbProvider)\n+          .add(\"childPolicyConfigTargetFieldName\", childPolicyConfigTargetFieldName)\n+          .add(\"pendingRequests\", pendingRequests)\n+          .toString();\n+    }\n+  }\n+\n+  /**\n+   * ChildPolicyWrapper is a wrapper class for child load balancing policy with associated helper /\n+   * utility classes to manage the child policy.\n+   */\n+  static final class ChildPolicyWrapper implements Closeable {\n+\n+    @VisibleForTesting\n+    static final Map<String /* target */, RefCountedChildPolicyWrapper> childPolicyMap =\n+        new HashMap<>();\n+\n+    private final String target;\n+    @Nullable\n+    private ChildLoadBalancingPolicy childPolicy;\n+    private ConnectivityStateInfo connectivityStateInfo =\n+        ConnectivityStateInfo.forNonError(ConnectivityState.IDLE);\n+    private SubchannelPicker picker;\n+    private Helper helper;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c45c46caab0e671cffe5a4c85185a0d91e4ebcc7"}, "originalPosition": 229}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3NTk4Nw==", "bodyText": "the helper won't be changed once it is set. if we want to make it final, the caller may need to create a delegating helper (this will be next PR depends on this change) even if it will use the cached version.", "url": "https://github.com/grpc/grpc-java/pull/6883#discussion_r410375987", "createdAt": "2020-04-17T17:45:50Z", "author": {"login": "creamsoup"}, "path": "rls/src/main/java/io/grpc/rls/internal/LbPolicyConfiguration.java", "diffHunk": "@@ -0,0 +1,372 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls.internal;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.collect.Iterables;\n+import io.grpc.ConnectivityState;\n+import io.grpc.ConnectivityStateInfo;\n+import io.grpc.LoadBalancer.Helper;\n+import io.grpc.LoadBalancer.SubchannelPicker;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.LoadBalancerRegistry;\n+import io.grpc.internal.BackoffPolicy;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupConfig;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupRequest;\n+import java.io.Closeable;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.annotation.Nullable;\n+\n+/** Configuration for RLS load balancing policy. */\n+public final class LbPolicyConfiguration {\n+\n+  private final RouteLookupConfig routeLookupConfig;\n+  private final ChildLoadBalancingPolicy policy;\n+\n+  public LbPolicyConfiguration(\n+      RouteLookupConfig routeLookupConfig, ChildLoadBalancingPolicy policy) {\n+    this.routeLookupConfig = checkNotNull(routeLookupConfig, \"routeLookupConfig\");\n+    this.policy = checkNotNull(policy, \"policy\");\n+  }\n+\n+  public RouteLookupConfig getRouteLookupConfig() {\n+    return routeLookupConfig;\n+  }\n+\n+  public ChildLoadBalancingPolicy getLoadBalancingPolicy() {\n+    return policy;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    LbPolicyConfiguration that = (LbPolicyConfiguration) o;\n+    return Objects.equals(routeLookupConfig, that.routeLookupConfig)\n+        && Objects.equals(policy, that.policy);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(routeLookupConfig, policy);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return MoreObjects.toStringHelper(this)\n+        .add(\"routeLookupConfig\", routeLookupConfig)\n+        .add(\"policy\", policy)\n+        .toString();\n+  }\n+\n+  /** ChildLoadBalancingPolicy is an elected child policy to delegate requests. */\n+  public static final class ChildLoadBalancingPolicy {\n+\n+    private final Map<String, Object> effectiveRawChildPolicy;\n+    private final LoadBalancerProvider effectiveLbProvider;\n+    private final String childPolicyConfigTargetFieldName;\n+    private final Map<RouteLookupRequest, BackoffPolicy> pendingRequests = new HashMap<>();\n+\n+    @VisibleForTesting\n+    ChildLoadBalancingPolicy(\n+        String childPolicyConfigTargetFieldName,\n+        Map<String, Object> effectiveRawChildPolicy,\n+        LoadBalancerProvider effectiveLbProvider) {\n+      checkArgument(\n+          childPolicyConfigTargetFieldName != null && !childPolicyConfigTargetFieldName.isEmpty(),\n+          \"childPolicyConfigTargetFieldName cannot be empty or null\");\n+      this.childPolicyConfigTargetFieldName = childPolicyConfigTargetFieldName;\n+      this.effectiveRawChildPolicy =\n+          checkNotNull(effectiveRawChildPolicy, \"effectiveRawChildPolicy\");\n+      this.effectiveLbProvider = checkNotNull(effectiveLbProvider, \"effectiveLbProvider\");\n+    }\n+\n+    /** Creates ChildLoadBalancingPolicy. */\n+    @SuppressWarnings(\"unchecked\")\n+    public static ChildLoadBalancingPolicy create(\n+        String childPolicyConfigTargetFieldName,\n+        List<Map<String, ?>> childPolicies) {\n+      Map<String, Object> effectiveChildPolicy = null;\n+      LoadBalancerProvider effectiveLbProvider = null;\n+      List<String> policyTried = new ArrayList<>();\n+\n+      LoadBalancerRegistry lbRegistry = LoadBalancerRegistry.getDefaultRegistry();\n+      for (Map<String, ?> childPolicy : childPolicies) {\n+        if (childPolicy.isEmpty()) {\n+          continue;\n+        }\n+        String policyName = Iterables.getOnlyElement(childPolicy.keySet());\n+        LoadBalancerProvider provider = lbRegistry.getProvider(policyName);\n+        if (provider != null) {\n+          effectiveLbProvider = provider;\n+          effectiveChildPolicy = Collections.unmodifiableMap(childPolicy);\n+          break;\n+        }\n+        policyTried.add(policyName);\n+      }\n+      checkState(\n+          effectiveChildPolicy != null,\n+          \"no valid childPolicy found, policy tried: %s\", policyTried);\n+      checkArgument(\n+          effectiveChildPolicy.size() == 1,\n+          \"childPolicy should have exactly one loadbalancing policy\");\n+      return\n+          new ChildLoadBalancingPolicy(\n+              childPolicyConfigTargetFieldName,\n+              (Map<String, Object>) effectiveChildPolicy.values().iterator().next(),\n+              effectiveLbProvider);\n+    }\n+\n+    /** Creates a child load balancer config for given target from elected raw child policy. */\n+    public Map<String, ?> getEffectiveChildPolicy(String target) {\n+      Map<String, Object> childPolicy = new HashMap<>(effectiveRawChildPolicy);\n+      childPolicy.put(childPolicyConfigTargetFieldName, target);\n+      return childPolicy;\n+    }\n+\n+    /** Returns the elected child {@link LoadBalancerProvider}. */\n+    public LoadBalancerProvider getEffectiveLbProvider() {\n+      return effectiveLbProvider;\n+    }\n+\n+    void addPendingRequest(RouteLookupRequest request, BackoffPolicy backoffPolicy) {\n+      checkNotNull(request, \"request\");\n+      checkNotNull(backoffPolicy, \"backoffPolicy\");\n+      BackoffPolicy existing = pendingRequests.put(request, backoffPolicy);\n+      checkState(\n+          existing == null,\n+          \"This is a bug, there should be at most one outstanding pending request\");\n+    }\n+\n+    void removePendingRequest(RouteLookupRequest request) {\n+      BackoffPolicy policy = pendingRequests.remove(request);\n+      checkState(policy != null, \"This is a bug, untracked pending request found\");\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      ChildLoadBalancingPolicy that = (ChildLoadBalancingPolicy) o;\n+      return Objects.equals(effectiveRawChildPolicy, that.effectiveRawChildPolicy)\n+          && Objects.equals(effectiveLbProvider, that.effectiveLbProvider)\n+          && Objects.equals(childPolicyConfigTargetFieldName, that.childPolicyConfigTargetFieldName)\n+          && Objects.equals(pendingRequests, that.pendingRequests);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return\n+          Objects\n+              .hash(\n+                  effectiveRawChildPolicy,\n+                  effectiveLbProvider,\n+                  childPolicyConfigTargetFieldName,\n+                  pendingRequests);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return MoreObjects.toStringHelper(this)\n+          .add(\"effectiveRawChildPolicy\", effectiveRawChildPolicy)\n+          .add(\"effectiveLbProvider\", effectiveLbProvider)\n+          .add(\"childPolicyConfigTargetFieldName\", childPolicyConfigTargetFieldName)\n+          .add(\"pendingRequests\", pendingRequests)\n+          .toString();\n+    }\n+  }\n+\n+  /**\n+   * ChildPolicyWrapper is a wrapper class for child load balancing policy with associated helper /\n+   * utility classes to manage the child policy.\n+   */\n+  static final class ChildPolicyWrapper implements Closeable {\n+\n+    @VisibleForTesting\n+    static final Map<String /* target */, RefCountedChildPolicyWrapper> childPolicyMap =\n+        new HashMap<>();\n+\n+    private final String target;\n+    @Nullable\n+    private ChildLoadBalancingPolicy childPolicy;\n+    private ConnectivityStateInfo connectivityStateInfo =\n+        ConnectivityStateInfo.forNonError(ConnectivityState.IDLE);\n+    private SubchannelPicker picker;\n+    private Helper helper;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxODAzOA=="}, "originalCommit": {"oid": "c45c46caab0e671cffe5a4c85185a0d91e4ebcc7"}, "originalPosition": 229}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDk4MjE0OnYy", "diffSide": "RIGHT", "path": "rls/src/main/java/io/grpc/rls/internal/LbPolicyConfiguration.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzo0NToxMlrOGFZ8WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNzo0OTozOVrOGIgcDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMyMTExMg==", "bodyText": "Can this be final? Is there a case it could change?", "url": "https://github.com/grpc/grpc-java/pull/6883#discussion_r408321112", "createdAt": "2020-04-14T17:45:12Z", "author": {"login": "dapengzhang0"}, "path": "rls/src/main/java/io/grpc/rls/internal/LbPolicyConfiguration.java", "diffHunk": "@@ -0,0 +1,372 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls.internal;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.collect.Iterables;\n+import io.grpc.ConnectivityState;\n+import io.grpc.ConnectivityStateInfo;\n+import io.grpc.LoadBalancer.Helper;\n+import io.grpc.LoadBalancer.SubchannelPicker;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.LoadBalancerRegistry;\n+import io.grpc.internal.BackoffPolicy;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupConfig;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupRequest;\n+import java.io.Closeable;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.annotation.Nullable;\n+\n+/** Configuration for RLS load balancing policy. */\n+public final class LbPolicyConfiguration {\n+\n+  private final RouteLookupConfig routeLookupConfig;\n+  private final ChildLoadBalancingPolicy policy;\n+\n+  public LbPolicyConfiguration(\n+      RouteLookupConfig routeLookupConfig, ChildLoadBalancingPolicy policy) {\n+    this.routeLookupConfig = checkNotNull(routeLookupConfig, \"routeLookupConfig\");\n+    this.policy = checkNotNull(policy, \"policy\");\n+  }\n+\n+  public RouteLookupConfig getRouteLookupConfig() {\n+    return routeLookupConfig;\n+  }\n+\n+  public ChildLoadBalancingPolicy getLoadBalancingPolicy() {\n+    return policy;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    LbPolicyConfiguration that = (LbPolicyConfiguration) o;\n+    return Objects.equals(routeLookupConfig, that.routeLookupConfig)\n+        && Objects.equals(policy, that.policy);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(routeLookupConfig, policy);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return MoreObjects.toStringHelper(this)\n+        .add(\"routeLookupConfig\", routeLookupConfig)\n+        .add(\"policy\", policy)\n+        .toString();\n+  }\n+\n+  /** ChildLoadBalancingPolicy is an elected child policy to delegate requests. */\n+  public static final class ChildLoadBalancingPolicy {\n+\n+    private final Map<String, Object> effectiveRawChildPolicy;\n+    private final LoadBalancerProvider effectiveLbProvider;\n+    private final String childPolicyConfigTargetFieldName;\n+    private final Map<RouteLookupRequest, BackoffPolicy> pendingRequests = new HashMap<>();\n+\n+    @VisibleForTesting\n+    ChildLoadBalancingPolicy(\n+        String childPolicyConfigTargetFieldName,\n+        Map<String, Object> effectiveRawChildPolicy,\n+        LoadBalancerProvider effectiveLbProvider) {\n+      checkArgument(\n+          childPolicyConfigTargetFieldName != null && !childPolicyConfigTargetFieldName.isEmpty(),\n+          \"childPolicyConfigTargetFieldName cannot be empty or null\");\n+      this.childPolicyConfigTargetFieldName = childPolicyConfigTargetFieldName;\n+      this.effectiveRawChildPolicy =\n+          checkNotNull(effectiveRawChildPolicy, \"effectiveRawChildPolicy\");\n+      this.effectiveLbProvider = checkNotNull(effectiveLbProvider, \"effectiveLbProvider\");\n+    }\n+\n+    /** Creates ChildLoadBalancingPolicy. */\n+    @SuppressWarnings(\"unchecked\")\n+    public static ChildLoadBalancingPolicy create(\n+        String childPolicyConfigTargetFieldName,\n+        List<Map<String, ?>> childPolicies) {\n+      Map<String, Object> effectiveChildPolicy = null;\n+      LoadBalancerProvider effectiveLbProvider = null;\n+      List<String> policyTried = new ArrayList<>();\n+\n+      LoadBalancerRegistry lbRegistry = LoadBalancerRegistry.getDefaultRegistry();\n+      for (Map<String, ?> childPolicy : childPolicies) {\n+        if (childPolicy.isEmpty()) {\n+          continue;\n+        }\n+        String policyName = Iterables.getOnlyElement(childPolicy.keySet());\n+        LoadBalancerProvider provider = lbRegistry.getProvider(policyName);\n+        if (provider != null) {\n+          effectiveLbProvider = provider;\n+          effectiveChildPolicy = Collections.unmodifiableMap(childPolicy);\n+          break;\n+        }\n+        policyTried.add(policyName);\n+      }\n+      checkState(\n+          effectiveChildPolicy != null,\n+          \"no valid childPolicy found, policy tried: %s\", policyTried);\n+      checkArgument(\n+          effectiveChildPolicy.size() == 1,\n+          \"childPolicy should have exactly one loadbalancing policy\");\n+      return\n+          new ChildLoadBalancingPolicy(\n+              childPolicyConfigTargetFieldName,\n+              (Map<String, Object>) effectiveChildPolicy.values().iterator().next(),\n+              effectiveLbProvider);\n+    }\n+\n+    /** Creates a child load balancer config for given target from elected raw child policy. */\n+    public Map<String, ?> getEffectiveChildPolicy(String target) {\n+      Map<String, Object> childPolicy = new HashMap<>(effectiveRawChildPolicy);\n+      childPolicy.put(childPolicyConfigTargetFieldName, target);\n+      return childPolicy;\n+    }\n+\n+    /** Returns the elected child {@link LoadBalancerProvider}. */\n+    public LoadBalancerProvider getEffectiveLbProvider() {\n+      return effectiveLbProvider;\n+    }\n+\n+    void addPendingRequest(RouteLookupRequest request, BackoffPolicy backoffPolicy) {\n+      checkNotNull(request, \"request\");\n+      checkNotNull(backoffPolicy, \"backoffPolicy\");\n+      BackoffPolicy existing = pendingRequests.put(request, backoffPolicy);\n+      checkState(\n+          existing == null,\n+          \"This is a bug, there should be at most one outstanding pending request\");\n+    }\n+\n+    void removePendingRequest(RouteLookupRequest request) {\n+      BackoffPolicy policy = pendingRequests.remove(request);\n+      checkState(policy != null, \"This is a bug, untracked pending request found\");\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      ChildLoadBalancingPolicy that = (ChildLoadBalancingPolicy) o;\n+      return Objects.equals(effectiveRawChildPolicy, that.effectiveRawChildPolicy)\n+          && Objects.equals(effectiveLbProvider, that.effectiveLbProvider)\n+          && Objects.equals(childPolicyConfigTargetFieldName, that.childPolicyConfigTargetFieldName)\n+          && Objects.equals(pendingRequests, that.pendingRequests);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return\n+          Objects\n+              .hash(\n+                  effectiveRawChildPolicy,\n+                  effectiveLbProvider,\n+                  childPolicyConfigTargetFieldName,\n+                  pendingRequests);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return MoreObjects.toStringHelper(this)\n+          .add(\"effectiveRawChildPolicy\", effectiveRawChildPolicy)\n+          .add(\"effectiveLbProvider\", effectiveLbProvider)\n+          .add(\"childPolicyConfigTargetFieldName\", childPolicyConfigTargetFieldName)\n+          .add(\"pendingRequests\", pendingRequests)\n+          .toString();\n+    }\n+  }\n+\n+  /**\n+   * ChildPolicyWrapper is a wrapper class for child load balancing policy with associated helper /\n+   * utility classes to manage the child policy.\n+   */\n+  static final class ChildPolicyWrapper implements Closeable {\n+\n+    @VisibleForTesting\n+    static final Map<String /* target */, RefCountedChildPolicyWrapper> childPolicyMap =\n+        new HashMap<>();\n+\n+    private final String target;\n+    @Nullable\n+    private ChildLoadBalancingPolicy childPolicy;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c45c46caab0e671cffe5a4c85185a0d91e4ebcc7"}, "originalPosition": 225}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM4NTgwMQ==", "bodyText": "same as helper, it is used like final but it will be set after the caller find out that it is a brand new ChildPolicyWrapper. unlike helper it doesn't create extra object. do you think it is better to pass helper and childPolicy to the factory method to make it final?", "url": "https://github.com/grpc/grpc-java/pull/6883#discussion_r410385801", "createdAt": "2020-04-17T18:04:18Z", "author": {"login": "creamsoup"}, "path": "rls/src/main/java/io/grpc/rls/internal/LbPolicyConfiguration.java", "diffHunk": "@@ -0,0 +1,372 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls.internal;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.collect.Iterables;\n+import io.grpc.ConnectivityState;\n+import io.grpc.ConnectivityStateInfo;\n+import io.grpc.LoadBalancer.Helper;\n+import io.grpc.LoadBalancer.SubchannelPicker;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.LoadBalancerRegistry;\n+import io.grpc.internal.BackoffPolicy;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupConfig;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupRequest;\n+import java.io.Closeable;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.annotation.Nullable;\n+\n+/** Configuration for RLS load balancing policy. */\n+public final class LbPolicyConfiguration {\n+\n+  private final RouteLookupConfig routeLookupConfig;\n+  private final ChildLoadBalancingPolicy policy;\n+\n+  public LbPolicyConfiguration(\n+      RouteLookupConfig routeLookupConfig, ChildLoadBalancingPolicy policy) {\n+    this.routeLookupConfig = checkNotNull(routeLookupConfig, \"routeLookupConfig\");\n+    this.policy = checkNotNull(policy, \"policy\");\n+  }\n+\n+  public RouteLookupConfig getRouteLookupConfig() {\n+    return routeLookupConfig;\n+  }\n+\n+  public ChildLoadBalancingPolicy getLoadBalancingPolicy() {\n+    return policy;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    LbPolicyConfiguration that = (LbPolicyConfiguration) o;\n+    return Objects.equals(routeLookupConfig, that.routeLookupConfig)\n+        && Objects.equals(policy, that.policy);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(routeLookupConfig, policy);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return MoreObjects.toStringHelper(this)\n+        .add(\"routeLookupConfig\", routeLookupConfig)\n+        .add(\"policy\", policy)\n+        .toString();\n+  }\n+\n+  /** ChildLoadBalancingPolicy is an elected child policy to delegate requests. */\n+  public static final class ChildLoadBalancingPolicy {\n+\n+    private final Map<String, Object> effectiveRawChildPolicy;\n+    private final LoadBalancerProvider effectiveLbProvider;\n+    private final String childPolicyConfigTargetFieldName;\n+    private final Map<RouteLookupRequest, BackoffPolicy> pendingRequests = new HashMap<>();\n+\n+    @VisibleForTesting\n+    ChildLoadBalancingPolicy(\n+        String childPolicyConfigTargetFieldName,\n+        Map<String, Object> effectiveRawChildPolicy,\n+        LoadBalancerProvider effectiveLbProvider) {\n+      checkArgument(\n+          childPolicyConfigTargetFieldName != null && !childPolicyConfigTargetFieldName.isEmpty(),\n+          \"childPolicyConfigTargetFieldName cannot be empty or null\");\n+      this.childPolicyConfigTargetFieldName = childPolicyConfigTargetFieldName;\n+      this.effectiveRawChildPolicy =\n+          checkNotNull(effectiveRawChildPolicy, \"effectiveRawChildPolicy\");\n+      this.effectiveLbProvider = checkNotNull(effectiveLbProvider, \"effectiveLbProvider\");\n+    }\n+\n+    /** Creates ChildLoadBalancingPolicy. */\n+    @SuppressWarnings(\"unchecked\")\n+    public static ChildLoadBalancingPolicy create(\n+        String childPolicyConfigTargetFieldName,\n+        List<Map<String, ?>> childPolicies) {\n+      Map<String, Object> effectiveChildPolicy = null;\n+      LoadBalancerProvider effectiveLbProvider = null;\n+      List<String> policyTried = new ArrayList<>();\n+\n+      LoadBalancerRegistry lbRegistry = LoadBalancerRegistry.getDefaultRegistry();\n+      for (Map<String, ?> childPolicy : childPolicies) {\n+        if (childPolicy.isEmpty()) {\n+          continue;\n+        }\n+        String policyName = Iterables.getOnlyElement(childPolicy.keySet());\n+        LoadBalancerProvider provider = lbRegistry.getProvider(policyName);\n+        if (provider != null) {\n+          effectiveLbProvider = provider;\n+          effectiveChildPolicy = Collections.unmodifiableMap(childPolicy);\n+          break;\n+        }\n+        policyTried.add(policyName);\n+      }\n+      checkState(\n+          effectiveChildPolicy != null,\n+          \"no valid childPolicy found, policy tried: %s\", policyTried);\n+      checkArgument(\n+          effectiveChildPolicy.size() == 1,\n+          \"childPolicy should have exactly one loadbalancing policy\");\n+      return\n+          new ChildLoadBalancingPolicy(\n+              childPolicyConfigTargetFieldName,\n+              (Map<String, Object>) effectiveChildPolicy.values().iterator().next(),\n+              effectiveLbProvider);\n+    }\n+\n+    /** Creates a child load balancer config for given target from elected raw child policy. */\n+    public Map<String, ?> getEffectiveChildPolicy(String target) {\n+      Map<String, Object> childPolicy = new HashMap<>(effectiveRawChildPolicy);\n+      childPolicy.put(childPolicyConfigTargetFieldName, target);\n+      return childPolicy;\n+    }\n+\n+    /** Returns the elected child {@link LoadBalancerProvider}. */\n+    public LoadBalancerProvider getEffectiveLbProvider() {\n+      return effectiveLbProvider;\n+    }\n+\n+    void addPendingRequest(RouteLookupRequest request, BackoffPolicy backoffPolicy) {\n+      checkNotNull(request, \"request\");\n+      checkNotNull(backoffPolicy, \"backoffPolicy\");\n+      BackoffPolicy existing = pendingRequests.put(request, backoffPolicy);\n+      checkState(\n+          existing == null,\n+          \"This is a bug, there should be at most one outstanding pending request\");\n+    }\n+\n+    void removePendingRequest(RouteLookupRequest request) {\n+      BackoffPolicy policy = pendingRequests.remove(request);\n+      checkState(policy != null, \"This is a bug, untracked pending request found\");\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      ChildLoadBalancingPolicy that = (ChildLoadBalancingPolicy) o;\n+      return Objects.equals(effectiveRawChildPolicy, that.effectiveRawChildPolicy)\n+          && Objects.equals(effectiveLbProvider, that.effectiveLbProvider)\n+          && Objects.equals(childPolicyConfigTargetFieldName, that.childPolicyConfigTargetFieldName)\n+          && Objects.equals(pendingRequests, that.pendingRequests);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return\n+          Objects\n+              .hash(\n+                  effectiveRawChildPolicy,\n+                  effectiveLbProvider,\n+                  childPolicyConfigTargetFieldName,\n+                  pendingRequests);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return MoreObjects.toStringHelper(this)\n+          .add(\"effectiveRawChildPolicy\", effectiveRawChildPolicy)\n+          .add(\"effectiveLbProvider\", effectiveLbProvider)\n+          .add(\"childPolicyConfigTargetFieldName\", childPolicyConfigTargetFieldName)\n+          .add(\"pendingRequests\", pendingRequests)\n+          .toString();\n+    }\n+  }\n+\n+  /**\n+   * ChildPolicyWrapper is a wrapper class for child load balancing policy with associated helper /\n+   * utility classes to manage the child policy.\n+   */\n+  static final class ChildPolicyWrapper implements Closeable {\n+\n+    @VisibleForTesting\n+    static final Map<String /* target */, RefCountedChildPolicyWrapper> childPolicyMap =\n+        new HashMap<>();\n+\n+    private final String target;\n+    @Nullable\n+    private ChildLoadBalancingPolicy childPolicy;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMyMTExMg=="}, "originalCommit": {"oid": "c45c46caab0e671cffe5a4c85185a0d91e4ebcc7"}, "originalPosition": 225}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUyNjUzMg==", "bodyText": "Yes, it would be definitely better to make it final unless there is restriction such as the helper and childPolicy are unknown when it has to be instantiated. Would that be difficult?", "url": "https://github.com/grpc/grpc-java/pull/6883#discussion_r410526532", "createdAt": "2020-04-18T00:43:54Z", "author": {"login": "dapengzhang0"}, "path": "rls/src/main/java/io/grpc/rls/internal/LbPolicyConfiguration.java", "diffHunk": "@@ -0,0 +1,372 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls.internal;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.collect.Iterables;\n+import io.grpc.ConnectivityState;\n+import io.grpc.ConnectivityStateInfo;\n+import io.grpc.LoadBalancer.Helper;\n+import io.grpc.LoadBalancer.SubchannelPicker;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.LoadBalancerRegistry;\n+import io.grpc.internal.BackoffPolicy;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupConfig;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupRequest;\n+import java.io.Closeable;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.annotation.Nullable;\n+\n+/** Configuration for RLS load balancing policy. */\n+public final class LbPolicyConfiguration {\n+\n+  private final RouteLookupConfig routeLookupConfig;\n+  private final ChildLoadBalancingPolicy policy;\n+\n+  public LbPolicyConfiguration(\n+      RouteLookupConfig routeLookupConfig, ChildLoadBalancingPolicy policy) {\n+    this.routeLookupConfig = checkNotNull(routeLookupConfig, \"routeLookupConfig\");\n+    this.policy = checkNotNull(policy, \"policy\");\n+  }\n+\n+  public RouteLookupConfig getRouteLookupConfig() {\n+    return routeLookupConfig;\n+  }\n+\n+  public ChildLoadBalancingPolicy getLoadBalancingPolicy() {\n+    return policy;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    LbPolicyConfiguration that = (LbPolicyConfiguration) o;\n+    return Objects.equals(routeLookupConfig, that.routeLookupConfig)\n+        && Objects.equals(policy, that.policy);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(routeLookupConfig, policy);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return MoreObjects.toStringHelper(this)\n+        .add(\"routeLookupConfig\", routeLookupConfig)\n+        .add(\"policy\", policy)\n+        .toString();\n+  }\n+\n+  /** ChildLoadBalancingPolicy is an elected child policy to delegate requests. */\n+  public static final class ChildLoadBalancingPolicy {\n+\n+    private final Map<String, Object> effectiveRawChildPolicy;\n+    private final LoadBalancerProvider effectiveLbProvider;\n+    private final String childPolicyConfigTargetFieldName;\n+    private final Map<RouteLookupRequest, BackoffPolicy> pendingRequests = new HashMap<>();\n+\n+    @VisibleForTesting\n+    ChildLoadBalancingPolicy(\n+        String childPolicyConfigTargetFieldName,\n+        Map<String, Object> effectiveRawChildPolicy,\n+        LoadBalancerProvider effectiveLbProvider) {\n+      checkArgument(\n+          childPolicyConfigTargetFieldName != null && !childPolicyConfigTargetFieldName.isEmpty(),\n+          \"childPolicyConfigTargetFieldName cannot be empty or null\");\n+      this.childPolicyConfigTargetFieldName = childPolicyConfigTargetFieldName;\n+      this.effectiveRawChildPolicy =\n+          checkNotNull(effectiveRawChildPolicy, \"effectiveRawChildPolicy\");\n+      this.effectiveLbProvider = checkNotNull(effectiveLbProvider, \"effectiveLbProvider\");\n+    }\n+\n+    /** Creates ChildLoadBalancingPolicy. */\n+    @SuppressWarnings(\"unchecked\")\n+    public static ChildLoadBalancingPolicy create(\n+        String childPolicyConfigTargetFieldName,\n+        List<Map<String, ?>> childPolicies) {\n+      Map<String, Object> effectiveChildPolicy = null;\n+      LoadBalancerProvider effectiveLbProvider = null;\n+      List<String> policyTried = new ArrayList<>();\n+\n+      LoadBalancerRegistry lbRegistry = LoadBalancerRegistry.getDefaultRegistry();\n+      for (Map<String, ?> childPolicy : childPolicies) {\n+        if (childPolicy.isEmpty()) {\n+          continue;\n+        }\n+        String policyName = Iterables.getOnlyElement(childPolicy.keySet());\n+        LoadBalancerProvider provider = lbRegistry.getProvider(policyName);\n+        if (provider != null) {\n+          effectiveLbProvider = provider;\n+          effectiveChildPolicy = Collections.unmodifiableMap(childPolicy);\n+          break;\n+        }\n+        policyTried.add(policyName);\n+      }\n+      checkState(\n+          effectiveChildPolicy != null,\n+          \"no valid childPolicy found, policy tried: %s\", policyTried);\n+      checkArgument(\n+          effectiveChildPolicy.size() == 1,\n+          \"childPolicy should have exactly one loadbalancing policy\");\n+      return\n+          new ChildLoadBalancingPolicy(\n+              childPolicyConfigTargetFieldName,\n+              (Map<String, Object>) effectiveChildPolicy.values().iterator().next(),\n+              effectiveLbProvider);\n+    }\n+\n+    /** Creates a child load balancer config for given target from elected raw child policy. */\n+    public Map<String, ?> getEffectiveChildPolicy(String target) {\n+      Map<String, Object> childPolicy = new HashMap<>(effectiveRawChildPolicy);\n+      childPolicy.put(childPolicyConfigTargetFieldName, target);\n+      return childPolicy;\n+    }\n+\n+    /** Returns the elected child {@link LoadBalancerProvider}. */\n+    public LoadBalancerProvider getEffectiveLbProvider() {\n+      return effectiveLbProvider;\n+    }\n+\n+    void addPendingRequest(RouteLookupRequest request, BackoffPolicy backoffPolicy) {\n+      checkNotNull(request, \"request\");\n+      checkNotNull(backoffPolicy, \"backoffPolicy\");\n+      BackoffPolicy existing = pendingRequests.put(request, backoffPolicy);\n+      checkState(\n+          existing == null,\n+          \"This is a bug, there should be at most one outstanding pending request\");\n+    }\n+\n+    void removePendingRequest(RouteLookupRequest request) {\n+      BackoffPolicy policy = pendingRequests.remove(request);\n+      checkState(policy != null, \"This is a bug, untracked pending request found\");\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      ChildLoadBalancingPolicy that = (ChildLoadBalancingPolicy) o;\n+      return Objects.equals(effectiveRawChildPolicy, that.effectiveRawChildPolicy)\n+          && Objects.equals(effectiveLbProvider, that.effectiveLbProvider)\n+          && Objects.equals(childPolicyConfigTargetFieldName, that.childPolicyConfigTargetFieldName)\n+          && Objects.equals(pendingRequests, that.pendingRequests);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return\n+          Objects\n+              .hash(\n+                  effectiveRawChildPolicy,\n+                  effectiveLbProvider,\n+                  childPolicyConfigTargetFieldName,\n+                  pendingRequests);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return MoreObjects.toStringHelper(this)\n+          .add(\"effectiveRawChildPolicy\", effectiveRawChildPolicy)\n+          .add(\"effectiveLbProvider\", effectiveLbProvider)\n+          .add(\"childPolicyConfigTargetFieldName\", childPolicyConfigTargetFieldName)\n+          .add(\"pendingRequests\", pendingRequests)\n+          .toString();\n+    }\n+  }\n+\n+  /**\n+   * ChildPolicyWrapper is a wrapper class for child load balancing policy with associated helper /\n+   * utility classes to manage the child policy.\n+   */\n+  static final class ChildPolicyWrapper implements Closeable {\n+\n+    @VisibleForTesting\n+    static final Map<String /* target */, RefCountedChildPolicyWrapper> childPolicyMap =\n+        new HashMap<>();\n+\n+    private final String target;\n+    @Nullable\n+    private ChildLoadBalancingPolicy childPolicy;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMyMTExMg=="}, "originalCommit": {"oid": "c45c46caab0e671cffe5a4c85185a0d91e4ebcc7"}, "originalPosition": 225}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU3MzI2Mw==", "bodyText": "i had to bring in the other helper due to circular dependency if it just accept helper in actual lb impl. PTAL", "url": "https://github.com/grpc/grpc-java/pull/6883#discussion_r411573263", "createdAt": "2020-04-20T17:49:39Z", "author": {"login": "creamsoup"}, "path": "rls/src/main/java/io/grpc/rls/internal/LbPolicyConfiguration.java", "diffHunk": "@@ -0,0 +1,372 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls.internal;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.collect.Iterables;\n+import io.grpc.ConnectivityState;\n+import io.grpc.ConnectivityStateInfo;\n+import io.grpc.LoadBalancer.Helper;\n+import io.grpc.LoadBalancer.SubchannelPicker;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.LoadBalancerRegistry;\n+import io.grpc.internal.BackoffPolicy;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupConfig;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupRequest;\n+import java.io.Closeable;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.annotation.Nullable;\n+\n+/** Configuration for RLS load balancing policy. */\n+public final class LbPolicyConfiguration {\n+\n+  private final RouteLookupConfig routeLookupConfig;\n+  private final ChildLoadBalancingPolicy policy;\n+\n+  public LbPolicyConfiguration(\n+      RouteLookupConfig routeLookupConfig, ChildLoadBalancingPolicy policy) {\n+    this.routeLookupConfig = checkNotNull(routeLookupConfig, \"routeLookupConfig\");\n+    this.policy = checkNotNull(policy, \"policy\");\n+  }\n+\n+  public RouteLookupConfig getRouteLookupConfig() {\n+    return routeLookupConfig;\n+  }\n+\n+  public ChildLoadBalancingPolicy getLoadBalancingPolicy() {\n+    return policy;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    LbPolicyConfiguration that = (LbPolicyConfiguration) o;\n+    return Objects.equals(routeLookupConfig, that.routeLookupConfig)\n+        && Objects.equals(policy, that.policy);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(routeLookupConfig, policy);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return MoreObjects.toStringHelper(this)\n+        .add(\"routeLookupConfig\", routeLookupConfig)\n+        .add(\"policy\", policy)\n+        .toString();\n+  }\n+\n+  /** ChildLoadBalancingPolicy is an elected child policy to delegate requests. */\n+  public static final class ChildLoadBalancingPolicy {\n+\n+    private final Map<String, Object> effectiveRawChildPolicy;\n+    private final LoadBalancerProvider effectiveLbProvider;\n+    private final String childPolicyConfigTargetFieldName;\n+    private final Map<RouteLookupRequest, BackoffPolicy> pendingRequests = new HashMap<>();\n+\n+    @VisibleForTesting\n+    ChildLoadBalancingPolicy(\n+        String childPolicyConfigTargetFieldName,\n+        Map<String, Object> effectiveRawChildPolicy,\n+        LoadBalancerProvider effectiveLbProvider) {\n+      checkArgument(\n+          childPolicyConfigTargetFieldName != null && !childPolicyConfigTargetFieldName.isEmpty(),\n+          \"childPolicyConfigTargetFieldName cannot be empty or null\");\n+      this.childPolicyConfigTargetFieldName = childPolicyConfigTargetFieldName;\n+      this.effectiveRawChildPolicy =\n+          checkNotNull(effectiveRawChildPolicy, \"effectiveRawChildPolicy\");\n+      this.effectiveLbProvider = checkNotNull(effectiveLbProvider, \"effectiveLbProvider\");\n+    }\n+\n+    /** Creates ChildLoadBalancingPolicy. */\n+    @SuppressWarnings(\"unchecked\")\n+    public static ChildLoadBalancingPolicy create(\n+        String childPolicyConfigTargetFieldName,\n+        List<Map<String, ?>> childPolicies) {\n+      Map<String, Object> effectiveChildPolicy = null;\n+      LoadBalancerProvider effectiveLbProvider = null;\n+      List<String> policyTried = new ArrayList<>();\n+\n+      LoadBalancerRegistry lbRegistry = LoadBalancerRegistry.getDefaultRegistry();\n+      for (Map<String, ?> childPolicy : childPolicies) {\n+        if (childPolicy.isEmpty()) {\n+          continue;\n+        }\n+        String policyName = Iterables.getOnlyElement(childPolicy.keySet());\n+        LoadBalancerProvider provider = lbRegistry.getProvider(policyName);\n+        if (provider != null) {\n+          effectiveLbProvider = provider;\n+          effectiveChildPolicy = Collections.unmodifiableMap(childPolicy);\n+          break;\n+        }\n+        policyTried.add(policyName);\n+      }\n+      checkState(\n+          effectiveChildPolicy != null,\n+          \"no valid childPolicy found, policy tried: %s\", policyTried);\n+      checkArgument(\n+          effectiveChildPolicy.size() == 1,\n+          \"childPolicy should have exactly one loadbalancing policy\");\n+      return\n+          new ChildLoadBalancingPolicy(\n+              childPolicyConfigTargetFieldName,\n+              (Map<String, Object>) effectiveChildPolicy.values().iterator().next(),\n+              effectiveLbProvider);\n+    }\n+\n+    /** Creates a child load balancer config for given target from elected raw child policy. */\n+    public Map<String, ?> getEffectiveChildPolicy(String target) {\n+      Map<String, Object> childPolicy = new HashMap<>(effectiveRawChildPolicy);\n+      childPolicy.put(childPolicyConfigTargetFieldName, target);\n+      return childPolicy;\n+    }\n+\n+    /** Returns the elected child {@link LoadBalancerProvider}. */\n+    public LoadBalancerProvider getEffectiveLbProvider() {\n+      return effectiveLbProvider;\n+    }\n+\n+    void addPendingRequest(RouteLookupRequest request, BackoffPolicy backoffPolicy) {\n+      checkNotNull(request, \"request\");\n+      checkNotNull(backoffPolicy, \"backoffPolicy\");\n+      BackoffPolicy existing = pendingRequests.put(request, backoffPolicy);\n+      checkState(\n+          existing == null,\n+          \"This is a bug, there should be at most one outstanding pending request\");\n+    }\n+\n+    void removePendingRequest(RouteLookupRequest request) {\n+      BackoffPolicy policy = pendingRequests.remove(request);\n+      checkState(policy != null, \"This is a bug, untracked pending request found\");\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      ChildLoadBalancingPolicy that = (ChildLoadBalancingPolicy) o;\n+      return Objects.equals(effectiveRawChildPolicy, that.effectiveRawChildPolicy)\n+          && Objects.equals(effectiveLbProvider, that.effectiveLbProvider)\n+          && Objects.equals(childPolicyConfigTargetFieldName, that.childPolicyConfigTargetFieldName)\n+          && Objects.equals(pendingRequests, that.pendingRequests);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return\n+          Objects\n+              .hash(\n+                  effectiveRawChildPolicy,\n+                  effectiveLbProvider,\n+                  childPolicyConfigTargetFieldName,\n+                  pendingRequests);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return MoreObjects.toStringHelper(this)\n+          .add(\"effectiveRawChildPolicy\", effectiveRawChildPolicy)\n+          .add(\"effectiveLbProvider\", effectiveLbProvider)\n+          .add(\"childPolicyConfigTargetFieldName\", childPolicyConfigTargetFieldName)\n+          .add(\"pendingRequests\", pendingRequests)\n+          .toString();\n+    }\n+  }\n+\n+  /**\n+   * ChildPolicyWrapper is a wrapper class for child load balancing policy with associated helper /\n+   * utility classes to manage the child policy.\n+   */\n+  static final class ChildPolicyWrapper implements Closeable {\n+\n+    @VisibleForTesting\n+    static final Map<String /* target */, RefCountedChildPolicyWrapper> childPolicyMap =\n+        new HashMap<>();\n+\n+    private final String target;\n+    @Nullable\n+    private ChildLoadBalancingPolicy childPolicy;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMyMTExMg=="}, "originalCommit": {"oid": "c45c46caab0e671cffe5a4c85185a0d91e4ebcc7"}, "originalPosition": 225}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODExMTA3OnYy", "diffSide": "RIGHT", "path": "rls/src/main/java/io/grpc/rls/internal/LbPolicyConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxODo0MDo1N1rOGHZGQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMzowNjoyOVrOGHfd4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQwNDQxOQ==", "bodyText": "This map is shared for the whole JVM for all channels to totally different servers. This worries me.  Also the map needs synchronization.", "url": "https://github.com/grpc/grpc-java/pull/6883#discussion_r410404419", "createdAt": "2020-04-17T18:40:57Z", "author": {"login": "dapengzhang0"}, "path": "rls/src/main/java/io/grpc/rls/internal/LbPolicyConfiguration.java", "diffHunk": "@@ -0,0 +1,372 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls.internal;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.collect.Iterables;\n+import io.grpc.ConnectivityState;\n+import io.grpc.ConnectivityStateInfo;\n+import io.grpc.LoadBalancer.Helper;\n+import io.grpc.LoadBalancer.SubchannelPicker;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.LoadBalancerRegistry;\n+import io.grpc.internal.BackoffPolicy;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupConfig;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupRequest;\n+import java.io.Closeable;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.annotation.Nullable;\n+\n+/** Configuration for RLS load balancing policy. */\n+public final class LbPolicyConfiguration {\n+\n+  private final RouteLookupConfig routeLookupConfig;\n+  private final ChildLoadBalancingPolicy policy;\n+\n+  public LbPolicyConfiguration(\n+      RouteLookupConfig routeLookupConfig, ChildLoadBalancingPolicy policy) {\n+    this.routeLookupConfig = checkNotNull(routeLookupConfig, \"routeLookupConfig\");\n+    this.policy = checkNotNull(policy, \"policy\");\n+  }\n+\n+  public RouteLookupConfig getRouteLookupConfig() {\n+    return routeLookupConfig;\n+  }\n+\n+  public ChildLoadBalancingPolicy getLoadBalancingPolicy() {\n+    return policy;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    LbPolicyConfiguration that = (LbPolicyConfiguration) o;\n+    return Objects.equals(routeLookupConfig, that.routeLookupConfig)\n+        && Objects.equals(policy, that.policy);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(routeLookupConfig, policy);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return MoreObjects.toStringHelper(this)\n+        .add(\"routeLookupConfig\", routeLookupConfig)\n+        .add(\"policy\", policy)\n+        .toString();\n+  }\n+\n+  /** ChildLoadBalancingPolicy is an elected child policy to delegate requests. */\n+  public static final class ChildLoadBalancingPolicy {\n+\n+    private final Map<String, Object> effectiveRawChildPolicy;\n+    private final LoadBalancerProvider effectiveLbProvider;\n+    private final String childPolicyConfigTargetFieldName;\n+    private final Map<RouteLookupRequest, BackoffPolicy> pendingRequests = new HashMap<>();\n+\n+    @VisibleForTesting\n+    ChildLoadBalancingPolicy(\n+        String childPolicyConfigTargetFieldName,\n+        Map<String, Object> effectiveRawChildPolicy,\n+        LoadBalancerProvider effectiveLbProvider) {\n+      checkArgument(\n+          childPolicyConfigTargetFieldName != null && !childPolicyConfigTargetFieldName.isEmpty(),\n+          \"childPolicyConfigTargetFieldName cannot be empty or null\");\n+      this.childPolicyConfigTargetFieldName = childPolicyConfigTargetFieldName;\n+      this.effectiveRawChildPolicy =\n+          checkNotNull(effectiveRawChildPolicy, \"effectiveRawChildPolicy\");\n+      this.effectiveLbProvider = checkNotNull(effectiveLbProvider, \"effectiveLbProvider\");\n+    }\n+\n+    /** Creates ChildLoadBalancingPolicy. */\n+    @SuppressWarnings(\"unchecked\")\n+    public static ChildLoadBalancingPolicy create(\n+        String childPolicyConfigTargetFieldName,\n+        List<Map<String, ?>> childPolicies) {\n+      Map<String, Object> effectiveChildPolicy = null;\n+      LoadBalancerProvider effectiveLbProvider = null;\n+      List<String> policyTried = new ArrayList<>();\n+\n+      LoadBalancerRegistry lbRegistry = LoadBalancerRegistry.getDefaultRegistry();\n+      for (Map<String, ?> childPolicy : childPolicies) {\n+        if (childPolicy.isEmpty()) {\n+          continue;\n+        }\n+        String policyName = Iterables.getOnlyElement(childPolicy.keySet());\n+        LoadBalancerProvider provider = lbRegistry.getProvider(policyName);\n+        if (provider != null) {\n+          effectiveLbProvider = provider;\n+          effectiveChildPolicy = Collections.unmodifiableMap(childPolicy);\n+          break;\n+        }\n+        policyTried.add(policyName);\n+      }\n+      checkState(\n+          effectiveChildPolicy != null,\n+          \"no valid childPolicy found, policy tried: %s\", policyTried);\n+      checkArgument(\n+          effectiveChildPolicy.size() == 1,\n+          \"childPolicy should have exactly one loadbalancing policy\");\n+      return\n+          new ChildLoadBalancingPolicy(\n+              childPolicyConfigTargetFieldName,\n+              (Map<String, Object>) effectiveChildPolicy.values().iterator().next(),\n+              effectiveLbProvider);\n+    }\n+\n+    /** Creates a child load balancer config for given target from elected raw child policy. */\n+    public Map<String, ?> getEffectiveChildPolicy(String target) {\n+      Map<String, Object> childPolicy = new HashMap<>(effectiveRawChildPolicy);\n+      childPolicy.put(childPolicyConfigTargetFieldName, target);\n+      return childPolicy;\n+    }\n+\n+    /** Returns the elected child {@link LoadBalancerProvider}. */\n+    public LoadBalancerProvider getEffectiveLbProvider() {\n+      return effectiveLbProvider;\n+    }\n+\n+    void addPendingRequest(RouteLookupRequest request, BackoffPolicy backoffPolicy) {\n+      checkNotNull(request, \"request\");\n+      checkNotNull(backoffPolicy, \"backoffPolicy\");\n+      BackoffPolicy existing = pendingRequests.put(request, backoffPolicy);\n+      checkState(\n+          existing == null,\n+          \"This is a bug, there should be at most one outstanding pending request\");\n+    }\n+\n+    void removePendingRequest(RouteLookupRequest request) {\n+      BackoffPolicy policy = pendingRequests.remove(request);\n+      checkState(policy != null, \"This is a bug, untracked pending request found\");\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      ChildLoadBalancingPolicy that = (ChildLoadBalancingPolicy) o;\n+      return Objects.equals(effectiveRawChildPolicy, that.effectiveRawChildPolicy)\n+          && Objects.equals(effectiveLbProvider, that.effectiveLbProvider)\n+          && Objects.equals(childPolicyConfigTargetFieldName, that.childPolicyConfigTargetFieldName)\n+          && Objects.equals(pendingRequests, that.pendingRequests);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return\n+          Objects\n+              .hash(\n+                  effectiveRawChildPolicy,\n+                  effectiveLbProvider,\n+                  childPolicyConfigTargetFieldName,\n+                  pendingRequests);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return MoreObjects.toStringHelper(this)\n+          .add(\"effectiveRawChildPolicy\", effectiveRawChildPolicy)\n+          .add(\"effectiveLbProvider\", effectiveLbProvider)\n+          .add(\"childPolicyConfigTargetFieldName\", childPolicyConfigTargetFieldName)\n+          .add(\"pendingRequests\", pendingRequests)\n+          .toString();\n+    }\n+  }\n+\n+  /**\n+   * ChildPolicyWrapper is a wrapper class for child load balancing policy with associated helper /\n+   * utility classes to manage the child policy.\n+   */\n+  static final class ChildPolicyWrapper implements Closeable {\n+\n+    @VisibleForTesting\n+    static final Map<String /* target */, RefCountedChildPolicyWrapper> childPolicyMap =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c45c46caab0e671cffe5a4c85185a0d91e4ebcc7"}, "originalPosition": 220}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwODc3MQ==", "bodyText": "yes target can be same. good catch. i refactored out this factory part. it is not globally shared, i didn't add any synchronization. future implementation always call it with lock if this can justify it.", "url": "https://github.com/grpc/grpc-java/pull/6883#discussion_r410508771", "createdAt": "2020-04-17T23:06:29Z", "author": {"login": "creamsoup"}, "path": "rls/src/main/java/io/grpc/rls/internal/LbPolicyConfiguration.java", "diffHunk": "@@ -0,0 +1,372 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls.internal;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.collect.Iterables;\n+import io.grpc.ConnectivityState;\n+import io.grpc.ConnectivityStateInfo;\n+import io.grpc.LoadBalancer.Helper;\n+import io.grpc.LoadBalancer.SubchannelPicker;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.LoadBalancerRegistry;\n+import io.grpc.internal.BackoffPolicy;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupConfig;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupRequest;\n+import java.io.Closeable;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.annotation.Nullable;\n+\n+/** Configuration for RLS load balancing policy. */\n+public final class LbPolicyConfiguration {\n+\n+  private final RouteLookupConfig routeLookupConfig;\n+  private final ChildLoadBalancingPolicy policy;\n+\n+  public LbPolicyConfiguration(\n+      RouteLookupConfig routeLookupConfig, ChildLoadBalancingPolicy policy) {\n+    this.routeLookupConfig = checkNotNull(routeLookupConfig, \"routeLookupConfig\");\n+    this.policy = checkNotNull(policy, \"policy\");\n+  }\n+\n+  public RouteLookupConfig getRouteLookupConfig() {\n+    return routeLookupConfig;\n+  }\n+\n+  public ChildLoadBalancingPolicy getLoadBalancingPolicy() {\n+    return policy;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    LbPolicyConfiguration that = (LbPolicyConfiguration) o;\n+    return Objects.equals(routeLookupConfig, that.routeLookupConfig)\n+        && Objects.equals(policy, that.policy);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(routeLookupConfig, policy);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return MoreObjects.toStringHelper(this)\n+        .add(\"routeLookupConfig\", routeLookupConfig)\n+        .add(\"policy\", policy)\n+        .toString();\n+  }\n+\n+  /** ChildLoadBalancingPolicy is an elected child policy to delegate requests. */\n+  public static final class ChildLoadBalancingPolicy {\n+\n+    private final Map<String, Object> effectiveRawChildPolicy;\n+    private final LoadBalancerProvider effectiveLbProvider;\n+    private final String childPolicyConfigTargetFieldName;\n+    private final Map<RouteLookupRequest, BackoffPolicy> pendingRequests = new HashMap<>();\n+\n+    @VisibleForTesting\n+    ChildLoadBalancingPolicy(\n+        String childPolicyConfigTargetFieldName,\n+        Map<String, Object> effectiveRawChildPolicy,\n+        LoadBalancerProvider effectiveLbProvider) {\n+      checkArgument(\n+          childPolicyConfigTargetFieldName != null && !childPolicyConfigTargetFieldName.isEmpty(),\n+          \"childPolicyConfigTargetFieldName cannot be empty or null\");\n+      this.childPolicyConfigTargetFieldName = childPolicyConfigTargetFieldName;\n+      this.effectiveRawChildPolicy =\n+          checkNotNull(effectiveRawChildPolicy, \"effectiveRawChildPolicy\");\n+      this.effectiveLbProvider = checkNotNull(effectiveLbProvider, \"effectiveLbProvider\");\n+    }\n+\n+    /** Creates ChildLoadBalancingPolicy. */\n+    @SuppressWarnings(\"unchecked\")\n+    public static ChildLoadBalancingPolicy create(\n+        String childPolicyConfigTargetFieldName,\n+        List<Map<String, ?>> childPolicies) {\n+      Map<String, Object> effectiveChildPolicy = null;\n+      LoadBalancerProvider effectiveLbProvider = null;\n+      List<String> policyTried = new ArrayList<>();\n+\n+      LoadBalancerRegistry lbRegistry = LoadBalancerRegistry.getDefaultRegistry();\n+      for (Map<String, ?> childPolicy : childPolicies) {\n+        if (childPolicy.isEmpty()) {\n+          continue;\n+        }\n+        String policyName = Iterables.getOnlyElement(childPolicy.keySet());\n+        LoadBalancerProvider provider = lbRegistry.getProvider(policyName);\n+        if (provider != null) {\n+          effectiveLbProvider = provider;\n+          effectiveChildPolicy = Collections.unmodifiableMap(childPolicy);\n+          break;\n+        }\n+        policyTried.add(policyName);\n+      }\n+      checkState(\n+          effectiveChildPolicy != null,\n+          \"no valid childPolicy found, policy tried: %s\", policyTried);\n+      checkArgument(\n+          effectiveChildPolicy.size() == 1,\n+          \"childPolicy should have exactly one loadbalancing policy\");\n+      return\n+          new ChildLoadBalancingPolicy(\n+              childPolicyConfigTargetFieldName,\n+              (Map<String, Object>) effectiveChildPolicy.values().iterator().next(),\n+              effectiveLbProvider);\n+    }\n+\n+    /** Creates a child load balancer config for given target from elected raw child policy. */\n+    public Map<String, ?> getEffectiveChildPolicy(String target) {\n+      Map<String, Object> childPolicy = new HashMap<>(effectiveRawChildPolicy);\n+      childPolicy.put(childPolicyConfigTargetFieldName, target);\n+      return childPolicy;\n+    }\n+\n+    /** Returns the elected child {@link LoadBalancerProvider}. */\n+    public LoadBalancerProvider getEffectiveLbProvider() {\n+      return effectiveLbProvider;\n+    }\n+\n+    void addPendingRequest(RouteLookupRequest request, BackoffPolicy backoffPolicy) {\n+      checkNotNull(request, \"request\");\n+      checkNotNull(backoffPolicy, \"backoffPolicy\");\n+      BackoffPolicy existing = pendingRequests.put(request, backoffPolicy);\n+      checkState(\n+          existing == null,\n+          \"This is a bug, there should be at most one outstanding pending request\");\n+    }\n+\n+    void removePendingRequest(RouteLookupRequest request) {\n+      BackoffPolicy policy = pendingRequests.remove(request);\n+      checkState(policy != null, \"This is a bug, untracked pending request found\");\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      ChildLoadBalancingPolicy that = (ChildLoadBalancingPolicy) o;\n+      return Objects.equals(effectiveRawChildPolicy, that.effectiveRawChildPolicy)\n+          && Objects.equals(effectiveLbProvider, that.effectiveLbProvider)\n+          && Objects.equals(childPolicyConfigTargetFieldName, that.childPolicyConfigTargetFieldName)\n+          && Objects.equals(pendingRequests, that.pendingRequests);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return\n+          Objects\n+              .hash(\n+                  effectiveRawChildPolicy,\n+                  effectiveLbProvider,\n+                  childPolicyConfigTargetFieldName,\n+                  pendingRequests);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return MoreObjects.toStringHelper(this)\n+          .add(\"effectiveRawChildPolicy\", effectiveRawChildPolicy)\n+          .add(\"effectiveLbProvider\", effectiveLbProvider)\n+          .add(\"childPolicyConfigTargetFieldName\", childPolicyConfigTargetFieldName)\n+          .add(\"pendingRequests\", pendingRequests)\n+          .toString();\n+    }\n+  }\n+\n+  /**\n+   * ChildPolicyWrapper is a wrapper class for child load balancing policy with associated helper /\n+   * utility classes to manage the child policy.\n+   */\n+  static final class ChildPolicyWrapper implements Closeable {\n+\n+    @VisibleForTesting\n+    static final Map<String /* target */, RefCountedChildPolicyWrapper> childPolicyMap =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQwNDQxOQ=="}, "originalCommit": {"oid": "c45c46caab0e671cffe5a4c85185a0d91e4ebcc7"}, "originalPosition": 220}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODUyNDc1OnYy", "diffSide": "RIGHT", "path": "rls/src/main/java/io/grpc/rls/internal/LbPolicyConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMToxMDo0NVrOGHdNcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMzowNTo1NVrOGHfdXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ3MTc5NA==", "bodyText": "Seems you can just implement LrsLoadBalancerProvider.parseLoadBalancingPolicyConfig() by merging master.  Return ConfigOrError instead of throw.", "url": "https://github.com/grpc/grpc-java/pull/6883#discussion_r410471794", "createdAt": "2020-04-17T21:10:45Z", "author": {"login": "dapengzhang0"}, "path": "rls/src/main/java/io/grpc/rls/internal/LbPolicyConfiguration.java", "diffHunk": "@@ -0,0 +1,347 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls.internal;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.collect.Iterables;\n+import io.grpc.ConnectivityState;\n+import io.grpc.ConnectivityStateInfo;\n+import io.grpc.LoadBalancer.Helper;\n+import io.grpc.LoadBalancer.SubchannelPicker;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.LoadBalancerRegistry;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupConfig;\n+import java.io.Closeable;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.annotation.Nullable;\n+\n+/** Configuration for RLS load balancing policy. */\n+public final class LbPolicyConfiguration {\n+\n+  private final RouteLookupConfig routeLookupConfig;\n+  private final ChildLoadBalancingPolicy policy;\n+\n+  public LbPolicyConfiguration(\n+      RouteLookupConfig routeLookupConfig, ChildLoadBalancingPolicy policy) {\n+    this.routeLookupConfig = checkNotNull(routeLookupConfig, \"routeLookupConfig\");\n+    this.policy = checkNotNull(policy, \"policy\");\n+  }\n+\n+  public RouteLookupConfig getRouteLookupConfig() {\n+    return routeLookupConfig;\n+  }\n+\n+  public ChildLoadBalancingPolicy getLoadBalancingPolicy() {\n+    return policy;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    LbPolicyConfiguration that = (LbPolicyConfiguration) o;\n+    return Objects.equals(routeLookupConfig, that.routeLookupConfig)\n+        && Objects.equals(policy, that.policy);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(routeLookupConfig, policy);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return MoreObjects.toStringHelper(this)\n+        .add(\"routeLookupConfig\", routeLookupConfig)\n+        .add(\"policy\", policy)\n+        .toString();\n+  }\n+\n+  /** ChildLoadBalancingPolicy is an elected child policy to delegate requests. */\n+  public static final class ChildLoadBalancingPolicy {\n+\n+    private final Map<String, Object> effectiveRawChildPolicy;\n+    private final LoadBalancerProvider effectiveLbProvider;\n+    private final String targetFieldName;\n+\n+    @VisibleForTesting\n+    ChildLoadBalancingPolicy(\n+        String targetFieldName,\n+        Map<String, Object> effectiveRawChildPolicy,\n+        LoadBalancerProvider effectiveLbProvider) {\n+      checkArgument(\n+          targetFieldName != null && !targetFieldName.isEmpty(),\n+          \"targetFieldName cannot be empty or null\");\n+      this.targetFieldName = targetFieldName;\n+      this.effectiveRawChildPolicy =\n+          checkNotNull(effectiveRawChildPolicy, \"effectiveRawChildPolicy\");\n+      this.effectiveLbProvider = checkNotNull(effectiveLbProvider, \"effectiveLbProvider\");\n+    }\n+\n+    /** Creates ChildLoadBalancingPolicy. */\n+    @SuppressWarnings(\"unchecked\")\n+    public static ChildLoadBalancingPolicy create(\n+        String childPolicyConfigTargetFieldName,\n+        List<Map<String, ?>> childPolicies) {\n+      Map<String, Object> effectiveChildPolicy = null;\n+      LoadBalancerProvider effectiveLbProvider = null;\n+      List<String> policyTried = new ArrayList<>();\n+\n+      LoadBalancerRegistry lbRegistry = LoadBalancerRegistry.getDefaultRegistry();\n+      for (Map<String, ?> childPolicy : childPolicies) {\n+        if (childPolicy.isEmpty()) {\n+          continue;\n+        }\n+        String policyName = Iterables.getOnlyElement(childPolicy.keySet());\n+        LoadBalancerProvider provider = lbRegistry.getProvider(policyName);\n+        if (provider != null) {\n+          effectiveLbProvider = provider;\n+          effectiveChildPolicy = Collections.unmodifiableMap(childPolicy);\n+          break;\n+        }\n+        policyTried.add(policyName);\n+      }\n+      checkState(\n+          effectiveChildPolicy != null,\n+          \"no valid childPolicy found, policy tried: %s\", policyTried);\n+      checkArgument(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e921201ca04cda85979dd0fa0b0dfb478a3a4eae"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwODYzOQ==", "bodyText": "discussed offline, the RlsLbProvider.parseLoadBalancingPolicyConfig() has more logic than just parsing ChildLoadBalancingPolicy. to imply the parsing can be fail, it will throw checked exception.", "url": "https://github.com/grpc/grpc-java/pull/6883#discussion_r410508639", "createdAt": "2020-04-17T23:05:55Z", "author": {"login": "creamsoup"}, "path": "rls/src/main/java/io/grpc/rls/internal/LbPolicyConfiguration.java", "diffHunk": "@@ -0,0 +1,347 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls.internal;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.MoreObjects;\n+import com.google.common.collect.Iterables;\n+import io.grpc.ConnectivityState;\n+import io.grpc.ConnectivityStateInfo;\n+import io.grpc.LoadBalancer.Helper;\n+import io.grpc.LoadBalancer.SubchannelPicker;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.LoadBalancerRegistry;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupConfig;\n+import java.io.Closeable;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.annotation.Nullable;\n+\n+/** Configuration for RLS load balancing policy. */\n+public final class LbPolicyConfiguration {\n+\n+  private final RouteLookupConfig routeLookupConfig;\n+  private final ChildLoadBalancingPolicy policy;\n+\n+  public LbPolicyConfiguration(\n+      RouteLookupConfig routeLookupConfig, ChildLoadBalancingPolicy policy) {\n+    this.routeLookupConfig = checkNotNull(routeLookupConfig, \"routeLookupConfig\");\n+    this.policy = checkNotNull(policy, \"policy\");\n+  }\n+\n+  public RouteLookupConfig getRouteLookupConfig() {\n+    return routeLookupConfig;\n+  }\n+\n+  public ChildLoadBalancingPolicy getLoadBalancingPolicy() {\n+    return policy;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    LbPolicyConfiguration that = (LbPolicyConfiguration) o;\n+    return Objects.equals(routeLookupConfig, that.routeLookupConfig)\n+        && Objects.equals(policy, that.policy);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(routeLookupConfig, policy);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return MoreObjects.toStringHelper(this)\n+        .add(\"routeLookupConfig\", routeLookupConfig)\n+        .add(\"policy\", policy)\n+        .toString();\n+  }\n+\n+  /** ChildLoadBalancingPolicy is an elected child policy to delegate requests. */\n+  public static final class ChildLoadBalancingPolicy {\n+\n+    private final Map<String, Object> effectiveRawChildPolicy;\n+    private final LoadBalancerProvider effectiveLbProvider;\n+    private final String targetFieldName;\n+\n+    @VisibleForTesting\n+    ChildLoadBalancingPolicy(\n+        String targetFieldName,\n+        Map<String, Object> effectiveRawChildPolicy,\n+        LoadBalancerProvider effectiveLbProvider) {\n+      checkArgument(\n+          targetFieldName != null && !targetFieldName.isEmpty(),\n+          \"targetFieldName cannot be empty or null\");\n+      this.targetFieldName = targetFieldName;\n+      this.effectiveRawChildPolicy =\n+          checkNotNull(effectiveRawChildPolicy, \"effectiveRawChildPolicy\");\n+      this.effectiveLbProvider = checkNotNull(effectiveLbProvider, \"effectiveLbProvider\");\n+    }\n+\n+    /** Creates ChildLoadBalancingPolicy. */\n+    @SuppressWarnings(\"unchecked\")\n+    public static ChildLoadBalancingPolicy create(\n+        String childPolicyConfigTargetFieldName,\n+        List<Map<String, ?>> childPolicies) {\n+      Map<String, Object> effectiveChildPolicy = null;\n+      LoadBalancerProvider effectiveLbProvider = null;\n+      List<String> policyTried = new ArrayList<>();\n+\n+      LoadBalancerRegistry lbRegistry = LoadBalancerRegistry.getDefaultRegistry();\n+      for (Map<String, ?> childPolicy : childPolicies) {\n+        if (childPolicy.isEmpty()) {\n+          continue;\n+        }\n+        String policyName = Iterables.getOnlyElement(childPolicy.keySet());\n+        LoadBalancerProvider provider = lbRegistry.getProvider(policyName);\n+        if (provider != null) {\n+          effectiveLbProvider = provider;\n+          effectiveChildPolicy = Collections.unmodifiableMap(childPolicy);\n+          break;\n+        }\n+        policyTried.add(policyName);\n+      }\n+      checkState(\n+          effectiveChildPolicy != null,\n+          \"no valid childPolicy found, policy tried: %s\", policyTried);\n+      checkArgument(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ3MTc5NA=="}, "originalCommit": {"oid": "e921201ca04cda85979dd0fa0b0dfb478a3a4eae"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODg4MzU3OnYy", "diffSide": "RIGHT", "path": "rls/src/main/java/io/grpc/rls/internal/LbPolicyConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwMDo0NzoyM1rOGHglIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwMTo0NDoxMlrOGIAEBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUyNzAxMQ==", "bodyText": "Maybe you can turn off writableStackTrace.", "url": "https://github.com/grpc/grpc-java/pull/6883#discussion_r410527011", "createdAt": "2020-04-18T00:47:23Z", "author": {"login": "dapengzhang0"}, "path": "rls/src/main/java/io/grpc/rls/internal/LbPolicyConfiguration.java", "diffHunk": "@@ -344,4 +348,14 @@ public String toString() {\n           .toString();\n     }\n   }\n+\n+  /** Exception thrown when attempting to parse child policy encountered parsing issue. */\n+  public static final class InvalidChildPolicyConfigException extends Exception {\n+\n+    private static final long serialVersionUID = 0L;\n+\n+    public InvalidChildPolicyConfigException(String message) {\n+      super(message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4b4a9a655f02e092524df8c5dcf1207d99ec2f7"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA0MjgyMw==", "bodyText": "done.", "url": "https://github.com/grpc/grpc-java/pull/6883#discussion_r411042823", "createdAt": "2020-04-20T01:44:12Z", "author": {"login": "creamsoup"}, "path": "rls/src/main/java/io/grpc/rls/internal/LbPolicyConfiguration.java", "diffHunk": "@@ -344,4 +348,14 @@ public String toString() {\n           .toString();\n     }\n   }\n+\n+  /** Exception thrown when attempting to parse child policy encountered parsing issue. */\n+  public static final class InvalidChildPolicyConfigException extends Exception {\n+\n+    private static final long serialVersionUID = 0L;\n+\n+    public InvalidChildPolicyConfigException(String message) {\n+      super(message);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUyNzAxMQ=="}, "originalCommit": {"oid": "e4b4a9a655f02e092524df8c5dcf1207d99ec2f7"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzkxMzI1OnYy", "diffSide": "RIGHT", "path": "rls/src/main/java/io/grpc/rls/internal/LbPolicyConfiguration.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMTo1ODo0M1rOGIpa6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMzo0ODoyMVrOGIsVSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcyMDQyNw==", "bodyText": "What's the expected usecase here? getObject() once and returnObject() twice()?", "url": "https://github.com/grpc/grpc-java/pull/6883#discussion_r411720427", "createdAt": "2020-04-20T21:58:43Z", "author": {"login": "dapengzhang0"}, "path": "rls/src/main/java/io/grpc/rls/internal/LbPolicyConfiguration.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls.internal;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.MoreObjects;\n+import io.grpc.ConnectivityState;\n+import io.grpc.ConnectivityStateInfo;\n+import io.grpc.LoadBalancer.SubchannelPicker;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.LoadBalancerRegistry;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.rls.internal.ChildLoadBalancerHelper.ChildLoadBalancerHelperProvider;\n+import io.grpc.rls.internal.ChildPolicyReportingHelper.ChildLbStatusListener;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupConfig;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.annotation.Nullable;\n+\n+/** Configuration for RLS load balancing policy. */\n+public final class LbPolicyConfiguration {\n+\n+  private final RouteLookupConfig routeLookupConfig;\n+  private final ChildLoadBalancingPolicy policy;\n+\n+  public LbPolicyConfiguration(\n+      RouteLookupConfig routeLookupConfig, ChildLoadBalancingPolicy policy) {\n+    this.routeLookupConfig = checkNotNull(routeLookupConfig, \"routeLookupConfig\");\n+    this.policy = checkNotNull(policy, \"policy\");\n+  }\n+\n+  public RouteLookupConfig getRouteLookupConfig() {\n+    return routeLookupConfig;\n+  }\n+\n+  public ChildLoadBalancingPolicy getLoadBalancingPolicy() {\n+    return policy;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    LbPolicyConfiguration that = (LbPolicyConfiguration) o;\n+    return Objects.equals(routeLookupConfig, that.routeLookupConfig)\n+        && Objects.equals(policy, that.policy);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(routeLookupConfig, policy);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return MoreObjects.toStringHelper(this)\n+        .add(\"routeLookupConfig\", routeLookupConfig)\n+        .add(\"policy\", policy)\n+        .toString();\n+  }\n+\n+  /** ChildLoadBalancingPolicy is an elected child policy to delegate requests. */\n+  public static final class ChildLoadBalancingPolicy {\n+\n+    private final Map<String, Object> effectiveRawChildPolicy;\n+    private final LoadBalancerProvider effectiveLbProvider;\n+    private final String targetFieldName;\n+\n+    @VisibleForTesting\n+    ChildLoadBalancingPolicy(\n+        String targetFieldName,\n+        Map<String, Object> effectiveRawChildPolicy,\n+        LoadBalancerProvider effectiveLbProvider) {\n+      checkArgument(\n+          targetFieldName != null && !targetFieldName.isEmpty(),\n+          \"targetFieldName cannot be empty or null\");\n+      this.targetFieldName = targetFieldName;\n+      this.effectiveRawChildPolicy =\n+          checkNotNull(effectiveRawChildPolicy, \"effectiveRawChildPolicy\");\n+      this.effectiveLbProvider = checkNotNull(effectiveLbProvider, \"effectiveLbProvider\");\n+    }\n+\n+    /** Creates ChildLoadBalancingPolicy. */\n+    @SuppressWarnings(\"unchecked\")\n+    public static ChildLoadBalancingPolicy create(\n+        String childPolicyConfigTargetFieldName, List<Map<String, ?>> childPolicies)\n+        throws InvalidChildPolicyConfigException {\n+      Map<String, Object> effectiveChildPolicy = null;\n+      LoadBalancerProvider effectiveLbProvider = null;\n+      List<String> policyTried = new ArrayList<>();\n+\n+      LoadBalancerRegistry lbRegistry = LoadBalancerRegistry.getDefaultRegistry();\n+      for (Map<String, ?> childPolicy : childPolicies) {\n+        if (childPolicy.isEmpty()) {\n+          continue;\n+        }\n+        if (childPolicy.size() != 1) {\n+          throw\n+              new InvalidChildPolicyConfigException(\n+                  \"childPolicy should have exactly one loadbalancing policy\");\n+        }\n+        String policyName = childPolicy.keySet().iterator().next();\n+        LoadBalancerProvider provider = lbRegistry.getProvider(policyName);\n+        if (provider != null) {\n+          effectiveLbProvider = provider;\n+          effectiveChildPolicy = Collections.unmodifiableMap(childPolicy);\n+          break;\n+        }\n+        policyTried.add(policyName);\n+      }\n+      if (effectiveChildPolicy == null) {\n+        throw\n+            new InvalidChildPolicyConfigException(\n+                String.format(\"no valid childPolicy found, policy tried: %s\", policyTried));\n+      }\n+      return\n+          new ChildLoadBalancingPolicy(\n+              childPolicyConfigTargetFieldName,\n+              (Map<String, Object>) effectiveChildPolicy.values().iterator().next(),\n+              effectiveLbProvider);\n+    }\n+\n+    /** Creates a child load balancer config for given target from elected raw child policy. */\n+    public Map<String, ?> getEffectiveChildPolicy(String target) {\n+      Map<String, Object> childPolicy = new HashMap<>(effectiveRawChildPolicy);\n+      childPolicy.put(targetFieldName, target);\n+      return childPolicy;\n+    }\n+\n+    /** Returns the elected child {@link LoadBalancerProvider}. */\n+    public LoadBalancerProvider getEffectiveLbProvider() {\n+      return effectiveLbProvider;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      ChildLoadBalancingPolicy that = (ChildLoadBalancingPolicy) o;\n+      return Objects.equals(effectiveRawChildPolicy, that.effectiveRawChildPolicy)\n+          && Objects.equals(effectiveLbProvider, that.effectiveLbProvider)\n+          && Objects.equals(targetFieldName, that.targetFieldName);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(effectiveRawChildPolicy, effectiveLbProvider, targetFieldName);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return MoreObjects.toStringHelper(this)\n+          .add(\"effectiveRawChildPolicy\", effectiveRawChildPolicy)\n+          .add(\"effectiveLbProvider\", effectiveLbProvider)\n+          .add(\"childPolicyConfigTargetFieldName\", targetFieldName)\n+          .toString();\n+    }\n+  }\n+\n+  /** Factory for {@link ChildPolicyWrapper}. */\n+  static final class RefCountedChildPolicyWrapperFactory {\n+    @VisibleForTesting\n+    final Map<String /* target */, RefCountedChildPolicyWrapper> childPolicyMap =\n+        new HashMap<>();\n+\n+    private final ChildLoadBalancerHelperProvider childLbHelperProvider;\n+    @Nullable\n+    private final ChildLbStatusListener childLbStatusListener;\n+\n+    public RefCountedChildPolicyWrapperFactory(\n+        ChildLoadBalancerHelperProvider childLbHelperProvider,\n+        @Nullable ChildLbStatusListener childLbStatusListener) {\n+      this.childLbHelperProvider = checkNotNull(childLbHelperProvider, \"childLbHelperProvider\");\n+      this.childLbStatusListener = childLbStatusListener;\n+    }\n+\n+    ChildPolicyWrapper createOrGet(String target) {\n+      // TODO(creamsoup) check if the target is valid or not\n+      ObjectPool<ChildPolicyWrapper> existing = childPolicyMap.get(target);\n+      if (existing != null) {\n+        return existing.getObject();\n+      }\n+      ChildPolicyWrapper childPolicyWrapper =\n+          new ChildPolicyWrapper(target, childLbHelperProvider, childLbStatusListener);\n+      RefCountedChildPolicyWrapper wrapper = RefCountedChildPolicyWrapper.of(childPolicyWrapper);\n+      childPolicyMap.put(target, wrapper);\n+      return childPolicyWrapper;\n+    }\n+\n+    void release(ChildPolicyWrapper childPolicyWrapper) {\n+      checkNotNull(childPolicyWrapper, \"childPolicyWrapper\");\n+      String target = childPolicyWrapper.getTarget();\n+      ObjectPool<ChildPolicyWrapper> existing = childPolicyMap.get(target);\n+      checkState(existing != null, \"Cannot access already released object\");\n+      if (existing.returnObject(childPolicyWrapper) == null) {\n+        childPolicyMap.remove(target);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * ChildPolicyWrapper is a wrapper class for child load balancing policy with associated helper /\n+   * utility classes to manage the child policy.\n+   */\n+  static final class ChildPolicyWrapper {\n+\n+    private final String target;\n+    private final ChildPolicyReportingHelper helper;\n+    private ConnectivityStateInfo connectivityStateInfo =\n+        ConnectivityStateInfo.forNonError(ConnectivityState.IDLE);\n+    private SubchannelPicker picker;\n+\n+    public ChildPolicyWrapper(\n+        String target,\n+        ChildLoadBalancerHelperProvider childLbHelperProvider,\n+        @Nullable  ChildLbStatusListener childLbStatusListener) {\n+      this.target = target;\n+      this.helper =\n+          new ChildPolicyReportingHelper(childLbHelperProvider, this, childLbStatusListener);\n+    }\n+\n+    String getTarget() {\n+      return target;\n+    }\n+\n+    void setPicker(SubchannelPicker picker) {\n+      this.picker = checkNotNull(picker, \"picker\");\n+    }\n+\n+    SubchannelPicker getPicker() {\n+      return picker;\n+    }\n+\n+    ChildPolicyReportingHelper getHelper() {\n+      return helper;\n+    }\n+\n+    void setConnectivityStateInfo(ConnectivityStateInfo connectivityStateInfo) {\n+      this.connectivityStateInfo = connectivityStateInfo;\n+    }\n+\n+    ConnectivityStateInfo getConnectivityStateInfo() {\n+      return connectivityStateInfo;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      ChildPolicyWrapper that = (ChildPolicyWrapper) o;\n+      return Objects.equals(target, that.target)\n+          && Objects.equals(helper, that.helper)\n+          && Objects.equals(connectivityStateInfo, that.connectivityStateInfo)\n+          && Objects.equals(picker, that.picker);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(target, helper, connectivityStateInfo, picker);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return MoreObjects.toStringHelper(this)\n+          .add(\"target\", target)\n+          .add(\"helper\", helper)\n+          .add(\"connectivityStateInfo\", connectivityStateInfo)\n+          .add(\"picker\", picker)\n+          .toString();\n+    }\n+  }\n+\n+  private static final class RefCountedChildPolicyWrapper\n+      implements ObjectPool<ChildPolicyWrapper> {\n+\n+    private final AtomicLong refCnt = new AtomicLong(1);\n+    @Nullable\n+    private ChildPolicyWrapper childPolicyWrapper;\n+\n+    private RefCountedChildPolicyWrapper(ChildPolicyWrapper childPolicyWrapper) {\n+      this.childPolicyWrapper = checkNotNull(childPolicyWrapper, \"childPolicyWrapper\");\n+    }\n+\n+    @Override\n+    public ChildPolicyWrapper getObject() {\n+      long curr = refCnt.getAndIncrement();\n+      if (curr <= 0) {\n+        throw new IllegalStateException(\"ChildPolicyWrapper is already released\");\n+      }\n+      return childPolicyWrapper;\n+    }\n+\n+    @Override\n+    @Nullable\n+    public ChildPolicyWrapper returnObject(Object object) {\n+      checkState(\n+          childPolicyWrapper == object,\n+          \"returned object doesn't match the pooled childPolicyWrapper\");\n+      long newCnt = refCnt.decrementAndGet();\n+      if (newCnt == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "527cd1198e09f7c85b524e266120ce574f040843"}, "originalPosition": 335}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0NTIzOQ==", "bodyText": "this handles when the object is just released, free up the reference.", "url": "https://github.com/grpc/grpc-java/pull/6883#discussion_r411745239", "createdAt": "2020-04-20T22:54:00Z", "author": {"login": "creamsoup"}, "path": "rls/src/main/java/io/grpc/rls/internal/LbPolicyConfiguration.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls.internal;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.MoreObjects;\n+import io.grpc.ConnectivityState;\n+import io.grpc.ConnectivityStateInfo;\n+import io.grpc.LoadBalancer.SubchannelPicker;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.LoadBalancerRegistry;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.rls.internal.ChildLoadBalancerHelper.ChildLoadBalancerHelperProvider;\n+import io.grpc.rls.internal.ChildPolicyReportingHelper.ChildLbStatusListener;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupConfig;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.annotation.Nullable;\n+\n+/** Configuration for RLS load balancing policy. */\n+public final class LbPolicyConfiguration {\n+\n+  private final RouteLookupConfig routeLookupConfig;\n+  private final ChildLoadBalancingPolicy policy;\n+\n+  public LbPolicyConfiguration(\n+      RouteLookupConfig routeLookupConfig, ChildLoadBalancingPolicy policy) {\n+    this.routeLookupConfig = checkNotNull(routeLookupConfig, \"routeLookupConfig\");\n+    this.policy = checkNotNull(policy, \"policy\");\n+  }\n+\n+  public RouteLookupConfig getRouteLookupConfig() {\n+    return routeLookupConfig;\n+  }\n+\n+  public ChildLoadBalancingPolicy getLoadBalancingPolicy() {\n+    return policy;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    LbPolicyConfiguration that = (LbPolicyConfiguration) o;\n+    return Objects.equals(routeLookupConfig, that.routeLookupConfig)\n+        && Objects.equals(policy, that.policy);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(routeLookupConfig, policy);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return MoreObjects.toStringHelper(this)\n+        .add(\"routeLookupConfig\", routeLookupConfig)\n+        .add(\"policy\", policy)\n+        .toString();\n+  }\n+\n+  /** ChildLoadBalancingPolicy is an elected child policy to delegate requests. */\n+  public static final class ChildLoadBalancingPolicy {\n+\n+    private final Map<String, Object> effectiveRawChildPolicy;\n+    private final LoadBalancerProvider effectiveLbProvider;\n+    private final String targetFieldName;\n+\n+    @VisibleForTesting\n+    ChildLoadBalancingPolicy(\n+        String targetFieldName,\n+        Map<String, Object> effectiveRawChildPolicy,\n+        LoadBalancerProvider effectiveLbProvider) {\n+      checkArgument(\n+          targetFieldName != null && !targetFieldName.isEmpty(),\n+          \"targetFieldName cannot be empty or null\");\n+      this.targetFieldName = targetFieldName;\n+      this.effectiveRawChildPolicy =\n+          checkNotNull(effectiveRawChildPolicy, \"effectiveRawChildPolicy\");\n+      this.effectiveLbProvider = checkNotNull(effectiveLbProvider, \"effectiveLbProvider\");\n+    }\n+\n+    /** Creates ChildLoadBalancingPolicy. */\n+    @SuppressWarnings(\"unchecked\")\n+    public static ChildLoadBalancingPolicy create(\n+        String childPolicyConfigTargetFieldName, List<Map<String, ?>> childPolicies)\n+        throws InvalidChildPolicyConfigException {\n+      Map<String, Object> effectiveChildPolicy = null;\n+      LoadBalancerProvider effectiveLbProvider = null;\n+      List<String> policyTried = new ArrayList<>();\n+\n+      LoadBalancerRegistry lbRegistry = LoadBalancerRegistry.getDefaultRegistry();\n+      for (Map<String, ?> childPolicy : childPolicies) {\n+        if (childPolicy.isEmpty()) {\n+          continue;\n+        }\n+        if (childPolicy.size() != 1) {\n+          throw\n+              new InvalidChildPolicyConfigException(\n+                  \"childPolicy should have exactly one loadbalancing policy\");\n+        }\n+        String policyName = childPolicy.keySet().iterator().next();\n+        LoadBalancerProvider provider = lbRegistry.getProvider(policyName);\n+        if (provider != null) {\n+          effectiveLbProvider = provider;\n+          effectiveChildPolicy = Collections.unmodifiableMap(childPolicy);\n+          break;\n+        }\n+        policyTried.add(policyName);\n+      }\n+      if (effectiveChildPolicy == null) {\n+        throw\n+            new InvalidChildPolicyConfigException(\n+                String.format(\"no valid childPolicy found, policy tried: %s\", policyTried));\n+      }\n+      return\n+          new ChildLoadBalancingPolicy(\n+              childPolicyConfigTargetFieldName,\n+              (Map<String, Object>) effectiveChildPolicy.values().iterator().next(),\n+              effectiveLbProvider);\n+    }\n+\n+    /** Creates a child load balancer config for given target from elected raw child policy. */\n+    public Map<String, ?> getEffectiveChildPolicy(String target) {\n+      Map<String, Object> childPolicy = new HashMap<>(effectiveRawChildPolicy);\n+      childPolicy.put(targetFieldName, target);\n+      return childPolicy;\n+    }\n+\n+    /** Returns the elected child {@link LoadBalancerProvider}. */\n+    public LoadBalancerProvider getEffectiveLbProvider() {\n+      return effectiveLbProvider;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      ChildLoadBalancingPolicy that = (ChildLoadBalancingPolicy) o;\n+      return Objects.equals(effectiveRawChildPolicy, that.effectiveRawChildPolicy)\n+          && Objects.equals(effectiveLbProvider, that.effectiveLbProvider)\n+          && Objects.equals(targetFieldName, that.targetFieldName);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(effectiveRawChildPolicy, effectiveLbProvider, targetFieldName);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return MoreObjects.toStringHelper(this)\n+          .add(\"effectiveRawChildPolicy\", effectiveRawChildPolicy)\n+          .add(\"effectiveLbProvider\", effectiveLbProvider)\n+          .add(\"childPolicyConfigTargetFieldName\", targetFieldName)\n+          .toString();\n+    }\n+  }\n+\n+  /** Factory for {@link ChildPolicyWrapper}. */\n+  static final class RefCountedChildPolicyWrapperFactory {\n+    @VisibleForTesting\n+    final Map<String /* target */, RefCountedChildPolicyWrapper> childPolicyMap =\n+        new HashMap<>();\n+\n+    private final ChildLoadBalancerHelperProvider childLbHelperProvider;\n+    @Nullable\n+    private final ChildLbStatusListener childLbStatusListener;\n+\n+    public RefCountedChildPolicyWrapperFactory(\n+        ChildLoadBalancerHelperProvider childLbHelperProvider,\n+        @Nullable ChildLbStatusListener childLbStatusListener) {\n+      this.childLbHelperProvider = checkNotNull(childLbHelperProvider, \"childLbHelperProvider\");\n+      this.childLbStatusListener = childLbStatusListener;\n+    }\n+\n+    ChildPolicyWrapper createOrGet(String target) {\n+      // TODO(creamsoup) check if the target is valid or not\n+      ObjectPool<ChildPolicyWrapper> existing = childPolicyMap.get(target);\n+      if (existing != null) {\n+        return existing.getObject();\n+      }\n+      ChildPolicyWrapper childPolicyWrapper =\n+          new ChildPolicyWrapper(target, childLbHelperProvider, childLbStatusListener);\n+      RefCountedChildPolicyWrapper wrapper = RefCountedChildPolicyWrapper.of(childPolicyWrapper);\n+      childPolicyMap.put(target, wrapper);\n+      return childPolicyWrapper;\n+    }\n+\n+    void release(ChildPolicyWrapper childPolicyWrapper) {\n+      checkNotNull(childPolicyWrapper, \"childPolicyWrapper\");\n+      String target = childPolicyWrapper.getTarget();\n+      ObjectPool<ChildPolicyWrapper> existing = childPolicyMap.get(target);\n+      checkState(existing != null, \"Cannot access already released object\");\n+      if (existing.returnObject(childPolicyWrapper) == null) {\n+        childPolicyMap.remove(target);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * ChildPolicyWrapper is a wrapper class for child load balancing policy with associated helper /\n+   * utility classes to manage the child policy.\n+   */\n+  static final class ChildPolicyWrapper {\n+\n+    private final String target;\n+    private final ChildPolicyReportingHelper helper;\n+    private ConnectivityStateInfo connectivityStateInfo =\n+        ConnectivityStateInfo.forNonError(ConnectivityState.IDLE);\n+    private SubchannelPicker picker;\n+\n+    public ChildPolicyWrapper(\n+        String target,\n+        ChildLoadBalancerHelperProvider childLbHelperProvider,\n+        @Nullable  ChildLbStatusListener childLbStatusListener) {\n+      this.target = target;\n+      this.helper =\n+          new ChildPolicyReportingHelper(childLbHelperProvider, this, childLbStatusListener);\n+    }\n+\n+    String getTarget() {\n+      return target;\n+    }\n+\n+    void setPicker(SubchannelPicker picker) {\n+      this.picker = checkNotNull(picker, \"picker\");\n+    }\n+\n+    SubchannelPicker getPicker() {\n+      return picker;\n+    }\n+\n+    ChildPolicyReportingHelper getHelper() {\n+      return helper;\n+    }\n+\n+    void setConnectivityStateInfo(ConnectivityStateInfo connectivityStateInfo) {\n+      this.connectivityStateInfo = connectivityStateInfo;\n+    }\n+\n+    ConnectivityStateInfo getConnectivityStateInfo() {\n+      return connectivityStateInfo;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      ChildPolicyWrapper that = (ChildPolicyWrapper) o;\n+      return Objects.equals(target, that.target)\n+          && Objects.equals(helper, that.helper)\n+          && Objects.equals(connectivityStateInfo, that.connectivityStateInfo)\n+          && Objects.equals(picker, that.picker);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(target, helper, connectivityStateInfo, picker);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return MoreObjects.toStringHelper(this)\n+          .add(\"target\", target)\n+          .add(\"helper\", helper)\n+          .add(\"connectivityStateInfo\", connectivityStateInfo)\n+          .add(\"picker\", picker)\n+          .toString();\n+    }\n+  }\n+\n+  private static final class RefCountedChildPolicyWrapper\n+      implements ObjectPool<ChildPolicyWrapper> {\n+\n+    private final AtomicLong refCnt = new AtomicLong(1);\n+    @Nullable\n+    private ChildPolicyWrapper childPolicyWrapper;\n+\n+    private RefCountedChildPolicyWrapper(ChildPolicyWrapper childPolicyWrapper) {\n+      this.childPolicyWrapper = checkNotNull(childPolicyWrapper, \"childPolicyWrapper\");\n+    }\n+\n+    @Override\n+    public ChildPolicyWrapper getObject() {\n+      long curr = refCnt.getAndIncrement();\n+      if (curr <= 0) {\n+        throw new IllegalStateException(\"ChildPolicyWrapper is already released\");\n+      }\n+      return childPolicyWrapper;\n+    }\n+\n+    @Override\n+    @Nullable\n+    public ChildPolicyWrapper returnObject(Object object) {\n+      checkState(\n+          childPolicyWrapper == object,\n+          \"returned object doesn't match the pooled childPolicyWrapper\");\n+      long newCnt = refCnt.decrementAndGet();\n+      if (newCnt == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcyMDQyNw=="}, "originalCommit": {"oid": "527cd1198e09f7c85b524e266120ce574f040843"}, "originalPosition": 335}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc1MDI2Ng==", "bodyText": "If you call x times getObject(), you need call x+1 times of returnObject() to get here, is that the contract?", "url": "https://github.com/grpc/grpc-java/pull/6883#discussion_r411750266", "createdAt": "2020-04-20T23:06:14Z", "author": {"login": "dapengzhang0"}, "path": "rls/src/main/java/io/grpc/rls/internal/LbPolicyConfiguration.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls.internal;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.MoreObjects;\n+import io.grpc.ConnectivityState;\n+import io.grpc.ConnectivityStateInfo;\n+import io.grpc.LoadBalancer.SubchannelPicker;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.LoadBalancerRegistry;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.rls.internal.ChildLoadBalancerHelper.ChildLoadBalancerHelperProvider;\n+import io.grpc.rls.internal.ChildPolicyReportingHelper.ChildLbStatusListener;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupConfig;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.annotation.Nullable;\n+\n+/** Configuration for RLS load balancing policy. */\n+public final class LbPolicyConfiguration {\n+\n+  private final RouteLookupConfig routeLookupConfig;\n+  private final ChildLoadBalancingPolicy policy;\n+\n+  public LbPolicyConfiguration(\n+      RouteLookupConfig routeLookupConfig, ChildLoadBalancingPolicy policy) {\n+    this.routeLookupConfig = checkNotNull(routeLookupConfig, \"routeLookupConfig\");\n+    this.policy = checkNotNull(policy, \"policy\");\n+  }\n+\n+  public RouteLookupConfig getRouteLookupConfig() {\n+    return routeLookupConfig;\n+  }\n+\n+  public ChildLoadBalancingPolicy getLoadBalancingPolicy() {\n+    return policy;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    LbPolicyConfiguration that = (LbPolicyConfiguration) o;\n+    return Objects.equals(routeLookupConfig, that.routeLookupConfig)\n+        && Objects.equals(policy, that.policy);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(routeLookupConfig, policy);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return MoreObjects.toStringHelper(this)\n+        .add(\"routeLookupConfig\", routeLookupConfig)\n+        .add(\"policy\", policy)\n+        .toString();\n+  }\n+\n+  /** ChildLoadBalancingPolicy is an elected child policy to delegate requests. */\n+  public static final class ChildLoadBalancingPolicy {\n+\n+    private final Map<String, Object> effectiveRawChildPolicy;\n+    private final LoadBalancerProvider effectiveLbProvider;\n+    private final String targetFieldName;\n+\n+    @VisibleForTesting\n+    ChildLoadBalancingPolicy(\n+        String targetFieldName,\n+        Map<String, Object> effectiveRawChildPolicy,\n+        LoadBalancerProvider effectiveLbProvider) {\n+      checkArgument(\n+          targetFieldName != null && !targetFieldName.isEmpty(),\n+          \"targetFieldName cannot be empty or null\");\n+      this.targetFieldName = targetFieldName;\n+      this.effectiveRawChildPolicy =\n+          checkNotNull(effectiveRawChildPolicy, \"effectiveRawChildPolicy\");\n+      this.effectiveLbProvider = checkNotNull(effectiveLbProvider, \"effectiveLbProvider\");\n+    }\n+\n+    /** Creates ChildLoadBalancingPolicy. */\n+    @SuppressWarnings(\"unchecked\")\n+    public static ChildLoadBalancingPolicy create(\n+        String childPolicyConfigTargetFieldName, List<Map<String, ?>> childPolicies)\n+        throws InvalidChildPolicyConfigException {\n+      Map<String, Object> effectiveChildPolicy = null;\n+      LoadBalancerProvider effectiveLbProvider = null;\n+      List<String> policyTried = new ArrayList<>();\n+\n+      LoadBalancerRegistry lbRegistry = LoadBalancerRegistry.getDefaultRegistry();\n+      for (Map<String, ?> childPolicy : childPolicies) {\n+        if (childPolicy.isEmpty()) {\n+          continue;\n+        }\n+        if (childPolicy.size() != 1) {\n+          throw\n+              new InvalidChildPolicyConfigException(\n+                  \"childPolicy should have exactly one loadbalancing policy\");\n+        }\n+        String policyName = childPolicy.keySet().iterator().next();\n+        LoadBalancerProvider provider = lbRegistry.getProvider(policyName);\n+        if (provider != null) {\n+          effectiveLbProvider = provider;\n+          effectiveChildPolicy = Collections.unmodifiableMap(childPolicy);\n+          break;\n+        }\n+        policyTried.add(policyName);\n+      }\n+      if (effectiveChildPolicy == null) {\n+        throw\n+            new InvalidChildPolicyConfigException(\n+                String.format(\"no valid childPolicy found, policy tried: %s\", policyTried));\n+      }\n+      return\n+          new ChildLoadBalancingPolicy(\n+              childPolicyConfigTargetFieldName,\n+              (Map<String, Object>) effectiveChildPolicy.values().iterator().next(),\n+              effectiveLbProvider);\n+    }\n+\n+    /** Creates a child load balancer config for given target from elected raw child policy. */\n+    public Map<String, ?> getEffectiveChildPolicy(String target) {\n+      Map<String, Object> childPolicy = new HashMap<>(effectiveRawChildPolicy);\n+      childPolicy.put(targetFieldName, target);\n+      return childPolicy;\n+    }\n+\n+    /** Returns the elected child {@link LoadBalancerProvider}. */\n+    public LoadBalancerProvider getEffectiveLbProvider() {\n+      return effectiveLbProvider;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      ChildLoadBalancingPolicy that = (ChildLoadBalancingPolicy) o;\n+      return Objects.equals(effectiveRawChildPolicy, that.effectiveRawChildPolicy)\n+          && Objects.equals(effectiveLbProvider, that.effectiveLbProvider)\n+          && Objects.equals(targetFieldName, that.targetFieldName);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(effectiveRawChildPolicy, effectiveLbProvider, targetFieldName);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return MoreObjects.toStringHelper(this)\n+          .add(\"effectiveRawChildPolicy\", effectiveRawChildPolicy)\n+          .add(\"effectiveLbProvider\", effectiveLbProvider)\n+          .add(\"childPolicyConfigTargetFieldName\", targetFieldName)\n+          .toString();\n+    }\n+  }\n+\n+  /** Factory for {@link ChildPolicyWrapper}. */\n+  static final class RefCountedChildPolicyWrapperFactory {\n+    @VisibleForTesting\n+    final Map<String /* target */, RefCountedChildPolicyWrapper> childPolicyMap =\n+        new HashMap<>();\n+\n+    private final ChildLoadBalancerHelperProvider childLbHelperProvider;\n+    @Nullable\n+    private final ChildLbStatusListener childLbStatusListener;\n+\n+    public RefCountedChildPolicyWrapperFactory(\n+        ChildLoadBalancerHelperProvider childLbHelperProvider,\n+        @Nullable ChildLbStatusListener childLbStatusListener) {\n+      this.childLbHelperProvider = checkNotNull(childLbHelperProvider, \"childLbHelperProvider\");\n+      this.childLbStatusListener = childLbStatusListener;\n+    }\n+\n+    ChildPolicyWrapper createOrGet(String target) {\n+      // TODO(creamsoup) check if the target is valid or not\n+      ObjectPool<ChildPolicyWrapper> existing = childPolicyMap.get(target);\n+      if (existing != null) {\n+        return existing.getObject();\n+      }\n+      ChildPolicyWrapper childPolicyWrapper =\n+          new ChildPolicyWrapper(target, childLbHelperProvider, childLbStatusListener);\n+      RefCountedChildPolicyWrapper wrapper = RefCountedChildPolicyWrapper.of(childPolicyWrapper);\n+      childPolicyMap.put(target, wrapper);\n+      return childPolicyWrapper;\n+    }\n+\n+    void release(ChildPolicyWrapper childPolicyWrapper) {\n+      checkNotNull(childPolicyWrapper, \"childPolicyWrapper\");\n+      String target = childPolicyWrapper.getTarget();\n+      ObjectPool<ChildPolicyWrapper> existing = childPolicyMap.get(target);\n+      checkState(existing != null, \"Cannot access already released object\");\n+      if (existing.returnObject(childPolicyWrapper) == null) {\n+        childPolicyMap.remove(target);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * ChildPolicyWrapper is a wrapper class for child load balancing policy with associated helper /\n+   * utility classes to manage the child policy.\n+   */\n+  static final class ChildPolicyWrapper {\n+\n+    private final String target;\n+    private final ChildPolicyReportingHelper helper;\n+    private ConnectivityStateInfo connectivityStateInfo =\n+        ConnectivityStateInfo.forNonError(ConnectivityState.IDLE);\n+    private SubchannelPicker picker;\n+\n+    public ChildPolicyWrapper(\n+        String target,\n+        ChildLoadBalancerHelperProvider childLbHelperProvider,\n+        @Nullable  ChildLbStatusListener childLbStatusListener) {\n+      this.target = target;\n+      this.helper =\n+          new ChildPolicyReportingHelper(childLbHelperProvider, this, childLbStatusListener);\n+    }\n+\n+    String getTarget() {\n+      return target;\n+    }\n+\n+    void setPicker(SubchannelPicker picker) {\n+      this.picker = checkNotNull(picker, \"picker\");\n+    }\n+\n+    SubchannelPicker getPicker() {\n+      return picker;\n+    }\n+\n+    ChildPolicyReportingHelper getHelper() {\n+      return helper;\n+    }\n+\n+    void setConnectivityStateInfo(ConnectivityStateInfo connectivityStateInfo) {\n+      this.connectivityStateInfo = connectivityStateInfo;\n+    }\n+\n+    ConnectivityStateInfo getConnectivityStateInfo() {\n+      return connectivityStateInfo;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      ChildPolicyWrapper that = (ChildPolicyWrapper) o;\n+      return Objects.equals(target, that.target)\n+          && Objects.equals(helper, that.helper)\n+          && Objects.equals(connectivityStateInfo, that.connectivityStateInfo)\n+          && Objects.equals(picker, that.picker);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(target, helper, connectivityStateInfo, picker);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return MoreObjects.toStringHelper(this)\n+          .add(\"target\", target)\n+          .add(\"helper\", helper)\n+          .add(\"connectivityStateInfo\", connectivityStateInfo)\n+          .add(\"picker\", picker)\n+          .toString();\n+    }\n+  }\n+\n+  private static final class RefCountedChildPolicyWrapper\n+      implements ObjectPool<ChildPolicyWrapper> {\n+\n+    private final AtomicLong refCnt = new AtomicLong(1);\n+    @Nullable\n+    private ChildPolicyWrapper childPolicyWrapper;\n+\n+    private RefCountedChildPolicyWrapper(ChildPolicyWrapper childPolicyWrapper) {\n+      this.childPolicyWrapper = checkNotNull(childPolicyWrapper, \"childPolicyWrapper\");\n+    }\n+\n+    @Override\n+    public ChildPolicyWrapper getObject() {\n+      long curr = refCnt.getAndIncrement();\n+      if (curr <= 0) {\n+        throw new IllegalStateException(\"ChildPolicyWrapper is already released\");\n+      }\n+      return childPolicyWrapper;\n+    }\n+\n+    @Override\n+    @Nullable\n+    public ChildPolicyWrapper returnObject(Object object) {\n+      checkState(\n+          childPolicyWrapper == object,\n+          \"returned object doesn't match the pooled childPolicyWrapper\");\n+      long newCnt = refCnt.decrementAndGet();\n+      if (newCnt == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcyMDQyNw=="}, "originalCommit": {"oid": "527cd1198e09f7c85b524e266120ce574f040843"}, "originalPosition": 335}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc1MTY2MA==", "bodyText": "create itself is counted as getObject() since the object is passed in.", "url": "https://github.com/grpc/grpc-java/pull/6883#discussion_r411751660", "createdAt": "2020-04-20T23:09:47Z", "author": {"login": "creamsoup"}, "path": "rls/src/main/java/io/grpc/rls/internal/LbPolicyConfiguration.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls.internal;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.MoreObjects;\n+import io.grpc.ConnectivityState;\n+import io.grpc.ConnectivityStateInfo;\n+import io.grpc.LoadBalancer.SubchannelPicker;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.LoadBalancerRegistry;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.rls.internal.ChildLoadBalancerHelper.ChildLoadBalancerHelperProvider;\n+import io.grpc.rls.internal.ChildPolicyReportingHelper.ChildLbStatusListener;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupConfig;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.annotation.Nullable;\n+\n+/** Configuration for RLS load balancing policy. */\n+public final class LbPolicyConfiguration {\n+\n+  private final RouteLookupConfig routeLookupConfig;\n+  private final ChildLoadBalancingPolicy policy;\n+\n+  public LbPolicyConfiguration(\n+      RouteLookupConfig routeLookupConfig, ChildLoadBalancingPolicy policy) {\n+    this.routeLookupConfig = checkNotNull(routeLookupConfig, \"routeLookupConfig\");\n+    this.policy = checkNotNull(policy, \"policy\");\n+  }\n+\n+  public RouteLookupConfig getRouteLookupConfig() {\n+    return routeLookupConfig;\n+  }\n+\n+  public ChildLoadBalancingPolicy getLoadBalancingPolicy() {\n+    return policy;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    LbPolicyConfiguration that = (LbPolicyConfiguration) o;\n+    return Objects.equals(routeLookupConfig, that.routeLookupConfig)\n+        && Objects.equals(policy, that.policy);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(routeLookupConfig, policy);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return MoreObjects.toStringHelper(this)\n+        .add(\"routeLookupConfig\", routeLookupConfig)\n+        .add(\"policy\", policy)\n+        .toString();\n+  }\n+\n+  /** ChildLoadBalancingPolicy is an elected child policy to delegate requests. */\n+  public static final class ChildLoadBalancingPolicy {\n+\n+    private final Map<String, Object> effectiveRawChildPolicy;\n+    private final LoadBalancerProvider effectiveLbProvider;\n+    private final String targetFieldName;\n+\n+    @VisibleForTesting\n+    ChildLoadBalancingPolicy(\n+        String targetFieldName,\n+        Map<String, Object> effectiveRawChildPolicy,\n+        LoadBalancerProvider effectiveLbProvider) {\n+      checkArgument(\n+          targetFieldName != null && !targetFieldName.isEmpty(),\n+          \"targetFieldName cannot be empty or null\");\n+      this.targetFieldName = targetFieldName;\n+      this.effectiveRawChildPolicy =\n+          checkNotNull(effectiveRawChildPolicy, \"effectiveRawChildPolicy\");\n+      this.effectiveLbProvider = checkNotNull(effectiveLbProvider, \"effectiveLbProvider\");\n+    }\n+\n+    /** Creates ChildLoadBalancingPolicy. */\n+    @SuppressWarnings(\"unchecked\")\n+    public static ChildLoadBalancingPolicy create(\n+        String childPolicyConfigTargetFieldName, List<Map<String, ?>> childPolicies)\n+        throws InvalidChildPolicyConfigException {\n+      Map<String, Object> effectiveChildPolicy = null;\n+      LoadBalancerProvider effectiveLbProvider = null;\n+      List<String> policyTried = new ArrayList<>();\n+\n+      LoadBalancerRegistry lbRegistry = LoadBalancerRegistry.getDefaultRegistry();\n+      for (Map<String, ?> childPolicy : childPolicies) {\n+        if (childPolicy.isEmpty()) {\n+          continue;\n+        }\n+        if (childPolicy.size() != 1) {\n+          throw\n+              new InvalidChildPolicyConfigException(\n+                  \"childPolicy should have exactly one loadbalancing policy\");\n+        }\n+        String policyName = childPolicy.keySet().iterator().next();\n+        LoadBalancerProvider provider = lbRegistry.getProvider(policyName);\n+        if (provider != null) {\n+          effectiveLbProvider = provider;\n+          effectiveChildPolicy = Collections.unmodifiableMap(childPolicy);\n+          break;\n+        }\n+        policyTried.add(policyName);\n+      }\n+      if (effectiveChildPolicy == null) {\n+        throw\n+            new InvalidChildPolicyConfigException(\n+                String.format(\"no valid childPolicy found, policy tried: %s\", policyTried));\n+      }\n+      return\n+          new ChildLoadBalancingPolicy(\n+              childPolicyConfigTargetFieldName,\n+              (Map<String, Object>) effectiveChildPolicy.values().iterator().next(),\n+              effectiveLbProvider);\n+    }\n+\n+    /** Creates a child load balancer config for given target from elected raw child policy. */\n+    public Map<String, ?> getEffectiveChildPolicy(String target) {\n+      Map<String, Object> childPolicy = new HashMap<>(effectiveRawChildPolicy);\n+      childPolicy.put(targetFieldName, target);\n+      return childPolicy;\n+    }\n+\n+    /** Returns the elected child {@link LoadBalancerProvider}. */\n+    public LoadBalancerProvider getEffectiveLbProvider() {\n+      return effectiveLbProvider;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      ChildLoadBalancingPolicy that = (ChildLoadBalancingPolicy) o;\n+      return Objects.equals(effectiveRawChildPolicy, that.effectiveRawChildPolicy)\n+          && Objects.equals(effectiveLbProvider, that.effectiveLbProvider)\n+          && Objects.equals(targetFieldName, that.targetFieldName);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(effectiveRawChildPolicy, effectiveLbProvider, targetFieldName);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return MoreObjects.toStringHelper(this)\n+          .add(\"effectiveRawChildPolicy\", effectiveRawChildPolicy)\n+          .add(\"effectiveLbProvider\", effectiveLbProvider)\n+          .add(\"childPolicyConfigTargetFieldName\", targetFieldName)\n+          .toString();\n+    }\n+  }\n+\n+  /** Factory for {@link ChildPolicyWrapper}. */\n+  static final class RefCountedChildPolicyWrapperFactory {\n+    @VisibleForTesting\n+    final Map<String /* target */, RefCountedChildPolicyWrapper> childPolicyMap =\n+        new HashMap<>();\n+\n+    private final ChildLoadBalancerHelperProvider childLbHelperProvider;\n+    @Nullable\n+    private final ChildLbStatusListener childLbStatusListener;\n+\n+    public RefCountedChildPolicyWrapperFactory(\n+        ChildLoadBalancerHelperProvider childLbHelperProvider,\n+        @Nullable ChildLbStatusListener childLbStatusListener) {\n+      this.childLbHelperProvider = checkNotNull(childLbHelperProvider, \"childLbHelperProvider\");\n+      this.childLbStatusListener = childLbStatusListener;\n+    }\n+\n+    ChildPolicyWrapper createOrGet(String target) {\n+      // TODO(creamsoup) check if the target is valid or not\n+      ObjectPool<ChildPolicyWrapper> existing = childPolicyMap.get(target);\n+      if (existing != null) {\n+        return existing.getObject();\n+      }\n+      ChildPolicyWrapper childPolicyWrapper =\n+          new ChildPolicyWrapper(target, childLbHelperProvider, childLbStatusListener);\n+      RefCountedChildPolicyWrapper wrapper = RefCountedChildPolicyWrapper.of(childPolicyWrapper);\n+      childPolicyMap.put(target, wrapper);\n+      return childPolicyWrapper;\n+    }\n+\n+    void release(ChildPolicyWrapper childPolicyWrapper) {\n+      checkNotNull(childPolicyWrapper, \"childPolicyWrapper\");\n+      String target = childPolicyWrapper.getTarget();\n+      ObjectPool<ChildPolicyWrapper> existing = childPolicyMap.get(target);\n+      checkState(existing != null, \"Cannot access already released object\");\n+      if (existing.returnObject(childPolicyWrapper) == null) {\n+        childPolicyMap.remove(target);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * ChildPolicyWrapper is a wrapper class for child load balancing policy with associated helper /\n+   * utility classes to manage the child policy.\n+   */\n+  static final class ChildPolicyWrapper {\n+\n+    private final String target;\n+    private final ChildPolicyReportingHelper helper;\n+    private ConnectivityStateInfo connectivityStateInfo =\n+        ConnectivityStateInfo.forNonError(ConnectivityState.IDLE);\n+    private SubchannelPicker picker;\n+\n+    public ChildPolicyWrapper(\n+        String target,\n+        ChildLoadBalancerHelperProvider childLbHelperProvider,\n+        @Nullable  ChildLbStatusListener childLbStatusListener) {\n+      this.target = target;\n+      this.helper =\n+          new ChildPolicyReportingHelper(childLbHelperProvider, this, childLbStatusListener);\n+    }\n+\n+    String getTarget() {\n+      return target;\n+    }\n+\n+    void setPicker(SubchannelPicker picker) {\n+      this.picker = checkNotNull(picker, \"picker\");\n+    }\n+\n+    SubchannelPicker getPicker() {\n+      return picker;\n+    }\n+\n+    ChildPolicyReportingHelper getHelper() {\n+      return helper;\n+    }\n+\n+    void setConnectivityStateInfo(ConnectivityStateInfo connectivityStateInfo) {\n+      this.connectivityStateInfo = connectivityStateInfo;\n+    }\n+\n+    ConnectivityStateInfo getConnectivityStateInfo() {\n+      return connectivityStateInfo;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      ChildPolicyWrapper that = (ChildPolicyWrapper) o;\n+      return Objects.equals(target, that.target)\n+          && Objects.equals(helper, that.helper)\n+          && Objects.equals(connectivityStateInfo, that.connectivityStateInfo)\n+          && Objects.equals(picker, that.picker);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(target, helper, connectivityStateInfo, picker);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return MoreObjects.toStringHelper(this)\n+          .add(\"target\", target)\n+          .add(\"helper\", helper)\n+          .add(\"connectivityStateInfo\", connectivityStateInfo)\n+          .add(\"picker\", picker)\n+          .toString();\n+    }\n+  }\n+\n+  private static final class RefCountedChildPolicyWrapper\n+      implements ObjectPool<ChildPolicyWrapper> {\n+\n+    private final AtomicLong refCnt = new AtomicLong(1);\n+    @Nullable\n+    private ChildPolicyWrapper childPolicyWrapper;\n+\n+    private RefCountedChildPolicyWrapper(ChildPolicyWrapper childPolicyWrapper) {\n+      this.childPolicyWrapper = checkNotNull(childPolicyWrapper, \"childPolicyWrapper\");\n+    }\n+\n+    @Override\n+    public ChildPolicyWrapper getObject() {\n+      long curr = refCnt.getAndIncrement();\n+      if (curr <= 0) {\n+        throw new IllegalStateException(\"ChildPolicyWrapper is already released\");\n+      }\n+      return childPolicyWrapper;\n+    }\n+\n+    @Override\n+    @Nullable\n+    public ChildPolicyWrapper returnObject(Object object) {\n+      checkState(\n+          childPolicyWrapper == object,\n+          \"returned object doesn't match the pooled childPolicyWrapper\");\n+      long newCnt = refCnt.decrementAndGet();\n+      if (newCnt == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcyMDQyNw=="}, "originalCommit": {"oid": "527cd1198e09f7c85b524e266120ce574f040843"}, "originalPosition": 335}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc1MzI5Ng==", "bodyText": "create itself is counted as getObject()\n\nBut you can not use the object unless you call getObject() explicitly.  The API contract looks strange.  If you just need to use the object once, you have to explicitly call  getObject() once, and you need returnObject() twice to get here.", "url": "https://github.com/grpc/grpc-java/pull/6883#discussion_r411753296", "createdAt": "2020-04-20T23:14:00Z", "author": {"login": "dapengzhang0"}, "path": "rls/src/main/java/io/grpc/rls/internal/LbPolicyConfiguration.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls.internal;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.MoreObjects;\n+import io.grpc.ConnectivityState;\n+import io.grpc.ConnectivityStateInfo;\n+import io.grpc.LoadBalancer.SubchannelPicker;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.LoadBalancerRegistry;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.rls.internal.ChildLoadBalancerHelper.ChildLoadBalancerHelperProvider;\n+import io.grpc.rls.internal.ChildPolicyReportingHelper.ChildLbStatusListener;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupConfig;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.annotation.Nullable;\n+\n+/** Configuration for RLS load balancing policy. */\n+public final class LbPolicyConfiguration {\n+\n+  private final RouteLookupConfig routeLookupConfig;\n+  private final ChildLoadBalancingPolicy policy;\n+\n+  public LbPolicyConfiguration(\n+      RouteLookupConfig routeLookupConfig, ChildLoadBalancingPolicy policy) {\n+    this.routeLookupConfig = checkNotNull(routeLookupConfig, \"routeLookupConfig\");\n+    this.policy = checkNotNull(policy, \"policy\");\n+  }\n+\n+  public RouteLookupConfig getRouteLookupConfig() {\n+    return routeLookupConfig;\n+  }\n+\n+  public ChildLoadBalancingPolicy getLoadBalancingPolicy() {\n+    return policy;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    LbPolicyConfiguration that = (LbPolicyConfiguration) o;\n+    return Objects.equals(routeLookupConfig, that.routeLookupConfig)\n+        && Objects.equals(policy, that.policy);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(routeLookupConfig, policy);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return MoreObjects.toStringHelper(this)\n+        .add(\"routeLookupConfig\", routeLookupConfig)\n+        .add(\"policy\", policy)\n+        .toString();\n+  }\n+\n+  /** ChildLoadBalancingPolicy is an elected child policy to delegate requests. */\n+  public static final class ChildLoadBalancingPolicy {\n+\n+    private final Map<String, Object> effectiveRawChildPolicy;\n+    private final LoadBalancerProvider effectiveLbProvider;\n+    private final String targetFieldName;\n+\n+    @VisibleForTesting\n+    ChildLoadBalancingPolicy(\n+        String targetFieldName,\n+        Map<String, Object> effectiveRawChildPolicy,\n+        LoadBalancerProvider effectiveLbProvider) {\n+      checkArgument(\n+          targetFieldName != null && !targetFieldName.isEmpty(),\n+          \"targetFieldName cannot be empty or null\");\n+      this.targetFieldName = targetFieldName;\n+      this.effectiveRawChildPolicy =\n+          checkNotNull(effectiveRawChildPolicy, \"effectiveRawChildPolicy\");\n+      this.effectiveLbProvider = checkNotNull(effectiveLbProvider, \"effectiveLbProvider\");\n+    }\n+\n+    /** Creates ChildLoadBalancingPolicy. */\n+    @SuppressWarnings(\"unchecked\")\n+    public static ChildLoadBalancingPolicy create(\n+        String childPolicyConfigTargetFieldName, List<Map<String, ?>> childPolicies)\n+        throws InvalidChildPolicyConfigException {\n+      Map<String, Object> effectiveChildPolicy = null;\n+      LoadBalancerProvider effectiveLbProvider = null;\n+      List<String> policyTried = new ArrayList<>();\n+\n+      LoadBalancerRegistry lbRegistry = LoadBalancerRegistry.getDefaultRegistry();\n+      for (Map<String, ?> childPolicy : childPolicies) {\n+        if (childPolicy.isEmpty()) {\n+          continue;\n+        }\n+        if (childPolicy.size() != 1) {\n+          throw\n+              new InvalidChildPolicyConfigException(\n+                  \"childPolicy should have exactly one loadbalancing policy\");\n+        }\n+        String policyName = childPolicy.keySet().iterator().next();\n+        LoadBalancerProvider provider = lbRegistry.getProvider(policyName);\n+        if (provider != null) {\n+          effectiveLbProvider = provider;\n+          effectiveChildPolicy = Collections.unmodifiableMap(childPolicy);\n+          break;\n+        }\n+        policyTried.add(policyName);\n+      }\n+      if (effectiveChildPolicy == null) {\n+        throw\n+            new InvalidChildPolicyConfigException(\n+                String.format(\"no valid childPolicy found, policy tried: %s\", policyTried));\n+      }\n+      return\n+          new ChildLoadBalancingPolicy(\n+              childPolicyConfigTargetFieldName,\n+              (Map<String, Object>) effectiveChildPolicy.values().iterator().next(),\n+              effectiveLbProvider);\n+    }\n+\n+    /** Creates a child load balancer config for given target from elected raw child policy. */\n+    public Map<String, ?> getEffectiveChildPolicy(String target) {\n+      Map<String, Object> childPolicy = new HashMap<>(effectiveRawChildPolicy);\n+      childPolicy.put(targetFieldName, target);\n+      return childPolicy;\n+    }\n+\n+    /** Returns the elected child {@link LoadBalancerProvider}. */\n+    public LoadBalancerProvider getEffectiveLbProvider() {\n+      return effectiveLbProvider;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      ChildLoadBalancingPolicy that = (ChildLoadBalancingPolicy) o;\n+      return Objects.equals(effectiveRawChildPolicy, that.effectiveRawChildPolicy)\n+          && Objects.equals(effectiveLbProvider, that.effectiveLbProvider)\n+          && Objects.equals(targetFieldName, that.targetFieldName);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(effectiveRawChildPolicy, effectiveLbProvider, targetFieldName);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return MoreObjects.toStringHelper(this)\n+          .add(\"effectiveRawChildPolicy\", effectiveRawChildPolicy)\n+          .add(\"effectiveLbProvider\", effectiveLbProvider)\n+          .add(\"childPolicyConfigTargetFieldName\", targetFieldName)\n+          .toString();\n+    }\n+  }\n+\n+  /** Factory for {@link ChildPolicyWrapper}. */\n+  static final class RefCountedChildPolicyWrapperFactory {\n+    @VisibleForTesting\n+    final Map<String /* target */, RefCountedChildPolicyWrapper> childPolicyMap =\n+        new HashMap<>();\n+\n+    private final ChildLoadBalancerHelperProvider childLbHelperProvider;\n+    @Nullable\n+    private final ChildLbStatusListener childLbStatusListener;\n+\n+    public RefCountedChildPolicyWrapperFactory(\n+        ChildLoadBalancerHelperProvider childLbHelperProvider,\n+        @Nullable ChildLbStatusListener childLbStatusListener) {\n+      this.childLbHelperProvider = checkNotNull(childLbHelperProvider, \"childLbHelperProvider\");\n+      this.childLbStatusListener = childLbStatusListener;\n+    }\n+\n+    ChildPolicyWrapper createOrGet(String target) {\n+      // TODO(creamsoup) check if the target is valid or not\n+      ObjectPool<ChildPolicyWrapper> existing = childPolicyMap.get(target);\n+      if (existing != null) {\n+        return existing.getObject();\n+      }\n+      ChildPolicyWrapper childPolicyWrapper =\n+          new ChildPolicyWrapper(target, childLbHelperProvider, childLbStatusListener);\n+      RefCountedChildPolicyWrapper wrapper = RefCountedChildPolicyWrapper.of(childPolicyWrapper);\n+      childPolicyMap.put(target, wrapper);\n+      return childPolicyWrapper;\n+    }\n+\n+    void release(ChildPolicyWrapper childPolicyWrapper) {\n+      checkNotNull(childPolicyWrapper, \"childPolicyWrapper\");\n+      String target = childPolicyWrapper.getTarget();\n+      ObjectPool<ChildPolicyWrapper> existing = childPolicyMap.get(target);\n+      checkState(existing != null, \"Cannot access already released object\");\n+      if (existing.returnObject(childPolicyWrapper) == null) {\n+        childPolicyMap.remove(target);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * ChildPolicyWrapper is a wrapper class for child load balancing policy with associated helper /\n+   * utility classes to manage the child policy.\n+   */\n+  static final class ChildPolicyWrapper {\n+\n+    private final String target;\n+    private final ChildPolicyReportingHelper helper;\n+    private ConnectivityStateInfo connectivityStateInfo =\n+        ConnectivityStateInfo.forNonError(ConnectivityState.IDLE);\n+    private SubchannelPicker picker;\n+\n+    public ChildPolicyWrapper(\n+        String target,\n+        ChildLoadBalancerHelperProvider childLbHelperProvider,\n+        @Nullable  ChildLbStatusListener childLbStatusListener) {\n+      this.target = target;\n+      this.helper =\n+          new ChildPolicyReportingHelper(childLbHelperProvider, this, childLbStatusListener);\n+    }\n+\n+    String getTarget() {\n+      return target;\n+    }\n+\n+    void setPicker(SubchannelPicker picker) {\n+      this.picker = checkNotNull(picker, \"picker\");\n+    }\n+\n+    SubchannelPicker getPicker() {\n+      return picker;\n+    }\n+\n+    ChildPolicyReportingHelper getHelper() {\n+      return helper;\n+    }\n+\n+    void setConnectivityStateInfo(ConnectivityStateInfo connectivityStateInfo) {\n+      this.connectivityStateInfo = connectivityStateInfo;\n+    }\n+\n+    ConnectivityStateInfo getConnectivityStateInfo() {\n+      return connectivityStateInfo;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      ChildPolicyWrapper that = (ChildPolicyWrapper) o;\n+      return Objects.equals(target, that.target)\n+          && Objects.equals(helper, that.helper)\n+          && Objects.equals(connectivityStateInfo, that.connectivityStateInfo)\n+          && Objects.equals(picker, that.picker);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(target, helper, connectivityStateInfo, picker);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return MoreObjects.toStringHelper(this)\n+          .add(\"target\", target)\n+          .add(\"helper\", helper)\n+          .add(\"connectivityStateInfo\", connectivityStateInfo)\n+          .add(\"picker\", picker)\n+          .toString();\n+    }\n+  }\n+\n+  private static final class RefCountedChildPolicyWrapper\n+      implements ObjectPool<ChildPolicyWrapper> {\n+\n+    private final AtomicLong refCnt = new AtomicLong(1);\n+    @Nullable\n+    private ChildPolicyWrapper childPolicyWrapper;\n+\n+    private RefCountedChildPolicyWrapper(ChildPolicyWrapper childPolicyWrapper) {\n+      this.childPolicyWrapper = checkNotNull(childPolicyWrapper, \"childPolicyWrapper\");\n+    }\n+\n+    @Override\n+    public ChildPolicyWrapper getObject() {\n+      long curr = refCnt.getAndIncrement();\n+      if (curr <= 0) {\n+        throw new IllegalStateException(\"ChildPolicyWrapper is already released\");\n+      }\n+      return childPolicyWrapper;\n+    }\n+\n+    @Override\n+    @Nullable\n+    public ChildPolicyWrapper returnObject(Object object) {\n+      checkState(\n+          childPolicyWrapper == object,\n+          \"returned object doesn't match the pooled childPolicyWrapper\");\n+      long newCnt = refCnt.decrementAndGet();\n+      if (newCnt == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcyMDQyNw=="}, "originalCommit": {"oid": "527cd1198e09f7c85b524e266120ce574f040843"}, "originalPosition": 335}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc2Mjc0NA==", "bodyText": "why it cannot use the object before getObject()? anyways, okay it depends on what is the focus. focused more on the \"RefCounted\" it makes more sense to have it as 1, if you focused more on \"ObjectPool\" part starting with 0 makes more sense. refCount = 0 is released state (ref counted bytebuf starts with 1 for example), but for the sake of consistency i can follow the other convention, also it implements ObjectPool makes me leaning toward that.", "url": "https://github.com/grpc/grpc-java/pull/6883#discussion_r411762744", "createdAt": "2020-04-20T23:33:34Z", "author": {"login": "creamsoup"}, "path": "rls/src/main/java/io/grpc/rls/internal/LbPolicyConfiguration.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls.internal;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.MoreObjects;\n+import io.grpc.ConnectivityState;\n+import io.grpc.ConnectivityStateInfo;\n+import io.grpc.LoadBalancer.SubchannelPicker;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.LoadBalancerRegistry;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.rls.internal.ChildLoadBalancerHelper.ChildLoadBalancerHelperProvider;\n+import io.grpc.rls.internal.ChildPolicyReportingHelper.ChildLbStatusListener;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupConfig;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.annotation.Nullable;\n+\n+/** Configuration for RLS load balancing policy. */\n+public final class LbPolicyConfiguration {\n+\n+  private final RouteLookupConfig routeLookupConfig;\n+  private final ChildLoadBalancingPolicy policy;\n+\n+  public LbPolicyConfiguration(\n+      RouteLookupConfig routeLookupConfig, ChildLoadBalancingPolicy policy) {\n+    this.routeLookupConfig = checkNotNull(routeLookupConfig, \"routeLookupConfig\");\n+    this.policy = checkNotNull(policy, \"policy\");\n+  }\n+\n+  public RouteLookupConfig getRouteLookupConfig() {\n+    return routeLookupConfig;\n+  }\n+\n+  public ChildLoadBalancingPolicy getLoadBalancingPolicy() {\n+    return policy;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    LbPolicyConfiguration that = (LbPolicyConfiguration) o;\n+    return Objects.equals(routeLookupConfig, that.routeLookupConfig)\n+        && Objects.equals(policy, that.policy);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(routeLookupConfig, policy);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return MoreObjects.toStringHelper(this)\n+        .add(\"routeLookupConfig\", routeLookupConfig)\n+        .add(\"policy\", policy)\n+        .toString();\n+  }\n+\n+  /** ChildLoadBalancingPolicy is an elected child policy to delegate requests. */\n+  public static final class ChildLoadBalancingPolicy {\n+\n+    private final Map<String, Object> effectiveRawChildPolicy;\n+    private final LoadBalancerProvider effectiveLbProvider;\n+    private final String targetFieldName;\n+\n+    @VisibleForTesting\n+    ChildLoadBalancingPolicy(\n+        String targetFieldName,\n+        Map<String, Object> effectiveRawChildPolicy,\n+        LoadBalancerProvider effectiveLbProvider) {\n+      checkArgument(\n+          targetFieldName != null && !targetFieldName.isEmpty(),\n+          \"targetFieldName cannot be empty or null\");\n+      this.targetFieldName = targetFieldName;\n+      this.effectiveRawChildPolicy =\n+          checkNotNull(effectiveRawChildPolicy, \"effectiveRawChildPolicy\");\n+      this.effectiveLbProvider = checkNotNull(effectiveLbProvider, \"effectiveLbProvider\");\n+    }\n+\n+    /** Creates ChildLoadBalancingPolicy. */\n+    @SuppressWarnings(\"unchecked\")\n+    public static ChildLoadBalancingPolicy create(\n+        String childPolicyConfigTargetFieldName, List<Map<String, ?>> childPolicies)\n+        throws InvalidChildPolicyConfigException {\n+      Map<String, Object> effectiveChildPolicy = null;\n+      LoadBalancerProvider effectiveLbProvider = null;\n+      List<String> policyTried = new ArrayList<>();\n+\n+      LoadBalancerRegistry lbRegistry = LoadBalancerRegistry.getDefaultRegistry();\n+      for (Map<String, ?> childPolicy : childPolicies) {\n+        if (childPolicy.isEmpty()) {\n+          continue;\n+        }\n+        if (childPolicy.size() != 1) {\n+          throw\n+              new InvalidChildPolicyConfigException(\n+                  \"childPolicy should have exactly one loadbalancing policy\");\n+        }\n+        String policyName = childPolicy.keySet().iterator().next();\n+        LoadBalancerProvider provider = lbRegistry.getProvider(policyName);\n+        if (provider != null) {\n+          effectiveLbProvider = provider;\n+          effectiveChildPolicy = Collections.unmodifiableMap(childPolicy);\n+          break;\n+        }\n+        policyTried.add(policyName);\n+      }\n+      if (effectiveChildPolicy == null) {\n+        throw\n+            new InvalidChildPolicyConfigException(\n+                String.format(\"no valid childPolicy found, policy tried: %s\", policyTried));\n+      }\n+      return\n+          new ChildLoadBalancingPolicy(\n+              childPolicyConfigTargetFieldName,\n+              (Map<String, Object>) effectiveChildPolicy.values().iterator().next(),\n+              effectiveLbProvider);\n+    }\n+\n+    /** Creates a child load balancer config for given target from elected raw child policy. */\n+    public Map<String, ?> getEffectiveChildPolicy(String target) {\n+      Map<String, Object> childPolicy = new HashMap<>(effectiveRawChildPolicy);\n+      childPolicy.put(targetFieldName, target);\n+      return childPolicy;\n+    }\n+\n+    /** Returns the elected child {@link LoadBalancerProvider}. */\n+    public LoadBalancerProvider getEffectiveLbProvider() {\n+      return effectiveLbProvider;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      ChildLoadBalancingPolicy that = (ChildLoadBalancingPolicy) o;\n+      return Objects.equals(effectiveRawChildPolicy, that.effectiveRawChildPolicy)\n+          && Objects.equals(effectiveLbProvider, that.effectiveLbProvider)\n+          && Objects.equals(targetFieldName, that.targetFieldName);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(effectiveRawChildPolicy, effectiveLbProvider, targetFieldName);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return MoreObjects.toStringHelper(this)\n+          .add(\"effectiveRawChildPolicy\", effectiveRawChildPolicy)\n+          .add(\"effectiveLbProvider\", effectiveLbProvider)\n+          .add(\"childPolicyConfigTargetFieldName\", targetFieldName)\n+          .toString();\n+    }\n+  }\n+\n+  /** Factory for {@link ChildPolicyWrapper}. */\n+  static final class RefCountedChildPolicyWrapperFactory {\n+    @VisibleForTesting\n+    final Map<String /* target */, RefCountedChildPolicyWrapper> childPolicyMap =\n+        new HashMap<>();\n+\n+    private final ChildLoadBalancerHelperProvider childLbHelperProvider;\n+    @Nullable\n+    private final ChildLbStatusListener childLbStatusListener;\n+\n+    public RefCountedChildPolicyWrapperFactory(\n+        ChildLoadBalancerHelperProvider childLbHelperProvider,\n+        @Nullable ChildLbStatusListener childLbStatusListener) {\n+      this.childLbHelperProvider = checkNotNull(childLbHelperProvider, \"childLbHelperProvider\");\n+      this.childLbStatusListener = childLbStatusListener;\n+    }\n+\n+    ChildPolicyWrapper createOrGet(String target) {\n+      // TODO(creamsoup) check if the target is valid or not\n+      ObjectPool<ChildPolicyWrapper> existing = childPolicyMap.get(target);\n+      if (existing != null) {\n+        return existing.getObject();\n+      }\n+      ChildPolicyWrapper childPolicyWrapper =\n+          new ChildPolicyWrapper(target, childLbHelperProvider, childLbStatusListener);\n+      RefCountedChildPolicyWrapper wrapper = RefCountedChildPolicyWrapper.of(childPolicyWrapper);\n+      childPolicyMap.put(target, wrapper);\n+      return childPolicyWrapper;\n+    }\n+\n+    void release(ChildPolicyWrapper childPolicyWrapper) {\n+      checkNotNull(childPolicyWrapper, \"childPolicyWrapper\");\n+      String target = childPolicyWrapper.getTarget();\n+      ObjectPool<ChildPolicyWrapper> existing = childPolicyMap.get(target);\n+      checkState(existing != null, \"Cannot access already released object\");\n+      if (existing.returnObject(childPolicyWrapper) == null) {\n+        childPolicyMap.remove(target);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * ChildPolicyWrapper is a wrapper class for child load balancing policy with associated helper /\n+   * utility classes to manage the child policy.\n+   */\n+  static final class ChildPolicyWrapper {\n+\n+    private final String target;\n+    private final ChildPolicyReportingHelper helper;\n+    private ConnectivityStateInfo connectivityStateInfo =\n+        ConnectivityStateInfo.forNonError(ConnectivityState.IDLE);\n+    private SubchannelPicker picker;\n+\n+    public ChildPolicyWrapper(\n+        String target,\n+        ChildLoadBalancerHelperProvider childLbHelperProvider,\n+        @Nullable  ChildLbStatusListener childLbStatusListener) {\n+      this.target = target;\n+      this.helper =\n+          new ChildPolicyReportingHelper(childLbHelperProvider, this, childLbStatusListener);\n+    }\n+\n+    String getTarget() {\n+      return target;\n+    }\n+\n+    void setPicker(SubchannelPicker picker) {\n+      this.picker = checkNotNull(picker, \"picker\");\n+    }\n+\n+    SubchannelPicker getPicker() {\n+      return picker;\n+    }\n+\n+    ChildPolicyReportingHelper getHelper() {\n+      return helper;\n+    }\n+\n+    void setConnectivityStateInfo(ConnectivityStateInfo connectivityStateInfo) {\n+      this.connectivityStateInfo = connectivityStateInfo;\n+    }\n+\n+    ConnectivityStateInfo getConnectivityStateInfo() {\n+      return connectivityStateInfo;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      ChildPolicyWrapper that = (ChildPolicyWrapper) o;\n+      return Objects.equals(target, that.target)\n+          && Objects.equals(helper, that.helper)\n+          && Objects.equals(connectivityStateInfo, that.connectivityStateInfo)\n+          && Objects.equals(picker, that.picker);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(target, helper, connectivityStateInfo, picker);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return MoreObjects.toStringHelper(this)\n+          .add(\"target\", target)\n+          .add(\"helper\", helper)\n+          .add(\"connectivityStateInfo\", connectivityStateInfo)\n+          .add(\"picker\", picker)\n+          .toString();\n+    }\n+  }\n+\n+  private static final class RefCountedChildPolicyWrapper\n+      implements ObjectPool<ChildPolicyWrapper> {\n+\n+    private final AtomicLong refCnt = new AtomicLong(1);\n+    @Nullable\n+    private ChildPolicyWrapper childPolicyWrapper;\n+\n+    private RefCountedChildPolicyWrapper(ChildPolicyWrapper childPolicyWrapper) {\n+      this.childPolicyWrapper = checkNotNull(childPolicyWrapper, \"childPolicyWrapper\");\n+    }\n+\n+    @Override\n+    public ChildPolicyWrapper getObject() {\n+      long curr = refCnt.getAndIncrement();\n+      if (curr <= 0) {\n+        throw new IllegalStateException(\"ChildPolicyWrapper is already released\");\n+      }\n+      return childPolicyWrapper;\n+    }\n+\n+    @Override\n+    @Nullable\n+    public ChildPolicyWrapper returnObject(Object object) {\n+      checkState(\n+          childPolicyWrapper == object,\n+          \"returned object doesn't match the pooled childPolicyWrapper\");\n+      long newCnt = refCnt.decrementAndGet();\n+      if (newCnt == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcyMDQyNw=="}, "originalCommit": {"oid": "527cd1198e09f7c85b524e266120ce574f040843"}, "originalPosition": 335}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc2ODEzNw==", "bodyText": "I see, it is used directly for the first time without calling getObject()\nRefCountedChildPolicyWrapper wrapper = RefCountedChildPolicyWrapper.of(childPolicyWrapper);\nchildPolicyMap.put(target, wrapper);\nreturn childPolicyWrapper;", "url": "https://github.com/grpc/grpc-java/pull/6883#discussion_r411768137", "createdAt": "2020-04-20T23:48:21Z", "author": {"login": "dapengzhang0"}, "path": "rls/src/main/java/io/grpc/rls/internal/LbPolicyConfiguration.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls.internal;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.MoreObjects;\n+import io.grpc.ConnectivityState;\n+import io.grpc.ConnectivityStateInfo;\n+import io.grpc.LoadBalancer.SubchannelPicker;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.LoadBalancerRegistry;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.rls.internal.ChildLoadBalancerHelper.ChildLoadBalancerHelperProvider;\n+import io.grpc.rls.internal.ChildPolicyReportingHelper.ChildLbStatusListener;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupConfig;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.annotation.Nullable;\n+\n+/** Configuration for RLS load balancing policy. */\n+public final class LbPolicyConfiguration {\n+\n+  private final RouteLookupConfig routeLookupConfig;\n+  private final ChildLoadBalancingPolicy policy;\n+\n+  public LbPolicyConfiguration(\n+      RouteLookupConfig routeLookupConfig, ChildLoadBalancingPolicy policy) {\n+    this.routeLookupConfig = checkNotNull(routeLookupConfig, \"routeLookupConfig\");\n+    this.policy = checkNotNull(policy, \"policy\");\n+  }\n+\n+  public RouteLookupConfig getRouteLookupConfig() {\n+    return routeLookupConfig;\n+  }\n+\n+  public ChildLoadBalancingPolicy getLoadBalancingPolicy() {\n+    return policy;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    LbPolicyConfiguration that = (LbPolicyConfiguration) o;\n+    return Objects.equals(routeLookupConfig, that.routeLookupConfig)\n+        && Objects.equals(policy, that.policy);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(routeLookupConfig, policy);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return MoreObjects.toStringHelper(this)\n+        .add(\"routeLookupConfig\", routeLookupConfig)\n+        .add(\"policy\", policy)\n+        .toString();\n+  }\n+\n+  /** ChildLoadBalancingPolicy is an elected child policy to delegate requests. */\n+  public static final class ChildLoadBalancingPolicy {\n+\n+    private final Map<String, Object> effectiveRawChildPolicy;\n+    private final LoadBalancerProvider effectiveLbProvider;\n+    private final String targetFieldName;\n+\n+    @VisibleForTesting\n+    ChildLoadBalancingPolicy(\n+        String targetFieldName,\n+        Map<String, Object> effectiveRawChildPolicy,\n+        LoadBalancerProvider effectiveLbProvider) {\n+      checkArgument(\n+          targetFieldName != null && !targetFieldName.isEmpty(),\n+          \"targetFieldName cannot be empty or null\");\n+      this.targetFieldName = targetFieldName;\n+      this.effectiveRawChildPolicy =\n+          checkNotNull(effectiveRawChildPolicy, \"effectiveRawChildPolicy\");\n+      this.effectiveLbProvider = checkNotNull(effectiveLbProvider, \"effectiveLbProvider\");\n+    }\n+\n+    /** Creates ChildLoadBalancingPolicy. */\n+    @SuppressWarnings(\"unchecked\")\n+    public static ChildLoadBalancingPolicy create(\n+        String childPolicyConfigTargetFieldName, List<Map<String, ?>> childPolicies)\n+        throws InvalidChildPolicyConfigException {\n+      Map<String, Object> effectiveChildPolicy = null;\n+      LoadBalancerProvider effectiveLbProvider = null;\n+      List<String> policyTried = new ArrayList<>();\n+\n+      LoadBalancerRegistry lbRegistry = LoadBalancerRegistry.getDefaultRegistry();\n+      for (Map<String, ?> childPolicy : childPolicies) {\n+        if (childPolicy.isEmpty()) {\n+          continue;\n+        }\n+        if (childPolicy.size() != 1) {\n+          throw\n+              new InvalidChildPolicyConfigException(\n+                  \"childPolicy should have exactly one loadbalancing policy\");\n+        }\n+        String policyName = childPolicy.keySet().iterator().next();\n+        LoadBalancerProvider provider = lbRegistry.getProvider(policyName);\n+        if (provider != null) {\n+          effectiveLbProvider = provider;\n+          effectiveChildPolicy = Collections.unmodifiableMap(childPolicy);\n+          break;\n+        }\n+        policyTried.add(policyName);\n+      }\n+      if (effectiveChildPolicy == null) {\n+        throw\n+            new InvalidChildPolicyConfigException(\n+                String.format(\"no valid childPolicy found, policy tried: %s\", policyTried));\n+      }\n+      return\n+          new ChildLoadBalancingPolicy(\n+              childPolicyConfigTargetFieldName,\n+              (Map<String, Object>) effectiveChildPolicy.values().iterator().next(),\n+              effectiveLbProvider);\n+    }\n+\n+    /** Creates a child load balancer config for given target from elected raw child policy. */\n+    public Map<String, ?> getEffectiveChildPolicy(String target) {\n+      Map<String, Object> childPolicy = new HashMap<>(effectiveRawChildPolicy);\n+      childPolicy.put(targetFieldName, target);\n+      return childPolicy;\n+    }\n+\n+    /** Returns the elected child {@link LoadBalancerProvider}. */\n+    public LoadBalancerProvider getEffectiveLbProvider() {\n+      return effectiveLbProvider;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      ChildLoadBalancingPolicy that = (ChildLoadBalancingPolicy) o;\n+      return Objects.equals(effectiveRawChildPolicy, that.effectiveRawChildPolicy)\n+          && Objects.equals(effectiveLbProvider, that.effectiveLbProvider)\n+          && Objects.equals(targetFieldName, that.targetFieldName);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(effectiveRawChildPolicy, effectiveLbProvider, targetFieldName);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return MoreObjects.toStringHelper(this)\n+          .add(\"effectiveRawChildPolicy\", effectiveRawChildPolicy)\n+          .add(\"effectiveLbProvider\", effectiveLbProvider)\n+          .add(\"childPolicyConfigTargetFieldName\", targetFieldName)\n+          .toString();\n+    }\n+  }\n+\n+  /** Factory for {@link ChildPolicyWrapper}. */\n+  static final class RefCountedChildPolicyWrapperFactory {\n+    @VisibleForTesting\n+    final Map<String /* target */, RefCountedChildPolicyWrapper> childPolicyMap =\n+        new HashMap<>();\n+\n+    private final ChildLoadBalancerHelperProvider childLbHelperProvider;\n+    @Nullable\n+    private final ChildLbStatusListener childLbStatusListener;\n+\n+    public RefCountedChildPolicyWrapperFactory(\n+        ChildLoadBalancerHelperProvider childLbHelperProvider,\n+        @Nullable ChildLbStatusListener childLbStatusListener) {\n+      this.childLbHelperProvider = checkNotNull(childLbHelperProvider, \"childLbHelperProvider\");\n+      this.childLbStatusListener = childLbStatusListener;\n+    }\n+\n+    ChildPolicyWrapper createOrGet(String target) {\n+      // TODO(creamsoup) check if the target is valid or not\n+      ObjectPool<ChildPolicyWrapper> existing = childPolicyMap.get(target);\n+      if (existing != null) {\n+        return existing.getObject();\n+      }\n+      ChildPolicyWrapper childPolicyWrapper =\n+          new ChildPolicyWrapper(target, childLbHelperProvider, childLbStatusListener);\n+      RefCountedChildPolicyWrapper wrapper = RefCountedChildPolicyWrapper.of(childPolicyWrapper);\n+      childPolicyMap.put(target, wrapper);\n+      return childPolicyWrapper;\n+    }\n+\n+    void release(ChildPolicyWrapper childPolicyWrapper) {\n+      checkNotNull(childPolicyWrapper, \"childPolicyWrapper\");\n+      String target = childPolicyWrapper.getTarget();\n+      ObjectPool<ChildPolicyWrapper> existing = childPolicyMap.get(target);\n+      checkState(existing != null, \"Cannot access already released object\");\n+      if (existing.returnObject(childPolicyWrapper) == null) {\n+        childPolicyMap.remove(target);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * ChildPolicyWrapper is a wrapper class for child load balancing policy with associated helper /\n+   * utility classes to manage the child policy.\n+   */\n+  static final class ChildPolicyWrapper {\n+\n+    private final String target;\n+    private final ChildPolicyReportingHelper helper;\n+    private ConnectivityStateInfo connectivityStateInfo =\n+        ConnectivityStateInfo.forNonError(ConnectivityState.IDLE);\n+    private SubchannelPicker picker;\n+\n+    public ChildPolicyWrapper(\n+        String target,\n+        ChildLoadBalancerHelperProvider childLbHelperProvider,\n+        @Nullable  ChildLbStatusListener childLbStatusListener) {\n+      this.target = target;\n+      this.helper =\n+          new ChildPolicyReportingHelper(childLbHelperProvider, this, childLbStatusListener);\n+    }\n+\n+    String getTarget() {\n+      return target;\n+    }\n+\n+    void setPicker(SubchannelPicker picker) {\n+      this.picker = checkNotNull(picker, \"picker\");\n+    }\n+\n+    SubchannelPicker getPicker() {\n+      return picker;\n+    }\n+\n+    ChildPolicyReportingHelper getHelper() {\n+      return helper;\n+    }\n+\n+    void setConnectivityStateInfo(ConnectivityStateInfo connectivityStateInfo) {\n+      this.connectivityStateInfo = connectivityStateInfo;\n+    }\n+\n+    ConnectivityStateInfo getConnectivityStateInfo() {\n+      return connectivityStateInfo;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      ChildPolicyWrapper that = (ChildPolicyWrapper) o;\n+      return Objects.equals(target, that.target)\n+          && Objects.equals(helper, that.helper)\n+          && Objects.equals(connectivityStateInfo, that.connectivityStateInfo)\n+          && Objects.equals(picker, that.picker);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(target, helper, connectivityStateInfo, picker);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return MoreObjects.toStringHelper(this)\n+          .add(\"target\", target)\n+          .add(\"helper\", helper)\n+          .add(\"connectivityStateInfo\", connectivityStateInfo)\n+          .add(\"picker\", picker)\n+          .toString();\n+    }\n+  }\n+\n+  private static final class RefCountedChildPolicyWrapper\n+      implements ObjectPool<ChildPolicyWrapper> {\n+\n+    private final AtomicLong refCnt = new AtomicLong(1);\n+    @Nullable\n+    private ChildPolicyWrapper childPolicyWrapper;\n+\n+    private RefCountedChildPolicyWrapper(ChildPolicyWrapper childPolicyWrapper) {\n+      this.childPolicyWrapper = checkNotNull(childPolicyWrapper, \"childPolicyWrapper\");\n+    }\n+\n+    @Override\n+    public ChildPolicyWrapper getObject() {\n+      long curr = refCnt.getAndIncrement();\n+      if (curr <= 0) {\n+        throw new IllegalStateException(\"ChildPolicyWrapper is already released\");\n+      }\n+      return childPolicyWrapper;\n+    }\n+\n+    @Override\n+    @Nullable\n+    public ChildPolicyWrapper returnObject(Object object) {\n+      checkState(\n+          childPolicyWrapper == object,\n+          \"returned object doesn't match the pooled childPolicyWrapper\");\n+      long newCnt = refCnt.decrementAndGet();\n+      if (newCnt == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcyMDQyNw=="}, "originalCommit": {"oid": "527cd1198e09f7c85b524e266120ce574f040843"}, "originalPosition": 335}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzkxNDAyOnYy", "diffSide": "RIGHT", "path": "rls/src/main/java/io/grpc/rls/internal/LbPolicyConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMTo1ODo1MVrOGIpbQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo1MzozN1rOGIq7HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcyMDUxMw==", "bodyText": "This circular dependency looks weird, because ChildPolicyWrapper is consumed by new ChildPolicyReportingHelper() before instantiation is complete.\nThe two classes are tightly coupled. Making ChildPolicyReportingHelper an inner (non-static) class of ChildPolicyWrapper might be more natural.", "url": "https://github.com/grpc/grpc-java/pull/6883#discussion_r411720513", "createdAt": "2020-04-20T21:58:51Z", "author": {"login": "dapengzhang0"}, "path": "rls/src/main/java/io/grpc/rls/internal/LbPolicyConfiguration.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls.internal;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.MoreObjects;\n+import io.grpc.ConnectivityState;\n+import io.grpc.ConnectivityStateInfo;\n+import io.grpc.LoadBalancer.SubchannelPicker;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.LoadBalancerRegistry;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.rls.internal.ChildLoadBalancerHelper.ChildLoadBalancerHelperProvider;\n+import io.grpc.rls.internal.ChildPolicyReportingHelper.ChildLbStatusListener;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupConfig;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.annotation.Nullable;\n+\n+/** Configuration for RLS load balancing policy. */\n+public final class LbPolicyConfiguration {\n+\n+  private final RouteLookupConfig routeLookupConfig;\n+  private final ChildLoadBalancingPolicy policy;\n+\n+  public LbPolicyConfiguration(\n+      RouteLookupConfig routeLookupConfig, ChildLoadBalancingPolicy policy) {\n+    this.routeLookupConfig = checkNotNull(routeLookupConfig, \"routeLookupConfig\");\n+    this.policy = checkNotNull(policy, \"policy\");\n+  }\n+\n+  public RouteLookupConfig getRouteLookupConfig() {\n+    return routeLookupConfig;\n+  }\n+\n+  public ChildLoadBalancingPolicy getLoadBalancingPolicy() {\n+    return policy;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    LbPolicyConfiguration that = (LbPolicyConfiguration) o;\n+    return Objects.equals(routeLookupConfig, that.routeLookupConfig)\n+        && Objects.equals(policy, that.policy);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(routeLookupConfig, policy);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return MoreObjects.toStringHelper(this)\n+        .add(\"routeLookupConfig\", routeLookupConfig)\n+        .add(\"policy\", policy)\n+        .toString();\n+  }\n+\n+  /** ChildLoadBalancingPolicy is an elected child policy to delegate requests. */\n+  public static final class ChildLoadBalancingPolicy {\n+\n+    private final Map<String, Object> effectiveRawChildPolicy;\n+    private final LoadBalancerProvider effectiveLbProvider;\n+    private final String targetFieldName;\n+\n+    @VisibleForTesting\n+    ChildLoadBalancingPolicy(\n+        String targetFieldName,\n+        Map<String, Object> effectiveRawChildPolicy,\n+        LoadBalancerProvider effectiveLbProvider) {\n+      checkArgument(\n+          targetFieldName != null && !targetFieldName.isEmpty(),\n+          \"targetFieldName cannot be empty or null\");\n+      this.targetFieldName = targetFieldName;\n+      this.effectiveRawChildPolicy =\n+          checkNotNull(effectiveRawChildPolicy, \"effectiveRawChildPolicy\");\n+      this.effectiveLbProvider = checkNotNull(effectiveLbProvider, \"effectiveLbProvider\");\n+    }\n+\n+    /** Creates ChildLoadBalancingPolicy. */\n+    @SuppressWarnings(\"unchecked\")\n+    public static ChildLoadBalancingPolicy create(\n+        String childPolicyConfigTargetFieldName, List<Map<String, ?>> childPolicies)\n+        throws InvalidChildPolicyConfigException {\n+      Map<String, Object> effectiveChildPolicy = null;\n+      LoadBalancerProvider effectiveLbProvider = null;\n+      List<String> policyTried = new ArrayList<>();\n+\n+      LoadBalancerRegistry lbRegistry = LoadBalancerRegistry.getDefaultRegistry();\n+      for (Map<String, ?> childPolicy : childPolicies) {\n+        if (childPolicy.isEmpty()) {\n+          continue;\n+        }\n+        if (childPolicy.size() != 1) {\n+          throw\n+              new InvalidChildPolicyConfigException(\n+                  \"childPolicy should have exactly one loadbalancing policy\");\n+        }\n+        String policyName = childPolicy.keySet().iterator().next();\n+        LoadBalancerProvider provider = lbRegistry.getProvider(policyName);\n+        if (provider != null) {\n+          effectiveLbProvider = provider;\n+          effectiveChildPolicy = Collections.unmodifiableMap(childPolicy);\n+          break;\n+        }\n+        policyTried.add(policyName);\n+      }\n+      if (effectiveChildPolicy == null) {\n+        throw\n+            new InvalidChildPolicyConfigException(\n+                String.format(\"no valid childPolicy found, policy tried: %s\", policyTried));\n+      }\n+      return\n+          new ChildLoadBalancingPolicy(\n+              childPolicyConfigTargetFieldName,\n+              (Map<String, Object>) effectiveChildPolicy.values().iterator().next(),\n+              effectiveLbProvider);\n+    }\n+\n+    /** Creates a child load balancer config for given target from elected raw child policy. */\n+    public Map<String, ?> getEffectiveChildPolicy(String target) {\n+      Map<String, Object> childPolicy = new HashMap<>(effectiveRawChildPolicy);\n+      childPolicy.put(targetFieldName, target);\n+      return childPolicy;\n+    }\n+\n+    /** Returns the elected child {@link LoadBalancerProvider}. */\n+    public LoadBalancerProvider getEffectiveLbProvider() {\n+      return effectiveLbProvider;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      ChildLoadBalancingPolicy that = (ChildLoadBalancingPolicy) o;\n+      return Objects.equals(effectiveRawChildPolicy, that.effectiveRawChildPolicy)\n+          && Objects.equals(effectiveLbProvider, that.effectiveLbProvider)\n+          && Objects.equals(targetFieldName, that.targetFieldName);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(effectiveRawChildPolicy, effectiveLbProvider, targetFieldName);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return MoreObjects.toStringHelper(this)\n+          .add(\"effectiveRawChildPolicy\", effectiveRawChildPolicy)\n+          .add(\"effectiveLbProvider\", effectiveLbProvider)\n+          .add(\"childPolicyConfigTargetFieldName\", targetFieldName)\n+          .toString();\n+    }\n+  }\n+\n+  /** Factory for {@link ChildPolicyWrapper}. */\n+  static final class RefCountedChildPolicyWrapperFactory {\n+    @VisibleForTesting\n+    final Map<String /* target */, RefCountedChildPolicyWrapper> childPolicyMap =\n+        new HashMap<>();\n+\n+    private final ChildLoadBalancerHelperProvider childLbHelperProvider;\n+    @Nullable\n+    private final ChildLbStatusListener childLbStatusListener;\n+\n+    public RefCountedChildPolicyWrapperFactory(\n+        ChildLoadBalancerHelperProvider childLbHelperProvider,\n+        @Nullable ChildLbStatusListener childLbStatusListener) {\n+      this.childLbHelperProvider = checkNotNull(childLbHelperProvider, \"childLbHelperProvider\");\n+      this.childLbStatusListener = childLbStatusListener;\n+    }\n+\n+    ChildPolicyWrapper createOrGet(String target) {\n+      // TODO(creamsoup) check if the target is valid or not\n+      ObjectPool<ChildPolicyWrapper> existing = childPolicyMap.get(target);\n+      if (existing != null) {\n+        return existing.getObject();\n+      }\n+      ChildPolicyWrapper childPolicyWrapper =\n+          new ChildPolicyWrapper(target, childLbHelperProvider, childLbStatusListener);\n+      RefCountedChildPolicyWrapper wrapper = RefCountedChildPolicyWrapper.of(childPolicyWrapper);\n+      childPolicyMap.put(target, wrapper);\n+      return childPolicyWrapper;\n+    }\n+\n+    void release(ChildPolicyWrapper childPolicyWrapper) {\n+      checkNotNull(childPolicyWrapper, \"childPolicyWrapper\");\n+      String target = childPolicyWrapper.getTarget();\n+      ObjectPool<ChildPolicyWrapper> existing = childPolicyMap.get(target);\n+      checkState(existing != null, \"Cannot access already released object\");\n+      if (existing.returnObject(childPolicyWrapper) == null) {\n+        childPolicyMap.remove(target);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * ChildPolicyWrapper is a wrapper class for child load balancing policy with associated helper /\n+   * utility classes to manage the child policy.\n+   */\n+  static final class ChildPolicyWrapper {\n+\n+    private final String target;\n+    private final ChildPolicyReportingHelper helper;\n+    private ConnectivityStateInfo connectivityStateInfo =\n+        ConnectivityStateInfo.forNonError(ConnectivityState.IDLE);\n+    private SubchannelPicker picker;\n+\n+    public ChildPolicyWrapper(\n+        String target,\n+        ChildLoadBalancerHelperProvider childLbHelperProvider,\n+        @Nullable  ChildLbStatusListener childLbStatusListener) {\n+      this.target = target;\n+      this.helper =\n+          new ChildPolicyReportingHelper(childLbHelperProvider, this, childLbStatusListener);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "527cd1198e09f7c85b524e266120ce574f040843"}, "originalPosition": 250}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0NTA1Mw==", "bodyText": "yes i was wondering same thing.", "url": "https://github.com/grpc/grpc-java/pull/6883#discussion_r411745053", "createdAt": "2020-04-20T22:53:37Z", "author": {"login": "creamsoup"}, "path": "rls/src/main/java/io/grpc/rls/internal/LbPolicyConfiguration.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls.internal;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.MoreObjects;\n+import io.grpc.ConnectivityState;\n+import io.grpc.ConnectivityStateInfo;\n+import io.grpc.LoadBalancer.SubchannelPicker;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.LoadBalancerRegistry;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.rls.internal.ChildLoadBalancerHelper.ChildLoadBalancerHelperProvider;\n+import io.grpc.rls.internal.ChildPolicyReportingHelper.ChildLbStatusListener;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupConfig;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.annotation.Nullable;\n+\n+/** Configuration for RLS load balancing policy. */\n+public final class LbPolicyConfiguration {\n+\n+  private final RouteLookupConfig routeLookupConfig;\n+  private final ChildLoadBalancingPolicy policy;\n+\n+  public LbPolicyConfiguration(\n+      RouteLookupConfig routeLookupConfig, ChildLoadBalancingPolicy policy) {\n+    this.routeLookupConfig = checkNotNull(routeLookupConfig, \"routeLookupConfig\");\n+    this.policy = checkNotNull(policy, \"policy\");\n+  }\n+\n+  public RouteLookupConfig getRouteLookupConfig() {\n+    return routeLookupConfig;\n+  }\n+\n+  public ChildLoadBalancingPolicy getLoadBalancingPolicy() {\n+    return policy;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    LbPolicyConfiguration that = (LbPolicyConfiguration) o;\n+    return Objects.equals(routeLookupConfig, that.routeLookupConfig)\n+        && Objects.equals(policy, that.policy);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(routeLookupConfig, policy);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return MoreObjects.toStringHelper(this)\n+        .add(\"routeLookupConfig\", routeLookupConfig)\n+        .add(\"policy\", policy)\n+        .toString();\n+  }\n+\n+  /** ChildLoadBalancingPolicy is an elected child policy to delegate requests. */\n+  public static final class ChildLoadBalancingPolicy {\n+\n+    private final Map<String, Object> effectiveRawChildPolicy;\n+    private final LoadBalancerProvider effectiveLbProvider;\n+    private final String targetFieldName;\n+\n+    @VisibleForTesting\n+    ChildLoadBalancingPolicy(\n+        String targetFieldName,\n+        Map<String, Object> effectiveRawChildPolicy,\n+        LoadBalancerProvider effectiveLbProvider) {\n+      checkArgument(\n+          targetFieldName != null && !targetFieldName.isEmpty(),\n+          \"targetFieldName cannot be empty or null\");\n+      this.targetFieldName = targetFieldName;\n+      this.effectiveRawChildPolicy =\n+          checkNotNull(effectiveRawChildPolicy, \"effectiveRawChildPolicy\");\n+      this.effectiveLbProvider = checkNotNull(effectiveLbProvider, \"effectiveLbProvider\");\n+    }\n+\n+    /** Creates ChildLoadBalancingPolicy. */\n+    @SuppressWarnings(\"unchecked\")\n+    public static ChildLoadBalancingPolicy create(\n+        String childPolicyConfigTargetFieldName, List<Map<String, ?>> childPolicies)\n+        throws InvalidChildPolicyConfigException {\n+      Map<String, Object> effectiveChildPolicy = null;\n+      LoadBalancerProvider effectiveLbProvider = null;\n+      List<String> policyTried = new ArrayList<>();\n+\n+      LoadBalancerRegistry lbRegistry = LoadBalancerRegistry.getDefaultRegistry();\n+      for (Map<String, ?> childPolicy : childPolicies) {\n+        if (childPolicy.isEmpty()) {\n+          continue;\n+        }\n+        if (childPolicy.size() != 1) {\n+          throw\n+              new InvalidChildPolicyConfigException(\n+                  \"childPolicy should have exactly one loadbalancing policy\");\n+        }\n+        String policyName = childPolicy.keySet().iterator().next();\n+        LoadBalancerProvider provider = lbRegistry.getProvider(policyName);\n+        if (provider != null) {\n+          effectiveLbProvider = provider;\n+          effectiveChildPolicy = Collections.unmodifiableMap(childPolicy);\n+          break;\n+        }\n+        policyTried.add(policyName);\n+      }\n+      if (effectiveChildPolicy == null) {\n+        throw\n+            new InvalidChildPolicyConfigException(\n+                String.format(\"no valid childPolicy found, policy tried: %s\", policyTried));\n+      }\n+      return\n+          new ChildLoadBalancingPolicy(\n+              childPolicyConfigTargetFieldName,\n+              (Map<String, Object>) effectiveChildPolicy.values().iterator().next(),\n+              effectiveLbProvider);\n+    }\n+\n+    /** Creates a child load balancer config for given target from elected raw child policy. */\n+    public Map<String, ?> getEffectiveChildPolicy(String target) {\n+      Map<String, Object> childPolicy = new HashMap<>(effectiveRawChildPolicy);\n+      childPolicy.put(targetFieldName, target);\n+      return childPolicy;\n+    }\n+\n+    /** Returns the elected child {@link LoadBalancerProvider}. */\n+    public LoadBalancerProvider getEffectiveLbProvider() {\n+      return effectiveLbProvider;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      ChildLoadBalancingPolicy that = (ChildLoadBalancingPolicy) o;\n+      return Objects.equals(effectiveRawChildPolicy, that.effectiveRawChildPolicy)\n+          && Objects.equals(effectiveLbProvider, that.effectiveLbProvider)\n+          && Objects.equals(targetFieldName, that.targetFieldName);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(effectiveRawChildPolicy, effectiveLbProvider, targetFieldName);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return MoreObjects.toStringHelper(this)\n+          .add(\"effectiveRawChildPolicy\", effectiveRawChildPolicy)\n+          .add(\"effectiveLbProvider\", effectiveLbProvider)\n+          .add(\"childPolicyConfigTargetFieldName\", targetFieldName)\n+          .toString();\n+    }\n+  }\n+\n+  /** Factory for {@link ChildPolicyWrapper}. */\n+  static final class RefCountedChildPolicyWrapperFactory {\n+    @VisibleForTesting\n+    final Map<String /* target */, RefCountedChildPolicyWrapper> childPolicyMap =\n+        new HashMap<>();\n+\n+    private final ChildLoadBalancerHelperProvider childLbHelperProvider;\n+    @Nullable\n+    private final ChildLbStatusListener childLbStatusListener;\n+\n+    public RefCountedChildPolicyWrapperFactory(\n+        ChildLoadBalancerHelperProvider childLbHelperProvider,\n+        @Nullable ChildLbStatusListener childLbStatusListener) {\n+      this.childLbHelperProvider = checkNotNull(childLbHelperProvider, \"childLbHelperProvider\");\n+      this.childLbStatusListener = childLbStatusListener;\n+    }\n+\n+    ChildPolicyWrapper createOrGet(String target) {\n+      // TODO(creamsoup) check if the target is valid or not\n+      ObjectPool<ChildPolicyWrapper> existing = childPolicyMap.get(target);\n+      if (existing != null) {\n+        return existing.getObject();\n+      }\n+      ChildPolicyWrapper childPolicyWrapper =\n+          new ChildPolicyWrapper(target, childLbHelperProvider, childLbStatusListener);\n+      RefCountedChildPolicyWrapper wrapper = RefCountedChildPolicyWrapper.of(childPolicyWrapper);\n+      childPolicyMap.put(target, wrapper);\n+      return childPolicyWrapper;\n+    }\n+\n+    void release(ChildPolicyWrapper childPolicyWrapper) {\n+      checkNotNull(childPolicyWrapper, \"childPolicyWrapper\");\n+      String target = childPolicyWrapper.getTarget();\n+      ObjectPool<ChildPolicyWrapper> existing = childPolicyMap.get(target);\n+      checkState(existing != null, \"Cannot access already released object\");\n+      if (existing.returnObject(childPolicyWrapper) == null) {\n+        childPolicyMap.remove(target);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * ChildPolicyWrapper is a wrapper class for child load balancing policy with associated helper /\n+   * utility classes to manage the child policy.\n+   */\n+  static final class ChildPolicyWrapper {\n+\n+    private final String target;\n+    private final ChildPolicyReportingHelper helper;\n+    private ConnectivityStateInfo connectivityStateInfo =\n+        ConnectivityStateInfo.forNonError(ConnectivityState.IDLE);\n+    private SubchannelPicker picker;\n+\n+    public ChildPolicyWrapper(\n+        String target,\n+        ChildLoadBalancerHelperProvider childLbHelperProvider,\n+        @Nullable  ChildLbStatusListener childLbStatusListener) {\n+      this.target = target;\n+      this.helper =\n+          new ChildPolicyReportingHelper(childLbHelperProvider, this, childLbStatusListener);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcyMDUxMw=="}, "originalCommit": {"oid": "527cd1198e09f7c85b524e266120ce574f040843"}, "originalPosition": 250}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzkxNTY2OnYy", "diffSide": "RIGHT", "path": "rls/src/main/java/io/grpc/rls/internal/ChildPolicyReportingHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMTo1OToyNVrOGIpcMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0MDoxOFrOGIqk7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcyMDc1Mw==", "bodyText": "Not used?", "url": "https://github.com/grpc/grpc-java/pull/6883#discussion_r411720753", "createdAt": "2020-04-20T21:59:25Z", "author": {"login": "dapengzhang0"}, "path": "rls/src/main/java/io/grpc/rls/internal/ChildPolicyReportingHelper.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls.internal;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import io.grpc.ConnectivityState;\n+import io.grpc.ConnectivityStateInfo;\n+import io.grpc.LoadBalancer.CreateSubchannelArgs;\n+import io.grpc.LoadBalancer.Helper;\n+import io.grpc.LoadBalancer.Subchannel;\n+import io.grpc.LoadBalancer.SubchannelPicker;\n+import io.grpc.LoadBalancer.SubchannelStateListener;\n+import io.grpc.rls.internal.ChildLoadBalancerHelper.ChildLoadBalancerHelperProvider;\n+import io.grpc.rls.internal.LbPolicyConfiguration.ChildPolicyWrapper;\n+import io.grpc.util.ForwardingLoadBalancerHelper;\n+import io.grpc.util.ForwardingSubchannel;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A delegating {@link io.grpc.LoadBalancer.Helper} maintains status of {@link ChildPolicyWrapper}\n+ * when {@link Subchannel} status changed. This helper is used between child policy and parent\n+ * load-balancer where each picker in child policy is governed by a governing picker (RlsPicker).\n+ * The governing picker will be reported back to the parent load-balancer.\n+ */\n+final class ChildPolicyReportingHelper extends ForwardingLoadBalancerHelper {\n+\n+  private final ChildLoadBalancerHelper delegate;\n+  private final ChildPolicyWrapper childPolicyWrapper;\n+  @Nullable\n+  private final ChildLbStatusListener listener;\n+\n+  ChildPolicyReportingHelper(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "527cd1198e09f7c85b524e266120ce574f040843"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTczOTM3Mg==", "bodyText": "not used yet. this will be used by fallback channel.", "url": "https://github.com/grpc/grpc-java/pull/6883#discussion_r411739372", "createdAt": "2020-04-20T22:40:18Z", "author": {"login": "creamsoup"}, "path": "rls/src/main/java/io/grpc/rls/internal/ChildPolicyReportingHelper.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls.internal;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import io.grpc.ConnectivityState;\n+import io.grpc.ConnectivityStateInfo;\n+import io.grpc.LoadBalancer.CreateSubchannelArgs;\n+import io.grpc.LoadBalancer.Helper;\n+import io.grpc.LoadBalancer.Subchannel;\n+import io.grpc.LoadBalancer.SubchannelPicker;\n+import io.grpc.LoadBalancer.SubchannelStateListener;\n+import io.grpc.rls.internal.ChildLoadBalancerHelper.ChildLoadBalancerHelperProvider;\n+import io.grpc.rls.internal.LbPolicyConfiguration.ChildPolicyWrapper;\n+import io.grpc.util.ForwardingLoadBalancerHelper;\n+import io.grpc.util.ForwardingSubchannel;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A delegating {@link io.grpc.LoadBalancer.Helper} maintains status of {@link ChildPolicyWrapper}\n+ * when {@link Subchannel} status changed. This helper is used between child policy and parent\n+ * load-balancer where each picker in child policy is governed by a governing picker (RlsPicker).\n+ * The governing picker will be reported back to the parent load-balancer.\n+ */\n+final class ChildPolicyReportingHelper extends ForwardingLoadBalancerHelper {\n+\n+  private final ChildLoadBalancerHelper delegate;\n+  private final ChildPolicyWrapper childPolicyWrapper;\n+  @Nullable\n+  private final ChildLbStatusListener listener;\n+\n+  ChildPolicyReportingHelper(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcyMDc1Mw=="}, "originalCommit": {"oid": "527cd1198e09f7c85b524e266120ce574f040843"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODE0NzE3OnYy", "diffSide": "RIGHT", "path": "rls/src/main/java/io/grpc/rls/internal/LbPolicyConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMzoxNjowM1rOGIreag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMzo0Njo0N1rOGIsTBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc1NDA5MA==", "bodyText": "There is extra space.", "url": "https://github.com/grpc/grpc-java/pull/6883#discussion_r411754090", "createdAt": "2020-04-20T23:16:03Z", "author": {"login": "dapengzhang0"}, "path": "rls/src/main/java/io/grpc/rls/internal/LbPolicyConfiguration.java", "diffHunk": "@@ -0,0 +1,446 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls.internal;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.MoreObjects;\n+import io.grpc.ConnectivityState;\n+import io.grpc.ConnectivityStateInfo;\n+import io.grpc.LoadBalancer.CreateSubchannelArgs;\n+import io.grpc.LoadBalancer.Helper;\n+import io.grpc.LoadBalancer.Subchannel;\n+import io.grpc.LoadBalancer.SubchannelPicker;\n+import io.grpc.LoadBalancer.SubchannelStateListener;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.LoadBalancerRegistry;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.rls.internal.ChildLoadBalancerHelper.ChildLoadBalancerHelperProvider;\n+import io.grpc.rls.internal.LbPolicyConfiguration.ChildPolicyWrapper.ChildLbStatusListener;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupConfig;\n+import io.grpc.util.ForwardingLoadBalancerHelper;\n+import io.grpc.util.ForwardingSubchannel;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.annotation.Nullable;\n+\n+/** Configuration for RLS load balancing policy. */\n+public final class LbPolicyConfiguration {\n+\n+  private final RouteLookupConfig routeLookupConfig;\n+  private final ChildLoadBalancingPolicy policy;\n+\n+  public LbPolicyConfiguration(\n+      RouteLookupConfig routeLookupConfig, ChildLoadBalancingPolicy policy) {\n+    this.routeLookupConfig = checkNotNull(routeLookupConfig, \"routeLookupConfig\");\n+    this.policy = checkNotNull(policy, \"policy\");\n+  }\n+\n+  public RouteLookupConfig getRouteLookupConfig() {\n+    return routeLookupConfig;\n+  }\n+\n+  public ChildLoadBalancingPolicy getLoadBalancingPolicy() {\n+    return policy;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    LbPolicyConfiguration that = (LbPolicyConfiguration) o;\n+    return Objects.equals(routeLookupConfig, that.routeLookupConfig)\n+        && Objects.equals(policy, that.policy);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(routeLookupConfig, policy);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return MoreObjects.toStringHelper(this)\n+        .add(\"routeLookupConfig\", routeLookupConfig)\n+        .add(\"policy\", policy)\n+        .toString();\n+  }\n+\n+  /** ChildLoadBalancingPolicy is an elected child policy to delegate requests. */\n+  public static final class ChildLoadBalancingPolicy {\n+\n+    private final Map<String, Object> effectiveRawChildPolicy;\n+    private final LoadBalancerProvider effectiveLbProvider;\n+    private final String targetFieldName;\n+\n+    @VisibleForTesting\n+    ChildLoadBalancingPolicy(\n+        String targetFieldName,\n+        Map<String, Object> effectiveRawChildPolicy,\n+        LoadBalancerProvider effectiveLbProvider) {\n+      checkArgument(\n+          targetFieldName != null && !targetFieldName.isEmpty(),\n+          \"targetFieldName cannot be empty or null\");\n+      this.targetFieldName = targetFieldName;\n+      this.effectiveRawChildPolicy =\n+          checkNotNull(effectiveRawChildPolicy, \"effectiveRawChildPolicy\");\n+      this.effectiveLbProvider = checkNotNull(effectiveLbProvider, \"effectiveLbProvider\");\n+    }\n+\n+    /** Creates ChildLoadBalancingPolicy. */\n+    @SuppressWarnings(\"unchecked\")\n+    public static ChildLoadBalancingPolicy create(\n+        String childPolicyConfigTargetFieldName, List<Map<String, ?>> childPolicies)\n+        throws InvalidChildPolicyConfigException {\n+      Map<String, Object> effectiveChildPolicy = null;\n+      LoadBalancerProvider effectiveLbProvider = null;\n+      List<String> policyTried = new ArrayList<>();\n+\n+      LoadBalancerRegistry lbRegistry = LoadBalancerRegistry.getDefaultRegistry();\n+      for (Map<String, ?> childPolicy : childPolicies) {\n+        if (childPolicy.isEmpty()) {\n+          continue;\n+        }\n+        if (childPolicy.size() != 1) {\n+          throw\n+              new InvalidChildPolicyConfigException(\n+                  \"childPolicy should have exactly one loadbalancing policy\");\n+        }\n+        String policyName = childPolicy.keySet().iterator().next();\n+        LoadBalancerProvider provider = lbRegistry.getProvider(policyName);\n+        if (provider != null) {\n+          effectiveLbProvider = provider;\n+          effectiveChildPolicy = Collections.unmodifiableMap(childPolicy);\n+          break;\n+        }\n+        policyTried.add(policyName);\n+      }\n+      if (effectiveChildPolicy == null) {\n+        throw\n+            new InvalidChildPolicyConfigException(\n+                String.format(\"no valid childPolicy found, policy tried: %s\", policyTried));\n+      }\n+      return\n+          new ChildLoadBalancingPolicy(\n+              childPolicyConfigTargetFieldName,\n+              (Map<String, Object>) effectiveChildPolicy.values().iterator().next(),\n+              effectiveLbProvider);\n+    }\n+\n+    /** Creates a child load balancer config for given target from elected raw child policy. */\n+    public Map<String, ?> getEffectiveChildPolicy(String target) {\n+      Map<String, Object> childPolicy = new HashMap<>(effectiveRawChildPolicy);\n+      childPolicy.put(targetFieldName, target);\n+      return childPolicy;\n+    }\n+\n+    /** Returns the elected child {@link LoadBalancerProvider}. */\n+    public LoadBalancerProvider getEffectiveLbProvider() {\n+      return effectiveLbProvider;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      ChildLoadBalancingPolicy that = (ChildLoadBalancingPolicy) o;\n+      return Objects.equals(effectiveRawChildPolicy, that.effectiveRawChildPolicy)\n+          && Objects.equals(effectiveLbProvider, that.effectiveLbProvider)\n+          && Objects.equals(targetFieldName, that.targetFieldName);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(effectiveRawChildPolicy, effectiveLbProvider, targetFieldName);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return MoreObjects.toStringHelper(this)\n+          .add(\"effectiveRawChildPolicy\", effectiveRawChildPolicy)\n+          .add(\"effectiveLbProvider\", effectiveLbProvider)\n+          .add(\"childPolicyConfigTargetFieldName\", targetFieldName)\n+          .toString();\n+    }\n+  }\n+\n+  /** Factory for {@link ChildPolicyWrapper}. */\n+  static final class RefCountedChildPolicyWrapperFactory {\n+    @VisibleForTesting\n+    final Map<String /* target */, RefCountedChildPolicyWrapper> childPolicyMap =\n+        new HashMap<>();\n+\n+    private final ChildLoadBalancerHelperProvider childLbHelperProvider;\n+    @Nullable\n+    private final ChildLbStatusListener childLbStatusListener;\n+\n+    public RefCountedChildPolicyWrapperFactory(\n+        ChildLoadBalancerHelperProvider childLbHelperProvider,\n+        @Nullable ChildLbStatusListener childLbStatusListener) {\n+      this.childLbHelperProvider = checkNotNull(childLbHelperProvider, \"childLbHelperProvider\");\n+      this.childLbStatusListener = childLbStatusListener;\n+    }\n+\n+    ChildPolicyWrapper createOrGet(String target) {\n+      // TODO(creamsoup) check if the target is valid or not\n+      ObjectPool<ChildPolicyWrapper> existing = childPolicyMap.get(target);\n+      if (existing != null) {\n+        return existing.getObject();\n+      }\n+      ChildPolicyWrapper childPolicyWrapper =\n+          new ChildPolicyWrapper(target, childLbHelperProvider, childLbStatusListener);\n+      RefCountedChildPolicyWrapper wrapper = RefCountedChildPolicyWrapper.of(childPolicyWrapper);\n+      childPolicyMap.put(target, wrapper);\n+      return childPolicyWrapper;\n+    }\n+\n+    void release(ChildPolicyWrapper childPolicyWrapper) {\n+      checkNotNull(childPolicyWrapper, \"childPolicyWrapper\");\n+      String target = childPolicyWrapper.getTarget();\n+      ObjectPool<ChildPolicyWrapper> existing = childPolicyMap.get(target);\n+      checkState(existing != null, \"Cannot access already released object\");\n+      if (existing.returnObject(childPolicyWrapper) == null) {\n+        childPolicyMap.remove(target);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * ChildPolicyWrapper is a wrapper class for child load balancing policy with associated helper /\n+   * utility classes to manage the child policy.\n+   */\n+  static final class ChildPolicyWrapper {\n+\n+    private final String target;\n+    private final ChildPolicyReportingHelper helper;\n+    private ConnectivityStateInfo connectivityStateInfo =\n+        ConnectivityStateInfo.forNonError(ConnectivityState.IDLE);\n+    private SubchannelPicker picker;\n+\n+    public ChildPolicyWrapper(\n+        String target,\n+        ChildLoadBalancerHelperProvider childLbHelperProvider,\n+        @Nullable  ChildLbStatusListener childLbStatusListener) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd6e862613e19424fc5f02597ae5d7e2acefa4c1"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc2NzU1Nw==", "bodyText": "good catch!", "url": "https://github.com/grpc/grpc-java/pull/6883#discussion_r411767557", "createdAt": "2020-04-20T23:46:47Z", "author": {"login": "creamsoup"}, "path": "rls/src/main/java/io/grpc/rls/internal/LbPolicyConfiguration.java", "diffHunk": "@@ -0,0 +1,446 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls.internal;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.MoreObjects;\n+import io.grpc.ConnectivityState;\n+import io.grpc.ConnectivityStateInfo;\n+import io.grpc.LoadBalancer.CreateSubchannelArgs;\n+import io.grpc.LoadBalancer.Helper;\n+import io.grpc.LoadBalancer.Subchannel;\n+import io.grpc.LoadBalancer.SubchannelPicker;\n+import io.grpc.LoadBalancer.SubchannelStateListener;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.LoadBalancerRegistry;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.rls.internal.ChildLoadBalancerHelper.ChildLoadBalancerHelperProvider;\n+import io.grpc.rls.internal.LbPolicyConfiguration.ChildPolicyWrapper.ChildLbStatusListener;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupConfig;\n+import io.grpc.util.ForwardingLoadBalancerHelper;\n+import io.grpc.util.ForwardingSubchannel;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.annotation.Nullable;\n+\n+/** Configuration for RLS load balancing policy. */\n+public final class LbPolicyConfiguration {\n+\n+  private final RouteLookupConfig routeLookupConfig;\n+  private final ChildLoadBalancingPolicy policy;\n+\n+  public LbPolicyConfiguration(\n+      RouteLookupConfig routeLookupConfig, ChildLoadBalancingPolicy policy) {\n+    this.routeLookupConfig = checkNotNull(routeLookupConfig, \"routeLookupConfig\");\n+    this.policy = checkNotNull(policy, \"policy\");\n+  }\n+\n+  public RouteLookupConfig getRouteLookupConfig() {\n+    return routeLookupConfig;\n+  }\n+\n+  public ChildLoadBalancingPolicy getLoadBalancingPolicy() {\n+    return policy;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    LbPolicyConfiguration that = (LbPolicyConfiguration) o;\n+    return Objects.equals(routeLookupConfig, that.routeLookupConfig)\n+        && Objects.equals(policy, that.policy);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(routeLookupConfig, policy);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return MoreObjects.toStringHelper(this)\n+        .add(\"routeLookupConfig\", routeLookupConfig)\n+        .add(\"policy\", policy)\n+        .toString();\n+  }\n+\n+  /** ChildLoadBalancingPolicy is an elected child policy to delegate requests. */\n+  public static final class ChildLoadBalancingPolicy {\n+\n+    private final Map<String, Object> effectiveRawChildPolicy;\n+    private final LoadBalancerProvider effectiveLbProvider;\n+    private final String targetFieldName;\n+\n+    @VisibleForTesting\n+    ChildLoadBalancingPolicy(\n+        String targetFieldName,\n+        Map<String, Object> effectiveRawChildPolicy,\n+        LoadBalancerProvider effectiveLbProvider) {\n+      checkArgument(\n+          targetFieldName != null && !targetFieldName.isEmpty(),\n+          \"targetFieldName cannot be empty or null\");\n+      this.targetFieldName = targetFieldName;\n+      this.effectiveRawChildPolicy =\n+          checkNotNull(effectiveRawChildPolicy, \"effectiveRawChildPolicy\");\n+      this.effectiveLbProvider = checkNotNull(effectiveLbProvider, \"effectiveLbProvider\");\n+    }\n+\n+    /** Creates ChildLoadBalancingPolicy. */\n+    @SuppressWarnings(\"unchecked\")\n+    public static ChildLoadBalancingPolicy create(\n+        String childPolicyConfigTargetFieldName, List<Map<String, ?>> childPolicies)\n+        throws InvalidChildPolicyConfigException {\n+      Map<String, Object> effectiveChildPolicy = null;\n+      LoadBalancerProvider effectiveLbProvider = null;\n+      List<String> policyTried = new ArrayList<>();\n+\n+      LoadBalancerRegistry lbRegistry = LoadBalancerRegistry.getDefaultRegistry();\n+      for (Map<String, ?> childPolicy : childPolicies) {\n+        if (childPolicy.isEmpty()) {\n+          continue;\n+        }\n+        if (childPolicy.size() != 1) {\n+          throw\n+              new InvalidChildPolicyConfigException(\n+                  \"childPolicy should have exactly one loadbalancing policy\");\n+        }\n+        String policyName = childPolicy.keySet().iterator().next();\n+        LoadBalancerProvider provider = lbRegistry.getProvider(policyName);\n+        if (provider != null) {\n+          effectiveLbProvider = provider;\n+          effectiveChildPolicy = Collections.unmodifiableMap(childPolicy);\n+          break;\n+        }\n+        policyTried.add(policyName);\n+      }\n+      if (effectiveChildPolicy == null) {\n+        throw\n+            new InvalidChildPolicyConfigException(\n+                String.format(\"no valid childPolicy found, policy tried: %s\", policyTried));\n+      }\n+      return\n+          new ChildLoadBalancingPolicy(\n+              childPolicyConfigTargetFieldName,\n+              (Map<String, Object>) effectiveChildPolicy.values().iterator().next(),\n+              effectiveLbProvider);\n+    }\n+\n+    /** Creates a child load balancer config for given target from elected raw child policy. */\n+    public Map<String, ?> getEffectiveChildPolicy(String target) {\n+      Map<String, Object> childPolicy = new HashMap<>(effectiveRawChildPolicy);\n+      childPolicy.put(targetFieldName, target);\n+      return childPolicy;\n+    }\n+\n+    /** Returns the elected child {@link LoadBalancerProvider}. */\n+    public LoadBalancerProvider getEffectiveLbProvider() {\n+      return effectiveLbProvider;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      ChildLoadBalancingPolicy that = (ChildLoadBalancingPolicy) o;\n+      return Objects.equals(effectiveRawChildPolicy, that.effectiveRawChildPolicy)\n+          && Objects.equals(effectiveLbProvider, that.effectiveLbProvider)\n+          && Objects.equals(targetFieldName, that.targetFieldName);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(effectiveRawChildPolicy, effectiveLbProvider, targetFieldName);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return MoreObjects.toStringHelper(this)\n+          .add(\"effectiveRawChildPolicy\", effectiveRawChildPolicy)\n+          .add(\"effectiveLbProvider\", effectiveLbProvider)\n+          .add(\"childPolicyConfigTargetFieldName\", targetFieldName)\n+          .toString();\n+    }\n+  }\n+\n+  /** Factory for {@link ChildPolicyWrapper}. */\n+  static final class RefCountedChildPolicyWrapperFactory {\n+    @VisibleForTesting\n+    final Map<String /* target */, RefCountedChildPolicyWrapper> childPolicyMap =\n+        new HashMap<>();\n+\n+    private final ChildLoadBalancerHelperProvider childLbHelperProvider;\n+    @Nullable\n+    private final ChildLbStatusListener childLbStatusListener;\n+\n+    public RefCountedChildPolicyWrapperFactory(\n+        ChildLoadBalancerHelperProvider childLbHelperProvider,\n+        @Nullable ChildLbStatusListener childLbStatusListener) {\n+      this.childLbHelperProvider = checkNotNull(childLbHelperProvider, \"childLbHelperProvider\");\n+      this.childLbStatusListener = childLbStatusListener;\n+    }\n+\n+    ChildPolicyWrapper createOrGet(String target) {\n+      // TODO(creamsoup) check if the target is valid or not\n+      ObjectPool<ChildPolicyWrapper> existing = childPolicyMap.get(target);\n+      if (existing != null) {\n+        return existing.getObject();\n+      }\n+      ChildPolicyWrapper childPolicyWrapper =\n+          new ChildPolicyWrapper(target, childLbHelperProvider, childLbStatusListener);\n+      RefCountedChildPolicyWrapper wrapper = RefCountedChildPolicyWrapper.of(childPolicyWrapper);\n+      childPolicyMap.put(target, wrapper);\n+      return childPolicyWrapper;\n+    }\n+\n+    void release(ChildPolicyWrapper childPolicyWrapper) {\n+      checkNotNull(childPolicyWrapper, \"childPolicyWrapper\");\n+      String target = childPolicyWrapper.getTarget();\n+      ObjectPool<ChildPolicyWrapper> existing = childPolicyMap.get(target);\n+      checkState(existing != null, \"Cannot access already released object\");\n+      if (existing.returnObject(childPolicyWrapper) == null) {\n+        childPolicyMap.remove(target);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * ChildPolicyWrapper is a wrapper class for child load balancing policy with associated helper /\n+   * utility classes to manage the child policy.\n+   */\n+  static final class ChildPolicyWrapper {\n+\n+    private final String target;\n+    private final ChildPolicyReportingHelper helper;\n+    private ConnectivityStateInfo connectivityStateInfo =\n+        ConnectivityStateInfo.forNonError(ConnectivityState.IDLE);\n+    private SubchannelPicker picker;\n+\n+    public ChildPolicyWrapper(\n+        String target,\n+        ChildLoadBalancerHelperProvider childLbHelperProvider,\n+        @Nullable  ChildLbStatusListener childLbStatusListener) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc1NDA5MA=="}, "originalCommit": {"oid": "cd6e862613e19424fc5f02597ae5d7e2acefa4c1"}, "originalPosition": 253}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODE0ODYxOnYy", "diffSide": "RIGHT", "path": "rls/src/main/java/io/grpc/rls/internal/LbPolicyConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMzoxNjozN1rOGIrfQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMzo1MDoxMlrOGIsX_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc1NDMwNA==", "bodyText": "nit: The listener interface is nested too deep. Can be one level up.", "url": "https://github.com/grpc/grpc-java/pull/6883#discussion_r411754304", "createdAt": "2020-04-20T23:16:37Z", "author": {"login": "dapengzhang0"}, "path": "rls/src/main/java/io/grpc/rls/internal/LbPolicyConfiguration.java", "diffHunk": "@@ -0,0 +1,446 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls.internal;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.MoreObjects;\n+import io.grpc.ConnectivityState;\n+import io.grpc.ConnectivityStateInfo;\n+import io.grpc.LoadBalancer.CreateSubchannelArgs;\n+import io.grpc.LoadBalancer.Helper;\n+import io.grpc.LoadBalancer.Subchannel;\n+import io.grpc.LoadBalancer.SubchannelPicker;\n+import io.grpc.LoadBalancer.SubchannelStateListener;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.LoadBalancerRegistry;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.rls.internal.ChildLoadBalancerHelper.ChildLoadBalancerHelperProvider;\n+import io.grpc.rls.internal.LbPolicyConfiguration.ChildPolicyWrapper.ChildLbStatusListener;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd6e862613e19424fc5f02597ae5d7e2acefa4c1"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc2ODgyOQ==", "bodyText": "done.", "url": "https://github.com/grpc/grpc-java/pull/6883#discussion_r411768829", "createdAt": "2020-04-20T23:50:12Z", "author": {"login": "creamsoup"}, "path": "rls/src/main/java/io/grpc/rls/internal/LbPolicyConfiguration.java", "diffHunk": "@@ -0,0 +1,446 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls.internal;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.MoreObjects;\n+import io.grpc.ConnectivityState;\n+import io.grpc.ConnectivityStateInfo;\n+import io.grpc.LoadBalancer.CreateSubchannelArgs;\n+import io.grpc.LoadBalancer.Helper;\n+import io.grpc.LoadBalancer.Subchannel;\n+import io.grpc.LoadBalancer.SubchannelPicker;\n+import io.grpc.LoadBalancer.SubchannelStateListener;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.LoadBalancerRegistry;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.rls.internal.ChildLoadBalancerHelper.ChildLoadBalancerHelperProvider;\n+import io.grpc.rls.internal.LbPolicyConfiguration.ChildPolicyWrapper.ChildLbStatusListener;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc1NDMwNA=="}, "originalCommit": {"oid": "cd6e862613e19424fc5f02597ae5d7e2acefa4c1"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODE2MTgyOnYy", "diffSide": "RIGHT", "path": "rls/src/main/java/io/grpc/rls/internal/LbPolicyConfiguration.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMzoyMTo1NFrOGIrmmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMDoxMToyMlrOGIs17Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc1NjE4Nw==", "bodyText": "This API should always return null.\nhttps://github.com/grpc/grpc-java/blob/v1.28.1/core/src/main/java/io/grpc/internal/ObjectPool.java#L32-L36", "url": "https://github.com/grpc/grpc-java/pull/6883#discussion_r411756187", "createdAt": "2020-04-20T23:21:54Z", "author": {"login": "dapengzhang0"}, "path": "rls/src/main/java/io/grpc/rls/internal/LbPolicyConfiguration.java", "diffHunk": "@@ -0,0 +1,446 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls.internal;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.MoreObjects;\n+import io.grpc.ConnectivityState;\n+import io.grpc.ConnectivityStateInfo;\n+import io.grpc.LoadBalancer.CreateSubchannelArgs;\n+import io.grpc.LoadBalancer.Helper;\n+import io.grpc.LoadBalancer.Subchannel;\n+import io.grpc.LoadBalancer.SubchannelPicker;\n+import io.grpc.LoadBalancer.SubchannelStateListener;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.LoadBalancerRegistry;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.rls.internal.ChildLoadBalancerHelper.ChildLoadBalancerHelperProvider;\n+import io.grpc.rls.internal.LbPolicyConfiguration.ChildPolicyWrapper.ChildLbStatusListener;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupConfig;\n+import io.grpc.util.ForwardingLoadBalancerHelper;\n+import io.grpc.util.ForwardingSubchannel;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.annotation.Nullable;\n+\n+/** Configuration for RLS load balancing policy. */\n+public final class LbPolicyConfiguration {\n+\n+  private final RouteLookupConfig routeLookupConfig;\n+  private final ChildLoadBalancingPolicy policy;\n+\n+  public LbPolicyConfiguration(\n+      RouteLookupConfig routeLookupConfig, ChildLoadBalancingPolicy policy) {\n+    this.routeLookupConfig = checkNotNull(routeLookupConfig, \"routeLookupConfig\");\n+    this.policy = checkNotNull(policy, \"policy\");\n+  }\n+\n+  public RouteLookupConfig getRouteLookupConfig() {\n+    return routeLookupConfig;\n+  }\n+\n+  public ChildLoadBalancingPolicy getLoadBalancingPolicy() {\n+    return policy;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    LbPolicyConfiguration that = (LbPolicyConfiguration) o;\n+    return Objects.equals(routeLookupConfig, that.routeLookupConfig)\n+        && Objects.equals(policy, that.policy);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(routeLookupConfig, policy);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return MoreObjects.toStringHelper(this)\n+        .add(\"routeLookupConfig\", routeLookupConfig)\n+        .add(\"policy\", policy)\n+        .toString();\n+  }\n+\n+  /** ChildLoadBalancingPolicy is an elected child policy to delegate requests. */\n+  public static final class ChildLoadBalancingPolicy {\n+\n+    private final Map<String, Object> effectiveRawChildPolicy;\n+    private final LoadBalancerProvider effectiveLbProvider;\n+    private final String targetFieldName;\n+\n+    @VisibleForTesting\n+    ChildLoadBalancingPolicy(\n+        String targetFieldName,\n+        Map<String, Object> effectiveRawChildPolicy,\n+        LoadBalancerProvider effectiveLbProvider) {\n+      checkArgument(\n+          targetFieldName != null && !targetFieldName.isEmpty(),\n+          \"targetFieldName cannot be empty or null\");\n+      this.targetFieldName = targetFieldName;\n+      this.effectiveRawChildPolicy =\n+          checkNotNull(effectiveRawChildPolicy, \"effectiveRawChildPolicy\");\n+      this.effectiveLbProvider = checkNotNull(effectiveLbProvider, \"effectiveLbProvider\");\n+    }\n+\n+    /** Creates ChildLoadBalancingPolicy. */\n+    @SuppressWarnings(\"unchecked\")\n+    public static ChildLoadBalancingPolicy create(\n+        String childPolicyConfigTargetFieldName, List<Map<String, ?>> childPolicies)\n+        throws InvalidChildPolicyConfigException {\n+      Map<String, Object> effectiveChildPolicy = null;\n+      LoadBalancerProvider effectiveLbProvider = null;\n+      List<String> policyTried = new ArrayList<>();\n+\n+      LoadBalancerRegistry lbRegistry = LoadBalancerRegistry.getDefaultRegistry();\n+      for (Map<String, ?> childPolicy : childPolicies) {\n+        if (childPolicy.isEmpty()) {\n+          continue;\n+        }\n+        if (childPolicy.size() != 1) {\n+          throw\n+              new InvalidChildPolicyConfigException(\n+                  \"childPolicy should have exactly one loadbalancing policy\");\n+        }\n+        String policyName = childPolicy.keySet().iterator().next();\n+        LoadBalancerProvider provider = lbRegistry.getProvider(policyName);\n+        if (provider != null) {\n+          effectiveLbProvider = provider;\n+          effectiveChildPolicy = Collections.unmodifiableMap(childPolicy);\n+          break;\n+        }\n+        policyTried.add(policyName);\n+      }\n+      if (effectiveChildPolicy == null) {\n+        throw\n+            new InvalidChildPolicyConfigException(\n+                String.format(\"no valid childPolicy found, policy tried: %s\", policyTried));\n+      }\n+      return\n+          new ChildLoadBalancingPolicy(\n+              childPolicyConfigTargetFieldName,\n+              (Map<String, Object>) effectiveChildPolicy.values().iterator().next(),\n+              effectiveLbProvider);\n+    }\n+\n+    /** Creates a child load balancer config for given target from elected raw child policy. */\n+    public Map<String, ?> getEffectiveChildPolicy(String target) {\n+      Map<String, Object> childPolicy = new HashMap<>(effectiveRawChildPolicy);\n+      childPolicy.put(targetFieldName, target);\n+      return childPolicy;\n+    }\n+\n+    /** Returns the elected child {@link LoadBalancerProvider}. */\n+    public LoadBalancerProvider getEffectiveLbProvider() {\n+      return effectiveLbProvider;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      ChildLoadBalancingPolicy that = (ChildLoadBalancingPolicy) o;\n+      return Objects.equals(effectiveRawChildPolicy, that.effectiveRawChildPolicy)\n+          && Objects.equals(effectiveLbProvider, that.effectiveLbProvider)\n+          && Objects.equals(targetFieldName, that.targetFieldName);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(effectiveRawChildPolicy, effectiveLbProvider, targetFieldName);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return MoreObjects.toStringHelper(this)\n+          .add(\"effectiveRawChildPolicy\", effectiveRawChildPolicy)\n+          .add(\"effectiveLbProvider\", effectiveLbProvider)\n+          .add(\"childPolicyConfigTargetFieldName\", targetFieldName)\n+          .toString();\n+    }\n+  }\n+\n+  /** Factory for {@link ChildPolicyWrapper}. */\n+  static final class RefCountedChildPolicyWrapperFactory {\n+    @VisibleForTesting\n+    final Map<String /* target */, RefCountedChildPolicyWrapper> childPolicyMap =\n+        new HashMap<>();\n+\n+    private final ChildLoadBalancerHelperProvider childLbHelperProvider;\n+    @Nullable\n+    private final ChildLbStatusListener childLbStatusListener;\n+\n+    public RefCountedChildPolicyWrapperFactory(\n+        ChildLoadBalancerHelperProvider childLbHelperProvider,\n+        @Nullable ChildLbStatusListener childLbStatusListener) {\n+      this.childLbHelperProvider = checkNotNull(childLbHelperProvider, \"childLbHelperProvider\");\n+      this.childLbStatusListener = childLbStatusListener;\n+    }\n+\n+    ChildPolicyWrapper createOrGet(String target) {\n+      // TODO(creamsoup) check if the target is valid or not\n+      ObjectPool<ChildPolicyWrapper> existing = childPolicyMap.get(target);\n+      if (existing != null) {\n+        return existing.getObject();\n+      }\n+      ChildPolicyWrapper childPolicyWrapper =\n+          new ChildPolicyWrapper(target, childLbHelperProvider, childLbStatusListener);\n+      RefCountedChildPolicyWrapper wrapper = RefCountedChildPolicyWrapper.of(childPolicyWrapper);\n+      childPolicyMap.put(target, wrapper);\n+      return childPolicyWrapper;\n+    }\n+\n+    void release(ChildPolicyWrapper childPolicyWrapper) {\n+      checkNotNull(childPolicyWrapper, \"childPolicyWrapper\");\n+      String target = childPolicyWrapper.getTarget();\n+      ObjectPool<ChildPolicyWrapper> existing = childPolicyMap.get(target);\n+      checkState(existing != null, \"Cannot access already released object\");\n+      if (existing.returnObject(childPolicyWrapper) == null) {\n+        childPolicyMap.remove(target);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * ChildPolicyWrapper is a wrapper class for child load balancing policy with associated helper /\n+   * utility classes to manage the child policy.\n+   */\n+  static final class ChildPolicyWrapper {\n+\n+    private final String target;\n+    private final ChildPolicyReportingHelper helper;\n+    private ConnectivityStateInfo connectivityStateInfo =\n+        ConnectivityStateInfo.forNonError(ConnectivityState.IDLE);\n+    private SubchannelPicker picker;\n+\n+    public ChildPolicyWrapper(\n+        String target,\n+        ChildLoadBalancerHelperProvider childLbHelperProvider,\n+        @Nullable  ChildLbStatusListener childLbStatusListener) {\n+      this.target = target;\n+      this.helper =\n+          new ChildPolicyReportingHelper(childLbHelperProvider, childLbStatusListener);\n+    }\n+\n+    String getTarget() {\n+      return target;\n+    }\n+\n+    void setPicker(SubchannelPicker picker) {\n+      this.picker = checkNotNull(picker, \"picker\");\n+    }\n+\n+    SubchannelPicker getPicker() {\n+      return picker;\n+    }\n+\n+    ChildPolicyReportingHelper getHelper() {\n+      return helper;\n+    }\n+\n+    void setConnectivityStateInfo(ConnectivityStateInfo connectivityStateInfo) {\n+      this.connectivityStateInfo = connectivityStateInfo;\n+    }\n+\n+    ConnectivityStateInfo getConnectivityStateInfo() {\n+      return connectivityStateInfo;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      ChildPolicyWrapper that = (ChildPolicyWrapper) o;\n+      return Objects.equals(target, that.target)\n+          && Objects.equals(helper, that.helper)\n+          && Objects.equals(connectivityStateInfo, that.connectivityStateInfo)\n+          && Objects.equals(picker, that.picker);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(target, helper, connectivityStateInfo, picker);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return MoreObjects.toStringHelper(this)\n+          .add(\"target\", target)\n+          .add(\"helper\", helper)\n+          .add(\"connectivityStateInfo\", connectivityStateInfo)\n+          .add(\"picker\", picker)\n+          .toString();\n+    }\n+\n+    /**\n+     * A delegating {@link io.grpc.LoadBalancer.Helper} maintains status of {@link\n+     * ChildPolicyWrapper} when {@link Subchannel} status changed. This helper is used between child\n+     * policy and parent load-balancer where each picker in child policy is governed by a governing\n+     * picker (RlsPicker). The governing picker will be reported back to the parent load-balancer.\n+     */\n+    final class ChildPolicyReportingHelper extends ForwardingLoadBalancerHelper {\n+\n+      private final ChildLoadBalancerHelper delegate;\n+      @Nullable\n+      private final ChildLbStatusListener listener;\n+\n+      ChildPolicyReportingHelper(ChildLoadBalancerHelperProvider childHelperProvider) {\n+        this(childHelperProvider, null);\n+      }\n+\n+      ChildPolicyReportingHelper(\n+          ChildLoadBalancerHelperProvider childHelperProvider,\n+          @Nullable ChildLbStatusListener listener) {\n+        checkNotNull(childHelperProvider, \"childHelperProvider\");\n+        this.delegate = childHelperProvider.forTarget(getTarget());\n+        this.listener = listener;\n+      }\n+\n+      @Override\n+      protected Helper delegate() {\n+        return delegate;\n+      }\n+\n+      @Override\n+      public void updateBalancingState(ConnectivityState newState, SubchannelPicker newPicker) {\n+        setPicker(newPicker);\n+        super.updateBalancingState(newState, newPicker);\n+        if (listener != null) {\n+          listener.onStatusChanged(newState);\n+        }\n+      }\n+\n+      @Override\n+      public Subchannel createSubchannel(CreateSubchannelArgs args) {\n+        final Subchannel subchannel = super.createSubchannel(args);\n+        return new ForwardingSubchannel() {\n+          @Override\n+          protected Subchannel delegate() {\n+            return subchannel;\n+          }\n+\n+          @Override\n+          public void start(final SubchannelStateListener listener) {\n+            super.start(new SubchannelStateListener() {\n+              @Override\n+              public void onSubchannelState(ConnectivityStateInfo newState) {\n+                setConnectivityStateInfo(newState);\n+                listener.onSubchannelState(newState);\n+              }\n+            });\n+          }\n+        };\n+      }\n+    }\n+\n+    /** Listener for child lb status change events. */\n+    interface ChildLbStatusListener {\n+\n+      /** Notifies when child lb status changes. */\n+      void onStatusChanged(ConnectivityState newState);\n+    }\n+  }\n+\n+  private static final class RefCountedChildPolicyWrapper\n+      implements ObjectPool<ChildPolicyWrapper> {\n+\n+    private final AtomicLong refCnt = new AtomicLong(1);\n+    @Nullable\n+    private ChildPolicyWrapper childPolicyWrapper;\n+\n+    private RefCountedChildPolicyWrapper(ChildPolicyWrapper childPolicyWrapper) {\n+      this.childPolicyWrapper = checkNotNull(childPolicyWrapper, \"childPolicyWrapper\");\n+    }\n+\n+    @Override\n+    public ChildPolicyWrapper getObject() {\n+      long curr = refCnt.getAndIncrement();\n+      if (curr <= 0) {\n+        throw new IllegalStateException(\"ChildPolicyWrapper is already released\");\n+      }\n+      return childPolicyWrapper;\n+    }\n+\n+    @Override\n+    @Nullable\n+    public ChildPolicyWrapper returnObject(Object object) {\n+      checkState(\n+          childPolicyWrapper != null,\n+          \"cannot return already released ChildPolicyWrapper, this is possibly a bug.\");\n+      checkState(\n+          childPolicyWrapper == object,\n+          \"returned object doesn't match the pooled childPolicyWrapper\");\n+      long newCnt = refCnt.decrementAndGet();\n+      if (newCnt == 0) {\n+        childPolicyWrapper = null;\n+      }\n+      return childPolicyWrapper;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd6e862613e19424fc5f02597ae5d7e2acefa4c1"}, "originalPosition": 415}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc3MTUyMA==", "bodyText": "Might need introduce something like isReleased()", "url": "https://github.com/grpc/grpc-java/pull/6883#discussion_r411771520", "createdAt": "2020-04-20T23:57:14Z", "author": {"login": "dapengzhang0"}, "path": "rls/src/main/java/io/grpc/rls/internal/LbPolicyConfiguration.java", "diffHunk": "@@ -0,0 +1,446 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls.internal;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.MoreObjects;\n+import io.grpc.ConnectivityState;\n+import io.grpc.ConnectivityStateInfo;\n+import io.grpc.LoadBalancer.CreateSubchannelArgs;\n+import io.grpc.LoadBalancer.Helper;\n+import io.grpc.LoadBalancer.Subchannel;\n+import io.grpc.LoadBalancer.SubchannelPicker;\n+import io.grpc.LoadBalancer.SubchannelStateListener;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.LoadBalancerRegistry;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.rls.internal.ChildLoadBalancerHelper.ChildLoadBalancerHelperProvider;\n+import io.grpc.rls.internal.LbPolicyConfiguration.ChildPolicyWrapper.ChildLbStatusListener;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupConfig;\n+import io.grpc.util.ForwardingLoadBalancerHelper;\n+import io.grpc.util.ForwardingSubchannel;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.annotation.Nullable;\n+\n+/** Configuration for RLS load balancing policy. */\n+public final class LbPolicyConfiguration {\n+\n+  private final RouteLookupConfig routeLookupConfig;\n+  private final ChildLoadBalancingPolicy policy;\n+\n+  public LbPolicyConfiguration(\n+      RouteLookupConfig routeLookupConfig, ChildLoadBalancingPolicy policy) {\n+    this.routeLookupConfig = checkNotNull(routeLookupConfig, \"routeLookupConfig\");\n+    this.policy = checkNotNull(policy, \"policy\");\n+  }\n+\n+  public RouteLookupConfig getRouteLookupConfig() {\n+    return routeLookupConfig;\n+  }\n+\n+  public ChildLoadBalancingPolicy getLoadBalancingPolicy() {\n+    return policy;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    LbPolicyConfiguration that = (LbPolicyConfiguration) o;\n+    return Objects.equals(routeLookupConfig, that.routeLookupConfig)\n+        && Objects.equals(policy, that.policy);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(routeLookupConfig, policy);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return MoreObjects.toStringHelper(this)\n+        .add(\"routeLookupConfig\", routeLookupConfig)\n+        .add(\"policy\", policy)\n+        .toString();\n+  }\n+\n+  /** ChildLoadBalancingPolicy is an elected child policy to delegate requests. */\n+  public static final class ChildLoadBalancingPolicy {\n+\n+    private final Map<String, Object> effectiveRawChildPolicy;\n+    private final LoadBalancerProvider effectiveLbProvider;\n+    private final String targetFieldName;\n+\n+    @VisibleForTesting\n+    ChildLoadBalancingPolicy(\n+        String targetFieldName,\n+        Map<String, Object> effectiveRawChildPolicy,\n+        LoadBalancerProvider effectiveLbProvider) {\n+      checkArgument(\n+          targetFieldName != null && !targetFieldName.isEmpty(),\n+          \"targetFieldName cannot be empty or null\");\n+      this.targetFieldName = targetFieldName;\n+      this.effectiveRawChildPolicy =\n+          checkNotNull(effectiveRawChildPolicy, \"effectiveRawChildPolicy\");\n+      this.effectiveLbProvider = checkNotNull(effectiveLbProvider, \"effectiveLbProvider\");\n+    }\n+\n+    /** Creates ChildLoadBalancingPolicy. */\n+    @SuppressWarnings(\"unchecked\")\n+    public static ChildLoadBalancingPolicy create(\n+        String childPolicyConfigTargetFieldName, List<Map<String, ?>> childPolicies)\n+        throws InvalidChildPolicyConfigException {\n+      Map<String, Object> effectiveChildPolicy = null;\n+      LoadBalancerProvider effectiveLbProvider = null;\n+      List<String> policyTried = new ArrayList<>();\n+\n+      LoadBalancerRegistry lbRegistry = LoadBalancerRegistry.getDefaultRegistry();\n+      for (Map<String, ?> childPolicy : childPolicies) {\n+        if (childPolicy.isEmpty()) {\n+          continue;\n+        }\n+        if (childPolicy.size() != 1) {\n+          throw\n+              new InvalidChildPolicyConfigException(\n+                  \"childPolicy should have exactly one loadbalancing policy\");\n+        }\n+        String policyName = childPolicy.keySet().iterator().next();\n+        LoadBalancerProvider provider = lbRegistry.getProvider(policyName);\n+        if (provider != null) {\n+          effectiveLbProvider = provider;\n+          effectiveChildPolicy = Collections.unmodifiableMap(childPolicy);\n+          break;\n+        }\n+        policyTried.add(policyName);\n+      }\n+      if (effectiveChildPolicy == null) {\n+        throw\n+            new InvalidChildPolicyConfigException(\n+                String.format(\"no valid childPolicy found, policy tried: %s\", policyTried));\n+      }\n+      return\n+          new ChildLoadBalancingPolicy(\n+              childPolicyConfigTargetFieldName,\n+              (Map<String, Object>) effectiveChildPolicy.values().iterator().next(),\n+              effectiveLbProvider);\n+    }\n+\n+    /** Creates a child load balancer config for given target from elected raw child policy. */\n+    public Map<String, ?> getEffectiveChildPolicy(String target) {\n+      Map<String, Object> childPolicy = new HashMap<>(effectiveRawChildPolicy);\n+      childPolicy.put(targetFieldName, target);\n+      return childPolicy;\n+    }\n+\n+    /** Returns the elected child {@link LoadBalancerProvider}. */\n+    public LoadBalancerProvider getEffectiveLbProvider() {\n+      return effectiveLbProvider;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      ChildLoadBalancingPolicy that = (ChildLoadBalancingPolicy) o;\n+      return Objects.equals(effectiveRawChildPolicy, that.effectiveRawChildPolicy)\n+          && Objects.equals(effectiveLbProvider, that.effectiveLbProvider)\n+          && Objects.equals(targetFieldName, that.targetFieldName);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(effectiveRawChildPolicy, effectiveLbProvider, targetFieldName);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return MoreObjects.toStringHelper(this)\n+          .add(\"effectiveRawChildPolicy\", effectiveRawChildPolicy)\n+          .add(\"effectiveLbProvider\", effectiveLbProvider)\n+          .add(\"childPolicyConfigTargetFieldName\", targetFieldName)\n+          .toString();\n+    }\n+  }\n+\n+  /** Factory for {@link ChildPolicyWrapper}. */\n+  static final class RefCountedChildPolicyWrapperFactory {\n+    @VisibleForTesting\n+    final Map<String /* target */, RefCountedChildPolicyWrapper> childPolicyMap =\n+        new HashMap<>();\n+\n+    private final ChildLoadBalancerHelperProvider childLbHelperProvider;\n+    @Nullable\n+    private final ChildLbStatusListener childLbStatusListener;\n+\n+    public RefCountedChildPolicyWrapperFactory(\n+        ChildLoadBalancerHelperProvider childLbHelperProvider,\n+        @Nullable ChildLbStatusListener childLbStatusListener) {\n+      this.childLbHelperProvider = checkNotNull(childLbHelperProvider, \"childLbHelperProvider\");\n+      this.childLbStatusListener = childLbStatusListener;\n+    }\n+\n+    ChildPolicyWrapper createOrGet(String target) {\n+      // TODO(creamsoup) check if the target is valid or not\n+      ObjectPool<ChildPolicyWrapper> existing = childPolicyMap.get(target);\n+      if (existing != null) {\n+        return existing.getObject();\n+      }\n+      ChildPolicyWrapper childPolicyWrapper =\n+          new ChildPolicyWrapper(target, childLbHelperProvider, childLbStatusListener);\n+      RefCountedChildPolicyWrapper wrapper = RefCountedChildPolicyWrapper.of(childPolicyWrapper);\n+      childPolicyMap.put(target, wrapper);\n+      return childPolicyWrapper;\n+    }\n+\n+    void release(ChildPolicyWrapper childPolicyWrapper) {\n+      checkNotNull(childPolicyWrapper, \"childPolicyWrapper\");\n+      String target = childPolicyWrapper.getTarget();\n+      ObjectPool<ChildPolicyWrapper> existing = childPolicyMap.get(target);\n+      checkState(existing != null, \"Cannot access already released object\");\n+      if (existing.returnObject(childPolicyWrapper) == null) {\n+        childPolicyMap.remove(target);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * ChildPolicyWrapper is a wrapper class for child load balancing policy with associated helper /\n+   * utility classes to manage the child policy.\n+   */\n+  static final class ChildPolicyWrapper {\n+\n+    private final String target;\n+    private final ChildPolicyReportingHelper helper;\n+    private ConnectivityStateInfo connectivityStateInfo =\n+        ConnectivityStateInfo.forNonError(ConnectivityState.IDLE);\n+    private SubchannelPicker picker;\n+\n+    public ChildPolicyWrapper(\n+        String target,\n+        ChildLoadBalancerHelperProvider childLbHelperProvider,\n+        @Nullable  ChildLbStatusListener childLbStatusListener) {\n+      this.target = target;\n+      this.helper =\n+          new ChildPolicyReportingHelper(childLbHelperProvider, childLbStatusListener);\n+    }\n+\n+    String getTarget() {\n+      return target;\n+    }\n+\n+    void setPicker(SubchannelPicker picker) {\n+      this.picker = checkNotNull(picker, \"picker\");\n+    }\n+\n+    SubchannelPicker getPicker() {\n+      return picker;\n+    }\n+\n+    ChildPolicyReportingHelper getHelper() {\n+      return helper;\n+    }\n+\n+    void setConnectivityStateInfo(ConnectivityStateInfo connectivityStateInfo) {\n+      this.connectivityStateInfo = connectivityStateInfo;\n+    }\n+\n+    ConnectivityStateInfo getConnectivityStateInfo() {\n+      return connectivityStateInfo;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      ChildPolicyWrapper that = (ChildPolicyWrapper) o;\n+      return Objects.equals(target, that.target)\n+          && Objects.equals(helper, that.helper)\n+          && Objects.equals(connectivityStateInfo, that.connectivityStateInfo)\n+          && Objects.equals(picker, that.picker);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(target, helper, connectivityStateInfo, picker);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return MoreObjects.toStringHelper(this)\n+          .add(\"target\", target)\n+          .add(\"helper\", helper)\n+          .add(\"connectivityStateInfo\", connectivityStateInfo)\n+          .add(\"picker\", picker)\n+          .toString();\n+    }\n+\n+    /**\n+     * A delegating {@link io.grpc.LoadBalancer.Helper} maintains status of {@link\n+     * ChildPolicyWrapper} when {@link Subchannel} status changed. This helper is used between child\n+     * policy and parent load-balancer where each picker in child policy is governed by a governing\n+     * picker (RlsPicker). The governing picker will be reported back to the parent load-balancer.\n+     */\n+    final class ChildPolicyReportingHelper extends ForwardingLoadBalancerHelper {\n+\n+      private final ChildLoadBalancerHelper delegate;\n+      @Nullable\n+      private final ChildLbStatusListener listener;\n+\n+      ChildPolicyReportingHelper(ChildLoadBalancerHelperProvider childHelperProvider) {\n+        this(childHelperProvider, null);\n+      }\n+\n+      ChildPolicyReportingHelper(\n+          ChildLoadBalancerHelperProvider childHelperProvider,\n+          @Nullable ChildLbStatusListener listener) {\n+        checkNotNull(childHelperProvider, \"childHelperProvider\");\n+        this.delegate = childHelperProvider.forTarget(getTarget());\n+        this.listener = listener;\n+      }\n+\n+      @Override\n+      protected Helper delegate() {\n+        return delegate;\n+      }\n+\n+      @Override\n+      public void updateBalancingState(ConnectivityState newState, SubchannelPicker newPicker) {\n+        setPicker(newPicker);\n+        super.updateBalancingState(newState, newPicker);\n+        if (listener != null) {\n+          listener.onStatusChanged(newState);\n+        }\n+      }\n+\n+      @Override\n+      public Subchannel createSubchannel(CreateSubchannelArgs args) {\n+        final Subchannel subchannel = super.createSubchannel(args);\n+        return new ForwardingSubchannel() {\n+          @Override\n+          protected Subchannel delegate() {\n+            return subchannel;\n+          }\n+\n+          @Override\n+          public void start(final SubchannelStateListener listener) {\n+            super.start(new SubchannelStateListener() {\n+              @Override\n+              public void onSubchannelState(ConnectivityStateInfo newState) {\n+                setConnectivityStateInfo(newState);\n+                listener.onSubchannelState(newState);\n+              }\n+            });\n+          }\n+        };\n+      }\n+    }\n+\n+    /** Listener for child lb status change events. */\n+    interface ChildLbStatusListener {\n+\n+      /** Notifies when child lb status changes. */\n+      void onStatusChanged(ConnectivityState newState);\n+    }\n+  }\n+\n+  private static final class RefCountedChildPolicyWrapper\n+      implements ObjectPool<ChildPolicyWrapper> {\n+\n+    private final AtomicLong refCnt = new AtomicLong(1);\n+    @Nullable\n+    private ChildPolicyWrapper childPolicyWrapper;\n+\n+    private RefCountedChildPolicyWrapper(ChildPolicyWrapper childPolicyWrapper) {\n+      this.childPolicyWrapper = checkNotNull(childPolicyWrapper, \"childPolicyWrapper\");\n+    }\n+\n+    @Override\n+    public ChildPolicyWrapper getObject() {\n+      long curr = refCnt.getAndIncrement();\n+      if (curr <= 0) {\n+        throw new IllegalStateException(\"ChildPolicyWrapper is already released\");\n+      }\n+      return childPolicyWrapper;\n+    }\n+\n+    @Override\n+    @Nullable\n+    public ChildPolicyWrapper returnObject(Object object) {\n+      checkState(\n+          childPolicyWrapper != null,\n+          \"cannot return already released ChildPolicyWrapper, this is possibly a bug.\");\n+      checkState(\n+          childPolicyWrapper == object,\n+          \"returned object doesn't match the pooled childPolicyWrapper\");\n+      long newCnt = refCnt.decrementAndGet();\n+      if (newCnt == 0) {\n+        childPolicyWrapper = null;\n+      }\n+      return childPolicyWrapper;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc1NjE4Nw=="}, "originalCommit": {"oid": "cd6e862613e19424fc5f02597ae5d7e2acefa4c1"}, "originalPosition": 415}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc3NjQ5Mw==", "bodyText": "tried to avoid additional check, but this sounds better.", "url": "https://github.com/grpc/grpc-java/pull/6883#discussion_r411776493", "createdAt": "2020-04-21T00:11:22Z", "author": {"login": "creamsoup"}, "path": "rls/src/main/java/io/grpc/rls/internal/LbPolicyConfiguration.java", "diffHunk": "@@ -0,0 +1,446 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls.internal;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.MoreObjects;\n+import io.grpc.ConnectivityState;\n+import io.grpc.ConnectivityStateInfo;\n+import io.grpc.LoadBalancer.CreateSubchannelArgs;\n+import io.grpc.LoadBalancer.Helper;\n+import io.grpc.LoadBalancer.Subchannel;\n+import io.grpc.LoadBalancer.SubchannelPicker;\n+import io.grpc.LoadBalancer.SubchannelStateListener;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.LoadBalancerRegistry;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.rls.internal.ChildLoadBalancerHelper.ChildLoadBalancerHelperProvider;\n+import io.grpc.rls.internal.LbPolicyConfiguration.ChildPolicyWrapper.ChildLbStatusListener;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupConfig;\n+import io.grpc.util.ForwardingLoadBalancerHelper;\n+import io.grpc.util.ForwardingSubchannel;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.annotation.Nullable;\n+\n+/** Configuration for RLS load balancing policy. */\n+public final class LbPolicyConfiguration {\n+\n+  private final RouteLookupConfig routeLookupConfig;\n+  private final ChildLoadBalancingPolicy policy;\n+\n+  public LbPolicyConfiguration(\n+      RouteLookupConfig routeLookupConfig, ChildLoadBalancingPolicy policy) {\n+    this.routeLookupConfig = checkNotNull(routeLookupConfig, \"routeLookupConfig\");\n+    this.policy = checkNotNull(policy, \"policy\");\n+  }\n+\n+  public RouteLookupConfig getRouteLookupConfig() {\n+    return routeLookupConfig;\n+  }\n+\n+  public ChildLoadBalancingPolicy getLoadBalancingPolicy() {\n+    return policy;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    LbPolicyConfiguration that = (LbPolicyConfiguration) o;\n+    return Objects.equals(routeLookupConfig, that.routeLookupConfig)\n+        && Objects.equals(policy, that.policy);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(routeLookupConfig, policy);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return MoreObjects.toStringHelper(this)\n+        .add(\"routeLookupConfig\", routeLookupConfig)\n+        .add(\"policy\", policy)\n+        .toString();\n+  }\n+\n+  /** ChildLoadBalancingPolicy is an elected child policy to delegate requests. */\n+  public static final class ChildLoadBalancingPolicy {\n+\n+    private final Map<String, Object> effectiveRawChildPolicy;\n+    private final LoadBalancerProvider effectiveLbProvider;\n+    private final String targetFieldName;\n+\n+    @VisibleForTesting\n+    ChildLoadBalancingPolicy(\n+        String targetFieldName,\n+        Map<String, Object> effectiveRawChildPolicy,\n+        LoadBalancerProvider effectiveLbProvider) {\n+      checkArgument(\n+          targetFieldName != null && !targetFieldName.isEmpty(),\n+          \"targetFieldName cannot be empty or null\");\n+      this.targetFieldName = targetFieldName;\n+      this.effectiveRawChildPolicy =\n+          checkNotNull(effectiveRawChildPolicy, \"effectiveRawChildPolicy\");\n+      this.effectiveLbProvider = checkNotNull(effectiveLbProvider, \"effectiveLbProvider\");\n+    }\n+\n+    /** Creates ChildLoadBalancingPolicy. */\n+    @SuppressWarnings(\"unchecked\")\n+    public static ChildLoadBalancingPolicy create(\n+        String childPolicyConfigTargetFieldName, List<Map<String, ?>> childPolicies)\n+        throws InvalidChildPolicyConfigException {\n+      Map<String, Object> effectiveChildPolicy = null;\n+      LoadBalancerProvider effectiveLbProvider = null;\n+      List<String> policyTried = new ArrayList<>();\n+\n+      LoadBalancerRegistry lbRegistry = LoadBalancerRegistry.getDefaultRegistry();\n+      for (Map<String, ?> childPolicy : childPolicies) {\n+        if (childPolicy.isEmpty()) {\n+          continue;\n+        }\n+        if (childPolicy.size() != 1) {\n+          throw\n+              new InvalidChildPolicyConfigException(\n+                  \"childPolicy should have exactly one loadbalancing policy\");\n+        }\n+        String policyName = childPolicy.keySet().iterator().next();\n+        LoadBalancerProvider provider = lbRegistry.getProvider(policyName);\n+        if (provider != null) {\n+          effectiveLbProvider = provider;\n+          effectiveChildPolicy = Collections.unmodifiableMap(childPolicy);\n+          break;\n+        }\n+        policyTried.add(policyName);\n+      }\n+      if (effectiveChildPolicy == null) {\n+        throw\n+            new InvalidChildPolicyConfigException(\n+                String.format(\"no valid childPolicy found, policy tried: %s\", policyTried));\n+      }\n+      return\n+          new ChildLoadBalancingPolicy(\n+              childPolicyConfigTargetFieldName,\n+              (Map<String, Object>) effectiveChildPolicy.values().iterator().next(),\n+              effectiveLbProvider);\n+    }\n+\n+    /** Creates a child load balancer config for given target from elected raw child policy. */\n+    public Map<String, ?> getEffectiveChildPolicy(String target) {\n+      Map<String, Object> childPolicy = new HashMap<>(effectiveRawChildPolicy);\n+      childPolicy.put(targetFieldName, target);\n+      return childPolicy;\n+    }\n+\n+    /** Returns the elected child {@link LoadBalancerProvider}. */\n+    public LoadBalancerProvider getEffectiveLbProvider() {\n+      return effectiveLbProvider;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      ChildLoadBalancingPolicy that = (ChildLoadBalancingPolicy) o;\n+      return Objects.equals(effectiveRawChildPolicy, that.effectiveRawChildPolicy)\n+          && Objects.equals(effectiveLbProvider, that.effectiveLbProvider)\n+          && Objects.equals(targetFieldName, that.targetFieldName);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(effectiveRawChildPolicy, effectiveLbProvider, targetFieldName);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return MoreObjects.toStringHelper(this)\n+          .add(\"effectiveRawChildPolicy\", effectiveRawChildPolicy)\n+          .add(\"effectiveLbProvider\", effectiveLbProvider)\n+          .add(\"childPolicyConfigTargetFieldName\", targetFieldName)\n+          .toString();\n+    }\n+  }\n+\n+  /** Factory for {@link ChildPolicyWrapper}. */\n+  static final class RefCountedChildPolicyWrapperFactory {\n+    @VisibleForTesting\n+    final Map<String /* target */, RefCountedChildPolicyWrapper> childPolicyMap =\n+        new HashMap<>();\n+\n+    private final ChildLoadBalancerHelperProvider childLbHelperProvider;\n+    @Nullable\n+    private final ChildLbStatusListener childLbStatusListener;\n+\n+    public RefCountedChildPolicyWrapperFactory(\n+        ChildLoadBalancerHelperProvider childLbHelperProvider,\n+        @Nullable ChildLbStatusListener childLbStatusListener) {\n+      this.childLbHelperProvider = checkNotNull(childLbHelperProvider, \"childLbHelperProvider\");\n+      this.childLbStatusListener = childLbStatusListener;\n+    }\n+\n+    ChildPolicyWrapper createOrGet(String target) {\n+      // TODO(creamsoup) check if the target is valid or not\n+      ObjectPool<ChildPolicyWrapper> existing = childPolicyMap.get(target);\n+      if (existing != null) {\n+        return existing.getObject();\n+      }\n+      ChildPolicyWrapper childPolicyWrapper =\n+          new ChildPolicyWrapper(target, childLbHelperProvider, childLbStatusListener);\n+      RefCountedChildPolicyWrapper wrapper = RefCountedChildPolicyWrapper.of(childPolicyWrapper);\n+      childPolicyMap.put(target, wrapper);\n+      return childPolicyWrapper;\n+    }\n+\n+    void release(ChildPolicyWrapper childPolicyWrapper) {\n+      checkNotNull(childPolicyWrapper, \"childPolicyWrapper\");\n+      String target = childPolicyWrapper.getTarget();\n+      ObjectPool<ChildPolicyWrapper> existing = childPolicyMap.get(target);\n+      checkState(existing != null, \"Cannot access already released object\");\n+      if (existing.returnObject(childPolicyWrapper) == null) {\n+        childPolicyMap.remove(target);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * ChildPolicyWrapper is a wrapper class for child load balancing policy with associated helper /\n+   * utility classes to manage the child policy.\n+   */\n+  static final class ChildPolicyWrapper {\n+\n+    private final String target;\n+    private final ChildPolicyReportingHelper helper;\n+    private ConnectivityStateInfo connectivityStateInfo =\n+        ConnectivityStateInfo.forNonError(ConnectivityState.IDLE);\n+    private SubchannelPicker picker;\n+\n+    public ChildPolicyWrapper(\n+        String target,\n+        ChildLoadBalancerHelperProvider childLbHelperProvider,\n+        @Nullable  ChildLbStatusListener childLbStatusListener) {\n+      this.target = target;\n+      this.helper =\n+          new ChildPolicyReportingHelper(childLbHelperProvider, childLbStatusListener);\n+    }\n+\n+    String getTarget() {\n+      return target;\n+    }\n+\n+    void setPicker(SubchannelPicker picker) {\n+      this.picker = checkNotNull(picker, \"picker\");\n+    }\n+\n+    SubchannelPicker getPicker() {\n+      return picker;\n+    }\n+\n+    ChildPolicyReportingHelper getHelper() {\n+      return helper;\n+    }\n+\n+    void setConnectivityStateInfo(ConnectivityStateInfo connectivityStateInfo) {\n+      this.connectivityStateInfo = connectivityStateInfo;\n+    }\n+\n+    ConnectivityStateInfo getConnectivityStateInfo() {\n+      return connectivityStateInfo;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      ChildPolicyWrapper that = (ChildPolicyWrapper) o;\n+      return Objects.equals(target, that.target)\n+          && Objects.equals(helper, that.helper)\n+          && Objects.equals(connectivityStateInfo, that.connectivityStateInfo)\n+          && Objects.equals(picker, that.picker);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(target, helper, connectivityStateInfo, picker);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return MoreObjects.toStringHelper(this)\n+          .add(\"target\", target)\n+          .add(\"helper\", helper)\n+          .add(\"connectivityStateInfo\", connectivityStateInfo)\n+          .add(\"picker\", picker)\n+          .toString();\n+    }\n+\n+    /**\n+     * A delegating {@link io.grpc.LoadBalancer.Helper} maintains status of {@link\n+     * ChildPolicyWrapper} when {@link Subchannel} status changed. This helper is used between child\n+     * policy and parent load-balancer where each picker in child policy is governed by a governing\n+     * picker (RlsPicker). The governing picker will be reported back to the parent load-balancer.\n+     */\n+    final class ChildPolicyReportingHelper extends ForwardingLoadBalancerHelper {\n+\n+      private final ChildLoadBalancerHelper delegate;\n+      @Nullable\n+      private final ChildLbStatusListener listener;\n+\n+      ChildPolicyReportingHelper(ChildLoadBalancerHelperProvider childHelperProvider) {\n+        this(childHelperProvider, null);\n+      }\n+\n+      ChildPolicyReportingHelper(\n+          ChildLoadBalancerHelperProvider childHelperProvider,\n+          @Nullable ChildLbStatusListener listener) {\n+        checkNotNull(childHelperProvider, \"childHelperProvider\");\n+        this.delegate = childHelperProvider.forTarget(getTarget());\n+        this.listener = listener;\n+      }\n+\n+      @Override\n+      protected Helper delegate() {\n+        return delegate;\n+      }\n+\n+      @Override\n+      public void updateBalancingState(ConnectivityState newState, SubchannelPicker newPicker) {\n+        setPicker(newPicker);\n+        super.updateBalancingState(newState, newPicker);\n+        if (listener != null) {\n+          listener.onStatusChanged(newState);\n+        }\n+      }\n+\n+      @Override\n+      public Subchannel createSubchannel(CreateSubchannelArgs args) {\n+        final Subchannel subchannel = super.createSubchannel(args);\n+        return new ForwardingSubchannel() {\n+          @Override\n+          protected Subchannel delegate() {\n+            return subchannel;\n+          }\n+\n+          @Override\n+          public void start(final SubchannelStateListener listener) {\n+            super.start(new SubchannelStateListener() {\n+              @Override\n+              public void onSubchannelState(ConnectivityStateInfo newState) {\n+                setConnectivityStateInfo(newState);\n+                listener.onSubchannelState(newState);\n+              }\n+            });\n+          }\n+        };\n+      }\n+    }\n+\n+    /** Listener for child lb status change events. */\n+    interface ChildLbStatusListener {\n+\n+      /** Notifies when child lb status changes. */\n+      void onStatusChanged(ConnectivityState newState);\n+    }\n+  }\n+\n+  private static final class RefCountedChildPolicyWrapper\n+      implements ObjectPool<ChildPolicyWrapper> {\n+\n+    private final AtomicLong refCnt = new AtomicLong(1);\n+    @Nullable\n+    private ChildPolicyWrapper childPolicyWrapper;\n+\n+    private RefCountedChildPolicyWrapper(ChildPolicyWrapper childPolicyWrapper) {\n+      this.childPolicyWrapper = checkNotNull(childPolicyWrapper, \"childPolicyWrapper\");\n+    }\n+\n+    @Override\n+    public ChildPolicyWrapper getObject() {\n+      long curr = refCnt.getAndIncrement();\n+      if (curr <= 0) {\n+        throw new IllegalStateException(\"ChildPolicyWrapper is already released\");\n+      }\n+      return childPolicyWrapper;\n+    }\n+\n+    @Override\n+    @Nullable\n+    public ChildPolicyWrapper returnObject(Object object) {\n+      checkState(\n+          childPolicyWrapper != null,\n+          \"cannot return already released ChildPolicyWrapper, this is possibly a bug.\");\n+      checkState(\n+          childPolicyWrapper == object,\n+          \"returned object doesn't match the pooled childPolicyWrapper\");\n+      long newCnt = refCnt.decrementAndGet();\n+      if (newCnt == 0) {\n+        childPolicyWrapper = null;\n+      }\n+      return childPolicyWrapper;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc1NjE4Nw=="}, "originalCommit": {"oid": "cd6e862613e19424fc5f02597ae5d7e2acefa4c1"}, "originalPosition": 415}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2760, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}