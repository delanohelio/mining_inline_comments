{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0MzkwMjg3", "number": 7299, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzo1MToxNVrOEWTZpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjozNjowMlrOEXSrhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODIxOTkwOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzo1MToxNVrOG9iuHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMDo0MTowNlrOG9sFwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE4NTE4Mw==", "bodyText": "Can it be localityStore.stopLoadReprot()?", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r467185183", "createdAt": "2020-08-07T17:51:15Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java", "diffHunk": "@@ -283,7 +282,7 @@ public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n                 clusterName,\n                 clusterServiceName);\n             xdsClient.cancelClientStatsReport(clusterName, clusterServiceName);\n-            isReportingLoad = false;\n+            localityStore.setLoadStatsStore(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26d39bca0f6468c0f70d27b36a0fa9dcc5f2a2a0"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzODY4OA==", "bodyText": "Obsolete.", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r467338688", "createdAt": "2020-08-08T00:41:06Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java", "diffHunk": "@@ -283,7 +282,7 @@ public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n                 clusterName,\n                 clusterServiceName);\n             xdsClient.cancelClientStatsReport(clusterName, clusterServiceName);\n-            isReportingLoad = false;\n+            localityStore.setLoadStatsStore(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE4NTE4Mw=="}, "originalCommit": {"oid": "26d39bca0f6468c0f70d27b36a0fa9dcc5f2a2a0"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODIyMTkzOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzo1MTo1N1rOG9ivTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMDo0MToxNFrOG9sF0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE4NTQ4Ng==", "bodyText": "Can it be localityStore.startLoadReport(loadStatsStore);", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r467185486", "createdAt": "2020-08-07T17:51:57Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java", "diffHunk": "@@ -272,8 +270,9 @@ public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n                 \"Start reporting loads for cluster: {0}, cluster_service: {1}\",\n                 clusterName,\n                 clusterServiceName);\n-            xdsClient.reportClientStats(clusterName, clusterServiceName, loadStatsStore);\n-            isReportingLoad = true;\n+            LoadStatsStore loadStatsStore =\n+                xdsClient.reportClientStats(clusterName, clusterServiceName);\n+            localityStore.setLoadStatsStore(loadStatsStore);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26d39bca0f6468c0f70d27b36a0fa9dcc5f2a2a0"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzODcwNQ==", "bodyText": "Obsolete.", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r467338705", "createdAt": "2020-08-08T00:41:14Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java", "diffHunk": "@@ -272,8 +270,9 @@ public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n                 \"Start reporting loads for cluster: {0}, cluster_service: {1}\",\n                 clusterName,\n                 clusterServiceName);\n-            xdsClient.reportClientStats(clusterName, clusterServiceName, loadStatsStore);\n-            isReportingLoad = true;\n+            LoadStatsStore loadStatsStore =\n+                xdsClient.reportClientStats(clusterName, clusterServiceName);\n+            localityStore.setLoadStatsStore(loadStatsStore);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE4NTQ4Ng=="}, "originalCommit": {"oid": "26d39bca0f6468c0f70d27b36a0fa9dcc5f2a2a0"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODI0ODYzOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODowMDoyOVrOG9i_uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMDo0MToyMFrOG9sF4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE4OTY4OQ==", "bodyText": "Probably you can do this inside of localityStore.reset() (at the end of it), then you don't need awkwardly do extra operation on localityStore after localityStore.reset() is called.", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r467189689", "createdAt": "2020-08-07T18:00:29Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java", "diffHunk": "@@ -303,16 +302,17 @@ public boolean canHandleEmptyAddressListFromNameResolution() {\n \n       @Override\n       public void shutdown() {\n+        localityStore.reset();\n         if (isReportingLoad) {\n           logger.log(\n               XdsLogLevel.INFO,\n               \"Stop reporting loads for cluster: {0}, cluster_service: {1}\",\n               clusterName,\n               clusterServiceName);\n           xdsClient.cancelClientStatsReport(clusterName, clusterServiceName);\n+          localityStore.setLoadStatsStore(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26d39bca0f6468c0f70d27b36a0fa9dcc5f2a2a0"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzODcyMQ==", "bodyText": "Obsolete.", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r467338721", "createdAt": "2020-08-08T00:41:20Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java", "diffHunk": "@@ -303,16 +302,17 @@ public boolean canHandleEmptyAddressListFromNameResolution() {\n \n       @Override\n       public void shutdown() {\n+        localityStore.reset();\n         if (isReportingLoad) {\n           logger.log(\n               XdsLogLevel.INFO,\n               \"Stop reporting loads for cluster: {0}, cluster_service: {1}\",\n               clusterName,\n               clusterServiceName);\n           xdsClient.cancelClientStatsReport(clusterName, clusterServiceName);\n+          localityStore.setLoadStatsStore(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE4OTY4OQ=="}, "originalCommit": {"oid": "26d39bca0f6468c0f70d27b36a0fa9dcc5f2a2a0"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODUxMzAwOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/LocalityStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxOTozMzowNVrOG9ljbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMDoyMzo0NFrOG9r8Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIzMTU5Nw==", "bodyText": "Once set, should you add all existing localities to the loadStatsStore?", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r467231597", "createdAt": "2020-08-07T19:33:05Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/LocalityStore.java", "diffHunk": "@@ -224,6 +196,11 @@ public void updateDropPercentage(List<DropOverload> dropOverloads) {\n       this.dropOverloads = checkNotNull(dropOverloads, \"dropOverloads\");\n     }\n \n+    @Override\n+    public void setLoadStatsStore(@Nullable LoadStatsStore loadStatsStore) {\n+      this.loadStatsStore = loadStatsStore;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26d39bca0f6468c0f70d27b36a0fa9dcc5f2a2a0"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzNjI5NA==", "bodyText": "Ahh... Yeah, that's a problem. Updated the change.\nBack to the problem: it is extremely complicated (realistically almost impossible) to cleanly handle load reporting for not losing a single load. The problem itself is illy-defined, it's never clear for how to deal with in-flight requests in the transition of toggling load reporting on/off.\nTo make it easier:  recording is always enabled, every single load will be recorded, even if load reporting is not enabled (as what we are used to do). Regarding the memory usage for recorded loads going unbounded will be a separate problem to consider (it's not easy for consequences of toggling load recording on/off).\nNow the XdsClient is having two sets of APIs, one for load recording and one for load reporting:\nLoadStatsStore addClientStats(String clusterName, @Nullable String clusterServiceName);\nvoid removeClientStats(String clusterName, @Nullable String clusterServiceName)\n\nis for creating the stats object used to record load. Put such an API on XdsClient instead of each EDS policy creating the stats object on its own aligns with the xDS LB policy refactoring design and make it work with our current routing hierarchy.\nvoid reportClientStats();\nvoid cancelClientStatsReport();\n\nis for toggling load reporting on/off by LB policies. Yes, it. doesn't need any argument as you remember the loads for clusters being reported is driven by LRS responses and tracked stats: LRS server tells you which clusters to report loads for, LRS client looks up the currently tracked stats to find data for those clusters. Since stats data is tracked by LoadStatsManager now, the LRS client simply queries the LoadStatsManager to get stats.", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r467336294", "createdAt": "2020-08-08T00:23:44Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/LocalityStore.java", "diffHunk": "@@ -224,6 +196,11 @@ public void updateDropPercentage(List<DropOverload> dropOverloads) {\n       this.dropOverloads = checkNotNull(dropOverloads, \"dropOverloads\");\n     }\n \n+    @Override\n+    public void setLoadStatsStore(@Nullable LoadStatsStore loadStatsStore) {\n+      this.loadStatsStore = loadStatsStore;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIzMTU5Nw=="}, "originalCommit": {"oid": "26d39bca0f6468c0f70d27b36a0fa9dcc5f2a2a0"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODc3NzQzOnYy", "diffSide": "LEFT", "path": "xds/src/main/java/io/grpc/xds/LocalityStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMToxNzo0MlrOG9oENg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMToxNzo0MlrOG9oENg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI3Mjc1OA==", "bodyText": "I am removing the integration of orca utilities. They are not used, and even the new design architecture does not consider using it. They are effectively dead code. There is not reason to keep them there. They only make the implementation hard to read and test.", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r467272758", "createdAt": "2020-08-07T21:17:42Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/LocalityStore.java", "diffHunk": "@@ -108,46 +103,24 @@ abstract LocalityStore newLocalityStore(\n     private final Helper helper;\n     private final LoadBalancerProvider loadBalancerProvider;\n     private final ThreadSafeRandom random;\n-    private final LoadStatsStore loadStatsStore;\n-    private final OrcaPerRequestUtil orcaPerRequestUtil;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26d39bca0f6468c0f70d27b36a0fa9dcc5f2a2a0"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODc4NTA1OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/LocalityStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMToyMTowOFrOG9oItA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMDo0MTozMFrOG9sGBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI3MzkwOA==", "bodyText": "Inevitably to add this API. The original thought when first implementing LocalityStore class, it will always have a LoadStatsStore associated with it (same lifecycle). As I mentioned in the PR description, we should not record loads if load reporting is not enabled, so we should allow a LocalityStore to have no LoadStatsStore. And conceptually, we should allow load reporting to be toggled on/off in the lifetime of a LocalityStore.", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r467273908", "createdAt": "2020-08-07T21:21:08Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/LocalityStore.java", "diffHunk": "@@ -73,7 +70,7 @@\n \n   void updateDropPercentage(List<DropOverload> dropOverloads);\n \n-  void updateOobMetricsReportInterval(long reportIntervalNano);\n+  void setLoadStatsStore(@Nullable LoadStatsStore loadStatsStore);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26d39bca0f6468c0f70d27b36a0fa9dcc5f2a2a0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzODc1OA==", "bodyText": "Obsolete.", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r467338758", "createdAt": "2020-08-08T00:41:30Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/LocalityStore.java", "diffHunk": "@@ -73,7 +70,7 @@\n \n   void updateDropPercentage(List<DropOverload> dropOverloads);\n \n-  void updateOobMetricsReportInterval(long reportIntervalNano);\n+  void setLoadStatsStore(@Nullable LoadStatsStore loadStatsStore);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI3MzkwOA=="}, "originalCommit": {"oid": "26d39bca0f6468c0f70d27b36a0fa9dcc5f2a2a0"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODc5MDI2OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/LoadStatsManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMToyMjo0M1rOG9oMDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMToyMjo0M1rOG9oMDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI3NDc2Ng==", "bodyText": "Borrowed the idea from Envoy's implementation: https://github.com/envoyproxy/envoy/blob/50ef0945fa2c5da4bff7627c3abf41fdd3b7cffd/source/common/upstream/load_stats_reporter.cc#L17", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r467274766", "createdAt": "2020-08-07T21:22:43Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/LoadStatsManager.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2019 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.envoyproxy.envoy.api.v2.endpoint.ClusterStats;\n+import io.grpc.xds.EnvoyProtoData.Locality;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Manages all stats for client side load.\n+ */\n+final class LoadStatsManager {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26d39bca0f6468c0f70d27b36a0fa9dcc5f2a2a0"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODgwNDg1OnYy", "diffSide": "LEFT", "path": "xds/src/main/java/io/grpc/xds/LoadReportClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMToyNTo1NVrOG9oVRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMToyNTo1NVrOG9oVRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI3NzEyNw==", "bodyText": "Eliminated this wrapper. Move the interval recording into each LoadStatsStore's implementation. Since each LoadStatsStore represents a \"living report\", when taking a snapshot for the report, we could \"stamp an interval\" for the report. Since the report is queried every time for sending an LRS request, it totally makes sense to have the report already stamped with the interval.", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r467277127", "createdAt": "2020-08-07T21:25:55Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/LoadReportClient.java", "diffHunk": "@@ -386,27 +337,6 @@ private void cleanUp() {\n     }\n   }\n \n-  private final class LoadStatsEntity {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26d39bca0f6468c0f70d27b36a0fa9dcc5f2a2a0"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODgyNzY2OnYy", "diffSide": "LEFT", "path": "xds/src/main/java/io/grpc/xds/LocalityStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMTozMDo0NFrOG9oj3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMDo0MjowM1rOG9sGXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI4MDg2MA==", "bodyText": "This was potentially a problem. The lifecycle of a ChildHelper is different from the LoadStatsStore that used to record loads for the cluster that this locality belongs to. A ChildHelper's lifecycle is same as the presence of the corresponding locality. However, a LoadStatsStore's lifecycle is for the time since load reporting was last enabled. They are completely disjoint, so a ChildHelper should always pick up the freshest LoadStatsStore to record load.", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r467280860", "createdAt": "2020-08-07T21:30:44Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/LocalityStore.java", "diffHunk": "@@ -363,59 +336,33 @@ boolean isDeactivated() {\n       }\n \n       class ChildHelper extends ForwardingLoadBalancerHelper {\n-\n-        private final OrcaReportingHelperWrapper orcaReportingHelperWrapper;\n         private SubchannelPicker currentChildPicker = XdsSubchannelPickers.BUFFER_PICKER;\n         private ConnectivityState currentChildState = CONNECTING;\n \n-        ChildHelper() {\n-          final ClientLoadCounter counter = loadStatsStore.getLocalityCounter(locality);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26d39bca0f6468c0f70d27b36a0fa9dcc5f2a2a0"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzODg0NQ==", "bodyText": "Obsolete.", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r467338845", "createdAt": "2020-08-08T00:42:03Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/LocalityStore.java", "diffHunk": "@@ -363,59 +336,33 @@ boolean isDeactivated() {\n       }\n \n       class ChildHelper extends ForwardingLoadBalancerHelper {\n-\n-        private final OrcaReportingHelperWrapper orcaReportingHelperWrapper;\n         private SubchannelPicker currentChildPicker = XdsSubchannelPickers.BUFFER_PICKER;\n         private ConnectivityState currentChildState = CONNECTING;\n \n-        ChildHelper() {\n-          final ClientLoadCounter counter = loadStatsStore.getLocalityCounter(locality);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI4MDg2MA=="}, "originalCommit": {"oid": "26d39bca0f6468c0f70d27b36a0fa9dcc5f2a2a0"}, "originalPosition": 199}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDQ3MTIwOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNzo1NTo1NVrOG-ZR2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxOToxMzozNVrOG-b0nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA3OTA2Nw==", "bodyText": "revert the new line", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r468079067", "createdAt": "2020-08-10T17:55:55Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java", "diffHunk": "@@ -236,6 +236,7 @@ public int hashCode() {\n     /**\n      * Load-balances endpoints for a given cluster.\n      */\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d8c1775ba7d2c05af293108294ccb9780aca9c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEyMDczMw==", "bodyText": "Done.", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r468120733", "createdAt": "2020-08-10T19:13:35Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java", "diffHunk": "@@ -236,6 +236,7 @@ public int hashCode() {\n     /**\n      * Load-balances endpoints for a given cluster.\n      */\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA3OTA2Nw=="}, "originalCommit": {"oid": "30d8c1775ba7d2c05af293108294ccb9780aca9c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDY0NTg3OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODo0NjoxMVrOG-a8OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxOToxMzoyOFrOG-b0ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwNjI5Ng==", "bodyText": "Where is isReportingLoad set true? I know is hard to test load report in EdsLoadBalancer because EdsLoadBalancerTest uses a real XdsClientImpl with fake channel.", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r468106296", "createdAt": "2020-08-10T18:46:11Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java", "diffHunk": "@@ -303,16 +302,17 @@ public boolean canHandleEmptyAddressListFromNameResolution() {\n \n       @Override\n       public void shutdown() {\n+        localityStore.reset();\n         if (isReportingLoad) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d8c1775ba7d2c05af293108294ccb9780aca9c"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEyMDY3Nw==", "bodyText": "Oops, forgot to put that back. Basically, nothing has changed in terms of the control flow. Only added XdsClient APIs for creating stats objects.", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r468120677", "createdAt": "2020-08-10T19:13:28Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java", "diffHunk": "@@ -303,16 +302,17 @@ public boolean canHandleEmptyAddressListFromNameResolution() {\n \n       @Override\n       public void shutdown() {\n+        localityStore.reset();\n         if (isReportingLoad) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwNjI5Ng=="}, "originalCommit": {"oid": "30d8c1775ba7d2c05af293108294ccb9780aca9c"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDY1NTI1OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/LoadStatsManager.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODo0OToxMVrOG-bB8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDoyMzoyMVrOG-egAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwNzc2Mg==", "bodyText": "Add log?", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r468107762", "createdAt": "2020-08-10T18:49:11Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/LoadStatsManager.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2019 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.envoyproxy.envoy.api.v2.endpoint.ClusterStats;\n+import io.grpc.xds.EnvoyProtoData.Locality;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Manages all stats for client side load.\n+ */\n+final class LoadStatsManager {\n+  private final LoadStatsStoreFactory loadStatsStoreFactory;\n+  private final Map<String, Map<String, RefCounted>> loadStatsStores = new HashMap<>();\n+\n+  LoadStatsManager() {\n+    this(LoadStatsStoreImpl.getDefaultFactory());\n+  }\n+\n+  @VisibleForTesting\n+  LoadStatsManager(LoadStatsStoreFactory factory) {\n+    this.loadStatsStoreFactory = factory;\n+  }\n+\n+  /**\n+   * Adds and retrieves the stats object for tracking loads for the given cluster:cluster_service.\n+   * The returned {@link LoadStatsStore} is reference-counted, caller should use\n+   * {@link #removeLoadStats} to release the reference when it is no longer used.\n+   */\n+  LoadStatsStore addLoadStats(String cluster, @Nullable String clusterService) {\n+    if (!loadStatsStores.containsKey(cluster)) {\n+      loadStatsStores.put(cluster, new HashMap<String, RefCounted>());\n+    }\n+    Map<String, RefCounted> clusterLoadStatsStores = loadStatsStores.get(cluster);\n+    if (!clusterLoadStatsStores.containsKey(clusterService)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d8c1775ba7d2c05af293108294ccb9780aca9c"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEzMDY3Mg==", "bodyText": "I don't think it is necessary. Stats objects are always created, and it always succeeds to create. In terms of functionality, there is no difference between creating an stats object by the LB policy or by the XdsClient.", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r468130672", "createdAt": "2020-08-10T19:27:12Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/LoadStatsManager.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2019 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.envoyproxy.envoy.api.v2.endpoint.ClusterStats;\n+import io.grpc.xds.EnvoyProtoData.Locality;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Manages all stats for client side load.\n+ */\n+final class LoadStatsManager {\n+  private final LoadStatsStoreFactory loadStatsStoreFactory;\n+  private final Map<String, Map<String, RefCounted>> loadStatsStores = new HashMap<>();\n+\n+  LoadStatsManager() {\n+    this(LoadStatsStoreImpl.getDefaultFactory());\n+  }\n+\n+  @VisibleForTesting\n+  LoadStatsManager(LoadStatsStoreFactory factory) {\n+    this.loadStatsStoreFactory = factory;\n+  }\n+\n+  /**\n+   * Adds and retrieves the stats object for tracking loads for the given cluster:cluster_service.\n+   * The returned {@link LoadStatsStore} is reference-counted, caller should use\n+   * {@link #removeLoadStats} to release the reference when it is no longer used.\n+   */\n+  LoadStatsStore addLoadStats(String cluster, @Nullable String clusterService) {\n+    if (!loadStatsStores.containsKey(cluster)) {\n+      loadStatsStores.put(cluster, new HashMap<String, RefCounted>());\n+    }\n+    Map<String, RefCounted> clusterLoadStatsStores = loadStatsStores.get(cluster);\n+    if (!clusterLoadStatsStores.containsKey(clusterService)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwNzc2Mg=="}, "originalCommit": {"oid": "30d8c1775ba7d2c05af293108294ccb9780aca9c"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEzNDU0NA==", "bodyText": "Not necessary for creating/removing stats object. But you have removed some logs, are they supposed to be moved somewhere else?", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r468134544", "createdAt": "2020-08-10T19:33:05Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/LoadStatsManager.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2019 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.envoyproxy.envoy.api.v2.endpoint.ClusterStats;\n+import io.grpc.xds.EnvoyProtoData.Locality;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Manages all stats for client side load.\n+ */\n+final class LoadStatsManager {\n+  private final LoadStatsStoreFactory loadStatsStoreFactory;\n+  private final Map<String, Map<String, RefCounted>> loadStatsStores = new HashMap<>();\n+\n+  LoadStatsManager() {\n+    this(LoadStatsStoreImpl.getDefaultFactory());\n+  }\n+\n+  @VisibleForTesting\n+  LoadStatsManager(LoadStatsStoreFactory factory) {\n+    this.loadStatsStoreFactory = factory;\n+  }\n+\n+  /**\n+   * Adds and retrieves the stats object for tracking loads for the given cluster:cluster_service.\n+   * The returned {@link LoadStatsStore} is reference-counted, caller should use\n+   * {@link #removeLoadStats} to release the reference when it is no longer used.\n+   */\n+  LoadStatsStore addLoadStats(String cluster, @Nullable String clusterService) {\n+    if (!loadStatsStores.containsKey(cluster)) {\n+      loadStatsStores.put(cluster, new HashMap<String, RefCounted>());\n+    }\n+    Map<String, RefCounted> clusterLoadStatsStores = loadStatsStores.get(cluster);\n+    if (!clusterLoadStatsStores.containsKey(clusterService)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwNzc2Mg=="}, "originalCommit": {"oid": "30d8c1775ba7d2c05af293108294ccb9780aca9c"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2NDYxMA==", "bodyText": "I deleted logs for \"Start/Stop load reporting for cluster: ..., cluster_service: ...\" in EDS policy. They are misleading and look awkward:\n\nThere is a single load reporting client for all clusters, it is either turned on or off, not for a specific cluster/cluster_service.\nLoad reporting is completely driven by the management server: which clusters to report load for are determined by the management server, not the gRPC client.\n\nEach EDS policy's log for receiving it LB config includes the information for if this policy enables load reporting. The global load reporting is enabled as long as there is at least one EDS policy enabling it.\nInstead, I put logs in XdsClient to indicate when the global load reporting is turned on or off.", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r468164610", "createdAt": "2020-08-10T20:23:21Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/LoadStatsManager.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2019 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.envoyproxy.envoy.api.v2.endpoint.ClusterStats;\n+import io.grpc.xds.EnvoyProtoData.Locality;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Manages all stats for client side load.\n+ */\n+final class LoadStatsManager {\n+  private final LoadStatsStoreFactory loadStatsStoreFactory;\n+  private final Map<String, Map<String, RefCounted>> loadStatsStores = new HashMap<>();\n+\n+  LoadStatsManager() {\n+    this(LoadStatsStoreImpl.getDefaultFactory());\n+  }\n+\n+  @VisibleForTesting\n+  LoadStatsManager(LoadStatsStoreFactory factory) {\n+    this.loadStatsStoreFactory = factory;\n+  }\n+\n+  /**\n+   * Adds and retrieves the stats object for tracking loads for the given cluster:cluster_service.\n+   * The returned {@link LoadStatsStore} is reference-counted, caller should use\n+   * {@link #removeLoadStats} to release the reference when it is no longer used.\n+   */\n+  LoadStatsStore addLoadStats(String cluster, @Nullable String clusterService) {\n+    if (!loadStatsStores.containsKey(cluster)) {\n+      loadStatsStores.put(cluster, new HashMap<String, RefCounted>());\n+    }\n+    Map<String, RefCounted> clusterLoadStatsStores = loadStatsStores.get(cluster);\n+    if (!clusterLoadStatsStores.containsKey(clusterService)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEwNzc2Mg=="}, "originalCommit": {"oid": "30d8c1775ba7d2c05af293108294ccb9780aca9c"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDgxMTQyOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxOToyOToxNVrOG-cjJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxOToyOToxNVrOG-cjJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEzMjY0NA==", "bodyText": "Just for reverting back to the original implementation. Please see changes from all commits.", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r468132644", "createdAt": "2020-08-10T19:29:15Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java", "diffHunk": "@@ -312,6 +312,7 @@ public void shutdown() {\n           xdsClient.cancelClientStatsReport();\n           isReportingLoad = false;\n         }\n+        localityStore.reset();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d9d25eb51083a8bff8d05498b88d2e7de7a0de6"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjEyNTU5OnYy", "diffSide": "LEFT", "path": "xds/src/main/java/io/grpc/xds/ClientLoadCounter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNToxNzowMFrOG-orjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNToxNzowMFrOG-orjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMzMTQwNA==", "bodyText": "As a reminder, active is true if this counter is currently in-use by some LB policy to track loads sent to a specific locality.\nWe do not mark internally if a counter is still in use by some LB policy, instead ref-count the usage of this counter externally by wrapping a counter with ReferenceCounted.", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r468331404", "createdAt": "2020-08-11T05:17:00Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/ClientLoadCounter.java", "diffHunk": "@@ -54,27 +54,10 @@\n   private final AtomicLong callsIssued = new AtomicLong();\n   private final MetricRecorder[] metricRecorders = new MetricRecorder[THREAD_BALANCING_FACTOR];\n \n-  // True if this counter continues to record stats after next snapshot. Otherwise, it will be\n-  // discarded.\n-  private boolean active;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "801b23d9db2060fce4c5a5d76bfddab16104aaa0"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjEyNjgzOnYy", "diffSide": "LEFT", "path": "xds/src/main/java/io/grpc/xds/ClientLoadCounter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNToxNzo0OVrOG-osSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNToxNzo0OVrOG-osSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMzMTU5NA==", "bodyText": "Replaced by individual setters as the way of testing has changed.", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r468331594", "createdAt": "2020-08-11T05:17:49Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/ClientLoadCounter.java", "diffHunk": "@@ -54,27 +54,10 @@\n   private final AtomicLong callsIssued = new AtomicLong();\n   private final MetricRecorder[] metricRecorders = new MetricRecorder[THREAD_BALANCING_FACTOR];\n \n-  // True if this counter continues to record stats after next snapshot. Otherwise, it will be\n-  // discarded.\n-  private boolean active;\n-\n   ClientLoadCounter() {\n     for (int i = 0; i < THREAD_BALANCING_FACTOR; i++) {\n       metricRecorders[i] = new MetricRecorder();\n     }\n-    active = true;\n-  }\n-\n-  /**\n-   * Must only be used for testing.\n-   */\n-  @VisibleForTesting\n-  ClientLoadCounter(long callsSucceeded, long callsInProgress, long callsFailed, long callsIssued) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "801b23d9db2060fce4c5a5d76bfddab16104aaa0"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjEzNzE2OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/ReferenceCounted.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNToyMzozNVrOG-oyUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNToyMzozNVrOG-oyUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMzMzEzNg==", "bodyText": "As the specification of this class says, this wrapper class does not own the object, the real owner of the object takes the responsibility for throwing away the object when the reference count reaches 0. So access to the object should still be allowed even if the reference count reaches 0. This is useful for load counters: we need reference count to know when to evict them from the stats object (aka, ref count = 0), but we still want counters with ref count = 0 to stay there until its remaining values are read off.", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r468333136", "createdAt": "2020-08-11T05:23:35Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/ReferenceCounted.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+/**\n+ * A reference count wrapper for objects. This class does not take the ownership for the object,\n+ * but only provides usage counting. The real owner of the wrapped object is responsible for\n+ * managing the lifecycle of the object.\n+ *\n+ * <p>Intended for a container class to keep track of lifecycle for elements it contains. This\n+ * wrapper itself should never be returned to the consumers of the elements to avoid reference\n+ * counts being leaked.\n+ */\n+final class ReferenceCounted<T> {\n+  private final T instance;\n+  private int refs;\n+\n+  private ReferenceCounted(T instance) {\n+    this.instance = instance;\n+  }\n+\n+  static <T> ReferenceCounted<T> wrap(T instance) {\n+    checkNotNull(instance, \"instance\");\n+    return new ReferenceCounted<>(instance);\n+  }\n+\n+  void retain() {\n+    refs++;\n+  }\n+\n+  void release() {\n+    checkState(refs > 0, \"reference reached 0\");\n+    refs--;\n+  }\n+\n+  int getReferenceCount() {\n+    return refs;\n+  }\n+\n+  T get() {\n+    return instance;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "801b23d9db2060fce4c5a5d76bfddab16104aaa0"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODU0OTUxOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/LoadStatsStoreImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjoyNjo0NlrOG-_tQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjo0ODowM1rOG_AhXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcwODY3NA==", "bodyText": "Why changed this?", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r468708674", "createdAt": "2020-08-11T16:26:46Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/LoadStatsStoreImpl.java", "diffHunk": "@@ -125,27 +122,25 @@ public ClusterStats generateLoadReport() {\n \n   @Override\n   public void addLocality(final Locality locality) {\n-    ClientLoadCounter counter = localityLoadCounters.get(locality);\n-    checkState(counter == null || !counter.isActive(),\n-        \"An active counter for locality %s already exists\", locality);\n+    ReferenceCounted<ClientLoadCounter> counter = localityLoadCounters.get(locality);\n     if (counter == null) {\n-      localityLoadCounters.put(locality, new ClientLoadCounter());\n-    } else {\n-      counter.setActive(true);\n+      counter = ReferenceCounted.wrap(new ClientLoadCounter());\n+      localityLoadCounters.put(locality, counter);\n     }\n+    counter.retain();\n   }\n \n   @Override\n   public void removeLocality(final Locality locality) {\n-    ClientLoadCounter counter = localityLoadCounters.get(locality);\n-    checkState(counter != null && counter.isActive(),\n-        \"No active counter for locality %s exists\", locality);\n-    counter.setActive(false);\n+    ReferenceCounted<ClientLoadCounter> counter = localityLoadCounters.get(locality);\n+    counter.release();\n   }\n \n+  @Nullable\n   @Override\n   public ClientLoadCounter getLocalityCounter(final Locality locality) {\n-    return localityLoadCounters.get(locality);\n+    ReferenceCounted<ClientLoadCounter> counter = localityLoadCounters.get(locality);\n+    return counter == null || counter.getReferenceCount() == 0 ? null : counter.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d35e66e12919a94251f7a6cc0918e8962d6029a1"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyMjAxMg==", "bodyText": "Following the same specification of the API as before, if the locality is is not under track, return null. We don't want to break in the middle as that makes this API fragile.", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r468722012", "createdAt": "2020-08-11T16:48:03Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/LoadStatsStoreImpl.java", "diffHunk": "@@ -125,27 +122,25 @@ public ClusterStats generateLoadReport() {\n \n   @Override\n   public void addLocality(final Locality locality) {\n-    ClientLoadCounter counter = localityLoadCounters.get(locality);\n-    checkState(counter == null || !counter.isActive(),\n-        \"An active counter for locality %s already exists\", locality);\n+    ReferenceCounted<ClientLoadCounter> counter = localityLoadCounters.get(locality);\n     if (counter == null) {\n-      localityLoadCounters.put(locality, new ClientLoadCounter());\n-    } else {\n-      counter.setActive(true);\n+      counter = ReferenceCounted.wrap(new ClientLoadCounter());\n+      localityLoadCounters.put(locality, counter);\n     }\n+    counter.retain();\n   }\n \n   @Override\n   public void removeLocality(final Locality locality) {\n-    ClientLoadCounter counter = localityLoadCounters.get(locality);\n-    checkState(counter != null && counter.isActive(),\n-        \"No active counter for locality %s exists\", locality);\n-    counter.setActive(false);\n+    ReferenceCounted<ClientLoadCounter> counter = localityLoadCounters.get(locality);\n+    counter.release();\n   }\n \n+  @Nullable\n   @Override\n   public ClientLoadCounter getLocalityCounter(final Locality locality) {\n-    return localityLoadCounters.get(locality);\n+    ReferenceCounted<ClientLoadCounter> counter = localityLoadCounters.get(locality);\n+    return counter == null || counter.getReferenceCount() == 0 ? null : counter.get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcwODY3NA=="}, "originalCommit": {"oid": "d35e66e12919a94251f7a6cc0918e8962d6029a1"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODU4NzU5OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/LoadStatsStoreImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjozNjowMlrOG_AExA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNzowOTowOVrOG_BSuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNDY5Mg==", "bodyText": "What about ClientLoadCounter addLocality(Locality locality)\nand remove ClientLoadCounter getLocalityCounter(Locality locality) ?", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r468714692", "createdAt": "2020-08-11T16:36:02Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/LoadStatsStoreImpl.java", "diffHunk": "@@ -105,32 +114,33 @@ public ClusterStats generateLoadReport() {\n           .setDroppedCount(drops));\n     }\n     statsBuilder.setTotalDroppedRequests(totalDrops);\n+    statsBuilder.setLoadReportInterval(\n+        Durations.fromNanos(stopwatch.elapsed(TimeUnit.NANOSECONDS)));\n+    stopwatch.reset().start();\n     return statsBuilder.build();\n   }\n \n   @Override\n   public void addLocality(final Locality locality) {\n-    ClientLoadCounter counter = localityLoadCounters.get(locality);\n-    checkState(counter == null || !counter.isActive(),\n-        \"An active counter for locality %s already exists\", locality);\n+    ReferenceCounted<ClientLoadCounter> counter = localityLoadCounters.get(locality);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "801b23d9db2060fce4c5a5d76bfddab16104aaa0"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODczNDY1MQ==", "bodyText": "Yeah, that may make it better. Done.", "url": "https://github.com/grpc/grpc-java/pull/7299#discussion_r468734651", "createdAt": "2020-08-11T17:09:09Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/LoadStatsStoreImpl.java", "diffHunk": "@@ -105,32 +114,33 @@ public ClusterStats generateLoadReport() {\n           .setDroppedCount(drops));\n     }\n     statsBuilder.setTotalDroppedRequests(totalDrops);\n+    statsBuilder.setLoadReportInterval(\n+        Durations.fromNanos(stopwatch.elapsed(TimeUnit.NANOSECONDS)));\n+    stopwatch.reset().start();\n     return statsBuilder.build();\n   }\n \n   @Override\n   public void addLocality(final Locality locality) {\n-    ClientLoadCounter counter = localityLoadCounters.get(locality);\n-    checkState(counter == null || !counter.isActive(),\n-        \"An active counter for locality %s already exists\", locality);\n+    ReferenceCounted<ClientLoadCounter> counter = localityLoadCounters.get(locality);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNDY5Mg=="}, "originalCommit": {"oid": "801b23d9db2060fce4c5a5d76bfddab16104aaa0"}, "originalPosition": 95}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2459, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}