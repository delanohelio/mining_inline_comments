{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwMDE4NjY5", "number": 6837, "title": "xds: generate xds-routing config from XdsNameResolver", "bodyText": "", "createdAt": "2020-03-17T18:56:37Z", "url": "https://github.com/grpc/grpc-java/pull/6837", "merged": true, "mergeCommit": {"oid": "24e3d9587eed013636d4419dc5d3dd926cbc48f0"}, "closed": true, "closedAt": "2020-04-04T17:48:44Z", "author": {"login": "dapengzhang0"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcPaVYfABqjMxNDgxNTMwNDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcUFaewgFqTM4NzQ5NzA0Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a37be34f9304cf5c4f256a4ed370b0db4d6f0c12", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/a37be34f9304cf5c4f256a4ed370b0db4d6f0c12", "committedDate": "2020-03-17T18:55:14Z", "message": "xds: generate xds-routing config from XdsNameResolver"}, "afterCommit": {"oid": "642f430d6b3d43c68e327a33a111f7c4d6a6797c", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/642f430d6b3d43c68e327a33a111f7c4d6a6797c", "committedDate": "2020-03-20T06:15:09Z", "message": "xds: generate xds-routing config from XdsNameResolver"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6b779baa1f763903cfaaa89f3c6153c3234fba8", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/f6b779baa1f763903cfaaa89f3c6153c3234fba8", "committedDate": "2020-03-20T06:24:01Z", "message": "xds: generate xds-routing config from XdsNameResolver"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "642f430d6b3d43c68e327a33a111f7c4d6a6797c", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/642f430d6b3d43c68e327a33a111f7c4d6a6797c", "committedDate": "2020-03-20T06:15:09Z", "message": "xds: generate xds-routing config from XdsNameResolver"}, "afterCommit": {"oid": "f6b779baa1f763903cfaaa89f3c6153c3234fba8", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/f6b779baa1f763903cfaaa89f3c6153c3234fba8", "committedDate": "2020-03-20T06:24:01Z", "message": "xds: generate xds-routing config from XdsNameResolver"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "258b47ceb7e0c99e77b66e3a389c3a1a3eb63da7", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/258b47ceb7e0c99e77b66e3a389c3a1a3eb63da7", "committedDate": "2020-03-24T00:02:48Z", "message": "add a javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52a5622047bff8d065db77bff6fd6513ce6e5213", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/52a5622047bff8d065db77bff6fd6513ce6e5213", "committedDate": "2020-03-26T22:26:34Z", "message": "change ConfigUpdate: only one of clusterName and routes field is used"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6593460b48619c3aff6d46c3de56ba109a029302", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/6593460b48619c3aff6d46c3de56ba109a029302", "committedDate": "2020-03-26T22:35:40Z", "message": "fix cluster route"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMjI2MjM1", "url": "https://github.com/grpc/grpc-java/pull/6837#pullrequestreview-382226235", "createdAt": "2020-03-26T17:11:47Z", "commit": {"oid": "258b47ceb7e0c99e77b66e3a389c3a1a3eb63da7"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNzoxMTo0N1rOF8Rcbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNzo0MTozN1rOF8mDoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0NDY4Nw==", "bodyText": "nit: this is redundant, repeats what the code is expressing.", "url": "https://github.com/grpc/grpc-java/pull/6837#discussion_r398744687", "createdAt": "2020-03-26T17:11:47Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsNameResolver.java", "diffHunk": "@@ -131,9 +137,109 @@ XdsClient createXdsClient() {\n     };\n     xdsClientPool = new RefCountedXdsClientObjectPool(xdsClientFactory);\n     xdsClient = xdsClientPool.getObject();\n-    xdsClient.watchConfigData(authority, new ConfigWatcher() {\n-      @Override\n-      public void onConfigChanged(ConfigUpdate update) {\n+    xdsClient.watchConfigData(authority, new ConfigWatcherImpl(listener));\n+  }\n+\n+  private class ConfigWatcherImpl implements ConfigWatcher {\n+\n+    final Listener2 listener;\n+\n+    ConfigWatcherImpl(Listener2 listener) {\n+      this.listener = listener;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void onConfigChanged(ConfigUpdate update) {\n+      Map<String, ?> config;\n+      if (XdsClientImpl.enablePathMatching && update.getRoutes().size() != 1) {\n+        // Path matching is enabled and the config update is not a single route. Generate", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "258b47ceb7e0c99e77b66e3a389c3a1a3eb63da7"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1MTM4Mg==", "bodyText": "nit: this comment is way too verbose. Actually you do not need to say anything as most people would only care about the part for generating service config and reading code logic there makes everything clear.\nAlso, using null values as default is better, with its beauty of representing something unset. ... != null expresses stronger indication for not using its value than !... .isEmpty().", "url": "https://github.com/grpc/grpc-java/pull/6837#discussion_r398951382", "createdAt": "2020-03-26T23:28:13Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsClient.java", "diffHunk": "@@ -63,6 +63,9 @@\n    * be used to generate a service config.\n    */\n   static final class ConfigUpdate {\n+    // Either clusterName or routes is empty, and the other field must not be empty.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6593460b48619c3aff6d46c3de56ba109a029302"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1MzYxMQ==", "bodyText": "Using ^ is hard for readers. Also, I don't think the check is necessary. But if you really want it to prevent bugs, make the expression easier to read.", "url": "https://github.com/grpc/grpc-java/pull/6837#discussion_r398953611", "createdAt": "2020-03-26T23:34:56Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsClient.java", "diffHunk": "@@ -112,7 +115,11 @@ Builder addRoutes(Collection<Route> route) {\n       }\n \n       ConfigUpdate build() {\n-        Preconditions.checkState(clusterName != null, \"clusterName is not set\");\n+        Preconditions.checkState(\n+            clusterName.isEmpty() ^ routes.isEmpty(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6593460b48619c3aff6d46c3de56ba109a029302"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1NjEyMg==", "bodyText": "Can routeAction be null? Using Optional just adds another (unnecessary) indirection.", "url": "https://github.com/grpc/grpc-java/pull/6837#discussion_r398956122", "createdAt": "2020-03-26T23:42:48Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsNameResolver.java", "diffHunk": "@@ -131,23 +137,129 @@ XdsClient createXdsClient() {\n     };\n     xdsClientPool = new RefCountedXdsClientObjectPool(xdsClientFactory);\n     xdsClient = xdsClientPool.getObject();\n-    xdsClient.watchConfigData(authority, new ConfigWatcher() {\n-      @Override\n-      public void onConfigChanged(ConfigUpdate update) {\n+    xdsClient.watchConfigData(authority, new ConfigWatcherImpl(listener));\n+  }\n+\n+  private class ConfigWatcherImpl implements ConfigWatcher {\n+\n+    final Listener2 listener;\n+\n+    ConfigWatcherImpl(Listener2 listener) {\n+      this.listener = listener;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void onConfigChanged(ConfigUpdate update) {\n+      Map<String, ?> config;\n+      if (update.getRoutes().size() > 1) {\n+        // Path matching is enabled and the config update is not a single route. Generate\n+        // xds-routing lb config.\n+        logger.log(\n+            XdsLogLevel.INFO,\n+            \"Received config update with {0} routes from xDS client {1}\",\n+            update.getRoutes().size(),\n+            xdsClient);\n+        logger.log(\n+            XdsLogLevel.DEBUG,\n+            \"Received config update from xDS client {0}: {1}\",\n+            xdsClient,\n+            update);\n+        List<Object> routes = new ArrayList<>(update.getRoutes().size());\n+        Map<String, Object> actions = new LinkedHashMap<>();\n+        Map<RouteAction, String> exitingActions = new HashMap<>();\n+        for (Route route : update.getRoutes()) {\n+          String service = \"\";\n+          String method = \"\";\n+          String prefix = route.getRouteMatch().getPrefix();\n+          String path = route.getRouteMatch().getPath();\n+          if (!prefix.isEmpty()) {\n+            service = prefix.substring(1, prefix.length() - 1);\n+          } else if (!path.isEmpty()) {\n+            int splitIndex = path.lastIndexOf('/');\n+            service = path.substring(1, splitIndex);\n+            method = path.substring(splitIndex + 1);\n+          }\n+          Map<String, String> methodName = ImmutableMap.of(\"service\", service, \"method\", method);\n+          String actionName;\n+          RouteAction routeAction = route.getRouteAction().get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6593460b48619c3aff6d46c3de56ba109a029302"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA3MDA5OA==", "bodyText": "The conditions of this if-elseif-else is verbose and unclear. Use null value of fields in ConfigUpdate to make this cleaner:\nif (update.clusterName != null) {\n   // CDS\n} else if (update.getRoutes.size() == 1) {\n   // weighted-target\n} else {\n   // xds-routing\n}", "url": "https://github.com/grpc/grpc-java/pull/6837#discussion_r399070098", "createdAt": "2020-03-27T07:06:19Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsNameResolver.java", "diffHunk": "@@ -131,23 +137,129 @@ XdsClient createXdsClient() {\n     };\n     xdsClientPool = new RefCountedXdsClientObjectPool(xdsClientFactory);\n     xdsClient = xdsClientPool.getObject();\n-    xdsClient.watchConfigData(authority, new ConfigWatcher() {\n-      @Override\n-      public void onConfigChanged(ConfigUpdate update) {\n+    xdsClient.watchConfigData(authority, new ConfigWatcherImpl(listener));\n+  }\n+\n+  private class ConfigWatcherImpl implements ConfigWatcher {\n+\n+    final Listener2 listener;\n+\n+    ConfigWatcherImpl(Listener2 listener) {\n+      this.listener = listener;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void onConfigChanged(ConfigUpdate update) {\n+      Map<String, ?> config;\n+      if (update.getRoutes().size() > 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6593460b48619c3aff6d46c3de56ba109a029302"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA4MjQwMA==", "bodyText": "This whole logic of generating LB configs is complicated, given that each LB config can have recursively nested child policies. Same for config generation in EDS policy (TODO).\nPreviously generating service config with CDS LB config very simple (a raw JSON string, only ~10 lines). But now, it's bad to write all of this here (config generation in EDS policy is probably to be even more complicated). This is unreadable, with three levels of child policy nesting (maps with values of maps with values of maps). We would need to seek for a better approach:\nSimilar to how LB config is parsed (each LB config parser recursively calls child policy's own parser to parse child policy), we can implement a LB config generator for each LB policy so that each config generator generates its own config (recursively use child policy's generator to generate child policies) and put the output together.", "url": "https://github.com/grpc/grpc-java/pull/6837#discussion_r399082400", "createdAt": "2020-03-27T07:41:37Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsNameResolver.java", "diffHunk": "@@ -131,23 +137,129 @@ XdsClient createXdsClient() {\n     };\n     xdsClientPool = new RefCountedXdsClientObjectPool(xdsClientFactory);\n     xdsClient = xdsClientPool.getObject();\n-    xdsClient.watchConfigData(authority, new ConfigWatcher() {\n-      @Override\n-      public void onConfigChanged(ConfigUpdate update) {\n+    xdsClient.watchConfigData(authority, new ConfigWatcherImpl(listener));\n+  }\n+\n+  private class ConfigWatcherImpl implements ConfigWatcher {\n+\n+    final Listener2 listener;\n+\n+    ConfigWatcherImpl(Listener2 listener) {\n+      this.listener = listener;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void onConfigChanged(ConfigUpdate update) {\n+      Map<String, ?> config;\n+      if (update.getRoutes().size() > 1) {\n+        // Path matching is enabled and the config update is not a single route. Generate\n+        // xds-routing lb config.\n+        logger.log(\n+            XdsLogLevel.INFO,\n+            \"Received config update with {0} routes from xDS client {1}\",\n+            update.getRoutes().size(),\n+            xdsClient);\n+        logger.log(\n+            XdsLogLevel.DEBUG,\n+            \"Received config update from xDS client {0}: {1}\",\n+            xdsClient,\n+            update);\n+        List<Object> routes = new ArrayList<>(update.getRoutes().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6593460b48619c3aff6d46c3de56ba109a029302"}, "originalPosition": 76}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5efa0e6b23cf33f92c4cc75086465caeea621f1f", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/5efa0e6b23cf33f92c4cc75086465caeea621f1f", "committedDate": "2020-04-01T16:46:53Z", "message": "refactor ConfigUpdate data"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e0df959a3702f9d20c9fae984d99235f70ad2bf", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/6e0df959a3702f9d20c9fae984d99235f70ad2bf", "committedDate": "2020-04-01T16:52:30Z", "message": "return nullable for getRouteAction()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99b210d9c6d123a02b5016aa9db55cd899558762", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/99b210d9c6d123a02b5016aa9db55cd899558762", "committedDate": "2020-04-01T16:58:36Z", "message": "simplify if statements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfb7c49c60648a44773edbb4aa04e30e6e64910c", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/bfb7c49c60648a44773edbb4aa04e30e6e64910c", "committedDate": "2020-04-01T17:01:59Z", "message": "check state for ConfigUpdate builder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a174719194c17d33ee4cc560b031c425c58d51d", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/6a174719194c17d33ee4cc560b031c425c58d51d", "committedDate": "2020-04-01T18:43:30Z", "message": "refactor onConfigChanged()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b86d6ca2f9dc8cb08e6c7492a6d374730edaa96", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/0b86d6ca2f9dc8cb08e6c7492a6d374730edaa96", "committedDate": "2020-04-01T18:49:35Z", "message": "reuse generateCdsRawConfig"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bb372549d2845d7013cb5c81b8628f7c9265523", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/0bb372549d2845d7013cb5c81b8628f7c9265523", "committedDate": "2020-04-01T18:53:51Z", "message": "more reorganize"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "079c9015ef4d874e2981b151aaf2f88b89b5d795", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/079c9015ef4d874e2981b151aaf2f88b89b5d795", "committedDate": "2020-04-01T18:58:45Z", "message": "remove debug log because it is logge in service config"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fabaf2618e16c5f23139046949238ec385aaf5c7", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/fabaf2618e16c5f23139046949238ec385aaf5c7", "committedDate": "2020-04-01T18:57:15Z", "message": "debug log"}, "afterCommit": {"oid": "079c9015ef4d874e2981b151aaf2f88b89b5d795", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/079c9015ef4d874e2981b151aaf2f88b89b5d795", "committedDate": "2020-04-01T18:58:45Z", "message": "remove debug log because it is logge in service config"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1ODcwNjA2", "url": "https://github.com/grpc/grpc-java/pull/6837#pullrequestreview-385870606", "createdAt": "2020-04-01T19:07:21Z", "commit": {"oid": "079c9015ef4d874e2981b151aaf2f88b89b5d795"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOTowNzoyMVrOF_OrXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOToxOToyOVrOF_PFnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg0NTA4NA==", "bodyText": "nit: this line should be put one line above.", "url": "https://github.com/grpc/grpc-java/pull/6837#discussion_r401845084", "createdAt": "2020-04-01T19:07:21Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsClient.java", "diffHunk": "@@ -17,13 +17,15 @@\n package io.grpc.xds;\n \n import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n \n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.MoreObjects;\n import com.google.common.base.Preconditions;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n // TODO(sanjaypujare): remove dependency on envoy data types.\n+import com.google.common.collect.Iterables;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "079c9015ef4d874e2981b151aaf2f88b89b5d795"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg1MTgwNA==", "bodyText": "Ah... I was wondering how existing test cases in XdsClientImplTest are not affected, this is why. ConfigUpdate intends to be POJO, it's a data class. Its getter should not involve any business logic, it's just for getting a property value. This method doesn't make sense when routes contains more than one items and it should not be called in that case.\nSo I would still leaning towards ConfigUpdate containing a String and a List, with \"oneof\" semantics. XdsClient will set clusterName (String) if path matching is not enabled and leave routes (List) being null, and vice versa for path matching enabled.", "url": "https://github.com/grpc/grpc-java/pull/6837#discussion_r401851804", "createdAt": "2020-04-01T19:19:29Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsClient.java", "diffHunk": "@@ -63,19 +65,18 @@\n    * be used to generate a service config.\n    */\n   static final class ConfigUpdate {\n-    private final String clusterName;\n     private final List<Route> routes;\n \n-    private ConfigUpdate(String clusterName, List<Route> routes) {\n-      this.clusterName = clusterName;\n+    private ConfigUpdate(List<Route> routes) {\n       this.routes = routes;\n     }\n \n+    /** Gets the cluster name for the default route. */\n     String getClusterName() {\n-      return clusterName;\n+      return Iterables.getLast(routes).getRouteAction().getCluster();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "079c9015ef4d874e2981b151aaf2f88b89b5d795"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f962c1c23d4514befcf223bfe06b75e3b9ee275", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/4f962c1c23d4514befcf223bfe06b75e3b9ee275", "committedDate": "2020-04-01T20:52:24Z", "message": "fix import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "072f3a62f34ef62129d90066afa4c792208abf99", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/072f3a62f34ef62129d90066afa4c792208abf99", "committedDate": "2020-04-01T21:10:29Z", "message": "remove getClusterName() from ConfigUpdate"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MDE3NjQ5", "url": "https://github.com/grpc/grpc-java/pull/6837#pullrequestreview-386017649", "createdAt": "2020-04-01T23:29:47Z", "commit": {"oid": "072f3a62f34ef62129d90066afa4c792208abf99"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMzoyOTo0N1rOF_WNvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMzoyOTo0N1rOF_WNvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk2ODU3Mg==", "bodyText": "This message would be almost unreadable, as serviceConfig is a deeply nested map. We may need a utility that coverts Map<String, ?> to String, but seems would only be useful for visualization. It's nontrivial to implement that.\nSo maybe, we have to delete this log message (or change it to DEBUG?) to avoid printing out tons of hard-to-read data.", "url": "https://github.com/grpc/grpc-java/pull/6837#discussion_r401968572", "createdAt": "2020-04-01T23:29:47Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsNameResolver.java", "diffHunk": "@@ -131,62 +136,160 @@ XdsClient createXdsClient() {\n     };\n     xdsClientPool = new RefCountedXdsClientObjectPool(xdsClientFactory);\n     xdsClient = xdsClientPool.getObject();\n-    xdsClient.watchConfigData(authority, new ConfigWatcher() {\n-      @Override\n-      public void onConfigChanged(ConfigUpdate update) {\n+    xdsClient.watchConfigData(authority, new ConfigWatcherImpl(listener));\n+  }\n+\n+  private class ConfigWatcherImpl implements ConfigWatcher {\n+\n+    final Listener2 listener;\n+\n+    ConfigWatcherImpl(Listener2 listener) {\n+      this.listener = listener;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void onConfigChanged(ConfigUpdate update) {\n+      Map<String, ?> rawLbConfig;\n+      if (update.getRoutes().size() > 1) {\n         logger.log(\n             XdsLogLevel.INFO,\n-            \"Received config update from xDS client {0}: cluster_name={1}\",\n-            xdsClient, update.getClusterName());\n-        String serviceConfig = \"{\\n\"\n-            + \"  \\\"loadBalancingConfig\\\": [\\n\"\n-            + \"    {\\n\"\n-            + \"      \\\"cds_experimental\\\": {\\n\"\n-            + \"        \\\"cluster\\\": \\\"\" + update.getClusterName() + \"\\\"\\n\"\n-            + \"      }\\n\"\n-            + \"    }\\n\"\n-            + \"  ]\\n\"\n-            + \"}\";\n-        Map<String, ?> config;\n-        try {\n-          config = (Map<String, ?>) JsonParser.parse(serviceConfig);\n-        } catch (IOException e) {\n-          listener.onError(\n-              Status.UNKNOWN.withDescription(\"Invalid service config\").withCause(e));\n-          return;\n+            \"Received config update with {0} routes from xDS client {1}\",\n+            update.getRoutes().size(),\n+            xdsClient);\n+        rawLbConfig = generateXdsRoutingRawConfig(update.getRoutes());\n+      } else {\n+        Route defaultRoute = Iterables.getOnlyElement(update.getRoutes());\n+        String clusterName = defaultRoute.getRouteAction().getCluster();\n+        if (!clusterName.isEmpty()) {\n+          logger.log(\n+              XdsLogLevel.INFO,\n+              \"Received config update from xDS client {0}: cluster_name={1}\",\n+              xdsClient,\n+              clusterName);\n+          rawLbConfig = generateCdsRawConfig(clusterName);\n+        } else {\n+          logger.log(\n+              XdsLogLevel.INFO,\n+              \"Received config update with one weighted cluster route from xDS client {0}\",\n+              xdsClient);\n+          List<ClusterWeight> clusterWeights = defaultRoute.getRouteAction().getWeightedCluster();\n+          rawLbConfig = generateWeightedTargetRawConfig(clusterWeights);\n         }\n-        logger.log(XdsLogLevel.INFO, \"Generated service config:\\n{0}\", serviceConfig);\n-        Attributes attrs =\n-            Attributes.newBuilder()\n-                .set(XdsAttributes.XDS_CLIENT_POOL, xdsClientPool)\n-                .build();\n-        ConfigOrError parsedServiceConfig = serviceConfigParser.parseServiceConfig(config);\n-        ResolutionResult result =\n-            ResolutionResult.newBuilder()\n-                .setAddresses(ImmutableList.<EquivalentAddressGroup>of())\n-                .setAttributes(attrs)\n-                .setServiceConfig(parsedServiceConfig)\n-                .build();\n-        listener.onResult(result);\n       }\n \n-      @Override\n-      public void onError(Status error) {\n-        // In order to distinguish between IO error and resource not found, which trigger\n-        // different handling, return an empty resolution result to channel for resource not\n-        // found.\n-        // TODO(chengyuanzhang): Returning an empty resolution result based on status code is\n-        //  a temporary solution. More design discussion needs to be done.\n-        if (error.getCode().equals(Code.NOT_FOUND)) {\n-          logger.log(\n-              XdsLogLevel.WARNING,\n-              \"Received error from xDS client {0}: {1}\", xdsClient, error.getDescription());\n-          listener.onResult(ResolutionResult.newBuilder().build());\n-          return;\n+      Map<String, ?> serviceConfig =\n+          ImmutableMap.of(\"loadBalancingConfig\", ImmutableList.of(rawLbConfig));\n+      logger.log(XdsLogLevel.INFO, \"Generated service config:\\n{0}\", serviceConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "072f3a62f34ef62129d90066afa4c792208abf99"}, "originalPosition": 141}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12bd2946c9df06b0076feb0cb5bbd8c4727953bd", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/12bd2946c9df06b0076feb0cb5bbd8c4727953bd", "committedDate": "2020-04-02T00:33:49Z", "message": "pretty print"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2ODY4Mzg0", "url": "https://github.com/grpc/grpc-java/pull/6837#pullrequestreview-386868384", "createdAt": "2020-04-03T00:38:07Z", "commit": {"oid": "12bd2946c9df06b0076feb0cb5bbd8c4727953bd"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMDozODowN1rOGABQHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMDo1Mzo0MlrOGABhFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY3MzY5Mg==", "bodyText": "If you only have one test method that alters this configuration, then only need to reset in that test method (or not bother doing it as you are not really altering the system property). Same for XdsClientImplTest.", "url": "https://github.com/grpc/grpc-java/pull/6837#discussion_r402673692", "createdAt": "2020-04-03T00:38:07Z", "author": {"login": "voidzcy"}, "path": "xds/src/test/java/io/grpc/xds/XdsNameResolverTest.java", "diffHunk": "@@ -175,6 +185,7 @@ public BootstrapInfo readBootstrap() {\n   @After\n   public void tearDown() {\n     xdsNameResolver.shutdown();\n+    XdsClientImpl.enablePathMatching = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12bd2946c9df06b0076feb0cb5bbd8c4727953bd"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY3NjE1NA==", "bodyText": "nit: name assertCdsChildPolicy. Ditto below.", "url": "https://github.com/grpc/grpc-java/pull/6837#discussion_r402676154", "createdAt": "2020-04-03T00:46:49Z", "author": {"login": "voidzcy"}, "path": "xds/src/test/java/io/grpc/xds/XdsNameResolverTest.java", "diffHunk": "@@ -330,6 +341,181 @@ public void resolve_resourceUpdated() {\n     assertThat(rawConfigValues).containsExactly(\"cluster\", \"cluster-blade.googleapis.com\");\n   }\n \n+  @Test\n+  @SuppressWarnings(\"unchecked\")\n+  public void resolve_resourceUpdated_multipleRoutes() {\n+    XdsClientImpl.enablePathMatching = true;\n+    xdsNameResolver.start(mockListener);\n+    assertThat(responseObservers).hasSize(1);\n+    StreamObserver<DiscoveryResponse> responseObserver = responseObservers.poll();\n+\n+    // Simulate receiving an LDS response that contains routes resolution directly in-line.\n+    List<Route> protoRoutes =\n+        ImmutableList.of(\n+            // path match, routed to cluster\n+            Route.newBuilder()\n+                .setMatch(buildPathMatch(\"fooSvc\", \"hello\"))\n+                .setRoute(buildClusterRoute(\"cluster-hello.googleapis.com\"))\n+                .build(),\n+            // prefix match, routed to cluster\n+            Route.newBuilder()\n+                .setMatch(buildPrefixMatch(\"fooSvc\"))\n+                .setRoute(buildClusterRoute(\"cluster-foo.googleapis.com\"))\n+                .build(),\n+            // path match, routed to weighted clusters\n+            Route.newBuilder()\n+                .setMatch(buildPathMatch(\"barSvc\", \"hello\"))\n+                .setRoute(buildWeightedClusterRoute(ImmutableMap.of(\n+                    \"cluster-hello.googleapis.com\", 40,  \"cluster-hello2.googleapis.com\", 60)))\n+                .build(),\n+            // prefix match, routed to weighted clusters\n+            Route.newBuilder()\n+                .setMatch(buildPrefixMatch(\"barSvc\"))\n+                .setRoute(\n+                    buildWeightedClusterRoute(\n+                        ImmutableMap.of(\n+                            \"cluster-bar.googleapis.com\", 30, \"cluster-bar2.googleapis.com\", 70)))\n+                .build(),\n+            // default, routed to cluster\n+            Route.newBuilder()\n+                .setRoute(buildClusterRoute(\"cluster-hello.googleapis.com\"))\n+                .build());\n+    HttpConnectionManager httpConnectionManager =\n+        HttpConnectionManager.newBuilder()\n+            .setRouteConfig(\n+                buildRouteConfiguration(\n+                    \"route-foo.googleapis.com\", // doesn't matter\n+                    ImmutableList.of(buildVirtualHostForRoutes(AUTHORITY, protoRoutes))))\n+            .build();\n+    List<Any> listeners =\n+        ImmutableList.of(Any.pack(buildListener(AUTHORITY, Any.pack(httpConnectionManager))));\n+    responseObserver.onNext(\n+        buildDiscoveryResponse(\"0\", listeners, XdsClientImpl.ADS_TYPE_URL_LDS,  \"0000\"));\n+\n+    ArgumentCaptor<ResolutionResult> resolutionResultCaptor = ArgumentCaptor.forClass(null);\n+    verify(mockListener).onResult(resolutionResultCaptor.capture());\n+    ResolutionResult result = resolutionResultCaptor.getValue();\n+    assertThat(result.getAddresses()).isEmpty();\n+    Map<String, ?> serviceConfig = (Map<String, ?>) result.getServiceConfig().getConfig();\n+\n+    List<Map<String, ?>> rawLbConfigs =\n+        (List<Map<String, ?>>) serviceConfig.get(\"loadBalancingConfig\");\n+    Map<String, ?> lbConfig = Iterables.getOnlyElement(rawLbConfigs);\n+    assertThat(lbConfig.keySet()).containsExactly(\"xds_routing_experimental\");\n+    Map<String, ?> rawConfigValues = (Map<String, ?>) lbConfig.get(\"xds_routing_experimental\");\n+    assertThat(rawConfigValues.keySet()).containsExactly(\"action\", \"route\");\n+    Map<String, Map<String, ?>> actions =\n+        (Map<String, Map<String, ?>>) rawConfigValues.get(\"action\");\n+    List<Map<String, ?>> routes = (List<Map<String, ?>>) rawConfigValues.get(\"route\");\n+    assertThat(routes).hasSize(5);\n+    for (Map<String, ?> route : routes) {\n+      assertThat(route.keySet()).containsExactly(\"methodName\", \"action\");\n+    }\n+    assertThat((Map<String, ?>) routes.get(0).get(\"methodName\"))\n+        .containsExactly(\"service\", \"fooSvc\", \"method\", \"hello\");\n+    String action0 = (String) routes.get(0).get(\"action\");\n+    assertThat((Map<String, ?>) routes.get(1).get(\"methodName\"))\n+        .containsExactly(\"service\", \"fooSvc\", \"method\", \"\");\n+    String action1 = (String) routes.get(1).get(\"action\");\n+    assertThat((Map<String, ?>) routes.get(2).get(\"methodName\"))\n+        .containsExactly(\"service\", \"barSvc\", \"method\", \"hello\");\n+    String action2 = (String) routes.get(2).get(\"action\");\n+    assertThat((Map<String, ?>) routes.get(3).get(\"methodName\"))\n+        .containsExactly(\"service\", \"barSvc\", \"method\", \"\");\n+    String action3 = (String) routes.get(3).get(\"action\");\n+    assertThat((Map<String, ?>) routes.get(4).get(\"methodName\"))\n+        .containsExactly(\"service\", \"\", \"method\", \"\");\n+    String action4 = (String) routes.get(4).get(\"action\");\n+    assertRouteActionIsCdsPolicy(actions.get(action0), \"cluster-hello.googleapis.com\");\n+    assertRouteActionIsCdsPolicy(actions.get(action1), \"cluster-foo.googleapis.com\");\n+    assertRouteActionIsWeightedTargetPolicy(\n+        actions.get(action2),\n+        ImmutableMap.of(\n+            \"cluster-hello.googleapis.com\", 40,  \"cluster-hello2.googleapis.com\", 60));\n+    assertRouteActionIsWeightedTargetPolicy(\n+        actions.get(action3),\n+        ImmutableMap.of(\n+            \"cluster-bar.googleapis.com\", 30, \"cluster-bar2.googleapis.com\", 70));\n+    assertThat(action4).isEqualTo(action0);\n+\n+    // Simulate receiving another LDS response that tells client to do RDS.\n+    String routeConfigName = \"route-foo.googleapis.com\";\n+    responseObserver.onNext(\n+        buildLdsResponseForRdsResource(\"1\", AUTHORITY, routeConfigName, \"0001\"));\n+\n+    // Client sent an RDS request for resource \"route-foo.googleapis.com\" (Omitted in this test).\n+\n+    // Simulate receiving an RDS response that contains the resource \"route-foo.googleapis.com\"\n+    // with a route resolution for a single weighted cluster route.\n+    Route weightedClustersDefaultRoute =\n+        Route.newBuilder()\n+            .setRoute(buildWeightedClusterRoute(\n+                ImmutableMap.of(\n+                    \"cluster-foo.googleapis.com\", 20, \"cluster-bar.googleapis.com\", 80)))\n+            .build();\n+    List<Any> routeConfigs = ImmutableList.of(\n+        Any.pack(\n+            buildRouteConfiguration(\n+                routeConfigName,\n+                ImmutableList.of(\n+                    buildVirtualHostForRoutes(\n+                        AUTHORITY, ImmutableList.of(weightedClustersDefaultRoute))))));\n+    responseObserver.onNext(\n+        buildDiscoveryResponse(\"0\", routeConfigs, XdsClientImpl.ADS_TYPE_URL_RDS, \"0000\"));\n+\n+    verify(mockListener, times(2)).onResult(resolutionResultCaptor.capture());\n+    result = resolutionResultCaptor.getValue();\n+    assertThat(result.getAddresses()).isEmpty();\n+    serviceConfig = (Map<String, ?>) result.getServiceConfig().getConfig();\n+    rawLbConfigs = (List<Map<String, ?>>) serviceConfig.get(\"loadBalancingConfig\");\n+    lbConfig = Iterables.getOnlyElement(rawLbConfigs);\n+    assertThat(lbConfig.keySet()).containsExactly(WEIGHTED_TARGET_POLICY_NAME);\n+    rawConfigValues = (Map<String, ?>) lbConfig.get(WEIGHTED_TARGET_POLICY_NAME);\n+    assertWeightedTargetConfigClusterWeights(\n+        rawConfigValues,\n+        ImmutableMap.of(\n+            \"cluster-foo.googleapis.com\", 20, \"cluster-bar.googleapis.com\", 80));\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  private static void assertRouteActionIsCdsPolicy(Map<String, ?> action, String clusterName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12bd2946c9df06b0076feb0cb5bbd8c4727953bd"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY3ODAzNg==", "bodyText": "nit: delete this line.", "url": "https://github.com/grpc/grpc-java/pull/6837#discussion_r402678036", "createdAt": "2020-04-03T00:53:42Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsNameResolver.java", "diffHunk": "@@ -131,62 +137,165 @@ XdsClient createXdsClient() {\n     };\n     xdsClientPool = new RefCountedXdsClientObjectPool(xdsClientFactory);\n     xdsClient = xdsClientPool.getObject();\n-    xdsClient.watchConfigData(authority, new ConfigWatcher() {\n-      @Override\n-      public void onConfigChanged(ConfigUpdate update) {\n+    xdsClient.watchConfigData(authority, new ConfigWatcherImpl(listener));\n+  }\n+\n+  private class ConfigWatcherImpl implements ConfigWatcher {\n+\n+    final Listener2 listener;\n+\n+    ConfigWatcherImpl(Listener2 listener) {\n+      this.listener = listener;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void onConfigChanged(ConfigUpdate update) {\n+      Map<String, ?> rawLbConfig;\n+      if (update.getRoutes().size() > 1) {\n         logger.log(\n             XdsLogLevel.INFO,\n-            \"Received config update from xDS client {0}: cluster_name={1}\",\n-            xdsClient, update.getClusterName());\n-        String serviceConfig = \"{\\n\"\n-            + \"  \\\"loadBalancingConfig\\\": [\\n\"\n-            + \"    {\\n\"\n-            + \"      \\\"cds_experimental\\\": {\\n\"\n-            + \"        \\\"cluster\\\": \\\"\" + update.getClusterName() + \"\\\"\\n\"\n-            + \"      }\\n\"\n-            + \"    }\\n\"\n-            + \"  ]\\n\"\n-            + \"}\";\n-        Map<String, ?> config;\n-        try {\n-          config = (Map<String, ?>) JsonParser.parse(serviceConfig);\n-        } catch (IOException e) {\n-          listener.onError(\n-              Status.UNKNOWN.withDescription(\"Invalid service config\").withCause(e));\n-          return;\n+            \"Received config update with {0} routes from xDS client {1}\",\n+            update.getRoutes().size(),\n+            xdsClient);\n+        rawLbConfig = generateXdsRoutingRawConfig(update.getRoutes());\n+      } else {\n+        Route defaultRoute = Iterables.getOnlyElement(update.getRoutes());\n+        String clusterName = defaultRoute.getRouteAction().getCluster();\n+        if (!clusterName.isEmpty()) {\n+          logger.log(\n+              XdsLogLevel.INFO,\n+              \"Received config update from xDS client {0}: cluster_name={1}\",\n+              xdsClient,\n+              clusterName);\n+          rawLbConfig = generateCdsRawConfig(clusterName);\n+        } else {\n+          logger.log(\n+              XdsLogLevel.INFO,\n+              \"Received config update with one weighted cluster route from xDS client {0}\",\n+              xdsClient);\n+          List<ClusterWeight> clusterWeights = defaultRoute.getRouteAction().getWeightedCluster();\n+          rawLbConfig = generateWeightedTargetRawConfig(clusterWeights);\n         }\n-        logger.log(XdsLogLevel.INFO, \"Generated service config:\\n{0}\", serviceConfig);\n-        Attributes attrs =\n-            Attributes.newBuilder()\n-                .set(XdsAttributes.XDS_CLIENT_POOL, xdsClientPool)\n-                .build();\n-        ConfigOrError parsedServiceConfig = serviceConfigParser.parseServiceConfig(config);\n-        ResolutionResult result =\n-            ResolutionResult.newBuilder()\n-                .setAddresses(ImmutableList.<EquivalentAddressGroup>of())\n-                .setAttributes(attrs)\n-                .setServiceConfig(parsedServiceConfig)\n-                .build();\n-        listener.onResult(result);\n       }\n \n-      @Override\n-      public void onError(Status error) {\n-        // In order to distinguish between IO error and resource not found, which trigger\n-        // different handling, return an empty resolution result to channel for resource not\n-        // found.\n-        // TODO(chengyuanzhang): Returning an empty resolution result based on status code is\n-        //  a temporary solution. More design discussion needs to be done.\n-        if (error.getCode().equals(Code.NOT_FOUND)) {\n-          logger.log(\n-              XdsLogLevel.WARNING,\n-              \"Received error from xDS client {0}: {1}\", xdsClient, error.getDescription());\n-          listener.onResult(ResolutionResult.newBuilder().build());\n-          return;\n+      Map<String, ?> serviceConfig =\n+          ImmutableMap.of(\"loadBalancingConfig\", ImmutableList.of(rawLbConfig));\n+      if (logger.isLoggable(XdsLogLevel.INFO)) {\n+        logger.log(\n+            XdsLogLevel.INFO,\n+            \"Generated service config:\\n{0}\",\n+            new Gson().toJson(serviceConfig));\n+      }\n+\n+      Attributes attrs =\n+          Attributes.newBuilder()\n+              .set(XdsAttributes.XDS_CLIENT_POOL, xdsClientPool)\n+              .build();\n+      ConfigOrError parsedServiceConfig = serviceConfigParser.parseServiceConfig(serviceConfig);\n+      ResolutionResult result =\n+          ResolutionResult.newBuilder()\n+              .setAddresses(ImmutableList.<EquivalentAddressGroup>of())\n+              .setAttributes(attrs)\n+              .setServiceConfig(parsedServiceConfig)\n+              .build();\n+      listener.onResult(result);\n+    }\n+\n+    @Override\n+    public void onError(Status error) {\n+      // In order to distinguish between IO error and resource not found, which trigger\n+      // different handling, return an empty resolution result to channel for resource not\n+      // found.\n+      // TODO(chengyuanzhang): Returning an empty resolution result based on status code is\n+      //  a temporary solution. More design discussion needs to be done.\n+      if (error.getCode().equals(Code.NOT_FOUND)) {\n+        logger.log(\n+            XdsLogLevel.WARNING,\n+            \"Received error from xDS client {0}: {1}\", xdsClient, error.getDescription());\n+        listener.onResult(ResolutionResult.newBuilder().build());\n+        return;\n+      }\n+      listener.onError(Status.UNAVAILABLE.withDescription(error.getDescription()));\n+    }\n+  }\n+\n+  private static Map<String, ?> generateXdsRoutingRawConfig(List<Route> routesUpdate) {\n+    List<Object> routes = new ArrayList<>(routesUpdate.size());\n+    Map<String, Object> actions = new LinkedHashMap<>();\n+    Map<RouteAction, String> exitingActions = new HashMap<>();\n+    for (Route route : routesUpdate) {\n+      String service = \"\";\n+      String method = \"\";\n+      String prefix = route.getRouteMatch().getPrefix();\n+      String path = route.getRouteMatch().getPath();\n+      if (!prefix.isEmpty()) {\n+        service = prefix.substring(1, prefix.length() - 1);\n+      } else if (!path.isEmpty()) {\n+        int splitIndex = path.lastIndexOf('/');\n+        service = path.substring(1, splitIndex);\n+        method = path.substring(splitIndex + 1);\n+      }\n+      Map<String, String> methodName = ImmutableMap.of(\"service\", service, \"method\", method);\n+      String actionName;\n+      RouteAction routeAction = route.getRouteAction();\n+      Map<String, ?> actionPolicy;\n+      if (exitingActions.containsKey(routeAction)) {\n+        actionName = exitingActions.get(routeAction);\n+      } else {\n+        if (!routeAction.getCluster().isEmpty()) {\n+          actionName = \"cds:\" + routeAction.getCluster();\n+          actionPolicy = generateCdsRawConfig(routeAction.getCluster());\n+        } else {\n+          StringBuilder sb = new StringBuilder(\"weighted:\");\n+          List<ClusterWeight> clusterWeights = routeAction.getWeightedCluster();\n+          for (ClusterWeight clusterWeight : clusterWeights) {\n+            sb.append(clusterWeight.getName()).append('_');\n+          }\n+\n+          sb.append(routeAction.hashCode());\n+          actionName = sb.toString();\n+          if (actions.containsKey(actionName)) {\n+            // Just in case of hash collision, append exitingActions.size() to make actionName\n+            // unique. However, in case of collision, when new ConfigUpdate is received, actions\n+            // and actionNames might be associated differently from the previous update, but it\n+            // is just suboptimal and won't cause a problem.\n+            actionName = actionName + \"_\" + exitingActions.size();\n+          }\n+          actionPolicy = generateWeightedTargetRawConfig(clusterWeights);\n         }\n-        listener.onError(Status.UNAVAILABLE.withDescription(error.getDescription()));\n+        exitingActions.put(routeAction, actionName);\n+        List<?> childPolicies = ImmutableList.of(actionPolicy);\n+        actions.put(actionName, ImmutableMap.of(\"childPolicy\", childPolicies));\n       }\n-    });\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12bd2946c9df06b0076feb0cb5bbd8c4727953bd"}, "originalPosition": 231}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ec07ca3b09022b454045a90b7f0ceeb783ef57d", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/1ec07ca3b09022b454045a90b7f0ceeb783ef57d", "committedDate": "2020-04-03T16:49:19Z", "message": "remove empty line"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d8b4ba68075e26d0665cf94e2ff529f52b7b1a5", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/0d8b4ba68075e26d0665cf94e2ff529f52b7b1a5", "committedDate": "2020-04-03T17:01:54Z", "message": "rename to assertCdsPolicy()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NDUwMDcw", "url": "https://github.com/grpc/grpc-java/pull/6837#pullrequestreview-387450070", "createdAt": "2020-04-03T17:32:10Z", "commit": {"oid": "0d8b4ba68075e26d0665cf94e2ff529f52b7b1a5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNzozMjoxMFrOGAf5ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNzozMjoxMFrOGAf5ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE3NTgxOA==", "bodyText": "nit: same for the change above. Name this to assertWeightedTargetPolicy.", "url": "https://github.com/grpc/grpc-java/pull/6837#discussion_r403175818", "createdAt": "2020-04-03T17:32:10Z", "author": {"login": "voidzcy"}, "path": "xds/src/test/java/io/grpc/xds/XdsNameResolverTest.java", "diffHunk": "@@ -330,6 +341,182 @@ public void resolve_resourceUpdated() {\n     assertThat(rawConfigValues).containsExactly(\"cluster\", \"cluster-blade.googleapis.com\");\n   }\n \n+  @Test\n+  @SuppressWarnings(\"unchecked\")\n+  public void resolve_resourceUpdated_multipleRoutes() {\n+    XdsClientImpl.enablePathMatching = true;\n+    xdsNameResolver.start(mockListener);\n+    assertThat(responseObservers).hasSize(1);\n+    StreamObserver<DiscoveryResponse> responseObserver = responseObservers.poll();\n+\n+    // Simulate receiving an LDS response that contains routes resolution directly in-line.\n+    List<Route> protoRoutes =\n+        ImmutableList.of(\n+            // path match, routed to cluster\n+            Route.newBuilder()\n+                .setMatch(buildPathMatch(\"fooSvc\", \"hello\"))\n+                .setRoute(buildClusterRoute(\"cluster-hello.googleapis.com\"))\n+                .build(),\n+            // prefix match, routed to cluster\n+            Route.newBuilder()\n+                .setMatch(buildPrefixMatch(\"fooSvc\"))\n+                .setRoute(buildClusterRoute(\"cluster-foo.googleapis.com\"))\n+                .build(),\n+            // path match, routed to weighted clusters\n+            Route.newBuilder()\n+                .setMatch(buildPathMatch(\"barSvc\", \"hello\"))\n+                .setRoute(buildWeightedClusterRoute(ImmutableMap.of(\n+                    \"cluster-hello.googleapis.com\", 40,  \"cluster-hello2.googleapis.com\", 60)))\n+                .build(),\n+            // prefix match, routed to weighted clusters\n+            Route.newBuilder()\n+                .setMatch(buildPrefixMatch(\"barSvc\"))\n+                .setRoute(\n+                    buildWeightedClusterRoute(\n+                        ImmutableMap.of(\n+                            \"cluster-bar.googleapis.com\", 30, \"cluster-bar2.googleapis.com\", 70)))\n+                .build(),\n+            // default, routed to cluster\n+            Route.newBuilder()\n+                .setRoute(buildClusterRoute(\"cluster-hello.googleapis.com\"))\n+                .build());\n+    HttpConnectionManager httpConnectionManager =\n+        HttpConnectionManager.newBuilder()\n+            .setRouteConfig(\n+                buildRouteConfiguration(\n+                    \"route-foo.googleapis.com\", // doesn't matter\n+                    ImmutableList.of(buildVirtualHostForRoutes(AUTHORITY, protoRoutes))))\n+            .build();\n+    List<Any> listeners =\n+        ImmutableList.of(Any.pack(buildListener(AUTHORITY, Any.pack(httpConnectionManager))));\n+    responseObserver.onNext(\n+        buildDiscoveryResponse(\"0\", listeners, XdsClientImpl.ADS_TYPE_URL_LDS,  \"0000\"));\n+\n+    ArgumentCaptor<ResolutionResult> resolutionResultCaptor = ArgumentCaptor.forClass(null);\n+    verify(mockListener).onResult(resolutionResultCaptor.capture());\n+    ResolutionResult result = resolutionResultCaptor.getValue();\n+    assertThat(result.getAddresses()).isEmpty();\n+    Map<String, ?> serviceConfig = (Map<String, ?>) result.getServiceConfig().getConfig();\n+\n+    List<Map<String, ?>> rawLbConfigs =\n+        (List<Map<String, ?>>) serviceConfig.get(\"loadBalancingConfig\");\n+    Map<String, ?> lbConfig = Iterables.getOnlyElement(rawLbConfigs);\n+    assertThat(lbConfig.keySet()).containsExactly(\"xds_routing_experimental\");\n+    Map<String, ?> rawConfigValues = (Map<String, ?>) lbConfig.get(\"xds_routing_experimental\");\n+    assertThat(rawConfigValues.keySet()).containsExactly(\"action\", \"route\");\n+    Map<String, Map<String, ?>> actions =\n+        (Map<String, Map<String, ?>>) rawConfigValues.get(\"action\");\n+    List<Map<String, ?>> routes = (List<Map<String, ?>>) rawConfigValues.get(\"route\");\n+    assertThat(routes).hasSize(5);\n+    for (Map<String, ?> route : routes) {\n+      assertThat(route.keySet()).containsExactly(\"methodName\", \"action\");\n+    }\n+    assertThat((Map<String, ?>) routes.get(0).get(\"methodName\"))\n+        .containsExactly(\"service\", \"fooSvc\", \"method\", \"hello\");\n+    String action0 = (String) routes.get(0).get(\"action\");\n+    assertThat((Map<String, ?>) routes.get(1).get(\"methodName\"))\n+        .containsExactly(\"service\", \"fooSvc\", \"method\", \"\");\n+    String action1 = (String) routes.get(1).get(\"action\");\n+    assertThat((Map<String, ?>) routes.get(2).get(\"methodName\"))\n+        .containsExactly(\"service\", \"barSvc\", \"method\", \"hello\");\n+    String action2 = (String) routes.get(2).get(\"action\");\n+    assertThat((Map<String, ?>) routes.get(3).get(\"methodName\"))\n+        .containsExactly(\"service\", \"barSvc\", \"method\", \"\");\n+    String action3 = (String) routes.get(3).get(\"action\");\n+    assertThat((Map<String, ?>) routes.get(4).get(\"methodName\"))\n+        .containsExactly(\"service\", \"\", \"method\", \"\");\n+    String action4 = (String) routes.get(4).get(\"action\");\n+    assertCdsPolicy(actions.get(action0), \"cluster-hello.googleapis.com\");\n+    assertCdsPolicy(actions.get(action1), \"cluster-foo.googleapis.com\");\n+    assertRouteActionIsWeightedTargetPolicy(\n+        actions.get(action2),\n+        ImmutableMap.of(\n+            \"cluster-hello.googleapis.com\", 40,  \"cluster-hello2.googleapis.com\", 60));\n+    assertRouteActionIsWeightedTargetPolicy(\n+        actions.get(action3),\n+        ImmutableMap.of(\n+            \"cluster-bar.googleapis.com\", 30, \"cluster-bar2.googleapis.com\", 70));\n+    assertThat(action4).isEqualTo(action0);\n+\n+    // Simulate receiving another LDS response that tells client to do RDS.\n+    String routeConfigName = \"route-foo.googleapis.com\";\n+    responseObserver.onNext(\n+        buildLdsResponseForRdsResource(\"1\", AUTHORITY, routeConfigName, \"0001\"));\n+\n+    // Client sent an RDS request for resource \"route-foo.googleapis.com\" (Omitted in this test).\n+\n+    // Simulate receiving an RDS response that contains the resource \"route-foo.googleapis.com\"\n+    // with a route resolution for a single weighted cluster route.\n+    Route weightedClustersDefaultRoute =\n+        Route.newBuilder()\n+            .setRoute(buildWeightedClusterRoute(\n+                ImmutableMap.of(\n+                    \"cluster-foo.googleapis.com\", 20, \"cluster-bar.googleapis.com\", 80)))\n+            .build();\n+    List<Any> routeConfigs = ImmutableList.of(\n+        Any.pack(\n+            buildRouteConfiguration(\n+                routeConfigName,\n+                ImmutableList.of(\n+                    buildVirtualHostForRoutes(\n+                        AUTHORITY, ImmutableList.of(weightedClustersDefaultRoute))))));\n+    responseObserver.onNext(\n+        buildDiscoveryResponse(\"0\", routeConfigs, XdsClientImpl.ADS_TYPE_URL_RDS, \"0000\"));\n+\n+    verify(mockListener, times(2)).onResult(resolutionResultCaptor.capture());\n+    result = resolutionResultCaptor.getValue();\n+    assertThat(result.getAddresses()).isEmpty();\n+    serviceConfig = (Map<String, ?>) result.getServiceConfig().getConfig();\n+    rawLbConfigs = (List<Map<String, ?>>) serviceConfig.get(\"loadBalancingConfig\");\n+    lbConfig = Iterables.getOnlyElement(rawLbConfigs);\n+    assertThat(lbConfig.keySet()).containsExactly(WEIGHTED_TARGET_POLICY_NAME);\n+    rawConfigValues = (Map<String, ?>) lbConfig.get(WEIGHTED_TARGET_POLICY_NAME);\n+    assertWeightedTargetConfigClusterWeights(\n+        rawConfigValues,\n+        ImmutableMap.of(\n+            \"cluster-foo.googleapis.com\", 20, \"cluster-bar.googleapis.com\", 80));\n+  }\n+\n+  /** Asserts that the given action contains a single CDS policy with the given cluster name. */\n+  @SuppressWarnings(\"unchecked\")\n+  private static void assertCdsPolicy(Map<String, ?> action, String clusterName) {\n+    assertThat(action.keySet()).containsExactly(\"childPolicy\");\n+    Map<String, ?> lbConfig =\n+        Iterables.getOnlyElement((List<Map<String, ?>>) action.get(\"childPolicy\"));\n+    assertThat(lbConfig.keySet()).containsExactly(CDS_POLICY_NAME);\n+    Map<String, ?> rawConfigValues = (Map<String, ?>) lbConfig.get(CDS_POLICY_NAME);\n+    assertThat(rawConfigValues).containsExactly(\"cluster\", clusterName);\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  private static void assertRouteActionIsWeightedTargetPolicy(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d8b4ba68075e26d0665cf94e2ff529f52b7b1a5"}, "originalPosition": 189}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a00ff60419b484f81e2e736a7186f41fee92915d", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/a00ff60419b484f81e2e736a7186f41fee92915d", "committedDate": "2020-04-03T18:15:11Z", "message": "rename to assertWeightedTargetPolicy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NDk3MDQy", "url": "https://github.com/grpc/grpc-java/pull/6837#pullrequestreview-387497042", "createdAt": "2020-04-03T18:43:01Z", "commit": {"oid": "a00ff60419b484f81e2e736a7186f41fee92915d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4472, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}