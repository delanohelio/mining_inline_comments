{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyMjUyNjQy", "number": 6998, "title": "rls: add rls-exprimnetal LoadBalancer", "bodyText": "", "createdAt": "2020-05-01T18:49:58Z", "url": "https://github.com/grpc/grpc-java/pull/6998", "merged": true, "mergeCommit": {"oid": "f40af886e993a101193d181ba06010b036362425"}, "closed": true, "closedAt": "2020-05-05T01:05:19Z", "author": {"login": "creamsoup"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcdGYtFAH2gAyNDEyMjUyNjQyOjA0YmZjOWVlY2M2YTAyYjFjNjk5NzcxYjNmNmE1OTYxMzg2ZGUxNDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABceJLSUgH2gAyNDEyMjUyNjQyOjVhZTE0YTMzZTA3Mjc3ZDliZWU5OTg4ODUyYjEwMGJkZDFmMWJkN2M=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "04bfc9eecc6a02b1c699771b3f6a5961386de148", "author": {"user": {"login": "creamsoup", "name": "Jihun Cho"}}, "url": "https://github.com/grpc/grpc-java/commit/04bfc9eecc6a02b1c699771b3f6a5961386de148", "committedDate": "2020-05-01T18:56:18Z", "message": "rls: add rls-exprimnetal LoadBalancer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8a21435937dd6f7e60d837a30d83e1b8a58356d", "author": {"user": {"login": "creamsoup", "name": "Jihun Cho"}}, "url": "https://github.com/grpc/grpc-java/commit/d8a21435937dd6f7e60d837a30d83e1b8a58356d", "committedDate": "2020-05-01T19:09:26Z", "message": "Merge remote-tracking branch 'upstream/master' into rls_exp_lb"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ddd258dd98fbbed2d4c5c5f957149500336ef97", "author": {"user": {"login": "creamsoup", "name": "Jihun Cho"}}, "url": "https://github.com/grpc/grpc-java/commit/8ddd258dd98fbbed2d4c5c5f957149500336ef97", "committedDate": "2020-05-01T19:15:06Z", "message": "update todo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "069b38de694554ddf92e9c1ea38aa2f0ca31734f", "author": {"user": {"login": "creamsoup", "name": "Jihun Cho"}}, "url": "https://github.com/grpc/grpc-java/commit/069b38de694554ddf92e9c1ea38aa2f0ca31734f", "committedDate": "2020-05-04T08:07:03Z", "message": "add test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NDE2NTE5", "url": "https://github.com/grpc/grpc-java/pull/6998#pullrequestreview-405416519", "createdAt": "2020-05-04T23:33:40Z", "commit": {"oid": "069b38de694554ddf92e9c1ea38aa2f0ca31734f"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMzozMzo0MFrOGQV2qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMzozOTozOVrOGQV9gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4ODQ1Ng==", "bodyText": "Is it possible that lbPolicyConfiguration  == null? If possible, is no-op the right behavior in that case?", "url": "https://github.com/grpc/grpc-java/pull/6998#discussion_r419788456", "createdAt": "2020-05-04T23:33:40Z", "author": {"login": "dapengzhang0"}, "path": "rls/src/main/java/io/grpc/rls/RlsLoadBalancer.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.base.MoreObjects;\n+import io.grpc.ChannelLogger.ChannelLogLevel;\n+import io.grpc.ConnectivityState;\n+import io.grpc.LoadBalancer;\n+import io.grpc.Status;\n+import io.grpc.rls.internal.AdaptiveThrottler;\n+import io.grpc.rls.internal.CachingRlsLbClient;\n+import io.grpc.rls.internal.ChildLbResolvedAddressFactory;\n+import io.grpc.rls.internal.LbPolicyConfiguration;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Implementation of {@link LoadBalancer} backed by route lookup service.\n+ */\n+final class RlsLoadBalancer extends LoadBalancer {\n+\n+  private final Helper helper;\n+  @Nullable\n+  private LbPolicyConfiguration lbPolicyConfiguration;\n+  @Nullable\n+  private CachingRlsLbClient routeLookupClient;\n+\n+  RlsLoadBalancer(Helper helper) {\n+    this.helper = checkNotNull(helper, \"helper\");\n+  }\n+\n+  @Override\n+  public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n+    LbPolicyConfiguration lbPolicyConfiguration =\n+        (LbPolicyConfiguration) resolvedAddresses.getLoadBalancingPolicyConfig();\n+    if (lbPolicyConfiguration != null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "069b38de694554ddf92e9c1ea38aa2f0ca31734f"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4OTI2MQ==", "bodyText": "Include error.", "url": "https://github.com/grpc/grpc-java/pull/6998#discussion_r419789261", "createdAt": "2020-05-04T23:36:21Z", "author": {"login": "dapengzhang0"}, "path": "rls/src/main/java/io/grpc/rls/RlsLoadBalancer.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.base.MoreObjects;\n+import io.grpc.ChannelLogger.ChannelLogLevel;\n+import io.grpc.ConnectivityState;\n+import io.grpc.LoadBalancer;\n+import io.grpc.Status;\n+import io.grpc.rls.internal.AdaptiveThrottler;\n+import io.grpc.rls.internal.CachingRlsLbClient;\n+import io.grpc.rls.internal.ChildLbResolvedAddressFactory;\n+import io.grpc.rls.internal.LbPolicyConfiguration;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Implementation of {@link LoadBalancer} backed by route lookup service.\n+ */\n+final class RlsLoadBalancer extends LoadBalancer {\n+\n+  private final Helper helper;\n+  @Nullable\n+  private LbPolicyConfiguration lbPolicyConfiguration;\n+  @Nullable\n+  private CachingRlsLbClient routeLookupClient;\n+\n+  RlsLoadBalancer(Helper helper) {\n+    this.helper = checkNotNull(helper, \"helper\");\n+  }\n+\n+  @Override\n+  public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n+    LbPolicyConfiguration lbPolicyConfiguration =\n+        (LbPolicyConfiguration) resolvedAddresses.getLoadBalancingPolicyConfig();\n+    if (lbPolicyConfiguration != null\n+        && !lbPolicyConfiguration.equals(this.lbPolicyConfiguration)) {\n+      boolean needToConnect = this.lbPolicyConfiguration == null\n+          || !this.lbPolicyConfiguration.getRouteLookupConfig().getLookupService().equals(\n+          lbPolicyConfiguration.getRouteLookupConfig().getLookupService());\n+      if (needToConnect) {\n+        if (routeLookupClient != null) {\n+          routeLookupClient.close();\n+        }\n+        routeLookupClient = CachingRlsLbClient.newBuilder()\n+            .setHelper(helper)\n+            .setLbPolicyConfig(lbPolicyConfiguration)\n+            .setThrottler(AdaptiveThrottler.builder().build())\n+            .setResolvedAddressesFactory(\n+                new ChildLbResolvedAddressFactory(\n+                    resolvedAddresses.getAddresses(), resolvedAddresses.getAttributes()))\n+            .build();\n+      }\n+      // TODO(creamsoup) allow incremental service config update. for initial use case, it is \n+      //  not required.\n+      this.lbPolicyConfiguration = lbPolicyConfiguration;\n+      helper.getChannelLogger()\n+          .log(ChannelLogLevel.INFO, \"LbPolicyConfiguration updated to {0}\", lbPolicyConfiguration);\n+    }\n+  }\n+\n+  @Override\n+  public void requestConnection() {\n+    routeLookupClient.requestConnection();\n+  }\n+\n+  @Override\n+  public void handleNameResolutionError(final Status error) {\n+    class ErrorPicker extends SubchannelPicker {\n+      @Override\n+      public PickResult pickSubchannel(PickSubchannelArgs args) {\n+        return PickResult.withError(error);\n+      }\n+\n+      @Override\n+      public String toString() {\n+        return MoreObjects.toStringHelper(this).toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "069b38de694554ddf92e9c1ea38aa2f0ca31734f"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc5MDIxMQ==", "bodyText": "Probably will see lint warnings for using LinkedList rather than ArrayDequeue when import.", "url": "https://github.com/grpc/grpc-java/pull/6998#discussion_r419790211", "createdAt": "2020-05-04T23:39:39Z", "author": {"login": "dapengzhang0"}, "path": "rls/src/test/java/io/grpc/rls/internal/RlsLoadBalancerTest.java", "diffHunk": "@@ -0,0 +1,578 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls.internal;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.CALLS_REAL_METHODS;\n+import static org.mockito.Mockito.inOrder;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+import com.google.common.base.Converter;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.util.concurrent.SettableFuture;\n+import io.grpc.Attributes;\n+import io.grpc.CallOptions;\n+import io.grpc.ChannelLogger;\n+import io.grpc.ConnectivityState;\n+import io.grpc.ConnectivityStateInfo;\n+import io.grpc.EquivalentAddressGroup;\n+import io.grpc.LoadBalancer;\n+import io.grpc.LoadBalancer.CreateSubchannelArgs;\n+import io.grpc.LoadBalancer.Helper;\n+import io.grpc.LoadBalancer.PickResult;\n+import io.grpc.LoadBalancer.ResolvedAddresses;\n+import io.grpc.LoadBalancer.Subchannel;\n+import io.grpc.LoadBalancer.SubchannelPicker;\n+import io.grpc.LoadBalancer.SubchannelStateListener;\n+import io.grpc.ManagedChannel;\n+import io.grpc.Metadata;\n+import io.grpc.MethodDescriptor;\n+import io.grpc.MethodDescriptor.Marshaller;\n+import io.grpc.MethodDescriptor.MethodType;\n+import io.grpc.NameResolver.ConfigOrError;\n+import io.grpc.NameResolver.Factory;\n+import io.grpc.Status;\n+import io.grpc.SynchronizationContext;\n+import io.grpc.inprocess.InProcessChannelBuilder;\n+import io.grpc.inprocess.InProcessServerBuilder;\n+import io.grpc.internal.JsonParser;\n+import io.grpc.internal.PickSubchannelArgsImpl;\n+import io.grpc.lookup.v1.RouteLookupServiceGrpc;\n+import io.grpc.rls.RlsLoadBalancerProvider;\n+import io.grpc.rls.internal.CachingRlsLbClient.RlsPicker;\n+import io.grpc.rls.internal.RlsProtoConverters.RouteLookupResponseConverter;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupRequest;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupResponse;\n+import io.grpc.stub.StreamObserver;\n+import io.grpc.testing.GrpcCleanupRule;\n+import java.io.IOException;\n+import java.lang.Thread.UncaughtExceptionHandler;\n+import java.net.SocketAddress;\n+import java.util.Collections;\n+import java.util.Deque;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nonnull;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.AdditionalAnswers;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InOrder;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+\n+@RunWith(JUnit4.class)\n+public class RlsLoadBalancerTest {\n+\n+  @Rule\n+  public final GrpcCleanupRule grpcCleanupRule = new GrpcCleanupRule();\n+  @Rule\n+  public final MockitoRule mocks = MockitoJUnit.rule();\n+\n+  private final DoNotUseDirectScheduledExecutorService fakeScheduledExecutorService =\n+      mock(DoNotUseDirectScheduledExecutorService.class, CALLS_REAL_METHODS);\n+  private final SynchronizationContext syncContext =\n+      new SynchronizationContext(new UncaughtExceptionHandler() {\n+        @Override\n+        public void uncaughtException(Thread t, Throwable e) {\n+          throw new RuntimeException(e);\n+        }\n+      });\n+  private final Helper helper =\n+      mock(Helper.class, AdditionalAnswers.delegatesTo(new FakeHelper()));\n+  private final FakeRlsServerImpl fakeRlsServerImpl = new FakeRlsServerImpl();\n+  private final Deque<FakeSubchannel> subchannels = new LinkedList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "069b38de694554ddf92e9c1ea38aa2f0ca31734f"}, "originalPosition": 115}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ae14a33e07277d9bee9988852b100bdd1f1bd7c", "author": {"user": {"login": "creamsoup", "name": "Jihun Cho"}}, "url": "https://github.com/grpc/grpc-java/commit/5ae14a33e07277d9bee9988852b100bdd1f1bd7c", "committedDate": "2020-05-05T00:45:17Z", "message": "throw NPE when rls lb config is null, improve toString for ErrorPicker"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4376, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}