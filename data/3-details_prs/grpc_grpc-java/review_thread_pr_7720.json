{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2MzU5NDc2", "number": 7720, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxOTo1NjoyNVrOFEKGHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNzo0OTo0OVrOFGkf5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTA0MDI4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/grpc/internal/DelayedStream.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxOTo1NjoyNVrOIEJmkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxOTo1NjoyNVrOIEJmkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIyMjU0Ng==", "bodyText": "You don't need the check, can always count down.", "url": "https://github.com/grpc/grpc-java/pull/7720#discussion_r541222546", "createdAt": "2020-12-11T19:56:25Z", "author": {"login": "voidzcy"}, "path": "core/src/main/java/io/grpc/internal/DelayedStream.java", "diffHunk": "@@ -302,7 +325,11 @@ public void run() {\n         listenerToClose.closed(reason, new Metadata());\n       }\n       drainPendingCalls();\n+      if (!isStreamTransferCompleted()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fe3bcea1d62dba739e36ac730caad1a78769c97"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTA1MjU1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/grpc/internal/DelayedStream.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxOTo1ODozOFrOIEJuJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMzozOTo1NlrOIFxmTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIyNDQ4NQ==", "bodyText": "Where is this signal checked? Why interrupting the cancellation thread works?", "url": "https://github.com/grpc/grpc-java/pull/7720#discussion_r541224485", "createdAt": "2020-12-11T19:58:38Z", "author": {"login": "voidzcy"}, "path": "core/src/main/java/io/grpc/internal/DelayedStream.java", "diffHunk": "@@ -132,6 +135,24 @@ final void setStream(ClientStream stream) {\n     drainPendingCalls();\n   }\n \n+  protected boolean isStreamTransferCompleted() {\n+    return realStreamStarted.getCount() == 0;\n+  }\n+\n+  protected void awaitStreamTransferCompletion() {\n+    // Wait until accepted RPCs transfer to the real stream so that we can properly cancel or\n+    // shutdown. Not waiting for transfer completion may cause pending calls orphaned. #636.\n+    boolean delegationComplete;\n+    try {\n+      delegationComplete = realStreamStarted.await(5, TimeUnit.SECONDS);\n+    } catch (InterruptedException ex) {\n+      delegationComplete = false;\n+    }\n+    if (!delegationComplete) {\n+      Thread.currentThread().interrupt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fe3bcea1d62dba739e36ac730caad1a78769c97"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUzMTM1NA==", "bodyText": "To clarify this method is called at user cancel, shutdownNow() cancel, and reprocess once we detect shutdown() has been called. The interruption is handled no where, it will be propagated to the user(at ManagedChannelImpl main thread).\nThis path is only executed inside SyncContext where we only handle uncaught exceptions and put the channel into panic. And it looks like it is the only limited exception handling mechanism here at client side.\nI have been struggling when the failure handling here and am open for discussion. So I thought that either we have to enhance our exception propagation path, e.g. distinguish different exceptions and handle them at higher granularity. Before that, keeping it silent here looks generally inappropriate (today it is almost like that), so I interrupted the caller thread. The interruption can be handled at SyncContext, but then it seems better to propagate it out as well.", "url": "https://github.com/grpc/grpc-java/pull/7720#discussion_r542531354", "createdAt": "2020-12-14T16:40:14Z", "author": {"login": "YifeiZhuang"}, "path": "core/src/main/java/io/grpc/internal/DelayedStream.java", "diffHunk": "@@ -132,6 +135,24 @@ final void setStream(ClientStream stream) {\n     drainPendingCalls();\n   }\n \n+  protected boolean isStreamTransferCompleted() {\n+    return realStreamStarted.getCount() == 0;\n+  }\n+\n+  protected void awaitStreamTransferCompletion() {\n+    // Wait until accepted RPCs transfer to the real stream so that we can properly cancel or\n+    // shutdown. Not waiting for transfer completion may cause pending calls orphaned. #636.\n+    boolean delegationComplete;\n+    try {\n+      delegationComplete = realStreamStarted.await(5, TimeUnit.SECONDS);\n+    } catch (InterruptedException ex) {\n+      delegationComplete = false;\n+    }\n+    if (!delegationComplete) {\n+      Thread.currentThread().interrupt();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIyNDQ4NQ=="}, "originalCommit": {"oid": "1fe3bcea1d62dba739e36ac730caad1a78769c97"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY3NDAzNA==", "bodyText": "The interruption is handled no where, it will be propagated to the user(at ManagedChannelImpl main thread).\n\nIf the calling thread doesn't check its interrupted bit or isn't blocked on wait/join/sleep etc, it never knows. I don't think there is any case that this happens.\nI was expecting such an await to be somehow hooked up with Channel's awaitTermination(). That is, instead of doing synchronous wait, we use Future. Have you tried with that approach?", "url": "https://github.com/grpc/grpc-java/pull/7720#discussion_r542674034", "createdAt": "2020-12-14T19:21:19Z", "author": {"login": "voidzcy"}, "path": "core/src/main/java/io/grpc/internal/DelayedStream.java", "diffHunk": "@@ -132,6 +135,24 @@ final void setStream(ClientStream stream) {\n     drainPendingCalls();\n   }\n \n+  protected boolean isStreamTransferCompleted() {\n+    return realStreamStarted.getCount() == 0;\n+  }\n+\n+  protected void awaitStreamTransferCompletion() {\n+    // Wait until accepted RPCs transfer to the real stream so that we can properly cancel or\n+    // shutdown. Not waiting for transfer completion may cause pending calls orphaned. #636.\n+    boolean delegationComplete;\n+    try {\n+      delegationComplete = realStreamStarted.await(5, TimeUnit.SECONDS);\n+    } catch (InterruptedException ex) {\n+      delegationComplete = false;\n+    }\n+    if (!delegationComplete) {\n+      Thread.currentThread().interrupt();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIyNDQ4NQ=="}, "originalCommit": {"oid": "1fe3bcea1d62dba739e36ac730caad1a78769c97"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY4Njc0MQ==", "bodyText": "I was expecting such an await to be somehow hooked up with Channel's awaitTermination(). That is, instead of doing synchronous wait, we use Future. Have you tried with that approach?\n\nI think it's already like that: awaitTermination() will be waiting for awaitTransferCompletion() here. So once awaitTransferCompletion() is done, dealyedTransport will be reporting termination through listener to ManagedChannelImpl to do further shutdown routine. Here just we set a time bound to awaitTransferCompletion(), as I thought that we perhaps should not wait forever(e.g. customer never call start() so the transfer would never be done. theoretically this can happen, but it won't for now, as we control that in ClientCallImpl shortly after we create the stream). But waiting forever is also an option.", "url": "https://github.com/grpc/grpc-java/pull/7720#discussion_r542686741", "createdAt": "2020-12-14T19:32:23Z", "author": {"login": "YifeiZhuang"}, "path": "core/src/main/java/io/grpc/internal/DelayedStream.java", "diffHunk": "@@ -132,6 +135,24 @@ final void setStream(ClientStream stream) {\n     drainPendingCalls();\n   }\n \n+  protected boolean isStreamTransferCompleted() {\n+    return realStreamStarted.getCount() == 0;\n+  }\n+\n+  protected void awaitStreamTransferCompletion() {\n+    // Wait until accepted RPCs transfer to the real stream so that we can properly cancel or\n+    // shutdown. Not waiting for transfer completion may cause pending calls orphaned. #636.\n+    boolean delegationComplete;\n+    try {\n+      delegationComplete = realStreamStarted.await(5, TimeUnit.SECONDS);\n+    } catch (InterruptedException ex) {\n+      delegationComplete = false;\n+    }\n+    if (!delegationComplete) {\n+      Thread.currentThread().interrupt();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIyNDQ4NQ=="}, "originalCommit": {"oid": "1fe3bcea1d62dba739e36ac730caad1a78769c97"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgyNDA5OA==", "bodyText": "I think it's already like that: awaitTermination() will be waiting for awaitTransferCompletion() here.\n\nNow shutdownNow() may be synchronously waiting for awaitTransferCompletion() to complete. I don't think we want synchronous waits in the shutdown path. I am thinking of it'd be a callback for transfer completed (or cancelled), instead of a latch that needs to be waited on.", "url": "https://github.com/grpc/grpc-java/pull/7720#discussion_r542824098", "createdAt": "2020-12-14T21:41:24Z", "author": {"login": "voidzcy"}, "path": "core/src/main/java/io/grpc/internal/DelayedStream.java", "diffHunk": "@@ -132,6 +135,24 @@ final void setStream(ClientStream stream) {\n     drainPendingCalls();\n   }\n \n+  protected boolean isStreamTransferCompleted() {\n+    return realStreamStarted.getCount() == 0;\n+  }\n+\n+  protected void awaitStreamTransferCompletion() {\n+    // Wait until accepted RPCs transfer to the real stream so that we can properly cancel or\n+    // shutdown. Not waiting for transfer completion may cause pending calls orphaned. #636.\n+    boolean delegationComplete;\n+    try {\n+      delegationComplete = realStreamStarted.await(5, TimeUnit.SECONDS);\n+    } catch (InterruptedException ex) {\n+      delegationComplete = false;\n+    }\n+    if (!delegationComplete) {\n+      Thread.currentThread().interrupt();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIyNDQ4NQ=="}, "originalCommit": {"oid": "1fe3bcea1d62dba739e36ac730caad1a78769c97"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkyNjQxNA==", "bodyText": "Hm, potentially we can have settableFuture installed into delayedStream during reprocess() and then listen on the event when real stream started, and at the listener callback we check the shutdown status.", "url": "https://github.com/grpc/grpc-java/pull/7720#discussion_r542926414", "createdAt": "2020-12-14T23:39:56Z", "author": {"login": "YifeiZhuang"}, "path": "core/src/main/java/io/grpc/internal/DelayedStream.java", "diffHunk": "@@ -132,6 +135,24 @@ final void setStream(ClientStream stream) {\n     drainPendingCalls();\n   }\n \n+  protected boolean isStreamTransferCompleted() {\n+    return realStreamStarted.getCount() == 0;\n+  }\n+\n+  protected void awaitStreamTransferCompletion() {\n+    // Wait until accepted RPCs transfer to the real stream so that we can properly cancel or\n+    // shutdown. Not waiting for transfer completion may cause pending calls orphaned. #636.\n+    boolean delegationComplete;\n+    try {\n+      delegationComplete = realStreamStarted.await(5, TimeUnit.SECONDS);\n+    } catch (InterruptedException ex) {\n+      delegationComplete = false;\n+    }\n+    if (!delegationComplete) {\n+      Thread.currentThread().interrupt();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIyNDQ4NQ=="}, "originalCommit": {"oid": "1fe3bcea1d62dba739e36ac730caad1a78769c97"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTIxMjU5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/grpc/internal/DelayedStream.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMDoyNDoyMVrOIELUig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMzoxODoyMFrOIFxBJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI1MDY5OA==", "bodyText": "The wait seems useless here. If it is delegating to realStream, all pending calls should have already been drained (the delayOrExecute for realStream.cancel() several lines above might be misleading, it's actually always executed inline). So at this point, the transfer is guaranteed to be done.", "url": "https://github.com/grpc/grpc-java/pull/7720#discussion_r541250698", "createdAt": "2020-12-11T20:24:21Z", "author": {"login": "voidzcy"}, "path": "core/src/main/java/io/grpc/internal/DelayedStream.java", "diffHunk": "@@ -302,7 +325,11 @@ public void run() {\n         listenerToClose.closed(reason, new Metadata());\n       }\n       drainPendingCalls();\n+      if (!isStreamTransferCompleted()) {\n+        realStreamStarted.countDown();\n+      }\n     }\n+    awaitStreamTransferCompletion();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fe3bcea1d62dba739e36ac730caad1a78769c97"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUzODI1OQ==", "bodyText": "Hm, it seems not necessarily.\nIf the real stream is set, (L127) drainingPendingCall is not in sync path, so there is still some time window where the  delegation flag is set but the call not drained, i.e. start() not executed. So we await.\nAlso, in non delegation case, wait for noop count down should not hurt.", "url": "https://github.com/grpc/grpc-java/pull/7720#discussion_r542538259", "createdAt": "2020-12-14T16:48:49Z", "author": {"login": "YifeiZhuang"}, "path": "core/src/main/java/io/grpc/internal/DelayedStream.java", "diffHunk": "@@ -302,7 +325,11 @@ public void run() {\n         listenerToClose.closed(reason, new Metadata());\n       }\n       drainPendingCalls();\n+      if (!isStreamTransferCompleted()) {\n+        realStreamStarted.countDown();\n+      }\n     }\n+    awaitStreamTransferCompletion();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI1MDY5OA=="}, "originalCommit": {"oid": "1fe3bcea1d62dba739e36ac730caad1a78769c97"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY0NzYzMw==", "bodyText": "Oh, you are right. It may still be draining existing calls and the cancellation is added to the end, we need to wait.", "url": "https://github.com/grpc/grpc-java/pull/7720#discussion_r542647633", "createdAt": "2020-12-14T18:58:19Z", "author": {"login": "voidzcy"}, "path": "core/src/main/java/io/grpc/internal/DelayedStream.java", "diffHunk": "@@ -302,7 +325,11 @@ public void run() {\n         listenerToClose.closed(reason, new Metadata());\n       }\n       drainPendingCalls();\n+      if (!isStreamTransferCompleted()) {\n+        realStreamStarted.countDown();\n+      }\n     }\n+    awaitStreamTransferCompletion();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI1MDY5OA=="}, "originalCommit": {"oid": "1fe3bcea1d62dba739e36ac730caad1a78769c97"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgwMjc3NA==", "bodyText": "But still, cancel() itself doesn't need to be waiting on the transfer to complete, right?", "url": "https://github.com/grpc/grpc-java/pull/7720#discussion_r542802774", "createdAt": "2020-12-14T21:21:37Z", "author": {"login": "voidzcy"}, "path": "core/src/main/java/io/grpc/internal/DelayedStream.java", "diffHunk": "@@ -302,7 +325,11 @@ public void run() {\n         listenerToClose.closed(reason, new Metadata());\n       }\n       drainPendingCalls();\n+      if (!isStreamTransferCompleted()) {\n+        realStreamStarted.countDown();\n+      }\n     }\n+    awaitStreamTransferCompletion();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI1MDY5OA=="}, "originalCommit": {"oid": "1fe3bcea1d62dba739e36ac730caad1a78769c97"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkxNjkwMQ==", "bodyText": "Good catch, it seems can be remove here. Because normally cancel() should not be waiting for transfer to complete. And when the last item was cancelled, I already checked the shutdown status in the subclass and would call awaitStreamTransferCompletion() for termination.", "url": "https://github.com/grpc/grpc-java/pull/7720#discussion_r542916901", "createdAt": "2020-12-14T23:18:20Z", "author": {"login": "YifeiZhuang"}, "path": "core/src/main/java/io/grpc/internal/DelayedStream.java", "diffHunk": "@@ -302,7 +325,11 @@ public void run() {\n         listenerToClose.closed(reason, new Metadata());\n       }\n       drainPendingCalls();\n+      if (!isStreamTransferCompleted()) {\n+        realStreamStarted.countDown();\n+      }\n     }\n+    awaitStreamTransferCompletion();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI1MDY5OA=="}, "originalCommit": {"oid": "1fe3bcea1d62dba739e36ac730caad1a78769c97"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTI1MjYyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/grpc/internal/DelayedClientTransport.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMDozMTowN1rOIELuBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMTozMzoyNlrOIFq2Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI1NzIyMQ==", "bodyText": "nit: public is redundant and this should be @VisibleForTesting .\nBut since there is already a getUncommittedStreamsCount() for testing, I don't think this method is useful anymore. All invocations to this method are already holding the lock and calling !toCheckCompletionStreams.isEmpty() is equally concise as calling this method.", "url": "https://github.com/grpc/grpc-java/pull/7720#discussion_r541257221", "createdAt": "2020-12-11T20:31:07Z", "author": {"login": "voidzcy"}, "path": "core/src/main/java/io/grpc/internal/DelayedClientTransport.java", "diffHunk": "@@ -252,13 +277,26 @@ public final boolean hasPendingStreams() {\n     }\n   }\n \n+  public final boolean hasUncommittedStreams() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fe3bcea1d62dba739e36ac730caad1a78769c97"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc4MDkwMQ==", "bodyText": "Thanks. Actually get count is test only @visibleForTesting, but check emptiness is used in several places in the code path in a few methods and as a short version of the previous to make the code more concise.", "url": "https://github.com/grpc/grpc-java/pull/7720#discussion_r542780901", "createdAt": "2020-12-14T21:01:10Z", "author": {"login": "YifeiZhuang"}, "path": "core/src/main/java/io/grpc/internal/DelayedClientTransport.java", "diffHunk": "@@ -252,13 +277,26 @@ public final boolean hasPendingStreams() {\n     }\n   }\n \n+  public final boolean hasUncommittedStreams() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI1NzIyMQ=="}, "originalCommit": {"oid": "1fe3bcea1d62dba739e36ac730caad1a78769c97"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgxNTc2Mg==", "bodyText": "I mean it should be private or eliminated (if use !toCheckCompletionStreams.isEmpty() directly, which is less verbose IMO).", "url": "https://github.com/grpc/grpc-java/pull/7720#discussion_r542815762", "createdAt": "2020-12-14T21:33:26Z", "author": {"login": "voidzcy"}, "path": "core/src/main/java/io/grpc/internal/DelayedClientTransport.java", "diffHunk": "@@ -252,13 +277,26 @@ public final boolean hasPendingStreams() {\n     }\n   }\n \n+  public final boolean hasUncommittedStreams() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI1NzIyMQ=="}, "originalCommit": {"oid": "1fe3bcea1d62dba739e36ac730caad1a78769c97"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTMzMTg1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/grpc/internal/DelayedClientTransport.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMDo0NDoyNFrOIEMexQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMDo0NDoyNFrOIEMexQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI2OTcwMQ==", "bodyText": "May not want to make excessive changes.", "url": "https://github.com/grpc/grpc-java/pull/7720#discussion_r541269701", "createdAt": "2020-12-11T20:44:24Z", "author": {"login": "voidzcy"}, "path": "core/src/main/java/io/grpc/internal/DelayedClientTransport.java", "diffHunk": "@@ -322,9 +373,10 @@ public void run() {\n         // transport starting streams and setting in-use state.  During the gap the whole channel's\n         // in-use state may be false. However, it shouldn't cause spurious switching to idleness\n         // (which would shutdown the transports and LoadBalancer) because the gap should be shorter\n-        // than IDLE_MODE_DEFAULT_TIMEOUT_MILLIS (1 second).\n+        // than IDLE_MODE_DEFAULT_TIMEOUT_MILLIS (30 millis).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fe3bcea1d62dba739e36ac730caad1a78769c97"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTE3NDgzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/grpc/internal/DelayedClientTransport.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODoyMTozNlrOIFeEwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODoyMTozNlrOIFeEwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYwNjUyOQ==", "bodyText": "Make it final?", "url": "https://github.com/grpc/grpc-java/pull/7720#discussion_r542606529", "createdAt": "2020-12-14T18:21:36Z", "author": {"login": "dapengzhang0"}, "path": "core/src/main/java/io/grpc/internal/DelayedClientTransport.java", "diffHunk": "@@ -66,6 +66,23 @@\n   @Nonnull\n   @GuardedBy(\"lock\")\n   private Collection<PendingStream> pendingStreams = new LinkedHashSet<>();\n+  @GuardedBy(\"lock\")\n+  private Collection<PendingStream> toCheckCompletionStreams = new LinkedHashSet<>();\n+  private Runnable pollForStreamTransferCompletion = new Runnable() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb188611d789c2fc0cdb7a6caa7dfbc4a6010e91"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTM0MzI3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/grpc/internal/DelayedStream.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODo0NjoxMlrOIFfu5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODo0NjoxMlrOIFfu5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYzMzcwMg==", "bodyText": "Note that getCount() is typically used for debugging and testing purposes. https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/CountDownLatch.html#getCount()\nBetter avoid it in the main source if possible.", "url": "https://github.com/grpc/grpc-java/pull/7720#discussion_r542633702", "createdAt": "2020-12-14T18:46:12Z", "author": {"login": "dapengzhang0"}, "path": "core/src/main/java/io/grpc/internal/DelayedStream.java", "diffHunk": "@@ -132,6 +135,24 @@ final void setStream(ClientStream stream) {\n     drainPendingCalls();\n   }\n \n+  protected boolean isStreamTransferCompleted() {\n+    return realStreamStarted.getCount() == 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb188611d789c2fc0cdb7a6caa7dfbc4a6010e91"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTQ4ODE3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/grpc/internal/DelayedClientTransport.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOTowNTo1N1rOIFhKMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOTowNTo1N1rOIFhKMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY1NzA3Mg==", "bodyText": "I would prefer making toCheckCompletionStreams be either 'non-final and immutable' or 'final and mutable', but not 'non-final' and 'mutable'.", "url": "https://github.com/grpc/grpc-java/pull/7720#discussion_r542657072", "createdAt": "2020-12-14T19:05:57Z", "author": {"login": "dapengzhang0"}, "path": "core/src/main/java/io/grpc/internal/DelayedClientTransport.java", "diffHunk": "@@ -270,48 +308,61 @@ final int getPendingStreamsCount() {\n    * <p>This method <strong>must not</strong> be called concurrently with itself.\n    */\n   final void reprocess(@Nullable SubchannelPicker picker) {\n-    ArrayList<PendingStream> toProcess;\n+    ArrayList<PendingStream> toCreateRealStream;\n+    ArrayList<PendingStream> toCheckCompletion;\n     synchronized (lock) {\n       lastPicker = picker;\n       lastPickerVersion++;\n-      if (picker == null || !hasPendingStreams()) {\n+      if ((picker == null || !hasPendingStreams()) && !hasUncommittedStreams()) {\n         return;\n       }\n-      toProcess = new ArrayList<>(pendingStreams);\n+      toCreateRealStream = new ArrayList<>(pendingStreams);\n+      toCheckCompletion = new ArrayList<>(toCheckCompletionStreams);\n     }\n-    ArrayList<PendingStream> toRemove = new ArrayList<>();\n+    ArrayList<PendingStream> newlyCreated = new ArrayList<>();\n \n-    for (final PendingStream stream : toProcess) {\n-      PickResult pickResult = picker.pickSubchannel(stream.args);\n-      CallOptions callOptions = stream.args.getCallOptions();\n-      final ClientTransport transport = GrpcUtil.getTransportFromPickResult(pickResult,\n-          callOptions.isWaitForReady());\n-      if (transport != null) {\n-        Executor executor = defaultAppExecutor;\n-        // createRealStream may be expensive. It will start real streams on the transport. If\n-        // there are pending requests, they will be serialized too, which may be expensive. Since\n-        // we are now on transport thread, we need to offload the work to an executor.\n-        if (callOptions.getExecutor() != null) {\n-          executor = callOptions.getExecutor();\n-        }\n-        executor.execute(new Runnable() {\n+\n+    if (picker != null) {\n+      for (final PendingStream stream : toCreateRealStream) {\n+        PickResult pickResult = picker.pickSubchannel(stream.args);\n+        CallOptions callOptions = stream.args.getCallOptions();\n+        final ClientTransport transport = GrpcUtil.getTransportFromPickResult(pickResult,\n+            callOptions.isWaitForReady());\n+        if (transport != null) {\n+          Executor executor = defaultAppExecutor;\n+          // createRealStream may be expensive. It will start real streams on the transport. If\n+          // there are pending requests, they will be serialized too, which may be expensive. Since\n+          // we are now on transport thread, we need to offload the work to an executor.\n+          if (callOptions.getExecutor() != null) {\n+            executor = callOptions.getExecutor();\n+          }\n+          executor.execute(new Runnable() {\n             @Override\n             public void run() {\n               stream.createRealStream(transport);\n             }\n           });\n-        toRemove.add(stream);\n-      }  // else: stay pending\n+          newlyCreated.add(stream);\n+        }  // else: stay pending\n+      }\n+    }\n+    toCheckCompletion.addAll(newlyCreated);\n+    ArrayList<PendingStream> completed = new ArrayList<>();\n+    for (final PendingStream stream : toCheckCompletion) {\n+      if (stream.isStreamTransferCompleted()) {\n+        completed.add(stream);\n+      }\n     }\n-\n     synchronized (lock) {\n       // Between this synchronized and the previous one:\n       //   - Streams may have been cancelled, which may turn pendingStreams into emptiness.\n-      //   - shutdown() may be called, which may turn pendingStreams into null.\n-      if (!hasPendingStreams()) {\n+      //   - shutdownNow() may be called, which may turn pendingStreams into emptiness.\n+      if (!hasPendingStreams() && !hasUncommittedStreams()) {\n         return;\n       }\n-      pendingStreams.removeAll(toRemove);\n+      pendingStreams.removeAll(newlyCreated);\n+      toCheckCompletionStreams.addAll(newlyCreated);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb188611d789c2fc0cdb7a6caa7dfbc4a6010e91"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTUyMzAwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/grpc/internal/DelayedClientTransport.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOToxMToxMVrOIFhgmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOToxMToxMVrOIFhgmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY2MjgxMQ==", "bodyText": "What about using the same name for toCheckCompletionStreams and uncommittedStreams?", "url": "https://github.com/grpc/grpc-java/pull/7720#discussion_r542662811", "createdAt": "2020-12-14T19:11:11Z", "author": {"login": "dapengzhang0"}, "path": "core/src/main/java/io/grpc/internal/DelayedClientTransport.java", "diffHunk": "@@ -252,13 +277,26 @@ public final boolean hasPendingStreams() {\n     }\n   }\n \n+  public final boolean hasUncommittedStreams() {\n+    synchronized (lock) {\n+      return !toCheckCompletionStreams.isEmpty();\n+    }\n+  }\n+\n   @VisibleForTesting\n   final int getPendingStreamsCount() {\n     synchronized (lock) {\n       return pendingStreams.size();\n     }\n   }\n \n+  @VisibleForTesting\n+  final int getUncommittedStreamsCount() {\n+    synchronized (lock) {\n+      return toCheckCompletionStreams.size();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb188611d789c2fc0cdb7a6caa7dfbc4a6010e91"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTU0MjMyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/grpc/internal/DelayedClientTransport.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOToxNDowNFrOIFhtIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOToxNDowNFrOIFhtIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY2NjAxOQ==", "bodyText": "You don't need copy the list, just saving the reference should be sufficient.", "url": "https://github.com/grpc/grpc-java/pull/7720#discussion_r542666019", "createdAt": "2020-12-14T19:14:04Z", "author": {"login": "dapengzhang0"}, "path": "core/src/main/java/io/grpc/internal/DelayedClientTransport.java", "diffHunk": "@@ -66,6 +66,23 @@\n   @Nonnull\n   @GuardedBy(\"lock\")\n   private Collection<PendingStream> pendingStreams = new LinkedHashSet<>();\n+  @GuardedBy(\"lock\")\n+  private Collection<PendingStream> toCheckCompletionStreams = new LinkedHashSet<>();\n+  private Runnable pollForStreamTransferCompletion = new Runnable() {\n+    @Override\n+    public void run() {\n+      ArrayList<PendingStream> savedToCheckCompletionStreams;\n+      synchronized (lock) {\n+        savedToCheckCompletionStreams = new ArrayList<>(toCheckCompletionStreams);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb188611d789c2fc0cdb7a6caa7dfbc4a6010e91"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMDAyMTM0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/grpc/internal/DelayedClientTransport.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMDoyNTozOVrOIFmbjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwMTowMTo0M1rOIFz8Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc0MzQzOA==", "bodyText": "I think changing this line is not necessary. Regardless of hasUncommittedStreams, if return then stream.createRealStream() or drain() will not be called and will not cause trouble.", "url": "https://github.com/grpc/grpc-java/pull/7720#discussion_r542743438", "createdAt": "2020-12-14T20:25:39Z", "author": {"login": "dapengzhang0"}, "path": "core/src/main/java/io/grpc/internal/DelayedClientTransport.java", "diffHunk": "@@ -270,48 +308,61 @@ final int getPendingStreamsCount() {\n    * <p>This method <strong>must not</strong> be called concurrently with itself.\n    */\n   final void reprocess(@Nullable SubchannelPicker picker) {\n-    ArrayList<PendingStream> toProcess;\n+    ArrayList<PendingStream> toCreateRealStream;\n+    ArrayList<PendingStream> toCheckCompletion;\n     synchronized (lock) {\n       lastPicker = picker;\n       lastPickerVersion++;\n-      if (picker == null || !hasPendingStreams()) {\n+      if ((picker == null || !hasPendingStreams()) && !hasUncommittedStreams()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb188611d789c2fc0cdb7a6caa7dfbc4a6010e91"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc1ODg2OA==", "bodyText": "This line is because it needs to take care another case: when shutdown() is called but there are still uncommittedStreams, the shutdown path would return, then it will never shutdown. It relied on reprocess() to trigger the termination. (Similar to cancel() takes care of the last item and then trigger termination callback). This is different in shudownNow() which would take care of waiting uncommitted streams and then finalize termination.", "url": "https://github.com/grpc/grpc-java/pull/7720#discussion_r542758868", "createdAt": "2020-12-14T20:40:32Z", "author": {"login": "YifeiZhuang"}, "path": "core/src/main/java/io/grpc/internal/DelayedClientTransport.java", "diffHunk": "@@ -270,48 +308,61 @@ final int getPendingStreamsCount() {\n    * <p>This method <strong>must not</strong> be called concurrently with itself.\n    */\n   final void reprocess(@Nullable SubchannelPicker picker) {\n-    ArrayList<PendingStream> toProcess;\n+    ArrayList<PendingStream> toCreateRealStream;\n+    ArrayList<PendingStream> toCheckCompletion;\n     synchronized (lock) {\n       lastPicker = picker;\n       lastPickerVersion++;\n-      if (picker == null || !hasPendingStreams()) {\n+      if ((picker == null || !hasPendingStreams()) && !hasUncommittedStreams()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc0MzQzOA=="}, "originalCommit": {"oid": "eb188611d789c2fc0cdb7a6caa7dfbc4a6010e91"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgyMzIwMg==", "bodyText": "hen shutdown() is called but there are still uncommittedStreams, the shutdown path would return, then it will never shutdown. It relied on reprocess() to trigger the termination.\n\nuncommittedStreams can be considered as existing RPCs, so shutdown() should not terminate them. uncommittedStreams will complete transfer by themselves, and they don't rely on a second reprocess().", "url": "https://github.com/grpc/grpc-java/pull/7720#discussion_r542823202", "createdAt": "2020-12-14T21:40:31Z", "author": {"login": "dapengzhang0"}, "path": "core/src/main/java/io/grpc/internal/DelayedClientTransport.java", "diffHunk": "@@ -270,48 +308,61 @@ final int getPendingStreamsCount() {\n    * <p>This method <strong>must not</strong> be called concurrently with itself.\n    */\n   final void reprocess(@Nullable SubchannelPicker picker) {\n-    ArrayList<PendingStream> toProcess;\n+    ArrayList<PendingStream> toCreateRealStream;\n+    ArrayList<PendingStream> toCheckCompletion;\n     synchronized (lock) {\n       lastPicker = picker;\n       lastPickerVersion++;\n-      if (picker == null || !hasPendingStreams()) {\n+      if ((picker == null || !hasPendingStreams()) && !hasUncommittedStreams()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc0MzQzOA=="}, "originalCommit": {"oid": "eb188611d789c2fc0cdb7a6caa7dfbc4a6010e91"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg5OTkwMA==", "bodyText": "shutdown() never terminates then existing RPCs.  Do you mean we await() during shutdown()?\nIt seems it's hard to avoid that. Say, if there are both pendingStreams and uncommittedStreams when shutdown is called, so shutdown has to return. Then during next reprocess(), the newly created stream has not been drained , which would cause pendingStreams empty but uncommittedstream still has items in it, and we need a way to drain it. It looks reprocess() is that place, it would trigger in the next call or after idle timer.", "url": "https://github.com/grpc/grpc-java/pull/7720#discussion_r542899900", "createdAt": "2020-12-14T22:54:22Z", "author": {"login": "YifeiZhuang"}, "path": "core/src/main/java/io/grpc/internal/DelayedClientTransport.java", "diffHunk": "@@ -270,48 +308,61 @@ final int getPendingStreamsCount() {\n    * <p>This method <strong>must not</strong> be called concurrently with itself.\n    */\n   final void reprocess(@Nullable SubchannelPicker picker) {\n-    ArrayList<PendingStream> toProcess;\n+    ArrayList<PendingStream> toCreateRealStream;\n+    ArrayList<PendingStream> toCheckCompletion;\n     synchronized (lock) {\n       lastPicker = picker;\n       lastPickerVersion++;\n-      if (picker == null || !hasPendingStreams()) {\n+      if ((picker == null || !hasPendingStreams()) && !hasUncommittedStreams()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc0MzQzOA=="}, "originalCommit": {"oid": "eb188611d789c2fc0cdb7a6caa7dfbc4a6010e91"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk0MTkyNw==", "bodyText": "I think we should await() during shutdown(), because there is no \"next\" reprocess() after shutdown, so we can not rely on reprocess() for existing uncommittedStreams.\nAnother way is introducing an abstract method DelayedStream.onTransferComplete(), and implementing DelayedClientTransport.PendingStream.onTransferComplete() to managed decrement of `uncommittedStreams.", "url": "https://github.com/grpc/grpc-java/pull/7720#discussion_r542941927", "createdAt": "2020-12-15T00:06:44Z", "author": {"login": "dapengzhang0"}, "path": "core/src/main/java/io/grpc/internal/DelayedClientTransport.java", "diffHunk": "@@ -270,48 +308,61 @@ final int getPendingStreamsCount() {\n    * <p>This method <strong>must not</strong> be called concurrently with itself.\n    */\n   final void reprocess(@Nullable SubchannelPicker picker) {\n-    ArrayList<PendingStream> toProcess;\n+    ArrayList<PendingStream> toCreateRealStream;\n+    ArrayList<PendingStream> toCheckCompletion;\n     synchronized (lock) {\n       lastPicker = picker;\n       lastPickerVersion++;\n-      if (picker == null || !hasPendingStreams()) {\n+      if ((picker == null || !hasPendingStreams()) && !hasUncommittedStreams()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc0MzQzOA=="}, "originalCommit": {"oid": "eb188611d789c2fc0cdb7a6caa7dfbc4a6010e91"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk2NDc1MQ==", "bodyText": "Thanks. Indeed it appears that idle timeout is permanently cancelled immediately after shutdown is called so there is no next reprocess().  It looks like just awaitTransferCompletion() during shutdown is not enough, moreover, I believe generally we are not supposed to await() during shutdown.", "url": "https://github.com/grpc/grpc-java/pull/7720#discussion_r542964751", "createdAt": "2020-12-15T01:01:43Z", "author": {"login": "YifeiZhuang"}, "path": "core/src/main/java/io/grpc/internal/DelayedClientTransport.java", "diffHunk": "@@ -270,48 +308,61 @@ final int getPendingStreamsCount() {\n    * <p>This method <strong>must not</strong> be called concurrently with itself.\n    */\n   final void reprocess(@Nullable SubchannelPicker picker) {\n-    ArrayList<PendingStream> toProcess;\n+    ArrayList<PendingStream> toCreateRealStream;\n+    ArrayList<PendingStream> toCheckCompletion;\n     synchronized (lock) {\n       lastPicker = picker;\n       lastPickerVersion++;\n-      if (picker == null || !hasPendingStreams()) {\n+      if ((picker == null || !hasPendingStreams()) && !hasUncommittedStreams()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc0MzQzOA=="}, "originalCommit": {"oid": "eb188611d789c2fc0cdb7a6caa7dfbc4a6010e91"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMjAzMDk5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/grpc/internal/TransferableClientStream.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxOTowMzo0MFrOIHUqUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxOTowMzo0MFrOIHUqUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU0OTQ1Ng==", "bodyText": "nit: public redundant.", "url": "https://github.com/grpc/grpc-java/pull/7720#discussion_r544549456", "createdAt": "2020-12-16T19:03:40Z", "author": {"login": "voidzcy"}, "path": "core/src/main/java/io/grpc/internal/TransferableClientStream.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.internal;\n+\n+/**\n+ * A logical {@link ClientStream} that does internal transfer processing of the clint requests.\n+ */\n+abstract class TransferableClientStream implements ClientStream {\n+\n+  /**\n+   * Provides the place to define actions at the point when transfer is done.\n+   * Call this method to trigger those transfer completion activities. No-op by default.\n+   */\n+  public void onTransferComplete() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502429067108066fcb2840b9daa31fc3de7cf7a4"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNDI0Nzc3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/grpc/internal/TransferableClientStream.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNzoyNDoyMFrOIHn7Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNzoyNDoyMFrOIHn7Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg2NTAyNg==", "bodyText": "Why introduce yet another class? I would just add onTransferComplete() to DelayedStream (making DelayedStream abstract).", "url": "https://github.com/grpc/grpc-java/pull/7720#discussion_r544865026", "createdAt": "2020-12-17T07:24:20Z", "author": {"login": "dapengzhang0"}, "path": "core/src/main/java/io/grpc/internal/TransferableClientStream.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.internal;\n+\n+/**\n+ * A logical {@link ClientStream} that does internal transfer processing of the clint requests.\n+ */\n+abstract class TransferableClientStream implements ClientStream {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502429067108066fcb2840b9daa31fc3de7cf7a4"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNDI3MjEwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/grpc/internal/DelayedClientTransport.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNzozMTo1M1rOIHoIlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNzozMTo1M1rOIHoIlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg2ODUwMQ==", "bodyText": "The operations should be atomic otherwise not thread-safe. Use AtomicBoolean.compareAndSet() or AtomicReferenceFieldUpdater.compareAndSet(), or check it inside lock.\nAn alternative is to guarantee onTransferComplete() is only called once per lifecycle of stream, then transferCompleted is not needed. (Currently, there is one case that cancel() and start() are in a race to call onTransferComplete(). This case can be excluded.)", "url": "https://github.com/grpc/grpc-java/pull/7720#discussion_r544868501", "createdAt": "2020-12-17T07:31:53Z", "author": {"login": "dapengzhang0"}, "path": "core/src/main/java/io/grpc/internal/DelayedClientTransport.java", "diffHunk": "@@ -362,15 +361,25 @@ private void createRealStream(ClientTransport transport) {\n     public void cancel(Status reason) {\n       super.cancel(reason);\n       synchronized (lock) {\n-        if (reportTransportTerminated != null) {\n-          boolean justRemovedAnElement = pendingStreams.remove(this);\n-          if (!hasPendingStreams() && justRemovedAnElement) {\n-            syncContext.executeLater(reportTransportNotInUse);\n-            if (shutdownStatus != null) {\n-              syncContext.executeLater(reportTransportTerminated);\n-              reportTransportTerminated = null;\n-            }\n-          }\n+        boolean justRemovedAnElement = pendingStreams.remove(this);\n+        if (!hasPendingStreams() && justRemovedAnElement && reportTransportTerminated != null) {\n+          syncContext.executeLater(reportTransportNotInUse);\n+        }\n+      }\n+      syncContext.drain();\n+    }\n+\n+    @Override\n+    public void onTransferComplete() {\n+      if (transferCompleted) {\n+        return;\n+      }\n+      transferCompleted = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502429067108066fcb2840b9daa31fc3de7cf7a4"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNDMzNzY0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/grpc/internal/DelayedClientTransport.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNzo0OTo0OVrOIHosNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxOToyNDo0OVrOIJjWiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg3NzYyMw==", "bodyText": "No need to check reportTransportTerminated != null after the change. Previously if reportTransportTerminated == null, pendingStream is guaranteed reset to empty and justRemovedAnElement will never happen.", "url": "https://github.com/grpc/grpc-java/pull/7720#discussion_r544877623", "createdAt": "2020-12-17T07:49:49Z", "author": {"login": "dapengzhang0"}, "path": "core/src/main/java/io/grpc/internal/DelayedClientTransport.java", "diffHunk": "@@ -362,15 +361,25 @@ private void createRealStream(ClientTransport transport) {\n     public void cancel(Status reason) {\n       super.cancel(reason);\n       synchronized (lock) {\n-        if (reportTransportTerminated != null) {\n-          boolean justRemovedAnElement = pendingStreams.remove(this);\n-          if (!hasPendingStreams() && justRemovedAnElement) {\n-            syncContext.executeLater(reportTransportNotInUse);\n-            if (shutdownStatus != null) {\n-              syncContext.executeLater(reportTransportTerminated);\n-              reportTransportTerminated = null;\n-            }\n-          }\n+        boolean justRemovedAnElement = pendingStreams.remove(this);\n+        if (!hasPendingStreams() && justRemovedAnElement && reportTransportTerminated != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502429067108066fcb2840b9daa31fc3de7cf7a4"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI4MTAxNg==", "bodyText": "I was thinking that in time order: 1. super.cancel() 2.onTransferComplete(), reportTransportTerminated=null 3. this lock block might reportNotInUse, which won't happen previously.", "url": "https://github.com/grpc/grpc-java/pull/7720#discussion_r545281016", "createdAt": "2020-12-17T17:45:56Z", "author": {"login": "YifeiZhuang"}, "path": "core/src/main/java/io/grpc/internal/DelayedClientTransport.java", "diffHunk": "@@ -362,15 +361,25 @@ private void createRealStream(ClientTransport transport) {\n     public void cancel(Status reason) {\n       super.cancel(reason);\n       synchronized (lock) {\n-        if (reportTransportTerminated != null) {\n-          boolean justRemovedAnElement = pendingStreams.remove(this);\n-          if (!hasPendingStreams() && justRemovedAnElement) {\n-            syncContext.executeLater(reportTransportNotInUse);\n-            if (shutdownStatus != null) {\n-              syncContext.executeLater(reportTransportTerminated);\n-              reportTransportTerminated = null;\n-            }\n-          }\n+        boolean justRemovedAnElement = pendingStreams.remove(this);\n+        if (!hasPendingStreams() && justRemovedAnElement && reportTransportTerminated != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg3NzYyMw=="}, "originalCommit": {"oid": "502429067108066fcb2840b9daa31fc3de7cf7a4"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg4NzMwNQ==", "bodyText": "I still think the check for reportTransportTerminated != null is unnecessary and the (!hasPendingStreams() && justRemovedAnElement) is the canonical invariant for reportTransportNotInUse. But ether way seems working anyway.", "url": "https://github.com/grpc/grpc-java/pull/7720#discussion_r546887305", "createdAt": "2020-12-21T19:24:49Z", "author": {"login": "dapengzhang0"}, "path": "core/src/main/java/io/grpc/internal/DelayedClientTransport.java", "diffHunk": "@@ -362,15 +361,25 @@ private void createRealStream(ClientTransport transport) {\n     public void cancel(Status reason) {\n       super.cancel(reason);\n       synchronized (lock) {\n-        if (reportTransportTerminated != null) {\n-          boolean justRemovedAnElement = pendingStreams.remove(this);\n-          if (!hasPendingStreams() && justRemovedAnElement) {\n-            syncContext.executeLater(reportTransportNotInUse);\n-            if (shutdownStatus != null) {\n-              syncContext.executeLater(reportTransportTerminated);\n-              reportTransportTerminated = null;\n-            }\n-          }\n+        boolean justRemovedAnElement = pendingStreams.remove(this);\n+        if (!hasPendingStreams() && justRemovedAnElement && reportTransportTerminated != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg3NzYyMw=="}, "originalCommit": {"oid": "502429067108066fcb2840b9daa31fc3de7cf7a4"}, "originalPosition": 99}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3008, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}