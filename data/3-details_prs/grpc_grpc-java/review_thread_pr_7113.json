{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNjI2NzAw", "number": 7113, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxOTowMTo1M1rOEEbIMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxOTowMTo1M1rOEEbIMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDc0MjI0OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/XdsNameResolver.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxOTowMTo1M1rOGiCdUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDozMToyNVrOGiFQKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM0NTA0Mg==", "bodyText": "This will use the oob chanel status code for the client channel though.", "url": "https://github.com/grpc/grpc-java/pull/7113#discussion_r438345042", "createdAt": "2020-06-10T19:01:53Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/XdsNameResolver.java", "diffHunk": "@@ -224,7 +224,7 @@ public void onError(Status error) {\n       logger.log(\n           XdsLogLevel.WARNING,\n           \"Received error from xDS client {0}: {1}\", xdsClient, error.getDescription());\n-      listener.onError(Status.UNAVAILABLE.withDescription(error.getDescription()));\n+      listener.onError(error);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a8d207705b86aec39403e03576817556a09ce6b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM0NzMxMw==", "bodyText": "Yeah, I am a bit hesitating. But do we have to make all name resolution error UNAVAILABLE? Seems reasonable from high level, but maybe not a strong reason to. So I chose to preserve the original error to simplify the logic.", "url": "https://github.com/grpc/grpc-java/pull/7113#discussion_r438347313", "createdAt": "2020-06-10T19:06:19Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsNameResolver.java", "diffHunk": "@@ -224,7 +224,7 @@ public void onError(Status error) {\n       logger.log(\n           XdsLogLevel.WARNING,\n           \"Received error from xDS client {0}: {1}\", xdsClient, error.getDescription());\n-      listener.onError(Status.UNAVAILABLE.withDescription(error.getDescription()));\n+      listener.onError(error);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM0NTA0Mg=="}, "originalCommit": {"oid": "7a8d207705b86aec39403e03576817556a09ce6b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM1MjY3OQ==", "bodyText": "Directly using the original status may not be a good idea. Ideally we should map the original status to the correct one as documented in https://github.com/grpc/grpc/blob/master/doc/statuscodes.md  if we think UNAVAILABLE is not correct in all cases.", "url": "https://github.com/grpc/grpc-java/pull/7113#discussion_r438352679", "createdAt": "2020-06-10T19:16:38Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsNameResolver.java", "diffHunk": "@@ -224,7 +224,7 @@ public void onError(Status error) {\n       logger.log(\n           XdsLogLevel.WARNING,\n           \"Received error from xDS client {0}: {1}\", xdsClient, error.getDescription());\n-      listener.onError(Status.UNAVAILABLE.withDescription(error.getDescription()));\n+      listener.onError(error);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM0NTA0Mg=="}, "originalCommit": {"oid": "7a8d207705b86aec39403e03576817556a09ce6b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM1NjgxNw==", "bodyText": "The original status code is the status code that xDS stream encounters. It is gRPC status code, the mapping you are talking about is irrelevant here. If no strong reason/opinion/requirement for the name resolution status code, keeping the original is good enough.", "url": "https://github.com/grpc/grpc-java/pull/7113#discussion_r438356817", "createdAt": "2020-06-10T19:24:43Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsNameResolver.java", "diffHunk": "@@ -224,7 +224,7 @@ public void onError(Status error) {\n       logger.log(\n           XdsLogLevel.WARNING,\n           \"Received error from xDS client {0}: {1}\", xdsClient, error.getDescription());\n-      listener.onError(Status.UNAVAILABLE.withDescription(error.getDescription()));\n+      listener.onError(error);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM0NTA0Mg=="}, "originalCommit": {"oid": "7a8d207705b86aec39403e03576817556a09ce6b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM3Nzc5MQ==", "bodyText": "...keeping the original is good enough.\n\nHave you considered this case: the user (gRPC developer) creates a client channel (they don't even know xDS will be involved because \"xds:///..\" is a runtime URI passed to the channel). Now your xDS stream/channel fails with something like \"invalid call credentials\" or \"invalid channel credentials\" are you going to report that as the error for the client channel? Will the user think this applies to their own client-to-server calls? If this is not an issue (because the error description is descriptive enough) then it's okay.", "url": "https://github.com/grpc/grpc-java/pull/7113#discussion_r438377791", "createdAt": "2020-06-10T20:05:09Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsNameResolver.java", "diffHunk": "@@ -224,7 +224,7 @@ public void onError(Status error) {\n       logger.log(\n           XdsLogLevel.WARNING,\n           \"Received error from xDS client {0}: {1}\", xdsClient, error.getDescription());\n-      listener.onError(Status.UNAVAILABLE.withDescription(error.getDescription()));\n+      listener.onError(error);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM0NTA0Mg=="}, "originalCommit": {"oid": "7a8d207705b86aec39403e03576817556a09ce6b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4NjQ2MA==", "bodyText": "We should assume users using xDS should at least have the knowledge of the high level xDS workflow. That is, they should at least know there is TD involved. Otherwise, users do not know what they are doing. The error surfaced to the Channel is\nFailed to resolve name. status= // whatever the status from the RPC contacting TD\n\nI don't see any problem with such an error propagation.", "url": "https://github.com/grpc/grpc-java/pull/7113#discussion_r438386460", "createdAt": "2020-06-10T20:22:51Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsNameResolver.java", "diffHunk": "@@ -224,7 +224,7 @@ public void onError(Status error) {\n       logger.log(\n           XdsLogLevel.WARNING,\n           \"Received error from xDS client {0}: {1}\", xdsClient, error.getDescription());\n-      listener.onError(Status.UNAVAILABLE.withDescription(error.getDescription()));\n+      listener.onError(error);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM0NTA0Mg=="}, "originalCommit": {"oid": "7a8d207705b86aec39403e03576817556a09ce6b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM5MDgyNg==", "bodyText": "I disagree that we should expect users to know the nitty gritty of the xDS flow.\nIn any case the initial Failed to resolve name... would tell the user something and they would know (hopefully) this is not an issue with their own call creds or something.", "url": "https://github.com/grpc/grpc-java/pull/7113#discussion_r438390826", "createdAt": "2020-06-10T20:31:25Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsNameResolver.java", "diffHunk": "@@ -224,7 +224,7 @@ public void onError(Status error) {\n       logger.log(\n           XdsLogLevel.WARNING,\n           \"Received error from xDS client {0}: {1}\", xdsClient, error.getDescription());\n-      listener.onError(Status.UNAVAILABLE.withDescription(error.getDescription()));\n+      listener.onError(error);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM0NTA0Mg=="}, "originalCommit": {"oid": "7a8d207705b86aec39403e03576817556a09ce6b"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2533, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}