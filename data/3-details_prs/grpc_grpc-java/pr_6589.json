{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwNjg1NjAy", "number": 6589, "title": "xds: suppress hostname check but keep trust check in the delegated X509TrustManagerImpl", "bodyText": "", "createdAt": "2020-01-08T22:33:44Z", "url": "https://github.com/grpc/grpc-java/pull/6589", "merged": true, "mergeCommit": {"oid": "bee375f2059d8cdd1ddff9e802aeebb27248d346"}, "closed": true, "closedAt": "2020-01-10T00:40:44Z", "author": {"login": "sanjaypujare"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4dIhzgH2gAyMzYwNjg1NjAyOjE1ZjcxN2NlYTQ3YTI1N2RmZTEzMzhkN2UwNzk2NWI4OTc4ZjA1MzI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb4yiEMgFqTM0MDg3ODQ0Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "15f717cea47a257dfe1338d7e07965b8978f0532", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/15f717cea47a257dfe1338d7e07965b8978f0532", "committedDate": "2020-01-08T22:31:15Z", "message": "xds: suppress hostname check but keep trust check in the delegated X509TrustManagerImpl"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwMjI5MDQ0", "url": "https://github.com/grpc/grpc-java/pull/6589#pullrequestreview-340229044", "createdAt": "2020-01-09T00:27:48Z", "commit": {"oid": "15f717cea47a257dfe1338d7e07965b8978f0532"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMDoyNzo0OVrOFbn6PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwMDozNjoxOVrOFboCLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUwOTc1Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  SSLSocket sslSocket = (SSLSocket)socket;\n          \n          \n            \n                  SSLSocket sslSocket = (SSLSocket) socket;", "url": "https://github.com/grpc/grpc-java/pull/6589#discussion_r364509757", "createdAt": "2020-01-09T00:27:49Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/sds/trust/SdsX509TrustManager.java", "diffHunk": "@@ -256,13 +258,26 @@ public void checkClientTrusted(X509Certificate[] chain, String authType)\n   @Override\n   public void checkServerTrusted(X509Certificate[] chain, String authType, Socket socket)\n       throws CertificateException {\n+    if (socket instanceof SSLSocket) {\n+      SSLSocket sslSocket = (SSLSocket)socket;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15f717cea47a257dfe1338d7e07965b8978f0532"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUxMTA1Nw==", "bodyText": "same for this.", "url": "https://github.com/grpc/grpc-java/pull/6589#discussion_r364511057", "createdAt": "2020-01-09T00:33:16Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/sds/trust/SdsX509TrustManagerTest.java", "diffHunk": "@@ -221,14 +244,346 @@ public void oneIpAddressInPeerCertsMismatch() throws CertificateException, IOExc\n             .addVerifySubjectAltName(\"x.foo.com\")\n             .addVerifySubjectAltName(\"192.168.2.3\")\n             .build();\n-    SdsX509TrustManager trustManager = new SdsX509TrustManager(certContext, mockDelegate);\n+    trustManager = new SdsX509TrustManager(certContext, mockDelegate);\n     X509Certificate[] certs =\n         CertificateUtils.toX509Certificates(TestUtils.loadCert(SERVER_1_PEM_FILE));\n     try {\n       trustManager.verifySubjectAltNameInChain(certs);\n-      Assert.fail(\"no exception thrown\");\n+      fail(\"no exception thrown\");\n     } catch (CertificateException expected) {\n       assertThat(expected).hasMessageThat().isEqualTo(\"Peer certificate SAN check failed\");\n     }\n   }\n+\n+  @Test\n+  public void checkServerTrustedSslEngine()\n+      throws CertificateException, IOException, CertStoreException {\n+    SSLEngine sslEngine = buildTrustManagerAndGetSslEngine();\n+    X509Certificate[] serverCerts =\n+        CertificateUtils.toX509Certificates(TestUtils.loadCert(SERVER_1_PEM_FILE));\n+    trustManager.checkServerTrusted(serverCerts, \"ECDHE_ECDSA\", sslEngine);\n+  }\n+\n+  @Test\n+  public void checkServerTrustedSslEngine_untrustedServer_expectException()\n+      throws CertificateException, IOException, CertStoreException {\n+    SSLEngine sslEngine = buildTrustManagerAndGetSslEngine();\n+    X509Certificate[] badServerCert =\n+        CertificateUtils.toX509Certificates(TestUtils.loadCert(BAD_SERVER_PEM_FILE));\n+    try {\n+      trustManager.checkServerTrusted(badServerCert, \"ECDHE_ECDSA\", sslEngine);\n+      fail(\"exception expected\");\n+    } catch (ValidatorException expected) {\n+      assertThat(expected).hasMessageThat()\n+          .endsWith(\"unable to find valid certification path to requested target\");\n+    }\n+  }\n+\n+  @Test\n+  public void checkServerTrustedSslSocket()\n+      throws CertificateException, IOException, CertStoreException {\n+    SSLSocket sslSocket = buildTrustManagerAndGetSslSocket();\n+    X509Certificate[] serverCerts =\n+        CertificateUtils.toX509Certificates(TestUtils.loadCert(SERVER_1_PEM_FILE));\n+    trustManager.checkServerTrusted(serverCerts, \"ECDHE_ECDSA\", sslSocket);\n+  }\n+\n+  @Test\n+  public void checkServerTrustedSslSocket_untrustedServer_expectException()\n+      throws CertificateException, IOException, CertStoreException {\n+    SSLSocket sslSocket = buildTrustManagerAndGetSslSocket();\n+    X509Certificate[] badServerCert =\n+        CertificateUtils.toX509Certificates(TestUtils.loadCert(BAD_SERVER_PEM_FILE));\n+    try {\n+      trustManager.checkServerTrusted(badServerCert, \"ECDHE_ECDSA\", sslSocket);\n+      fail(\"exception expected\");\n+    } catch (ValidatorException expected) {\n+      assertThat(expected).hasMessageThat()\n+          .endsWith(\"unable to find valid certification path to requested target\");\n+    }\n+  }\n+\n+  private SSLEngine buildTrustManagerAndGetSslEngine()\n+      throws CertificateException, IOException, CertStoreException {\n+    SSLParameters sslParams = buildTrustManagerAndGetSslParameters();\n+    SSLEngine sslEngine =  new SSLEngine() {\n+      @Override\n+      public SSLEngineResult wrap(ByteBuffer[] byteBuffers, int i, int i1, ByteBuffer byteBuffer)\n+          throws SSLException {\n+        return null;\n+      }\n+\n+      @Override\n+      public SSLEngineResult unwrap(ByteBuffer byteBuffer, ByteBuffer[] byteBuffers, int i, int i1)\n+          throws SSLException {\n+        return null;\n+      }\n+\n+      @Override\n+      public Runnable getDelegatedTask() {\n+        return null;\n+      }\n+\n+      @Override\n+      public void closeInbound() throws SSLException {\n+\n+      }\n+\n+      @Override\n+      public boolean isInboundDone() {\n+        return false;\n+      }\n+\n+      @Override\n+      public void closeOutbound() {\n+\n+      }\n+\n+      @Override\n+      public boolean isOutboundDone() {\n+        return false;\n+      }\n+\n+      @Override\n+      public String[] getSupportedCipherSuites() {\n+        return new String[0];\n+      }\n+\n+      @Override\n+      public String[] getEnabledCipherSuites() {\n+        return new String[0];\n+      }\n+\n+      @Override\n+      public void setEnabledCipherSuites(String[] strings) {\n+\n+      }\n+\n+      @Override\n+      public String[] getSupportedProtocols() {\n+        return new String[0];\n+      }\n+\n+      @Override\n+      public String[] getEnabledProtocols() {\n+        return new String[0];\n+      }\n+\n+      @Override\n+      public void setEnabledProtocols(String[] strings) {\n+\n+      }\n+\n+      @Override\n+      public SSLSession getSession() {\n+        return mockSession;\n+      }\n+\n+      @Override\n+      public void beginHandshake() throws SSLException {\n+\n+      }\n+\n+      @Override\n+      public HandshakeStatus getHandshakeStatus() {\n+        return null;\n+      }\n+\n+      @Override\n+      public void setUseClientMode(boolean b) {\n+\n+      }\n+\n+      @Override\n+      public boolean getUseClientMode() {\n+        return false;\n+      }\n+\n+      @Override\n+      public void setNeedClientAuth(boolean b) {\n+\n+      }\n+\n+      @Override\n+      public boolean getNeedClientAuth() {\n+        return false;\n+      }\n+\n+      @Override\n+      public void setWantClientAuth(boolean b) {\n+\n+      }\n+\n+      @Override\n+      public boolean getWantClientAuth() {\n+        return false;\n+      }\n+\n+      @Override\n+      public void setEnableSessionCreation(boolean b) {\n+\n+      }\n+\n+      @Override\n+      public boolean getEnableSessionCreation() {\n+        return false;\n+      }\n+\n+      @Override\n+      public SSLSession getHandshakeSession() {\n+        return mockSession;\n+      }\n+\n+      @Override\n+      public SSLParameters getSSLParameters() {\n+        return sslParameters;\n+      }\n+\n+      @Override\n+      public void setSSLParameters(SSLParameters sslParameters) {\n+        this.sslParameters = sslParameters;\n+      }\n+\n+      private SSLParameters sslParameters;\n+    };\n+    sslEngine.setSSLParameters(sslParams);\n+    return sslEngine;\n+  }\n+\n+  private SSLSocket buildTrustManagerAndGetSslSocket()\n+      throws CertificateException, IOException, CertStoreException {\n+    SSLParameters sslParams = buildTrustManagerAndGetSslParameters();\n+\n+    SSLSocket sslSocket = new SSLSocket() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15f717cea47a257dfe1338d7e07965b8978f0532"}, "originalPosition": 411}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUxMTc5MA==", "bodyText": "can you use mock to get rid of boiler plate? mock should be avoided, but in this case it seems like a better idea.", "url": "https://github.com/grpc/grpc-java/pull/6589#discussion_r364511790", "createdAt": "2020-01-09T00:36:19Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/sds/trust/SdsX509TrustManagerTest.java", "diffHunk": "@@ -221,14 +244,346 @@ public void oneIpAddressInPeerCertsMismatch() throws CertificateException, IOExc\n             .addVerifySubjectAltName(\"x.foo.com\")\n             .addVerifySubjectAltName(\"192.168.2.3\")\n             .build();\n-    SdsX509TrustManager trustManager = new SdsX509TrustManager(certContext, mockDelegate);\n+    trustManager = new SdsX509TrustManager(certContext, mockDelegate);\n     X509Certificate[] certs =\n         CertificateUtils.toX509Certificates(TestUtils.loadCert(SERVER_1_PEM_FILE));\n     try {\n       trustManager.verifySubjectAltNameInChain(certs);\n-      Assert.fail(\"no exception thrown\");\n+      fail(\"no exception thrown\");\n     } catch (CertificateException expected) {\n       assertThat(expected).hasMessageThat().isEqualTo(\"Peer certificate SAN check failed\");\n     }\n   }\n+\n+  @Test\n+  public void checkServerTrustedSslEngine()\n+      throws CertificateException, IOException, CertStoreException {\n+    SSLEngine sslEngine = buildTrustManagerAndGetSslEngine();\n+    X509Certificate[] serverCerts =\n+        CertificateUtils.toX509Certificates(TestUtils.loadCert(SERVER_1_PEM_FILE));\n+    trustManager.checkServerTrusted(serverCerts, \"ECDHE_ECDSA\", sslEngine);\n+  }\n+\n+  @Test\n+  public void checkServerTrustedSslEngine_untrustedServer_expectException()\n+      throws CertificateException, IOException, CertStoreException {\n+    SSLEngine sslEngine = buildTrustManagerAndGetSslEngine();\n+    X509Certificate[] badServerCert =\n+        CertificateUtils.toX509Certificates(TestUtils.loadCert(BAD_SERVER_PEM_FILE));\n+    try {\n+      trustManager.checkServerTrusted(badServerCert, \"ECDHE_ECDSA\", sslEngine);\n+      fail(\"exception expected\");\n+    } catch (ValidatorException expected) {\n+      assertThat(expected).hasMessageThat()\n+          .endsWith(\"unable to find valid certification path to requested target\");\n+    }\n+  }\n+\n+  @Test\n+  public void checkServerTrustedSslSocket()\n+      throws CertificateException, IOException, CertStoreException {\n+    SSLSocket sslSocket = buildTrustManagerAndGetSslSocket();\n+    X509Certificate[] serverCerts =\n+        CertificateUtils.toX509Certificates(TestUtils.loadCert(SERVER_1_PEM_FILE));\n+    trustManager.checkServerTrusted(serverCerts, \"ECDHE_ECDSA\", sslSocket);\n+  }\n+\n+  @Test\n+  public void checkServerTrustedSslSocket_untrustedServer_expectException()\n+      throws CertificateException, IOException, CertStoreException {\n+    SSLSocket sslSocket = buildTrustManagerAndGetSslSocket();\n+    X509Certificate[] badServerCert =\n+        CertificateUtils.toX509Certificates(TestUtils.loadCert(BAD_SERVER_PEM_FILE));\n+    try {\n+      trustManager.checkServerTrusted(badServerCert, \"ECDHE_ECDSA\", sslSocket);\n+      fail(\"exception expected\");\n+    } catch (ValidatorException expected) {\n+      assertThat(expected).hasMessageThat()\n+          .endsWith(\"unable to find valid certification path to requested target\");\n+    }\n+  }\n+\n+  private SSLEngine buildTrustManagerAndGetSslEngine()\n+      throws CertificateException, IOException, CertStoreException {\n+    SSLParameters sslParams = buildTrustManagerAndGetSslParameters();\n+    SSLEngine sslEngine =  new SSLEngine() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15f717cea47a257dfe1338d7e07965b8978f0532"}, "originalPosition": 263}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88b0d01a94287f2e15ea5e96dd6132e62a8ee7c3", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/88b0d01a94287f2e15ea5e96dd6132e62a8ee7c3", "committedDate": "2020-01-09T20:12:50Z", "message": "address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwODc4NDAy", "url": "https://github.com/grpc/grpc-java/pull/6589#pullrequestreview-340878402", "createdAt": "2020-01-09T23:27:01Z", "commit": {"oid": "88b0d01a94287f2e15ea5e96dd6132e62a8ee7c3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMzoyNzowMVrOFcGamg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMzoyNzowMVrOFcGamg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAwOTU2Mg==", "bodyText": "fyi, times(1) can be omitted unless very good reason to emphasize times(1). i am just pointing out because all verify has it.", "url": "https://github.com/grpc/grpc-java/pull/6589#discussion_r365009562", "createdAt": "2020-01-09T23:27:01Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/sds/trust/SdsX509TrustManagerTest.java", "diffHunk": "@@ -221,14 +244,132 @@ public void oneIpAddressInPeerCertsMismatch() throws CertificateException, IOExc\n             .addVerifySubjectAltName(\"x.foo.com\")\n             .addVerifySubjectAltName(\"192.168.2.3\")\n             .build();\n-    SdsX509TrustManager trustManager = new SdsX509TrustManager(certContext, mockDelegate);\n+    trustManager = new SdsX509TrustManager(certContext, mockDelegate);\n     X509Certificate[] certs =\n         CertificateUtils.toX509Certificates(TestUtils.loadCert(SERVER_1_PEM_FILE));\n     try {\n       trustManager.verifySubjectAltNameInChain(certs);\n-      Assert.fail(\"no exception thrown\");\n+      fail(\"no exception thrown\");\n     } catch (CertificateException expected) {\n       assertThat(expected).hasMessageThat().isEqualTo(\"Peer certificate SAN check failed\");\n     }\n   }\n+\n+  @Test\n+  public void checkServerTrustedSslEngine()\n+      throws CertificateException, IOException, CertStoreException {\n+    TestSslEngine sslEngine = buildTrustManagerAndGetSslEngine();\n+    X509Certificate[] serverCerts =\n+        CertificateUtils.toX509Certificates(TestUtils.loadCert(SERVER_1_PEM_FILE));\n+    trustManager.checkServerTrusted(serverCerts, \"ECDHE_ECDSA\", sslEngine);\n+    verify(sslEngine, times(1)).getHandshakeSession();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b0d01a94287f2e15ea5e96dd6132e62a8ee7c3"}, "originalPosition": 219}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwODc4NDQy", "url": "https://github.com/grpc/grpc-java/pull/6589#pullrequestreview-340878442", "createdAt": "2020-01-09T23:27:09Z", "commit": {"oid": "88b0d01a94287f2e15ea5e96dd6132e62a8ee7c3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4794, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}