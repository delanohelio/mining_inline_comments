{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzODA2Mjk3", "number": 7010, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODo1ODoyNVrOD59AVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoyMjo1N1rOD6WIqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDk0OTMyOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODo1ODoyNVrOGRhGOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMToyNToxOFrOGRmB1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAyMTI0MA==", "bodyText": "isInitialized is always true for proto3 since it checks mandatory fields are set or not. this need to be fixed.\nalso, can upstreamTlsContext be null?", "url": "https://github.com/grpc/grpc-java/pull/7010#discussion_r421021240", "createdAt": "2020-05-06T18:58:25Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -1051,8 +1061,14 @@ private void handleCdsResponse(DiscoveryResponse cdsResponse) {\n         }\n         updateBuilder.setLrsServerName(\"\");\n       }\n-      if (cluster.hasTlsContext()) {\n-        updateBuilder.setUpstreamTlsContext(cluster.getTlsContext());\n+      try {\n+        UpstreamTlsContext upstreamTlsContext = getTlsContextFromCluster(cluster);\n+        if (upstreamTlsContext != null && upstreamTlsContext.isInitialized()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "009ae80a13419fff50ab2e11355abafe494dcaa3"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEwMDk1NQ==", "bodyText": "isInitialized only checks for mandatory fields? It's quite useless then. I'll then use hasCommonTlsContext() unless that too always returns true :-)\nupstreamTlsContext can be null when we switch to v3 protos and cluster.getTlsContext() won't be there anymore so getTlsContextFromCluster will return null in that case.", "url": "https://github.com/grpc/grpc-java/pull/7010#discussion_r421100955", "createdAt": "2020-05-06T21:23:10Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -1051,8 +1061,14 @@ private void handleCdsResponse(DiscoveryResponse cdsResponse) {\n         }\n         updateBuilder.setLrsServerName(\"\");\n       }\n-      if (cluster.hasTlsContext()) {\n-        updateBuilder.setUpstreamTlsContext(cluster.getTlsContext());\n+      try {\n+        UpstreamTlsContext upstreamTlsContext = getTlsContextFromCluster(cluster);\n+        if (upstreamTlsContext != null && upstreamTlsContext.isInitialized()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAyMTI0MA=="}, "originalCommit": {"oid": "009ae80a13419fff50ab2e11355abafe494dcaa3"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEwMjAzNw==", "bodyText": "it was useful for proto2 because proto2 has required fields. in proto3, all fields are optional.", "url": "https://github.com/grpc/grpc-java/pull/7010#discussion_r421102037", "createdAt": "2020-05-06T21:25:18Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -1051,8 +1061,14 @@ private void handleCdsResponse(DiscoveryResponse cdsResponse) {\n         }\n         updateBuilder.setLrsServerName(\"\");\n       }\n-      if (cluster.hasTlsContext()) {\n-        updateBuilder.setUpstreamTlsContext(cluster.getTlsContext());\n+      try {\n+        UpstreamTlsContext upstreamTlsContext = getTlsContextFromCluster(cluster);\n+        if (upstreamTlsContext != null && upstreamTlsContext.isInitialized()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAyMTI0MA=="}, "originalCommit": {"oid": "009ae80a13419fff50ab2e11355abafe494dcaa3"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDk1NjcyOnYy", "diffSide": "RIGHT", "path": "xds/src/test/java/io/grpc/xds/EnvoyServerProtoDataTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxOTowMDoyOFrOGRhK-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxOTowMDoyOFrOGRhK-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAyMjQ1Nw==", "bodyText": "this always pass or it won't execute this line. i think you should check size of filterChains", "url": "https://github.com/grpc/grpc-java/pull/7010#discussion_r421022457", "createdAt": "2020-05-06T19:00:28Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/EnvoyServerProtoDataTest.java", "diffHunk": "@@ -93,6 +95,37 @@ public void listener_convertFromListenerProto() {\n     assertThat(tlsCertSdsConfigs.get(0).getName()).isEqualTo(\"google-sds-config-default\");\n   }\n \n+  // TODO(sanjaypujare): remove when we move to envoy protos v3\n+  @Test\n+  public void listener_convertFromDeprecatedListenerProto() throws InvalidProtocolBufferException {\n+    io.envoyproxy.envoy.api.v2.core.Address address =\n+        io.envoyproxy.envoy.api.v2.core.Address.newBuilder()\n+            .setSocketAddress(SocketAddress.newBuilder()\n+                .setPortValue(8000)\n+                .setAddress(\"10.2.1.34\")\n+                .build())\n+            .build();\n+    io.envoyproxy.envoy.api.v2.Listener listener =\n+        io.envoyproxy.envoy.api.v2.Listener.newBuilder()\n+            .setName(\"8000\")\n+            .setAddress(address)\n+            .addFilterChains(createDeprecatedInFilter())\n+            .build();\n+    Listener xdsListener = Listener.fromEnvoyProtoListener(listener);\n+    List<EnvoyServerProtoData.FilterChain> filterChains = xdsListener.getFilterChains();\n+    EnvoyServerProtoData.FilterChain inFilter = filterChains.get(0);\n+    assertThat(inFilter).isNotNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "009ae80a13419fff50ab2e11355abafe494dcaa3"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDk4NDI5OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/EnvoyServerProtoData.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxOTowODowN1rOGRhchg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxOTowODowN1rOGRhchg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAyNjk1MA==", "bodyText": "nit: && should be in front\nif (condition\n    && another_condition) {\n  ...\n}", "url": "https://github.com/grpc/grpc-java/pull/7010#discussion_r421026950", "createdAt": "2020-05-06T19:08:07Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/EnvoyServerProtoData.java", "diffHunk": "@@ -173,13 +176,26 @@ public String toString() {\n     }\n \n     static FilterChain fromEnvoyProtoFilterChain(\n-        io.envoyproxy.envoy.api.v2.listener.FilterChain proto) {\n+        io.envoyproxy.envoy.api.v2.listener.FilterChain proto)\n+        throws InvalidProtocolBufferException {\n       return new FilterChain(\n           FilterChainMatch.fromEnvoyProtoFilterChainMatch(proto.getFilterChainMatch()),\n-          proto.getTlsContext()\n+          getTlsContextFromFilterChain(proto)\n       );\n     }\n \n+    private static DownstreamTlsContext getTlsContextFromFilterChain(\n+        io.envoyproxy.envoy.api.v2.listener.FilterChain filterChain)\n+        throws InvalidProtocolBufferException {\n+      if (filterChain.hasTransportSocket() && \"tls\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "009ae80a13419fff50ab2e11355abafe494dcaa3"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTA2NjY3OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoyMjo1N1rOGSInKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODozNDo1MFrOGSLOqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY2ODY1MQ==", "bodyText": "The ACK should be sent before the information is used.", "url": "https://github.com/grpc/grpc-java/pull/7010#discussion_r421668651", "createdAt": "2020-05-07T17:22:57Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -708,22 +710,30 @@ private void handleLdsResponseForListener(DiscoveryResponse ldsResponse) {\n           ldsResponse.getVersionInfo(), \"Malformed LDS response: \" + e);\n       return;\n     }\n-    adsStream.sendAckRequest(ADS_TYPE_URL_LDS, ImmutableList.<String>of(),\n-        ldsResponse.getVersionInfo());\n     if (requestedListener != null) {\n       if (ldsRespTimer != null) {\n         ldsRespTimer.cancel();\n         ldsRespTimer = null;\n       }\n-      ListenerUpdate listenerUpdate = ListenerUpdate.newBuilder()\n-          .setListener(EnvoyServerProtoData.Listener.fromEnvoyProtoListener(requestedListener))\n-          .build();\n-      listenerWatcher.onListenerChanged(listenerUpdate);\n+      try {\n+        ListenerUpdate listenerUpdate = ListenerUpdate.newBuilder()\n+            .setListener(EnvoyServerProtoData.Listener.fromEnvoyProtoListener(requestedListener))\n+            .build();\n+        listenerWatcher.onListenerChanged(listenerUpdate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9157439509ce079c9f855f25d1eb2bd547d1a9f2"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3ODM5OA==", "bodyText": "Okay, I see what you mean. I'll need to restructure the code so I call \"onListernerChanged\" only after sending the ACK and if there is an exception then send a NACK instead.", "url": "https://github.com/grpc/grpc-java/pull/7010#discussion_r421678398", "createdAt": "2020-05-07T17:39:05Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -708,22 +710,30 @@ private void handleLdsResponseForListener(DiscoveryResponse ldsResponse) {\n           ldsResponse.getVersionInfo(), \"Malformed LDS response: \" + e);\n       return;\n     }\n-    adsStream.sendAckRequest(ADS_TYPE_URL_LDS, ImmutableList.<String>of(),\n-        ldsResponse.getVersionInfo());\n     if (requestedListener != null) {\n       if (ldsRespTimer != null) {\n         ldsRespTimer.cancel();\n         ldsRespTimer = null;\n       }\n-      ListenerUpdate listenerUpdate = ListenerUpdate.newBuilder()\n-          .setListener(EnvoyServerProtoData.Listener.fromEnvoyProtoListener(requestedListener))\n-          .build();\n-      listenerWatcher.onListenerChanged(listenerUpdate);\n+      try {\n+        ListenerUpdate listenerUpdate = ListenerUpdate.newBuilder()\n+            .setListener(EnvoyServerProtoData.Listener.fromEnvoyProtoListener(requestedListener))\n+            .build();\n+        listenerWatcher.onListenerChanged(listenerUpdate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY2ODY1MQ=="}, "originalCommit": {"oid": "9157439509ce079c9f855f25d1eb2bd547d1a9f2"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcwNzUzNA==", "bodyText": "fixed", "url": "https://github.com/grpc/grpc-java/pull/7010#discussion_r421707534", "createdAt": "2020-05-07T18:28:02Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -708,22 +710,30 @@ private void handleLdsResponseForListener(DiscoveryResponse ldsResponse) {\n           ldsResponse.getVersionInfo(), \"Malformed LDS response: \" + e);\n       return;\n     }\n-    adsStream.sendAckRequest(ADS_TYPE_URL_LDS, ImmutableList.<String>of(),\n-        ldsResponse.getVersionInfo());\n     if (requestedListener != null) {\n       if (ldsRespTimer != null) {\n         ldsRespTimer.cancel();\n         ldsRespTimer = null;\n       }\n-      ListenerUpdate listenerUpdate = ListenerUpdate.newBuilder()\n-          .setListener(EnvoyServerProtoData.Listener.fromEnvoyProtoListener(requestedListener))\n-          .build();\n-      listenerWatcher.onListenerChanged(listenerUpdate);\n+      try {\n+        ListenerUpdate listenerUpdate = ListenerUpdate.newBuilder()\n+            .setListener(EnvoyServerProtoData.Listener.fromEnvoyProtoListener(requestedListener))\n+            .build();\n+        listenerWatcher.onListenerChanged(listenerUpdate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY2ODY1MQ=="}, "originalCommit": {"oid": "9157439509ce079c9f855f25d1eb2bd547d1a9f2"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcxMTUyOQ==", "bodyText": "Should also include onResourceDoesNotExit().", "url": "https://github.com/grpc/grpc-java/pull/7010#discussion_r421711529", "createdAt": "2020-05-07T18:34:50Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -708,22 +710,30 @@ private void handleLdsResponseForListener(DiscoveryResponse ldsResponse) {\n           ldsResponse.getVersionInfo(), \"Malformed LDS response: \" + e);\n       return;\n     }\n-    adsStream.sendAckRequest(ADS_TYPE_URL_LDS, ImmutableList.<String>of(),\n-        ldsResponse.getVersionInfo());\n     if (requestedListener != null) {\n       if (ldsRespTimer != null) {\n         ldsRespTimer.cancel();\n         ldsRespTimer = null;\n       }\n-      ListenerUpdate listenerUpdate = ListenerUpdate.newBuilder()\n-          .setListener(EnvoyServerProtoData.Listener.fromEnvoyProtoListener(requestedListener))\n-          .build();\n-      listenerWatcher.onListenerChanged(listenerUpdate);\n+      try {\n+        ListenerUpdate listenerUpdate = ListenerUpdate.newBuilder()\n+            .setListener(EnvoyServerProtoData.Listener.fromEnvoyProtoListener(requestedListener))\n+            .build();\n+        listenerWatcher.onListenerChanged(listenerUpdate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY2ODY1MQ=="}, "originalCommit": {"oid": "9157439509ce079c9f855f25d1eb2bd547d1a9f2"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2666, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}