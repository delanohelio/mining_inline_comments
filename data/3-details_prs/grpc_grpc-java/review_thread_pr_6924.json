{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyOTk4ODEw", "number": 6924, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxOToyMjoyN1rODxye4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNTo0MDoyMFrODx69sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTMzOTIzOnYy", "diffSide": "RIGHT", "path": "xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxOToyMjoyN1rOGFddSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMDozMzoxMlrOGFlsHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM3ODY5Ng==", "bodyText": "this seems very hard / messy to use the SdsNameResolver. Can you do something similar to FakeNameResolver in ManagedChannelImplTest. it is not the best example, but seems simpler than this. also, it is using less resources and provider easier interface to test. Mock should be last option to consider. (e.g. this code can be easily converted to fake impl which will be much shorter and easier to read)", "url": "https://github.com/grpc/grpc-java/pull/6924#discussion_r408378696", "createdAt": "2020-04-14T19:22:27Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java", "diffHunk": "@@ -181,12 +205,38 @@ private static int findFreePort() throws IOException {\n   }\n \n   private SimpleServiceGrpc.SimpleServiceBlockingStub getBlockingStub(\n-      UpstreamTlsContext upstreamTlsContext, String overrideAuthority) {\n-    XdsChannelBuilder builder =\n-        XdsChannelBuilder.forTarget(\"localhost:\" + port).tlsContext(upstreamTlsContext);\n+      final UpstreamTlsContext upstreamTlsContext, String overrideAuthority) {\n+    XdsChannelBuilder builder = XdsChannelBuilder.forTarget(\"sdstest:///localhost:\" + port);\n     if (overrideAuthority != null) {\n       builder = builder.overrideAuthority(overrideAuthority);\n     }\n+    doAnswer(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00f64655885b650e9e821277006a94795893df58"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ3ODkxNg==", "bodyText": "I find doing mock and doAnswer simpler than how ManagedChannelImplTest.FakeNameResolverFactory.FakeNameResolver does it because you mock/construct the required input inline. But I realize this is subjective and if mock is not the preferred pattern for most people I will switch to it.", "url": "https://github.com/grpc/grpc-java/pull/6924#discussion_r408478916", "createdAt": "2020-04-14T22:44:08Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java", "diffHunk": "@@ -181,12 +205,38 @@ private static int findFreePort() throws IOException {\n   }\n \n   private SimpleServiceGrpc.SimpleServiceBlockingStub getBlockingStub(\n-      UpstreamTlsContext upstreamTlsContext, String overrideAuthority) {\n-    XdsChannelBuilder builder =\n-        XdsChannelBuilder.forTarget(\"localhost:\" + port).tlsContext(upstreamTlsContext);\n+      final UpstreamTlsContext upstreamTlsContext, String overrideAuthority) {\n+    XdsChannelBuilder builder = XdsChannelBuilder.forTarget(\"sdstest:///localhost:\" + port);\n     if (overrideAuthority != null) {\n       builder = builder.overrideAuthority(overrideAuthority);\n     }\n+    doAnswer(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM3ODY5Ng=="}, "originalCommit": {"oid": "00f64655885b650e9e821277006a94795893df58"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUwNjgxMQ==", "bodyText": "no, this is not subjective at all.\nmock is definitely anti pattern, in this case it is very easy to not use the mock (even as it is).\nBut the worse part is the TestSdsNameResolver extends the DnsNameResolver for no reason. The actual use case in test will be the interceptor (Callback) intercepts the onResult and returns a fake result. However, because it is a real DnsNameResolver, it uses thread for no reason, it performs IO for no reason. it even can call Listner#onError unless it is localhost (otherwise it will be environment dependent), and therefore it is pretty much localhost only NameResolver. List can goes on and on. Why we do all of those if we can just make a fake NameResolver, expects a URI and returns a specific value or an error?", "url": "https://github.com/grpc/grpc-java/pull/6924#discussion_r408506811", "createdAt": "2020-04-15T00:10:15Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java", "diffHunk": "@@ -181,12 +205,38 @@ private static int findFreePort() throws IOException {\n   }\n \n   private SimpleServiceGrpc.SimpleServiceBlockingStub getBlockingStub(\n-      UpstreamTlsContext upstreamTlsContext, String overrideAuthority) {\n-    XdsChannelBuilder builder =\n-        XdsChannelBuilder.forTarget(\"localhost:\" + port).tlsContext(upstreamTlsContext);\n+      final UpstreamTlsContext upstreamTlsContext, String overrideAuthority) {\n+    XdsChannelBuilder builder = XdsChannelBuilder.forTarget(\"sdstest:///localhost:\" + port);\n     if (overrideAuthority != null) {\n       builder = builder.overrideAuthority(overrideAuthority);\n     }\n+    doAnswer(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM3ODY5Ng=="}, "originalCommit": {"oid": "00f64655885b650e9e821277006a94795893df58"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUxMzU2NQ==", "bodyText": "I wanted to do something more general than only for localhost (assuming it could be useful later) so decided to extend DnsNameResolver to be able to add the \"mock\" attribute for all returned addresses.\nI agree the\nManagedChannelImplTest.FakeNameResolverFactory.FakeNameResolver pattern is less intrusive and easier to understand and I will use it. I will be \"hardcoding\" the localhost -> 127.0.0.1 mapping in my FakeNameResolver. There are cases where the loopback adapter (i.e. 127.0.0.1) is not configured or localhost does not resolve to 127.0.0.1 (but a configured local IP) although very rare - which was another reason I used the DnsNameResolver (\"the environment\").", "url": "https://github.com/grpc/grpc-java/pull/6924#discussion_r408513565", "createdAt": "2020-04-15T00:33:12Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java", "diffHunk": "@@ -181,12 +205,38 @@ private static int findFreePort() throws IOException {\n   }\n \n   private SimpleServiceGrpc.SimpleServiceBlockingStub getBlockingStub(\n-      UpstreamTlsContext upstreamTlsContext, String overrideAuthority) {\n-    XdsChannelBuilder builder =\n-        XdsChannelBuilder.forTarget(\"localhost:\" + port).tlsContext(upstreamTlsContext);\n+      final UpstreamTlsContext upstreamTlsContext, String overrideAuthority) {\n+    XdsChannelBuilder builder = XdsChannelBuilder.forTarget(\"sdstest:///localhost:\" + port);\n     if (overrideAuthority != null) {\n       builder = builder.overrideAuthority(overrideAuthority);\n     }\n+    doAnswer(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM3ODY5Ng=="}, "originalCommit": {"oid": "00f64655885b650e9e821277006a94795893df58"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTQwMTYwOnYy", "diffSide": "RIGHT", "path": "xds/src/test/java/io/grpc/xds/internal/sds/SdsProtocolNegotiatorsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxOTo0MDo0MVrOGFeEKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxOTo0MDo0MVrOGFeEKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM4ODY1MA==", "bodyText": "nit: should be noTlsContext, null is not allowed.", "url": "https://github.com/grpc/grpc-java/pull/6924#discussion_r408388650", "createdAt": "2020-04-14T19:40:41Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/internal/sds/SdsProtocolNegotiatorsTest.java", "diffHunk": "@@ -143,9 +147,8 @@ private static CommonTlsContext getCommonTlsContext(\n   }\n \n   @Test\n-  public void clientSdsProtocolNegotiatorNewHandler_nullTlsContext() {\n-    ClientSdsProtocolNegotiator pn =\n-        new ClientSdsProtocolNegotiator(/* upstreamTlsContext= */ null);\n+  public void clientSdsProtocolNegotiatorNewHandler_nullTlsContextAttribute() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00f64655885b650e9e821277006a94795893df58"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjcyMDM3OnYy", "diffSide": "RIGHT", "path": "xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNTozNjo0NVrOGFqcMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNTozNjo0NVrOGFqcMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5MTQxMA==", "bodyText": "this seems worse than what it used to be. this is not even used elsewhere.", "url": "https://github.com/grpc/grpc-java/pull/6924#discussion_r408591410", "createdAt": "2020-04-15T05:36:45Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java", "diffHunk": "@@ -59,15 +73,23 @@\n \n   @Rule public final GrpcCleanupRule cleanupRule = new GrpcCleanupRule();\n   private int port;\n+  private FakeNameResolverFactory fakeNameResolverFactory;\n+  private XdsChannelBuilder channelBuilder;\n \n   @Before\n-  public void setUp() throws IOException {\n+  public void setUp() throws IOException, URISyntaxException {\n+    MockitoAnnotations.initMocks(this);\n     port = findFreePort();\n+    URI expectedUri = new URI(\"sdstest://localhost:\" + port);\n+    fakeNameResolverFactory = new FakeNameResolverFactory.Builder(expectedUri).build();\n+    channelBuilder =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d93a277423e02d48b3cdaaabb8cbb8c8e9cca62c"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjcyNTE4OnYy", "diffSide": "RIGHT", "path": "xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNTozODo0N1rOGFqe5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNTozODo0N1rOGFqe5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5MjEwMQ==", "bodyText": "nit/java optional suggestion: using ImmutableList is preferred than Collections.singletonList especially if ImmutableList is already imported.", "url": "https://github.com/grpc/grpc-java/pull/6924#discussion_r408592101", "createdAt": "2020-04-15T05:38:47Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java", "diffHunk": "@@ -181,13 +203,21 @@ private static int findFreePort() throws IOException {\n   }\n \n   private SimpleServiceGrpc.SimpleServiceBlockingStub getBlockingStub(\n-      UpstreamTlsContext upstreamTlsContext, String overrideAuthority) {\n-    XdsChannelBuilder builder =\n-        XdsChannelBuilder.forTarget(\"localhost:\" + port).tlsContext(upstreamTlsContext);\n+      final UpstreamTlsContext upstreamTlsContext, String overrideAuthority) {\n     if (overrideAuthority != null) {\n-      builder = builder.overrideAuthority(overrideAuthority);\n+      channelBuilder = channelBuilder.overrideAuthority(overrideAuthority);\n     }\n-    return SimpleServiceGrpc.newBlockingStub(cleanupRule.register(builder.build()));\n+    InetSocketAddress socketAddress =\n+        new InetSocketAddress(Inet4Address.getLoopbackAddress(), port);\n+    Attributes attrs =\n+        (upstreamTlsContext != null)\n+            ? Attributes.newBuilder()\n+                .set(XdsAttributes.ATTR_UPSTREAM_TLS_CONTEXT, upstreamTlsContext)\n+                .build()\n+            : Attributes.EMPTY;\n+    fakeNameResolverFactory.setServers(\n+        Collections.singletonList(new EquivalentAddressGroup(socketAddress, attrs)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d93a277423e02d48b3cdaaabb8cbb8c8e9cca62c"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjcyNjc5OnYy", "diffSide": "RIGHT", "path": "xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNTozOToyM1rOGFqfyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNTozOToyM1rOGFqfyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5MjMyOQ==", "bodyText": "this doesn't match to sdstest", "url": "https://github.com/grpc/grpc-java/pull/6924#discussion_r408592329", "createdAt": "2020-04-15T05:39:23Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java", "diffHunk": "@@ -210,4 +240,121 @@ public void unaryRpc(SimpleRequest req, StreamObserver<SimpleResponse> responseO\n       responseObserver.onCompleted();\n     }\n   }\n+\n+  private static final class FakeNameResolverFactory extends NameResolver.Factory {\n+    final URI expectedUri;\n+    List<EquivalentAddressGroup> servers = ImmutableList.of();\n+    final boolean resolvedAtStart;\n+    final Status error;\n+    final ArrayList<FakeNameResolver> resolvers = new ArrayList<>();\n+    final AtomicReference<ConfigOrError> nextConfigOrError = new AtomicReference<>();\n+\n+    FakeNameResolverFactory(URI expectedUri, boolean resolvedAtStart, Status error) {\n+      this.expectedUri = expectedUri;\n+      this.resolvedAtStart = resolvedAtStart;\n+      this.error = error;\n+    }\n+\n+    void setServers(List<EquivalentAddressGroup> servers) {\n+      this.servers = servers;\n+    }\n+\n+    @Override\n+    public NameResolver newNameResolver(final URI targetUri, NameResolver.Args args) {\n+      if (!expectedUri.equals(targetUri)) {\n+        return null;\n+      }\n+      FakeNameResolver resolver = new FakeNameResolver(error);\n+      resolvers.add(resolver);\n+      return resolver;\n+    }\n+\n+    @Override\n+    public String getDefaultScheme() {\n+      return \"fake\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d93a277423e02d48b3cdaaabb8cbb8c8e9cca62c"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjcyODgwOnYy", "diffSide": "RIGHT", "path": "xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNTo0MDoyMFrOGFqg6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNTo0MDoyMFrOGFqg6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5MjYxNg==", "bodyText": "you can remove unused code. private unused code is dead code.", "url": "https://github.com/grpc/grpc-java/pull/6924#discussion_r408592616", "createdAt": "2020-04-15T05:40:20Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java", "diffHunk": "@@ -210,4 +240,121 @@ public void unaryRpc(SimpleRequest req, StreamObserver<SimpleResponse> responseO\n       responseObserver.onCompleted();\n     }\n   }\n+\n+  private static final class FakeNameResolverFactory extends NameResolver.Factory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d93a277423e02d48b3cdaaabb8cbb8c8e9cca62c"}, "originalPosition": 142}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2796, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}