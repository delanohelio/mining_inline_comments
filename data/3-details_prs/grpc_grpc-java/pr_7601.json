{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3MDQyNTUw", "number": 7601, "title": "Add ServerCredentials", "bodyText": "This is very similar to the ChannelCredentials, except easier all around. The changes are split up similar to before, and most of it should feel very familiar.", "createdAt": "2020-11-07T00:39:52Z", "url": "https://github.com/grpc/grpc-java/pull/7601", "merged": true, "mergeCommit": {"oid": "ddd5dea7e9a5220bdb1780f7150268a159cc9e1b"}, "closed": true, "closedAt": "2020-11-13T19:13:34Z", "author": {"login": "ejona86"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABda3yCdAFqTUyNjQ2MTU5MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdcKL8ugBqjM5OTQzOTM1OTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NDYxNTkx", "url": "https://github.com/grpc/grpc-java/pull/7601#pullrequestreview-526461591", "createdAt": "2020-11-09T16:58:42Z", "commit": {"oid": "339ee8bb09fa15f9a9317d906b0ba3978dc1c8e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNjo1ODo0MlrOHv4a5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNjo1ODo0MlrOHv4a5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk2OTUxMQ==", "bodyText": "This changes the behavior, right? Instead of failing each call now we fail protocol negotiation i.e. just once at the beginning of channel creation. I am okay with that but wondering about backward compatibility for error behavior.", "url": "https://github.com/grpc/grpc-java/pull/7601#discussion_r519969511", "createdAt": "2020-11-09T16:58:42Z", "author": {"login": "sanjaypujare"}, "path": "alts/src/main/java/io/grpc/alts/AltsServerBuilder.java", "diffHunk": "@@ -172,40 +154,7 @@ public AltsServerBuilder intercept(ServerInterceptor interceptor) {\n   /** {@inheritDoc} */\n   @Override\n   public Server build() {\n-    if (!CheckGcpEnvironment.isOnGcp()) {\n-      if (enableUntrustedAlts) {\n-        logger.log(\n-            Level.WARNING,\n-            \"Untrusted ALTS mode is enabled and we cannot guarantee the trustworthiness of the \"\n-                + \"ALTS handshaker service\");\n-      } else {\n-        Status status =\n-            Status.INTERNAL.withDescription(\"ALTS is only allowed to run on Google Cloud Platform\");\n-        delegate.intercept(new FailingServerInterceptor(status));\n-      }\n-    }\n-\n-    delegate.protocolNegotiator(\n-        AltsProtocolNegotiator.serverAltsProtocolNegotiator(handshakerChannelPool));\n+    delegate.protocolNegotiator(credentialsBuilder.buildProtocolNegotiator());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "339ee8bb09fa15f9a9317d906b0ba3978dc1c8e9"}, "originalPosition": 87}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NDc3NTA3", "url": "https://github.com/grpc/grpc-java/pull/7601#pullrequestreview-526477507", "createdAt": "2020-11-09T17:16:06Z", "commit": {"oid": "339ee8bb09fa15f9a9317d906b0ba3978dc1c8e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzoxNjowN1rOHv5KdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzoxNjowN1rOHv5KdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk4MTY4NA==", "bodyText": "Not part of this PR but would \"... default server provider.\" be more accurate?", "url": "https://github.com/grpc/grpc-java/pull/7601#discussion_r519981684", "createdAt": "2020-11-09T17:16:07Z", "author": {"login": "sanjaypujare"}, "path": "api/src/main/java/io/grpc/ServerProvider.java", "diffHunk": "@@ -34,28 +33,13 @@\n  */\n @Internal\n public abstract class ServerProvider {\n-  private static final ServerProvider provider = ServiceProviders.load(\n-      ServerProvider.class,\n-      Collections.<Class<?>>emptyList(),\n-      ServerProvider.class.getClassLoader(),\n-      new PriorityAccessor<ServerProvider>() {\n-        @Override\n-        public boolean isAvailable(ServerProvider provider) {\n-          return provider.isAvailable();\n-        }\n-\n-        @Override\n-        public int getPriority(ServerProvider provider) {\n-          return provider.priority();\n-        }\n-      });\n-\n   /**\n    * Returns the ClassLoader-wide default server.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "339ee8bb09fa15f9a9317d906b0ba3978dc1c8e9"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NDg1NTc0", "url": "https://github.com/grpc/grpc-java/pull/7601#pullrequestreview-526485574", "createdAt": "2020-11-09T17:25:50Z", "commit": {"oid": "339ee8bb09fa15f9a9317d906b0ba3978dc1c8e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzoyNTo1MVrOHv5jZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzoyNTo1MVrOHv5jZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk4ODA3MQ==", "bodyText": "If we have plans to support binding to a specific IP address, would it make sense to add another method here, like\npublic static ServerBuilder<?> newServerBuilderForPort(String listeningIpAddress, int port, ServerCredentials creds)\n\nFor now we can throw \"UnsupportedOperationException\" for any listeningIpAddress that's not IP_ANY but we at least have the API defined now. And later we can add proper support.\nI think other gRPC languages (C++, Go) do support a server binding to a specific IP address IIRC.", "url": "https://github.com/grpc/grpc-java/pull/7601#discussion_r519988071", "createdAt": "2020-11-09T17:25:51Z", "author": {"login": "sanjaypujare"}, "path": "api/src/main/java/io/grpc/Grpc.java", "diffHunk": "@@ -124,4 +124,15 @@ private static String authorityFromHostAndPort(String host, int port) {\n       throw new IllegalArgumentException(\"Invalid host or port: \" + host + \" \" + port, ex);\n     }\n   }\n+\n+  /**\n+   * Static factory for creating a new ServerBuilder.\n+   *\n+   * @param port the port to listen on\n+   * @param creds the server identity\n+   */\n+  @ExperimentalApi(\"TODO\")\n+  public static ServerBuilder<?> newServerBuilderForPort(int port, ServerCredentials creds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "339ee8bb09fa15f9a9317d906b0ba3978dc1c8e9"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NDk1NzQy", "url": "https://github.com/grpc/grpc-java/pull/7601#pullrequestreview-526495742", "createdAt": "2020-11-09T17:38:01Z", "commit": {"oid": "339ee8bb09fa15f9a9317d906b0ba3978dc1c8e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzozODowMVrOHv6DFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzozODowMVrOHv6DFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk5NjE4MQ==", "bodyText": "So we have already made changes to use InetSocketAddress instead of just port. This would make it easy to expose IP address binding in external APIs. So if that is planned for a future PR that sounds good.", "url": "https://github.com/grpc/grpc-java/pull/7601#discussion_r519996181", "createdAt": "2020-11-09T17:38:01Z", "author": {"login": "sanjaypujare"}, "path": "netty/src/main/java/io/grpc/netty/NettyServerProvider.java", "diffHunk": "@@ -38,5 +39,15 @@ protected int priority() {\n   protected NettyServerBuilder builderForPort(int port) {\n     return NettyServerBuilder.forPort(port);\n   }\n+\n+  @Override\n+  protected NewServerBuilderResult newServerBuilderForPort(int port, ServerCredentials creds) {\n+    ProtocolNegotiators.FromServerCredentialsResult result = ProtocolNegotiators.from(creds);\n+    if (result.error != null) {\n+      return NewServerBuilderResult.error(result.error);\n+    }\n+    return NewServerBuilderResult.serverBuilder(\n+        new NettyServerBuilder(new InetSocketAddress(port), result.negotiator));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "339ee8bb09fa15f9a9317d906b0ba3978dc1c8e9"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDA5Mjk1", "url": "https://github.com/grpc/grpc-java/pull/7601#pullrequestreview-527409295", "createdAt": "2020-11-10T16:55:40Z", "commit": {"oid": "339ee8bb09fa15f9a9317d906b0ba3978dc1c8e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjo1NTo0MFrOHwmGeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjo1NTo0MFrOHwmGeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcxNzk0NA==", "bodyText": "Should we also have an XdsServerProvider and be part of this registry? Without that  Grpc.newServerBuilderForPort cannot be used to build an XdsServer right?", "url": "https://github.com/grpc/grpc-java/pull/7601#discussion_r520717944", "createdAt": "2020-11-10T16:55:40Z", "author": {"login": "sanjaypujare"}, "path": "api/src/main/java/io/grpc/ServerRegistry.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * Registry of {@link ServerProvider}s. The {@link #getDefaultRegistry default instance} loads", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "339ee8bb09fa15f9a9317d906b0ba3978dc1c8e9"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDIxMTEz", "url": "https://github.com/grpc/grpc-java/pull/7601#pullrequestreview-527421113", "createdAt": "2020-11-10T17:08:05Z", "commit": {"oid": "339ee8bb09fa15f9a9317d906b0ba3978dc1c8e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzowODowNVrOHwmo-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzowODowNVrOHwmo-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcyNjc3Nw==", "bodyText": "PKCS#8 or later?", "url": "https://github.com/grpc/grpc-java/pull/7601#discussion_r520726777", "createdAt": "2020-11-10T17:08:05Z", "author": {"login": "sanjaypujare"}, "path": "api/src/main/java/io/grpc/TlsServerCredentials.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc;\n+\n+import com.google.common.io.ByteStreams;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+/**\n+ * TLS credentials, providing server identity and encryption. Consumers of this credential must\n+ * verify they understand the configuration via the {@link #incomprehensible incomprehensible()}\n+ * method. Unless overridden by a {@code Feature}, server identity is provided via {@link\n+ * #getCertificateChain}, {@link #getPrivateKey}, and {@link #getPrivateKeyPassword}.\n+ */\n+@ExperimentalApi(\"TODO\")\n+public final class TlsServerCredentials extends ServerCredentials {\n+  /**\n+   * Creates an instance using provided certificate chain and private key. Generally they should be\n+   * PEM-encoded and the key is an unencrypted PKCS#8 key (file headers have \"BEGIN CERTIFICATE\" and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "339ee8bb09fa15f9a9317d906b0ba3978dc1c8e9"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDMyNDgw", "url": "https://github.com/grpc/grpc-java/pull/7601#pullrequestreview-527432480", "createdAt": "2020-11-10T17:20:30Z", "commit": {"oid": "339ee8bb09fa15f9a9317d906b0ba3978dc1c8e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoyMDozMFrOHwnLXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoyMDozMFrOHwnLXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDczNTU4MA==", "bodyText": "Here you don't actually create/manage javax.net.ssl.KeyManager instances so keyManager is a bit misleading but is this to mirror SslContextBuilder usage?", "url": "https://github.com/grpc/grpc-java/pull/7601#discussion_r520735580", "createdAt": "2020-11-10T17:20:30Z", "author": {"login": "sanjaypujare"}, "path": "api/src/main/java/io/grpc/TlsServerCredentials.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc;\n+\n+import com.google.common.io.ByteStreams;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+/**\n+ * TLS credentials, providing server identity and encryption. Consumers of this credential must\n+ * verify they understand the configuration via the {@link #incomprehensible incomprehensible()}\n+ * method. Unless overridden by a {@code Feature}, server identity is provided via {@link\n+ * #getCertificateChain}, {@link #getPrivateKey}, and {@link #getPrivateKeyPassword}.\n+ */\n+@ExperimentalApi(\"TODO\")\n+public final class TlsServerCredentials extends ServerCredentials {\n+  /**\n+   * Creates an instance using provided certificate chain and private key. Generally they should be\n+   * PEM-encoded and the key is an unencrypted PKCS#8 key (file headers have \"BEGIN CERTIFICATE\" and\n+   * \"BEGIN PRIVATE KEY\").\n+   */\n+  public static ServerCredentials create(File certChain, File privateKey) throws IOException {\n+    return newBuilder().keyManager(certChain, privateKey).build();\n+  }\n+\n+  /**\n+   * Creates an instance using provided certificate chain and private key. Generally they should be\n+   * PEM-encoded and the key is an unencrypted PKCS#8 key (file headers have \"BEGIN CERTIFICATE\" and\n+   * \"BEGIN PRIVATE KEY\").\n+   *\n+   * <p>The streams will not be automatically closed.\n+   */\n+  public static ServerCredentials create(\n+      InputStream certChain, InputStream privateKey) throws IOException {\n+    return newBuilder().keyManager(certChain, privateKey).build();\n+  }\n+\n+  private final boolean fakeFeature;\n+  private final byte[] certificateChain;\n+  private final byte[] privateKey;\n+  private final String privateKeyPassword;\n+\n+  TlsServerCredentials(Builder builder) {\n+    fakeFeature = builder.fakeFeature;\n+    certificateChain = builder.certificateChain;\n+    privateKey = builder.privateKey;\n+    privateKeyPassword = builder.privateKeyPassword;\n+  }\n+\n+  /**\n+   * The certificate chain, as a new byte array. Generally should be PEM-encoded.\n+   */\n+  public byte[] getCertificateChain() {\n+    return Arrays.copyOf(certificateChain, certificateChain.length);\n+  }\n+\n+  /**\n+   * The private key, as a new byte array. Generally should be in PKCS#8 format. If encrypted,\n+   * {@link #getPrivateKeyPassword} is the decryption key. If unencrypted, the password must be\n+   * {@code null}.\n+   */\n+  public byte[] getPrivateKey() {\n+    return Arrays.copyOf(privateKey, privateKey.length);\n+  }\n+\n+  /** Returns the password to decrypt the private key, or {@code null} if unencrypted. */\n+  public String getPrivateKeyPassword() {\n+    return privateKeyPassword;\n+  }\n+\n+  /**\n+   * Returns an empty set if this credential can be adequately understood via\n+   * the features listed, otherwise returns a hint of features that are lacking\n+   * to understand the configuration to be used for manual debugging.\n+   *\n+   * <p>An \"understood\" feature does not imply the caller is able to fully\n+   * handle the feature. It simply means the caller understands the feature\n+   * enough to use the appropriate APIs to read the configuration. The caller\n+   * may support just a subset of a feature, in which case the caller would\n+   * need to look at the configuration to determine if only the supported\n+   * subset is used.\n+   *\n+   * <p>This method may not be as simple as a set difference. There may be\n+   * multiple features that can independently satisfy a piece of configuration.\n+   * If the configuration is incomprehensible, all such features would be\n+   * returned, even though only one may be necessary.\n+   *\n+   * <p>An empty set does not imply that the credentials are fully understood.\n+   * There may be optional configuration that can be ignored if not understood.\n+   *\n+   * <p>Since {@code Feature} is an {@code enum}, {@code understoodFeatures}\n+   * should generally be an {@link java.util.EnumSet}. {@code\n+   * understoodFeatures} will not be modified.\n+   *\n+   * @param understoodFeatures the features understood by the caller\n+   * @return empty set if the caller can adequately understand the configuration\n+   */\n+  public Set<Feature> incomprehensible(Set<Feature> understoodFeatures) {\n+    Set<Feature> incomprehensible = EnumSet.noneOf(Feature.class);\n+    if (fakeFeature) {\n+      requiredFeature(understoodFeatures, incomprehensible, Feature.FAKE);\n+    }\n+    return Collections.unmodifiableSet(incomprehensible);\n+  }\n+\n+  private static void requiredFeature(\n+      Set<Feature> understoodFeatures, Set<Feature> incomprehensible, Feature feature) {\n+    if (!understoodFeatures.contains(feature)) {\n+      incomprehensible.add(feature);\n+    }\n+  }\n+\n+  /**\n+   * Features to understand TLS configuration. Additional enum values may be added in the future.\n+   */\n+  public enum Feature {\n+    /**\n+     * A feature that no consumer should understand. It should be used for unit testing to confirm\n+     * a call to {@link #incomprehensible incomprehensible()} is implemented properly.\n+     */\n+    FAKE,\n+    ;\n+  }\n+\n+  /** Creates a builder for changing default configuration. */\n+  public static Builder newBuilder() {\n+    return new Builder();\n+  }\n+\n+  /** Builder for {@link TlsServerCredentials}. */\n+  @ExperimentalApi(\"TODO\")\n+  public static final class Builder {\n+    private boolean fakeFeature;\n+    private byte[] certificateChain;\n+    private byte[] privateKey;\n+    private String privateKeyPassword;\n+\n+    private Builder() {}\n+\n+    /**\n+     * Requires {@link Feature#FAKE} to be understood. For use in testing consumers of this\n+     * credential.\n+     */\n+    public Builder requireFakeFeature() {\n+      fakeFeature = true;\n+      return this;\n+    }\n+\n+    /**\n+     * Creates an instance using provided certificate chain and private key. Generally they should\n+     * be PEM-encoded and the key is an unencrypted PKCS#8 key (file headers have \"BEGIN\n+     * CERTIFICATE\" and \"BEGIN PRIVATE KEY\").\n+     */\n+    public Builder keyManager(File certChain, File privateKey) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "339ee8bb09fa15f9a9317d906b0ba3978dc1c8e9"}, "originalPosition": 174}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDM0Njg4", "url": "https://github.com/grpc/grpc-java/pull/7601#pullrequestreview-527434688", "createdAt": "2020-11-10T17:23:01Z", "commit": {"oid": "339ee8bb09fa15f9a9317d906b0ba3978dc1c8e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoyMzowMlrOHwnR5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoyMzowMlrOHwnR5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDczNzI1Mg==", "bodyText": "For this and the InputStream version, why not also support the privateKeyPassword param (since the Builder already supports it)", "url": "https://github.com/grpc/grpc-java/pull/7601#discussion_r520737252", "createdAt": "2020-11-10T17:23:02Z", "author": {"login": "sanjaypujare"}, "path": "api/src/main/java/io/grpc/TlsServerCredentials.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc;\n+\n+import com.google.common.io.ByteStreams;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+/**\n+ * TLS credentials, providing server identity and encryption. Consumers of this credential must\n+ * verify they understand the configuration via the {@link #incomprehensible incomprehensible()}\n+ * method. Unless overridden by a {@code Feature}, server identity is provided via {@link\n+ * #getCertificateChain}, {@link #getPrivateKey}, and {@link #getPrivateKeyPassword}.\n+ */\n+@ExperimentalApi(\"TODO\")\n+public final class TlsServerCredentials extends ServerCredentials {\n+  /**\n+   * Creates an instance using provided certificate chain and private key. Generally they should be\n+   * PEM-encoded and the key is an unencrypted PKCS#8 key (file headers have \"BEGIN CERTIFICATE\" and\n+   * \"BEGIN PRIVATE KEY\").\n+   */\n+  public static ServerCredentials create(File certChain, File privateKey) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "339ee8bb09fa15f9a9317d906b0ba3978dc1c8e9"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDQ1NjIx", "url": "https://github.com/grpc/grpc-java/pull/7601#pullrequestreview-527445621", "createdAt": "2020-11-10T17:35:25Z", "commit": {"oid": "339ee8bb09fa15f9a9317d906b0ba3978dc1c8e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzozNToyNlrOHwnzBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzozNToyNlrOHwnzBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc0NTczMw==", "bodyText": "Why does the getter have the comment \"If unencrypted, the password must be null\" ? Shouldn't it be on the setter side?", "url": "https://github.com/grpc/grpc-java/pull/7601#discussion_r520745733", "createdAt": "2020-11-10T17:35:26Z", "author": {"login": "sanjaypujare"}, "path": "api/src/main/java/io/grpc/TlsServerCredentials.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc;\n+\n+import com.google.common.io.ByteStreams;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+/**\n+ * TLS credentials, providing server identity and encryption. Consumers of this credential must\n+ * verify they understand the configuration via the {@link #incomprehensible incomprehensible()}\n+ * method. Unless overridden by a {@code Feature}, server identity is provided via {@link\n+ * #getCertificateChain}, {@link #getPrivateKey}, and {@link #getPrivateKeyPassword}.\n+ */\n+@ExperimentalApi(\"TODO\")\n+public final class TlsServerCredentials extends ServerCredentials {\n+  /**\n+   * Creates an instance using provided certificate chain and private key. Generally they should be\n+   * PEM-encoded and the key is an unencrypted PKCS#8 key (file headers have \"BEGIN CERTIFICATE\" and\n+   * \"BEGIN PRIVATE KEY\").\n+   */\n+  public static ServerCredentials create(File certChain, File privateKey) throws IOException {\n+    return newBuilder().keyManager(certChain, privateKey).build();\n+  }\n+\n+  /**\n+   * Creates an instance using provided certificate chain and private key. Generally they should be\n+   * PEM-encoded and the key is an unencrypted PKCS#8 key (file headers have \"BEGIN CERTIFICATE\" and\n+   * \"BEGIN PRIVATE KEY\").\n+   *\n+   * <p>The streams will not be automatically closed.\n+   */\n+  public static ServerCredentials create(\n+      InputStream certChain, InputStream privateKey) throws IOException {\n+    return newBuilder().keyManager(certChain, privateKey).build();\n+  }\n+\n+  private final boolean fakeFeature;\n+  private final byte[] certificateChain;\n+  private final byte[] privateKey;\n+  private final String privateKeyPassword;\n+\n+  TlsServerCredentials(Builder builder) {\n+    fakeFeature = builder.fakeFeature;\n+    certificateChain = builder.certificateChain;\n+    privateKey = builder.privateKey;\n+    privateKeyPassword = builder.privateKeyPassword;\n+  }\n+\n+  /**\n+   * The certificate chain, as a new byte array. Generally should be PEM-encoded.\n+   */\n+  public byte[] getCertificateChain() {\n+    return Arrays.copyOf(certificateChain, certificateChain.length);\n+  }\n+\n+  /**\n+   * The private key, as a new byte array. Generally should be in PKCS#8 format. If encrypted,\n+   * {@link #getPrivateKeyPassword} is the decryption key. If unencrypted, the password must be", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "339ee8bb09fa15f9a9317d906b0ba3978dc1c8e9"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDQ5MTA3", "url": "https://github.com/grpc/grpc-java/pull/7601#pullrequestreview-527449107", "createdAt": "2020-11-10T17:39:37Z", "commit": {"oid": "339ee8bb09fa15f9a9317d906b0ba3978dc1c8e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzozOTozOFrOHwn9tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzozOTozOFrOHwn9tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc0ODQ3MQ==", "bodyText": "unavilable -> unavailable", "url": "https://github.com/grpc/grpc-java/pull/7601#discussion_r520748471", "createdAt": "2020-11-10T17:39:38Z", "author": {"login": "sanjaypujare"}, "path": "api/src/test/java/io/grpc/ServerRegistryTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.junit.Assert.fail;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/** Unit tests for {@link ServerRegistry}. */\n+@RunWith(JUnit4.class)\n+public class ServerRegistryTest {\n+  private int port = 123;\n+  private ServerCredentials creds = new ServerCredentials() {};\n+\n+  @Test\n+  public void register_unavilableProviderThrows() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "339ee8bb09fa15f9a9317d906b0ba3978dc1c8e9"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDc1NjIx", "url": "https://github.com/grpc/grpc-java/pull/7601#pullrequestreview-527475621", "createdAt": "2020-11-10T18:12:11Z", "commit": {"oid": "339ee8bb09fa15f9a9317d906b0ba3978dc1c8e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxMjoxMVrOHwpORw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxMjoxMVrOHwpORw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2OTA5NQ==", "bodyText": "Instead of throwing an exception here, why not return a result with the error? This exception could be because of bad input arguments too.", "url": "https://github.com/grpc/grpc-java/pull/7601#discussion_r520769095", "createdAt": "2020-11-10T18:12:11Z", "author": {"login": "sanjaypujare"}, "path": "netty/src/main/java/io/grpc/netty/ProtocolNegotiators.java", "diffHunk": "@@ -167,6 +175,72 @@ public FromChannelCredentialsResult withCallCredentials(CallCredentials callCred\n     }\n   }\n \n+  public static FromServerCredentialsResult from(ServerCredentials creds) {\n+    if (creds instanceof TlsServerCredentials) {\n+      TlsServerCredentials tlsCreds = (TlsServerCredentials) creds;\n+      Set<TlsServerCredentials.Feature> incomprehensible =\n+          tlsCreds.incomprehensible(understoodServerTlsFeatures);\n+      if (!incomprehensible.isEmpty()) {\n+        return FromServerCredentialsResult.error(\n+            \"TLS features not understood: \" + incomprehensible);\n+      }\n+      SslContextBuilder builder = GrpcSslContexts.forServer(\n+          new ByteArrayInputStream(tlsCreds.getCertificateChain()),\n+          new ByteArrayInputStream(tlsCreds.getPrivateKey()),\n+          tlsCreds.getPrivateKeyPassword());\n+      SslContext sslContext;\n+      try {\n+        sslContext = builder.build();\n+      } catch (SSLException ex) {\n+        throw new RuntimeException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "339ee8bb09fa15f9a9317d906b0ba3978dc1c8e9"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NTAwODYy", "url": "https://github.com/grpc/grpc-java/pull/7601#pullrequestreview-527500862", "createdAt": "2020-11-10T18:40:17Z", "commit": {"oid": "339ee8bb09fa15f9a9317d906b0ba3978dc1c8e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODo0MDoxN1rOHwqMlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODo0MDoxN1rOHwqMlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc4NTA0Ng==", "bodyText": "The default is plaintext for this server builder. Should we have an explicit useInsecure or usePlaintext similar to other use cases? I understand there is a backward compatibility issue (and not really related to this PR).", "url": "https://github.com/grpc/grpc-java/pull/7601#discussion_r520785046", "createdAt": "2020-11-10T18:40:17Z", "author": {"login": "sanjaypujare"}, "path": "netty/src/main/java/io/grpc/netty/NettyServerBuilder.java", "diffHunk": "@@ -631,23 +661,31 @@ NettyServerBuilder setTransportTracerFactory(\n \n   @Override\n   public NettyServerBuilder useTransportSecurity(File certChain, File privateKey) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "339ee8bb09fa15f9a9317d906b0ba3978dc1c8e9"}, "originalPosition": 148}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NTA2ODky", "url": "https://github.com/grpc/grpc-java/pull/7601#pullrequestreview-527506892", "createdAt": "2020-11-10T18:46:18Z", "commit": {"oid": "339ee8bb09fa15f9a9317d906b0ba3978dc1c8e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODo0NjoxOFrOHwqfQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODo0NjoxOFrOHwqfQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc4OTgyNg==", "bodyText": "This is calling the create(ProtocolNegotiator negotiator) instead of  create(ProtocolNegotiator.ServerFactory negotiator) to match the NettySslContextChannelCredentials behavior. Not sure by design or...", "url": "https://github.com/grpc/grpc-java/pull/7601#discussion_r520789826", "createdAt": "2020-11-10T18:46:18Z", "author": {"login": "sanjaypujare"}, "path": "netty/src/main/java/io/grpc/netty/NettySslContextServerCredentials.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.netty;\n+\n+import com.google.common.base.Preconditions;\n+import io.grpc.ExperimentalApi;\n+import io.grpc.ServerCredentials;\n+import io.netty.handler.ssl.SslContext;\n+\n+/** A credential that performs TLS with Netty's SslContext as configuration. */\n+@ExperimentalApi(\"There is no plan to make this API stable, given transport API instability\")\n+public final class NettySslContextServerCredentials {\n+  private NettySslContextServerCredentials() {}\n+\n+  /**\n+   * Create a credential using Netty's SslContext as configuration. It must have been configured\n+   * with {@link GrpcSslContexts}, but options could have been overridden.\n+   */\n+  public static ServerCredentials create(SslContext sslContext) {\n+    Preconditions.checkArgument(sslContext.isServer(),\n+        \"Client SSL context can not be used for server\");\n+    GrpcSslContexts.ensureAlpnAndH2Enabled(sslContext.applicationProtocolNegotiator());\n+    return NettyServerCredentials.create(ProtocolNegotiators.serverTls(sslContext));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "339ee8bb09fa15f9a9317d906b0ba3978dc1c8e9"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5ODI0MzQ5", "url": "https://github.com/grpc/grpc-java/pull/7601#pullrequestreview-529824349", "createdAt": "2020-11-13T07:25:32Z", "commit": {"oid": "01b991985ccef6eba8aa78a993274680de6e24a5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNzoyNTozMlrOHygltw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNzoyNTozMlrOHygltw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjcyNDc5MQ==", "bodyText": "Just a reminder to replace with the issue link", "url": "https://github.com/grpc/grpc-java/pull/7601#discussion_r522724791", "createdAt": "2020-11-13T07:25:32Z", "author": {"login": "sanjaypujare"}, "path": "api/src/main/java/io/grpc/ChoiceServerCredentials.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Provides a list of {@link ServerCredentials}, where any one may be used. The credentials are in\n+ * preference order.\n+ */\n+@ExperimentalApi(\"TODO\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01b991985ccef6eba8aa78a993274680de6e24a5"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwMjE2Mzkx", "url": "https://github.com/grpc/grpc-java/pull/7601#pullrequestreview-530216391", "createdAt": "2020-11-13T16:38:16Z", "commit": {"oid": "01b991985ccef6eba8aa78a993274680de6e24a5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72f402780339754503c7d30d3cce05bb5a07cd0b", "author": {"user": {"login": "ejona86", "name": "Eric Anderson"}}, "url": "https://github.com/grpc/grpc-java/commit/72f402780339754503c7d30d3cce05bb5a07cd0b", "committedDate": "2020-11-13T16:57:51Z", "message": "api: Add ServerCredentials"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8fbfb28db319128e6e8662d03cd3a85b4070044", "author": {"user": {"login": "ejona86", "name": "Eric Anderson"}}, "url": "https://github.com/grpc/grpc-java/commit/c8fbfb28db319128e6e8662d03cd3a85b4070044", "committedDate": "2020-11-13T16:57:51Z", "message": "netty: Add ServerCredentials"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2261227d825da930c7dae1e48c1358f1d991d5d4", "author": {"user": {"login": "ejona86", "name": "Eric Anderson"}}, "url": "https://github.com/grpc/grpc-java/commit/2261227d825da930c7dae1e48c1358f1d991d5d4", "committedDate": "2020-11-13T16:57:51Z", "message": "alts: Add ServerCredentials"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0137cc5a26a0c22becac6dee85e803094571119", "author": {"user": {"login": "ejona86", "name": "Eric Anderson"}}, "url": "https://github.com/grpc/grpc-java/commit/c0137cc5a26a0c22becac6dee85e803094571119", "committedDate": "2020-11-13T16:57:51Z", "message": "Migrate callers to ServerCredentials"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "01b991985ccef6eba8aa78a993274680de6e24a5", "author": {"user": {"login": "ejona86", "name": "Eric Anderson"}}, "url": "https://github.com/grpc/grpc-java/commit/01b991985ccef6eba8aa78a993274680de6e24a5", "committedDate": "2020-11-12T20:22:31Z", "message": "netty: use server factory consistently; use IllegalArgumentException"}, "afterCommit": {"oid": "c0137cc5a26a0c22becac6dee85e803094571119", "author": {"user": {"login": "ejona86", "name": "Eric Anderson"}}, "url": "https://github.com/grpc/grpc-java/commit/c0137cc5a26a0c22becac6dee85e803094571119", "committedDate": "2020-11-13T16:57:51Z", "message": "Migrate callers to ServerCredentials"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3974, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}