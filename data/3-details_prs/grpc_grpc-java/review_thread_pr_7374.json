{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1MDEyNTQw", "number": 7374, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjoyNzozMlrOEhwZqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjo0OToyOVrOEhxIPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODMxNDY0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/grpc/internal/ClientCallImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjoyNzozMlrOHPP20g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODo1OTo0MFrOHPVlYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc1MDQ4Mg==", "bodyText": "As discussed previously, let's keep this interface the same and pass the MethodInfo via CallOptions. (It is fine to continue using the separate keys like RETRY_POLICY_KEY for this PR, but long-term we'll swap to a single call option.)", "url": "https://github.com/grpc/grpc-java/pull/7374#discussion_r485750482", "createdAt": "2020-09-09T16:27:32Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/internal/ClientCallImpl.java", "diffHunk": "@@ -154,7 +160,8 @@ ClientStream newStream(\n         MethodDescriptor<?, ?> method,\n         CallOptions callOptions,\n         Metadata headers,\n-        Context context);\n+        Context context,\n+        @Nullable MethodInfo methodInfo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "608e2301aba5e49fd9adafc55621bd9e5ce14c80"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0NDMyMQ==", "bodyText": "Done.", "url": "https://github.com/grpc/grpc-java/pull/7374#discussion_r485844321", "createdAt": "2020-09-09T18:59:40Z", "author": {"login": "dapengzhang0"}, "path": "core/src/main/java/io/grpc/internal/ClientCallImpl.java", "diffHunk": "@@ -154,7 +160,8 @@ ClientStream newStream(\n         MethodDescriptor<?, ?> method,\n         CallOptions callOptions,\n         Metadata headers,\n-        Context context);\n+        Context context,\n+        @Nullable MethodInfo methodInfo);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc1MDQ4Mg=="}, "originalCommit": {"oid": "608e2301aba5e49fd9adafc55621bd9e5ce14c80"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODM4NDc4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/grpc/internal/ManagedChannelServiceConfig.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjo0MDoxNVrOHPQh6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzowOToyM1rOHP9umQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2MTUxMw==", "bodyText": "Why not use this? Was this from an earlier revision and wasn't updated?", "url": "https://github.com/grpc/grpc-java/pull/7374#discussion_r485761513", "createdAt": "2020-09-09T16:40:15Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/internal/ManagedChannelServiceConfig.java", "diffHunk": "@@ -162,28 +164,37 @@ static ManagedChannelServiceConfig fromServiceConfig(\n             healthCheckingConfig);\n   }\n \n-  /**\n-   * Returns the per-service configuration for the channel.\n-   */\n-  Map<String, MethodInfo> getServiceMap() {\n-    return serviceMap;\n-  }\n-\n   @Nullable\n   Map<String, ?> getHealthCheckingConfig() {\n     return healthCheckingConfig;\n   }\n \n   /**\n-   * Returns the per-method configuration for the channel.\n+   * Used as a fallback per-RPC config supplier when the attributes value of {@link\n+   * InternalConfigSelector#KEY} is not available.\n    */\n-  Map<String, MethodInfo> getServiceMethodMap() {\n-    return serviceMethodMap;\n-  }\n-\n   @Nullable\n-  MethodInfo getDefaultMethodConfig() {\n-    return defaultMethodConfig;\n+  InternalConfigSelector getDefaultConfigSelector() {\n+    if (serviceMap.isEmpty() && serviceMethodMap.isEmpty() && defaultMethodConfig == null) {\n+      return null;\n+    }\n+    return new InternalConfigSelector() {\n+      @Override\n+      public Result selectConfig(PickSubchannelArgs args) {\n+        MethodInfo methodInfo = getMethodConfig(args.getMethodDescriptor());\n+        return Result.newBuilder()\n+            .setConfig(\n+                new ManagedChannelServiceConfig(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "608e2301aba5e49fd9adafc55621bd9e5ce14c80"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxOTc2NQ==", "bodyText": "The new instance strips off all configs (e.g. lb config) other than method configs from this. The design seems to say the Result.config is per RPC config.", "url": "https://github.com/grpc/grpc-java/pull/7374#discussion_r485819765", "createdAt": "2020-09-09T18:14:19Z", "author": {"login": "dapengzhang0"}, "path": "core/src/main/java/io/grpc/internal/ManagedChannelServiceConfig.java", "diffHunk": "@@ -162,28 +164,37 @@ static ManagedChannelServiceConfig fromServiceConfig(\n             healthCheckingConfig);\n   }\n \n-  /**\n-   * Returns the per-service configuration for the channel.\n-   */\n-  Map<String, MethodInfo> getServiceMap() {\n-    return serviceMap;\n-  }\n-\n   @Nullable\n   Map<String, ?> getHealthCheckingConfig() {\n     return healthCheckingConfig;\n   }\n \n   /**\n-   * Returns the per-method configuration for the channel.\n+   * Used as a fallback per-RPC config supplier when the attributes value of {@link\n+   * InternalConfigSelector#KEY} is not available.\n    */\n-  Map<String, MethodInfo> getServiceMethodMap() {\n-    return serviceMethodMap;\n-  }\n-\n   @Nullable\n-  MethodInfo getDefaultMethodConfig() {\n-    return defaultMethodConfig;\n+  InternalConfigSelector getDefaultConfigSelector() {\n+    if (serviceMap.isEmpty() && serviceMethodMap.isEmpty() && defaultMethodConfig == null) {\n+      return null;\n+    }\n+    return new InternalConfigSelector() {\n+      @Override\n+      public Result selectConfig(PickSubchannelArgs args) {\n+        MethodInfo methodInfo = getMethodConfig(args.getMethodDescriptor());\n+        return Result.newBuilder()\n+            .setConfig(\n+                new ManagedChannelServiceConfig(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2MTUxMw=="}, "originalCommit": {"oid": "608e2301aba5e49fd9adafc55621bd9e5ce14c80"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQxOTQzMA==", "bodyText": "It seems to say, \"this is necessary.\" If we want to say, \"only the per-RPC config will be used\" then we can use a comment to do that.\nI'm really not wild with calling getMethodConfig() here. We should just return this and have this be a trivial implementation.", "url": "https://github.com/grpc/grpc-java/pull/7374#discussion_r486419430", "createdAt": "2020-09-10T15:07:36Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/internal/ManagedChannelServiceConfig.java", "diffHunk": "@@ -162,28 +164,37 @@ static ManagedChannelServiceConfig fromServiceConfig(\n             healthCheckingConfig);\n   }\n \n-  /**\n-   * Returns the per-service configuration for the channel.\n-   */\n-  Map<String, MethodInfo> getServiceMap() {\n-    return serviceMap;\n-  }\n-\n   @Nullable\n   Map<String, ?> getHealthCheckingConfig() {\n     return healthCheckingConfig;\n   }\n \n   /**\n-   * Returns the per-method configuration for the channel.\n+   * Used as a fallback per-RPC config supplier when the attributes value of {@link\n+   * InternalConfigSelector#KEY} is not available.\n    */\n-  Map<String, MethodInfo> getServiceMethodMap() {\n-    return serviceMethodMap;\n-  }\n-\n   @Nullable\n-  MethodInfo getDefaultMethodConfig() {\n-    return defaultMethodConfig;\n+  InternalConfigSelector getDefaultConfigSelector() {\n+    if (serviceMap.isEmpty() && serviceMethodMap.isEmpty() && defaultMethodConfig == null) {\n+      return null;\n+    }\n+    return new InternalConfigSelector() {\n+      @Override\n+      public Result selectConfig(PickSubchannelArgs args) {\n+        MethodInfo methodInfo = getMethodConfig(args.getMethodDescriptor());\n+        return Result.newBuilder()\n+            .setConfig(\n+                new ManagedChannelServiceConfig(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2MTUxMw=="}, "originalCommit": {"oid": "608e2301aba5e49fd9adafc55621bd9e5ce14c80"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ3NDQyNw==", "bodyText": "Now I put entire service config in setConfig(). Now that the config selector contains all the information of the ManagedConfigServiceConfig, I rename ManagedConfigServiceConfig.getDefaultConfigSelector() as ManagedConfigServiceConfig.asConfigSelector().", "url": "https://github.com/grpc/grpc-java/pull/7374#discussion_r486474427", "createdAt": "2020-09-10T16:24:20Z", "author": {"login": "dapengzhang0"}, "path": "core/src/main/java/io/grpc/internal/ManagedChannelServiceConfig.java", "diffHunk": "@@ -162,28 +164,37 @@ static ManagedChannelServiceConfig fromServiceConfig(\n             healthCheckingConfig);\n   }\n \n-  /**\n-   * Returns the per-service configuration for the channel.\n-   */\n-  Map<String, MethodInfo> getServiceMap() {\n-    return serviceMap;\n-  }\n-\n   @Nullable\n   Map<String, ?> getHealthCheckingConfig() {\n     return healthCheckingConfig;\n   }\n \n   /**\n-   * Returns the per-method configuration for the channel.\n+   * Used as a fallback per-RPC config supplier when the attributes value of {@link\n+   * InternalConfigSelector#KEY} is not available.\n    */\n-  Map<String, MethodInfo> getServiceMethodMap() {\n-    return serviceMethodMap;\n-  }\n-\n   @Nullable\n-  MethodInfo getDefaultMethodConfig() {\n-    return defaultMethodConfig;\n+  InternalConfigSelector getDefaultConfigSelector() {\n+    if (serviceMap.isEmpty() && serviceMethodMap.isEmpty() && defaultMethodConfig == null) {\n+      return null;\n+    }\n+    return new InternalConfigSelector() {\n+      @Override\n+      public Result selectConfig(PickSubchannelArgs args) {\n+        MethodInfo methodInfo = getMethodConfig(args.getMethodDescriptor());\n+        return Result.newBuilder()\n+            .setConfig(\n+                new ManagedChannelServiceConfig(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2MTUxMw=="}, "originalCommit": {"oid": "608e2301aba5e49fd9adafc55621bd9e5ce14c80"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ3ODkxMQ==", "bodyText": "You removed the \"return null when a config selector is unnecessary\" optimization. That means now configSelector.set(null) is only used for shutdown when there are no calls and error cases. That's asking for bugs. Restore the return-null optimization or prevent the config selector from ever being null.", "url": "https://github.com/grpc/grpc-java/pull/7374#discussion_r486478911", "createdAt": "2020-09-10T16:31:11Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/internal/ManagedChannelServiceConfig.java", "diffHunk": "@@ -162,28 +164,37 @@ static ManagedChannelServiceConfig fromServiceConfig(\n             healthCheckingConfig);\n   }\n \n-  /**\n-   * Returns the per-service configuration for the channel.\n-   */\n-  Map<String, MethodInfo> getServiceMap() {\n-    return serviceMap;\n-  }\n-\n   @Nullable\n   Map<String, ?> getHealthCheckingConfig() {\n     return healthCheckingConfig;\n   }\n \n   /**\n-   * Returns the per-method configuration for the channel.\n+   * Used as a fallback per-RPC config supplier when the attributes value of {@link\n+   * InternalConfigSelector#KEY} is not available.\n    */\n-  Map<String, MethodInfo> getServiceMethodMap() {\n-    return serviceMethodMap;\n-  }\n-\n   @Nullable\n-  MethodInfo getDefaultMethodConfig() {\n-    return defaultMethodConfig;\n+  InternalConfigSelector getDefaultConfigSelector() {\n+    if (serviceMap.isEmpty() && serviceMethodMap.isEmpty() && defaultMethodConfig == null) {\n+      return null;\n+    }\n+    return new InternalConfigSelector() {\n+      @Override\n+      public Result selectConfig(PickSubchannelArgs args) {\n+        MethodInfo methodInfo = getMethodConfig(args.getMethodDescriptor());\n+        return Result.newBuilder()\n+            .setConfig(\n+                new ManagedChannelServiceConfig(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2MTUxMw=="}, "originalCommit": {"oid": "608e2301aba5e49fd9adafc55621bd9e5ce14c80"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUwMjA0MQ==", "bodyText": "Good point. Didn't think about it. Restored return-null optimization.", "url": "https://github.com/grpc/grpc-java/pull/7374#discussion_r486502041", "createdAt": "2020-09-10T17:09:23Z", "author": {"login": "dapengzhang0"}, "path": "core/src/main/java/io/grpc/internal/ManagedChannelServiceConfig.java", "diffHunk": "@@ -162,28 +164,37 @@ static ManagedChannelServiceConfig fromServiceConfig(\n             healthCheckingConfig);\n   }\n \n-  /**\n-   * Returns the per-service configuration for the channel.\n-   */\n-  Map<String, MethodInfo> getServiceMap() {\n-    return serviceMap;\n-  }\n-\n   @Nullable\n   Map<String, ?> getHealthCheckingConfig() {\n     return healthCheckingConfig;\n   }\n \n   /**\n-   * Returns the per-method configuration for the channel.\n+   * Used as a fallback per-RPC config supplier when the attributes value of {@link\n+   * InternalConfigSelector#KEY} is not available.\n    */\n-  Map<String, MethodInfo> getServiceMethodMap() {\n-    return serviceMethodMap;\n-  }\n-\n   @Nullable\n-  MethodInfo getDefaultMethodConfig() {\n-    return defaultMethodConfig;\n+  InternalConfigSelector getDefaultConfigSelector() {\n+    if (serviceMap.isEmpty() && serviceMethodMap.isEmpty() && defaultMethodConfig == null) {\n+      return null;\n+    }\n+    return new InternalConfigSelector() {\n+      @Override\n+      public Result selectConfig(PickSubchannelArgs args) {\n+        MethodInfo methodInfo = getMethodConfig(args.getMethodDescriptor());\n+        return Result.newBuilder()\n+            .setConfig(\n+                new ManagedChannelServiceConfig(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2MTUxMw=="}, "originalCommit": {"oid": "608e2301aba5e49fd9adafc55621bd9e5ce14c80"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODQzMzkxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjo0OToyOVrOHPQ_QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjoyNjo1MlrOHP8Jbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2OTAyNA==", "bodyText": "I'm not wild about this channel logging, as it seems like spam and is unlikely to help notice a bug. But we can leave it for now and remove it if it becomes a problem.", "url": "https://github.com/grpc/grpc-java/pull/7374#discussion_r485769024", "createdAt": "2020-09-09T16:49:29Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "diffHunk": "@@ -1535,16 +1524,26 @@ public void run() {\n                   ChannelLogLevel.INFO,\n                   \"Config selector from name resolver discarded by channel settings\");\n             }\n-            configSelector.set(null);\n+            configSelector.set(effectiveServiceConfig.getDefaultConfigSelector());\n           } else {\n             // Try to use config if returned from name resolver\n             // Otherwise, try to use the default config if available\n             if (validServiceConfig != null) {\n               effectiveServiceConfig = validServiceConfig;\n-              configSelector.set(resolvedConfigSelector);\n+              if (resolvedConfigSelector != null) {\n+                configSelector.set(resolvedConfigSelector);\n+                if (effectiveServiceConfig.getDefaultConfigSelector() != null) {\n+                  channelLogger.log(\n+                      ChannelLogLevel.INFO,\n+                      \"Method configs in service config will be discarded due to presence of\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "608e2301aba5e49fd9adafc55621bd9e5ce14c80"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ3NjE0Mg==", "bodyText": "With the new implementation, the converted config selector will never be null. Removed this block.", "url": "https://github.com/grpc/grpc-java/pull/7374#discussion_r486476142", "createdAt": "2020-09-10T16:26:52Z", "author": {"login": "dapengzhang0"}, "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "diffHunk": "@@ -1535,16 +1524,26 @@ public void run() {\n                   ChannelLogLevel.INFO,\n                   \"Config selector from name resolver discarded by channel settings\");\n             }\n-            configSelector.set(null);\n+            configSelector.set(effectiveServiceConfig.getDefaultConfigSelector());\n           } else {\n             // Try to use config if returned from name resolver\n             // Otherwise, try to use the default config if available\n             if (validServiceConfig != null) {\n               effectiveServiceConfig = validServiceConfig;\n-              configSelector.set(resolvedConfigSelector);\n+              if (resolvedConfigSelector != null) {\n+                configSelector.set(resolvedConfigSelector);\n+                if (effectiveServiceConfig.getDefaultConfigSelector() != null) {\n+                  channelLogger.log(\n+                      ChannelLogLevel.INFO,\n+                      \"Method configs in service config will be discarded due to presence of\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2OTAyNA=="}, "originalCommit": {"oid": "608e2301aba5e49fd9adafc55621bd9e5ce14c80"}, "originalPosition": 110}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2511, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}