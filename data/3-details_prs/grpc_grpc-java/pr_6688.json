{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNjI0OTAx", "number": 6688, "title": "xds: support reporting loads for more than one cluster services", "bodyText": "The LRS implementation was kind of half-baked. We have APIs for adding LoadStatsStores as source of load data (per cluster service) to be reported, but we expect management server to ask load reporting for only one cluster service. This doesn't make sense.\nThe assumption for management server to ask load reporting for only one cluster service seems overly strong. It is not consistent with our LRS client's design that it is capable of reporting loads for multiple services of a cluster. The reality is that we still will only have at most one service per cluster for now, but management server may ask loads for multiple services even if rest are completely unknown or not used to the client.\nThe most correct way is to support reporting loads for multiple services. The actual loads to be reported will be the intersection of services that we have loads for and services that management server asks for.\nThis PR also cleans up tests for LRS client's implementation a bit. It becomes less verbose and focus on testing LRS client's major behaviors.", "createdAt": "2020-02-07T22:18:16Z", "url": "https://github.com/grpc/grpc-java/pull/6688", "merged": true, "mergeCommit": {"oid": "a8bdf5cb1abf7a857e263a5d1500f1bba2c940e3"}, "closed": true, "closedAt": "2020-02-11T20:48:57Z", "author": {"login": "voidzcy"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcCGogIAH2gAyMzcyNjI0OTAxOjVlOWRlMzI4ODI2ODFlMGFlZjAzNjc1Y2FhYjM0OGNmODQ5MWVkZDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDXI6CAH2gAyMzcyNjI0OTAxOmQ4NDhlMDFmY2FjZTg5MjdhMDQ3MDdkOWE2NjEwZWZhNDNiOWUzOWE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5e9de32882681e0aef03675caab348cf8491edd5", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/5e9de32882681e0aef03675caab348cf8491edd5", "committedDate": "2020-02-07T21:57:36Z", "message": "Support reporting loads for more than one cluster services."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2ODc2OTE0", "url": "https://github.com/grpc/grpc-java/pull/6688#pullrequestreview-356876914", "createdAt": "2020-02-11T18:06:35Z", "commit": {"oid": "5e9de32882681e0aef03675caab348cf8491edd5"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODowNjozNlrOFoTcQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODoxMjozM1rOFoTnoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgwNTg4OA==", "bodyText": "Why is this removed? Is there behavior change?", "url": "https://github.com/grpc/grpc-java/pull/6688#discussion_r377805888", "createdAt": "2020-02-11T18:06:36Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/test/java/io/grpc/xds/LoadReportClientImplTest.java", "diffHunk": "@@ -474,81 +346,6 @@ public void lrsStreamClosedAndRetried() {\n     verify(backoffPolicy2, times(1)).nextBackoffNanos();\n   }\n \n-  @Test\n-  public void lrsStreamRetryAndRereport() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e9de32882681e0aef03675caab348cf8491edd5"}, "originalPosition": 323}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgwODgwMQ==", "bodyText": "The name does not provide any information what to test and what to verify. Either give it a more descriptive name or add a description of what are being tested in javadoc.", "url": "https://github.com/grpc/grpc-java/pull/6688#discussion_r377808801", "createdAt": "2020-02-11T18:12:33Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/test/java/io/grpc/xds/LoadReportClientImplTest.java", "diffHunk": "@@ -186,201 +189,69 @@ public void tearDown() {\n   }\n \n   @Test\n-  public void loadReportInitialRequest() {\n-    verify(mockLoadReportingService).streamLoadStats(lrsResponseObserverCaptor.capture());\n-    assertThat(lrsRequestObservers).hasSize(1);\n-    StreamObserver<LoadStatsRequest> requestObserver = lrsRequestObservers.poll();\n-    verify(requestObserver).onNext(EXPECTED_INITIAL_REQ);\n-    // No more request should be sent until receiving initial response. No load reporting\n-    // should be scheduled.\n-    assertThat(fakeClock.getPendingTasks(LOAD_REPORTING_TASK_FILTER)).isEmpty();\n-    verifyNoMoreInteractions(requestObserver);\n-  }\n-\n-  @Test\n-  public void startAndStopCanBeCalledMultipleTimes() {\n-    verify(mockLoadReportingService).streamLoadStats(lrsResponseObserverCaptor.capture());\n-    assertThat(lrsRequestObservers).hasSize(1);\n-    StreamObserver<LoadStatsRequest> requestObserver = lrsRequestObservers.peek();\n-    verify(requestObserver).onNext(EXPECTED_INITIAL_REQ);\n-    lrsClient.startLoadReporting(callback);\n-    assertThat(lrsRequestObservers).hasSize(1);\n-    lrsClient.startLoadReporting(callback);\n-    assertThat(lrsRequestObservers).hasSize(1);\n-    verifyNoMoreInteractions(requestObserver);\n-\n-    lrsClient.stopLoadReporting();\n-    assertThat(callEnded.get()).isTrue();\n-    assertThat(fakeClock.getPendingTasks(LRS_RPC_RETRY_TASK_FILTER)).isEmpty();\n-    lrsClient.stopLoadReporting();\n-    assertThat(callEnded.get()).isTrue();\n-\n-    lrsClient.startLoadReporting(callback);\n-    verify(mockLoadReportingService, times(2)).streamLoadStats(lrsResponseObserverCaptor.capture());\n-    assertThat(lrsRequestObservers).hasSize(2);\n-  }\n-\n-  // Currently we expect each gRPC client talks to a single service per cluster, so we test LRS\n-  // client reporting load for a single cluster service only.\n-  // TODO(chengyuanzhang): Existing test suites for LRS client implementation have poor behavior\n-  //  coverage and are not robust. Should improve once its usage is finalized without too much\n-  //  assumption.\n-\n-  @Test\n-  public void loadReportActualIntervalAsSpecified() {\n+  public void normalOperations() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e9de32882681e0aef03675caab348cf8491edd5"}, "originalPosition": 105}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eea144197727115672d3fee8d0e686871abd3a54", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/eea144197727115672d3fee8d0e686871abd3a54", "committedDate": "2020-02-11T18:55:28Z", "message": "Extend retry test case to cover load reporting back to normal."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2OTM4Mjgz", "url": "https://github.com/grpc/grpc-java/pull/6688#pullrequestreview-356938283", "createdAt": "2020-02-11T19:37:21Z", "commit": {"oid": "eea144197727115672d3fee8d0e686871abd3a54"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxOTozNzoyMVrOFoWa_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxOTozNzoyMVrOFoWa_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg1NDcxNg==", "bodyText": "Then maybe normalLrsFlow() is a better name.", "url": "https://github.com/grpc/grpc-java/pull/6688#discussion_r377854716", "createdAt": "2020-02-11T19:37:21Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/test/java/io/grpc/xds/LoadReportClientImplTest.java", "diffHunk": "@@ -186,201 +189,69 @@ public void tearDown() {\n   }\n \n   @Test\n-  public void loadReportInitialRequest() {\n-    verify(mockLoadReportingService).streamLoadStats(lrsResponseObserverCaptor.capture());\n-    assertThat(lrsRequestObservers).hasSize(1);\n-    StreamObserver<LoadStatsRequest> requestObserver = lrsRequestObservers.poll();\n-    verify(requestObserver).onNext(EXPECTED_INITIAL_REQ);\n-    // No more request should be sent until receiving initial response. No load reporting\n-    // should be scheduled.\n-    assertThat(fakeClock.getPendingTasks(LOAD_REPORTING_TASK_FILTER)).isEmpty();\n-    verifyNoMoreInteractions(requestObserver);\n-  }\n-\n-  @Test\n-  public void startAndStopCanBeCalledMultipleTimes() {\n-    verify(mockLoadReportingService).streamLoadStats(lrsResponseObserverCaptor.capture());\n-    assertThat(lrsRequestObservers).hasSize(1);\n-    StreamObserver<LoadStatsRequest> requestObserver = lrsRequestObservers.peek();\n-    verify(requestObserver).onNext(EXPECTED_INITIAL_REQ);\n-    lrsClient.startLoadReporting(callback);\n-    assertThat(lrsRequestObservers).hasSize(1);\n-    lrsClient.startLoadReporting(callback);\n-    assertThat(lrsRequestObservers).hasSize(1);\n-    verifyNoMoreInteractions(requestObserver);\n-\n-    lrsClient.stopLoadReporting();\n-    assertThat(callEnded.get()).isTrue();\n-    assertThat(fakeClock.getPendingTasks(LRS_RPC_RETRY_TASK_FILTER)).isEmpty();\n-    lrsClient.stopLoadReporting();\n-    assertThat(callEnded.get()).isTrue();\n-\n-    lrsClient.startLoadReporting(callback);\n-    verify(mockLoadReportingService, times(2)).streamLoadStats(lrsResponseObserverCaptor.capture());\n-    assertThat(lrsRequestObservers).hasSize(2);\n-  }\n-\n-  // Currently we expect each gRPC client talks to a single service per cluster, so we test LRS\n-  // client reporting load for a single cluster service only.\n-  // TODO(chengyuanzhang): Existing test suites for LRS client implementation have poor behavior\n-  //  coverage and are not robust. Should improve once its usage is finalized without too much\n-  //  assumption.\n-\n-  @Test\n-  public void loadReportActualIntervalAsSpecified() {\n+  public void normalOperations() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgwODgwMQ=="}, "originalCommit": {"oid": "5e9de32882681e0aef03675caab348cf8491edd5"}, "originalPosition": 105}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d848e01fcace8927a04707d9a6610efa43b9e39a", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/d848e01fcace8927a04707d9a6610efa43b9e39a", "committedDate": "2020-02-11T19:45:24Z", "message": "Rename test case."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4562, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}