{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwNTY5MjQ4", "number": 7685, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQwODowMToxMVrOFHiSog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNzo1MjoxNVrOFH4VpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNDQ2MTc4OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/ClusterResolverLoadBalancerProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQwODowMToxMVrOIJB12w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQwODowMToxMVrOIJB12w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMzODI2Nw==", "bodyText": "s/cluster_impl/cluster_resolver", "url": "https://github.com/grpc/grpc-java/pull/7685#discussion_r546338267", "createdAt": "2020-12-20T08:01:11Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/ClusterResolverLoadBalancerProvider.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.base.MoreObjects;\n+import io.grpc.Internal;\n+import io.grpc.LoadBalancer;\n+import io.grpc.LoadBalancer.Helper;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.NameResolver.ConfigOrError;\n+import io.grpc.internal.ServiceConfigUtil.PolicySelection;\n+import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * The provider for the cluster_impl load balancing policy. This class should not be directly", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69d8a852ae6977ba771dac40a2d3aff54c6ab594"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTY3MzE4OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/ClusterResolverLoadBalancer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMzoyMjo1NVrOIJLImg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMzoyMjo1NVrOIJLImg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ5MDUyMg==", "bodyText": "nit: this is too verbose. I would just use \"pick_first\" in place.", "url": "https://github.com/grpc/grpc-java/pull/7685#discussion_r546490522", "createdAt": "2020-12-21T03:22:55Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/ClusterResolverLoadBalancer.java", "diffHunk": "@@ -0,0 +1,684 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static io.grpc.ConnectivityState.CONNECTING;\n+import static io.grpc.ConnectivityState.TRANSIENT_FAILURE;\n+import static io.grpc.xds.XdsLbPolicies.LRS_POLICY_NAME;\n+import static io.grpc.xds.XdsLbPolicies.PRIORITY_POLICY_NAME;\n+import static io.grpc.xds.XdsSubchannelPickers.BUFFER_PICKER;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.EquivalentAddressGroup;\n+import io.grpc.InternalLogId;\n+import io.grpc.LoadBalancer;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.LoadBalancerRegistry;\n+import io.grpc.NameResolver;\n+import io.grpc.NameResolver.ResolutionResult;\n+import io.grpc.Status;\n+import io.grpc.SynchronizationContext;\n+import io.grpc.SynchronizationContext.ScheduledHandle;\n+import io.grpc.internal.BackoffPolicy;\n+import io.grpc.internal.ExponentialBackoffPolicy;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.internal.ServiceConfigUtil.PolicySelection;\n+import io.grpc.util.GracefulSwitchLoadBalancer;\n+import io.grpc.xds.ClusterImplLoadBalancerProvider.ClusterImplConfig;\n+import io.grpc.xds.ClusterResolverLoadBalancerProvider.ClusterResolverConfig;\n+import io.grpc.xds.ClusterResolverLoadBalancerProvider.ClusterResolverConfig.DiscoveryMechanism;\n+import io.grpc.xds.EnvoyProtoData.DropOverload;\n+import io.grpc.xds.EnvoyProtoData.LbEndpoint;\n+import io.grpc.xds.EnvoyProtoData.Locality;\n+import io.grpc.xds.EnvoyProtoData.LocalityLbEndpoints;\n+import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;\n+import io.grpc.xds.LrsLoadBalancerProvider.LrsConfig;\n+import io.grpc.xds.PriorityLoadBalancerProvider.PriorityLbConfig;\n+import io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection;\n+import io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedTargetConfig;\n+import io.grpc.xds.XdsClient.EdsResourceWatcher;\n+import io.grpc.xds.XdsClient.EdsUpdate;\n+import io.grpc.xds.XdsLogger.XdsLogLevel;\n+import io.grpc.xds.XdsSubchannelPickers.ErrorPicker;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Load balancer for cluster_resolver_experimental LB policy. This LB policy is the child LB policy\n+ * of the cds_experimental LB policy and the parent LB policy of the priority_experimental LB\n+ * policy in the xDS load balancing hierarchy. This policy resolves endpoints of non-aggregate\n+ * clusters (e.g., EDS or Logical DNS) and groups endpoints in priorities and localities to be\n+ * used in the downstream LB policies for ine-grained load balancing purposes.\n+ */\n+final class ClusterResolverLoadBalancer extends LoadBalancer {\n+\n+  private static final String LOGICAL_DNS_CLUSTER_ENDPOINT_PICKING_POLICY_OVERRIDE = \"pick_first\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69d8a852ae6977ba771dac40a2d3aff54c6ab594"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTY3NzI1OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/ClusterResolverLoadBalancer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMzoyNToyNFrOIJLKug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxODoxMzoyNFrOIKEOhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ5MTA2Ng==", "bodyText": "Use UPPER_CASE for constant?", "url": "https://github.com/grpc/grpc-java/pull/7685#discussion_r546491066", "createdAt": "2020-12-21T03:25:24Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/ClusterResolverLoadBalancer.java", "diffHunk": "@@ -0,0 +1,684 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static io.grpc.ConnectivityState.CONNECTING;\n+import static io.grpc.ConnectivityState.TRANSIENT_FAILURE;\n+import static io.grpc.xds.XdsLbPolicies.LRS_POLICY_NAME;\n+import static io.grpc.xds.XdsLbPolicies.PRIORITY_POLICY_NAME;\n+import static io.grpc.xds.XdsSubchannelPickers.BUFFER_PICKER;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.EquivalentAddressGroup;\n+import io.grpc.InternalLogId;\n+import io.grpc.LoadBalancer;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.LoadBalancerRegistry;\n+import io.grpc.NameResolver;\n+import io.grpc.NameResolver.ResolutionResult;\n+import io.grpc.Status;\n+import io.grpc.SynchronizationContext;\n+import io.grpc.SynchronizationContext.ScheduledHandle;\n+import io.grpc.internal.BackoffPolicy;\n+import io.grpc.internal.ExponentialBackoffPolicy;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.internal.ServiceConfigUtil.PolicySelection;\n+import io.grpc.util.GracefulSwitchLoadBalancer;\n+import io.grpc.xds.ClusterImplLoadBalancerProvider.ClusterImplConfig;\n+import io.grpc.xds.ClusterResolverLoadBalancerProvider.ClusterResolverConfig;\n+import io.grpc.xds.ClusterResolverLoadBalancerProvider.ClusterResolverConfig.DiscoveryMechanism;\n+import io.grpc.xds.EnvoyProtoData.DropOverload;\n+import io.grpc.xds.EnvoyProtoData.LbEndpoint;\n+import io.grpc.xds.EnvoyProtoData.Locality;\n+import io.grpc.xds.EnvoyProtoData.LocalityLbEndpoints;\n+import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;\n+import io.grpc.xds.LrsLoadBalancerProvider.LrsConfig;\n+import io.grpc.xds.PriorityLoadBalancerProvider.PriorityLbConfig;\n+import io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection;\n+import io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedTargetConfig;\n+import io.grpc.xds.XdsClient.EdsResourceWatcher;\n+import io.grpc.xds.XdsClient.EdsUpdate;\n+import io.grpc.xds.XdsLogger.XdsLogLevel;\n+import io.grpc.xds.XdsSubchannelPickers.ErrorPicker;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Load balancer for cluster_resolver_experimental LB policy. This LB policy is the child LB policy\n+ * of the cds_experimental LB policy and the parent LB policy of the priority_experimental LB\n+ * policy in the xDS load balancing hierarchy. This policy resolves endpoints of non-aggregate\n+ * clusters (e.g., EDS or Logical DNS) and groups endpoints in priorities and localities to be\n+ * used in the downstream LB policies for ine-grained load balancing purposes.\n+ */\n+final class ClusterResolverLoadBalancer extends LoadBalancer {\n+\n+  private static final String LOGICAL_DNS_CLUSTER_ENDPOINT_PICKING_POLICY_OVERRIDE = \"pick_first\";\n+  private static final Locality logicalDnsClusterLocality = new Locality(\"\", \"\", \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69d8a852ae6977ba771dac40a2d3aff54c6ab594"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQyNTkyNg==", "bodyText": "Yep, Locality is actually immutable. So sure, it should be upper case. Fixed.", "url": "https://github.com/grpc/grpc-java/pull/7685#discussion_r547425926", "createdAt": "2020-12-22T18:13:24Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/ClusterResolverLoadBalancer.java", "diffHunk": "@@ -0,0 +1,684 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static io.grpc.ConnectivityState.CONNECTING;\n+import static io.grpc.ConnectivityState.TRANSIENT_FAILURE;\n+import static io.grpc.xds.XdsLbPolicies.LRS_POLICY_NAME;\n+import static io.grpc.xds.XdsLbPolicies.PRIORITY_POLICY_NAME;\n+import static io.grpc.xds.XdsSubchannelPickers.BUFFER_PICKER;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.EquivalentAddressGroup;\n+import io.grpc.InternalLogId;\n+import io.grpc.LoadBalancer;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.LoadBalancerRegistry;\n+import io.grpc.NameResolver;\n+import io.grpc.NameResolver.ResolutionResult;\n+import io.grpc.Status;\n+import io.grpc.SynchronizationContext;\n+import io.grpc.SynchronizationContext.ScheduledHandle;\n+import io.grpc.internal.BackoffPolicy;\n+import io.grpc.internal.ExponentialBackoffPolicy;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.internal.ServiceConfigUtil.PolicySelection;\n+import io.grpc.util.GracefulSwitchLoadBalancer;\n+import io.grpc.xds.ClusterImplLoadBalancerProvider.ClusterImplConfig;\n+import io.grpc.xds.ClusterResolverLoadBalancerProvider.ClusterResolverConfig;\n+import io.grpc.xds.ClusterResolverLoadBalancerProvider.ClusterResolverConfig.DiscoveryMechanism;\n+import io.grpc.xds.EnvoyProtoData.DropOverload;\n+import io.grpc.xds.EnvoyProtoData.LbEndpoint;\n+import io.grpc.xds.EnvoyProtoData.Locality;\n+import io.grpc.xds.EnvoyProtoData.LocalityLbEndpoints;\n+import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;\n+import io.grpc.xds.LrsLoadBalancerProvider.LrsConfig;\n+import io.grpc.xds.PriorityLoadBalancerProvider.PriorityLbConfig;\n+import io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection;\n+import io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedTargetConfig;\n+import io.grpc.xds.XdsClient.EdsResourceWatcher;\n+import io.grpc.xds.XdsClient.EdsUpdate;\n+import io.grpc.xds.XdsLogger.XdsLogLevel;\n+import io.grpc.xds.XdsSubchannelPickers.ErrorPicker;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Load balancer for cluster_resolver_experimental LB policy. This LB policy is the child LB policy\n+ * of the cds_experimental LB policy and the parent LB policy of the priority_experimental LB\n+ * policy in the xDS load balancing hierarchy. This policy resolves endpoints of non-aggregate\n+ * clusters (e.g., EDS or Logical DNS) and groups endpoints in priorities and localities to be\n+ * used in the downstream LB policies for ine-grained load balancing purposes.\n+ */\n+final class ClusterResolverLoadBalancer extends LoadBalancer {\n+\n+  private static final String LOGICAL_DNS_CLUSTER_ENDPOINT_PICKING_POLICY_OVERRIDE = \"pick_first\";\n+  private static final Locality logicalDnsClusterLocality = new Locality(\"\", \"\", \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ5MTA2Ng=="}, "originalCommit": {"oid": "69d8a852ae6977ba771dac40a2d3aff54c6ab594"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTY5OTI3OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/ClusterResolverLoadBalancer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMzo0MDo1MlrOIJLWmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMzo0MDo1MlrOIJLWmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ5NDEwNg==", "bodyText": "fine-grained?", "url": "https://github.com/grpc/grpc-java/pull/7685#discussion_r546494106", "createdAt": "2020-12-21T03:40:52Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/ClusterResolverLoadBalancer.java", "diffHunk": "@@ -0,0 +1,684 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static io.grpc.ConnectivityState.CONNECTING;\n+import static io.grpc.ConnectivityState.TRANSIENT_FAILURE;\n+import static io.grpc.xds.XdsLbPolicies.LRS_POLICY_NAME;\n+import static io.grpc.xds.XdsLbPolicies.PRIORITY_POLICY_NAME;\n+import static io.grpc.xds.XdsSubchannelPickers.BUFFER_PICKER;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.EquivalentAddressGroup;\n+import io.grpc.InternalLogId;\n+import io.grpc.LoadBalancer;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.LoadBalancerRegistry;\n+import io.grpc.NameResolver;\n+import io.grpc.NameResolver.ResolutionResult;\n+import io.grpc.Status;\n+import io.grpc.SynchronizationContext;\n+import io.grpc.SynchronizationContext.ScheduledHandle;\n+import io.grpc.internal.BackoffPolicy;\n+import io.grpc.internal.ExponentialBackoffPolicy;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.internal.ServiceConfigUtil.PolicySelection;\n+import io.grpc.util.GracefulSwitchLoadBalancer;\n+import io.grpc.xds.ClusterImplLoadBalancerProvider.ClusterImplConfig;\n+import io.grpc.xds.ClusterResolverLoadBalancerProvider.ClusterResolverConfig;\n+import io.grpc.xds.ClusterResolverLoadBalancerProvider.ClusterResolverConfig.DiscoveryMechanism;\n+import io.grpc.xds.EnvoyProtoData.DropOverload;\n+import io.grpc.xds.EnvoyProtoData.LbEndpoint;\n+import io.grpc.xds.EnvoyProtoData.Locality;\n+import io.grpc.xds.EnvoyProtoData.LocalityLbEndpoints;\n+import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;\n+import io.grpc.xds.LrsLoadBalancerProvider.LrsConfig;\n+import io.grpc.xds.PriorityLoadBalancerProvider.PriorityLbConfig;\n+import io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection;\n+import io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedTargetConfig;\n+import io.grpc.xds.XdsClient.EdsResourceWatcher;\n+import io.grpc.xds.XdsClient.EdsUpdate;\n+import io.grpc.xds.XdsLogger.XdsLogLevel;\n+import io.grpc.xds.XdsSubchannelPickers.ErrorPicker;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Load balancer for cluster_resolver_experimental LB policy. This LB policy is the child LB policy\n+ * of the cds_experimental LB policy and the parent LB policy of the priority_experimental LB\n+ * policy in the xDS load balancing hierarchy. This policy resolves endpoints of non-aggregate\n+ * clusters (e.g., EDS or Logical DNS) and groups endpoints in priorities and localities to be\n+ * used in the downstream LB policies for ine-grained load balancing purposes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69d8a852ae6977ba771dac40a2d3aff54c6ab594"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjIyNTc5OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/ClusterResolverLoadBalancer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwODoyNToyM1rOIJP9MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwODoyNToyM1rOIJP9MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU2OTUyMQ==", "bodyText": "Should move this out of the for loop and ahead of state.start().", "url": "https://github.com/grpc/grpc-java/pull/7685#discussion_r546569521", "createdAt": "2020-12-21T08:25:23Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/ClusterResolverLoadBalancer.java", "diffHunk": "@@ -0,0 +1,684 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static io.grpc.ConnectivityState.CONNECTING;\n+import static io.grpc.ConnectivityState.TRANSIENT_FAILURE;\n+import static io.grpc.xds.XdsLbPolicies.LRS_POLICY_NAME;\n+import static io.grpc.xds.XdsLbPolicies.PRIORITY_POLICY_NAME;\n+import static io.grpc.xds.XdsSubchannelPickers.BUFFER_PICKER;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.EquivalentAddressGroup;\n+import io.grpc.InternalLogId;\n+import io.grpc.LoadBalancer;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.LoadBalancerRegistry;\n+import io.grpc.NameResolver;\n+import io.grpc.NameResolver.ResolutionResult;\n+import io.grpc.Status;\n+import io.grpc.SynchronizationContext;\n+import io.grpc.SynchronizationContext.ScheduledHandle;\n+import io.grpc.internal.BackoffPolicy;\n+import io.grpc.internal.ExponentialBackoffPolicy;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.internal.ServiceConfigUtil.PolicySelection;\n+import io.grpc.util.GracefulSwitchLoadBalancer;\n+import io.grpc.xds.ClusterImplLoadBalancerProvider.ClusterImplConfig;\n+import io.grpc.xds.ClusterResolverLoadBalancerProvider.ClusterResolverConfig;\n+import io.grpc.xds.ClusterResolverLoadBalancerProvider.ClusterResolverConfig.DiscoveryMechanism;\n+import io.grpc.xds.EnvoyProtoData.DropOverload;\n+import io.grpc.xds.EnvoyProtoData.LbEndpoint;\n+import io.grpc.xds.EnvoyProtoData.Locality;\n+import io.grpc.xds.EnvoyProtoData.LocalityLbEndpoints;\n+import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;\n+import io.grpc.xds.LrsLoadBalancerProvider.LrsConfig;\n+import io.grpc.xds.PriorityLoadBalancerProvider.PriorityLbConfig;\n+import io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection;\n+import io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedTargetConfig;\n+import io.grpc.xds.XdsClient.EdsResourceWatcher;\n+import io.grpc.xds.XdsClient.EdsUpdate;\n+import io.grpc.xds.XdsLogger.XdsLogLevel;\n+import io.grpc.xds.XdsSubchannelPickers.ErrorPicker;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Load balancer for cluster_resolver_experimental LB policy. This LB policy is the child LB policy\n+ * of the cds_experimental LB policy and the parent LB policy of the priority_experimental LB\n+ * policy in the xDS load balancing hierarchy. This policy resolves endpoints of non-aggregate\n+ * clusters (e.g., EDS or Logical DNS) and groups endpoints in priorities and localities to be\n+ * used in the downstream LB policies for ine-grained load balancing purposes.\n+ */\n+final class ClusterResolverLoadBalancer extends LoadBalancer {\n+\n+  private static final String LOGICAL_DNS_CLUSTER_ENDPOINT_PICKING_POLICY_OVERRIDE = \"pick_first\";\n+  private static final Locality logicalDnsClusterLocality = new Locality(\"\", \"\", \"\");\n+  private final XdsLogger logger;\n+  private final String authority;\n+  private final SynchronizationContext syncContext;\n+  private final ScheduledExecutorService timeService;\n+  private final LoadBalancerRegistry lbRegistry;\n+  private final BackoffPolicy.Provider backoffPolicyProvider;\n+  private final GracefulSwitchLoadBalancer delegate;\n+  private ObjectPool<XdsClient> xdsClientPool;\n+  private XdsClient xdsClient;\n+  private ClusterResolverConfig config;\n+\n+  ClusterResolverLoadBalancer(Helper helper) {\n+    this(helper, LoadBalancerRegistry.getDefaultRegistry(),\n+        new ExponentialBackoffPolicy.Provider());\n+  }\n+\n+  @VisibleForTesting\n+  ClusterResolverLoadBalancer(Helper helper, LoadBalancerRegistry lbRegistry,\n+      BackoffPolicy.Provider backoffPolicyProvider) {\n+    this.lbRegistry = checkNotNull(lbRegistry, \"lbRegistry\");\n+    this.backoffPolicyProvider = checkNotNull(backoffPolicyProvider, \"backoffPolicyProvider\");\n+    this.authority = checkNotNull(checkNotNull(helper, \"helper\").getAuthority(), \"authority\");\n+    this.syncContext = checkNotNull(helper.getSynchronizationContext(), \"syncContext\");\n+    this.timeService = checkNotNull(helper.getScheduledExecutorService(), \"timeService\");\n+    delegate = new GracefulSwitchLoadBalancer(helper);\n+    logger = XdsLogger.withLogId(\n+        InternalLogId.allocate(\"cluster-resolver-lb\", helper.getAuthority()));\n+    logger.log(XdsLogLevel.INFO, \"Created\");\n+  }\n+\n+  @Override\n+  public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n+    logger.log(XdsLogLevel.DEBUG, \"Received resolution result: {0}\", resolvedAddresses);\n+    if (xdsClientPool == null) {\n+      xdsClientPool = resolvedAddresses.getAttributes().get(XdsAttributes.XDS_CLIENT_POOL);\n+      xdsClient = xdsClientPool.getObject();\n+    }\n+    ClusterResolverConfig config =\n+        (ClusterResolverConfig) resolvedAddresses.getLoadBalancingPolicyConfig();\n+    if (!Objects.equals(this.config, config)) {\n+      logger.log(XdsLogLevel.DEBUG, \"Config: {0}\", config);\n+      delegate.switchTo(new ClusterResolverLbStateFactory());\n+    }\n+    this.config = config;\n+    delegate.handleResolvedAddresses(resolvedAddresses);\n+  }\n+\n+  @Override\n+  public void handleNameResolutionError(Status error) {\n+    logger.log(XdsLogLevel.WARNING, \"Received name resolution error: {0}\", error);\n+    delegate.handleNameResolutionError(error);\n+  }\n+\n+  @Override\n+  public void shutdown() {\n+    logger.log(XdsLogLevel.INFO, \"Shutdown\");\n+    delegate.shutdown();\n+    if (xdsClientPool != null) {\n+      xdsClientPool.returnObject(xdsClient);\n+    }\n+  }\n+\n+  private final class ClusterResolverLbStateFactory extends LoadBalancer.Factory {\n+    @Override\n+    public LoadBalancer newLoadBalancer(Helper helper) {\n+      return new ClusterResolverLbState(helper);\n+    }\n+  }\n+\n+  /**\n+   * The state of a cluster_resolver LB working session. A new instance is created whenever\n+   * the cluster_resolver LB receives a new config. The old instance is replaced when the\n+   * new one is ready to handle new RPCs.\n+   */\n+  private final class ClusterResolverLbState extends LoadBalancer {\n+    private final Helper helper;\n+    private final List<String> clusters = new ArrayList<>();\n+    private final Map<String, ClusterState> clusterStates = new HashMap<>();\n+    // An aggregate cluster is thought of as a cluster that groups the endpoints of the underlying\n+    // clusters together for load balancing purposes only. Load balancing policies (both locality\n+    // level and endpoint level) are configured by the aggregate cluster and apply to all of its\n+    // underlying clusters.\n+    private PolicySelection localityPickingPolicy;\n+    private PolicySelection endpointPickingPolicy;\n+    private ResolvedAddresses resolvedAddresses;\n+    private LoadBalancer childLb;\n+\n+    ClusterResolverLbState(Helper helper) {\n+      this.helper = checkNotNull(helper, \"helper\");\n+      logger.log(XdsLogLevel.DEBUG, \"New ClusterResolverLbState\");\n+    }\n+\n+    @Override\n+    public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n+      this.resolvedAddresses = resolvedAddresses;\n+      ClusterResolverConfig config =\n+          (ClusterResolverConfig) resolvedAddresses.getLoadBalancingPolicyConfig();\n+      for (DiscoveryMechanism instance : config.discoveryMechanisms) {\n+        clusters.add(instance.cluster);\n+        ClusterState state;\n+        if (instance.type == DiscoveryMechanism.Type.EDS) {\n+          state =\n+              new EdsClusterState(instance.cluster, instance.edsServiceName,\n+                  instance.lrsServerName, instance.maxConcurrentRequests, instance.tlsContext);\n+          clusterStates.put(instance.cluster, state);\n+        } else {  // logical DNS\n+          state = new LogicalDnsClusterState(instance.cluster, instance.lrsServerName,\n+              instance.maxConcurrentRequests, instance.tlsContext);\n+          clusterStates.put(instance.cluster, state);\n+        }\n+        state.start();\n+        localityPickingPolicy = config.localityPickingPolicy;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69d8a852ae6977ba771dac40a2d3aff54c6ab594"}, "originalPosition": 193}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjM1MjY0OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/ClusterResolverLoadBalancer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOTowNzo0MVrOIJRHOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOTowNzo0MVrOIJRHOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU4ODQ3Mg==", "bodyText": "What is alphabetically comparable?", "url": "https://github.com/grpc/grpc-java/pull/7685#discussion_r546588472", "createdAt": "2020-12-21T09:07:41Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/ClusterResolverLoadBalancer.java", "diffHunk": "@@ -0,0 +1,684 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static io.grpc.ConnectivityState.CONNECTING;\n+import static io.grpc.ConnectivityState.TRANSIENT_FAILURE;\n+import static io.grpc.xds.XdsLbPolicies.LRS_POLICY_NAME;\n+import static io.grpc.xds.XdsLbPolicies.PRIORITY_POLICY_NAME;\n+import static io.grpc.xds.XdsSubchannelPickers.BUFFER_PICKER;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.EquivalentAddressGroup;\n+import io.grpc.InternalLogId;\n+import io.grpc.LoadBalancer;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.LoadBalancerRegistry;\n+import io.grpc.NameResolver;\n+import io.grpc.NameResolver.ResolutionResult;\n+import io.grpc.Status;\n+import io.grpc.SynchronizationContext;\n+import io.grpc.SynchronizationContext.ScheduledHandle;\n+import io.grpc.internal.BackoffPolicy;\n+import io.grpc.internal.ExponentialBackoffPolicy;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.internal.ServiceConfigUtil.PolicySelection;\n+import io.grpc.util.GracefulSwitchLoadBalancer;\n+import io.grpc.xds.ClusterImplLoadBalancerProvider.ClusterImplConfig;\n+import io.grpc.xds.ClusterResolverLoadBalancerProvider.ClusterResolverConfig;\n+import io.grpc.xds.ClusterResolverLoadBalancerProvider.ClusterResolverConfig.DiscoveryMechanism;\n+import io.grpc.xds.EnvoyProtoData.DropOverload;\n+import io.grpc.xds.EnvoyProtoData.LbEndpoint;\n+import io.grpc.xds.EnvoyProtoData.Locality;\n+import io.grpc.xds.EnvoyProtoData.LocalityLbEndpoints;\n+import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;\n+import io.grpc.xds.LrsLoadBalancerProvider.LrsConfig;\n+import io.grpc.xds.PriorityLoadBalancerProvider.PriorityLbConfig;\n+import io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection;\n+import io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedTargetConfig;\n+import io.grpc.xds.XdsClient.EdsResourceWatcher;\n+import io.grpc.xds.XdsClient.EdsUpdate;\n+import io.grpc.xds.XdsLogger.XdsLogLevel;\n+import io.grpc.xds.XdsSubchannelPickers.ErrorPicker;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Load balancer for cluster_resolver_experimental LB policy. This LB policy is the child LB policy\n+ * of the cds_experimental LB policy and the parent LB policy of the priority_experimental LB\n+ * policy in the xDS load balancing hierarchy. This policy resolves endpoints of non-aggregate\n+ * clusters (e.g., EDS or Logical DNS) and groups endpoints in priorities and localities to be\n+ * used in the downstream LB policies for ine-grained load balancing purposes.\n+ */\n+final class ClusterResolverLoadBalancer extends LoadBalancer {\n+\n+  private static final String LOGICAL_DNS_CLUSTER_ENDPOINT_PICKING_POLICY_OVERRIDE = \"pick_first\";\n+  private static final Locality logicalDnsClusterLocality = new Locality(\"\", \"\", \"\");\n+  private final XdsLogger logger;\n+  private final String authority;\n+  private final SynchronizationContext syncContext;\n+  private final ScheduledExecutorService timeService;\n+  private final LoadBalancerRegistry lbRegistry;\n+  private final BackoffPolicy.Provider backoffPolicyProvider;\n+  private final GracefulSwitchLoadBalancer delegate;\n+  private ObjectPool<XdsClient> xdsClientPool;\n+  private XdsClient xdsClient;\n+  private ClusterResolverConfig config;\n+\n+  ClusterResolverLoadBalancer(Helper helper) {\n+    this(helper, LoadBalancerRegistry.getDefaultRegistry(),\n+        new ExponentialBackoffPolicy.Provider());\n+  }\n+\n+  @VisibleForTesting\n+  ClusterResolverLoadBalancer(Helper helper, LoadBalancerRegistry lbRegistry,\n+      BackoffPolicy.Provider backoffPolicyProvider) {\n+    this.lbRegistry = checkNotNull(lbRegistry, \"lbRegistry\");\n+    this.backoffPolicyProvider = checkNotNull(backoffPolicyProvider, \"backoffPolicyProvider\");\n+    this.authority = checkNotNull(checkNotNull(helper, \"helper\").getAuthority(), \"authority\");\n+    this.syncContext = checkNotNull(helper.getSynchronizationContext(), \"syncContext\");\n+    this.timeService = checkNotNull(helper.getScheduledExecutorService(), \"timeService\");\n+    delegate = new GracefulSwitchLoadBalancer(helper);\n+    logger = XdsLogger.withLogId(\n+        InternalLogId.allocate(\"cluster-resolver-lb\", helper.getAuthority()));\n+    logger.log(XdsLogLevel.INFO, \"Created\");\n+  }\n+\n+  @Override\n+  public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n+    logger.log(XdsLogLevel.DEBUG, \"Received resolution result: {0}\", resolvedAddresses);\n+    if (xdsClientPool == null) {\n+      xdsClientPool = resolvedAddresses.getAttributes().get(XdsAttributes.XDS_CLIENT_POOL);\n+      xdsClient = xdsClientPool.getObject();\n+    }\n+    ClusterResolverConfig config =\n+        (ClusterResolverConfig) resolvedAddresses.getLoadBalancingPolicyConfig();\n+    if (!Objects.equals(this.config, config)) {\n+      logger.log(XdsLogLevel.DEBUG, \"Config: {0}\", config);\n+      delegate.switchTo(new ClusterResolverLbStateFactory());\n+    }\n+    this.config = config;\n+    delegate.handleResolvedAddresses(resolvedAddresses);\n+  }\n+\n+  @Override\n+  public void handleNameResolutionError(Status error) {\n+    logger.log(XdsLogLevel.WARNING, \"Received name resolution error: {0}\", error);\n+    delegate.handleNameResolutionError(error);\n+  }\n+\n+  @Override\n+  public void shutdown() {\n+    logger.log(XdsLogLevel.INFO, \"Shutdown\");\n+    delegate.shutdown();\n+    if (xdsClientPool != null) {\n+      xdsClientPool.returnObject(xdsClient);\n+    }\n+  }\n+\n+  private final class ClusterResolverLbStateFactory extends LoadBalancer.Factory {\n+    @Override\n+    public LoadBalancer newLoadBalancer(Helper helper) {\n+      return new ClusterResolverLbState(helper);\n+    }\n+  }\n+\n+  /**\n+   * The state of a cluster_resolver LB working session. A new instance is created whenever\n+   * the cluster_resolver LB receives a new config. The old instance is replaced when the\n+   * new one is ready to handle new RPCs.\n+   */\n+  private final class ClusterResolverLbState extends LoadBalancer {\n+    private final Helper helper;\n+    private final List<String> clusters = new ArrayList<>();\n+    private final Map<String, ClusterState> clusterStates = new HashMap<>();\n+    // An aggregate cluster is thought of as a cluster that groups the endpoints of the underlying\n+    // clusters together for load balancing purposes only. Load balancing policies (both locality\n+    // level and endpoint level) are configured by the aggregate cluster and apply to all of its\n+    // underlying clusters.\n+    private PolicySelection localityPickingPolicy;\n+    private PolicySelection endpointPickingPolicy;\n+    private ResolvedAddresses resolvedAddresses;\n+    private LoadBalancer childLb;\n+\n+    ClusterResolverLbState(Helper helper) {\n+      this.helper = checkNotNull(helper, \"helper\");\n+      logger.log(XdsLogLevel.DEBUG, \"New ClusterResolverLbState\");\n+    }\n+\n+    @Override\n+    public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n+      this.resolvedAddresses = resolvedAddresses;\n+      ClusterResolverConfig config =\n+          (ClusterResolverConfig) resolvedAddresses.getLoadBalancingPolicyConfig();\n+      for (DiscoveryMechanism instance : config.discoveryMechanisms) {\n+        clusters.add(instance.cluster);\n+        ClusterState state;\n+        if (instance.type == DiscoveryMechanism.Type.EDS) {\n+          state =\n+              new EdsClusterState(instance.cluster, instance.edsServiceName,\n+                  instance.lrsServerName, instance.maxConcurrentRequests, instance.tlsContext);\n+          clusterStates.put(instance.cluster, state);\n+        } else {  // logical DNS\n+          state = new LogicalDnsClusterState(instance.cluster, instance.lrsServerName,\n+              instance.maxConcurrentRequests, instance.tlsContext);\n+          clusterStates.put(instance.cluster, state);\n+        }\n+        state.start();\n+        localityPickingPolicy = config.localityPickingPolicy;\n+        endpointPickingPolicy = config.endpointPickingPolicy;\n+      }\n+    }\n+\n+    @Override\n+    public void handleNameResolutionError(Status error) {\n+      if (childLb != null) {\n+        childLb.handleNameResolutionError(error);\n+      } else {\n+        helper.updateBalancingState(TRANSIENT_FAILURE, new ErrorPicker(error));\n+      }\n+    }\n+\n+    @Override\n+    public void shutdown() {\n+      for (ClusterState state : clusterStates.values()) {\n+        state.shutdown();\n+      }\n+      if (childLb != null) {\n+        childLb.shutdown();\n+      }\n+    }\n+\n+    private void handleEndpointResourceUpdate() {\n+      List<EquivalentAddressGroup> addresses = new ArrayList<>();\n+      Map<String, PolicySelection> priorityLbPolicies = new HashMap<>();\n+      List<String> priorities = new ArrayList<>();  // totally ordered priority list\n+      boolean allResolved = true;\n+      for (String cluster : clusters) {\n+        ClusterState state = clusterStates.get(cluster);\n+        if (!state.resolved) {\n+          allResolved = false;\n+          continue;\n+        }\n+        if (state.result != null) {\n+          addresses.addAll(state.result.addresses);\n+          priorityLbPolicies.putAll(state.result.priorityLbPolicies);\n+          priorities.addAll(state.result.priorities);\n+        }\n+      }\n+      if (addresses.isEmpty()) {\n+        if (childLb != null) {\n+          childLb.shutdown();\n+          childLb = null;\n+        }\n+        if (allResolved) {\n+          Status unavailable = Status.UNAVAILABLE.withDescription(\"No endpoint available\");\n+          helper.updateBalancingState(TRANSIENT_FAILURE, new ErrorPicker(unavailable));\n+        } else {\n+          helper.updateBalancingState(CONNECTING, BUFFER_PICKER);\n+        }\n+        return;\n+      }\n+      PriorityLbConfig childConfig =\n+          new PriorityLbConfig(Collections.unmodifiableMap(priorityLbPolicies),\n+              Collections.unmodifiableList(priorities));\n+      if (childLb == null) {\n+        childLb = lbRegistry.getProvider(PRIORITY_POLICY_NAME).newLoadBalancer(helper);\n+      }\n+      childLb.handleResolvedAddresses(\n+          resolvedAddresses.toBuilder()\n+              .setLoadBalancingPolicyConfig(childConfig)\n+              .setAddresses(Collections.unmodifiableList(addresses))\n+              .build());\n+    }\n+\n+    private void handleEndpointResolutionError() {\n+      boolean allInError = true;\n+      for (ClusterState state :  clusterStates.values()) {\n+        if (state.status.isOk()) {\n+          allInError = false;\n+        }\n+      }\n+      if (allInError) {\n+        // Propagate the error status of the last cluster. This is the best we can do.\n+        Status error = clusterStates.get(clusters.get(clusters.size() - 1)).status;\n+        if (childLb != null) {\n+          childLb.handleNameResolutionError(error);\n+        } else {\n+          helper.updateBalancingState(TRANSIENT_FAILURE, new ErrorPicker(error));\n+        }\n+      }\n+    }\n+\n+    /**\n+     * Resolution state of an underlying cluster.\n+     */\n+    private abstract class ClusterState {\n+      // Name of the cluster to be resolved.\n+      protected final String name;\n+      // The resource name to be used for resolving endpoints via EDS.\n+      // Always null if the cluster is a logical DNS cluster.\n+      @Nullable\n+      protected final String edsServiceName;\n+      @Nullable\n+      protected final String lrsServerName;\n+      @Nullable\n+      protected final Long maxConcurrentRequests;\n+      @Nullable\n+      protected final UpstreamTlsContext tlsContext;\n+      // Resolution status, may contain most recent error encountered.\n+      protected Status status = Status.OK;\n+      // True if has received resolution result.\n+      protected boolean resolved;\n+      // Most recently resolved addresses and config, or null if resource not exists.\n+      @Nullable\n+      protected ClusterResolutionResult result;\n+      protected boolean shutdown;\n+\n+      private ClusterState(String name, @Nullable String edsServiceName,\n+          @Nullable String lrsServerName, @Nullable Long maxConcurrentRequests,\n+          @Nullable UpstreamTlsContext tlsContext) {\n+        this.name = name;\n+        this.edsServiceName = edsServiceName;\n+        this.lrsServerName = lrsServerName;\n+        this.maxConcurrentRequests = maxConcurrentRequests;\n+        this.tlsContext = tlsContext;\n+      }\n+\n+      abstract void start();\n+\n+      void shutdown() {\n+        shutdown = true;\n+      }\n+    }\n+\n+    private class EdsClusterState extends ClusterState implements EdsResourceWatcher {\n+\n+      private EdsClusterState(String name, @Nullable String edsServiceName,\n+          @Nullable String lrsServerName, @Nullable Long maxConcurrentRequests,\n+          @Nullable UpstreamTlsContext tlsContext) {\n+        super(name, edsServiceName, lrsServerName, maxConcurrentRequests, tlsContext);\n+      }\n+\n+      @Override\n+      void start() {\n+        String resourceName = edsServiceName != null ? edsServiceName : name;\n+        logger.log(XdsLogLevel.INFO, \"Start watching EDS resource {0}\", resourceName);\n+        xdsClient.watchEdsResource(resourceName, this);\n+      }\n+\n+      @Override\n+      protected void shutdown() {\n+        super.shutdown();\n+        String resourceName = edsServiceName != null ? edsServiceName : name;\n+        logger.log(XdsLogLevel.INFO, \"Stop watching EDS resource {0}\", resourceName);\n+        xdsClient.cancelEdsResourceWatch(resourceName, this);\n+      }\n+\n+      @Override\n+      public void onChanged(final EdsUpdate update) {\n+        class EndpointsUpdated implements Runnable {\n+          @Override\n+          public void run() {\n+            if (shutdown) {\n+              return;\n+            }\n+            logger.log(XdsLogLevel.DEBUG, \"Received endpoint update {0}\", update);\n+            if (logger.isLoggable(XdsLogLevel.INFO)) {\n+              logger.log(XdsLogLevel.INFO, \"Cluster {0}: {1} localities, {2} drop categories\",\n+                  update.getClusterName(), update.getLocalityLbEndpointsMap().size(),\n+                  update.getDropPolicies().size());\n+            }\n+            Map<Locality, LocalityLbEndpoints> localityLbEndpoints =\n+                update.getLocalityLbEndpointsMap();\n+            List<DropOverload> dropOverloads = update.getDropPolicies();\n+            List<EquivalentAddressGroup> addresses = new ArrayList<>();\n+            Map<String, Map<Locality, Integer>> prioritizedLocalityWeights = new HashMap<>();\n+            for (Locality locality : localityLbEndpoints.keySet()) {\n+              LocalityLbEndpoints localityLbInfo = localityLbEndpoints.get(locality);\n+              int priority = localityLbInfo.getPriority();\n+              String priorityName = priorityName(name, priority);\n+              boolean discard = true;\n+              for (LbEndpoint endpoint : localityLbInfo.getEndpoints()) {\n+                if (endpoint.isHealthy()) {\n+                  discard = false;\n+                  EquivalentAddressGroup eag =\n+                      AddressFilter.setPathFilter(\n+                          endpoint.getAddress(),\n+                          Arrays.asList(priorityName, localityName(locality)));\n+                  addresses.add(eag);\n+                }\n+              }\n+              if (discard) {\n+                logger.log(XdsLogLevel.INFO,\n+                    \"Discard locality {0} with 0 healthy endpoints\", locality);\n+                continue;\n+              }\n+              if (!prioritizedLocalityWeights.containsKey(priorityName)) {\n+                prioritizedLocalityWeights.put(priorityName, new HashMap<Locality, Integer>());\n+              }\n+              prioritizedLocalityWeights.get(priorityName).put(\n+                  locality, localityLbInfo.getLocalityWeight());\n+            }\n+            if (prioritizedLocalityWeights.isEmpty()) {\n+              // Transient state, neither as a result or an error.\n+              logger.log(XdsLogLevel.INFO,\n+                  \"Cluster {0} has no usable priority/locality/endpoint\", update.getClusterName());\n+              return;\n+            }\n+            List<String> priorities = new ArrayList<>(prioritizedLocalityWeights.keySet());\n+            Collections.sort(priorities);\n+            Map<String, PolicySelection> priorityLbPolicies =\n+                generateClusterPriorityLbPolicies(name, edsServiceName, lrsServerName,\n+                    maxConcurrentRequests, tlsContext, localityPickingPolicy,\n+                    endpointPickingPolicy, lbRegistry, prioritizedLocalityWeights, dropOverloads);\n+            status = Status.OK;\n+            resolved = true;\n+            result = new ClusterResolutionResult(addresses, priorityLbPolicies, priorities);\n+            handleEndpointResourceUpdate();\n+          }\n+        }\n+\n+        syncContext.execute(new EndpointsUpdated());\n+      }\n+\n+      @Override\n+      public void onResourceDoesNotExist(final String resourceName) {\n+        syncContext.execute(new Runnable() {\n+          @Override\n+          public void run() {\n+            if (shutdown) {\n+              return;\n+            }\n+            logger.log(XdsLogLevel.INFO, \"Resource {0} unavailable\", resourceName);\n+            status = Status.OK;\n+            resolved = true;\n+            result = null;  // resource revoked\n+            handleEndpointResourceUpdate();\n+          }\n+        });\n+      }\n+\n+      @Override\n+      public void onError(final Status error) {\n+        syncContext.execute(new Runnable() {\n+          @Override\n+          public void run() {\n+            if (shutdown) {\n+              return;\n+            }\n+            status = error;\n+            logger.log(XdsLogLevel.WARNING, \"Received EDS error: {0}\", error);\n+            handleEndpointResolutionError();\n+          }\n+        });\n+      }\n+    }\n+\n+    private class LogicalDnsClusterState extends ClusterState {\n+      private final NameResolver resolver;\n+      @Nullable\n+      private BackoffPolicy backoffPolicy;\n+      @Nullable\n+      private ScheduledHandle scheduledRefresh;\n+\n+      private LogicalDnsClusterState(String name, @Nullable String lrsServerName,\n+          @Nullable Long maxConcurrentRequests, @Nullable UpstreamTlsContext tlsContext) {\n+        super(name, null, lrsServerName, maxConcurrentRequests, tlsContext);\n+        NameResolver.Args args = helper.getNameResolverArgs();\n+        URI uri;\n+        try {\n+          uri = new URI(authority);\n+        } catch (URISyntaxException e) {\n+          // TODO(chengyuanzhang): unlikely to happen, but maybe handle it more gracefully.\n+          throw new AssertionError(\"Bug, invalid authority: \" + authority, e);\n+        }\n+        resolver = helper.getNameResolverRegistry().asFactory().newNameResolver(uri, args);\n+      }\n+\n+      @Override\n+      void start() {\n+        resolver.start(new NameResolverListener());\n+      }\n+\n+      @Override\n+      void shutdown() {\n+        super.shutdown();\n+        resolver.shutdown();\n+        if (scheduledRefresh != null) {\n+          scheduledRefresh.cancel();\n+        }\n+      }\n+\n+      private class DelayedNameResolverRefresh implements Runnable {\n+        @Override\n+        public void run() {\n+          scheduledRefresh = null;\n+          if (!shutdown) {\n+            resolver.refresh();\n+          }\n+        }\n+      }\n+\n+      private class NameResolverListener extends NameResolver.Listener2 {\n+        @Override\n+        public void onResult(final ResolutionResult resolutionResult) {\n+          class NameResolved implements Runnable {\n+            @Override\n+            public void run() {\n+              if (shutdown) {\n+                return;\n+              }\n+              backoffPolicy = null;  // reset backoff sequence if succeeded\n+              String priorityName = priorityName(name, 0);  // value doesn't matter\n+              List<EquivalentAddressGroup> addresses = new ArrayList<>();\n+              for (EquivalentAddressGroup eag : resolutionResult.getAddresses()) {\n+                EquivalentAddressGroup annotatedAddr =\n+                    AddressFilter.setPathFilter(\n+                        eag, Arrays.asList(\n+                            priorityName, logicalDnsClusterLocality.toString()));\n+                addresses.add(annotatedAddr);\n+              }\n+              LoadBalancerProvider endpointPickingLbProvider =\n+                  lbRegistry.getProvider(LOGICAL_DNS_CLUSTER_ENDPOINT_PICKING_POLICY_OVERRIDE);\n+              PolicySelection endpointPickingPolicy =\n+                  new PolicySelection(endpointPickingLbProvider, null);\n+              PolicySelection priorityLbPolicy =\n+                  generateClusterPriorityLbPolicy(name, edsServiceName, lrsServerName,\n+                      maxConcurrentRequests, tlsContext, endpointPickingPolicy, lbRegistry,\n+                      logicalDnsClusterLocality, Collections.<DropOverload>emptyList());\n+              status = Status.OK;\n+              resolved = true;\n+              result = new ClusterResolutionResult(addresses, priorityName, priorityLbPolicy);\n+              handleEndpointResourceUpdate();\n+            }\n+          }\n+\n+          syncContext.execute(new NameResolved());\n+        }\n+\n+        @Override\n+        public void onError(final Status error) {\n+          syncContext.execute(new Runnable() {\n+            @Override\n+            public void run() {\n+              if (shutdown) {\n+                return;\n+              }\n+              status = error;\n+              // NameResolver.Listener API cannot distinguish transient errors, we should avoid\n+              // waiting for DNS addresses indefinitely.\n+              resolved = true;\n+              handleEndpointResolutionError();\n+              if (scheduledRefresh != null && scheduledRefresh.isPending()) {\n+                return;\n+              }\n+              if (backoffPolicy == null) {\n+                backoffPolicy = backoffPolicyProvider.get();\n+              }\n+              long delayNanos = backoffPolicy.nextBackoffNanos();\n+              logger.log(XdsLogLevel.DEBUG,\n+                  \"Scheduling DNS resolution backoff for {0} ns\", delayNanos);\n+              scheduledRefresh =\n+                  syncContext.schedule(\n+                      new DelayedNameResolverRefresh(), delayNanos, TimeUnit.NANOSECONDS,\n+                      timeService);\n+            }\n+          });\n+        }\n+      }\n+    }\n+  }\n+\n+  private static class ClusterResolutionResult {\n+    // Endpoint addresses.\n+    private final List<EquivalentAddressGroup> addresses;\n+    // Load balancing policy (with config) for each priority in the cluster.\n+    private final Map<String, PolicySelection> priorityLbPolicies;\n+    // List of priority names ordered in descending priorities.\n+    private final List<String> priorities;\n+\n+    ClusterResolutionResult(List<EquivalentAddressGroup> addresses, String priority,\n+        PolicySelection priorityLbPolicy) {\n+      this(addresses, Collections.singletonMap(priority, priorityLbPolicy),\n+          Collections.singletonList(priority));\n+    }\n+\n+    ClusterResolutionResult(List<EquivalentAddressGroup> addresses,\n+        Map<String, PolicySelection> priorityLbPolicies, List<String> priorities) {\n+      this.addresses = addresses;\n+      this.priorityLbPolicies = priorityLbPolicies;\n+      this.priorities = priorities;\n+    }\n+  }\n+\n+  /**\n+   * Generates the intra-priority LB policy for a single priority with the single given locality.\n+   *\n+   * <p>priority LB -> cluster_impl LB -> (lrs LB) -> pick_first\n+   */\n+  private PolicySelection generateClusterPriorityLbPolicy(\n+      String cluster, @Nullable String edsServiceName, @Nullable String lrsServerName,\n+      @Nullable Long maxConcurrentRequests, @Nullable UpstreamTlsContext tlsContext,\n+      PolicySelection endpointPickingPolicy, LoadBalancerRegistry lbRegistry,\n+      Locality locality, List<DropOverload> dropOverloads) {\n+    PolicySelection localityLbPolicy =\n+        generateLocalityLbConfig(locality, cluster, edsServiceName, lrsServerName,\n+            endpointPickingPolicy, lbRegistry);\n+    ClusterImplConfig clusterImplConfig =\n+        new ClusterImplConfig(cluster, edsServiceName, lrsServerName, maxConcurrentRequests,\n+            dropOverloads, localityLbPolicy, tlsContext);\n+    LoadBalancerProvider clusterImplLbProvider =\n+        lbRegistry.getProvider(XdsLbPolicies.CLUSTER_IMPL_POLICY_NAME);\n+    return new PolicySelection(clusterImplLbProvider, clusterImplConfig);\n+  }\n+\n+  /**\n+   * Generates intra-priority LB policies (with config) for priorities in the cluster.\n+   *\n+   * <p>priority LB -> cluster_impl LB (one per priority) -> weighted_target LB\n+   * -> (lrs LB (one per locality)) -> round_robin\n+   */\n+  private static Map<String, PolicySelection> generateClusterPriorityLbPolicies(\n+      String cluster, @Nullable String edsServiceName, @Nullable String lrsServerName,\n+      @Nullable Long maxConcurrentRequests, @Nullable UpstreamTlsContext tlsContext,\n+      PolicySelection localityPickingPolicy, PolicySelection endpointPickingPolicy,\n+      LoadBalancerRegistry lbRegistry,\n+      Map<String, Map<Locality, Integer>> prioritizedLocalityWeights,\n+      List<DropOverload> dropOverloads) {\n+    Map<String, PolicySelection> policies = new HashMap<>();\n+    for (String priority : prioritizedLocalityWeights.keySet()) {\n+      WeightedTargetConfig localityPickingLbConfig =\n+          generateLocalityPickingLbConfig(cluster, edsServiceName, lrsServerName,\n+              endpointPickingPolicy, lbRegistry, prioritizedLocalityWeights.get(priority));\n+      PolicySelection localityPicking =\n+          new PolicySelection(localityPickingPolicy.getProvider(), localityPickingLbConfig);\n+      ClusterImplConfig clusterImplConfig =\n+          new ClusterImplConfig(cluster, edsServiceName, lrsServerName, maxConcurrentRequests,\n+              dropOverloads, localityPicking, tlsContext);\n+      LoadBalancerProvider clusterImplLbProvider =\n+          lbRegistry.getProvider(XdsLbPolicies.CLUSTER_IMPL_POLICY_NAME);\n+      PolicySelection clusterImplPolicy =\n+          new PolicySelection(clusterImplLbProvider, clusterImplConfig);\n+      policies.put(priority, clusterImplPolicy);\n+    }\n+    return policies;\n+  }\n+\n+  private static WeightedTargetConfig generateLocalityPickingLbConfig(\n+      String cluster, @Nullable String edsServiceName, @Nullable String lrsServerName,\n+      PolicySelection endpointPickingPolicy, LoadBalancerRegistry lbRegistry,\n+      Map<Locality, Integer> localityWeights) {\n+    Map<String, WeightedPolicySelection> targets = new HashMap<>();\n+    for (Locality locality : localityWeights.keySet()) {\n+      int weight = localityWeights.get(locality);\n+      PolicySelection childPolicy =\n+          generateLocalityLbConfig(locality, cluster, edsServiceName, lrsServerName,\n+              endpointPickingPolicy, lbRegistry);\n+      targets.put(localityName(locality), new WeightedPolicySelection(weight, childPolicy));\n+    }\n+    return new WeightedTargetConfig(Collections.unmodifiableMap(targets));\n+  }\n+\n+  /**\n+   * Generates intra-locality LB policy (with config) for the given locality.\n+   */\n+  private static PolicySelection generateLocalityLbConfig(\n+      Locality locality, String cluster, @Nullable String edsServiceName,\n+      @Nullable String lrsServerName, PolicySelection endpointPickingPolicy,\n+      LoadBalancerRegistry lbRegistry) {\n+    PolicySelection policy;\n+    if (lrsServerName != null) {\n+      LrsConfig childConfig =\n+          new LrsConfig(cluster, edsServiceName, lrsServerName, locality, endpointPickingPolicy);\n+      LoadBalancerProvider childPolicyProvider = lbRegistry.getProvider(LRS_POLICY_NAME);\n+      policy = new PolicySelection(childPolicyProvider, childConfig);\n+    } else {\n+      policy = endpointPickingPolicy;\n+    }\n+    return policy;\n+  }\n+\n+  /**\n+   * Generate a string that represents the priority in the LB policy config. The string is unique\n+   * across priorities in all clusters. The string is alphabetically comparable with predicate", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69d8a852ae6977ba771dac40a2d3aff54c6ab594"}, "originalPosition": 669}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjM1NjQ3OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/ClusterResolverLoadBalancer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOTowODo1N1rOIJRJjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOTowODo1N1rOIJRJjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU4OTA2OA==", "bodyText": "Generates", "url": "https://github.com/grpc/grpc-java/pull/7685#discussion_r546589068", "createdAt": "2020-12-21T09:08:57Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/ClusterResolverLoadBalancer.java", "diffHunk": "@@ -0,0 +1,684 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static io.grpc.ConnectivityState.CONNECTING;\n+import static io.grpc.ConnectivityState.TRANSIENT_FAILURE;\n+import static io.grpc.xds.XdsLbPolicies.LRS_POLICY_NAME;\n+import static io.grpc.xds.XdsLbPolicies.PRIORITY_POLICY_NAME;\n+import static io.grpc.xds.XdsSubchannelPickers.BUFFER_PICKER;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.EquivalentAddressGroup;\n+import io.grpc.InternalLogId;\n+import io.grpc.LoadBalancer;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.LoadBalancerRegistry;\n+import io.grpc.NameResolver;\n+import io.grpc.NameResolver.ResolutionResult;\n+import io.grpc.Status;\n+import io.grpc.SynchronizationContext;\n+import io.grpc.SynchronizationContext.ScheduledHandle;\n+import io.grpc.internal.BackoffPolicy;\n+import io.grpc.internal.ExponentialBackoffPolicy;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.internal.ServiceConfigUtil.PolicySelection;\n+import io.grpc.util.GracefulSwitchLoadBalancer;\n+import io.grpc.xds.ClusterImplLoadBalancerProvider.ClusterImplConfig;\n+import io.grpc.xds.ClusterResolverLoadBalancerProvider.ClusterResolverConfig;\n+import io.grpc.xds.ClusterResolverLoadBalancerProvider.ClusterResolverConfig.DiscoveryMechanism;\n+import io.grpc.xds.EnvoyProtoData.DropOverload;\n+import io.grpc.xds.EnvoyProtoData.LbEndpoint;\n+import io.grpc.xds.EnvoyProtoData.Locality;\n+import io.grpc.xds.EnvoyProtoData.LocalityLbEndpoints;\n+import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;\n+import io.grpc.xds.LrsLoadBalancerProvider.LrsConfig;\n+import io.grpc.xds.PriorityLoadBalancerProvider.PriorityLbConfig;\n+import io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection;\n+import io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedTargetConfig;\n+import io.grpc.xds.XdsClient.EdsResourceWatcher;\n+import io.grpc.xds.XdsClient.EdsUpdate;\n+import io.grpc.xds.XdsLogger.XdsLogLevel;\n+import io.grpc.xds.XdsSubchannelPickers.ErrorPicker;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Load balancer for cluster_resolver_experimental LB policy. This LB policy is the child LB policy\n+ * of the cds_experimental LB policy and the parent LB policy of the priority_experimental LB\n+ * policy in the xDS load balancing hierarchy. This policy resolves endpoints of non-aggregate\n+ * clusters (e.g., EDS or Logical DNS) and groups endpoints in priorities and localities to be\n+ * used in the downstream LB policies for ine-grained load balancing purposes.\n+ */\n+final class ClusterResolverLoadBalancer extends LoadBalancer {\n+\n+  private static final String LOGICAL_DNS_CLUSTER_ENDPOINT_PICKING_POLICY_OVERRIDE = \"pick_first\";\n+  private static final Locality logicalDnsClusterLocality = new Locality(\"\", \"\", \"\");\n+  private final XdsLogger logger;\n+  private final String authority;\n+  private final SynchronizationContext syncContext;\n+  private final ScheduledExecutorService timeService;\n+  private final LoadBalancerRegistry lbRegistry;\n+  private final BackoffPolicy.Provider backoffPolicyProvider;\n+  private final GracefulSwitchLoadBalancer delegate;\n+  private ObjectPool<XdsClient> xdsClientPool;\n+  private XdsClient xdsClient;\n+  private ClusterResolverConfig config;\n+\n+  ClusterResolverLoadBalancer(Helper helper) {\n+    this(helper, LoadBalancerRegistry.getDefaultRegistry(),\n+        new ExponentialBackoffPolicy.Provider());\n+  }\n+\n+  @VisibleForTesting\n+  ClusterResolverLoadBalancer(Helper helper, LoadBalancerRegistry lbRegistry,\n+      BackoffPolicy.Provider backoffPolicyProvider) {\n+    this.lbRegistry = checkNotNull(lbRegistry, \"lbRegistry\");\n+    this.backoffPolicyProvider = checkNotNull(backoffPolicyProvider, \"backoffPolicyProvider\");\n+    this.authority = checkNotNull(checkNotNull(helper, \"helper\").getAuthority(), \"authority\");\n+    this.syncContext = checkNotNull(helper.getSynchronizationContext(), \"syncContext\");\n+    this.timeService = checkNotNull(helper.getScheduledExecutorService(), \"timeService\");\n+    delegate = new GracefulSwitchLoadBalancer(helper);\n+    logger = XdsLogger.withLogId(\n+        InternalLogId.allocate(\"cluster-resolver-lb\", helper.getAuthority()));\n+    logger.log(XdsLogLevel.INFO, \"Created\");\n+  }\n+\n+  @Override\n+  public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n+    logger.log(XdsLogLevel.DEBUG, \"Received resolution result: {0}\", resolvedAddresses);\n+    if (xdsClientPool == null) {\n+      xdsClientPool = resolvedAddresses.getAttributes().get(XdsAttributes.XDS_CLIENT_POOL);\n+      xdsClient = xdsClientPool.getObject();\n+    }\n+    ClusterResolverConfig config =\n+        (ClusterResolverConfig) resolvedAddresses.getLoadBalancingPolicyConfig();\n+    if (!Objects.equals(this.config, config)) {\n+      logger.log(XdsLogLevel.DEBUG, \"Config: {0}\", config);\n+      delegate.switchTo(new ClusterResolverLbStateFactory());\n+    }\n+    this.config = config;\n+    delegate.handleResolvedAddresses(resolvedAddresses);\n+  }\n+\n+  @Override\n+  public void handleNameResolutionError(Status error) {\n+    logger.log(XdsLogLevel.WARNING, \"Received name resolution error: {0}\", error);\n+    delegate.handleNameResolutionError(error);\n+  }\n+\n+  @Override\n+  public void shutdown() {\n+    logger.log(XdsLogLevel.INFO, \"Shutdown\");\n+    delegate.shutdown();\n+    if (xdsClientPool != null) {\n+      xdsClientPool.returnObject(xdsClient);\n+    }\n+  }\n+\n+  private final class ClusterResolverLbStateFactory extends LoadBalancer.Factory {\n+    @Override\n+    public LoadBalancer newLoadBalancer(Helper helper) {\n+      return new ClusterResolverLbState(helper);\n+    }\n+  }\n+\n+  /**\n+   * The state of a cluster_resolver LB working session. A new instance is created whenever\n+   * the cluster_resolver LB receives a new config. The old instance is replaced when the\n+   * new one is ready to handle new RPCs.\n+   */\n+  private final class ClusterResolverLbState extends LoadBalancer {\n+    private final Helper helper;\n+    private final List<String> clusters = new ArrayList<>();\n+    private final Map<String, ClusterState> clusterStates = new HashMap<>();\n+    // An aggregate cluster is thought of as a cluster that groups the endpoints of the underlying\n+    // clusters together for load balancing purposes only. Load balancing policies (both locality\n+    // level and endpoint level) are configured by the aggregate cluster and apply to all of its\n+    // underlying clusters.\n+    private PolicySelection localityPickingPolicy;\n+    private PolicySelection endpointPickingPolicy;\n+    private ResolvedAddresses resolvedAddresses;\n+    private LoadBalancer childLb;\n+\n+    ClusterResolverLbState(Helper helper) {\n+      this.helper = checkNotNull(helper, \"helper\");\n+      logger.log(XdsLogLevel.DEBUG, \"New ClusterResolverLbState\");\n+    }\n+\n+    @Override\n+    public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n+      this.resolvedAddresses = resolvedAddresses;\n+      ClusterResolverConfig config =\n+          (ClusterResolverConfig) resolvedAddresses.getLoadBalancingPolicyConfig();\n+      for (DiscoveryMechanism instance : config.discoveryMechanisms) {\n+        clusters.add(instance.cluster);\n+        ClusterState state;\n+        if (instance.type == DiscoveryMechanism.Type.EDS) {\n+          state =\n+              new EdsClusterState(instance.cluster, instance.edsServiceName,\n+                  instance.lrsServerName, instance.maxConcurrentRequests, instance.tlsContext);\n+          clusterStates.put(instance.cluster, state);\n+        } else {  // logical DNS\n+          state = new LogicalDnsClusterState(instance.cluster, instance.lrsServerName,\n+              instance.maxConcurrentRequests, instance.tlsContext);\n+          clusterStates.put(instance.cluster, state);\n+        }\n+        state.start();\n+        localityPickingPolicy = config.localityPickingPolicy;\n+        endpointPickingPolicy = config.endpointPickingPolicy;\n+      }\n+    }\n+\n+    @Override\n+    public void handleNameResolutionError(Status error) {\n+      if (childLb != null) {\n+        childLb.handleNameResolutionError(error);\n+      } else {\n+        helper.updateBalancingState(TRANSIENT_FAILURE, new ErrorPicker(error));\n+      }\n+    }\n+\n+    @Override\n+    public void shutdown() {\n+      for (ClusterState state : clusterStates.values()) {\n+        state.shutdown();\n+      }\n+      if (childLb != null) {\n+        childLb.shutdown();\n+      }\n+    }\n+\n+    private void handleEndpointResourceUpdate() {\n+      List<EquivalentAddressGroup> addresses = new ArrayList<>();\n+      Map<String, PolicySelection> priorityLbPolicies = new HashMap<>();\n+      List<String> priorities = new ArrayList<>();  // totally ordered priority list\n+      boolean allResolved = true;\n+      for (String cluster : clusters) {\n+        ClusterState state = clusterStates.get(cluster);\n+        if (!state.resolved) {\n+          allResolved = false;\n+          continue;\n+        }\n+        if (state.result != null) {\n+          addresses.addAll(state.result.addresses);\n+          priorityLbPolicies.putAll(state.result.priorityLbPolicies);\n+          priorities.addAll(state.result.priorities);\n+        }\n+      }\n+      if (addresses.isEmpty()) {\n+        if (childLb != null) {\n+          childLb.shutdown();\n+          childLb = null;\n+        }\n+        if (allResolved) {\n+          Status unavailable = Status.UNAVAILABLE.withDescription(\"No endpoint available\");\n+          helper.updateBalancingState(TRANSIENT_FAILURE, new ErrorPicker(unavailable));\n+        } else {\n+          helper.updateBalancingState(CONNECTING, BUFFER_PICKER);\n+        }\n+        return;\n+      }\n+      PriorityLbConfig childConfig =\n+          new PriorityLbConfig(Collections.unmodifiableMap(priorityLbPolicies),\n+              Collections.unmodifiableList(priorities));\n+      if (childLb == null) {\n+        childLb = lbRegistry.getProvider(PRIORITY_POLICY_NAME).newLoadBalancer(helper);\n+      }\n+      childLb.handleResolvedAddresses(\n+          resolvedAddresses.toBuilder()\n+              .setLoadBalancingPolicyConfig(childConfig)\n+              .setAddresses(Collections.unmodifiableList(addresses))\n+              .build());\n+    }\n+\n+    private void handleEndpointResolutionError() {\n+      boolean allInError = true;\n+      for (ClusterState state :  clusterStates.values()) {\n+        if (state.status.isOk()) {\n+          allInError = false;\n+        }\n+      }\n+      if (allInError) {\n+        // Propagate the error status of the last cluster. This is the best we can do.\n+        Status error = clusterStates.get(clusters.get(clusters.size() - 1)).status;\n+        if (childLb != null) {\n+          childLb.handleNameResolutionError(error);\n+        } else {\n+          helper.updateBalancingState(TRANSIENT_FAILURE, new ErrorPicker(error));\n+        }\n+      }\n+    }\n+\n+    /**\n+     * Resolution state of an underlying cluster.\n+     */\n+    private abstract class ClusterState {\n+      // Name of the cluster to be resolved.\n+      protected final String name;\n+      // The resource name to be used for resolving endpoints via EDS.\n+      // Always null if the cluster is a logical DNS cluster.\n+      @Nullable\n+      protected final String edsServiceName;\n+      @Nullable\n+      protected final String lrsServerName;\n+      @Nullable\n+      protected final Long maxConcurrentRequests;\n+      @Nullable\n+      protected final UpstreamTlsContext tlsContext;\n+      // Resolution status, may contain most recent error encountered.\n+      protected Status status = Status.OK;\n+      // True if has received resolution result.\n+      protected boolean resolved;\n+      // Most recently resolved addresses and config, or null if resource not exists.\n+      @Nullable\n+      protected ClusterResolutionResult result;\n+      protected boolean shutdown;\n+\n+      private ClusterState(String name, @Nullable String edsServiceName,\n+          @Nullable String lrsServerName, @Nullable Long maxConcurrentRequests,\n+          @Nullable UpstreamTlsContext tlsContext) {\n+        this.name = name;\n+        this.edsServiceName = edsServiceName;\n+        this.lrsServerName = lrsServerName;\n+        this.maxConcurrentRequests = maxConcurrentRequests;\n+        this.tlsContext = tlsContext;\n+      }\n+\n+      abstract void start();\n+\n+      void shutdown() {\n+        shutdown = true;\n+      }\n+    }\n+\n+    private class EdsClusterState extends ClusterState implements EdsResourceWatcher {\n+\n+      private EdsClusterState(String name, @Nullable String edsServiceName,\n+          @Nullable String lrsServerName, @Nullable Long maxConcurrentRequests,\n+          @Nullable UpstreamTlsContext tlsContext) {\n+        super(name, edsServiceName, lrsServerName, maxConcurrentRequests, tlsContext);\n+      }\n+\n+      @Override\n+      void start() {\n+        String resourceName = edsServiceName != null ? edsServiceName : name;\n+        logger.log(XdsLogLevel.INFO, \"Start watching EDS resource {0}\", resourceName);\n+        xdsClient.watchEdsResource(resourceName, this);\n+      }\n+\n+      @Override\n+      protected void shutdown() {\n+        super.shutdown();\n+        String resourceName = edsServiceName != null ? edsServiceName : name;\n+        logger.log(XdsLogLevel.INFO, \"Stop watching EDS resource {0}\", resourceName);\n+        xdsClient.cancelEdsResourceWatch(resourceName, this);\n+      }\n+\n+      @Override\n+      public void onChanged(final EdsUpdate update) {\n+        class EndpointsUpdated implements Runnable {\n+          @Override\n+          public void run() {\n+            if (shutdown) {\n+              return;\n+            }\n+            logger.log(XdsLogLevel.DEBUG, \"Received endpoint update {0}\", update);\n+            if (logger.isLoggable(XdsLogLevel.INFO)) {\n+              logger.log(XdsLogLevel.INFO, \"Cluster {0}: {1} localities, {2} drop categories\",\n+                  update.getClusterName(), update.getLocalityLbEndpointsMap().size(),\n+                  update.getDropPolicies().size());\n+            }\n+            Map<Locality, LocalityLbEndpoints> localityLbEndpoints =\n+                update.getLocalityLbEndpointsMap();\n+            List<DropOverload> dropOverloads = update.getDropPolicies();\n+            List<EquivalentAddressGroup> addresses = new ArrayList<>();\n+            Map<String, Map<Locality, Integer>> prioritizedLocalityWeights = new HashMap<>();\n+            for (Locality locality : localityLbEndpoints.keySet()) {\n+              LocalityLbEndpoints localityLbInfo = localityLbEndpoints.get(locality);\n+              int priority = localityLbInfo.getPriority();\n+              String priorityName = priorityName(name, priority);\n+              boolean discard = true;\n+              for (LbEndpoint endpoint : localityLbInfo.getEndpoints()) {\n+                if (endpoint.isHealthy()) {\n+                  discard = false;\n+                  EquivalentAddressGroup eag =\n+                      AddressFilter.setPathFilter(\n+                          endpoint.getAddress(),\n+                          Arrays.asList(priorityName, localityName(locality)));\n+                  addresses.add(eag);\n+                }\n+              }\n+              if (discard) {\n+                logger.log(XdsLogLevel.INFO,\n+                    \"Discard locality {0} with 0 healthy endpoints\", locality);\n+                continue;\n+              }\n+              if (!prioritizedLocalityWeights.containsKey(priorityName)) {\n+                prioritizedLocalityWeights.put(priorityName, new HashMap<Locality, Integer>());\n+              }\n+              prioritizedLocalityWeights.get(priorityName).put(\n+                  locality, localityLbInfo.getLocalityWeight());\n+            }\n+            if (prioritizedLocalityWeights.isEmpty()) {\n+              // Transient state, neither as a result or an error.\n+              logger.log(XdsLogLevel.INFO,\n+                  \"Cluster {0} has no usable priority/locality/endpoint\", update.getClusterName());\n+              return;\n+            }\n+            List<String> priorities = new ArrayList<>(prioritizedLocalityWeights.keySet());\n+            Collections.sort(priorities);\n+            Map<String, PolicySelection> priorityLbPolicies =\n+                generateClusterPriorityLbPolicies(name, edsServiceName, lrsServerName,\n+                    maxConcurrentRequests, tlsContext, localityPickingPolicy,\n+                    endpointPickingPolicy, lbRegistry, prioritizedLocalityWeights, dropOverloads);\n+            status = Status.OK;\n+            resolved = true;\n+            result = new ClusterResolutionResult(addresses, priorityLbPolicies, priorities);\n+            handleEndpointResourceUpdate();\n+          }\n+        }\n+\n+        syncContext.execute(new EndpointsUpdated());\n+      }\n+\n+      @Override\n+      public void onResourceDoesNotExist(final String resourceName) {\n+        syncContext.execute(new Runnable() {\n+          @Override\n+          public void run() {\n+            if (shutdown) {\n+              return;\n+            }\n+            logger.log(XdsLogLevel.INFO, \"Resource {0} unavailable\", resourceName);\n+            status = Status.OK;\n+            resolved = true;\n+            result = null;  // resource revoked\n+            handleEndpointResourceUpdate();\n+          }\n+        });\n+      }\n+\n+      @Override\n+      public void onError(final Status error) {\n+        syncContext.execute(new Runnable() {\n+          @Override\n+          public void run() {\n+            if (shutdown) {\n+              return;\n+            }\n+            status = error;\n+            logger.log(XdsLogLevel.WARNING, \"Received EDS error: {0}\", error);\n+            handleEndpointResolutionError();\n+          }\n+        });\n+      }\n+    }\n+\n+    private class LogicalDnsClusterState extends ClusterState {\n+      private final NameResolver resolver;\n+      @Nullable\n+      private BackoffPolicy backoffPolicy;\n+      @Nullable\n+      private ScheduledHandle scheduledRefresh;\n+\n+      private LogicalDnsClusterState(String name, @Nullable String lrsServerName,\n+          @Nullable Long maxConcurrentRequests, @Nullable UpstreamTlsContext tlsContext) {\n+        super(name, null, lrsServerName, maxConcurrentRequests, tlsContext);\n+        NameResolver.Args args = helper.getNameResolverArgs();\n+        URI uri;\n+        try {\n+          uri = new URI(authority);\n+        } catch (URISyntaxException e) {\n+          // TODO(chengyuanzhang): unlikely to happen, but maybe handle it more gracefully.\n+          throw new AssertionError(\"Bug, invalid authority: \" + authority, e);\n+        }\n+        resolver = helper.getNameResolverRegistry().asFactory().newNameResolver(uri, args);\n+      }\n+\n+      @Override\n+      void start() {\n+        resolver.start(new NameResolverListener());\n+      }\n+\n+      @Override\n+      void shutdown() {\n+        super.shutdown();\n+        resolver.shutdown();\n+        if (scheduledRefresh != null) {\n+          scheduledRefresh.cancel();\n+        }\n+      }\n+\n+      private class DelayedNameResolverRefresh implements Runnable {\n+        @Override\n+        public void run() {\n+          scheduledRefresh = null;\n+          if (!shutdown) {\n+            resolver.refresh();\n+          }\n+        }\n+      }\n+\n+      private class NameResolverListener extends NameResolver.Listener2 {\n+        @Override\n+        public void onResult(final ResolutionResult resolutionResult) {\n+          class NameResolved implements Runnable {\n+            @Override\n+            public void run() {\n+              if (shutdown) {\n+                return;\n+              }\n+              backoffPolicy = null;  // reset backoff sequence if succeeded\n+              String priorityName = priorityName(name, 0);  // value doesn't matter\n+              List<EquivalentAddressGroup> addresses = new ArrayList<>();\n+              for (EquivalentAddressGroup eag : resolutionResult.getAddresses()) {\n+                EquivalentAddressGroup annotatedAddr =\n+                    AddressFilter.setPathFilter(\n+                        eag, Arrays.asList(\n+                            priorityName, logicalDnsClusterLocality.toString()));\n+                addresses.add(annotatedAddr);\n+              }\n+              LoadBalancerProvider endpointPickingLbProvider =\n+                  lbRegistry.getProvider(LOGICAL_DNS_CLUSTER_ENDPOINT_PICKING_POLICY_OVERRIDE);\n+              PolicySelection endpointPickingPolicy =\n+                  new PolicySelection(endpointPickingLbProvider, null);\n+              PolicySelection priorityLbPolicy =\n+                  generateClusterPriorityLbPolicy(name, edsServiceName, lrsServerName,\n+                      maxConcurrentRequests, tlsContext, endpointPickingPolicy, lbRegistry,\n+                      logicalDnsClusterLocality, Collections.<DropOverload>emptyList());\n+              status = Status.OK;\n+              resolved = true;\n+              result = new ClusterResolutionResult(addresses, priorityName, priorityLbPolicy);\n+              handleEndpointResourceUpdate();\n+            }\n+          }\n+\n+          syncContext.execute(new NameResolved());\n+        }\n+\n+        @Override\n+        public void onError(final Status error) {\n+          syncContext.execute(new Runnable() {\n+            @Override\n+            public void run() {\n+              if (shutdown) {\n+                return;\n+              }\n+              status = error;\n+              // NameResolver.Listener API cannot distinguish transient errors, we should avoid\n+              // waiting for DNS addresses indefinitely.\n+              resolved = true;\n+              handleEndpointResolutionError();\n+              if (scheduledRefresh != null && scheduledRefresh.isPending()) {\n+                return;\n+              }\n+              if (backoffPolicy == null) {\n+                backoffPolicy = backoffPolicyProvider.get();\n+              }\n+              long delayNanos = backoffPolicy.nextBackoffNanos();\n+              logger.log(XdsLogLevel.DEBUG,\n+                  \"Scheduling DNS resolution backoff for {0} ns\", delayNanos);\n+              scheduledRefresh =\n+                  syncContext.schedule(\n+                      new DelayedNameResolverRefresh(), delayNanos, TimeUnit.NANOSECONDS,\n+                      timeService);\n+            }\n+          });\n+        }\n+      }\n+    }\n+  }\n+\n+  private static class ClusterResolutionResult {\n+    // Endpoint addresses.\n+    private final List<EquivalentAddressGroup> addresses;\n+    // Load balancing policy (with config) for each priority in the cluster.\n+    private final Map<String, PolicySelection> priorityLbPolicies;\n+    // List of priority names ordered in descending priorities.\n+    private final List<String> priorities;\n+\n+    ClusterResolutionResult(List<EquivalentAddressGroup> addresses, String priority,\n+        PolicySelection priorityLbPolicy) {\n+      this(addresses, Collections.singletonMap(priority, priorityLbPolicy),\n+          Collections.singletonList(priority));\n+    }\n+\n+    ClusterResolutionResult(List<EquivalentAddressGroup> addresses,\n+        Map<String, PolicySelection> priorityLbPolicies, List<String> priorities) {\n+      this.addresses = addresses;\n+      this.priorityLbPolicies = priorityLbPolicies;\n+      this.priorities = priorities;\n+    }\n+  }\n+\n+  /**\n+   * Generates the intra-priority LB policy for a single priority with the single given locality.\n+   *\n+   * <p>priority LB -> cluster_impl LB -> (lrs LB) -> pick_first\n+   */\n+  private PolicySelection generateClusterPriorityLbPolicy(\n+      String cluster, @Nullable String edsServiceName, @Nullable String lrsServerName,\n+      @Nullable Long maxConcurrentRequests, @Nullable UpstreamTlsContext tlsContext,\n+      PolicySelection endpointPickingPolicy, LoadBalancerRegistry lbRegistry,\n+      Locality locality, List<DropOverload> dropOverloads) {\n+    PolicySelection localityLbPolicy =\n+        generateLocalityLbConfig(locality, cluster, edsServiceName, lrsServerName,\n+            endpointPickingPolicy, lbRegistry);\n+    ClusterImplConfig clusterImplConfig =\n+        new ClusterImplConfig(cluster, edsServiceName, lrsServerName, maxConcurrentRequests,\n+            dropOverloads, localityLbPolicy, tlsContext);\n+    LoadBalancerProvider clusterImplLbProvider =\n+        lbRegistry.getProvider(XdsLbPolicies.CLUSTER_IMPL_POLICY_NAME);\n+    return new PolicySelection(clusterImplLbProvider, clusterImplConfig);\n+  }\n+\n+  /**\n+   * Generates intra-priority LB policies (with config) for priorities in the cluster.\n+   *\n+   * <p>priority LB -> cluster_impl LB (one per priority) -> weighted_target LB\n+   * -> (lrs LB (one per locality)) -> round_robin\n+   */\n+  private static Map<String, PolicySelection> generateClusterPriorityLbPolicies(\n+      String cluster, @Nullable String edsServiceName, @Nullable String lrsServerName,\n+      @Nullable Long maxConcurrentRequests, @Nullable UpstreamTlsContext tlsContext,\n+      PolicySelection localityPickingPolicy, PolicySelection endpointPickingPolicy,\n+      LoadBalancerRegistry lbRegistry,\n+      Map<String, Map<Locality, Integer>> prioritizedLocalityWeights,\n+      List<DropOverload> dropOverloads) {\n+    Map<String, PolicySelection> policies = new HashMap<>();\n+    for (String priority : prioritizedLocalityWeights.keySet()) {\n+      WeightedTargetConfig localityPickingLbConfig =\n+          generateLocalityPickingLbConfig(cluster, edsServiceName, lrsServerName,\n+              endpointPickingPolicy, lbRegistry, prioritizedLocalityWeights.get(priority));\n+      PolicySelection localityPicking =\n+          new PolicySelection(localityPickingPolicy.getProvider(), localityPickingLbConfig);\n+      ClusterImplConfig clusterImplConfig =\n+          new ClusterImplConfig(cluster, edsServiceName, lrsServerName, maxConcurrentRequests,\n+              dropOverloads, localityPicking, tlsContext);\n+      LoadBalancerProvider clusterImplLbProvider =\n+          lbRegistry.getProvider(XdsLbPolicies.CLUSTER_IMPL_POLICY_NAME);\n+      PolicySelection clusterImplPolicy =\n+          new PolicySelection(clusterImplLbProvider, clusterImplConfig);\n+      policies.put(priority, clusterImplPolicy);\n+    }\n+    return policies;\n+  }\n+\n+  private static WeightedTargetConfig generateLocalityPickingLbConfig(\n+      String cluster, @Nullable String edsServiceName, @Nullable String lrsServerName,\n+      PolicySelection endpointPickingPolicy, LoadBalancerRegistry lbRegistry,\n+      Map<Locality, Integer> localityWeights) {\n+    Map<String, WeightedPolicySelection> targets = new HashMap<>();\n+    for (Locality locality : localityWeights.keySet()) {\n+      int weight = localityWeights.get(locality);\n+      PolicySelection childPolicy =\n+          generateLocalityLbConfig(locality, cluster, edsServiceName, lrsServerName,\n+              endpointPickingPolicy, lbRegistry);\n+      targets.put(localityName(locality), new WeightedPolicySelection(weight, childPolicy));\n+    }\n+    return new WeightedTargetConfig(Collections.unmodifiableMap(targets));\n+  }\n+\n+  /**\n+   * Generates intra-locality LB policy (with config) for the given locality.\n+   */\n+  private static PolicySelection generateLocalityLbConfig(\n+      Locality locality, String cluster, @Nullable String edsServiceName,\n+      @Nullable String lrsServerName, PolicySelection endpointPickingPolicy,\n+      LoadBalancerRegistry lbRegistry) {\n+    PolicySelection policy;\n+    if (lrsServerName != null) {\n+      LrsConfig childConfig =\n+          new LrsConfig(cluster, edsServiceName, lrsServerName, locality, endpointPickingPolicy);\n+      LoadBalancerProvider childPolicyProvider = lbRegistry.getProvider(LRS_POLICY_NAME);\n+      policy = new PolicySelection(childPolicyProvider, childConfig);\n+    } else {\n+      policy = endpointPickingPolicy;\n+    }\n+    return policy;\n+  }\n+\n+  /**\n+   * Generate a string that represents the priority in the LB policy config. The string is unique\n+   * across priorities in all clusters. The string is alphabetically comparable with predicate\n+   * priorityName(c, p1) < priorityName(c, p2) iff p1 < p2. The ordering is undefined for\n+   * priorities in different clusters.\n+   */\n+  private static String priorityName(String cluster, int priority) {\n+    return cluster + \"[priority\" + priority + \"]\";\n+  }\n+\n+  /**\n+   * Generate a string that represents the locality in the LB policy config. The string is unique", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69d8a852ae6977ba771dac40a2d3aff54c6ab594"}, "originalPosition": 678}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNzk0Nzg2OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/ClusterResolverLoadBalancer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNzoxMjo1NFrOIJfpGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMDozOToyNFrOIJlSEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgyNjUyMA==", "bodyText": "Seems you assume the caller has de-duplicated the resolvedAddresses, not only resolvedAddresses.getLoadBalancingPolicyConfig(), so this code path can only be called once. This assumption on resolver and upstream lbs is too strong.", "url": "https://github.com/grpc/grpc-java/pull/7685#discussion_r546826520", "createdAt": "2020-12-21T17:12:54Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/ClusterResolverLoadBalancer.java", "diffHunk": "@@ -0,0 +1,684 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static io.grpc.ConnectivityState.CONNECTING;\n+import static io.grpc.ConnectivityState.TRANSIENT_FAILURE;\n+import static io.grpc.xds.XdsLbPolicies.LRS_POLICY_NAME;\n+import static io.grpc.xds.XdsLbPolicies.PRIORITY_POLICY_NAME;\n+import static io.grpc.xds.XdsSubchannelPickers.BUFFER_PICKER;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.EquivalentAddressGroup;\n+import io.grpc.InternalLogId;\n+import io.grpc.LoadBalancer;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.LoadBalancerRegistry;\n+import io.grpc.NameResolver;\n+import io.grpc.NameResolver.ResolutionResult;\n+import io.grpc.Status;\n+import io.grpc.SynchronizationContext;\n+import io.grpc.SynchronizationContext.ScheduledHandle;\n+import io.grpc.internal.BackoffPolicy;\n+import io.grpc.internal.ExponentialBackoffPolicy;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.internal.ServiceConfigUtil.PolicySelection;\n+import io.grpc.util.GracefulSwitchLoadBalancer;\n+import io.grpc.xds.ClusterImplLoadBalancerProvider.ClusterImplConfig;\n+import io.grpc.xds.ClusterResolverLoadBalancerProvider.ClusterResolverConfig;\n+import io.grpc.xds.ClusterResolverLoadBalancerProvider.ClusterResolverConfig.DiscoveryMechanism;\n+import io.grpc.xds.EnvoyProtoData.DropOverload;\n+import io.grpc.xds.EnvoyProtoData.LbEndpoint;\n+import io.grpc.xds.EnvoyProtoData.Locality;\n+import io.grpc.xds.EnvoyProtoData.LocalityLbEndpoints;\n+import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;\n+import io.grpc.xds.LrsLoadBalancerProvider.LrsConfig;\n+import io.grpc.xds.PriorityLoadBalancerProvider.PriorityLbConfig;\n+import io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection;\n+import io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedTargetConfig;\n+import io.grpc.xds.XdsClient.EdsResourceWatcher;\n+import io.grpc.xds.XdsClient.EdsUpdate;\n+import io.grpc.xds.XdsLogger.XdsLogLevel;\n+import io.grpc.xds.XdsSubchannelPickers.ErrorPicker;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Load balancer for cluster_resolver_experimental LB policy. This LB policy is the child LB policy\n+ * of the cds_experimental LB policy and the parent LB policy of the priority_experimental LB\n+ * policy in the xDS load balancing hierarchy. This policy resolves endpoints of non-aggregate\n+ * clusters (e.g., EDS or Logical DNS) and groups endpoints in priorities and localities to be\n+ * used in the downstream LB policies for ine-grained load balancing purposes.\n+ */\n+final class ClusterResolverLoadBalancer extends LoadBalancer {\n+\n+  private static final String LOGICAL_DNS_CLUSTER_ENDPOINT_PICKING_POLICY_OVERRIDE = \"pick_first\";\n+  private static final Locality logicalDnsClusterLocality = new Locality(\"\", \"\", \"\");\n+  private final XdsLogger logger;\n+  private final String authority;\n+  private final SynchronizationContext syncContext;\n+  private final ScheduledExecutorService timeService;\n+  private final LoadBalancerRegistry lbRegistry;\n+  private final BackoffPolicy.Provider backoffPolicyProvider;\n+  private final GracefulSwitchLoadBalancer delegate;\n+  private ObjectPool<XdsClient> xdsClientPool;\n+  private XdsClient xdsClient;\n+  private ClusterResolverConfig config;\n+\n+  ClusterResolverLoadBalancer(Helper helper) {\n+    this(helper, LoadBalancerRegistry.getDefaultRegistry(),\n+        new ExponentialBackoffPolicy.Provider());\n+  }\n+\n+  @VisibleForTesting\n+  ClusterResolverLoadBalancer(Helper helper, LoadBalancerRegistry lbRegistry,\n+      BackoffPolicy.Provider backoffPolicyProvider) {\n+    this.lbRegistry = checkNotNull(lbRegistry, \"lbRegistry\");\n+    this.backoffPolicyProvider = checkNotNull(backoffPolicyProvider, \"backoffPolicyProvider\");\n+    this.authority = checkNotNull(checkNotNull(helper, \"helper\").getAuthority(), \"authority\");\n+    this.syncContext = checkNotNull(helper.getSynchronizationContext(), \"syncContext\");\n+    this.timeService = checkNotNull(helper.getScheduledExecutorService(), \"timeService\");\n+    delegate = new GracefulSwitchLoadBalancer(helper);\n+    logger = XdsLogger.withLogId(\n+        InternalLogId.allocate(\"cluster-resolver-lb\", helper.getAuthority()));\n+    logger.log(XdsLogLevel.INFO, \"Created\");\n+  }\n+\n+  @Override\n+  public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n+    logger.log(XdsLogLevel.DEBUG, \"Received resolution result: {0}\", resolvedAddresses);\n+    if (xdsClientPool == null) {\n+      xdsClientPool = resolvedAddresses.getAttributes().get(XdsAttributes.XDS_CLIENT_POOL);\n+      xdsClient = xdsClientPool.getObject();\n+    }\n+    ClusterResolverConfig config =\n+        (ClusterResolverConfig) resolvedAddresses.getLoadBalancingPolicyConfig();\n+    if (!Objects.equals(this.config, config)) {\n+      logger.log(XdsLogLevel.DEBUG, \"Config: {0}\", config);\n+      delegate.switchTo(new ClusterResolverLbStateFactory());\n+    }\n+    this.config = config;\n+    delegate.handleResolvedAddresses(resolvedAddresses);\n+  }\n+\n+  @Override\n+  public void handleNameResolutionError(Status error) {\n+    logger.log(XdsLogLevel.WARNING, \"Received name resolution error: {0}\", error);\n+    delegate.handleNameResolutionError(error);\n+  }\n+\n+  @Override\n+  public void shutdown() {\n+    logger.log(XdsLogLevel.INFO, \"Shutdown\");\n+    delegate.shutdown();\n+    if (xdsClientPool != null) {\n+      xdsClientPool.returnObject(xdsClient);\n+    }\n+  }\n+\n+  private final class ClusterResolverLbStateFactory extends LoadBalancer.Factory {\n+    @Override\n+    public LoadBalancer newLoadBalancer(Helper helper) {\n+      return new ClusterResolverLbState(helper);\n+    }\n+  }\n+\n+  /**\n+   * The state of a cluster_resolver LB working session. A new instance is created whenever\n+   * the cluster_resolver LB receives a new config. The old instance is replaced when the\n+   * new one is ready to handle new RPCs.\n+   */\n+  private final class ClusterResolverLbState extends LoadBalancer {\n+    private final Helper helper;\n+    private final List<String> clusters = new ArrayList<>();\n+    private final Map<String, ClusterState> clusterStates = new HashMap<>();\n+    // An aggregate cluster is thought of as a cluster that groups the endpoints of the underlying\n+    // clusters together for load balancing purposes only. Load balancing policies (both locality\n+    // level and endpoint level) are configured by the aggregate cluster and apply to all of its\n+    // underlying clusters.\n+    private PolicySelection localityPickingPolicy;\n+    private PolicySelection endpointPickingPolicy;\n+    private ResolvedAddresses resolvedAddresses;\n+    private LoadBalancer childLb;\n+\n+    ClusterResolverLbState(Helper helper) {\n+      this.helper = checkNotNull(helper, \"helper\");\n+      logger.log(XdsLogLevel.DEBUG, \"New ClusterResolverLbState\");\n+    }\n+\n+    @Override\n+    public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n+      this.resolvedAddresses = resolvedAddresses;\n+      ClusterResolverConfig config =\n+          (ClusterResolverConfig) resolvedAddresses.getLoadBalancingPolicyConfig();\n+      for (DiscoveryMechanism instance : config.discoveryMechanisms) {\n+        clusters.add(instance.cluster);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69d8a852ae6977ba771dac40a2d3aff54c6ab594"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg5OTQ0OA==", "bodyText": "What do you mean for resolvedAddresses is de-duplicated? It is assuming clusters in the DiscoveryMechanism list are unique. Isn't that a valid assumption?\nThis is in the switchable component of ClusterResolverLoadBalancer, which is instantiated for any ClusterResolverConfig changes. It's a very coarse-grained handling for state transition, and initially I did not like it as mentioned in the design as this causes the whole LB subtree to be changed every time a single cluster's configuration changes. But after trying out other approaches such as to handle each cluster's configuration changes individually inside the LB policy, there were some very subtle issues such as keeping each update atomic and consistent.", "url": "https://github.com/grpc/grpc-java/pull/7685#discussion_r546899448", "createdAt": "2020-12-21T19:51:31Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/ClusterResolverLoadBalancer.java", "diffHunk": "@@ -0,0 +1,684 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static io.grpc.ConnectivityState.CONNECTING;\n+import static io.grpc.ConnectivityState.TRANSIENT_FAILURE;\n+import static io.grpc.xds.XdsLbPolicies.LRS_POLICY_NAME;\n+import static io.grpc.xds.XdsLbPolicies.PRIORITY_POLICY_NAME;\n+import static io.grpc.xds.XdsSubchannelPickers.BUFFER_PICKER;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.EquivalentAddressGroup;\n+import io.grpc.InternalLogId;\n+import io.grpc.LoadBalancer;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.LoadBalancerRegistry;\n+import io.grpc.NameResolver;\n+import io.grpc.NameResolver.ResolutionResult;\n+import io.grpc.Status;\n+import io.grpc.SynchronizationContext;\n+import io.grpc.SynchronizationContext.ScheduledHandle;\n+import io.grpc.internal.BackoffPolicy;\n+import io.grpc.internal.ExponentialBackoffPolicy;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.internal.ServiceConfigUtil.PolicySelection;\n+import io.grpc.util.GracefulSwitchLoadBalancer;\n+import io.grpc.xds.ClusterImplLoadBalancerProvider.ClusterImplConfig;\n+import io.grpc.xds.ClusterResolverLoadBalancerProvider.ClusterResolverConfig;\n+import io.grpc.xds.ClusterResolverLoadBalancerProvider.ClusterResolverConfig.DiscoveryMechanism;\n+import io.grpc.xds.EnvoyProtoData.DropOverload;\n+import io.grpc.xds.EnvoyProtoData.LbEndpoint;\n+import io.grpc.xds.EnvoyProtoData.Locality;\n+import io.grpc.xds.EnvoyProtoData.LocalityLbEndpoints;\n+import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;\n+import io.grpc.xds.LrsLoadBalancerProvider.LrsConfig;\n+import io.grpc.xds.PriorityLoadBalancerProvider.PriorityLbConfig;\n+import io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection;\n+import io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedTargetConfig;\n+import io.grpc.xds.XdsClient.EdsResourceWatcher;\n+import io.grpc.xds.XdsClient.EdsUpdate;\n+import io.grpc.xds.XdsLogger.XdsLogLevel;\n+import io.grpc.xds.XdsSubchannelPickers.ErrorPicker;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Load balancer for cluster_resolver_experimental LB policy. This LB policy is the child LB policy\n+ * of the cds_experimental LB policy and the parent LB policy of the priority_experimental LB\n+ * policy in the xDS load balancing hierarchy. This policy resolves endpoints of non-aggregate\n+ * clusters (e.g., EDS or Logical DNS) and groups endpoints in priorities and localities to be\n+ * used in the downstream LB policies for ine-grained load balancing purposes.\n+ */\n+final class ClusterResolverLoadBalancer extends LoadBalancer {\n+\n+  private static final String LOGICAL_DNS_CLUSTER_ENDPOINT_PICKING_POLICY_OVERRIDE = \"pick_first\";\n+  private static final Locality logicalDnsClusterLocality = new Locality(\"\", \"\", \"\");\n+  private final XdsLogger logger;\n+  private final String authority;\n+  private final SynchronizationContext syncContext;\n+  private final ScheduledExecutorService timeService;\n+  private final LoadBalancerRegistry lbRegistry;\n+  private final BackoffPolicy.Provider backoffPolicyProvider;\n+  private final GracefulSwitchLoadBalancer delegate;\n+  private ObjectPool<XdsClient> xdsClientPool;\n+  private XdsClient xdsClient;\n+  private ClusterResolverConfig config;\n+\n+  ClusterResolverLoadBalancer(Helper helper) {\n+    this(helper, LoadBalancerRegistry.getDefaultRegistry(),\n+        new ExponentialBackoffPolicy.Provider());\n+  }\n+\n+  @VisibleForTesting\n+  ClusterResolverLoadBalancer(Helper helper, LoadBalancerRegistry lbRegistry,\n+      BackoffPolicy.Provider backoffPolicyProvider) {\n+    this.lbRegistry = checkNotNull(lbRegistry, \"lbRegistry\");\n+    this.backoffPolicyProvider = checkNotNull(backoffPolicyProvider, \"backoffPolicyProvider\");\n+    this.authority = checkNotNull(checkNotNull(helper, \"helper\").getAuthority(), \"authority\");\n+    this.syncContext = checkNotNull(helper.getSynchronizationContext(), \"syncContext\");\n+    this.timeService = checkNotNull(helper.getScheduledExecutorService(), \"timeService\");\n+    delegate = new GracefulSwitchLoadBalancer(helper);\n+    logger = XdsLogger.withLogId(\n+        InternalLogId.allocate(\"cluster-resolver-lb\", helper.getAuthority()));\n+    logger.log(XdsLogLevel.INFO, \"Created\");\n+  }\n+\n+  @Override\n+  public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n+    logger.log(XdsLogLevel.DEBUG, \"Received resolution result: {0}\", resolvedAddresses);\n+    if (xdsClientPool == null) {\n+      xdsClientPool = resolvedAddresses.getAttributes().get(XdsAttributes.XDS_CLIENT_POOL);\n+      xdsClient = xdsClientPool.getObject();\n+    }\n+    ClusterResolverConfig config =\n+        (ClusterResolverConfig) resolvedAddresses.getLoadBalancingPolicyConfig();\n+    if (!Objects.equals(this.config, config)) {\n+      logger.log(XdsLogLevel.DEBUG, \"Config: {0}\", config);\n+      delegate.switchTo(new ClusterResolverLbStateFactory());\n+    }\n+    this.config = config;\n+    delegate.handleResolvedAddresses(resolvedAddresses);\n+  }\n+\n+  @Override\n+  public void handleNameResolutionError(Status error) {\n+    logger.log(XdsLogLevel.WARNING, \"Received name resolution error: {0}\", error);\n+    delegate.handleNameResolutionError(error);\n+  }\n+\n+  @Override\n+  public void shutdown() {\n+    logger.log(XdsLogLevel.INFO, \"Shutdown\");\n+    delegate.shutdown();\n+    if (xdsClientPool != null) {\n+      xdsClientPool.returnObject(xdsClient);\n+    }\n+  }\n+\n+  private final class ClusterResolverLbStateFactory extends LoadBalancer.Factory {\n+    @Override\n+    public LoadBalancer newLoadBalancer(Helper helper) {\n+      return new ClusterResolverLbState(helper);\n+    }\n+  }\n+\n+  /**\n+   * The state of a cluster_resolver LB working session. A new instance is created whenever\n+   * the cluster_resolver LB receives a new config. The old instance is replaced when the\n+   * new one is ready to handle new RPCs.\n+   */\n+  private final class ClusterResolverLbState extends LoadBalancer {\n+    private final Helper helper;\n+    private final List<String> clusters = new ArrayList<>();\n+    private final Map<String, ClusterState> clusterStates = new HashMap<>();\n+    // An aggregate cluster is thought of as a cluster that groups the endpoints of the underlying\n+    // clusters together for load balancing purposes only. Load balancing policies (both locality\n+    // level and endpoint level) are configured by the aggregate cluster and apply to all of its\n+    // underlying clusters.\n+    private PolicySelection localityPickingPolicy;\n+    private PolicySelection endpointPickingPolicy;\n+    private ResolvedAddresses resolvedAddresses;\n+    private LoadBalancer childLb;\n+\n+    ClusterResolverLbState(Helper helper) {\n+      this.helper = checkNotNull(helper, \"helper\");\n+      logger.log(XdsLogLevel.DEBUG, \"New ClusterResolverLbState\");\n+    }\n+\n+    @Override\n+    public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n+      this.resolvedAddresses = resolvedAddresses;\n+      ClusterResolverConfig config =\n+          (ClusterResolverConfig) resolvedAddresses.getLoadBalancingPolicyConfig();\n+      for (DiscoveryMechanism instance : config.discoveryMechanisms) {\n+        clusters.add(instance.cluster);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgyNjUyMA=="}, "originalCommit": {"oid": "69d8a852ae6977ba771dac40a2d3aff54c6ab594"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkwNTI5Mw==", "bodyText": "What do you mean for resolvedAddresses is de-duplicated?\n\nBy de-duplicated, I mean handleResolvedAddresses() only gets called once for ClusterResolverLbState. Yes, resolvedAddresses.getLoadBalancingPolicyConfig() is never changed for ClusterResolverLbState, but could handleResolvedAddresses() be called more than once? Why not call delegate.handleResolvedAddresses(resolvedAddresses) inside if (!Objects.equals(this.config, config)) {}", "url": "https://github.com/grpc/grpc-java/pull/7685#discussion_r546905293", "createdAt": "2020-12-21T20:05:27Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/ClusterResolverLoadBalancer.java", "diffHunk": "@@ -0,0 +1,684 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static io.grpc.ConnectivityState.CONNECTING;\n+import static io.grpc.ConnectivityState.TRANSIENT_FAILURE;\n+import static io.grpc.xds.XdsLbPolicies.LRS_POLICY_NAME;\n+import static io.grpc.xds.XdsLbPolicies.PRIORITY_POLICY_NAME;\n+import static io.grpc.xds.XdsSubchannelPickers.BUFFER_PICKER;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.EquivalentAddressGroup;\n+import io.grpc.InternalLogId;\n+import io.grpc.LoadBalancer;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.LoadBalancerRegistry;\n+import io.grpc.NameResolver;\n+import io.grpc.NameResolver.ResolutionResult;\n+import io.grpc.Status;\n+import io.grpc.SynchronizationContext;\n+import io.grpc.SynchronizationContext.ScheduledHandle;\n+import io.grpc.internal.BackoffPolicy;\n+import io.grpc.internal.ExponentialBackoffPolicy;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.internal.ServiceConfigUtil.PolicySelection;\n+import io.grpc.util.GracefulSwitchLoadBalancer;\n+import io.grpc.xds.ClusterImplLoadBalancerProvider.ClusterImplConfig;\n+import io.grpc.xds.ClusterResolverLoadBalancerProvider.ClusterResolverConfig;\n+import io.grpc.xds.ClusterResolverLoadBalancerProvider.ClusterResolverConfig.DiscoveryMechanism;\n+import io.grpc.xds.EnvoyProtoData.DropOverload;\n+import io.grpc.xds.EnvoyProtoData.LbEndpoint;\n+import io.grpc.xds.EnvoyProtoData.Locality;\n+import io.grpc.xds.EnvoyProtoData.LocalityLbEndpoints;\n+import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;\n+import io.grpc.xds.LrsLoadBalancerProvider.LrsConfig;\n+import io.grpc.xds.PriorityLoadBalancerProvider.PriorityLbConfig;\n+import io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection;\n+import io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedTargetConfig;\n+import io.grpc.xds.XdsClient.EdsResourceWatcher;\n+import io.grpc.xds.XdsClient.EdsUpdate;\n+import io.grpc.xds.XdsLogger.XdsLogLevel;\n+import io.grpc.xds.XdsSubchannelPickers.ErrorPicker;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Load balancer for cluster_resolver_experimental LB policy. This LB policy is the child LB policy\n+ * of the cds_experimental LB policy and the parent LB policy of the priority_experimental LB\n+ * policy in the xDS load balancing hierarchy. This policy resolves endpoints of non-aggregate\n+ * clusters (e.g., EDS or Logical DNS) and groups endpoints in priorities and localities to be\n+ * used in the downstream LB policies for ine-grained load balancing purposes.\n+ */\n+final class ClusterResolverLoadBalancer extends LoadBalancer {\n+\n+  private static final String LOGICAL_DNS_CLUSTER_ENDPOINT_PICKING_POLICY_OVERRIDE = \"pick_first\";\n+  private static final Locality logicalDnsClusterLocality = new Locality(\"\", \"\", \"\");\n+  private final XdsLogger logger;\n+  private final String authority;\n+  private final SynchronizationContext syncContext;\n+  private final ScheduledExecutorService timeService;\n+  private final LoadBalancerRegistry lbRegistry;\n+  private final BackoffPolicy.Provider backoffPolicyProvider;\n+  private final GracefulSwitchLoadBalancer delegate;\n+  private ObjectPool<XdsClient> xdsClientPool;\n+  private XdsClient xdsClient;\n+  private ClusterResolverConfig config;\n+\n+  ClusterResolverLoadBalancer(Helper helper) {\n+    this(helper, LoadBalancerRegistry.getDefaultRegistry(),\n+        new ExponentialBackoffPolicy.Provider());\n+  }\n+\n+  @VisibleForTesting\n+  ClusterResolverLoadBalancer(Helper helper, LoadBalancerRegistry lbRegistry,\n+      BackoffPolicy.Provider backoffPolicyProvider) {\n+    this.lbRegistry = checkNotNull(lbRegistry, \"lbRegistry\");\n+    this.backoffPolicyProvider = checkNotNull(backoffPolicyProvider, \"backoffPolicyProvider\");\n+    this.authority = checkNotNull(checkNotNull(helper, \"helper\").getAuthority(), \"authority\");\n+    this.syncContext = checkNotNull(helper.getSynchronizationContext(), \"syncContext\");\n+    this.timeService = checkNotNull(helper.getScheduledExecutorService(), \"timeService\");\n+    delegate = new GracefulSwitchLoadBalancer(helper);\n+    logger = XdsLogger.withLogId(\n+        InternalLogId.allocate(\"cluster-resolver-lb\", helper.getAuthority()));\n+    logger.log(XdsLogLevel.INFO, \"Created\");\n+  }\n+\n+  @Override\n+  public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n+    logger.log(XdsLogLevel.DEBUG, \"Received resolution result: {0}\", resolvedAddresses);\n+    if (xdsClientPool == null) {\n+      xdsClientPool = resolvedAddresses.getAttributes().get(XdsAttributes.XDS_CLIENT_POOL);\n+      xdsClient = xdsClientPool.getObject();\n+    }\n+    ClusterResolverConfig config =\n+        (ClusterResolverConfig) resolvedAddresses.getLoadBalancingPolicyConfig();\n+    if (!Objects.equals(this.config, config)) {\n+      logger.log(XdsLogLevel.DEBUG, \"Config: {0}\", config);\n+      delegate.switchTo(new ClusterResolverLbStateFactory());\n+    }\n+    this.config = config;\n+    delegate.handleResolvedAddresses(resolvedAddresses);\n+  }\n+\n+  @Override\n+  public void handleNameResolutionError(Status error) {\n+    logger.log(XdsLogLevel.WARNING, \"Received name resolution error: {0}\", error);\n+    delegate.handleNameResolutionError(error);\n+  }\n+\n+  @Override\n+  public void shutdown() {\n+    logger.log(XdsLogLevel.INFO, \"Shutdown\");\n+    delegate.shutdown();\n+    if (xdsClientPool != null) {\n+      xdsClientPool.returnObject(xdsClient);\n+    }\n+  }\n+\n+  private final class ClusterResolverLbStateFactory extends LoadBalancer.Factory {\n+    @Override\n+    public LoadBalancer newLoadBalancer(Helper helper) {\n+      return new ClusterResolverLbState(helper);\n+    }\n+  }\n+\n+  /**\n+   * The state of a cluster_resolver LB working session. A new instance is created whenever\n+   * the cluster_resolver LB receives a new config. The old instance is replaced when the\n+   * new one is ready to handle new RPCs.\n+   */\n+  private final class ClusterResolverLbState extends LoadBalancer {\n+    private final Helper helper;\n+    private final List<String> clusters = new ArrayList<>();\n+    private final Map<String, ClusterState> clusterStates = new HashMap<>();\n+    // An aggregate cluster is thought of as a cluster that groups the endpoints of the underlying\n+    // clusters together for load balancing purposes only. Load balancing policies (both locality\n+    // level and endpoint level) are configured by the aggregate cluster and apply to all of its\n+    // underlying clusters.\n+    private PolicySelection localityPickingPolicy;\n+    private PolicySelection endpointPickingPolicy;\n+    private ResolvedAddresses resolvedAddresses;\n+    private LoadBalancer childLb;\n+\n+    ClusterResolverLbState(Helper helper) {\n+      this.helper = checkNotNull(helper, \"helper\");\n+      logger.log(XdsLogLevel.DEBUG, \"New ClusterResolverLbState\");\n+    }\n+\n+    @Override\n+    public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n+      this.resolvedAddresses = resolvedAddresses;\n+      ClusterResolverConfig config =\n+          (ClusterResolverConfig) resolvedAddresses.getLoadBalancingPolicyConfig();\n+      for (DiscoveryMechanism instance : config.discoveryMechanisms) {\n+        clusters.add(instance.cluster);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgyNjUyMA=="}, "originalCommit": {"oid": "69d8a852ae6977ba771dac40a2d3aff54c6ab594"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkxODkyOA==", "bodyText": "I see, you mean superfluous updates. Fixed now.", "url": "https://github.com/grpc/grpc-java/pull/7685#discussion_r546918928", "createdAt": "2020-12-21T20:39:24Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/ClusterResolverLoadBalancer.java", "diffHunk": "@@ -0,0 +1,684 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static io.grpc.ConnectivityState.CONNECTING;\n+import static io.grpc.ConnectivityState.TRANSIENT_FAILURE;\n+import static io.grpc.xds.XdsLbPolicies.LRS_POLICY_NAME;\n+import static io.grpc.xds.XdsLbPolicies.PRIORITY_POLICY_NAME;\n+import static io.grpc.xds.XdsSubchannelPickers.BUFFER_PICKER;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.EquivalentAddressGroup;\n+import io.grpc.InternalLogId;\n+import io.grpc.LoadBalancer;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.LoadBalancerRegistry;\n+import io.grpc.NameResolver;\n+import io.grpc.NameResolver.ResolutionResult;\n+import io.grpc.Status;\n+import io.grpc.SynchronizationContext;\n+import io.grpc.SynchronizationContext.ScheduledHandle;\n+import io.grpc.internal.BackoffPolicy;\n+import io.grpc.internal.ExponentialBackoffPolicy;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.internal.ServiceConfigUtil.PolicySelection;\n+import io.grpc.util.GracefulSwitchLoadBalancer;\n+import io.grpc.xds.ClusterImplLoadBalancerProvider.ClusterImplConfig;\n+import io.grpc.xds.ClusterResolverLoadBalancerProvider.ClusterResolverConfig;\n+import io.grpc.xds.ClusterResolverLoadBalancerProvider.ClusterResolverConfig.DiscoveryMechanism;\n+import io.grpc.xds.EnvoyProtoData.DropOverload;\n+import io.grpc.xds.EnvoyProtoData.LbEndpoint;\n+import io.grpc.xds.EnvoyProtoData.Locality;\n+import io.grpc.xds.EnvoyProtoData.LocalityLbEndpoints;\n+import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;\n+import io.grpc.xds.LrsLoadBalancerProvider.LrsConfig;\n+import io.grpc.xds.PriorityLoadBalancerProvider.PriorityLbConfig;\n+import io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection;\n+import io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedTargetConfig;\n+import io.grpc.xds.XdsClient.EdsResourceWatcher;\n+import io.grpc.xds.XdsClient.EdsUpdate;\n+import io.grpc.xds.XdsLogger.XdsLogLevel;\n+import io.grpc.xds.XdsSubchannelPickers.ErrorPicker;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Load balancer for cluster_resolver_experimental LB policy. This LB policy is the child LB policy\n+ * of the cds_experimental LB policy and the parent LB policy of the priority_experimental LB\n+ * policy in the xDS load balancing hierarchy. This policy resolves endpoints of non-aggregate\n+ * clusters (e.g., EDS or Logical DNS) and groups endpoints in priorities and localities to be\n+ * used in the downstream LB policies for ine-grained load balancing purposes.\n+ */\n+final class ClusterResolverLoadBalancer extends LoadBalancer {\n+\n+  private static final String LOGICAL_DNS_CLUSTER_ENDPOINT_PICKING_POLICY_OVERRIDE = \"pick_first\";\n+  private static final Locality logicalDnsClusterLocality = new Locality(\"\", \"\", \"\");\n+  private final XdsLogger logger;\n+  private final String authority;\n+  private final SynchronizationContext syncContext;\n+  private final ScheduledExecutorService timeService;\n+  private final LoadBalancerRegistry lbRegistry;\n+  private final BackoffPolicy.Provider backoffPolicyProvider;\n+  private final GracefulSwitchLoadBalancer delegate;\n+  private ObjectPool<XdsClient> xdsClientPool;\n+  private XdsClient xdsClient;\n+  private ClusterResolverConfig config;\n+\n+  ClusterResolverLoadBalancer(Helper helper) {\n+    this(helper, LoadBalancerRegistry.getDefaultRegistry(),\n+        new ExponentialBackoffPolicy.Provider());\n+  }\n+\n+  @VisibleForTesting\n+  ClusterResolverLoadBalancer(Helper helper, LoadBalancerRegistry lbRegistry,\n+      BackoffPolicy.Provider backoffPolicyProvider) {\n+    this.lbRegistry = checkNotNull(lbRegistry, \"lbRegistry\");\n+    this.backoffPolicyProvider = checkNotNull(backoffPolicyProvider, \"backoffPolicyProvider\");\n+    this.authority = checkNotNull(checkNotNull(helper, \"helper\").getAuthority(), \"authority\");\n+    this.syncContext = checkNotNull(helper.getSynchronizationContext(), \"syncContext\");\n+    this.timeService = checkNotNull(helper.getScheduledExecutorService(), \"timeService\");\n+    delegate = new GracefulSwitchLoadBalancer(helper);\n+    logger = XdsLogger.withLogId(\n+        InternalLogId.allocate(\"cluster-resolver-lb\", helper.getAuthority()));\n+    logger.log(XdsLogLevel.INFO, \"Created\");\n+  }\n+\n+  @Override\n+  public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n+    logger.log(XdsLogLevel.DEBUG, \"Received resolution result: {0}\", resolvedAddresses);\n+    if (xdsClientPool == null) {\n+      xdsClientPool = resolvedAddresses.getAttributes().get(XdsAttributes.XDS_CLIENT_POOL);\n+      xdsClient = xdsClientPool.getObject();\n+    }\n+    ClusterResolverConfig config =\n+        (ClusterResolverConfig) resolvedAddresses.getLoadBalancingPolicyConfig();\n+    if (!Objects.equals(this.config, config)) {\n+      logger.log(XdsLogLevel.DEBUG, \"Config: {0}\", config);\n+      delegate.switchTo(new ClusterResolverLbStateFactory());\n+    }\n+    this.config = config;\n+    delegate.handleResolvedAddresses(resolvedAddresses);\n+  }\n+\n+  @Override\n+  public void handleNameResolutionError(Status error) {\n+    logger.log(XdsLogLevel.WARNING, \"Received name resolution error: {0}\", error);\n+    delegate.handleNameResolutionError(error);\n+  }\n+\n+  @Override\n+  public void shutdown() {\n+    logger.log(XdsLogLevel.INFO, \"Shutdown\");\n+    delegate.shutdown();\n+    if (xdsClientPool != null) {\n+      xdsClientPool.returnObject(xdsClient);\n+    }\n+  }\n+\n+  private final class ClusterResolverLbStateFactory extends LoadBalancer.Factory {\n+    @Override\n+    public LoadBalancer newLoadBalancer(Helper helper) {\n+      return new ClusterResolverLbState(helper);\n+    }\n+  }\n+\n+  /**\n+   * The state of a cluster_resolver LB working session. A new instance is created whenever\n+   * the cluster_resolver LB receives a new config. The old instance is replaced when the\n+   * new one is ready to handle new RPCs.\n+   */\n+  private final class ClusterResolverLbState extends LoadBalancer {\n+    private final Helper helper;\n+    private final List<String> clusters = new ArrayList<>();\n+    private final Map<String, ClusterState> clusterStates = new HashMap<>();\n+    // An aggregate cluster is thought of as a cluster that groups the endpoints of the underlying\n+    // clusters together for load balancing purposes only. Load balancing policies (both locality\n+    // level and endpoint level) are configured by the aggregate cluster and apply to all of its\n+    // underlying clusters.\n+    private PolicySelection localityPickingPolicy;\n+    private PolicySelection endpointPickingPolicy;\n+    private ResolvedAddresses resolvedAddresses;\n+    private LoadBalancer childLb;\n+\n+    ClusterResolverLbState(Helper helper) {\n+      this.helper = checkNotNull(helper, \"helper\");\n+      logger.log(XdsLogLevel.DEBUG, \"New ClusterResolverLbState\");\n+    }\n+\n+    @Override\n+    public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n+      this.resolvedAddresses = resolvedAddresses;\n+      ClusterResolverConfig config =\n+          (ClusterResolverConfig) resolvedAddresses.getLoadBalancingPolicyConfig();\n+      for (DiscoveryMechanism instance : config.discoveryMechanisms) {\n+        clusters.add(instance.cluster);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgyNjUyMA=="}, "originalCommit": {"oid": "69d8a852ae6977ba771dac40a2d3aff54c6ab594"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODA3Mzk3OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/ClusterResolverLoadBalancer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNzo1MjoxNVrOIJgzzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMTozMzo0OFrOIJrSNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg0NTY0Nw==", "bodyText": "Why this change? I might have missed a discussion about it.", "url": "https://github.com/grpc/grpc-java/pull/7685#discussion_r546845647", "createdAt": "2020-12-21T17:52:15Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/ClusterResolverLoadBalancer.java", "diffHunk": "@@ -0,0 +1,684 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static io.grpc.ConnectivityState.CONNECTING;\n+import static io.grpc.ConnectivityState.TRANSIENT_FAILURE;\n+import static io.grpc.xds.XdsLbPolicies.LRS_POLICY_NAME;\n+import static io.grpc.xds.XdsLbPolicies.PRIORITY_POLICY_NAME;\n+import static io.grpc.xds.XdsSubchannelPickers.BUFFER_PICKER;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.EquivalentAddressGroup;\n+import io.grpc.InternalLogId;\n+import io.grpc.LoadBalancer;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.LoadBalancerRegistry;\n+import io.grpc.NameResolver;\n+import io.grpc.NameResolver.ResolutionResult;\n+import io.grpc.Status;\n+import io.grpc.SynchronizationContext;\n+import io.grpc.SynchronizationContext.ScheduledHandle;\n+import io.grpc.internal.BackoffPolicy;\n+import io.grpc.internal.ExponentialBackoffPolicy;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.internal.ServiceConfigUtil.PolicySelection;\n+import io.grpc.util.GracefulSwitchLoadBalancer;\n+import io.grpc.xds.ClusterImplLoadBalancerProvider.ClusterImplConfig;\n+import io.grpc.xds.ClusterResolverLoadBalancerProvider.ClusterResolverConfig;\n+import io.grpc.xds.ClusterResolverLoadBalancerProvider.ClusterResolverConfig.DiscoveryMechanism;\n+import io.grpc.xds.EnvoyProtoData.DropOverload;\n+import io.grpc.xds.EnvoyProtoData.LbEndpoint;\n+import io.grpc.xds.EnvoyProtoData.Locality;\n+import io.grpc.xds.EnvoyProtoData.LocalityLbEndpoints;\n+import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;\n+import io.grpc.xds.LrsLoadBalancerProvider.LrsConfig;\n+import io.grpc.xds.PriorityLoadBalancerProvider.PriorityLbConfig;\n+import io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection;\n+import io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedTargetConfig;\n+import io.grpc.xds.XdsClient.EdsResourceWatcher;\n+import io.grpc.xds.XdsClient.EdsUpdate;\n+import io.grpc.xds.XdsLogger.XdsLogLevel;\n+import io.grpc.xds.XdsSubchannelPickers.ErrorPicker;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Load balancer for cluster_resolver_experimental LB policy. This LB policy is the child LB policy\n+ * of the cds_experimental LB policy and the parent LB policy of the priority_experimental LB\n+ * policy in the xDS load balancing hierarchy. This policy resolves endpoints of non-aggregate\n+ * clusters (e.g., EDS or Logical DNS) and groups endpoints in priorities and localities to be\n+ * used in the downstream LB policies for ine-grained load balancing purposes.\n+ */\n+final class ClusterResolverLoadBalancer extends LoadBalancer {\n+\n+  private static final String LOGICAL_DNS_CLUSTER_ENDPOINT_PICKING_POLICY_OVERRIDE = \"pick_first\";\n+  private static final Locality logicalDnsClusterLocality = new Locality(\"\", \"\", \"\");\n+  private final XdsLogger logger;\n+  private final String authority;\n+  private final SynchronizationContext syncContext;\n+  private final ScheduledExecutorService timeService;\n+  private final LoadBalancerRegistry lbRegistry;\n+  private final BackoffPolicy.Provider backoffPolicyProvider;\n+  private final GracefulSwitchLoadBalancer delegate;\n+  private ObjectPool<XdsClient> xdsClientPool;\n+  private XdsClient xdsClient;\n+  private ClusterResolverConfig config;\n+\n+  ClusterResolverLoadBalancer(Helper helper) {\n+    this(helper, LoadBalancerRegistry.getDefaultRegistry(),\n+        new ExponentialBackoffPolicy.Provider());\n+  }\n+\n+  @VisibleForTesting\n+  ClusterResolverLoadBalancer(Helper helper, LoadBalancerRegistry lbRegistry,\n+      BackoffPolicy.Provider backoffPolicyProvider) {\n+    this.lbRegistry = checkNotNull(lbRegistry, \"lbRegistry\");\n+    this.backoffPolicyProvider = checkNotNull(backoffPolicyProvider, \"backoffPolicyProvider\");\n+    this.authority = checkNotNull(checkNotNull(helper, \"helper\").getAuthority(), \"authority\");\n+    this.syncContext = checkNotNull(helper.getSynchronizationContext(), \"syncContext\");\n+    this.timeService = checkNotNull(helper.getScheduledExecutorService(), \"timeService\");\n+    delegate = new GracefulSwitchLoadBalancer(helper);\n+    logger = XdsLogger.withLogId(\n+        InternalLogId.allocate(\"cluster-resolver-lb\", helper.getAuthority()));\n+    logger.log(XdsLogLevel.INFO, \"Created\");\n+  }\n+\n+  @Override\n+  public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n+    logger.log(XdsLogLevel.DEBUG, \"Received resolution result: {0}\", resolvedAddresses);\n+    if (xdsClientPool == null) {\n+      xdsClientPool = resolvedAddresses.getAttributes().get(XdsAttributes.XDS_CLIENT_POOL);\n+      xdsClient = xdsClientPool.getObject();\n+    }\n+    ClusterResolverConfig config =\n+        (ClusterResolverConfig) resolvedAddresses.getLoadBalancingPolicyConfig();\n+    if (!Objects.equals(this.config, config)) {\n+      logger.log(XdsLogLevel.DEBUG, \"Config: {0}\", config);\n+      delegate.switchTo(new ClusterResolverLbStateFactory());\n+    }\n+    this.config = config;\n+    delegate.handleResolvedAddresses(resolvedAddresses);\n+  }\n+\n+  @Override\n+  public void handleNameResolutionError(Status error) {\n+    logger.log(XdsLogLevel.WARNING, \"Received name resolution error: {0}\", error);\n+    delegate.handleNameResolutionError(error);\n+  }\n+\n+  @Override\n+  public void shutdown() {\n+    logger.log(XdsLogLevel.INFO, \"Shutdown\");\n+    delegate.shutdown();\n+    if (xdsClientPool != null) {\n+      xdsClientPool.returnObject(xdsClient);\n+    }\n+  }\n+\n+  private final class ClusterResolverLbStateFactory extends LoadBalancer.Factory {\n+    @Override\n+    public LoadBalancer newLoadBalancer(Helper helper) {\n+      return new ClusterResolverLbState(helper);\n+    }\n+  }\n+\n+  /**\n+   * The state of a cluster_resolver LB working session. A new instance is created whenever\n+   * the cluster_resolver LB receives a new config. The old instance is replaced when the\n+   * new one is ready to handle new RPCs.\n+   */\n+  private final class ClusterResolverLbState extends LoadBalancer {\n+    private final Helper helper;\n+    private final List<String> clusters = new ArrayList<>();\n+    private final Map<String, ClusterState> clusterStates = new HashMap<>();\n+    // An aggregate cluster is thought of as a cluster that groups the endpoints of the underlying\n+    // clusters together for load balancing purposes only. Load balancing policies (both locality\n+    // level and endpoint level) are configured by the aggregate cluster and apply to all of its\n+    // underlying clusters.\n+    private PolicySelection localityPickingPolicy;\n+    private PolicySelection endpointPickingPolicy;\n+    private ResolvedAddresses resolvedAddresses;\n+    private LoadBalancer childLb;\n+\n+    ClusterResolverLbState(Helper helper) {\n+      this.helper = checkNotNull(helper, \"helper\");\n+      logger.log(XdsLogLevel.DEBUG, \"New ClusterResolverLbState\");\n+    }\n+\n+    @Override\n+    public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n+      this.resolvedAddresses = resolvedAddresses;\n+      ClusterResolverConfig config =\n+          (ClusterResolverConfig) resolvedAddresses.getLoadBalancingPolicyConfig();\n+      for (DiscoveryMechanism instance : config.discoveryMechanisms) {\n+        clusters.add(instance.cluster);\n+        ClusterState state;\n+        if (instance.type == DiscoveryMechanism.Type.EDS) {\n+          state =\n+              new EdsClusterState(instance.cluster, instance.edsServiceName,\n+                  instance.lrsServerName, instance.maxConcurrentRequests, instance.tlsContext);\n+          clusterStates.put(instance.cluster, state);\n+        } else {  // logical DNS\n+          state = new LogicalDnsClusterState(instance.cluster, instance.lrsServerName,\n+              instance.maxConcurrentRequests, instance.tlsContext);\n+          clusterStates.put(instance.cluster, state);\n+        }\n+        state.start();\n+        localityPickingPolicy = config.localityPickingPolicy;\n+        endpointPickingPolicy = config.endpointPickingPolicy;\n+      }\n+    }\n+\n+    @Override\n+    public void handleNameResolutionError(Status error) {\n+      if (childLb != null) {\n+        childLb.handleNameResolutionError(error);\n+      } else {\n+        helper.updateBalancingState(TRANSIENT_FAILURE, new ErrorPicker(error));\n+      }\n+    }\n+\n+    @Override\n+    public void shutdown() {\n+      for (ClusterState state : clusterStates.values()) {\n+        state.shutdown();\n+      }\n+      if (childLb != null) {\n+        childLb.shutdown();\n+      }\n+    }\n+\n+    private void handleEndpointResourceUpdate() {\n+      List<EquivalentAddressGroup> addresses = new ArrayList<>();\n+      Map<String, PolicySelection> priorityLbPolicies = new HashMap<>();\n+      List<String> priorities = new ArrayList<>();  // totally ordered priority list\n+      boolean allResolved = true;\n+      for (String cluster : clusters) {\n+        ClusterState state = clusterStates.get(cluster);\n+        if (!state.resolved) {\n+          allResolved = false;\n+          continue;\n+        }\n+        if (state.result != null) {\n+          addresses.addAll(state.result.addresses);\n+          priorityLbPolicies.putAll(state.result.priorityLbPolicies);\n+          priorities.addAll(state.result.priorities);\n+        }\n+      }\n+      if (addresses.isEmpty()) {\n+        if (childLb != null) {\n+          childLb.shutdown();\n+          childLb = null;\n+        }\n+        if (allResolved) {\n+          Status unavailable = Status.UNAVAILABLE.withDescription(\"No endpoint available\");\n+          helper.updateBalancingState(TRANSIENT_FAILURE, new ErrorPicker(unavailable));\n+        } else {\n+          helper.updateBalancingState(CONNECTING, BUFFER_PICKER);\n+        }\n+        return;\n+      }\n+      PriorityLbConfig childConfig =\n+          new PriorityLbConfig(Collections.unmodifiableMap(priorityLbPolicies),\n+              Collections.unmodifiableList(priorities));\n+      if (childLb == null) {\n+        childLb = lbRegistry.getProvider(PRIORITY_POLICY_NAME).newLoadBalancer(helper);\n+      }\n+      childLb.handleResolvedAddresses(\n+          resolvedAddresses.toBuilder()\n+              .setLoadBalancingPolicyConfig(childConfig)\n+              .setAddresses(Collections.unmodifiableList(addresses))\n+              .build());\n+    }\n+\n+    private void handleEndpointResolutionError() {\n+      boolean allInError = true;\n+      for (ClusterState state :  clusterStates.values()) {\n+        if (state.status.isOk()) {\n+          allInError = false;\n+        }\n+      }\n+      if (allInError) {\n+        // Propagate the error status of the last cluster. This is the best we can do.\n+        Status error = clusterStates.get(clusters.get(clusters.size() - 1)).status;\n+        if (childLb != null) {\n+          childLb.handleNameResolutionError(error);\n+        } else {\n+          helper.updateBalancingState(TRANSIENT_FAILURE, new ErrorPicker(error));\n+        }\n+      }\n+    }\n+\n+    /**\n+     * Resolution state of an underlying cluster.\n+     */\n+    private abstract class ClusterState {\n+      // Name of the cluster to be resolved.\n+      protected final String name;\n+      // The resource name to be used for resolving endpoints via EDS.\n+      // Always null if the cluster is a logical DNS cluster.\n+      @Nullable\n+      protected final String edsServiceName;\n+      @Nullable\n+      protected final String lrsServerName;\n+      @Nullable\n+      protected final Long maxConcurrentRequests;\n+      @Nullable\n+      protected final UpstreamTlsContext tlsContext;\n+      // Resolution status, may contain most recent error encountered.\n+      protected Status status = Status.OK;\n+      // True if has received resolution result.\n+      protected boolean resolved;\n+      // Most recently resolved addresses and config, or null if resource not exists.\n+      @Nullable\n+      protected ClusterResolutionResult result;\n+      protected boolean shutdown;\n+\n+      private ClusterState(String name, @Nullable String edsServiceName,\n+          @Nullable String lrsServerName, @Nullable Long maxConcurrentRequests,\n+          @Nullable UpstreamTlsContext tlsContext) {\n+        this.name = name;\n+        this.edsServiceName = edsServiceName;\n+        this.lrsServerName = lrsServerName;\n+        this.maxConcurrentRequests = maxConcurrentRequests;\n+        this.tlsContext = tlsContext;\n+      }\n+\n+      abstract void start();\n+\n+      void shutdown() {\n+        shutdown = true;\n+      }\n+    }\n+\n+    private class EdsClusterState extends ClusterState implements EdsResourceWatcher {\n+\n+      private EdsClusterState(String name, @Nullable String edsServiceName,\n+          @Nullable String lrsServerName, @Nullable Long maxConcurrentRequests,\n+          @Nullable UpstreamTlsContext tlsContext) {\n+        super(name, edsServiceName, lrsServerName, maxConcurrentRequests, tlsContext);\n+      }\n+\n+      @Override\n+      void start() {\n+        String resourceName = edsServiceName != null ? edsServiceName : name;\n+        logger.log(XdsLogLevel.INFO, \"Start watching EDS resource {0}\", resourceName);\n+        xdsClient.watchEdsResource(resourceName, this);\n+      }\n+\n+      @Override\n+      protected void shutdown() {\n+        super.shutdown();\n+        String resourceName = edsServiceName != null ? edsServiceName : name;\n+        logger.log(XdsLogLevel.INFO, \"Stop watching EDS resource {0}\", resourceName);\n+        xdsClient.cancelEdsResourceWatch(resourceName, this);\n+      }\n+\n+      @Override\n+      public void onChanged(final EdsUpdate update) {\n+        class EndpointsUpdated implements Runnable {\n+          @Override\n+          public void run() {\n+            if (shutdown) {\n+              return;\n+            }\n+            logger.log(XdsLogLevel.DEBUG, \"Received endpoint update {0}\", update);\n+            if (logger.isLoggable(XdsLogLevel.INFO)) {\n+              logger.log(XdsLogLevel.INFO, \"Cluster {0}: {1} localities, {2} drop categories\",\n+                  update.getClusterName(), update.getLocalityLbEndpointsMap().size(),\n+                  update.getDropPolicies().size());\n+            }\n+            Map<Locality, LocalityLbEndpoints> localityLbEndpoints =\n+                update.getLocalityLbEndpointsMap();\n+            List<DropOverload> dropOverloads = update.getDropPolicies();\n+            List<EquivalentAddressGroup> addresses = new ArrayList<>();\n+            Map<String, Map<Locality, Integer>> prioritizedLocalityWeights = new HashMap<>();\n+            for (Locality locality : localityLbEndpoints.keySet()) {\n+              LocalityLbEndpoints localityLbInfo = localityLbEndpoints.get(locality);\n+              int priority = localityLbInfo.getPriority();\n+              String priorityName = priorityName(name, priority);\n+              boolean discard = true;\n+              for (LbEndpoint endpoint : localityLbInfo.getEndpoints()) {\n+                if (endpoint.isHealthy()) {\n+                  discard = false;\n+                  EquivalentAddressGroup eag =\n+                      AddressFilter.setPathFilter(\n+                          endpoint.getAddress(),\n+                          Arrays.asList(priorityName, localityName(locality)));\n+                  addresses.add(eag);\n+                }\n+              }\n+              if (discard) {\n+                logger.log(XdsLogLevel.INFO,\n+                    \"Discard locality {0} with 0 healthy endpoints\", locality);\n+                continue;\n+              }\n+              if (!prioritizedLocalityWeights.containsKey(priorityName)) {\n+                prioritizedLocalityWeights.put(priorityName, new HashMap<Locality, Integer>());\n+              }\n+              prioritizedLocalityWeights.get(priorityName).put(\n+                  locality, localityLbInfo.getLocalityWeight());\n+            }\n+            if (prioritizedLocalityWeights.isEmpty()) {\n+              // Transient state, neither as a result or an error.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69d8a852ae6977ba771dac40a2d3aff54c6ab594"}, "originalPosition": 389}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAxNzI2OA==", "bodyText": "Changed to still propagate the update. It will behave the same as the EDS resource does not exist.\nThe desired behavior is still questionable:\nWhen receiving an EDS update that contains priorities/localities but no usable endpoints (in reality we've seen this happen transiently during TD resource migration): should this behave the same as the corresponding EDS resource has been removed? Or keep using previous received usable endpoints if any. Otherwise, keep waiting for next update.", "url": "https://github.com/grpc/grpc-java/pull/7685#discussion_r547017268", "createdAt": "2020-12-22T01:33:48Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/ClusterResolverLoadBalancer.java", "diffHunk": "@@ -0,0 +1,684 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static io.grpc.ConnectivityState.CONNECTING;\n+import static io.grpc.ConnectivityState.TRANSIENT_FAILURE;\n+import static io.grpc.xds.XdsLbPolicies.LRS_POLICY_NAME;\n+import static io.grpc.xds.XdsLbPolicies.PRIORITY_POLICY_NAME;\n+import static io.grpc.xds.XdsSubchannelPickers.BUFFER_PICKER;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.EquivalentAddressGroup;\n+import io.grpc.InternalLogId;\n+import io.grpc.LoadBalancer;\n+import io.grpc.LoadBalancerProvider;\n+import io.grpc.LoadBalancerRegistry;\n+import io.grpc.NameResolver;\n+import io.grpc.NameResolver.ResolutionResult;\n+import io.grpc.Status;\n+import io.grpc.SynchronizationContext;\n+import io.grpc.SynchronizationContext.ScheduledHandle;\n+import io.grpc.internal.BackoffPolicy;\n+import io.grpc.internal.ExponentialBackoffPolicy;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.internal.ServiceConfigUtil.PolicySelection;\n+import io.grpc.util.GracefulSwitchLoadBalancer;\n+import io.grpc.xds.ClusterImplLoadBalancerProvider.ClusterImplConfig;\n+import io.grpc.xds.ClusterResolverLoadBalancerProvider.ClusterResolverConfig;\n+import io.grpc.xds.ClusterResolverLoadBalancerProvider.ClusterResolverConfig.DiscoveryMechanism;\n+import io.grpc.xds.EnvoyProtoData.DropOverload;\n+import io.grpc.xds.EnvoyProtoData.LbEndpoint;\n+import io.grpc.xds.EnvoyProtoData.Locality;\n+import io.grpc.xds.EnvoyProtoData.LocalityLbEndpoints;\n+import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;\n+import io.grpc.xds.LrsLoadBalancerProvider.LrsConfig;\n+import io.grpc.xds.PriorityLoadBalancerProvider.PriorityLbConfig;\n+import io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedPolicySelection;\n+import io.grpc.xds.WeightedTargetLoadBalancerProvider.WeightedTargetConfig;\n+import io.grpc.xds.XdsClient.EdsResourceWatcher;\n+import io.grpc.xds.XdsClient.EdsUpdate;\n+import io.grpc.xds.XdsLogger.XdsLogLevel;\n+import io.grpc.xds.XdsSubchannelPickers.ErrorPicker;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Load balancer for cluster_resolver_experimental LB policy. This LB policy is the child LB policy\n+ * of the cds_experimental LB policy and the parent LB policy of the priority_experimental LB\n+ * policy in the xDS load balancing hierarchy. This policy resolves endpoints of non-aggregate\n+ * clusters (e.g., EDS or Logical DNS) and groups endpoints in priorities and localities to be\n+ * used in the downstream LB policies for ine-grained load balancing purposes.\n+ */\n+final class ClusterResolverLoadBalancer extends LoadBalancer {\n+\n+  private static final String LOGICAL_DNS_CLUSTER_ENDPOINT_PICKING_POLICY_OVERRIDE = \"pick_first\";\n+  private static final Locality logicalDnsClusterLocality = new Locality(\"\", \"\", \"\");\n+  private final XdsLogger logger;\n+  private final String authority;\n+  private final SynchronizationContext syncContext;\n+  private final ScheduledExecutorService timeService;\n+  private final LoadBalancerRegistry lbRegistry;\n+  private final BackoffPolicy.Provider backoffPolicyProvider;\n+  private final GracefulSwitchLoadBalancer delegate;\n+  private ObjectPool<XdsClient> xdsClientPool;\n+  private XdsClient xdsClient;\n+  private ClusterResolverConfig config;\n+\n+  ClusterResolverLoadBalancer(Helper helper) {\n+    this(helper, LoadBalancerRegistry.getDefaultRegistry(),\n+        new ExponentialBackoffPolicy.Provider());\n+  }\n+\n+  @VisibleForTesting\n+  ClusterResolverLoadBalancer(Helper helper, LoadBalancerRegistry lbRegistry,\n+      BackoffPolicy.Provider backoffPolicyProvider) {\n+    this.lbRegistry = checkNotNull(lbRegistry, \"lbRegistry\");\n+    this.backoffPolicyProvider = checkNotNull(backoffPolicyProvider, \"backoffPolicyProvider\");\n+    this.authority = checkNotNull(checkNotNull(helper, \"helper\").getAuthority(), \"authority\");\n+    this.syncContext = checkNotNull(helper.getSynchronizationContext(), \"syncContext\");\n+    this.timeService = checkNotNull(helper.getScheduledExecutorService(), \"timeService\");\n+    delegate = new GracefulSwitchLoadBalancer(helper);\n+    logger = XdsLogger.withLogId(\n+        InternalLogId.allocate(\"cluster-resolver-lb\", helper.getAuthority()));\n+    logger.log(XdsLogLevel.INFO, \"Created\");\n+  }\n+\n+  @Override\n+  public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n+    logger.log(XdsLogLevel.DEBUG, \"Received resolution result: {0}\", resolvedAddresses);\n+    if (xdsClientPool == null) {\n+      xdsClientPool = resolvedAddresses.getAttributes().get(XdsAttributes.XDS_CLIENT_POOL);\n+      xdsClient = xdsClientPool.getObject();\n+    }\n+    ClusterResolverConfig config =\n+        (ClusterResolverConfig) resolvedAddresses.getLoadBalancingPolicyConfig();\n+    if (!Objects.equals(this.config, config)) {\n+      logger.log(XdsLogLevel.DEBUG, \"Config: {0}\", config);\n+      delegate.switchTo(new ClusterResolverLbStateFactory());\n+    }\n+    this.config = config;\n+    delegate.handleResolvedAddresses(resolvedAddresses);\n+  }\n+\n+  @Override\n+  public void handleNameResolutionError(Status error) {\n+    logger.log(XdsLogLevel.WARNING, \"Received name resolution error: {0}\", error);\n+    delegate.handleNameResolutionError(error);\n+  }\n+\n+  @Override\n+  public void shutdown() {\n+    logger.log(XdsLogLevel.INFO, \"Shutdown\");\n+    delegate.shutdown();\n+    if (xdsClientPool != null) {\n+      xdsClientPool.returnObject(xdsClient);\n+    }\n+  }\n+\n+  private final class ClusterResolverLbStateFactory extends LoadBalancer.Factory {\n+    @Override\n+    public LoadBalancer newLoadBalancer(Helper helper) {\n+      return new ClusterResolverLbState(helper);\n+    }\n+  }\n+\n+  /**\n+   * The state of a cluster_resolver LB working session. A new instance is created whenever\n+   * the cluster_resolver LB receives a new config. The old instance is replaced when the\n+   * new one is ready to handle new RPCs.\n+   */\n+  private final class ClusterResolverLbState extends LoadBalancer {\n+    private final Helper helper;\n+    private final List<String> clusters = new ArrayList<>();\n+    private final Map<String, ClusterState> clusterStates = new HashMap<>();\n+    // An aggregate cluster is thought of as a cluster that groups the endpoints of the underlying\n+    // clusters together for load balancing purposes only. Load balancing policies (both locality\n+    // level and endpoint level) are configured by the aggregate cluster and apply to all of its\n+    // underlying clusters.\n+    private PolicySelection localityPickingPolicy;\n+    private PolicySelection endpointPickingPolicy;\n+    private ResolvedAddresses resolvedAddresses;\n+    private LoadBalancer childLb;\n+\n+    ClusterResolverLbState(Helper helper) {\n+      this.helper = checkNotNull(helper, \"helper\");\n+      logger.log(XdsLogLevel.DEBUG, \"New ClusterResolverLbState\");\n+    }\n+\n+    @Override\n+    public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n+      this.resolvedAddresses = resolvedAddresses;\n+      ClusterResolverConfig config =\n+          (ClusterResolverConfig) resolvedAddresses.getLoadBalancingPolicyConfig();\n+      for (DiscoveryMechanism instance : config.discoveryMechanisms) {\n+        clusters.add(instance.cluster);\n+        ClusterState state;\n+        if (instance.type == DiscoveryMechanism.Type.EDS) {\n+          state =\n+              new EdsClusterState(instance.cluster, instance.edsServiceName,\n+                  instance.lrsServerName, instance.maxConcurrentRequests, instance.tlsContext);\n+          clusterStates.put(instance.cluster, state);\n+        } else {  // logical DNS\n+          state = new LogicalDnsClusterState(instance.cluster, instance.lrsServerName,\n+              instance.maxConcurrentRequests, instance.tlsContext);\n+          clusterStates.put(instance.cluster, state);\n+        }\n+        state.start();\n+        localityPickingPolicy = config.localityPickingPolicy;\n+        endpointPickingPolicy = config.endpointPickingPolicy;\n+      }\n+    }\n+\n+    @Override\n+    public void handleNameResolutionError(Status error) {\n+      if (childLb != null) {\n+        childLb.handleNameResolutionError(error);\n+      } else {\n+        helper.updateBalancingState(TRANSIENT_FAILURE, new ErrorPicker(error));\n+      }\n+    }\n+\n+    @Override\n+    public void shutdown() {\n+      for (ClusterState state : clusterStates.values()) {\n+        state.shutdown();\n+      }\n+      if (childLb != null) {\n+        childLb.shutdown();\n+      }\n+    }\n+\n+    private void handleEndpointResourceUpdate() {\n+      List<EquivalentAddressGroup> addresses = new ArrayList<>();\n+      Map<String, PolicySelection> priorityLbPolicies = new HashMap<>();\n+      List<String> priorities = new ArrayList<>();  // totally ordered priority list\n+      boolean allResolved = true;\n+      for (String cluster : clusters) {\n+        ClusterState state = clusterStates.get(cluster);\n+        if (!state.resolved) {\n+          allResolved = false;\n+          continue;\n+        }\n+        if (state.result != null) {\n+          addresses.addAll(state.result.addresses);\n+          priorityLbPolicies.putAll(state.result.priorityLbPolicies);\n+          priorities.addAll(state.result.priorities);\n+        }\n+      }\n+      if (addresses.isEmpty()) {\n+        if (childLb != null) {\n+          childLb.shutdown();\n+          childLb = null;\n+        }\n+        if (allResolved) {\n+          Status unavailable = Status.UNAVAILABLE.withDescription(\"No endpoint available\");\n+          helper.updateBalancingState(TRANSIENT_FAILURE, new ErrorPicker(unavailable));\n+        } else {\n+          helper.updateBalancingState(CONNECTING, BUFFER_PICKER);\n+        }\n+        return;\n+      }\n+      PriorityLbConfig childConfig =\n+          new PriorityLbConfig(Collections.unmodifiableMap(priorityLbPolicies),\n+              Collections.unmodifiableList(priorities));\n+      if (childLb == null) {\n+        childLb = lbRegistry.getProvider(PRIORITY_POLICY_NAME).newLoadBalancer(helper);\n+      }\n+      childLb.handleResolvedAddresses(\n+          resolvedAddresses.toBuilder()\n+              .setLoadBalancingPolicyConfig(childConfig)\n+              .setAddresses(Collections.unmodifiableList(addresses))\n+              .build());\n+    }\n+\n+    private void handleEndpointResolutionError() {\n+      boolean allInError = true;\n+      for (ClusterState state :  clusterStates.values()) {\n+        if (state.status.isOk()) {\n+          allInError = false;\n+        }\n+      }\n+      if (allInError) {\n+        // Propagate the error status of the last cluster. This is the best we can do.\n+        Status error = clusterStates.get(clusters.get(clusters.size() - 1)).status;\n+        if (childLb != null) {\n+          childLb.handleNameResolutionError(error);\n+        } else {\n+          helper.updateBalancingState(TRANSIENT_FAILURE, new ErrorPicker(error));\n+        }\n+      }\n+    }\n+\n+    /**\n+     * Resolution state of an underlying cluster.\n+     */\n+    private abstract class ClusterState {\n+      // Name of the cluster to be resolved.\n+      protected final String name;\n+      // The resource name to be used for resolving endpoints via EDS.\n+      // Always null if the cluster is a logical DNS cluster.\n+      @Nullable\n+      protected final String edsServiceName;\n+      @Nullable\n+      protected final String lrsServerName;\n+      @Nullable\n+      protected final Long maxConcurrentRequests;\n+      @Nullable\n+      protected final UpstreamTlsContext tlsContext;\n+      // Resolution status, may contain most recent error encountered.\n+      protected Status status = Status.OK;\n+      // True if has received resolution result.\n+      protected boolean resolved;\n+      // Most recently resolved addresses and config, or null if resource not exists.\n+      @Nullable\n+      protected ClusterResolutionResult result;\n+      protected boolean shutdown;\n+\n+      private ClusterState(String name, @Nullable String edsServiceName,\n+          @Nullable String lrsServerName, @Nullable Long maxConcurrentRequests,\n+          @Nullable UpstreamTlsContext tlsContext) {\n+        this.name = name;\n+        this.edsServiceName = edsServiceName;\n+        this.lrsServerName = lrsServerName;\n+        this.maxConcurrentRequests = maxConcurrentRequests;\n+        this.tlsContext = tlsContext;\n+      }\n+\n+      abstract void start();\n+\n+      void shutdown() {\n+        shutdown = true;\n+      }\n+    }\n+\n+    private class EdsClusterState extends ClusterState implements EdsResourceWatcher {\n+\n+      private EdsClusterState(String name, @Nullable String edsServiceName,\n+          @Nullable String lrsServerName, @Nullable Long maxConcurrentRequests,\n+          @Nullable UpstreamTlsContext tlsContext) {\n+        super(name, edsServiceName, lrsServerName, maxConcurrentRequests, tlsContext);\n+      }\n+\n+      @Override\n+      void start() {\n+        String resourceName = edsServiceName != null ? edsServiceName : name;\n+        logger.log(XdsLogLevel.INFO, \"Start watching EDS resource {0}\", resourceName);\n+        xdsClient.watchEdsResource(resourceName, this);\n+      }\n+\n+      @Override\n+      protected void shutdown() {\n+        super.shutdown();\n+        String resourceName = edsServiceName != null ? edsServiceName : name;\n+        logger.log(XdsLogLevel.INFO, \"Stop watching EDS resource {0}\", resourceName);\n+        xdsClient.cancelEdsResourceWatch(resourceName, this);\n+      }\n+\n+      @Override\n+      public void onChanged(final EdsUpdate update) {\n+        class EndpointsUpdated implements Runnable {\n+          @Override\n+          public void run() {\n+            if (shutdown) {\n+              return;\n+            }\n+            logger.log(XdsLogLevel.DEBUG, \"Received endpoint update {0}\", update);\n+            if (logger.isLoggable(XdsLogLevel.INFO)) {\n+              logger.log(XdsLogLevel.INFO, \"Cluster {0}: {1} localities, {2} drop categories\",\n+                  update.getClusterName(), update.getLocalityLbEndpointsMap().size(),\n+                  update.getDropPolicies().size());\n+            }\n+            Map<Locality, LocalityLbEndpoints> localityLbEndpoints =\n+                update.getLocalityLbEndpointsMap();\n+            List<DropOverload> dropOverloads = update.getDropPolicies();\n+            List<EquivalentAddressGroup> addresses = new ArrayList<>();\n+            Map<String, Map<Locality, Integer>> prioritizedLocalityWeights = new HashMap<>();\n+            for (Locality locality : localityLbEndpoints.keySet()) {\n+              LocalityLbEndpoints localityLbInfo = localityLbEndpoints.get(locality);\n+              int priority = localityLbInfo.getPriority();\n+              String priorityName = priorityName(name, priority);\n+              boolean discard = true;\n+              for (LbEndpoint endpoint : localityLbInfo.getEndpoints()) {\n+                if (endpoint.isHealthy()) {\n+                  discard = false;\n+                  EquivalentAddressGroup eag =\n+                      AddressFilter.setPathFilter(\n+                          endpoint.getAddress(),\n+                          Arrays.asList(priorityName, localityName(locality)));\n+                  addresses.add(eag);\n+                }\n+              }\n+              if (discard) {\n+                logger.log(XdsLogLevel.INFO,\n+                    \"Discard locality {0} with 0 healthy endpoints\", locality);\n+                continue;\n+              }\n+              if (!prioritizedLocalityWeights.containsKey(priorityName)) {\n+                prioritizedLocalityWeights.put(priorityName, new HashMap<Locality, Integer>());\n+              }\n+              prioritizedLocalityWeights.get(priorityName).put(\n+                  locality, localityLbInfo.getLocalityWeight());\n+            }\n+            if (prioritizedLocalityWeights.isEmpty()) {\n+              // Transient state, neither as a result or an error.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg0NTY0Nw=="}, "originalCommit": {"oid": "69d8a852ae6977ba771dac40a2d3aff54c6ab594"}, "originalPosition": 389}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2980, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}