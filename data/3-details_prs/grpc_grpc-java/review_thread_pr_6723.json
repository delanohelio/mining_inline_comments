{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2OTA1MzY3", "number": 6723, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMjoxMTozN1rODifwZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDowMDowMlrODjOHyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDk4NDcwOnYy", "diffSide": "RIGHT", "path": "grpclb/src/main/java/io/grpc/grpclb/SecretGrpclbNameResolverProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMjoxMTozN1rOFtxv1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMjoxMTozN1rOFtxv1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU0NTMwMA==", "bodyText": "in theory, this should be \"grpclb\" or something not \"dns\"? (not asking to change, but i feel like i have to say this)", "url": "https://github.com/grpc/grpc-java/pull/6723#discussion_r383545300", "createdAt": "2020-02-24T22:11:37Z", "author": {"login": "creamsoup"}, "path": "grpclb/src/main/java/io/grpc/grpclb/SecretGrpclbNameResolverProvider.java", "diffHunk": "@@ -32,24 +38,46 @@\n  *   yet))</li>\n  *   <li>{@code \"dns:///foo.googleapis.com\"} (without port)</li>\n  * </ul>\n- *\n- * <p>Note: the main difference between {@code io.grpc.DnsNameResolver} is service record is enabled\n- * by default.\n  */\n // Make it package-private so that it cannot be directly referenced by users.  Java service loader\n // requires the provider to be public, but we can hide it under a package-private class.\n final class SecretGrpclbNameResolverProvider {\n \n   private SecretGrpclbNameResolverProvider() {}\n \n-  public static final class Provider extends BaseDnsNameResolverProvider {\n+  public static final class Provider extends NameResolverProvider {\n+\n+    private static final String SCHEME = \"dns\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa1e7dc1c50027e84e3dcab73ff2382e6784364"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDk4ODAxOnYy", "diffSide": "RIGHT", "path": "grpclb/src/test/java/io/grpc/grpclb/GrpclbNameResolverTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMjoxMjo1NVrOFtxx6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMTo0MDo1M1rOFvnDTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU0NTgzNQ==", "bodyText": "2020", "url": "https://github.com/grpc/grpc-java/pull/6723#discussion_r383545835", "createdAt": "2020-02-24T22:12:55Z", "author": {"login": "creamsoup"}, "path": "grpclb/src/test/java/io/grpc/grpclb/GrpclbNameResolverTest.java", "diffHunk": "@@ -0,0 +1,337 @@\n+/*\n+ * Copyright 2015 The gRPC Authors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa1e7dc1c50027e84e3dcab73ff2382e6784364"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2NzIxNQ==", "bodyText": "Done.", "url": "https://github.com/grpc/grpc-java/pull/6723#discussion_r385467215", "createdAt": "2020-02-28T01:40:53Z", "author": {"login": "voidzcy"}, "path": "grpclb/src/test/java/io/grpc/grpclb/GrpclbNameResolverTest.java", "diffHunk": "@@ -0,0 +1,337 @@\n+/*\n+ * Copyright 2015 The gRPC Authors", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU0NTgzNQ=="}, "originalCommit": {"oid": "afa1e7dc1c50027e84e3dcab73ff2382e6784364"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTA5NjM1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/grpc/internal/DnsNameResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMjo1MzozMVrOFty0nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMTo0MDo1OVrOFvnDZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2MjkwOA==", "bodyText": "can you flatten this ifs?", "url": "https://github.com/grpc/grpc-java/pull/6723#discussion_r383562908", "createdAt": "2020-02-24T22:53:31Z", "author": {"login": "creamsoup"}, "path": "core/src/main/java/io/grpc/internal/DnsNameResolver.java", "diffHunk": "@@ -650,20 +619,22 @@ void setResourceResolver(ResourceResolver resourceResolver) {\n   /**\n    * {@link ResourceResolver} is a Dns ResourceRecord resolver.\n    */\n-  interface ResourceResolver {\n+  @VisibleForTesting\n+  public interface ResourceResolver {\n     List<String> resolveTxt(String host) throws Exception;\n \n-    List<EquivalentAddressGroup> resolveSrv(\n-        AddressResolver addressResolver, String host) throws Exception;\n+    List<SrvRecord> resolveSrv(String host) throws Exception;\n   }\n \n   @Nullable\n-  private ResourceResolver getResourceResolver() {\n-    ResourceResolver rr;\n-    if ((rr = resourceResolver.get()) == null) {\n-      if (resourceResolverFactory != null) {\n-        assert resourceResolverFactory.unavailabilityCause() == null;\n-        rr = resourceResolverFactory.newResourceResolver();\n+  protected ResourceResolver getResourceResolver() {\n+    ResourceResolver rr = null;\n+    if (shouldUseJndi(enableJndi, enableJndiLocalhost, host)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa1e7dc1c50027e84e3dcab73ff2382e6784364"}, "originalPosition": 506}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2NzIzNg==", "bodyText": "Done.", "url": "https://github.com/grpc/grpc-java/pull/6723#discussion_r385467236", "createdAt": "2020-02-28T01:40:59Z", "author": {"login": "voidzcy"}, "path": "core/src/main/java/io/grpc/internal/DnsNameResolver.java", "diffHunk": "@@ -650,20 +619,22 @@ void setResourceResolver(ResourceResolver resourceResolver) {\n   /**\n    * {@link ResourceResolver} is a Dns ResourceRecord resolver.\n    */\n-  interface ResourceResolver {\n+  @VisibleForTesting\n+  public interface ResourceResolver {\n     List<String> resolveTxt(String host) throws Exception;\n \n-    List<EquivalentAddressGroup> resolveSrv(\n-        AddressResolver addressResolver, String host) throws Exception;\n+    List<SrvRecord> resolveSrv(String host) throws Exception;\n   }\n \n   @Nullable\n-  private ResourceResolver getResourceResolver() {\n-    ResourceResolver rr;\n-    if ((rr = resourceResolver.get()) == null) {\n-      if (resourceResolverFactory != null) {\n-        assert resourceResolverFactory.unavailabilityCause() == null;\n-        rr = resourceResolverFactory.newResourceResolver();\n+  protected ResourceResolver getResourceResolver() {\n+    ResourceResolver rr = null;\n+    if (shouldUseJndi(enableJndi, enableJndiLocalhost, host)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2MjkwOA=="}, "originalCommit": {"oid": "afa1e7dc1c50027e84e3dcab73ff2382e6784364"}, "originalPosition": 506}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjUwMTEzOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/io/grpc/internal/DnsNameResolverTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOTozOToyOVrOFu5cYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMTo0MToxMFrOFvnDlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxOTk3MQ==", "bodyText": "fake class should be simpler.", "url": "https://github.com/grpc/grpc-java/pull/6723#discussion_r384719971", "createdAt": "2020-02-26T19:39:29Z", "author": {"login": "creamsoup"}, "path": "core/src/test/java/io/grpc/internal/DnsNameResolverTest.java", "diffHunk": "@@ -593,123 +567,155 @@ public void resolve_balancerAddrsAsAttributes() throws Exception {\n         (InetSocketAddress) Iterables.getOnlyElement(\n             Iterables.getOnlyElement(result.getAddresses()).getAddresses());\n     assertThat(resolvedBackendAddr.getAddress()).isEqualTo(backendAddr);\n-    assertThat(result.getAttributes().get(GrpcAttributes.ATTR_LB_ADDRS))\n-        .containsExactly(balancerAddr);\n+    verify(mockAddressResolver).resolveAddress(name);\n+    assertThat(result.getAttributes()).isEqualTo(Attributes.EMPTY);\n+    assertThat(result.getServiceConfig()).isNull();\n   }\n \n   @Test\n-  public void resolveAll_nullResourceResolver() throws Exception {\n-    final String hostname = \"addr.fake\";\n-    final Inet4Address backendAddr = InetAddresses.fromInteger(0x7f000001);\n-\n-    AddressResolver mockResolver = mock(AddressResolver.class);\n-    when(mockResolver.resolveAddress(anyString()))\n-        .thenReturn(Collections.<InetAddress>singletonList(backendAddr));\n-    ResourceResolver resourceResolver = null;\n-    boolean resovleSrv = true;\n-    boolean resolveTxt = true;\n+  public void resolve_nullResourceResolver_addressFailure() throws Exception {\n+    DnsNameResolver.enableTxt = true;\n+    AddressResolver mockAddressResolver = mock(AddressResolver.class);\n+    when(mockAddressResolver.resolveAddress(anyString()))\n+        .thenThrow(new IOException(\"no addr\"));\n+    String name = \"foo.googleapis.com\";\n \n-    ResolutionResults res = DnsNameResolver.resolveAll(\n-        mockResolver, resourceResolver, resovleSrv, resolveTxt, hostname);\n-    assertThat(res.addresses).containsExactly(backendAddr);\n-    assertThat(res.balancerAddresses).isEmpty();\n-    assertThat(res.txtRecords).isEmpty();\n-    verify(mockResolver).resolveAddress(hostname);\n+    DnsNameResolver resolver = newResolver(name, 81);\n+    resolver.setAddressResolver(mockAddressResolver);\n+    resolver.setResourceResolver(null);\n+    resolver.start(mockListener);\n+    assertEquals(1, fakeExecutor.runDueTasks());\n+    verify(mockListener).onError(errorCaptor.capture());\n+    Status errorStatus = errorCaptor.getValue();\n+    assertThat(errorStatus.getCode()).isEqualTo(Code.UNAVAILABLE);\n+    assertThat(errorStatus.getCause()).hasMessageThat().contains(\"no addr\");\n   }\n \n   @Test\n-  public void resolveAll_nullResourceResolver_addressFailure() throws Exception {\n-    final String hostname = \"addr.fake\";\n-\n-    AddressResolver mockResolver = mock(AddressResolver.class);\n-    when(mockResolver.resolveAddress(anyString()))\n-        .thenThrow(new IOException(\"no addr\"));\n-    ResourceResolver resourceResolver = null;\n-    boolean resovleSrv = true;\n-    boolean resolveTxt = true;\n+  public void resolve_presentResourceResolver() throws Exception {\n+    DnsNameResolver.enableTxt = true;\n+    InetAddress backendAddr = InetAddresses.fromInteger(0x7f000001);\n+    AddressResolver mockAddressResolver = mock(AddressResolver.class);\n+    when(mockAddressResolver.resolveAddress(anyString()))\n+        .thenReturn(Collections.singletonList(backendAddr));\n+    ResourceResolver mockResourceResolver = mock(ResourceResolver.class);\n+    when(mockResourceResolver.resolveTxt(anyString()))\n+        .thenReturn(\n+            Collections.singletonList(\n+                \"grpc_config=[{\\\"clientLanguage\\\": [\\\"java\\\"], \\\"serviceConfig\\\": {}}]\"));\n+    ServiceConfigParser serviceConfigParser = mock(ServiceConfigParser.class);\n+    when(serviceConfigParser.parseServiceConfig(ArgumentMatchers.<String, Object>anyMap()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa1e7dc1c50027e84e3dcab73ff2382e6784364"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2NzI4Ng==", "bodyText": "Done.", "url": "https://github.com/grpc/grpc-java/pull/6723#discussion_r385467286", "createdAt": "2020-02-28T01:41:10Z", "author": {"login": "voidzcy"}, "path": "core/src/test/java/io/grpc/internal/DnsNameResolverTest.java", "diffHunk": "@@ -593,123 +567,155 @@ public void resolve_balancerAddrsAsAttributes() throws Exception {\n         (InetSocketAddress) Iterables.getOnlyElement(\n             Iterables.getOnlyElement(result.getAddresses()).getAddresses());\n     assertThat(resolvedBackendAddr.getAddress()).isEqualTo(backendAddr);\n-    assertThat(result.getAttributes().get(GrpcAttributes.ATTR_LB_ADDRS))\n-        .containsExactly(balancerAddr);\n+    verify(mockAddressResolver).resolveAddress(name);\n+    assertThat(result.getAttributes()).isEqualTo(Attributes.EMPTY);\n+    assertThat(result.getServiceConfig()).isNull();\n   }\n \n   @Test\n-  public void resolveAll_nullResourceResolver() throws Exception {\n-    final String hostname = \"addr.fake\";\n-    final Inet4Address backendAddr = InetAddresses.fromInteger(0x7f000001);\n-\n-    AddressResolver mockResolver = mock(AddressResolver.class);\n-    when(mockResolver.resolveAddress(anyString()))\n-        .thenReturn(Collections.<InetAddress>singletonList(backendAddr));\n-    ResourceResolver resourceResolver = null;\n-    boolean resovleSrv = true;\n-    boolean resolveTxt = true;\n+  public void resolve_nullResourceResolver_addressFailure() throws Exception {\n+    DnsNameResolver.enableTxt = true;\n+    AddressResolver mockAddressResolver = mock(AddressResolver.class);\n+    when(mockAddressResolver.resolveAddress(anyString()))\n+        .thenThrow(new IOException(\"no addr\"));\n+    String name = \"foo.googleapis.com\";\n \n-    ResolutionResults res = DnsNameResolver.resolveAll(\n-        mockResolver, resourceResolver, resovleSrv, resolveTxt, hostname);\n-    assertThat(res.addresses).containsExactly(backendAddr);\n-    assertThat(res.balancerAddresses).isEmpty();\n-    assertThat(res.txtRecords).isEmpty();\n-    verify(mockResolver).resolveAddress(hostname);\n+    DnsNameResolver resolver = newResolver(name, 81);\n+    resolver.setAddressResolver(mockAddressResolver);\n+    resolver.setResourceResolver(null);\n+    resolver.start(mockListener);\n+    assertEquals(1, fakeExecutor.runDueTasks());\n+    verify(mockListener).onError(errorCaptor.capture());\n+    Status errorStatus = errorCaptor.getValue();\n+    assertThat(errorStatus.getCode()).isEqualTo(Code.UNAVAILABLE);\n+    assertThat(errorStatus.getCause()).hasMessageThat().contains(\"no addr\");\n   }\n \n   @Test\n-  public void resolveAll_nullResourceResolver_addressFailure() throws Exception {\n-    final String hostname = \"addr.fake\";\n-\n-    AddressResolver mockResolver = mock(AddressResolver.class);\n-    when(mockResolver.resolveAddress(anyString()))\n-        .thenThrow(new IOException(\"no addr\"));\n-    ResourceResolver resourceResolver = null;\n-    boolean resovleSrv = true;\n-    boolean resolveTxt = true;\n+  public void resolve_presentResourceResolver() throws Exception {\n+    DnsNameResolver.enableTxt = true;\n+    InetAddress backendAddr = InetAddresses.fromInteger(0x7f000001);\n+    AddressResolver mockAddressResolver = mock(AddressResolver.class);\n+    when(mockAddressResolver.resolveAddress(anyString()))\n+        .thenReturn(Collections.singletonList(backendAddr));\n+    ResourceResolver mockResourceResolver = mock(ResourceResolver.class);\n+    when(mockResourceResolver.resolveTxt(anyString()))\n+        .thenReturn(\n+            Collections.singletonList(\n+                \"grpc_config=[{\\\"clientLanguage\\\": [\\\"java\\\"], \\\"serviceConfig\\\": {}}]\"));\n+    ServiceConfigParser serviceConfigParser = mock(ServiceConfigParser.class);\n+    when(serviceConfigParser.parseServiceConfig(ArgumentMatchers.<String, Object>anyMap()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxOTk3MQ=="}, "originalCommit": {"oid": "afa1e7dc1c50027e84e3dcab73ff2382e6784364"}, "originalPosition": 253}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjU4MTIzOnYy", "diffSide": "RIGHT", "path": "grpclb/src/main/java/io/grpc/grpclb/GrpclbNameResolver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDowMDowM1rOFu6Lqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMTo0NDozN1rOFvnGzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDczMjA3NQ==", "bodyText": "I'm not wild about how coupled the GrpclbNameResolver is to DnsNameResolver. It looks quite brittle. This method seems to be the biggest issue.\nWe may want to discuss in person, but it seems we could try to do a delegation strategy or have the caller of this method notify the listener. Both of those seem to allow a super.doResolve() approach to let the base class do its work (instead of copying it here and treating the base class as a utility class). As it stands, it would be more straight-forward to have a shared utility class instead of extending.", "url": "https://github.com/grpc/grpc-java/pull/6723#discussion_r384732075", "createdAt": "2020-02-26T20:00:03Z", "author": {"login": "ejona86"}, "path": "grpclb/src/main/java/io/grpc/grpclb/GrpclbNameResolver.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2015 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.grpclb;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Stopwatch;\n+import io.grpc.Attributes;\n+import io.grpc.EquivalentAddressGroup;\n+import io.grpc.NameResolver;\n+import io.grpc.Status;\n+import io.grpc.internal.DnsNameResolver;\n+import io.grpc.internal.SharedResourceHolder.Resource;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Executor;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A DNS-based {@link NameResolver} with gRPC LB specific add-ons for resolving balancer\n+ * addresses via service records.\n+ *\n+ * @see SecretGrpclbNameResolverProvider\n+ */\n+final class GrpclbNameResolver extends DnsNameResolver {\n+\n+  private static final Logger logger = Logger.getLogger(GrpclbNameResolver.class.getName());\n+\n+  // From https://github.com/grpc/proposal/blob/master/A5-grpclb-in-dns.md\n+  private static final String GRPCLB_NAME_PREFIX = \"_grpclb._tcp.\";\n+\n+  GrpclbNameResolver(\n+      @Nullable String nsAuthority,\n+      String name,\n+      Args args,\n+      Resource<Executor> executorResource,\n+      Stopwatch stopwatch,\n+      boolean isAndroid) {\n+    super(nsAuthority, name, args, executorResource, stopwatch, isAndroid);\n+  }\n+\n+  @Override\n+  protected boolean doResolve(Listener2 listener) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa1e7dc1c50027e84e3dcab73ff2382e6784364"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2ODEwOQ==", "bodyText": "Reworked this method extension. Introduced an struct for grouping components of resolution result, caller of this method will populate items out and invoke the callback.", "url": "https://github.com/grpc/grpc-java/pull/6723#discussion_r385468109", "createdAt": "2020-02-28T01:44:37Z", "author": {"login": "voidzcy"}, "path": "grpclb/src/main/java/io/grpc/grpclb/GrpclbNameResolver.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2015 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.grpclb;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Stopwatch;\n+import io.grpc.Attributes;\n+import io.grpc.EquivalentAddressGroup;\n+import io.grpc.NameResolver;\n+import io.grpc.Status;\n+import io.grpc.internal.DnsNameResolver;\n+import io.grpc.internal.SharedResourceHolder.Resource;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Executor;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A DNS-based {@link NameResolver} with gRPC LB specific add-ons for resolving balancer\n+ * addresses via service records.\n+ *\n+ * @see SecretGrpclbNameResolverProvider\n+ */\n+final class GrpclbNameResolver extends DnsNameResolver {\n+\n+  private static final Logger logger = Logger.getLogger(GrpclbNameResolver.class.getName());\n+\n+  // From https://github.com/grpc/proposal/blob/master/A5-grpclb-in-dns.md\n+  private static final String GRPCLB_NAME_PREFIX = \"_grpclb._tcp.\";\n+\n+  GrpclbNameResolver(\n+      @Nullable String nsAuthority,\n+      String name,\n+      Args args,\n+      Resource<Executor> executorResource,\n+      Stopwatch stopwatch,\n+      boolean isAndroid) {\n+    super(nsAuthority, name, args, executorResource, stopwatch, isAndroid);\n+  }\n+\n+  @Override\n+  protected boolean doResolve(Listener2 listener) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDczMjA3NQ=="}, "originalCommit": {"oid": "afa1e7dc1c50027e84e3dcab73ff2382e6784364"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2835, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}