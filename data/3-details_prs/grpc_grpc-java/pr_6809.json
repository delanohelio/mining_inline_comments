{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NTkwNTM4", "number": 6809, "title": "xds: parse RDS response to ConfigUpdate for path matching", "bodyText": "", "createdAt": "2020-03-06T01:38:34Z", "url": "https://github.com/grpc/grpc-java/pull/6809", "merged": true, "mergeCommit": {"oid": "9922382698725294e30723c9ec27db5afa62b323"}, "closed": true, "closedAt": "2020-03-14T00:39:22Z", "author": {"login": "dapengzhang0"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcK2JbnABqjMxMDM1ODk2MjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcNY67VgFqTM3NDY2NzcwNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9a99db4ed6c574213ba680392a851985e0dd324a", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/9a99db4ed6c574213ba680392a851985e0dd324a", "committedDate": "2020-03-06T01:37:59Z", "message": "xds: parse RDS response to ConfigUpdate for path matching"}, "afterCommit": {"oid": "f8a4f2f1409cb1598d4746546ca71838b3f4a257", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/f8a4f2f1409cb1598d4746546ca71838b3f4a257", "committedDate": "2020-03-06T01:50:20Z", "message": "xds: parse RDS response to ConfigUpdate for path matching"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f8a4f2f1409cb1598d4746546ca71838b3f4a257", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/f8a4f2f1409cb1598d4746546ca71838b3f4a257", "committedDate": "2020-03-06T01:50:20Z", "message": "xds: parse RDS response to ConfigUpdate for path matching"}, "afterCommit": {"oid": "e9d59da1e2af0e45b70ef87f15c06a1de936b3dc", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/e9d59da1e2af0e45b70ef87f15c06a1de936b3dc", "committedDate": "2020-03-10T19:27:29Z", "message": "xds: parse RDS response to ConfigUpdate for path matching"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e9d59da1e2af0e45b70ef87f15c06a1de936b3dc", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/e9d59da1e2af0e45b70ef87f15c06a1de936b3dc", "committedDate": "2020-03-10T19:27:29Z", "message": "xds: parse RDS response to ConfigUpdate for path matching"}, "afterCommit": {"oid": "30469ae0d032a69b834f6fbbaf6d0a539614a1cf", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/30469ae0d032a69b834f6fbbaf6d0a539614a1cf", "committedDate": "2020-03-10T19:33:42Z", "message": "xds: parse RDS response to ConfigUpdate for path matching"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "30469ae0d032a69b834f6fbbaf6d0a539614a1cf", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/30469ae0d032a69b834f6fbbaf6d0a539614a1cf", "committedDate": "2020-03-10T19:33:42Z", "message": "xds: parse RDS response to ConfigUpdate for path matching"}, "afterCommit": {"oid": "bdca2ab2775a9c4840a930438ca6514299c15381", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/bdca2ab2775a9c4840a930438ca6514299c15381", "committedDate": "2020-03-10T19:43:26Z", "message": "xds: parse RDS response to ConfigUpdate for path matching"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bdca2ab2775a9c4840a930438ca6514299c15381", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/bdca2ab2775a9c4840a930438ca6514299c15381", "committedDate": "2020-03-10T19:43:26Z", "message": "xds: parse RDS response to ConfigUpdate for path matching"}, "afterCommit": {"oid": "0a63d8c6259c0afc3b66797be6cef3174193edcd", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/0a63d8c6259c0afc3b66797be6cef3174193edcd", "committedDate": "2020-03-10T19:55:42Z", "message": "xds: parse RDS response to ConfigUpdate for path matching"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0a63d8c6259c0afc3b66797be6cef3174193edcd", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/0a63d8c6259c0afc3b66797be6cef3174193edcd", "committedDate": "2020-03-10T19:55:42Z", "message": "xds: parse RDS response to ConfigUpdate for path matching"}, "afterCommit": {"oid": "b2c12bb842b2f1ded9ccab2a84c11a03f56ca7cc", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/b2c12bb842b2f1ded9ccab2a84c11a03f56ca7cc", "committedDate": "2020-03-10T20:18:38Z", "message": "xds: parse RDS response to ConfigUpdate for path matching"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b2c12bb842b2f1ded9ccab2a84c11a03f56ca7cc", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/b2c12bb842b2f1ded9ccab2a84c11a03f56ca7cc", "committedDate": "2020-03-10T20:18:38Z", "message": "xds: parse RDS response to ConfigUpdate for path matching"}, "afterCommit": {"oid": "1fd886f34af45f042190f888ff0411bbf4cd61a9", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/1fd886f34af45f042190f888ff0411bbf4cd61a9", "committedDate": "2020-03-10T20:23:39Z", "message": "xds: parse RDS response to ConfigUpdate for path matching"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "821921d4b5eea842b969e8e7121e7e2068af203b", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/821921d4b5eea842b969e8e7121e7e2068af203b", "committedDate": "2020-03-10T23:11:06Z", "message": "xds: parse RDS response to ConfigUpdate for path matching"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1fd886f34af45f042190f888ff0411bbf4cd61a9", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/1fd886f34af45f042190f888ff0411bbf4cd61a9", "committedDate": "2020-03-10T20:23:39Z", "message": "xds: parse RDS response to ConfigUpdate for path matching"}, "afterCommit": {"oid": "821921d4b5eea842b969e8e7121e7e2068af203b", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/821921d4b5eea842b969e8e7121e7e2068af203b", "committedDate": "2020-03-10T23:11:06Z", "message": "xds: parse RDS response to ConfigUpdate for path matching"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d9b5cd6ceafb1c15442213735f2b3916958a5ee", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/2d9b5cd6ceafb1c15442213735f2b3916958a5ee", "committedDate": "2020-03-12T22:27:45Z", "message": "Merge branch 'master' of https://github.com/grpc/grpc-java into parse-rds-for-xdsrouting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczOTc5MTk4", "url": "https://github.com/grpc/grpc-java/pull/6809#pullrequestreview-373979198", "createdAt": "2020-03-13T00:23:19Z", "commit": {"oid": "2d9b5cd6ceafb1c15442213735f2b3916958a5ee"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwMDoyMzoxOVrOF10Akg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwMToxODo0MlrOF10wGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk3MDk2Mg==", "bodyText": "Would be better to make them private and have getters.", "url": "https://github.com/grpc/grpc-java/pull/6809#discussion_r391970962", "createdAt": "2020-03-13T00:23:19Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/EnvoyProtoData.java", "diffHunk": "@@ -339,4 +340,194 @@ public String toString() {\n           .toString();\n     }\n   }\n+\n+  /** See corresponding Envoy proto message {@link io.envoyproxy.envoy.api.v2.route.Route}. */\n+  static final class Route {\n+    final RouteMatch routeMatch;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d9b5cd6ceafb1c15442213735f2b3916958a5ee"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk3NjU1OA==", "bodyText": "What's the benefit of using Optional?  Using Optional for class field type is considered harmful (see this SO answer although it refers to Java8's Optional. Btw, Guava's Javadoc recommends users to use Java 8's Optional instead). Just use nullable.", "url": "https://github.com/grpc/grpc-java/pull/6809#discussion_r391976558", "createdAt": "2020-03-13T00:48:17Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/EnvoyProtoData.java", "diffHunk": "@@ -339,4 +340,194 @@ public String toString() {\n           .toString();\n     }\n   }\n+\n+  /** See corresponding Envoy proto message {@link io.envoyproxy.envoy.api.v2.route.Route}. */\n+  static final class Route {\n+    final RouteMatch routeMatch;\n+    final Optional<RouteAction> routeAction;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d9b5cd6ceafb1c15442213735f2b3916958a5ee"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk3Njg1Nw==", "bodyText": "Getters would be better. Ditto.", "url": "https://github.com/grpc/grpc-java/pull/6809#discussion_r391976857", "createdAt": "2020-03-13T00:49:40Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/EnvoyProtoData.java", "diffHunk": "@@ -339,4 +340,194 @@ public String toString() {\n           .toString();\n     }\n   }\n+\n+  /** See corresponding Envoy proto message {@link io.envoyproxy.envoy.api.v2.route.Route}. */\n+  static final class Route {\n+    final RouteMatch routeMatch;\n+    final Optional<RouteAction> routeAction;\n+\n+    Route(RouteMatch routeMatch, Optional<RouteAction> routeAction) {\n+      this.routeMatch = routeMatch;\n+      this.routeAction = routeAction;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      Route route = (Route) o;\n+      return Objects.equals(routeMatch, route.routeMatch)\n+          && Objects.equals(routeAction, route.routeAction);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(routeMatch, routeAction);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return MoreObjects.toStringHelper(this)\n+          .add(\"routeMatch\", routeMatch)\n+          .add(\"routeAction\", routeAction)\n+          .toString();\n+    }\n+\n+    static Route fromEnvoyProtoRoute(io.envoyproxy.envoy.api.v2.route.Route proto) {\n+      RouteMatch routeMatch = RouteMatch.fromEnvoyProtoRouteMatch(proto.getMatch());\n+      Optional<RouteAction> routeAction = Optional.absent();\n+      if (proto.hasRoute()) {\n+        routeAction = Optional.of(RouteAction.fromEnvoyProtoRouteAction(proto.getRoute()));\n+      }\n+      return new Route(routeMatch, routeAction);\n+    }\n+  }\n+\n+  /** See corresponding Envoy proto message {@link io.envoyproxy.envoy.api.v2.route.RouteMatch}. */\n+  static final class RouteMatch {\n+    final String prefix;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d9b5cd6ceafb1c15442213735f2b3916958a5ee"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk3ODExMA==", "bodyText": "Use Boolean.parseBoolean(...).", "url": "https://github.com/grpc/grpc-java/pull/6809#discussion_r391978110", "createdAt": "2020-03-13T00:55:35Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -90,6 +92,10 @@\n   static final String ADS_TYPE_URL_EDS =\n       \"type.googleapis.com/envoy.api.v2.ClusterLoadAssignment\";\n \n+  // For now we do not support path matching unless enabled manually.\n+  private static boolean enablePathMatching = String.valueOf(true).equalsIgnoreCase(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d9b5cd6ceafb1c15442213735f2b3916958a5ee"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk3OTYwNg==", "bodyText": "routes would never be null. Ditto below.", "url": "https://github.com/grpc/grpc-java/pull/6809#discussion_r391979606", "createdAt": "2020-03-13T01:02:27Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -624,18 +632,26 @@ private void handleLdsResponseForConfigUpdate(DiscoveryResponse ldsResponse) {\n     adsStream.sendAckRequest(ADS_TYPE_URL_LDS, ImmutableList.of(ldsResourceName),\n         ldsResponse.getVersionInfo());\n \n-    if (clusterName != null || rdsRouteConfigName != null) {\n+    if (routes != null || rdsRouteConfigName != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d9b5cd6ceafb1c15442213735f2b3916958a5ee"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk4MDI0Mw==", "bodyText": "nit: the sentence has grammatical error, rephrase.", "url": "https://github.com/grpc/grpc-java/pull/6809#discussion_r391980243", "createdAt": "2020-03-13T01:05:24Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -842,24 +869,98 @@ static String findClusterNameInRouteConfig(RouteConfiguration config, String hos\n       }\n     }\n \n+    List<EnvoyProtoData.Route> routes = new ArrayList<>();\n     // Proceed with the virtual host that has longest wildcard matched domain name with the\n     // hostname in original \"xds:\" URI.\n     // Note we would consider upstream cluster not found if the virtual host is not configured\n     // correctly for gRPC, even if there exist other virtual hosts with (lower priority)\n     // matching domains.\n     if (targetVirtualHost != null) {\n-      // The client will look only at the last route in the list (the default route),\n-      // whose match field must contain a prefix field whose value is empty string\n-      // and whose route field must be set.\n-      List<Route> routes = targetVirtualHost.getRoutesList();\n-      if (!routes.isEmpty()) {\n-        Route route = routes.get(routes.size() - 1);\n-        if (route.getMatch().getPrefix().isEmpty()) {\n-          if (route.hasRoute()) {\n-            return route.getRoute().getCluster();\n-          }\n+      List<Route> routesProto = targetVirtualHost.getRoutesList();\n+      for (Route route : routesProto) {\n+        routes.add(EnvoyProtoData.Route.fromEnvoyProtoRoute(route));\n+      }\n+    }\n+    return routes;\n+  }\n+\n+  /**\n+   * Validates the given list of routes and return error details if there's any error.\n+   */\n+  // We only validate the default route unless path matching is enabled.\n+  // We do more validation if path matching is enabled, but whether every single route should be", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d9b5cd6ceafb1c15442213735f2b3916958a5ee"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk4MDI3Mg==", "bodyText": "nit: returns", "url": "https://github.com/grpc/grpc-java/pull/6809#discussion_r391980272", "createdAt": "2020-03-13T01:05:30Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -842,24 +869,98 @@ static String findClusterNameInRouteConfig(RouteConfiguration config, String hos\n       }\n     }\n \n+    List<EnvoyProtoData.Route> routes = new ArrayList<>();\n     // Proceed with the virtual host that has longest wildcard matched domain name with the\n     // hostname in original \"xds:\" URI.\n     // Note we would consider upstream cluster not found if the virtual host is not configured\n     // correctly for gRPC, even if there exist other virtual hosts with (lower priority)\n     // matching domains.\n     if (targetVirtualHost != null) {\n-      // The client will look only at the last route in the list (the default route),\n-      // whose match field must contain a prefix field whose value is empty string\n-      // and whose route field must be set.\n-      List<Route> routes = targetVirtualHost.getRoutesList();\n-      if (!routes.isEmpty()) {\n-        Route route = routes.get(routes.size() - 1);\n-        if (route.getMatch().getPrefix().isEmpty()) {\n-          if (route.hasRoute()) {\n-            return route.getRoute().getCluster();\n-          }\n+      List<Route> routesProto = targetVirtualHost.getRoutesList();\n+      for (Route route : routesProto) {\n+        routes.add(EnvoyProtoData.Route.fromEnvoyProtoRoute(route));\n+      }\n+    }\n+    return routes;\n+  }\n+\n+  /**\n+   * Validates the given list of routes and return error details if there's any error.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d9b5cd6ceafb1c15442213735f2b3916958a5ee"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk4MDQ5Mg==", "bodyText": "nit: if it is something TBD. Mark it as TODO. Also I would suggest rephrasing the sentence .", "url": "https://github.com/grpc/grpc-java/pull/6809#discussion_r391980492", "createdAt": "2020-03-13T01:06:31Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -842,24 +869,98 @@ static String findClusterNameInRouteConfig(RouteConfiguration config, String hos\n       }\n     }\n \n+    List<EnvoyProtoData.Route> routes = new ArrayList<>();\n     // Proceed with the virtual host that has longest wildcard matched domain name with the\n     // hostname in original \"xds:\" URI.\n     // Note we would consider upstream cluster not found if the virtual host is not configured\n     // correctly for gRPC, even if there exist other virtual hosts with (lower priority)\n     // matching domains.\n     if (targetVirtualHost != null) {\n-      // The client will look only at the last route in the list (the default route),\n-      // whose match field must contain a prefix field whose value is empty string\n-      // and whose route field must be set.\n-      List<Route> routes = targetVirtualHost.getRoutesList();\n-      if (!routes.isEmpty()) {\n-        Route route = routes.get(routes.size() - 1);\n-        if (route.getMatch().getPrefix().isEmpty()) {\n-          if (route.hasRoute()) {\n-            return route.getRoute().getCluster();\n-          }\n+      List<Route> routesProto = targetVirtualHost.getRoutesList();\n+      for (Route route : routesProto) {\n+        routes.add(EnvoyProtoData.Route.fromEnvoyProtoRoute(route));\n+      }\n+    }\n+    return routes;\n+  }\n+\n+  /**\n+   * Validates the given list of routes and return error details if there's any error.\n+   */\n+  // We only validate the default route unless path matching is enabled.\n+  // We do more validation if path matching is enabled, but whether every single route should be\n+  // valid or any type of error can be skipped is TBD. For now we consider the whole list invalid on\n+  // any single error.\n+  @Nullable\n+  private static String validateRoutes(List<EnvoyProtoData.Route> routes) {\n+    if (routes.isEmpty()) {\n+      return \"No routes found\";\n+    }\n+\n+    if (!enablePathMatching) {\n+      EnvoyProtoData.Route route = routes.get(routes.size() - 1);\n+      RouteMatch routeMatch = route.routeMatch;\n+      if (!routeMatch.path.isEmpty() || !routeMatch.prefix.isEmpty() || routeMatch.hasRegex) {\n+        return \"The last route must be the default route\";\n+      }\n+      if (!route.routeAction.isPresent()) {\n+        return \"Route action is not specified for the default route\";\n+      }\n+      if (route.routeAction.get().cluster.isEmpty()) {\n+        return \"Cluster is not specified for the default route\";\n+      }\n+      return null;\n+    }\n+\n+    Set<String> prefixMatches = new HashSet<>();\n+    Set<String> pathMatches = new HashSet<>();\n+    for (int i = 0; i < routes.size(); i++) {\n+      EnvoyProtoData.Route route = routes.get(i);\n+\n+      if (!route.routeAction.isPresent()) {\n+        return \"Route action is not specified for one of the routes\";\n+      }\n+\n+      RouteMatch routeMatch = route.routeMatch;\n+      String prefix = routeMatch.prefix;\n+      String path = routeMatch.path;\n+      // Whether some of the errors can be skipped is TBD.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d9b5cd6ceafb1c15442213735f2b3916958a5ee"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk4MjQwNA==", "bodyText": "This INFO log will print a list of complex structures, which is not appropriate for INFO level logs. Use INFO level logging to print concise descriptions for those routes or just print out the number of routes found. INFO level log messages are intended to be concise and informative.", "url": "https://github.com/grpc/grpc-java/pull/6809#discussion_r391982404", "createdAt": "2020-03-13T01:15:22Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -786,25 +804,34 @@ private void handleRdsResponse(DiscoveryResponse rdsResponse) {\n \n     // Notify the ConfigWatcher if this RDS response contains the most recently requested\n     // RDS resource.\n-    if (clusterName != null) {\n+    if (routes != null) {\n       if (rdsRespTimer != null) {\n         rdsRespTimer.cancel();\n         rdsRespTimer = null;\n       }\n-      logger.log(XdsLogLevel.INFO, \"Found cluster name: {0}\", clusterName);\n-      ConfigUpdate configUpdate = ConfigUpdate.newBuilder().setClusterName(clusterName).build();\n+\n+      // Found clusterName in the in-lined RouteConfiguration.\n+      String clusterName = routes.get(routes.size() - 1).routeAction.get().cluster;\n+      if (!enablePathMatching) {\n+        logger.log(XdsLogLevel.INFO, \"Found cluster name: {0}\", clusterName);\n+      } else {\n+        logger.log(\n+            XdsLogLevel.INFO,\n+            \"Found routes: {0}\", routes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d9b5cd6ceafb1c15442213735f2b3916958a5ee"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk4MjUxMQ==", "bodyText": "cluster name is always queried, why only logged when path matching is enabled?", "url": "https://github.com/grpc/grpc-java/pull/6809#discussion_r391982511", "createdAt": "2020-03-13T01:15:51Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -786,25 +804,34 @@ private void handleRdsResponse(DiscoveryResponse rdsResponse) {\n \n     // Notify the ConfigWatcher if this RDS response contains the most recently requested\n     // RDS resource.\n-    if (clusterName != null) {\n+    if (routes != null) {\n       if (rdsRespTimer != null) {\n         rdsRespTimer.cancel();\n         rdsRespTimer = null;\n       }\n-      logger.log(XdsLogLevel.INFO, \"Found cluster name: {0}\", clusterName);\n-      ConfigUpdate configUpdate = ConfigUpdate.newBuilder().setClusterName(clusterName).build();\n+\n+      // Found clusterName in the in-lined RouteConfiguration.\n+      String clusterName = routes.get(routes.size() - 1).routeAction.get().cluster;\n+      if (!enablePathMatching) {\n+        logger.log(XdsLogLevel.INFO, \"Found cluster name: {0}\", clusterName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d9b5cd6ceafb1c15442213735f2b3916958a5ee"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk4MzEzMQ==", "bodyText": "Would to rewrite the entire error message instead of just appending an error detail. Also, this entire message becomes the error_details field in the message sent to TD, you should avoid having a nested \"Error detail:\".", "url": "https://github.com/grpc/grpc-java/pull/6809#discussion_r391983131", "createdAt": "2020-03-13T01:18:42Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -767,16 +783,18 @@ private void handleRdsResponse(DiscoveryResponse rdsResponse) {\n         XdsLogLevel.INFO, \"Received RDS response for resources: {0}\", routeConfigNames);\n \n     // Resolved cluster name for the requested resource, if exists.\n-    String clusterName = null;\n+    List<EnvoyProtoData.Route> routes = null;\n     if (requestedRouteConfig != null) {\n-      clusterName = findClusterNameInRouteConfig(requestedRouteConfig, ldsResourceName);\n-      if (clusterName == null) {\n+      routes = findRoutesInRouteConfig(requestedRouteConfig, ldsResourceName);\n+      String errorDetail = validateRoutes(routes);\n+      if (errorDetail != null) {\n         adsStream.sendNackRequest(\n             ADS_TYPE_URL_RDS, ImmutableList.of(adsStream.rdsResourceName),\n             rdsResponse.getVersionInfo(),\n             \"RouteConfiguration \" + requestedRouteConfig.getName() + \": cannot find a \"\n                 + \"valid cluster name in any virtual hosts with domains matching: \"\n-                + ldsResourceName);\n+                + ldsResourceName", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d9b5cd6ceafb1c15442213735f2b3916958a5ee"}, "originalPosition": 100}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0dfcf28778d5d92926c8cad9e2f1e75020567551", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/0dfcf28778d5d92926c8cad9e2f1e75020567551", "committedDate": "2020-03-13T19:39:51Z", "message": "fix logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a365fa511990e2fbb32de1ab1b25d6db97af5fcc", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/a365fa511990e2fbb32de1ab1b25d6db97af5fcc", "committedDate": "2020-03-13T21:31:42Z", "message": "getter pattern boilerplate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ccc7faae24a8ec35f7b6e47e26430f63fdf1b36", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/1ccc7faae24a8ec35f7b6e47e26430f63fdf1b36", "committedDate": "2020-03-13T21:51:07Z", "message": "Boolean.parseBoolean and fix doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ccfd8d555c9e95e60e1fd5169b2820e46778475", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/0ccfd8d555c9e95e60e1fd5169b2820e46778475", "committedDate": "2020-03-13T21:55:44Z", "message": "add todo"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "009a3167a652c2b6add769e0966e4d5b4b2cde19", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/009a3167a652c2b6add769e0966e4d5b4b2cde19", "committedDate": "2020-03-13T21:54:58Z", "message": "add todo"}, "afterCommit": {"oid": "0ccfd8d555c9e95e60e1fd5169b2820e46778475", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/0ccfd8d555c9e95e60e1fd5169b2820e46778475", "committedDate": "2020-03-13T21:55:44Z", "message": "add todo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NjQ2NDYw", "url": "https://github.com/grpc/grpc-java/pull/6809#pullrequestreview-374646460", "createdAt": "2020-03-13T22:12:00Z", "commit": {"oid": "0ccfd8d555c9e95e60e1fd5169b2820e46778475"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoxMjowMFrOF2U2DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoxMjowMFrOF2U2DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUwODk0MQ==", "bodyText": "nit: be formal. If it is part of method specification, put it inside the head comment of this method. If it is about implementation details, put it at where the code logic is present. If it is your personal note, should just delete it.", "url": "https://github.com/grpc/grpc-java/pull/6809#discussion_r392508941", "createdAt": "2020-03-13T22:12:00Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -842,24 +868,99 @@ static String findClusterNameInRouteConfig(RouteConfiguration config, String hos\n       }\n     }\n \n+    List<EnvoyProtoData.Route> routes = new ArrayList<>();\n     // Proceed with the virtual host that has longest wildcard matched domain name with the\n     // hostname in original \"xds:\" URI.\n     // Note we would consider upstream cluster not found if the virtual host is not configured\n     // correctly for gRPC, even if there exist other virtual hosts with (lower priority)\n     // matching domains.\n     if (targetVirtualHost != null) {\n-      // The client will look only at the last route in the list (the default route),\n-      // whose match field must contain a prefix field whose value is empty string\n-      // and whose route field must be set.\n-      List<Route> routes = targetVirtualHost.getRoutesList();\n-      if (!routes.isEmpty()) {\n-        Route route = routes.get(routes.size() - 1);\n-        if (route.getMatch().getPrefix().isEmpty()) {\n-          if (route.hasRoute()) {\n-            return route.getRoute().getCluster();\n-          }\n+      List<Route> routesProto = targetVirtualHost.getRoutesList();\n+      for (Route route : routesProto) {\n+        routes.add(EnvoyProtoData.Route.fromEnvoyProtoRoute(route));\n+      }\n+    }\n+    return routes;\n+  }\n+\n+  /**\n+   * Validates the given list of routes and returns error details if there's any error.\n+   */\n+  // We only validate the default route unless path matching is enabled.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ccfd8d555c9e95e60e1fd5169b2820e46778475"}, "originalPosition": 179}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9f3ee4e336379eba9dbde7fda2fc33b5fa12094", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/d9f3ee4e336379eba9dbde7fda2fc33b5fa12094", "committedDate": "2020-03-13T22:35:42Z", "message": "nullable field"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd5a0d137b1b751d80b128c357f1b074d1de806d", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/fd5a0d137b1b751d80b128c357f1b074d1de806d", "committedDate": "2020-03-13T22:43:20Z", "message": "relocate comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NjY0NDAz", "url": "https://github.com/grpc/grpc-java/pull/6809#pullrequestreview-374664403", "createdAt": "2020-03-13T23:14:29Z", "commit": {"oid": "fd5a0d137b1b751d80b128c357f1b074d1de806d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMzoxNDoyOVrOF2VxkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMzoxNDoyOVrOF2VxkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUyNDE3Nw==", "bodyText": "I would just prefer using nullable return value and all the other places used that (it doesn't give us much benefit for using Optional). But I am fine with this.", "url": "https://github.com/grpc/grpc-java/pull/6809#discussion_r392524177", "createdAt": "2020-03-13T23:14:29Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/EnvoyProtoData.java", "diffHunk": "@@ -339,4 +341,239 @@ public String toString() {\n           .toString();\n     }\n   }\n+\n+  /** See corresponding Envoy proto message {@link io.envoyproxy.envoy.api.v2.route.Route}. */\n+  static final class Route {\n+    private final RouteMatch routeMatch;\n+    @Nullable\n+    private final RouteAction routeAction;\n+\n+    @VisibleForTesting\n+    Route(RouteMatch routeMatch, @Nullable RouteAction routeAction) {\n+      this.routeMatch = routeMatch;\n+      this.routeAction = routeAction;\n+    }\n+\n+    RouteMatch getRouteMatch() {\n+      return routeMatch;\n+    }\n+\n+    Optional<RouteAction> getRouteAction() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd5a0d137b1b751d80b128c357f1b074d1de806d"}, "originalPosition": 113}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NjY3NzA3", "url": "https://github.com/grpc/grpc-java/pull/6809#pullrequestreview-374667707", "createdAt": "2020-03-13T23:29:11Z", "commit": {"oid": "fd5a0d137b1b751d80b128c357f1b074d1de806d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4641, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}