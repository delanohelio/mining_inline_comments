{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0MDUyNzkx", "number": 7709, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwODo0MDoxOFrOFD4EVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMDo0NjoyM1rOFEL8fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NjA4NjYzOnYy", "diffSide": "RIGHT", "path": "xds/src/test/java/io/grpc/xds/EdsLoadBalancer2Test.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwODo0MDoxOFrOIDuh-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMDoxMzowMlrOIEXP6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc3OTAwMw==", "bodyText": "Why is this called populate...? It is misleading. It is just extracting a tlsContext from the child policy of a priority. extractTlsContext would be more appropriate.", "url": "https://github.com/grpc/grpc-java/pull/7709#discussion_r540779003", "createdAt": "2020-12-11T08:40:18Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/test/java/io/grpc/xds/EdsLoadBalancer2Test.java", "diffHunk": "@@ -493,16 +489,30 @@ private Long populateMaxConcurrentRequests(PriorityLbConfig config, String prior\n     return clusterImplConfig.maxConcurrentRequests;\n   }\n \n-  private PolicySelection populateLeafLbPolicy(PriorityLbConfig config, String priority,\n-      Locality locality) {\n+  @Test\n+  public void configUpdate_changeTlsContext_propagateToChildLb() {\n+    deliverSimpleClusterLoadAssignment(EDS_SERVICE_NAME);\n+    FakeLoadBalancer childBalancer = Iterables.getOnlyElement(childBalancers);\n+    PriorityLbConfig childLbConfig = (PriorityLbConfig) childBalancer.config;\n+    assertThat(populateTlsContext(childLbConfig, \"priority1\")).isNull();\n+\n+    UpstreamTlsContext upstreamTlsContext =\n+        CommonTlsContextTestsUtil.buildUpstreamTlsContextFromFilenames(\n+            CommonTlsContextTestsUtil.CLIENT_KEY_FILE,\n+            CommonTlsContextTestsUtil.CLIENT_PEM_FILE,\n+            CommonTlsContextTestsUtil.CA_PEM_FILE);\n+    EdsConfig config = new EdsConfig(CLUSTER, EDS_SERVICE_NAME, LRS_SERVER_NAME, 100L,\n+        upstreamTlsContext, weightedTarget, roundRobin);\n+    deliverConfig(config);\n+    assertThat(Iterables.getOnlyElement(childBalancers)).isSameInstanceAs(childBalancer);\n+    childLbConfig = (PriorityLbConfig) childBalancer.config;\n+    assertThat(populateTlsContext(childLbConfig, \"priority1\")).isEqualTo(upstreamTlsContext);\n+  }\n+\n+  private UpstreamTlsContext populateTlsContext(PriorityLbConfig config, String priority) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fa43a68a75ffe3b9f26453eddbfcfaf74723bcf"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ0NjEyMw==", "bodyText": "Well this is private and in test, and the EDS LB policy will soon be replaced by the cluster_resolver LB policy (#7685 and #7722 migrates to it, then this will be deleted). So we probably don't bother picking these things. \ud83d\ude04", "url": "https://github.com/grpc/grpc-java/pull/7709#discussion_r541446123", "createdAt": "2020-12-12T00:13:02Z", "author": {"login": "voidzcy"}, "path": "xds/src/test/java/io/grpc/xds/EdsLoadBalancer2Test.java", "diffHunk": "@@ -493,16 +489,30 @@ private Long populateMaxConcurrentRequests(PriorityLbConfig config, String prior\n     return clusterImplConfig.maxConcurrentRequests;\n   }\n \n-  private PolicySelection populateLeafLbPolicy(PriorityLbConfig config, String priority,\n-      Locality locality) {\n+  @Test\n+  public void configUpdate_changeTlsContext_propagateToChildLb() {\n+    deliverSimpleClusterLoadAssignment(EDS_SERVICE_NAME);\n+    FakeLoadBalancer childBalancer = Iterables.getOnlyElement(childBalancers);\n+    PriorityLbConfig childLbConfig = (PriorityLbConfig) childBalancer.config;\n+    assertThat(populateTlsContext(childLbConfig, \"priority1\")).isNull();\n+\n+    UpstreamTlsContext upstreamTlsContext =\n+        CommonTlsContextTestsUtil.buildUpstreamTlsContextFromFilenames(\n+            CommonTlsContextTestsUtil.CLIENT_KEY_FILE,\n+            CommonTlsContextTestsUtil.CLIENT_PEM_FILE,\n+            CommonTlsContextTestsUtil.CA_PEM_FILE);\n+    EdsConfig config = new EdsConfig(CLUSTER, EDS_SERVICE_NAME, LRS_SERVER_NAME, 100L,\n+        upstreamTlsContext, weightedTarget, roundRobin);\n+    deliverConfig(config);\n+    assertThat(Iterables.getOnlyElement(childBalancers)).isSameInstanceAs(childBalancer);\n+    childLbConfig = (PriorityLbConfig) childBalancer.config;\n+    assertThat(populateTlsContext(childLbConfig, \"priority1\")).isEqualTo(upstreamTlsContext);\n+  }\n+\n+  private UpstreamTlsContext populateTlsContext(PriorityLbConfig config, String priority) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc3OTAwMw=="}, "originalCommit": {"oid": "4fa43a68a75ffe3b9f26453eddbfcfaf74723bcf"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTM0MzMzOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/EdsLoadBalancerProvider.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMDo0NjoyM1rOIEMlzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMDozMDoxMFrOIEXq3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI3MTUwMw==", "bodyText": "How does tlsContext.toString() look? Seems it contains nested Any field.", "url": "https://github.com/grpc/grpc-java/pull/7709#discussion_r541271503", "createdAt": "2020-12-11T20:46:23Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/EdsLoadBalancerProvider.java", "diffHunk": "@@ -78,23 +82,50 @@ public ConfigOrError parseLoadBalancingPolicyConfig(\n         @Nullable String edsServiceName,\n         @Nullable String lrsServerName,\n         @Nullable Long maxConcurrentRequests,\n+        @Nullable UpstreamTlsContext tlsContext,\n         PolicySelection localityPickingPolicy,\n         PolicySelection endpointPickingPolicy) {\n       this.clusterName = checkNotNull(clusterName, \"clusterName\");\n       this.edsServiceName = edsServiceName;\n       this.lrsServerName = lrsServerName;\n       this.maxConcurrentRequests = maxConcurrentRequests;\n+      this.tlsContext = tlsContext;\n       this.localityPickingPolicy = checkNotNull(localityPickingPolicy, \"localityPickingPolicy\");\n       this.endpointPickingPolicy = checkNotNull(endpointPickingPolicy, \"endpointPickingPolicy\");\n     }\n \n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(clusterName, edsServiceName, lrsServerName, maxConcurrentRequests,\n+          tlsContext, localityPickingPolicy, endpointPickingPolicy);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      EdsConfig that = (EdsConfig) o;\n+      return Objects.equals(clusterName, that.clusterName)\n+          && Objects.equals(edsServiceName, that.edsServiceName)\n+          && Objects.equals(lrsServerName, that.lrsServerName)\n+          && Objects.equals(maxConcurrentRequests, that.maxConcurrentRequests)\n+          && Objects.equals(tlsContext, that.tlsContext)\n+          && Objects.equals(localityPickingPolicy, that.localityPickingPolicy)\n+          && Objects.equals(endpointPickingPolicy, that.endpointPickingPolicy);\n+    }\n+\n     @Override\n     public String toString() {\n       return MoreObjects.toStringHelper(this)\n           .add(\"clusterName\", clusterName)\n           .add(\"edsServiceName\", edsServiceName)\n           .add(\"lrsServerName\", lrsServerName)\n           .add(\"maxConcurrentRequests\", maxConcurrentRequests)\n+          .add(\"tlsContext\", tlsContext)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fa43a68a75ffe3b9f26453eddbfcfaf74723bcf"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ0OTI5Ng==", "bodyText": "Well, the class UpstreamTlsContext is weird, it does nothing but just wrap the proto. Its toString() is causing the problem (and its @Nullable annotations are completely a mess...). Probably I should just drop it in the toString() here.", "url": "https://github.com/grpc/grpc-java/pull/7709#discussion_r541449296", "createdAt": "2020-12-12T00:17:34Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/EdsLoadBalancerProvider.java", "diffHunk": "@@ -78,23 +82,50 @@ public ConfigOrError parseLoadBalancingPolicyConfig(\n         @Nullable String edsServiceName,\n         @Nullable String lrsServerName,\n         @Nullable Long maxConcurrentRequests,\n+        @Nullable UpstreamTlsContext tlsContext,\n         PolicySelection localityPickingPolicy,\n         PolicySelection endpointPickingPolicy) {\n       this.clusterName = checkNotNull(clusterName, \"clusterName\");\n       this.edsServiceName = edsServiceName;\n       this.lrsServerName = lrsServerName;\n       this.maxConcurrentRequests = maxConcurrentRequests;\n+      this.tlsContext = tlsContext;\n       this.localityPickingPolicy = checkNotNull(localityPickingPolicy, \"localityPickingPolicy\");\n       this.endpointPickingPolicy = checkNotNull(endpointPickingPolicy, \"endpointPickingPolicy\");\n     }\n \n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(clusterName, edsServiceName, lrsServerName, maxConcurrentRequests,\n+          tlsContext, localityPickingPolicy, endpointPickingPolicy);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      EdsConfig that = (EdsConfig) o;\n+      return Objects.equals(clusterName, that.clusterName)\n+          && Objects.equals(edsServiceName, that.edsServiceName)\n+          && Objects.equals(lrsServerName, that.lrsServerName)\n+          && Objects.equals(maxConcurrentRequests, that.maxConcurrentRequests)\n+          && Objects.equals(tlsContext, that.tlsContext)\n+          && Objects.equals(localityPickingPolicy, that.localityPickingPolicy)\n+          && Objects.equals(endpointPickingPolicy, that.endpointPickingPolicy);\n+    }\n+\n     @Override\n     public String toString() {\n       return MoreObjects.toStringHelper(this)\n           .add(\"clusterName\", clusterName)\n           .add(\"edsServiceName\", edsServiceName)\n           .add(\"lrsServerName\", lrsServerName)\n           .add(\"maxConcurrentRequests\", maxConcurrentRequests)\n+          .add(\"tlsContext\", tlsContext)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI3MTUwMw=="}, "originalCommit": {"oid": "4fa43a68a75ffe3b9f26453eddbfcfaf74723bcf"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1MzAyMQ==", "bodyText": "Removed UpstreamTlsContext from toStings of data structures including it.", "url": "https://github.com/grpc/grpc-java/pull/7709#discussion_r541453021", "createdAt": "2020-12-12T00:30:10Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/EdsLoadBalancerProvider.java", "diffHunk": "@@ -78,23 +82,50 @@ public ConfigOrError parseLoadBalancingPolicyConfig(\n         @Nullable String edsServiceName,\n         @Nullable String lrsServerName,\n         @Nullable Long maxConcurrentRequests,\n+        @Nullable UpstreamTlsContext tlsContext,\n         PolicySelection localityPickingPolicy,\n         PolicySelection endpointPickingPolicy) {\n       this.clusterName = checkNotNull(clusterName, \"clusterName\");\n       this.edsServiceName = edsServiceName;\n       this.lrsServerName = lrsServerName;\n       this.maxConcurrentRequests = maxConcurrentRequests;\n+      this.tlsContext = tlsContext;\n       this.localityPickingPolicy = checkNotNull(localityPickingPolicy, \"localityPickingPolicy\");\n       this.endpointPickingPolicy = checkNotNull(endpointPickingPolicy, \"endpointPickingPolicy\");\n     }\n \n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(clusterName, edsServiceName, lrsServerName, maxConcurrentRequests,\n+          tlsContext, localityPickingPolicy, endpointPickingPolicy);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      EdsConfig that = (EdsConfig) o;\n+      return Objects.equals(clusterName, that.clusterName)\n+          && Objects.equals(edsServiceName, that.edsServiceName)\n+          && Objects.equals(lrsServerName, that.lrsServerName)\n+          && Objects.equals(maxConcurrentRequests, that.maxConcurrentRequests)\n+          && Objects.equals(tlsContext, that.tlsContext)\n+          && Objects.equals(localityPickingPolicy, that.localityPickingPolicy)\n+          && Objects.equals(endpointPickingPolicy, that.endpointPickingPolicy);\n+    }\n+\n     @Override\n     public String toString() {\n       return MoreObjects.toStringHelper(this)\n           .add(\"clusterName\", clusterName)\n           .add(\"edsServiceName\", edsServiceName)\n           .add(\"lrsServerName\", lrsServerName)\n           .add(\"maxConcurrentRequests\", maxConcurrentRequests)\n+          .add(\"tlsContext\", tlsContext)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI3MTUwMw=="}, "originalCommit": {"oid": "4fa43a68a75ffe3b9f26453eddbfcfaf74723bcf"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2997, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}