{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzMTk5MDk4", "number": 7700, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMDowMzo0N1rOFCDP1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMDowMzo0N1rOFCDP1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3Njk0Njc3OnYy", "diffSide": "RIGHT", "path": "examples/src/main/java/io/grpc/examples/hedging/HedgingHelloWorldClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMDowMzo0N1rOIBAkow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMDowMzo0N1rOIBAkow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyODg2Nw==", "bodyText": "Move the Map creation to this line; don't add the getHedgingServiceConfig method. And please use 4 spaces instead of 8 for indentation (we actually use 2, but 4 for line continuations; after the first indent of 4 spaces, the rest could have been 2 spaces).\nThe method should have been a private method and adds an indirection. We want our examples to be very concrete and clear, which means favoring less indirection and more \"it looks like a basic script.\"", "url": "https://github.com/grpc/grpc-java/pull/7700#discussion_r537928867", "createdAt": "2020-12-08T00:03:47Z", "author": {"login": "ejona86"}, "path": "examples/src/main/java/io/grpc/examples/hedging/HedgingHelloWorldClient.java", "diffHunk": "@@ -49,23 +49,25 @@\n   private final PriorityBlockingQueue<Long> latencies = new PriorityBlockingQueue<>();\n   private final AtomicInteger failedRpcs = new AtomicInteger();\n \n+  protected Map<String, ?> getHedgingServiceConfig() {\n+    return new Gson()\n+            .fromJson(\n+                    new JsonReader(\n+                            new InputStreamReader(\n+                                    HedgingHelloWorldClient.class.getResourceAsStream(\n+                                            \"hedging_service_config.json\"),\n+                                    UTF_8)),\n+                    Map.class);\n+  }\n+\n   /** Construct client connecting to HelloWorld server at {@code host:port}. */\n   public HedgingHelloWorldClient(String host, int port, boolean hedging) {\n-    Map<String, ?> hedgingServiceConfig =\n-      new Gson()\n-          .fromJson(\n-              new JsonReader(\n-                  new InputStreamReader(\n-                      HedgingHelloWorldClient.class.getResourceAsStream(\n-                          \"hedging_service_config.json\"),\n-                      UTF_8)),\n-              Map.class);\n-\n     ManagedChannelBuilder<?> channelBuilder = ManagedChannelBuilder.forAddress(host, port)\n         // Channels are secure by default (via SSL/TLS). For the example we disable TLS to avoid\n         // needing certificates.\n         .usePlaintext();\n     if (hedging) {\n+      Map<String, ?> hedgingServiceConfig = getHedgingServiceConfig();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "220cb4b5f2867a2d3040437007bd827278e0233b"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2991, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}