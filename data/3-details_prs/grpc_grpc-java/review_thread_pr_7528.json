{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1MTc1ODky", "number": 7528, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QwMjoyNzowMlrOEuuXiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMzoxNjozOVrOEwAvHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NDI5NjQxOnYy", "diffSide": "LEFT", "path": "xds/src/main/java/io/grpc/xds/LoadReportClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QwMjoyNzowMlrOHjTmlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QwMjoyNzowMlrOHjTmlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc4MzM4Mg==", "bodyText": "These two helper classes are redundant, they just repackage the fields in the proto messages/data structs. We can simply pass them as individual arguments to methods to be called.", "url": "https://github.com/grpc/grpc-java/pull/7528#discussion_r506783382", "createdAt": "2020-10-17T02:27:02Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/LoadReportClient.java", "diffHunk": "@@ -392,93 +426,24 @@ public void run() {\n           LoadReportingServiceGrpc.newStub(xdsChannel.getManagedChannel());\n       lrsRequestWriterV3 = stubV3.withWaitForReady().streamLoadStats(lrsResponseReaderV3);\n       logger.log(XdsLogLevel.DEBUG, \"Sending initial LRS request\");\n-      sendLoadStatsRequest(new LoadStatsRequestData(node, null));\n+      sendLoadStatsRequest(Collections.<ClusterStats>emptyList());\n     }\n \n     @Override\n-    void sendLoadStatsRequest(LoadStatsRequestData request) {\n-      LoadStatsRequest requestProto = request.toEnvoyProtoV3();\n-      lrsRequestWriterV3.onNext(requestProto);\n-      logger.log(XdsLogLevel.DEBUG, \"Sent LoadStatsRequest\\n{0}\", requestProto);\n+    void sendLoadStatsRequest(List<ClusterStats> clusterStatsList) {\n+      LoadStatsRequest.Builder requestBuilder =\n+          LoadStatsRequest.newBuilder().setNode(node.toEnvoyProtoNode());\n+      for (ClusterStats stats : clusterStatsList) {\n+        requestBuilder.addClusterStats(stats.toEnvoyProtoClusterStats());\n+      }\n+      LoadStatsRequest request = requestBuilder.build();\n+      lrsRequestWriterV3.onNext(request);\n+      logger.log(XdsLogLevel.DEBUG, \"Sent LoadStatsRequest\\n{0}\", request);\n     }\n \n     @Override\n     void sendError(Exception error) {\n       lrsRequestWriterV3.onError(error);\n     }\n   }\n-\n-  private static final class LoadStatsRequestData {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa51f4854bc84def8457956c4a0ea2364e3c9f42"}, "originalPosition": 258}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzAyNTIyOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/LoadReportClient.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxOToxMjozNVrOHlNNpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMTozNDo0OVrOHlR_kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc3NTg0NA==", "bodyText": "There is a race condition:\n\nstopLoadReporting() is called and holds the lock.\nLrsRpcRetryTask.run() is called, trying to acquire the lock, and being blocked because the lock can not be acquired.\nstopLoadReporting() turns started = false, and then calls lrsRpcRetryTimer.cancel(false) which does nothing because LrsRpcRetryTask.run() is already running and still trying to acquire the lock.\nstopLoadReporting() returns and releases the lock.\nLrsRpcRetryTask.run() finally acquires the lock and calls startLrsRpc().", "url": "https://github.com/grpc/grpc-java/pull/7528#discussion_r508775844", "createdAt": "2020-10-20T19:12:35Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/LoadReportClient.java", "diffHunk": "@@ -97,35 +92,39 @@\n    * no-op.\n    */\n   void startLoadReporting() {\n-    if (started) {\n-      return;\n+    synchronized (lock) {\n+      if (started) {\n+        return;\n+      }\n+      started = true;\n+      logger.log(XdsLogLevel.INFO, \"Starting load reporting RPC\");\n+      startLrsRpc();\n     }\n-    started = true;\n-    logger.log(XdsLogLevel.INFO, \"Starting load reporting RPC\");\n-    startLrsRpc();\n   }\n \n   /**\n    * Terminates load reporting. Calling this method on an already stopped\n    * {@link LoadReportClient} is no-op.\n    */\n   void stopLoadReporting() {\n-    if (!started) {\n-      return;\n-    }\n-    logger.log(XdsLogLevel.INFO, \"Stopping load reporting RPC\");\n-    if (lrsRpcRetryTimer != null) {\n-      lrsRpcRetryTimer.cancel();\n-    }\n-    if (lrsStream != null) {\n-      lrsStream.close(Status.CANCELLED.withDescription(\"stop load reporting\").asException());\n+    synchronized (lock) {\n+      if (!started) {\n+        return;\n+      }\n+      started = false;\n+      logger.log(XdsLogLevel.INFO, \"Stopping load reporting RPC\");\n+      if (lrsRpcRetryTimer != null) {\n+        lrsRpcRetryTimer.cancel(false);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "601cef3ec7f82cf7592c4377d9e6313a8e015a12"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc3ODY5MA==", "bodyText": "I've considered this. When stopLoadReporting() is releasing the lock, started should have been set to false. The first statement of startLrsRpc() checks that and return immediately if already stopped.\n(Similar things happen for LoadReportingTask)", "url": "https://github.com/grpc/grpc-java/pull/7528#discussion_r508778690", "createdAt": "2020-10-20T19:17:58Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/LoadReportClient.java", "diffHunk": "@@ -97,35 +92,39 @@\n    * no-op.\n    */\n   void startLoadReporting() {\n-    if (started) {\n-      return;\n+    synchronized (lock) {\n+      if (started) {\n+        return;\n+      }\n+      started = true;\n+      logger.log(XdsLogLevel.INFO, \"Starting load reporting RPC\");\n+      startLrsRpc();\n     }\n-    started = true;\n-    logger.log(XdsLogLevel.INFO, \"Starting load reporting RPC\");\n-    startLrsRpc();\n   }\n \n   /**\n    * Terminates load reporting. Calling this method on an already stopped\n    * {@link LoadReportClient} is no-op.\n    */\n   void stopLoadReporting() {\n-    if (!started) {\n-      return;\n-    }\n-    logger.log(XdsLogLevel.INFO, \"Stopping load reporting RPC\");\n-    if (lrsRpcRetryTimer != null) {\n-      lrsRpcRetryTimer.cancel();\n-    }\n-    if (lrsStream != null) {\n-      lrsStream.close(Status.CANCELLED.withDescription(\"stop load reporting\").asException());\n+    synchronized (lock) {\n+      if (!started) {\n+        return;\n+      }\n+      started = false;\n+      logger.log(XdsLogLevel.INFO, \"Stopping load reporting RPC\");\n+      if (lrsRpcRetryTimer != null) {\n+        lrsRpcRetryTimer.cancel(false);\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc3NTg0NA=="}, "originalCommit": {"oid": "601cef3ec7f82cf7592c4377d9e6313a8e015a12"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1MTg3MA==", "bodyText": "Oh, the method name startLrsRpc() confused me, it actually should be restartLrsRpc().", "url": "https://github.com/grpc/grpc-java/pull/7528#discussion_r508851870", "createdAt": "2020-10-20T21:30:11Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/LoadReportClient.java", "diffHunk": "@@ -97,35 +92,39 @@\n    * no-op.\n    */\n   void startLoadReporting() {\n-    if (started) {\n-      return;\n+    synchronized (lock) {\n+      if (started) {\n+        return;\n+      }\n+      started = true;\n+      logger.log(XdsLogLevel.INFO, \"Starting load reporting RPC\");\n+      startLrsRpc();\n     }\n-    started = true;\n-    logger.log(XdsLogLevel.INFO, \"Starting load reporting RPC\");\n-    startLrsRpc();\n   }\n \n   /**\n    * Terminates load reporting. Calling this method on an already stopped\n    * {@link LoadReportClient} is no-op.\n    */\n   void stopLoadReporting() {\n-    if (!started) {\n-      return;\n-    }\n-    logger.log(XdsLogLevel.INFO, \"Stopping load reporting RPC\");\n-    if (lrsRpcRetryTimer != null) {\n-      lrsRpcRetryTimer.cancel();\n-    }\n-    if (lrsStream != null) {\n-      lrsStream.close(Status.CANCELLED.withDescription(\"stop load reporting\").asException());\n+    synchronized (lock) {\n+      if (!started) {\n+        return;\n+      }\n+      started = false;\n+      logger.log(XdsLogLevel.INFO, \"Stopping load reporting RPC\");\n+      if (lrsRpcRetryTimer != null) {\n+        lrsRpcRetryTimer.cancel(false);\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc3NTg0NA=="}, "originalCommit": {"oid": "601cef3ec7f82cf7592c4377d9e6313a8e015a12"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg1NDE2Mg==", "bodyText": "start* is fine, it is used both for the first time start and restart cases.", "url": "https://github.com/grpc/grpc-java/pull/7528#discussion_r508854162", "createdAt": "2020-10-20T21:34:49Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/LoadReportClient.java", "diffHunk": "@@ -97,35 +92,39 @@\n    * no-op.\n    */\n   void startLoadReporting() {\n-    if (started) {\n-      return;\n+    synchronized (lock) {\n+      if (started) {\n+        return;\n+      }\n+      started = true;\n+      logger.log(XdsLogLevel.INFO, \"Starting load reporting RPC\");\n+      startLrsRpc();\n     }\n-    started = true;\n-    logger.log(XdsLogLevel.INFO, \"Starting load reporting RPC\");\n-    startLrsRpc();\n   }\n \n   /**\n    * Terminates load reporting. Calling this method on an already stopped\n    * {@link LoadReportClient} is no-op.\n    */\n   void stopLoadReporting() {\n-    if (!started) {\n-      return;\n-    }\n-    logger.log(XdsLogLevel.INFO, \"Stopping load reporting RPC\");\n-    if (lrsRpcRetryTimer != null) {\n-      lrsRpcRetryTimer.cancel();\n-    }\n-    if (lrsStream != null) {\n-      lrsStream.close(Status.CANCELLED.withDescription(\"stop load reporting\").asException());\n+    synchronized (lock) {\n+      if (!started) {\n+        return;\n+      }\n+      started = false;\n+      logger.log(XdsLogLevel.INFO, \"Stopping load reporting RPC\");\n+      if (lrsRpcRetryTimer != null) {\n+        lrsRpcRetryTimer.cancel(false);\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc3NTg0NA=="}, "originalCommit": {"oid": "601cef3ec7f82cf7592c4377d9e6313a8e015a12"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4Nzc5MTY1OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/LoadReportClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMzoxNjozOVrOHlUeMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMzo0MTo1NlrOHlU9vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg5NDc3MQ==", "bodyText": "nit: We don't need check if (delayNanos <= 0), schedule() should handle <=0 delay correctly.", "url": "https://github.com/grpc/grpc-java/pull/7528#discussion_r508894771", "createdAt": "2020-10-20T23:16:39Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/LoadReportClient.java", "diffHunk": "@@ -263,8 +267,7 @@ private void handleStreamClosed(Status status) {\n         startLrsRpc();\n       } else {\n         lrsRpcRetryTimer =\n-            syncContext.schedule(new LrsRpcRetryTask(), delayNanos, TimeUnit.NANOSECONDS,\n-                timerService);\n+            timerService.schedule(new LrsRpcRetryTask(), delayNanos, TimeUnit.NANOSECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "601cef3ec7f82cf7592c4377d9e6313a8e015a12"}, "originalPosition": 246}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkwMjg0Nw==", "bodyText": "Yeah, I remember we discussed the same thing for XdsClient before. I don't have strong preference, they should behave the same, only test needs to explicitly call runDueTasks(). Let's keep what we have now, as that's not related to what's this PR is intending for.", "url": "https://github.com/grpc/grpc-java/pull/7528#discussion_r508902847", "createdAt": "2020-10-20T23:41:56Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/LoadReportClient.java", "diffHunk": "@@ -263,8 +267,7 @@ private void handleStreamClosed(Status status) {\n         startLrsRpc();\n       } else {\n         lrsRpcRetryTimer =\n-            syncContext.schedule(new LrsRpcRetryTask(), delayNanos, TimeUnit.NANOSECONDS,\n-                timerService);\n+            timerService.schedule(new LrsRpcRetryTask(), delayNanos, TimeUnit.NANOSECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg5NDc3MQ=="}, "originalCommit": {"oid": "601cef3ec7f82cf7592c4377d9e6313a8e015a12"}, "originalPosition": 246}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2222, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}