{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1NzIzOTQ5", "number": 7309, "title": "xds: add CertProviderSslContextProvider support", "bodyText": "", "createdAt": "2020-08-10T20:48:28Z", "url": "https://github.com/grpc/grpc-java/pull/7309", "merged": true, "mergeCommit": {"oid": "39c49b04080739fdb3f4b45a72efb80863a580ec"}, "closed": true, "closedAt": "2020-08-17T16:45:14Z", "author": {"login": "sanjaypujare"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc9oeJyAH2gAyNDY1NzIzOTQ5OjczMWY4ZmUzYzM2OTYwMWM4NjM4OWE0YmJkNjRjNWQwNjQxYmRlMWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc_1N0_gFqTQ2ODYyNjg0MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "731f8fe3c369601c86389a4bbd64c5d0641bde1b", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/731f8fe3c369601c86389a4bbd64c5d0641bde1b", "committedDate": "2020-08-10T20:44:36Z", "message": "xds: add CertProviderSslContextProvider support"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1MjQ1Mzc2", "url": "https://github.com/grpc/grpc-java/pull/7309#pullrequestreview-465245376", "createdAt": "2020-08-11T16:43:23Z", "commit": {"oid": "731f8fe3c369601c86389a4bbd64c5d0641bde1b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjo0MzoyNFrOG_AWTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjo0MzoyNFrOG_AWTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxOTE4MA==", "bodyText": "Are these two cases exclusive?", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r468719180", "createdAt": "2020-08-11T16:43:24Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/internal/certprovider/CertProviderClientSslContextProvider.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.certprovider;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import io.envoyproxy.envoy.config.core.v3.Node;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext;\n+import io.grpc.netty.GrpcSslContexts;\n+import io.grpc.xds.Bootstrapper.CertificateProviderInfo;\n+import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;\n+import io.grpc.xds.internal.sds.trust.SdsTrustManagerFactory;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import java.security.cert.CertStoreException;\n+import java.security.cert.X509Certificate;\n+import java.util.Map;\n+\n+/** A client SslContext provider using CertificateProviderInstance to fetch secrets. */\n+final class CertProviderClientSslContextProvider extends CertProviderSslContextProvider {\n+\n+  private CertProviderClientSslContextProvider(\n+      Node node,\n+      Map<String, CertificateProviderInfo> certProviders,\n+      CommonTlsContext.CertificateProviderInstance certInstance,\n+      CommonTlsContext.CertificateProviderInstance rootCertInstance,\n+      CertificateValidationContext staticCertValidationContext,\n+      UpstreamTlsContext upstreamTlsContext,\n+      CertificateProviderStore certificateProviderStore) {\n+    super(\n+        node,\n+        certProviders,\n+        certInstance,\n+        rootCertInstance,\n+        staticCertValidationContext,\n+        upstreamTlsContext,\n+        certificateProviderStore);\n+  }\n+\n+  @Override\n+  public SslContextBuilder getSslContextBuilder(\n+          CertificateValidationContext certificateValidationContextdationContext)\n+      throws CertStoreException {\n+    SslContextBuilder sslContextBuilder =\n+        GrpcSslContexts.forClient()\n+            .trustManager(\n+                new SdsTrustManagerFactory(\n+                    savedTrustedRoots.toArray(new X509Certificate[0]),\n+                    certificateValidationContextdationContext));\n+    if (isMtls()) {\n+      sslContextBuilder.keyManager(savedKey, savedCertChain);\n+    }\n+    return sslContextBuilder;\n+  }\n+\n+  /** Creates CertProviderClientSslContextProvider. */\n+  static final class Factory {\n+    private static final Factory DEFAULT_INSTANCE =\n+        new Factory(CertificateProviderStore.getInstance());\n+    private final CertificateProviderStore certificateProviderStore;\n+\n+    Factory(CertificateProviderStore certificateProviderStore) {\n+      this.certificateProviderStore = certificateProviderStore;\n+    }\n+\n+    static Factory getInstance() {\n+      return DEFAULT_INSTANCE;\n+    }\n+\n+    CertProviderClientSslContextProvider getProvider(\n+        UpstreamTlsContext upstreamTlsContext,\n+        Node node,\n+        Map<String, CertificateProviderInfo> certProviders) {\n+      checkNotNull(upstreamTlsContext, \"upstreamTlsContext\");\n+      CommonTlsContext commonTlsContext = upstreamTlsContext.getCommonTlsContext();\n+      CommonTlsContext.CertificateProviderInstance rootCertInstance = null;\n+      CertificateValidationContext staticCertValidationContext = null;\n+      if (commonTlsContext.hasCombinedValidationContext()) {\n+        CombinedCertificateValidationContext combinedValidationContext =\n+            commonTlsContext.getCombinedValidationContext();\n+        if (combinedValidationContext.hasValidationContextCertificateProviderInstance()) {\n+          rootCertInstance =\n+              combinedValidationContext.getValidationContextCertificateProviderInstance();\n+        }\n+        if (combinedValidationContext.hasDefaultValidationContext()) {\n+          staticCertValidationContext = combinedValidationContext.getDefaultValidationContext();\n+        }\n+      } else if (commonTlsContext.hasValidationContextCertificateProviderInstance()) {\n+        rootCertInstance = commonTlsContext.getValidationContextCertificateProviderInstance();\n+      } else if (commonTlsContext.hasValidationContext()) {\n+        staticCertValidationContext = commonTlsContext.getValidationContext();\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "731f8fe3c369601c86389a4bbd64c5d0641bde1b"}, "originalPosition": 107}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1MjY5NjEz", "url": "https://github.com/grpc/grpc-java/pull/7309#pullrequestreview-465269613", "createdAt": "2020-08-11T17:15:07Z", "commit": {"oid": "731f8fe3c369601c86389a4bbd64c5d0641bde1b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNzoxNTowN1rOG_Bgwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNzozMTo0NFrOG_CHBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODczODI0Mg==", "bodyText": "You can define an abstract getLogger()  in SslContextProvider, then you will not be using different loggers for different methods.", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r468738242", "createdAt": "2020-08-11T17:15:07Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/DynamicSslContextProvider.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.sds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;\n+import io.grpc.Status;\n+import io.grpc.xds.EnvoyServerProtoData.BaseTlsContext;\n+import io.netty.handler.ssl.ApplicationProtocolConfig;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import java.io.IOException;\n+import java.security.cert.CertStoreException;\n+import java.security.cert.CertificateException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Executor;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.annotation.Nullable;\n+\n+/** Base class for dynamic {@link SslContextProvider}s. */\n+public abstract class DynamicSslContextProvider extends SslContextProvider {\n+\n+  private static final Logger logger = Logger.getLogger(DynamicSslContextProvider.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "731f8fe3c369601c86389a4bbd64c5d0641bde1b"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc0ODAzNg==", "bodyText": "Seems callback always comes with an executor. Is it possible to add getExecutor() method to Callback instead of defining CallbackPair?", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r468748036", "createdAt": "2020-08-11T17:31:44Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/DynamicSslContextProvider.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.sds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;\n+import io.grpc.Status;\n+import io.grpc.xds.EnvoyServerProtoData.BaseTlsContext;\n+import io.netty.handler.ssl.ApplicationProtocolConfig;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import java.io.IOException;\n+import java.security.cert.CertStoreException;\n+import java.security.cert.CertificateException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Executor;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.annotation.Nullable;\n+\n+/** Base class for dynamic {@link SslContextProvider}s. */\n+public abstract class DynamicSslContextProvider extends SslContextProvider {\n+\n+  private static final Logger logger = Logger.getLogger(DynamicSslContextProvider.class.getName());\n+\n+  protected final List<CallbackPair> pendingCallbacks = new ArrayList<>();\n+  @Nullable protected final CertificateValidationContext staticCertificateValidationContext;\n+  @Nullable protected SslContext sslContext;\n+\n+  protected DynamicSslContextProvider(\n+      BaseTlsContext tlsContext, CertificateValidationContext staticCertValidationContext) {\n+    super(tlsContext);\n+    this.staticCertificateValidationContext = staticCertValidationContext;\n+  }\n+\n+  @Nullable\n+  public SslContext getSslContext() {\n+    return sslContext;\n+  }\n+\n+  protected abstract CertificateValidationContext generateCertificateValidationContext();\n+\n+  /** Gets a server or client side SslContextBuilder. */\n+  protected abstract SslContextBuilder getSslContextBuilder(\n+          CertificateValidationContext certificateValidationContext)\n+      throws CertificateException, IOException, CertStoreException;\n+\n+  // this gets called only when requested secrets are ready...\n+  protected final void updateSslContext() {\n+    try {\n+      CertificateValidationContext localCertValidationContext =\n+          generateCertificateValidationContext();\n+      SslContextBuilder sslContextBuilder = getSslContextBuilder(localCertValidationContext);\n+      CommonTlsContext commonTlsContext = getCommonTlsContext();\n+      if (commonTlsContext != null && commonTlsContext.getAlpnProtocolsCount() > 0) {\n+        List<String> alpnList = commonTlsContext.getAlpnProtocolsList();\n+        ApplicationProtocolConfig apn =\n+            new ApplicationProtocolConfig(\n+                ApplicationProtocolConfig.Protocol.ALPN,\n+                ApplicationProtocolConfig.SelectorFailureBehavior.NO_ADVERTISE,\n+                ApplicationProtocolConfig.SelectedListenerFailureBehavior.ACCEPT,\n+                alpnList);\n+        sslContextBuilder.applicationProtocolConfig(apn);\n+      }\n+      SslContext sslContextCopy = sslContextBuilder.build();\n+      sslContext = sslContextCopy;\n+      makePendingCallbacks(sslContextCopy);\n+    } catch (CertificateException | IOException | CertStoreException e) {\n+      logger.log(Level.SEVERE, \"exception in updateSslContext\", e);\n+    }\n+  }\n+\n+  protected final void callPerformCallback(\n+      Callback callback, Executor executor, final SslContext sslContextCopy) {\n+    performCallback(\n+        new SslContextGetter() {\n+          @Override\n+          public SslContext get() {\n+            return sslContextCopy;\n+          }\n+        },\n+        callback,\n+        executor);\n+  }\n+\n+  @Override\n+  public final void addCallback(Callback callback, Executor executor) {\n+    checkNotNull(callback, \"callback\");\n+    checkNotNull(executor, \"executor\");\n+    // if there is a computed sslContext just send it\n+    SslContext sslContextCopy = sslContext;\n+    if (sslContextCopy != null) {\n+      callPerformCallback(callback, executor, sslContextCopy);\n+    } else {\n+      synchronized (pendingCallbacks) {\n+        pendingCallbacks.add(new CallbackPair(callback, executor));\n+      }\n+    }\n+  }\n+\n+  protected final void makePendingCallbacks(SslContext sslContextCopy) {\n+    synchronized (pendingCallbacks) {\n+      for (CallbackPair pair : pendingCallbacks) {\n+        callPerformCallback(pair.callback, pair.executor, sslContextCopy);\n+      }\n+      pendingCallbacks.clear();\n+    }\n+  }\n+\n+  /** Propagates error to all the callback receivers. */\n+  public final void onError(Status error) {\n+    synchronized (pendingCallbacks) {\n+      for (CallbackPair callbackPair : pendingCallbacks) {\n+        callbackPair.callback.onException(error.asException());\n+      }\n+      pendingCallbacks.clear();\n+    }\n+  }\n+\n+  protected static final class CallbackPair {\n+    private final Callback callback;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "731f8fe3c369601c86389a4bbd64c5d0641bde1b"}, "originalPosition": 138}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75c96d313c11f02691649777fff830f8d2e0d79b", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/75c96d313c11f02691649777fff830f8d2e0d79b", "committedDate": "2020-08-12T16:39:25Z", "message": "address review comment1"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3NDExNTE3", "url": "https://github.com/grpc/grpc-java/pull/7309#pullrequestreview-467411517", "createdAt": "2020-08-14T08:49:31Z", "commit": {"oid": "75c96d313c11f02691649777fff830f8d2e0d79b"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwODo0OTozMVrOHAszVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwOTozMzoyM1rOHAuI1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ5NjA4NA==", "bodyText": "nit: @VisibleForTesting.", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r470496084", "createdAt": "2020-08-14T08:49:31Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/internal/certprovider/CertProviderClientSslContextProvider.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.certprovider;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import io.envoyproxy.envoy.config.core.v3.Node;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext;\n+import io.grpc.netty.GrpcSslContexts;\n+import io.grpc.xds.Bootstrapper.CertificateProviderInfo;\n+import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;\n+import io.grpc.xds.internal.sds.trust.SdsTrustManagerFactory;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import java.security.cert.CertStoreException;\n+import java.security.cert.X509Certificate;\n+import java.util.Map;\n+\n+/** A client SslContext provider using CertificateProviderInstance to fetch secrets. */\n+final class CertProviderClientSslContextProvider extends CertProviderSslContextProvider {\n+\n+  private CertProviderClientSslContextProvider(\n+      Node node,\n+      Map<String, CertificateProviderInfo> certProviders,\n+      CommonTlsContext.CertificateProviderInstance certInstance,\n+      CommonTlsContext.CertificateProviderInstance rootCertInstance,\n+      CertificateValidationContext staticCertValidationContext,\n+      UpstreamTlsContext upstreamTlsContext,\n+      CertificateProviderStore certificateProviderStore) {\n+    super(\n+        node,\n+        certProviders,\n+        certInstance,\n+        rootCertInstance,\n+        staticCertValidationContext,\n+        upstreamTlsContext,\n+        certificateProviderStore);\n+  }\n+\n+  @Override\n+  public SslContextBuilder getSslContextBuilder(\n+          CertificateValidationContext certificateValidationContextdationContext)\n+      throws CertStoreException {\n+    SslContextBuilder sslContextBuilder =\n+        GrpcSslContexts.forClient()\n+            .trustManager(\n+                new SdsTrustManagerFactory(\n+                    savedTrustedRoots.toArray(new X509Certificate[0]),\n+                    certificateValidationContextdationContext));\n+    if (isMtls()) {\n+      sslContextBuilder.keyManager(savedKey, savedCertChain);\n+    }\n+    return sslContextBuilder;\n+  }\n+\n+  /** Creates CertProviderClientSslContextProvider. */\n+  static final class Factory {\n+    private static final Factory DEFAULT_INSTANCE =\n+        new Factory(CertificateProviderStore.getInstance());\n+    private final CertificateProviderStore certificateProviderStore;\n+\n+    Factory(CertificateProviderStore certificateProviderStore) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75c96d313c11f02691649777fff830f8d2e0d79b"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxMTQ5NQ==", "bodyText": "Why invoking callback here requires the lock while it doesn't in addCallback?", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r470511495", "createdAt": "2020-08-14T09:20:29Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/DynamicSslContextProvider.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.sds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;\n+import io.grpc.Status;\n+import io.grpc.xds.EnvoyServerProtoData.BaseTlsContext;\n+import io.netty.handler.ssl.ApplicationProtocolConfig;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import java.io.IOException;\n+import java.security.cert.CertStoreException;\n+import java.security.cert.CertificateException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.annotation.Nullable;\n+\n+/** Base class for dynamic {@link SslContextProvider}s. */\n+public abstract class DynamicSslContextProvider extends SslContextProvider {\n+\n+  private static final Logger logger = Logger.getLogger(DynamicSslContextProvider.class.getName());\n+\n+  protected final List<Callback> pendingCallbacks = new ArrayList<>();\n+  @Nullable protected final CertificateValidationContext staticCertificateValidationContext;\n+  @Nullable protected SslContext sslContext;\n+\n+  protected DynamicSslContextProvider(\n+      BaseTlsContext tlsContext, CertificateValidationContext staticCertValidationContext) {\n+    super(tlsContext);\n+    this.staticCertificateValidationContext = staticCertValidationContext;\n+  }\n+\n+  @Nullable\n+  public SslContext getSslContext() {\n+    return sslContext;\n+  }\n+\n+  protected abstract CertificateValidationContext generateCertificateValidationContext();\n+\n+  /** Gets a server or client side SslContextBuilder. */\n+  protected abstract SslContextBuilder getSslContextBuilder(\n+          CertificateValidationContext certificateValidationContext)\n+      throws CertificateException, IOException, CertStoreException;\n+\n+  // this gets called only when requested secrets are ready...\n+  protected final void updateSslContext() {\n+    try {\n+      CertificateValidationContext localCertValidationContext =\n+          generateCertificateValidationContext();\n+      SslContextBuilder sslContextBuilder = getSslContextBuilder(localCertValidationContext);\n+      CommonTlsContext commonTlsContext = getCommonTlsContext();\n+      if (commonTlsContext != null && commonTlsContext.getAlpnProtocolsCount() > 0) {\n+        List<String> alpnList = commonTlsContext.getAlpnProtocolsList();\n+        ApplicationProtocolConfig apn =\n+            new ApplicationProtocolConfig(\n+                ApplicationProtocolConfig.Protocol.ALPN,\n+                ApplicationProtocolConfig.SelectorFailureBehavior.NO_ADVERTISE,\n+                ApplicationProtocolConfig.SelectedListenerFailureBehavior.ACCEPT,\n+                alpnList);\n+        sslContextBuilder.applicationProtocolConfig(apn);\n+      }\n+      SslContext sslContextCopy = sslContextBuilder.build();\n+      sslContext = sslContextCopy;\n+      makePendingCallbacks(sslContextCopy);\n+    } catch (CertificateException | IOException | CertStoreException e) {\n+      logger.log(Level.SEVERE, \"exception in updateSslContext\", e);\n+    }\n+  }\n+\n+  protected final void callPerformCallback(\n+          Callback callback, final SslContext sslContextCopy) {\n+    performCallback(\n+        new SslContextGetter() {\n+          @Override\n+          public SslContext get() {\n+            return sslContextCopy;\n+          }\n+        },\n+        callback\n+    );\n+  }\n+\n+  @Override\n+  public final void addCallback(Callback callback) {\n+    checkNotNull(callback, \"callback\");\n+    // if there is a computed sslContext just send it\n+    SslContext sslContextCopy = sslContext;\n+    if (sslContextCopy != null) {\n+      callPerformCallback(callback, sslContextCopy);\n+    } else {\n+      synchronized (pendingCallbacks) {\n+        pendingCallbacks.add(callback);\n+      }\n+    }\n+  }\n+\n+  protected final void makePendingCallbacks(SslContext sslContextCopy) {\n+    synchronized (pendingCallbacks) {\n+      for (Callback callback : pendingCallbacks) {\n+        callPerformCallback(callback, sslContextCopy);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75c96d313c11f02691649777fff830f8d2e0d79b"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxMzg5Ng==", "bodyText": "The exception handling doesn't seem to be right, exceptions just go into a black hole.", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r470513896", "createdAt": "2020-08-14T09:25:24Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/DynamicSslContextProvider.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.sds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;\n+import io.grpc.Status;\n+import io.grpc.xds.EnvoyServerProtoData.BaseTlsContext;\n+import io.netty.handler.ssl.ApplicationProtocolConfig;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import java.io.IOException;\n+import java.security.cert.CertStoreException;\n+import java.security.cert.CertificateException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.annotation.Nullable;\n+\n+/** Base class for dynamic {@link SslContextProvider}s. */\n+public abstract class DynamicSslContextProvider extends SslContextProvider {\n+\n+  private static final Logger logger = Logger.getLogger(DynamicSslContextProvider.class.getName());\n+\n+  protected final List<Callback> pendingCallbacks = new ArrayList<>();\n+  @Nullable protected final CertificateValidationContext staticCertificateValidationContext;\n+  @Nullable protected SslContext sslContext;\n+\n+  protected DynamicSslContextProvider(\n+      BaseTlsContext tlsContext, CertificateValidationContext staticCertValidationContext) {\n+    super(tlsContext);\n+    this.staticCertificateValidationContext = staticCertValidationContext;\n+  }\n+\n+  @Nullable\n+  public SslContext getSslContext() {\n+    return sslContext;\n+  }\n+\n+  protected abstract CertificateValidationContext generateCertificateValidationContext();\n+\n+  /** Gets a server or client side SslContextBuilder. */\n+  protected abstract SslContextBuilder getSslContextBuilder(\n+          CertificateValidationContext certificateValidationContext)\n+      throws CertificateException, IOException, CertStoreException;\n+\n+  // this gets called only when requested secrets are ready...\n+  protected final void updateSslContext() {\n+    try {\n+      CertificateValidationContext localCertValidationContext =\n+          generateCertificateValidationContext();\n+      SslContextBuilder sslContextBuilder = getSslContextBuilder(localCertValidationContext);\n+      CommonTlsContext commonTlsContext = getCommonTlsContext();\n+      if (commonTlsContext != null && commonTlsContext.getAlpnProtocolsCount() > 0) {\n+        List<String> alpnList = commonTlsContext.getAlpnProtocolsList();\n+        ApplicationProtocolConfig apn =\n+            new ApplicationProtocolConfig(\n+                ApplicationProtocolConfig.Protocol.ALPN,\n+                ApplicationProtocolConfig.SelectorFailureBehavior.NO_ADVERTISE,\n+                ApplicationProtocolConfig.SelectedListenerFailureBehavior.ACCEPT,\n+                alpnList);\n+        sslContextBuilder.applicationProtocolConfig(apn);\n+      }\n+      SslContext sslContextCopy = sslContextBuilder.build();\n+      sslContext = sslContextCopy;\n+      makePendingCallbacks(sslContextCopy);\n+    } catch (CertificateException | IOException | CertStoreException e) {\n+      logger.log(Level.SEVERE, \"exception in updateSslContext\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75c96d313c11f02691649777fff830f8d2e0d79b"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxNzk3NA==", "bodyText": "Throwing such an exception here seem to be too late, and it's somewhat misleading. Callers of updateCertificate() and updateTrustedRoots() will never be the cause of this class being in invalid state. Instead, you should perform the check in the constructor.", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r470517974", "createdAt": "2020-08-14T09:33:23Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/internal/certprovider/CertProviderSslContextProvider.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.certprovider;\n+\n+import io.envoyproxy.envoy.config.core.v3.Node;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CertificateProviderInstance;\n+import io.grpc.xds.Bootstrapper.CertificateProviderInfo;\n+import io.grpc.xds.EnvoyServerProtoData.BaseTlsContext;\n+import io.grpc.xds.internal.sds.DynamicSslContextProvider;\n+import java.security.PrivateKey;\n+import java.security.cert.X509Certificate;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+\n+/** Base class for {@link CertProviderClientSslContextProvider}. */\n+abstract class CertProviderSslContextProvider extends DynamicSslContextProvider implements\n+    CertificateProvider.Watcher {\n+\n+  @Nullable private final CertificateProviderStore.Handle certHandle;\n+  @Nullable private final CertificateProviderStore.Handle rootCertHandle;\n+  @Nullable private final CertificateProviderInstance certInstance;\n+  @Nullable private final CertificateProviderInstance rootCertInstance;\n+  @Nullable protected PrivateKey savedKey;\n+  @Nullable protected List<X509Certificate> savedCertChain;\n+  @Nullable protected List<X509Certificate> savedTrustedRoots;\n+\n+  protected CertProviderSslContextProvider(\n+      Node node,\n+      Map<String, CertificateProviderInfo> certProviders,\n+      CertificateProviderInstance certInstance,\n+      CertificateProviderInstance rootCertInstance,\n+      CertificateValidationContext staticCertValidationContext,\n+      BaseTlsContext tlsContext,\n+      CertificateProviderStore certificateProviderStore) {\n+    super(tlsContext, staticCertValidationContext);\n+    this.certInstance = certInstance;\n+    this.rootCertInstance = rootCertInstance;\n+    String certInstanceName = null;\n+    if (certInstance != null && certInstance.isInitialized()) {\n+      certInstanceName = certInstance.getInstanceName();\n+      CertificateProviderInfo certProviderInstanceConfig =\n+          getCertProviderConfig(certProviders, certInstanceName);\n+      certHandle =\n+          certificateProviderStore.createOrGetProvider(\n+              certInstance.getCertificateName(),\n+              certProviderInstanceConfig.getPluginName(),\n+              certProviderInstanceConfig.getConfig(),\n+              this,\n+              true);\n+    } else {\n+      certHandle = null;\n+    }\n+    if (rootCertInstance != null\n+        && rootCertInstance.isInitialized()\n+        && !rootCertInstance.getInstanceName().equals(certInstanceName)) {\n+      CertificateProviderInfo certProviderInstanceConfig =\n+          getCertProviderConfig(certProviders, rootCertInstance.getInstanceName());\n+      rootCertHandle =\n+          certificateProviderStore.createOrGetProvider(\n+              rootCertInstance.getCertificateName(),\n+              certProviderInstanceConfig.getPluginName(),\n+              certProviderInstanceConfig.getConfig(),\n+              this,\n+              true);\n+    } else {\n+      rootCertHandle = null;\n+    }\n+  }\n+\n+  private CertificateProviderInfo getCertProviderConfig(\n+      Map<String, CertificateProviderInfo> certProviders, String pluginInstanceName) {\n+    return certProviders.get(pluginInstanceName);\n+  }\n+\n+  @Override\n+  public final void updateCertificate(PrivateKey key, List<X509Certificate> certChain) {\n+    savedKey = key;\n+    savedCertChain = certChain;\n+    updateSslContextWhenReady();\n+  }\n+\n+  @Override\n+  public final void updateTrustedRoots(List<X509Certificate> trustedRoots) {\n+    savedTrustedRoots = trustedRoots;\n+    updateSslContextWhenReady();\n+  }\n+\n+  private void updateSslContextWhenReady() {\n+    if (isMtls()) {\n+      if (savedKey != null && savedTrustedRoots != null) {\n+        updateSslContext();\n+        clearKeysAndCerts();\n+      }\n+    } else if (isClientSideTls()) {\n+      if (savedTrustedRoots != null) {\n+        updateSslContext();\n+        clearKeysAndCerts();\n+      }\n+    } else if (isServerSideTls()) {\n+      if (savedKey != null) {\n+        updateSslContext();\n+        clearKeysAndCerts();\n+      }\n+    } else {\n+      throw new IllegalStateException(\"Config is neither mTLS nor TLS!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75c96d313c11f02691649777fff830f8d2e0d79b"}, "originalPosition": 121}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17c55a8881bc4a8359340b6cff8e7244a61858d6", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/17c55a8881bc4a8359340b6cff8e7244a61858d6", "committedDate": "2020-08-14T18:05:29Z", "message": "address review comment: make sure exception is propagated to the watchers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb84bcd0a54ec3530cd601c801b17ebcc525b693", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/eb84bcd0a54ec3530cd601c801b17ebcc525b693", "committedDate": "2020-08-14T18:24:38Z", "message": "address review comment: move checks to constructor from update* methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cf81bc5072fde5062d1738c2a2f336f602b389f", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/2cf81bc5072fde5062d1738c2a2f336f602b389f", "committedDate": "2020-08-14T19:12:32Z", "message": "address review comment: make copy of the list to avoid making callbacks during a lock"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3OTA2MTI1", "url": "https://github.com/grpc/grpc-java/pull/7309#pullrequestreview-467906125", "createdAt": "2020-08-14T22:29:26Z", "commit": {"oid": "2cf81bc5072fde5062d1738c2a2f336f602b389f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMjoyOToyNlrOHBE5uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMjozOTo0M1rOHBFDzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5MDkzNg==", "bodyText": "Can savedKey be null? I think it's not required for client ssl context builder. Just not sure if it's true for MTLS.", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r470890936", "createdAt": "2020-08-14T22:29:26Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/internal/certprovider/CertProviderClientSslContextProvider.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.certprovider;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.envoyproxy.envoy.config.core.v3.Node;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext;\n+import io.grpc.netty.GrpcSslContexts;\n+import io.grpc.xds.Bootstrapper.CertificateProviderInfo;\n+import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;\n+import io.grpc.xds.internal.sds.trust.SdsTrustManagerFactory;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import java.security.cert.CertStoreException;\n+import java.security.cert.X509Certificate;\n+import java.util.Map;\n+\n+/** A client SslContext provider using CertificateProviderInstance to fetch secrets. */\n+final class CertProviderClientSslContextProvider extends CertProviderSslContextProvider {\n+\n+  private CertProviderClientSslContextProvider(\n+      Node node,\n+      Map<String, CertificateProviderInfo> certProviders,\n+      CommonTlsContext.CertificateProviderInstance certInstance,\n+      CommonTlsContext.CertificateProviderInstance rootCertInstance,\n+      CertificateValidationContext staticCertValidationContext,\n+      UpstreamTlsContext upstreamTlsContext,\n+      CertificateProviderStore certificateProviderStore) {\n+    super(\n+        node,\n+        certProviders,\n+        certInstance,\n+        checkNotNull(rootCertInstance, \"Client SSL requires rootCertInstance\"),\n+        staticCertValidationContext,\n+        upstreamTlsContext,\n+        certificateProviderStore);\n+  }\n+\n+  @Override\n+  public SslContextBuilder getSslContextBuilder(\n+          CertificateValidationContext certificateValidationContextdationContext)\n+      throws CertStoreException {\n+    SslContextBuilder sslContextBuilder =\n+        GrpcSslContexts.forClient()\n+            .trustManager(\n+                new SdsTrustManagerFactory(\n+                    savedTrustedRoots.toArray(new X509Certificate[0]),\n+                    certificateValidationContextdationContext));\n+    if (isMtls()) {\n+      sslContextBuilder.keyManager(savedKey, savedCertChain);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cf81bc5072fde5062d1738c2a2f336f602b389f"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5MzUxOQ==", "bodyText": "savedKey and savedCertChain are very likely null all the time, because even they are set by updateCertificate(),  updateCertificate() may  immediately and automatically trigger clearKeysAndCerts().", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r470893519", "createdAt": "2020-08-14T22:39:43Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/internal/certprovider/CertProviderClientSslContextProvider.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.certprovider;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.envoyproxy.envoy.config.core.v3.Node;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext.CombinedCertificateValidationContext;\n+import io.grpc.netty.GrpcSslContexts;\n+import io.grpc.xds.Bootstrapper.CertificateProviderInfo;\n+import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;\n+import io.grpc.xds.internal.sds.trust.SdsTrustManagerFactory;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import java.security.cert.CertStoreException;\n+import java.security.cert.X509Certificate;\n+import java.util.Map;\n+\n+/** A client SslContext provider using CertificateProviderInstance to fetch secrets. */\n+final class CertProviderClientSslContextProvider extends CertProviderSslContextProvider {\n+\n+  private CertProviderClientSslContextProvider(\n+      Node node,\n+      Map<String, CertificateProviderInfo> certProviders,\n+      CommonTlsContext.CertificateProviderInstance certInstance,\n+      CommonTlsContext.CertificateProviderInstance rootCertInstance,\n+      CertificateValidationContext staticCertValidationContext,\n+      UpstreamTlsContext upstreamTlsContext,\n+      CertificateProviderStore certificateProviderStore) {\n+    super(\n+        node,\n+        certProviders,\n+        certInstance,\n+        checkNotNull(rootCertInstance, \"Client SSL requires rootCertInstance\"),\n+        staticCertValidationContext,\n+        upstreamTlsContext,\n+        certificateProviderStore);\n+  }\n+\n+  @Override\n+  public SslContextBuilder getSslContextBuilder(\n+          CertificateValidationContext certificateValidationContextdationContext)\n+      throws CertStoreException {\n+    SslContextBuilder sslContextBuilder =\n+        GrpcSslContexts.forClient()\n+            .trustManager(\n+                new SdsTrustManagerFactory(\n+                    savedTrustedRoots.toArray(new X509Certificate[0]),\n+                    certificateValidationContextdationContext));\n+    if (isMtls()) {\n+      sslContextBuilder.keyManager(savedKey, savedCertChain);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cf81bc5072fde5062d1738c2a2f336f602b389f"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3OTEzNTI4", "url": "https://github.com/grpc/grpc-java/pull/7309#pullrequestreview-467913528", "createdAt": "2020-08-14T22:57:41Z", "commit": {"oid": "2cf81bc5072fde5062d1738c2a2f336f602b389f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMjo1Nzo0MVrOHBFTVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMjo1Nzo0MVrOHBFTVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5NzQ5NQ==", "bodyText": "How is sslContext synchronized between updateSslContext () and addCallback()? Are updateSslContext () and addCallback() run in the same thread or they are executed sequentially?", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r470897495", "createdAt": "2020-08-14T22:57:41Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/DynamicSslContextProvider.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.sds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;\n+import io.grpc.Status;\n+import io.grpc.xds.EnvoyServerProtoData.BaseTlsContext;\n+import io.netty.handler.ssl.ApplicationProtocolConfig;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import java.io.IOException;\n+import java.security.cert.CertStoreException;\n+import java.security.cert.CertificateException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+\n+/** Base class for dynamic {@link SslContextProvider}s. */\n+public abstract class DynamicSslContextProvider extends SslContextProvider {\n+\n+  protected final List<Callback> pendingCallbacks = new ArrayList<>();\n+  @Nullable protected final CertificateValidationContext staticCertificateValidationContext;\n+  @Nullable protected SslContext sslContext;\n+\n+  protected DynamicSslContextProvider(\n+      BaseTlsContext tlsContext, CertificateValidationContext staticCertValidationContext) {\n+    super(tlsContext);\n+    this.staticCertificateValidationContext = staticCertValidationContext;\n+  }\n+\n+  @Nullable\n+  public SslContext getSslContext() {\n+    return sslContext;\n+  }\n+\n+  protected abstract CertificateValidationContext generateCertificateValidationContext();\n+\n+  /** Gets a server or client side SslContextBuilder. */\n+  protected abstract SslContextBuilder getSslContextBuilder(\n+          CertificateValidationContext certificateValidationContext)\n+      throws CertificateException, IOException, CertStoreException;\n+\n+  // this gets called only when requested secrets are ready...\n+  protected final void updateSslContext() {\n+    try {\n+      CertificateValidationContext localCertValidationContext =\n+          generateCertificateValidationContext();\n+      SslContextBuilder sslContextBuilder = getSslContextBuilder(localCertValidationContext);\n+      CommonTlsContext commonTlsContext = getCommonTlsContext();\n+      if (commonTlsContext != null && commonTlsContext.getAlpnProtocolsCount() > 0) {\n+        List<String> alpnList = commonTlsContext.getAlpnProtocolsList();\n+        ApplicationProtocolConfig apn =\n+            new ApplicationProtocolConfig(\n+                ApplicationProtocolConfig.Protocol.ALPN,\n+                ApplicationProtocolConfig.SelectorFailureBehavior.NO_ADVERTISE,\n+                ApplicationProtocolConfig.SelectedListenerFailureBehavior.ACCEPT,\n+                alpnList);\n+        sslContextBuilder.applicationProtocolConfig(apn);\n+      }\n+      SslContext sslContextCopy = sslContextBuilder.build();\n+      sslContext = sslContextCopy;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cf81bc5072fde5062d1738c2a2f336f602b389f"}, "originalPosition": 79}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19465bfa3c2ff27208dc6c78c2d6ecef361231b4", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/19465bfa3c2ff27208dc6c78c2d6ecef361231b4", "committedDate": "2020-08-15T00:41:16Z", "message": "address review comment: make method protected final"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3OTMxODgx", "url": "https://github.com/grpc/grpc-java/pull/7309#pullrequestreview-467931881", "createdAt": "2020-08-15T00:38:32Z", "commit": {"oid": "2cf81bc5072fde5062d1738c2a2f336f602b389f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMDozODozMlrOHBGZ0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMDo0MzowM1rOHBGb8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxNTUzOQ==", "bodyText": "nit: s/localexecutor/localExecutor/g", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r470915539", "createdAt": "2020-08-15T00:38:32Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/SslContextProvider.java", "diffHunk": "@@ -100,14 +106,14 @@ public UpstreamTlsContext getUpstreamTlsContext() {\n    * Registers a callback on the given executor. The callback will run when SslContext becomes\n    * available or immediately if the result is already available.\n    */\n-  public abstract void addCallback(Callback callback, Executor executor);\n+  public abstract void addCallback(Callback callback);\n \n-  final void performCallback(\n-      final SslContextGetter sslContextGetter, final Callback callback, Executor executor) {\n+  protected final void performCallback(\n+          final SslContextGetter sslContextGetter, final Callback callback) {\n     checkNotNull(sslContextGetter, \"sslContextGetter\");\n     checkNotNull(callback, \"callback\");\n-    checkNotNull(executor, \"executor\");\n-    executor.execute(\n+    Executor localexecutor = callback.executor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cf81bc5072fde5062d1738c2a2f336f602b389f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxNjA4MA==", "bodyText": "Why a blocking queue does not work? I don't see any get/insert-to-middle operations needed.", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r470916080", "createdAt": "2020-08-15T00:43:03Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/DynamicSslContextProvider.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.sds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;\n+import io.grpc.Status;\n+import io.grpc.xds.EnvoyServerProtoData.BaseTlsContext;\n+import io.netty.handler.ssl.ApplicationProtocolConfig;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import java.io.IOException;\n+import java.security.cert.CertStoreException;\n+import java.security.cert.CertificateException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.annotation.Nullable;\n+\n+/** Base class for dynamic {@link SslContextProvider}s. */\n+public abstract class DynamicSslContextProvider extends SslContextProvider {\n+\n+  private static final Logger logger = Logger.getLogger(DynamicSslContextProvider.class.getName());\n+\n+  protected final List<Callback> pendingCallbacks = new ArrayList<>();\n+  @Nullable protected final CertificateValidationContext staticCertificateValidationContext;\n+  @Nullable protected SslContext sslContext;\n+\n+  protected DynamicSslContextProvider(\n+      BaseTlsContext tlsContext, CertificateValidationContext staticCertValidationContext) {\n+    super(tlsContext);\n+    this.staticCertificateValidationContext = staticCertValidationContext;\n+  }\n+\n+  @Nullable\n+  public SslContext getSslContext() {\n+    return sslContext;\n+  }\n+\n+  protected abstract CertificateValidationContext generateCertificateValidationContext();\n+\n+  /** Gets a server or client side SslContextBuilder. */\n+  protected abstract SslContextBuilder getSslContextBuilder(\n+          CertificateValidationContext certificateValidationContext)\n+      throws CertificateException, IOException, CertStoreException;\n+\n+  // this gets called only when requested secrets are ready...\n+  protected final void updateSslContext() {\n+    try {\n+      CertificateValidationContext localCertValidationContext =\n+          generateCertificateValidationContext();\n+      SslContextBuilder sslContextBuilder = getSslContextBuilder(localCertValidationContext);\n+      CommonTlsContext commonTlsContext = getCommonTlsContext();\n+      if (commonTlsContext != null && commonTlsContext.getAlpnProtocolsCount() > 0) {\n+        List<String> alpnList = commonTlsContext.getAlpnProtocolsList();\n+        ApplicationProtocolConfig apn =\n+            new ApplicationProtocolConfig(\n+                ApplicationProtocolConfig.Protocol.ALPN,\n+                ApplicationProtocolConfig.SelectorFailureBehavior.NO_ADVERTISE,\n+                ApplicationProtocolConfig.SelectedListenerFailureBehavior.ACCEPT,\n+                alpnList);\n+        sslContextBuilder.applicationProtocolConfig(apn);\n+      }\n+      SslContext sslContextCopy = sslContextBuilder.build();\n+      sslContext = sslContextCopy;\n+      makePendingCallbacks(sslContextCopy);\n+    } catch (CertificateException | IOException | CertStoreException e) {\n+      logger.log(Level.SEVERE, \"exception in updateSslContext\", e);\n+    }\n+  }\n+\n+  protected final void callPerformCallback(\n+          Callback callback, final SslContext sslContextCopy) {\n+    performCallback(\n+        new SslContextGetter() {\n+          @Override\n+          public SslContext get() {\n+            return sslContextCopy;\n+          }\n+        },\n+        callback\n+    );\n+  }\n+\n+  @Override\n+  public final void addCallback(Callback callback) {\n+    checkNotNull(callback, \"callback\");\n+    // if there is a computed sslContext just send it\n+    SslContext sslContextCopy = sslContext;\n+    if (sslContextCopy != null) {\n+      callPerformCallback(callback, sslContextCopy);\n+    } else {\n+      synchronized (pendingCallbacks) {\n+        pendingCallbacks.add(callback);\n+      }\n+    }\n+  }\n+\n+  protected final void makePendingCallbacks(SslContext sslContextCopy) {\n+    synchronized (pendingCallbacks) {\n+      for (Callback callback : pendingCallbacks) {\n+        callPerformCallback(callback, sslContextCopy);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxMTQ5NQ=="}, "originalCommit": {"oid": "75c96d313c11f02691649777fff830f8d2e0d79b"}, "originalPosition": 119}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "150efb5b58c4483654a6d33a81cbb7f0b59c1544", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/150efb5b58c4483654a6d33a81cbb7f0b59c1544", "committedDate": "2020-08-15T00:47:05Z", "message": "address review comment: remove unnecessary local var"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89145068c4076679907640f8dcd72460650a1f5d", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/89145068c4076679907640f8dcd72460650a1f5d", "committedDate": "2020-08-15T01:26:08Z", "message": "address review comment: fix race condition by using a proper lock"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3OTM3NTUz", "url": "https://github.com/grpc/grpc-java/pull/7309#pullrequestreview-467937553", "createdAt": "2020-08-15T01:39:02Z", "commit": {"oid": "89145068c4076679907640f8dcd72460650a1f5d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMTozOTowM1rOHBG0Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMTozOTowM1rOHBG0Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkyMjMwMg==", "bodyText": "This method still needs synchronized (pendingCallbacks) because onError() is calling it, and need be synchronized with addCallback().", "url": "https://github.com/grpc/grpc-java/pull/7309#discussion_r470922302", "createdAt": "2020-08-15T01:39:03Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/DynamicSslContextProvider.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.sds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;\n+import io.grpc.Status;\n+import io.grpc.xds.EnvoyServerProtoData.BaseTlsContext;\n+import io.netty.handler.ssl.ApplicationProtocolConfig;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import java.io.IOException;\n+import java.security.cert.CertStoreException;\n+import java.security.cert.CertificateException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+\n+/** Base class for dynamic {@link SslContextProvider}s. */\n+public abstract class DynamicSslContextProvider extends SslContextProvider {\n+\n+  protected final List<Callback> pendingCallbacks = new ArrayList<>();\n+  @Nullable protected final CertificateValidationContext staticCertificateValidationContext;\n+  @Nullable protected SslContext sslContext;\n+\n+  protected DynamicSslContextProvider(\n+      BaseTlsContext tlsContext, CertificateValidationContext staticCertValidationContext) {\n+    super(tlsContext);\n+    this.staticCertificateValidationContext = staticCertValidationContext;\n+  }\n+\n+  @Nullable\n+  public SslContext getSslContext() {\n+    return sslContext;\n+  }\n+\n+  protected abstract CertificateValidationContext generateCertificateValidationContext();\n+\n+  /** Gets a server or client side SslContextBuilder. */\n+  protected abstract SslContextBuilder getSslContextBuilder(\n+      CertificateValidationContext certificateValidationContext)\n+      throws CertificateException, IOException, CertStoreException;\n+\n+  // this gets called only when requested secrets are ready...\n+  protected final void updateSslContext() {\n+    try {\n+      CertificateValidationContext localCertValidationContext =\n+          generateCertificateValidationContext();\n+      SslContextBuilder sslContextBuilder = getSslContextBuilder(localCertValidationContext);\n+      CommonTlsContext commonTlsContext = getCommonTlsContext();\n+      if (commonTlsContext != null && commonTlsContext.getAlpnProtocolsCount() > 0) {\n+        List<String> alpnList = commonTlsContext.getAlpnProtocolsList();\n+        ApplicationProtocolConfig apn =\n+            new ApplicationProtocolConfig(\n+                ApplicationProtocolConfig.Protocol.ALPN,\n+                ApplicationProtocolConfig.SelectorFailureBehavior.NO_ADVERTISE,\n+                ApplicationProtocolConfig.SelectedListenerFailureBehavior.ACCEPT,\n+                alpnList);\n+        sslContextBuilder.applicationProtocolConfig(apn);\n+      }\n+      List<Callback> pendingCallbacksCopy = null;\n+      SslContext sslContextCopy = null;\n+      synchronized (pendingCallbacks) {\n+        sslContext = sslContextBuilder.build();\n+        sslContextCopy = sslContext;\n+        pendingCallbacksCopy = clonePendingCallbacksAndClear();\n+      }\n+      makePendingCallbacks(sslContextCopy, pendingCallbacksCopy);\n+    } catch (Exception e) {\n+      onError(Status.fromThrowable(e));\n+      throw new RuntimeException(e);\n+    }\n+  }\n+\n+  protected final void callPerformCallback(\n+          Callback callback, final SslContext sslContextCopy) {\n+    performCallback(\n+        new SslContextGetter() {\n+          @Override\n+          public SslContext get() {\n+            return sslContextCopy;\n+          }\n+        },\n+        callback\n+    );\n+  }\n+\n+  @Override\n+  public final void addCallback(Callback callback) {\n+    checkNotNull(callback, \"callback\");\n+    // if there is a computed sslContext just send it\n+    SslContext sslContextCopy = null;\n+    synchronized (pendingCallbacks) {\n+      if (sslContext != null) {\n+        sslContextCopy = sslContext;\n+      } else {\n+        pendingCallbacks.add(callback);\n+      }\n+    }\n+    if (sslContextCopy != null) {\n+      callPerformCallback(callback, sslContextCopy);\n+    }\n+  }\n+\n+  private final void makePendingCallbacks(\n+      SslContext sslContextCopy, List<Callback> pendingCallbacksCopy) {\n+    for (Callback callback : pendingCallbacksCopy) {\n+      callPerformCallback(callback, sslContextCopy);\n+    }\n+  }\n+\n+  /** Propagates error to all the callback receivers. */\n+  public final void onError(Status error) {\n+    for (Callback callback : clonePendingCallbacksAndClear()) {\n+      callback.onException(error.asException());\n+    }\n+  }\n+\n+  private List<Callback> clonePendingCallbacksAndClear() {\n+    List<Callback> copy = ImmutableList.copyOf(pendingCallbacks);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89145068c4076679907640f8dcd72460650a1f5d"}, "originalPosition": 137}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73edb794137b038b68b5a13aaed5a4cb0251e9f8", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/73edb794137b038b68b5a13aaed5a4cb0251e9f8", "committedDate": "2020-08-17T03:49:04Z", "message": "address review comment: synchronize on pendingCallbacks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4NjI2ODQw", "url": "https://github.com/grpc/grpc-java/pull/7309#pullrequestreview-468626840", "createdAt": "2020-08-17T16:43:23Z", "commit": {"oid": "73edb794137b038b68b5a13aaed5a4cb0251e9f8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4157, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}