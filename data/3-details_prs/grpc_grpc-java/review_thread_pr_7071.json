{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MTU4NjA5", "number": 7071, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzoxMToxOVrOEAmZ5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzoxMToxOVrOEAmZ5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDY0Njc4OnYy", "diffSide": "RIGHT", "path": "examples/src/main/java/io/grpc/examples/manualflowcontrol/ManualFlowControlServer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzoxMToxOVrOGb-1SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxODo0NTowNFrOGcoJtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk5NDE4NA==", "bodyText": "If you disable auto request before setting the onReadyHandler, then you don't need the explicit first request (next line). I mean, why you move the disable auto request to after setting onReadHandler?", "url": "https://github.com/grpc/grpc-java/pull/7071#discussion_r431994184", "createdAt": "2020-05-28T17:11:19Z", "author": {"login": "voidzcy"}, "path": "examples/src/main/java/io/grpc/examples/manualflowcontrol/ManualFlowControlServer.java", "diffHunk": "@@ -69,6 +66,11 @@ public void run() {\n         }\n         final OnReadyHandler onReadyHandler = new OnReadyHandler();\n         serverCallStreamObserver.setOnReadyHandler(onReadyHandler);\n+        // Set up manual flow control for the request stream. It feels backwards to configure the request\n+        // stream's flow control using the response stream's observer, but this is the way it is.\n+        serverCallStreamObserver.disableAutoRequest();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe48b56960f0f52d38e782ffd0666e8527121612"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxMzI1OA==", "bodyText": "Update: take my previous words back. The order of disabling auto request and setting onReadyHandler doesn't matter, they both happen before server starts processing messages. But I am still a bit confused why we need to manually request the first message? How the onReadyHandler invocation would be missed?", "url": "https://github.com/grpc/grpc-java/pull/7071#discussion_r432013258", "createdAt": "2020-05-28T17:44:40Z", "author": {"login": "voidzcy"}, "path": "examples/src/main/java/io/grpc/examples/manualflowcontrol/ManualFlowControlServer.java", "diffHunk": "@@ -69,6 +66,11 @@ public void run() {\n         }\n         final OnReadyHandler onReadyHandler = new OnReadyHandler();\n         serverCallStreamObserver.setOnReadyHandler(onReadyHandler);\n+        // Set up manual flow control for the request stream. It feels backwards to configure the request\n+        // stream's flow control using the response stream's observer, but this is the way it is.\n+        serverCallStreamObserver.disableAutoRequest();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk5NDE4NA=="}, "originalCommit": {"oid": "fe48b56960f0f52d38e782ffd0666e8527121612"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEyMzkyNw==", "bodyText": "The previous release of this code (in v1.29) had an (implicit) request(1) for the first message. When it was converted to disableAutoRequestWithInitial() the behavior was changed; to match the old behavior it should have used disableAutoRequestWithInitial(1) but it did disableAutoRequestWithInitial(0) instead. This was done due to a misunderstanding of the previous behavior.\nIf the RPC is already ready at this point, will onReady be called? The API isn't required to. The API says it is called when transitioning from false to true; so you technically have to have seen isReady() == false before onReady() is guaranteed.\nThat said, I do know this code currently works without the initial request(), because onReady is called unnecessarily. But I don't want to encourage depending on that behavior.", "url": "https://github.com/grpc/grpc-java/pull/7071#discussion_r432123927", "createdAt": "2020-05-28T21:07:17Z", "author": {"login": "ejona86"}, "path": "examples/src/main/java/io/grpc/examples/manualflowcontrol/ManualFlowControlServer.java", "diffHunk": "@@ -69,6 +66,11 @@ public void run() {\n         }\n         final OnReadyHandler onReadyHandler = new OnReadyHandler();\n         serverCallStreamObserver.setOnReadyHandler(onReadyHandler);\n+        // Set up manual flow control for the request stream. It feels backwards to configure the request\n+        // stream's flow control using the response stream's observer, but this is the way it is.\n+        serverCallStreamObserver.disableAutoRequest();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk5NDE4NA=="}, "originalCommit": {"oid": "fe48b56960f0f52d38e782ffd0666e8527121612"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY3MTE1Nw==", "bodyText": "Oh, I'm wrong. The previous implementation didn't do request(1) with manual flow control.", "url": "https://github.com/grpc/grpc-java/pull/7071#discussion_r432671157", "createdAt": "2020-05-29T18:45:04Z", "author": {"login": "ejona86"}, "path": "examples/src/main/java/io/grpc/examples/manualflowcontrol/ManualFlowControlServer.java", "diffHunk": "@@ -69,6 +66,11 @@ public void run() {\n         }\n         final OnReadyHandler onReadyHandler = new OnReadyHandler();\n         serverCallStreamObserver.setOnReadyHandler(onReadyHandler);\n+        // Set up manual flow control for the request stream. It feels backwards to configure the request\n+        // stream's flow control using the response stream's observer, but this is the way it is.\n+        serverCallStreamObserver.disableAutoRequest();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk5NDE4NA=="}, "originalCommit": {"oid": "fe48b56960f0f52d38e782ffd0666e8527121612"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2711, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}