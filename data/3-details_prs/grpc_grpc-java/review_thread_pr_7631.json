{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyNjY3ODcy", "number": 7631, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTo0MTo0MFrOE-z6TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTo1NjowMlrOE-0YaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Mjk3Njc3OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/EdsLoadBalancer2.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTo0MTo0MFrOH8KwRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMTozMTozMlrOH-8xuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1MjgwNQ==", "bodyText": "Should check resolvedAddresses  != null first?", "url": "https://github.com/grpc/grpc-java/pull/7631#discussion_r532852805", "createdAt": "2020-11-30T19:41:40Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/EdsLoadBalancer2.java", "diffHunk": "@@ -318,27 +269,7 @@ public void run() {\n             if (lb == null) {\n               lb = lbRegistry.getProvider(PRIORITY_POLICY_NAME).newLoadBalancer(lbHelper);\n             }\n-            if (localityPickingPolicy != null && endpointPickingPolicy != null) {\n-              PriorityLbConfig config = generatePriorityLbConfig(cluster, edsServiceName,\n-                  lrsServerName, localityPickingPolicy, endpointPickingPolicy, lbRegistry,\n-                  prioritizedLocalityWeights);\n-              // TODO(chengyuanzhang): to be deleted after migrating to use XdsClient API.\n-              Attributes attributes;\n-              if (lrsServerName != null) {\n-                attributes =\n-                    resolvedAddresses.getAttributes().toBuilder()\n-                        .set(XdsAttributes.ATTR_CLUSTER_SERVICE_LOAD_STATS_STORE, loadStatsStore)\n-                        .build();\n-              } else {\n-                attributes = resolvedAddresses.getAttributes();\n-              }\n-              lb.handleResolvedAddresses(\n-                  resolvedAddresses.toBuilder()\n-                      .setAddresses(endpointAddresses)\n-                      .setAttributes(attributes)\n-                      .setLoadBalancingPolicyConfig(config)\n-                      .build());\n-            }\n+            handleResourceUpdate();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f550af197b29692404c11da797c61cdde8aa0cb"}, "originalPosition": 241}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQwNzU0NQ==", "bodyText": "The instantiation of ChildLbState is always followed by an invocation of handleResolvedAddresses(). So when onChanged() is being executed, resolvedAddresses will always have value.", "url": "https://github.com/grpc/grpc-java/pull/7631#discussion_r534407545", "createdAt": "2020-12-02T18:57:23Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/EdsLoadBalancer2.java", "diffHunk": "@@ -318,27 +269,7 @@ public void run() {\n             if (lb == null) {\n               lb = lbRegistry.getProvider(PRIORITY_POLICY_NAME).newLoadBalancer(lbHelper);\n             }\n-            if (localityPickingPolicy != null && endpointPickingPolicy != null) {\n-              PriorityLbConfig config = generatePriorityLbConfig(cluster, edsServiceName,\n-                  lrsServerName, localityPickingPolicy, endpointPickingPolicy, lbRegistry,\n-                  prioritizedLocalityWeights);\n-              // TODO(chengyuanzhang): to be deleted after migrating to use XdsClient API.\n-              Attributes attributes;\n-              if (lrsServerName != null) {\n-                attributes =\n-                    resolvedAddresses.getAttributes().toBuilder()\n-                        .set(XdsAttributes.ATTR_CLUSTER_SERVICE_LOAD_STATS_STORE, loadStatsStore)\n-                        .build();\n-              } else {\n-                attributes = resolvedAddresses.getAttributes();\n-              }\n-              lb.handleResolvedAddresses(\n-                  resolvedAddresses.toBuilder()\n-                      .setAddresses(endpointAddresses)\n-                      .setAttributes(attributes)\n-                      .setLoadBalancingPolicyConfig(config)\n-                      .build());\n-            }\n+            handleResourceUpdate();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1MjgwNQ=="}, "originalCommit": {"oid": "3f550af197b29692404c11da797c61cdde8aa0cb"}, "originalPosition": 241}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc2OTUyOA==", "bodyText": "Well yes, it's invoked by switchingLoadBalancer.handleResolvedAddresses(). It's safe to check but that's alright.", "url": "https://github.com/grpc/grpc-java/pull/7631#discussion_r535769528", "createdAt": "2020-12-04T01:31:32Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/EdsLoadBalancer2.java", "diffHunk": "@@ -318,27 +269,7 @@ public void run() {\n             if (lb == null) {\n               lb = lbRegistry.getProvider(PRIORITY_POLICY_NAME).newLoadBalancer(lbHelper);\n             }\n-            if (localityPickingPolicy != null && endpointPickingPolicy != null) {\n-              PriorityLbConfig config = generatePriorityLbConfig(cluster, edsServiceName,\n-                  lrsServerName, localityPickingPolicy, endpointPickingPolicy, lbRegistry,\n-                  prioritizedLocalityWeights);\n-              // TODO(chengyuanzhang): to be deleted after migrating to use XdsClient API.\n-              Attributes attributes;\n-              if (lrsServerName != null) {\n-                attributes =\n-                    resolvedAddresses.getAttributes().toBuilder()\n-                        .set(XdsAttributes.ATTR_CLUSTER_SERVICE_LOAD_STATS_STORE, loadStatsStore)\n-                        .build();\n-              } else {\n-                attributes = resolvedAddresses.getAttributes();\n-              }\n-              lb.handleResolvedAddresses(\n-                  resolvedAddresses.toBuilder()\n-                      .setAddresses(endpointAddresses)\n-                      .setAttributes(attributes)\n-                      .setLoadBalancingPolicyConfig(config)\n-                      .build());\n-            }\n+            handleResourceUpdate();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1MjgwNQ=="}, "originalCommit": {"oid": "3f550af197b29692404c11da797c61cdde8aa0cb"}, "originalPosition": 241}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MzAwMjg4OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/ClusterImplLoadBalancer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTo0Nzo1OVrOH8LAgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxOToyMTo0M1rOH9qizg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1Njk2MQ==", "bodyText": "Document what this hierarchy does?", "url": "https://github.com/grpc/grpc-java/pull/7631#discussion_r532856961", "createdAt": "2020-11-30T19:47:59Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/ClusterImplLoadBalancer.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static io.grpc.xds.XdsSubchannelPickers.BUFFER_PICKER;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.Attributes;\n+import io.grpc.ClientStreamTracer;\n+import io.grpc.ClientStreamTracer.StreamInfo;\n+import io.grpc.ConnectivityState;\n+import io.grpc.InternalLogId;\n+import io.grpc.LoadBalancer;\n+import io.grpc.Metadata;\n+import io.grpc.Status;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.util.ForwardingClientStreamTracer;\n+import io.grpc.util.ForwardingLoadBalancerHelper;\n+import io.grpc.xds.ClusterImplLoadBalancerProvider.ClusterImplConfig;\n+import io.grpc.xds.EnvoyProtoData.DropOverload;\n+import io.grpc.xds.LoadStatsManager.LoadStatsStore;\n+import io.grpc.xds.ThreadSafeRandom.ThreadSafeRandomImpl;\n+import io.grpc.xds.XdsLogger.XdsLogLevel;\n+import io.grpc.xds.XdsNameResolverProvider.CallCounterProvider;\n+import io.grpc.xds.XdsSubchannelPickers.ErrorPicker;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Load balancer for cluster_impl_experimental LB policy. This LB policy is the child LB policy of\n+ * the priority_experimental LB policy and the parent LB policy of the weighted_target_experimental\n+ * LB policy in the xDS load balancing hierarchy.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f550af197b29692404c11da797c61cdde8aa0cb"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQyMjIyMg==", "bodyText": "Added a bit description.", "url": "https://github.com/grpc/grpc-java/pull/7631#discussion_r534422222", "createdAt": "2020-12-02T19:21:43Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/ClusterImplLoadBalancer.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static io.grpc.xds.XdsSubchannelPickers.BUFFER_PICKER;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.Attributes;\n+import io.grpc.ClientStreamTracer;\n+import io.grpc.ClientStreamTracer.StreamInfo;\n+import io.grpc.ConnectivityState;\n+import io.grpc.InternalLogId;\n+import io.grpc.LoadBalancer;\n+import io.grpc.Metadata;\n+import io.grpc.Status;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.util.ForwardingClientStreamTracer;\n+import io.grpc.util.ForwardingLoadBalancerHelper;\n+import io.grpc.xds.ClusterImplLoadBalancerProvider.ClusterImplConfig;\n+import io.grpc.xds.EnvoyProtoData.DropOverload;\n+import io.grpc.xds.LoadStatsManager.LoadStatsStore;\n+import io.grpc.xds.ThreadSafeRandom.ThreadSafeRandomImpl;\n+import io.grpc.xds.XdsLogger.XdsLogLevel;\n+import io.grpc.xds.XdsNameResolverProvider.CallCounterProvider;\n+import io.grpc.xds.XdsSubchannelPickers.ErrorPicker;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Load balancer for cluster_impl_experimental LB policy. This LB policy is the child LB policy of\n+ * the priority_experimental LB policy and the parent LB policy of the weighted_target_experimental\n+ * LB policy in the xDS load balancing hierarchy.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1Njk2MQ=="}, "originalCommit": {"oid": "3f550af197b29692404c11da797c61cdde8aa0cb"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MzA1Mzg1OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/ClusterImplLoadBalancer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTo1NjowMlrOH8LiOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxOToyMTozMFrOH9qiRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg2NTU5Mg==", "bodyText": "Is that possible maxConcurrentRequests changes from non-null to null?", "url": "https://github.com/grpc/grpc-java/pull/7631#discussion_r532865592", "createdAt": "2020-11-30T19:56:02Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/ClusterImplLoadBalancer.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static io.grpc.xds.XdsSubchannelPickers.BUFFER_PICKER;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.Attributes;\n+import io.grpc.ClientStreamTracer;\n+import io.grpc.ClientStreamTracer.StreamInfo;\n+import io.grpc.ConnectivityState;\n+import io.grpc.InternalLogId;\n+import io.grpc.LoadBalancer;\n+import io.grpc.Metadata;\n+import io.grpc.Status;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.util.ForwardingClientStreamTracer;\n+import io.grpc.util.ForwardingLoadBalancerHelper;\n+import io.grpc.xds.ClusterImplLoadBalancerProvider.ClusterImplConfig;\n+import io.grpc.xds.EnvoyProtoData.DropOverload;\n+import io.grpc.xds.LoadStatsManager.LoadStatsStore;\n+import io.grpc.xds.ThreadSafeRandom.ThreadSafeRandomImpl;\n+import io.grpc.xds.XdsLogger.XdsLogLevel;\n+import io.grpc.xds.XdsNameResolverProvider.CallCounterProvider;\n+import io.grpc.xds.XdsSubchannelPickers.ErrorPicker;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Load balancer for cluster_impl_experimental LB policy. This LB policy is the child LB policy of\n+ * the priority_experimental LB policy and the parent LB policy of the weighted_target_experimental\n+ * LB policy in the xDS load balancing hierarchy.\n+ */\n+final class ClusterImplLoadBalancer extends LoadBalancer {\n+\n+  @VisibleForTesting\n+  static final long DEFAULT_PER_CLUSTER_MAX_CONCURRENT_REQUESTS = 1024L;\n+  @VisibleForTesting\n+  static boolean enableCircuitBreaking =\n+      Boolean.parseBoolean(System.getenv(\"GRPC_XDS_EXPERIMENTAL_CIRCUIT_BREAKING\"));\n+\n+  private final XdsLogger logger;\n+  private final Helper helper;\n+  private final ThreadSafeRandom random;\n+  // The following fields are effectively final.\n+  private String cluster;\n+  @Nullable\n+  private String edsServiceName;\n+  private ObjectPool<XdsClient> xdsClientPool;\n+  private XdsClient xdsClient;\n+  private CallCounterProvider callCounterProvider;\n+  private LoadStatsStore loadStatsStore;\n+  private RequestLimitingLbHelper childLbHelper;\n+  private LoadBalancer childLb;\n+\n+  ClusterImplLoadBalancer(Helper helper) {\n+    this(helper, ThreadSafeRandomImpl.instance);\n+  }\n+\n+  ClusterImplLoadBalancer(Helper helper, ThreadSafeRandom random) {\n+    this.helper = checkNotNull(helper, \"helper\");\n+    this.random = checkNotNull(random, \"random\");\n+    InternalLogId logId = InternalLogId.allocate(\"cluster-impl-lb\", helper.getAuthority());\n+    logger = XdsLogger.withLogId(logId);\n+    logger.log(XdsLogLevel.INFO, \"Created\");\n+  }\n+\n+  @Override\n+  public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n+    logger.log(XdsLogLevel.DEBUG, \"Received resolution result: {0}\", resolvedAddresses);\n+    Attributes attributes = resolvedAddresses.getAttributes();\n+    if (xdsClientPool == null) {\n+      xdsClientPool = attributes.get(XdsAttributes.XDS_CLIENT_POOL);\n+      xdsClient = xdsClientPool.getObject();\n+    }\n+    if (callCounterProvider == null) {\n+      callCounterProvider = attributes.get(XdsAttributes.CALL_COUNTER_PROVIDER);\n+    }\n+    ClusterImplConfig config =\n+        (ClusterImplConfig) resolvedAddresses.getLoadBalancingPolicyConfig();\n+    if (cluster == null) {\n+      cluster = config.cluster;\n+      edsServiceName = config.edsServiceName;\n+      childLbHelper = new RequestLimitingLbHelper(\n+          callCounterProvider.getOrCreate(config.cluster, config.edsServiceName));\n+      childLb = config.childPolicy.getProvider().newLoadBalancer(childLbHelper);\n+      // Assume load report server does not change throughout cluster lifetime.\n+      if (config.lrsServerName != null) {\n+        if (config.lrsServerName.isEmpty()) {\n+          loadStatsStore = xdsClient.addClientStats(cluster, edsServiceName);\n+        } else {\n+          logger.log(XdsLogLevel.WARNING, \"Can only report load to the same management server\");\n+        }\n+      }\n+    }\n+    childLbHelper.updateDropPolicies(config.dropCategories);\n+    if (config.maxConcurrentRequests != null) {\n+      childLbHelper.updateMaxConcurrentRequests(config.maxConcurrentRequests);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f550af197b29692404c11da797c61cdde8aa0cb"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQyMjA4Nw==", "bodyText": "Yeah, the code should be able to handle such updates. Fixed.", "url": "https://github.com/grpc/grpc-java/pull/7631#discussion_r534422087", "createdAt": "2020-12-02T19:21:30Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/ClusterImplLoadBalancer.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static io.grpc.xds.XdsSubchannelPickers.BUFFER_PICKER;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.Attributes;\n+import io.grpc.ClientStreamTracer;\n+import io.grpc.ClientStreamTracer.StreamInfo;\n+import io.grpc.ConnectivityState;\n+import io.grpc.InternalLogId;\n+import io.grpc.LoadBalancer;\n+import io.grpc.Metadata;\n+import io.grpc.Status;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.util.ForwardingClientStreamTracer;\n+import io.grpc.util.ForwardingLoadBalancerHelper;\n+import io.grpc.xds.ClusterImplLoadBalancerProvider.ClusterImplConfig;\n+import io.grpc.xds.EnvoyProtoData.DropOverload;\n+import io.grpc.xds.LoadStatsManager.LoadStatsStore;\n+import io.grpc.xds.ThreadSafeRandom.ThreadSafeRandomImpl;\n+import io.grpc.xds.XdsLogger.XdsLogLevel;\n+import io.grpc.xds.XdsNameResolverProvider.CallCounterProvider;\n+import io.grpc.xds.XdsSubchannelPickers.ErrorPicker;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Load balancer for cluster_impl_experimental LB policy. This LB policy is the child LB policy of\n+ * the priority_experimental LB policy and the parent LB policy of the weighted_target_experimental\n+ * LB policy in the xDS load balancing hierarchy.\n+ */\n+final class ClusterImplLoadBalancer extends LoadBalancer {\n+\n+  @VisibleForTesting\n+  static final long DEFAULT_PER_CLUSTER_MAX_CONCURRENT_REQUESTS = 1024L;\n+  @VisibleForTesting\n+  static boolean enableCircuitBreaking =\n+      Boolean.parseBoolean(System.getenv(\"GRPC_XDS_EXPERIMENTAL_CIRCUIT_BREAKING\"));\n+\n+  private final XdsLogger logger;\n+  private final Helper helper;\n+  private final ThreadSafeRandom random;\n+  // The following fields are effectively final.\n+  private String cluster;\n+  @Nullable\n+  private String edsServiceName;\n+  private ObjectPool<XdsClient> xdsClientPool;\n+  private XdsClient xdsClient;\n+  private CallCounterProvider callCounterProvider;\n+  private LoadStatsStore loadStatsStore;\n+  private RequestLimitingLbHelper childLbHelper;\n+  private LoadBalancer childLb;\n+\n+  ClusterImplLoadBalancer(Helper helper) {\n+    this(helper, ThreadSafeRandomImpl.instance);\n+  }\n+\n+  ClusterImplLoadBalancer(Helper helper, ThreadSafeRandom random) {\n+    this.helper = checkNotNull(helper, \"helper\");\n+    this.random = checkNotNull(random, \"random\");\n+    InternalLogId logId = InternalLogId.allocate(\"cluster-impl-lb\", helper.getAuthority());\n+    logger = XdsLogger.withLogId(logId);\n+    logger.log(XdsLogLevel.INFO, \"Created\");\n+  }\n+\n+  @Override\n+  public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n+    logger.log(XdsLogLevel.DEBUG, \"Received resolution result: {0}\", resolvedAddresses);\n+    Attributes attributes = resolvedAddresses.getAttributes();\n+    if (xdsClientPool == null) {\n+      xdsClientPool = attributes.get(XdsAttributes.XDS_CLIENT_POOL);\n+      xdsClient = xdsClientPool.getObject();\n+    }\n+    if (callCounterProvider == null) {\n+      callCounterProvider = attributes.get(XdsAttributes.CALL_COUNTER_PROVIDER);\n+    }\n+    ClusterImplConfig config =\n+        (ClusterImplConfig) resolvedAddresses.getLoadBalancingPolicyConfig();\n+    if (cluster == null) {\n+      cluster = config.cluster;\n+      edsServiceName = config.edsServiceName;\n+      childLbHelper = new RequestLimitingLbHelper(\n+          callCounterProvider.getOrCreate(config.cluster, config.edsServiceName));\n+      childLb = config.childPolicy.getProvider().newLoadBalancer(childLbHelper);\n+      // Assume load report server does not change throughout cluster lifetime.\n+      if (config.lrsServerName != null) {\n+        if (config.lrsServerName.isEmpty()) {\n+          loadStatsStore = xdsClient.addClientStats(cluster, edsServiceName);\n+        } else {\n+          logger.log(XdsLogLevel.WARNING, \"Can only report load to the same management server\");\n+        }\n+      }\n+    }\n+    childLbHelper.updateDropPolicies(config.dropCategories);\n+    if (config.maxConcurrentRequests != null) {\n+      childLbHelper.updateMaxConcurrentRequests(config.maxConcurrentRequests);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg2NTU5Mg=="}, "originalCommit": {"oid": "3f550af197b29692404c11da797c61cdde8aa0cb"}, "originalPosition": 116}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2303, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}