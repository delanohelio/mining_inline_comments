{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1NTU3MzQ2", "number": 6718, "title": "xds: support for xDS data types needed for server side SDS support", "bodyText": "first part that includes xDS data definitions corresponding to protos", "createdAt": "2020-02-14T20:18:32Z", "url": "https://github.com/grpc/grpc-java/pull/6718", "merged": true, "mergeCommit": {"oid": "26def7f694974874583a3405c73244965133b70d"}, "closed": true, "closedAt": "2020-02-19T17:07:09Z", "author": {"login": "sanjaypujare"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcEVYE4gH2gAyMzc1NTU3MzQ2OjU1N2Q0NzM2MWJmOWU3NTI4ZDAzNTA3NWQ2YmE2ZGIzYTEzZWE5MjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcF8AnmgFqTM2MTM4OTM2Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "557d47361bf9e7528d035075d6ba6db3a13ea925", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/557d47361bf9e7528d035075d6ba6db3a13ea925", "committedDate": "2020-02-14T20:16:05Z", "message": "xds: add server side support for SDS"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjMwNzgx", "url": "https://github.com/grpc/grpc-java/pull/6718#pullrequestreview-359230781", "createdAt": "2020-02-14T21:31:54Z", "commit": {"oid": "557d47361bf9e7528d035075d6ba6db3a13ea925"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMTozMTo1NFrOFqEOiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwMjo0MDoyNlrOFqHxzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY1Mzc2OQ==", "bodyText": "if we have a separate class otherwise ignore for shake of consistency.\nxds is using this pattern, but i think better way is having Converters class that converts proto to data object. the data class is completely not depending on the proto. when newer generation of proto is released, we just need to add new converter class , and mark deprecated for the old class.", "url": "https://github.com/grpc/grpc-java/pull/6718#discussion_r379653769", "createdAt": "2020-02-14T21:31:54Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/EnvoyProtoData.java", "diffHunk": "@@ -339,4 +339,270 @@ public String toString() {\n           .toString();\n     }\n   }\n+\n+  static final class CidrRange {\n+    private final String addressPrefix;\n+    private final int prefixLen;\n+\n+    public CidrRange(String addressPrefix, int prefixLen) {\n+      this.addressPrefix = addressPrefix;\n+      this.prefixLen = prefixLen;\n+    }\n+\n+    static CidrRange fromEnvoyProtoCidrRange(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "557d47361bf9e7528d035075d6ba6db3a13ea925"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY1NDAzMw==", "bodyText": "can we use immutable data structure? UnmodifiableCollection or ImmutableCollection", "url": "https://github.com/grpc/grpc-java/pull/6718#discussion_r379654033", "createdAt": "2020-02-14T21:32:38Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/EnvoyProtoData.java", "diffHunk": "@@ -339,4 +339,270 @@ public String toString() {\n           .toString();\n     }\n   }\n+\n+  static final class CidrRange {\n+    private final String addressPrefix;\n+    private final int prefixLen;\n+\n+    public CidrRange(String addressPrefix, int prefixLen) {\n+      this.addressPrefix = addressPrefix;\n+      this.prefixLen = prefixLen;\n+    }\n+\n+    static CidrRange fromEnvoyProtoCidrRange(\n+        io.envoyproxy.envoy.api.v2.core.CidrRange proto) {\n+      return new CidrRange(proto.getAddressPrefix(), proto.getPrefixLen().getValue());\n+    }\n+\n+    public String getAddressPrefix() {\n+      return addressPrefix;\n+    }\n+\n+    public int getPrefixLen() {\n+      return prefixLen;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      CidrRange cidrRange = (CidrRange) o;\n+      return prefixLen == cidrRange.prefixLen\n+          && java.util.Objects.equals(addressPrefix, cidrRange.addressPrefix);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return java.util.Objects.hash(addressPrefix, prefixLen);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return \"CidrRange{\"\n+          + \"addressPrefix='\" + addressPrefix + '\\''\n+          + \", prefixLen=\" + prefixLen\n+          + '}';\n+    }\n+  }\n+\n+  /**\n+   * Corresponds to Envoy proto message\n+   * {@link io.envoyproxy.envoy.api.v2.listener.FilterChainMatch}.\n+   */\n+  static final class FilterChainMatch {\n+    private final int destinationPort;\n+    private final List<CidrRange> prefixRanges;\n+    private final List<String> applicationProtocols;\n+\n+    public FilterChainMatch(int destinationPort,\n+        List<CidrRange> prefixRanges, List<String> applicationProtocols) {\n+      this.destinationPort = destinationPort;\n+      this.prefixRanges = prefixRanges;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "557d47361bf9e7528d035075d6ba6db3a13ea925"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY1NTI2NA==", "bodyText": "can this have better name? reading this will cause a lot of confusion. but i can understand if we can't come up with better name because this is too generic.", "url": "https://github.com/grpc/grpc-java/pull/6718#discussion_r379655264", "createdAt": "2020-02-14T21:35:48Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/EnvoyProtoData.java", "diffHunk": "@@ -339,4 +339,270 @@ public String toString() {\n           .toString();\n     }\n   }\n+\n+  static final class CidrRange {\n+    private final String addressPrefix;\n+    private final int prefixLen;\n+\n+    public CidrRange(String addressPrefix, int prefixLen) {\n+      this.addressPrefix = addressPrefix;\n+      this.prefixLen = prefixLen;\n+    }\n+\n+    static CidrRange fromEnvoyProtoCidrRange(\n+        io.envoyproxy.envoy.api.v2.core.CidrRange proto) {\n+      return new CidrRange(proto.getAddressPrefix(), proto.getPrefixLen().getValue());\n+    }\n+\n+    public String getAddressPrefix() {\n+      return addressPrefix;\n+    }\n+\n+    public int getPrefixLen() {\n+      return prefixLen;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      CidrRange cidrRange = (CidrRange) o;\n+      return prefixLen == cidrRange.prefixLen\n+          && java.util.Objects.equals(addressPrefix, cidrRange.addressPrefix);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return java.util.Objects.hash(addressPrefix, prefixLen);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return \"CidrRange{\"\n+          + \"addressPrefix='\" + addressPrefix + '\\''\n+          + \", prefixLen=\" + prefixLen\n+          + '}';\n+    }\n+  }\n+\n+  /**\n+   * Corresponds to Envoy proto message\n+   * {@link io.envoyproxy.envoy.api.v2.listener.FilterChainMatch}.\n+   */\n+  static final class FilterChainMatch {\n+    private final int destinationPort;\n+    private final List<CidrRange> prefixRanges;\n+    private final List<String> applicationProtocols;\n+\n+    public FilterChainMatch(int destinationPort,\n+        List<CidrRange> prefixRanges, List<String> applicationProtocols) {\n+      this.destinationPort = destinationPort;\n+      this.prefixRanges = prefixRanges;\n+      this.applicationProtocols = applicationProtocols;\n+    }\n+\n+    static FilterChainMatch fromEnvoyProtoFilterChainMatch(\n+        io.envoyproxy.envoy.api.v2.listener.FilterChainMatch proto) {\n+      List<CidrRange> prefixRanges = new ArrayList<>();\n+      for (io.envoyproxy.envoy.api.v2.core.CidrRange range : proto.getPrefixRangesList()) {\n+        prefixRanges.add(CidrRange.fromEnvoyProtoCidrRange(range));\n+      }\n+      List<String> applicationProtocols = new ArrayList<>();\n+      for (String appProtocol  : proto.getApplicationProtocolsList()) {\n+        applicationProtocols.add(appProtocol);\n+      }\n+      return new FilterChainMatch(\n+          proto.getDestinationPort().getValue(),\n+          prefixRanges,\n+          applicationProtocols);\n+    }\n+\n+    public int getDestinationPort() {\n+      return destinationPort;\n+    }\n+\n+    public List<CidrRange> getPrefixRanges() {\n+      return prefixRanges;\n+    }\n+\n+    public List<String> getApplicationProtocols() {\n+      return applicationProtocols;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      FilterChainMatch that = (FilterChainMatch) o;\n+      return destinationPort == that.destinationPort\n+          && java.util.Objects.equals(prefixRanges, that.prefixRanges)\n+          && java.util.Objects.equals(applicationProtocols, that.applicationProtocols);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return java.util.Objects.hash(destinationPort, prefixRanges, applicationProtocols);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return \"FilterChainMatch{\"\n+          + \"destinationPort=\" + destinationPort\n+          + \", prefixRanges=\" + prefixRanges\n+          + \", applicationProtocols=\" + applicationProtocols\n+          + '}';\n+    }\n+  }\n+\n+  /**\n+   * Corresponds to Envoy proto message {@link io.envoyproxy.envoy.api.v2.listener.FilterChain}.\n+   */\n+  static final class FilterChain {\n+    private final FilterChainMatch filterChainMatch;\n+    // TODO(sanjaypujare): remove dependency on envoy data type along with rest of the code.\n+    private final io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext downstreamTlsContext;\n+\n+\n+    public FilterChain(FilterChainMatch filterChainMatch,\n+        io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext downstreamTlsContext) {\n+      this.filterChainMatch = filterChainMatch;\n+      this.downstreamTlsContext = downstreamTlsContext;\n+    }\n+\n+    static FilterChain fromEnvoyProtoFilterChain(\n+        io.envoyproxy.envoy.api.v2.listener.FilterChain proto) {\n+      return new FilterChain(\n+          FilterChainMatch.fromEnvoyProtoFilterChainMatch(proto.getFilterChainMatch()),\n+          proto.getTlsContext()\n+      );\n+    }\n+\n+    public FilterChainMatch getFilterChainMatch() {\n+      return filterChainMatch;\n+    }\n+\n+    public io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext getDownstreamTlsContext() {\n+      return downstreamTlsContext;\n+    }\n+\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      FilterChain that = (FilterChain) o;\n+      return java.util.Objects.equals(filterChainMatch, that.filterChainMatch)\n+          && java.util.Objects.equals(downstreamTlsContext, that.downstreamTlsContext);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return java.util.Objects.hash(filterChainMatch, downstreamTlsContext);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return \"FilterChain{\"\n+          + \"filterChainMatch=\" + filterChainMatch\n+          + \", downstreamTlsContext=\" + downstreamTlsContext\n+          + '}';\n+    }\n+  }\n+\n+  /**\n+   * Corresponds to Envoy proto message {@link io.envoyproxy.envoy.api.v2.Listener} & related\n+   * classes.\n+   */\n+  static final class Listener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "557d47361bf9e7528d035075d6ba6db3a13ea925"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY1NTcyNw==", "bodyText": "can we have separate ProtoData for sds? i don't think put everything here is a good idea especially the xds proto is huge and complex (and they have many many proto files. i am not saying they need to be 1:1 but some sort of hierarchy would be nice).", "url": "https://github.com/grpc/grpc-java/pull/6718#discussion_r379655727", "createdAt": "2020-02-14T21:36:55Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/EnvoyProtoData.java", "diffHunk": "@@ -339,4 +339,270 @@ public String toString() {\n           .toString();\n     }\n   }\n+\n+  static final class CidrRange {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "557d47361bf9e7528d035075d6ba6db3a13ea925"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTcxMTk1MQ==", "bodyText": "above tests? you mean tests in SdsSslContextProviderTest/ScretVolumnSslContextProviderTest?", "url": "https://github.com/grpc/grpc-java/pull/6718#discussion_r379711951", "createdAt": "2020-02-15T02:40:26Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/internal/sds/CommonTlsContextTestsUtil.java", "diffHunk": "@@ -134,4 +115,27 @@ static CommonTlsContext buildCommonTlsContextWithAdditionalValues(\n     }\n     return builder.build();\n   }\n+\n+  /**\n+   * Helper method to build DownstreamTlsContext for above tests. Called from other classes as well.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "557d47361bf9e7528d035075d6ba6db3a13ea925"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b2f9b6b4607cfa969ca25ce3947d002310dccec", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/5b2f9b6b4607cfa969ca25ce3947d002310dccec", "committedDate": "2020-02-17T03:13:47Z", "message": "address review comments and adjust access to ctors"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNTc3ODEy", "url": "https://github.com/grpc/grpc-java/pull/6718#pullrequestreview-360577812", "createdAt": "2020-02-18T18:38:13Z", "commit": {"oid": "5b2f9b6b4607cfa969ca25ce3947d002310dccec"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODozODoxM1rOFrN2Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODozODoxM1rOFrN2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1OTk1OQ==", "bodyText": "This seems to be a helper method only. Should be private and name it to something different than fromEnvoyProtoXXX. Here fromEnvoyProtoXXX methods are used as factory methods to create converted data objects.\nBtw, since this helper method is only used once and it's not complex, it can be inlined instead of being a standalone method.", "url": "https://github.com/grpc/grpc-java/pull/6718#discussion_r380859959", "createdAt": "2020-02-18T18:38:13Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/EnvoyProtoData.java", "diffHunk": "@@ -339,4 +339,271 @@ public String toString() {\n           .toString();\n     }\n   }\n+\n+  static final class CidrRange {\n+    private final String addressPrefix;\n+    private final int prefixLen;\n+\n+    @VisibleForTesting\n+    CidrRange(String addressPrefix, int prefixLen) {\n+      this.addressPrefix = addressPrefix;\n+      this.prefixLen = prefixLen;\n+    }\n+\n+    static CidrRange fromEnvoyProtoCidrRange(\n+        io.envoyproxy.envoy.api.v2.core.CidrRange proto) {\n+      return new CidrRange(proto.getAddressPrefix(), proto.getPrefixLen().getValue());\n+    }\n+\n+    public String getAddressPrefix() {\n+      return addressPrefix;\n+    }\n+\n+    public int getPrefixLen() {\n+      return prefixLen;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      CidrRange cidrRange = (CidrRange) o;\n+      return prefixLen == cidrRange.prefixLen\n+          && java.util.Objects.equals(addressPrefix, cidrRange.addressPrefix);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return java.util.Objects.hash(addressPrefix, prefixLen);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return \"CidrRange{\"\n+          + \"addressPrefix='\" + addressPrefix + '\\''\n+          + \", prefixLen=\" + prefixLen\n+          + '}';\n+    }\n+  }\n+\n+  /**\n+   * Corresponds to Envoy proto message\n+   * {@link io.envoyproxy.envoy.api.v2.listener.FilterChainMatch}.\n+   */\n+  static final class FilterChainMatch {\n+    private final int destinationPort;\n+    private final List<CidrRange> prefixRanges;\n+    private final List<String> applicationProtocols;\n+\n+    private FilterChainMatch(int destinationPort,\n+        List<CidrRange> prefixRanges, List<String> applicationProtocols) {\n+      this.destinationPort = destinationPort;\n+      this.prefixRanges = prefixRanges;\n+      this.applicationProtocols = applicationProtocols;\n+    }\n+\n+    static FilterChainMatch fromEnvoyProtoFilterChainMatch(\n+        io.envoyproxy.envoy.api.v2.listener.FilterChainMatch proto) {\n+      List<CidrRange> prefixRanges = new ArrayList<>();\n+      for (io.envoyproxy.envoy.api.v2.core.CidrRange range : proto.getPrefixRangesList()) {\n+        prefixRanges.add(CidrRange.fromEnvoyProtoCidrRange(range));\n+      }\n+      List<String> applicationProtocols = new ArrayList<>();\n+      for (String appProtocol  : proto.getApplicationProtocolsList()) {\n+        applicationProtocols.add(appProtocol);\n+      }\n+      return new FilterChainMatch(\n+          proto.getDestinationPort().getValue(),\n+          Collections.unmodifiableList(prefixRanges),\n+          Collections.unmodifiableList(applicationProtocols));\n+    }\n+\n+    public int getDestinationPort() {\n+      return destinationPort;\n+    }\n+\n+    public List<CidrRange> getPrefixRanges() {\n+      return prefixRanges;\n+    }\n+\n+    public List<String> getApplicationProtocols() {\n+      return applicationProtocols;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      FilterChainMatch that = (FilterChainMatch) o;\n+      return destinationPort == that.destinationPort\n+          && java.util.Objects.equals(prefixRanges, that.prefixRanges)\n+          && java.util.Objects.equals(applicationProtocols, that.applicationProtocols);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return java.util.Objects.hash(destinationPort, prefixRanges, applicationProtocols);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return \"FilterChainMatch{\"\n+          + \"destinationPort=\" + destinationPort\n+          + \", prefixRanges=\" + prefixRanges\n+          + \", applicationProtocols=\" + applicationProtocols\n+          + '}';\n+    }\n+  }\n+\n+  /**\n+   * Corresponds to Envoy proto message {@link io.envoyproxy.envoy.api.v2.listener.FilterChain}.\n+   */\n+  static final class FilterChain {\n+    private final FilterChainMatch filterChainMatch;\n+    // TODO(sanjaypujare): remove dependency on envoy data type along with rest of the code.\n+    private final io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext downstreamTlsContext;\n+\n+\n+    private FilterChain(FilterChainMatch filterChainMatch,\n+        io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext downstreamTlsContext) {\n+      this.filterChainMatch = filterChainMatch;\n+      this.downstreamTlsContext = downstreamTlsContext;\n+    }\n+\n+    static FilterChain fromEnvoyProtoFilterChain(\n+        io.envoyproxy.envoy.api.v2.listener.FilterChain proto) {\n+      return new FilterChain(\n+          FilterChainMatch.fromEnvoyProtoFilterChainMatch(proto.getFilterChainMatch()),\n+          proto.getTlsContext()\n+      );\n+    }\n+\n+    public FilterChainMatch getFilterChainMatch() {\n+      return filterChainMatch;\n+    }\n+\n+    public io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext getDownstreamTlsContext() {\n+      return downstreamTlsContext;\n+    }\n+\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      FilterChain that = (FilterChain) o;\n+      return java.util.Objects.equals(filterChainMatch, that.filterChainMatch)\n+          && java.util.Objects.equals(downstreamTlsContext, that.downstreamTlsContext);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return java.util.Objects.hash(filterChainMatch, downstreamTlsContext);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return \"FilterChain{\"\n+          + \"filterChainMatch=\" + filterChainMatch\n+          + \", downstreamTlsContext=\" + downstreamTlsContext\n+          + '}';\n+    }\n+  }\n+\n+  /**\n+   * Corresponds to Envoy proto message {@link io.envoyproxy.envoy.api.v2.Listener} & related\n+   * classes.\n+   */\n+  static final class Listener {\n+    private final String name;\n+    private final String address;\n+    private final List<FilterChain> filterChains;\n+\n+    private Listener(String name, String address,\n+        List<FilterChain> filterChains) {\n+      this.name = name;\n+      this.address = address;\n+      this.filterChains = filterChains;\n+    }\n+\n+    static String fromEnvoyProtoAddress(io.envoyproxy.envoy.api.v2.core.Address proto) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b2f9b6b4607cfa969ca25ce3947d002310dccec"}, "originalPosition": 203}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNTc4MTM3", "url": "https://github.com/grpc/grpc-java/pull/6718#pullrequestreview-360578137", "createdAt": "2020-02-18T18:38:40Z", "commit": {"oid": "5b2f9b6b4607cfa969ca25ce3947d002310dccec"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODozODo0MFrOFrN3Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODozODo0MFrOFrN3Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2MDE5OA==", "bodyText": "Is this nullable?", "url": "https://github.com/grpc/grpc-java/pull/6718#discussion_r380860198", "createdAt": "2020-02-18T18:38:40Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/EnvoyProtoData.java", "diffHunk": "@@ -339,4 +339,271 @@ public String toString() {\n           .toString();\n     }\n   }\n+\n+  static final class CidrRange {\n+    private final String addressPrefix;\n+    private final int prefixLen;\n+\n+    @VisibleForTesting\n+    CidrRange(String addressPrefix, int prefixLen) {\n+      this.addressPrefix = addressPrefix;\n+      this.prefixLen = prefixLen;\n+    }\n+\n+    static CidrRange fromEnvoyProtoCidrRange(\n+        io.envoyproxy.envoy.api.v2.core.CidrRange proto) {\n+      return new CidrRange(proto.getAddressPrefix(), proto.getPrefixLen().getValue());\n+    }\n+\n+    public String getAddressPrefix() {\n+      return addressPrefix;\n+    }\n+\n+    public int getPrefixLen() {\n+      return prefixLen;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      CidrRange cidrRange = (CidrRange) o;\n+      return prefixLen == cidrRange.prefixLen\n+          && java.util.Objects.equals(addressPrefix, cidrRange.addressPrefix);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return java.util.Objects.hash(addressPrefix, prefixLen);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return \"CidrRange{\"\n+          + \"addressPrefix='\" + addressPrefix + '\\''\n+          + \", prefixLen=\" + prefixLen\n+          + '}';\n+    }\n+  }\n+\n+  /**\n+   * Corresponds to Envoy proto message\n+   * {@link io.envoyproxy.envoy.api.v2.listener.FilterChainMatch}.\n+   */\n+  static final class FilterChainMatch {\n+    private final int destinationPort;\n+    private final List<CidrRange> prefixRanges;\n+    private final List<String> applicationProtocols;\n+\n+    private FilterChainMatch(int destinationPort,\n+        List<CidrRange> prefixRanges, List<String> applicationProtocols) {\n+      this.destinationPort = destinationPort;\n+      this.prefixRanges = prefixRanges;\n+      this.applicationProtocols = applicationProtocols;\n+    }\n+\n+    static FilterChainMatch fromEnvoyProtoFilterChainMatch(\n+        io.envoyproxy.envoy.api.v2.listener.FilterChainMatch proto) {\n+      List<CidrRange> prefixRanges = new ArrayList<>();\n+      for (io.envoyproxy.envoy.api.v2.core.CidrRange range : proto.getPrefixRangesList()) {\n+        prefixRanges.add(CidrRange.fromEnvoyProtoCidrRange(range));\n+      }\n+      List<String> applicationProtocols = new ArrayList<>();\n+      for (String appProtocol  : proto.getApplicationProtocolsList()) {\n+        applicationProtocols.add(appProtocol);\n+      }\n+      return new FilterChainMatch(\n+          proto.getDestinationPort().getValue(),\n+          Collections.unmodifiableList(prefixRanges),\n+          Collections.unmodifiableList(applicationProtocols));\n+    }\n+\n+    public int getDestinationPort() {\n+      return destinationPort;\n+    }\n+\n+    public List<CidrRange> getPrefixRanges() {\n+      return prefixRanges;\n+    }\n+\n+    public List<String> getApplicationProtocols() {\n+      return applicationProtocols;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      FilterChainMatch that = (FilterChainMatch) o;\n+      return destinationPort == that.destinationPort\n+          && java.util.Objects.equals(prefixRanges, that.prefixRanges)\n+          && java.util.Objects.equals(applicationProtocols, that.applicationProtocols);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return java.util.Objects.hash(destinationPort, prefixRanges, applicationProtocols);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return \"FilterChainMatch{\"\n+          + \"destinationPort=\" + destinationPort\n+          + \", prefixRanges=\" + prefixRanges\n+          + \", applicationProtocols=\" + applicationProtocols\n+          + '}';\n+    }\n+  }\n+\n+  /**\n+   * Corresponds to Envoy proto message {@link io.envoyproxy.envoy.api.v2.listener.FilterChain}.\n+   */\n+  static final class FilterChain {\n+    private final FilterChainMatch filterChainMatch;\n+    // TODO(sanjaypujare): remove dependency on envoy data type along with rest of the code.\n+    private final io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext downstreamTlsContext;\n+\n+\n+    private FilterChain(FilterChainMatch filterChainMatch,\n+        io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext downstreamTlsContext) {\n+      this.filterChainMatch = filterChainMatch;\n+      this.downstreamTlsContext = downstreamTlsContext;\n+    }\n+\n+    static FilterChain fromEnvoyProtoFilterChain(\n+        io.envoyproxy.envoy.api.v2.listener.FilterChain proto) {\n+      return new FilterChain(\n+          FilterChainMatch.fromEnvoyProtoFilterChainMatch(proto.getFilterChainMatch()),\n+          proto.getTlsContext()\n+      );\n+    }\n+\n+    public FilterChainMatch getFilterChainMatch() {\n+      return filterChainMatch;\n+    }\n+\n+    public io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext getDownstreamTlsContext() {\n+      return downstreamTlsContext;\n+    }\n+\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      FilterChain that = (FilterChain) o;\n+      return java.util.Objects.equals(filterChainMatch, that.filterChainMatch)\n+          && java.util.Objects.equals(downstreamTlsContext, that.downstreamTlsContext);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return java.util.Objects.hash(filterChainMatch, downstreamTlsContext);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return \"FilterChain{\"\n+          + \"filterChainMatch=\" + filterChainMatch\n+          + \", downstreamTlsContext=\" + downstreamTlsContext\n+          + '}';\n+    }\n+  }\n+\n+  /**\n+   * Corresponds to Envoy proto message {@link io.envoyproxy.envoy.api.v2.Listener} & related\n+   * classes.\n+   */\n+  static final class Listener {\n+    private final String name;\n+    private final String address;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b2f9b6b4607cfa969ca25ce3947d002310dccec"}, "originalPosition": 193}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a532b49c97f14e5a2cf06b320351904373762730", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/a532b49c97f14e5a2cf06b320351904373762730", "committedDate": "2020-02-18T22:25:11Z", "message": "separate code into EnvoyServerProtoData as per review comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e099d6ed93e14cf03584874b7120151855fce7d", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/4e099d6ed93e14cf03584874b7120151855fce7d", "committedDate": "2020-02-18T22:29:58Z", "message": "nit: remove extra newline"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acc47093df2323bf188655777f541b31c8c60377", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/acc47093df2323bf188655777f541b31c8c60377", "committedDate": "2020-02-19T00:41:26Z", "message": "mark nullable and rename method for clarity"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNzI5MDM0", "url": "https://github.com/grpc/grpc-java/pull/6718#pullrequestreview-360729034", "createdAt": "2020-02-18T22:44:52Z", "commit": {"oid": "4e099d6ed93e14cf03584874b7120151855fce7d"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMjo0NDo1MlrOFrVNJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMTowNDo0OVrOFrX4sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk4MDUxOA==", "bodyText": "nit: remove extra line. also before FilterChain class.", "url": "https://github.com/grpc/grpc-java/pull/6718#discussion_r380980518", "createdAt": "2020-02-18T22:44:52Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/EnvoyServerProtoData.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Defines gRPC data types for Envoy protobuf messages used in xDS protocol on the server side,\n+ * similar to how {@link EnvoyProtoData} defines it for the client side.\n+ */\n+final class EnvoyServerProtoData {\n+\n+  // Prevent instantiation.\n+  private EnvoyServerProtoData() {\n+  }\n+\n+  static final class CidrRange {\n+    private final String addressPrefix;\n+    private final int prefixLen;\n+\n+    @VisibleForTesting\n+    CidrRange(String addressPrefix, int prefixLen) {\n+      this.addressPrefix = addressPrefix;\n+      this.prefixLen = prefixLen;\n+    }\n+\n+    static CidrRange fromEnvoyProtoCidrRange(\n+        io.envoyproxy.envoy.api.v2.core.CidrRange proto) {\n+      return new CidrRange(proto.getAddressPrefix(), proto.getPrefixLen().getValue());\n+    }\n+\n+    public String getAddressPrefix() {\n+      return addressPrefix;\n+    }\n+\n+    public int getPrefixLen() {\n+      return prefixLen;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      CidrRange cidrRange = (CidrRange) o;\n+      return prefixLen == cidrRange.prefixLen\n+          && java.util.Objects.equals(addressPrefix, cidrRange.addressPrefix);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return java.util.Objects.hash(addressPrefix, prefixLen);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return \"CidrRange{\"\n+          + \"addressPrefix='\" + addressPrefix + '\\''\n+          + \", prefixLen=\" + prefixLen\n+          + '}';\n+    }\n+  }\n+\n+  /**\n+   * Corresponds to Envoy proto message\n+   * {@link io.envoyproxy.envoy.api.v2.listener.FilterChainMatch}.\n+   */\n+  static final class FilterChainMatch {\n+    private final int destinationPort;\n+    private final List<CidrRange> prefixRanges;\n+    private final List<String> applicationProtocols;\n+\n+    private FilterChainMatch(int destinationPort,\n+        List<CidrRange> prefixRanges, List<String> applicationProtocols) {\n+      this.destinationPort = destinationPort;\n+      this.prefixRanges = prefixRanges;\n+      this.applicationProtocols = applicationProtocols;\n+    }\n+\n+    static FilterChainMatch fromEnvoyProtoFilterChainMatch(\n+        io.envoyproxy.envoy.api.v2.listener.FilterChainMatch proto) {\n+      List<CidrRange> prefixRanges = new ArrayList<>();\n+      for (io.envoyproxy.envoy.api.v2.core.CidrRange range : proto.getPrefixRangesList()) {\n+        prefixRanges.add(CidrRange.fromEnvoyProtoCidrRange(range));\n+      }\n+      List<String> applicationProtocols = new ArrayList<>();\n+      for (String appProtocol  : proto.getApplicationProtocolsList()) {\n+        applicationProtocols.add(appProtocol);\n+      }\n+      return new FilterChainMatch(\n+          proto.getDestinationPort().getValue(),\n+          Collections.unmodifiableList(prefixRanges),\n+          Collections.unmodifiableList(applicationProtocols));\n+    }\n+\n+    public int getDestinationPort() {\n+      return destinationPort;\n+    }\n+\n+    public List<CidrRange> getPrefixRanges() {\n+      return prefixRanges;\n+    }\n+\n+    public List<String> getApplicationProtocols() {\n+      return applicationProtocols;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      FilterChainMatch that = (FilterChainMatch) o;\n+      return destinationPort == that.destinationPort\n+          && java.util.Objects.equals(prefixRanges, that.prefixRanges)\n+          && java.util.Objects.equals(applicationProtocols, that.applicationProtocols);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return java.util.Objects.hash(destinationPort, prefixRanges, applicationProtocols);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return \"FilterChainMatch{\"\n+          + \"destinationPort=\" + destinationPort\n+          + \", prefixRanges=\" + prefixRanges\n+          + \", applicationProtocols=\" + applicationProtocols\n+          + '}';\n+    }\n+  }\n+\n+  /**\n+   * Corresponds to Envoy proto message {@link io.envoyproxy.envoy.api.v2.listener.FilterChain}.\n+   */\n+  static final class FilterChain {\n+    private final FilterChainMatch filterChainMatch;\n+    // TODO(sanjaypujare): remove dependency on envoy data type along with rest of the code.\n+    private final io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext downstreamTlsContext;\n+\n+\n+    private FilterChain(FilterChainMatch filterChainMatch,\n+        io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext downstreamTlsContext) {\n+      this.filterChainMatch = filterChainMatch;\n+      this.downstreamTlsContext = downstreamTlsContext;\n+    }\n+\n+    static FilterChain fromEnvoyProtoFilterChain(\n+        io.envoyproxy.envoy.api.v2.listener.FilterChain proto) {\n+      return new FilterChain(\n+          FilterChainMatch.fromEnvoyProtoFilterChainMatch(proto.getFilterChainMatch()),\n+          proto.getTlsContext()\n+      );\n+    }\n+\n+    public FilterChainMatch getFilterChainMatch() {\n+      return filterChainMatch;\n+    }\n+\n+    public io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext getDownstreamTlsContext() {\n+      return downstreamTlsContext;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e099d6ed93e14cf03584874b7120151855fce7d"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAyMjQyMQ==", "bodyText": "is this nullable?", "url": "https://github.com/grpc/grpc-java/pull/6718#discussion_r381022421", "createdAt": "2020-02-19T00:57:48Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/XdsClient.java", "diffHunk": "@@ -59,21 +60,28 @@\n    */\n   static final class ConfigUpdate {\n     private final String clusterName;\n+    private final Listener listener;\n \n-    private ConfigUpdate(String clusterName) {\n+    private ConfigUpdate(String clusterName, Listener listener) {\n       this.clusterName = clusterName;\n+      this.listener = listener;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acc47093df2323bf188655777f541b31c8c60377"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAyNDQzMw==", "bodyText": "i expected to have it (unmodifiableList) in the constructor, just in case we have another factory method it can be missed.", "url": "https://github.com/grpc/grpc-java/pull/6718#discussion_r381024433", "createdAt": "2020-02-19T01:04:49Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/EnvoyServerProtoData.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Defines gRPC data types for Envoy protobuf messages used in xDS protocol on the server side,\n+ * similar to how {@link EnvoyProtoData} defines it for the client side.\n+ */\n+final class EnvoyServerProtoData {\n+\n+  // Prevent instantiation.\n+  private EnvoyServerProtoData() {\n+  }\n+\n+  static final class CidrRange {\n+    private final String addressPrefix;\n+    private final int prefixLen;\n+\n+    @VisibleForTesting\n+    CidrRange(String addressPrefix, int prefixLen) {\n+      this.addressPrefix = addressPrefix;\n+      this.prefixLen = prefixLen;\n+    }\n+\n+    static CidrRange fromEnvoyProtoCidrRange(\n+        io.envoyproxy.envoy.api.v2.core.CidrRange proto) {\n+      return new CidrRange(proto.getAddressPrefix(), proto.getPrefixLen().getValue());\n+    }\n+\n+    public String getAddressPrefix() {\n+      return addressPrefix;\n+    }\n+\n+    public int getPrefixLen() {\n+      return prefixLen;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      CidrRange cidrRange = (CidrRange) o;\n+      return prefixLen == cidrRange.prefixLen\n+          && java.util.Objects.equals(addressPrefix, cidrRange.addressPrefix);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return java.util.Objects.hash(addressPrefix, prefixLen);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return \"CidrRange{\"\n+          + \"addressPrefix='\" + addressPrefix + '\\''\n+          + \", prefixLen=\" + prefixLen\n+          + '}';\n+    }\n+  }\n+\n+  /**\n+   * Corresponds to Envoy proto message\n+   * {@link io.envoyproxy.envoy.api.v2.listener.FilterChainMatch}.\n+   */\n+  static final class FilterChainMatch {\n+    private final int destinationPort;\n+    private final List<CidrRange> prefixRanges;\n+    private final List<String> applicationProtocols;\n+\n+    private FilterChainMatch(int destinationPort,\n+        List<CidrRange> prefixRanges, List<String> applicationProtocols) {\n+      this.destinationPort = destinationPort;\n+      this.prefixRanges = prefixRanges;\n+      this.applicationProtocols = applicationProtocols;\n+    }\n+\n+    static FilterChainMatch fromEnvoyProtoFilterChainMatch(\n+        io.envoyproxy.envoy.api.v2.listener.FilterChainMatch proto) {\n+      List<CidrRange> prefixRanges = new ArrayList<>();\n+      for (io.envoyproxy.envoy.api.v2.core.CidrRange range : proto.getPrefixRangesList()) {\n+        prefixRanges.add(CidrRange.fromEnvoyProtoCidrRange(range));\n+      }\n+      List<String> applicationProtocols = new ArrayList<>();\n+      for (String appProtocol  : proto.getApplicationProtocolsList()) {\n+        applicationProtocols.add(appProtocol);\n+      }\n+      return new FilterChainMatch(\n+          proto.getDestinationPort().getValue(),\n+          Collections.unmodifiableList(prefixRanges),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acc47093df2323bf188655777f541b31c8c60377"}, "originalPosition": 113}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f89ed6db1722cd68643865515def09f04f56781", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/1f89ed6db1722cd68643865515def09f04f56781", "committedDate": "2020-02-19T05:44:21Z", "message": "use unmodifiableList in ctor instead of factory method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMjcxMTQw", "url": "https://github.com/grpc/grpc-java/pull/6718#pullrequestreview-361271140", "createdAt": "2020-02-19T17:04:40Z", "commit": {"oid": "1f89ed6db1722cd68643865515def09f04f56781"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMzg5MzYz", "url": "https://github.com/grpc/grpc-java/pull/6718#pullrequestreview-361389363", "createdAt": "2020-02-19T19:50:40Z", "commit": {"oid": "1f89ed6db1722cd68643865515def09f04f56781"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxOTo1MDo0MFrOFr1V-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxOTo1MDo0MFrOFr1V-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUwNzA2NA==", "bodyText": "Proto fields will never be null.\nAnyway, it's not necessary to write tests for this data conversion class (unless there is some complex logic other than straightly populating data from proto messages).", "url": "https://github.com/grpc/grpc-java/pull/6718#discussion_r381507064", "createdAt": "2020-02-19T19:50:40Z", "author": {"login": "voidzcy"}, "path": "xds/src/test/java/io/grpc/xds/EnvoyServerProtoDataTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.protobuf.Any;\n+import com.google.protobuf.UInt32Value;\n+import io.envoyproxy.envoy.api.v2.auth.CommonTlsContext;\n+import io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext;\n+import io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig;\n+import io.envoyproxy.envoy.api.v2.core.CidrRange;\n+import io.envoyproxy.envoy.api.v2.core.SocketAddress;\n+import io.envoyproxy.envoy.api.v2.listener.Filter;\n+import io.envoyproxy.envoy.api.v2.listener.FilterChain;\n+import io.envoyproxy.envoy.api.v2.listener.FilterChainMatch;\n+import io.grpc.xds.EnvoyServerProtoData.Listener;\n+import io.grpc.xds.internal.sds.CommonTlsContextTestsUtil;\n+import java.util.List;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * Unit tests for {@link EnvoyServerProtoData}.\n+ */\n+@RunWith(JUnit4.class)\n+public class EnvoyServerProtoDataTest {\n+\n+  @Test\n+  public void listener_convertFromListenerProto() {\n+    io.envoyproxy.envoy.api.v2.core.Address address =\n+        io.envoyproxy.envoy.api.v2.core.Address.newBuilder()\n+            .setSocketAddress(SocketAddress.newBuilder()\n+                .setPortValue(8000)\n+                .setAddress(\"10.2.1.34\")\n+                .build())\n+            .build();\n+    io.envoyproxy.envoy.api.v2.Listener listener =\n+        io.envoyproxy.envoy.api.v2.Listener.newBuilder()\n+            .setName(\"8000\")\n+            .setAddress(address)\n+            .addFilterChains(createOutFilter())\n+            .addFilterChains(createInFilter())\n+            .build();\n+\n+    Listener xdsListener = Listener.fromEnvoyProtoListener(listener);\n+    assertThat(xdsListener.getName()).isEqualTo(\"8000\");\n+    assertThat(xdsListener.getAddress()).isEqualTo(\"10.2.1.34:8000\");\n+    List<EnvoyServerProtoData.FilterChain> filterChains = xdsListener.getFilterChains();\n+    assertThat(filterChains).isNotNull();\n+    assertThat(filterChains.size()).isEqualTo(2);\n+    EnvoyServerProtoData.FilterChain outFilter = filterChains.get(0);\n+    assertThat(outFilter).isNotNull();\n+    EnvoyServerProtoData.FilterChainMatch outFilterChainMatch = outFilter.getFilterChainMatch();\n+    assertThat(outFilterChainMatch).isNotNull();\n+    assertThat(outFilterChainMatch.getDestinationPort()).isEqualTo(8000);\n+    assertThat(outFilterChainMatch.getApplicationProtocols()).isEmpty();\n+    assertThat(outFilterChainMatch.getPrefixRanges()).isEmpty();\n+    assertThat(outFilter.getDownstreamTlsContext())\n+        .isEqualTo(DownstreamTlsContext.getDefaultInstance());\n+\n+    EnvoyServerProtoData.FilterChain inFilter = filterChains.get(1);\n+    assertThat(inFilter).isNotNull();\n+    EnvoyServerProtoData.FilterChainMatch inFilterChainMatch = inFilter.getFilterChainMatch();\n+    assertThat(inFilterChainMatch).isNotNull();\n+    assertThat(inFilterChainMatch.getDestinationPort()).isEqualTo(8000);\n+    assertThat(inFilterChainMatch.getApplicationProtocols()).containsExactly(\"managed-mtls\");\n+    assertThat(inFilterChainMatch.getPrefixRanges()).containsExactly(\n+        new EnvoyServerProtoData.CidrRange(\"10.20.0.15\", 32));\n+    DownstreamTlsContext inFilterTlsContext = inFilter.getDownstreamTlsContext();\n+    assertThat(inFilterTlsContext).isNotNull();\n+    CommonTlsContext commonTlsContext = inFilterTlsContext.getCommonTlsContext();\n+    assertThat(commonTlsContext).isNotNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f89ed6db1722cd68643865515def09f04f56781"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4579, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}