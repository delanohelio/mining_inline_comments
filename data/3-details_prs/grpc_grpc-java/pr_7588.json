{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1MDAyNTM4", "number": 7588, "title": "xds: implement a global map for holding circuit breaker request counters", "bodyText": "Use WeakReference to hold atomics. Circuit breaking will always be enabled, with the limit of per-cluster concurrent requests default to 1024. Each EDS LB policy will get or create the counter for aggregating outstanding requests sent through it at the time it is instantiated. This holds a strong reference to the counter (as well as the picker instance spawned). When the EDS LB policy and the picker instance are destroyed, strong references will be gone. Atomics will be GCed when strong references are gone and the global map will be cleaned up upon each call of getOrCreate().", "createdAt": "2020-11-03T21:32:03Z", "url": "https://github.com/grpc/grpc-java/pull/7588", "merged": true, "mergeCommit": {"oid": "a43ae54c59cb29c1e2df35a98ffb42954c90342c"}, "closed": true, "closedAt": "2020-11-13T20:12:33Z", "author": {"login": "voidzcy"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZAEEPgH2gAyNTE1MDAyNTM4OmQzYTQ1NzY4NWM0ODc0M2YyOGRhYzgzZmQ5NGQyNmY3ZGNhMGYwODM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdcMqr6AFqTUzMDM2MDA3Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d3a457685c48743f28dac83fd94d26f7dca0f083", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/d3a457685c48743f28dac83fd94d26f7dca0f083", "committedDate": "2020-11-03T21:29:47Z", "message": "Introduce an interface for providing per-clusuter request counters."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd222c5178795cb58ece29ecfbd7d9361e34bd14", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/bd222c5178795cb58ece29ecfbd7d9361e34bd14", "committedDate": "2020-11-04T22:24:22Z", "message": "Implement a global map for holding atomic counters used for aggregating per-cluster requests."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b0aa8cdd0217996a41ca0e4c66d8d61af72a6d91", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/b0aa8cdd0217996a41ca0e4c66d8d61af72a6d91", "committedDate": "2020-11-03T21:30:39Z", "message": "Implement a global map for holding atomic counters used for aggregating per-cluster requests."}, "afterCommit": {"oid": "bd222c5178795cb58ece29ecfbd7d9361e34bd14", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/bd222c5178795cb58ece29ecfbd7d9361e34bd14", "committedDate": "2020-11-04T22:24:22Z", "message": "Implement a global map for holding atomic counters used for aggregating per-cluster requests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d62f7324779f15b7119c2ca7e12a35d714c4e0f", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/4d62f7324779f15b7119c2ca7e12a35d714c4e0f", "committedDate": "2020-11-09T20:10:15Z", "message": "Put supress warning close to usage."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bf5aa1b8be3a1242f1fd600461c27eb49630c4c", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/4bf5aa1b8be3a1242f1fd600461c27eb49630c4c", "committedDate": "2020-11-09T20:44:41Z", "message": "Removed unused import."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db6c43d192c7da6b3b1f8cfb8d2bf6177eba598e", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/db6c43d192c7da6b3b1f8cfb8d2bf6177eba598e", "committedDate": "2020-11-11T23:27:46Z", "message": "Fix typo."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwMzYwMDc2", "url": "https://github.com/grpc/grpc-java/pull/7588#pullrequestreview-530360076", "createdAt": "2020-11-13T19:50:23Z", "commit": {"oid": "db6c43d192c7da6b3b1f8cfb8d2bf6177eba598e"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxOTo1MDoyM1rOHy82ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxOTo1MDoyM1rOHy82ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE4NzgxMg==", "bodyText": "What about avoiding assignment inside if-condition?\nAtomicLong counter = null;\nif (ref != null) {\n  counter = ref.get();\n}\nif (counter == null) {\n  counter = new AtomicLong();\n  ref = new CounterReference(counter, refQueue, cluster, edsServiceName);\n  clusterCounters.put(edsServiceName, ref);\n}", "url": "https://github.com/grpc/grpc-java/pull/7588#discussion_r523187812", "createdAt": "2020-11-13T19:50:23Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/SharedCallCounterMap.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.xds.EdsLoadBalancer2.CallCounterProvider;\n+import java.lang.ref.ReferenceQueue;\n+import java.lang.ref.WeakReference;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * The global map for holding circuit breaker atomic counters.\n+ */\n+@ThreadSafe\n+final class SharedCallCounterMap implements CallCounterProvider {\n+\n+  private final ReferenceQueue<AtomicLong> refQueue = new ReferenceQueue<>();\n+  private final Map<String, Map<String, CounterReference>> counters;\n+\n+  private SharedCallCounterMap() {\n+    this(new HashMap<String, Map<String, CounterReference>>());\n+  }\n+\n+  @VisibleForTesting\n+  SharedCallCounterMap(Map<String, Map<String, CounterReference>> counters) {\n+    this.counters = checkNotNull(counters, \"counters\");\n+  }\n+\n+  static SharedCallCounterMap getInstance() {\n+    return SharedCallCounterMapHolder.instance;\n+  }\n+\n+  @Override\n+  public synchronized AtomicLong getOrCreate(String cluster, @Nullable String edsServiceName) {\n+    Map<String, CounterReference> clusterCounters = counters.get(cluster);\n+    if (clusterCounters == null) {\n+      clusterCounters = new HashMap<>();\n+      counters.put(cluster, clusterCounters);\n+    }\n+    CounterReference ref = clusterCounters.get(edsServiceName);\n+    AtomicLong counter;\n+    if (ref == null || (counter = ref.get()) == null) {\n+      counter = new AtomicLong();\n+      ref = new CounterReference(counter, refQueue, cluster, edsServiceName);\n+      clusterCounters.put(edsServiceName, ref);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db6c43d192c7da6b3b1f8cfb8d2bf6177eba598e"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3967, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}