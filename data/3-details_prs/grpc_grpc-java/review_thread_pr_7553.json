{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5NjI5NzQ2", "number": 7553, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNzo0NDo1NFrOEyBFew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODoyNTozMVrOEyCDeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODgyMDQzOnYy", "diffSide": "RIGHT", "path": "xds/src/test/java/io/grpc/xds/ServerXdsClientNewServerApiTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNzo0NDo1NFrOHobT9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDoxODo1N1rOHogywg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE1MjU2NA==", "bodyText": "s/XdsClientImpl2/AbstractXdsClient/g", "url": "https://github.com/grpc/grpc-java/pull/7553#discussion_r512152564", "createdAt": "2020-10-26T17:44:54Z", "author": {"login": "voidzcy"}, "path": "xds/src/test/java/io/grpc/xds/ServerXdsClientNewServerApiTest.java", "diffHunk": "@@ -0,0 +1,690 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static io.grpc.xds.XdsClientTestHelper.buildDiscoveryResponse;\n+import static io.grpc.xds.XdsClientTestHelper.buildListener;\n+import static io.grpc.xds.XdsClientTestHelper.buildRouteConfiguration;\n+import static io.grpc.xds.XdsClientTestHelper.buildVirtualHost;\n+import static org.mockito.AdditionalAnswers.delegatesTo;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.reset;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.google.protobuf.Any;\n+import com.google.protobuf.InvalidProtocolBufferException;\n+import com.google.protobuf.UInt32Value;\n+import io.envoyproxy.envoy.config.core.v3.CidrRange;\n+import io.envoyproxy.envoy.config.core.v3.SocketAddress;\n+import io.envoyproxy.envoy.config.core.v3.TrafficDirection;\n+import io.envoyproxy.envoy.config.core.v3.TransportSocket;\n+import io.envoyproxy.envoy.config.listener.v3.Filter;\n+import io.envoyproxy.envoy.config.listener.v3.FilterChain;\n+import io.envoyproxy.envoy.config.listener.v3.FilterChainMatch;\n+import io.envoyproxy.envoy.config.listener.v3.Listener;\n+import io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext;\n+import io.envoyproxy.envoy.service.discovery.v3.AggregatedDiscoveryServiceGrpc.AggregatedDiscoveryServiceImplBase;\n+import io.envoyproxy.envoy.service.discovery.v3.DiscoveryRequest;\n+import io.envoyproxy.envoy.service.discovery.v3.DiscoveryResponse;\n+import io.grpc.Context;\n+import io.grpc.Context.CancellationListener;\n+import io.grpc.ManagedChannel;\n+import io.grpc.Status;\n+import io.grpc.Status.Code;\n+import io.grpc.SynchronizationContext;\n+import io.grpc.inprocess.InProcessChannelBuilder;\n+import io.grpc.inprocess.InProcessServerBuilder;\n+import io.grpc.internal.BackoffPolicy;\n+import io.grpc.internal.FakeClock;\n+import io.grpc.internal.FakeClock.TaskFilter;\n+import io.grpc.stub.StreamObserver;\n+import io.grpc.testing.GrpcCleanupRule;\n+import io.grpc.xds.EnvoyProtoData.Node;\n+import io.grpc.xds.XdsClient.ListenerUpdate;\n+import io.grpc.xds.XdsClient.ListenerWatcher;\n+import io.grpc.xds.XdsClient.XdsChannel;\n+import io.grpc.xds.XdsClientImpl2.ResourceType;\n+import io.grpc.xds.internal.sds.CommonTlsContextTestsUtil;\n+import java.io.IOException;\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InOrder;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+/**\n+ * Tests for {@link XdsClientImpl2 for server side Listeners using newServerApi}.\n+ */\n+@RunWith(JUnit4.class)\n+public class ServerXdsClientNewServerApiTest {\n+\n+  private static final int PORT = 7000;\n+  private static final String LOCAL_IP = \"192.168.3.5\";\n+  private static final String INSTANCE_IP = \"192.168.3.7\";\n+  private static final String TYPE_URL_HCM =\n+      \"type.googleapis.com/\"\n+          + \"envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\";\n+\n+  private static final Node NODE = Node.newBuilder().build();\n+  private static final TaskFilter RPC_RETRY_TASK_FILTER =\n+      new TaskFilter() {\n+        @Override\n+        public boolean shouldAccept(Runnable command) {\n+          return command.toString().contains(XdsClientImpl2.RpcRetryTask.class.getSimpleName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a176192b6586324e9ff24ff9d01e1e2c571de2c"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI0MjM3MA==", "bodyText": "good catch. Fixed", "url": "https://github.com/grpc/grpc-java/pull/7553#discussion_r512242370", "createdAt": "2020-10-26T20:18:57Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/test/java/io/grpc/xds/ServerXdsClientNewServerApiTest.java", "diffHunk": "@@ -0,0 +1,690 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static io.grpc.xds.XdsClientTestHelper.buildDiscoveryResponse;\n+import static io.grpc.xds.XdsClientTestHelper.buildListener;\n+import static io.grpc.xds.XdsClientTestHelper.buildRouteConfiguration;\n+import static io.grpc.xds.XdsClientTestHelper.buildVirtualHost;\n+import static org.mockito.AdditionalAnswers.delegatesTo;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.reset;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.google.protobuf.Any;\n+import com.google.protobuf.InvalidProtocolBufferException;\n+import com.google.protobuf.UInt32Value;\n+import io.envoyproxy.envoy.config.core.v3.CidrRange;\n+import io.envoyproxy.envoy.config.core.v3.SocketAddress;\n+import io.envoyproxy.envoy.config.core.v3.TrafficDirection;\n+import io.envoyproxy.envoy.config.core.v3.TransportSocket;\n+import io.envoyproxy.envoy.config.listener.v3.Filter;\n+import io.envoyproxy.envoy.config.listener.v3.FilterChain;\n+import io.envoyproxy.envoy.config.listener.v3.FilterChainMatch;\n+import io.envoyproxy.envoy.config.listener.v3.Listener;\n+import io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext;\n+import io.envoyproxy.envoy.service.discovery.v3.AggregatedDiscoveryServiceGrpc.AggregatedDiscoveryServiceImplBase;\n+import io.envoyproxy.envoy.service.discovery.v3.DiscoveryRequest;\n+import io.envoyproxy.envoy.service.discovery.v3.DiscoveryResponse;\n+import io.grpc.Context;\n+import io.grpc.Context.CancellationListener;\n+import io.grpc.ManagedChannel;\n+import io.grpc.Status;\n+import io.grpc.Status.Code;\n+import io.grpc.SynchronizationContext;\n+import io.grpc.inprocess.InProcessChannelBuilder;\n+import io.grpc.inprocess.InProcessServerBuilder;\n+import io.grpc.internal.BackoffPolicy;\n+import io.grpc.internal.FakeClock;\n+import io.grpc.internal.FakeClock.TaskFilter;\n+import io.grpc.stub.StreamObserver;\n+import io.grpc.testing.GrpcCleanupRule;\n+import io.grpc.xds.EnvoyProtoData.Node;\n+import io.grpc.xds.XdsClient.ListenerUpdate;\n+import io.grpc.xds.XdsClient.ListenerWatcher;\n+import io.grpc.xds.XdsClient.XdsChannel;\n+import io.grpc.xds.XdsClientImpl2.ResourceType;\n+import io.grpc.xds.internal.sds.CommonTlsContextTestsUtil;\n+import java.io.IOException;\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InOrder;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+/**\n+ * Tests for {@link XdsClientImpl2 for server side Listeners using newServerApi}.\n+ */\n+@RunWith(JUnit4.class)\n+public class ServerXdsClientNewServerApiTest {\n+\n+  private static final int PORT = 7000;\n+  private static final String LOCAL_IP = \"192.168.3.5\";\n+  private static final String INSTANCE_IP = \"192.168.3.7\";\n+  private static final String TYPE_URL_HCM =\n+      \"type.googleapis.com/\"\n+          + \"envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\";\n+\n+  private static final Node NODE = Node.newBuilder().build();\n+  private static final TaskFilter RPC_RETRY_TASK_FILTER =\n+      new TaskFilter() {\n+        @Override\n+        public boolean shouldAccept(Runnable command) {\n+          return command.toString().contains(XdsClientImpl2.RpcRetryTask.class.getSimpleName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE1MjU2NA=="}, "originalCommit": {"oid": "1a176192b6586324e9ff24ff9d01e1e2c571de2c"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODgyMTg5OnYy", "diffSide": "RIGHT", "path": "xds/src/test/java/io/grpc/xds/ServerXdsClientNewServerApiTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNzo0NTowOFrOHobUyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDoxODo0NVrOHogyNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE1Mjc3Ng==", "bodyText": "s/ServerXdsClient/g", "url": "https://github.com/grpc/grpc-java/pull/7553#discussion_r512152776", "createdAt": "2020-10-26T17:45:08Z", "author": {"login": "voidzcy"}, "path": "xds/src/test/java/io/grpc/xds/ServerXdsClientNewServerApiTest.java", "diffHunk": "@@ -0,0 +1,690 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static io.grpc.xds.XdsClientTestHelper.buildDiscoveryResponse;\n+import static io.grpc.xds.XdsClientTestHelper.buildListener;\n+import static io.grpc.xds.XdsClientTestHelper.buildRouteConfiguration;\n+import static io.grpc.xds.XdsClientTestHelper.buildVirtualHost;\n+import static org.mockito.AdditionalAnswers.delegatesTo;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.reset;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.google.protobuf.Any;\n+import com.google.protobuf.InvalidProtocolBufferException;\n+import com.google.protobuf.UInt32Value;\n+import io.envoyproxy.envoy.config.core.v3.CidrRange;\n+import io.envoyproxy.envoy.config.core.v3.SocketAddress;\n+import io.envoyproxy.envoy.config.core.v3.TrafficDirection;\n+import io.envoyproxy.envoy.config.core.v3.TransportSocket;\n+import io.envoyproxy.envoy.config.listener.v3.Filter;\n+import io.envoyproxy.envoy.config.listener.v3.FilterChain;\n+import io.envoyproxy.envoy.config.listener.v3.FilterChainMatch;\n+import io.envoyproxy.envoy.config.listener.v3.Listener;\n+import io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext;\n+import io.envoyproxy.envoy.service.discovery.v3.AggregatedDiscoveryServiceGrpc.AggregatedDiscoveryServiceImplBase;\n+import io.envoyproxy.envoy.service.discovery.v3.DiscoveryRequest;\n+import io.envoyproxy.envoy.service.discovery.v3.DiscoveryResponse;\n+import io.grpc.Context;\n+import io.grpc.Context.CancellationListener;\n+import io.grpc.ManagedChannel;\n+import io.grpc.Status;\n+import io.grpc.Status.Code;\n+import io.grpc.SynchronizationContext;\n+import io.grpc.inprocess.InProcessChannelBuilder;\n+import io.grpc.inprocess.InProcessServerBuilder;\n+import io.grpc.internal.BackoffPolicy;\n+import io.grpc.internal.FakeClock;\n+import io.grpc.internal.FakeClock.TaskFilter;\n+import io.grpc.stub.StreamObserver;\n+import io.grpc.testing.GrpcCleanupRule;\n+import io.grpc.xds.EnvoyProtoData.Node;\n+import io.grpc.xds.XdsClient.ListenerUpdate;\n+import io.grpc.xds.XdsClient.ListenerWatcher;\n+import io.grpc.xds.XdsClient.XdsChannel;\n+import io.grpc.xds.XdsClientImpl2.ResourceType;\n+import io.grpc.xds.internal.sds.CommonTlsContextTestsUtil;\n+import java.io.IOException;\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InOrder;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+/**\n+ * Tests for {@link XdsClientImpl2 for server side Listeners using newServerApi}.\n+ */\n+@RunWith(JUnit4.class)\n+public class ServerXdsClientNewServerApiTest {\n+\n+  private static final int PORT = 7000;\n+  private static final String LOCAL_IP = \"192.168.3.5\";\n+  private static final String INSTANCE_IP = \"192.168.3.7\";\n+  private static final String TYPE_URL_HCM =\n+      \"type.googleapis.com/\"\n+          + \"envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\";\n+\n+  private static final Node NODE = Node.newBuilder().build();\n+  private static final TaskFilter RPC_RETRY_TASK_FILTER =\n+      new TaskFilter() {\n+        @Override\n+        public boolean shouldAccept(Runnable command) {\n+          return command.toString().contains(XdsClientImpl2.RpcRetryTask.class.getSimpleName());\n+        }\n+      };\n+  private static final TaskFilter LISTENER_RESOURCE_FETCH_TIMEOUT_TASK_FILTER =\n+      new TaskFilter() {\n+        @Override\n+        public boolean shouldAccept(Runnable command) {\n+          return command.toString()\n+              .contains(XdsClientImpl2.ListenerResourceFetchTimeoutTask.class.getSimpleName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a176192b6586324e9ff24ff9d01e1e2c571de2c"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI0MjIyOA==", "bodyText": "good catch. FIxed.", "url": "https://github.com/grpc/grpc-java/pull/7553#discussion_r512242228", "createdAt": "2020-10-26T20:18:45Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/test/java/io/grpc/xds/ServerXdsClientNewServerApiTest.java", "diffHunk": "@@ -0,0 +1,690 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static io.grpc.xds.XdsClientTestHelper.buildDiscoveryResponse;\n+import static io.grpc.xds.XdsClientTestHelper.buildListener;\n+import static io.grpc.xds.XdsClientTestHelper.buildRouteConfiguration;\n+import static io.grpc.xds.XdsClientTestHelper.buildVirtualHost;\n+import static org.mockito.AdditionalAnswers.delegatesTo;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.reset;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.google.protobuf.Any;\n+import com.google.protobuf.InvalidProtocolBufferException;\n+import com.google.protobuf.UInt32Value;\n+import io.envoyproxy.envoy.config.core.v3.CidrRange;\n+import io.envoyproxy.envoy.config.core.v3.SocketAddress;\n+import io.envoyproxy.envoy.config.core.v3.TrafficDirection;\n+import io.envoyproxy.envoy.config.core.v3.TransportSocket;\n+import io.envoyproxy.envoy.config.listener.v3.Filter;\n+import io.envoyproxy.envoy.config.listener.v3.FilterChain;\n+import io.envoyproxy.envoy.config.listener.v3.FilterChainMatch;\n+import io.envoyproxy.envoy.config.listener.v3.Listener;\n+import io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext;\n+import io.envoyproxy.envoy.service.discovery.v3.AggregatedDiscoveryServiceGrpc.AggregatedDiscoveryServiceImplBase;\n+import io.envoyproxy.envoy.service.discovery.v3.DiscoveryRequest;\n+import io.envoyproxy.envoy.service.discovery.v3.DiscoveryResponse;\n+import io.grpc.Context;\n+import io.grpc.Context.CancellationListener;\n+import io.grpc.ManagedChannel;\n+import io.grpc.Status;\n+import io.grpc.Status.Code;\n+import io.grpc.SynchronizationContext;\n+import io.grpc.inprocess.InProcessChannelBuilder;\n+import io.grpc.inprocess.InProcessServerBuilder;\n+import io.grpc.internal.BackoffPolicy;\n+import io.grpc.internal.FakeClock;\n+import io.grpc.internal.FakeClock.TaskFilter;\n+import io.grpc.stub.StreamObserver;\n+import io.grpc.testing.GrpcCleanupRule;\n+import io.grpc.xds.EnvoyProtoData.Node;\n+import io.grpc.xds.XdsClient.ListenerUpdate;\n+import io.grpc.xds.XdsClient.ListenerWatcher;\n+import io.grpc.xds.XdsClient.XdsChannel;\n+import io.grpc.xds.XdsClientImpl2.ResourceType;\n+import io.grpc.xds.internal.sds.CommonTlsContextTestsUtil;\n+import java.io.IOException;\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InOrder;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+/**\n+ * Tests for {@link XdsClientImpl2 for server side Listeners using newServerApi}.\n+ */\n+@RunWith(JUnit4.class)\n+public class ServerXdsClientNewServerApiTest {\n+\n+  private static final int PORT = 7000;\n+  private static final String LOCAL_IP = \"192.168.3.5\";\n+  private static final String INSTANCE_IP = \"192.168.3.7\";\n+  private static final String TYPE_URL_HCM =\n+      \"type.googleapis.com/\"\n+          + \"envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\";\n+\n+  private static final Node NODE = Node.newBuilder().build();\n+  private static final TaskFilter RPC_RETRY_TASK_FILTER =\n+      new TaskFilter() {\n+        @Override\n+        public boolean shouldAccept(Runnable command) {\n+          return command.toString().contains(XdsClientImpl2.RpcRetryTask.class.getSimpleName());\n+        }\n+      };\n+  private static final TaskFilter LISTENER_RESOURCE_FETCH_TIMEOUT_TASK_FILTER =\n+      new TaskFilter() {\n+        @Override\n+        public boolean shouldAccept(Runnable command) {\n+          return command.toString()\n+              .contains(XdsClientImpl2.ListenerResourceFetchTimeoutTask.class.getSimpleName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE1Mjc3Ng=="}, "originalCommit": {"oid": "1a176192b6586324e9ff24ff9d01e1e2c571de2c"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODgyOTU4OnYy", "diffSide": "RIGHT", "path": "xds/src/test/java/io/grpc/xds/ServerXdsClientNewServerApiTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNzo0NzowMVrOHobZmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNzo0NzowMVrOHobZmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE1NDAwOA==", "bodyText": "Do not reference to XdsClientImpl2, everything should be based on ServerXdsClient.", "url": "https://github.com/grpc/grpc-java/pull/7553#discussion_r512154008", "createdAt": "2020-10-26T17:47:01Z", "author": {"login": "voidzcy"}, "path": "xds/src/test/java/io/grpc/xds/ServerXdsClientNewServerApiTest.java", "diffHunk": "@@ -0,0 +1,690 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static io.grpc.xds.XdsClientTestHelper.buildDiscoveryResponse;\n+import static io.grpc.xds.XdsClientTestHelper.buildListener;\n+import static io.grpc.xds.XdsClientTestHelper.buildRouteConfiguration;\n+import static io.grpc.xds.XdsClientTestHelper.buildVirtualHost;\n+import static org.mockito.AdditionalAnswers.delegatesTo;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.reset;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.google.protobuf.Any;\n+import com.google.protobuf.InvalidProtocolBufferException;\n+import com.google.protobuf.UInt32Value;\n+import io.envoyproxy.envoy.config.core.v3.CidrRange;\n+import io.envoyproxy.envoy.config.core.v3.SocketAddress;\n+import io.envoyproxy.envoy.config.core.v3.TrafficDirection;\n+import io.envoyproxy.envoy.config.core.v3.TransportSocket;\n+import io.envoyproxy.envoy.config.listener.v3.Filter;\n+import io.envoyproxy.envoy.config.listener.v3.FilterChain;\n+import io.envoyproxy.envoy.config.listener.v3.FilterChainMatch;\n+import io.envoyproxy.envoy.config.listener.v3.Listener;\n+import io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext;\n+import io.envoyproxy.envoy.service.discovery.v3.AggregatedDiscoveryServiceGrpc.AggregatedDiscoveryServiceImplBase;\n+import io.envoyproxy.envoy.service.discovery.v3.DiscoveryRequest;\n+import io.envoyproxy.envoy.service.discovery.v3.DiscoveryResponse;\n+import io.grpc.Context;\n+import io.grpc.Context.CancellationListener;\n+import io.grpc.ManagedChannel;\n+import io.grpc.Status;\n+import io.grpc.Status.Code;\n+import io.grpc.SynchronizationContext;\n+import io.grpc.inprocess.InProcessChannelBuilder;\n+import io.grpc.inprocess.InProcessServerBuilder;\n+import io.grpc.internal.BackoffPolicy;\n+import io.grpc.internal.FakeClock;\n+import io.grpc.internal.FakeClock.TaskFilter;\n+import io.grpc.stub.StreamObserver;\n+import io.grpc.testing.GrpcCleanupRule;\n+import io.grpc.xds.EnvoyProtoData.Node;\n+import io.grpc.xds.XdsClient.ListenerUpdate;\n+import io.grpc.xds.XdsClient.ListenerWatcher;\n+import io.grpc.xds.XdsClient.XdsChannel;\n+import io.grpc.xds.XdsClientImpl2.ResourceType;\n+import io.grpc.xds.internal.sds.CommonTlsContextTestsUtil;\n+import java.io.IOException;\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InOrder;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+/**\n+ * Tests for {@link XdsClientImpl2 for server side Listeners using newServerApi}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a176192b6586324e9ff24ff9d01e1e2c571de2c"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODgzMDk3OnYy", "diffSide": "RIGHT", "path": "xds/src/test/java/io/grpc/xds/ServerXdsClientNewServerApiTest.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNzo0NzoxOVrOHobaYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMTo0NjoxNVrOHoobZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE1NDIwOA==", "bodyText": "Why the whole class is duplicated again? Why can't add new tests to ServerXdsClientTest?", "url": "https://github.com/grpc/grpc-java/pull/7553#discussion_r512154208", "createdAt": "2020-10-26T17:47:19Z", "author": {"login": "voidzcy"}, "path": "xds/src/test/java/io/grpc/xds/ServerXdsClientNewServerApiTest.java", "diffHunk": "@@ -0,0 +1,690 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static io.grpc.xds.XdsClientTestHelper.buildDiscoveryResponse;\n+import static io.grpc.xds.XdsClientTestHelper.buildListener;\n+import static io.grpc.xds.XdsClientTestHelper.buildRouteConfiguration;\n+import static io.grpc.xds.XdsClientTestHelper.buildVirtualHost;\n+import static org.mockito.AdditionalAnswers.delegatesTo;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.reset;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.google.protobuf.Any;\n+import com.google.protobuf.InvalidProtocolBufferException;\n+import com.google.protobuf.UInt32Value;\n+import io.envoyproxy.envoy.config.core.v3.CidrRange;\n+import io.envoyproxy.envoy.config.core.v3.SocketAddress;\n+import io.envoyproxy.envoy.config.core.v3.TrafficDirection;\n+import io.envoyproxy.envoy.config.core.v3.TransportSocket;\n+import io.envoyproxy.envoy.config.listener.v3.Filter;\n+import io.envoyproxy.envoy.config.listener.v3.FilterChain;\n+import io.envoyproxy.envoy.config.listener.v3.FilterChainMatch;\n+import io.envoyproxy.envoy.config.listener.v3.Listener;\n+import io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext;\n+import io.envoyproxy.envoy.service.discovery.v3.AggregatedDiscoveryServiceGrpc.AggregatedDiscoveryServiceImplBase;\n+import io.envoyproxy.envoy.service.discovery.v3.DiscoveryRequest;\n+import io.envoyproxy.envoy.service.discovery.v3.DiscoveryResponse;\n+import io.grpc.Context;\n+import io.grpc.Context.CancellationListener;\n+import io.grpc.ManagedChannel;\n+import io.grpc.Status;\n+import io.grpc.Status.Code;\n+import io.grpc.SynchronizationContext;\n+import io.grpc.inprocess.InProcessChannelBuilder;\n+import io.grpc.inprocess.InProcessServerBuilder;\n+import io.grpc.internal.BackoffPolicy;\n+import io.grpc.internal.FakeClock;\n+import io.grpc.internal.FakeClock.TaskFilter;\n+import io.grpc.stub.StreamObserver;\n+import io.grpc.testing.GrpcCleanupRule;\n+import io.grpc.xds.EnvoyProtoData.Node;\n+import io.grpc.xds.XdsClient.ListenerUpdate;\n+import io.grpc.xds.XdsClient.ListenerWatcher;\n+import io.grpc.xds.XdsClient.XdsChannel;\n+import io.grpc.xds.XdsClientImpl2.ResourceType;\n+import io.grpc.xds.internal.sds.CommonTlsContextTestsUtil;\n+import java.io.IOException;\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InOrder;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+/**\n+ * Tests for {@link XdsClientImpl2 for server side Listeners using newServerApi}.\n+ */\n+@RunWith(JUnit4.class)\n+public class ServerXdsClientNewServerApiTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a176192b6586324e9ff24ff9d01e1e2c571de2c"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI0MTgzMw==", "bodyText": "As mentioned elsewhere the class is set up (in setUp) with newServerApi=true in this case for all the tests. In the other file ServerXdsClientTest it is invoked with newServerApi=false and this whole file will eventually disappear when newServerApi=true is the only supported mode.", "url": "https://github.com/grpc/grpc-java/pull/7553#discussion_r512241833", "createdAt": "2020-10-26T20:18:05Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/test/java/io/grpc/xds/ServerXdsClientNewServerApiTest.java", "diffHunk": "@@ -0,0 +1,690 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static io.grpc.xds.XdsClientTestHelper.buildDiscoveryResponse;\n+import static io.grpc.xds.XdsClientTestHelper.buildListener;\n+import static io.grpc.xds.XdsClientTestHelper.buildRouteConfiguration;\n+import static io.grpc.xds.XdsClientTestHelper.buildVirtualHost;\n+import static org.mockito.AdditionalAnswers.delegatesTo;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.reset;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.google.protobuf.Any;\n+import com.google.protobuf.InvalidProtocolBufferException;\n+import com.google.protobuf.UInt32Value;\n+import io.envoyproxy.envoy.config.core.v3.CidrRange;\n+import io.envoyproxy.envoy.config.core.v3.SocketAddress;\n+import io.envoyproxy.envoy.config.core.v3.TrafficDirection;\n+import io.envoyproxy.envoy.config.core.v3.TransportSocket;\n+import io.envoyproxy.envoy.config.listener.v3.Filter;\n+import io.envoyproxy.envoy.config.listener.v3.FilterChain;\n+import io.envoyproxy.envoy.config.listener.v3.FilterChainMatch;\n+import io.envoyproxy.envoy.config.listener.v3.Listener;\n+import io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext;\n+import io.envoyproxy.envoy.service.discovery.v3.AggregatedDiscoveryServiceGrpc.AggregatedDiscoveryServiceImplBase;\n+import io.envoyproxy.envoy.service.discovery.v3.DiscoveryRequest;\n+import io.envoyproxy.envoy.service.discovery.v3.DiscoveryResponse;\n+import io.grpc.Context;\n+import io.grpc.Context.CancellationListener;\n+import io.grpc.ManagedChannel;\n+import io.grpc.Status;\n+import io.grpc.Status.Code;\n+import io.grpc.SynchronizationContext;\n+import io.grpc.inprocess.InProcessChannelBuilder;\n+import io.grpc.inprocess.InProcessServerBuilder;\n+import io.grpc.internal.BackoffPolicy;\n+import io.grpc.internal.FakeClock;\n+import io.grpc.internal.FakeClock.TaskFilter;\n+import io.grpc.stub.StreamObserver;\n+import io.grpc.testing.GrpcCleanupRule;\n+import io.grpc.xds.EnvoyProtoData.Node;\n+import io.grpc.xds.XdsClient.ListenerUpdate;\n+import io.grpc.xds.XdsClient.ListenerWatcher;\n+import io.grpc.xds.XdsClient.XdsChannel;\n+import io.grpc.xds.XdsClientImpl2.ResourceType;\n+import io.grpc.xds.internal.sds.CommonTlsContextTestsUtil;\n+import java.io.IOException;\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InOrder;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+/**\n+ * Tests for {@link XdsClientImpl2 for server side Listeners using newServerApi}.\n+ */\n+@RunWith(JUnit4.class)\n+public class ServerXdsClientNewServerApiTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE1NDIwOA=="}, "originalCommit": {"oid": "1a176192b6586324e9ff24ff9d01e1e2c571de2c"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMzNjQ3OQ==", "bodyText": "This is a very verbose way though, with a lot of duplicates. Gating an unreleased feature with environment variable should be pure implementation detail and removing the environment variable should not require change how the class is used/created. Also, you shouldn't re-test logics not related to the feature the env variable is gating, you'd at most need one or two extra test cases verifying the xDS requests it sends are based on the environment value. Otherwise, if you need to change some of the behaviors unrelated to what the env variable is gating for, you will need to change the corresponding tests in both places.", "url": "https://github.com/grpc/grpc-java/pull/7553#discussion_r512336479", "createdAt": "2020-10-26T23:52:58Z", "author": {"login": "voidzcy"}, "path": "xds/src/test/java/io/grpc/xds/ServerXdsClientNewServerApiTest.java", "diffHunk": "@@ -0,0 +1,690 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static io.grpc.xds.XdsClientTestHelper.buildDiscoveryResponse;\n+import static io.grpc.xds.XdsClientTestHelper.buildListener;\n+import static io.grpc.xds.XdsClientTestHelper.buildRouteConfiguration;\n+import static io.grpc.xds.XdsClientTestHelper.buildVirtualHost;\n+import static org.mockito.AdditionalAnswers.delegatesTo;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.reset;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.google.protobuf.Any;\n+import com.google.protobuf.InvalidProtocolBufferException;\n+import com.google.protobuf.UInt32Value;\n+import io.envoyproxy.envoy.config.core.v3.CidrRange;\n+import io.envoyproxy.envoy.config.core.v3.SocketAddress;\n+import io.envoyproxy.envoy.config.core.v3.TrafficDirection;\n+import io.envoyproxy.envoy.config.core.v3.TransportSocket;\n+import io.envoyproxy.envoy.config.listener.v3.Filter;\n+import io.envoyproxy.envoy.config.listener.v3.FilterChain;\n+import io.envoyproxy.envoy.config.listener.v3.FilterChainMatch;\n+import io.envoyproxy.envoy.config.listener.v3.Listener;\n+import io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext;\n+import io.envoyproxy.envoy.service.discovery.v3.AggregatedDiscoveryServiceGrpc.AggregatedDiscoveryServiceImplBase;\n+import io.envoyproxy.envoy.service.discovery.v3.DiscoveryRequest;\n+import io.envoyproxy.envoy.service.discovery.v3.DiscoveryResponse;\n+import io.grpc.Context;\n+import io.grpc.Context.CancellationListener;\n+import io.grpc.ManagedChannel;\n+import io.grpc.Status;\n+import io.grpc.Status.Code;\n+import io.grpc.SynchronizationContext;\n+import io.grpc.inprocess.InProcessChannelBuilder;\n+import io.grpc.inprocess.InProcessServerBuilder;\n+import io.grpc.internal.BackoffPolicy;\n+import io.grpc.internal.FakeClock;\n+import io.grpc.internal.FakeClock.TaskFilter;\n+import io.grpc.stub.StreamObserver;\n+import io.grpc.testing.GrpcCleanupRule;\n+import io.grpc.xds.EnvoyProtoData.Node;\n+import io.grpc.xds.XdsClient.ListenerUpdate;\n+import io.grpc.xds.XdsClient.ListenerWatcher;\n+import io.grpc.xds.XdsClient.XdsChannel;\n+import io.grpc.xds.XdsClientImpl2.ResourceType;\n+import io.grpc.xds.internal.sds.CommonTlsContextTestsUtil;\n+import java.io.IOException;\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InOrder;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+/**\n+ * Tests for {@link XdsClientImpl2 for server side Listeners using newServerApi}.\n+ */\n+@RunWith(JUnit4.class)\n+public class ServerXdsClientNewServerApiTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE1NDIwOA=="}, "originalCommit": {"oid": "1a176192b6586324e9ff24ff9d01e1e2c571de2c"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM0ODY2NA==", "bodyText": "This is not different from the duplication of tests in ServerXdsClientTest and XdsClientImplTestForListener. In that case the tests are the same but the class being tested is different (ServerXdsClient and XdsClientImpl2). In this PR the class is the same but constructed with newServerApi=true vs false.\nAlso for every test the DiscoveryRequest is different (it has a resource name vs empty resource in the old test). Once the newServerApi becomes the norm the old code will be removed and any code related to newServerApi==false will be removed which is easier with the current structure. I prefer this structure to make it easy to just remove the old code.", "url": "https://github.com/grpc/grpc-java/pull/7553#discussion_r512348664", "createdAt": "2020-10-27T00:36:27Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/test/java/io/grpc/xds/ServerXdsClientNewServerApiTest.java", "diffHunk": "@@ -0,0 +1,690 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static io.grpc.xds.XdsClientTestHelper.buildDiscoveryResponse;\n+import static io.grpc.xds.XdsClientTestHelper.buildListener;\n+import static io.grpc.xds.XdsClientTestHelper.buildRouteConfiguration;\n+import static io.grpc.xds.XdsClientTestHelper.buildVirtualHost;\n+import static org.mockito.AdditionalAnswers.delegatesTo;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.reset;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.google.protobuf.Any;\n+import com.google.protobuf.InvalidProtocolBufferException;\n+import com.google.protobuf.UInt32Value;\n+import io.envoyproxy.envoy.config.core.v3.CidrRange;\n+import io.envoyproxy.envoy.config.core.v3.SocketAddress;\n+import io.envoyproxy.envoy.config.core.v3.TrafficDirection;\n+import io.envoyproxy.envoy.config.core.v3.TransportSocket;\n+import io.envoyproxy.envoy.config.listener.v3.Filter;\n+import io.envoyproxy.envoy.config.listener.v3.FilterChain;\n+import io.envoyproxy.envoy.config.listener.v3.FilterChainMatch;\n+import io.envoyproxy.envoy.config.listener.v3.Listener;\n+import io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext;\n+import io.envoyproxy.envoy.service.discovery.v3.AggregatedDiscoveryServiceGrpc.AggregatedDiscoveryServiceImplBase;\n+import io.envoyproxy.envoy.service.discovery.v3.DiscoveryRequest;\n+import io.envoyproxy.envoy.service.discovery.v3.DiscoveryResponse;\n+import io.grpc.Context;\n+import io.grpc.Context.CancellationListener;\n+import io.grpc.ManagedChannel;\n+import io.grpc.Status;\n+import io.grpc.Status.Code;\n+import io.grpc.SynchronizationContext;\n+import io.grpc.inprocess.InProcessChannelBuilder;\n+import io.grpc.inprocess.InProcessServerBuilder;\n+import io.grpc.internal.BackoffPolicy;\n+import io.grpc.internal.FakeClock;\n+import io.grpc.internal.FakeClock.TaskFilter;\n+import io.grpc.stub.StreamObserver;\n+import io.grpc.testing.GrpcCleanupRule;\n+import io.grpc.xds.EnvoyProtoData.Node;\n+import io.grpc.xds.XdsClient.ListenerUpdate;\n+import io.grpc.xds.XdsClient.ListenerWatcher;\n+import io.grpc.xds.XdsClient.XdsChannel;\n+import io.grpc.xds.XdsClientImpl2.ResourceType;\n+import io.grpc.xds.internal.sds.CommonTlsContextTestsUtil;\n+import java.io.IOException;\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InOrder;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+/**\n+ * Tests for {@link XdsClientImpl2 for server side Listeners using newServerApi}.\n+ */\n+@RunWith(JUnit4.class)\n+public class ServerXdsClientNewServerApiTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE1NDIwOA=="}, "originalCommit": {"oid": "1a176192b6586324e9ff24ff9d01e1e2c571de2c"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM2NTA1Mw==", "bodyText": "XdsClientImplTestForListener is intended to be deleted. It has been not because the client side is still using XdsClientImpl2. Once all usages of XdsClientImpl2 are migrated, it will be deleted along with its tests (including XdsClientImplTestForListener).\nRegarding duplicates (tests for stream retry) in ClientXdsClientTest and ServerXdsClient, they are run by completely different codepaths and developed by different authors, so it's acceptable to have two sets of tests for the purpose of easy collaboration. Ideally, we should have a way to cover stream retry logics only once.\nBut here, you are writing two complete sets of tests for the same piece of logic. You will need to maintain both sets together when there are new changes. Since this is your own code and no one else uses it, I am fine if you are ok with the maintenance burden or you feel this is easier for you.", "url": "https://github.com/grpc/grpc-java/pull/7553#discussion_r512365053", "createdAt": "2020-10-27T01:37:28Z", "author": {"login": "voidzcy"}, "path": "xds/src/test/java/io/grpc/xds/ServerXdsClientNewServerApiTest.java", "diffHunk": "@@ -0,0 +1,690 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static io.grpc.xds.XdsClientTestHelper.buildDiscoveryResponse;\n+import static io.grpc.xds.XdsClientTestHelper.buildListener;\n+import static io.grpc.xds.XdsClientTestHelper.buildRouteConfiguration;\n+import static io.grpc.xds.XdsClientTestHelper.buildVirtualHost;\n+import static org.mockito.AdditionalAnswers.delegatesTo;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.reset;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.google.protobuf.Any;\n+import com.google.protobuf.InvalidProtocolBufferException;\n+import com.google.protobuf.UInt32Value;\n+import io.envoyproxy.envoy.config.core.v3.CidrRange;\n+import io.envoyproxy.envoy.config.core.v3.SocketAddress;\n+import io.envoyproxy.envoy.config.core.v3.TrafficDirection;\n+import io.envoyproxy.envoy.config.core.v3.TransportSocket;\n+import io.envoyproxy.envoy.config.listener.v3.Filter;\n+import io.envoyproxy.envoy.config.listener.v3.FilterChain;\n+import io.envoyproxy.envoy.config.listener.v3.FilterChainMatch;\n+import io.envoyproxy.envoy.config.listener.v3.Listener;\n+import io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext;\n+import io.envoyproxy.envoy.service.discovery.v3.AggregatedDiscoveryServiceGrpc.AggregatedDiscoveryServiceImplBase;\n+import io.envoyproxy.envoy.service.discovery.v3.DiscoveryRequest;\n+import io.envoyproxy.envoy.service.discovery.v3.DiscoveryResponse;\n+import io.grpc.Context;\n+import io.grpc.Context.CancellationListener;\n+import io.grpc.ManagedChannel;\n+import io.grpc.Status;\n+import io.grpc.Status.Code;\n+import io.grpc.SynchronizationContext;\n+import io.grpc.inprocess.InProcessChannelBuilder;\n+import io.grpc.inprocess.InProcessServerBuilder;\n+import io.grpc.internal.BackoffPolicy;\n+import io.grpc.internal.FakeClock;\n+import io.grpc.internal.FakeClock.TaskFilter;\n+import io.grpc.stub.StreamObserver;\n+import io.grpc.testing.GrpcCleanupRule;\n+import io.grpc.xds.EnvoyProtoData.Node;\n+import io.grpc.xds.XdsClient.ListenerUpdate;\n+import io.grpc.xds.XdsClient.ListenerWatcher;\n+import io.grpc.xds.XdsClient.XdsChannel;\n+import io.grpc.xds.XdsClientImpl2.ResourceType;\n+import io.grpc.xds.internal.sds.CommonTlsContextTestsUtil;\n+import java.io.IOException;\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InOrder;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+/**\n+ * Tests for {@link XdsClientImpl2 for server side Listeners using newServerApi}.\n+ */\n+@RunWith(JUnit4.class)\n+public class ServerXdsClientNewServerApiTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE1NDIwOA=="}, "originalCommit": {"oid": "1a176192b6586324e9ff24ff9d01e1e2c571de2c"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM2NzQ2MQ==", "bodyText": "Believe me, this will make it easy for us to fall back to the old API in case the new API doesn't work with the control plane. And if it works it shouldn't take any time to remove the old code.", "url": "https://github.com/grpc/grpc-java/pull/7553#discussion_r512367461", "createdAt": "2020-10-27T01:46:15Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/test/java/io/grpc/xds/ServerXdsClientNewServerApiTest.java", "diffHunk": "@@ -0,0 +1,690 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static io.grpc.xds.XdsClientTestHelper.buildDiscoveryResponse;\n+import static io.grpc.xds.XdsClientTestHelper.buildListener;\n+import static io.grpc.xds.XdsClientTestHelper.buildRouteConfiguration;\n+import static io.grpc.xds.XdsClientTestHelper.buildVirtualHost;\n+import static org.mockito.AdditionalAnswers.delegatesTo;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.reset;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.google.protobuf.Any;\n+import com.google.protobuf.InvalidProtocolBufferException;\n+import com.google.protobuf.UInt32Value;\n+import io.envoyproxy.envoy.config.core.v3.CidrRange;\n+import io.envoyproxy.envoy.config.core.v3.SocketAddress;\n+import io.envoyproxy.envoy.config.core.v3.TrafficDirection;\n+import io.envoyproxy.envoy.config.core.v3.TransportSocket;\n+import io.envoyproxy.envoy.config.listener.v3.Filter;\n+import io.envoyproxy.envoy.config.listener.v3.FilterChain;\n+import io.envoyproxy.envoy.config.listener.v3.FilterChainMatch;\n+import io.envoyproxy.envoy.config.listener.v3.Listener;\n+import io.envoyproxy.envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.CommonTlsContext;\n+import io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext;\n+import io.envoyproxy.envoy.service.discovery.v3.AggregatedDiscoveryServiceGrpc.AggregatedDiscoveryServiceImplBase;\n+import io.envoyproxy.envoy.service.discovery.v3.DiscoveryRequest;\n+import io.envoyproxy.envoy.service.discovery.v3.DiscoveryResponse;\n+import io.grpc.Context;\n+import io.grpc.Context.CancellationListener;\n+import io.grpc.ManagedChannel;\n+import io.grpc.Status;\n+import io.grpc.Status.Code;\n+import io.grpc.SynchronizationContext;\n+import io.grpc.inprocess.InProcessChannelBuilder;\n+import io.grpc.inprocess.InProcessServerBuilder;\n+import io.grpc.internal.BackoffPolicy;\n+import io.grpc.internal.FakeClock;\n+import io.grpc.internal.FakeClock.TaskFilter;\n+import io.grpc.stub.StreamObserver;\n+import io.grpc.testing.GrpcCleanupRule;\n+import io.grpc.xds.EnvoyProtoData.Node;\n+import io.grpc.xds.XdsClient.ListenerUpdate;\n+import io.grpc.xds.XdsClient.ListenerWatcher;\n+import io.grpc.xds.XdsClient.XdsChannel;\n+import io.grpc.xds.XdsClientImpl2.ResourceType;\n+import io.grpc.xds.internal.sds.CommonTlsContextTestsUtil;\n+import java.io.IOException;\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InOrder;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+/**\n+ * Tests for {@link XdsClientImpl2 for server side Listeners using newServerApi}.\n+ */\n+@RunWith(JUnit4.class)\n+public class ServerXdsClientNewServerApiTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE1NDIwOA=="}, "originalCommit": {"oid": "1a176192b6586324e9ff24ff9d01e1e2c571de2c"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODg3MDA3OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/XdsClientWrapperForServerSds.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNzo1NzowM1rOHobyww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDoxNDozMlrOHogpOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2MDQ1MQ==", "bodyText": "Why not define and read the environment variable inside ServerXdsClient? It would easier for testing (BTW, it is marked as VisibleForTesting, but I don't see it is ever used for testing). And once the feature is rolled out and the env variable can be deleted, the change will just be ServerXdsClient internally, no API/constructor change will be needed.", "url": "https://github.com/grpc/grpc-java/pull/7553#discussion_r512160451", "createdAt": "2020-10-26T17:57:03Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientWrapperForServerSds.java", "diffHunk": "@@ -68,6 +69,10 @@\n   private static final TimeServiceResource timeServiceResource =\n       new TimeServiceResource(\"GrpcServerXdsClient\");\n \n+  @VisibleForTesting\n+  static boolean experimentalNewServerApiEnvVar = Boolean.parseBoolean(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a176192b6586324e9ff24ff9d01e1e2c571de2c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIzOTkzMQ==", "bodyText": "Unit testing is easier where both modes can be unit tested without trying to set/unset the env variable in the test.", "url": "https://github.com/grpc/grpc-java/pull/7553#discussion_r512239931", "createdAt": "2020-10-26T20:14:32Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientWrapperForServerSds.java", "diffHunk": "@@ -68,6 +69,10 @@\n   private static final TimeServiceResource timeServiceResource =\n       new TimeServiceResource(\"GrpcServerXdsClient\");\n \n+  @VisibleForTesting\n+  static boolean experimentalNewServerApiEnvVar = Boolean.parseBoolean(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2MDQ1MQ=="}, "originalCommit": {"oid": "1a176192b6586324e9ff24ff9d01e1e2c571de2c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODk3OTEyOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/ServerXdsClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODoyNTozMVrOHoc2pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODo1OTo0NlrOHoeHzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE3NzgzMQ==", "bodyText": "15001 is fixed? Do you have a design for that?", "url": "https://github.com/grpc/grpc-java/pull/7553#discussion_r512177831", "createdAt": "2020-10-26T18:25:31Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/ServerXdsClient.java", "diffHunk": "@@ -99,12 +110,10 @@ private void updateNodeMetadataForListenerRequest(int port) {\n     if (node.getMetadata() != null) {\n       newMetadata.putAll(node.getMetadata());\n     }\n-    newMetadata.put(\"TRAFFICDIRECTOR_PROXYLESS\", \"1\");\n-    // TODO(sanjaypujare): eliminate usage of listening_addresses.\n-    EnvoyProtoData.Address listeningAddress =\n-        new EnvoyProtoData.Address(\"0.0.0.0\", port);\n-    node =\n-        node.toBuilder().setMetadata(newMetadata).addListeningAddresses(listeningAddress).build();\n+    newMetadata.put(\"TRAFFICDIRECTOR_INBOUND_INTERCEPTION_PORT\", \"15001\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a176192b6586324e9ff24ff9d01e1e2c571de2c"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE5ODYwNQ==", "bodyText": "This is the \"fallback\" case where we simulate the Envoy-like xDS API to talk to the TD and this is going to go away so there is no point in having a design. Once the newServerApi mode is shown to be tested in production and working then the fallback/legacy code will be removed. Just FYI: the control plane (TD in this case) just accepts the value the client had supplied in the DiscoveryRequest and uses the same value in the response. That's why you see hardcoded values in the main code and the response.", "url": "https://github.com/grpc/grpc-java/pull/7553#discussion_r512198605", "createdAt": "2020-10-26T18:59:46Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/ServerXdsClient.java", "diffHunk": "@@ -99,12 +110,10 @@ private void updateNodeMetadataForListenerRequest(int port) {\n     if (node.getMetadata() != null) {\n       newMetadata.putAll(node.getMetadata());\n     }\n-    newMetadata.put(\"TRAFFICDIRECTOR_PROXYLESS\", \"1\");\n-    // TODO(sanjaypujare): eliminate usage of listening_addresses.\n-    EnvoyProtoData.Address listeningAddress =\n-        new EnvoyProtoData.Address(\"0.0.0.0\", port);\n-    node =\n-        node.toBuilder().setMetadata(newMetadata).addListeningAddresses(listeningAddress).build();\n+    newMetadata.put(\"TRAFFICDIRECTOR_INBOUND_INTERCEPTION_PORT\", \"15001\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE3NzgzMQ=="}, "originalCommit": {"oid": "1a176192b6586324e9ff24ff9d01e1e2c571de2c"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2240, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}