{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyMjc5ODAx", "number": 7400, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxOTozNjowNlrOEjvqRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMzoyNTo1MVrOElJNgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTE2NDg2OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxOTozNjowNlrOHSRgbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxOTozNjowNlrOHSRgbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkyMzI0Ng==", "bodyText": "This EDS-only codepath will be deleted in #7391.", "url": "https://github.com/grpc/grpc-java/pull/7400#discussion_r488923246", "createdAt": "2020-09-15T19:36:06Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java", "diffHunk": "@@ -129,8 +128,10 @@ public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n       xdsClientPool = attributes.get(XdsAttributes.XDS_CLIENT_POOL);\n       if (xdsClientPool == null) {\n         final BootstrapInfo bootstrapInfo;\n+        final XdsChannel channel;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "612b791d9596c9ee41b0cdcf19974a2183b33568"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTE3MDk2OnYy", "diffSide": "LEFT", "path": "xds/src/main/java/io/grpc/xds/XdsClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxOTozNzoxMlrOHSRkPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxOTozNzoxMlrOHSRkPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkyNDIyMA==", "bodyText": "More cleanup to be done to put RefCountedXdsClientObjectPool into its own file.", "url": "https://github.com/grpc/grpc-java/pull/7400#discussion_r488924220", "createdAt": "2020-09-15T19:37:12Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsClient.java", "diffHunk": "@@ -687,8 +623,4 @@ boolean isUseProtocolV3() {\n       return useProtocolV3;\n     }\n   }\n-\n-  interface XdsClientPoolFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "612b791d9596c9ee41b0cdcf19974a2183b33568"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTcyODgzOnYy", "diffSide": "RIGHT", "path": "xds/src/test/java/io/grpc/xds/XdsChannelFactoryTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMjo0ODozMFrOHT4GAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNzozNTo0OVrOHUWFCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYwNDAzMg==", "bodyText": "You should also check\nserver1 with experimentalV3SupportEnvVar = true\nand\nserver2 with experimentalV3SupportEnvVar = false\nstill do not support v3.", "url": "https://github.com/grpc/grpc-java/pull/7400#discussion_r490604032", "createdAt": "2020-09-17T22:48:30Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/test/java/io/grpc/xds/XdsChannelFactoryTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.junit.Assert.fail;\n+\n+import io.grpc.xds.Bootstrapper.ChannelCreds;\n+import io.grpc.xds.Bootstrapper.ServerInfo;\n+import io.grpc.xds.XdsClient.XdsChannel;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * Tests for {@link XdsChannelFactory}.\n+ */\n+@RunWith(JUnit4.class)\n+public class XdsChannelFactoryTest {\n+\n+  private final XdsChannelFactory channelFactory = XdsChannelFactory.getInstance();\n+  private final List<XdsChannel> channels = new ArrayList<>();\n+  private ServerInfo server1;  // google_default\n+  private ServerInfo server2;  // plaintext, v3\n+  private ServerInfo server3;  // unsupported\n+\n+  @Before\n+  public void setUp() {\n+    ChannelCreds googleDefault = new ChannelCreds(\"google_default\", null);\n+    ChannelCreds insecure = new ChannelCreds(\"insecure\", null);\n+    ChannelCreds unsupported = new ChannelCreds(\"unsupported\", null);\n+    server1 = new ServerInfo(\"server1.com\", Collections.singletonList(googleDefault),\n+        Collections.<String>emptyList());\n+    server2 = new ServerInfo(\"server2.com\", Collections.singletonList(insecure),\n+        Collections.singletonList(\"xds_v3\"));\n+    server3 = new ServerInfo(\"server4.com\", Collections.singletonList(unsupported),\n+        Collections.<String>emptyList());\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    for (XdsChannel channel : channels) {\n+      channel.getManagedChannel().shutdown();\n+    }\n+  }\n+\n+  @Test\n+  public void failToCreateChannel_unsupportedChannelCreds() {\n+    try {\n+      createChannel(server3);\n+      fail(\"Should have thrown\");\n+    } catch (XdsInitializationException expected) {\n+    }\n+  }\n+\n+  @Test\n+  public void defaultUseV2ProtocolL() throws XdsInitializationException {\n+    XdsChannel channel = createChannel(server1);\n+    assertThat(channel.isUseProtocolV3()).isFalse();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee89f3e6c2bbecf7c92463d710610cfb69bbb468"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA5NTMwNA==", "bodyText": "Hmm... Doesn't need to be that throughout, right? It makes tests noisy to test trivial things deeply.\n\nserver1 with experimentalV3SupportEnvVar = true and server2 with experimentalV3SupportEnvVar = false\n\nThis really just tests the functionality of the environment variable, which is a temporary gate. IMO, we shouldn't bother testing it. Unit tests can also introduces bugs, so if something is trivial in implementation, we won't bother write tests for it.", "url": "https://github.com/grpc/grpc-java/pull/7400#discussion_r491095304", "createdAt": "2020-09-18T17:35:49Z", "author": {"login": "voidzcy"}, "path": "xds/src/test/java/io/grpc/xds/XdsChannelFactoryTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.junit.Assert.fail;\n+\n+import io.grpc.xds.Bootstrapper.ChannelCreds;\n+import io.grpc.xds.Bootstrapper.ServerInfo;\n+import io.grpc.xds.XdsClient.XdsChannel;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * Tests for {@link XdsChannelFactory}.\n+ */\n+@RunWith(JUnit4.class)\n+public class XdsChannelFactoryTest {\n+\n+  private final XdsChannelFactory channelFactory = XdsChannelFactory.getInstance();\n+  private final List<XdsChannel> channels = new ArrayList<>();\n+  private ServerInfo server1;  // google_default\n+  private ServerInfo server2;  // plaintext, v3\n+  private ServerInfo server3;  // unsupported\n+\n+  @Before\n+  public void setUp() {\n+    ChannelCreds googleDefault = new ChannelCreds(\"google_default\", null);\n+    ChannelCreds insecure = new ChannelCreds(\"insecure\", null);\n+    ChannelCreds unsupported = new ChannelCreds(\"unsupported\", null);\n+    server1 = new ServerInfo(\"server1.com\", Collections.singletonList(googleDefault),\n+        Collections.<String>emptyList());\n+    server2 = new ServerInfo(\"server2.com\", Collections.singletonList(insecure),\n+        Collections.singletonList(\"xds_v3\"));\n+    server3 = new ServerInfo(\"server4.com\", Collections.singletonList(unsupported),\n+        Collections.<String>emptyList());\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    for (XdsChannel channel : channels) {\n+      channel.getManagedChannel().shutdown();\n+    }\n+  }\n+\n+  @Test\n+  public void failToCreateChannel_unsupportedChannelCreds() {\n+    try {\n+      createChannel(server3);\n+      fail(\"Should have thrown\");\n+    } catch (XdsInitializationException expected) {\n+    }\n+  }\n+\n+  @Test\n+  public void defaultUseV2ProtocolL() throws XdsInitializationException {\n+    XdsChannel channel = createChannel(server1);\n+    assertThat(channel.isUseProtocolV3()).isFalse();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYwNDAzMg=="}, "originalCommit": {"oid": "ee89f3e6c2bbecf7c92463d710610cfb69bbb468"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzgzNjgxOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/XdsChannelFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMzoyNTo1MVrOHUehsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMzo1Mjo0NFrOHUe0VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIzMzcxMw==", "bodyText": "Might as well throw XdsInitializationException?", "url": "https://github.com/grpc/grpc-java/pull/7400#discussion_r491233713", "createdAt": "2020-09-18T23:25:51Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/XdsChannelFactory.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.alts.GoogleDefaultChannelBuilder;\n+import io.grpc.xds.Bootstrapper.ChannelCreds;\n+import io.grpc.xds.Bootstrapper.ServerInfo;\n+import io.grpc.xds.XdsClient.XdsChannel;\n+import io.grpc.xds.XdsLogger.XdsLogLevel;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Factory for creating channels to xDS severs.\n+ */\n+abstract class XdsChannelFactory {\n+  @VisibleForTesting\n+  static boolean experimentalV3SupportEnvVar = Boolean.parseBoolean(\n+      System.getenv(\"GRPC_XDS_EXPERIMENTAL_V3_SUPPORT\"));\n+\n+  private static final String XDS_V3_SERVER_FEATURE = \"xds_v3\";\n+  private static final XdsChannelFactory DEFAULT_INSTANCE = new XdsChannelFactory() {\n+    /**\n+     * Creates a channel to the first server in the given list.\n+     */\n+    @Override\n+    XdsChannel createChannel(List<ServerInfo> servers) throws XdsInitializationException {\n+      checkArgument(!servers.isEmpty(), \"No management server provided.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "612b791d9596c9ee41b0cdcf19974a2183b33568"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIzODQ4NA==", "bodyText": "Sure. Fixed.", "url": "https://github.com/grpc/grpc-java/pull/7400#discussion_r491238484", "createdAt": "2020-09-18T23:52:44Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsChannelFactory.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.alts.GoogleDefaultChannelBuilder;\n+import io.grpc.xds.Bootstrapper.ChannelCreds;\n+import io.grpc.xds.Bootstrapper.ServerInfo;\n+import io.grpc.xds.XdsClient.XdsChannel;\n+import io.grpc.xds.XdsLogger.XdsLogLevel;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Factory for creating channels to xDS severs.\n+ */\n+abstract class XdsChannelFactory {\n+  @VisibleForTesting\n+  static boolean experimentalV3SupportEnvVar = Boolean.parseBoolean(\n+      System.getenv(\"GRPC_XDS_EXPERIMENTAL_V3_SUPPORT\"));\n+\n+  private static final String XDS_V3_SERVER_FEATURE = \"xds_v3\";\n+  private static final XdsChannelFactory DEFAULT_INSTANCE = new XdsChannelFactory() {\n+    /**\n+     * Creates a channel to the first server in the given list.\n+     */\n+    @Override\n+    XdsChannel createChannel(List<ServerInfo> servers) throws XdsInitializationException {\n+      checkArgument(!servers.isEmpty(), \"No management server provided.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIzMzcxMw=="}, "originalCommit": {"oid": "612b791d9596c9ee41b0cdcf19974a2183b33568"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2329, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}