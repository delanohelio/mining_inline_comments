{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNjY5Njcz", "number": 6596, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMDoyNjo1OVrODXTRxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwODozOTo1OFrODXcnRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzU5Njg0OnYy", "diffSide": "RIGHT", "path": "netty/src/test/java/io/grpc/netty/NettyClientHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMDoyNjo1OVrOFcjIkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMDoyNjo1OVrOFcjIkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ4MDA4MQ==", "bodyText": "thanks for the fix! it looks like this should test logRef.get()?", "url": "https://github.com/grpc/grpc-java/pull/6596#discussion_r365480081", "createdAt": "2020-01-11T00:26:59Z", "author": {"login": "creamsoup"}, "path": "netty/src/test/java/io/grpc/netty/NettyClientHandlerTest.java", "diffHunk": "@@ -459,6 +466,37 @@ public void run() {\n     assertTrue(b.get());\n   }\n \n+  @Test\n+  public void receivedGoAway_enhanceYourCalmShouldLogDebugData() throws Exception {\n+    final AtomicReference<LogRecord> logRef = new AtomicReference<>();\n+    Handler handler = new Handler() {\n+      @Override\n+      public void publish(LogRecord record) {\n+        logRef.set(record);\n+      }\n+\n+      @Override\n+      public void flush() {\n+      }\n+\n+      @Override\n+      public void close() throws SecurityException {\n+      }\n+    };\n+    Logger logger = Logger.getLogger(NettyClientHandler.class.getName());\n+    try {\n+      logger.addHandler(handler);\n+      enqueue(newCreateStreamCommand(grpcHeaders, streamTransportState));\n+      channelRead(goAwayFrame(0, 11 /* Enhance your calm */,\n+            Unpooled.copiedBuffer(\"this is a test\", UTF_8)));\n+      assertNotNull(logRef);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a52c067af7d43559427652f992bdb1f7042f683"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzY3Mjg5OnYy", "diffSide": "RIGHT", "path": "netty/src/test/java/io/grpc/netty/NettyClientHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMjoxNzo0NVrOFcj0mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMjoxNzo0NVrOFcj0mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ5MTM1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Unpooled.copiedBuffer(\"this is a test\", UTF_8)));\n          \n          \n            \n                      Unpooled.copiedBuffer(\"this is a test\", UTF_8)));", "url": "https://github.com/grpc/grpc-java/pull/6596#discussion_r365491354", "createdAt": "2020-01-11T02:17:45Z", "author": {"login": "creamsoup"}, "path": "netty/src/test/java/io/grpc/netty/NettyClientHandlerTest.java", "diffHunk": "@@ -459,6 +465,37 @@ public void run() {\n     assertTrue(b.get());\n   }\n \n+  @Test\n+  public void receivedGoAway_enhanceYourCalmShouldLogDebugData() throws Exception {\n+    final AtomicReference<LogRecord> logRef = new AtomicReference<>();\n+    Handler handler = new Handler() {\n+      @Override\n+      public void publish(LogRecord record) {\n+        logRef.set(record);\n+      }\n+\n+      @Override\n+      public void flush() {\n+      }\n+\n+      @Override\n+      public void close() throws SecurityException {\n+      }\n+    };\n+    Logger logger = Logger.getLogger(NettyClientHandler.class.getName());\n+    try {\n+      logger.addHandler(handler);\n+      enqueue(newCreateStreamCommand(grpcHeaders, streamTransportState));\n+      channelRead(goAwayFrame(0, 11 /* Enhance your calm */,\n+            Unpooled.copiedBuffer(\"this is a test\", UTF_8)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcfdeea195e1b1a570546e73c90c153d9132c203"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzY3MzI2OnYy", "diffSide": "RIGHT", "path": "netty/src/test/java/io/grpc/netty/NettyClientHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMjoxODowM1rOFcj0xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMjoxODowM1rOFcj0xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ5MTM5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          .contains(\"Debug data: this is a test\"));\n          \n          \n            \n                      .contains(\"Debug data: this is a test\"));", "url": "https://github.com/grpc/grpc-java/pull/6596#discussion_r365491396", "createdAt": "2020-01-11T02:18:03Z", "author": {"login": "creamsoup"}, "path": "netty/src/test/java/io/grpc/netty/NettyClientHandlerTest.java", "diffHunk": "@@ -459,6 +465,37 @@ public void run() {\n     assertTrue(b.get());\n   }\n \n+  @Test\n+  public void receivedGoAway_enhanceYourCalmShouldLogDebugData() throws Exception {\n+    final AtomicReference<LogRecord> logRef = new AtomicReference<>();\n+    Handler handler = new Handler() {\n+      @Override\n+      public void publish(LogRecord record) {\n+        logRef.set(record);\n+      }\n+\n+      @Override\n+      public void flush() {\n+      }\n+\n+      @Override\n+      public void close() throws SecurityException {\n+      }\n+    };\n+    Logger logger = Logger.getLogger(NettyClientHandler.class.getName());\n+    try {\n+      logger.addHandler(handler);\n+      enqueue(newCreateStreamCommand(grpcHeaders, streamTransportState));\n+      channelRead(goAwayFrame(0, 11 /* Enhance your calm */,\n+            Unpooled.copiedBuffer(\"this is a test\", UTF_8)));\n+      assertNotNull(logRef.get());\n+      assertTrue(MessageFormat.format(logRef.get().getMessage(), logRef.get().getParameters())\n+              .contains(\"Debug data: this is a test\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcfdeea195e1b1a570546e73c90c153d9132c203"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTEyNjQ3OnYy", "diffSide": "RIGHT", "path": "netty/src/test/java/io/grpc/netty/NettyClientHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwODozOTo1OFrOFcvyTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwODozOTo1OFrOFcvyTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY4NzM3NA==", "bodyText": "Can you delete this empty line?", "url": "https://github.com/grpc/grpc-java/pull/6596#discussion_r365687374", "createdAt": "2020-01-13T08:39:58Z", "author": {"login": "voidzcy"}, "path": "netty/src/test/java/io/grpc/netty/NettyClientHandlerTest.java", "diffHunk": "@@ -84,10 +84,16 @@\n import io.netty.handler.codec.http2.Http2Stream;\n import io.netty.util.AsciiString;\n import java.io.InputStream;\n+import java.text.MessageFormat;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Queue;\n import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.logging.Handler;\n+import java.util.logging.LogRecord;\n+import java.util.logging.Logger;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1986f85bc742fa346ae46c4f3cea48e7df528bf"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3050, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}