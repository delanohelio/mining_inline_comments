{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0NDc5NzIw", "number": 7526, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMjoyNzoyNlrOEvhv0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMjoyNzoyNlrOEvhv0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjcxNDQyOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/internal/certprovider/ZatarCertificateProviderProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMjoyNzoyNlrOHkj5Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMzo0NjoxOVrOHklg-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA5ODgzNA==", "bodyText": "These can be private?", "url": "https://github.com/grpc/grpc-java/pull/7526#discussion_r508098834", "createdAt": "2020-10-19T22:27:26Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/internal/certprovider/ZatarCertificateProviderProvider.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.certprovider;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import io.grpc.internal.JsonUtil;\n+import io.grpc.internal.TimeProvider;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+/**\n+ * Provider of {@link ZatarCertificateProvider}s.\n+ */\n+final class ZatarCertificateProviderProvider implements CertificateProviderProvider {\n+\n+  private static final String DIRECTORY_KEY = \"directory\";\n+  private static final String CERT_FILE_KEY = \"certificate-file\";\n+  private static final String KEY_FILE_KEY = \"private-key-file\";\n+  private static final String ROOT_FILE_KEY = \"ca-certificate-file\";\n+  private static final String REFRESH_INTERVAL_KEY = \"refresh-interval\";\n+\n+  @VisibleForTesting static final long REFRESH_INTERVAL_DEFAULT = 600L;\n+\n+\n+  static final String ZATAR_PROVIDER_NAME = \"gke-cas-certs\";\n+\n+  static {\n+    CertificateProviderRegistry.getInstance()\n+        .register(\n+            new ZatarCertificateProviderProvider(\n+                ZatarCertificateProvider.Factory.getInstance(),\n+                ScheduledExecutorServiceFactory.DEFAULT_INSTANCE,\n+                TimeProvider.SYSTEM_TIME_PROVIDER));\n+  }\n+\n+  final ZatarCertificateProvider.Factory zatarCertificateProviderFactory;\n+  final ScheduledExecutorServiceFactory scheduledExecutorServiceFactory;\n+  final TimeProvider timeProvider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b86d7452330827d03b2c5ecb209795040133d75"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEyNTQzNA==", "bodyText": "done", "url": "https://github.com/grpc/grpc-java/pull/7526#discussion_r508125434", "createdAt": "2020-10-19T23:46:19Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/internal/certprovider/ZatarCertificateProviderProvider.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.certprovider;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import io.grpc.internal.JsonUtil;\n+import io.grpc.internal.TimeProvider;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+/**\n+ * Provider of {@link ZatarCertificateProvider}s.\n+ */\n+final class ZatarCertificateProviderProvider implements CertificateProviderProvider {\n+\n+  private static final String DIRECTORY_KEY = \"directory\";\n+  private static final String CERT_FILE_KEY = \"certificate-file\";\n+  private static final String KEY_FILE_KEY = \"private-key-file\";\n+  private static final String ROOT_FILE_KEY = \"ca-certificate-file\";\n+  private static final String REFRESH_INTERVAL_KEY = \"refresh-interval\";\n+\n+  @VisibleForTesting static final long REFRESH_INTERVAL_DEFAULT = 600L;\n+\n+\n+  static final String ZATAR_PROVIDER_NAME = \"gke-cas-certs\";\n+\n+  static {\n+    CertificateProviderRegistry.getInstance()\n+        .register(\n+            new ZatarCertificateProviderProvider(\n+                ZatarCertificateProvider.Factory.getInstance(),\n+                ScheduledExecutorServiceFactory.DEFAULT_INSTANCE,\n+                TimeProvider.SYSTEM_TIME_PROVIDER));\n+  }\n+\n+  final ZatarCertificateProvider.Factory zatarCertificateProviderFactory;\n+  final ScheduledExecutorServiceFactory scheduledExecutorServiceFactory;\n+  final TimeProvider timeProvider;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA5ODgzNA=="}, "originalCommit": {"oid": "3b86d7452330827d03b2c5ecb209795040133d75"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2219, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}