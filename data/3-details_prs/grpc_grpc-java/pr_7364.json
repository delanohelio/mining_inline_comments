{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0MTAyMjMx", "number": 7364, "title": "xds: implement SslContextProviderSupplier to prevent creds leakage", "bodyText": "", "createdAt": "2020-08-26T19:14:22Z", "url": "https://github.com/grpc/grpc-java/pull/7364", "merged": true, "mergeCommit": {"oid": "5f9d000a61fe4c304f05004d2fcc6a7f96cf5ab5"}, "closed": true, "closedAt": "2020-09-08T17:12:56Z", "author": {"login": "sanjaypujare"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCwu8SAH2gAyNDc0MTAyMjMxOjAyZTdhZWQ2M2E4YTVlNjgwZmVjYzYyMWZmYjRlZjk1ZDAwM2E2Y2Y=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdG6PpfAFqTQ4NDMxMDczOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "02e7aed63a8a5e680fecc621ffb4ef95d003a6cf", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/02e7aed63a8a5e680fecc621ffb4ef95d003a6cf", "committedDate": "2020-08-26T19:11:48Z", "message": "xds: implement SslContextProviderSupplier to prevent creds leakage"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5MDMxMzE5", "url": "https://github.com/grpc/grpc-java/pull/7364#pullrequestreview-479031319", "createdAt": "2020-08-31T23:16:27Z", "commit": {"oid": "02e7aed63a8a5e680fecc621ffb4ef95d003a6cf"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzoxNjoyN1rOHKNWEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzo1NDoyNVrOHLB6fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ2NjQ0OA==", "bodyText": "I don't think verifying this test only flag is necessary. Just verifying any resource that need be released is released at the right time  as you already did is sufficient.", "url": "https://github.com/grpc/grpc-java/pull/7364#discussion_r480466448", "createdAt": "2020-08-31T23:16:27Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/SslContextProviderSupplier.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.sds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;\n+import io.netty.handler.ssl.SslContext;\n+\n+/**\n+ * Enables the CDS policy to initialize this object with the received {@link UpstreamTlsContext} &\n+ * communicate it to the consumer i.e. {@link SdsProtocolNegotiators.ClientSdsProtocolNegotiator}\n+ * to lazily evaluate the {@link SslContextProvider}. The supplier prevents credentials leakage in\n+ * cases where the user is not using xDS credentials but the CDS policy contains a non-default\n+ * {@link UpstreamTlsContext}.\n+ */\n+public final class SslContextProviderSupplier implements Closeable {\n+\n+  private final UpstreamTlsContext upstreamTlsContext;\n+  private final TlsContextManager tlsContextManager;\n+  private SslContextProvider sslContextProvider;\n+  private boolean shutdown;\n+\n+  public SslContextProviderSupplier(\n+      UpstreamTlsContext upstreamTlsContext, TlsContextManager tlsContextManager) {\n+    this.upstreamTlsContext = upstreamTlsContext;\n+    this.tlsContextManager = tlsContextManager;\n+  }\n+\n+  public UpstreamTlsContext getUpstreamTlsContext() {\n+    return upstreamTlsContext;\n+  }\n+\n+  @VisibleForTesting public boolean isShutdown() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02e7aed63a8a5e680fecc621ffb4ef95d003a6cf"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyNzc0Mw==", "bodyText": "If the ref-count is  incremented more than once, how it will be released by close()?", "url": "https://github.com/grpc/grpc-java/pull/7364#discussion_r481327743", "createdAt": "2020-09-01T17:54:25Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/SslContextProviderSupplier.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.sds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;\n+import io.netty.handler.ssl.SslContext;\n+\n+/**\n+ * Enables the CDS policy to initialize this object with the received {@link UpstreamTlsContext} &\n+ * communicate it to the consumer i.e. {@link SdsProtocolNegotiators.ClientSdsProtocolNegotiator}\n+ * to lazily evaluate the {@link SslContextProvider}. The supplier prevents credentials leakage in\n+ * cases where the user is not using xDS credentials but the CDS policy contains a non-default\n+ * {@link UpstreamTlsContext}.\n+ */\n+public final class SslContextProviderSupplier implements Closeable {\n+\n+  private final UpstreamTlsContext upstreamTlsContext;\n+  private final TlsContextManager tlsContextManager;\n+  private SslContextProvider sslContextProvider;\n+  private boolean shutdown;\n+\n+  public SslContextProviderSupplier(\n+      UpstreamTlsContext upstreamTlsContext, TlsContextManager tlsContextManager) {\n+    this.upstreamTlsContext = upstreamTlsContext;\n+    this.tlsContextManager = tlsContextManager;\n+  }\n+\n+  public UpstreamTlsContext getUpstreamTlsContext() {\n+    return upstreamTlsContext;\n+  }\n+\n+  @VisibleForTesting public boolean isShutdown() {\n+    return shutdown;\n+  }\n+\n+  /** Updates SslContext via the passed callback. */\n+  public synchronized void updateSslContext(final SslContextProvider.Callback callback) {\n+    checkNotNull(callback, \"callback\");\n+    if (sslContextProvider == null && !shutdown) {\n+      sslContextProvider =\n+          tlsContextManager.findOrCreateClientSslContextProvider(upstreamTlsContext);\n+    }\n+    // we want to increment the ref-count so call findOrCreate again...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02e7aed63a8a5e680fecc621ffb4ef95d003a6cf"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMzU5NjYy", "url": "https://github.com/grpc/grpc-java/pull/7364#pullrequestreview-481359662", "createdAt": "2020-09-02T22:33:13Z", "commit": {"oid": "02e7aed63a8a5e680fecc621ffb4ef95d003a6cf"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjozMzoxM1rOHMMVXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzowMzozOVrOHMOckg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU0NzAzNg==", "bodyText": "Well, things like\nsupplier.close();   \nassertThat(supplier.isShutdown()).isTrue();\nis just testing implementation details, but does not test any behavior.\nTo test\nif (sslContextProvider == null && !shutdown) {\n   sslContextProvider =\n          tlsContextManager.findOrCreateClientSslContextProvider(upstreamTlsContext);\nYou should verify the behavior difference between\ncalling updateSslContext() only\nand\ncalling supplier.close() then updateSslContext().", "url": "https://github.com/grpc/grpc-java/pull/7364#discussion_r482547036", "createdAt": "2020-09-02T22:33:13Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/SslContextProviderSupplier.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.sds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;\n+import io.netty.handler.ssl.SslContext;\n+\n+/**\n+ * Enables the CDS policy to initialize this object with the received {@link UpstreamTlsContext} &\n+ * communicate it to the consumer i.e. {@link SdsProtocolNegotiators.ClientSdsProtocolNegotiator}\n+ * to lazily evaluate the {@link SslContextProvider}. The supplier prevents credentials leakage in\n+ * cases where the user is not using xDS credentials but the CDS policy contains a non-default\n+ * {@link UpstreamTlsContext}.\n+ */\n+public final class SslContextProviderSupplier implements Closeable {\n+\n+  private final UpstreamTlsContext upstreamTlsContext;\n+  private final TlsContextManager tlsContextManager;\n+  private SslContextProvider sslContextProvider;\n+  private boolean shutdown;\n+\n+  public SslContextProviderSupplier(\n+      UpstreamTlsContext upstreamTlsContext, TlsContextManager tlsContextManager) {\n+    this.upstreamTlsContext = upstreamTlsContext;\n+    this.tlsContextManager = tlsContextManager;\n+  }\n+\n+  public UpstreamTlsContext getUpstreamTlsContext() {\n+    return upstreamTlsContext;\n+  }\n+\n+  @VisibleForTesting public boolean isShutdown() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ2NjQ0OA=="}, "originalCommit": {"oid": "02e7aed63a8a5e680fecc621ffb4ef95d003a6cf"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU4MDM1MA==", "bodyText": "findOrCreate twice doesn't look elegant, why not just always do findOrCreate() once and no-op for close()? Then you don't even need sslContextProvider and maybe shutdown fields.", "url": "https://github.com/grpc/grpc-java/pull/7364#discussion_r482580350", "createdAt": "2020-09-02T23:01:44Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/SslContextProviderSupplier.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.sds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;\n+import io.netty.handler.ssl.SslContext;\n+\n+/**\n+ * Enables the CDS policy to initialize this object with the received {@link UpstreamTlsContext} &\n+ * communicate it to the consumer i.e. {@link SdsProtocolNegotiators.ClientSdsProtocolNegotiator}\n+ * to lazily evaluate the {@link SslContextProvider}. The supplier prevents credentials leakage in\n+ * cases where the user is not using xDS credentials but the CDS policy contains a non-default\n+ * {@link UpstreamTlsContext}.\n+ */\n+public final class SslContextProviderSupplier implements Closeable {\n+\n+  private final UpstreamTlsContext upstreamTlsContext;\n+  private final TlsContextManager tlsContextManager;\n+  private SslContextProvider sslContextProvider;\n+  private boolean shutdown;\n+\n+  public SslContextProviderSupplier(\n+      UpstreamTlsContext upstreamTlsContext, TlsContextManager tlsContextManager) {\n+    this.upstreamTlsContext = upstreamTlsContext;\n+    this.tlsContextManager = tlsContextManager;\n+  }\n+\n+  public UpstreamTlsContext getUpstreamTlsContext() {\n+    return upstreamTlsContext;\n+  }\n+\n+  @VisibleForTesting public boolean isShutdown() {\n+    return shutdown;\n+  }\n+\n+  /** Updates SslContext via the passed callback. */\n+  public synchronized void updateSslContext(final SslContextProvider.Callback callback) {\n+    checkNotNull(callback, \"callback\");\n+    if (sslContextProvider == null && !shutdown) {\n+      sslContextProvider =\n+          tlsContextManager.findOrCreateClientSslContextProvider(upstreamTlsContext);\n+    }\n+    // we want to increment the ref-count so call findOrCreate again...", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyNzc0Mw=="}, "originalCommit": {"oid": "02e7aed63a8a5e680fecc621ffb4ef95d003a6cf"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU4MTY1MA==", "bodyText": "So if shutdown is true, you still findOrCreate() and addCallback()?", "url": "https://github.com/grpc/grpc-java/pull/7364#discussion_r482581650", "createdAt": "2020-09-02T23:03:39Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/SslContextProviderSupplier.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.sds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;\n+import io.netty.handler.ssl.SslContext;\n+\n+/**\n+ * Enables the CDS policy to initialize this object with the received {@link UpstreamTlsContext} &\n+ * communicate it to the consumer i.e. {@link SdsProtocolNegotiators.ClientSdsProtocolNegotiator}\n+ * to lazily evaluate the {@link SslContextProvider}. The supplier prevents credentials leakage in\n+ * cases where the user is not using xDS credentials but the CDS policy contains a non-default\n+ * {@link UpstreamTlsContext}.\n+ */\n+public final class SslContextProviderSupplier implements Closeable {\n+\n+  private final UpstreamTlsContext upstreamTlsContext;\n+  private final TlsContextManager tlsContextManager;\n+  private SslContextProvider sslContextProvider;\n+  private boolean shutdown;\n+\n+  public SslContextProviderSupplier(\n+      UpstreamTlsContext upstreamTlsContext, TlsContextManager tlsContextManager) {\n+    this.upstreamTlsContext = upstreamTlsContext;\n+    this.tlsContextManager = tlsContextManager;\n+  }\n+\n+  public UpstreamTlsContext getUpstreamTlsContext() {\n+    return upstreamTlsContext;\n+  }\n+\n+  @VisibleForTesting public boolean isShutdown() {\n+    return shutdown;\n+  }\n+\n+  /** Updates SslContext via the passed callback. */\n+  public synchronized void updateSslContext(final SslContextProvider.Callback callback) {\n+    checkNotNull(callback, \"callback\");\n+    if (sslContextProvider == null && !shutdown) {\n+      sslContextProvider =\n+          tlsContextManager.findOrCreateClientSslContextProvider(upstreamTlsContext);\n+    }\n+    // we want to increment the ref-count so call findOrCreate again...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02e7aed63a8a5e680fecc621ffb4ef95d003a6cf"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12bb7653af266016a0f690395b3134556929233a", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/12bb7653af266016a0f690395b3134556929233a", "committedDate": "2020-09-03T01:13:45Z", "message": "remove test-only code of isShutdown"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMjg1NzQw", "url": "https://github.com/grpc/grpc-java/pull/7364#pullrequestreview-482285740", "createdAt": "2020-09-04T00:35:39Z", "commit": {"oid": "12bb7653af266016a0f690395b3134556929233a"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwMDozNTozOVrOHM7s-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwMTo1NDowNlrOHM84Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMyMzEyOQ==", "bodyText": "I would either return or throw if shutdown is true. I think we should not accept new update after shutdown if we follow the pattern of ManagedChannel, Transport and especially LoadBalancer shutdown.", "url": "https://github.com/grpc/grpc-java/pull/7364#discussion_r483323129", "createdAt": "2020-09-04T00:35:39Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/SslContextProviderSupplier.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.sds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;\n+import io.netty.handler.ssl.SslContext;\n+\n+/**\n+ * Enables the CDS policy to initialize this object with the received {@link UpstreamTlsContext} &\n+ * communicate it to the consumer i.e. {@link SdsProtocolNegotiators.ClientSdsProtocolNegotiator}\n+ * to lazily evaluate the {@link SslContextProvider}. The supplier prevents credentials leakage in\n+ * cases where the user is not using xDS credentials but the CDS policy contains a non-default\n+ * {@link UpstreamTlsContext}.\n+ */\n+public final class SslContextProviderSupplier implements Closeable {\n+\n+  private final UpstreamTlsContext upstreamTlsContext;\n+  private final TlsContextManager tlsContextManager;\n+  private SslContextProvider sslContextProvider;\n+  private boolean shutdown;\n+\n+  public SslContextProviderSupplier(\n+      UpstreamTlsContext upstreamTlsContext, TlsContextManager tlsContextManager) {\n+    this.upstreamTlsContext = upstreamTlsContext;\n+    this.tlsContextManager = tlsContextManager;\n+  }\n+\n+  public UpstreamTlsContext getUpstreamTlsContext() {\n+    return upstreamTlsContext;\n+  }\n+\n+  @VisibleForTesting public boolean isShutdown() {\n+    return shutdown;\n+  }\n+\n+  /** Updates SslContext via the passed callback. */\n+  public synchronized void updateSslContext(final SslContextProvider.Callback callback) {\n+    checkNotNull(callback, \"callback\");\n+    if (sslContextProvider == null && !shutdown) {\n+      sslContextProvider =\n+          tlsContextManager.findOrCreateClientSslContextProvider(upstreamTlsContext);\n+    }\n+    // we want to increment the ref-count so call findOrCreate again...", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU4MTY1MA=="}, "originalCommit": {"oid": "02e7aed63a8a5e680fecc621ffb4ef95d003a6cf"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMyMzU1Ng==", "bodyText": "Now I understood. I can't think of an obvious better alternative so I'm okay with as-is.", "url": "https://github.com/grpc/grpc-java/pull/7364#discussion_r483323556", "createdAt": "2020-09-04T00:37:19Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/SslContextProviderSupplier.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.sds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.xds.EnvoyServerProtoData.UpstreamTlsContext;\n+import io.netty.handler.ssl.SslContext;\n+\n+/**\n+ * Enables the CDS policy to initialize this object with the received {@link UpstreamTlsContext} &\n+ * communicate it to the consumer i.e. {@link SdsProtocolNegotiators.ClientSdsProtocolNegotiator}\n+ * to lazily evaluate the {@link SslContextProvider}. The supplier prevents credentials leakage in\n+ * cases where the user is not using xDS credentials but the CDS policy contains a non-default\n+ * {@link UpstreamTlsContext}.\n+ */\n+public final class SslContextProviderSupplier implements Closeable {\n+\n+  private final UpstreamTlsContext upstreamTlsContext;\n+  private final TlsContextManager tlsContextManager;\n+  private SslContextProvider sslContextProvider;\n+  private boolean shutdown;\n+\n+  public SslContextProviderSupplier(\n+      UpstreamTlsContext upstreamTlsContext, TlsContextManager tlsContextManager) {\n+    this.upstreamTlsContext = upstreamTlsContext;\n+    this.tlsContextManager = tlsContextManager;\n+  }\n+\n+  public UpstreamTlsContext getUpstreamTlsContext() {\n+    return upstreamTlsContext;\n+  }\n+\n+  @VisibleForTesting public boolean isShutdown() {\n+    return shutdown;\n+  }\n+\n+  /** Updates SslContext via the passed callback. */\n+  public synchronized void updateSslContext(final SslContextProvider.Callback callback) {\n+    checkNotNull(callback, \"callback\");\n+    if (sslContextProvider == null && !shutdown) {\n+      sslContextProvider =\n+          tlsContextManager.findOrCreateClientSslContextProvider(upstreamTlsContext);\n+    }\n+    // we want to increment the ref-count so call findOrCreate again...", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyNzc0Mw=="}, "originalCommit": {"oid": "02e7aed63a8a5e680fecc621ffb4ef95d003a6cf"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM0MjM1OQ==", "bodyText": "Is the argument of updateSecret  nullable? Otherwise it should be a mock.", "url": "https://github.com/grpc/grpc-java/pull/7364#discussion_r483342359", "createdAt": "2020-09-04T01:54:06Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/test/java/io/grpc/xds/internal/sds/SslContextProviderSupplierTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.sds;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static io.grpc.xds.internal.sds.CommonTlsContextTestsUtil.CA_PEM_FILE;\n+import static io.grpc.xds.internal.sds.CommonTlsContextTestsUtil.CLIENT_KEY_FILE;\n+import static io.grpc.xds.internal.sds.CommonTlsContextTestsUtil.CLIENT_PEM_FILE;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.reset;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+import io.grpc.xds.EnvoyServerProtoData;\n+import java.util.concurrent.Executor;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+\n+/**\n+ * Unit tests for {@link SslContextProviderSupplier}.\n+ */\n+@RunWith(JUnit4.class)\n+public class SslContextProviderSupplierTest {\n+\n+  @Mock private TlsContextManager mockTlsContextManager;\n+  private SslContextProviderSupplier supplier;\n+  private SslContextProvider mockSslContextProvider;\n+  private EnvoyServerProtoData.UpstreamTlsContext upstreamTlsContext;\n+\n+  @Before\n+  public void setUp() {\n+    MockitoAnnotations.initMocks(this);\n+  }\n+\n+  private void prepareSupplier() {\n+    upstreamTlsContext =\n+            CommonTlsContextTestsUtil.buildUpstreamTlsContextFromFilenames(\n+                    CLIENT_KEY_FILE, CLIENT_PEM_FILE, CA_PEM_FILE);\n+    mockSslContextProvider = mock(SslContextProvider.class);\n+    doReturn(mockSslContextProvider)\n+            .when(mockTlsContextManager)\n+            .findOrCreateClientSslContextProvider(eq(upstreamTlsContext));\n+    SslContextProvider.Callback mockCallback = mock(SslContextProvider.Callback.class);\n+    Executor mockExecutor = mock(Executor.class);\n+    doReturn(mockExecutor).when(mockCallback).getExecutor();\n+    supplier = new SslContextProviderSupplier(upstreamTlsContext, mockTlsContextManager);\n+    supplier.updateSslContext(mockCallback);\n+  }\n+\n+  @Test\n+  public void get_updateSecret() {\n+    prepareSupplier();\n+    verify(mockTlsContextManager, times(2))\n+        .findOrCreateClientSslContextProvider(eq(upstreamTlsContext));\n+    verify(mockTlsContextManager, times(0))\n+        .releaseClientSslContextProvider(any(SslContextProvider.class));\n+    ArgumentCaptor<SslContextProvider.Callback> callbackCaptor = ArgumentCaptor.forClass(null);\n+    verify(mockSslContextProvider, times(1)).addCallback(callbackCaptor.capture());\n+    SslContextProvider.Callback capturedCallback = callbackCaptor.getValue();\n+    assertThat(capturedCallback).isNotNull();\n+    capturedCallback.updateSecret(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12bb7653af266016a0f690395b3134556929233a"}, "originalPosition": 83}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58d875ea07c76ab9da63b5519738acbd93a7ba34", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/58d875ea07c76ab9da63b5519738acbd93a7ba34", "committedDate": "2020-09-08T15:45:45Z", "message": "address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MzEwNzM5", "url": "https://github.com/grpc/grpc-java/pull/7364#pullrequestreview-484310739", "createdAt": "2020-09-08T16:32:23Z", "commit": {"oid": "58d875ea07c76ab9da63b5519738acbd93a7ba34"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4208, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}