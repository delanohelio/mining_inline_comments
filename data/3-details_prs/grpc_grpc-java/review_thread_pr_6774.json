{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxMDQzMjA4", "number": 6774, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMDowMDo1NFrODjl8Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMDowNjoyMFrODjmCtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjQ4MzYyOnYy", "diffSide": "RIGHT", "path": "netty/src/main/java/io/grpc/netty/NettyClientStream.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMDowMDo1NFrOFvfU6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMDoyNToyNFrOFvgCpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM0MDY0OA==", "bodyText": "I'm not sure if it's possible that the compiler can optimize this contains()?: expression and replace it with InternalKnownTransport.NETTY directly before shadow plugin does its job. My local interop test did not show it happened.", "url": "https://github.com/grpc/grpc-java/pull/6774#discussion_r385340648", "createdAt": "2020-02-27T20:00:54Z", "author": {"login": "dapengzhang0"}, "path": "netty/src/main/java/io/grpc/netty/NettyClientStream.java", "diffHunk": "@@ -54,7 +54,9 @@\n  */\n class NettyClientStream extends AbstractClientStream {\n   private static final InternalMethodDescriptor methodDescriptorAccessor =\n-      new InternalMethodDescriptor(InternalKnownTransport.NETTY);\n+      new InternalMethodDescriptor(\n+          NettyClientTransport.class.getName().contains(\"grpc.netty.shaded\")\n+              ? InternalKnownTransport.NETTY_SHADED : InternalKnownTransport.NETTY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "672b1b47bb4310539a294d0cf451b2615f0516af"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM0NDAzOQ==", "bodyText": "No, it won't be able to rework this string. You could also just do \"shaded\" as another option. But all those variations should be fine.", "url": "https://github.com/grpc/grpc-java/pull/6774#discussion_r385344039", "createdAt": "2020-02-27T20:07:50Z", "author": {"login": "ejona86"}, "path": "netty/src/main/java/io/grpc/netty/NettyClientStream.java", "diffHunk": "@@ -54,7 +54,9 @@\n  */\n class NettyClientStream extends AbstractClientStream {\n   private static final InternalMethodDescriptor methodDescriptorAccessor =\n-      new InternalMethodDescriptor(InternalKnownTransport.NETTY);\n+      new InternalMethodDescriptor(\n+          NettyClientTransport.class.getName().contains(\"grpc.netty.shaded\")\n+              ? InternalKnownTransport.NETTY_SHADED : InternalKnownTransport.NETTY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM0MDY0OA=="}, "originalCommit": {"oid": "672b1b47bb4310539a294d0cf451b2615f0516af"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM1MjM1Ng==", "bodyText": "Just \"shaded\" will produce false positive if grpc as a whole is shaded by the application.", "url": "https://github.com/grpc/grpc-java/pull/6774#discussion_r385352356", "createdAt": "2020-02-27T20:25:24Z", "author": {"login": "dapengzhang0"}, "path": "netty/src/main/java/io/grpc/netty/NettyClientStream.java", "diffHunk": "@@ -54,7 +54,9 @@\n  */\n class NettyClientStream extends AbstractClientStream {\n   private static final InternalMethodDescriptor methodDescriptorAccessor =\n-      new InternalMethodDescriptor(InternalKnownTransport.NETTY);\n+      new InternalMethodDescriptor(\n+          NettyClientTransport.class.getName().contains(\"grpc.netty.shaded\")\n+              ? InternalKnownTransport.NETTY_SHADED : InternalKnownTransport.NETTY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM0MDY0OA=="}, "originalCommit": {"oid": "672b1b47bb4310539a294d0cf451b2615f0516af"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjUwMDM4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/grpc/MethodDescriptor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMDowNjoyMFrOFvffSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMDoyMzowMVrOFvf-ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM0MzMwNw==", "bodyText": "This will break Bazel; use a literal 2.\nThe comment alludes to why this was done, but even if you thought that no longer applied the comment should have been removed.", "url": "https://github.com/grpc/grpc-java/pull/6774#discussion_r385343307", "createdAt": "2020-02-27T20:06:20Z", "author": {"login": "ejona86"}, "path": "api/src/main/java/io/grpc/MethodDescriptor.java", "diffHunk": "@@ -51,7 +51,8 @@\n \n   // Must be set to InternalKnownTransport.values().length\n   // Not referenced to break the dependency.\n-  private final AtomicReferenceArray<Object> rawMethodNames = new AtomicReferenceArray<>(1);\n+  private final AtomicReferenceArray<Object> rawMethodNames =\n+      new AtomicReferenceArray<>(InternalKnownTransport.values().length);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "672b1b47bb4310539a294d0cf451b2615f0516af"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM0ODkwMg==", "bodyText": "InternalKnownTransport is part of grpc-api so Bazel seems not impacted. It breaks blaze though.", "url": "https://github.com/grpc/grpc-java/pull/6774#discussion_r385348902", "createdAt": "2020-02-27T20:17:56Z", "author": {"login": "dapengzhang0"}, "path": "api/src/main/java/io/grpc/MethodDescriptor.java", "diffHunk": "@@ -51,7 +51,8 @@\n \n   // Must be set to InternalKnownTransport.values().length\n   // Not referenced to break the dependency.\n-  private final AtomicReferenceArray<Object> rawMethodNames = new AtomicReferenceArray<>(1);\n+  private final AtomicReferenceArray<Object> rawMethodNames =\n+      new AtomicReferenceArray<>(InternalKnownTransport.values().length);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM0MzMwNw=="}, "originalCommit": {"oid": "672b1b47bb4310539a294d0cf451b2615f0516af"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM1MTI5MQ==", "bodyText": "Just noticed there were already comments on this field\n// Must be set to InternalKnownTransport.values().length\n// Not referenced to break the dependency.\nprivate final AtomicReferenceArray<Object> rawMethodNames =", "url": "https://github.com/grpc/grpc-java/pull/6774#discussion_r385351291", "createdAt": "2020-02-27T20:23:01Z", "author": {"login": "dapengzhang0"}, "path": "api/src/main/java/io/grpc/MethodDescriptor.java", "diffHunk": "@@ -51,7 +51,8 @@\n \n   // Must be set to InternalKnownTransport.values().length\n   // Not referenced to break the dependency.\n-  private final AtomicReferenceArray<Object> rawMethodNames = new AtomicReferenceArray<>(1);\n+  private final AtomicReferenceArray<Object> rawMethodNames =\n+      new AtomicReferenceArray<>(InternalKnownTransport.values().length);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM0MzMwNw=="}, "originalCommit": {"oid": "672b1b47bb4310539a294d0cf451b2615f0516af"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2873, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}