{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwMTU4OTEw", "number": 7339, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODowNjowOFrOEbr0Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODowODoyOVrOEbr28g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDY0ODgyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/grpc/MethodDescriptor.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODowNjowOFrOHFwg_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwODoxNjoyM1rOHHBBFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc5OTgwNQ==", "bodyText": "I don't think we should pre-compute this.", "url": "https://github.com/grpc/grpc-java/pull/7339#discussion_r475799805", "createdAt": "2020-08-24T18:06:08Z", "author": {"login": "ejona86"}, "path": "api/src/main/java/io/grpc/MethodDescriptor.java", "diffHunk": "@@ -225,6 +226,7 @@ private MethodDescriptor(\n     this.type = Preconditions.checkNotNull(type, \"type\");\n     this.fullMethodName = Preconditions.checkNotNull(fullMethodName, \"fullMethodName\");\n     this.serviceName = extractFullServiceName(fullMethodName);\n+    this.methodName = extractMethodName(fullMethodName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1c2ac119dd2ea6da2277783588af7b6a6bc24e8"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgyODAwNA==", "bodyText": "Does this really matter? This should be a fairly cheap operation.", "url": "https://github.com/grpc/grpc-java/pull/7339#discussion_r475828004", "createdAt": "2020-08-24T18:56:38Z", "author": {"login": "voidzcy"}, "path": "api/src/main/java/io/grpc/MethodDescriptor.java", "diffHunk": "@@ -225,6 +226,7 @@ private MethodDescriptor(\n     this.type = Preconditions.checkNotNull(type, \"type\");\n     this.fullMethodName = Preconditions.checkNotNull(fullMethodName, \"fullMethodName\");\n     this.serviceName = extractFullServiceName(fullMethodName);\n+    this.methodName = extractMethodName(fullMethodName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc5OTgwNQ=="}, "originalCommit": {"oid": "c1c2ac119dd2ea6da2277783588af7b6a6bc24e8"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgzMDIzMw==", "bodyText": "If it's so cheap we shouldn't mind doing it every time. Really, I don't think we want the startup initialization overhead and memory usage for something that may never be used (consider Android for example).", "url": "https://github.com/grpc/grpc-java/pull/7339#discussion_r475830233", "createdAt": "2020-08-24T19:00:54Z", "author": {"login": "ejona86"}, "path": "api/src/main/java/io/grpc/MethodDescriptor.java", "diffHunk": "@@ -225,6 +226,7 @@ private MethodDescriptor(\n     this.type = Preconditions.checkNotNull(type, \"type\");\n     this.fullMethodName = Preconditions.checkNotNull(fullMethodName, \"fullMethodName\");\n     this.serviceName = extractFullServiceName(fullMethodName);\n+    this.methodName = extractMethodName(fullMethodName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc5OTgwNQ=="}, "originalCommit": {"oid": "c1c2ac119dd2ea6da2277783588af7b6a6bc24e8"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzExODc0MQ==", "bodyText": "My concern is that then every caller will need to cache it, but alas. Done.", "url": "https://github.com/grpc/grpc-java/pull/7339#discussion_r477118741", "createdAt": "2020-08-26T08:16:23Z", "author": {"login": "pkern"}, "path": "api/src/main/java/io/grpc/MethodDescriptor.java", "diffHunk": "@@ -225,6 +226,7 @@ private MethodDescriptor(\n     this.type = Preconditions.checkNotNull(type, \"type\");\n     this.fullMethodName = Preconditions.checkNotNull(fullMethodName, \"fullMethodName\");\n     this.serviceName = extractFullServiceName(fullMethodName);\n+    this.methodName = extractMethodName(fullMethodName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc5OTgwNQ=="}, "originalCommit": {"oid": "c1c2ac119dd2ea6da2277783588af7b6a6bc24e8"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDY1MDA5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/grpc/MethodDescriptor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODowNjozNlrOHFwh7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwODoxNjoyN1rOHHBBQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgwMDA0NA==", "bodyText": "We should add something to the name to make users think whether they want the full name or this one. \"simple\" or \"bare\" or similar. Ditto for extract method.\nI'm not sure if we have any such term today, as method name is normally fully qualified. Maybe another language has such a thing?", "url": "https://github.com/grpc/grpc-java/pull/7339#discussion_r475800044", "createdAt": "2020-08-24T18:06:36Z", "author": {"login": "ejona86"}, "path": "api/src/main/java/io/grpc/MethodDescriptor.java", "diffHunk": "@@ -262,6 +264,17 @@ public String getServiceName() {\n     return serviceName;\n   }\n \n+  /**\n+   * A convenience method for {@code extractMethodName(getFullMethodName())}.\n+   *\n+   * @since 1.32.0\n+   */\n+  @Nullable\n+  @ExperimentalApi(\"https://github.com/grpc/grpc-java/issues/5635\")\n+  public String getMethodName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1c2ac119dd2ea6da2277783588af7b6a6bc24e8"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzExODc4Ng==", "bodyText": "I am not aware of another language having solved this properly. The naming confusion is very real. Generally the full(y qualified) method name gets its own name (also here: getFullMethodName()) and the other one is just MethodName. But from the options I picked Bare for now. Let me know what you think.", "url": "https://github.com/grpc/grpc-java/pull/7339#discussion_r477118786", "createdAt": "2020-08-26T08:16:27Z", "author": {"login": "pkern"}, "path": "api/src/main/java/io/grpc/MethodDescriptor.java", "diffHunk": "@@ -262,6 +264,17 @@ public String getServiceName() {\n     return serviceName;\n   }\n \n+  /**\n+   * A convenience method for {@code extractMethodName(getFullMethodName())}.\n+   *\n+   * @since 1.32.0\n+   */\n+  @Nullable\n+  @ExperimentalApi(\"https://github.com/grpc/grpc-java/issues/5635\")\n+  public String getMethodName() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgwMDA0NA=="}, "originalCommit": {"oid": "c1c2ac119dd2ea6da2277783588af7b6a6bc24e8"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDY1NTg2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/grpc/MethodDescriptor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODowODoyOVrOHFwlpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwODoxNjozMVrOHHBBaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgwMDk5Nw==", "bodyText": "ExperimentalApi", "url": "https://github.com/grpc/grpc-java/pull/7339#discussion_r475800997", "createdAt": "2020-08-24T18:08:29Z", "author": {"login": "ejona86"}, "path": "api/src/main/java/io/grpc/MethodDescriptor.java", "diffHunk": "@@ -398,6 +411,21 @@ public static String extractFullServiceName(String fullMethodName) {\n     return fullMethodName.substring(0, index);\n   }\n \n+  /**\n+   * Extract the method name out of a fully qualified method name. May return {@code null}\n+   * if the input is malformed, but you cannot rely on it for the validity of the input.\n+   *\n+   * @since 1.32.0\n+   */\n+  @Nullable\n+  public static String extractMethodName(String fullMethodName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1c2ac119dd2ea6da2277783588af7b6a6bc24e8"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzExODgyNw==", "bodyText": "Done.", "url": "https://github.com/grpc/grpc-java/pull/7339#discussion_r477118827", "createdAt": "2020-08-26T08:16:31Z", "author": {"login": "pkern"}, "path": "api/src/main/java/io/grpc/MethodDescriptor.java", "diffHunk": "@@ -398,6 +411,21 @@ public static String extractFullServiceName(String fullMethodName) {\n     return fullMethodName.substring(0, index);\n   }\n \n+  /**\n+   * Extract the method name out of a fully qualified method name. May return {@code null}\n+   * if the input is malformed, but you cannot rely on it for the validity of the input.\n+   *\n+   * @since 1.32.0\n+   */\n+  @Nullable\n+  public static String extractMethodName(String fullMethodName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgwMDk5Nw=="}, "originalCommit": {"oid": "c1c2ac119dd2ea6da2277783588af7b6a6bc24e8"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2477, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}