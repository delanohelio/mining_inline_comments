{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUxMzgzMjYz", "number": 7232, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjo0ODoyNVrOERIelA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMzowMDowOFrOERP4vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDAwMTQ4OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/internal/sts/StsCredentials.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjo0ODoyNVrOG1rUvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjo0ODoyNVrOG1rUvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkzNzUzMg==", "bodyText": "It might be easier to read if this field is moved to the DefaultHttpTransportFactory class.", "url": "https://github.com/grpc/grpc-java/pull/7232#discussion_r458937532", "createdAt": "2020-07-22T16:48:25Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/internal/sts/StsCredentials.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.sts;\n+\n+import com.google.api.client.http.GenericUrl;\n+import com.google.api.client.http.HttpContent;\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpRequestFactory;\n+import com.google.api.client.http.HttpResponse;\n+import com.google.api.client.http.HttpStatusCodes;\n+import com.google.api.client.http.HttpTransport;\n+import com.google.api.client.http.javanet.NetHttpTransport;\n+import com.google.api.client.http.json.JsonHttpContent;\n+import com.google.api.client.json.JsonObjectParser;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.client.util.GenericData;\n+import com.google.auth.http.HttpTransportFactory;\n+import com.google.auth.oauth2.AccessToken;\n+import com.google.auth.oauth2.GoogleCredentials;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.io.Files;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+// TODO(sanjaypujare): replace with the official implementation from google-auth once ready\n+/** Implementation of OAuth2 Token Exchange as per https://tools.ietf.org/html/rfc8693. */\n+public class StsCredentials extends GoogleCredentials {\n+  private static final long serialVersionUID = 6647041424685484932L;\n+\n+  private static final HttpTransportFactory defaultHttpTransportFactory =\n+      new DefaultHttpTransportFactory();\n+  private static final HttpTransport netHttpTransport = new NetHttpTransport();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "875201ff0ea1dc88b6fda9bb0960c0a7e21380ba"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDAwMjI3OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/internal/sts/StsCredentials.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjo0ODo0MFrOG1rVOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjo1MjozOVrOG129XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkzNzY1Nw==", "bodyText": "Do you want final class?", "url": "https://github.com/grpc/grpc-java/pull/7232#discussion_r458937657", "createdAt": "2020-07-22T16:48:40Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/internal/sts/StsCredentials.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.sts;\n+\n+import com.google.api.client.http.GenericUrl;\n+import com.google.api.client.http.HttpContent;\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpRequestFactory;\n+import com.google.api.client.http.HttpResponse;\n+import com.google.api.client.http.HttpStatusCodes;\n+import com.google.api.client.http.HttpTransport;\n+import com.google.api.client.http.javanet.NetHttpTransport;\n+import com.google.api.client.http.json.JsonHttpContent;\n+import com.google.api.client.json.JsonObjectParser;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.client.util.GenericData;\n+import com.google.auth.http.HttpTransportFactory;\n+import com.google.auth.oauth2.AccessToken;\n+import com.google.auth.oauth2.GoogleCredentials;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.io.Files;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+// TODO(sanjaypujare): replace with the official implementation from google-auth once ready\n+/** Implementation of OAuth2 Token Exchange as per https://tools.ietf.org/html/rfc8693. */\n+public class StsCredentials extends GoogleCredentials {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "875201ff0ea1dc88b6fda9bb0960c0a7e21380ba"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEyODE1Nw==", "bodyText": "done", "url": "https://github.com/grpc/grpc-java/pull/7232#discussion_r459128157", "createdAt": "2020-07-22T22:52:39Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/internal/sts/StsCredentials.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.sts;\n+\n+import com.google.api.client.http.GenericUrl;\n+import com.google.api.client.http.HttpContent;\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpRequestFactory;\n+import com.google.api.client.http.HttpResponse;\n+import com.google.api.client.http.HttpStatusCodes;\n+import com.google.api.client.http.HttpTransport;\n+import com.google.api.client.http.javanet.NetHttpTransport;\n+import com.google.api.client.http.json.JsonHttpContent;\n+import com.google.api.client.json.JsonObjectParser;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.client.util.GenericData;\n+import com.google.auth.http.HttpTransportFactory;\n+import com.google.auth.oauth2.AccessToken;\n+import com.google.auth.oauth2.GoogleCredentials;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.io.Files;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+// TODO(sanjaypujare): replace with the official implementation from google-auth once ready\n+/** Implementation of OAuth2 Token Exchange as per https://tools.ietf.org/html/rfc8693. */\n+public class StsCredentials extends GoogleCredentials {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkzNzY1Nw=="}, "originalCommit": {"oid": "875201ff0ea1dc88b6fda9bb0960c0a7e21380ba"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDA2MjE3OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/internal/sts/StsCredentials.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzowNDo1OFrOG1r7Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjo0NTozM1rOG12zpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0NzQyMw==", "bodyText": "Surround this line with try{} and next line with finally{}?", "url": "https://github.com/grpc/grpc-java/pull/7232#discussion_r458947423", "createdAt": "2020-07-22T17:04:58Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/internal/sts/StsCredentials.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.sts;\n+\n+import com.google.api.client.http.GenericUrl;\n+import com.google.api.client.http.HttpContent;\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpRequestFactory;\n+import com.google.api.client.http.HttpResponse;\n+import com.google.api.client.http.HttpStatusCodes;\n+import com.google.api.client.http.HttpTransport;\n+import com.google.api.client.http.javanet.NetHttpTransport;\n+import com.google.api.client.http.json.JsonHttpContent;\n+import com.google.api.client.json.JsonObjectParser;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.client.util.GenericData;\n+import com.google.auth.http.HttpTransportFactory;\n+import com.google.auth.oauth2.AccessToken;\n+import com.google.auth.oauth2.GoogleCredentials;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.io.Files;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+// TODO(sanjaypujare): replace with the official implementation from google-auth once ready\n+/** Implementation of OAuth2 Token Exchange as per https://tools.ietf.org/html/rfc8693. */\n+public class StsCredentials extends GoogleCredentials {\n+  private static final long serialVersionUID = 6647041424685484932L;\n+\n+  private static final HttpTransportFactory defaultHttpTransportFactory =\n+      new DefaultHttpTransportFactory();\n+  private static final HttpTransport netHttpTransport = new NetHttpTransport();\n+  private static final String CLOUD_PLATFORM_SCOPE =\n+      \"https://www.googleapis.com/auth/cloud-platform\";\n+  private final String sourceCredentialsFileLocation;\n+  private final String identityTokenEndpoint;\n+  private final String audience;\n+  private transient HttpTransportFactory transportFactory;\n+\n+  private StsCredentials(\n+      String identityTokenEndpoint,\n+      String audience,\n+      String sourceCredentialsFileLocation,\n+      HttpTransportFactory transportFactory) {\n+    this.identityTokenEndpoint = identityTokenEndpoint;\n+    this.audience = audience;\n+    this.sourceCredentialsFileLocation = sourceCredentialsFileLocation;\n+    this.transportFactory = transportFactory;\n+  }\n+\n+  /**\n+   * Creates an StsCredentials.\n+   *\n+   * @param identityTokenEndpoint  URL of the token exchange service to use.\n+   * @param audience Audience to use in the STS request.\n+   * @param sourceCredentialsFileLocation file-system location that contains the\n+   *                                      source creds e.g. JWT contents.\n+   */\n+  public static StsCredentials create(\n+      String identityTokenEndpoint, String audience, String sourceCredentialsFileLocation) {\n+    return create(\n+        identityTokenEndpoint,\n+        audience,\n+        sourceCredentialsFileLocation,\n+        getFromServiceLoader(HttpTransportFactory.class, defaultHttpTransportFactory));\n+  }\n+\n+  @VisibleForTesting\n+  static StsCredentials create(\n+      String identityTokenEndpoint,\n+      String audience,\n+      String sourceCredentialsFileLocation,\n+      HttpTransportFactory transportFactory) {\n+    return new StsCredentials(\n+        identityTokenEndpoint, audience, sourceCredentialsFileLocation, transportFactory);\n+  }\n+\n+  @Override\n+  public AccessToken refreshAccessToken() throws IOException {\n+    AccessToken tok = getSourceAccessTokenFromFileLocation();\n+\n+    HttpTransport httpTransport = this.transportFactory.create();\n+    JsonObjectParser parser = new JsonObjectParser(JacksonFactory.getDefaultInstance());\n+\n+    HttpRequestFactory requestFactory = httpTransport.createRequestFactory();\n+    GenericUrl url = new GenericUrl(identityTokenEndpoint);\n+\n+    Map<String, String> params = new HashMap<>();\n+    params.put(\"grant_type\", \"urn:ietf:params:oauth:grant-type:token-exchange\");\n+    params.put(\"subject_token_type\", \"urn:ietf:params:oauth:token-type:jwt\");\n+    params.put(\"requested_token_type\", \"urn:ietf:params:oauth:token-type:access_token\");\n+    params.put(\"subject_token\", tok.getTokenValue());\n+    params.put(\"scope\", CLOUD_PLATFORM_SCOPE);\n+    params.put(\"audience\", audience);\n+    HttpContent content = new JsonHttpContent(parser.getJsonFactory(), params);\n+    HttpRequest request = requestFactory.buildPostRequest(url, content);\n+    request.setParser(parser);\n+\n+    HttpResponse response = null;\n+    try {\n+      response = request.execute();\n+    } catch (IOException e) {\n+      throw new IOException(\"Error requesting access token\", e);\n+    }\n+\n+    if (response.getStatusCode() != HttpStatusCodes.STATUS_CODE_OK) {\n+      throw new IOException(\"Error getting access token \" + getStatusString(response));\n+    }\n+\n+    GenericData responseData = response.parseAs(GenericData.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "875201ff0ea1dc88b6fda9bb0960c0a7e21380ba"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEyNTY3MQ==", "bodyText": "This pattern was copied from other similar implementations in google-auth e.g. https://github.com/googleapis/google-auth-library-java/blob/master/oauth2_http/java/com/google/auth/oauth2/ImpersonatedCredentials.java#L264\nMany other implementations don't even disconnect! Anyway I'll use try-finally as suggested!", "url": "https://github.com/grpc/grpc-java/pull/7232#discussion_r459125671", "createdAt": "2020-07-22T22:45:33Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/internal/sts/StsCredentials.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.sts;\n+\n+import com.google.api.client.http.GenericUrl;\n+import com.google.api.client.http.HttpContent;\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpRequestFactory;\n+import com.google.api.client.http.HttpResponse;\n+import com.google.api.client.http.HttpStatusCodes;\n+import com.google.api.client.http.HttpTransport;\n+import com.google.api.client.http.javanet.NetHttpTransport;\n+import com.google.api.client.http.json.JsonHttpContent;\n+import com.google.api.client.json.JsonObjectParser;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.client.util.GenericData;\n+import com.google.auth.http.HttpTransportFactory;\n+import com.google.auth.oauth2.AccessToken;\n+import com.google.auth.oauth2.GoogleCredentials;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.io.Files;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+// TODO(sanjaypujare): replace with the official implementation from google-auth once ready\n+/** Implementation of OAuth2 Token Exchange as per https://tools.ietf.org/html/rfc8693. */\n+public class StsCredentials extends GoogleCredentials {\n+  private static final long serialVersionUID = 6647041424685484932L;\n+\n+  private static final HttpTransportFactory defaultHttpTransportFactory =\n+      new DefaultHttpTransportFactory();\n+  private static final HttpTransport netHttpTransport = new NetHttpTransport();\n+  private static final String CLOUD_PLATFORM_SCOPE =\n+      \"https://www.googleapis.com/auth/cloud-platform\";\n+  private final String sourceCredentialsFileLocation;\n+  private final String identityTokenEndpoint;\n+  private final String audience;\n+  private transient HttpTransportFactory transportFactory;\n+\n+  private StsCredentials(\n+      String identityTokenEndpoint,\n+      String audience,\n+      String sourceCredentialsFileLocation,\n+      HttpTransportFactory transportFactory) {\n+    this.identityTokenEndpoint = identityTokenEndpoint;\n+    this.audience = audience;\n+    this.sourceCredentialsFileLocation = sourceCredentialsFileLocation;\n+    this.transportFactory = transportFactory;\n+  }\n+\n+  /**\n+   * Creates an StsCredentials.\n+   *\n+   * @param identityTokenEndpoint  URL of the token exchange service to use.\n+   * @param audience Audience to use in the STS request.\n+   * @param sourceCredentialsFileLocation file-system location that contains the\n+   *                                      source creds e.g. JWT contents.\n+   */\n+  public static StsCredentials create(\n+      String identityTokenEndpoint, String audience, String sourceCredentialsFileLocation) {\n+    return create(\n+        identityTokenEndpoint,\n+        audience,\n+        sourceCredentialsFileLocation,\n+        getFromServiceLoader(HttpTransportFactory.class, defaultHttpTransportFactory));\n+  }\n+\n+  @VisibleForTesting\n+  static StsCredentials create(\n+      String identityTokenEndpoint,\n+      String audience,\n+      String sourceCredentialsFileLocation,\n+      HttpTransportFactory transportFactory) {\n+    return new StsCredentials(\n+        identityTokenEndpoint, audience, sourceCredentialsFileLocation, transportFactory);\n+  }\n+\n+  @Override\n+  public AccessToken refreshAccessToken() throws IOException {\n+    AccessToken tok = getSourceAccessTokenFromFileLocation();\n+\n+    HttpTransport httpTransport = this.transportFactory.create();\n+    JsonObjectParser parser = new JsonObjectParser(JacksonFactory.getDefaultInstance());\n+\n+    HttpRequestFactory requestFactory = httpTransport.createRequestFactory();\n+    GenericUrl url = new GenericUrl(identityTokenEndpoint);\n+\n+    Map<String, String> params = new HashMap<>();\n+    params.put(\"grant_type\", \"urn:ietf:params:oauth:grant-type:token-exchange\");\n+    params.put(\"subject_token_type\", \"urn:ietf:params:oauth:token-type:jwt\");\n+    params.put(\"requested_token_type\", \"urn:ietf:params:oauth:token-type:access_token\");\n+    params.put(\"subject_token\", tok.getTokenValue());\n+    params.put(\"scope\", CLOUD_PLATFORM_SCOPE);\n+    params.put(\"audience\", audience);\n+    HttpContent content = new JsonHttpContent(parser.getJsonFactory(), params);\n+    HttpRequest request = requestFactory.buildPostRequest(url, content);\n+    request.setParser(parser);\n+\n+    HttpResponse response = null;\n+    try {\n+      response = request.execute();\n+    } catch (IOException e) {\n+      throw new IOException(\"Error requesting access token\", e);\n+    }\n+\n+    if (response.getStatusCode() != HttpStatusCodes.STATUS_CODE_OK) {\n+      throw new IOException(\"Error getting access token \" + getStatusString(response));\n+    }\n+\n+    GenericData responseData = response.parseAs(GenericData.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0NzQyMw=="}, "originalCommit": {"oid": "875201ff0ea1dc88b6fda9bb0960c0a7e21380ba"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTIxNTMzOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/internal/sts/StsCredentials.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMzowMDowOFrOG13Htg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMzowMDowOFrOG13Htg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzMDgwNg==", "bodyText": "Maybe add a colon \"Error getting access token: \" + getStatusString(response)", "url": "https://github.com/grpc/grpc-java/pull/7232#discussion_r459130806", "createdAt": "2020-07-22T23:00:08Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/internal/sts/StsCredentials.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.sts;\n+\n+import com.google.api.client.http.GenericUrl;\n+import com.google.api.client.http.HttpContent;\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpRequestFactory;\n+import com.google.api.client.http.HttpResponse;\n+import com.google.api.client.http.HttpStatusCodes;\n+import com.google.api.client.http.HttpTransport;\n+import com.google.api.client.http.javanet.NetHttpTransport;\n+import com.google.api.client.http.json.JsonHttpContent;\n+import com.google.api.client.json.JsonObjectParser;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.client.util.GenericData;\n+import com.google.auth.http.HttpTransportFactory;\n+import com.google.auth.oauth2.AccessToken;\n+import com.google.auth.oauth2.GoogleCredentials;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.io.Files;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+// TODO(sanjaypujare): replace with the official implementation from google-auth once ready\n+/** Implementation of OAuth2 Token Exchange as per https://tools.ietf.org/html/rfc8693. */\n+public final class StsCredentials extends GoogleCredentials {\n+  private static final long serialVersionUID = 6647041424685484932L;\n+\n+  private static final HttpTransportFactory defaultHttpTransportFactory =\n+      new DefaultHttpTransportFactory();\n+  private static final String CLOUD_PLATFORM_SCOPE =\n+      \"https://www.googleapis.com/auth/cloud-platform\";\n+  private final String sourceCredentialsFileLocation;\n+  private final String identityTokenEndpoint;\n+  private final String audience;\n+  private transient HttpTransportFactory transportFactory;\n+\n+  private StsCredentials(\n+      String identityTokenEndpoint,\n+      String audience,\n+      String sourceCredentialsFileLocation,\n+      HttpTransportFactory transportFactory) {\n+    this.identityTokenEndpoint = identityTokenEndpoint;\n+    this.audience = audience;\n+    this.sourceCredentialsFileLocation = sourceCredentialsFileLocation;\n+    this.transportFactory = transportFactory;\n+  }\n+\n+  /**\n+   * Creates an StsCredentials.\n+   *\n+   * @param identityTokenEndpoint  URL of the token exchange service to use.\n+   * @param audience Audience to use in the STS request.\n+   * @param sourceCredentialsFileLocation file-system location that contains the\n+   *                                      source creds e.g. JWT contents.\n+   */\n+  public static StsCredentials create(\n+      String identityTokenEndpoint, String audience, String sourceCredentialsFileLocation) {\n+    return create(\n+        identityTokenEndpoint,\n+        audience,\n+        sourceCredentialsFileLocation,\n+        getFromServiceLoader(HttpTransportFactory.class, defaultHttpTransportFactory));\n+  }\n+\n+  @VisibleForTesting\n+  static StsCredentials create(\n+      String identityTokenEndpoint,\n+      String audience,\n+      String sourceCredentialsFileLocation,\n+      HttpTransportFactory transportFactory) {\n+    return new StsCredentials(\n+        identityTokenEndpoint, audience, sourceCredentialsFileLocation, transportFactory);\n+  }\n+\n+  @Override\n+  public AccessToken refreshAccessToken() throws IOException {\n+    AccessToken tok = getSourceAccessTokenFromFileLocation();\n+\n+    HttpTransport httpTransport = this.transportFactory.create();\n+    JsonObjectParser parser = new JsonObjectParser(JacksonFactory.getDefaultInstance());\n+\n+    HttpRequestFactory requestFactory = httpTransport.createRequestFactory();\n+    GenericUrl url = new GenericUrl(identityTokenEndpoint);\n+\n+    Map<String, String> params = new HashMap<>();\n+    params.put(\"grant_type\", \"urn:ietf:params:oauth:grant-type:token-exchange\");\n+    params.put(\"subject_token_type\", \"urn:ietf:params:oauth:token-type:jwt\");\n+    params.put(\"requested_token_type\", \"urn:ietf:params:oauth:token-type:access_token\");\n+    params.put(\"subject_token\", tok.getTokenValue());\n+    params.put(\"scope\", CLOUD_PLATFORM_SCOPE);\n+    params.put(\"audience\", audience);\n+    HttpContent content = new JsonHttpContent(parser.getJsonFactory(), params);\n+    HttpRequest request = requestFactory.buildPostRequest(url, content);\n+    request.setParser(parser);\n+\n+    HttpResponse response = null;\n+    try {\n+      response = request.execute();\n+    } catch (IOException e) {\n+      throw new IOException(\"Error requesting access token\", e);\n+    }\n+\n+    if (response.getStatusCode() != HttpStatusCodes.STATUS_CODE_OK) {\n+      throw new IOException(\"Error getting access token \" + getStatusString(response));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ce8e93b2d0bdfb20b4c2f0e47eddc2e04c39303"}, "originalPosition": 126}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2621, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}