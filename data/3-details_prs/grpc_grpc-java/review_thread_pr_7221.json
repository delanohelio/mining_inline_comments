{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwMzkyODc1", "number": 7221, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxODoxMjo0MVrOEPPuxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxODoxNzozM1rOEPP1ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDIxODMwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/grpc/InternalConfigSelector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxODoxMjo0MVrOGy2wTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxODoyNTowNVrOGy3MJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk3OTA4NQ==", "bodyText": "Shouldn't the config be nullable as well?", "url": "https://github.com/grpc/grpc-java/pull/7221#discussion_r455979085", "createdAt": "2020-07-16T18:12:41Z", "author": {"login": "voidzcy"}, "path": "api/src/main/java/io/grpc/InternalConfigSelector.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import javax.annotation.Nullable;\n+\n+// The class can not be located in io.grpc.internal since it is used as a cross-module API.\n+// Otherwise, shading would break it.\n+/**\n+ * Per method config selector that the channel or load balancers will use to choose the appropriate\n+ * Route and MethodConfig for an RPC.\n+ */\n+@Internal\n+public abstract class InternalConfigSelector {\n+  @NameResolver.ResolutionResultAttr\n+  public static final Attributes.Key<io.grpc.InternalConfigSelector> KEY\n+      = Attributes.Key.create(\"io.grpc.config-selector\");\n+\n+  // Use PickSubchannelArgs for SelectConfigArgs for now. May change over time.\n+  /** Selects the config for an PRC. */\n+  public abstract Result selectConfig(LoadBalancer.PickSubchannelArgs args);\n+\n+  public static final class Result {\n+    private final Object config;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b30717cfb9736d1129df2955add4db31bafd8dbf"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk4NjIxMw==", "bodyText": "A parsed config in not null. It could be some constant like NO_CONFIG.", "url": "https://github.com/grpc/grpc-java/pull/7221#discussion_r455986213", "createdAt": "2020-07-16T18:25:05Z", "author": {"login": "dapengzhang0"}, "path": "api/src/main/java/io/grpc/InternalConfigSelector.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import javax.annotation.Nullable;\n+\n+// The class can not be located in io.grpc.internal since it is used as a cross-module API.\n+// Otherwise, shading would break it.\n+/**\n+ * Per method config selector that the channel or load balancers will use to choose the appropriate\n+ * Route and MethodConfig for an RPC.\n+ */\n+@Internal\n+public abstract class InternalConfigSelector {\n+  @NameResolver.ResolutionResultAttr\n+  public static final Attributes.Key<io.grpc.InternalConfigSelector> KEY\n+      = Attributes.Key.create(\"io.grpc.config-selector\");\n+\n+  // Use PickSubchannelArgs for SelectConfigArgs for now. May change over time.\n+  /** Selects the config for an PRC. */\n+  public abstract Result selectConfig(LoadBalancer.PickSubchannelArgs args);\n+\n+  public static final class Result {\n+    private final Object config;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk3OTA4NQ=="}, "originalCommit": {"oid": "b30717cfb9736d1129df2955add4db31bafd8dbf"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDIyNTk3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/grpc/InternalConfigSelector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxODoxNDo0N1rOGy21Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxODozNDo1OFrOGy3jCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk4MDMzOQ==", "bodyText": "ConfigSelector is not an xDS-specific design, its description should be more general. Same for the other places. (You are talking about xDS's concrete implementation XdsConfigSelector)", "url": "https://github.com/grpc/grpc-java/pull/7221#discussion_r455980339", "createdAt": "2020-07-16T18:14:47Z", "author": {"login": "voidzcy"}, "path": "api/src/main/java/io/grpc/InternalConfigSelector.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import javax.annotation.Nullable;\n+\n+// The class can not be located in io.grpc.internal since it is used as a cross-module API.\n+// Otherwise, shading would break it.\n+/**\n+ * Per method config selector that the channel or load balancers will use to choose the appropriate\n+ * Route and MethodConfig for an RPC.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b30717cfb9736d1129df2955add4db31bafd8dbf"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk5MjA3NA==", "bodyText": "Good point. Rephrased.", "url": "https://github.com/grpc/grpc-java/pull/7221#discussion_r455992074", "createdAt": "2020-07-16T18:34:58Z", "author": {"login": "dapengzhang0"}, "path": "api/src/main/java/io/grpc/InternalConfigSelector.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import javax.annotation.Nullable;\n+\n+// The class can not be located in io.grpc.internal since it is used as a cross-module API.\n+// Otherwise, shading would break it.\n+/**\n+ * Per method config selector that the channel or load balancers will use to choose the appropriate\n+ * Route and MethodConfig for an RPC.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk4MDMzOQ=="}, "originalCommit": {"oid": "b30717cfb9736d1129df2955add4db31bafd8dbf"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDIzNTg3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/grpc/InternalConfigSelector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxODoxNzozM1rOGy27Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxODoyOTozOVrOGy3W_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk4MTg5OQ==", "bodyText": "This line of comment is redundant.", "url": "https://github.com/grpc/grpc-java/pull/7221#discussion_r455981899", "createdAt": "2020-07-16T18:17:33Z", "author": {"login": "voidzcy"}, "path": "api/src/main/java/io/grpc/InternalConfigSelector.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import javax.annotation.Nullable;\n+\n+// The class can not be located in io.grpc.internal since it is used as a cross-module API.\n+// Otherwise, shading would break it.\n+/**\n+ * Per method config selector that the channel or load balancers will use to choose the appropriate\n+ * Route and MethodConfig for an RPC.\n+ */\n+@Internal\n+public abstract class InternalConfigSelector {\n+  @NameResolver.ResolutionResultAttr\n+  public static final Attributes.Key<io.grpc.InternalConfigSelector> KEY\n+      = Attributes.Key.create(\"io.grpc.config-selector\");\n+\n+  // Use PickSubchannelArgs for SelectConfigArgs for now. May change over time.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b30717cfb9736d1129df2955add4db31bafd8dbf"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk4ODk5MQ==", "bodyText": "I think it does provide some information for the reader and is not redundant.\nIt's not a personal note for my following PRs. (My following PRs will not make the change.)", "url": "https://github.com/grpc/grpc-java/pull/7221#discussion_r455988991", "createdAt": "2020-07-16T18:29:39Z", "author": {"login": "dapengzhang0"}, "path": "api/src/main/java/io/grpc/InternalConfigSelector.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import javax.annotation.Nullable;\n+\n+// The class can not be located in io.grpc.internal since it is used as a cross-module API.\n+// Otherwise, shading would break it.\n+/**\n+ * Per method config selector that the channel or load balancers will use to choose the appropriate\n+ * Route and MethodConfig for an RPC.\n+ */\n+@Internal\n+public abstract class InternalConfigSelector {\n+  @NameResolver.ResolutionResultAttr\n+  public static final Attributes.Key<io.grpc.InternalConfigSelector> KEY\n+      = Attributes.Key.create(\"io.grpc.config-selector\");\n+\n+  // Use PickSubchannelArgs for SelectConfigArgs for now. May change over time.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk4MTg5OQ=="}, "originalCommit": {"oid": "b30717cfb9736d1129df2955add4db31bafd8dbf"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2616, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}