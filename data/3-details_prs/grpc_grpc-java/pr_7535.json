{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2MzcwMjU1", "number": 7535, "title": "xds: create a full xDS example with XDS Channel creds and server xDS options", "bodyText": "", "createdAt": "2020-10-20T00:35:09Z", "url": "https://github.com/grpc/grpc-java/pull/7535", "merged": true, "mergeCommit": {"oid": "b6601ba273f6f7d4e17ecb80a2ad6d0bdcf54f01"}, "closed": true, "closedAt": "2020-10-23T15:38:28Z", "author": {"login": "sanjaypujare"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdUNpRbAH2gAyNTA2MzcwMjU1OmI3ZThkMDQyMjI0OWM3YWZlNzk5NjdmYWU0ZTBiN2Y4ZTE0NDA3MjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdfbKK7AFqTUzNjgyMDI1NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b7e8d0422249c7afe79967fae4e0b7f8e1440720", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/b7e8d0422249c7afe79967fae4e0b7f8e1440720", "committedDate": "2020-10-20T00:29:34Z", "message": "xds: create a full xDS example with XDS Channel creds and server xDS options"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0NDM1NTkw", "url": "https://github.com/grpc/grpc-java/pull/7535#pullrequestreview-514435590", "createdAt": "2020-10-22T07:33:00Z", "commit": {"oid": "b7e8d0422249c7afe79967fae4e0b7f8e1440720"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNzozMzowMFrOHmUTMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwODoyMToyN1rOHmWHqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk0MDUyOA==", "bodyText": "s/2015/2020/g", "url": "https://github.com/grpc/grpc-java/pull/7535#discussion_r509940528", "createdAt": "2020-10-22T07:33:00Z", "author": {"login": "voidzcy"}, "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/HelloWorldServerXds.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2015 The gRPC Authors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e8d0422249c7afe79967fae4e0b7f8e1440720"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk0MDY2OA==", "bodyText": "s/2015/2020/g", "url": "https://github.com/grpc/grpc-java/pull/7535#discussion_r509940668", "createdAt": "2020-10-22T07:33:15Z", "author": {"login": "voidzcy"}, "path": "examples/example-xds/src/main/proto/helloworld/helloworld.proto", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright 2015 The gRPC Authors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e8d0422249c7afe79967fae4e0b7f8e1440720"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk0NzYwOA==", "bodyText": "nit: It's clearer to use a local variable that creates a InsecureChannelCredentials instance.\nChannelCredentials insecure = InsecureChannelCredentials.create();\nChannelCredentials channelCreds = useXdsCreds ? XdsChannelCredentials.create(/* fallback */ insecure) : insecure;\nGrpc.newChannelBuilder(target, channelCreds).build();", "url": "https://github.com/grpc/grpc-java/pull/7535#discussion_r509947608", "createdAt": "2020-10-22T07:45:04Z", "author": {"login": "voidzcy"}, "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/HelloWorldClientXds.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.ChannelCredentials;\n+import io.grpc.Grpc;\n+import io.grpc.InsecureChannelCredentials;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.netty.GrpcSslContexts;\n+import io.grpc.netty.NettyChannelBuilder;\n+import io.grpc.xds.XdsChannelCredentials;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import java.io.File;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.net.ssl.SSLException;\n+\n+/**\n+ * A simple xDS client that requests a greeting from the {@link HelloWorldServerXds}.\n+ */\n+public class HelloWorldClientXds {\n+  private static final Logger logger = Logger.getLogger(HelloWorldClientXds.class.getName());\n+  private final ManagedChannel channel;\n+  private final GreeterGrpc.GreeterBlockingStub blockingStub;\n+\n+  /** Construct client connecting to HelloWorld server at {@code host:port}. */\n+  public HelloWorldClientXds(String target, boolean useXdsCreds) throws SSLException {\n+    this(\n+        Grpc.newChannelBuilder(\n+                target,\n+                useXdsCreds\n+                    ? XdsChannelCredentials.create(InsecureChannelCredentials.create())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e8d0422249c7afe79967fae4e0b7f8e1440720"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk0OTg1MA==", "bodyText": "You do not need this constructor right? Everything can be put in the single constructor.", "url": "https://github.com/grpc/grpc-java/pull/7535#discussion_r509949850", "createdAt": "2020-10-22T07:48:55Z", "author": {"login": "voidzcy"}, "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/HelloWorldClientXds.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.ChannelCredentials;\n+import io.grpc.Grpc;\n+import io.grpc.InsecureChannelCredentials;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.netty.GrpcSslContexts;\n+import io.grpc.netty.NettyChannelBuilder;\n+import io.grpc.xds.XdsChannelCredentials;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import java.io.File;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.net.ssl.SSLException;\n+\n+/**\n+ * A simple xDS client that requests a greeting from the {@link HelloWorldServerXds}.\n+ */\n+public class HelloWorldClientXds {\n+  private static final Logger logger = Logger.getLogger(HelloWorldClientXds.class.getName());\n+  private final ManagedChannel channel;\n+  private final GreeterGrpc.GreeterBlockingStub blockingStub;\n+\n+  /** Construct client connecting to HelloWorld server at {@code host:port}. */\n+  public HelloWorldClientXds(String target, boolean useXdsCreds) throws SSLException {\n+    this(\n+        Grpc.newChannelBuilder(\n+                target,\n+                useXdsCreds\n+                    ? XdsChannelCredentials.create(InsecureChannelCredentials.create())\n+                    : InsecureChannelCredentials.create())\n+            .build());\n+  }\n+\n+  /** Construct client for accessing HelloWorld server using the channel passed. */\n+  HelloWorldClientXds(ManagedChannel channel) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e8d0422249c7afe79967fae4e0b7f8e1440720"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk1NDQ5Mg==", "bodyText": "y is not descriptive, a better message might be \"USAGE: HelloWorldClientXds target [name [--secure]]\".", "url": "https://github.com/grpc/grpc-java/pull/7535#discussion_r509954492", "createdAt": "2020-10-22T07:56:31Z", "author": {"login": "voidzcy"}, "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/HelloWorldClientXds.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.ChannelCredentials;\n+import io.grpc.Grpc;\n+import io.grpc.InsecureChannelCredentials;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.netty.GrpcSslContexts;\n+import io.grpc.netty.NettyChannelBuilder;\n+import io.grpc.xds.XdsChannelCredentials;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import java.io.File;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.net.ssl.SSLException;\n+\n+/**\n+ * A simple xDS client that requests a greeting from the {@link HelloWorldServerXds}.\n+ */\n+public class HelloWorldClientXds {\n+  private static final Logger logger = Logger.getLogger(HelloWorldClientXds.class.getName());\n+  private final ManagedChannel channel;\n+  private final GreeterGrpc.GreeterBlockingStub blockingStub;\n+\n+  /** Construct client connecting to HelloWorld server at {@code host:port}. */\n+  public HelloWorldClientXds(String target, boolean useXdsCreds) throws SSLException {\n+    this(\n+        Grpc.newChannelBuilder(\n+                target,\n+                useXdsCreds\n+                    ? XdsChannelCredentials.create(InsecureChannelCredentials.create())\n+                    : InsecureChannelCredentials.create())\n+            .build());\n+  }\n+\n+  /** Construct client for accessing HelloWorld server using the channel passed. */\n+  HelloWorldClientXds(ManagedChannel channel) {\n+    this.channel = channel;\n+    blockingStub = GreeterGrpc.newBlockingStub(channel);\n+  }\n+\n+  public void shutdown() throws InterruptedException {\n+    channel.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n+  }\n+\n+  /** Say hello to server. */\n+  public void greet(String name) {\n+    logger.info(\"Will try to greet \" + name + \" ...\");\n+    HelloRequest request = HelloRequest.newBuilder().setName(name).build();\n+    HelloReply response;\n+    try {\n+      response = blockingStub.sayHello(request);\n+    } catch (StatusRuntimeException e) {\n+      logger.log(Level.WARNING, \"RPC failed: {0}\", e.getStatus());\n+      return;\n+    }\n+    logger.info(\"Greeting: \" + response.getMessage());\n+  }\n+\n+  /**\n+   * Greet server. If provided, the second element of {@code args} is the name to use in the\n+   * greeting.\n+   */\n+  public static void main(String[] args) throws Exception {\n+    String user = \"xds-client\";\n+    if (args.length < 1 || args.length > 3) {\n+      System.out.println(\"USAGE: HelloWorldClientXds target [name [y]]\\n\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e8d0422249c7afe79967fae4e0b7f8e1440720"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk1ODc0NQ==", "bodyText": "nit: a (slightly) better style is to declare all the variables that the command line argument parsing logic will parse to at the top. This makes the main cleaner. (Well, this comment might be overly strictly...)", "url": "https://github.com/grpc/grpc-java/pull/7535#discussion_r509958745", "createdAt": "2020-10-22T08:03:20Z", "author": {"login": "voidzcy"}, "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/HelloWorldClientXds.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.ChannelCredentials;\n+import io.grpc.Grpc;\n+import io.grpc.InsecureChannelCredentials;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.netty.GrpcSslContexts;\n+import io.grpc.netty.NettyChannelBuilder;\n+import io.grpc.xds.XdsChannelCredentials;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import java.io.File;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.net.ssl.SSLException;\n+\n+/**\n+ * A simple xDS client that requests a greeting from the {@link HelloWorldServerXds}.\n+ */\n+public class HelloWorldClientXds {\n+  private static final Logger logger = Logger.getLogger(HelloWorldClientXds.class.getName());\n+  private final ManagedChannel channel;\n+  private final GreeterGrpc.GreeterBlockingStub blockingStub;\n+\n+  /** Construct client connecting to HelloWorld server at {@code host:port}. */\n+  public HelloWorldClientXds(String target, boolean useXdsCreds) throws SSLException {\n+    this(\n+        Grpc.newChannelBuilder(\n+                target,\n+                useXdsCreds\n+                    ? XdsChannelCredentials.create(InsecureChannelCredentials.create())\n+                    : InsecureChannelCredentials.create())\n+            .build());\n+  }\n+\n+  /** Construct client for accessing HelloWorld server using the channel passed. */\n+  HelloWorldClientXds(ManagedChannel channel) {\n+    this.channel = channel;\n+    blockingStub = GreeterGrpc.newBlockingStub(channel);\n+  }\n+\n+  public void shutdown() throws InterruptedException {\n+    channel.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n+  }\n+\n+  /** Say hello to server. */\n+  public void greet(String name) {\n+    logger.info(\"Will try to greet \" + name + \" ...\");\n+    HelloRequest request = HelloRequest.newBuilder().setName(name).build();\n+    HelloReply response;\n+    try {\n+      response = blockingStub.sayHello(request);\n+    } catch (StatusRuntimeException e) {\n+      logger.log(Level.WARNING, \"RPC failed: {0}\", e.getStatus());\n+      return;\n+    }\n+    logger.info(\"Greeting: \" + response.getMessage());\n+  }\n+\n+  /**\n+   * Greet server. If provided, the second element of {@code args} is the name to use in the\n+   * greeting.\n+   */\n+  public static void main(String[] args) throws Exception {\n+    String user = \"xds-client\";\n+    if (args.length < 1 || args.length > 3) {\n+      System.out.println(\"USAGE: HelloWorldClientXds target [name [y]]\\n\");\n+      System.err.println(\"  target  The xds target to connect to using the 'xds:' target scheme.\");\n+      System.err.println(\"  name    The name you wish to include in the greeting request. Defaults to \" + user);\n+      System.err.println(\n+          \"  'y'     'y' or 'yes' indicates using xDS credentials otherwise defaults to insecure.\");\n+      System.exit(1);\n+    }\n+    boolean useXdsCreds = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e8d0422249c7afe79967fae4e0b7f8e1440720"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk1OTczMg==", "bodyText": "Same comment for the message as that for the client side.", "url": "https://github.com/grpc/grpc-java/pull/7535#discussion_r509959732", "createdAt": "2020-10-22T08:05:05Z", "author": {"login": "voidzcy"}, "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/HelloWorldServerXds.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2015 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.Server;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.stub.StreamObserver;\n+import io.grpc.xds.internal.sds.XdsServerBuilder;\n+import java.io.IOException;\n+import java.util.logging.Logger;\n+\n+/**\n+ * An xDS-managed Server for the {@code Greeter} service.\n+ */\n+public class HelloWorldServerXds {\n+  private static final Logger logger = Logger.getLogger(HelloWorldServerXds.class.getName());\n+  private final int port;\n+  private final boolean useXdsCreds;\n+  private final String hostName;\n+  private Server server;\n+\n+  public HelloWorldServerXds(int port, String hostName, boolean useXdsCreds) {\n+    this.port = port;\n+    this.hostName = hostName;\n+    this.useXdsCreds = useXdsCreds;\n+  }\n+\n+  private void start() throws IOException {\n+    XdsServerBuilder builder = XdsServerBuilder.forPort(port).addService(new HostnameGreeter(hostName));\n+    if (useXdsCreds) {\n+      builder = builder.useXdsSecurityWithPlaintextFallback();\n+    }\n+    server = builder.build().start();\n+    logger.info(\"Server started, listening on \" + port);\n+    Runtime.getRuntime()\n+        .addShutdownHook(\n+            new Thread() {\n+              @Override\n+              public void run() {\n+                // Use stderr here since the logger may have been reset by its JVM shutdown hook.\n+                System.err.println(\"*** shutting down gRPC server since JVM is shutting down\");\n+                HelloWorldServerXds.this.stop();\n+                System.err.println(\"*** server shut down\");\n+              }\n+            });\n+  }\n+\n+  private void stop() {\n+    if (server != null) {\n+      server.shutdown();\n+    }\n+  }\n+\n+  /** Await termination on the main thread since the grpc library uses daemon threads. */\n+  private void blockUntilShutdown() throws InterruptedException {\n+    if (server != null) {\n+      server.awaitTermination();\n+    }\n+  }\n+\n+  /** Main launches the server from the command line. */\n+  public static void main(String[] args) throws IOException, InterruptedException {\n+    if (args.length < 1 || args.length > 3) {\n+      System.out.println(\"USAGE: HelloWorldServerTls port [hostname [y]]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e8d0422249c7afe79967fae4e0b7f8e1440720"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk2MjgwNw==", "bodyText": "Would be better to put this class inside HelloWorldServerXds, same as the hello world example. That's more concise.", "url": "https://github.com/grpc/grpc-java/pull/7535#discussion_r509962807", "createdAt": "2020-10-22T08:09:59Z", "author": {"login": "voidzcy"}, "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/HostnameGreeter.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.stub.StreamObserver;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.util.Random;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/** Greeter implementation which replies identifying itself with its hostname. */\n+public final class HostnameGreeter extends GreeterGrpc.GreeterImplBase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e8d0422249c7afe79967fae4e0b7f8e1440720"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk2NjcwMA==", "bodyText": "server.shutdown().awaitTermination(30, TimeUnit.SECONDS); Try keep as close as the existing code in the existing hello world example.", "url": "https://github.com/grpc/grpc-java/pull/7535#discussion_r509966700", "createdAt": "2020-10-22T08:16:03Z", "author": {"login": "voidzcy"}, "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/HelloWorldServerXds.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2015 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.Server;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.stub.StreamObserver;\n+import io.grpc.xds.internal.sds.XdsServerBuilder;\n+import java.io.IOException;\n+import java.util.logging.Logger;\n+\n+/**\n+ * An xDS-managed Server for the {@code Greeter} service.\n+ */\n+public class HelloWorldServerXds {\n+  private static final Logger logger = Logger.getLogger(HelloWorldServerXds.class.getName());\n+  private final int port;\n+  private final boolean useXdsCreds;\n+  private final String hostName;\n+  private Server server;\n+\n+  public HelloWorldServerXds(int port, String hostName, boolean useXdsCreds) {\n+    this.port = port;\n+    this.hostName = hostName;\n+    this.useXdsCreds = useXdsCreds;\n+  }\n+\n+  private void start() throws IOException {\n+    XdsServerBuilder builder = XdsServerBuilder.forPort(port).addService(new HostnameGreeter(hostName));\n+    if (useXdsCreds) {\n+      builder = builder.useXdsSecurityWithPlaintextFallback();\n+    }\n+    server = builder.build().start();\n+    logger.info(\"Server started, listening on \" + port);\n+    Runtime.getRuntime()\n+        .addShutdownHook(\n+            new Thread() {\n+              @Override\n+              public void run() {\n+                // Use stderr here since the logger may have been reset by its JVM shutdown hook.\n+                System.err.println(\"*** shutting down gRPC server since JVM is shutting down\");\n+                HelloWorldServerXds.this.stop();\n+                System.err.println(\"*** server shut down\");\n+              }\n+            });\n+  }\n+\n+  private void stop() {\n+    if (server != null) {\n+      server.shutdown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e8d0422249c7afe79967fae4e0b7f8e1440720"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk2ODE4Mw==", "bodyText": "System.exit(1);", "url": "https://github.com/grpc/grpc-java/pull/7535#discussion_r509968183", "createdAt": "2020-10-22T08:18:23Z", "author": {"login": "voidzcy"}, "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/HelloWorldServerXds.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2015 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.Server;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.stub.StreamObserver;\n+import io.grpc.xds.internal.sds.XdsServerBuilder;\n+import java.io.IOException;\n+import java.util.logging.Logger;\n+\n+/**\n+ * An xDS-managed Server for the {@code Greeter} service.\n+ */\n+public class HelloWorldServerXds {\n+  private static final Logger logger = Logger.getLogger(HelloWorldServerXds.class.getName());\n+  private final int port;\n+  private final boolean useXdsCreds;\n+  private final String hostName;\n+  private Server server;\n+\n+  public HelloWorldServerXds(int port, String hostName, boolean useXdsCreds) {\n+    this.port = port;\n+    this.hostName = hostName;\n+    this.useXdsCreds = useXdsCreds;\n+  }\n+\n+  private void start() throws IOException {\n+    XdsServerBuilder builder = XdsServerBuilder.forPort(port).addService(new HostnameGreeter(hostName));\n+    if (useXdsCreds) {\n+      builder = builder.useXdsSecurityWithPlaintextFallback();\n+    }\n+    server = builder.build().start();\n+    logger.info(\"Server started, listening on \" + port);\n+    Runtime.getRuntime()\n+        .addShutdownHook(\n+            new Thread() {\n+              @Override\n+              public void run() {\n+                // Use stderr here since the logger may have been reset by its JVM shutdown hook.\n+                System.err.println(\"*** shutting down gRPC server since JVM is shutting down\");\n+                HelloWorldServerXds.this.stop();\n+                System.err.println(\"*** server shut down\");\n+              }\n+            });\n+  }\n+\n+  private void stop() {\n+    if (server != null) {\n+      server.shutdown();\n+    }\n+  }\n+\n+  /** Await termination on the main thread since the grpc library uses daemon threads. */\n+  private void blockUntilShutdown() throws InterruptedException {\n+    if (server != null) {\n+      server.awaitTermination();\n+    }\n+  }\n+\n+  /** Main launches the server from the command line. */\n+  public static void main(String[] args) throws IOException, InterruptedException {\n+    if (args.length < 1 || args.length > 3) {\n+      System.out.println(\"USAGE: HelloWorldServerTls port [hostname [y]]\");\n+      System.err.println(\"\");\n+      System.err.println(\"  port  The port to bind to.\");\n+      System.err.println(\"  hostname  The name clients will see in greet responses. \");\n+      System.err.println(\"            Defaults to the machine's hostname\");\n+      System.out.println(\n+          \"  'y'  'y' or 'yes' indicates using xDS credentials options; otherwise defaults to insecure credentials.\");\n+      System.exit(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e8d0422249c7afe79967fae4e0b7f8e1440720"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk3MDE4Mw==", "bodyText": "y is not descriptive. See comment in the implementation.", "url": "https://github.com/grpc/grpc-java/pull/7535#discussion_r509970183", "createdAt": "2020-10-22T08:21:12Z", "author": {"login": "voidzcy"}, "path": "examples/example-xds/README.md", "diffHunk": "@@ -12,40 +12,60 @@ environment.__\n \n ### Build the example\n \n-1. Build the hello-world example server or the hostname example server. See\n-   [the examples README](../README.md) or the\n-   [hostname example README](../example-hostname/README.md).\n-\n-2. Build the xds hello-world example client. From the `grpc-java/examples/examples-xds` directory:\n+Build the XDS hello-world example client & server. From the `grpc-java/examples/examples-xds`\n+directory:\n ```\n $ ../gradlew installDist\n ```\n \n-This creates the script `build/install/example-xds/bin/xds-hello-world-client`\n-that runs the example.\n+This creates the scripts `build/install/example-xds/bin/hello-world-client-xds` and\n+`build/install/example-xds/bin/hello-world-server-xds`.\n+\n+### Run the example without using XDS Credentials\n \n-To start the server, run:\n+To use XDS, you should first deploy the XDS management server in your deployment environment\n+and know its name. You need to set the `GRPC_XDS_BOOTSTRAP` environment variable to point to the\n+gRPC XDS bootstrap file (see\n+[gRFC A27](https://github.com/grpc/proposal/blob/master/A27-xds-global-load-balancing.md#xdsclient-and-bootstrap-file) for the\n+bootstrap format). This is needed by both `build/install/example-xds/bin/hello-world-client-xds`\n+and `build/install/example-xds/bin/hello-world-server-xds`.\n \n+1. To start the XDS-enabled example server, run:\n ```\n-$ ../build/install/hostname/bin/hello-world-server\n-$ # or\n-$ ../example-hostname/build/install/hostname/bin/hostname-server\n+$ export GRPC_XDS_BOOTSTRAP=/path/to/bootstrap.json\n+$ ./build/install/example-xds/bin/hello-world-server-xds 8000 my-test-xds-server\n ```\n \n-And in a different terminal window run this client:\n+The first command line argument is the port to listen on (`8000`) and the second argument is a string\n+id (`my-test-xds-server`) to be included in the greeting response to the client.\n \n+2. In a different terminal window, run the XDS-enabled example client:\n ```\n-$ ./build/install/example-xds/bin/xds-hello-world-client\n+$ export GRPC_XDS_BOOTSTRAP=/path/to/bootstrap.json\n+$ ./build/install/example-xds/bin/xds-hello-world-client xds:///yourServersName:8000 my-test-xds-client\n ```\n+The first command line argument (`xds:///yourServersName:8000`) is the target to connect to using the\n+`xds:` target scheme and the second argument (`my-test-xds-client`) is the name you wish to include in\n+the greeting request to the server.\n+\n+### Run the example with xDS Credentials\n \n-However, that didn't use XDS! To use XDS we assume you have deployed the server\n-in your deployment environment and know its name. You need to set the\n-`GRPC_XDS_BOOTSTRAP` environment variable to point to a gRPC XDS bootstrap\n-file (see [gRFC A27](https://github.com/grpc/proposal/pull/170) for the\n-bootstrap format). Then use the `xds:` target scheme during\n-channel creation.\n+The above example used plaintext (insecure) credentials as explicitly provided by the client and server\n+code. We will now demonstrate how the code can authorize use of xDS provided credentials by using\n+`XdsChannelCredentials` on the client side and using `XdsServerBuilder.useXdsSecurityWithPlaintextFallback()`\n+on the server side. This code is enabled by providing an additional command line argument.\n \n+1. On the server side, add `y` on the command line to authorize use of xDS security:\n ```\n $ export GRPC_XDS_BOOTSTRAP=/path/to/bootstrap.json\n-$ ./build/install/example-xds/bin/xds-hello-world-client \"XDS world\" xds:///yourServersName\n+$ ./build/install/example-xds/bin/hello-world-server-xds 8000 my-test-xds-server y\n ```\n+\n+2. Similarly, add `y` on the comamnd line when you run the xDS client:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e8d0422249c7afe79967fae4e0b7f8e1440720"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk3MDM0NA==", "bodyText": "y is not descriptive. See comment in the implementation.", "url": "https://github.com/grpc/grpc-java/pull/7535#discussion_r509970344", "createdAt": "2020-10-22T08:21:27Z", "author": {"login": "voidzcy"}, "path": "examples/example-xds/README.md", "diffHunk": "@@ -12,40 +12,60 @@ environment.__\n \n ### Build the example\n \n-1. Build the hello-world example server or the hostname example server. See\n-   [the examples README](../README.md) or the\n-   [hostname example README](../example-hostname/README.md).\n-\n-2. Build the xds hello-world example client. From the `grpc-java/examples/examples-xds` directory:\n+Build the XDS hello-world example client & server. From the `grpc-java/examples/examples-xds`\n+directory:\n ```\n $ ../gradlew installDist\n ```\n \n-This creates the script `build/install/example-xds/bin/xds-hello-world-client`\n-that runs the example.\n+This creates the scripts `build/install/example-xds/bin/hello-world-client-xds` and\n+`build/install/example-xds/bin/hello-world-server-xds`.\n+\n+### Run the example without using XDS Credentials\n \n-To start the server, run:\n+To use XDS, you should first deploy the XDS management server in your deployment environment\n+and know its name. You need to set the `GRPC_XDS_BOOTSTRAP` environment variable to point to the\n+gRPC XDS bootstrap file (see\n+[gRFC A27](https://github.com/grpc/proposal/blob/master/A27-xds-global-load-balancing.md#xdsclient-and-bootstrap-file) for the\n+bootstrap format). This is needed by both `build/install/example-xds/bin/hello-world-client-xds`\n+and `build/install/example-xds/bin/hello-world-server-xds`.\n \n+1. To start the XDS-enabled example server, run:\n ```\n-$ ../build/install/hostname/bin/hello-world-server\n-$ # or\n-$ ../example-hostname/build/install/hostname/bin/hostname-server\n+$ export GRPC_XDS_BOOTSTRAP=/path/to/bootstrap.json\n+$ ./build/install/example-xds/bin/hello-world-server-xds 8000 my-test-xds-server\n ```\n \n-And in a different terminal window run this client:\n+The first command line argument is the port to listen on (`8000`) and the second argument is a string\n+id (`my-test-xds-server`) to be included in the greeting response to the client.\n \n+2. In a different terminal window, run the XDS-enabled example client:\n ```\n-$ ./build/install/example-xds/bin/xds-hello-world-client\n+$ export GRPC_XDS_BOOTSTRAP=/path/to/bootstrap.json\n+$ ./build/install/example-xds/bin/xds-hello-world-client xds:///yourServersName:8000 my-test-xds-client\n ```\n+The first command line argument (`xds:///yourServersName:8000`) is the target to connect to using the\n+`xds:` target scheme and the second argument (`my-test-xds-client`) is the name you wish to include in\n+the greeting request to the server.\n+\n+### Run the example with xDS Credentials\n \n-However, that didn't use XDS! To use XDS we assume you have deployed the server\n-in your deployment environment and know its name. You need to set the\n-`GRPC_XDS_BOOTSTRAP` environment variable to point to a gRPC XDS bootstrap\n-file (see [gRFC A27](https://github.com/grpc/proposal/pull/170) for the\n-bootstrap format). Then use the `xds:` target scheme during\n-channel creation.\n+The above example used plaintext (insecure) credentials as explicitly provided by the client and server\n+code. We will now demonstrate how the code can authorize use of xDS provided credentials by using\n+`XdsChannelCredentials` on the client side and using `XdsServerBuilder.useXdsSecurityWithPlaintextFallback()`\n+on the server side. This code is enabled by providing an additional command line argument.\n \n+1. On the server side, add `y` on the command line to authorize use of xDS security:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7e8d0422249c7afe79967fae4e0b7f8e1440720"}, "originalPosition": 79}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5de7e8924123af2d26d9ecb446877ac4f6dd2e2d", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/5de7e8924123af2d26d9ecb446877ac4f6dd2e2d", "committedDate": "2020-10-22T18:34:07Z", "message": "address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b848560ca065231fba2c76ed4a56a8585a5113c8", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/b848560ca065231fba2c76ed4a56a8585a5113c8", "committedDate": "2020-10-22T18:48:35Z", "message": "address review comments-2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MDQyMTA4", "url": "https://github.com/grpc/grpc-java/pull/7535#pullrequestreview-515042108", "createdAt": "2020-10-22T19:14:55Z", "commit": {"oid": "b848560ca065231fba2c76ed4a56a8585a5113c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxOToxNDo1NVrOHmwNAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxOToxNDo1NVrOHmwNAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM5NzY5OA==", "bodyText": "Does this work for localhost? Probably should say on the client machine/VM, etc.", "url": "https://github.com/grpc/grpc-java/pull/7535#discussion_r510397698", "createdAt": "2020-10-22T19:14:55Z", "author": {"login": "voidzcy"}, "path": "examples/example-xds/README.md", "diffHunk": "@@ -12,40 +12,60 @@ environment.__\n \n ### Build the example\n \n-1. Build the hello-world example server or the hostname example server. See\n-   [the examples README](../README.md) or the\n-   [hostname example README](../example-hostname/README.md).\n-\n-2. Build the xds hello-world example client. From the `grpc-java/examples/examples-xds` directory:\n+Build the XDS hello-world example client & server. From the `grpc-java/examples/examples-xds`\n+directory:\n ```\n $ ../gradlew installDist\n ```\n \n-This creates the script `build/install/example-xds/bin/xds-hello-world-client`\n-that runs the example.\n+This creates the scripts `build/install/example-xds/bin/hello-world-client-xds` and\n+`build/install/example-xds/bin/hello-world-server-xds`.\n+\n+### Run the example without using XDS Credentials\n \n-To start the server, run:\n+To use XDS, you should first deploy the XDS management server in your deployment environment\n+and know its name. You need to set the `GRPC_XDS_BOOTSTRAP` environment variable to point to the\n+gRPC XDS bootstrap file (see\n+[gRFC A27](https://github.com/grpc/proposal/blob/master/A27-xds-global-load-balancing.md#xdsclient-and-bootstrap-file) for the\n+bootstrap format). This is needed by both `build/install/example-xds/bin/hello-world-client-xds`\n+and `build/install/example-xds/bin/hello-world-server-xds`.\n \n+1. To start the XDS-enabled example server, run:\n ```\n-$ ../build/install/hostname/bin/hello-world-server\n-$ # or\n-$ ../example-hostname/build/install/hostname/bin/hostname-server\n+$ export GRPC_XDS_BOOTSTRAP=/path/to/bootstrap.json\n+$ ./build/install/example-xds/bin/hello-world-server-xds 8000 my-test-xds-server\n ```\n \n-And in a different terminal window run this client:\n+The first command line argument is the port to listen on (`8000`) and the second argument is a string\n+id (`my-test-xds-server`) to be included in the greeting response to the client.\n \n+2. In a different terminal window, run the XDS-enabled example client:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b848560ca065231fba2c76ed4a56a8585a5113c8"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MDQzMzY4", "url": "https://github.com/grpc/grpc-java/pull/7535#pullrequestreview-515043368", "createdAt": "2020-10-22T19:16:42Z", "commit": {"oid": "b848560ca065231fba2c76ed4a56a8585a5113c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxOToxNjo0MlrOHmwQsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxOToxNjo0MlrOHmwQsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM5ODY0MA==", "bodyText": "Use 0.8.13 please, make it consistent with other examples so the person that upgrades the version will not miss thi one.", "url": "https://github.com/grpc/grpc-java/pull/7535#discussion_r510398640", "createdAt": "2020-10-22T19:16:42Z", "author": {"login": "voidzcy"}, "path": "examples/example-xds/build.gradle", "diffHunk": "@@ -1,5 +1,9 @@\n plugins {\n     id 'application' // Provide convenience executables for trying out the examples.\n+    // ASSUMES GRADLE 5.6 OR HIGHER. Use plugin version 0.8.10 with earlier gradle versions\n+    id 'com.google.protobuf' version '0.8.10'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b848560ca065231fba2c76ed4a56a8585a5113c8"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MDQ0NzQ4", "url": "https://github.com/grpc/grpc-java/pull/7535#pullrequestreview-515044748", "createdAt": "2020-10-22T19:18:39Z", "commit": {"oid": "b848560ca065231fba2c76ed4a56a8585a5113c8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c477e72bb161abcbe8a32d10eb9d6cc0b18a529", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/4c477e72bb161abcbe8a32d10eb9d6cc0b18a529", "committedDate": "2020-10-22T19:19:01Z", "message": "address review comments-3"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2ODE0MDE2", "url": "https://github.com/grpc/grpc-java/pull/7535#pullrequestreview-536814016", "createdAt": "2020-11-23T20:17:44Z", "commit": {"oid": "4c477e72bb161abcbe8a32d10eb9d6cc0b18a529"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDoxNzo0NVrOH4d1ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDoxOToyNFrOH4d4uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk3MTExNA==", "bodyText": "Why was the client name changed? We have documentation like https://cloud.google.com/traffic-director/docs/set-up-proxyless-gce which references this name. If we did it \"just because\" then it is probably better to avoid confusion and leave it as it was.\nGenerally we have been using -client and -server suffixes (see the parent directory's names), so this change also just looks wrong.", "url": "https://github.com/grpc/grpc-java/pull/7535#discussion_r528971114", "createdAt": "2020-11-23T20:17:45Z", "author": {"login": "ejona86"}, "path": "examples/example-xds/build.gradle", "diffHunk": "@@ -19,25 +23,46 @@ targetCompatibility = 1.7\n // Feel free to delete the comment at the next line. It is just for safely\n // updating the version in our release process.\n def grpcVersion = '1.34.0-SNAPSHOT' // CURRENT_GRPC_VERSION\n+def nettyTcNativeVersion = '2.0.31.Final'\n+def protocVersion = '3.12.0'\n \n dependencies {\n-    // This example's client is the same as the helloworld client. We depend on the helloworld\n-    // client's code here\n-    implementation ':examples'\n-    // The only change necessary is an extra runtime dependency on io.grpc:grpc-xds\n-    runtimeOnly \"io.grpc:grpc-xds:${grpcVersion}\"\n+    implementation \"io.grpc:grpc-netty:${grpcVersion}\"\n+    implementation \"io.grpc:grpc-protobuf:${grpcVersion}\"\n+    implementation \"io.grpc:grpc-stub:${grpcVersion}\"\n+    implementation \"io.grpc:grpc-xds:${grpcVersion}\"\n+    compileOnly \"org.apache.tomcat:annotations-api:6.0.53\"\n+    runtimeOnly \"io.netty:netty-tcnative-boringssl-static:${nettyTcNativeVersion}\"\n+}\n+\n+protobuf {\n+    protoc { artifact = \"com.google.protobuf:protoc:${protocVersion}\" }\n+    plugins {\n+        grpc { artifact = \"io.grpc:protoc-gen-grpc-java:${grpcVersion}\" }\n+    }\n+    generateProtoTasks {\n+        all()*.plugins { grpc {} }\n+    }\n }\n \n startScripts.enabled = false\n \n-task helloWorldClient(type: CreateStartScripts) {\n-    mainClassName = 'io.grpc.examples.helloworld.HelloWorldClient'\n-    applicationName = 'xds-hello-world-client'\n+task helloWorldClientXds(type: CreateStartScripts) {\n+    mainClassName = 'io.grpc.examples.helloworldxds.HelloWorldClientXds'\n+    applicationName = 'hello-world-client-xds'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c477e72bb161abcbe8a32d10eb9d6cc0b18a529"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk3MTU5OQ==", "bodyText": "The example should not depend on forever-experimental APIs like grpc-netty. It doesn't seem these are even used.\nI think the imports need to get cleaned up. It looks like java.io.File also isn't used, and the io.netty imports. I assume there are others.", "url": "https://github.com/grpc/grpc-java/pull/7535#discussion_r528971599", "createdAt": "2020-11-23T20:18:41Z", "author": {"login": "ejona86"}, "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/HelloWorldClientXds.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.ChannelCredentials;\n+import io.grpc.Grpc;\n+import io.grpc.InsecureChannelCredentials;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.netty.GrpcSslContexts;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c477e72bb161abcbe8a32d10eb9d6cc0b18a529"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk3MTc2MQ==", "bodyText": "Users should generally be using grpc-netty-shaded, not grpc-netty.", "url": "https://github.com/grpc/grpc-java/pull/7535#discussion_r528971761", "createdAt": "2020-11-23T20:19:01Z", "author": {"login": "ejona86"}, "path": "examples/example-xds/build.gradle", "diffHunk": "@@ -19,25 +23,46 @@ targetCompatibility = 1.7\n // Feel free to delete the comment at the next line. It is just for safely\n // updating the version in our release process.\n def grpcVersion = '1.34.0-SNAPSHOT' // CURRENT_GRPC_VERSION\n+def nettyTcNativeVersion = '2.0.31.Final'\n+def protocVersion = '3.12.0'\n \n dependencies {\n-    // This example's client is the same as the helloworld client. We depend on the helloworld\n-    // client's code here\n-    implementation ':examples'\n-    // The only change necessary is an extra runtime dependency on io.grpc:grpc-xds\n-    runtimeOnly \"io.grpc:grpc-xds:${grpcVersion}\"\n+    implementation \"io.grpc:grpc-netty:${grpcVersion}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c477e72bb161abcbe8a32d10eb9d6cc0b18a529"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk3MTk2MQ==", "bodyText": "This is included in grpc-netty-shaded.", "url": "https://github.com/grpc/grpc-java/pull/7535#discussion_r528971961", "createdAt": "2020-11-23T20:19:24Z", "author": {"login": "ejona86"}, "path": "examples/example-xds/build.gradle", "diffHunk": "@@ -19,25 +23,46 @@ targetCompatibility = 1.7\n // Feel free to delete the comment at the next line. It is just for safely\n // updating the version in our release process.\n def grpcVersion = '1.34.0-SNAPSHOT' // CURRENT_GRPC_VERSION\n+def nettyTcNativeVersion = '2.0.31.Final'\n+def protocVersion = '3.12.0'\n \n dependencies {\n-    // This example's client is the same as the helloworld client. We depend on the helloworld\n-    // client's code here\n-    implementation ':examples'\n-    // The only change necessary is an extra runtime dependency on io.grpc:grpc-xds\n-    runtimeOnly \"io.grpc:grpc-xds:${grpcVersion}\"\n+    implementation \"io.grpc:grpc-netty:${grpcVersion}\"\n+    implementation \"io.grpc:grpc-protobuf:${grpcVersion}\"\n+    implementation \"io.grpc:grpc-stub:${grpcVersion}\"\n+    implementation \"io.grpc:grpc-xds:${grpcVersion}\"\n+    compileOnly \"org.apache.tomcat:annotations-api:6.0.53\"\n+    runtimeOnly \"io.netty:netty-tcnative-boringssl-static:${nettyTcNativeVersion}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c477e72bb161abcbe8a32d10eb9d6cc0b18a529"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2ODE5NjE0", "url": "https://github.com/grpc/grpc-java/pull/7535#pullrequestreview-536819614", "createdAt": "2020-11-23T20:26:24Z", "commit": {"oid": "4c477e72bb161abcbe8a32d10eb9d6cc0b18a529"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDoyNjoyNFrOH4eGYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDoyNjoyNFrOH4eGYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk3NTQ1Nw==", "bodyText": "Why would we ever do this? What is wrong with a case sensitive equals? If we really must, a case-insensitive equals. But why startswith?", "url": "https://github.com/grpc/grpc-java/pull/7535#discussion_r528975457", "createdAt": "2020-11-23T20:26:24Z", "author": {"login": "ejona86"}, "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/HelloWorldClientXds.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.ChannelCredentials;\n+import io.grpc.Grpc;\n+import io.grpc.InsecureChannelCredentials;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.netty.GrpcSslContexts;\n+import io.grpc.netty.NettyChannelBuilder;\n+import io.grpc.xds.XdsChannelCredentials;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import java.io.File;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.net.ssl.SSLException;\n+\n+/**\n+ * A simple xDS client that requests a greeting from the {@link HelloWorldServerXds}.\n+ */\n+public class HelloWorldClientXds {\n+  private static final Logger logger = Logger.getLogger(HelloWorldClientXds.class.getName());\n+  private final ManagedChannel channel;\n+  private final GreeterGrpc.GreeterBlockingStub blockingStub;\n+\n+  /** Construct client connecting to HelloWorld server at {@code host:port}. */\n+  public HelloWorldClientXds(String target, boolean useXdsCreds) throws SSLException {\n+    this.channel =\n+        Grpc.newChannelBuilder(\n+                target,\n+                useXdsCreds\n+                    ? XdsChannelCredentials.create(InsecureChannelCredentials.create())\n+                    : InsecureChannelCredentials.create())\n+            .build();\n+    blockingStub = GreeterGrpc.newBlockingStub(this.channel);\n+  }\n+\n+  public void shutdown() throws InterruptedException {\n+    channel.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n+  }\n+\n+  /** Say hello to server. */\n+  public void greet(String name) {\n+    logger.info(\"Will try to greet \" + name + \" ...\");\n+    HelloRequest request = HelloRequest.newBuilder().setName(name).build();\n+    HelloReply response;\n+    try {\n+      response = blockingStub.sayHello(request);\n+    } catch (StatusRuntimeException e) {\n+      logger.log(Level.WARNING, \"RPC failed: {0}\", e.getStatus());\n+      return;\n+    }\n+    logger.info(\"Greeting: \" + response.getMessage());\n+  }\n+\n+  /**\n+   * Greet server. If provided, the second element of {@code args} is the name to use in the\n+   * greeting.\n+   */\n+  public static void main(String[] args) throws Exception {\n+    String user = \"xds-client\";\n+    boolean useXdsCreds = false;\n+    if (args.length < 1 || args.length > 3) {\n+      System.out.println(\"USAGE: HelloWorldClientXds target [name [--secure]]\\n\");\n+      System.err.println(\"  target  The xds target to connect to using the 'xds:' target scheme.\");\n+      System.err.println(\"  name    The name you wish to include in the greeting request. Defaults to \" + user);\n+      System.err.println(\n+          \"  '--secure'     Indicates using xDS credentials otherwise defaults to insecure.\");\n+      System.exit(1);\n+    }\n+    if (args.length > 1) {\n+      user = args[1];\n+      if (args.length == 3) {\n+        useXdsCreds = args[2].toLowerCase().startsWith(\"--s\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c477e72bb161abcbe8a32d10eb9d6cc0b18a529"}, "originalPosition": 95}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2ODIwMjU0", "url": "https://github.com/grpc/grpc-java/pull/7535#pullrequestreview-536820254", "createdAt": "2020-11-23T20:27:25Z", "commit": {"oid": "4c477e72bb161abcbe8a32d10eb9d6cc0b18a529"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDoyNzoyNVrOH4eIWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDoyNzoyNVrOH4eIWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk3NTk2Mw==", "bodyText": ":-/ You changed the order compared to the helloworld example. I can understand why to a degree, but it would probably be better to just have both names required. This will also impact documentation.", "url": "https://github.com/grpc/grpc-java/pull/7535#discussion_r528975963", "createdAt": "2020-11-23T20:27:25Z", "author": {"login": "ejona86"}, "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/HelloWorldClientXds.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.ChannelCredentials;\n+import io.grpc.Grpc;\n+import io.grpc.InsecureChannelCredentials;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.netty.GrpcSslContexts;\n+import io.grpc.netty.NettyChannelBuilder;\n+import io.grpc.xds.XdsChannelCredentials;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import java.io.File;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.net.ssl.SSLException;\n+\n+/**\n+ * A simple xDS client that requests a greeting from the {@link HelloWorldServerXds}.\n+ */\n+public class HelloWorldClientXds {\n+  private static final Logger logger = Logger.getLogger(HelloWorldClientXds.class.getName());\n+  private final ManagedChannel channel;\n+  private final GreeterGrpc.GreeterBlockingStub blockingStub;\n+\n+  /** Construct client connecting to HelloWorld server at {@code host:port}. */\n+  public HelloWorldClientXds(String target, boolean useXdsCreds) throws SSLException {\n+    this.channel =\n+        Grpc.newChannelBuilder(\n+                target,\n+                useXdsCreds\n+                    ? XdsChannelCredentials.create(InsecureChannelCredentials.create())\n+                    : InsecureChannelCredentials.create())\n+            .build();\n+    blockingStub = GreeterGrpc.newBlockingStub(this.channel);\n+  }\n+\n+  public void shutdown() throws InterruptedException {\n+    channel.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n+  }\n+\n+  /** Say hello to server. */\n+  public void greet(String name) {\n+    logger.info(\"Will try to greet \" + name + \" ...\");\n+    HelloRequest request = HelloRequest.newBuilder().setName(name).build();\n+    HelloReply response;\n+    try {\n+      response = blockingStub.sayHello(request);\n+    } catch (StatusRuntimeException e) {\n+      logger.log(Level.WARNING, \"RPC failed: {0}\", e.getStatus());\n+      return;\n+    }\n+    logger.info(\"Greeting: \" + response.getMessage());\n+  }\n+\n+  /**\n+   * Greet server. If provided, the second element of {@code args} is the name to use in the\n+   * greeting.\n+   */\n+  public static void main(String[] args) throws Exception {\n+    String user = \"xds-client\";\n+    boolean useXdsCreds = false;\n+    if (args.length < 1 || args.length > 3) {\n+      System.out.println(\"USAGE: HelloWorldClientXds target [name [--secure]]\\n\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c477e72bb161abcbe8a32d10eb9d6cc0b18a529"}, "originalPosition": 85}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3932, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}