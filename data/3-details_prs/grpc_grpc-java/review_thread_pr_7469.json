{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0NjkwNTY3", "number": 7469, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMzowMzowM1rOEq83kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTo0NzoxNVrOErXoTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDcyOTEyOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/XdsNameResolver.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMzowMzowM1rOHdc4Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDo1MToyNFrOHde0Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0MzkyNg==", "bodyText": "I don't think this flag is necessary. It's immediately true once instantiated.", "url": "https://github.com/grpc/grpc-java/pull/7469#discussion_r500643926", "createdAt": "2020-10-06T23:03:03Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/XdsNameResolver.java", "diffHunk": "@@ -300,15 +412,92 @@ public void run() {\n     }\n   }\n \n-  // https://github.com/google/error-prone/issues/1767\n-  @SuppressWarnings(\"ModifyCollectionInEnhancedForLoop\")\n-  private class ConfigWatcherImpl implements ConfigWatcher {\n+  private class ResolveState implements LdsResourceWatcher {\n+    private final ConfigOrError emptyServiceConfig =\n+        serviceConfigParser.parseServiceConfig(Collections.<String, Object>emptyMap());\n+    private final ResolutionResult emptyResult =\n+        ResolutionResult.newBuilder()\n+            .setServiceConfig(emptyServiceConfig)\n+            // let channel take action for no config selector\n+            .build();\n+    private boolean started;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c4899aed385cc59e9a5b1e1f88ff448928c3989"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY1NzI4Mg==", "bodyText": "Ah, this was for the same reason as the rdsWatcher != this check for RDS watcher. When there is multi-threading involved, it is possible that a callback was scheduled (to be executed later) while this resolver is being shut down. Then when the callback is invoked, it should be ignored.\nWithout this flag, it would do the similar check resolveState != this.", "url": "https://github.com/grpc/grpc-java/pull/7469#discussion_r500657282", "createdAt": "2020-10-06T23:46:54Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsNameResolver.java", "diffHunk": "@@ -300,15 +412,92 @@ public void run() {\n     }\n   }\n \n-  // https://github.com/google/error-prone/issues/1767\n-  @SuppressWarnings(\"ModifyCollectionInEnhancedForLoop\")\n-  private class ConfigWatcherImpl implements ConfigWatcher {\n+  private class ResolveState implements LdsResourceWatcher {\n+    private final ConfigOrError emptyServiceConfig =\n+        serviceConfigParser.parseServiceConfig(Collections.<String, Object>emptyMap());\n+    private final ResolutionResult emptyResult =\n+        ResolutionResult.newBuilder()\n+            .setServiceConfig(emptyServiceConfig)\n+            // let channel take action for no config selector\n+            .build();\n+    private boolean started;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0MzkyNg=="}, "originalCommit": {"oid": "9c4899aed385cc59e9a5b1e1f88ff448928c3989"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2MjMxOQ==", "bodyText": "I would recommend add the checks when you are really implementing the race handling, and review them together. This is really based on assumptions of future implementation which I cannot see the whole picture.", "url": "https://github.com/grpc/grpc-java/pull/7469#discussion_r500662319", "createdAt": "2020-10-07T00:03:05Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/XdsNameResolver.java", "diffHunk": "@@ -300,15 +412,92 @@ public void run() {\n     }\n   }\n \n-  // https://github.com/google/error-prone/issues/1767\n-  @SuppressWarnings(\"ModifyCollectionInEnhancedForLoop\")\n-  private class ConfigWatcherImpl implements ConfigWatcher {\n+  private class ResolveState implements LdsResourceWatcher {\n+    private final ConfigOrError emptyServiceConfig =\n+        serviceConfigParser.parseServiceConfig(Collections.<String, Object>emptyMap());\n+    private final ResolutionResult emptyResult =\n+        ResolutionResult.newBuilder()\n+            .setServiceConfig(emptyServiceConfig)\n+            // let channel take action for no config selector\n+            .build();\n+    private boolean started;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0MzkyNg=="}, "originalCommit": {"oid": "9c4899aed385cc59e9a5b1e1f88ff448928c3989"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3NTY2Mw==", "bodyText": "Okay, eliminated flags used for racing cases for now.", "url": "https://github.com/grpc/grpc-java/pull/7469#discussion_r500675663", "createdAt": "2020-10-07T00:51:24Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsNameResolver.java", "diffHunk": "@@ -300,15 +412,92 @@ public void run() {\n     }\n   }\n \n-  // https://github.com/google/error-prone/issues/1767\n-  @SuppressWarnings(\"ModifyCollectionInEnhancedForLoop\")\n-  private class ConfigWatcherImpl implements ConfigWatcher {\n+  private class ResolveState implements LdsResourceWatcher {\n+    private final ConfigOrError emptyServiceConfig =\n+        serviceConfigParser.parseServiceConfig(Collections.<String, Object>emptyMap());\n+    private final ResolutionResult emptyResult =\n+        ResolutionResult.newBuilder()\n+            .setServiceConfig(emptyServiceConfig)\n+            // let channel take action for no config selector\n+            .build();\n+    private boolean started;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0MzkyNg=="}, "originalCommit": {"oid": "9c4899aed385cc59e9a5b1e1f88ff448928c3989"}, "originalPosition": 200}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDczMjg1OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/XdsNameResolver.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMzowNTowMVrOHdc6eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDowNTo1NlrOHdeDTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0NDQ3Mg==", "bodyText": "I believe start() is only called right after instantiation and won't be called twice.", "url": "https://github.com/grpc/grpc-java/pull/7469#discussion_r500644472", "createdAt": "2020-10-06T23:05:01Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/XdsNameResolver.java", "diffHunk": "@@ -300,15 +412,92 @@ public void run() {\n     }\n   }\n \n-  // https://github.com/google/error-prone/issues/1767\n-  @SuppressWarnings(\"ModifyCollectionInEnhancedForLoop\")\n-  private class ConfigWatcherImpl implements ConfigWatcher {\n+  private class ResolveState implements LdsResourceWatcher {\n+    private final ConfigOrError emptyServiceConfig =\n+        serviceConfigParser.parseServiceConfig(Collections.<String, Object>emptyMap());\n+    private final ResolutionResult emptyResult =\n+        ResolutionResult.newBuilder()\n+            .setServiceConfig(emptyServiceConfig)\n+            // let channel take action for no config selector\n+            .build();\n+    private boolean started;\n     private Set<String> existingClusters;\n+    @Nullable\n+    private String rdsResource;\n+    @Nullable\n+    private RdsResourceWatcher rdsWatcher;\n+\n+    @Override\n+    public void onChanged(LdsUpdate update) {\n+      if (!started) {\n+        return;\n+      }\n+      logger.log(XdsLogLevel.INFO, \"Receive LDS resource update: {0}\", update);\n+      List<VirtualHost> virtualHosts = update.getVirtualHosts();\n+      String rdsName = update.getRdsName();\n+      if (rdsName != null && rdsName.equals(rdsResource)) {\n+        return;\n+      }\n+      cleanUpRdsWatcher();\n+      if (virtualHosts != null) {\n+        updateRoutes(virtualHosts);\n+      } else {\n+        rdsResource = rdsName;\n+        rdsWatcher = new RdsResourceWatcherImpl();\n+        logger.log(XdsLogLevel.INFO, \"Start watching RDS resource {0}\", rdsResource);\n+        xdsClient.watchRdsResource(rdsResource, rdsWatcher);\n+      }\n+    }\n \n     @Override\n-    public void onConfigChanged(ConfigUpdate update) {\n+    public void onError(Status error) {\n+      if (!started) {\n+        return;\n+      }\n+      logger.log(\n+          XdsLogLevel.WARNING,\n+          \"Received error from xDS client {0}: {1}\", xdsClient, error.getDescription());\n+      listener.onError(error);\n+    }\n+\n+    @Override\n+    public void onResourceDoesNotExist(String resourceName) {\n+      if (!started) {\n+        return;\n+      }\n+      logger.log(XdsLogLevel.INFO, \"LDS resource {0} unavailable\", resourceName);\n+      cleanUpRdsWatcher();\n+      listener.onResult(emptyResult);\n+    }\n+\n+    private void start() {\n+      if (started) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c4899aed385cc59e9a5b1e1f88ff448928c3989"}, "originalPosition": 252}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY1NTgyMQ==", "bodyText": "The problem for not using start()/stop() is that the LdsResourceWatcher implementation class will not be self-contained. It would be something like\nclass XdsNameResolver {\n  private LdsResourceWatcher ldsWatcher;\n\n  @Override\n  public void start(Listener2 listener) {\n    ...\n    ldsWatcher = new LdsResourceWatcherImpl();\n    xdsClient.watchLdsResource(authority, ldsWatcher);\n  }\n\n\n  @Override\n  public void shutdown() {\n    ...\n    if (xdsClient != null) {\n      if (ldsWatcher != null) {\n        xdsClient.cancelLdsResourceWatch(authority, ldsWatcher);\n      }\n      ...\n    }\n    ...\n  }\n}\n\nI prefer the existing approach as it encapsulate things better. What do you think?", "url": "https://github.com/grpc/grpc-java/pull/7469#discussion_r500655821", "createdAt": "2020-10-06T23:42:20Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsNameResolver.java", "diffHunk": "@@ -300,15 +412,92 @@ public void run() {\n     }\n   }\n \n-  // https://github.com/google/error-prone/issues/1767\n-  @SuppressWarnings(\"ModifyCollectionInEnhancedForLoop\")\n-  private class ConfigWatcherImpl implements ConfigWatcher {\n+  private class ResolveState implements LdsResourceWatcher {\n+    private final ConfigOrError emptyServiceConfig =\n+        serviceConfigParser.parseServiceConfig(Collections.<String, Object>emptyMap());\n+    private final ResolutionResult emptyResult =\n+        ResolutionResult.newBuilder()\n+            .setServiceConfig(emptyServiceConfig)\n+            // let channel take action for no config selector\n+            .build();\n+    private boolean started;\n     private Set<String> existingClusters;\n+    @Nullable\n+    private String rdsResource;\n+    @Nullable\n+    private RdsResourceWatcher rdsWatcher;\n+\n+    @Override\n+    public void onChanged(LdsUpdate update) {\n+      if (!started) {\n+        return;\n+      }\n+      logger.log(XdsLogLevel.INFO, \"Receive LDS resource update: {0}\", update);\n+      List<VirtualHost> virtualHosts = update.getVirtualHosts();\n+      String rdsName = update.getRdsName();\n+      if (rdsName != null && rdsName.equals(rdsResource)) {\n+        return;\n+      }\n+      cleanUpRdsWatcher();\n+      if (virtualHosts != null) {\n+        updateRoutes(virtualHosts);\n+      } else {\n+        rdsResource = rdsName;\n+        rdsWatcher = new RdsResourceWatcherImpl();\n+        logger.log(XdsLogLevel.INFO, \"Start watching RDS resource {0}\", rdsResource);\n+        xdsClient.watchRdsResource(rdsResource, rdsWatcher);\n+      }\n+    }\n \n     @Override\n-    public void onConfigChanged(ConfigUpdate update) {\n+    public void onError(Status error) {\n+      if (!started) {\n+        return;\n+      }\n+      logger.log(\n+          XdsLogLevel.WARNING,\n+          \"Received error from xDS client {0}: {1}\", xdsClient, error.getDescription());\n+      listener.onError(error);\n+    }\n+\n+    @Override\n+    public void onResourceDoesNotExist(String resourceName) {\n+      if (!started) {\n+        return;\n+      }\n+      logger.log(XdsLogLevel.INFO, \"LDS resource {0} unavailable\", resourceName);\n+      cleanUpRdsWatcher();\n+      listener.onResult(emptyResult);\n+    }\n+\n+    private void start() {\n+      if (started) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0NDQ3Mg=="}, "originalCommit": {"oid": "9c4899aed385cc59e9a5b1e1f88ff448928c3989"}, "originalPosition": 252}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2MzExOQ==", "bodyText": "I was not saying not to use start()/stop(). It was about checking the started flag.", "url": "https://github.com/grpc/grpc-java/pull/7469#discussion_r500663119", "createdAt": "2020-10-07T00:05:56Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/XdsNameResolver.java", "diffHunk": "@@ -300,15 +412,92 @@ public void run() {\n     }\n   }\n \n-  // https://github.com/google/error-prone/issues/1767\n-  @SuppressWarnings(\"ModifyCollectionInEnhancedForLoop\")\n-  private class ConfigWatcherImpl implements ConfigWatcher {\n+  private class ResolveState implements LdsResourceWatcher {\n+    private final ConfigOrError emptyServiceConfig =\n+        serviceConfigParser.parseServiceConfig(Collections.<String, Object>emptyMap());\n+    private final ResolutionResult emptyResult =\n+        ResolutionResult.newBuilder()\n+            .setServiceConfig(emptyServiceConfig)\n+            // let channel take action for no config selector\n+            .build();\n+    private boolean started;\n     private Set<String> existingClusters;\n+    @Nullable\n+    private String rdsResource;\n+    @Nullable\n+    private RdsResourceWatcher rdsWatcher;\n+\n+    @Override\n+    public void onChanged(LdsUpdate update) {\n+      if (!started) {\n+        return;\n+      }\n+      logger.log(XdsLogLevel.INFO, \"Receive LDS resource update: {0}\", update);\n+      List<VirtualHost> virtualHosts = update.getVirtualHosts();\n+      String rdsName = update.getRdsName();\n+      if (rdsName != null && rdsName.equals(rdsResource)) {\n+        return;\n+      }\n+      cleanUpRdsWatcher();\n+      if (virtualHosts != null) {\n+        updateRoutes(virtualHosts);\n+      } else {\n+        rdsResource = rdsName;\n+        rdsWatcher = new RdsResourceWatcherImpl();\n+        logger.log(XdsLogLevel.INFO, \"Start watching RDS resource {0}\", rdsResource);\n+        xdsClient.watchRdsResource(rdsResource, rdsWatcher);\n+      }\n+    }\n \n     @Override\n-    public void onConfigChanged(ConfigUpdate update) {\n+    public void onError(Status error) {\n+      if (!started) {\n+        return;\n+      }\n+      logger.log(\n+          XdsLogLevel.WARNING,\n+          \"Received error from xDS client {0}: {1}\", xdsClient, error.getDescription());\n+      listener.onError(error);\n+    }\n+\n+    @Override\n+    public void onResourceDoesNotExist(String resourceName) {\n+      if (!started) {\n+        return;\n+      }\n+      logger.log(XdsLogLevel.INFO, \"LDS resource {0} unavailable\", resourceName);\n+      cleanUpRdsWatcher();\n+      listener.onResult(emptyResult);\n+    }\n+\n+    private void start() {\n+      if (started) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0NDQ3Mg=="}, "originalCommit": {"oid": "9c4899aed385cc59e9a5b1e1f88ff448928c3989"}, "originalPosition": 252}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDczOTkyOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/XdsNameResolver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMzowODoyM1rOHdc-sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDo1NTo0N1rOHde4nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0NTU1Mg==", "bodyText": "Let's not do this now based on assumptions on future XdsClient implementation. It's not clear how race is handled by XdsClient yet.", "url": "https://github.com/grpc/grpc-java/pull/7469#discussion_r500645552", "createdAt": "2020-10-06T23:08:23Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/XdsNameResolver.java", "diffHunk": "@@ -353,25 +542,44 @@ public void onConfigChanged(ConfigUpdate update) {\n       }\n     }\n \n-    @Override\n-    public void onResourceDoesNotExist(String resourceName) {\n-      logger.log(XdsLogLevel.INFO, \"Resource {0} is unavailable\", resourceName);\n-      ConfigOrError parsedServiceConfig =\n-          serviceConfigParser.parseServiceConfig(Collections.<String, Object>emptyMap());\n-      ResolutionResult result =\n-          ResolutionResult.newBuilder()\n-              .setServiceConfig(parsedServiceConfig)\n-              // let channel take action for no config selector\n-              .build();\n-      listener.onResult(result);\n+    private void cleanUpRdsWatcher() {\n+      if (rdsWatcher != null) {\n+        logger.log(XdsLogLevel.INFO, \"Stop watching RDS resource {0}\", rdsResource);\n+        xdsClient.cancelRdsResourceWatch(rdsResource, rdsWatcher);\n+        rdsResource = null;\n+        rdsWatcher = null;\n+      }\n     }\n \n-    @Override\n-    public void onError(Status error) {\n-      logger.log(\n-          XdsLogLevel.WARNING,\n-          \"Received error from xDS client {0}: {1}\", xdsClient, error.getDescription());\n-      listener.onError(error);\n+    private class RdsResourceWatcherImpl implements RdsResourceWatcher {\n+\n+      @Override\n+      public void onChanged(RdsUpdate update) {\n+        if (this != rdsWatcher) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c4899aed385cc59e9a5b1e1f88ff448928c3989"}, "originalPosition": 326}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3Njc2NA==", "bodyText": "Eliminated. Will reconsider in next steps.", "url": "https://github.com/grpc/grpc-java/pull/7469#discussion_r500676764", "createdAt": "2020-10-07T00:55:47Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsNameResolver.java", "diffHunk": "@@ -353,25 +542,44 @@ public void onConfigChanged(ConfigUpdate update) {\n       }\n     }\n \n-    @Override\n-    public void onResourceDoesNotExist(String resourceName) {\n-      logger.log(XdsLogLevel.INFO, \"Resource {0} is unavailable\", resourceName);\n-      ConfigOrError parsedServiceConfig =\n-          serviceConfigParser.parseServiceConfig(Collections.<String, Object>emptyMap());\n-      ResolutionResult result =\n-          ResolutionResult.newBuilder()\n-              .setServiceConfig(parsedServiceConfig)\n-              // let channel take action for no config selector\n-              .build();\n-      listener.onResult(result);\n+    private void cleanUpRdsWatcher() {\n+      if (rdsWatcher != null) {\n+        logger.log(XdsLogLevel.INFO, \"Stop watching RDS resource {0}\", rdsResource);\n+        xdsClient.cancelRdsResourceWatch(rdsResource, rdsWatcher);\n+        rdsResource = null;\n+        rdsWatcher = null;\n+      }\n     }\n \n-    @Override\n-    public void onError(Status error) {\n-      logger.log(\n-          XdsLogLevel.WARNING,\n-          \"Received error from xDS client {0}: {1}\", xdsClient, error.getDescription());\n-      listener.onError(error);\n+    private class RdsResourceWatcherImpl implements RdsResourceWatcher {\n+\n+      @Override\n+      public void onChanged(RdsUpdate update) {\n+        if (this != rdsWatcher) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0NTU1Mg=="}, "originalCommit": {"oid": "9c4899aed385cc59e9a5b1e1f88ff448928c3989"}, "originalPosition": 326}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTA5NDY3OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/XdsNameResolver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTo0MDozOVrOHeGgwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMzoxMTo1NlrOHeMckQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyNjAxNg==", "bodyText": "Should they be cleaned up in a FILO order?", "url": "https://github.com/grpc/grpc-java/pull/7469#discussion_r501326016", "createdAt": "2020-10-07T21:40:39Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/XdsNameResolver.java", "diffHunk": "@@ -300,15 +412,74 @@ public void run() {\n     }\n   }\n \n-  // https://github.com/google/error-prone/issues/1767\n-  @SuppressWarnings(\"ModifyCollectionInEnhancedForLoop\")\n-  private class ConfigWatcherImpl implements ConfigWatcher {\n+  private class ResolveState implements LdsResourceWatcher {\n+    private final ConfigOrError emptyServiceConfig =\n+        serviceConfigParser.parseServiceConfig(Collections.<String, Object>emptyMap());\n+    private final ResolutionResult emptyResult =\n+        ResolutionResult.newBuilder()\n+            .setServiceConfig(emptyServiceConfig)\n+            // let channel take action for no config selector\n+            .build();\n     private Set<String> existingClusters;\n+    @Nullable\n+    private String rdsResource;\n+    @Nullable\n+    private RdsResourceWatcher rdsWatcher;\n+\n+    @Override\n+    public void onChanged(LdsUpdate update) {\n+      logger.log(XdsLogLevel.INFO, \"Receive LDS resource update: {0}\", update);\n+      List<VirtualHost> virtualHosts = update.getVirtualHosts();\n+      String rdsName = update.getRdsName();\n+      if (rdsName != null && rdsName.equals(rdsResource)) {\n+        return;\n+      }\n+      cleanUpRdsWatcher();\n+      if (virtualHosts != null) {\n+        updateRoutes(virtualHosts);\n+      } else {\n+        rdsResource = rdsName;\n+        rdsWatcher = new RdsResourceWatcherImpl();\n+        logger.log(XdsLogLevel.INFO, \"Start watching RDS resource {0}\", rdsResource);\n+        xdsClient.watchRdsResource(rdsResource, rdsWatcher);\n+      }\n+    }\n+\n+    @Override\n+    public void onError(Status error) {\n+      logger.log(\n+          XdsLogLevel.WARNING,\n+          \"Received error from xDS client {0}: {1}\", xdsClient, error.getDescription());\n+      listener.onError(error);\n+    }\n \n     @Override\n-    public void onConfigChanged(ConfigUpdate update) {\n+    public void onResourceDoesNotExist(String resourceName) {\n+      logger.log(XdsLogLevel.INFO, \"LDS resource {0} unavailable\", resourceName);\n+      cleanUpRdsWatcher();\n+      listener.onResult(emptyResult);\n+    }\n+\n+    private void start() {\n+      logger.log(XdsLogLevel.INFO, \"Start watching LDS resource {0}\", authority);\n+      xdsClient.watchLdsResource(authority, this);\n+    }\n+\n+    private void stop() {\n+      logger.log(XdsLogLevel.INFO, \"Stop watching LDS resource {0}\", authority);\n+      xdsClient.cancelLdsResourceWatch(authority, this);\n+      cleanUpRdsWatcher();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bc8e9d44419d9e30f8cf9c3df56edba424056f5"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQyMzI0OQ==", "bodyText": "It shouldn't matter. But sure, swapped.", "url": "https://github.com/grpc/grpc-java/pull/7469#discussion_r501423249", "createdAt": "2020-10-08T03:11:56Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsNameResolver.java", "diffHunk": "@@ -300,15 +412,74 @@ public void run() {\n     }\n   }\n \n-  // https://github.com/google/error-prone/issues/1767\n-  @SuppressWarnings(\"ModifyCollectionInEnhancedForLoop\")\n-  private class ConfigWatcherImpl implements ConfigWatcher {\n+  private class ResolveState implements LdsResourceWatcher {\n+    private final ConfigOrError emptyServiceConfig =\n+        serviceConfigParser.parseServiceConfig(Collections.<String, Object>emptyMap());\n+    private final ResolutionResult emptyResult =\n+        ResolutionResult.newBuilder()\n+            .setServiceConfig(emptyServiceConfig)\n+            // let channel take action for no config selector\n+            .build();\n     private Set<String> existingClusters;\n+    @Nullable\n+    private String rdsResource;\n+    @Nullable\n+    private RdsResourceWatcher rdsWatcher;\n+\n+    @Override\n+    public void onChanged(LdsUpdate update) {\n+      logger.log(XdsLogLevel.INFO, \"Receive LDS resource update: {0}\", update);\n+      List<VirtualHost> virtualHosts = update.getVirtualHosts();\n+      String rdsName = update.getRdsName();\n+      if (rdsName != null && rdsName.equals(rdsResource)) {\n+        return;\n+      }\n+      cleanUpRdsWatcher();\n+      if (virtualHosts != null) {\n+        updateRoutes(virtualHosts);\n+      } else {\n+        rdsResource = rdsName;\n+        rdsWatcher = new RdsResourceWatcherImpl();\n+        logger.log(XdsLogLevel.INFO, \"Start watching RDS resource {0}\", rdsResource);\n+        xdsClient.watchRdsResource(rdsResource, rdsWatcher);\n+      }\n+    }\n+\n+    @Override\n+    public void onError(Status error) {\n+      logger.log(\n+          XdsLogLevel.WARNING,\n+          \"Received error from xDS client {0}: {1}\", xdsClient, error.getDescription());\n+      listener.onError(error);\n+    }\n \n     @Override\n-    public void onConfigChanged(ConfigUpdate update) {\n+    public void onResourceDoesNotExist(String resourceName) {\n+      logger.log(XdsLogLevel.INFO, \"LDS resource {0} unavailable\", resourceName);\n+      cleanUpRdsWatcher();\n+      listener.onResult(emptyResult);\n+    }\n+\n+    private void start() {\n+      logger.log(XdsLogLevel.INFO, \"Start watching LDS resource {0}\", authority);\n+      xdsClient.watchLdsResource(authority, this);\n+    }\n+\n+    private void stop() {\n+      logger.log(XdsLogLevel.INFO, \"Stop watching LDS resource {0}\", authority);\n+      xdsClient.cancelLdsResourceWatch(authority, this);\n+      cleanUpRdsWatcher();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyNjAxNg=="}, "originalCommit": {"oid": "6bc8e9d44419d9e30f8cf9c3df56edba424056f5"}, "originalPosition": 249}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTExMzc0OnYy", "diffSide": "LEFT", "path": "xds/src/main/java/io/grpc/xds/XdsNameResolver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTo0NzoxNVrOHeGr2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMzoxMToyNVrOHeMcBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyODg1Nw==", "bodyText": "I wonder where the error-prone warning was coming from in the old code.", "url": "https://github.com/grpc/grpc-java/pull/7469#discussion_r501328857", "createdAt": "2020-10-07T21:47:15Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/XdsNameResolver.java", "diffHunk": "@@ -300,15 +412,74 @@ public void run() {\n     }\n   }\n \n-  // https://github.com/google/error-prone/issues/1767\n-  @SuppressWarnings(\"ModifyCollectionInEnhancedForLoop\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bc8e9d44419d9e30f8cf9c3df56edba424056f5"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQyMzEwOQ==", "bodyText": "It's for modifying ConcurrentMap clusterRefs in the loop. Not sure how that was triggered. But now, seems it doesn't trigger.", "url": "https://github.com/grpc/grpc-java/pull/7469#discussion_r501423109", "createdAt": "2020-10-08T03:11:25Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsNameResolver.java", "diffHunk": "@@ -300,15 +412,74 @@ public void run() {\n     }\n   }\n \n-  // https://github.com/google/error-prone/issues/1767\n-  @SuppressWarnings(\"ModifyCollectionInEnhancedForLoop\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyODg1Nw=="}, "originalCommit": {"oid": "6bc8e9d44419d9e30f8cf9c3df56edba424056f5"}, "originalPosition": 190}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2368, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}