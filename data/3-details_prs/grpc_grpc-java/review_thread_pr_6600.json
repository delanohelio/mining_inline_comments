{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNDAyNzE5", "number": 6600, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMjoyNjoxNFrODY9C2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODo1MjoyN1rODZ8FwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDkyNTcxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/grpc/internal/AutoConfiguredLoadBalancerFactory2.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMjoyNjoxNFrOFfG0bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMjoyNjoxNFrOFfG0bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE2MTkwMQ==", "bodyText": "Looks like there isn't a case where selection.config is an error. We may just change PolicySelection.config from ConfigOrError to Object.", "url": "https://github.com/grpc/grpc-java/pull/6600#discussion_r368161901", "createdAt": "2020-01-17T22:26:14Z", "author": {"login": "zhangkun83"}, "path": "core/src/main/java/io/grpc/internal/AutoConfiguredLoadBalancerFactory2.java", "diffHunk": "@@ -167,7 +167,7 @@ Status tryHandleResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n             ResolvedAddresses.newBuilder()\n                 .setAddresses(resolvedSelection.serverList)\n                 .setAttributes(attributes)\n-                .setLoadBalancingPolicyConfig(lbConfig)\n+                .setLoadBalancingPolicyConfig(lbConfig != null ? lbConfig.getConfig() : null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8afd89b00e1247851d1e48ca417b5788131acd15"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDk0MzU2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl2.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMjozNzowOVrOFfG_gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMDoxNTo0OFrOFgvYkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE2NDczOA==", "bodyText": "I think the original code is correct.\nFor a LoadBalancer that's still on the old service config path, it won't override LoadBalancerProvider.parseLoadBalancingPolicyConfig, thus configOrError would be LoadBalancerProvider.UNKNOWN_CONFIG, which is non-null, thus NAME_RESOLVER_SERVICE_CONFIG will get populated. We shouldn't call parseServiceConfig again.", "url": "https://github.com/grpc/grpc-java/pull/6600#discussion_r368164738", "createdAt": "2020-01-17T22:37:09Z", "author": {"login": "zhangkun83"}, "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl2.java", "diffHunk": "@@ -1332,9 +1333,13 @@ public void run() {\n           ConfigOrError configOrError = resolutionResult.getServiceConfig();\n           ServiceConfigHolder validServiceConfig = null;\n           Status serviceConfigError = null;\n+          Map<String, ?> rawServiceConfig =\n+              resolutionResult.getAttributes().get(GrpcAttributes.NAME_RESOLVER_SERVICE_CONFIG);\n+          if (configOrError == null && rawServiceConfig != null) {\n+            // use service config json in deprecated attributes\n+            configOrError = serviceConfigParser.parseServiceConfig(rawServiceConfig);\n+          }\n           if (configOrError != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8afd89b00e1247851d1e48ca417b5788131acd15"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE5MDY3Nw==", "bodyText": "Some 1st/3rd party name resolver might not use the serviceConfig field which can be ignored in current implementation even if the deprecated Attribute is set.\nLoadBalancerProvider.UNKNOWN_CONFIG is still a valid config from the name resolver point of view, thus those aren't consumed.", "url": "https://github.com/grpc/grpc-java/pull/6600#discussion_r368190677", "createdAt": "2020-01-18T00:46:47Z", "author": {"login": "creamsoup"}, "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl2.java", "diffHunk": "@@ -1332,9 +1333,13 @@ public void run() {\n           ConfigOrError configOrError = resolutionResult.getServiceConfig();\n           ServiceConfigHolder validServiceConfig = null;\n           Status serviceConfigError = null;\n+          Map<String, ?> rawServiceConfig =\n+              resolutionResult.getAttributes().get(GrpcAttributes.NAME_RESOLVER_SERVICE_CONFIG);\n+          if (configOrError == null && rawServiceConfig != null) {\n+            // use service config json in deprecated attributes\n+            configOrError = serviceConfigParser.parseServiceConfig(rawServiceConfig);\n+          }\n           if (configOrError != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE2NDczOA=="}, "originalCommit": {"oid": "8afd89b00e1247851d1e48ca417b5788131acd15"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTczODIwOQ==", "bodyText": "Now I see this is for \"old\" NameResolvers that don't call parseServiceConfig() at all but emit the raw config. Granted the raw config attribute is defined in the internal GrpcAttributes thus no third-party NameResolvers are expected to do that. It's fine to call parser here if that makes the migration for first-party NameResolver easier. It's going to be removed along with GrpcAttributes.NAME_RESOLVER_SERVICE_CONFIG anyway so not a big deal.", "url": "https://github.com/grpc/grpc-java/pull/6600#discussion_r369738209", "createdAt": "2020-01-22T18:48:17Z", "author": {"login": "zhangkun83"}, "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl2.java", "diffHunk": "@@ -1332,9 +1333,13 @@ public void run() {\n           ConfigOrError configOrError = resolutionResult.getServiceConfig();\n           ServiceConfigHolder validServiceConfig = null;\n           Status serviceConfigError = null;\n+          Map<String, ?> rawServiceConfig =\n+              resolutionResult.getAttributes().get(GrpcAttributes.NAME_RESOLVER_SERVICE_CONFIG);\n+          if (configOrError == null && rawServiceConfig != null) {\n+            // use service config json in deprecated attributes\n+            configOrError = serviceConfigParser.parseServiceConfig(rawServiceConfig);\n+          }\n           if (configOrError != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE2NDczOA=="}, "originalCommit": {"oid": "8afd89b00e1247851d1e48ca417b5788131acd15"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3NTA4OA==", "bodyText": "it turns out that internal migration was easy. Thus, as pointed out the attributes shouldn't be used out side of gRPC. removing the service config parsing in ManagedChannelImpl2.", "url": "https://github.com/grpc/grpc-java/pull/6600#discussion_r369875088", "createdAt": "2020-01-23T00:15:48Z", "author": {"login": "creamsoup"}, "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl2.java", "diffHunk": "@@ -1332,9 +1333,13 @@ public void run() {\n           ConfigOrError configOrError = resolutionResult.getServiceConfig();\n           ServiceConfigHolder validServiceConfig = null;\n           Status serviceConfigError = null;\n+          Map<String, ?> rawServiceConfig =\n+              resolutionResult.getAttributes().get(GrpcAttributes.NAME_RESOLVER_SERVICE_CONFIG);\n+          if (configOrError == null && rawServiceConfig != null) {\n+            // use service config json in deprecated attributes\n+            configOrError = serviceConfigParser.parseServiceConfig(rawServiceConfig);\n+          }\n           if (configOrError != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE2NDczOA=="}, "originalCommit": {"oid": "8afd89b00e1247851d1e48ca417b5788131acd15"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTI1NTA1OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/io/grpc/internal/ServiceConfigErrorHandlingTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODo1MjoyN1rOFgnKLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODo1MjoyN1rOFgnKLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0MDMzNQ==", "bodyText": "An \"old\" NameResolver that doesn't do service config parsing should call listener.onAddresses(), not onResult(). This makes sure the compatibility logic in Listener2#onAddresses() is exercised.", "url": "https://github.com/grpc/grpc-java/pull/6600#discussion_r369740335", "createdAt": "2020-01-22T18:52:27Z", "author": {"login": "zhangkun83"}, "path": "core/src/test/java/io/grpc/internal/ServiceConfigErrorHandlingTest.java", "diffHunk": "@@ -541,7 +571,17 @@ public NameResolver newNameResolver(final URI targetUri, NameResolver.Args args)\n         return null;\n       }\n       assertEquals(DEFAULT_PORT, args.getDefaultPort());\n-      FakeNameResolver resolver = new FakeNameResolver(args.getServiceConfigParser());\n+      FakeNameResolver resolver;\n+      if (enableServiceConfigParsing) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3bcdcce5d46489d5a5d08239b5a241da5fca850"}, "originalPosition": 149}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3055, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}