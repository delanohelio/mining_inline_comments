{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MjQxNjU2", "number": 6968, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzowNzo0MVrOD1g7_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMjoyNzo0N1rOD5mjDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDQwNzY3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/grpc/inprocess/InProcessChannelBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzowNzo0MVrOGK_rnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQyMTozOTowM1rOGMKbVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4MjMwMA==", "bodyText": "nit: We normally don't set the field explicitly to its default, because it is just noisy. It is fine, though, and no need to change.", "url": "https://github.com/grpc/grpc-java/pull/6968#discussion_r414182300", "createdAt": "2020-04-23T23:07:41Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/inprocess/InProcessChannelBuilder.java", "diffHunk": "@@ -70,6 +70,7 @@ public static InProcessChannelBuilder forAddress(String name, int port) {\n   private final String name;\n   private ScheduledExecutorService scheduledExecutorService;\n   private int maxInboundMetadataSize = Integer.MAX_VALUE;\n+  private boolean transportIncludeStatusCause = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f6453a7d04ca5acd29cb6a4766de3efef4997eb"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQwNjkzNA==", "bodyText": "Will avoid this in the future \ud83d\ude42", "url": "https://github.com/grpc/grpc-java/pull/6968#discussion_r415406934", "createdAt": "2020-04-26T21:39:03Z", "author": {"login": "reggiemcdonald"}, "path": "core/src/main/java/io/grpc/inprocess/InProcessChannelBuilder.java", "diffHunk": "@@ -70,6 +70,7 @@ public static InProcessChannelBuilder forAddress(String name, int port) {\n   private final String name;\n   private ScheduledExecutorService scheduledExecutorService;\n   private int maxInboundMetadataSize = Integer.MAX_VALUE;\n+  private boolean transportIncludeStatusCause = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4MjMwMA=="}, "originalCommit": {"oid": "7f6453a7d04ca5acd29cb6a4766de3efef4997eb"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDQwOTc0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/grpc/inprocess/InProcessChannelBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzowODoyM1rOGK_srg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQyMToyNzoxNVrOGMKTLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4MjU3NA==", "bodyText": "Add an empty line before the @ parts of the javadoc.", "url": "https://github.com/grpc/grpc-java/pull/6968#discussion_r414182574", "createdAt": "2020-04-23T23:08:23Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/inprocess/InProcessChannelBuilder.java", "diffHunk": "@@ -157,11 +158,22 @@ public InProcessChannelBuilder maxInboundMetadataSize(int bytes) {\n     return this;\n   }\n \n+  /**\n+   * Sets whether to override the default behaviour of InProcessTransport to include\n+   * the cause of the status.\n+   * @param enable whether to include cause in status", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f6453a7d04ca5acd29cb6a4766de3efef4997eb"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQwNDg0NA==", "bodyText": "done", "url": "https://github.com/grpc/grpc-java/pull/6968#discussion_r415404844", "createdAt": "2020-04-26T21:27:15Z", "author": {"login": "reggiemcdonald"}, "path": "core/src/main/java/io/grpc/inprocess/InProcessChannelBuilder.java", "diffHunk": "@@ -157,11 +158,22 @@ public InProcessChannelBuilder maxInboundMetadataSize(int bytes) {\n     return this;\n   }\n \n+  /**\n+   * Sets whether to override the default behaviour of InProcessTransport to include\n+   * the cause of the status.\n+   * @param enable whether to include cause in status", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4MjU3NA=="}, "originalCommit": {"oid": "7f6453a7d04ca5acd29cb6a4766de3efef4997eb"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDQyNzUzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/grpc/inprocess/InProcessChannelBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzoxNDo1OVrOGK_2cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQyMToyNDoyM1rOGMKREQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4NTA3Mg==", "bodyText": "It is generally helpful to include some language about what the purpose of the method is. In this case we could say this is intended to make test failures more clear and easier to debug. We can also note that the default is to strip the cause for consistency with other transports. The cause information can normally leak information to untrusted clients and is language-specific, which aren't concerns for in-process.", "url": "https://github.com/grpc/grpc-java/pull/6968#discussion_r414185072", "createdAt": "2020-04-23T23:14:59Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/inprocess/InProcessChannelBuilder.java", "diffHunk": "@@ -157,11 +158,22 @@ public InProcessChannelBuilder maxInboundMetadataSize(int bytes) {\n     return this;\n   }\n \n+  /**\n+   * Sets whether to override the default behaviour of InProcessTransport to include\n+   * the cause of the status.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f6453a7d04ca5acd29cb6a4766de3efef4997eb"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQwNDMwNQ==", "bodyText": "Good point \ud83d\ude42\nI added some documentation.", "url": "https://github.com/grpc/grpc-java/pull/6968#discussion_r415404305", "createdAt": "2020-04-26T21:24:23Z", "author": {"login": "reggiemcdonald"}, "path": "core/src/main/java/io/grpc/inprocess/InProcessChannelBuilder.java", "diffHunk": "@@ -157,11 +158,22 @@ public InProcessChannelBuilder maxInboundMetadataSize(int bytes) {\n     return this;\n   }\n \n+  /**\n+   * Sets whether to override the default behaviour of InProcessTransport to include\n+   * the cause of the status.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4NTA3Mg=="}, "originalCommit": {"oid": "7f6453a7d04ca5acd29cb6a4766de3efef4997eb"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDQzMjk5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/grpc/inprocess/InProcessChannelBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzoxNjo0N1rOGK_5SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQyMToyNToyMFrOGMKRqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4NTgwMQ==", "bodyText": "Hmm... The name is a bit awkward. It seems hard to figure out a good name here. Options I thought of:\npropagateStatusCause\ncommunicateStatusCause\npropagateCauseWithStatus (inspired by the includeCauseWithStatus)\nDunno...", "url": "https://github.com/grpc/grpc-java/pull/6968#discussion_r414185801", "createdAt": "2020-04-23T23:16:47Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/inprocess/InProcessChannelBuilder.java", "diffHunk": "@@ -157,11 +158,22 @@ public InProcessChannelBuilder maxInboundMetadataSize(int bytes) {\n     return this;\n   }\n \n+  /**\n+   * Sets whether to override the default behaviour of InProcessTransport to include\n+   * the cause of the status.\n+   * @param enable whether to include cause in status\n+   * @return this\n+   */\n+  public InProcessChannelBuilder transportIncludeStatusCause(boolean enable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f6453a7d04ca5acd29cb6a4766de3efef4997eb"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQwNDQ1OA==", "bodyText": "I struggled with this also. I really think propagateCauseWithStatus is the most descriptive!\nAlso it follows nicely with the field name", "url": "https://github.com/grpc/grpc-java/pull/6968#discussion_r415404458", "createdAt": "2020-04-26T21:25:20Z", "author": {"login": "reggiemcdonald"}, "path": "core/src/main/java/io/grpc/inprocess/InProcessChannelBuilder.java", "diffHunk": "@@ -157,11 +158,22 @@ public InProcessChannelBuilder maxInboundMetadataSize(int bytes) {\n     return this;\n   }\n \n+  /**\n+   * Sets whether to override the default behaviour of InProcessTransport to include\n+   * the cause of the status.\n+   * @param enable whether to include cause in status\n+   * @return this\n+   */\n+  public InProcessChannelBuilder transportIncludeStatusCause(boolean enable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4NTgwMQ=="}, "originalCommit": {"oid": "7f6453a7d04ca5acd29cb6a4766de3efef4997eb"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDQzOTkwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/grpc/inprocess/InProcessTransport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzoxOTozMFrOGK_9QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQyMToyNzoyOVrOGMKTSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4NjgxNg==", "bodyText": "Since InProcessTransport is package-private, we don't have to preserve the old constructor. Delete it?", "url": "https://github.com/grpc/grpc-java/pull/6968#discussion_r414186816", "createdAt": "2020-04-23T23:19:30Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/inprocess/InProcessTransport.java", "diffHunk": "@@ -129,26 +131,39 @@ private InProcessTransport(String name, int maxInboundMetadataSize, String autho\n         .build();\n     this.optionalServerListener = optionalServerListener;\n     logId = InternalLogId.allocate(getClass(), name);\n+    this.includeCauseWithStatus = includeCauseWithStatus;\n   }\n \n   public InProcessTransport(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f6453a7d04ca5acd29cb6a4766de3efef4997eb"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQwNDg3NA==", "bodyText": "done", "url": "https://github.com/grpc/grpc-java/pull/6968#discussion_r415404874", "createdAt": "2020-04-26T21:27:29Z", "author": {"login": "reggiemcdonald"}, "path": "core/src/main/java/io/grpc/inprocess/InProcessTransport.java", "diffHunk": "@@ -129,26 +131,39 @@ private InProcessTransport(String name, int maxInboundMetadataSize, String autho\n         .build();\n     this.optionalServerListener = optionalServerListener;\n     logId = InternalLogId.allocate(getClass(), name);\n+    this.includeCauseWithStatus = includeCauseWithStatus;\n   }\n \n   public InProcessTransport(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4NjgxNg=="}, "originalCommit": {"oid": "7f6453a7d04ca5acd29cb6a4766de3efef4997eb"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDQ0NzMwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/grpc/inprocess/InProcessTransport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzoyMjowN1rOGLABQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQyMToyNzo1OFrOGMKTjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4Nzg0Mg==", "bodyText": "This doesn't appear used. Please delete it.", "url": "https://github.com/grpc/grpc-java/pull/6968#discussion_r414187842", "createdAt": "2020-04-23T23:22:07Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/inprocess/InProcessTransport.java", "diffHunk": "@@ -323,6 +338,10 @@ public ScheduledExecutorService getScheduledExecutorService() {\n     return ret;\n   }\n \n+  public boolean getIncludeCauseWithStatus() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f6453a7d04ca5acd29cb6a4766de3efef4997eb"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQwNDk0Mw==", "bodyText": "done", "url": "https://github.com/grpc/grpc-java/pull/6968#discussion_r415404943", "createdAt": "2020-04-26T21:27:58Z", "author": {"login": "reggiemcdonald"}, "path": "core/src/main/java/io/grpc/inprocess/InProcessTransport.java", "diffHunk": "@@ -323,6 +338,10 @@ public ScheduledExecutorService getScheduledExecutorService() {\n     return ret;\n   }\n \n+  public boolean getIncludeCauseWithStatus() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4Nzg0Mg=="}, "originalCommit": {"oid": "7f6453a7d04ca5acd29cb6a4766de3efef4997eb"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDQ1NTU1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/grpc/inprocess/InProcessTransport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzoyNToyNlrOGLAF6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQyMToyODowNlrOGMKTuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4OTAzMg==", "bodyText": "We'd like this to be final if we can. I see it is mutated for testing. But I think we can make some tweaks to avoid that. I'll comment on the tests.", "url": "https://github.com/grpc/grpc-java/pull/6968#discussion_r414189032", "createdAt": "2020-04-23T23:25:26Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/inprocess/InProcessTransport.java", "diffHunk": "@@ -83,6 +83,7 @@\n   private final String userAgent;\n   private final Optional<ServerListener> optionalServerListener;\n   private int serverMaxInboundMetadataSize;\n+  private boolean includeCauseWithStatus;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f6453a7d04ca5acd29cb6a4766de3efef4997eb"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQwNDk4NA==", "bodyText": "done", "url": "https://github.com/grpc/grpc-java/pull/6968#discussion_r415404984", "createdAt": "2020-04-26T21:28:06Z", "author": {"login": "reggiemcdonald"}, "path": "core/src/main/java/io/grpc/inprocess/InProcessTransport.java", "diffHunk": "@@ -83,6 +83,7 @@\n   private final String userAgent;\n   private final Optional<ServerListener> optionalServerListener;\n   private int serverMaxInboundMetadataSize;\n+  private boolean includeCauseWithStatus;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4OTAzMg=="}, "originalCommit": {"oid": "7f6453a7d04ca5acd29cb6a4766de3efef4997eb"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDQ4NzIyOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/io/grpc/inprocess/InProcessTransportTestWithCause.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzozNjo1MlrOGLAXVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzozNjo1MlrOGLAXVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5MzQ5NA==", "bodyText": "Note that this comment doesn't matter if the test gets reworked.\nThe implementation of this method in InProcessTransport is pretty straight-forward; you can just copy it here. Alternatively you can make a new protected method in InProcessTransport, newClientTransport(InternalServer server, boolean includeStatusWithCause) and call it here. Both options seem pretty fair and allow us to always pass includeStatusWithCause in the constructor.\n(When the number of arguments gets out of hand, we actually have a pattern to make that cleaner by passing in the builder/transportFactory to the constructor, and letting the constructor grab the things it needs. But it's not a big enough problem here yet to force you to rework that.)", "url": "https://github.com/grpc/grpc-java/pull/6968#discussion_r414193494", "createdAt": "2020-04-23T23:36:52Z", "author": {"login": "ejona86"}, "path": "core/src/test/java/io/grpc/inprocess/InProcessTransportTestWithCause.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.inprocess;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import io.grpc.Status;\n+import io.grpc.internal.InternalServer;\n+import io.grpc.internal.ManagedClientTransport;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class InProcessTransportTestWithCause extends InProcessTransportTest {\n+\n+  @Override\n+  protected ManagedClientTransport newClientTransport(InternalServer server) {\n+    InProcessTransport transport = (InProcessTransport) super.newClientTransport(server);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f6453a7d04ca5acd29cb6a4766de3efef4997eb"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDU2NzA3OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/io/grpc/inprocess/InProcessTransportTestWithCause.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMDowNjozM1rOGLBBvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQyMTozOTozOFrOGMKbuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwNDM1MQ==", "bodyText": "Hmm... Extending creates a lot of unnecessary tests.\nLet's create a new test from scratch. I'd basically start with HelloWorldServerTest, with some replacements. We don't want to deal with generated code here, so we can use voidMethod() and ClientCalls and implement the stub stuff ourselves.\n@Rule\npublic final GrpcCleanupRule grpcCleanup = new GrpcCleanupRule();\n\n...\nfinal Throwable t = new Throwable();\nServerServiceDefinition def = ServerServiceDefinition.builder(\"Failing\")\n    .addMethod(TestMethodDescriptors.voidMethod(), new ServerCallHandler<Void, Void>() {\n      @Override public ServerCall.Listener<Void> startCall(ServerCall<Void, Void> call, Metadata headers) {\n        call.close(Status.UNAVAILABLE.withDescription(\"best error message\").withCause(t), new Metadata());\n        return new ServerCall.Listener() {};\n      }\n    })\n    .build();\ngrpcCleanup.register(InProcessServerBuilder.forName(\"failing-server\").directExecutor().addService(def).build().start());\nChannel channel = grpcCleanup.register(InProcessChannelBuilder.forName(\"failing-server\").directExecutor().build());\ntry {\n  ClientCalls.blockingUnaryCall(channel, TestMethodDescriptors.voidMethod(), CallOptions.DEFAULT);\n  fail(\"expected exception\");\n} catch (StatusRuntimeException ex) {\n  assertEquals(t, ex.getCause());\n}\nI've just \"dumped\" that out there; feel free to change formatting and organization. I also don't claim it is 100% correct \ud83d\ude04. But it should be close.\nI know there are a lot of pieces there, but they are all virtually boilerplate. The only \"interesting\" things are creating the Throwable, call.close(), and catching StatusRuntimeException (which is how the blocking stub reports errors).", "url": "https://github.com/grpc/grpc-java/pull/6968#discussion_r414204351", "createdAt": "2020-04-24T00:06:33Z", "author": {"login": "ejona86"}, "path": "core/src/test/java/io/grpc/inprocess/InProcessTransportTestWithCause.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.inprocess;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import io.grpc.Status;\n+import io.grpc.internal.InternalServer;\n+import io.grpc.internal.ManagedClientTransport;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class InProcessTransportTestWithCause extends InProcessTransportTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f6453a7d04ca5acd29cb6a4766de3efef4997eb"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQwNzAzNQ==", "bodyText": "I followed your advice with the test case. I made some small changes to it, but by and large it worked great!\nOrganization-wise, I moved the new test case into the InProcessTransportTest class because I thought that it belonged there. But for this to work, I had to expose the field server in AbstractTransportTest:\n\n  \n    \n      grpc-java/core/src/test/java/io/grpc/internal/AbstractTransportTest.java\n    \n    \n        Lines 158 to 161\n      in\n      2efad75\n    \n    \n    \n    \n\n        \n          \n              * tests in an indeterminate state. \n        \n\n        \n          \n              */ \n        \n\n        \n          \n             protected InternalServer server; \n        \n\n        \n          \n             private ServerTransport serverTransport; \n        \n    \n  \n\n\nso that I could set server=null. I had to do this because the after each hook in AbstractTransportTest would try to call server.shutdown if I didnt (which would fail since I dont start that server in the test case).\n\n  \n    \n      grpc-java/core/src/test/java/io/grpc/internal/AbstractTransportTest.java\n    \n    \n        Lines 230 to 242\n      in\n      2efad75\n    \n    \n    \n    \n\n        \n          \n           @After \n        \n\n        \n          \n           public void tearDown() throws InterruptedException { \n        \n\n        \n          \n             if (client != null) { \n        \n\n        \n          \n               client.shutdownNow(Status.UNKNOWN.withDescription(\"teardown\")); \n        \n\n        \n          \n             } \n        \n\n        \n          \n             if (serverTransport != null) { \n        \n\n        \n          \n               serverTransport.shutdownNow(Status.UNKNOWN.withDescription(\"teardown\")); \n        \n\n        \n          \n             } \n        \n\n        \n          \n             if (server != null) { \n        \n\n        \n          \n               server.shutdown(); \n        \n\n        \n          \n               assertTrue(serverListener.waitForShutdown(TIMEOUT_MS, TimeUnit.MILLISECONDS)); \n        \n\n        \n          \n             } \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nSo I'm not sure whether this was the right move. That being said I'm happy to change it!\nAnd thank you so much for all the help and pointers you've been giving me \ud83d\ude42", "url": "https://github.com/grpc/grpc-java/pull/6968#discussion_r415407035", "createdAt": "2020-04-26T21:39:38Z", "author": {"login": "reggiemcdonald"}, "path": "core/src/test/java/io/grpc/inprocess/InProcessTransportTestWithCause.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.inprocess;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import io.grpc.Status;\n+import io.grpc.internal.InternalServer;\n+import io.grpc.internal.ManagedClientTransport;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class InProcessTransportTestWithCause extends InProcessTransportTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwNDM1MQ=="}, "originalCommit": {"oid": "7f6453a7d04ca5acd29cb6a4766de3efef4997eb"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzA0NTYzOnYy", "diffSide": "LEFT", "path": "core/src/test/java/io/grpc/internal/AbstractTransportTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMzoxODo1MFrOGQVktA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxOToyMzowNVrOGQ4KtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4Mzg2MA==", "bodyText": "Deleting these lines concerns me. Is this necessary?", "url": "https://github.com/grpc/grpc-java/pull/6968#discussion_r419783860", "createdAt": "2020-05-04T23:18:50Z", "author": {"login": "ejona86"}, "path": "core/src/test/java/io/grpc/internal/AbstractTransportTest.java", "diffHunk": "@@ -1219,9 +1210,6 @@ public void clientCancel() throws Exception {\n     assertNotNull(clientStreamListener.trailers.get(TIMEOUT_MS, TimeUnit.MILLISECONDS));\n     Status serverStatus = serverStreamListener.status.get(TIMEOUT_MS, TimeUnit.MILLISECONDS);\n     assertNotEquals(Status.Code.OK, serverStatus.getCode());\n-    // Cause should not be transmitted between client and server", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2efad75c7b0895419d8465a1a410acb8c0b28569"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM1MDY0NQ==", "bodyText": "You're right, not necessary! I will add the assertion back in", "url": "https://github.com/grpc/grpc-java/pull/6968#discussion_r420350645", "createdAt": "2020-05-05T19:23:05Z", "author": {"login": "reggiemcdonald"}, "path": "core/src/test/java/io/grpc/internal/AbstractTransportTest.java", "diffHunk": "@@ -1219,9 +1210,6 @@ public void clientCancel() throws Exception {\n     assertNotNull(clientStreamListener.trailers.get(TIMEOUT_MS, TimeUnit.MILLISECONDS));\n     Status serverStatus = serverStreamListener.status.get(TIMEOUT_MS, TimeUnit.MILLISECONDS);\n     assertNotEquals(Status.Code.OK, serverStatus.getCode());\n-    // Cause should not be transmitted between client and server", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4Mzg2MA=="}, "originalCommit": {"oid": "2efad75c7b0895419d8465a1a410acb8c0b28569"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzI2OTkwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/grpc/inprocess/InProcessTransport.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMjoyNzo0N1rOGQ93AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzo0ODoyMVrOGQ_pew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ0MzkwNA==", "bodyText": "The method name, the argument, and the javadoc do not match.", "url": "https://github.com/grpc/grpc-java/pull/6968#discussion_r420443904", "createdAt": "2020-05-05T22:27:47Z", "author": {"login": "dapengzhang0"}, "path": "core/src/main/java/io/grpc/inprocess/InProcessTransport.java", "diffHunk": "@@ -849,13 +853,17 @@ public void appendTimeoutInsight(InsightBuilder insight) {\n    * <p>This is, so that the InProcess transport behaves in the same way as the other transports,\n    * when exchanging statuses between client and server and vice versa.\n    */\n-  private static Status stripCause(Status status) {\n+  private static Status stripCause(Status status, boolean includeCauseWithStatus) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ac7bebf950c95ec37f927cf2b1bbfc59a26d2d8"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ0NzU4MQ==", "bodyText": "Not quite sure what you mean. Where is the discrepancy?", "url": "https://github.com/grpc/grpc-java/pull/6968#discussion_r420447581", "createdAt": "2020-05-05T22:36:49Z", "author": {"login": "reggiemcdonald"}, "path": "core/src/main/java/io/grpc/inprocess/InProcessTransport.java", "diffHunk": "@@ -849,13 +853,17 @@ public void appendTimeoutInsight(InsightBuilder insight) {\n    * <p>This is, so that the InProcess transport behaves in the same way as the other transports,\n    * when exchanging statuses between client and server and vice versa.\n    */\n-  private static Status stripCause(Status status) {\n+  private static Status stripCause(Status status, boolean includeCauseWithStatus) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ0MzkwNA=="}, "originalCommit": {"oid": "4ac7bebf950c95ec37f927cf2b1bbfc59a26d2d8"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ1MzEwMA==", "bodyText": "I think he's referring to where it says \"but stripped of any other information (i.e. cause)\"", "url": "https://github.com/grpc/grpc-java/pull/6968#discussion_r420453100", "createdAt": "2020-05-05T22:50:16Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/inprocess/InProcessTransport.java", "diffHunk": "@@ -849,13 +853,17 @@ public void appendTimeoutInsight(InsightBuilder insight) {\n    * <p>This is, so that the InProcess transport behaves in the same way as the other transports,\n    * when exchanging statuses between client and server and vice versa.\n    */\n-  private static Status stripCause(Status status) {\n+  private static Status stripCause(Status status, boolean includeCauseWithStatus) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ0MzkwNA=="}, "originalCommit": {"oid": "4ac7bebf950c95ec37f927cf2b1bbfc59a26d2d8"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3MjgyMg==", "bodyText": "Where is the discrepancy?\n\nThe method name says \"strip cause\"\nThe javadoc says \"strip something, i.e. cause\"\nThe new argument says \"do not strip cause if true\".", "url": "https://github.com/grpc/grpc-java/pull/6968#discussion_r420472822", "createdAt": "2020-05-05T23:47:06Z", "author": {"login": "dapengzhang0"}, "path": "core/src/main/java/io/grpc/inprocess/InProcessTransport.java", "diffHunk": "@@ -849,13 +853,17 @@ public void appendTimeoutInsight(InsightBuilder insight) {\n    * <p>This is, so that the InProcess transport behaves in the same way as the other transports,\n    * when exchanging statuses between client and server and vice versa.\n    */\n-  private static Status stripCause(Status status) {\n+  private static Status stripCause(Status status, boolean includeCauseWithStatus) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ0MzkwNA=="}, "originalCommit": {"oid": "4ac7bebf950c95ec37f927cf2b1bbfc59a26d2d8"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3MzIxMQ==", "bodyText": "Ok gotcha. I'll update the javadoc and method name", "url": "https://github.com/grpc/grpc-java/pull/6968#discussion_r420473211", "createdAt": "2020-05-05T23:48:21Z", "author": {"login": "reggiemcdonald"}, "path": "core/src/main/java/io/grpc/inprocess/InProcessTransport.java", "diffHunk": "@@ -849,13 +853,17 @@ public void appendTimeoutInsight(InsightBuilder insight) {\n    * <p>This is, so that the InProcess transport behaves in the same way as the other transports,\n    * when exchanging statuses between client and server and vice versa.\n    */\n-  private static Status stripCause(Status status) {\n+  private static Status stripCause(Status status, boolean includeCauseWithStatus) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ0MzkwNA=="}, "originalCommit": {"oid": "4ac7bebf950c95ec37f927cf2b1bbfc59a26d2d8"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2643, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}