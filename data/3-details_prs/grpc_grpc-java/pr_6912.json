{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxMDIyMzU0", "number": 6912, "title": "okhttp: use new APIs for configuring TLS whenever possible (Android Q+)", "bodyText": "Use Android Q+'s new APIs for configuring TLS whenever possible. The new APIs are\n\nSSLSockets#isSupportedSocket(SSLSocket)\nSSLSockets#setUseSessionTickets(SSLSocket, boolean)\nSSLParameters#setApplicationProtocols (String[])\nSSLSocket#getApplicationProtocol()\n\nCalling the hidden methods SSLSocket#setAlpnProtocols(...) and SSLSocket#getAlpnProtocol() in Android R throws an UnsupportedAppUsage exception in internal version of Android R (annotated on Android's Conscrypt). This PR migrates to invoke new public APIs for configuring Conscrypt whenever possible. Only fall back to invoke the old reflective APIs in when new APIs are not available (and for work around Conscrypt's bug as mentioned in #6912 (comment)).\nThere is also a new API for enabling SNI on SSLParameters introduced from Android 24. It requires constructing SNIHostName (also introduced from API 24). This PR also migrates to use that whenever possible.\nI tested code execution for configuring Conscrypt under different environments:\n(Note SSLSockets#setUseSessionTickets(...) is only supported for com.android.org.conscrypt sockets).\n\n\n\nAndroid API version\nPlay Service\nApp-bundled Conscrypt\nSocket type\nEnable session tickets\nEnable SNI\nConfigure ALPN\n\n\n\n\nR\nYes\nNo\n\"com.google.android.gms.org.conscrypt\"\nOld API\nNew API\nBoth due to Conscrypt bug\n\n\nR\nNo\nNo\n\"com.android.org.conscrypt\"\nNew API\nNew API\nNew API\n\n\nR\nNo\nYes\n\"org.conscrypt\"\nOld API\nNew API\nBoth due to Conscrypt bug\n\n\n27\nYes\nNo\n\"com.google.android.gms.org.conscrypt\nOld API\nNew API\nOld API\n\n\n27\nNo\nNo\n\"com.android.org.conscrypt\"\nOld API\nNew API\nOld API\n\n\n27\nNo\nYes\n\"org.conscrypt\"\nOld API\nNew API\nOld API", "createdAt": "2020-04-08T18:59:55Z", "url": "https://github.com/grpc/grpc-java/pull/6912", "merged": true, "mergeCommit": {"oid": "5803dfd9dcca0fba4483fccf724efc1c853a3ada"}, "closed": true, "closedAt": "2020-04-17T18:44:09Z", "author": {"login": "voidzcy"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVsqZ_ABqjMyMTU0MzQwNDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcYTcenAH2gAyNDAxMDIyMzU0OjU0ZWZmMzYxNmE5ZDNjMmE3ZGFkMDg5NTgwMDk0ZjM1MzBiM2U3YTQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c47f4dd0c0de25f28822abb5462483c4b9adeef7", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/c47f4dd0c0de25f28822abb5462483c4b9adeef7", "committedDate": "2020-04-08T18:58:43Z", "message": "Use new APIs for configuring TLS whenever possible."}, "afterCommit": {"oid": "f035d6e2b7c1277166b35d0548112856f2cbcb5f", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/f035d6e2b7c1277166b35d0548112856f2cbcb5f", "committedDate": "2020-04-08T19:00:26Z", "message": "Use new APIs for configuring TLS whenever possible."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa9b7ec958932d38b003a498d7b662cf91af84af", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/aa9b7ec958932d38b003a498d7b662cf91af84af", "committedDate": "2020-04-08T19:01:11Z", "message": "Use new APIs for configuring TLS whenever possible."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f035d6e2b7c1277166b35d0548112856f2cbcb5f", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/f035d6e2b7c1277166b35d0548112856f2cbcb5f", "committedDate": "2020-04-08T19:00:26Z", "message": "Use new APIs for configuring TLS whenever possible."}, "afterCommit": {"oid": "aa9b7ec958932d38b003a498d7b662cf91af84af", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/aa9b7ec958932d38b003a498d7b662cf91af84af", "committedDate": "2020-04-08T19:01:11Z", "message": "Use new APIs for configuring TLS whenever possible."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e6e2d0f0ddccdcc888c491d6a0ec77cd5bbf090", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/0e6e2d0f0ddccdcc888c491d6a0ec77cd5bbf090", "committedDate": "2020-04-08T20:16:14Z", "message": "Ignore checkstyle warning for empty catch block"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b00589509568d06c7ef325603f5aa0ec859cad9e", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/b00589509568d06c7ef325603f5aa0ec859cad9e", "committedDate": "2020-04-08T20:06:46Z", "message": "Ignore checkstyle warning for empty catch block"}, "afterCommit": {"oid": "0e6e2d0f0ddccdcc888c491d6a0ec77cd5bbf090", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/0e6e2d0f0ddccdcc888c491d6a0ec77cd5bbf090", "committedDate": "2020-04-08T20:16:14Z", "message": "Ignore checkstyle warning for empty catch block"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e0e641b2c9275f182b8f4a7bc937c9e2792a7ac", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/8e0e641b2c9275f182b8f4a7bc937c9e2792a7ac", "committedDate": "2020-04-08T21:30:14Z", "message": "Add test for verifying invoking getApplicationProtocol() for android 10.0+"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "741247b10efbdf829f9074ac2b118a5e58d63178", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/741247b10efbdf829f9074ac2b118a5e58d63178", "committedDate": "2020-04-09T00:32:17Z", "message": "Fix a wrong reflection call."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "612225ab8897ccf69a30fab91e3967a690d84fd0", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/612225ab8897ccf69a30fab91e3967a690d84fd0", "committedDate": "2020-04-09T00:52:18Z", "message": "Add comment for explanation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b29cf268e5d6bf176c9295f844559074a23b813d", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/b29cf268e5d6bf176c9295f844559074a23b813d", "committedDate": "2020-04-13T23:01:57Z", "message": "Fix checking wrong protocol type."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "284c51e93db6bac47009a9b597d9ed5b0ffca1f7", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/284c51e93db6bac47009a9b597d9ed5b0ffca1f7", "committedDate": "2020-04-14T17:13:54Z", "message": "Should still calls old version (reflective) methods in case of Conscrypt is bundled with apps."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "745d447c98dc579e60c37ff1172d3c10105cd0a9", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/745d447c98dc579e60c37ff1172d3c10105cd0a9", "committedDate": "2020-04-14T17:54:37Z", "message": "Remove unused method."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "197c32571424d63e7bca080da1f17f348bbb58fe", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/197c32571424d63e7bca080da1f17f348bbb58fe", "committedDate": "2020-04-14T18:13:22Z", "message": "Should still call the old version when using platform socket while setApplicationProtocols is not available."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccc3bbe0b7ae1f8aaf7f0ad4fa959d6b08ea15f1", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/ccc3bbe0b7ae1f8aaf7f0ad4fa959d6b08ea15f1", "committedDate": "2020-04-14T18:55:24Z", "message": "Clean up unused import"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMjUxODMz", "url": "https://github.com/grpc/grpc-java/pull/6912#pullrequestreview-393251833", "createdAt": "2020-04-14T20:00:34Z", "commit": {"oid": "ccc3bbe0b7ae1f8aaf7f0ad4fa959d6b08ea15f1"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDowMDozNFrOGFeu2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDoyNjoxNFrOGFfl3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM5OTU3Ng==", "bodyText": "final? Ditto below. (Yes, that is more annoying for the static constructor, but we should probably do it anyway.)", "url": "https://github.com/grpc/grpc-java/pull/6912#discussion_r408399576", "createdAt": "2020-04-14T20:00:34Z", "author": {"login": "ejona86"}, "path": "okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java", "diffHunk": "@@ -132,6 +136,29 @@ public String getSelectedProtocol(SSLSocket socket) {\n     // setNpnProtocol(byte[])\n     private static final OptionalMethod<Socket> SET_NPN_PROTOCOLS =\n         new OptionalMethod<>(null, \"setNpnProtocols\", byte[].class);\n+    // setApplicationProtocols(String[])\n+    private static final OptionalMethod<SSLParameters> SET_APPLICATION_PROTOCOLS =\n+        new OptionalMethod<>(null, \"setApplicationProtocols\", String[].class);\n+    // getApplicationProtocol()\n+    private static final OptionalMethod<SSLSocket> GET_APPLICATION_PROTOCOL =\n+        new OptionalMethod<>(String.class, \"getApplicationProtocol\");\n+    // Non-null on Android 10.0+.\n+    // SSLSockets.isSupportedSocket(SSLSocket)\n+    private static Method sslSocketsIsSupportedSocket;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccc3bbe0b7ae1f8aaf7f0ad4fa959d6b08ea15f1"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQwMzczMA==", "bodyText": "It is strange that the code invokes SET_APPLICATION_PROTOCOLS and then checks to see if it is supported. Is this because we don't know which API will work?\nI see you said:\n\nWe need to use these new APIs whenever possible while still calls old versions whenever it does not break things.\n\nBut it didn't say why.", "url": "https://github.com/grpc/grpc-java/pull/6912#discussion_r408403730", "createdAt": "2020-04-14T20:08:11Z", "author": {"login": "ejona86"}, "path": "okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java", "diffHunk": "@@ -152,31 +179,61 @@ public String negotiate(SSLSocket sslSocket, String hostname, List<Protocol> pro\n     /**\n      * Override {@link Platform}'s configureTlsExtensions for Android older than 5.0, since OkHttp\n      * (2.3+) only support such function for Android 5.0+.\n+     *\n+     * <p>Note: Prior to Android Q, the standard way of accessing some Conscrypt features was to\n+     * use reflection to call hidden APIs. Beginning in Q, there is public API for all of these\n+     * features. We attempt to use the public API where possible, but also still call the\n+     * hidden versions to continue to support old versions of Conscrypt that might be bundled with\n+     * apps or third-party TLS providers that might have taken advantage of being able to\n+     * duck-type their way into compatibility.\n      */\n     @Override\n     protected void configureTlsExtensions(\n         SSLSocket sslSocket, String hostname, List<Protocol> protocols) {\n       // Enable SNI and session tickets.\n       if (hostname != null) {\n-        SET_USE_SESSION_TICKETS.invokeOptionalWithoutCheckedException(sslSocket, true);\n+        try {\n+          if (sslSocketsIsSupportedSocket != null\n+              && (boolean) sslSocketsIsSupportedSocket.invoke(null, sslSocket)) {\n+            sslSocketsSetUseSessionTickets.invoke(null, sslSocket, true);\n+          } else {\n+            SET_USE_SESSION_TICKETS.invokeOptionalWithoutCheckedException(sslSocket, true);\n+          }\n+        } catch (IllegalAccessException ignored) {\n+        } catch (InvocationTargetException ignored) {\n+        }\n         SET_HOSTNAME.invokeOptionalWithoutCheckedException(sslSocket, hostname);\n       }\n \n-      Object[] parameters = {Platform.concatLengthPrefixed(protocols)};\n-      if (platform.getTlsExtensionType() == TlsExtensionType.ALPN_AND_NPN) {\n-        SET_ALPN_PROTOCOLS.invokeWithoutCheckedException(sslSocket, parameters);\n-      }\n-\n-      if (platform.getTlsExtensionType() != TlsExtensionType.NONE) {\n-        SET_NPN_PROTOCOLS.invokeWithoutCheckedException(sslSocket, parameters);\n-      } else {\n-        throw new RuntimeException(\"We can not do TLS handshake on this Android version, please\"\n-            + \" install the Google Play Services Dynamic Security Provider to use TLS\");\n+      // Enable ALPN and NPN if necessary.\n+      SSLParameters sslParams = sslSocket.getSSLParameters();\n+      SET_APPLICATION_PROTOCOLS\n+          .invokeOptionalWithoutCheckedException(sslParams, (Object) protocolIds(protocols));\n+      sslSocket.setSSLParameters(sslParams);\n+      if (!isPlatformSocket(sslSocket) || !SET_APPLICATION_PROTOCOLS.isSupported(sslParams)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccc3bbe0b7ae1f8aaf7f0ad4fa959d6b08ea15f1"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQxMzY2Mw==", "bodyText": "I'm concerned about the isPlatformSocket() check. That seems brittle, especially since getting this wrong will spew ugly errors. If anything, it seems we should check for the gmscore version and apply special behavior in only that case.\nIn general, we want to use the new API, and only the new API, everywhere it is possible. We want the old API to naturally pass out of existence and know we aren't calling it at all on newer code.", "url": "https://github.com/grpc/grpc-java/pull/6912#discussion_r408413663", "createdAt": "2020-04-14T20:26:14Z", "author": {"login": "ejona86"}, "path": "okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java", "diffHunk": "@@ -152,31 +179,61 @@ public String negotiate(SSLSocket sslSocket, String hostname, List<Protocol> pro\n     /**\n      * Override {@link Platform}'s configureTlsExtensions for Android older than 5.0, since OkHttp\n      * (2.3+) only support such function for Android 5.0+.\n+     *\n+     * <p>Note: Prior to Android Q, the standard way of accessing some Conscrypt features was to\n+     * use reflection to call hidden APIs. Beginning in Q, there is public API for all of these\n+     * features. We attempt to use the public API where possible, but also still call the\n+     * hidden versions to continue to support old versions of Conscrypt that might be bundled with\n+     * apps or third-party TLS providers that might have taken advantage of being able to\n+     * duck-type their way into compatibility.\n      */\n     @Override\n     protected void configureTlsExtensions(\n         SSLSocket sslSocket, String hostname, List<Protocol> protocols) {\n       // Enable SNI and session tickets.\n       if (hostname != null) {\n-        SET_USE_SESSION_TICKETS.invokeOptionalWithoutCheckedException(sslSocket, true);\n+        try {\n+          if (sslSocketsIsSupportedSocket != null\n+              && (boolean) sslSocketsIsSupportedSocket.invoke(null, sslSocket)) {\n+            sslSocketsSetUseSessionTickets.invoke(null, sslSocket, true);\n+          } else {\n+            SET_USE_SESSION_TICKETS.invokeOptionalWithoutCheckedException(sslSocket, true);\n+          }\n+        } catch (IllegalAccessException ignored) {\n+        } catch (InvocationTargetException ignored) {\n+        }\n         SET_HOSTNAME.invokeOptionalWithoutCheckedException(sslSocket, hostname);\n       }\n \n-      Object[] parameters = {Platform.concatLengthPrefixed(protocols)};\n-      if (platform.getTlsExtensionType() == TlsExtensionType.ALPN_AND_NPN) {\n-        SET_ALPN_PROTOCOLS.invokeWithoutCheckedException(sslSocket, parameters);\n-      }\n-\n-      if (platform.getTlsExtensionType() != TlsExtensionType.NONE) {\n-        SET_NPN_PROTOCOLS.invokeWithoutCheckedException(sslSocket, parameters);\n-      } else {\n-        throw new RuntimeException(\"We can not do TLS handshake on this Android version, please\"\n-            + \" install the Google Play Services Dynamic Security Provider to use TLS\");\n+      // Enable ALPN and NPN if necessary.\n+      SSLParameters sslParams = sslSocket.getSSLParameters();\n+      SET_APPLICATION_PROTOCOLS\n+          .invokeOptionalWithoutCheckedException(sslParams, (Object) protocolIds(protocols));\n+      sslSocket.setSSLParameters(sslParams);\n+      if (!isPlatformSocket(sslSocket) || !SET_APPLICATION_PROTOCOLS.isSupported(sslParams)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccc3bbe0b7ae1f8aaf7f0ad4fa959d6b08ea15f1"}, "originalPosition": 92}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf373b592a5b825cc691a498a456820f0e59c114", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/cf373b592a5b825cc691a498a456820f0e59c114", "committedDate": "2020-04-15T03:43:12Z", "message": "Use public API whenever possible, only use old reflective API when public ones are not available."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46db1659e542b403e587a6c637f1771b76e71e30", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/46db1659e542b403e587a6c637f1771b76e71e30", "committedDate": "2020-04-15T07:48:05Z", "message": "Use new API for setting SNI whenever possible."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e4e3a2afce9375dcdcf5e44c7ddf5d5773c9b2f", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/8e4e3a2afce9375dcdcf5e44c7ddf5d5773c9b2f", "committedDate": "2020-04-15T08:12:13Z", "message": "Better exception propagations."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "678bbc76f50ce26f54df0198e190657dbd3fd558", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/678bbc76f50ce26f54df0198e190657dbd3fd558", "committedDate": "2020-04-15T08:32:17Z", "message": "Format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66f0b8eb48767b427565d3a04335a7aed2cc4c0e", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/66f0b8eb48767b427565d3a04335a7aed2cc4c0e", "committedDate": "2020-04-15T08:38:10Z", "message": "Eliminate ignored exception."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fb9b20721251c732c5a6e1cad2a1648eb390e13", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/1fb9b20721251c732c5a6e1cad2a1648eb390e13", "committedDate": "2020-04-15T08:38:39Z", "message": "Format"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzOTIzOTc5", "url": "https://github.com/grpc/grpc-java/pull/6912#pullrequestreview-393923979", "createdAt": "2020-04-15T16:09:18Z", "commit": {"oid": "1fb9b20721251c732c5a6e1cad2a1648eb390e13"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowOToxOVrOGGBEmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyMTowOFrOGGBjGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MjIwMQ==", "bodyText": "Since none of these are javadoc, I'd expect it to use the . instead of #", "url": "https://github.com/grpc/grpc-java/pull/6912#discussion_r408962201", "createdAt": "2020-04-15T16:09:19Z", "author": {"login": "ejona86"}, "path": "okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java", "diffHunk": "@@ -133,6 +140,59 @@ public String getSelectedProtocol(SSLSocket socket) {\n     private static final OptionalMethod<Socket> SET_NPN_PROTOCOLS =\n         new OptionalMethod<>(null, \"setNpnProtocols\", byte[].class);\n \n+    // Available on Android 10.0+.\n+    // SSLParameters#setApplicationProtocols(String[])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fb9b20721251c732c5a6e1cad2a1648eb390e13"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MzA3Mg==", "bodyText": "Is there a need to catch Throwable instead of Exception? I'd honestly feel best catching just the reflection exceptions.", "url": "https://github.com/grpc/grpc-java/pull/6912#discussion_r408963072", "createdAt": "2020-04-15T16:10:36Z", "author": {"login": "ejona86"}, "path": "okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java", "diffHunk": "@@ -133,6 +140,59 @@ public String getSelectedProtocol(SSLSocket socket) {\n     private static final OptionalMethod<Socket> SET_NPN_PROTOCOLS =\n         new OptionalMethod<>(null, \"setNpnProtocols\", byte[].class);\n \n+    // Available on Android 10.0+.\n+    // SSLParameters#setApplicationProtocols(String[])\n+    private static final OptionalMethod<SSLParameters> SET_APPLICATION_PROTOCOLS =\n+        new OptionalMethod<>(null, \"setApplicationProtocols\", String[].class);\n+    // SSLParameters#getApplicationProtocols()\n+    private static final OptionalMethod<SSLParameters> GET_APPLICATION_PROTOCOLS =\n+        new OptionalMethod<>(String[].class, \"getApplicationProtocols\");\n+    // SSLSocket#getApplicationProtocol()\n+    private static final OptionalMethod<SSLSocket> GET_APPLICATION_PROTOCOL =\n+        new OptionalMethod<>(String.class, \"getApplicationProtocol\");\n+\n+    // Available on Android 7.0+.\n+    // SSLParameters#setServerNames(List<SNIServerName>)\n+    private static final OptionalMethod<SSLParameters> SET_SERVER_NAMES =\n+        new OptionalMethod<>(null, \"setServerNames\", List.class);\n+\n+    // Non-null on Android 10.0+.\n+    // SSLSockets#isSupportedSocket(SSLSocket)\n+    private static final Method SSL_SOCKETS_IS_SUPPORTED_SOCKET;\n+    // SSLSockets#setUseSessionTickets(SSLSocket, boolean)\n+    private static final Method SSL_SOCKETS_SET_USE_SESSION_TICKET;\n+\n+    // Non-null on Android 7.0+.\n+    // SNIHostName(String)\n+    private static final Constructor<?> SNI_HOST_NAME;\n+\n+    static {\n+      // Attempt to find Android 10.0+ APIs.\n+      Method sslSocketsIsSupportedSocketMethod = null;\n+      Method sslSocketsSetUseSessionTicketsMethod = null;\n+      try {\n+        Class<?> sslSockets = Class.forName(\"android.net.ssl.SSLSockets\");\n+        sslSocketsIsSupportedSocketMethod =\n+            sslSockets.getMethod(\"isSupportedSocket\", SSLSocket.class);\n+        sslSocketsSetUseSessionTicketsMethod =\n+            sslSockets.getMethod(\"setUseSessionTickets\", SSLSocket.class, boolean.class);\n+      } catch (Throwable e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fb9b20721251c732c5a6e1cad2a1648eb390e13"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2NjYwMA==", "bodyText": "It'd be better to use the normal reflection Method here. These OptionalMethods were for the duck-typing and do reflection every call. It'd be much better to only do the reflection once.\nAlthough we may also want to defer that reflection until first use...", "url": "https://github.com/grpc/grpc-java/pull/6912#discussion_r408966600", "createdAt": "2020-04-15T16:15:46Z", "author": {"login": "ejona86"}, "path": "okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java", "diffHunk": "@@ -133,6 +140,59 @@ public String getSelectedProtocol(SSLSocket socket) {\n     private static final OptionalMethod<Socket> SET_NPN_PROTOCOLS =\n         new OptionalMethod<>(null, \"setNpnProtocols\", byte[].class);\n \n+    // Available on Android 10.0+.\n+    // SSLParameters#setApplicationProtocols(String[])\n+    private static final OptionalMethod<SSLParameters> SET_APPLICATION_PROTOCOLS =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fb9b20721251c732c5a6e1cad2a1648eb390e13"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MDAxMQ==", "bodyText": "As written, this is not working around Conscrypt. This is checking whether the API is supported in a Conscrypt-compatible way. For this to be a workaround we would need to do the does-GET_APPLICATION_PROTOCOL-throw check before this, or we would need to say \"we aren't checking getApplicationProtocol as a Conscrypt workaround\".", "url": "https://github.com/grpc/grpc-java/pull/6912#discussion_r408970011", "createdAt": "2020-04-15T16:21:08Z", "author": {"login": "ejona86"}, "path": "okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java", "diffHunk": "@@ -152,21 +212,68 @@ public String negotiate(SSLSocket sslSocket, String hostname, List<Protocol> pro\n     /**\n      * Override {@link Platform}'s configureTlsExtensions for Android older than 5.0, since OkHttp\n      * (2.3+) only support such function for Android 5.0+.\n+     *\n+     * <p>Note: Prior to Android Q, the standard way of accessing some Conscrypt features was to\n+     * use reflection to call hidden APIs. Beginning in Q, there is public API for all of these\n+     * features. We attempt to use the public API where possible. Otherwise, fall back to use the\n+     * old reflective API.\n      */\n     @Override\n     protected void configureTlsExtensions(\n         SSLSocket sslSocket, String hostname, List<Protocol> protocols) {\n+      SSLParameters sslParams = sslSocket.getSSLParameters();\n       // Enable SNI and session tickets.\n       if (hostname != null) {\n-        SET_USE_SESSION_TICKETS.invokeOptionalWithoutCheckedException(sslSocket, true);\n-        SET_HOSTNAME.invokeOptionalWithoutCheckedException(sslSocket, hostname);\n+        try {\n+          if (SSL_SOCKETS_IS_SUPPORTED_SOCKET != null\n+              && (boolean) SSL_SOCKETS_IS_SUPPORTED_SOCKET.invoke(null, sslSocket)) {\n+            SSL_SOCKETS_SET_USE_SESSION_TICKET.invoke(null, sslSocket, true);\n+          } else {\n+            SET_USE_SESSION_TICKETS.invokeOptionalWithoutCheckedException(sslSocket, true);\n+          }\n+        } catch (IllegalAccessException e) {\n+          throw new RuntimeException(e);\n+        } catch (InvocationTargetException e) {\n+          throw new RuntimeException(e);\n+        }\n+\n+        try {\n+          if (SNI_HOST_NAME != null) {\n+            SET_SERVER_NAMES\n+                .invokeOptionalWithoutCheckedException(\n+                    sslParams,\n+                    Collections.singletonList(SNI_HOST_NAME.newInstance(hostname)));\n+          } else {\n+            SET_HOSTNAME.invokeOptionalWithoutCheckedException(sslSocket, hostname);\n+          }\n+        } catch (IllegalAccessException e) {\n+          throw new RuntimeException(e);\n+        } catch (InstantiationException e) {\n+          throw new RuntimeException(e);\n+        } catch (InvocationTargetException e) {\n+          throw new RuntimeException(e);\n+        }\n+      }\n+\n+      // Enable ALPN and NPN if necessary.\n+      String[] protocolNames = protocolIds(protocols);\n+      SET_APPLICATION_PROTOCOLS\n+          .invokeOptionalWithoutCheckedException(sslParams, (Object) protocolIds(protocols));\n+      sslSocket.setSSLParameters(sslParams);\n+      // Check protocol configuration through SSLParameters succeeds. If not, fall back to\n+      // configure with the old reflective method.\n+      // Workaround for Conscrypt issue: https://github.com/google/conscrypt/issues/832", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fb9b20721251c732c5a6e1cad2a1648eb390e13"}, "originalPosition": 135}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1eca84aa912b15bff27c96f9f86b7da4035b634f", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/1eca84aa912b15bff27c96f9f86b7da4035b634f", "committedDate": "2020-04-15T19:08:05Z", "message": "Use normal Method for using public APIs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d69401bdbf766d08787b60c1446bb1d47c78d85", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/7d69401bdbf766d08787b60c1446bb1d47c78d85", "committedDate": "2020-04-15T19:33:05Z", "message": "Revert unit test for verifying invocation of getApplicationProtocols(). It cannot be verified now as we are using reflections loaded statically."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be1867ee8ba8f9dfa0bb640963e3c3ee8b312029", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/be1867ee8ba8f9dfa0bb640963e3c3ee8b312029", "committedDate": "2020-04-16T00:54:46Z", "message": "Check if SSLSocket.getApplicationProtocol() is supported to determine if setApplicationProtocols() can be used."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5b71243933d1de7d537256a5162b9eca038d044", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/a5b71243933d1de7d537256a5162b9eca038d044", "committedDate": "2020-04-16T01:02:34Z", "message": "Fix exception catching for UnsupportedOperationException."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MDg0MzE3", "url": "https://github.com/grpc/grpc-java/pull/6912#pullrequestreview-394084317", "createdAt": "2020-04-15T19:48:16Z", "commit": {"oid": "7d69401bdbf766d08787b60c1446bb1d47c78d85"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo0ODoxNlrOGGJC5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMDozMjo0MlrOGG2GCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MjgzOQ==", "bodyText": "SSLParameters.class\nDitto for SSLSocket, and the second SSLParameters below.", "url": "https://github.com/grpc/grpc-java/pull/6912#discussion_r409092839", "createdAt": "2020-04-15T19:48:16Z", "author": {"login": "ejona86"}, "path": "okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java", "diffHunk": "@@ -133,6 +140,71 @@ public String getSelectedProtocol(SSLSocket socket) {\n     private static final OptionalMethod<Socket> SET_NPN_PROTOCOLS =\n         new OptionalMethod<>(null, \"setNpnProtocols\", byte[].class);\n \n+    // Non-null on Android 10.0+.\n+    // SSLSockets.isSupportedSocket(SSLSocket)\n+    private static final Method SSL_SOCKETS_IS_SUPPORTED_SOCKET;\n+    // SSLSockets.setUseSessionTickets(SSLSocket, boolean)\n+    private static final Method SSL_SOCKETS_SET_USE_SESSION_TICKET;\n+    // SSLParameters.setApplicationProtocols(String[])\n+    private static final Method SET_APPLICATION_PROTOCOLS;\n+    // SSLParameters.getApplicationProtocols()\n+    private static final Method GET_APPLICATION_PROTOCOLS;\n+    // SSLSocket.getApplicationProtocol()\n+    private static final Method GET_APPLICATION_PROTOCOL;\n+\n+    // Non-null on Android 7.0+.\n+    // SSLParameters.setServerNames(List<SNIServerName>)\n+    private static final Method SET_SERVER_NAMES;\n+    // SNIHostName(String)\n+    private static final Constructor<?> SNI_HOST_NAME;\n+\n+    static {\n+      // Attempt to find Android 10.0+ APIs.\n+      Method setApplicationProtocolsMethod = null;\n+      Method getApplicationProtocolsMethod = null;\n+      Method getApplicationProtocolMethod = null;\n+      Method sslSocketsIsSupportedSocketMethod = null;\n+      Method sslSocketsSetUseSessionTicketsMethod = null;\n+      try {\n+        Class<?> sslParameters = Class.forName(\"javax.net.ssl.SSLParameters\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d69401bdbf766d08787b60c1446bb1d47c78d85"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgzMDkyMg==", "bodyText": "Using the exception to skip the next line, but not expecting an exception on the line after that is subtle. Go ahead and add a comment? (The error message does help, but an extra comment is probably still worthwhile)", "url": "https://github.com/grpc/grpc-java/pull/6912#discussion_r409830922", "createdAt": "2020-04-16T20:32:42Z", "author": {"login": "ejona86"}, "path": "okhttp/src/main/java/io/grpc/okhttp/OkHttpProtocolNegotiator.java", "diffHunk": "@@ -152,21 +224,71 @@ public String negotiate(SSLSocket sslSocket, String hostname, List<Protocol> pro\n     /**\n      * Override {@link Platform}'s configureTlsExtensions for Android older than 5.0, since OkHttp\n      * (2.3+) only support such function for Android 5.0+.\n+     *\n+     * <p>Note: Prior to Android Q, the standard way of accessing some Conscrypt features was to\n+     * use reflection to call hidden APIs. Beginning in Q, there is public API for all of these\n+     * features. We attempt to use the public API where possible. Otherwise, fall back to use the\n+     * old reflective API.\n      */\n     @Override\n     protected void configureTlsExtensions(\n         SSLSocket sslSocket, String hostname, List<Protocol> protocols) {\n-      // Enable SNI and session tickets.\n-      if (hostname != null) {\n-        SET_USE_SESSION_TICKETS.invokeOptionalWithoutCheckedException(sslSocket, true);\n-        SET_HOSTNAME.invokeOptionalWithoutCheckedException(sslSocket, hostname);\n+      String[] protocolNames = protocolIds(protocols);\n+      SSLParameters sslParams = sslSocket.getSSLParameters();\n+      try {\n+        // Enable SNI and session tickets.\n+        if (hostname != null) {\n+          if (SSL_SOCKETS_IS_SUPPORTED_SOCKET != null\n+              && (boolean) SSL_SOCKETS_IS_SUPPORTED_SOCKET.invoke(null, sslSocket)) {\n+            SSL_SOCKETS_SET_USE_SESSION_TICKET.invoke(null, sslSocket, true);\n+          } else {\n+            SET_USE_SESSION_TICKETS.invokeOptionalWithoutCheckedException(sslSocket, true);\n+          }\n+          if (SET_SERVER_NAMES != null && SNI_HOST_NAME != null) {\n+            SET_SERVER_NAMES\n+                .invoke(sslParams, Collections.singletonList(SNI_HOST_NAME.newInstance(hostname)));\n+          } else {\n+            SET_HOSTNAME.invokeOptionalWithoutCheckedException(sslSocket, hostname);\n+          }\n+        }\n+        boolean alpnEnabled = false;\n+        if (GET_APPLICATION_PROTOCOL != null) {\n+          try {\n+            GET_APPLICATION_PROTOCOL.invoke(sslSocket);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5b71243933d1de7d537256a5162b9eca038d044"}, "originalPosition": 129}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03e81aeb8ea702ce9f34494d62fe99d6a4e794c1", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/03e81aeb8ea702ce9f34494d62fe99d6a4e794c1", "committedDate": "2020-04-16T21:02:28Z", "message": "No need to load classes, they are already publicly available."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc435c07f7310032c327c77ffbb75a868d8430d9", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/cc435c07f7310032c327c77ffbb75a868d8430d9", "committedDate": "2020-04-16T21:15:53Z", "message": "Add comment for checking if underlying provider supports enabling ALPN via setApplicationProtocols()."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54eff3616a9d3c2a7dad089580094f3530b3e7a4", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/54eff3616a9d3c2a7dad089580094f3530b3e7a4", "committedDate": "2020-04-16T21:19:34Z", "message": "Reword comment."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4528, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}