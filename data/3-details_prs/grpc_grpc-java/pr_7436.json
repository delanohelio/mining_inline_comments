{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4NDEwMDM5", "number": 7436, "title": "xds: bootstrapper fixes: remove extra readBootstrap & avoid parseConfig", "bodyText": "", "createdAt": "2020-09-17T05:18:37Z", "url": "https://github.com/grpc/grpc-java/pull/7436", "merged": true, "mergeCommit": {"oid": "04871dcc2a106b2504489af1c1f6d53a38a0ff41"}, "closed": true, "closedAt": "2020-09-18T04:25:20Z", "author": {"login": "sanjaypujare"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJp8M2gH2gAyNDg4NDEwMDM5OmZiNjhlYjBjZTc3YWRkMWVlNTJjNGM2ZjczYzI1OWYxOGM1ZGMzNjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJ7B2BAFqTQ5MTA4NTA5Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fb68eb0ce77add1ee52c4c6f73c259f18c5dc364", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/fb68eb0ce77add1ee52c4c6f73c259f18c5dc364", "committedDate": "2020-09-17T05:14:25Z", "message": "xds: bootstrapper fixes: remove extra readBootstrap & avoid parseConfig"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwOTUzNzA3", "url": "https://github.com/grpc/grpc-java/pull/7436#pullrequestreview-490953707", "createdAt": "2020-09-17T20:13:22Z", "commit": {"oid": "fb68eb0ce77add1ee52c4c6f73c259f18c5dc364"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDoxMzoyMlrOHTz2Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDoyMDo0MFrOHT0E6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzNDQzOA==", "bodyText": "This is a wrong usage. Since this is your utility method go generating a BootstrapInfo used in tests, it should handle all errors internally by itself. That is, exceptions thrown in this utility method should not account for test failures. So basically, you would do:\ntry {\n   ...\n} catch (IOException e) {\n   throw AssertionError(e);\n}", "url": "https://github.com/grpc/grpc-java/pull/7436#discussion_r490534438", "createdAt": "2020-09-17T20:13:22Z", "author": {"login": "voidzcy"}, "path": "xds/src/test/java/io/grpc/xds/CommonBootstrapperTestUtils.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.grpc.internal.JsonParser;\n+import java.io.IOException;\n+import java.util.Map;\n+\n+public class CommonBootstrapperTestUtils {\n+  private static final String FILE_WATCHER_CONFIG = \"{\\\"path\\\": \\\"/etc/secret/certs\\\"}\";\n+  private static final String MESHCA_CONFIG =\n+      \"{\\n\"\n+          + \"        \\\"server\\\": {\\n\"\n+          + \"          \\\"api_type\\\": \\\"GRPC\\\",\\n\"\n+          + \"          \\\"grpc_services\\\": [{\\n\"\n+          + \"            \\\"google_grpc\\\": {\\n\"\n+          + \"              \\\"target_uri\\\": \\\"meshca.com\\\",\\n\"\n+          + \"              \\\"channel_credentials\\\": {\\\"google_default\\\": {}},\\n\"\n+          + \"              \\\"call_credentials\\\": [{\\n\"\n+          + \"                \\\"sts_service\\\": {\\n\"\n+          + \"                  \\\"token_exchange_service\\\": \\\"securetoken.googleapis.com\\\",\\n\"\n+          + \"                  \\\"subject_token_path\\\": \\\"/etc/secret/sajwt.token\\\"\\n\"\n+          + \"                }\\n\"\n+          + \"              }]\\n\" // end call_credentials\n+          + \"            },\\n\" // end google_grpc\n+          + \"            \\\"time_out\\\": {\\\"seconds\\\": 10}\\n\"\n+          + \"          }]\\n\" // end grpc_services\n+          + \"        },\\n\" // end server\n+          + \"        \\\"certificate_lifetime\\\": {\\\"seconds\\\": 86400},\\n\"\n+          + \"        \\\"renewal_grace_period\\\": {\\\"seconds\\\": 3600},\\n\"\n+          + \"        \\\"key_type\\\": \\\"RSA\\\",\\n\"\n+          + \"        \\\"key_size\\\": 2048,\\n\"\n+          + \"        \\\"location\\\": \\\"https://container.googleapis.com/v1/project/test-project1/locations/test-zone2/clusters/test-cluster3\\\"\\n\"\n+          + \"      }\";\n+\n+  /** Creates a test bootstrap info object. */\n+  @SuppressWarnings(\"unchecked\")\n+  public static Bootstrapper.BootstrapInfo getTestBootstrapInfo()\n+          throws XdsInitializationException {\n+    try {\n+      Bootstrapper.CertificateProviderInfo gcpId =\n+          new Bootstrapper.CertificateProviderInfo(\n+              \"testca\", (Map<String, ?>) JsonParser.parse(MESHCA_CONFIG));\n+      Bootstrapper.CertificateProviderInfo fileProvider =\n+          new Bootstrapper.CertificateProviderInfo(\n+              \"file_watcher\", (Map<String, ?>) JsonParser.parse(FILE_WATCHER_CONFIG));\n+      Map<String, Bootstrapper.CertificateProviderInfo> certProviders =\n+          ImmutableMap.of(\"gcp_id\", gcpId, \"file_provider\", fileProvider);\n+      Bootstrapper.BootstrapInfo bootstrapInfo =\n+          new Bootstrapper.BootstrapInfo(\n+              ImmutableList.<Bootstrapper.ServerInfo>of(),\n+              EnvoyProtoData.Node.newBuilder().build(),\n+              certProviders);\n+      return bootstrapInfo;\n+    } catch (IOException e) {\n+      throw new XdsInitializationException(\"\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb68eb0ce77add1ee52c4c6f73c259f18c5dc364"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzNzE5OA==", "bodyText": "Is this change necessary? For tests you are using the other constructor, but for real instantiation it just calls Bootstrapper.getInstance() inside the constructor to get the default implementation. That doesn't sound wrong. It doesn't need to leave this burden to the caller of this class.", "url": "https://github.com/grpc/grpc-java/pull/7436#discussion_r490537198", "createdAt": "2020-09-17T20:18:48Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/ClientSslContextProviderFactory.java", "diffHunk": "@@ -34,8 +34,8 @@\n   private final CertProviderClientSslContextProvider.Factory\n       certProviderClientSslContextProviderFactory;\n \n-  ClientSslContextProviderFactory() {\n-    this(Bootstrapper.getInstance(), CertProviderClientSslContextProvider.Factory.getInstance());\n+  ClientSslContextProviderFactory(Bootstrapper bootstrapper) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb68eb0ce77add1ee52c4c6f73c259f18c5dc364"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzODIxOA==", "bodyText": "Same comment as for ClientSslContextProviderFactory.", "url": "https://github.com/grpc/grpc-java/pull/7436#discussion_r490538218", "createdAt": "2020-09-17T20:20:40Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/ServerSslContextProviderFactory.java", "diffHunk": "@@ -34,8 +34,8 @@\n   private final CertProviderServerSslContextProvider.Factory\n       certProviderServerSslContextProviderFactory;\n \n-  ServerSslContextProviderFactory() {\n-    this(Bootstrapper.getInstance(), CertProviderServerSslContextProvider.Factory.getInstance());\n+  ServerSslContextProviderFactory(Bootstrapper bootstrapper) {\n+    this(bootstrapper, CertProviderServerSslContextProvider.Factory.getInstance());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb68eb0ce77add1ee52c4c6f73c259f18c5dc364"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0ae4f76c00b0bd4b0fc3bb1a0ad122fdd35fccc", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/b0ae4f76c00b0bd4b0fc3bb1a0ad122fdd35fccc", "committedDate": "2020-09-18T00:44:35Z", "message": "address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMDg0ODM2", "url": "https://github.com/grpc/grpc-java/pull/7436#pullrequestreview-491084836", "createdAt": "2020-09-18T01:08:10Z", "commit": {"oid": "b0ae4f76c00b0bd4b0fc3bb1a0ad122fdd35fccc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMDg1MDky", "url": "https://github.com/grpc/grpc-java/pull/7436#pullrequestreview-491085092", "createdAt": "2020-09-18T01:08:58Z", "commit": {"oid": "b0ae4f76c00b0bd4b0fc3bb1a0ad122fdd35fccc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMTowODo1OFrOHT6g1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMTowODo1OFrOHT6g1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY0MzY3MA==", "bodyText": "nit: map is a bad variable name. Same for other places.", "url": "https://github.com/grpc/grpc-java/pull/7436#discussion_r490643670", "createdAt": "2020-09-18T01:08:58Z", "author": {"login": "voidzcy"}, "path": "xds/src/test/java/io/grpc/xds/internal/certprovider/MeshCaCertificateProviderProviderTest.java", "diffHunk": "@@ -107,10 +106,11 @@ public void providerRegisteredName() {\n   }\n \n   @Test\n-  public void createProvider_minimalConfig() throws XdsInitializationException {\n+  public void createProvider_minimalConfig() throws IOException {\n     CertificateProvider.DistributorWatcher distWatcher =\n         new CertificateProvider.DistributorWatcher();\n-    Map<String, ?> map = buildMinimalConfig();\n+    @SuppressWarnings(\"unchecked\")\n+    Map<String, ?> map = (Map<String, ?>) JsonParser.parse(MINIMAL_MESHCA_CONFIG);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ae4f76c00b0bd4b0fc3bb1a0ad122fdd35fccc"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4048, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}