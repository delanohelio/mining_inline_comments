{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5MTk0NjY4", "number": 6901, "title": "xds: eliminate downstreamTlsContext from XdsServerBuilder", "bodyText": "", "createdAt": "2020-04-05T18:29:33Z", "url": "https://github.com/grpc/grpc-java/pull/6901", "merged": true, "mergeCommit": {"oid": "2f07c83fed96c4fa4e636c3c84b17ada1b5e9341"}, "closed": true, "closedAt": "2020-04-14T00:37:27Z", "author": {"login": "sanjaypujare"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVCaNoAFqTM4ODQ0NDEzMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXYHEbgH2gAyMzk5MTk0NjY4OjdiOTE3NDFmMTdhMjkyZDU0NzM2N2RjNDEyMTI5ZjZmZTg0MTk2Y2M=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NDQ0MTMw", "url": "https://github.com/grpc/grpc-java/pull/6901#pullrequestreview-388444130", "createdAt": "2020-04-06T17:00:03Z", "commit": {"oid": "6fc54631c0397dfe8e0ccae80c2eddfab9ea345b"}, "state": "COMMENTED", "comments": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzowMDowM1rOGBhQ6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzo0NTowNVrOGBi--Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI0Njc2Mw==", "bodyText": "can you make it branched? it is hard to tell what is modified.", "url": "https://github.com/grpc/grpc-java/pull/6901#discussion_r404246763", "createdAt": "2020-04-06T17:00:03Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fc54631c0397dfe8e0ccae80c2eddfab9ea345b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI1Mjc5Mw==", "bodyText": "seems like wrong indentation", "url": "https://github.com/grpc/grpc-java/pull/6901#discussion_r404252793", "createdAt": "2020-04-06T17:09:26Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/internal/sds/SdsProtocolNegotiatorsTest.java", "diffHunk": "@@ -217,7 +231,7 @@ public void serverSdsHandler_addLast() throws IOException {\n   @Test\n   public void serverSdsHandler_nullTlsContext_expectPlaintext() throws IOException {\n     SdsProtocolNegotiators.HandlerPickerHandler handlerPickerHandler =\n-            new SdsProtocolNegotiators.HandlerPickerHandler(grpcHandler, null, null);\n+            new SdsProtocolNegotiators.HandlerPickerHandler(grpcHandler, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fc54631c0397dfe8e0ccae80c2eddfab9ea345b"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI1MzUwNQ==", "bodyText": "this is getting disorganized, can you make a utility class including other public methods used in multiple tests?", "url": "https://github.com/grpc/grpc-java/pull/6901#discussion_r404253505", "createdAt": "2020-04-06T17:10:39Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/internal/sds/SecretVolumeSslContextProviderTest.java", "diffHunk": "@@ -43,11 +43,11 @@\n @RunWith(JUnit4.class)\n public class SecretVolumeSslContextProviderTest {\n \n-  private static final String SERVER_1_PEM_FILE = \"server1.pem\";\n-  private static final String SERVER_1_KEY_FILE = \"server1.key\";\n-  private static final String CLIENT_PEM_FILE = \"client.pem\";\n-  private static final String CLIENT_KEY_FILE = \"client.key\";\n-  private static final String CA_PEM_FILE = \"ca.pem\";\n+  public static final String SERVER_1_PEM_FILE = \"server1.pem\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fc54631c0397dfe8e0ccae80c2eddfab9ea345b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI1NzcyMg==", "bodyText": "@Nullable to params?", "url": "https://github.com/grpc/grpc-java/pull/6901#discussion_r404257722", "createdAt": "2020-04-06T17:17:24Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/internal/sds/SecretVolumeSslContextProviderTest.java", "diffHunk": "@@ -430,6 +434,19 @@ static DownstreamTlsContext buildDownstreamTlsContextFromFilenames(\n    */\n   public static UpstreamTlsContext buildUpstreamTlsContextFromFilenames(\n       String privateKey, String certChain, String trustCa) {\n+    try {\n+      if (certChain != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fc54631c0397dfe8e0ccae80c2eddfab9ea345b"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI1ODUzMA==", "bodyText": "passNull? what is null?", "url": "https://github.com/grpc/grpc-java/pull/6901#discussion_r404258530", "createdAt": "2020-04-06T17:18:41Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/internal/sds/SdsProtocolNegotiatorsTest.java", "diffHunk": "@@ -261,8 +275,7 @@ public void clientSdsProtocolNegotiatorNewHandler_fireProtocolNegotiationEvent()\n   @Test\n   public void serverSdsProtocolNegotiator_passNulls_expectPlaintext() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fc54631c0397dfe8e0ccae80c2eddfab9ea345b"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI1OTU3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"Setting myListener from ConfigUpdate listener :{0}\",\n          \n          \n            \n                        \"Setting myListener from ConfigUpdate listener: {0}\",", "url": "https://github.com/grpc/grpc-java/pull/6901#discussion_r404259576", "createdAt": "2020-04-06T17:20:27Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientWrapperForServerSds.java", "diffHunk": "@@ -106,29 +107,28 @@ public static XdsClientWrapperForServerSds newInstance(\n     this.port = port;\n     this.xdsClient = xdsClient;\n     this.timeService = timeService;\n-    xdsClient.watchListenerData(\n-        port,\n-        new XdsClient.ListenerWatcher() {\n-          @Override\n-          public void onListenerChanged(XdsClient.ListenerUpdate update) {\n-            logger.log(\n-                Level.INFO,\n-                \"Setting myListener from ConfigUpdate listener :{0}\",\n-                update.getListener().toString());\n-            curListener = update.getListener();\n-          }\n+    this.listenerWatcher = new XdsClient.ListenerWatcher() {\n+      @Override\n+      public void onListenerChanged(XdsClient.ListenerUpdate update) {\n+        logger.log(\n+            Level.INFO,\n+            \"Setting myListener from ConfigUpdate listener :{0}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fc54631c0397dfe8e0ccae80c2eddfab9ea345b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI1OTY2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.log(Level.SEVERE, \"ListenerWatcher in XdsClientWrapperForServerSds:{0}\", error);\n          \n          \n            \n                    logger.log(Level.SEVERE, \"ListenerWatcher in XdsClientWrapperForServerSds: {0}\", error);", "url": "https://github.com/grpc/grpc-java/pull/6901#discussion_r404259661", "createdAt": "2020-04-06T17:20:36Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientWrapperForServerSds.java", "diffHunk": "@@ -106,29 +107,28 @@ public static XdsClientWrapperForServerSds newInstance(\n     this.port = port;\n     this.xdsClient = xdsClient;\n     this.timeService = timeService;\n-    xdsClient.watchListenerData(\n-        port,\n-        new XdsClient.ListenerWatcher() {\n-          @Override\n-          public void onListenerChanged(XdsClient.ListenerUpdate update) {\n-            logger.log(\n-                Level.INFO,\n-                \"Setting myListener from ConfigUpdate listener :{0}\",\n-                update.getListener().toString());\n-            curListener = update.getListener();\n-          }\n+    this.listenerWatcher = new XdsClient.ListenerWatcher() {\n+      @Override\n+      public void onListenerChanged(XdsClient.ListenerUpdate update) {\n+        logger.log(\n+            Level.INFO,\n+            \"Setting myListener from ConfigUpdate listener :{0}\",\n+            update.getListener().toString());\n+        curListener = update.getListener();\n+      }\n \n-          @Override\n-          public void onError(Status error) {\n-            // In order to distinguish between IO error and resource not found, set curListener\n-            // to null in case of NOT_FOUND\n-            if (error.getCode().equals(Status.Code.NOT_FOUND)) {\n-              curListener = null;\n-            }\n-            // TODO(sanjaypujare): Implement logic for other cases based on final design.\n-            logger.log(Level.SEVERE, \"ListenerWatcher in XdsClientWrapperForServerSds:{0}\", error);\n-          }\n-        });\n+      @Override\n+      public void onError(Status error) {\n+        // In order to distinguish between IO error and resource not found, set curListener\n+        // to null in case of NOT_FOUND\n+        if (error.getCode().equals(Status.Code.NOT_FOUND)) {\n+          curListener = null;\n+        }\n+        // TODO(sanjaypujare): Implement logic for other cases based on final design.\n+        logger.log(Level.SEVERE, \"ListenerWatcher in XdsClientWrapperForServerSds:{0}\", error);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fc54631c0397dfe8e0ccae80c2eddfab9ea345b"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2MDA4Ng==", "bodyText": "this looks like it can be 1 line.", "url": "https://github.com/grpc/grpc-java/pull/6901#discussion_r404260086", "createdAt": "2020-04-06T17:21:19Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/XdsServerBuilder.java", "diffHunk": "@@ -174,7 +161,7 @@ void panic(final Throwable t) {\n           });\n     InternalProtocolNegotiator.ProtocolNegotiator serverProtocolNegotiator =\n         SdsProtocolNegotiators.serverProtocolNegotiator(\n-            this.downstreamTlsContext, port, syncContext);\n+            port, syncContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fc54631c0397dfe8e0ccae80c2eddfab9ea345b"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2MjcxMQ==", "bodyText": "why passing port if it can be from instance variable?", "url": "https://github.com/grpc/grpc-java/pull/6901#discussion_r404262711", "createdAt": "2020-04-06T17:25:30Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2019 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static io.grpc.xds.XdsClientWrapperForServerSdsTest.buildFilterChainMatch;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.mock;\n+\n+import io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext;\n+import io.envoyproxy.envoy.api.v2.auth.UpstreamTlsContext;\n+import io.grpc.Server;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.stub.StreamObserver;\n+import io.grpc.testing.GrpcCleanupRule;\n+import io.grpc.testing.protobuf.SimpleRequest;\n+import io.grpc.testing.protobuf.SimpleResponse;\n+import io.grpc.testing.protobuf.SimpleServiceGrpc;\n+import io.grpc.xds.internal.sds.SdsProtocolNegotiators;\n+import io.grpc.xds.internal.sds.SecretVolumeSslContextProviderTest;\n+import io.grpc.xds.internal.sds.XdsChannelBuilder;\n+import io.grpc.xds.internal.sds.XdsServerBuilder;\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.util.Arrays;\n+import javax.net.ssl.SSLHandshakeException;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * Unit tests for {@link XdsChannelBuilder} and {@link XdsServerBuilder} for plaintext/TLS/mTLS\n+ * modes.\n+ */\n+@RunWith(JUnit4.class)\n+public class XdsSdsClientServerTest {\n+\n+  /** Bad/untrusted server certs. */\n+  private static final String BAD_SERVER_PEM_FILE = \"badserver.pem\";\n+  private static final String BAD_SERVER_KEY_FILE = \"badserver.key\";\n+\n+  @Rule public final GrpcCleanupRule cleanupRule = new GrpcCleanupRule();\n+  private Server server;\n+\n+  @Test\n+  public void plaintextClientServer() throws IOException {\n+    getXdsServer(/* downstreamTlsContext= */ null);\n+    buildClientAndTest(\n+        /* upstreamTlsContext= */ null, /* overrideAuthority= */ null, \"buddy\", server.getPort());\n+  }\n+\n+  /** TLS channel - no mTLS. */\n+  @Test\n+  public void tlsClientServer_noClientAuthentication() throws IOException {\n+    DownstreamTlsContext downstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildDownstreamTlsContextFromFilenames(\n+            SecretVolumeSslContextProviderTest.SERVER_1_KEY_FILE,\n+            SecretVolumeSslContextProviderTest.SERVER_1_PEM_FILE,\n+            null);\n+\n+    getXdsServer(downstreamTlsContext);\n+\n+    // for TLS, client only needs trustCa\n+    UpstreamTlsContext upstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildUpstreamTlsContextFromFilenames(\n+            null, null, SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+    buildClientAndTest(upstreamTlsContext, \"foo.test.google.fr\", \"buddy\", server.getPort());\n+  }\n+\n+  /** mTLS - client auth enabled. */\n+  @Test\n+  public void mtlsClientServer_withClientAuthentication() throws IOException {\n+    UpstreamTlsContext upstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildUpstreamTlsContextFromFilenames(\n+            SecretVolumeSslContextProviderTest.CLIENT_KEY_FILE,\n+            SecretVolumeSslContextProviderTest.CLIENT_PEM_FILE,\n+            SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+    mtlsCommonTest(upstreamTlsContext);\n+  }\n+\n+  /** mTLS - client auth enabled then update server certs to untrusted. */\n+  @Test\n+  public void mtlsClientServer_changeServerContext_expectException() throws IOException {\n+    UpstreamTlsContext upstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildUpstreamTlsContextFromFilenames(\n+            SecretVolumeSslContextProviderTest.CLIENT_KEY_FILE,\n+            SecretVolumeSslContextProviderTest.CLIENT_PEM_FILE,\n+            SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+    XdsClient.ListenerWatcher listenerWatcher = mtlsCommonTest(upstreamTlsContext);\n+    DownstreamTlsContext downstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildDownstreamTlsContextFromFilenames(\n+            BAD_SERVER_KEY_FILE,\n+            BAD_SERVER_PEM_FILE,\n+            SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+    createListenerUpdate(server.getPort(), downstreamTlsContext, listenerWatcher);\n+    try {\n+      buildClientAndTest(upstreamTlsContext, \"foo.test.google.fr\", \"buddy\", server.getPort());\n+      fail(\"exception expected\");\n+    } catch (StatusRuntimeException sre) {\n+      assertThat(sre).hasCauseThat().isInstanceOf(SSLHandshakeException.class);\n+      assertThat(sre).hasCauseThat().hasMessageThat().isEqualTo(\"General OpenSslEngine problem\");\n+    }\n+  }\n+\n+  private XdsClient.ListenerWatcher mtlsCommonTest(UpstreamTlsContext upstreamTlsContext)\n+      throws IOException {\n+    DownstreamTlsContext downstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildDownstreamTlsContextFromFilenames(\n+            SecretVolumeSslContextProviderTest.SERVER_1_KEY_FILE,\n+            SecretVolumeSslContextProviderTest.SERVER_1_PEM_FILE,\n+            SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+\n+    XdsClient.ListenerWatcher listenerWatcher = getXdsServer(downstreamTlsContext);\n+    buildClientAndTest(upstreamTlsContext, \"foo.test.google.fr\", \"buddy\", server.getPort());\n+    return listenerWatcher;\n+  }\n+\n+  private XdsClient.ListenerWatcher getXdsServer(DownstreamTlsContext downstreamTlsContext)\n+      throws IOException {\n+    int port = findFreePort();\n+    XdsServerBuilder builder =\n+        XdsServerBuilder.forPort(port).addService(new SimpleServiceImpl());\n+    final XdsClientWrapperForServerSds xdsClientWrapperForServerSds =\n+        createXdsClientWrapperForServerSds(port, downstreamTlsContext);\n+    SdsProtocolNegotiators.ServerSdsProtocolNegotiator serverSdsProtocolNegotiator =\n+        new SdsProtocolNegotiators.ServerSdsProtocolNegotiator(xdsClientWrapperForServerSds);\n+    server = cleanupRule.register(builder.buildServer(serverSdsProtocolNegotiator)).start();\n+    return xdsClientWrapperForServerSds.getListenerWatcher();\n+  }\n+\n+  /** Creates XdsClientWrapperForServerSds: also used by other classes. */\n+  public static XdsClientWrapperForServerSds createXdsClientWrapperForServerSds(\n+      int port, DownstreamTlsContext downstreamTlsContext) {\n+    XdsClient mockXdsClient = mock(XdsClient.class);\n+    XdsClientWrapperForServerSds xdsClientWrapperForServerSds =\n+        new XdsClientWrapperForServerSds(port, mockXdsClient, null);\n+    createListenerUpdate(port, downstreamTlsContext,\n+        xdsClientWrapperForServerSds.getListenerWatcher());\n+    return xdsClientWrapperForServerSds;\n+  }\n+\n+  private static int findFreePort() throws IOException {\n+    try (ServerSocket socket = new ServerSocket(0)) {\n+      socket.setReuseAddress(true);\n+      return socket.getLocalPort();\n+    }\n+  }\n+\n+  private static void createListenerUpdate(\n+      int port, DownstreamTlsContext tlsContext, XdsClient.ListenerWatcher registeredWatcher) {\n+    EnvoyServerProtoData.Listener listener =\n+        buildListener(\"listener1\", \"0.0.0.0\", port, tlsContext);\n+    XdsClient.ListenerUpdate listenerUpdate =\n+        XdsClient.ListenerUpdate.newBuilder().setListener(listener).build();\n+    registeredWatcher.onListenerChanged(listenerUpdate);\n+  }\n+\n+  static EnvoyServerProtoData.Listener buildListener(\n+      String name,\n+      String address,\n+      int port,\n+      DownstreamTlsContext tlsContext) {\n+    EnvoyServerProtoData.FilterChainMatch filterChainMatch =\n+        buildFilterChainMatch(port, address);\n+    EnvoyServerProtoData.FilterChain filterChain1 =\n+        new EnvoyServerProtoData.FilterChain(filterChainMatch, tlsContext);\n+    EnvoyServerProtoData.Listener listener =\n+        new EnvoyServerProtoData.Listener(name, address, Arrays.asList(filterChain1));\n+    return listener;\n+  }\n+\n+  private void buildClientAndTest(\n+      UpstreamTlsContext upstreamTlsContext,\n+      String overrideAuthority,\n+      String requestMessage,\n+      int serverPort) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fc54631c0397dfe8e0ccae80c2eddfab9ea345b"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2Mjg5Nw==", "bodyText": "for this test, this param is meaningless.", "url": "https://github.com/grpc/grpc-java/pull/6901#discussion_r404262897", "createdAt": "2020-04-06T17:25:48Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2019 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static io.grpc.xds.XdsClientWrapperForServerSdsTest.buildFilterChainMatch;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.mock;\n+\n+import io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext;\n+import io.envoyproxy.envoy.api.v2.auth.UpstreamTlsContext;\n+import io.grpc.Server;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.stub.StreamObserver;\n+import io.grpc.testing.GrpcCleanupRule;\n+import io.grpc.testing.protobuf.SimpleRequest;\n+import io.grpc.testing.protobuf.SimpleResponse;\n+import io.grpc.testing.protobuf.SimpleServiceGrpc;\n+import io.grpc.xds.internal.sds.SdsProtocolNegotiators;\n+import io.grpc.xds.internal.sds.SecretVolumeSslContextProviderTest;\n+import io.grpc.xds.internal.sds.XdsChannelBuilder;\n+import io.grpc.xds.internal.sds.XdsServerBuilder;\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.util.Arrays;\n+import javax.net.ssl.SSLHandshakeException;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * Unit tests for {@link XdsChannelBuilder} and {@link XdsServerBuilder} for plaintext/TLS/mTLS\n+ * modes.\n+ */\n+@RunWith(JUnit4.class)\n+public class XdsSdsClientServerTest {\n+\n+  /** Bad/untrusted server certs. */\n+  private static final String BAD_SERVER_PEM_FILE = \"badserver.pem\";\n+  private static final String BAD_SERVER_KEY_FILE = \"badserver.key\";\n+\n+  @Rule public final GrpcCleanupRule cleanupRule = new GrpcCleanupRule();\n+  private Server server;\n+\n+  @Test\n+  public void plaintextClientServer() throws IOException {\n+    getXdsServer(/* downstreamTlsContext= */ null);\n+    buildClientAndTest(\n+        /* upstreamTlsContext= */ null, /* overrideAuthority= */ null, \"buddy\", server.getPort());\n+  }\n+\n+  /** TLS channel - no mTLS. */\n+  @Test\n+  public void tlsClientServer_noClientAuthentication() throws IOException {\n+    DownstreamTlsContext downstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildDownstreamTlsContextFromFilenames(\n+            SecretVolumeSslContextProviderTest.SERVER_1_KEY_FILE,\n+            SecretVolumeSslContextProviderTest.SERVER_1_PEM_FILE,\n+            null);\n+\n+    getXdsServer(downstreamTlsContext);\n+\n+    // for TLS, client only needs trustCa\n+    UpstreamTlsContext upstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildUpstreamTlsContextFromFilenames(\n+            null, null, SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+    buildClientAndTest(upstreamTlsContext, \"foo.test.google.fr\", \"buddy\", server.getPort());\n+  }\n+\n+  /** mTLS - client auth enabled. */\n+  @Test\n+  public void mtlsClientServer_withClientAuthentication() throws IOException {\n+    UpstreamTlsContext upstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildUpstreamTlsContextFromFilenames(\n+            SecretVolumeSslContextProviderTest.CLIENT_KEY_FILE,\n+            SecretVolumeSslContextProviderTest.CLIENT_PEM_FILE,\n+            SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+    mtlsCommonTest(upstreamTlsContext);\n+  }\n+\n+  /** mTLS - client auth enabled then update server certs to untrusted. */\n+  @Test\n+  public void mtlsClientServer_changeServerContext_expectException() throws IOException {\n+    UpstreamTlsContext upstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildUpstreamTlsContextFromFilenames(\n+            SecretVolumeSslContextProviderTest.CLIENT_KEY_FILE,\n+            SecretVolumeSslContextProviderTest.CLIENT_PEM_FILE,\n+            SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+    XdsClient.ListenerWatcher listenerWatcher = mtlsCommonTest(upstreamTlsContext);\n+    DownstreamTlsContext downstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildDownstreamTlsContextFromFilenames(\n+            BAD_SERVER_KEY_FILE,\n+            BAD_SERVER_PEM_FILE,\n+            SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+    createListenerUpdate(server.getPort(), downstreamTlsContext, listenerWatcher);\n+    try {\n+      buildClientAndTest(upstreamTlsContext, \"foo.test.google.fr\", \"buddy\", server.getPort());\n+      fail(\"exception expected\");\n+    } catch (StatusRuntimeException sre) {\n+      assertThat(sre).hasCauseThat().isInstanceOf(SSLHandshakeException.class);\n+      assertThat(sre).hasCauseThat().hasMessageThat().isEqualTo(\"General OpenSslEngine problem\");\n+    }\n+  }\n+\n+  private XdsClient.ListenerWatcher mtlsCommonTest(UpstreamTlsContext upstreamTlsContext)\n+      throws IOException {\n+    DownstreamTlsContext downstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildDownstreamTlsContextFromFilenames(\n+            SecretVolumeSslContextProviderTest.SERVER_1_KEY_FILE,\n+            SecretVolumeSslContextProviderTest.SERVER_1_PEM_FILE,\n+            SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+\n+    XdsClient.ListenerWatcher listenerWatcher = getXdsServer(downstreamTlsContext);\n+    buildClientAndTest(upstreamTlsContext, \"foo.test.google.fr\", \"buddy\", server.getPort());\n+    return listenerWatcher;\n+  }\n+\n+  private XdsClient.ListenerWatcher getXdsServer(DownstreamTlsContext downstreamTlsContext)\n+      throws IOException {\n+    int port = findFreePort();\n+    XdsServerBuilder builder =\n+        XdsServerBuilder.forPort(port).addService(new SimpleServiceImpl());\n+    final XdsClientWrapperForServerSds xdsClientWrapperForServerSds =\n+        createXdsClientWrapperForServerSds(port, downstreamTlsContext);\n+    SdsProtocolNegotiators.ServerSdsProtocolNegotiator serverSdsProtocolNegotiator =\n+        new SdsProtocolNegotiators.ServerSdsProtocolNegotiator(xdsClientWrapperForServerSds);\n+    server = cleanupRule.register(builder.buildServer(serverSdsProtocolNegotiator)).start();\n+    return xdsClientWrapperForServerSds.getListenerWatcher();\n+  }\n+\n+  /** Creates XdsClientWrapperForServerSds: also used by other classes. */\n+  public static XdsClientWrapperForServerSds createXdsClientWrapperForServerSds(\n+      int port, DownstreamTlsContext downstreamTlsContext) {\n+    XdsClient mockXdsClient = mock(XdsClient.class);\n+    XdsClientWrapperForServerSds xdsClientWrapperForServerSds =\n+        new XdsClientWrapperForServerSds(port, mockXdsClient, null);\n+    createListenerUpdate(port, downstreamTlsContext,\n+        xdsClientWrapperForServerSds.getListenerWatcher());\n+    return xdsClientWrapperForServerSds;\n+  }\n+\n+  private static int findFreePort() throws IOException {\n+    try (ServerSocket socket = new ServerSocket(0)) {\n+      socket.setReuseAddress(true);\n+      return socket.getLocalPort();\n+    }\n+  }\n+\n+  private static void createListenerUpdate(\n+      int port, DownstreamTlsContext tlsContext, XdsClient.ListenerWatcher registeredWatcher) {\n+    EnvoyServerProtoData.Listener listener =\n+        buildListener(\"listener1\", \"0.0.0.0\", port, tlsContext);\n+    XdsClient.ListenerUpdate listenerUpdate =\n+        XdsClient.ListenerUpdate.newBuilder().setListener(listener).build();\n+    registeredWatcher.onListenerChanged(listenerUpdate);\n+  }\n+\n+  static EnvoyServerProtoData.Listener buildListener(\n+      String name,\n+      String address,\n+      int port,\n+      DownstreamTlsContext tlsContext) {\n+    EnvoyServerProtoData.FilterChainMatch filterChainMatch =\n+        buildFilterChainMatch(port, address);\n+    EnvoyServerProtoData.FilterChain filterChain1 =\n+        new EnvoyServerProtoData.FilterChain(filterChainMatch, tlsContext);\n+    EnvoyServerProtoData.Listener listener =\n+        new EnvoyServerProtoData.Listener(name, address, Arrays.asList(filterChain1));\n+    return listener;\n+  }\n+\n+  private void buildClientAndTest(\n+      UpstreamTlsContext upstreamTlsContext,\n+      String overrideAuthority,\n+      String requestMessage,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fc54631c0397dfe8e0ccae80c2eddfab9ea345b"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2NDc4OQ==", "bodyText": "why get server is not assigned?", "url": "https://github.com/grpc/grpc-java/pull/6901#discussion_r404264789", "createdAt": "2020-04-06T17:28:45Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2019 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static io.grpc.xds.XdsClientWrapperForServerSdsTest.buildFilterChainMatch;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.mock;\n+\n+import io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext;\n+import io.envoyproxy.envoy.api.v2.auth.UpstreamTlsContext;\n+import io.grpc.Server;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.stub.StreamObserver;\n+import io.grpc.testing.GrpcCleanupRule;\n+import io.grpc.testing.protobuf.SimpleRequest;\n+import io.grpc.testing.protobuf.SimpleResponse;\n+import io.grpc.testing.protobuf.SimpleServiceGrpc;\n+import io.grpc.xds.internal.sds.SdsProtocolNegotiators;\n+import io.grpc.xds.internal.sds.SecretVolumeSslContextProviderTest;\n+import io.grpc.xds.internal.sds.XdsChannelBuilder;\n+import io.grpc.xds.internal.sds.XdsServerBuilder;\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.util.Arrays;\n+import javax.net.ssl.SSLHandshakeException;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * Unit tests for {@link XdsChannelBuilder} and {@link XdsServerBuilder} for plaintext/TLS/mTLS\n+ * modes.\n+ */\n+@RunWith(JUnit4.class)\n+public class XdsSdsClientServerTest {\n+\n+  /** Bad/untrusted server certs. */\n+  private static final String BAD_SERVER_PEM_FILE = \"badserver.pem\";\n+  private static final String BAD_SERVER_KEY_FILE = \"badserver.key\";\n+\n+  @Rule public final GrpcCleanupRule cleanupRule = new GrpcCleanupRule();\n+  private Server server;\n+\n+  @Test\n+  public void plaintextClientServer() throws IOException {\n+    getXdsServer(/* downstreamTlsContext= */ null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fc54631c0397dfe8e0ccae80c2eddfab9ea345b"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2NTI5Mg==", "bodyText": "this instance variable can be local variable.", "url": "https://github.com/grpc/grpc-java/pull/6901#discussion_r404265292", "createdAt": "2020-04-06T17:29:30Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2019 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static io.grpc.xds.XdsClientWrapperForServerSdsTest.buildFilterChainMatch;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.mock;\n+\n+import io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext;\n+import io.envoyproxy.envoy.api.v2.auth.UpstreamTlsContext;\n+import io.grpc.Server;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.stub.StreamObserver;\n+import io.grpc.testing.GrpcCleanupRule;\n+import io.grpc.testing.protobuf.SimpleRequest;\n+import io.grpc.testing.protobuf.SimpleResponse;\n+import io.grpc.testing.protobuf.SimpleServiceGrpc;\n+import io.grpc.xds.internal.sds.SdsProtocolNegotiators;\n+import io.grpc.xds.internal.sds.SecretVolumeSslContextProviderTest;\n+import io.grpc.xds.internal.sds.XdsChannelBuilder;\n+import io.grpc.xds.internal.sds.XdsServerBuilder;\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.util.Arrays;\n+import javax.net.ssl.SSLHandshakeException;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * Unit tests for {@link XdsChannelBuilder} and {@link XdsServerBuilder} for plaintext/TLS/mTLS\n+ * modes.\n+ */\n+@RunWith(JUnit4.class)\n+public class XdsSdsClientServerTest {\n+\n+  /** Bad/untrusted server certs. */\n+  private static final String BAD_SERVER_PEM_FILE = \"badserver.pem\";\n+  private static final String BAD_SERVER_KEY_FILE = \"badserver.key\";\n+\n+  @Rule public final GrpcCleanupRule cleanupRule = new GrpcCleanupRule();\n+  private Server server;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fc54631c0397dfe8e0ccae80c2eddfab9ea345b"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2NjI3NQ==", "bodyText": "can you split into 2 methods?", "url": "https://github.com/grpc/grpc-java/pull/6901#discussion_r404266275", "createdAt": "2020-04-06T17:30:57Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2019 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static io.grpc.xds.XdsClientWrapperForServerSdsTest.buildFilterChainMatch;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.mock;\n+\n+import io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext;\n+import io.envoyproxy.envoy.api.v2.auth.UpstreamTlsContext;\n+import io.grpc.Server;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.stub.StreamObserver;\n+import io.grpc.testing.GrpcCleanupRule;\n+import io.grpc.testing.protobuf.SimpleRequest;\n+import io.grpc.testing.protobuf.SimpleResponse;\n+import io.grpc.testing.protobuf.SimpleServiceGrpc;\n+import io.grpc.xds.internal.sds.SdsProtocolNegotiators;\n+import io.grpc.xds.internal.sds.SecretVolumeSslContextProviderTest;\n+import io.grpc.xds.internal.sds.XdsChannelBuilder;\n+import io.grpc.xds.internal.sds.XdsServerBuilder;\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.util.Arrays;\n+import javax.net.ssl.SSLHandshakeException;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * Unit tests for {@link XdsChannelBuilder} and {@link XdsServerBuilder} for plaintext/TLS/mTLS\n+ * modes.\n+ */\n+@RunWith(JUnit4.class)\n+public class XdsSdsClientServerTest {\n+\n+  /** Bad/untrusted server certs. */\n+  private static final String BAD_SERVER_PEM_FILE = \"badserver.pem\";\n+  private static final String BAD_SERVER_KEY_FILE = \"badserver.key\";\n+\n+  @Rule public final GrpcCleanupRule cleanupRule = new GrpcCleanupRule();\n+  private Server server;\n+\n+  @Test\n+  public void plaintextClientServer() throws IOException {\n+    getXdsServer(/* downstreamTlsContext= */ null);\n+    buildClientAndTest(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fc54631c0397dfe8e0ccae80c2eddfab9ea345b"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2NjczOA==", "bodyText": "is this testing test utility method?", "url": "https://github.com/grpc/grpc-java/pull/6901#discussion_r404266738", "createdAt": "2020-04-06T17:31:41Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2019 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static io.grpc.xds.XdsClientWrapperForServerSdsTest.buildFilterChainMatch;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.mock;\n+\n+import io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext;\n+import io.envoyproxy.envoy.api.v2.auth.UpstreamTlsContext;\n+import io.grpc.Server;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.stub.StreamObserver;\n+import io.grpc.testing.GrpcCleanupRule;\n+import io.grpc.testing.protobuf.SimpleRequest;\n+import io.grpc.testing.protobuf.SimpleResponse;\n+import io.grpc.testing.protobuf.SimpleServiceGrpc;\n+import io.grpc.xds.internal.sds.SdsProtocolNegotiators;\n+import io.grpc.xds.internal.sds.SecretVolumeSslContextProviderTest;\n+import io.grpc.xds.internal.sds.XdsChannelBuilder;\n+import io.grpc.xds.internal.sds.XdsServerBuilder;\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.util.Arrays;\n+import javax.net.ssl.SSLHandshakeException;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * Unit tests for {@link XdsChannelBuilder} and {@link XdsServerBuilder} for plaintext/TLS/mTLS\n+ * modes.\n+ */\n+@RunWith(JUnit4.class)\n+public class XdsSdsClientServerTest {\n+\n+  /** Bad/untrusted server certs. */\n+  private static final String BAD_SERVER_PEM_FILE = \"badserver.pem\";\n+  private static final String BAD_SERVER_KEY_FILE = \"badserver.key\";\n+\n+  @Rule public final GrpcCleanupRule cleanupRule = new GrpcCleanupRule();\n+  private Server server;\n+\n+  @Test\n+  public void plaintextClientServer() throws IOException {\n+    getXdsServer(/* downstreamTlsContext= */ null);\n+    buildClientAndTest(\n+        /* upstreamTlsContext= */ null, /* overrideAuthority= */ null, \"buddy\", server.getPort());\n+  }\n+\n+  /** TLS channel - no mTLS. */\n+  @Test\n+  public void tlsClientServer_noClientAuthentication() throws IOException {\n+    DownstreamTlsContext downstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildDownstreamTlsContextFromFilenames(\n+            SecretVolumeSslContextProviderTest.SERVER_1_KEY_FILE,\n+            SecretVolumeSslContextProviderTest.SERVER_1_PEM_FILE,\n+            null);\n+\n+    getXdsServer(downstreamTlsContext);\n+\n+    // for TLS, client only needs trustCa\n+    UpstreamTlsContext upstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildUpstreamTlsContextFromFilenames(\n+            null, null, SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+    buildClientAndTest(upstreamTlsContext, \"foo.test.google.fr\", \"buddy\", server.getPort());\n+  }\n+\n+  /** mTLS - client auth enabled. */\n+  @Test\n+  public void mtlsClientServer_withClientAuthentication() throws IOException {\n+    UpstreamTlsContext upstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildUpstreamTlsContextFromFilenames(\n+            SecretVolumeSslContextProviderTest.CLIENT_KEY_FILE,\n+            SecretVolumeSslContextProviderTest.CLIENT_PEM_FILE,\n+            SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+    mtlsCommonTest(upstreamTlsContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fc54631c0397dfe8e0ccae80c2eddfab9ea345b"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2NzM4Nw==", "bodyText": "ListenerWatcher is not XdsServer, is it?", "url": "https://github.com/grpc/grpc-java/pull/6901#discussion_r404267387", "createdAt": "2020-04-06T17:32:47Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2019 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static io.grpc.xds.XdsClientWrapperForServerSdsTest.buildFilterChainMatch;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.mock;\n+\n+import io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext;\n+import io.envoyproxy.envoy.api.v2.auth.UpstreamTlsContext;\n+import io.grpc.Server;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.stub.StreamObserver;\n+import io.grpc.testing.GrpcCleanupRule;\n+import io.grpc.testing.protobuf.SimpleRequest;\n+import io.grpc.testing.protobuf.SimpleResponse;\n+import io.grpc.testing.protobuf.SimpleServiceGrpc;\n+import io.grpc.xds.internal.sds.SdsProtocolNegotiators;\n+import io.grpc.xds.internal.sds.SecretVolumeSslContextProviderTest;\n+import io.grpc.xds.internal.sds.XdsChannelBuilder;\n+import io.grpc.xds.internal.sds.XdsServerBuilder;\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.util.Arrays;\n+import javax.net.ssl.SSLHandshakeException;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * Unit tests for {@link XdsChannelBuilder} and {@link XdsServerBuilder} for plaintext/TLS/mTLS\n+ * modes.\n+ */\n+@RunWith(JUnit4.class)\n+public class XdsSdsClientServerTest {\n+\n+  /** Bad/untrusted server certs. */\n+  private static final String BAD_SERVER_PEM_FILE = \"badserver.pem\";\n+  private static final String BAD_SERVER_KEY_FILE = \"badserver.key\";\n+\n+  @Rule public final GrpcCleanupRule cleanupRule = new GrpcCleanupRule();\n+  private Server server;\n+\n+  @Test\n+  public void plaintextClientServer() throws IOException {\n+    getXdsServer(/* downstreamTlsContext= */ null);\n+    buildClientAndTest(\n+        /* upstreamTlsContext= */ null, /* overrideAuthority= */ null, \"buddy\", server.getPort());\n+  }\n+\n+  /** TLS channel - no mTLS. */\n+  @Test\n+  public void tlsClientServer_noClientAuthentication() throws IOException {\n+    DownstreamTlsContext downstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildDownstreamTlsContextFromFilenames(\n+            SecretVolumeSslContextProviderTest.SERVER_1_KEY_FILE,\n+            SecretVolumeSslContextProviderTest.SERVER_1_PEM_FILE,\n+            null);\n+\n+    getXdsServer(downstreamTlsContext);\n+\n+    // for TLS, client only needs trustCa\n+    UpstreamTlsContext upstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildUpstreamTlsContextFromFilenames(\n+            null, null, SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+    buildClientAndTest(upstreamTlsContext, \"foo.test.google.fr\", \"buddy\", server.getPort());\n+  }\n+\n+  /** mTLS - client auth enabled. */\n+  @Test\n+  public void mtlsClientServer_withClientAuthentication() throws IOException {\n+    UpstreamTlsContext upstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildUpstreamTlsContextFromFilenames(\n+            SecretVolumeSslContextProviderTest.CLIENT_KEY_FILE,\n+            SecretVolumeSslContextProviderTest.CLIENT_PEM_FILE,\n+            SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+    mtlsCommonTest(upstreamTlsContext);\n+  }\n+\n+  /** mTLS - client auth enabled then update server certs to untrusted. */\n+  @Test\n+  public void mtlsClientServer_changeServerContext_expectException() throws IOException {\n+    UpstreamTlsContext upstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildUpstreamTlsContextFromFilenames(\n+            SecretVolumeSslContextProviderTest.CLIENT_KEY_FILE,\n+            SecretVolumeSslContextProviderTest.CLIENT_PEM_FILE,\n+            SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+    XdsClient.ListenerWatcher listenerWatcher = mtlsCommonTest(upstreamTlsContext);\n+    DownstreamTlsContext downstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildDownstreamTlsContextFromFilenames(\n+            BAD_SERVER_KEY_FILE,\n+            BAD_SERVER_PEM_FILE,\n+            SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+    createListenerUpdate(server.getPort(), downstreamTlsContext, listenerWatcher);\n+    try {\n+      buildClientAndTest(upstreamTlsContext, \"foo.test.google.fr\", \"buddy\", server.getPort());\n+      fail(\"exception expected\");\n+    } catch (StatusRuntimeException sre) {\n+      assertThat(sre).hasCauseThat().isInstanceOf(SSLHandshakeException.class);\n+      assertThat(sre).hasCauseThat().hasMessageThat().isEqualTo(\"General OpenSslEngine problem\");\n+    }\n+  }\n+\n+  private XdsClient.ListenerWatcher mtlsCommonTest(UpstreamTlsContext upstreamTlsContext)\n+      throws IOException {\n+    DownstreamTlsContext downstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildDownstreamTlsContextFromFilenames(\n+            SecretVolumeSslContextProviderTest.SERVER_1_KEY_FILE,\n+            SecretVolumeSslContextProviderTest.SERVER_1_PEM_FILE,\n+            SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+\n+    XdsClient.ListenerWatcher listenerWatcher = getXdsServer(downstreamTlsContext);\n+    buildClientAndTest(upstreamTlsContext, \"foo.test.google.fr\", \"buddy\", server.getPort());\n+    return listenerWatcher;\n+  }\n+\n+  private XdsClient.ListenerWatcher getXdsServer(DownstreamTlsContext downstreamTlsContext)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fc54631c0397dfe8e0ccae80c2eddfab9ea345b"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2ODQ5NQ==", "bodyText": "the method name doesn't match to what it actually does. it makes the reader very confusing.", "url": "https://github.com/grpc/grpc-java/pull/6901#discussion_r404268495", "createdAt": "2020-04-06T17:34:39Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2019 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static io.grpc.xds.XdsClientWrapperForServerSdsTest.buildFilterChainMatch;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.mock;\n+\n+import io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext;\n+import io.envoyproxy.envoy.api.v2.auth.UpstreamTlsContext;\n+import io.grpc.Server;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.stub.StreamObserver;\n+import io.grpc.testing.GrpcCleanupRule;\n+import io.grpc.testing.protobuf.SimpleRequest;\n+import io.grpc.testing.protobuf.SimpleResponse;\n+import io.grpc.testing.protobuf.SimpleServiceGrpc;\n+import io.grpc.xds.internal.sds.SdsProtocolNegotiators;\n+import io.grpc.xds.internal.sds.SecretVolumeSslContextProviderTest;\n+import io.grpc.xds.internal.sds.XdsChannelBuilder;\n+import io.grpc.xds.internal.sds.XdsServerBuilder;\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.util.Arrays;\n+import javax.net.ssl.SSLHandshakeException;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * Unit tests for {@link XdsChannelBuilder} and {@link XdsServerBuilder} for plaintext/TLS/mTLS\n+ * modes.\n+ */\n+@RunWith(JUnit4.class)\n+public class XdsSdsClientServerTest {\n+\n+  /** Bad/untrusted server certs. */\n+  private static final String BAD_SERVER_PEM_FILE = \"badserver.pem\";\n+  private static final String BAD_SERVER_KEY_FILE = \"badserver.key\";\n+\n+  @Rule public final GrpcCleanupRule cleanupRule = new GrpcCleanupRule();\n+  private Server server;\n+\n+  @Test\n+  public void plaintextClientServer() throws IOException {\n+    getXdsServer(/* downstreamTlsContext= */ null);\n+    buildClientAndTest(\n+        /* upstreamTlsContext= */ null, /* overrideAuthority= */ null, \"buddy\", server.getPort());\n+  }\n+\n+  /** TLS channel - no mTLS. */\n+  @Test\n+  public void tlsClientServer_noClientAuthentication() throws IOException {\n+    DownstreamTlsContext downstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildDownstreamTlsContextFromFilenames(\n+            SecretVolumeSslContextProviderTest.SERVER_1_KEY_FILE,\n+            SecretVolumeSslContextProviderTest.SERVER_1_PEM_FILE,\n+            null);\n+\n+    getXdsServer(downstreamTlsContext);\n+\n+    // for TLS, client only needs trustCa\n+    UpstreamTlsContext upstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildUpstreamTlsContextFromFilenames(\n+            null, null, SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+    buildClientAndTest(upstreamTlsContext, \"foo.test.google.fr\", \"buddy\", server.getPort());\n+  }\n+\n+  /** mTLS - client auth enabled. */\n+  @Test\n+  public void mtlsClientServer_withClientAuthentication() throws IOException {\n+    UpstreamTlsContext upstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildUpstreamTlsContextFromFilenames(\n+            SecretVolumeSslContextProviderTest.CLIENT_KEY_FILE,\n+            SecretVolumeSslContextProviderTest.CLIENT_PEM_FILE,\n+            SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+    mtlsCommonTest(upstreamTlsContext);\n+  }\n+\n+  /** mTLS - client auth enabled then update server certs to untrusted. */\n+  @Test\n+  public void mtlsClientServer_changeServerContext_expectException() throws IOException {\n+    UpstreamTlsContext upstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildUpstreamTlsContextFromFilenames(\n+            SecretVolumeSslContextProviderTest.CLIENT_KEY_FILE,\n+            SecretVolumeSslContextProviderTest.CLIENT_PEM_FILE,\n+            SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+    XdsClient.ListenerWatcher listenerWatcher = mtlsCommonTest(upstreamTlsContext);\n+    DownstreamTlsContext downstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildDownstreamTlsContextFromFilenames(\n+            BAD_SERVER_KEY_FILE,\n+            BAD_SERVER_PEM_FILE,\n+            SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+    createListenerUpdate(server.getPort(), downstreamTlsContext, listenerWatcher);\n+    try {\n+      buildClientAndTest(upstreamTlsContext, \"foo.test.google.fr\", \"buddy\", server.getPort());\n+      fail(\"exception expected\");\n+    } catch (StatusRuntimeException sre) {\n+      assertThat(sre).hasCauseThat().isInstanceOf(SSLHandshakeException.class);\n+      assertThat(sre).hasCauseThat().hasMessageThat().isEqualTo(\"General OpenSslEngine problem\");\n+    }\n+  }\n+\n+  private XdsClient.ListenerWatcher mtlsCommonTest(UpstreamTlsContext upstreamTlsContext)\n+      throws IOException {\n+    DownstreamTlsContext downstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildDownstreamTlsContextFromFilenames(\n+            SecretVolumeSslContextProviderTest.SERVER_1_KEY_FILE,\n+            SecretVolumeSslContextProviderTest.SERVER_1_PEM_FILE,\n+            SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+\n+    XdsClient.ListenerWatcher listenerWatcher = getXdsServer(downstreamTlsContext);\n+    buildClientAndTest(upstreamTlsContext, \"foo.test.google.fr\", \"buddy\", server.getPort());\n+    return listenerWatcher;\n+  }\n+\n+  private XdsClient.ListenerWatcher getXdsServer(DownstreamTlsContext downstreamTlsContext)\n+      throws IOException {\n+    int port = findFreePort();\n+    XdsServerBuilder builder =\n+        XdsServerBuilder.forPort(port).addService(new SimpleServiceImpl());\n+    final XdsClientWrapperForServerSds xdsClientWrapperForServerSds =\n+        createXdsClientWrapperForServerSds(port, downstreamTlsContext);\n+    SdsProtocolNegotiators.ServerSdsProtocolNegotiator serverSdsProtocolNegotiator =\n+        new SdsProtocolNegotiators.ServerSdsProtocolNegotiator(xdsClientWrapperForServerSds);\n+    server = cleanupRule.register(builder.buildServer(serverSdsProtocolNegotiator)).start();\n+    return xdsClientWrapperForServerSds.getListenerWatcher();\n+  }\n+\n+  /** Creates XdsClientWrapperForServerSds: also used by other classes. */\n+  public static XdsClientWrapperForServerSds createXdsClientWrapperForServerSds(\n+      int port, DownstreamTlsContext downstreamTlsContext) {\n+    XdsClient mockXdsClient = mock(XdsClient.class);\n+    XdsClientWrapperForServerSds xdsClientWrapperForServerSds =\n+        new XdsClientWrapperForServerSds(port, mockXdsClient, null);\n+    createListenerUpdate(port, downstreamTlsContext,\n+        xdsClientWrapperForServerSds.getListenerWatcher());\n+    return xdsClientWrapperForServerSds;\n+  }\n+\n+  private static int findFreePort() throws IOException {\n+    try (ServerSocket socket = new ServerSocket(0)) {\n+      socket.setReuseAddress(true);\n+      return socket.getLocalPort();\n+    }\n+  }\n+\n+  private static void createListenerUpdate(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fc54631c0397dfe8e0ccae80c2eddfab9ea345b"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2OTU4Nw==", "bodyText": "this doesn't verify any security, it just verifies it is broken or not. is there way to verify?", "url": "https://github.com/grpc/grpc-java/pull/6901#discussion_r404269587", "createdAt": "2020-04-06T17:36:29Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2019 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static io.grpc.xds.XdsClientWrapperForServerSdsTest.buildFilterChainMatch;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.mock;\n+\n+import io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext;\n+import io.envoyproxy.envoy.api.v2.auth.UpstreamTlsContext;\n+import io.grpc.Server;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.stub.StreamObserver;\n+import io.grpc.testing.GrpcCleanupRule;\n+import io.grpc.testing.protobuf.SimpleRequest;\n+import io.grpc.testing.protobuf.SimpleResponse;\n+import io.grpc.testing.protobuf.SimpleServiceGrpc;\n+import io.grpc.xds.internal.sds.SdsProtocolNegotiators;\n+import io.grpc.xds.internal.sds.SecretVolumeSslContextProviderTest;\n+import io.grpc.xds.internal.sds.XdsChannelBuilder;\n+import io.grpc.xds.internal.sds.XdsServerBuilder;\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.util.Arrays;\n+import javax.net.ssl.SSLHandshakeException;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * Unit tests for {@link XdsChannelBuilder} and {@link XdsServerBuilder} for plaintext/TLS/mTLS\n+ * modes.\n+ */\n+@RunWith(JUnit4.class)\n+public class XdsSdsClientServerTest {\n+\n+  /** Bad/untrusted server certs. */\n+  private static final String BAD_SERVER_PEM_FILE = \"badserver.pem\";\n+  private static final String BAD_SERVER_KEY_FILE = \"badserver.key\";\n+\n+  @Rule public final GrpcCleanupRule cleanupRule = new GrpcCleanupRule();\n+  private Server server;\n+\n+  @Test\n+  public void plaintextClientServer() throws IOException {\n+    getXdsServer(/* downstreamTlsContext= */ null);\n+    buildClientAndTest(\n+        /* upstreamTlsContext= */ null, /* overrideAuthority= */ null, \"buddy\", server.getPort());\n+  }\n+\n+  /** TLS channel - no mTLS. */\n+  @Test\n+  public void tlsClientServer_noClientAuthentication() throws IOException {\n+    DownstreamTlsContext downstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildDownstreamTlsContextFromFilenames(\n+            SecretVolumeSslContextProviderTest.SERVER_1_KEY_FILE,\n+            SecretVolumeSslContextProviderTest.SERVER_1_PEM_FILE,\n+            null);\n+\n+    getXdsServer(downstreamTlsContext);\n+\n+    // for TLS, client only needs trustCa\n+    UpstreamTlsContext upstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildUpstreamTlsContextFromFilenames(\n+            null, null, SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+    buildClientAndTest(upstreamTlsContext, \"foo.test.google.fr\", \"buddy\", server.getPort());\n+  }\n+\n+  /** mTLS - client auth enabled. */\n+  @Test\n+  public void mtlsClientServer_withClientAuthentication() throws IOException {\n+    UpstreamTlsContext upstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildUpstreamTlsContextFromFilenames(\n+            SecretVolumeSslContextProviderTest.CLIENT_KEY_FILE,\n+            SecretVolumeSslContextProviderTest.CLIENT_PEM_FILE,\n+            SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+    mtlsCommonTest(upstreamTlsContext);\n+  }\n+\n+  /** mTLS - client auth enabled then update server certs to untrusted. */\n+  @Test\n+  public void mtlsClientServer_changeServerContext_expectException() throws IOException {\n+    UpstreamTlsContext upstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildUpstreamTlsContextFromFilenames(\n+            SecretVolumeSslContextProviderTest.CLIENT_KEY_FILE,\n+            SecretVolumeSslContextProviderTest.CLIENT_PEM_FILE,\n+            SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+    XdsClient.ListenerWatcher listenerWatcher = mtlsCommonTest(upstreamTlsContext);\n+    DownstreamTlsContext downstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildDownstreamTlsContextFromFilenames(\n+            BAD_SERVER_KEY_FILE,\n+            BAD_SERVER_PEM_FILE,\n+            SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+    createListenerUpdate(server.getPort(), downstreamTlsContext, listenerWatcher);\n+    try {\n+      buildClientAndTest(upstreamTlsContext, \"foo.test.google.fr\", \"buddy\", server.getPort());\n+      fail(\"exception expected\");\n+    } catch (StatusRuntimeException sre) {\n+      assertThat(sre).hasCauseThat().isInstanceOf(SSLHandshakeException.class);\n+      assertThat(sre).hasCauseThat().hasMessageThat().isEqualTo(\"General OpenSslEngine problem\");\n+    }\n+  }\n+\n+  private XdsClient.ListenerWatcher mtlsCommonTest(UpstreamTlsContext upstreamTlsContext)\n+      throws IOException {\n+    DownstreamTlsContext downstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildDownstreamTlsContextFromFilenames(\n+            SecretVolumeSslContextProviderTest.SERVER_1_KEY_FILE,\n+            SecretVolumeSslContextProviderTest.SERVER_1_PEM_FILE,\n+            SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+\n+    XdsClient.ListenerWatcher listenerWatcher = getXdsServer(downstreamTlsContext);\n+    buildClientAndTest(upstreamTlsContext, \"foo.test.google.fr\", \"buddy\", server.getPort());\n+    return listenerWatcher;\n+  }\n+\n+  private XdsClient.ListenerWatcher getXdsServer(DownstreamTlsContext downstreamTlsContext)\n+      throws IOException {\n+    int port = findFreePort();\n+    XdsServerBuilder builder =\n+        XdsServerBuilder.forPort(port).addService(new SimpleServiceImpl());\n+    final XdsClientWrapperForServerSds xdsClientWrapperForServerSds =\n+        createXdsClientWrapperForServerSds(port, downstreamTlsContext);\n+    SdsProtocolNegotiators.ServerSdsProtocolNegotiator serverSdsProtocolNegotiator =\n+        new SdsProtocolNegotiators.ServerSdsProtocolNegotiator(xdsClientWrapperForServerSds);\n+    server = cleanupRule.register(builder.buildServer(serverSdsProtocolNegotiator)).start();\n+    return xdsClientWrapperForServerSds.getListenerWatcher();\n+  }\n+\n+  /** Creates XdsClientWrapperForServerSds: also used by other classes. */\n+  public static XdsClientWrapperForServerSds createXdsClientWrapperForServerSds(\n+      int port, DownstreamTlsContext downstreamTlsContext) {\n+    XdsClient mockXdsClient = mock(XdsClient.class);\n+    XdsClientWrapperForServerSds xdsClientWrapperForServerSds =\n+        new XdsClientWrapperForServerSds(port, mockXdsClient, null);\n+    createListenerUpdate(port, downstreamTlsContext,\n+        xdsClientWrapperForServerSds.getListenerWatcher());\n+    return xdsClientWrapperForServerSds;\n+  }\n+\n+  private static int findFreePort() throws IOException {\n+    try (ServerSocket socket = new ServerSocket(0)) {\n+      socket.setReuseAddress(true);\n+      return socket.getLocalPort();\n+    }\n+  }\n+\n+  private static void createListenerUpdate(\n+      int port, DownstreamTlsContext tlsContext, XdsClient.ListenerWatcher registeredWatcher) {\n+    EnvoyServerProtoData.Listener listener =\n+        buildListener(\"listener1\", \"0.0.0.0\", port, tlsContext);\n+    XdsClient.ListenerUpdate listenerUpdate =\n+        XdsClient.ListenerUpdate.newBuilder().setListener(listener).build();\n+    registeredWatcher.onListenerChanged(listenerUpdate);\n+  }\n+\n+  static EnvoyServerProtoData.Listener buildListener(\n+      String name,\n+      String address,\n+      int port,\n+      DownstreamTlsContext tlsContext) {\n+    EnvoyServerProtoData.FilterChainMatch filterChainMatch =\n+        buildFilterChainMatch(port, address);\n+    EnvoyServerProtoData.FilterChain filterChain1 =\n+        new EnvoyServerProtoData.FilterChain(filterChainMatch, tlsContext);\n+    EnvoyServerProtoData.Listener listener =\n+        new EnvoyServerProtoData.Listener(name, address, Arrays.asList(filterChain1));\n+    return listener;\n+  }\n+\n+  private void buildClientAndTest(\n+      UpstreamTlsContext upstreamTlsContext,\n+      String overrideAuthority,\n+      String requestMessage,\n+      int serverPort) {\n+\n+    XdsChannelBuilder builder =\n+        XdsChannelBuilder.forTarget(\"localhost:\" + serverPort).tlsContext(upstreamTlsContext);\n+    if (overrideAuthority != null) {\n+      builder = builder.overrideAuthority(overrideAuthority);\n+    }\n+    SimpleServiceGrpc.SimpleServiceBlockingStub blockingStub =\n+        SimpleServiceGrpc.newBlockingStub(cleanupRule.register(builder.build()));\n+    String resp = unaryRpc(requestMessage, blockingStub);\n+    assertThat(resp).isEqualTo(\"Hello \" + requestMessage);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fc54631c0397dfe8e0ccae80c2eddfab9ea345b"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3MzY3OQ==", "bodyText": "why test returns something unrelated?", "url": "https://github.com/grpc/grpc-java/pull/6901#discussion_r404273679", "createdAt": "2020-04-06T17:43:09Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2019 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static io.grpc.xds.XdsClientWrapperForServerSdsTest.buildFilterChainMatch;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.mock;\n+\n+import io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext;\n+import io.envoyproxy.envoy.api.v2.auth.UpstreamTlsContext;\n+import io.grpc.Server;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.stub.StreamObserver;\n+import io.grpc.testing.GrpcCleanupRule;\n+import io.grpc.testing.protobuf.SimpleRequest;\n+import io.grpc.testing.protobuf.SimpleResponse;\n+import io.grpc.testing.protobuf.SimpleServiceGrpc;\n+import io.grpc.xds.internal.sds.SdsProtocolNegotiators;\n+import io.grpc.xds.internal.sds.SecretVolumeSslContextProviderTest;\n+import io.grpc.xds.internal.sds.XdsChannelBuilder;\n+import io.grpc.xds.internal.sds.XdsServerBuilder;\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.util.Arrays;\n+import javax.net.ssl.SSLHandshakeException;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * Unit tests for {@link XdsChannelBuilder} and {@link XdsServerBuilder} for plaintext/TLS/mTLS\n+ * modes.\n+ */\n+@RunWith(JUnit4.class)\n+public class XdsSdsClientServerTest {\n+\n+  /** Bad/untrusted server certs. */\n+  private static final String BAD_SERVER_PEM_FILE = \"badserver.pem\";\n+  private static final String BAD_SERVER_KEY_FILE = \"badserver.key\";\n+\n+  @Rule public final GrpcCleanupRule cleanupRule = new GrpcCleanupRule();\n+  private Server server;\n+\n+  @Test\n+  public void plaintextClientServer() throws IOException {\n+    getXdsServer(/* downstreamTlsContext= */ null);\n+    buildClientAndTest(\n+        /* upstreamTlsContext= */ null, /* overrideAuthority= */ null, \"buddy\", server.getPort());\n+  }\n+\n+  /** TLS channel - no mTLS. */\n+  @Test\n+  public void tlsClientServer_noClientAuthentication() throws IOException {\n+    DownstreamTlsContext downstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildDownstreamTlsContextFromFilenames(\n+            SecretVolumeSslContextProviderTest.SERVER_1_KEY_FILE,\n+            SecretVolumeSslContextProviderTest.SERVER_1_PEM_FILE,\n+            null);\n+\n+    getXdsServer(downstreamTlsContext);\n+\n+    // for TLS, client only needs trustCa\n+    UpstreamTlsContext upstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildUpstreamTlsContextFromFilenames(\n+            null, null, SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+    buildClientAndTest(upstreamTlsContext, \"foo.test.google.fr\", \"buddy\", server.getPort());\n+  }\n+\n+  /** mTLS - client auth enabled. */\n+  @Test\n+  public void mtlsClientServer_withClientAuthentication() throws IOException {\n+    UpstreamTlsContext upstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildUpstreamTlsContextFromFilenames(\n+            SecretVolumeSslContextProviderTest.CLIENT_KEY_FILE,\n+            SecretVolumeSslContextProviderTest.CLIENT_PEM_FILE,\n+            SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+    mtlsCommonTest(upstreamTlsContext);\n+  }\n+\n+  /** mTLS - client auth enabled then update server certs to untrusted. */\n+  @Test\n+  public void mtlsClientServer_changeServerContext_expectException() throws IOException {\n+    UpstreamTlsContext upstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildUpstreamTlsContextFromFilenames(\n+            SecretVolumeSslContextProviderTest.CLIENT_KEY_FILE,\n+            SecretVolumeSslContextProviderTest.CLIENT_PEM_FILE,\n+            SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+    XdsClient.ListenerWatcher listenerWatcher = mtlsCommonTest(upstreamTlsContext);\n+    DownstreamTlsContext downstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildDownstreamTlsContextFromFilenames(\n+            BAD_SERVER_KEY_FILE,\n+            BAD_SERVER_PEM_FILE,\n+            SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+    createListenerUpdate(server.getPort(), downstreamTlsContext, listenerWatcher);\n+    try {\n+      buildClientAndTest(upstreamTlsContext, \"foo.test.google.fr\", \"buddy\", server.getPort());\n+      fail(\"exception expected\");\n+    } catch (StatusRuntimeException sre) {\n+      assertThat(sre).hasCauseThat().isInstanceOf(SSLHandshakeException.class);\n+      assertThat(sre).hasCauseThat().hasMessageThat().isEqualTo(\"General OpenSslEngine problem\");\n+    }\n+  }\n+\n+  private XdsClient.ListenerWatcher mtlsCommonTest(UpstreamTlsContext upstreamTlsContext)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fc54631c0397dfe8e0ccae80c2eddfab9ea345b"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3Mzk1MA==", "bodyText": "it is hard to expect the behavior of this test, can you change to better name?", "url": "https://github.com/grpc/grpc-java/pull/6901#discussion_r404273950", "createdAt": "2020-04-06T17:43:36Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2019 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static io.grpc.xds.XdsClientWrapperForServerSdsTest.buildFilterChainMatch;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.mock;\n+\n+import io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext;\n+import io.envoyproxy.envoy.api.v2.auth.UpstreamTlsContext;\n+import io.grpc.Server;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.stub.StreamObserver;\n+import io.grpc.testing.GrpcCleanupRule;\n+import io.grpc.testing.protobuf.SimpleRequest;\n+import io.grpc.testing.protobuf.SimpleResponse;\n+import io.grpc.testing.protobuf.SimpleServiceGrpc;\n+import io.grpc.xds.internal.sds.SdsProtocolNegotiators;\n+import io.grpc.xds.internal.sds.SecretVolumeSslContextProviderTest;\n+import io.grpc.xds.internal.sds.XdsChannelBuilder;\n+import io.grpc.xds.internal.sds.XdsServerBuilder;\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.util.Arrays;\n+import javax.net.ssl.SSLHandshakeException;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * Unit tests for {@link XdsChannelBuilder} and {@link XdsServerBuilder} for plaintext/TLS/mTLS\n+ * modes.\n+ */\n+@RunWith(JUnit4.class)\n+public class XdsSdsClientServerTest {\n+\n+  /** Bad/untrusted server certs. */\n+  private static final String BAD_SERVER_PEM_FILE = \"badserver.pem\";\n+  private static final String BAD_SERVER_KEY_FILE = \"badserver.key\";\n+\n+  @Rule public final GrpcCleanupRule cleanupRule = new GrpcCleanupRule();\n+  private Server server;\n+\n+  @Test\n+  public void plaintextClientServer() throws IOException {\n+    getXdsServer(/* downstreamTlsContext= */ null);\n+    buildClientAndTest(\n+        /* upstreamTlsContext= */ null, /* overrideAuthority= */ null, \"buddy\", server.getPort());\n+  }\n+\n+  /** TLS channel - no mTLS. */\n+  @Test\n+  public void tlsClientServer_noClientAuthentication() throws IOException {\n+    DownstreamTlsContext downstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildDownstreamTlsContextFromFilenames(\n+            SecretVolumeSslContextProviderTest.SERVER_1_KEY_FILE,\n+            SecretVolumeSslContextProviderTest.SERVER_1_PEM_FILE,\n+            null);\n+\n+    getXdsServer(downstreamTlsContext);\n+\n+    // for TLS, client only needs trustCa\n+    UpstreamTlsContext upstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildUpstreamTlsContextFromFilenames(\n+            null, null, SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+    buildClientAndTest(upstreamTlsContext, \"foo.test.google.fr\", \"buddy\", server.getPort());\n+  }\n+\n+  /** mTLS - client auth enabled. */\n+  @Test\n+  public void mtlsClientServer_withClientAuthentication() throws IOException {\n+    UpstreamTlsContext upstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildUpstreamTlsContextFromFilenames(\n+            SecretVolumeSslContextProviderTest.CLIENT_KEY_FILE,\n+            SecretVolumeSslContextProviderTest.CLIENT_PEM_FILE,\n+            SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+    mtlsCommonTest(upstreamTlsContext);\n+  }\n+\n+  /** mTLS - client auth enabled then update server certs to untrusted. */\n+  @Test\n+  public void mtlsClientServer_changeServerContext_expectException() throws IOException {\n+    UpstreamTlsContext upstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildUpstreamTlsContextFromFilenames(\n+            SecretVolumeSslContextProviderTest.CLIENT_KEY_FILE,\n+            SecretVolumeSslContextProviderTest.CLIENT_PEM_FILE,\n+            SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+    XdsClient.ListenerWatcher listenerWatcher = mtlsCommonTest(upstreamTlsContext);\n+    DownstreamTlsContext downstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildDownstreamTlsContextFromFilenames(\n+            BAD_SERVER_KEY_FILE,\n+            BAD_SERVER_PEM_FILE,\n+            SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+    createListenerUpdate(server.getPort(), downstreamTlsContext, listenerWatcher);\n+    try {\n+      buildClientAndTest(upstreamTlsContext, \"foo.test.google.fr\", \"buddy\", server.getPort());\n+      fail(\"exception expected\");\n+    } catch (StatusRuntimeException sre) {\n+      assertThat(sre).hasCauseThat().isInstanceOf(SSLHandshakeException.class);\n+      assertThat(sre).hasCauseThat().hasMessageThat().isEqualTo(\"General OpenSslEngine problem\");\n+    }\n+  }\n+\n+  private XdsClient.ListenerWatcher mtlsCommonTest(UpstreamTlsContext upstreamTlsContext)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fc54631c0397dfe8e0ccae80c2eddfab9ea345b"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3NDkzNw==", "bodyText": "should probably moved to util class.", "url": "https://github.com/grpc/grpc-java/pull/6901#discussion_r404274937", "createdAt": "2020-04-06T17:45:05Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2019 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static io.grpc.xds.XdsClientWrapperForServerSdsTest.buildFilterChainMatch;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.mock;\n+\n+import io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext;\n+import io.envoyproxy.envoy.api.v2.auth.UpstreamTlsContext;\n+import io.grpc.Server;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.stub.StreamObserver;\n+import io.grpc.testing.GrpcCleanupRule;\n+import io.grpc.testing.protobuf.SimpleRequest;\n+import io.grpc.testing.protobuf.SimpleResponse;\n+import io.grpc.testing.protobuf.SimpleServiceGrpc;\n+import io.grpc.xds.internal.sds.SdsProtocolNegotiators;\n+import io.grpc.xds.internal.sds.SecretVolumeSslContextProviderTest;\n+import io.grpc.xds.internal.sds.XdsChannelBuilder;\n+import io.grpc.xds.internal.sds.XdsServerBuilder;\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.util.Arrays;\n+import javax.net.ssl.SSLHandshakeException;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * Unit tests for {@link XdsChannelBuilder} and {@link XdsServerBuilder} for plaintext/TLS/mTLS\n+ * modes.\n+ */\n+@RunWith(JUnit4.class)\n+public class XdsSdsClientServerTest {\n+\n+  /** Bad/untrusted server certs. */\n+  private static final String BAD_SERVER_PEM_FILE = \"badserver.pem\";\n+  private static final String BAD_SERVER_KEY_FILE = \"badserver.key\";\n+\n+  @Rule public final GrpcCleanupRule cleanupRule = new GrpcCleanupRule();\n+  private Server server;\n+\n+  @Test\n+  public void plaintextClientServer() throws IOException {\n+    getXdsServer(/* downstreamTlsContext= */ null);\n+    buildClientAndTest(\n+        /* upstreamTlsContext= */ null, /* overrideAuthority= */ null, \"buddy\", server.getPort());\n+  }\n+\n+  /** TLS channel - no mTLS. */\n+  @Test\n+  public void tlsClientServer_noClientAuthentication() throws IOException {\n+    DownstreamTlsContext downstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildDownstreamTlsContextFromFilenames(\n+            SecretVolumeSslContextProviderTest.SERVER_1_KEY_FILE,\n+            SecretVolumeSslContextProviderTest.SERVER_1_PEM_FILE,\n+            null);\n+\n+    getXdsServer(downstreamTlsContext);\n+\n+    // for TLS, client only needs trustCa\n+    UpstreamTlsContext upstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildUpstreamTlsContextFromFilenames(\n+            null, null, SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+    buildClientAndTest(upstreamTlsContext, \"foo.test.google.fr\", \"buddy\", server.getPort());\n+  }\n+\n+  /** mTLS - client auth enabled. */\n+  @Test\n+  public void mtlsClientServer_withClientAuthentication() throws IOException {\n+    UpstreamTlsContext upstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildUpstreamTlsContextFromFilenames(\n+            SecretVolumeSslContextProviderTest.CLIENT_KEY_FILE,\n+            SecretVolumeSslContextProviderTest.CLIENT_PEM_FILE,\n+            SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+    mtlsCommonTest(upstreamTlsContext);\n+  }\n+\n+  /** mTLS - client auth enabled then update server certs to untrusted. */\n+  @Test\n+  public void mtlsClientServer_changeServerContext_expectException() throws IOException {\n+    UpstreamTlsContext upstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildUpstreamTlsContextFromFilenames(\n+            SecretVolumeSslContextProviderTest.CLIENT_KEY_FILE,\n+            SecretVolumeSslContextProviderTest.CLIENT_PEM_FILE,\n+            SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+    XdsClient.ListenerWatcher listenerWatcher = mtlsCommonTest(upstreamTlsContext);\n+    DownstreamTlsContext downstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildDownstreamTlsContextFromFilenames(\n+            BAD_SERVER_KEY_FILE,\n+            BAD_SERVER_PEM_FILE,\n+            SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+    createListenerUpdate(server.getPort(), downstreamTlsContext, listenerWatcher);\n+    try {\n+      buildClientAndTest(upstreamTlsContext, \"foo.test.google.fr\", \"buddy\", server.getPort());\n+      fail(\"exception expected\");\n+    } catch (StatusRuntimeException sre) {\n+      assertThat(sre).hasCauseThat().isInstanceOf(SSLHandshakeException.class);\n+      assertThat(sre).hasCauseThat().hasMessageThat().isEqualTo(\"General OpenSslEngine problem\");\n+    }\n+  }\n+\n+  private XdsClient.ListenerWatcher mtlsCommonTest(UpstreamTlsContext upstreamTlsContext)\n+      throws IOException {\n+    DownstreamTlsContext downstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildDownstreamTlsContextFromFilenames(\n+            SecretVolumeSslContextProviderTest.SERVER_1_KEY_FILE,\n+            SecretVolumeSslContextProviderTest.SERVER_1_PEM_FILE,\n+            SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+\n+    XdsClient.ListenerWatcher listenerWatcher = getXdsServer(downstreamTlsContext);\n+    buildClientAndTest(upstreamTlsContext, \"foo.test.google.fr\", \"buddy\", server.getPort());\n+    return listenerWatcher;\n+  }\n+\n+  private XdsClient.ListenerWatcher getXdsServer(DownstreamTlsContext downstreamTlsContext)\n+      throws IOException {\n+    int port = findFreePort();\n+    XdsServerBuilder builder =\n+        XdsServerBuilder.forPort(port).addService(new SimpleServiceImpl());\n+    final XdsClientWrapperForServerSds xdsClientWrapperForServerSds =\n+        createXdsClientWrapperForServerSds(port, downstreamTlsContext);\n+    SdsProtocolNegotiators.ServerSdsProtocolNegotiator serverSdsProtocolNegotiator =\n+        new SdsProtocolNegotiators.ServerSdsProtocolNegotiator(xdsClientWrapperForServerSds);\n+    server = cleanupRule.register(builder.buildServer(serverSdsProtocolNegotiator)).start();\n+    return xdsClientWrapperForServerSds.getListenerWatcher();\n+  }\n+\n+  /** Creates XdsClientWrapperForServerSds: also used by other classes. */\n+  public static XdsClientWrapperForServerSds createXdsClientWrapperForServerSds(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fc54631c0397dfe8e0ccae80c2eddfab9ea345b"}, "originalPosition": 147}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bd6faa2150c5ea335116929b48bd77cdb301ccde", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/bd6faa2150c5ea335116929b48bd77cdb301ccde", "committedDate": "2020-04-07T07:40:23Z", "message": "refactor to address review comments"}, "afterCommit": {"oid": "0f03cd9778114bc1940757704cd0c8b63bbbb599", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/0f03cd9778114bc1940757704cd0c8b63bbbb599", "committedDate": "2020-04-07T16:09:32Z", "message": "address review comments\n\nUpdate xds/src/main/java/io/grpc/xds/XdsClientWrapperForServerSds.java\n\nCo-Authored-By: Jihun Cho <jihuncho@google.com>\n\nUpdate xds/src/main/java/io/grpc/xds/XdsClientWrapperForServerSds.java\n\nCo-Authored-By: Jihun Cho <jihuncho@google.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NTg5MTk5", "url": "https://github.com/grpc/grpc-java/pull/6901#pullrequestreview-388589199", "createdAt": "2020-04-06T20:24:12Z", "commit": {"oid": "6fc54631c0397dfe8e0ccae80c2eddfab9ea345b"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDoyNDoxMlrOGBof0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMjoxNTozNVrOGCYHHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2NTI2Ng==", "bodyText": "i thought git can track renamed file. i am not sure it is github or file modified too much?", "url": "https://github.com/grpc/grpc-java/pull/6901#discussion_r404365266", "createdAt": "2020-04-06T20:24:12Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI0Njc2Mw=="}, "originalCommit": {"oid": "6fc54631c0397dfe8e0ccae80c2eddfab9ea345b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3NDc4MA==", "bodyText": "maybe not the right comment for this PR. but, I am still not sure what it is really testing. it is only testing the tls context is not breaking communication.  this is one of the most important test for sds unless we have E2E test.", "url": "https://github.com/grpc/grpc-java/pull/6901#discussion_r404374780", "createdAt": "2020-04-06T20:41:19Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2019 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static io.grpc.xds.XdsClientWrapperForServerSdsTest.buildFilterChainMatch;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.mock;\n+\n+import io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext;\n+import io.envoyproxy.envoy.api.v2.auth.UpstreamTlsContext;\n+import io.grpc.Server;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.stub.StreamObserver;\n+import io.grpc.testing.GrpcCleanupRule;\n+import io.grpc.testing.protobuf.SimpleRequest;\n+import io.grpc.testing.protobuf.SimpleResponse;\n+import io.grpc.testing.protobuf.SimpleServiceGrpc;\n+import io.grpc.xds.internal.sds.SdsProtocolNegotiators;\n+import io.grpc.xds.internal.sds.SecretVolumeSslContextProviderTest;\n+import io.grpc.xds.internal.sds.XdsChannelBuilder;\n+import io.grpc.xds.internal.sds.XdsServerBuilder;\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.util.Arrays;\n+import javax.net.ssl.SSLHandshakeException;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * Unit tests for {@link XdsChannelBuilder} and {@link XdsServerBuilder} for plaintext/TLS/mTLS\n+ * modes.\n+ */\n+@RunWith(JUnit4.class)\n+public class XdsSdsClientServerTest {\n+\n+  /** Bad/untrusted server certs. */\n+  private static final String BAD_SERVER_PEM_FILE = \"badserver.pem\";\n+  private static final String BAD_SERVER_KEY_FILE = \"badserver.key\";\n+\n+  @Rule public final GrpcCleanupRule cleanupRule = new GrpcCleanupRule();\n+  private Server server;\n+\n+  @Test\n+  public void plaintextClientServer() throws IOException {\n+    getXdsServer(/* downstreamTlsContext= */ null);\n+    buildClientAndTest(\n+        /* upstreamTlsContext= */ null, /* overrideAuthority= */ null, \"buddy\", server.getPort());\n+  }\n+\n+  /** TLS channel - no mTLS. */\n+  @Test\n+  public void tlsClientServer_noClientAuthentication() throws IOException {\n+    DownstreamTlsContext downstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildDownstreamTlsContextFromFilenames(\n+            SecretVolumeSslContextProviderTest.SERVER_1_KEY_FILE,\n+            SecretVolumeSslContextProviderTest.SERVER_1_PEM_FILE,\n+            null);\n+\n+    getXdsServer(downstreamTlsContext);\n+\n+    // for TLS, client only needs trustCa\n+    UpstreamTlsContext upstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildUpstreamTlsContextFromFilenames(\n+            null, null, SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+    buildClientAndTest(upstreamTlsContext, \"foo.test.google.fr\", \"buddy\", server.getPort());\n+  }\n+\n+  /** mTLS - client auth enabled. */\n+  @Test\n+  public void mtlsClientServer_withClientAuthentication() throws IOException {\n+    UpstreamTlsContext upstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildUpstreamTlsContextFromFilenames(\n+            SecretVolumeSslContextProviderTest.CLIENT_KEY_FILE,\n+            SecretVolumeSslContextProviderTest.CLIENT_PEM_FILE,\n+            SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+    mtlsCommonTest(upstreamTlsContext);\n+  }\n+\n+  /** mTLS - client auth enabled then update server certs to untrusted. */\n+  @Test\n+  public void mtlsClientServer_changeServerContext_expectException() throws IOException {\n+    UpstreamTlsContext upstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildUpstreamTlsContextFromFilenames(\n+            SecretVolumeSslContextProviderTest.CLIENT_KEY_FILE,\n+            SecretVolumeSslContextProviderTest.CLIENT_PEM_FILE,\n+            SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+    XdsClient.ListenerWatcher listenerWatcher = mtlsCommonTest(upstreamTlsContext);\n+    DownstreamTlsContext downstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildDownstreamTlsContextFromFilenames(\n+            BAD_SERVER_KEY_FILE,\n+            BAD_SERVER_PEM_FILE,\n+            SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+    createListenerUpdate(server.getPort(), downstreamTlsContext, listenerWatcher);\n+    try {\n+      buildClientAndTest(upstreamTlsContext, \"foo.test.google.fr\", \"buddy\", server.getPort());\n+      fail(\"exception expected\");\n+    } catch (StatusRuntimeException sre) {\n+      assertThat(sre).hasCauseThat().isInstanceOf(SSLHandshakeException.class);\n+      assertThat(sre).hasCauseThat().hasMessageThat().isEqualTo(\"General OpenSslEngine problem\");\n+    }\n+  }\n+\n+  private XdsClient.ListenerWatcher mtlsCommonTest(UpstreamTlsContext upstreamTlsContext)\n+      throws IOException {\n+    DownstreamTlsContext downstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildDownstreamTlsContextFromFilenames(\n+            SecretVolumeSslContextProviderTest.SERVER_1_KEY_FILE,\n+            SecretVolumeSslContextProviderTest.SERVER_1_PEM_FILE,\n+            SecretVolumeSslContextProviderTest.CA_PEM_FILE);\n+\n+    XdsClient.ListenerWatcher listenerWatcher = getXdsServer(downstreamTlsContext);\n+    buildClientAndTest(upstreamTlsContext, \"foo.test.google.fr\", \"buddy\", server.getPort());\n+    return listenerWatcher;\n+  }\n+\n+  private XdsClient.ListenerWatcher getXdsServer(DownstreamTlsContext downstreamTlsContext)\n+      throws IOException {\n+    int port = findFreePort();\n+    XdsServerBuilder builder =\n+        XdsServerBuilder.forPort(port).addService(new SimpleServiceImpl());\n+    final XdsClientWrapperForServerSds xdsClientWrapperForServerSds =\n+        createXdsClientWrapperForServerSds(port, downstreamTlsContext);\n+    SdsProtocolNegotiators.ServerSdsProtocolNegotiator serverSdsProtocolNegotiator =\n+        new SdsProtocolNegotiators.ServerSdsProtocolNegotiator(xdsClientWrapperForServerSds);\n+    server = cleanupRule.register(builder.buildServer(serverSdsProtocolNegotiator)).start();\n+    return xdsClientWrapperForServerSds.getListenerWatcher();\n+  }\n+\n+  /** Creates XdsClientWrapperForServerSds: also used by other classes. */\n+  public static XdsClientWrapperForServerSds createXdsClientWrapperForServerSds(\n+      int port, DownstreamTlsContext downstreamTlsContext) {\n+    XdsClient mockXdsClient = mock(XdsClient.class);\n+    XdsClientWrapperForServerSds xdsClientWrapperForServerSds =\n+        new XdsClientWrapperForServerSds(port, mockXdsClient, null);\n+    createListenerUpdate(port, downstreamTlsContext,\n+        xdsClientWrapperForServerSds.getListenerWatcher());\n+    return xdsClientWrapperForServerSds;\n+  }\n+\n+  private static int findFreePort() throws IOException {\n+    try (ServerSocket socket = new ServerSocket(0)) {\n+      socket.setReuseAddress(true);\n+      return socket.getLocalPort();\n+    }\n+  }\n+\n+  private static void createListenerUpdate(\n+      int port, DownstreamTlsContext tlsContext, XdsClient.ListenerWatcher registeredWatcher) {\n+    EnvoyServerProtoData.Listener listener =\n+        buildListener(\"listener1\", \"0.0.0.0\", port, tlsContext);\n+    XdsClient.ListenerUpdate listenerUpdate =\n+        XdsClient.ListenerUpdate.newBuilder().setListener(listener).build();\n+    registeredWatcher.onListenerChanged(listenerUpdate);\n+  }\n+\n+  static EnvoyServerProtoData.Listener buildListener(\n+      String name,\n+      String address,\n+      int port,\n+      DownstreamTlsContext tlsContext) {\n+    EnvoyServerProtoData.FilterChainMatch filterChainMatch =\n+        buildFilterChainMatch(port, address);\n+    EnvoyServerProtoData.FilterChain filterChain1 =\n+        new EnvoyServerProtoData.FilterChain(filterChainMatch, tlsContext);\n+    EnvoyServerProtoData.Listener listener =\n+        new EnvoyServerProtoData.Listener(name, address, Arrays.asList(filterChain1));\n+    return listener;\n+  }\n+\n+  private void buildClientAndTest(\n+      UpstreamTlsContext upstreamTlsContext,\n+      String overrideAuthority,\n+      String requestMessage,\n+      int serverPort) {\n+\n+    XdsChannelBuilder builder =\n+        XdsChannelBuilder.forTarget(\"localhost:\" + serverPort).tlsContext(upstreamTlsContext);\n+    if (overrideAuthority != null) {\n+      builder = builder.overrideAuthority(overrideAuthority);\n+    }\n+    SimpleServiceGrpc.SimpleServiceBlockingStub blockingStub =\n+        SimpleServiceGrpc.newBlockingStub(cleanupRule.register(builder.build()));\n+    String resp = unaryRpc(requestMessage, blockingStub);\n+    assertThat(resp).isEqualTo(\"Hello \" + requestMessage);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2OTU4Nw=="}, "originalCommit": {"oid": "6fc54631c0397dfe8e0ccae80c2eddfab9ea345b"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUxNjQzNA==", "bodyText": "nit: toString can be omitted.", "url": "https://github.com/grpc/grpc-java/pull/6901#discussion_r404516434", "createdAt": "2020-04-07T03:37:55Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientWrapperForServerSds.java", "diffHunk": "@@ -106,29 +107,28 @@ public static XdsClientWrapperForServerSds newInstance(\n     this.port = port;\n     this.xdsClient = xdsClient;\n     this.timeService = timeService;\n-    xdsClient.watchListenerData(\n-        port,\n-        new XdsClient.ListenerWatcher() {\n-          @Override\n-          public void onListenerChanged(XdsClient.ListenerUpdate update) {\n-            logger.log(\n-                Level.INFO,\n-                \"Setting myListener from ConfigUpdate listener :{0}\",\n-                update.getListener().toString());\n-            curListener = update.getListener();\n-          }\n+    this.listenerWatcher = new XdsClient.ListenerWatcher() {\n+      @Override\n+      public void onListenerChanged(XdsClient.ListenerUpdate update) {\n+        logger.log(\n+            Level.INFO,\n+            \"Setting myListener from ConfigUpdate listener :{0}\",\n+            update.getListener().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51d4514f1b77a155e2cae413deb88bae63ea08cb"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUxNjk1NA==", "bodyText": "parameter is marked as nullable?", "url": "https://github.com/grpc/grpc-java/pull/6901#discussion_r404516954", "createdAt": "2020-04-07T03:39:58Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/SdsProtocolNegotiators.java", "diffHunk": "@@ -263,18 +259,14 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause)\n   @VisibleForTesting\n   public static final class ServerSdsProtocolNegotiator implements ProtocolNegotiator {\n \n-    @Nullable private final DownstreamTlsContext downstreamTlsContext;\n     @Nullable private final XdsClientWrapperForServerSds xdsClientWrapperForServerSds;\n \n     /** Constructor. */\n     @VisibleForTesting\n     public ServerSdsProtocolNegotiator(\n-        @Nullable DownstreamTlsContext downstreamTlsContext,\n         @Nullable XdsClientWrapperForServerSds xdsClientWrapperForServerSds) {\n-      checkArgument(downstreamTlsContext != null || xdsClientWrapperForServerSds != null,\n-          \"both downstreamTlsContext and xdsClientWrapperForServerSds cannot be null\");\n-      this.downstreamTlsContext = downstreamTlsContext;\n-      this.xdsClientWrapperForServerSds = xdsClientWrapperForServerSds;\n+      this.xdsClientWrapperForServerSds =\n+          checkNotNull(xdsClientWrapperForServerSds, \"xdsClientWrapperForServerSds\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51d4514f1b77a155e2cae413deb88bae63ea08cb"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUxNzcyOQ==", "bodyText": "can be merged to 1 line.", "url": "https://github.com/grpc/grpc-java/pull/6901#discussion_r404517729", "createdAt": "2020-04-07T03:43:31Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/SdsProtocolNegotiators.java", "diffHunk": "@@ -295,7 +287,7 @@ public AsciiString scheme() {\n \n     @Override\n     public ChannelHandler newHandler(GrpcHttp2ConnectionHandler grpcHandler) {\n-      return new HandlerPickerHandler(grpcHandler, downstreamTlsContext,\n+      return new HandlerPickerHandler(grpcHandler,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51d4514f1b77a155e2cae413deb88bae63ea08cb"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk2MzA1MA==", "bodyText": "this can be copied or in util class.", "url": "https://github.com/grpc/grpc-java/pull/6901#discussion_r404963050", "createdAt": "2020-04-07T16:53:18Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/XdsClientWrapperForServerSdsTest.java", "diffHunk": "@@ -139,6 +140,26 @@\n   private XdsClientWrapperForServerSds xdsClientWrapperForServerSds;\n   private final DownstreamTlsContext[] tlsContexts = new DownstreamTlsContext[3];\n \n+  /** Creates XdsClientWrapperForServerSds: also used by other classes. */\n+  public static XdsClientWrapperForServerSds createXdsClientWrapperForServerSds(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f03cd9778114bc1940757704cd0c8b63bbbb599"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzODk1NA==", "bodyText": "what i am worried is go/unit-test-practices#assertions-examples\nmost of the test looks like the bad example in that link.", "url": "https://github.com/grpc/grpc-java/pull/6901#discussion_r405138954", "createdAt": "2020-04-07T22:00:06Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2019 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static io.grpc.xds.XdsClientWrapperForServerSdsTest.buildFilterChainMatch;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.mock;\n+\n+import io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext;\n+import io.envoyproxy.envoy.api.v2.auth.UpstreamTlsContext;\n+import io.grpc.Server;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.stub.StreamObserver;\n+import io.grpc.testing.GrpcCleanupRule;\n+import io.grpc.testing.protobuf.SimpleRequest;\n+import io.grpc.testing.protobuf.SimpleResponse;\n+import io.grpc.testing.protobuf.SimpleServiceGrpc;\n+import io.grpc.xds.internal.sds.SdsProtocolNegotiators;\n+import io.grpc.xds.internal.sds.SecretVolumeSslContextProviderTest;\n+import io.grpc.xds.internal.sds.XdsChannelBuilder;\n+import io.grpc.xds.internal.sds.XdsServerBuilder;\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.util.Arrays;\n+import javax.net.ssl.SSLHandshakeException;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * Unit tests for {@link XdsChannelBuilder} and {@link XdsServerBuilder} for plaintext/TLS/mTLS\n+ * modes.\n+ */\n+@RunWith(JUnit4.class)\n+public class XdsSdsClientServerTest {\n+\n+  /** Bad/untrusted server certs. */\n+  private static final String BAD_SERVER_PEM_FILE = \"badserver.pem\";\n+  private static final String BAD_SERVER_KEY_FILE = \"badserver.key\";\n+\n+  @Rule public final GrpcCleanupRule cleanupRule = new GrpcCleanupRule();\n+  private Server server;\n+\n+  @Test\n+  public void plaintextClientServer() throws IOException {\n+    getXdsServer(/* downstreamTlsContext= */ null);\n+    buildClientAndTest(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2NjI3NQ=="}, "originalCommit": {"oid": "6fc54631c0397dfe8e0ccae80c2eddfab9ea345b"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0MTY3NQ==", "bodyText": "this method should be in the util class too", "url": "https://github.com/grpc/grpc-java/pull/6901#discussion_r405141675", "createdAt": "2020-04-07T22:06:37Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright 2019 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static io.grpc.xds.XdsClientWrapperForServerSdsTest.buildFilterChainMatch;\n+import static org.junit.Assert.fail;\n+\n+import io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext;\n+import io.envoyproxy.envoy.api.v2.auth.UpstreamTlsContext;\n+import io.grpc.Server;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.stub.StreamObserver;\n+import io.grpc.testing.GrpcCleanupRule;\n+import io.grpc.testing.protobuf.SimpleRequest;\n+import io.grpc.testing.protobuf.SimpleResponse;\n+import io.grpc.testing.protobuf.SimpleServiceGrpc;\n+import io.grpc.xds.internal.sds.CommonTlsContextTestsUtil;\n+import io.grpc.xds.internal.sds.SdsProtocolNegotiators;\n+import io.grpc.xds.internal.sds.SecretVolumeSslContextProviderTest;\n+import io.grpc.xds.internal.sds.XdsChannelBuilder;\n+import io.grpc.xds.internal.sds.XdsServerBuilder;\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.util.Arrays;\n+import javax.net.ssl.SSLHandshakeException;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * Unit tests for {@link XdsChannelBuilder} and {@link XdsServerBuilder} for plaintext/TLS/mTLS\n+ * modes.\n+ */\n+@RunWith(JUnit4.class)\n+public class XdsSdsClientServerTest {\n+\n+  @Rule public final GrpcCleanupRule cleanupRule = new GrpcCleanupRule();\n+  private Server server;\n+\n+  @Test\n+  public void plaintextClientServer() throws IOException {\n+    getXdsServer(/* downstreamTlsContext= */ null);\n+    buildClientAndTest(\n+        /* upstreamTlsContext= */ null, /* overrideAuthority= */ null, \"buddy\", server.getPort());\n+  }\n+\n+  /** TLS channel - no mTLS. */\n+  @Test\n+  public void tlsClientServer_noClientAuthentication() throws IOException {\n+    DownstreamTlsContext downstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildDownstreamTlsContextFromFilenames(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f03cd9778114bc1940757704cd0c8b63bbbb599"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0MTg2Nw==", "bodyText": "same here. the method should be in the util class.", "url": "https://github.com/grpc/grpc-java/pull/6901#discussion_r405141867", "createdAt": "2020-04-07T22:07:02Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright 2019 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static io.grpc.xds.XdsClientWrapperForServerSdsTest.buildFilterChainMatch;\n+import static org.junit.Assert.fail;\n+\n+import io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext;\n+import io.envoyproxy.envoy.api.v2.auth.UpstreamTlsContext;\n+import io.grpc.Server;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.stub.StreamObserver;\n+import io.grpc.testing.GrpcCleanupRule;\n+import io.grpc.testing.protobuf.SimpleRequest;\n+import io.grpc.testing.protobuf.SimpleResponse;\n+import io.grpc.testing.protobuf.SimpleServiceGrpc;\n+import io.grpc.xds.internal.sds.CommonTlsContextTestsUtil;\n+import io.grpc.xds.internal.sds.SdsProtocolNegotiators;\n+import io.grpc.xds.internal.sds.SecretVolumeSslContextProviderTest;\n+import io.grpc.xds.internal.sds.XdsChannelBuilder;\n+import io.grpc.xds.internal.sds.XdsServerBuilder;\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.util.Arrays;\n+import javax.net.ssl.SSLHandshakeException;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * Unit tests for {@link XdsChannelBuilder} and {@link XdsServerBuilder} for plaintext/TLS/mTLS\n+ * modes.\n+ */\n+@RunWith(JUnit4.class)\n+public class XdsSdsClientServerTest {\n+\n+  @Rule public final GrpcCleanupRule cleanupRule = new GrpcCleanupRule();\n+  private Server server;\n+\n+  @Test\n+  public void plaintextClientServer() throws IOException {\n+    getXdsServer(/* downstreamTlsContext= */ null);\n+    buildClientAndTest(\n+        /* upstreamTlsContext= */ null, /* overrideAuthority= */ null, \"buddy\", server.getPort());\n+  }\n+\n+  /** TLS channel - no mTLS. */\n+  @Test\n+  public void tlsClientServer_noClientAuthentication() throws IOException {\n+    DownstreamTlsContext downstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildDownstreamTlsContextFromFilenames(\n+            CommonTlsContextTestsUtil.SERVER_1_KEY_FILE,\n+            CommonTlsContextTestsUtil.SERVER_1_PEM_FILE,\n+            null);\n+\n+    getXdsServer(downstreamTlsContext);\n+\n+    // for TLS, client only needs trustCa\n+    UpstreamTlsContext upstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildUpstreamTlsContextFromFilenames(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f03cd9778114bc1940757704cd0c8b63bbbb599"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0Mzk0MA==", "bodyText": "can you use? /* paramName= */, like i mentioned before this is actually checked by linter which is less error prone. applies to other places.", "url": "https://github.com/grpc/grpc-java/pull/6901#discussion_r405143940", "createdAt": "2020-04-07T22:12:06Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/internal/sds/SdsProtocolNegotiatorsTest.java", "diffHunk": "@@ -259,10 +271,9 @@ public void clientSdsProtocolNegotiatorNewHandler_fireProtocolNegotiationEvent()\n   }\n \n   @Test\n-  public void serverSdsProtocolNegotiator_passNulls_expectPlaintext() {\n+  public void serverSdsProtocolNegotiator_nullSyncContext_expectPlaintext() {\n     InternalProtocolNegotiator.ProtocolNegotiator protocolNegotiator =\n-        SdsProtocolNegotiators.serverProtocolNegotiator(null, 7000,\n-            null);\n+        SdsProtocolNegotiators.serverProtocolNegotiator(7000, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f03cd9778114bc1940757704cd0c8b63bbbb599"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0NDI4Mw==", "bodyText": "should be moved to utility class if shared in many tests.", "url": "https://github.com/grpc/grpc-java/pull/6901#discussion_r405144283", "createdAt": "2020-04-07T22:12:51Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/internal/sds/SecretVolumeSslContextProviderTest.java", "diffHunk": "@@ -419,8 +404,22 @@ static void doChecksOnSslContext(boolean server, SslContext sslContext,\n   /**\n    * Helper method to build DownstreamTlsContext for above tests. Called from other classes as well.\n    */\n-  static DownstreamTlsContext buildDownstreamTlsContextFromFilenames(\n-      String privateKey, String certChain, String trustCa) {\n+  public static DownstreamTlsContext buildDownstreamTlsContextFromFilenames(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f03cd9778114bc1940757704cd0c8b63bbbb599"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0NDM4OA==", "bodyText": "same here, moved to utility class.", "url": "https://github.com/grpc/grpc-java/pull/6901#discussion_r405144388", "createdAt": "2020-04-07T22:13:08Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/internal/sds/SecretVolumeSslContextProviderTest.java", "diffHunk": "@@ -429,7 +428,20 @@ static DownstreamTlsContext buildDownstreamTlsContextFromFilenames(\n    * Helper method to build UpstreamTlsContext for above tests. Called from other classes as well.\n    */\n   public static UpstreamTlsContext buildUpstreamTlsContextFromFilenames(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f03cd9778114bc1940757704cd0c8b63bbbb599"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0NTM3NQ==", "bodyText": "FYI/nit: those could be static imported, because it is not vague.", "url": "https://github.com/grpc/grpc-java/pull/6901#discussion_r405145375", "createdAt": "2020-04-07T22:15:35Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright 2019 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static io.grpc.xds.XdsClientWrapperForServerSdsTest.buildFilterChainMatch;\n+import static org.junit.Assert.fail;\n+\n+import io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext;\n+import io.envoyproxy.envoy.api.v2.auth.UpstreamTlsContext;\n+import io.grpc.Server;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.stub.StreamObserver;\n+import io.grpc.testing.GrpcCleanupRule;\n+import io.grpc.testing.protobuf.SimpleRequest;\n+import io.grpc.testing.protobuf.SimpleResponse;\n+import io.grpc.testing.protobuf.SimpleServiceGrpc;\n+import io.grpc.xds.internal.sds.CommonTlsContextTestsUtil;\n+import io.grpc.xds.internal.sds.SdsProtocolNegotiators;\n+import io.grpc.xds.internal.sds.SecretVolumeSslContextProviderTest;\n+import io.grpc.xds.internal.sds.XdsChannelBuilder;\n+import io.grpc.xds.internal.sds.XdsServerBuilder;\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.util.Arrays;\n+import javax.net.ssl.SSLHandshakeException;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * Unit tests for {@link XdsChannelBuilder} and {@link XdsServerBuilder} for plaintext/TLS/mTLS\n+ * modes.\n+ */\n+@RunWith(JUnit4.class)\n+public class XdsSdsClientServerTest {\n+\n+  @Rule public final GrpcCleanupRule cleanupRule = new GrpcCleanupRule();\n+  private Server server;\n+\n+  @Test\n+  public void plaintextClientServer() throws IOException {\n+    getXdsServer(/* downstreamTlsContext= */ null);\n+    buildClientAndTest(\n+        /* upstreamTlsContext= */ null, /* overrideAuthority= */ null, \"buddy\", server.getPort());\n+  }\n+\n+  /** TLS channel - no mTLS. */\n+  @Test\n+  public void tlsClientServer_noClientAuthentication() throws IOException {\n+    DownstreamTlsContext downstreamTlsContext =\n+        SecretVolumeSslContextProviderTest.buildDownstreamTlsContextFromFilenames(\n+            CommonTlsContextTestsUtil.SERVER_1_KEY_FILE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f03cd9778114bc1940757704cd0c8b63bbbb599"}, "originalPosition": 68}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5f9261de86e78b5670696ec4015921013b8dedc3", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/5f9261de86e78b5670696ec4015921013b8dedc3", "committedDate": "2020-04-08T08:07:13Z", "message": "fix based on review"}, "afterCommit": {"oid": "be275e332c2a079fe8dc645d90cd30eaa1403e95", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/be275e332c2a079fe8dc645d90cd30eaa1403e95", "committedDate": "2020-04-08T16:45:33Z", "message": "further fix based on review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87f28fb9ddd107e53fa90c07fb916271f8461e6a", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/87f28fb9ddd107e53fa90c07fb916271f8461e6a", "committedDate": "2020-04-09T16:11:08Z", "message": "xds: eliminate downstreamTlsContext from XdsServerBuilder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "962a866d780df2ac353a7d61e2c7ac39603ce288", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/962a866d780df2ac353a7d61e2c7ac39603ce288", "committedDate": "2020-04-09T16:11:08Z", "message": "address review comments\n\nUpdate xds/src/main/java/io/grpc/xds/XdsClientWrapperForServerSds.java\n\nCo-Authored-By: Jihun Cho <jihuncho@google.com>\n\nUpdate xds/src/main/java/io/grpc/xds/XdsClientWrapperForServerSds.java\n\nCo-Authored-By: Jihun Cho <jihuncho@google.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73f0158e352572782d402c940a2f5e8dc6041005", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/73f0158e352572782d402c940a2f5e8dc6041005", "committedDate": "2020-04-09T16:14:42Z", "message": "further fix based on review"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "be275e332c2a079fe8dc645d90cd30eaa1403e95", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/be275e332c2a079fe8dc645d90cd30eaa1403e95", "committedDate": "2020-04-08T16:45:33Z", "message": "further fix based on review"}, "afterCommit": {"oid": "73f0158e352572782d402c940a2f5e8dc6041005", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/73f0158e352572782d402c940a2f5e8dc6041005", "committedDate": "2020-04-09T16:14:42Z", "message": "further fix based on review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMjI5OTY5", "url": "https://github.com/grpc/grpc-java/pull/6901#pullrequestreview-390229969", "createdAt": "2020-04-08T18:33:47Z", "commit": {"oid": "be275e332c2a079fe8dc645d90cd30eaa1403e95"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODozMzo0N1rOGC73Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjo0OToxM1rOGDg_fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTczMTE2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        CLIENT_KEY_FILE, CLIENT_PEM_FILE,\n          \n          \n            \n                        CA_PEM_FILE);\n          \n          \n            \n                        CLIENT_KEY_FILE, CLIENT_PEM_FILE, CA_PEM_FILE);", "url": "https://github.com/grpc/grpc-java/pull/6901#discussion_r405731162", "createdAt": "2020-04-08T18:33:47Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/CdsLoadBalancerTest.java", "diffHunk": "@@ -356,8 +356,9 @@ public void handleCdsConfigs_withUpstreamTlsContext()  {\n     verify(xdsClient).watchClusterData(eq(\"foo.googleapis.com\"), clusterWatcherCaptor1.capture());\n \n     UpstreamTlsContext upstreamTlsContext =\n-        SecretVolumeSslContextProviderTest.buildUpstreamTlsContextFromFilenames(\n-            CLIENT_KEY_FILE, CLIENT_PEM_FILE, CA_PEM_FILE);\n+        CommonTlsContextTestsUtil.buildUpstreamTlsContextFromFilenames(\n+            CLIENT_KEY_FILE, CLIENT_PEM_FILE,\n+            CA_PEM_FILE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be275e332c2a079fe8dc645d90cd30eaa1403e95"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTczMTM1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        BAD_CLIENT_KEY_FILE,\n          \n          \n            \n                        BAD_CLIENT_PEM_FILE, CA_PEM_FILE);\n          \n          \n            \n                        BAD_CLIENT_KEY_FILE, BAD_CLIENT_PEM_FILE, CA_PEM_FILE);", "url": "https://github.com/grpc/grpc-java/pull/6901#discussion_r405731355", "createdAt": "2020-04-08T18:34:06Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/CdsLoadBalancerTest.java", "diffHunk": "@@ -415,8 +416,9 @@ public void handleCdsConfigs_withUpstreamTlsContext()  {\n     reset(mockTlsContextManager);\n     reset(helper);\n     UpstreamTlsContext upstreamTlsContext1 =\n-        SecretVolumeSslContextProviderTest.buildUpstreamTlsContextFromFilenames(\n-            BADCLIENT_KEY_FILE, BADCLIENT_PEM_FILE, CA_PEM_FILE);\n+        CommonTlsContextTestsUtil.buildUpstreamTlsContextFromFilenames(\n+            BAD_CLIENT_KEY_FILE,\n+            BAD_CLIENT_PEM_FILE, CA_PEM_FILE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be275e332c2a079fe8dc645d90cd30eaa1403e95"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzNDA1NQ==", "bodyText": "i would say the flow is wrong. it is using server as global variable to pass it around.", "url": "https://github.com/grpc/grpc-java/pull/6901#discussion_r406334055", "createdAt": "2020-04-09T16:39:53Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2019 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static io.grpc.xds.XdsClientWrapperForServerSdsTest.buildFilterChainMatch;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.mock;\n+\n+import io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext;\n+import io.envoyproxy.envoy.api.v2.auth.UpstreamTlsContext;\n+import io.grpc.Server;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.stub.StreamObserver;\n+import io.grpc.testing.GrpcCleanupRule;\n+import io.grpc.testing.protobuf.SimpleRequest;\n+import io.grpc.testing.protobuf.SimpleResponse;\n+import io.grpc.testing.protobuf.SimpleServiceGrpc;\n+import io.grpc.xds.internal.sds.SdsProtocolNegotiators;\n+import io.grpc.xds.internal.sds.SecretVolumeSslContextProviderTest;\n+import io.grpc.xds.internal.sds.XdsChannelBuilder;\n+import io.grpc.xds.internal.sds.XdsServerBuilder;\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.util.Arrays;\n+import javax.net.ssl.SSLHandshakeException;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * Unit tests for {@link XdsChannelBuilder} and {@link XdsServerBuilder} for plaintext/TLS/mTLS\n+ * modes.\n+ */\n+@RunWith(JUnit4.class)\n+public class XdsSdsClientServerTest {\n+\n+  /** Bad/untrusted server certs. */\n+  private static final String BAD_SERVER_PEM_FILE = \"badserver.pem\";\n+  private static final String BAD_SERVER_KEY_FILE = \"badserver.key\";\n+\n+  @Rule public final GrpcCleanupRule cleanupRule = new GrpcCleanupRule();\n+  private Server server;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2NTI5Mg=="}, "originalCommit": {"oid": "6fc54631c0397dfe8e0ccae80c2eddfab9ea345b"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzOTQ1NA==", "bodyText": "wrong indentation", "url": "https://github.com/grpc/grpc-java/pull/6901#discussion_r406339454", "createdAt": "2020-04-09T16:49:13Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/internal/sds/ClientSslContextProviderFactoryTest.java", "diffHunk": "@@ -69,11 +68,9 @@ public void createSslContextProvider_sdsConfigForTlsCert_expectException() {\n   @Test\n   public void createSslContextProvider_sdsConfigForCertValidationContext_expectException() {\n     CommonTlsContext commonTlsContext =\n-        CommonTlsContextTestsUtil.buildCommonTlsContextFromSdsConfigForValidationContext(\n+            CommonTlsContextTestsUtil.buildCommonTlsContextFromSdsConfigForValidationContext(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73f0158e352572782d402c940a2f5e8dc6041005"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a2e57735a85abb20e5fe79da2b9fb24e9b34860", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/9a2e57735a85abb20e5fe79da2b9fb24e9b34860", "committedDate": "2020-04-13T16:47:10Z", "message": "Update xds/src/test/java/io/grpc/xds/CdsLoadBalancerTest.java\n\nCo-Authored-By: Jihun Cho <jihuncho@google.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30869df1a213a63f4e55be2723370a0314d2ab87", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/30869df1a213a63f4e55be2723370a0314d2ab87", "committedDate": "2020-04-13T16:56:14Z", "message": "fix indentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae06f95373bf4615fd64f9fa3ffb3aa5d6f73aa8", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/ae06f95373bf4615fd64f9fa3ffb3aa5d6f73aa8", "committedDate": "2020-04-13T17:00:17Z", "message": "Update xds/src/test/java/io/grpc/xds/CdsLoadBalancerTest.java\n\nCo-Authored-By: Jihun Cho <jihuncho@google.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "066719caa70b967a9710ae72eeda1852aa7ba336", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/066719caa70b967a9710ae72eeda1852aa7ba336", "committedDate": "2020-04-13T17:58:26Z", "message": "used g4 fix format to get rectangular rule in"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da484ce1eb8f69fa9c122966c62165952e8b3371", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/da484ce1eb8f69fa9c122966c62165952e8b3371", "committedDate": "2020-04-13T21:16:34Z", "message": "get rid of server as an instance var"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMzI0Njkw", "url": "https://github.com/grpc/grpc-java/pull/6901#pullrequestreview-392324690", "createdAt": "2020-04-13T18:08:03Z", "commit": {"oid": "066719caa70b967a9710ae72eeda1852aa7ba336"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxODowODowM1rOGEvhaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMzoxMjoyN1rOGE4ajA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyNjA5MQ==", "bodyText": "nit: this is little weird. formatter does this because all the instance variables should have empty line. anyways, we can remove this", "url": "https://github.com/grpc/grpc-java/pull/6901#discussion_r407626091", "createdAt": "2020-04-13T18:08:03Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/internal/sds/CommonTlsContextTestsUtil.java", "diffHunk": "@@ -43,6 +42,7 @@\n   public static final String CA_PEM_FILE = \"ca.pem\";\n   /** Bad/untrusted server certs. */\n   public static final String BAD_SERVER_PEM_FILE = \"badserver.pem\";\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "066719caa70b967a9710ae72eeda1852aa7ba336"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc3MTc4OA==", "bodyText": "nit: you can directly assign findFreePort() in L61.", "url": "https://github.com/grpc/grpc-java/pull/6901#discussion_r407771788", "createdAt": "2020-04-13T23:12:27Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/*\n+ * Copyright 2019 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static io.grpc.xds.XdsClientWrapperForServerSdsTest.buildFilterChainMatch;\n+import static io.grpc.xds.internal.sds.CommonTlsContextTestsUtil.BAD_SERVER_KEY_FILE;\n+import static io.grpc.xds.internal.sds.CommonTlsContextTestsUtil.BAD_SERVER_PEM_FILE;\n+import static io.grpc.xds.internal.sds.CommonTlsContextTestsUtil.CA_PEM_FILE;\n+import static io.grpc.xds.internal.sds.CommonTlsContextTestsUtil.CLIENT_KEY_FILE;\n+import static io.grpc.xds.internal.sds.CommonTlsContextTestsUtil.CLIENT_PEM_FILE;\n+import static io.grpc.xds.internal.sds.CommonTlsContextTestsUtil.SERVER_1_KEY_FILE;\n+import static io.grpc.xds.internal.sds.CommonTlsContextTestsUtil.SERVER_1_PEM_FILE;\n+import static org.junit.Assert.fail;\n+\n+import io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext;\n+import io.envoyproxy.envoy.api.v2.auth.UpstreamTlsContext;\n+import io.grpc.Server;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.stub.StreamObserver;\n+import io.grpc.testing.GrpcCleanupRule;\n+import io.grpc.testing.protobuf.SimpleRequest;\n+import io.grpc.testing.protobuf.SimpleResponse;\n+import io.grpc.testing.protobuf.SimpleServiceGrpc;\n+import io.grpc.xds.internal.sds.CommonTlsContextTestsUtil;\n+import io.grpc.xds.internal.sds.SdsProtocolNegotiators;\n+import io.grpc.xds.internal.sds.XdsChannelBuilder;\n+import io.grpc.xds.internal.sds.XdsServerBuilder;\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.util.Arrays;\n+import javax.net.ssl.SSLHandshakeException;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * Unit tests for {@link XdsChannelBuilder} and {@link XdsServerBuilder} for plaintext/TLS/mTLS\n+ * modes.\n+ */\n+@RunWith(JUnit4.class)\n+public class XdsSdsClientServerTest {\n+\n+  @Rule public final GrpcCleanupRule cleanupRule = new GrpcCleanupRule();\n+  private int port;\n+\n+  @Before\n+  public void setUp() throws IOException {\n+    port = findFreePort();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da484ce1eb8f69fa9c122966c62165952e8b3371"}, "originalPosition": 65}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b91741f17a292d547367dc412129f6fe84196cc", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/7b91741f17a292d547367dc412129f6fe84196cc", "committedDate": "2020-04-14T00:11:47Z", "message": "delete extra line"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4516, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}