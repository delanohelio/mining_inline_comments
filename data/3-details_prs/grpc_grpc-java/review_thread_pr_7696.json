{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyODgxMDU3", "number": 7696, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwOTo0MjozMlrOFBr8BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxODo0NDo0M1rOFJ14Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MzEyNzcyOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/XdsClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwOTo0MjozMlrOIAeC1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwOTo0MjozMlrOIAeC1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM2MzE1Ng==", "bodyText": "TODO in a separate PR: I may want to clean up other resource update data structures as well, they are too verbose to use.", "url": "https://github.com/grpc/grpc-java/pull/7696#discussion_r537363156", "createdAt": "2020-12-07T09:42:32Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsClient.java", "diffHunk": "@@ -193,93 +193,19 @@ public boolean equals(Object o) {\n   }\n \n   static final class CdsUpdate implements ResourceUpdate {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31810dbf542306d1b0e73fe37234653eadb179b8"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjI0MjMxOnYy", "diffSide": "LEFT", "path": "xds/src/main/java/io/grpc/xds/CdsLoadBalancer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDo1Njo1M1rOIA6WdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDo1Njo1M1rOIA6WdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyNjkzMw==", "bodyText": "Name too verbose, causing line-to-long issue.", "url": "https://github.com/grpc/grpc-java/pull/7696#discussion_r537826933", "createdAt": "2020-12-07T20:56:53Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/CdsLoadBalancer.java", "diffHunk": "@@ -193,36 +194,37 @@ private CdsLbState() {\n     }\n \n     @Override\n-    public void onChanged(final CdsUpdate newUpdate) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af9acaab18a2638b8dad55253298c82aa550cdfc"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjI0NTc0OnYy", "diffSide": "LEFT", "path": "xds/src/main/java/io/grpc/xds/CdsLoadBalancer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDo1NzozOVrOIA6YZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDo1NzozOVrOIA6YZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyNzQzMA==", "bodyText": "Log too verbose.", "url": "https://github.com/grpc/grpc-java/pull/7696#discussion_r537827430", "createdAt": "2020-12-07T20:57:39Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/CdsLoadBalancer.java", "diffHunk": "@@ -193,36 +194,37 @@ private CdsLbState() {\n     }\n \n     @Override\n-    public void onChanged(final CdsUpdate newUpdate) {\n+    public void onChanged(final CdsUpdate update) {\n       syncContext.execute(new Runnable() {\n         @Override\n         public void run() {\n           if (shutdown) {\n             return;\n           }\n-          if (logger.isLoggable(XdsLogLevel.INFO)) {\n-            logger.log(XdsLogLevel.INFO, \"Received cluster update from xDS client {0}: \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af9acaab18a2638b8dad55253298c82aa550cdfc"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjI1MDM1OnYy", "diffSide": "LEFT", "path": "xds/src/main/java/io/grpc/xds/CdsLoadBalancer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDo1ODo1NlrOIA6bQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDo1ODo1NlrOIA6bQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyODE2MQ==", "bodyText": "This check is useless, \"round_robin\" is hard coded for CdsUpdate.", "url": "https://github.com/grpc/grpc-java/pull/7696#discussion_r537828161", "createdAt": "2020-12-07T20:58:56Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/CdsLoadBalancer.java", "diffHunk": "@@ -193,36 +194,37 @@ private CdsLbState() {\n     }\n \n     @Override\n-    public void onChanged(final CdsUpdate newUpdate) {\n+    public void onChanged(final CdsUpdate update) {\n       syncContext.execute(new Runnable() {\n         @Override\n         public void run() {\n           if (shutdown) {\n             return;\n           }\n-          if (logger.isLoggable(XdsLogLevel.INFO)) {\n-            logger.log(XdsLogLevel.INFO, \"Received cluster update from xDS client {0}: \"\n-                    + \"cluster_name={1}, eds_service_name={2}, lb_policy={3}, report_load={4}\",\n-                xdsClient, newUpdate.getClusterName(), newUpdate.getEdsServiceName(),\n-                newUpdate.getLbPolicy(), newUpdate.getLrsServerName() != null);\n+          // TODO(chengyuanzhang): implementations for logical DNS and aggregate clusters.\n+          if (update.clusterType != ClusterType.EDS) {\n+            logger.log(XdsLogLevel.WARNING, \"Unsupported cluster type: {0}\", update.clusterType);\n+            return;\n           }\n-          // FIXME(chengyuanzhang): handle error correctly to avoid being unnecessarily fragile.\n-          checkArgument(newUpdate.getLbPolicy().equals(\"round_robin\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af9acaab18a2638b8dad55253298c82aa550cdfc"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODYyODExOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/ClientXdsClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxODozNzowMVrOIMVknw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMDo0Mjo1OVrOIMXnjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgwNzI2Mw==", "bodyText": ".cluster. or .clusters.?", "url": "https://github.com/grpc/grpc-java/pull/7696#discussion_r549807263", "createdAt": "2020-12-29T18:37:01Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/ClientXdsClient.java", "diffHunk": "@@ -70,6 +74,8 @@\n   // Longest time to wait, since the subscription to some resource, for concluding its absence.\n   @VisibleForTesting\n   static final int INITIAL_RESOURCE_FETCH_TIMEOUT_SEC = 15;\n+  @VisibleForTesting\n+  static final String AGGREGATE_CLUSTER_TYPE_NAME = \"envoy.cluster.aggregate\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b36ef31c7aaaa2fbca57e1e37b5e34f22561adb6"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg0MDc4Mw==", "bodyText": "Oops, that's an amazing catch. Thanks \ud83d\ude04", "url": "https://github.com/grpc/grpc-java/pull/7696#discussion_r549840783", "createdAt": "2020-12-29T20:42:59Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/ClientXdsClient.java", "diffHunk": "@@ -70,6 +74,8 @@\n   // Longest time to wait, since the subscription to some resource, for concluding its absence.\n   @VisibleForTesting\n   static final int INITIAL_RESOURCE_FETCH_TIMEOUT_SEC = 15;\n+  @VisibleForTesting\n+  static final String AGGREGATE_CLUSTER_TYPE_NAME = \"envoy.cluster.aggregate\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgwNzI2Mw=="}, "originalCommit": {"oid": "b36ef31c7aaaa2fbca57e1e37b5e34f22561adb6"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODY0MjY3OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/ClientXdsClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxODo0NDo0M1rOIMVs9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxOToxMjoxNVrOIMWKyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgwOTM5OA==", "bodyText": "Why not check if(update==null) {return;} here?", "url": "https://github.com/grpc/grpc-java/pull/7696#discussion_r549809398", "createdAt": "2020-12-29T18:44:43Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/ClientXdsClient.java", "diffHunk": "@@ -280,88 +290,42 @@ protected void handleCdsResponse(String versionInfo, List<Any> resources, String\n     }\n     getLogger().log(XdsLogLevel.INFO, \"Received CDS response for resources: {0}\", clusterNames);\n \n-    String errorMessage = null;\n-    // Cluster information update for requested clusters received in this CDS response.\n     Map<String, CdsUpdate> cdsUpdates = new HashMap<>();\n-    // CDS responses represents the state of the world, EDS services not referenced by\n-    // Clusters are those no longer exist.\n-    Set<String> edsServices = new HashSet<>();\n+    // CDS responses represents the state of the world, EDS resources not referenced in CDS\n+    // resources should be deleted.\n+    Set<String> edsResources = new HashSet<>();  // retained EDS resources\n     for (Cluster cluster : clusters) {\n       String clusterName = cluster.getName();\n-      // Skip information for clusters not requested.\n       // Management server is required to always send newly requested resources, even if they\n       // may have been sent previously (proactively). Thus, client does not need to cache\n       // unrequested resources.\n       if (!cdsResourceSubscribers.containsKey(clusterName)) {\n         continue;\n       }\n-      CdsUpdate.Builder updateBuilder = CdsUpdate.newBuilder();\n-      updateBuilder.setClusterName(clusterName);\n-      // The type field must be set to EDS.\n-      if (!cluster.getType().equals(DiscoveryType.EDS)) {\n-        errorMessage = \"Cluster \" + clusterName + \" : only EDS discovery type is supported \"\n-            + \"in gRPC.\";\n-        break;\n-      }\n-      // In the eds_cluster_config field, the eds_config field must be set to indicate to\n-      // use EDS (must be set to use ADS).\n-      EdsClusterConfig edsClusterConfig = cluster.getEdsClusterConfig();\n-      if (!edsClusterConfig.getEdsConfig().hasAds()) {\n-        errorMessage = \"Cluster \" + clusterName + \" : field eds_cluster_config must be set to \"\n-            + \"indicate to use EDS over ADS.\";\n-        break;\n-      }\n-      // If the service_name field is set, that value will be used for the EDS request.\n-      if (!edsClusterConfig.getServiceName().isEmpty()) {\n-        updateBuilder.setEdsServiceName(edsClusterConfig.getServiceName());\n-        edsServices.add(edsClusterConfig.getServiceName());\n-      } else {\n-        edsServices.add(clusterName);\n-      }\n       // The lb_policy field must be set to ROUND_ROBIN.\n       if (!cluster.getLbPolicy().equals(LbPolicy.ROUND_ROBIN)) {\n-        errorMessage = \"Cluster \" + clusterName + \" : only round robin load balancing policy is \"\n-            + \"supported in gRPC.\";\n-        break;\n+        nackResponse(ResourceType.CDS, nonce,\n+            \"Cluster \" + clusterName + \": unsupported Lb policy: \" + cluster.getLbPolicy());\n+        return;\n       }\n-      updateBuilder.setLbPolicy(\"round_robin\");\n-      // If the lrs_server field is set, it must have its self field set, in which case the\n-      // client should use LRS for load reporting. Otherwise (the lrs_server field is not set),\n-      // LRS load reporting will be disabled.\n-      if (cluster.hasLrsServer()) {\n-        if (!cluster.getLrsServer().hasSelf()) {\n-          errorMessage = \"Cluster \" + clusterName + \" : only support enabling LRS for the same \"\n-              + \"management server.\";\n+      String lbPolicy = \"round_robin\";\n+      CdsUpdate update = null;\n+      switch (cluster.getClusterDiscoveryTypeCase()) {\n+        case TYPE:\n+          update = parseNonAggregateCluster(cluster, nonce, lbPolicy, edsResources);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b36ef31c7aaaa2fbca57e1e37b5e34f22561adb6"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgxNzAzMg==", "bodyText": "Oh, it's not big difference call it right after switch. I had misimpression that the check looked a lot after here in the unified diff view.", "url": "https://github.com/grpc/grpc-java/pull/7696#discussion_r549817032", "createdAt": "2020-12-29T19:12:15Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/ClientXdsClient.java", "diffHunk": "@@ -280,88 +290,42 @@ protected void handleCdsResponse(String versionInfo, List<Any> resources, String\n     }\n     getLogger().log(XdsLogLevel.INFO, \"Received CDS response for resources: {0}\", clusterNames);\n \n-    String errorMessage = null;\n-    // Cluster information update for requested clusters received in this CDS response.\n     Map<String, CdsUpdate> cdsUpdates = new HashMap<>();\n-    // CDS responses represents the state of the world, EDS services not referenced by\n-    // Clusters are those no longer exist.\n-    Set<String> edsServices = new HashSet<>();\n+    // CDS responses represents the state of the world, EDS resources not referenced in CDS\n+    // resources should be deleted.\n+    Set<String> edsResources = new HashSet<>();  // retained EDS resources\n     for (Cluster cluster : clusters) {\n       String clusterName = cluster.getName();\n-      // Skip information for clusters not requested.\n       // Management server is required to always send newly requested resources, even if they\n       // may have been sent previously (proactively). Thus, client does not need to cache\n       // unrequested resources.\n       if (!cdsResourceSubscribers.containsKey(clusterName)) {\n         continue;\n       }\n-      CdsUpdate.Builder updateBuilder = CdsUpdate.newBuilder();\n-      updateBuilder.setClusterName(clusterName);\n-      // The type field must be set to EDS.\n-      if (!cluster.getType().equals(DiscoveryType.EDS)) {\n-        errorMessage = \"Cluster \" + clusterName + \" : only EDS discovery type is supported \"\n-            + \"in gRPC.\";\n-        break;\n-      }\n-      // In the eds_cluster_config field, the eds_config field must be set to indicate to\n-      // use EDS (must be set to use ADS).\n-      EdsClusterConfig edsClusterConfig = cluster.getEdsClusterConfig();\n-      if (!edsClusterConfig.getEdsConfig().hasAds()) {\n-        errorMessage = \"Cluster \" + clusterName + \" : field eds_cluster_config must be set to \"\n-            + \"indicate to use EDS over ADS.\";\n-        break;\n-      }\n-      // If the service_name field is set, that value will be used for the EDS request.\n-      if (!edsClusterConfig.getServiceName().isEmpty()) {\n-        updateBuilder.setEdsServiceName(edsClusterConfig.getServiceName());\n-        edsServices.add(edsClusterConfig.getServiceName());\n-      } else {\n-        edsServices.add(clusterName);\n-      }\n       // The lb_policy field must be set to ROUND_ROBIN.\n       if (!cluster.getLbPolicy().equals(LbPolicy.ROUND_ROBIN)) {\n-        errorMessage = \"Cluster \" + clusterName + \" : only round robin load balancing policy is \"\n-            + \"supported in gRPC.\";\n-        break;\n+        nackResponse(ResourceType.CDS, nonce,\n+            \"Cluster \" + clusterName + \": unsupported Lb policy: \" + cluster.getLbPolicy());\n+        return;\n       }\n-      updateBuilder.setLbPolicy(\"round_robin\");\n-      // If the lrs_server field is set, it must have its self field set, in which case the\n-      // client should use LRS for load reporting. Otherwise (the lrs_server field is not set),\n-      // LRS load reporting will be disabled.\n-      if (cluster.hasLrsServer()) {\n-        if (!cluster.getLrsServer().hasSelf()) {\n-          errorMessage = \"Cluster \" + clusterName + \" : only support enabling LRS for the same \"\n-              + \"management server.\";\n+      String lbPolicy = \"round_robin\";\n+      CdsUpdate update = null;\n+      switch (cluster.getClusterDiscoveryTypeCase()) {\n+        case TYPE:\n+          update = parseNonAggregateCluster(cluster, nonce, lbPolicy, edsResources);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgwOTM5OA=="}, "originalCommit": {"oid": "b36ef31c7aaaa2fbca57e1e37b5e34f22561adb6"}, "originalPosition": 117}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2989, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}