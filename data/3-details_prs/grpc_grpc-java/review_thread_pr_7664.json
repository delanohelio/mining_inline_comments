{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2NzQyNDU4", "number": 7664, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzozMTo0MVrOE9VGhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxODozMDozMlrOE9WUlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzQ0MzI2OnYy", "diffSide": "RIGHT", "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/XdsHelloWorldClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzozMTo0MVrOH59olA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzo0Mzo0N1rOH5-Dbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU0MDY5Mg==", "bodyText": "I am okay with --secure but I thought you wanted to change it to something more appropriate (because of the fallback to plaintext)", "url": "https://github.com/grpc/grpc-java/pull/7664#discussion_r530540692", "createdAt": "2020-11-25T17:31:41Z", "author": {"login": "sanjaypujare"}, "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/XdsHelloWorldClient.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.Channel;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.Grpc;\n+import io.grpc.InsecureChannelCredentials;\n+import io.grpc.ManagedChannel;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.xds.XdsChannelCredentials;\n+import java.util.Arrays;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * A simple xDS client that requests a greeting from {@code HelloWorldServer} or {@link\n+ * XdsHelloWorldServer}.\n+ */\n+public class XdsHelloWorldClient {\n+  private static final Logger logger = Logger.getLogger(XdsHelloWorldClient.class.getName());\n+\n+  private final GreeterGrpc.GreeterBlockingStub blockingStub;\n+\n+  /** Construct client for accessing HelloWorld server using the existing channel. */\n+  public XdsHelloWorldClient(Channel channel) {\n+    blockingStub = GreeterGrpc.newBlockingStub(channel);\n+  }\n+\n+  /** Say hello to server. */\n+  public void greet(String name) {\n+    logger.info(\"Will try to greet \" + name + \" ...\");\n+    HelloRequest request = HelloRequest.newBuilder().setName(name).build();\n+    HelloReply response;\n+    try {\n+      response = blockingStub.sayHello(request);\n+    } catch (StatusRuntimeException e) {\n+      logger.log(Level.WARNING, \"RPC failed: {0}\", e.getStatus());\n+      return;\n+    }\n+    logger.info(\"Greeting: \" + response.getMessage());\n+  }\n+\n+  /**\n+   * Greet server. If provided, the first element of {@code args} is the name to use in the\n+   * greeting. The second argument is the target server. A {@code --secure} flag is also accepted.\n+   */\n+  public static void main(String[] args) throws Exception {\n+    String user = \"xds world\";\n+    // The example defaults to the same behavior as the hello world example. To enable xDS, pass an\n+    // \"xds:\"-prefixed string as the target.\n+    String target = \"localhost:50051\";\n+    ChannelCredentials credentials = InsecureChannelCredentials.create();\n+    if (args.length > 0) {\n+      if (\"--help\".equals(args[0])) {\n+        System.out.println(\"Usage: [--secure] [NAME [TARGET]]\\n\");\n+        System.err.println(\"  --secure  Use credentials provided by xDS. Defaults to insecure\");\n+        System.err.println(\"  NAME      The name you wish to be greeted by. Defaults to \" + user);\n+        System.err.println(\"  TARGET    The server to connect to. Defaults to \" + target);\n+        System.exit(1);\n+      } else if (\"--secure\".equals(args[0])) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78a5782c9f56de7ed3adc68944afdc8cacebb582"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU0NzU2Nw==", "bodyText": "I wanted to make that change in a separate PR.", "url": "https://github.com/grpc/grpc-java/pull/7664#discussion_r530547567", "createdAt": "2020-11-25T17:43:47Z", "author": {"login": "ejona86"}, "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/XdsHelloWorldClient.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.Channel;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.Grpc;\n+import io.grpc.InsecureChannelCredentials;\n+import io.grpc.ManagedChannel;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.xds.XdsChannelCredentials;\n+import java.util.Arrays;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * A simple xDS client that requests a greeting from {@code HelloWorldServer} or {@link\n+ * XdsHelloWorldServer}.\n+ */\n+public class XdsHelloWorldClient {\n+  private static final Logger logger = Logger.getLogger(XdsHelloWorldClient.class.getName());\n+\n+  private final GreeterGrpc.GreeterBlockingStub blockingStub;\n+\n+  /** Construct client for accessing HelloWorld server using the existing channel. */\n+  public XdsHelloWorldClient(Channel channel) {\n+    blockingStub = GreeterGrpc.newBlockingStub(channel);\n+  }\n+\n+  /** Say hello to server. */\n+  public void greet(String name) {\n+    logger.info(\"Will try to greet \" + name + \" ...\");\n+    HelloRequest request = HelloRequest.newBuilder().setName(name).build();\n+    HelloReply response;\n+    try {\n+      response = blockingStub.sayHello(request);\n+    } catch (StatusRuntimeException e) {\n+      logger.log(Level.WARNING, \"RPC failed: {0}\", e.getStatus());\n+      return;\n+    }\n+    logger.info(\"Greeting: \" + response.getMessage());\n+  }\n+\n+  /**\n+   * Greet server. If provided, the first element of {@code args} is the name to use in the\n+   * greeting. The second argument is the target server. A {@code --secure} flag is also accepted.\n+   */\n+  public static void main(String[] args) throws Exception {\n+    String user = \"xds world\";\n+    // The example defaults to the same behavior as the hello world example. To enable xDS, pass an\n+    // \"xds:\"-prefixed string as the target.\n+    String target = \"localhost:50051\";\n+    ChannelCredentials credentials = InsecureChannelCredentials.create();\n+    if (args.length > 0) {\n+      if (\"--help\".equals(args[0])) {\n+        System.out.println(\"Usage: [--secure] [NAME [TARGET]]\\n\");\n+        System.err.println(\"  --secure  Use credentials provided by xDS. Defaults to insecure\");\n+        System.err.println(\"  NAME      The name you wish to be greeted by. Defaults to \" + user);\n+        System.err.println(\"  TARGET    The server to connect to. Defaults to \" + target);\n+        System.exit(1);\n+      } else if (\"--secure\".equals(args[0])) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU0MDY5Mg=="}, "originalCommit": {"oid": "78a5782c9f56de7ed3adc68944afdc8cacebb582"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzQ3NzU4OnYy", "diffSide": "RIGHT", "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/XdsHelloWorldClient.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzo0MTowN1rOH599nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxODoxODoyNlrOH5_LsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU0NjA3OQ==", "bodyText": "Is this a good default for this example? When --secure is used and target is omitted, the --secure flag has no meaning. Also when the target doesn't start with xds:/// also the flag has no meaning.", "url": "https://github.com/grpc/grpc-java/pull/7664#discussion_r530546079", "createdAt": "2020-11-25T17:41:07Z", "author": {"login": "sanjaypujare"}, "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/XdsHelloWorldClient.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.Channel;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.Grpc;\n+import io.grpc.InsecureChannelCredentials;\n+import io.grpc.ManagedChannel;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.xds.XdsChannelCredentials;\n+import java.util.Arrays;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * A simple xDS client that requests a greeting from {@code HelloWorldServer} or {@link\n+ * XdsHelloWorldServer}.\n+ */\n+public class XdsHelloWorldClient {\n+  private static final Logger logger = Logger.getLogger(XdsHelloWorldClient.class.getName());\n+\n+  private final GreeterGrpc.GreeterBlockingStub blockingStub;\n+\n+  /** Construct client for accessing HelloWorld server using the existing channel. */\n+  public XdsHelloWorldClient(Channel channel) {\n+    blockingStub = GreeterGrpc.newBlockingStub(channel);\n+  }\n+\n+  /** Say hello to server. */\n+  public void greet(String name) {\n+    logger.info(\"Will try to greet \" + name + \" ...\");\n+    HelloRequest request = HelloRequest.newBuilder().setName(name).build();\n+    HelloReply response;\n+    try {\n+      response = blockingStub.sayHello(request);\n+    } catch (StatusRuntimeException e) {\n+      logger.log(Level.WARNING, \"RPC failed: {0}\", e.getStatus());\n+      return;\n+    }\n+    logger.info(\"Greeting: \" + response.getMessage());\n+  }\n+\n+  /**\n+   * Greet server. If provided, the first element of {@code args} is the name to use in the\n+   * greeting. The second argument is the target server. A {@code --secure} flag is also accepted.\n+   */\n+  public static void main(String[] args) throws Exception {\n+    String user = \"xds world\";\n+    // The example defaults to the same behavior as the hello world example. To enable xDS, pass an\n+    // \"xds:\"-prefixed string as the target.\n+    String target = \"localhost:50051\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78a5782c9f56de7ed3adc68944afdc8cacebb582"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU1MDQyMA==", "bodyText": "Is this a good default for this example?\n\nIf there was a better default (like an xds: string), I'd consider it, but I don't think there is a better default. But I think it really shows that \"the only thing that makes this xds is the target string.\" This is the current example behavior, and I think that is appropriate to keep.\n\nWhen --secure is used and target is omitted, the --secure flag has no meaning.\n\nNot really any different than its normal meaning. It has the meaning \"if xds provides security details use them, otherwise use the fallback.\" And here xds doesn't provide any security details.\n\nAlso when the target doesn't start with xds:/// also the flag has no meaning.\n\nThat was already the case. Why bring that up?", "url": "https://github.com/grpc/grpc-java/pull/7664#discussion_r530550420", "createdAt": "2020-11-25T17:48:55Z", "author": {"login": "ejona86"}, "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/XdsHelloWorldClient.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.Channel;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.Grpc;\n+import io.grpc.InsecureChannelCredentials;\n+import io.grpc.ManagedChannel;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.xds.XdsChannelCredentials;\n+import java.util.Arrays;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * A simple xDS client that requests a greeting from {@code HelloWorldServer} or {@link\n+ * XdsHelloWorldServer}.\n+ */\n+public class XdsHelloWorldClient {\n+  private static final Logger logger = Logger.getLogger(XdsHelloWorldClient.class.getName());\n+\n+  private final GreeterGrpc.GreeterBlockingStub blockingStub;\n+\n+  /** Construct client for accessing HelloWorld server using the existing channel. */\n+  public XdsHelloWorldClient(Channel channel) {\n+    blockingStub = GreeterGrpc.newBlockingStub(channel);\n+  }\n+\n+  /** Say hello to server. */\n+  public void greet(String name) {\n+    logger.info(\"Will try to greet \" + name + \" ...\");\n+    HelloRequest request = HelloRequest.newBuilder().setName(name).build();\n+    HelloReply response;\n+    try {\n+      response = blockingStub.sayHello(request);\n+    } catch (StatusRuntimeException e) {\n+      logger.log(Level.WARNING, \"RPC failed: {0}\", e.getStatus());\n+      return;\n+    }\n+    logger.info(\"Greeting: \" + response.getMessage());\n+  }\n+\n+  /**\n+   * Greet server. If provided, the first element of {@code args} is the name to use in the\n+   * greeting. The second argument is the target server. A {@code --secure} flag is also accepted.\n+   */\n+  public static void main(String[] args) throws Exception {\n+    String user = \"xds world\";\n+    // The example defaults to the same behavior as the hello world example. To enable xDS, pass an\n+    // \"xds:\"-prefixed string as the target.\n+    String target = \"localhost:50051\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU0NjA3OQ=="}, "originalCommit": {"oid": "78a5782c9f56de7ed3adc68944afdc8cacebb582"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU2MzQ1Mg==", "bodyText": "If there was a better default (like an xds: string), I'd consider it, but I don't think there is a better default. But I think it really shows that \"the only thing that makes this xds is the target string.\" This is the current example behavior, and I think that is appropriate to keep.\n\nWhen --secure is used and target is omitted, the --secure flag has no meaning.\n\nNot really any different than its normal meaning. It has the meaning \"if xds provides security details use them, otherwise use the fallback.\" And here xds doesn't provide any security details.\n\nAlso when the target doesn't start with xds:/// also the flag has no meaning.\n\nThat was already the case. Why bring that up?\n\nIn theory the code can do these checks and issue warnings (or exit). Not suggesting we do it just for an example.", "url": "https://github.com/grpc/grpc-java/pull/7664#discussion_r530563452", "createdAt": "2020-11-25T18:13:15Z", "author": {"login": "sanjaypujare"}, "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/XdsHelloWorldClient.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.Channel;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.Grpc;\n+import io.grpc.InsecureChannelCredentials;\n+import io.grpc.ManagedChannel;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.xds.XdsChannelCredentials;\n+import java.util.Arrays;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * A simple xDS client that requests a greeting from {@code HelloWorldServer} or {@link\n+ * XdsHelloWorldServer}.\n+ */\n+public class XdsHelloWorldClient {\n+  private static final Logger logger = Logger.getLogger(XdsHelloWorldClient.class.getName());\n+\n+  private final GreeterGrpc.GreeterBlockingStub blockingStub;\n+\n+  /** Construct client for accessing HelloWorld server using the existing channel. */\n+  public XdsHelloWorldClient(Channel channel) {\n+    blockingStub = GreeterGrpc.newBlockingStub(channel);\n+  }\n+\n+  /** Say hello to server. */\n+  public void greet(String name) {\n+    logger.info(\"Will try to greet \" + name + \" ...\");\n+    HelloRequest request = HelloRequest.newBuilder().setName(name).build();\n+    HelloReply response;\n+    try {\n+      response = blockingStub.sayHello(request);\n+    } catch (StatusRuntimeException e) {\n+      logger.log(Level.WARNING, \"RPC failed: {0}\", e.getStatus());\n+      return;\n+    }\n+    logger.info(\"Greeting: \" + response.getMessage());\n+  }\n+\n+  /**\n+   * Greet server. If provided, the first element of {@code args} is the name to use in the\n+   * greeting. The second argument is the target server. A {@code --secure} flag is also accepted.\n+   */\n+  public static void main(String[] args) throws Exception {\n+    String user = \"xds world\";\n+    // The example defaults to the same behavior as the hello world example. To enable xDS, pass an\n+    // \"xds:\"-prefixed string as the target.\n+    String target = \"localhost:50051\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU0NjA3OQ=="}, "originalCommit": {"oid": "78a5782c9f56de7ed3adc68944afdc8cacebb582"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU2NjA2NQ==", "bodyText": "Ah, okay. I don't think we would want to issue a warning. Maybe just a \"notice.\" Using the xds credentials with a non-xds target isn't wrong; we purposefully allow it. But I do think that's a bit much for the example. The argument parsing is already an unfortunate amount of logic. And I don't want to encouraging any sort of \"hey! let's parse this target string!\" behavior from users. Instead, a comment is probably the cleaner approach, and I think one covers that detail already.", "url": "https://github.com/grpc/grpc-java/pull/7664#discussion_r530566065", "createdAt": "2020-11-25T18:18:26Z", "author": {"login": "ejona86"}, "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/XdsHelloWorldClient.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.Channel;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.Grpc;\n+import io.grpc.InsecureChannelCredentials;\n+import io.grpc.ManagedChannel;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.xds.XdsChannelCredentials;\n+import java.util.Arrays;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * A simple xDS client that requests a greeting from {@code HelloWorldServer} or {@link\n+ * XdsHelloWorldServer}.\n+ */\n+public class XdsHelloWorldClient {\n+  private static final Logger logger = Logger.getLogger(XdsHelloWorldClient.class.getName());\n+\n+  private final GreeterGrpc.GreeterBlockingStub blockingStub;\n+\n+  /** Construct client for accessing HelloWorld server using the existing channel. */\n+  public XdsHelloWorldClient(Channel channel) {\n+    blockingStub = GreeterGrpc.newBlockingStub(channel);\n+  }\n+\n+  /** Say hello to server. */\n+  public void greet(String name) {\n+    logger.info(\"Will try to greet \" + name + \" ...\");\n+    HelloRequest request = HelloRequest.newBuilder().setName(name).build();\n+    HelloReply response;\n+    try {\n+      response = blockingStub.sayHello(request);\n+    } catch (StatusRuntimeException e) {\n+      logger.log(Level.WARNING, \"RPC failed: {0}\", e.getStatus());\n+      return;\n+    }\n+    logger.info(\"Greeting: \" + response.getMessage());\n+  }\n+\n+  /**\n+   * Greet server. If provided, the first element of {@code args} is the name to use in the\n+   * greeting. The second argument is the target server. A {@code --secure} flag is also accepted.\n+   */\n+  public static void main(String[] args) throws Exception {\n+    String user = \"xds world\";\n+    // The example defaults to the same behavior as the hello world example. To enable xDS, pass an\n+    // \"xds:\"-prefixed string as the target.\n+    String target = \"localhost:50051\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU0NjA3OQ=="}, "originalCommit": {"oid": "78a5782c9f56de7ed3adc68944afdc8cacebb582"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzQ5MTE0OnYy", "diffSide": "RIGHT", "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/XdsHelloWorldClient.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzo0NDo1OVrOH5-GJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxODo1ODozM1rOH6AXiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU0ODI2MQ==", "bodyText": "nit: this can also be\ncredentials = XdsChannelCredentials.create(credentials);\n\nto reuse the previous InsecureChannelCredentials instance and may be more expressive?", "url": "https://github.com/grpc/grpc-java/pull/7664#discussion_r530548261", "createdAt": "2020-11-25T17:44:59Z", "author": {"login": "sanjaypujare"}, "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/XdsHelloWorldClient.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.Channel;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.Grpc;\n+import io.grpc.InsecureChannelCredentials;\n+import io.grpc.ManagedChannel;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.xds.XdsChannelCredentials;\n+import java.util.Arrays;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * A simple xDS client that requests a greeting from {@code HelloWorldServer} or {@link\n+ * XdsHelloWorldServer}.\n+ */\n+public class XdsHelloWorldClient {\n+  private static final Logger logger = Logger.getLogger(XdsHelloWorldClient.class.getName());\n+\n+  private final GreeterGrpc.GreeterBlockingStub blockingStub;\n+\n+  /** Construct client for accessing HelloWorld server using the existing channel. */\n+  public XdsHelloWorldClient(Channel channel) {\n+    blockingStub = GreeterGrpc.newBlockingStub(channel);\n+  }\n+\n+  /** Say hello to server. */\n+  public void greet(String name) {\n+    logger.info(\"Will try to greet \" + name + \" ...\");\n+    HelloRequest request = HelloRequest.newBuilder().setName(name).build();\n+    HelloReply response;\n+    try {\n+      response = blockingStub.sayHello(request);\n+    } catch (StatusRuntimeException e) {\n+      logger.log(Level.WARNING, \"RPC failed: {0}\", e.getStatus());\n+      return;\n+    }\n+    logger.info(\"Greeting: \" + response.getMessage());\n+  }\n+\n+  /**\n+   * Greet server. If provided, the first element of {@code args} is the name to use in the\n+   * greeting. The second argument is the target server. A {@code --secure} flag is also accepted.\n+   */\n+  public static void main(String[] args) throws Exception {\n+    String user = \"xds world\";\n+    // The example defaults to the same behavior as the hello world example. To enable xDS, pass an\n+    // \"xds:\"-prefixed string as the target.\n+    String target = \"localhost:50051\";\n+    ChannelCredentials credentials = InsecureChannelCredentials.create();\n+    if (args.length > 0) {\n+      if (\"--help\".equals(args[0])) {\n+        System.out.println(\"Usage: [--secure] [NAME [TARGET]]\\n\");\n+        System.err.println(\"  --secure  Use credentials provided by xDS. Defaults to insecure\");\n+        System.err.println(\"  NAME      The name you wish to be greeted by. Defaults to \" + user);\n+        System.err.println(\"  TARGET    The server to connect to. Defaults to \" + target);\n+        System.exit(1);\n+      } else if (\"--secure\".equals(args[0])) {\n+        // The xDS credentials use the security configured by the xDS server when available. When\n+        // xDS is not used or when xDS does not provide security configuration, the xDS credentials\n+        // fall back to other credentials (in this case, InsecureChannelCredentials).\n+        credentials = XdsChannelCredentials.create(InsecureChannelCredentials.create());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78a5782c9f56de7ed3adc68944afdc8cacebb582"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU1MTc0Ng==", "bodyText": "to reuse the previous InsecureChannelCredentials instance\n\nThat is an optimization that reduces readability. If creating insecure credentials was a pain, I'd consider for a different sort of clarity. But it is so trivial to create them, it is much more obvious what the value of credentials will be here without studying the data flow.\n\nmay be more expressive?\n\nIn what way? It seems to be just another indirection.", "url": "https://github.com/grpc/grpc-java/pull/7664#discussion_r530551746", "createdAt": "2020-11-25T17:51:09Z", "author": {"login": "ejona86"}, "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/XdsHelloWorldClient.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.Channel;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.Grpc;\n+import io.grpc.InsecureChannelCredentials;\n+import io.grpc.ManagedChannel;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.xds.XdsChannelCredentials;\n+import java.util.Arrays;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * A simple xDS client that requests a greeting from {@code HelloWorldServer} or {@link\n+ * XdsHelloWorldServer}.\n+ */\n+public class XdsHelloWorldClient {\n+  private static final Logger logger = Logger.getLogger(XdsHelloWorldClient.class.getName());\n+\n+  private final GreeterGrpc.GreeterBlockingStub blockingStub;\n+\n+  /** Construct client for accessing HelloWorld server using the existing channel. */\n+  public XdsHelloWorldClient(Channel channel) {\n+    blockingStub = GreeterGrpc.newBlockingStub(channel);\n+  }\n+\n+  /** Say hello to server. */\n+  public void greet(String name) {\n+    logger.info(\"Will try to greet \" + name + \" ...\");\n+    HelloRequest request = HelloRequest.newBuilder().setName(name).build();\n+    HelloReply response;\n+    try {\n+      response = blockingStub.sayHello(request);\n+    } catch (StatusRuntimeException e) {\n+      logger.log(Level.WARNING, \"RPC failed: {0}\", e.getStatus());\n+      return;\n+    }\n+    logger.info(\"Greeting: \" + response.getMessage());\n+  }\n+\n+  /**\n+   * Greet server. If provided, the first element of {@code args} is the name to use in the\n+   * greeting. The second argument is the target server. A {@code --secure} flag is also accepted.\n+   */\n+  public static void main(String[] args) throws Exception {\n+    String user = \"xds world\";\n+    // The example defaults to the same behavior as the hello world example. To enable xDS, pass an\n+    // \"xds:\"-prefixed string as the target.\n+    String target = \"localhost:50051\";\n+    ChannelCredentials credentials = InsecureChannelCredentials.create();\n+    if (args.length > 0) {\n+      if (\"--help\".equals(args[0])) {\n+        System.out.println(\"Usage: [--secure] [NAME [TARGET]]\\n\");\n+        System.err.println(\"  --secure  Use credentials provided by xDS. Defaults to insecure\");\n+        System.err.println(\"  NAME      The name you wish to be greeted by. Defaults to \" + user);\n+        System.err.println(\"  TARGET    The server to connect to. Defaults to \" + target);\n+        System.exit(1);\n+      } else if (\"--secure\".equals(args[0])) {\n+        // The xDS credentials use the security configured by the xDS server when available. When\n+        // xDS is not used or when xDS does not provide security configuration, the xDS credentials\n+        // fall back to other credentials (in this case, InsecureChannelCredentials).\n+        credentials = XdsChannelCredentials.create(InsecureChannelCredentials.create());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU0ODI2MQ=="}, "originalCommit": {"oid": "78a5782c9f56de7ed3adc68944afdc8cacebb582"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU1Njc3NA==", "bodyText": "may be more expressive?\n\nIn what way? It seems to be just another indirection.\n\nBasically XdsChannelCredentials.create() can accept any\u00a0ChannelCredentials as fallback creds. So imagine multiple ways to enter the block:\n{\n  ...\n  credentials = XdsChannelCredentials.create(credentials);\n  ...\n}\n\nand credentials could be either an InsecureChannelCredentials or a TlsChannelCredentials based on how it enters this block. So the above syntax expresses that possibility better than\nXdsChannelCredentials.create(InsecureChannelCredentials.create())\n\nBut this is a minor point and I am okay\u00a0with the current syntax too.", "url": "https://github.com/grpc/grpc-java/pull/7664#discussion_r530556774", "createdAt": "2020-11-25T18:00:11Z", "author": {"login": "sanjaypujare"}, "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/XdsHelloWorldClient.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.Channel;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.Grpc;\n+import io.grpc.InsecureChannelCredentials;\n+import io.grpc.ManagedChannel;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.xds.XdsChannelCredentials;\n+import java.util.Arrays;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * A simple xDS client that requests a greeting from {@code HelloWorldServer} or {@link\n+ * XdsHelloWorldServer}.\n+ */\n+public class XdsHelloWorldClient {\n+  private static final Logger logger = Logger.getLogger(XdsHelloWorldClient.class.getName());\n+\n+  private final GreeterGrpc.GreeterBlockingStub blockingStub;\n+\n+  /** Construct client for accessing HelloWorld server using the existing channel. */\n+  public XdsHelloWorldClient(Channel channel) {\n+    blockingStub = GreeterGrpc.newBlockingStub(channel);\n+  }\n+\n+  /** Say hello to server. */\n+  public void greet(String name) {\n+    logger.info(\"Will try to greet \" + name + \" ...\");\n+    HelloRequest request = HelloRequest.newBuilder().setName(name).build();\n+    HelloReply response;\n+    try {\n+      response = blockingStub.sayHello(request);\n+    } catch (StatusRuntimeException e) {\n+      logger.log(Level.WARNING, \"RPC failed: {0}\", e.getStatus());\n+      return;\n+    }\n+    logger.info(\"Greeting: \" + response.getMessage());\n+  }\n+\n+  /**\n+   * Greet server. If provided, the first element of {@code args} is the name to use in the\n+   * greeting. The second argument is the target server. A {@code --secure} flag is also accepted.\n+   */\n+  public static void main(String[] args) throws Exception {\n+    String user = \"xds world\";\n+    // The example defaults to the same behavior as the hello world example. To enable xDS, pass an\n+    // \"xds:\"-prefixed string as the target.\n+    String target = \"localhost:50051\";\n+    ChannelCredentials credentials = InsecureChannelCredentials.create();\n+    if (args.length > 0) {\n+      if (\"--help\".equals(args[0])) {\n+        System.out.println(\"Usage: [--secure] [NAME [TARGET]]\\n\");\n+        System.err.println(\"  --secure  Use credentials provided by xDS. Defaults to insecure\");\n+        System.err.println(\"  NAME      The name you wish to be greeted by. Defaults to \" + user);\n+        System.err.println(\"  TARGET    The server to connect to. Defaults to \" + target);\n+        System.exit(1);\n+      } else if (\"--secure\".equals(args[0])) {\n+        // The xDS credentials use the security configured by the xDS server when available. When\n+        // xDS is not used or when xDS does not provide security configuration, the xDS credentials\n+        // fall back to other credentials (in this case, InsecureChannelCredentials).\n+        credentials = XdsChannelCredentials.create(InsecureChannelCredentials.create());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU0ODI2MQ=="}, "originalCommit": {"oid": "78a5782c9f56de7ed3adc68944afdc8cacebb582"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU1OTg3Ng==", "bodyText": "Oh, I see. Well, it doesn't actually express that if only insecure is being passed. But I take the point. I think the comment explains this point fairly clearly. And I don't think we're too serious about believing that all that many people would take the effort to set up TLS and then have it be overridden by xDS.\nNote, I'm also a bit anxious about modifying credentials in a chaining way because the parsing could easily become a for loop, since we have flags now.", "url": "https://github.com/grpc/grpc-java/pull/7664#discussion_r530559876", "createdAt": "2020-11-25T18:06:16Z", "author": {"login": "ejona86"}, "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/XdsHelloWorldClient.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.Channel;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.Grpc;\n+import io.grpc.InsecureChannelCredentials;\n+import io.grpc.ManagedChannel;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.xds.XdsChannelCredentials;\n+import java.util.Arrays;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * A simple xDS client that requests a greeting from {@code HelloWorldServer} or {@link\n+ * XdsHelloWorldServer}.\n+ */\n+public class XdsHelloWorldClient {\n+  private static final Logger logger = Logger.getLogger(XdsHelloWorldClient.class.getName());\n+\n+  private final GreeterGrpc.GreeterBlockingStub blockingStub;\n+\n+  /** Construct client for accessing HelloWorld server using the existing channel. */\n+  public XdsHelloWorldClient(Channel channel) {\n+    blockingStub = GreeterGrpc.newBlockingStub(channel);\n+  }\n+\n+  /** Say hello to server. */\n+  public void greet(String name) {\n+    logger.info(\"Will try to greet \" + name + \" ...\");\n+    HelloRequest request = HelloRequest.newBuilder().setName(name).build();\n+    HelloReply response;\n+    try {\n+      response = blockingStub.sayHello(request);\n+    } catch (StatusRuntimeException e) {\n+      logger.log(Level.WARNING, \"RPC failed: {0}\", e.getStatus());\n+      return;\n+    }\n+    logger.info(\"Greeting: \" + response.getMessage());\n+  }\n+\n+  /**\n+   * Greet server. If provided, the first element of {@code args} is the name to use in the\n+   * greeting. The second argument is the target server. A {@code --secure} flag is also accepted.\n+   */\n+  public static void main(String[] args) throws Exception {\n+    String user = \"xds world\";\n+    // The example defaults to the same behavior as the hello world example. To enable xDS, pass an\n+    // \"xds:\"-prefixed string as the target.\n+    String target = \"localhost:50051\";\n+    ChannelCredentials credentials = InsecureChannelCredentials.create();\n+    if (args.length > 0) {\n+      if (\"--help\".equals(args[0])) {\n+        System.out.println(\"Usage: [--secure] [NAME [TARGET]]\\n\");\n+        System.err.println(\"  --secure  Use credentials provided by xDS. Defaults to insecure\");\n+        System.err.println(\"  NAME      The name you wish to be greeted by. Defaults to \" + user);\n+        System.err.println(\"  TARGET    The server to connect to. Defaults to \" + target);\n+        System.exit(1);\n+      } else if (\"--secure\".equals(args[0])) {\n+        // The xDS credentials use the security configured by the xDS server when available. When\n+        // xDS is not used or when xDS does not provide security configuration, the xDS credentials\n+        // fall back to other credentials (in this case, InsecureChannelCredentials).\n+        credentials = XdsChannelCredentials.create(InsecureChannelCredentials.create());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU0ODI2MQ=="}, "originalCommit": {"oid": "78a5782c9f56de7ed3adc68944afdc8cacebb582"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU2NjY0MA==", "bodyText": "... And I don't think we're too serious about believing that all that many people would take the effort to set up TLS and then have it be overridden by xDS.\n\nHmmm. So are you saying the most common fallback credentials would be InsecureChannelCredentials? I thought there are folks who don't want a plaintext channel at any cost so don't want to use InsecureChannelCredentials. Even if their own TlsChannelCredentials end up not working they can be assured that the communication will not fall back to plaintext willy nilly (also there is no FailingCredentials).\n\nNote, I'm also a bit anxious about modifying credentials in a chaining way because the parsing could easily become a for loop, since we have flags now.\n\nThat's a good point. In any case my original suggestion was a minor point.", "url": "https://github.com/grpc/grpc-java/pull/7664#discussion_r530566640", "createdAt": "2020-11-25T18:19:35Z", "author": {"login": "sanjaypujare"}, "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/XdsHelloWorldClient.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.Channel;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.Grpc;\n+import io.grpc.InsecureChannelCredentials;\n+import io.grpc.ManagedChannel;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.xds.XdsChannelCredentials;\n+import java.util.Arrays;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * A simple xDS client that requests a greeting from {@code HelloWorldServer} or {@link\n+ * XdsHelloWorldServer}.\n+ */\n+public class XdsHelloWorldClient {\n+  private static final Logger logger = Logger.getLogger(XdsHelloWorldClient.class.getName());\n+\n+  private final GreeterGrpc.GreeterBlockingStub blockingStub;\n+\n+  /** Construct client for accessing HelloWorld server using the existing channel. */\n+  public XdsHelloWorldClient(Channel channel) {\n+    blockingStub = GreeterGrpc.newBlockingStub(channel);\n+  }\n+\n+  /** Say hello to server. */\n+  public void greet(String name) {\n+    logger.info(\"Will try to greet \" + name + \" ...\");\n+    HelloRequest request = HelloRequest.newBuilder().setName(name).build();\n+    HelloReply response;\n+    try {\n+      response = blockingStub.sayHello(request);\n+    } catch (StatusRuntimeException e) {\n+      logger.log(Level.WARNING, \"RPC failed: {0}\", e.getStatus());\n+      return;\n+    }\n+    logger.info(\"Greeting: \" + response.getMessage());\n+  }\n+\n+  /**\n+   * Greet server. If provided, the first element of {@code args} is the name to use in the\n+   * greeting. The second argument is the target server. A {@code --secure} flag is also accepted.\n+   */\n+  public static void main(String[] args) throws Exception {\n+    String user = \"xds world\";\n+    // The example defaults to the same behavior as the hello world example. To enable xDS, pass an\n+    // \"xds:\"-prefixed string as the target.\n+    String target = \"localhost:50051\";\n+    ChannelCredentials credentials = InsecureChannelCredentials.create();\n+    if (args.length > 0) {\n+      if (\"--help\".equals(args[0])) {\n+        System.out.println(\"Usage: [--secure] [NAME [TARGET]]\\n\");\n+        System.err.println(\"  --secure  Use credentials provided by xDS. Defaults to insecure\");\n+        System.err.println(\"  NAME      The name you wish to be greeted by. Defaults to \" + user);\n+        System.err.println(\"  TARGET    The server to connect to. Defaults to \" + target);\n+        System.exit(1);\n+      } else if (\"--secure\".equals(args[0])) {\n+        // The xDS credentials use the security configured by the xDS server when available. When\n+        // xDS is not used or when xDS does not provide security configuration, the xDS credentials\n+        // fall back to other credentials (in this case, InsecureChannelCredentials).\n+        credentials = XdsChannelCredentials.create(InsecureChannelCredentials.create());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU0ODI2MQ=="}, "originalCommit": {"oid": "78a5782c9f56de7ed3adc68944afdc8cacebb582"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU2OTg1OQ==", "bodyText": "I thought there are folks who don't want a plaintext channel at any cost so don't want to use InsecureChannelCredentials?\n\nYou mention FailingCredentials later but still ask this question. FailingCredentials is the answer to this question. Yes, they don't exist. It missing doesn't mean users are more likely to use TLS credentials.", "url": "https://github.com/grpc/grpc-java/pull/7664#discussion_r530569859", "createdAt": "2020-11-25T18:26:09Z", "author": {"login": "ejona86"}, "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/XdsHelloWorldClient.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.Channel;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.Grpc;\n+import io.grpc.InsecureChannelCredentials;\n+import io.grpc.ManagedChannel;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.xds.XdsChannelCredentials;\n+import java.util.Arrays;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * A simple xDS client that requests a greeting from {@code HelloWorldServer} or {@link\n+ * XdsHelloWorldServer}.\n+ */\n+public class XdsHelloWorldClient {\n+  private static final Logger logger = Logger.getLogger(XdsHelloWorldClient.class.getName());\n+\n+  private final GreeterGrpc.GreeterBlockingStub blockingStub;\n+\n+  /** Construct client for accessing HelloWorld server using the existing channel. */\n+  public XdsHelloWorldClient(Channel channel) {\n+    blockingStub = GreeterGrpc.newBlockingStub(channel);\n+  }\n+\n+  /** Say hello to server. */\n+  public void greet(String name) {\n+    logger.info(\"Will try to greet \" + name + \" ...\");\n+    HelloRequest request = HelloRequest.newBuilder().setName(name).build();\n+    HelloReply response;\n+    try {\n+      response = blockingStub.sayHello(request);\n+    } catch (StatusRuntimeException e) {\n+      logger.log(Level.WARNING, \"RPC failed: {0}\", e.getStatus());\n+      return;\n+    }\n+    logger.info(\"Greeting: \" + response.getMessage());\n+  }\n+\n+  /**\n+   * Greet server. If provided, the first element of {@code args} is the name to use in the\n+   * greeting. The second argument is the target server. A {@code --secure} flag is also accepted.\n+   */\n+  public static void main(String[] args) throws Exception {\n+    String user = \"xds world\";\n+    // The example defaults to the same behavior as the hello world example. To enable xDS, pass an\n+    // \"xds:\"-prefixed string as the target.\n+    String target = \"localhost:50051\";\n+    ChannelCredentials credentials = InsecureChannelCredentials.create();\n+    if (args.length > 0) {\n+      if (\"--help\".equals(args[0])) {\n+        System.out.println(\"Usage: [--secure] [NAME [TARGET]]\\n\");\n+        System.err.println(\"  --secure  Use credentials provided by xDS. Defaults to insecure\");\n+        System.err.println(\"  NAME      The name you wish to be greeted by. Defaults to \" + user);\n+        System.err.println(\"  TARGET    The server to connect to. Defaults to \" + target);\n+        System.exit(1);\n+      } else if (\"--secure\".equals(args[0])) {\n+        // The xDS credentials use the security configured by the xDS server when available. When\n+        // xDS is not used or when xDS does not provide security configuration, the xDS credentials\n+        // fall back to other credentials (in this case, InsecureChannelCredentials).\n+        credentials = XdsChannelCredentials.create(InsecureChannelCredentials.create());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU0ODI2MQ=="}, "originalCommit": {"oid": "78a5782c9f56de7ed3adc68944afdc8cacebb582"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU4NTQ4MA==", "bodyText": "Although the discussion about InsecureCreds TlsCreds and FailingCreds is important, it is not relevant to this particular comment so I am going to resolve it", "url": "https://github.com/grpc/grpc-java/pull/7664#discussion_r530585480", "createdAt": "2020-11-25T18:58:33Z", "author": {"login": "sanjaypujare"}, "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/XdsHelloWorldClient.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.Channel;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.Grpc;\n+import io.grpc.InsecureChannelCredentials;\n+import io.grpc.ManagedChannel;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.xds.XdsChannelCredentials;\n+import java.util.Arrays;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * A simple xDS client that requests a greeting from {@code HelloWorldServer} or {@link\n+ * XdsHelloWorldServer}.\n+ */\n+public class XdsHelloWorldClient {\n+  private static final Logger logger = Logger.getLogger(XdsHelloWorldClient.class.getName());\n+\n+  private final GreeterGrpc.GreeterBlockingStub blockingStub;\n+\n+  /** Construct client for accessing HelloWorld server using the existing channel. */\n+  public XdsHelloWorldClient(Channel channel) {\n+    blockingStub = GreeterGrpc.newBlockingStub(channel);\n+  }\n+\n+  /** Say hello to server. */\n+  public void greet(String name) {\n+    logger.info(\"Will try to greet \" + name + \" ...\");\n+    HelloRequest request = HelloRequest.newBuilder().setName(name).build();\n+    HelloReply response;\n+    try {\n+      response = blockingStub.sayHello(request);\n+    } catch (StatusRuntimeException e) {\n+      logger.log(Level.WARNING, \"RPC failed: {0}\", e.getStatus());\n+      return;\n+    }\n+    logger.info(\"Greeting: \" + response.getMessage());\n+  }\n+\n+  /**\n+   * Greet server. If provided, the first element of {@code args} is the name to use in the\n+   * greeting. The second argument is the target server. A {@code --secure} flag is also accepted.\n+   */\n+  public static void main(String[] args) throws Exception {\n+    String user = \"xds world\";\n+    // The example defaults to the same behavior as the hello world example. To enable xDS, pass an\n+    // \"xds:\"-prefixed string as the target.\n+    String target = \"localhost:50051\";\n+    ChannelCredentials credentials = InsecureChannelCredentials.create();\n+    if (args.length > 0) {\n+      if (\"--help\".equals(args[0])) {\n+        System.out.println(\"Usage: [--secure] [NAME [TARGET]]\\n\");\n+        System.err.println(\"  --secure  Use credentials provided by xDS. Defaults to insecure\");\n+        System.err.println(\"  NAME      The name you wish to be greeted by. Defaults to \" + user);\n+        System.err.println(\"  TARGET    The server to connect to. Defaults to \" + target);\n+        System.exit(1);\n+      } else if (\"--secure\".equals(args[0])) {\n+        // The xDS credentials use the security configured by the xDS server when available. When\n+        // xDS is not used or when xDS does not provide security configuration, the xDS credentials\n+        // fall back to other credentials (in this case, InsecureChannelCredentials).\n+        credentials = XdsChannelCredentials.create(InsecureChannelCredentials.create());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU0ODI2MQ=="}, "originalCommit": {"oid": "78a5782c9f56de7ed3adc68944afdc8cacebb582"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzU2NzkxOnYy", "diffSide": "RIGHT", "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/XdsHelloWorldClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxODowNzowNlrOH5-1Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxODoxMToxMlrOH5-9ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU2MDMwNw==", "bodyText": "Would you consider an enhancement to do this in a loop, so the client creates one channel but sends multiple RPCs on it? Could be useful in the xDS case with multiple backends etc. The loop count could be another argument.\nIt doesn't have to be in this PR but may be in future.", "url": "https://github.com/grpc/grpc-java/pull/7664#discussion_r530560307", "createdAt": "2020-11-25T18:07:06Z", "author": {"login": "sanjaypujare"}, "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/XdsHelloWorldClient.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.Channel;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.Grpc;\n+import io.grpc.InsecureChannelCredentials;\n+import io.grpc.ManagedChannel;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.xds.XdsChannelCredentials;\n+import java.util.Arrays;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * A simple xDS client that requests a greeting from {@code HelloWorldServer} or {@link\n+ * XdsHelloWorldServer}.\n+ */\n+public class XdsHelloWorldClient {\n+  private static final Logger logger = Logger.getLogger(XdsHelloWorldClient.class.getName());\n+\n+  private final GreeterGrpc.GreeterBlockingStub blockingStub;\n+\n+  /** Construct client for accessing HelloWorld server using the existing channel. */\n+  public XdsHelloWorldClient(Channel channel) {\n+    blockingStub = GreeterGrpc.newBlockingStub(channel);\n+  }\n+\n+  /** Say hello to server. */\n+  public void greet(String name) {\n+    logger.info(\"Will try to greet \" + name + \" ...\");\n+    HelloRequest request = HelloRequest.newBuilder().setName(name).build();\n+    HelloReply response;\n+    try {\n+      response = blockingStub.sayHello(request);\n+    } catch (StatusRuntimeException e) {\n+      logger.log(Level.WARNING, \"RPC failed: {0}\", e.getStatus());\n+      return;\n+    }\n+    logger.info(\"Greeting: \" + response.getMessage());\n+  }\n+\n+  /**\n+   * Greet server. If provided, the first element of {@code args} is the name to use in the\n+   * greeting. The second argument is the target server. A {@code --secure} flag is also accepted.\n+   */\n+  public static void main(String[] args) throws Exception {\n+    String user = \"xds world\";\n+    // The example defaults to the same behavior as the hello world example. To enable xDS, pass an\n+    // \"xds:\"-prefixed string as the target.\n+    String target = \"localhost:50051\";\n+    ChannelCredentials credentials = InsecureChannelCredentials.create();\n+    if (args.length > 0) {\n+      if (\"--help\".equals(args[0])) {\n+        System.out.println(\"Usage: [--secure] [NAME [TARGET]]\\n\");\n+        System.err.println(\"  --secure  Use credentials provided by xDS. Defaults to insecure\");\n+        System.err.println(\"  NAME      The name you wish to be greeted by. Defaults to \" + user);\n+        System.err.println(\"  TARGET    The server to connect to. Defaults to \" + target);\n+        System.exit(1);\n+      } else if (\"--secure\".equals(args[0])) {\n+        // The xDS credentials use the security configured by the xDS server when available. When\n+        // xDS is not used or when xDS does not provide security configuration, the xDS credentials\n+        // fall back to other credentials (in this case, InsecureChannelCredentials).\n+        credentials = XdsChannelCredentials.create(InsecureChannelCredentials.create());\n+        args = Arrays.copyOfRange(args, 1, args.length);\n+      }\n+    }\n+    if (args.length > 0) {\n+      user = args[0];\n+    }\n+    if (args.length > 1) {\n+      target = args[1];\n+    }\n+\n+    // This uses the new ChannelCredentials API. Grpc.newChannelBuilder() is the same as\n+    // ManagedChannelBuilder.forTarget(), except that it is passed credentials. When using this API,\n+    // you don't use methods like `managedChannelBuilder.usePlaintext()`, as that configuration is\n+    // provided by the ChannelCredentials.\n+    ManagedChannel channel = Grpc.newChannelBuilder(target, credentials)\n+        .build();\n+    try {\n+      XdsHelloWorldClient client = new XdsHelloWorldClient(channel);\n+      client.greet(user);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78a5782c9f56de7ed3adc68944afdc8cacebb582"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU2MjQwNA==", "bodyText": "I don't think we want to do that in hello world; it's supposed to be super-basic. There was work on another example, I think grpc coin, that would let you see load balancing working. For hello world, I think we'd just tell users to execute it more than once and see they get multiple backends. Yes, that doesn't show you get multiple backends with one channel, but if a user really cares they can just duplicate this line; hello world is intended to be super-easy to understand and edit so that users can toy with it in ways like that.", "url": "https://github.com/grpc/grpc-java/pull/7664#discussion_r530562404", "createdAt": "2020-11-25T18:11:12Z", "author": {"login": "ejona86"}, "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/XdsHelloWorldClient.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.Channel;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.Grpc;\n+import io.grpc.InsecureChannelCredentials;\n+import io.grpc.ManagedChannel;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.xds.XdsChannelCredentials;\n+import java.util.Arrays;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * A simple xDS client that requests a greeting from {@code HelloWorldServer} or {@link\n+ * XdsHelloWorldServer}.\n+ */\n+public class XdsHelloWorldClient {\n+  private static final Logger logger = Logger.getLogger(XdsHelloWorldClient.class.getName());\n+\n+  private final GreeterGrpc.GreeterBlockingStub blockingStub;\n+\n+  /** Construct client for accessing HelloWorld server using the existing channel. */\n+  public XdsHelloWorldClient(Channel channel) {\n+    blockingStub = GreeterGrpc.newBlockingStub(channel);\n+  }\n+\n+  /** Say hello to server. */\n+  public void greet(String name) {\n+    logger.info(\"Will try to greet \" + name + \" ...\");\n+    HelloRequest request = HelloRequest.newBuilder().setName(name).build();\n+    HelloReply response;\n+    try {\n+      response = blockingStub.sayHello(request);\n+    } catch (StatusRuntimeException e) {\n+      logger.log(Level.WARNING, \"RPC failed: {0}\", e.getStatus());\n+      return;\n+    }\n+    logger.info(\"Greeting: \" + response.getMessage());\n+  }\n+\n+  /**\n+   * Greet server. If provided, the first element of {@code args} is the name to use in the\n+   * greeting. The second argument is the target server. A {@code --secure} flag is also accepted.\n+   */\n+  public static void main(String[] args) throws Exception {\n+    String user = \"xds world\";\n+    // The example defaults to the same behavior as the hello world example. To enable xDS, pass an\n+    // \"xds:\"-prefixed string as the target.\n+    String target = \"localhost:50051\";\n+    ChannelCredentials credentials = InsecureChannelCredentials.create();\n+    if (args.length > 0) {\n+      if (\"--help\".equals(args[0])) {\n+        System.out.println(\"Usage: [--secure] [NAME [TARGET]]\\n\");\n+        System.err.println(\"  --secure  Use credentials provided by xDS. Defaults to insecure\");\n+        System.err.println(\"  NAME      The name you wish to be greeted by. Defaults to \" + user);\n+        System.err.println(\"  TARGET    The server to connect to. Defaults to \" + target);\n+        System.exit(1);\n+      } else if (\"--secure\".equals(args[0])) {\n+        // The xDS credentials use the security configured by the xDS server when available. When\n+        // xDS is not used or when xDS does not provide security configuration, the xDS credentials\n+        // fall back to other credentials (in this case, InsecureChannelCredentials).\n+        credentials = XdsChannelCredentials.create(InsecureChannelCredentials.create());\n+        args = Arrays.copyOfRange(args, 1, args.length);\n+      }\n+    }\n+    if (args.length > 0) {\n+      user = args[0];\n+    }\n+    if (args.length > 1) {\n+      target = args[1];\n+    }\n+\n+    // This uses the new ChannelCredentials API. Grpc.newChannelBuilder() is the same as\n+    // ManagedChannelBuilder.forTarget(), except that it is passed credentials. When using this API,\n+    // you don't use methods like `managedChannelBuilder.usePlaintext()`, as that configuration is\n+    // provided by the ChannelCredentials.\n+    ManagedChannel channel = Grpc.newChannelBuilder(target, credentials)\n+        .build();\n+    try {\n+      XdsHelloWorldClient client = new XdsHelloWorldClient(channel);\n+      client.greet(user);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU2MDMwNw=="}, "originalCommit": {"oid": "78a5782c9f56de7ed3adc68944afdc8cacebb582"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzY0MzA5OnYy", "diffSide": "RIGHT", "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/XdsHelloWorldServer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxODozMDozMlrOH5_i7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxODo1Mzo0NFrOH6AOeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU3MjAxNA==", "bodyText": "Do we have to use XdsServerBuilder here? Without xDS configuration for this server/port the server won't start.", "url": "https://github.com/grpc/grpc-java/pull/7664#discussion_r530572014", "createdAt": "2020-11-25T18:30:32Z", "author": {"login": "sanjaypujare"}, "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/XdsHelloWorldServer.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.InsecureServerCredentials;\n+import io.grpc.Server;\n+import io.grpc.ServerCredentials;\n+import io.grpc.health.v1.HealthCheckResponse.ServingStatus;\n+import io.grpc.protobuf.services.ProtoReflectionService;\n+import io.grpc.services.HealthStatusManager;\n+import io.grpc.xds.XdsServerBuilder;\n+import io.grpc.xds.XdsServerCredentials;\n+import java.util.Arrays;\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * An xDS-managed Server for the {@code Greeter} service.\n+ */\n+public class XdsHelloWorldServer {\n+  public static void main(String[] args) throws IOException, InterruptedException {\n+    int port = 50051;\n+    String hostname = null;\n+    ServerCredentials credentials = InsecureServerCredentials.create();\n+    if (args.length >= 1 && \"--secure\".equals(args[0])) {\n+      // The xDS credentials use the security configured by the xDS server when available. When xDS\n+      // is not used or when xDS does not provide security configuration, the xDS credentials fall\n+      // back to other credentials (in this case, InsecureServerCredentials).\n+      credentials = XdsServerCredentials.create(InsecureServerCredentials.create());\n+      args = Arrays.copyOfRange(args, 1, args.length);\n+    }\n+    if (args.length >= 1) {\n+      try {\n+        port = Integer.parseInt(args[0]);\n+      } catch (NumberFormatException ex) {\n+        System.err.println(\"Usage: [--secure] [PORT [HOSTNAME]]\");\n+        System.err.println(\"\");\n+        System.err.println(\"  --secure  Use credentials provided by xDS. Defaults to insecure\");\n+        System.err.println(\"  PORT      The listen port. Defaults to \" + port);\n+        System.err.println(\"  HOSTNAME  The name clients will see in greet responses. \");\n+        System.err.println(\"            Defaults to the machine's hostname\");\n+        System.exit(1);\n+      }\n+    }\n+    if (args.length >= 2) {\n+      hostname = args[1];\n+    }\n+    // Since the main server may be using TLS, we start a second server just for plaintext health\n+    // checks\n+    int healthPort = port + 1;\n+    final HealthStatusManager health = new HealthStatusManager();\n+    final Server server = XdsServerBuilder.forPort(port, credentials)\n+        .addService(new HostnameGreeter(hostname))\n+        .addService(ProtoReflectionService.newInstance()) // convenient for command line tools\n+        .addService(health.getHealthService()) // allow management servers to monitor health\n+        .build()\n+        .start();\n+    final Server healthServer =\n+        XdsServerBuilder.forPort(healthPort, InsecureServerCredentials.create())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78a5782c9f56de7ed3adc68944afdc8cacebb582"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU3NDI5MA==", "bodyText": "I think we'd expect the management server to provide (default) configuration, for things like (IP?) access control and rate limiting, or at least logging and stats. If we are concerned about the basic non-xdscred case, we could only spin up the second server when xdscreds are used. But that doesn't seem right. We may need to discuss about this more.", "url": "https://github.com/grpc/grpc-java/pull/7664#discussion_r530574290", "createdAt": "2020-11-25T18:35:18Z", "author": {"login": "ejona86"}, "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/XdsHelloWorldServer.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.InsecureServerCredentials;\n+import io.grpc.Server;\n+import io.grpc.ServerCredentials;\n+import io.grpc.health.v1.HealthCheckResponse.ServingStatus;\n+import io.grpc.protobuf.services.ProtoReflectionService;\n+import io.grpc.services.HealthStatusManager;\n+import io.grpc.xds.XdsServerBuilder;\n+import io.grpc.xds.XdsServerCredentials;\n+import java.util.Arrays;\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * An xDS-managed Server for the {@code Greeter} service.\n+ */\n+public class XdsHelloWorldServer {\n+  public static void main(String[] args) throws IOException, InterruptedException {\n+    int port = 50051;\n+    String hostname = null;\n+    ServerCredentials credentials = InsecureServerCredentials.create();\n+    if (args.length >= 1 && \"--secure\".equals(args[0])) {\n+      // The xDS credentials use the security configured by the xDS server when available. When xDS\n+      // is not used or when xDS does not provide security configuration, the xDS credentials fall\n+      // back to other credentials (in this case, InsecureServerCredentials).\n+      credentials = XdsServerCredentials.create(InsecureServerCredentials.create());\n+      args = Arrays.copyOfRange(args, 1, args.length);\n+    }\n+    if (args.length >= 1) {\n+      try {\n+        port = Integer.parseInt(args[0]);\n+      } catch (NumberFormatException ex) {\n+        System.err.println(\"Usage: [--secure] [PORT [HOSTNAME]]\");\n+        System.err.println(\"\");\n+        System.err.println(\"  --secure  Use credentials provided by xDS. Defaults to insecure\");\n+        System.err.println(\"  PORT      The listen port. Defaults to \" + port);\n+        System.err.println(\"  HOSTNAME  The name clients will see in greet responses. \");\n+        System.err.println(\"            Defaults to the machine's hostname\");\n+        System.exit(1);\n+      }\n+    }\n+    if (args.length >= 2) {\n+      hostname = args[1];\n+    }\n+    // Since the main server may be using TLS, we start a second server just for plaintext health\n+    // checks\n+    int healthPort = port + 1;\n+    final HealthStatusManager health = new HealthStatusManager();\n+    final Server server = XdsServerBuilder.forPort(port, credentials)\n+        .addService(new HostnameGreeter(hostname))\n+        .addService(ProtoReflectionService.newInstance()) // convenient for command line tools\n+        .addService(health.getHealthService()) // allow management servers to monitor health\n+        .build()\n+        .start();\n+    final Server healthServer =\n+        XdsServerBuilder.forPort(healthPort, InsecureServerCredentials.create())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU3MjAxNA=="}, "originalCommit": {"oid": "78a5782c9f56de7ed3adc68944afdc8cacebb582"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU3ODEwNg==", "bodyText": "Hmmm, I didn't realize the management server will provide default configuration when the service (i.e. the port etc) is not configured (even if security is not required). Let me find out about the one management server (TD) we typically test with.", "url": "https://github.com/grpc/grpc-java/pull/7664#discussion_r530578106", "createdAt": "2020-11-25T18:43:12Z", "author": {"login": "sanjaypujare"}, "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/XdsHelloWorldServer.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.InsecureServerCredentials;\n+import io.grpc.Server;\n+import io.grpc.ServerCredentials;\n+import io.grpc.health.v1.HealthCheckResponse.ServingStatus;\n+import io.grpc.protobuf.services.ProtoReflectionService;\n+import io.grpc.services.HealthStatusManager;\n+import io.grpc.xds.XdsServerBuilder;\n+import io.grpc.xds.XdsServerCredentials;\n+import java.util.Arrays;\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * An xDS-managed Server for the {@code Greeter} service.\n+ */\n+public class XdsHelloWorldServer {\n+  public static void main(String[] args) throws IOException, InterruptedException {\n+    int port = 50051;\n+    String hostname = null;\n+    ServerCredentials credentials = InsecureServerCredentials.create();\n+    if (args.length >= 1 && \"--secure\".equals(args[0])) {\n+      // The xDS credentials use the security configured by the xDS server when available. When xDS\n+      // is not used or when xDS does not provide security configuration, the xDS credentials fall\n+      // back to other credentials (in this case, InsecureServerCredentials).\n+      credentials = XdsServerCredentials.create(InsecureServerCredentials.create());\n+      args = Arrays.copyOfRange(args, 1, args.length);\n+    }\n+    if (args.length >= 1) {\n+      try {\n+        port = Integer.parseInt(args[0]);\n+      } catch (NumberFormatException ex) {\n+        System.err.println(\"Usage: [--secure] [PORT [HOSTNAME]]\");\n+        System.err.println(\"\");\n+        System.err.println(\"  --secure  Use credentials provided by xDS. Defaults to insecure\");\n+        System.err.println(\"  PORT      The listen port. Defaults to \" + port);\n+        System.err.println(\"  HOSTNAME  The name clients will see in greet responses. \");\n+        System.err.println(\"            Defaults to the machine's hostname\");\n+        System.exit(1);\n+      }\n+    }\n+    if (args.length >= 2) {\n+      hostname = args[1];\n+    }\n+    // Since the main server may be using TLS, we start a second server just for plaintext health\n+    // checks\n+    int healthPort = port + 1;\n+    final HealthStatusManager health = new HealthStatusManager();\n+    final Server server = XdsServerBuilder.forPort(port, credentials)\n+        .addService(new HostnameGreeter(hostname))\n+        .addService(ProtoReflectionService.newInstance()) // convenient for command line tools\n+        .addService(health.getHealthService()) // allow management servers to monitor health\n+        .build()\n+        .start();\n+    final Server healthServer =\n+        XdsServerBuilder.forPort(healthPort, InsecureServerCredentials.create())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU3MjAxNA=="}, "originalCommit": {"oid": "78a5782c9f56de7ed3adc68944afdc8cacebb582"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU4MzE2Mg==", "bodyText": "Okay so TD apparently will return a default listener so that's good.", "url": "https://github.com/grpc/grpc-java/pull/7664#discussion_r530583162", "createdAt": "2020-11-25T18:53:44Z", "author": {"login": "sanjaypujare"}, "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/XdsHelloWorldServer.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.InsecureServerCredentials;\n+import io.grpc.Server;\n+import io.grpc.ServerCredentials;\n+import io.grpc.health.v1.HealthCheckResponse.ServingStatus;\n+import io.grpc.protobuf.services.ProtoReflectionService;\n+import io.grpc.services.HealthStatusManager;\n+import io.grpc.xds.XdsServerBuilder;\n+import io.grpc.xds.XdsServerCredentials;\n+import java.util.Arrays;\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * An xDS-managed Server for the {@code Greeter} service.\n+ */\n+public class XdsHelloWorldServer {\n+  public static void main(String[] args) throws IOException, InterruptedException {\n+    int port = 50051;\n+    String hostname = null;\n+    ServerCredentials credentials = InsecureServerCredentials.create();\n+    if (args.length >= 1 && \"--secure\".equals(args[0])) {\n+      // The xDS credentials use the security configured by the xDS server when available. When xDS\n+      // is not used or when xDS does not provide security configuration, the xDS credentials fall\n+      // back to other credentials (in this case, InsecureServerCredentials).\n+      credentials = XdsServerCredentials.create(InsecureServerCredentials.create());\n+      args = Arrays.copyOfRange(args, 1, args.length);\n+    }\n+    if (args.length >= 1) {\n+      try {\n+        port = Integer.parseInt(args[0]);\n+      } catch (NumberFormatException ex) {\n+        System.err.println(\"Usage: [--secure] [PORT [HOSTNAME]]\");\n+        System.err.println(\"\");\n+        System.err.println(\"  --secure  Use credentials provided by xDS. Defaults to insecure\");\n+        System.err.println(\"  PORT      The listen port. Defaults to \" + port);\n+        System.err.println(\"  HOSTNAME  The name clients will see in greet responses. \");\n+        System.err.println(\"            Defaults to the machine's hostname\");\n+        System.exit(1);\n+      }\n+    }\n+    if (args.length >= 2) {\n+      hostname = args[1];\n+    }\n+    // Since the main server may be using TLS, we start a second server just for plaintext health\n+    // checks\n+    int healthPort = port + 1;\n+    final HealthStatusManager health = new HealthStatusManager();\n+    final Server server = XdsServerBuilder.forPort(port, credentials)\n+        .addService(new HostnameGreeter(hostname))\n+        .addService(ProtoReflectionService.newInstance()) // convenient for command line tools\n+        .addService(health.getHealthService()) // allow management servers to monitor health\n+        .build()\n+        .start();\n+    final Server healthServer =\n+        XdsServerBuilder.forPort(healthPort, InsecureServerCredentials.create())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU3MjAxNA=="}, "originalCommit": {"oid": "78a5782c9f56de7ed3adc68944afdc8cacebb582"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2320, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}