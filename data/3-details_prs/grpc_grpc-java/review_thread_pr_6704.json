{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0NjI3NDM2", "number": 6704, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxOTozMjoyOFrODfrBCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMTowNTowOFrODj_avA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTM3MjI1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/grpc/NameResolver.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxOTozMjoyOFrOFpg15w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzozOTo1MlrOFv9Ptg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA3NDAyMw==", "bodyText": "This should be in GrpcAttributes.java", "url": "https://github.com/grpc/grpc-java/pull/6704#discussion_r379074023", "createdAt": "2020-02-13T19:32:28Z", "author": {"login": "voidzcy"}, "path": "api/src/main/java/io/grpc/NameResolver.java", "diffHunk": "@@ -350,6 +350,11 @@ public final void onAddresses(\n   @Documented\n   public @interface ResolutionResultAttr {}\n \n+  @Internal\n+  @ResolutionResultAttr\n+  public static final Attributes.Key<Map<String, ?>> RESOLUTION_RESULT_ATTR_HEALTH_CHECKING_CONFIG =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "900369e741c979ed1eb9d71b791bf98946227f41"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA3ODU0OA==", "bodyText": "in current world yes, but the Attributes is actually API not an implementation of io.grpc.api (core). for example, if user depends on io.grpc.services 1.n.x, io.grpc.api 1.n.x and io.grpc.core 1.(n-1).x. it won't work. because, we are using the attributes as API. so, going forward the shared attributes should be in the api not in core. we are trying to fix this issue slowly from this change.\nNOTE: this specific change requires latest version of all 3 artifacts\n@ejona86 can explain it better (or correct my understanding).", "url": "https://github.com/grpc/grpc-java/pull/6704#discussion_r379078548", "createdAt": "2020-02-13T19:41:33Z", "author": {"login": "creamsoup"}, "path": "api/src/main/java/io/grpc/NameResolver.java", "diffHunk": "@@ -350,6 +350,11 @@ public final void onAddresses(\n   @Documented\n   public @interface ResolutionResultAttr {}\n \n+  @Internal\n+  @ResolutionResultAttr\n+  public static final Attributes.Key<Map<String, ?>> RESOLUTION_RESULT_ATTR_HEALTH_CHECKING_CONFIG =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA3NDAyMw=="}, "originalCommit": {"oid": "900369e741c979ed1eb9d71b791bf98946227f41"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgzMDgzOA==", "bodyText": "io.grpc.internal should be considered convenience. Easiest test to check if it is convenience is to ask if it would work if each user of it shaded it. This attribute is used cross-module, between a transport/core and a load balancer, so it should not be in internal.\nThe same would be true of GrpcAttributes.ATTR_LB_PROVIDED_BACKEND. ATTR_CLIENT_EAG_ATTRS is a hack that maybe should be moved out as well, but maybe we want to replace it with something else. So that just leaves ATTR_SECURITY_LEVEL, which is sort of fine, but could be done in a more explicit way; it was sort of a lazy solution to pass data out of transports.\nSo in general, GrpcAttributes is a code smell and any new attributes added there should be treated with suspicion.", "url": "https://github.com/grpc/grpc-java/pull/6704#discussion_r385830838", "createdAt": "2020-02-28T17:39:52Z", "author": {"login": "ejona86"}, "path": "api/src/main/java/io/grpc/NameResolver.java", "diffHunk": "@@ -350,6 +350,11 @@ public final void onAddresses(\n   @Documented\n   public @interface ResolutionResultAttr {}\n \n+  @Internal\n+  @ResolutionResultAttr\n+  public static final Attributes.Key<Map<String, ?>> RESOLUTION_RESULT_ATTR_HEALTH_CHECKING_CONFIG =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA3NDAyMw=="}, "originalCommit": {"oid": "900369e741c979ed1eb9d71b791bf98946227f41"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTY3NTE1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/grpc/internal/DnsNameResolver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzo0MjowNFrOFv9Tlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMjoxMDoyNlrOFwEQKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgzMTgzMA==", "bodyText": "This doesn't look right. I think we want this to be in ManangedChannelImpl so that it applies to all name resolvers.\nWhat made me notice this is that RESOLUTION_RESULT_ATTR_HEALTH_CHECKING_CONFIG was put in NameResolver and not LoadBalancer. I expected it in LoadBalancer and for the NameResolver to be ignorant of it.", "url": "https://github.com/grpc/grpc-java/pull/6704#discussion_r385831830", "createdAt": "2020-02-28T17:42:04Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/internal/DnsNameResolver.java", "diffHunk": "@@ -315,6 +315,12 @@ public void run() {\n \n           @SuppressWarnings(\"unchecked\")\n           Map<String, ?> verifiedRawServiceConfig = (Map<String, ?>) rawServiceConfig.getConfig();\n+          Map<String, ?> healthCheckedService =\n+              ServiceConfigUtil.getHealthCheckedService(verifiedRawServiceConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "900369e741c979ed1eb9d71b791bf98946227f41"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk0NTY0MA==", "bodyText": "moved to LoadBalancer, PTAL", "url": "https://github.com/grpc/grpc-java/pull/6704#discussion_r385945640", "createdAt": "2020-02-28T22:10:26Z", "author": {"login": "creamsoup"}, "path": "core/src/main/java/io/grpc/internal/DnsNameResolver.java", "diffHunk": "@@ -315,6 +315,12 @@ public void run() {\n \n           @SuppressWarnings(\"unchecked\")\n           Map<String, ?> verifiedRawServiceConfig = (Map<String, ?>) rawServiceConfig.getConfig();\n+          Map<String, ?> healthCheckedService =\n+              ServiceConfigUtil.getHealthCheckedService(verifiedRawServiceConfig);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgzMTgzMA=="}, "originalCommit": {"oid": "900369e741c979ed1eb9d71b791bf98946227f41"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDY0MTIzOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/io/grpc/internal/ManagedChannelServiceConfigTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMDo0Njo0MlrOFwGhXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMToxMDo1MlrOFwGt7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4MjgxNA==", "bodyText": "nit: new line.\nBtw, why not just put in ManagedChannelImplTest.java?", "url": "https://github.com/grpc/grpc-java/pull/6704#discussion_r385982814", "createdAt": "2020-02-29T00:46:42Z", "author": {"login": "voidzcy"}, "path": "core/src/test/java/io/grpc/internal/ManagedChannelServiceConfigTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.internal;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class ManagedChannelServiceConfigTest {\n+\n+  @Test\n+  public void managedChannelServiceConfig_shouldParseHealthCheckingConfig() throws Exception {\n+    Map<String, ?> rawServiceConfig =\n+        parseConfig(\n+            \"{\\\"healthCheckConfig\\\": \"\n+                + \"{\\\"serviceName\\\": \\\"COVID-19\\\", \"\n+                + \"\\\"description\\\": \\\"I can't visit korea, because of you\\\"}}\");\n+    ManagedChannelServiceConfig mcsc =\n+        ManagedChannelServiceConfig.fromServiceConfig(rawServiceConfig, true, 3, 4, null);\n+    Map<String, ?> healthCheckingConfig = mcsc.getHealthCheckingConfig();\n+    assertThat(healthCheckingConfig).isNotNull();\n+    assertThat(healthCheckingConfig)\n+        .containsExactly(\n+            \"serviceName\", \"COVID-19\", \"description\", \"I can't visit korea, because of you\");\n+  }\n+\n+  @Test\n+  public void managedChannelServiceConfig_shouldHandleNoHealthCheckingConfig() throws Exception {\n+    ManagedChannelServiceConfig mcsc =\n+        ManagedChannelServiceConfig\n+            .fromServiceConfig(Collections.<String, Object>emptyMap(), true, 3, 4, null);\n+\n+    assertThat(mcsc.getHealthCheckingConfig()).isNull();\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  private static Map<String, Object> parseConfig(String json) throws Exception {\n+    return (Map<String, Object>) JsonParser.parse(json);\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93174cad177bb96a2f7f1abc1e6c333c7675feea"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NjAzMQ==", "bodyText": "because this test is only testing ManagedChannelServiceConfig. i would love to verify the MCI sets the new Attribute or not but the MCI test is faking that particular code path.", "url": "https://github.com/grpc/grpc-java/pull/6704#discussion_r385986031", "createdAt": "2020-02-29T01:10:52Z", "author": {"login": "creamsoup"}, "path": "core/src/test/java/io/grpc/internal/ManagedChannelServiceConfigTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.internal;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class ManagedChannelServiceConfigTest {\n+\n+  @Test\n+  public void managedChannelServiceConfig_shouldParseHealthCheckingConfig() throws Exception {\n+    Map<String, ?> rawServiceConfig =\n+        parseConfig(\n+            \"{\\\"healthCheckConfig\\\": \"\n+                + \"{\\\"serviceName\\\": \\\"COVID-19\\\", \"\n+                + \"\\\"description\\\": \\\"I can't visit korea, because of you\\\"}}\");\n+    ManagedChannelServiceConfig mcsc =\n+        ManagedChannelServiceConfig.fromServiceConfig(rawServiceConfig, true, 3, 4, null);\n+    Map<String, ?> healthCheckingConfig = mcsc.getHealthCheckingConfig();\n+    assertThat(healthCheckingConfig).isNotNull();\n+    assertThat(healthCheckingConfig)\n+        .containsExactly(\n+            \"serviceName\", \"COVID-19\", \"description\", \"I can't visit korea, because of you\");\n+  }\n+\n+  @Test\n+  public void managedChannelServiceConfig_shouldHandleNoHealthCheckingConfig() throws Exception {\n+    ManagedChannelServiceConfig mcsc =\n+        ManagedChannelServiceConfig\n+            .fromServiceConfig(Collections.<String, Object>emptyMap(), true, 3, 4, null);\n+\n+    assertThat(mcsc.getHealthCheckingConfig()).isNull();\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  private static Map<String, Object> parseConfig(String json) throws Exception {\n+    return (Map<String, Object>) JsonParser.parse(json);\n+  }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4MjgxNA=="}, "originalCommit": {"oid": "93174cad177bb96a2f7f1abc1e6c333c7675feea"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDY1Nzg4OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/io/grpc/internal/ManagedChannelServiceConfigTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMTowNTowOFrOFwGrBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMTowNTowOFrOFwGrBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NTI4Ng==", "bodyText": "Too soon.\n(But it was sad you aren't able to travel.)", "url": "https://github.com/grpc/grpc-java/pull/6704#discussion_r385985286", "createdAt": "2020-02-29T01:05:08Z", "author": {"login": "ejona86"}, "path": "core/src/test/java/io/grpc/internal/ManagedChannelServiceConfigTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.internal;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class ManagedChannelServiceConfigTest {\n+\n+  @Test\n+  public void managedChannelServiceConfig_shouldParseHealthCheckingConfig() throws Exception {\n+    Map<String, ?> rawServiceConfig =\n+        parseConfig(\n+            \"{\\\"healthCheckConfig\\\": \"\n+                + \"{\\\"serviceName\\\": \\\"COVID-19\\\", \"\n+                + \"\\\"description\\\": \\\"I can't visit korea, because of you\\\"}}\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93174cad177bb96a2f7f1abc1e6c333c7675feea"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2827, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}