{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzODE2MzIy", "number": 6801, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjoxMTo1OVrODlOMAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjo0ODo0NVrODmxCcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzU2MzU0OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/XdsClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjoxMTo1OVrOFx_jlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMDo0OTowNVrOFz-CHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk2NTg0Ng==", "bodyText": "builder pattern here seems a bit overkill unless you expect to add many more fields. consider Factory?", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r387965846", "createdAt": "2020-03-04T22:11:59Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/XdsClient.java", "diffHunk": "@@ -352,6 +352,51 @@ EndpointUpdate build() {\n     }\n   }\n \n+  /**\n+   * Updates via resource discovery RPCs using LDS. Includes {@link Listener} object containing\n+   * config for security, RBAC or other server side features such as rate limit.\n+   */\n+  static final class ListenerUpdate {\n+    private final Listener listener;\n+\n+    private ListenerUpdate(Listener listener) {\n+      this.listener = listener;\n+    }\n+\n+    public Listener getListener() {\n+      return listener;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return \"ListenerUpdate{\"\n+          + \"listener=\" + listener\n+          + '}';\n+    }\n+\n+    static Builder newBuilder() {\n+      return new Builder();\n+    }\n+\n+    static final class Builder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c081008900d072be9e480d046977fa8863c29b"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzODA0Ng==", "bodyText": "I agree with Listener being the only field. However in a later PR I will be flattening Listener into ListenerUpdate as per the comment on line 347. At that time builder pattern will be useful.", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r390038046", "createdAt": "2020-03-10T00:49:05Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsClient.java", "diffHunk": "@@ -352,6 +352,51 @@ EndpointUpdate build() {\n     }\n   }\n \n+  /**\n+   * Updates via resource discovery RPCs using LDS. Includes {@link Listener} object containing\n+   * config for security, RBAC or other server side features such as rate limit.\n+   */\n+  static final class ListenerUpdate {\n+    private final Listener listener;\n+\n+    private ListenerUpdate(Listener listener) {\n+      this.listener = listener;\n+    }\n+\n+    public Listener getListener() {\n+      return listener;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return \"ListenerUpdate{\"\n+          + \"listener=\" + listener\n+          + '}';\n+    }\n+\n+    static Builder newBuilder() {\n+      return new Builder();\n+    }\n+\n+    static final class Builder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk2NTg0Ng=="}, "originalCommit": {"oid": "f4c081008900d072be9e480d046977fa8863c29b"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzU3NzIyOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjoxNjo0MVrOFx_r5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjoxNjo0MVrOFx_r5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk2Nzk3NA==", "bodyText": "if port sounds confusing, rename to listenerPort? can remove the comment after this.", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r387967974", "createdAt": "2020-03-04T22:16:41Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -164,6 +170,12 @@\n   @Nullable\n   private String ldsResourceName;\n \n+  // only a ConfigWatcher or ListenerWatcher can be registered.\n+  @Nullable\n+  private ListenerWatcher listenerWatcher;\n+  // port of the listener that server builder is targeting for.\n+  private int port;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c081008900d072be9e480d046977fa8863c29b"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzU5OTc0OnYy", "diffSide": "RIGHT", "path": "xds/src/test/java/io/grpc/xds/XdsClientImplTestForListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjoyNTowNFrOFx_5ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjoyNTowNFrOFx_5ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3MTUxNA==", "bodyText": "2020", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r387971514", "createdAt": "2020-03-04T22:25:04Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/XdsClientImplTestForListener.java", "diffHunk": "@@ -0,0 +1,664 @@\n+/*\n+ * Copyright 2019 The gRPC Authors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c081008900d072be9e480d046977fa8863c29b"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzYwNjM5OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjoyNzoxN1rOFx_9og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjoyNzoxN1rOFx_9og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3MjUxNA==", "bodyText": "ConfigWatcher error message is not very clear, can you mention only one of them can be set?", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r387972514", "createdAt": "2020-03-04T22:27:17Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -414,6 +427,39 @@ void cancelEndpointDataWatch(String clusterName, EndpointWatcher watcher) {\n     }\n   }\n \n+  @Override\n+  void watchListenerData(int port, ListenerWatcher watcher) {\n+    checkState(configWatcher == null, \"ConfigWatcher for %s already registered\", hostName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c081008900d072be9e480d046977fa8863c29b"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTI2MzMyOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/XdsClient.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMjowNToyM1rOFzI2lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjowMDo0MlrOFz63AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2Njc0MQ==", "bodyText": "nit: you can use MoreObjects.toStringHelper.", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r389166741", "createdAt": "2020-03-06T22:05:23Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsClient.java", "diffHunk": "@@ -352,6 +352,51 @@ EndpointUpdate build() {\n     }\n   }\n \n+  /**\n+   * Updates via resource discovery RPCs using LDS. Includes {@link Listener} object containing\n+   * config for security, RBAC or other server side features such as rate limit.\n+   */\n+  static final class ListenerUpdate {\n+    private final Listener listener;\n+\n+    private ListenerUpdate(Listener listener) {\n+      this.listener = listener;\n+    }\n+\n+    public Listener getListener() {\n+      return listener;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return \"ListenerUpdate{\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c081008900d072be9e480d046977fa8863c29b"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxMTU2Nw==", "bodyText": "This is what the IDE generated for me. After flattening I will get this for free the way you suggesed.", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r389911567", "createdAt": "2020-03-09T19:27:41Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsClient.java", "diffHunk": "@@ -352,6 +352,51 @@ EndpointUpdate build() {\n     }\n   }\n \n+  /**\n+   * Updates via resource discovery RPCs using LDS. Includes {@link Listener} object containing\n+   * config for security, RBAC or other server side features such as rate limit.\n+   */\n+  static final class ListenerUpdate {\n+    private final Listener listener;\n+\n+    private ListenerUpdate(Listener listener) {\n+      this.listener = listener;\n+    }\n+\n+    public Listener getListener() {\n+      return listener;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return \"ListenerUpdate{\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2Njc0MQ=="}, "originalCommit": {"oid": "f4c081008900d072be9e480d046977fa8863c29b"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk3Nzc3OA==", "bodyText": "btw, you can switch template in intellij to what @voidzcy suggested.", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r389977778", "createdAt": "2020-03-09T21:41:32Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/XdsClient.java", "diffHunk": "@@ -352,6 +352,51 @@ EndpointUpdate build() {\n     }\n   }\n \n+  /**\n+   * Updates via resource discovery RPCs using LDS. Includes {@link Listener} object containing\n+   * config for security, RBAC or other server side features such as rate limit.\n+   */\n+  static final class ListenerUpdate {\n+    private final Listener listener;\n+\n+    private ListenerUpdate(Listener listener) {\n+      this.listener = listener;\n+    }\n+\n+    public Listener getListener() {\n+      return listener;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return \"ListenerUpdate{\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2Njc0MQ=="}, "originalCommit": {"oid": "f4c081008900d072be9e480d046977fa8863c29b"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk4NjA0OA==", "bodyText": "switched template", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r389986048", "createdAt": "2020-03-09T22:00:42Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsClient.java", "diffHunk": "@@ -352,6 +352,51 @@ EndpointUpdate build() {\n     }\n   }\n \n+  /**\n+   * Updates via resource discovery RPCs using LDS. Includes {@link Listener} object containing\n+   * config for security, RBAC or other server side features such as rate limit.\n+   */\n+  static final class ListenerUpdate {\n+    private final Listener listener;\n+\n+    private ListenerUpdate(Listener listener) {\n+      this.listener = listener;\n+    }\n+\n+    public Listener getListener() {\n+      return listener;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return \"ListenerUpdate{\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2Njc0MQ=="}, "originalCommit": {"oid": "f4c081008900d072be9e480d046977fa8863c29b"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTMyNTA5OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMjozMzoxN1rOFzJcDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMjozMzoxN1rOFzJcDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE3NjMzMw==", "bodyText": "nit: it's safest to initialize with private int port = -1;", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r389176333", "createdAt": "2020-03-06T22:33:17Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -164,6 +170,12 @@\n   @Nullable\n   private String ldsResourceName;\n \n+  // only a ConfigWatcher or ListenerWatcher can be registered.\n+  @Nullable\n+  private ListenerWatcher listenerWatcher;\n+  // port of the listener that server builder is targeting for.\n+  private int port;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c081008900d072be9e480d046977fa8863c29b"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTQyODE4OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/XdsClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMzoyOToxM1rOFzKaRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMTozOTowMlrOFz6Sgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE5MjI2Mw==", "bodyText": "I do not have the knowledge of design. But you are forwarding a complex structure Listener to gRPC, which seems very unnecessary. You could make the converted data as flat as possible. That's another reason to use converted data instead of proto.\nFrom existing code I see, I think at least the layer of this Listener encapsulation is redundant.\nclass ListenerUpdate {\n  private String listenerName;\n  private String listeningAddr;\n  private List<FilterChain> filterChains;\n}\nI don't know whether FilterChain can be further flattened or not depending on your design.", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r389192263", "createdAt": "2020-03-06T23:29:13Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsClient.java", "diffHunk": "@@ -352,6 +352,51 @@ EndpointUpdate build() {\n     }\n   }\n \n+  /**\n+   * Updates via resource discovery RPCs using LDS. Includes {@link Listener} object containing\n+   * config for security, RBAC or other server side features such as rate limit.\n+   */\n+  static final class ListenerUpdate {\n+    private final Listener listener;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c081008900d072be9e480d046977fa8863c29b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkwNzIwOA==", "bodyText": "I do agree that flattening Listener into ListenerUpdate (and FilterChainMatch into FilterChain) is a good idea. However the existing class hierarchy under  'io.grpc.xds.EnvoyServerProtoData.Listener' was already in place in a previous PR and this PR is leveraging it. I will put TODO comments in 2 places for the flattening to be done in future.", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r389907208", "createdAt": "2020-03-09T19:18:47Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsClient.java", "diffHunk": "@@ -352,6 +352,51 @@ EndpointUpdate build() {\n     }\n   }\n \n+  /**\n+   * Updates via resource discovery RPCs using LDS. Includes {@link Listener} object containing\n+   * config for security, RBAC or other server side features such as rate limit.\n+   */\n+  static final class ListenerUpdate {\n+    private final Listener listener;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE5MjI2Mw=="}, "originalCommit": {"oid": "f4c081008900d072be9e480d046977fa8863c29b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk3NjcwNw==", "bodyText": "Done as per my comment", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r389976707", "createdAt": "2020-03-09T21:39:02Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsClient.java", "diffHunk": "@@ -352,6 +352,51 @@ EndpointUpdate build() {\n     }\n   }\n \n+  /**\n+   * Updates via resource discovery RPCs using LDS. Includes {@link Listener} object containing\n+   * config for security, RBAC or other server side features such as rate limit.\n+   */\n+  static final class ListenerUpdate {\n+    private final Listener listener;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE5MjI2Mw=="}, "originalCommit": {"oid": "f4c081008900d072be9e480d046977fa8863c29b"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTQ0NzgyOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMzo0MjoyOFrOFzKmKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOToxMTowN1rOFz10TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE5NTMwNQ==", "bodyText": "nit: The added comment is redundant. It only adds confusion. You can just put it in updateNodeMetadataForListenerRequest method.", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r389195305", "createdAt": "2020-03-06T23:42:28Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -99,8 +104,9 @@\n   private final Stopwatch adsStreamRetryStopwatch;\n   // The node identifier to be included in xDS requests. Management server only requires the\n   // first request to carry the node identifier on a stream. It should be identical if present\n-  // more than once.\n-  private final Node node;\n+  // more than once. In case of Listener watcher metadata will be updated to include specific", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c081008900d072be9e480d046977fa8863c29b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkwMzQzNg==", "bodyText": "Okay, will do", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r389903436", "createdAt": "2020-03-09T19:11:07Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -99,8 +104,9 @@\n   private final Stopwatch adsStreamRetryStopwatch;\n   // The node identifier to be included in xDS requests. Management server only requires the\n   // first request to carry the node identifier on a stream. It should be identical if present\n-  // more than once.\n-  private final Node node;\n+  // more than once. In case of Listener watcher metadata will be updated to include specific", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE5NTMwNQ=="}, "originalCommit": {"oid": "f4c081008900d072be9e480d046977fa8863c29b"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTQ1MTIxOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMzo0NTowMFrOFzKoVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMDo1MToxOFrOFz-EQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE5NTg2MQ==", "bodyText": "You can just call with empty list (e.g., Collections.emptyList()) so that you don't need to any special logic in sendXXXRequest() method.", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r389195861", "createdAt": "2020-03-06T23:45:00Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -414,6 +427,39 @@ void cancelEndpointDataWatch(String clusterName, EndpointWatcher watcher) {\n     }\n   }\n \n+  @Override\n+  void watchListenerData(int port, ListenerWatcher watcher) {\n+    checkState(configWatcher == null, \"ConfigWatcher for %s already registered\", hostName);\n+    checkState(listenerWatcher == null, \"ListenerWatcher already registered\");\n+    listenerWatcher = checkNotNull(watcher, \"watcher\");\n+    checkState(port > 0, \"port needs to be > 0\");\n+    this.port = port;\n+    logger.log(XdsLogLevel.INFO, \"Started watching listener for port {0}\", port);\n+    if (rpcRetryTimer != null && rpcRetryTimer.isPending()) {\n+      // Currently in retry backoff.\n+      return;\n+    }\n+    if (adsStream == null) {\n+      startRpcStream();\n+    }\n+    updateNodeMetadataForListenerRequest(port);\n+    adsStream.sendXdsRequest(ADS_TYPE_URL_LDS, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c081008900d072be9e480d046977fa8863c29b"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkwMjk1MQ==", "bodyText": "Sending an empty list vs null has different implications on the xDS server side and the xDS folks (TD) told me they expect null in this case.", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r389902951", "createdAt": "2020-03-09T19:10:15Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -414,6 +427,39 @@ void cancelEndpointDataWatch(String clusterName, EndpointWatcher watcher) {\n     }\n   }\n \n+  @Override\n+  void watchListenerData(int port, ListenerWatcher watcher) {\n+    checkState(configWatcher == null, \"ConfigWatcher for %s already registered\", hostName);\n+    checkState(listenerWatcher == null, \"ListenerWatcher already registered\");\n+    listenerWatcher = checkNotNull(watcher, \"watcher\");\n+    checkState(port > 0, \"port needs to be > 0\");\n+    this.port = port;\n+    logger.log(XdsLogLevel.INFO, \"Started watching listener for port {0}\", port);\n+    if (rpcRetryTimer != null && rpcRetryTimer.isPending()) {\n+      // Currently in retry backoff.\n+      return;\n+    }\n+    if (adsStream == null) {\n+      startRpcStream();\n+    }\n+    updateNodeMetadataForListenerRequest(port);\n+    adsStream.sendXdsRequest(ADS_TYPE_URL_LDS, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE5NTg2MQ=="}, "originalCommit": {"oid": "f4c081008900d072be9e480d046977fa8863c29b"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk4NDEwNA==", "bodyText": "that is very surprising, do they check internal value of proto? it will still return emptyList. maybe different type of list.", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r389984104", "createdAt": "2020-03-09T21:56:16Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -414,6 +427,39 @@ void cancelEndpointDataWatch(String clusterName, EndpointWatcher watcher) {\n     }\n   }\n \n+  @Override\n+  void watchListenerData(int port, ListenerWatcher watcher) {\n+    checkState(configWatcher == null, \"ConfigWatcher for %s already registered\", hostName);\n+    checkState(listenerWatcher == null, \"ListenerWatcher already registered\");\n+    listenerWatcher = checkNotNull(watcher, \"watcher\");\n+    checkState(port > 0, \"port needs to be > 0\");\n+    this.port = port;\n+    logger.log(XdsLogLevel.INFO, \"Started watching listener for port {0}\", port);\n+    if (rpcRetryTimer != null && rpcRetryTimer.isPending()) {\n+      // Currently in retry backoff.\n+      return;\n+    }\n+    if (adsStream == null) {\n+      startRpcStream();\n+    }\n+    updateNodeMetadataForListenerRequest(port);\n+    adsStream.sendXdsRequest(ADS_TYPE_URL_LDS, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE5NTg2MQ=="}, "originalCommit": {"oid": "f4c081008900d072be9e480d046977fa8863c29b"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5OTAzNQ==", "bodyText": "I found this the hard way while testing with the xDS server (TD). An uninitialized list field and initialized list of 0 size are different apparently. I'll post a pointer if I find one.", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r389999035", "createdAt": "2020-03-09T22:35:46Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -414,6 +427,39 @@ void cancelEndpointDataWatch(String clusterName, EndpointWatcher watcher) {\n     }\n   }\n \n+  @Override\n+  void watchListenerData(int port, ListenerWatcher watcher) {\n+    checkState(configWatcher == null, \"ConfigWatcher for %s already registered\", hostName);\n+    checkState(listenerWatcher == null, \"ListenerWatcher already registered\");\n+    listenerWatcher = checkNotNull(watcher, \"watcher\");\n+    checkState(port > 0, \"port needs to be > 0\");\n+    this.port = port;\n+    logger.log(XdsLogLevel.INFO, \"Started watching listener for port {0}\", port);\n+    if (rpcRetryTimer != null && rpcRetryTimer.isPending()) {\n+      // Currently in retry backoff.\n+      return;\n+    }\n+    if (adsStream == null) {\n+      startRpcStream();\n+    }\n+    updateNodeMetadataForListenerRequest(port);\n+    adsStream.sendXdsRequest(ADS_TYPE_URL_LDS, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE5NTg2MQ=="}, "originalCommit": {"oid": "f4c081008900d072be9e480d046977fa8863c29b"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwMDU0OA==", "bodyText": "As far as I know, calling addAllXXX() method with an empty list is equivalent to not setting that field in protobuf. There isn't a real null semantics in protos. Empty collections or strings are not sent out in wire and getters return at least an empty collection/string even if the field is not set.", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r390000548", "createdAt": "2020-03-09T22:40:18Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -414,6 +427,39 @@ void cancelEndpointDataWatch(String clusterName, EndpointWatcher watcher) {\n     }\n   }\n \n+  @Override\n+  void watchListenerData(int port, ListenerWatcher watcher) {\n+    checkState(configWatcher == null, \"ConfigWatcher for %s already registered\", hostName);\n+    checkState(listenerWatcher == null, \"ListenerWatcher already registered\");\n+    listenerWatcher = checkNotNull(watcher, \"watcher\");\n+    checkState(port > 0, \"port needs to be > 0\");\n+    this.port = port;\n+    logger.log(XdsLogLevel.INFO, \"Started watching listener for port {0}\", port);\n+    if (rpcRetryTimer != null && rpcRetryTimer.isPending()) {\n+      // Currently in retry backoff.\n+      return;\n+    }\n+    if (adsStream == null) {\n+      startRpcStream();\n+    }\n+    updateNodeMetadataForListenerRequest(port);\n+    adsStream.sendXdsRequest(ADS_TYPE_URL_LDS, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE5NTg2MQ=="}, "originalCommit": {"oid": "f4c081008900d072be9e480d046977fa8863c29b"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwMjI1Nw==", "bodyText": "I examine the code. addAll(emptyList) has side effect of setting the internal collection to ArrayList instead of Collections.emptyList(). usually emptyList can cause more problems...", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r390002257", "createdAt": "2020-03-09T22:45:18Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -414,6 +427,39 @@ void cancelEndpointDataWatch(String clusterName, EndpointWatcher watcher) {\n     }\n   }\n \n+  @Override\n+  void watchListenerData(int port, ListenerWatcher watcher) {\n+    checkState(configWatcher == null, \"ConfigWatcher for %s already registered\", hostName);\n+    checkState(listenerWatcher == null, \"ListenerWatcher already registered\");\n+    listenerWatcher = checkNotNull(watcher, \"watcher\");\n+    checkState(port > 0, \"port needs to be > 0\");\n+    this.port = port;\n+    logger.log(XdsLogLevel.INFO, \"Started watching listener for port {0}\", port);\n+    if (rpcRetryTimer != null && rpcRetryTimer.isPending()) {\n+      // Currently in retry backoff.\n+      return;\n+    }\n+    if (adsStream == null) {\n+      startRpcStream();\n+    }\n+    updateNodeMetadataForListenerRequest(port);\n+    adsStream.sendXdsRequest(ADS_TYPE_URL_LDS, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE5NTg2MQ=="}, "originalCommit": {"oid": "f4c081008900d072be9e480d046977fa8863c29b"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwMzc2MQ==", "bodyText": "But it shouldn't have behavior-wise difference than not setting it, right? Anyway, @sanjaypujare said the design is still half baked and later it will contain some resources explicitly. I am fine being this now.", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r390003761", "createdAt": "2020-03-09T22:49:50Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -414,6 +427,39 @@ void cancelEndpointDataWatch(String clusterName, EndpointWatcher watcher) {\n     }\n   }\n \n+  @Override\n+  void watchListenerData(int port, ListenerWatcher watcher) {\n+    checkState(configWatcher == null, \"ConfigWatcher for %s already registered\", hostName);\n+    checkState(listenerWatcher == null, \"ListenerWatcher already registered\");\n+    listenerWatcher = checkNotNull(watcher, \"watcher\");\n+    checkState(port > 0, \"port needs to be > 0\");\n+    this.port = port;\n+    logger.log(XdsLogLevel.INFO, \"Started watching listener for port {0}\", port);\n+    if (rpcRetryTimer != null && rpcRetryTimer.isPending()) {\n+      // Currently in retry backoff.\n+      return;\n+    }\n+    if (adsStream == null) {\n+      startRpcStream();\n+    }\n+    updateNodeMetadataForListenerRequest(port);\n+    adsStream.sendXdsRequest(ADS_TYPE_URL_LDS, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE5NTg2MQ=="}, "originalCommit": {"oid": "f4c081008900d072be9e480d046977fa8863c29b"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwNTUwOQ==", "bodyText": "It's not about the design being half-baked or half-ready. It is about how the server treats the request differently: I didn't pursue why they don't treat both the same but I need to do what the server expects.", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r390005509", "createdAt": "2020-03-09T22:55:34Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -414,6 +427,39 @@ void cancelEndpointDataWatch(String clusterName, EndpointWatcher watcher) {\n     }\n   }\n \n+  @Override\n+  void watchListenerData(int port, ListenerWatcher watcher) {\n+    checkState(configWatcher == null, \"ConfigWatcher for %s already registered\", hostName);\n+    checkState(listenerWatcher == null, \"ListenerWatcher already registered\");\n+    listenerWatcher = checkNotNull(watcher, \"watcher\");\n+    checkState(port > 0, \"port needs to be > 0\");\n+    this.port = port;\n+    logger.log(XdsLogLevel.INFO, \"Started watching listener for port {0}\", port);\n+    if (rpcRetryTimer != null && rpcRetryTimer.isPending()) {\n+      // Currently in retry backoff.\n+      return;\n+    }\n+    if (adsStream == null) {\n+      startRpcStream();\n+    }\n+    updateNodeMetadataForListenerRequest(port);\n+    adsStream.sendXdsRequest(ADS_TYPE_URL_LDS, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE5NTg2MQ=="}, "originalCommit": {"oid": "f4c081008900d072be9e480d046977fa8863c29b"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzODU5Mg==", "bodyText": "Changed to using Collections.emptyList()", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r390038592", "createdAt": "2020-03-10T00:51:18Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -414,6 +427,39 @@ void cancelEndpointDataWatch(String clusterName, EndpointWatcher watcher) {\n     }\n   }\n \n+  @Override\n+  void watchListenerData(int port, ListenerWatcher watcher) {\n+    checkState(configWatcher == null, \"ConfigWatcher for %s already registered\", hostName);\n+    checkState(listenerWatcher == null, \"ListenerWatcher already registered\");\n+    listenerWatcher = checkNotNull(watcher, \"watcher\");\n+    checkState(port > 0, \"port needs to be > 0\");\n+    this.port = port;\n+    logger.log(XdsLogLevel.INFO, \"Started watching listener for port {0}\", port);\n+    if (rpcRetryTimer != null && rpcRetryTimer.isPending()) {\n+      // Currently in retry backoff.\n+      return;\n+    }\n+    if (adsStream == null) {\n+      startRpcStream();\n+    }\n+    updateNodeMetadataForListenerRequest(port);\n+    adsStream.sendXdsRequest(ADS_TYPE_URL_LDS, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE5NTg2MQ=="}, "originalCommit": {"oid": "f4c081008900d072be9e480d046977fa8863c29b"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTQ5MzQyOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDoxODoxMFrOFzLCRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMTo0MDoxOVrOFz6UjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMjUwMA==", "bodyText": "Let's make this more elegant. Put the logic of unpacking Listeners and selecting the requested Listener in handleLdsResponse(). Then branching into different helper methods for processing different data.\nvoid handleLdsResponse(DiscoverResponse ldsResponse) {\n  checkState((configWatcher != null) != (listenerWatcher != null), ...);  // XOR\n  Listener requestedListener = null;\n  // unpack Listeners and choose the only one that we are interested in.\n  // ...\n  if (configWatcher != null) {\n    processListenerForConfigUpdate(requestedListener);\n  } else {\n    processListenerForListenerUpdate(requestedListener);\n  }\n}\n\nvoid processListenerForConfigUpdate(Listener listener) {\n  // ...\n}\n\nvoid processListenerForListenerUpdate(Listener listener) {\n  // ...\n}", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r389202500", "createdAt": "2020-03-07T00:18:10Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -472,14 +518,19 @@ private void startRpcStream() {\n   }\n \n   /**\n-   * Handles LDS response to find the HttpConnectionManager message for the requested resource name.\n+   * If listenerWatcher is set it just calls handleLdsResponseForListener. Otherwise\n+   * handles LDS response to find the HttpConnectionManager message for the requested resource name.\n    * Proceed with the resolved RouteConfiguration in HttpConnectionManager message of the requested\n    * listener, if exists, to find the VirtualHost configuration for the \"xds:\" URI\n    * (with the port, if any, stripped off). Or sends an RDS request if configured for dynamic\n    * resolution. The response is NACKed if contains invalid data for gRPC's usage. Otherwise, an\n    * ACK request is sent to management server.\n    */\n   private void handleLdsResponse(DiscoveryResponse ldsResponse) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c081008900d072be9e480d046977fa8863c29b"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkwMjI5Mw==", "bodyText": "Okay, let me do it but I don't think it's that different in terms of the structure.", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r389902293", "createdAt": "2020-03-09T19:08:57Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -472,14 +518,19 @@ private void startRpcStream() {\n   }\n \n   /**\n-   * Handles LDS response to find the HttpConnectionManager message for the requested resource name.\n+   * If listenerWatcher is set it just calls handleLdsResponseForListener. Otherwise\n+   * handles LDS response to find the HttpConnectionManager message for the requested resource name.\n    * Proceed with the resolved RouteConfiguration in HttpConnectionManager message of the requested\n    * listener, if exists, to find the VirtualHost configuration for the \"xds:\" URI\n    * (with the port, if any, stripped off). Or sends an RDS request if configured for dynamic\n    * resolution. The response is NACKed if contains invalid data for gRPC's usage. Otherwise, an\n    * ACK request is sent to management server.\n    */\n   private void handleLdsResponse(DiscoveryResponse ldsResponse) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMjUwMA=="}, "originalCommit": {"oid": "f4c081008900d072be9e480d046977fa8863c29b"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk3NzIyOA==", "bodyText": "The logic to locate the requestedListener is different in the 2 cases so it is best to put it in the respective methods (processListenerForConfigUpdate vs processListenerForListenerUpdate). Done.", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r389977228", "createdAt": "2020-03-09T21:40:19Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -472,14 +518,19 @@ private void startRpcStream() {\n   }\n \n   /**\n-   * Handles LDS response to find the HttpConnectionManager message for the requested resource name.\n+   * If listenerWatcher is set it just calls handleLdsResponseForListener. Otherwise\n+   * handles LDS response to find the HttpConnectionManager message for the requested resource name.\n    * Proceed with the resolved RouteConfiguration in HttpConnectionManager message of the requested\n    * listener, if exists, to find the VirtualHost configuration for the \"xds:\" URI\n    * (with the port, if any, stripped off). Or sends an RDS request if configured for dynamic\n    * resolution. The response is NACKed if contains invalid data for gRPC's usage. Otherwise, an\n    * ACK request is sent to management server.\n    */\n   private void handleLdsResponse(DiscoveryResponse ldsResponse) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMjUwMA=="}, "originalCommit": {"oid": "f4c081008900d072be9e480d046977fa8863c29b"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTU1MjU0OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/XdsClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMToxMzoxMlrOFzLlRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOTowNjoxOVrOFz1qaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxMTQ2Mw==", "bodyText": "You should revert changes made in #6718 that puts a Listener into ConfigUpdate.", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r389211463", "createdAt": "2020-03-07T01:13:12Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsClient.java", "diffHunk": "@@ -352,6 +352,51 @@ EndpointUpdate build() {\n     }\n   }\n \n+  /**\n+   * Updates via resource discovery RPCs using LDS. Includes {@link Listener} object containing\n+   * config for security, RBAC or other server side features such as rate limit.\n+   */\n+  static final class ListenerUpdate {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c081008900d072be9e480d046977fa8863c29b"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkwMDkwNA==", "bodyText": "good point! My bad.", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r389900904", "createdAt": "2020-03-09T19:06:19Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsClient.java", "diffHunk": "@@ -352,6 +352,51 @@ EndpointUpdate build() {\n     }\n   }\n \n+  /**\n+   * Updates via resource discovery RPCs using LDS. Includes {@link Listener} object containing\n+   * config for security, RBAC or other server side features such as rate limit.\n+   */\n+  static final class ListenerUpdate {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxMTQ2Mw=="}, "originalCommit": {"oid": "f4c081008900d072be9e480d046977fa8863c29b"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjY5MDAxOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMTo0NDoxOFrOFz6biw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMTo0NDoxOFrOFz6biw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk3OTAxOQ==", "bodyText": "nit: checkArgument", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r389979019", "createdAt": "2020-03-09T21:44:18Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -406,6 +418,40 @@ void cancelEndpointDataWatch(String clusterName, EndpointWatcher watcher) {\n     }\n   }\n \n+  @Override\n+  void watchListenerData(int port, ListenerWatcher watcher) {\n+    checkState(configWatcher == null, \"ConfigWatcher for %s already registered\", ldsResourceName);\n+    checkState(listenerWatcher == null, \"ListenerWatcher already registered\");\n+    listenerWatcher = checkNotNull(watcher, \"watcher\");\n+    checkState(port > 0, \"port needs to be > 0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d246e558152212be440e7eacd426697972eeec0"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjY5ODE5OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMTo0NzowOVrOFz6gkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMDo0Mjo1NlrOFz97ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk4MDMwNg==", "bodyText": "nit: those helper methods can be static", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r389980306", "createdAt": "2020-03-09T21:47:09Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -605,6 +665,72 @@ private void handleLdsResponse(DiscoveryResponse ldsResponse) {\n     }\n   }\n \n+  private void handleLdsResponseForListener(DiscoveryResponse ldsResponse) {\n+    checkState(ldsResourceName == null && port > 0 && listenerWatcher != null,\n+        \"LDS request for ListenerWatcher was never sent!\");\n+\n+    // Unpack Listener messages.\n+    Listener requestedListener = null;\n+    logger.log(XdsLogLevel.DEBUG, \"Listener count: {0}\", ldsResponse.getResourcesCount());\n+    try {\n+      for (com.google.protobuf.Any res : ldsResponse.getResourcesList()) {\n+        Listener listener = res.unpack(Listener.class);\n+        logger.log(XdsLogLevel.DEBUG, \"Found listener {0}\", listener.toString());\n+        if (isRequestedListener(listener)) {\n+          requestedListener = listener;\n+          logger.log(XdsLogLevel.DEBUG, \"Requested listener found: {0}\", listener.getName());\n+        }\n+      }\n+    } catch (InvalidProtocolBufferException e) {\n+      adsStream.sendNackRequest(ADS_TYPE_URL_LDS, null,\n+          ldsResponse.getVersionInfo(), \"Broken LDS response.\");\n+      return;\n+    }\n+    adsStream.sendAckRequest(ADS_TYPE_URL_LDS, null,\n+        ldsResponse.getVersionInfo());\n+    if (requestedListener != null) {\n+      // Found requestedListener\n+      if (ldsRespTimer != null) {\n+        ldsRespTimer.cancel();\n+        ldsRespTimer = null;\n+      }\n+      ListenerUpdate listenerUpdate = ListenerUpdate.newBuilder()\n+          .setListener(EnvoyServerProtoData.Listener.fromEnvoyProtoListener(requestedListener))\n+          .build();\n+      listenerWatcher.onListenerChanged(listenerUpdate);\n+    } else {\n+      // did not find the requested listener:\n+      if (ldsRespTimer == null) {\n+        listenerWatcher.onError(Status.NOT_FOUND.withDescription(\"did not find listener for \"\n+            + port));\n+      }\n+    }\n+  }\n+\n+  private boolean isRequestedListener(Listener listener) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d246e558152212be440e7eacd426697972eeec0"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzNjEzOA==", "bodyText": "both the called helper methods use port which is a member variable. I can pass port and make the method static but...", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r390036138", "createdAt": "2020-03-10T00:42:09Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -605,6 +665,72 @@ private void handleLdsResponse(DiscoveryResponse ldsResponse) {\n     }\n   }\n \n+  private void handleLdsResponseForListener(DiscoveryResponse ldsResponse) {\n+    checkState(ldsResourceName == null && port > 0 && listenerWatcher != null,\n+        \"LDS request for ListenerWatcher was never sent!\");\n+\n+    // Unpack Listener messages.\n+    Listener requestedListener = null;\n+    logger.log(XdsLogLevel.DEBUG, \"Listener count: {0}\", ldsResponse.getResourcesCount());\n+    try {\n+      for (com.google.protobuf.Any res : ldsResponse.getResourcesList()) {\n+        Listener listener = res.unpack(Listener.class);\n+        logger.log(XdsLogLevel.DEBUG, \"Found listener {0}\", listener.toString());\n+        if (isRequestedListener(listener)) {\n+          requestedListener = listener;\n+          logger.log(XdsLogLevel.DEBUG, \"Requested listener found: {0}\", listener.getName());\n+        }\n+      }\n+    } catch (InvalidProtocolBufferException e) {\n+      adsStream.sendNackRequest(ADS_TYPE_URL_LDS, null,\n+          ldsResponse.getVersionInfo(), \"Broken LDS response.\");\n+      return;\n+    }\n+    adsStream.sendAckRequest(ADS_TYPE_URL_LDS, null,\n+        ldsResponse.getVersionInfo());\n+    if (requestedListener != null) {\n+      // Found requestedListener\n+      if (ldsRespTimer != null) {\n+        ldsRespTimer.cancel();\n+        ldsRespTimer = null;\n+      }\n+      ListenerUpdate listenerUpdate = ListenerUpdate.newBuilder()\n+          .setListener(EnvoyServerProtoData.Listener.fromEnvoyProtoListener(requestedListener))\n+          .build();\n+      listenerWatcher.onListenerChanged(listenerUpdate);\n+    } else {\n+      // did not find the requested listener:\n+      if (ldsRespTimer == null) {\n+        listenerWatcher.onError(Status.NOT_FOUND.withDescription(\"did not find listener for \"\n+            + port));\n+      }\n+    }\n+  }\n+\n+  private boolean isRequestedListener(Listener listener) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk4MDMwNg=="}, "originalCommit": {"oid": "0d246e558152212be440e7eacd426697972eeec0"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzNjMyNQ==", "bodyText": "oh i missed that!", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r390036325", "createdAt": "2020-03-10T00:42:56Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -605,6 +665,72 @@ private void handleLdsResponse(DiscoveryResponse ldsResponse) {\n     }\n   }\n \n+  private void handleLdsResponseForListener(DiscoveryResponse ldsResponse) {\n+    checkState(ldsResourceName == null && port > 0 && listenerWatcher != null,\n+        \"LDS request for ListenerWatcher was never sent!\");\n+\n+    // Unpack Listener messages.\n+    Listener requestedListener = null;\n+    logger.log(XdsLogLevel.DEBUG, \"Listener count: {0}\", ldsResponse.getResourcesCount());\n+    try {\n+      for (com.google.protobuf.Any res : ldsResponse.getResourcesList()) {\n+        Listener listener = res.unpack(Listener.class);\n+        logger.log(XdsLogLevel.DEBUG, \"Found listener {0}\", listener.toString());\n+        if (isRequestedListener(listener)) {\n+          requestedListener = listener;\n+          logger.log(XdsLogLevel.DEBUG, \"Requested listener found: {0}\", listener.getName());\n+        }\n+      }\n+    } catch (InvalidProtocolBufferException e) {\n+      adsStream.sendNackRequest(ADS_TYPE_URL_LDS, null,\n+          ldsResponse.getVersionInfo(), \"Broken LDS response.\");\n+      return;\n+    }\n+    adsStream.sendAckRequest(ADS_TYPE_URL_LDS, null,\n+        ldsResponse.getVersionInfo());\n+    if (requestedListener != null) {\n+      // Found requestedListener\n+      if (ldsRespTimer != null) {\n+        ldsRespTimer.cancel();\n+        ldsRespTimer = null;\n+      }\n+      ListenerUpdate listenerUpdate = ListenerUpdate.newBuilder()\n+          .setListener(EnvoyServerProtoData.Listener.fromEnvoyProtoListener(requestedListener))\n+          .build();\n+      listenerWatcher.onListenerChanged(listenerUpdate);\n+    } else {\n+      // did not find the requested listener:\n+      if (ldsRespTimer == null) {\n+        listenerWatcher.onError(Status.NOT_FOUND.withDescription(\"did not find listener for \"\n+            + port));\n+      }\n+    }\n+  }\n+\n+  private boolean isRequestedListener(Listener listener) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk4MDMwNg=="}, "originalCommit": {"oid": "0d246e558152212be440e7eacd426697972eeec0"}, "originalPosition": 186}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzA4ODg4OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMDo1NjozOVrOFz-Jvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNzoyMjoyNFrOF0DpOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzOTk5OQ==", "bodyText": "I am confused about this method. Isn't ldsResourceName always null when XdsClient is used to watch Listener data? Then this should just be an empty list as always. Why do we need this helper method?", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r390039999", "createdAt": "2020-03-10T00:56:39Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -406,6 +417,49 @@ void cancelEndpointDataWatch(String clusterName, EndpointWatcher watcher) {\n     }\n   }\n \n+  @Override\n+  void watchListenerData(int port, ListenerWatcher watcher) {\n+    checkState(configWatcher == null,\n+        \"ListenerWatcher cannot be set when ConfigWatcher set\");\n+    checkState(listenerWatcher == null, \"ListenerWatcher already registered\");\n+    listenerWatcher = checkNotNull(watcher, \"watcher\");\n+    checkArgument(port > 0, \"port needs to be > 0\");\n+    this.listenerPort = port;\n+    logger.log(XdsLogLevel.INFO, \"Started watching listener for port {0}\", port);\n+    if (rpcRetryTimer != null && rpcRetryTimer.isPending()) {\n+      // Currently in retry backoff.\n+      return;\n+    }\n+    if (adsStream == null) {\n+      startRpcStream();\n+    }\n+    updateNodeMetadataForListenerRequest(port);\n+    adsStream.sendXdsRequest(ADS_TYPE_URL_LDS, getListOfResourceNames(ldsResourceName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a23b3c4c1e7264664b64c655297ffaf84dd00d0"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA2OTEwMA==", "bodyText": "In this particular case you are correct: I can just use ImmutableList.of() or Collections.emptyList(). But calls to sendAckRequest and sendNackRequest  used ImmutableList.of(resourceName) which generates NPE when resourceName == null. So I used getListOfResourceNames(ldsResourceName) everywhere.", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r390069100", "createdAt": "2020-03-10T02:56:59Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -406,6 +417,49 @@ void cancelEndpointDataWatch(String clusterName, EndpointWatcher watcher) {\n     }\n   }\n \n+  @Override\n+  void watchListenerData(int port, ListenerWatcher watcher) {\n+    checkState(configWatcher == null,\n+        \"ListenerWatcher cannot be set when ConfigWatcher set\");\n+    checkState(listenerWatcher == null, \"ListenerWatcher already registered\");\n+    listenerWatcher = checkNotNull(watcher, \"watcher\");\n+    checkArgument(port > 0, \"port needs to be > 0\");\n+    this.listenerPort = port;\n+    logger.log(XdsLogLevel.INFO, \"Started watching listener for port {0}\", port);\n+    if (rpcRetryTimer != null && rpcRetryTimer.isPending()) {\n+      // Currently in retry backoff.\n+      return;\n+    }\n+    if (adsStream == null) {\n+      startRpcStream();\n+    }\n+    updateNodeMetadataForListenerRequest(port);\n+    adsStream.sendXdsRequest(ADS_TYPE_URL_LDS, getListOfResourceNames(ldsResourceName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzOTk5OQ=="}, "originalCommit": {"oid": "2a23b3c4c1e7264664b64c655297ffaf84dd00d0"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEyNjM3OQ==", "bodyText": "You can use empty list for sendAckRequest() and sendNackRequest() as well. getListOfResourceNames(ldsResourceName) does not make any sense to my previous implementation.", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r390126379", "createdAt": "2020-03-10T07:10:19Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -406,6 +417,49 @@ void cancelEndpointDataWatch(String clusterName, EndpointWatcher watcher) {\n     }\n   }\n \n+  @Override\n+  void watchListenerData(int port, ListenerWatcher watcher) {\n+    checkState(configWatcher == null,\n+        \"ListenerWatcher cannot be set when ConfigWatcher set\");\n+    checkState(listenerWatcher == null, \"ListenerWatcher already registered\");\n+    listenerWatcher = checkNotNull(watcher, \"watcher\");\n+    checkArgument(port > 0, \"port needs to be > 0\");\n+    this.listenerPort = port;\n+    logger.log(XdsLogLevel.INFO, \"Started watching listener for port {0}\", port);\n+    if (rpcRetryTimer != null && rpcRetryTimer.isPending()) {\n+      // Currently in retry backoff.\n+      return;\n+    }\n+    if (adsStream == null) {\n+      startRpcStream();\n+    }\n+    updateNodeMetadataForListenerRequest(port);\n+    adsStream.sendXdsRequest(ADS_TYPE_URL_LDS, getListOfResourceNames(ldsResourceName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzOTk5OQ=="}, "originalCommit": {"oid": "2a23b3c4c1e7264664b64c655297ffaf84dd00d0"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEyOTk3OA==", "bodyText": "removed method since only one place really needed it", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r390129978", "createdAt": "2020-03-10T07:22:24Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -406,6 +417,49 @@ void cancelEndpointDataWatch(String clusterName, EndpointWatcher watcher) {\n     }\n   }\n \n+  @Override\n+  void watchListenerData(int port, ListenerWatcher watcher) {\n+    checkState(configWatcher == null,\n+        \"ListenerWatcher cannot be set when ConfigWatcher set\");\n+    checkState(listenerWatcher == null, \"ListenerWatcher already registered\");\n+    listenerWatcher = checkNotNull(watcher, \"watcher\");\n+    checkArgument(port > 0, \"port needs to be > 0\");\n+    this.listenerPort = port;\n+    logger.log(XdsLogLevel.INFO, \"Started watching listener for port {0}\", port);\n+    if (rpcRetryTimer != null && rpcRetryTimer.isPending()) {\n+      // Currently in retry backoff.\n+      return;\n+    }\n+    if (adsStream == null) {\n+      startRpcStream();\n+    }\n+    updateNodeMetadataForListenerRequest(port);\n+    adsStream.sendXdsRequest(ADS_TYPE_URL_LDS, getListOfResourceNames(ldsResourceName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzOTk5OQ=="}, "originalCommit": {"oid": "2a23b3c4c1e7264664b64c655297ffaf84dd00d0"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzY2MDA2OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNzoxMzoxNlrOF0DemQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNzoxMzoxNlrOF0DemQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEyNzI1Nw==", "bodyText": "nit: include the exception in error message. See line 495.", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r390127257", "createdAt": "2020-03-10T07:13:16Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -605,6 +673,72 @@ private void handleLdsResponse(DiscoveryResponse ldsResponse) {\n     }\n   }\n \n+  private void handleLdsResponseForListener(DiscoveryResponse ldsResponse) {\n+    checkState(ldsResourceName == null && listenerPort > 0 && listenerWatcher != null,\n+        \"LDS request for ListenerWatcher was never sent!\");\n+\n+    // Unpack Listener messages.\n+    Listener requestedListener = null;\n+    logger.log(XdsLogLevel.DEBUG, \"Listener count: {0}\", ldsResponse.getResourcesCount());\n+    try {\n+      for (com.google.protobuf.Any res : ldsResponse.getResourcesList()) {\n+        Listener listener = res.unpack(Listener.class);\n+        logger.log(XdsLogLevel.DEBUG, \"Found listener {0}\", listener.toString());\n+        if (isRequestedListener(listener)) {\n+          requestedListener = listener;\n+          logger.log(XdsLogLevel.DEBUG, \"Requested listener found: {0}\", listener.getName());\n+        }\n+      }\n+    } catch (InvalidProtocolBufferException e) {\n+      adsStream.sendNackRequest(ADS_TYPE_URL_LDS, getListOfResourceNames(null),\n+          ldsResponse.getVersionInfo(), \"Broken LDS response.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a23b3c4c1e7264664b64c655297ffaf84dd00d0"}, "originalPosition": 202}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTc0Mzk4OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjo0NTowMlrOF0XnRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjo0ODo1MlrOF0XxjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1NzE1Ng==", "bodyText": "nit: this should be private", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r390457156", "createdAt": "2020-03-10T16:45:02Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -406,6 +417,41 @@ void cancelEndpointDataWatch(String clusterName, EndpointWatcher watcher) {\n     }\n   }\n \n+  @Override\n+  void watchListenerData(int port, ListenerWatcher watcher) {\n+    checkState(configWatcher == null,\n+        \"ListenerWatcher cannot be set when ConfigWatcher set\");\n+    checkState(listenerWatcher == null, \"ListenerWatcher already registered\");\n+    listenerWatcher = checkNotNull(watcher, \"watcher\");\n+    checkArgument(port > 0, \"port needs to be > 0\");\n+    this.listenerPort = port;\n+    logger.log(XdsLogLevel.INFO, \"Started watching listener for port {0}\", port);\n+    if (rpcRetryTimer != null && rpcRetryTimer.isPending()) {\n+      // Currently in retry backoff.\n+      return;\n+    }\n+    if (adsStream == null) {\n+      startRpcStream();\n+    }\n+    updateNodeMetadataForListenerRequest(port);\n+    adsStream.sendXdsRequest(ADS_TYPE_URL_LDS, ImmutableList.<String>of());\n+    ldsRespTimer =\n+        syncContext\n+            .schedule(\n+                new ListenerResourceFetchTimeoutTask(\":\" + port),\n+                INITIAL_RESOURCE_FETCH_TIMEOUT_SEC, TimeUnit.SECONDS, timeService);\n+  }\n+\n+  /** In case of Listener watcher metadata to be updated to include port. */\n+  void updateNodeMetadataForListenerRequest(int port) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bbf048782d3d9fc430854873b8aff68717ec7ee"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1OTc4OA==", "bodyText": "done", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r390459788", "createdAt": "2020-03-10T16:48:52Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -406,6 +417,41 @@ void cancelEndpointDataWatch(String clusterName, EndpointWatcher watcher) {\n     }\n   }\n \n+  @Override\n+  void watchListenerData(int port, ListenerWatcher watcher) {\n+    checkState(configWatcher == null,\n+        \"ListenerWatcher cannot be set when ConfigWatcher set\");\n+    checkState(listenerWatcher == null, \"ListenerWatcher already registered\");\n+    listenerWatcher = checkNotNull(watcher, \"watcher\");\n+    checkArgument(port > 0, \"port needs to be > 0\");\n+    this.listenerPort = port;\n+    logger.log(XdsLogLevel.INFO, \"Started watching listener for port {0}\", port);\n+    if (rpcRetryTimer != null && rpcRetryTimer.isPending()) {\n+      // Currently in retry backoff.\n+      return;\n+    }\n+    if (adsStream == null) {\n+      startRpcStream();\n+    }\n+    updateNodeMetadataForListenerRequest(port);\n+    adsStream.sendXdsRequest(ADS_TYPE_URL_LDS, ImmutableList.<String>of());\n+    ldsRespTimer =\n+        syncContext\n+            .schedule(\n+                new ListenerResourceFetchTimeoutTask(\":\" + port),\n+                INITIAL_RESOURCE_FETCH_TIMEOUT_SEC, TimeUnit.SECONDS, timeService);\n+  }\n+\n+  /** In case of Listener watcher metadata to be updated to include port. */\n+  void updateNodeMetadataForListenerRequest(int port) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1NzE1Ng=="}, "originalCommit": {"oid": "8bbf048782d3d9fc430854873b8aff68717ec7ee"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTc1OTIyOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjo0ODo0NVrOF0XxRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjo1MjowMVrOF0X53w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1OTcxNg==", "bodyText": "Why change this? When configWatcher is not null, ldsResourceName will never be null.", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r390459716", "createdAt": "2020-03-10T16:48:45Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -1021,7 +1147,8 @@ private void handleEdsResponse(DiscoveryResponse edsResponse) {\n     public void run() {\n       startRpcStream();\n       if (configWatcher != null) {\n-        adsStream.sendXdsRequest(ADS_TYPE_URL_LDS, ImmutableList.of(ldsResourceName));\n+        adsStream.sendXdsRequest(ADS_TYPE_URL_LDS, ldsResourceName != null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bbf048782d3d9fc430854873b8aff68717ec7ee"}, "originalPosition": 218}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ2MTkxOQ==", "bodyText": "You are right. I should have a separate if clause with listenerWatcher != null and use ListenerResourceFetchTimeoutTask. Will make that change and see if a test is needed", "url": "https://github.com/grpc/grpc-java/pull/6801#discussion_r390461919", "createdAt": "2020-03-10T16:52:01Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -1021,7 +1147,8 @@ private void handleEdsResponse(DiscoveryResponse edsResponse) {\n     public void run() {\n       startRpcStream();\n       if (configWatcher != null) {\n-        adsStream.sendXdsRequest(ADS_TYPE_URL_LDS, ImmutableList.of(ldsResourceName));\n+        adsStream.sendXdsRequest(ADS_TYPE_URL_LDS, ldsResourceName != null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1OTcxNg=="}, "originalCommit": {"oid": "8bbf048782d3d9fc430854873b8aff68717ec7ee"}, "originalPosition": 218}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2897, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}