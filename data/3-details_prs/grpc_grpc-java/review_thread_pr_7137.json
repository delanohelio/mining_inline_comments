{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MTY5ODc1", "number": 7137, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwMjozNzoyOVrOEGlBJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwMjozODo1N1rOEGlCNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MzMzNDEyOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/internal/sds/SdsProtocolNegotiators.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwMjozNzoyOVrOGldluQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjo0ODozMVrOGl33qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzNTI4OQ==", "bodyText": "does this need to run in an executor? it seems like it should be fine without it.", "url": "https://github.com/grpc/grpc-java/pull/7137#discussion_r441935289", "createdAt": "2020-06-18T02:37:29Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/SdsProtocolNegotiators.java", "diffHunk": "@@ -338,29 +344,49 @@ public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n       checkNotNull(grpcHandler, \"grpcHandler\");\n       this.grpcHandler = grpcHandler;\n       this.downstreamTlsContext = downstreamTlsContext;\n+      this.fallbackProtocolNegotiator = fallbackProtocolNegotiator;\n     }\n \n     @Override\n     protected void handlerAdded0(final ChannelHandlerContext ctx) {\n       final BufferReadsHandler bufferReads = new BufferReadsHandler();\n       ctx.pipeline().addBefore(ctx.name(), null, bufferReads);\n \n-      final SslContextProvider sslContextProvider =\n-              TlsContextManagerImpl.getInstance()\n-                      .findOrCreateServerSslContextProvider(downstreamTlsContext);\n-\n+      SslContextProvider sslContextProviderTemp = null;\n+      try {\n+        sslContextProviderTemp =\n+            TlsContextManagerImpl.getInstance()\n+                .findOrCreateServerSslContextProvider(downstreamTlsContext);\n+      } catch (Exception e) {\n+        if (fallbackProtocolNegotiator == null) {\n+          ctx.fireExceptionCaught(new CertStoreException(\"No certificate source found!\", e));\n+          return;\n+        }\n+        logger.log(Level.INFO, \"Using fallback for {0}\", ctx.channel().localAddress());\n+        // Delegate rest of handshake to fallback handler\n+        ctx.executor()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03db058d4f1e72e298d83648685e0b813c071df2"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk4ODIxOA==", "bodyText": "I had tried without the executor and I got the following exception. Probably because this was called inside handlerAdded0.\nio.netty.channel.ChannelPipelineException: io.grpc.xds.internal.sds.SdsProtocolNegotiators$ServerSdsHandler.handlerAdded() has thrown an exception; removed.\n\tat io.netty.channel.DefaultChannelPipeline.callHandlerAdded0(DefaultChannelPipeline.java:624)\n\tat io.netty.channel.DefaultChannelPipeline.replace(DefaultChannelPipeline.java:572)\n\tat io.netty.channel.DefaultChannelPipeline.replace(DefaultChannelPipeline.java:509)\n\tat io.grpc.xds.internal.sds.SdsProtocolNegotiators$HandlerPickerHandler.userEventTriggered(SdsProtocolNegotiators.java:308)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeUserEventTriggered(AbstractChannelHandlerContext.java:346)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeUserEventTriggered(AbstractChannelHandlerContext.java:332)\n...\nCaused by: java.lang.IllegalStateException: previous protocol negotiation event hasn't triggered\n\tat com.google.common.base.Preconditions.checkState(Preconditions.java:511)\n\tat io.grpc.netty.ProtocolNegotiators$ProtocolNegotiationHandler.fireProtocolNegotiationEvent(ProtocolNegotiators.java:765)\n\tat io.grpc.xds.internal.sds.SdsProtocolNegotiators$ServerSdsHandler.replaceHandler(SdsProtocolNegotiators.java:405)\n\tat io.grpc.xds.internal.sds.SdsProtocolNegotiators$ServerSdsHandler.handlerAdded0(SdsProtocolNegotiators.java:372)\n\tat io.grpc.netty.ProtocolNegotiators$ProtocolNegotiationHandler.handlerAdded(ProtocolNegotiators.java:726)\n\t... 36 more", "url": "https://github.com/grpc/grpc-java/pull/7137#discussion_r441988218", "createdAt": "2020-06-18T06:08:20Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/SdsProtocolNegotiators.java", "diffHunk": "@@ -338,29 +344,49 @@ public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n       checkNotNull(grpcHandler, \"grpcHandler\");\n       this.grpcHandler = grpcHandler;\n       this.downstreamTlsContext = downstreamTlsContext;\n+      this.fallbackProtocolNegotiator = fallbackProtocolNegotiator;\n     }\n \n     @Override\n     protected void handlerAdded0(final ChannelHandlerContext ctx) {\n       final BufferReadsHandler bufferReads = new BufferReadsHandler();\n       ctx.pipeline().addBefore(ctx.name(), null, bufferReads);\n \n-      final SslContextProvider sslContextProvider =\n-              TlsContextManagerImpl.getInstance()\n-                      .findOrCreateServerSslContextProvider(downstreamTlsContext);\n-\n+      SslContextProvider sslContextProviderTemp = null;\n+      try {\n+        sslContextProviderTemp =\n+            TlsContextManagerImpl.getInstance()\n+                .findOrCreateServerSslContextProvider(downstreamTlsContext);\n+      } catch (Exception e) {\n+        if (fallbackProtocolNegotiator == null) {\n+          ctx.fireExceptionCaught(new CertStoreException(\"No certificate source found!\", e));\n+          return;\n+        }\n+        logger.log(Level.INFO, \"Using fallback for {0}\", ctx.channel().localAddress());\n+        // Delegate rest of handshake to fallback handler\n+        ctx.executor()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzNTI4OQ=="}, "originalCommit": {"oid": "03db058d4f1e72e298d83648685e0b813c071df2"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM0NDU2MA==", "bodyText": "the problem here is you suppose to fire ProtocolNegotiationEvent when you received it from previous handler (unless it is the very first one). handlerAdded shouldn't just fire the PNE.", "url": "https://github.com/grpc/grpc-java/pull/7137#discussion_r442344560", "createdAt": "2020-06-18T16:14:47Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/SdsProtocolNegotiators.java", "diffHunk": "@@ -338,29 +344,49 @@ public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n       checkNotNull(grpcHandler, \"grpcHandler\");\n       this.grpcHandler = grpcHandler;\n       this.downstreamTlsContext = downstreamTlsContext;\n+      this.fallbackProtocolNegotiator = fallbackProtocolNegotiator;\n     }\n \n     @Override\n     protected void handlerAdded0(final ChannelHandlerContext ctx) {\n       final BufferReadsHandler bufferReads = new BufferReadsHandler();\n       ctx.pipeline().addBefore(ctx.name(), null, bufferReads);\n \n-      final SslContextProvider sslContextProvider =\n-              TlsContextManagerImpl.getInstance()\n-                      .findOrCreateServerSslContextProvider(downstreamTlsContext);\n-\n+      SslContextProvider sslContextProviderTemp = null;\n+      try {\n+        sslContextProviderTemp =\n+            TlsContextManagerImpl.getInstance()\n+                .findOrCreateServerSslContextProvider(downstreamTlsContext);\n+      } catch (Exception e) {\n+        if (fallbackProtocolNegotiator == null) {\n+          ctx.fireExceptionCaught(new CertStoreException(\"No certificate source found!\", e));\n+          return;\n+        }\n+        logger.log(Level.INFO, \"Using fallback for {0}\", ctx.channel().localAddress());\n+        // Delegate rest of handshake to fallback handler\n+        ctx.executor()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzNTI4OQ=="}, "originalCommit": {"oid": "03db058d4f1e72e298d83648685e0b813c071df2"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM2NTg2NA==", "bodyText": "Okay, fixed: by just calling replace to replace the current handler", "url": "https://github.com/grpc/grpc-java/pull/7137#discussion_r442365864", "createdAt": "2020-06-18T16:48:31Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/SdsProtocolNegotiators.java", "diffHunk": "@@ -338,29 +344,49 @@ public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n       checkNotNull(grpcHandler, \"grpcHandler\");\n       this.grpcHandler = grpcHandler;\n       this.downstreamTlsContext = downstreamTlsContext;\n+      this.fallbackProtocolNegotiator = fallbackProtocolNegotiator;\n     }\n \n     @Override\n     protected void handlerAdded0(final ChannelHandlerContext ctx) {\n       final BufferReadsHandler bufferReads = new BufferReadsHandler();\n       ctx.pipeline().addBefore(ctx.name(), null, bufferReads);\n \n-      final SslContextProvider sslContextProvider =\n-              TlsContextManagerImpl.getInstance()\n-                      .findOrCreateServerSslContextProvider(downstreamTlsContext);\n-\n+      SslContextProvider sslContextProviderTemp = null;\n+      try {\n+        sslContextProviderTemp =\n+            TlsContextManagerImpl.getInstance()\n+                .findOrCreateServerSslContextProvider(downstreamTlsContext);\n+      } catch (Exception e) {\n+        if (fallbackProtocolNegotiator == null) {\n+          ctx.fireExceptionCaught(new CertStoreException(\"No certificate source found!\", e));\n+          return;\n+        }\n+        logger.log(Level.INFO, \"Using fallback for {0}\", ctx.channel().localAddress());\n+        // Delegate rest of handshake to fallback handler\n+        ctx.executor()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzNTI4OQ=="}, "originalCommit": {"oid": "03db058d4f1e72e298d83648685e0b813c071df2"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MzMzNjg1OnYy", "diffSide": "RIGHT", "path": "xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwMjozODo1N1rOGldnWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNjoxMToyN1rOGlg4sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzNTcwNA==", "bodyText": "indentations are off in this test.", "url": "https://github.com/grpc/grpc-java/pull/7137#discussion_r441935704", "createdAt": "2020-06-18T02:38:57Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java", "diffHunk": "@@ -89,6 +89,18 @@ public void plaintextClientServer() throws IOException, URISyntaxException {\n     assertThat(unaryRpc(\"buddy\", blockingStub)).isEqualTo(\"Hello buddy\");\n   }\n \n+  @Test\n+  public void plaintextClientServer_withDefaultTlsContext() throws IOException, URISyntaxException {\n+    DownstreamTlsContext defaultTlsContext =\n+            EnvoyServerProtoData.DownstreamTlsContext.fromEnvoyProtoDownstreamTlsContext(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03db058d4f1e72e298d83648685e0b813c071df2"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk4OTI5OQ==", "bodyText": "fixed", "url": "https://github.com/grpc/grpc-java/pull/7137#discussion_r441989299", "createdAt": "2020-06-18T06:11:27Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/test/java/io/grpc/xds/XdsSdsClientServerTest.java", "diffHunk": "@@ -89,6 +89,18 @@ public void plaintextClientServer() throws IOException, URISyntaxException {\n     assertThat(unaryRpc(\"buddy\", blockingStub)).isEqualTo(\"Hello buddy\");\n   }\n \n+  @Test\n+  public void plaintextClientServer_withDefaultTlsContext() throws IOException, URISyntaxException {\n+    DownstreamTlsContext defaultTlsContext =\n+            EnvoyServerProtoData.DownstreamTlsContext.fromEnvoyProtoDownstreamTlsContext(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzNTcwNA=="}, "originalCommit": {"oid": "03db058d4f1e72e298d83648685e0b813c071df2"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2550, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}