{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczNTE3NDQ2", "number": 7359, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMjoxODozNlrOEcRp_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzozNzoyOFrOEfAvHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDg0ODYzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/grpc/internal/ManagedChannelImplBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMjoxODozNlrOHGtI_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMjoxODozNlrOHGtI_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc5MzA4Nw==", "bodyText": "Note: this and corresponding methods of InternalNettyChannelBuilder are here only to smooth out the transition of google internal classes. To be removed when they are updated to use disableCheckAuthority().", "url": "https://github.com/grpc/grpc-java/pull/7359#discussion_r476793087", "createdAt": "2020-08-25T22:18:36Z", "author": {"login": "sergiitk"}, "path": "core/src/main/java/io/grpc/internal/ManagedChannelImplBuilder.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.internal;\n+\n+import com.google.common.base.Preconditions;\n+import io.grpc.ManagedChannelBuilder;\n+import java.net.SocketAddress;\n+import java.util.concurrent.Executor;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Default managed channel builder, for usage in Transport implementations.\n+ */\n+public final class ManagedChannelImplBuilder\n+    extends AbstractManagedChannelImplBuilder<ManagedChannelImplBuilder> {\n+\n+  private boolean authorityCheckerDisabled;\n+  @Deprecated\n+  @Nullable\n+  private OverrideAuthorityChecker authorityChecker;\n+\n+  /**\n+   * An interface for Transport implementors to provide the {@link ClientTransportFactory}\n+   * appropriate for the channel.\n+   */\n+  public interface ClientTransportFactoryBuilder {\n+    ClientTransportFactory buildClientTransportFactory();\n+  }\n+\n+  /**\n+   * An interface for Transport implementors to provide a default port to {@link\n+   * io.grpc.NameResolver} for use in cases where the target string doesn't include a port. The\n+   * default implementation returns {@link GrpcUtil#DEFAULT_PORT_SSL}.\n+   */\n+  public interface ChannelBuilderDefaultPortProvider {\n+    int getDefaultPort();\n+  }\n+\n+  private class ManagedChannelDefaultPortProvider implements ChannelBuilderDefaultPortProvider {\n+    @Override\n+    public int getDefaultPort() {\n+      return ManagedChannelImplBuilder.super.getDefaultPort();\n+    }\n+  }\n+\n+  private final ClientTransportFactoryBuilder clientTransportFactoryBuilder;\n+  private final ChannelBuilderDefaultPortProvider channelBuilderDefaultPortProvider;\n+\n+  /**\n+   * Creates a new managed channel builder with a target string, which can be either a valid {@link\n+   * io.grpc.NameResolver}-compliant URI, or an authority string. Transport implementors must\n+   * provide client transport factory builder, and may set custom channel default port provider.\n+   */\n+  public ManagedChannelImplBuilder(String target,\n+      ClientTransportFactoryBuilder clientTransportFactoryBuilder,\n+      @Nullable ChannelBuilderDefaultPortProvider channelBuilderDefaultPortProvider) {\n+    super(target);\n+    this.clientTransportFactoryBuilder = Preconditions.checkNotNull(clientTransportFactoryBuilder,\n+        \"clientTransportFactoryBuilder cannot be null\");\n+\n+    if (channelBuilderDefaultPortProvider != null) {\n+      this.channelBuilderDefaultPortProvider = channelBuilderDefaultPortProvider;\n+    } else {\n+      this.channelBuilderDefaultPortProvider = new ManagedChannelDefaultPortProvider();\n+    }\n+  }\n+\n+  /**\n+   * Creates a new managed channel builder with the given server address, authority string of the\n+   * channel. Transport implementors must provide client transport factory builder, and may set\n+   * custom channel default port provider.\n+   */\n+  public ManagedChannelImplBuilder(SocketAddress directServerAddress, String authority,\n+      ClientTransportFactoryBuilder clientTransportFactoryBuilder,\n+      @Nullable ChannelBuilderDefaultPortProvider channelBuilderDefaultPortProvider) {\n+    super(directServerAddress, authority);\n+    this.clientTransportFactoryBuilder = Preconditions.checkNotNull(clientTransportFactoryBuilder,\n+        \"clientTransportFactoryBuilder cannot be null\");\n+\n+    if (channelBuilderDefaultPortProvider != null) {\n+      this.channelBuilderDefaultPortProvider = channelBuilderDefaultPortProvider;\n+    } else {\n+      this.channelBuilderDefaultPortProvider = new ManagedChannelDefaultPortProvider();\n+    }\n+  }\n+\n+  @Override\n+  protected ClientTransportFactory buildTransportFactory() {\n+    return clientTransportFactoryBuilder.buildClientTransportFactory();\n+  }\n+\n+  @Override\n+  protected int getDefaultPort() {\n+    return channelBuilderDefaultPortProvider.getDefaultPort();\n+  }\n+\n+  /** Disable the check whether the authority is valid. */\n+  public ManagedChannelImplBuilder disableCheckAuthority() {\n+    authorityCheckerDisabled = true;\n+    return this;\n+  }\n+\n+  /** Enable previously disabled authority check. */\n+  public ManagedChannelImplBuilder enableCheckAuthority() {\n+    authorityCheckerDisabled = false;\n+    return this;\n+  }\n+\n+  @Deprecated\n+  public interface OverrideAuthorityChecker {\n+    String checkAuthority(String authority);\n+  }\n+\n+  @Deprecated\n+  public void overrideAuthorityChecker(@Nullable OverrideAuthorityChecker authorityChecker) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7481c2bc79799a6fb1758b361f9c35798e19c139"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTU3MjQzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/grpc/inprocess/InProcessChannelBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOTo1NjoyNFrOHHbiew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOTo1NjoyNFrOHHbiew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU1MzI3NQ==", "bodyText": "nit: delete this line?", "url": "https://github.com/grpc/grpc-java/pull/7359#discussion_r477553275", "createdAt": "2020-08-26T19:56:24Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/inprocess/InProcessChannelBuilder.java", "diffHunk": "@@ -67,18 +70,36 @@ public static InProcessChannelBuilder forAddress(String name, int port) {\n     throw new UnsupportedOperationException(\"call forName() instead\");\n   }\n \n+  private final ManagedChannelImplBuilder managedChannelImplBuilder;\n   private final String name;\n   private ScheduledExecutorService scheduledExecutorService;\n   private int maxInboundMetadataSize = Integer.MAX_VALUE;\n   private boolean transportIncludeStatusCause = false;\n \n   private InProcessChannelBuilder(String name) {\n-    super(new InProcessSocketAddress(name), \"localhost\");\n+    super();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7481c2bc79799a6fb1758b361f9c35798e19c139"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTU5NTI1OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/io/grpc/internal/ManagedChannelImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMDowMzowNVrOHHbwqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMDowMzowNVrOHHbwqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU1NjkwNw==", "bodyText": "It'd probably good to continue setting this where it was previously. That way if it is used accidentally before it is configured it will cause a NullPointerException. (Or you can move its configuration here, but that is probably opening up trouble given this code uses @Mock.)", "url": "https://github.com/grpc/grpc-java/pull/7359#discussion_r477556907", "createdAt": "2020-08-26T20:03:05Z", "author": {"login": "ejona86"}, "path": "core/src/test/java/io/grpc/internal/ManagedChannelImplTest.java", "diffHunk": "@@ -269,7 +271,17 @@ public String getPolicyName() {\n   private CallCredentials creds;\n   @Mock\n   private Executor offloadExecutor;\n-  private ChannelBuilder channelBuilder;\n+  private ManagedChannelImplBuilder channelBuilder = new ManagedChannelImplBuilder(TARGET,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7481c2bc79799a6fb1758b361f9c35798e19c139"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTQ2MTgwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/grpc/internal/ManagedChannelImplBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzoxNjo1NFrOHLAnBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzoxNjo1NFrOHLAnBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMwNjM3NQ==", "bodyText": "We normally don't bother too much with the strings here. We include them because they are useful as line numbers commonly can't be trusted. But generally we just repeat the variable name: \"clientTransportFactoryBuilder\". It's fine to have more text, but it adds little value for the effort and how often we have to write code like this.\nFeel free to leave this as-is, but you may use the simpler string in the future.", "url": "https://github.com/grpc/grpc-java/pull/7359#discussion_r481306375", "createdAt": "2020-09-01T17:16:54Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/internal/ManagedChannelImplBuilder.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.internal;\n+\n+import com.google.common.base.Preconditions;\n+import io.grpc.ManagedChannelBuilder;\n+import java.net.SocketAddress;\n+import java.util.concurrent.Executor;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Default managed channel builder, for usage in Transport implementations.\n+ */\n+public final class ManagedChannelImplBuilder\n+    extends AbstractManagedChannelImplBuilder<ManagedChannelImplBuilder> {\n+\n+  private boolean authorityCheckerDisabled;\n+  @Deprecated\n+  @Nullable\n+  private OverrideAuthorityChecker authorityChecker;\n+\n+  /**\n+   * An interface for Transport implementors to provide the {@link ClientTransportFactory}\n+   * appropriate for the channel.\n+   */\n+  public interface ClientTransportFactoryBuilder {\n+    ClientTransportFactory buildClientTransportFactory();\n+  }\n+\n+  /**\n+   * An interface for Transport implementors to provide a default port to {@link\n+   * io.grpc.NameResolver} for use in cases where the target string doesn't include a port. The\n+   * default implementation returns {@link GrpcUtil#DEFAULT_PORT_SSL}.\n+   */\n+  public interface ChannelBuilderDefaultPortProvider {\n+    int getDefaultPort();\n+  }\n+\n+  private class ManagedChannelDefaultPortProvider implements ChannelBuilderDefaultPortProvider {\n+    @Override\n+    public int getDefaultPort() {\n+      return ManagedChannelImplBuilder.super.getDefaultPort();\n+    }\n+  }\n+\n+  private final ClientTransportFactoryBuilder clientTransportFactoryBuilder;\n+  private final ChannelBuilderDefaultPortProvider channelBuilderDefaultPortProvider;\n+\n+  /**\n+   * Creates a new managed channel builder with a target string, which can be either a valid {@link\n+   * io.grpc.NameResolver}-compliant URI, or an authority string. Transport implementors must\n+   * provide client transport factory builder, and may set custom channel default port provider.\n+   */\n+  public ManagedChannelImplBuilder(String target,\n+      ClientTransportFactoryBuilder clientTransportFactoryBuilder,\n+      @Nullable ChannelBuilderDefaultPortProvider channelBuilderDefaultPortProvider) {\n+    super(target);\n+    this.clientTransportFactoryBuilder = Preconditions.checkNotNull(clientTransportFactoryBuilder,\n+        \"clientTransportFactoryBuilder cannot be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7481c2bc79799a6fb1758b361f9c35798e19c139"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTQ5NTY3OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/io/grpc/internal/ServiceConfigErrorHandlingTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzoyNjoxMlrOHLA74g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzoyNjoxMlrOHLA74g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxMTcxNA==", "bodyText": "It seems a hard-coded port is fairly common. It might be fair to create a ManagedChannelImplBuilder.FixedPortProvider (or as a top-level class in core/src/test/io/grpc/internal) which just accepts the port in its constructor. Then you'd use new FixedPortProvider(DEFAULT_PORT).\nNot important, but Fixed* classes for stuff like this is semi-common in our code.", "url": "https://github.com/grpc/grpc-java/pull/7359#discussion_r481311714", "createdAt": "2020-09-01T17:26:12Z", "author": {"login": "ejona86"}, "path": "core/src/test/java/io/grpc/internal/ServiceConfigErrorHandlingTest.java", "diffHunk": "@@ -153,7 +155,18 @@ public ConfigOrError parseLoadBalancingPolicyConfig(\n   private ObjectPool<Executor> balancerRpcExecutorPool;\n   @Mock\n   private Executor blockingExecutor;\n-  private ChannelBuilder channelBuilder;\n+\n+  private ManagedChannelImplBuilder channelBuilder = new ManagedChannelImplBuilder(TARGET,\n+      new ClientTransportFactoryBuilder() {\n+        @Override public ClientTransportFactory buildClientTransportFactory() {\n+          throw new UnsupportedOperationException();\n+        }\n+      },\n+      new ChannelBuilderDefaultPortProvider() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7481c2bc79799a6fb1758b361f9c35798e19c139"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTUwMTk1OnYy", "diffSide": "RIGHT", "path": "cronet/src/main/java/io/grpc/cronet/CronetChannelBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzoyODowNFrOHLA__g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzoyODowNFrOHLA__g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxMjc2Ng==", "bodyText": "nit: remove? Ditto elsewhere.", "url": "https://github.com/grpc/grpc-java/pull/7359#discussion_r481312766", "createdAt": "2020-09-01T17:28:04Z", "author": {"login": "ejona86"}, "path": "cronet/src/main/java/io/grpc/cronet/CronetChannelBuilder.java", "diffHunk": "@@ -103,12 +108,30 @@ public static CronetChannelBuilder forAddress(String name, int port) {\n   private int trafficStatsUid;\n \n   private CronetChannelBuilder(String host, int port, CronetEngine cronetEngine) {\n-    super(\n+    super();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7481c2bc79799a6fb1758b361f9c35798e19c139"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTUwOTk5OnYy", "diffSide": "RIGHT", "path": "interop-testing/src/main/java/io/grpc/testing/integration/TestServiceClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzozMDoxOFrOHLBFMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzozMDoxOFrOHLBFMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxNDA5Nw==", "bodyText": "Make some mention of setStatsEnabled() here, so it is clearer the two lines are related. It'd probably be fine to duplicate the builder.intercept(createCensusStatsClientInterceptor()); in both the okhttp and netty paths to keep the two lines together. But separate is fine, as long as we point out they are related.", "url": "https://github.com/grpc/grpc-java/pull/7359#discussion_r481314097", "createdAt": "2020-09-01T17:30:18Z", "author": {"login": "ejona86"}, "path": "interop-testing/src/main/java/io/grpc/testing/integration/TestServiceClient.java", "diffHunk": "@@ -449,10 +451,10 @@ private void runTest(TestCases testCase) throws Exception {\n         if (fullStreamDecompression) {\n           okBuilder.enableFullStreamDecompression();\n         }\n+        InternalOkHttpChannelBuilder.setStatsEnabled(okBuilder, false);\n         builder = okBuilder;\n       }\n-      // Disable the default census stats interceptor, use testing interceptor instead.\n-      io.grpc.internal.TestingAccessor.setStatsEnabled(builder, false);\n+      // Use testing interceptor instead.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7481c2bc79799a6fb1758b361f9c35798e19c139"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTUzMzc1OnYy", "diffSide": "RIGHT", "path": "netty/src/test/java/io/grpc/netty/NettyChannelBuilderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzozNzoyOFrOHLBUbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzozNzoyOFrOHLBUbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxNzk5Ng==", "bodyText": "Instead, you can mark this method as @Deprecated. That can be a bit more clear that we planned on deleting this method (even if it is a test). Not a big deal in a test though.", "url": "https://github.com/grpc/grpc-java/pull/7359#discussion_r481317996", "createdAt": "2020-09-01T17:37:28Z", "author": {"login": "ejona86"}, "path": "netty/src/test/java/io/grpc/netty/NettyChannelBuilderTest.java", "diffHunk": "@@ -92,14 +92,35 @@ private void overrideAuthorityIsReadableHelper(NettyChannelBuilder builder,\n   }\n \n   @Test\n+  @SuppressWarnings(\"deprecation\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7481c2bc79799a6fb1758b361f9c35798e19c139"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2497, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}