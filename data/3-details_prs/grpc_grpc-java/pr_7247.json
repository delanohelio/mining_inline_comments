{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2MDQyNzY3", "number": 7247, "title": "xds: first part of MeshCaCertificateProvider", "bodyText": "", "createdAt": "2020-07-24T02:32:28Z", "url": "https://github.com/grpc/grpc-java/pull/7247", "merged": true, "mergeCommit": {"oid": "06ca927a649c84fb3fc4b6c82aa7695bf3edf728"}, "closed": true, "closedAt": "2020-07-29T16:10:03Z", "author": {"login": "sanjaypujare"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc36j4QAH2gAyNDU2MDQyNzY3OmQzYmQ2ZTM2MzMyMjc4ZDIyNTNmNzAxYzY5ODFkYTYxOWNiNGE5ZjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5tJqjgFqTQ1NzY2MzE5OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d3bd6e36332278d2253f701c6981da619cb4a9f5", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/d3bd6e36332278d2253f701c6981da619cb4a9f5", "committedDate": "2020-07-24T02:25:36Z", "message": "xds: first part of MeshCaCertificateProvider"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2ODEwODY0", "url": "https://github.com/grpc/grpc-java/pull/7247#pullrequestreview-456810864", "createdAt": "2020-07-28T16:33:27Z", "commit": {"oid": "d3bd6e36332278d2253f701c6981da619cb4a9f5"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNjozMzoyN1rOG4U-QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNzo1MzozNFrOG4X89g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcxNzA1Ng==", "bodyText": "MeshCaChannelFactory to be more specific?", "url": "https://github.com/grpc/grpc-java/pull/7247#discussion_r461717056", "createdAt": "2020-07-28T16:33:27Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/internal/certprovider/MeshCaCertificateProvider.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.certprovider;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.auth.oauth2.GoogleCredentials;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.internal.BackoffPolicy;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/** Implementation of {@link CertificateProvider} for the Google Mesh CA. */\n+final class MeshCaCertificateProvider extends CertificateProvider {\n+  private static final Logger logger = Logger.getLogger(MeshCaCertificateProvider.class.getName());\n+\n+  protected MeshCaCertificateProvider(DistributorWatcher watcher, boolean notifyCertUpdates,\n+      String meshCaUrl, String zone, long validitySeconds,\n+      int keySize, String alg, String signatureAlg, ChannelFactory channelFactory,\n+      BackoffPolicy.Provider backoffPolicyProvider, long renewalGracePeriodSeconds,\n+      int maxRetryAttempts, GoogleCredentials oauth2Creds) {\n+    super(watcher, notifyCertUpdates);\n+  }\n+\n+  @Override\n+  public void start() {\n+    // TODO implement\n+  }\n+\n+  @Override\n+  public void close() {\n+    // TODO implement\n+  }\n+\n+  /** Factory for creating channels to MeshCA sever. */\n+  abstract static class ChannelFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3bd6e36332278d2253f701c6981da619cb4a9f5"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcxOTQyMQ==", "bodyText": "This channel just use the default credential?", "url": "https://github.com/grpc/grpc-java/pull/7247#discussion_r461719421", "createdAt": "2020-07-28T16:37:21Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/internal/certprovider/MeshCaCertificateProvider.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.certprovider;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.auth.oauth2.GoogleCredentials;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.internal.BackoffPolicy;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/** Implementation of {@link CertificateProvider} for the Google Mesh CA. */\n+final class MeshCaCertificateProvider extends CertificateProvider {\n+  private static final Logger logger = Logger.getLogger(MeshCaCertificateProvider.class.getName());\n+\n+  protected MeshCaCertificateProvider(DistributorWatcher watcher, boolean notifyCertUpdates,\n+      String meshCaUrl, String zone, long validitySeconds,\n+      int keySize, String alg, String signatureAlg, ChannelFactory channelFactory,\n+      BackoffPolicy.Provider backoffPolicyProvider, long renewalGracePeriodSeconds,\n+      int maxRetryAttempts, GoogleCredentials oauth2Creds) {\n+    super(watcher, notifyCertUpdates);\n+  }\n+\n+  @Override\n+  public void start() {\n+    // TODO implement\n+  }\n+\n+  @Override\n+  public void close() {\n+    // TODO implement\n+  }\n+\n+  /** Factory for creating channels to MeshCA sever. */\n+  abstract static class ChannelFactory {\n+\n+    private static final ChannelFactory DEFAULT_INSTANCE =\n+        new ChannelFactory() {\n+\n+          /** Creates a channel to the URL in the given list. */\n+          @Override\n+          ManagedChannel createChannel(String serverUri) {\n+            checkArgument(serverUri != null && !serverUri.isEmpty(), \"serverUri is null/empty!\");\n+            logger.log(Level.INFO, \"Creating channel to {0}\", serverUri);\n+\n+            ManagedChannelBuilder<?> channelBuilder = ManagedChannelBuilder.forTarget(serverUri);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3bd6e36332278d2253f701c6981da619cb4a9f5"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcyMjI2Mw==", "bodyText": "There are too many arguments, so what about using Builder instead of Factory?", "url": "https://github.com/grpc/grpc-java/pull/7247#discussion_r461722263", "createdAt": "2020-07-28T16:42:04Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/internal/certprovider/MeshCaCertificateProvider.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.certprovider;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.auth.oauth2.GoogleCredentials;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.internal.BackoffPolicy;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/** Implementation of {@link CertificateProvider} for the Google Mesh CA. */\n+final class MeshCaCertificateProvider extends CertificateProvider {\n+  private static final Logger logger = Logger.getLogger(MeshCaCertificateProvider.class.getName());\n+\n+  protected MeshCaCertificateProvider(DistributorWatcher watcher, boolean notifyCertUpdates,\n+      String meshCaUrl, String zone, long validitySeconds,\n+      int keySize, String alg, String signatureAlg, ChannelFactory channelFactory,\n+      BackoffPolicy.Provider backoffPolicyProvider, long renewalGracePeriodSeconds,\n+      int maxRetryAttempts, GoogleCredentials oauth2Creds) {\n+    super(watcher, notifyCertUpdates);\n+  }\n+\n+  @Override\n+  public void start() {\n+    // TODO implement\n+  }\n+\n+  @Override\n+  public void close() {\n+    // TODO implement\n+  }\n+\n+  /** Factory for creating channels to MeshCA sever. */\n+  abstract static class ChannelFactory {\n+\n+    private static final ChannelFactory DEFAULT_INSTANCE =\n+        new ChannelFactory() {\n+\n+          /** Creates a channel to the URL in the given list. */\n+          @Override\n+          ManagedChannel createChannel(String serverUri) {\n+            checkArgument(serverUri != null && !serverUri.isEmpty(), \"serverUri is null/empty!\");\n+            logger.log(Level.INFO, \"Creating channel to {0}\", serverUri);\n+\n+            ManagedChannelBuilder<?> channelBuilder = ManagedChannelBuilder.forTarget(serverUri);\n+            return channelBuilder.keepAliveTime(1, TimeUnit.MINUTES).build();\n+          }\n+        };\n+\n+    static ChannelFactory getInstance() {\n+      return DEFAULT_INSTANCE;\n+    }\n+\n+    /**\n+     * Creates a channel to the server.\n+     */\n+    abstract ManagedChannel createChannel(String serverUri);\n+  }\n+\n+  /** Factory for creating channels to MeshCA sever. */\n+  abstract static class Factory {\n+    private static final Factory DEFAULT_INSTANCE =\n+        new Factory() {\n+\n+          @Override\n+          MeshCaCertificateProvider create(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3bd6e36332278d2253f701c6981da619cb4a9f5"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc2NTg3OA==", "bodyText": "private?", "url": "https://github.com/grpc/grpc-java/pull/7247#discussion_r461765878", "createdAt": "2020-07-28T17:53:34Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/internal/certprovider/MeshCaCertificateProviderProvider.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.certprovider;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.internal.BackoffPolicy;\n+import io.grpc.internal.ExponentialBackoffPolicy;\n+import io.grpc.xds.internal.sts.StsCredentials;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Provider of {@link CertificateProvider}s. Implemented by the implementer of the plugin. We may\n+ * move this out of the internal package and make this an official API in the future.\n+ */\n+final class MeshCaCertificateProviderProvider implements CertificateProviderProvider {\n+\n+  private static final Logger logger = Logger\n+      .getLogger(MeshCaCertificateProviderProvider.class.getName());\n+\n+  private static final String MESHCA_URL_KEY = \"meshCaUrl\";\n+  private static final String RPC_TIMEOUT_SECONDS_KEY = \"rpcTimeoutSeconds\";\n+  private static final String GKECLUSTER_URL_KEY = \"gkeClusterUrl\";\n+  private static final String CERT_VALIDITY_SECONDS_KEY = \"certValiditySeconds\";\n+  private static final String RENEWAL_GRACE_PERIOD_SECONDS_KEY = \"renewalGracePeriodSeconds\";\n+  private static final String KEY_ALGO_KEY = \"keyAlgo\";  // aka keyType\n+  private static final String KEY_SIZE_KEY = \"keySize\";\n+  private static final String SIGNATURE_ALGO_KEY = \"signatureAlgo\";\n+  private static final String MAX_RETRY_ATTEMPTS_KEY = \"maxRetryAttempts\";\n+  private static final String STS_URL_KEY = \"stsUrl\";\n+  private static final String GKE_SA_JWT_LOCATION_KEY = \"gkeSaJwtLocation\";\n+\n+  static final String MESHCA_URL_DEFAULT = \"meshca.googleapis.com\";\n+  static final long RPC_TIMEOUT_SECONDS_DEFAULT = 5L;\n+  static final long CERT_VALIDITY_SECONDS_DEFAULT = 9L * 3600L; // 9 hours\n+  static final long RENEWAL_GRACE_PERIOD_SECONDS_DEFAULT = 1L * 3600L; // 1 hour\n+  static final String KEY_ALGO_DEFAULT = \"RSA\";  // aka keyType\n+  static final int KEY_SIZE_DEFAULT = 2048;\n+  static final String SIGNATURE_ALGO_DEFAULT = \"SHA256withRSA\";\n+  static final int MAX_RETRY_ATTEMPTS_DEFAULT = 3;\n+  static final String STS_URL_DEFAULT = \"https://securetoken.googleapis.com/v1/identitybindingtoken\";\n+\n+  private static final Pattern CLUSTER_URL_PATTERN = Pattern\n+      .compile(\".*/projects/(.*)/locations/(.*)/clusters/.*\");\n+\n+  private static final String TRUST_DOMAIN_SUFFIX = \".svc.id.goog\";\n+  private static final String AUDIENCE_PREFIX = \"identitynamespace:\";\n+  static final String MESH_CA_NAME = \"meshCA\";\n+\n+  static {\n+    try {\n+      CertificateProviderRegistry.getInstance()\n+          .register(\n+              new MeshCaCertificateProviderProvider(\n+                  StsCredentials.Factory.getInstance(),\n+                  MeshCaCertificateProvider.ChannelFactory.getInstance(),\n+                  new ExponentialBackoffPolicy.Provider(),\n+                  MeshCaCertificateProvider.Factory.getInstance())\n+        );\n+    } catch (Throwable t) {\n+      logger.log(Level.SEVERE, \"Registering MeshCaCertificateProviderProvider\", t);\n+    }\n+  }\n+\n+  final StsCredentials.Factory stsCredentialsFactory;\n+  final MeshCaCertificateProvider.ChannelFactory channelFactory;\n+  final BackoffPolicy.Provider backoffPolicyProvider;\n+  final MeshCaCertificateProvider.Factory meshCaCertificateProviderFactory;\n+\n+  @VisibleForTesting\n+  MeshCaCertificateProviderProvider(StsCredentials.Factory stsCredentialsFactory,\n+      MeshCaCertificateProvider.ChannelFactory channelFactory,\n+      BackoffPolicy.Provider backoffPolicyProvider,\n+      MeshCaCertificateProvider.Factory meshCaCertificateProviderFactory) {\n+    this.stsCredentialsFactory = stsCredentialsFactory;\n+    this.channelFactory = channelFactory;\n+    this.backoffPolicyProvider = backoffPolicyProvider;\n+    this.meshCaCertificateProviderFactory = meshCaCertificateProviderFactory;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return MESH_CA_NAME;\n+  }\n+\n+  @Override\n+  public CertificateProvider createCertificateProvider(\n+      Object config, CertificateProvider.DistributorWatcher watcher, boolean notifyCertUpdates) {\n+\n+    Config configObj = validateAndTranslateConfig(config);\n+\n+    // Construct audience from project and gkeClusterUrl\n+    String audience =\n+        AUDIENCE_PREFIX + configObj.project + TRUST_DOMAIN_SUFFIX + \":\" + configObj.gkeClusterUrl;\n+    StsCredentials stsCredentials = stsCredentialsFactory\n+        .create(configObj.stsUrl, audience, configObj.gkeSaJwtLocation);\n+\n+    return meshCaCertificateProviderFactory.create(watcher, notifyCertUpdates, configObj.meshCaUrl,\n+        configObj.zone,\n+        configObj.certValiditySeconds, configObj.keySize, configObj.keyAlgo,\n+        configObj.signatureAlgo,\n+        channelFactory, backoffPolicyProvider,\n+        configObj.renewalGracePeriodSeconds, configObj.maxRetryAttempts, stsCredentials);\n+  }\n+\n+  static Config validateAndTranslateConfig(Object config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3bd6e36332278d2253f701c6981da619cb4a9f5"}, "originalPosition": 127}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf9e4483f528417eab7f4fc7a585c2c4198af837", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/bf9e4483f528417eab7f4fc7a585c2c4198af837", "committedDate": "2020-07-28T20:17:47Z", "message": "address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MTg0ODM4", "url": "https://github.com/grpc/grpc-java/pull/7247#pullrequestreview-457184838", "createdAt": "2020-07-29T04:24:46Z", "commit": {"oid": "bf9e4483f528417eab7f4fc7a585c2c4198af837"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNDoyNDo0NlrOG4oERQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNDoyNDo0NlrOG4oERQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAyOTg5Mw==", "bodyText": "What's the possible cause of throwable here?", "url": "https://github.com/grpc/grpc-java/pull/7247#discussion_r462029893", "createdAt": "2020-07-29T04:24:46Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/internal/certprovider/MeshCaCertificateProviderProvider.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.certprovider;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.internal.BackoffPolicy;\n+import io.grpc.internal.ExponentialBackoffPolicy;\n+import io.grpc.xds.internal.sts.StsCredentials;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Provider of {@link CertificateProvider}s. Implemented by the implementer of the plugin. We may\n+ * move this out of the internal package and make this an official API in the future.\n+ */\n+final class MeshCaCertificateProviderProvider implements CertificateProviderProvider {\n+\n+  private static final Logger logger = Logger\n+      .getLogger(MeshCaCertificateProviderProvider.class.getName());\n+\n+  private static final String MESHCA_URL_KEY = \"meshCaUrl\";\n+  private static final String RPC_TIMEOUT_SECONDS_KEY = \"rpcTimeoutSeconds\";\n+  private static final String GKECLUSTER_URL_KEY = \"gkeClusterUrl\";\n+  private static final String CERT_VALIDITY_SECONDS_KEY = \"certValiditySeconds\";\n+  private static final String RENEWAL_GRACE_PERIOD_SECONDS_KEY = \"renewalGracePeriodSeconds\";\n+  private static final String KEY_ALGO_KEY = \"keyAlgo\";  // aka keyType\n+  private static final String KEY_SIZE_KEY = \"keySize\";\n+  private static final String SIGNATURE_ALGO_KEY = \"signatureAlgo\";\n+  private static final String MAX_RETRY_ATTEMPTS_KEY = \"maxRetryAttempts\";\n+  private static final String STS_URL_KEY = \"stsUrl\";\n+  private static final String GKE_SA_JWT_LOCATION_KEY = \"gkeSaJwtLocation\";\n+\n+  static final String MESHCA_URL_DEFAULT = \"meshca.googleapis.com\";\n+  static final long RPC_TIMEOUT_SECONDS_DEFAULT = 5L;\n+  static final long CERT_VALIDITY_SECONDS_DEFAULT = 9L * 3600L; // 9 hours\n+  static final long RENEWAL_GRACE_PERIOD_SECONDS_DEFAULT = 1L * 3600L; // 1 hour\n+  static final String KEY_ALGO_DEFAULT = \"RSA\";  // aka keyType\n+  static final int KEY_SIZE_DEFAULT = 2048;\n+  static final String SIGNATURE_ALGO_DEFAULT = \"SHA256withRSA\";\n+  static final int MAX_RETRY_ATTEMPTS_DEFAULT = 3;\n+  static final String STS_URL_DEFAULT = \"https://securetoken.googleapis.com/v1/identitybindingtoken\";\n+\n+  private static final Pattern CLUSTER_URL_PATTERN = Pattern\n+      .compile(\".*/projects/(.*)/locations/(.*)/clusters/.*\");\n+\n+  private static final String TRUST_DOMAIN_SUFFIX = \".svc.id.goog\";\n+  private static final String AUDIENCE_PREFIX = \"identitynamespace:\";\n+  static final String MESH_CA_NAME = \"meshCA\";\n+\n+  static {\n+    try {\n+      CertificateProviderRegistry.getInstance()\n+          .register(\n+              new MeshCaCertificateProviderProvider(\n+                  StsCredentials.Factory.getInstance(),\n+                  MeshCaCertificateProvider.MeshCaChannelFactory.getInstance(),\n+                  new ExponentialBackoffPolicy.Provider(),\n+                  MeshCaCertificateProvider.Factory.getInstance())\n+        );\n+    } catch (Throwable t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf9e4483f528417eab7f4fc7a585c2c4198af837"}, "originalPosition": 81}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1d76a8cc01899e7332ad6c6c5b11f7a209c8b15", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/e1d76a8cc01899e7332ad6c6c5b11f7a209c8b15", "committedDate": "2020-07-29T05:50:55Z", "message": "address review comments-2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NjYzMTk5", "url": "https://github.com/grpc/grpc-java/pull/7247#pullrequestreview-457663199", "createdAt": "2020-07-29T15:56:03Z", "commit": {"oid": "e1d76a8cc01899e7332ad6c6c5b11f7a209c8b15"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4340, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}