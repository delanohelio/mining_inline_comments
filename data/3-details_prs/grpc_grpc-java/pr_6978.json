{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4NjgwODYy", "number": 6978, "title": "xds: create XdsServer wrapper for correct start and shutdown semantics", "bodyText": "@ejona86 PR for the server-wrapper we discussed the other day", "createdAt": "2020-04-24T17:40:57Z", "url": "https://github.com/grpc/grpc-java/pull/6978", "merged": true, "mergeCommit": {"oid": "1b792d1ccf9af3f705d1d5e4e85d28cd25f9a155"}, "closed": true, "closedAt": "2020-05-04T17:02:42Z", "author": {"login": "sanjaypujare"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABca1DmkgH2gAyNDA4NjgwODYyOjMzODcxZTFmMjNhMjZhMjAwNmE5Y2EzYTlhMmEzZDFhNzgyOGZhNGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABceCI1OAH2gAyNDA4NjgwODYyOmM0MjNlNDI4MWRmODc4OTZmNDEwZTYyZWM2YzA3MDI5ZTQ0NTRjODA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "33871e1f23a26a2006a9ca3a9a2a3d1a7828fa4e", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/33871e1f23a26a2006a9ca3a9a2a3d1a7828fa4e", "committedDate": "2020-04-24T17:37:01Z", "message": "xds: create XdsServer wrapper for correct start and shutdown semantics"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMzc0MTU0", "url": "https://github.com/grpc/grpc-java/pull/6978#pullrequestreview-401374154", "createdAt": "2020-04-27T22:32:52Z", "commit": {"oid": "33871e1f23a26a2006a9ca3a9a2a3d1a7828fa4e"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMjozMjo1M1rOGM6gWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMjo1MTo0MlrOGM6_sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE5NDY0OA==", "bodyText": "you can just use instance variable port.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private SynchronizationContext createSynchronizationContext(int port) {\n          \n          \n            \n              private SynchronizationContext createSynchronizationContext() {", "url": "https://github.com/grpc/grpc-java/pull/6978#discussion_r416194648", "createdAt": "2020-04-27T22:32:53Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientWrapperForServerSds.java", "diffHunk": "@@ -84,41 +84,76 @@ public ManagementServerNotFoundException(String msg) {\n   }\n \n   /**\n-   * Factory method for creating a {@link XdsClientWrapperForServerSds}.\n+   * Creates a {@link XdsClientWrapperForServerSds}.\n    *\n    * @param port server's port for which listener config is needed.\n-   * @param bootstrapper {@link Bootstrapper} instance to load bootstrap config.\n-   * @param syncContext {@link SynchronizationContext} needed by {@link XdsClient}.\n    */\n-  public static XdsClientWrapperForServerSds newInstance(\n-      int port, Bootstrapper bootstrapper, SynchronizationContext syncContext)\n-      throws IOException, ManagementServerNotFoundException {\n-    Bootstrapper.BootstrapInfo bootstrapInfo = bootstrapper.readBootstrap();\n-    final List<Bootstrapper.ServerInfo> serverList = bootstrapInfo.getServers();\n-    if (serverList.isEmpty()) {\n-      throw new ManagementServerNotFoundException(\"No management server provided by bootstrap\");\n+  public XdsClientWrapperForServerSds(int port) {\n+    this.port = port;\n+  }\n+\n+  private SynchronizationContext createSynchronizationContext(int port) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33871e1f23a26a2006a9ca3a9a2a3d1a7828fa4e"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE5NTgxMw==", "bodyText": "final is not necessary.  we discourage to use local scoped final if not required. since final should be default behavior.", "url": "https://github.com/grpc/grpc-java/pull/6978#discussion_r416195813", "createdAt": "2020-04-27T22:35:39Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientWrapperForServerSds.java", "diffHunk": "@@ -84,41 +84,76 @@ public ManagementServerNotFoundException(String msg) {\n   }\n \n   /**\n-   * Factory method for creating a {@link XdsClientWrapperForServerSds}.\n+   * Creates a {@link XdsClientWrapperForServerSds}.\n    *\n    * @param port server's port for which listener config is needed.\n-   * @param bootstrapper {@link Bootstrapper} instance to load bootstrap config.\n-   * @param syncContext {@link SynchronizationContext} needed by {@link XdsClient}.\n    */\n-  public static XdsClientWrapperForServerSds newInstance(\n-      int port, Bootstrapper bootstrapper, SynchronizationContext syncContext)\n-      throws IOException, ManagementServerNotFoundException {\n-    Bootstrapper.BootstrapInfo bootstrapInfo = bootstrapper.readBootstrap();\n-    final List<Bootstrapper.ServerInfo> serverList = bootstrapInfo.getServers();\n-    if (serverList.isEmpty()) {\n-      throw new ManagementServerNotFoundException(\"No management server provided by bootstrap\");\n+  public XdsClientWrapperForServerSds(int port) {\n+    this.port = port;\n+  }\n+\n+  private SynchronizationContext createSynchronizationContext(int port) {\n+    final InternalLogId logId =\n+        InternalLogId.allocate(\"XdsClientWrapperForServerSds\", Integer.toString(port));\n+    return new SynchronizationContext(\n+        new Thread.UncaughtExceptionHandler() {\n+          // needed by syncContext\n+          private boolean panicMode;\n+\n+          @Override\n+          public void uncaughtException(Thread t, Throwable e) {\n+            logger.log(\n+                Level.SEVERE,\n+                \"[\" + logId + \"] Uncaught exception in the SynchronizationContext. Panic!\",\n+                e);\n+            panic(e);\n+          }\n+\n+          void panic(final Throwable t) {\n+            if (panicMode) {\n+              // Preserve the first panic information\n+              return;\n+            }\n+            panicMode = true;\n+            shutdown();\n+          }\n+        });\n+  }\n+\n+  /** Creates an XdsClient and starts a watch. */\n+  public void start() {\n+    Bootstrapper.BootstrapInfo bootstrapInfo;\n+    final List<Bootstrapper.ServerInfo> serverList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33871e1f23a26a2006a9ca3a9a2a3d1a7828fa4e"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE5NjI0Mg==", "bodyText": "same here, no final.", "url": "https://github.com/grpc/grpc-java/pull/6978#discussion_r416196242", "createdAt": "2020-04-27T22:36:29Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientWrapperForServerSds.java", "diffHunk": "@@ -84,41 +84,76 @@ public ManagementServerNotFoundException(String msg) {\n   }\n \n   /**\n-   * Factory method for creating a {@link XdsClientWrapperForServerSds}.\n+   * Creates a {@link XdsClientWrapperForServerSds}.\n    *\n    * @param port server's port for which listener config is needed.\n-   * @param bootstrapper {@link Bootstrapper} instance to load bootstrap config.\n-   * @param syncContext {@link SynchronizationContext} needed by {@link XdsClient}.\n    */\n-  public static XdsClientWrapperForServerSds newInstance(\n-      int port, Bootstrapper bootstrapper, SynchronizationContext syncContext)\n-      throws IOException, ManagementServerNotFoundException {\n-    Bootstrapper.BootstrapInfo bootstrapInfo = bootstrapper.readBootstrap();\n-    final List<Bootstrapper.ServerInfo> serverList = bootstrapInfo.getServers();\n-    if (serverList.isEmpty()) {\n-      throw new ManagementServerNotFoundException(\"No management server provided by bootstrap\");\n+  public XdsClientWrapperForServerSds(int port) {\n+    this.port = port;\n+  }\n+\n+  private SynchronizationContext createSynchronizationContext(int port) {\n+    final InternalLogId logId =\n+        InternalLogId.allocate(\"XdsClientWrapperForServerSds\", Integer.toString(port));\n+    return new SynchronizationContext(\n+        new Thread.UncaughtExceptionHandler() {\n+          // needed by syncContext\n+          private boolean panicMode;\n+\n+          @Override\n+          public void uncaughtException(Thread t, Throwable e) {\n+            logger.log(\n+                Level.SEVERE,\n+                \"[\" + logId + \"] Uncaught exception in the SynchronizationContext. Panic!\",\n+                e);\n+            panic(e);\n+          }\n+\n+          void panic(final Throwable t) {\n+            if (panicMode) {\n+              // Preserve the first panic information\n+              return;\n+            }\n+            panicMode = true;\n+            shutdown();\n+          }\n+        });\n+  }\n+\n+  /** Creates an XdsClient and starts a watch. */\n+  public void start() {\n+    Bootstrapper.BootstrapInfo bootstrapInfo;\n+    final List<Bootstrapper.ServerInfo> serverList;\n+    try {\n+      bootstrapInfo = Bootstrapper.getInstance().readBootstrap();\n+      serverList = bootstrapInfo.getServers();\n+      if (serverList.isEmpty()) {\n+        throw new ManagementServerNotFoundException(\"No management server provided by bootstrap\");\n+      }\n+    } catch (IOException | ManagementServerNotFoundException e) {\n+      logger.log(Level.FINE, \"Exception reading bootstrap\", e);\n+      logger.log(Level.INFO, \"Fallback to plaintext for server at port {0}\", port);\n+      return;\n     }\n     final Node node = bootstrapInfo.getNode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33871e1f23a26a2006a9ca3a9a2a3d1a7828fa4e"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIwMDk4Mw==", "bodyText": "should those be in reverse order? since server is using the xdsClientWrapperForServerSds?", "url": "https://github.com/grpc/grpc-java/pull/6978#discussion_r416200983", "createdAt": "2020-04-27T22:47:34Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/ServerWrapperForXds.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.sds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import io.grpc.Server;\n+import io.grpc.ServerServiceDefinition;\n+import io.grpc.xds.XdsClientWrapperForServerSds;\n+import java.io.IOException;\n+import java.net.SocketAddress;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Wraps a {@link Server} delegate and {@link XdsClientWrapperForServerSds} and intercepts {@link\n+ * Server#shutdown()} and {@link Server#start()} to shut down and start the\n+ * {@link XdsClientWrapperForServerSds} object.\n+ */\n+final class ServerWrapperForXds extends Server {\n+  private final Server delegate;\n+  private final XdsClientWrapperForServerSds xdsClientWrapperForServerSds;\n+\n+  ServerWrapperForXds(Server delegate, XdsClientWrapperForServerSds xdsClientWrapperForServerSds) {\n+    this.delegate = checkNotNull(delegate, \"delegate\");\n+    this.xdsClientWrapperForServerSds =\n+        checkNotNull(xdsClientWrapperForServerSds, \"xdsClientWrapperForServerSds\");\n+  }\n+\n+  @Override\n+  public Server start() throws IOException {\n+    delegate.start();\n+    xdsClientWrapperForServerSds.start();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33871e1f23a26a2006a9ca3a9a2a3d1a7828fa4e"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIwMjU0Ng==", "bodyText": "can you cleanup in @after.", "url": "https://github.com/grpc/grpc-java/pull/6978#discussion_r416202546", "createdAt": "2020-04-27T22:51:27Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/XdsClientWrapperForServerSdsTest.java", "diffHunk": "@@ -163,7 +164,8 @@ static void generateListenerUpdateToWatcher(\n   @Before\n   public void setUp() throws IOException {\n     MockitoAnnotations.initMocks(this);\n-    xdsClientWrapperForServerSds = new XdsClientWrapperForServerSds(PORT, xdsClient, null);\n+    xdsClientWrapperForServerSds = new XdsClientWrapperForServerSds(PORT);\n+    xdsClientWrapperForServerSds.start(xdsClient);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33871e1f23a26a2006a9ca3a9a2a3d1a7828fa4e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIwMjY3NA==", "bodyText": "same here. cleanup the resource.", "url": "https://github.com/grpc/grpc-java/pull/6978#discussion_r416202674", "createdAt": "2020-04-27T22:51:42Z", "author": {"login": "creamsoup"}, "path": "xds/src/test/java/io/grpc/xds/XdsClientWrapperForServerSdsTestMisc.java", "diffHunk": "@@ -55,7 +54,8 @@\n   @Before\n   public void setUp() throws IOException {\n     MockitoAnnotations.initMocks(this);\n-    xdsClientWrapperForServerSds = new XdsClientWrapperForServerSds(PORT, xdsClient, null);\n+    xdsClientWrapperForServerSds = new XdsClientWrapperForServerSds(PORT);\n+    xdsClientWrapperForServerSds.start(xdsClient);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33871e1f23a26a2006a9ca3a9a2a3d1a7828fa4e"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4835168dd098099c0dd37d458237f88eede3ddd5", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/4835168dd098099c0dd37d458237f88eede3ddd5", "committedDate": "2020-04-28T16:42:47Z", "message": "address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMDU1MjQw", "url": "https://github.com/grpc/grpc-java/pull/6978#pullrequestreview-402055240", "createdAt": "2020-04-28T17:25:30Z", "commit": {"oid": "4835168dd098099c0dd37d458237f88eede3ddd5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzoyNTozMFrOGNe-Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzoyNTozMFrOGNe-Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5MjA3NQ==", "bodyText": "make sure the start can be called at most once. although it is programmer error, it will be very hard to debug resource leaks and random behavior due to internal reference changes.", "url": "https://github.com/grpc/grpc-java/pull/6978#discussion_r416792075", "createdAt": "2020-04-28T17:25:30Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientWrapperForServerSds.java", "diffHunk": "@@ -84,41 +84,76 @@ public ManagementServerNotFoundException(String msg) {\n   }\n \n   /**\n-   * Factory method for creating a {@link XdsClientWrapperForServerSds}.\n+   * Creates a {@link XdsClientWrapperForServerSds}.\n    *\n    * @param port server's port for which listener config is needed.\n-   * @param bootstrapper {@link Bootstrapper} instance to load bootstrap config.\n-   * @param syncContext {@link SynchronizationContext} needed by {@link XdsClient}.\n    */\n-  public static XdsClientWrapperForServerSds newInstance(\n-      int port, Bootstrapper bootstrapper, SynchronizationContext syncContext)\n-      throws IOException, ManagementServerNotFoundException {\n-    Bootstrapper.BootstrapInfo bootstrapInfo = bootstrapper.readBootstrap();\n-    final List<Bootstrapper.ServerInfo> serverList = bootstrapInfo.getServers();\n-    if (serverList.isEmpty()) {\n-      throw new ManagementServerNotFoundException(\"No management server provided by bootstrap\");\n+  public XdsClientWrapperForServerSds(int port) {\n+    this.port = port;\n+  }\n+\n+  private SynchronizationContext createSynchronizationContext() {\n+    final InternalLogId logId =\n+        InternalLogId.allocate(\"XdsClientWrapperForServerSds\", Integer.toString(port));\n+    return new SynchronizationContext(\n+        new Thread.UncaughtExceptionHandler() {\n+          // needed by syncContext\n+          private boolean panicMode;\n+\n+          @Override\n+          public void uncaughtException(Thread t, Throwable e) {\n+            logger.log(\n+                Level.SEVERE,\n+                \"[\" + logId + \"] Uncaught exception in the SynchronizationContext. Panic!\",\n+                e);\n+            panic(e);\n+          }\n+\n+          void panic(final Throwable t) {\n+            if (panicMode) {\n+              // Preserve the first panic information\n+              return;\n+            }\n+            panicMode = true;\n+            shutdown();\n+          }\n+        });\n+  }\n+\n+  /** Creates an XdsClient and starts a watch. */\n+  public void start() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4835168dd098099c0dd37d458237f88eede3ddd5"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a9026deb5bb852c5b4c86c627c56d2ab02b031a", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/2a9026deb5bb852c5b4c86c627c56d2ab02b031a", "committedDate": "2020-04-28T18:01:40Z", "message": "address review comments - set 2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb5bde4b9d9b63259af54e222980f381f21ee55f", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/eb5bde4b9d9b63259af54e222980f381f21ee55f", "committedDate": "2020-04-28T18:32:45Z", "message": "address review comments - set 3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39257ad69ab098a319f1704a647d9ba015bb5fa0", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/39257ad69ab098a319f1704a647d9ba015bb5fa0", "committedDate": "2020-04-30T05:47:51Z", "message": "add check for start call"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNjg0ODg1", "url": "https://github.com/grpc/grpc-java/pull/6978#pullrequestreview-403684885", "createdAt": "2020-04-30T16:29:15Z", "commit": {"oid": "39257ad69ab098a319f1704a647d9ba015bb5fa0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjoyOToxNVrOGOxEuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjoyOToxNVrOGOxEuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEzNzI3Mw==", "bodyText": "why we need this? test seems fine with using the start", "url": "https://github.com/grpc/grpc-java/pull/6978#discussion_r418137273", "createdAt": "2020-04-30T16:29:15Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/ServerWrapperForXds.java", "diffHunk": "@@ -48,6 +50,12 @@ public Server start() throws IOException {\n     return this;\n   }\n \n+  @VisibleForTesting\n+  public Server startForTestXdsClient() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39257ad69ab098a319f1704a647d9ba015bb5fa0"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83f91692f840eba89ee95ee37e3380c928c4830b", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/83f91692f840eba89ee95ee37e3380c928c4830b", "committedDate": "2020-05-04T05:43:09Z", "message": "start semantics improved"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1MTQxMjUz", "url": "https://github.com/grpc/grpc-java/pull/6978#pullrequestreview-405141253", "createdAt": "2020-05-04T16:18:30Z", "commit": {"oid": "83f91692f840eba89ee95ee37e3380c928c4830b"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjoxODozMFrOGQHwoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjoxODozMFrOGQHwoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU1NzUzNg==", "bodyText": "can you add null check here?", "url": "https://github.com/grpc/grpc-java/pull/6978#discussion_r419557536", "createdAt": "2020-05-04T16:18:30Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientWrapperForServerSds.java", "diffHunk": "@@ -84,41 +84,82 @@ public ManagementServerNotFoundException(String msg) {\n   }\n \n   /**\n-   * Factory method for creating a {@link XdsClientWrapperForServerSds}.\n+   * Creates a {@link XdsClientWrapperForServerSds}.\n    *\n    * @param port server's port for which listener config is needed.\n-   * @param bootstrapper {@link Bootstrapper} instance to load bootstrap config.\n-   * @param syncContext {@link SynchronizationContext} needed by {@link XdsClient}.\n    */\n-  public static XdsClientWrapperForServerSds newInstance(\n-      int port, Bootstrapper bootstrapper, SynchronizationContext syncContext)\n-      throws IOException, ManagementServerNotFoundException {\n-    Bootstrapper.BootstrapInfo bootstrapInfo = bootstrapper.readBootstrap();\n-    final List<Bootstrapper.ServerInfo> serverList = bootstrapInfo.getServers();\n-    if (serverList.isEmpty()) {\n-      throw new ManagementServerNotFoundException(\"No management server provided by bootstrap\");\n+  public XdsClientWrapperForServerSds(int port) {\n+    this.port = port;\n+  }\n+\n+  private SynchronizationContext createSynchronizationContext() {\n+    final InternalLogId logId =\n+        InternalLogId.allocate(\"XdsClientWrapperForServerSds\", Integer.toString(port));\n+    return new SynchronizationContext(\n+        new Thread.UncaughtExceptionHandler() {\n+          // needed by syncContext\n+          private boolean panicMode;\n+\n+          @Override\n+          public void uncaughtException(Thread t, Throwable e) {\n+            logger.log(\n+                Level.SEVERE,\n+                \"[\" + logId + \"] Uncaught exception in the SynchronizationContext. Panic!\",\n+                e);\n+            panic(e);\n+          }\n+\n+          void panic(final Throwable t) {\n+            if (panicMode) {\n+              // Preserve the first panic information\n+              return;\n+            }\n+            panicMode = true;\n+            shutdown();\n+          }\n+        });\n+  }\n+\n+  public boolean hasXdsClient() {\n+    return xdsClient != null;\n+  }\n+\n+  /** Creates an XdsClient and starts a watch. */\n+  public void createXdsClientAndStart() {\n+    checkState(xdsClient == null, \"start() called more than once\");\n+    Bootstrapper.BootstrapInfo bootstrapInfo;\n+    List<Bootstrapper.ServerInfo> serverList;\n+    try {\n+      bootstrapInfo = Bootstrapper.getInstance().readBootstrap();\n+      serverList = bootstrapInfo.getServers();\n+      if (serverList.isEmpty()) {\n+        throw new ManagementServerNotFoundException(\"No management server provided by bootstrap\");\n+      }\n+    } catch (IOException | ManagementServerNotFoundException e) {\n+      logger.log(Level.FINE, \"Exception reading bootstrap\", e);\n+      logger.log(Level.INFO, \"Fallback to plaintext for server at port {0}\", port);\n+      return;\n     }\n-    final Node node = bootstrapInfo.getNode();\n-    ScheduledExecutorService timeService = SharedResourceHolder.get(timeServiceResource);\n+    Node node = bootstrapInfo.getNode();\n+    timeService = SharedResourceHolder.get(timeServiceResource);\n     XdsClientImpl xdsClientImpl =\n         new XdsClientImpl(\n             \"\",\n             serverList,\n             XdsClient.XdsChannelFactory.getInstance(),\n             node,\n-            syncContext,\n+            createSynchronizationContext(),\n             timeService,\n             new ExponentialBackoffPolicy.Provider(),\n             GrpcUtil.STOPWATCH_SUPPLIER);\n-    return new XdsClientWrapperForServerSds(port, xdsClientImpl, timeService);\n+    start(xdsClientImpl);\n   }\n \n+  /** Accepts an XdsClient and starts a watch. */\n   @VisibleForTesting\n-  XdsClientWrapperForServerSds(int port, XdsClient xdsClient,\n-      ScheduledExecutorService timeService) {\n-    this.port = port;\n+  public void start(XdsClient xdsClient) {\n+    checkState(this.xdsClient == null, \"start() called more than once\");\n     this.xdsClient = xdsClient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83f91692f840eba89ee95ee37e3380c928c4830b"}, "originalPosition": 120}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c423e4281df87896f410e62ec6c07029e4454c80", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/c423e4281df87896f410e62ec6c07029e4454c80", "committedDate": "2020-05-04T16:33:16Z", "message": "address review comment - next set"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4362, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}