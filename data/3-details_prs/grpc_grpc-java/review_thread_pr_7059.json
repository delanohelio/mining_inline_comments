{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxNjQ5ODIx", "number": 7059, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMDozMDoyMFrOD-ytSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODozNzozMVrOEAOi7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTY5MDk5OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/internal/sds/ReferenceCountingSslContextProviderMap.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMDozMDoyMFrOGZHGKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMDozMDoyMFrOGZHGKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4Mzg1MQ==", "bodyText": "nit: those finals are unnecessary.", "url": "https://github.com/grpc/grpc-java/pull/7059#discussion_r428983851", "createdAt": "2020-05-22T00:30:20Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/ReferenceCountingSslContextProviderMap.java", "diffHunk": "@@ -65,29 +66,29 @@\n    * <p>Caller must not release a reference more than once. It's advised that you clear the\n    * reference to the instance with the null returned by this method.\n    *\n+   * @param key for the instance to be released\n    * @param value the instance to be released\n    * @return a null which the caller can use to clear the reference to that instance.\n    */\n-  public SslContextProvider<K> release(final SslContextProvider<K> value) {\n+  public P release(K key, final P value) {\n+    checkNotNull(key, \"key\");\n     checkNotNull(value, \"value\");\n-    K key = value.getSource();\n     return releaseInternal(key, value);\n   }\n \n-  private synchronized SslContextProvider<K> getInternal(K key) {\n-    Instance<K> instance = instances.get(key);\n+  private synchronized P getInternal(K key) {\n+    Instance<K, P> instance = instances.get(key);\n     if (instance == null) {\n-      instance = new Instance<>(sslContextProviderFactory.createSslContextProvider(key));\n+      instance = new Instance<K, P>(sslContextProviderFactory.createSslContextProvider(key));\n       instances.put(key, instance);\n       return instance.sslContextProvider;\n     } else {\n       return instance.acquire();\n     }\n   }\n \n-  private synchronized SslContextProvider<K> releaseInternal(\n-      final K key, final SslContextProvider<K> instance) {\n-    final Instance<K> cached = instances.get(key);\n+  private synchronized P releaseInternal(final K key, final P instance) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d551954c2c5ced9cba30e2cb5aa668b76e447d4"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjAzNTIyOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/internal/sds/SdsSslContextProviderHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzozOToyNFrOGapKbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMzozNDowMVrOGazt_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5MDU3Mg==", "bodyText": "helper using helpee is weird. is there way to avoid this circular dependency? btw, this class makes sense as an abstract class, but not as a helper class.", "url": "https://github.com/grpc/grpc-java/pull/7059#discussion_r430590572", "createdAt": "2020-05-26T17:39:24Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/SdsSslContextProviderHelper.java", "diffHunk": "@@ -178,9 +104,9 @@ public void addCallback(Callback callback, Executor executor) {\n   }\n \n   private void callPerformCallback(\n-      Callback callback, Executor executor, final SslContext sslContextCopy) {\n-    performCallback(\n-        new SslContextGetter() {\n+      SslContextProvider.Callback callback, Executor executor, final SslContext sslContextCopy) {\n+    sslContextProvider.performCallback(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d551954c2c5ced9cba30e2cb5aa668b76e447d4"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc2MzUxOA==", "bodyText": "Yes I realized that but Java doesn't have multiple inheritance (unlike C++) so my only alternative was to inject the helper to achieve code reuse - I really would have hated code duplication.\nI was also aware of the Helper class calling back into the caller of the helper but again I thought this is the best way to structure the code without unnecessarily duplicating it. Let me see if I can achieve the same result by restructuring this.", "url": "https://github.com/grpc/grpc-java/pull/7059#discussion_r430763518", "createdAt": "2020-05-26T23:34:01Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/SdsSslContextProviderHelper.java", "diffHunk": "@@ -178,9 +104,9 @@ public void addCallback(Callback callback, Executor executor) {\n   }\n \n   private void callPerformCallback(\n-      Callback callback, Executor executor, final SslContext sslContextCopy) {\n-    performCallback(\n-        new SslContextGetter() {\n+      SslContextProvider.Callback callback, Executor executor, final SslContext sslContextCopy) {\n+    sslContextProvider.performCallback(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5MDU3Mg=="}, "originalCommit": {"oid": "3d551954c2c5ced9cba30e2cb5aa668b76e447d4"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjM2NTAwOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/internal/sds/CommonTlsContextUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNjo1ODo1MlrOGbUdSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNjo1ODo1MlrOGbUdSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI5OTkxNQ==", "bodyText": "@Nullable", "url": "https://github.com/grpc/grpc-java/pull/7059#discussion_r431299915", "createdAt": "2020-05-27T16:58:52Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/CommonTlsContextUtil.java", "diffHunk": "@@ -40,4 +47,52 @@ static boolean hasAllSecretsUsingSds(CommonTlsContext commonTlsContext) {\n     return (commonTlsContext.getTlsCertificatesCount() == 0)\n         && !commonTlsContext.hasValidationContext();\n   }\n+\n+  static CertificateValidationContext getCertificateValidationContext(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4764ca53ee0213c68ef151c3ef03e05d84325b5"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjM3MzUzOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/internal/sds/DownstreamTlsContextHolder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzowMToxM1rOGbUjAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzowMToxM1rOGbUjAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwMTM3Ng==", "bodyText": "nit: move this next to the other getter? (i am not sure about the class structure)", "url": "https://github.com/grpc/grpc-java/pull/7059#discussion_r431301376", "createdAt": "2020-05-27T17:01:13Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/DownstreamTlsContextHolder.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.sds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import io.envoyproxy.envoy.api.v2.auth.CommonTlsContext;\n+import io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext;\n+\n+class DownstreamTlsContextHolder implements TlsContextHolder {\n+\n+  public DownstreamTlsContext getDownstreamTlsContext() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4764ca53ee0213c68ef151c3ef03e05d84325b5"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjM3NTAyOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/internal/sds/DownstreamTlsContextHolder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzowMTozOFrOGbUkAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzowMTozOFrOGbUkAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwMTYzMg==", "bodyText": "can be a final class", "url": "https://github.com/grpc/grpc-java/pull/7059#discussion_r431301632", "createdAt": "2020-05-27T17:01:38Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/DownstreamTlsContextHolder.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.sds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import io.envoyproxy.envoy.api.v2.auth.CommonTlsContext;\n+import io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext;\n+\n+class DownstreamTlsContextHolder implements TlsContextHolder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4764ca53ee0213c68ef151c3ef03e05d84325b5"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjcyMjA0OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/internal/sds/SslContextProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODozMjo1MVrOGbX_4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODozMjo1MVrOGbX_4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM1NzkyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return ((DownstreamTlsContextHolder)tlsContextHolder).getDownstreamTlsContext();\n          \n          \n            \n                return ((DownstreamTlsContextHolder) tlsContextHolder).getDownstreamTlsContext();", "url": "https://github.com/grpc/grpc-java/pull/7059#discussion_r431357921", "createdAt": "2020-05-27T18:32:51Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/SslContextProvider.java", "diffHunk": "@@ -97,6 +77,20 @@ protected void setClientAuthValues(\n     }\n   }\n \n+  /** Returns the DownstreamTlsContext in this SslContextProvider if this is server side. **/\n+  public DownstreamTlsContext getDownstreamTlsContext() {\n+    checkState(tlsContextHolder instanceof DownstreamTlsContextHolder,\n+        \"expected DownstreamTlsContextHolder\");\n+    return ((DownstreamTlsContextHolder)tlsContextHolder).getDownstreamTlsContext();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4764ca53ee0213c68ef151c3ef03e05d84325b5"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjcyMjUxOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/internal/sds/SslContextProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODozMjo1OVrOGbYALw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODozMjo1OVrOGbYALw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM1Nzk5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return ((UpstreamTlsContextHolder)tlsContextHolder).getUpstreamTlsContext();\n          \n          \n            \n                return ((UpstreamTlsContextHolder) tlsContextHolder).getUpstreamTlsContext();", "url": "https://github.com/grpc/grpc-java/pull/7059#discussion_r431357999", "createdAt": "2020-05-27T18:32:59Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/SslContextProvider.java", "diffHunk": "@@ -97,6 +77,20 @@ protected void setClientAuthValues(\n     }\n   }\n \n+  /** Returns the DownstreamTlsContext in this SslContextProvider if this is server side. **/\n+  public DownstreamTlsContext getDownstreamTlsContext() {\n+    checkState(tlsContextHolder instanceof DownstreamTlsContextHolder,\n+        \"expected DownstreamTlsContextHolder\");\n+    return ((DownstreamTlsContextHolder)tlsContextHolder).getDownstreamTlsContext();\n+  }\n+\n+  /** Returns the UpstreamTlsContext in this SslContextProvider if this is client side. **/\n+  public UpstreamTlsContext getUpstreamTlsContext() {\n+    checkState(tlsContextHolder instanceof UpstreamTlsContextHolder,\n+        \"expected UpstreamTlsContextHolder\");\n+    return ((UpstreamTlsContextHolder)tlsContextHolder).getUpstreamTlsContext();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4764ca53ee0213c68ef151c3ef03e05d84325b5"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjcyODE2OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/internal/sds/UpstreamTlsContextHolder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODozNDozNlrOGbYDzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODozNDozNlrOGbYDzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM1ODkyNg==", "bodyText": "can it be a final class?", "url": "https://github.com/grpc/grpc-java/pull/7059#discussion_r431358926", "createdAt": "2020-05-27T18:34:36Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/UpstreamTlsContextHolder.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.sds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import io.envoyproxy.envoy.api.v2.auth.CommonTlsContext;\n+import io.envoyproxy.envoy.api.v2.auth.UpstreamTlsContext;\n+\n+class UpstreamTlsContextHolder implements TlsContextHolder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4764ca53ee0213c68ef151c3ef03e05d84325b5"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjczNzcyOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/internal/sds/UpstreamTlsContextHolder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODozNzozMVrOGbYKMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODozNzozMVrOGbYKMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM2MDU2Mg==", "bodyText": "nit: move it before/after L37?", "url": "https://github.com/grpc/grpc-java/pull/7059#discussion_r431360562", "createdAt": "2020-05-27T18:37:31Z", "author": {"login": "creamsoup"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/UpstreamTlsContextHolder.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.sds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import io.envoyproxy.envoy.api.v2.auth.CommonTlsContext;\n+import io.envoyproxy.envoy.api.v2.auth.UpstreamTlsContext;\n+\n+class UpstreamTlsContextHolder implements TlsContextHolder {\n+\n+  public UpstreamTlsContext getUpstreamTlsContext() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4764ca53ee0213c68ef151c3ef03e05d84325b5"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2705, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}