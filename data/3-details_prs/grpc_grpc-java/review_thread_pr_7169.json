{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNzAwMzg2", "number": 7169, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODozNzowNlrOEJ_oTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMjowNjozNlrOELVVhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTE1MTUxOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODozNzowNlrOGqx8dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzowODoyMlrOGrGTrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUxMTY3MA==", "bodyText": "Can you use fully qualified name for types that you want to distinguish in v2 and v3? It's hard to follow as there are some inconsistencies (e.g., constant ADS_TYPE_URL_LDS without v3 suffix refers to v2 type while Listener refers to v3 type).", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r447511670", "createdAt": "2020-06-30T08:37:06Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -553,6 +555,9 @@ private void handleLdsResponseForConfigUpdate(DiscoveryResponse ldsResponse) {\n     List<String> listenerNames = new ArrayList<>(ldsResponse.getResourcesCount());\n     try {\n       for (com.google.protobuf.Any res : ldsResponse.getResourcesList()) {\n+        if (!res.is(Listener.class)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de976cda2df3c03f7a82680db784f8cb3a7699d5"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgwMjkwMA==", "bodyText": "v3 imported classes should be unqualified and v2 ones can be qualified (since they will go away earlier). Constants like ADS_TYPE_URL_LDS are defined here: the v3 ones should have no suffix and the existing v2 ones can be renamed with _V2 suffix for the same reason.", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r447802900", "createdAt": "2020-06-30T16:08:08Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -553,6 +555,9 @@ private void handleLdsResponseForConfigUpdate(DiscoveryResponse ldsResponse) {\n     List<String> listenerNames = new ArrayList<>(ldsResponse.getResourcesCount());\n     try {\n       for (com.google.protobuf.Any res : ldsResponse.getResourcesList()) {\n+        if (!res.is(Listener.class)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUxMTY3MA=="}, "originalCommit": {"oid": "de976cda2df3c03f7a82680db784f8cb3a7699d5"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0NTI5Mg==", "bodyText": "Checking type name for ADS_TYPE_URL_LDS_V2 instead, which might be easier to understand.", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r447845292", "createdAt": "2020-06-30T17:08:22Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -553,6 +555,9 @@ private void handleLdsResponseForConfigUpdate(DiscoveryResponse ldsResponse) {\n     List<String> listenerNames = new ArrayList<>(ldsResponse.getResourcesCount());\n     try {\n       for (com.google.protobuf.Any res : ldsResponse.getResourcesList()) {\n+        if (!res.is(Listener.class)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUxMTY3MA=="}, "originalCommit": {"oid": "de976cda2df3c03f7a82680db784f8cb3a7699d5"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDk5NjgwOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjowOTozM1rOGrDx4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzowODozNFrOGrGUMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgwMzg3Mw==", "bodyText": "If ADS_TYPE_URL_LDS needs to be visible for testing how come ADS_TYPE_URL_LDS_V3 doesn't need to be if the test is also migrated to v3?", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r447803873", "createdAt": "2020-06-30T16:09:33Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -87,6 +87,8 @@\n \n   @VisibleForTesting\n   static final String ADS_TYPE_URL_LDS = \"type.googleapis.com/envoy.api.v2.Listener\";\n+  private static final String ADS_TYPE_URL_LDS_V3 =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de976cda2df3c03f7a82680db784f8cb3a7699d5"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0NTQyNA==", "bodyText": "Done.", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r447845424", "createdAt": "2020-06-30T17:08:34Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -87,6 +87,8 @@\n \n   @VisibleForTesting\n   static final String ADS_TYPE_URL_LDS = \"type.googleapis.com/envoy.api.v2.Listener\";\n+  private static final String ADS_TYPE_URL_LDS_V3 =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgwMzg3Mw=="}, "originalCommit": {"oid": "de976cda2df3c03f7a82680db784f8cb3a7699d5"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTAyODU0OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjoxNjo0M1rOGrEFeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzowODo0MVrOGrGUYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgwODg5MA==", "bodyText": "Can we change the import so we don't need the v3 fully qualified name?", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r447808890", "createdAt": "2020-06-30T16:16:43Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -730,7 +738,7 @@ private boolean isRequestedListener(Listener listener) {\n         && hasMatchingFilter(listener.getFilterChainsList());\n   }\n \n-  private boolean isAddressMatching(Address address) {\n+  private boolean isAddressMatching(io.envoyproxy.envoy.config.core.v3.Address address) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de976cda2df3c03f7a82680db784f8cb3a7699d5"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0NTQ3Mg==", "bodyText": "Done.", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r447845472", "createdAt": "2020-06-30T17:08:41Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -730,7 +738,7 @@ private boolean isRequestedListener(Listener listener) {\n         && hasMatchingFilter(listener.getFilterChainsList());\n   }\n \n-  private boolean isAddressMatching(Address address) {\n+  private boolean isAddressMatching(io.envoyproxy.envoy.config.core.v3.Address address) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgwODg5MA=="}, "originalCommit": {"oid": "de976cda2df3c03f7a82680db784f8cb3a7699d5"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTExNzEyOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/internal/sds/FileBasedPluginCredential.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjozMzowOFrOGrE3sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNjo0ODo1NFrOGrtxgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgyMTc0NA==", "bodyText": "Just wondering - what is the need to keep both the v2 and v3 versions? When everything is moved to v3 are we going to remove the v2 version of the constructor?", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r447821744", "createdAt": "2020-06-30T16:33:08Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/FileBasedPluginCredential.java", "diffHunk": "@@ -77,6 +78,19 @@\n     secretData = buildDataSourceFromConfigStruct(value.getStructValue());\n   }\n \n+  FileBasedPluginCredential(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de976cda2df3c03f7a82680db784f8cb3a7699d5"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgyODc2Mg==", "bodyText": "I just kept the existing code unchanged, otherwise the whole class will be almost empty after removing v2 code and with v3 code unimplemented. We don't need v2 version for this class after migration.", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r447828762", "createdAt": "2020-06-30T16:43:18Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/FileBasedPluginCredential.java", "diffHunk": "@@ -77,6 +78,19 @@\n     secretData = buildDataSourceFromConfigStruct(value.getStructValue());\n   }\n \n+  FileBasedPluginCredential(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgyMTc0NA=="}, "originalCommit": {"oid": "de976cda2df3c03f7a82680db784f8cb3a7699d5"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ5MTkwNA==", "bodyText": "ok", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r448491904", "createdAt": "2020-07-01T16:48:54Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/FileBasedPluginCredential.java", "diffHunk": "@@ -77,6 +78,19 @@\n     secretData = buildDataSourceFromConfigStruct(value.getStructValue());\n   }\n \n+  FileBasedPluginCredential(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgyMTc0NA=="}, "originalCommit": {"oid": "de976cda2df3c03f7a82680db784f8cb3a7699d5"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTEyNTgzOnYy", "diffSide": "LEFT", "path": "xds/src/main/java/io/grpc/xds/internal/sds/trust/SdsX509TrustManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjozNToyMlrOGrE9gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzowODo0OVrOGrGUpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgyMzIzMw==", "bodyText": "Can you comment this instead of deleting the call? Since the comment above is still there.", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r447823233", "createdAt": "2020-06-30T16:35:22Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/trust/SdsX509TrustManager.java", "diffHunk": "@@ -223,15 +225,16 @@ void verifySubjectAltNameInChain(X509Certificate[] peerCertChain) throws Certifi\n     if (certContext == null) {\n       return;\n     }\n-    List<String> verifyList = certContext.getVerifySubjectAltNameList();\n+    List<StringMatcher> verifyList = certContext.getMatchSubjectAltNamesList();\n     if (verifyList.isEmpty()) {\n       return;\n     }\n     if (peerCertChain == null || peerCertChain.length < 1) {\n       throw new CertificateException(\"Peer certificate(s) missing\");\n     }\n     // verify SANs only in the top cert (leaf cert)\n-    verifySubjectAltNameInLeaf(peerCertChain[0], verifyList);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de976cda2df3c03f7a82680db784f8cb3a7699d5"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0NTU0Mw==", "bodyText": "Done.", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r447845543", "createdAt": "2020-06-30T17:08:49Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/trust/SdsX509TrustManager.java", "diffHunk": "@@ -223,15 +225,16 @@ void verifySubjectAltNameInChain(X509Certificate[] peerCertChain) throws Certifi\n     if (certContext == null) {\n       return;\n     }\n-    List<String> verifyList = certContext.getVerifySubjectAltNameList();\n+    List<StringMatcher> verifyList = certContext.getMatchSubjectAltNamesList();\n     if (verifyList.isEmpty()) {\n       return;\n     }\n     if (peerCertChain == null || peerCertChain.length < 1) {\n       throw new CertificateException(\"Peer certificate(s) missing\");\n     }\n     // verify SANs only in the top cert (leaf cert)\n-    verifySubjectAltNameInLeaf(peerCertChain[0], verifyList);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgyMzIzMw=="}, "originalCommit": {"oid": "de976cda2df3c03f7a82680db784f8cb3a7699d5"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTE3MTY5OnYy", "diffSide": "RIGHT", "path": "xds/src/test/java/io/grpc/xds/EnvoyServerProtoDataTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjo0NTo0MFrOGrFZCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjo0NTo0MFrOGrFZCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgzMDI4MA==", "bodyText": "Good catch :-)", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r447830280", "createdAt": "2020-06-30T16:45:40Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/test/java/io/grpc/xds/EnvoyServerProtoDataTest.java", "diffHunk": "@@ -73,8 +73,7 @@ public void listener_convertFromListenerProto() throws InvalidProtocolBufferExce\n     assertThat(outFilterChainMatch.getApplicationProtocols()).isEmpty();\n     assertThat(outFilterChainMatch.getPrefixRanges()).isEmpty();\n     assertThat(outFilter.getDownstreamTlsContext())\n-        .isEqualTo(DownstreamTlsContext.fromEnvoyProtoDownstreamTlsContext(\n-                io.envoyproxy.envoy.api.v2.auth.DownstreamTlsContext.getDefaultInstance()));\n+        .isNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de976cda2df3c03f7a82680db784f8cb3a7699d5"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTE4MjAwOnYy", "diffSide": "RIGHT", "path": "xds/src/test/java/io/grpc/xds/EnvoyServerProtoDataTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjo0ODoxOFrOGrFfiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzowNDowOFrOGrGHSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgzMTk0Nw==", "bodyText": "Why V2 ? With all Listener related stuff migrating to v3 why can't this be v3 as well?", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r447831947", "createdAt": "2020-06-30T16:48:18Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/test/java/io/grpc/xds/EnvoyServerProtoDataTest.java", "diffHunk": "@@ -147,7 +119,8 @@ private static FilterChain createInFilter() {\n                     .addApplicationProtocols(\"managed-mtls\")\n                     .build())\n             .setTransportSocket(TransportSocket.newBuilder().setName(\"tls\")\n-                .setTypedConfig(Any.pack(CommonTlsContextTestsUtil.buildTestDownstreamTlsContext()))\n+                .setTypedConfig(\n+                    Any.pack(CommonTlsContextTestsUtil.buildTestDownstreamTlsContextV2()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de976cda2df3c03f7a82680db784f8cb3a7699d5"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0MjEyMQ==", "bodyText": "Good catch. I missed that.", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r447842121", "createdAt": "2020-06-30T17:04:08Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/test/java/io/grpc/xds/EnvoyServerProtoDataTest.java", "diffHunk": "@@ -147,7 +119,8 @@ private static FilterChain createInFilter() {\n                     .addApplicationProtocols(\"managed-mtls\")\n                     .build())\n             .setTransportSocket(TransportSocket.newBuilder().setName(\"tls\")\n-                .setTypedConfig(Any.pack(CommonTlsContextTestsUtil.buildTestDownstreamTlsContext()))\n+                .setTypedConfig(\n+                    Any.pack(CommonTlsContextTestsUtil.buildTestDownstreamTlsContextV2()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgzMTk0Nw=="}, "originalCommit": {"oid": "de976cda2df3c03f7a82680db784f8cb3a7699d5"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTIzMzI4OnYy", "diffSide": "RIGHT", "path": "xds/src/test/java/io/grpc/xds/XdsClientImplTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzowMToxM1rOGrGATA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzoxMzo0OVrOGrGgpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0MDMzMg==", "bodyText": "Not sure I understand this. Does it need a TODO comment so this can be cleaned up later?", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r447840332", "createdAt": "2020-06-30T17:01:13Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/test/java/io/grpc/xds/XdsClientImplTest.java", "diffHunk": "@@ -1435,6 +1435,7 @@ public void cdsResponseWithUpstreamTlsContext() {\n     StreamObserver<DiscoveryRequest> requestObserver = requestObservers.poll();\n \n     // Management server sends back CDS response with UpstreamTlsContext.\n+    // Server still using envoy API V2.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de976cda2df3c03f7a82680db784f8cb3a7699d5"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0NDAyOQ==", "bodyText": "Currently the server only supports v2, and we will support v2 servers for at least a year. I think we don't need clean up in the near future.", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r447844029", "createdAt": "2020-06-30T17:06:37Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/test/java/io/grpc/xds/XdsClientImplTest.java", "diffHunk": "@@ -1435,6 +1435,7 @@ public void cdsResponseWithUpstreamTlsContext() {\n     StreamObserver<DiscoveryRequest> requestObserver = requestObservers.poll();\n \n     // Management server sends back CDS response with UpstreamTlsContext.\n+    // Server still using envoy API V2.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0MDMzMg=="}, "originalCommit": {"oid": "de976cda2df3c03f7a82680db784f8cb3a7699d5"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0ODYxNQ==", "bodyText": "I will remove this comment here.", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r447848615", "createdAt": "2020-06-30T17:13:49Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/test/java/io/grpc/xds/XdsClientImplTest.java", "diffHunk": "@@ -1435,6 +1435,7 @@ public void cdsResponseWithUpstreamTlsContext() {\n     StreamObserver<DiscoveryRequest> requestObserver = requestObservers.poll();\n \n     // Management server sends back CDS response with UpstreamTlsContext.\n+    // Server still using envoy API V2.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0MDMzMg=="}, "originalCommit": {"oid": "de976cda2df3c03f7a82680db784f8cb3a7699d5"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTY4MjU3OnYy", "diffSide": "LEFT", "path": "xds/src/test/java/io/grpc/xds/internal/sds/trust/SdsX509TrustManagerTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODoyNjoyNFrOGrw2kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMTowNjowNFrOGr1WVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0MjM1Mw==", "bodyText": "Looking at the latest findings in #7166 (comment) where we will use match_subject_alt_names with EXACT_MATCH most of these tests will be applicable (after making the change). Would it be better to @Ignore them instead of just deleting them?", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r448542353", "createdAt": "2020-07-01T18:26:24Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/test/java/io/grpc/xds/internal/sds/trust/SdsX509TrustManagerTest.java", "diffHunk": "@@ -84,180 +83,6 @@ public void emptySanListContextTest() throws CertificateException, IOException {\n     trustManager.verifySubjectAltNameInChain(certs);\n   }\n \n-  @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f32fb0eec0589cd4d606418de35ca2a85cfb855"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4Nzg1MQ==", "bodyText": "I used @Ignore for some other tests. These tests here can not compile because addVerifySubjectAltName() does not exist for v3 api.", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r448587851", "createdAt": "2020-07-01T20:03:31Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/test/java/io/grpc/xds/internal/sds/trust/SdsX509TrustManagerTest.java", "diffHunk": "@@ -84,180 +83,6 @@ public void emptySanListContextTest() throws CertificateException, IOException {\n     trustManager.verifySubjectAltNameInChain(certs);\n   }\n \n-  @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0MjM1Mw=="}, "originalCommit": {"oid": "6f32fb0eec0589cd4d606418de35ca2a85cfb855"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU5NDQ3NQ==", "bodyText": "Sounds good. Can you add a TODO comment (assigned to me) to remind that these 11(?) tests need to be brought back when the new match_subject_alt_names field is implemented?", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r448594475", "createdAt": "2020-07-01T20:18:04Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/test/java/io/grpc/xds/internal/sds/trust/SdsX509TrustManagerTest.java", "diffHunk": "@@ -84,180 +83,6 @@ public void emptySanListContextTest() throws CertificateException, IOException {\n     trustManager.verifySubjectAltNameInChain(certs);\n   }\n \n-  @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0MjM1Mw=="}, "originalCommit": {"oid": "6f32fb0eec0589cd4d606418de35ca2a85cfb855"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYwMjc0NA==", "bodyText": "I added a TOOD referring to the issue here https://github.com/grpc/grpc-java/pull/7169/files/6f32fb0eec0589cd4d606418de35ca2a85cfb855#diff-9efb11763826a58994b5e41a318c58d8R54 which has discussions on match_subject_alt_names", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r448602744", "createdAt": "2020-07-01T20:36:23Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/test/java/io/grpc/xds/internal/sds/trust/SdsX509TrustManagerTest.java", "diffHunk": "@@ -84,180 +83,6 @@ public void emptySanListContextTest() throws CertificateException, IOException {\n     trustManager.verifySubjectAltNameInChain(certs);\n   }\n \n-  @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0MjM1Mw=="}, "originalCommit": {"oid": "6f32fb0eec0589cd4d606418de35ca2a85cfb855"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxNjAyMg==", "bodyText": "Okay I added an item in the issue so I can track it there.", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r448616022", "createdAt": "2020-07-01T21:06:04Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/test/java/io/grpc/xds/internal/sds/trust/SdsX509TrustManagerTest.java", "diffHunk": "@@ -84,180 +83,6 @@ public void emptySanListContextTest() throws CertificateException, IOException {\n     trustManager.verifySubjectAltNameInChain(certs);\n   }\n \n-  @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0MjM1Mw=="}, "originalCommit": {"oid": "6f32fb0eec0589cd4d606418de35ca2a85cfb855"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTc5ODI0OnYy", "diffSide": "RIGHT", "path": "xds/src/test/java/io/grpc/xds/internal/sds/CommonTlsContextTestsUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTowNDozN1rOGrx_Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMToxODowOVrOGr1qyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU2MDk3MQ==", "bodyText": "With the import this type doesn't need to be fully qualified, correct?", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r448560971", "createdAt": "2020-07-01T19:04:37Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/test/java/io/grpc/xds/internal/sds/CommonTlsContextTestsUtil.java", "diffHunk": "@@ -48,18 +53,83 @@\n   public static final String BAD_CLIENT_PEM_FILE = \"badclient.pem\";\n   public static final String BAD_CLIENT_KEY_FILE = \"badclient.key\";\n \n-  static SdsSecretConfig buildSdsSecretConfig(String name, String targetUri, String channelType) {\n-    SdsSecretConfig sdsSecretConfig = null;\n+  static io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig buildSdsSecretConfigV2(\n+      String name, String targetUri, String channelType) {\n+    io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig sdsSecretConfig = null;\n     if (!Strings.isNullOrEmpty(name) && !Strings.isNullOrEmpty(targetUri)) {\n       sdsSecretConfig =\n-          SdsSecretConfig.newBuilder()\n+          io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.newBuilder()\n               .setName(name)\n-              .setSdsConfig(SdsClientTest.buildConfigSource(targetUri, channelType))\n+              .setSdsConfig(buildConfigSourceV2(targetUri, channelType))\n               .build();\n     }\n     return sdsSecretConfig;\n   }\n \n+  private static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f32fb0eec0589cd4d606418de35ca2a85cfb855"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyMTI1OQ==", "bodyText": "Right. Done.", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r448621259", "createdAt": "2020-07-01T21:18:09Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/test/java/io/grpc/xds/internal/sds/CommonTlsContextTestsUtil.java", "diffHunk": "@@ -48,18 +53,83 @@\n   public static final String BAD_CLIENT_PEM_FILE = \"badclient.pem\";\n   public static final String BAD_CLIENT_KEY_FILE = \"badclient.key\";\n \n-  static SdsSecretConfig buildSdsSecretConfig(String name, String targetUri, String channelType) {\n-    SdsSecretConfig sdsSecretConfig = null;\n+  static io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig buildSdsSecretConfigV2(\n+      String name, String targetUri, String channelType) {\n+    io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig sdsSecretConfig = null;\n     if (!Strings.isNullOrEmpty(name) && !Strings.isNullOrEmpty(targetUri)) {\n       sdsSecretConfig =\n-          SdsSecretConfig.newBuilder()\n+          io.envoyproxy.envoy.api.v2.auth.SdsSecretConfig.newBuilder()\n               .setName(name)\n-              .setSdsConfig(SdsClientTest.buildConfigSource(targetUri, channelType))\n+              .setSdsConfig(buildConfigSourceV2(targetUri, channelType))\n               .build();\n     }\n     return sdsSecretConfig;\n   }\n \n+  private static io.envoyproxy.envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU2MDk3MQ=="}, "originalCommit": {"oid": "6f32fb0eec0589cd4d606418de35ca2a85cfb855"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTg0MTE1OnYy", "diffSide": "RIGHT", "path": "xds/src/test/java/io/grpc/xds/XdsClientImplTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOToxODo1OVrOGryZhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMDoxOToyNlrOGr0Eew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU2NzY4NA==", "bodyText": "A high level comment about tests. So by renaming ADS_TYPE_URL_LDS to ADS_TYPE_URL_LDS_v2 we are only testing/validating v2 responses. What about testing v3 responses? Is there a separate PR for it or a TODO comment to indicate it needs to be done?", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r448567684", "createdAt": "2020-07-01T19:18:59Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/test/java/io/grpc/xds/XdsClientImplTest.java", "diffHunk": "@@ -336,7 +336,7 @@ public void ldsResponseWithoutMatchingResource() {\n     // Client sends an LDS request for the host name (with port) to management server.\n     verify(requestObserver)\n         .onNext(eq(buildDiscoveryRequest(NODE, \"\", TARGET_AUTHORITY,\n-            XdsClientImpl.ADS_TYPE_URL_LDS, \"\")));\n+            XdsClientImpl.ADS_TYPE_URL_LDS_v2, \"\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f32fb0eec0589cd4d606418de35ca2a85cfb855"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4OTMxNg==", "bodyText": "Currently we are still sending v2 request, so responses are expected to be v2. Testing v3 response will be after v3 bootstrap and env flag enabled.", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r448589316", "createdAt": "2020-07-01T20:06:44Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/test/java/io/grpc/xds/XdsClientImplTest.java", "diffHunk": "@@ -336,7 +336,7 @@ public void ldsResponseWithoutMatchingResource() {\n     // Client sends an LDS request for the host name (with port) to management server.\n     verify(requestObserver)\n         .onNext(eq(buildDiscoveryRequest(NODE, \"\", TARGET_AUTHORITY,\n-            XdsClientImpl.ADS_TYPE_URL_LDS, \"\")));\n+            XdsClientImpl.ADS_TYPE_URL_LDS_v2, \"\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU2NzY4NA=="}, "originalCommit": {"oid": "6f32fb0eec0589cd4d606418de35ca2a85cfb855"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU5NTA2Nw==", "bodyText": "Yes, I realized it later. Sounds good.", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r448595067", "createdAt": "2020-07-01T20:19:26Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/test/java/io/grpc/xds/XdsClientImplTest.java", "diffHunk": "@@ -336,7 +336,7 @@ public void ldsResponseWithoutMatchingResource() {\n     // Client sends an LDS request for the host name (with port) to management server.\n     verify(requestObserver)\n         .onNext(eq(buildDiscoveryRequest(NODE, \"\", TARGET_AUTHORITY,\n-            XdsClientImpl.ADS_TYPE_URL_LDS, \"\")));\n+            XdsClientImpl.ADS_TYPE_URL_LDS_v2, \"\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU2NzY4NA=="}, "originalCommit": {"oid": "6f32fb0eec0589cd4d606418de35ca2a85cfb855"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTk0Nzk4OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTo1NjoyOVrOGrzcRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMToxNzo1MlrOGr1qYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4NDc3NA==", "bodyText": "Is the lowercase v2 intended or typo? A const literal should be all uppercase, right? Same thing for other _v2 literals below.", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r448584774", "createdAt": "2020-07-01T19:56:29Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -86,7 +86,9 @@\n   static final int INITIAL_RESOURCE_FETCH_TIMEOUT_SEC = 15;\n \n   @VisibleForTesting\n-  static final String ADS_TYPE_URL_LDS = \"type.googleapis.com/envoy.api.v2.Listener\";\n+  static final String ADS_TYPE_URL_LDS_v2 = \"type.googleapis.com/envoy.api.v2.Listener\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f32fb0eec0589cd4d606418de35ca2a85cfb855"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyMTE1NQ==", "bodyText": "Corrected.", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r448621155", "createdAt": "2020-07-01T21:17:52Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -86,7 +86,9 @@\n   static final int INITIAL_RESOURCE_FETCH_TIMEOUT_SEC = 15;\n \n   @VisibleForTesting\n-  static final String ADS_TYPE_URL_LDS = \"type.googleapis.com/envoy.api.v2.Listener\";\n+  static final String ADS_TYPE_URL_LDS_v2 = \"type.googleapis.com/envoy.api.v2.Listener\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4NDc3NA=="}, "originalCommit": {"oid": "6f32fb0eec0589cd4d606418de35ca2a85cfb855"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTk5MTQ4OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMDoxMjozOFrOGrz4EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMTozNzo1N1rOGr2LnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU5MTg4OQ==", "bodyText": "Couple of things:\n\nbased on https://github.com/envoyproxy/envoy/blob/master/api/envoy/service/discovery/v3/discovery.proto#L97 which says \"Type URL ... Must be consistent with the type_url in the 'resources' repeated Any\". Should we have that check here now that v2 and v3 are the 2 possibilities?\nshouldn't the typeUrl in ACK/NACK match what was there in the response? I think it is possible that the client asks for v3 in the request but the response comes back with v2. In that case should ACK/NACK match the typeUrl of the original request or the response?", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r448591889", "createdAt": "2020-07-01T20:12:38Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -553,14 +555,17 @@ private void handleLdsResponseForConfigUpdate(DiscoveryResponse ldsResponse) {\n     List<String> listenerNames = new ArrayList<>(ldsResponse.getResourcesCount());\n     try {\n       for (com.google.protobuf.Any res : ldsResponse.getResourcesList()) {\n+        if (res.getTypeUrl().equals(ADS_TYPE_URL_LDS_v2)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f32fb0eec0589cd4d606418de35ca2a85cfb855"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYwODk3Mg==", "bodyText": "I did have the check that v2 and v3 are the 2 possibilities (Will ACK for 2 possibilities)\nhttps://github.com/grpc/grpc-java/pull/7169/files/6f32fb0eec0589cd4d606418de35ca2a85cfb855#diff-2ab746208e54edd7bcbba5fc408b6946R1327\nBut I do not check the type_url of response is consistent with that of repeated Any - I assume the TD is consistent.", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r448608972", "createdAt": "2020-07-01T20:50:05Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -553,14 +555,17 @@ private void handleLdsResponseForConfigUpdate(DiscoveryResponse ldsResponse) {\n     List<String> listenerNames = new ArrayList<>(ldsResponse.getResourcesCount());\n     try {\n       for (com.google.protobuf.Any res : ldsResponse.getResourcesList()) {\n+        if (res.getTypeUrl().equals(ADS_TYPE_URL_LDS_v2)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU5MTg4OQ=="}, "originalCommit": {"oid": "6f32fb0eec0589cd4d606418de35ca2a85cfb855"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxOTgyNw==", "bodyText": "In that case should ACK/NACK match the typeUrl of the original request or the response?\n\nI think we should match the response.", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r448619827", "createdAt": "2020-07-01T21:15:01Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -553,14 +555,17 @@ private void handleLdsResponseForConfigUpdate(DiscoveryResponse ldsResponse) {\n     List<String> listenerNames = new ArrayList<>(ldsResponse.getResourcesCount());\n     try {\n       for (com.google.protobuf.Any res : ldsResponse.getResourcesList()) {\n+        if (res.getTypeUrl().equals(ADS_TYPE_URL_LDS_v2)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU5MTg4OQ=="}, "originalCommit": {"oid": "6f32fb0eec0589cd4d606418de35ca2a85cfb855"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyOTY2MA==", "bodyText": "In that case should ACK/NACK match the typeUrl of the original request or the response?\n\nI think we should match the response.\n\nThat discussion is in a separate thread so we can continue it there. I agree that there is no need to validate responses from the control plane (TD).", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r448629660", "createdAt": "2020-07-01T21:37:57Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -553,14 +555,17 @@ private void handleLdsResponseForConfigUpdate(DiscoveryResponse ldsResponse) {\n     List<String> listenerNames = new ArrayList<>(ldsResponse.getResourcesCount());\n     try {\n       for (com.google.protobuf.Any res : ldsResponse.getResourcesList()) {\n+        if (res.getTypeUrl().equals(ADS_TYPE_URL_LDS_v2)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU5MTg4OQ=="}, "originalCommit": {"oid": "6f32fb0eec0589cd4d606418de35ca2a85cfb855"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTk5NjU4OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "isResolved": true, "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMDoxNDoyOVrOGrz7Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMzoxOTo1NVrOGr4TVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU5MjcyNg==", "bodyText": "My comment above about v2 vs v3. For now this is okay but when the v3 migration is complete and our request uses v3 typeUrl should we analyze the responses for v2 vs v3 typeUrl and use that for resource validation and also subsequent ACK/NACK?", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r448592726", "createdAt": "2020-07-01T20:14:29Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -553,14 +555,17 @@ private void handleLdsResponseForConfigUpdate(DiscoveryResponse ldsResponse) {\n     List<String> listenerNames = new ArrayList<>(ldsResponse.getResourcesCount());\n     try {\n       for (com.google.protobuf.Any res : ldsResponse.getResourcesList()) {\n+        if (res.getTypeUrl().equals(ADS_TYPE_URL_LDS_v2)) {\n+          res = res.toBuilder().setTypeUrl(ADS_TYPE_URL_LDS).build();\n+        }\n         Listener listener = res.unpack(Listener.class);\n         listeners.add(listener);\n         listenerNames.add(listener.getName());\n       }\n     } catch (InvalidProtocolBufferException e) {\n       logger.log(XdsLogLevel.WARNING, \"Failed to unpack Listeners in LDS response {0}\", e);\n       adsStream.sendNackRequest(\n-          ADS_TYPE_URL_LDS, ImmutableList.of(ldsResourceName),\n+          ADS_TYPE_URL_LDS_v2, ImmutableList.of(ldsResourceName),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f32fb0eec0589cd4d606418de35ca2a85cfb855"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYwNTQ1Nw==", "bodyText": "My understanding of the design doc is we should accept (ACK) both v2 and v3 response before we drop v2 support.", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r448605457", "createdAt": "2020-07-01T20:42:24Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -553,14 +555,17 @@ private void handleLdsResponseForConfigUpdate(DiscoveryResponse ldsResponse) {\n     List<String> listenerNames = new ArrayList<>(ldsResponse.getResourcesCount());\n     try {\n       for (com.google.protobuf.Any res : ldsResponse.getResourcesList()) {\n+        if (res.getTypeUrl().equals(ADS_TYPE_URL_LDS_v2)) {\n+          res = res.toBuilder().setTypeUrl(ADS_TYPE_URL_LDS).build();\n+        }\n         Listener listener = res.unpack(Listener.class);\n         listeners.add(listener);\n         listenerNames.add(listener.getName());\n       }\n     } catch (InvalidProtocolBufferException e) {\n       logger.log(XdsLogLevel.WARNING, \"Failed to unpack Listeners in LDS response {0}\", e);\n       adsStream.sendNackRequest(\n-          ADS_TYPE_URL_LDS, ImmutableList.of(ldsResourceName),\n+          ADS_TYPE_URL_LDS_v2, ImmutableList.of(ldsResourceName),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU5MjcyNg=="}, "originalCommit": {"oid": "6f32fb0eec0589cd4d606418de35ca2a85cfb855"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYwOTUzMQ==", "bodyText": "Agreed but my point was slightly different. When the v3 migration is complete we will request v3 resources by using the v3 type Url in the DiscoveryRequest (https://github.com/envoyproxy/envoy/blob/master/api/envoy/service/discovery/v3/discovery.proto#L54). Let's say the control plane decides to return v2 resources instead (which is possible and that's why we need to maintain v2 support for some time). So in the DiscoveryResponse the typeUrl (https://github.com/envoyproxy/envoy/blob/master/api/envoy/service/discovery/v3/discovery.proto#L98) will be for v2 and so will be in the individual resources (https://github.com/envoyproxy/envoy/blob/master/api/envoy/service/discovery/v3/discovery.proto#L78). When that happens and you decide to ACK or NACK that response will that ACK/NACK use v2 typeUrl (to match the response) or the v3 typeUrl (to match the original request)? If the answer it to match the original request then there isn't much to do but if the answer is to match the response then we need additional logic (may be not in this PR).", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r448609531", "createdAt": "2020-07-01T20:51:18Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -553,14 +555,17 @@ private void handleLdsResponseForConfigUpdate(DiscoveryResponse ldsResponse) {\n     List<String> listenerNames = new ArrayList<>(ldsResponse.getResourcesCount());\n     try {\n       for (com.google.protobuf.Any res : ldsResponse.getResourcesList()) {\n+        if (res.getTypeUrl().equals(ADS_TYPE_URL_LDS_v2)) {\n+          res = res.toBuilder().setTypeUrl(ADS_TYPE_URL_LDS).build();\n+        }\n         Listener listener = res.unpack(Listener.class);\n         listeners.add(listener);\n         listenerNames.add(listener.getName());\n       }\n     } catch (InvalidProtocolBufferException e) {\n       logger.log(XdsLogLevel.WARNING, \"Failed to unpack Listeners in LDS response {0}\", e);\n       adsStream.sendNackRequest(\n-          ADS_TYPE_URL_LDS, ImmutableList.of(ldsResourceName),\n+          ADS_TYPE_URL_LDS_v2, ImmutableList.of(ldsResourceName),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU5MjcyNg=="}, "originalCommit": {"oid": "6f32fb0eec0589cd4d606418de35ca2a85cfb855"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxNTEyNg==", "bodyText": "So in the case of (after migration, before dropping v2 support) xds client sending v3 request and receiving v2 response (and v2 individual resources of course): we parse the v2 resources to v3 resource objects and ACK the v2 response (with v2 typeUrl  in the ACK I think. cc @markdroth to confirm) if no error occurs.", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r448615126", "createdAt": "2020-07-01T21:03:53Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -553,14 +555,17 @@ private void handleLdsResponseForConfigUpdate(DiscoveryResponse ldsResponse) {\n     List<String> listenerNames = new ArrayList<>(ldsResponse.getResourcesCount());\n     try {\n       for (com.google.protobuf.Any res : ldsResponse.getResourcesList()) {\n+        if (res.getTypeUrl().equals(ADS_TYPE_URL_LDS_v2)) {\n+          res = res.toBuilder().setTypeUrl(ADS_TYPE_URL_LDS).build();\n+        }\n         Listener listener = res.unpack(Listener.class);\n         listeners.add(listener);\n         listenerNames.add(listener.getName());\n       }\n     } catch (InvalidProtocolBufferException e) {\n       logger.log(XdsLogLevel.WARNING, \"Failed to unpack Listeners in LDS response {0}\", e);\n       adsStream.sendNackRequest(\n-          ADS_TYPE_URL_LDS, ImmutableList.of(ldsResourceName),\n+          ADS_TYPE_URL_LDS_v2, ImmutableList.of(ldsResourceName),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU5MjcyNg=="}, "originalCommit": {"oid": "6f32fb0eec0589cd4d606418de35ca2a85cfb855"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxNzI3Nw==", "bodyText": "Basically I think we should ACK/NACK with type_url version the same as the type_url of the response.", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r448617277", "createdAt": "2020-07-01T21:09:02Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -553,14 +555,17 @@ private void handleLdsResponseForConfigUpdate(DiscoveryResponse ldsResponse) {\n     List<String> listenerNames = new ArrayList<>(ldsResponse.getResourcesCount());\n     try {\n       for (com.google.protobuf.Any res : ldsResponse.getResourcesList()) {\n+        if (res.getTypeUrl().equals(ADS_TYPE_URL_LDS_v2)) {\n+          res = res.toBuilder().setTypeUrl(ADS_TYPE_URL_LDS).build();\n+        }\n         Listener listener = res.unpack(Listener.class);\n         listeners.add(listener);\n         listenerNames.add(listener.getName());\n       }\n     } catch (InvalidProtocolBufferException e) {\n       logger.log(XdsLogLevel.WARNING, \"Failed to unpack Listeners in LDS response {0}\", e);\n       adsStream.sendNackRequest(\n-          ADS_TYPE_URL_LDS, ImmutableList.of(ldsResourceName),\n+          ADS_TYPE_URL_LDS_v2, ImmutableList.of(ldsResourceName),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU5MjcyNg=="}, "originalCommit": {"oid": "6f32fb0eec0589cd4d606418de35ca2a85cfb855"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxOTQ5NQ==", "bodyText": "In that case this line can be changed to\nldsResponse.getTypeUrl(), ImmutableList.of(ldsResourceName),\n\nand similar changes elsewhere for all ACK/NACK cases. Provided we confirm that the typeUrl in ACK/NACK has to match the one in the response. WDYT?", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r448619495", "createdAt": "2020-07-01T21:14:15Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -553,14 +555,17 @@ private void handleLdsResponseForConfigUpdate(DiscoveryResponse ldsResponse) {\n     List<String> listenerNames = new ArrayList<>(ldsResponse.getResourcesCount());\n     try {\n       for (com.google.protobuf.Any res : ldsResponse.getResourcesList()) {\n+        if (res.getTypeUrl().equals(ADS_TYPE_URL_LDS_v2)) {\n+          res = res.toBuilder().setTypeUrl(ADS_TYPE_URL_LDS).build();\n+        }\n         Listener listener = res.unpack(Listener.class);\n         listeners.add(listener);\n         listenerNames.add(listener.getName());\n       }\n     } catch (InvalidProtocolBufferException e) {\n       logger.log(XdsLogLevel.WARNING, \"Failed to unpack Listeners in LDS response {0}\", e);\n       adsStream.sendNackRequest(\n-          ADS_TYPE_URL_LDS, ImmutableList.of(ldsResourceName),\n+          ADS_TYPE_URL_LDS_v2, ImmutableList.of(ldsResourceName),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU5MjcyNg=="}, "originalCommit": {"oid": "6f32fb0eec0589cd4d606418de35ca2a85cfb855"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyMDEwNA==", "bodyText": "Good question.  I think we will want the ACK/NACK to use the version that we originally requested, not the version that the server sent back.  This is because the xDS protocol does not have a completely separate ACK/NACK message; the ACK or NACK is implicitly included in the next request, which may also change the set of requested resource names at the same time as it sends an ACK/NACK.  And since we are already expecting the server to be understanding that the v2 and v3 resource names are the same, that logic should not be any different for ACK/NACK than it should be for any other request.\n@htuch, can you give me a sanity check that the above is correct?", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r448620104", "createdAt": "2020-07-01T21:15:36Z", "author": {"login": "markdroth"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -553,14 +555,17 @@ private void handleLdsResponseForConfigUpdate(DiscoveryResponse ldsResponse) {\n     List<String> listenerNames = new ArrayList<>(ldsResponse.getResourcesCount());\n     try {\n       for (com.google.protobuf.Any res : ldsResponse.getResourcesList()) {\n+        if (res.getTypeUrl().equals(ADS_TYPE_URL_LDS_v2)) {\n+          res = res.toBuilder().setTypeUrl(ADS_TYPE_URL_LDS).build();\n+        }\n         Listener listener = res.unpack(Listener.class);\n         listeners.add(listener);\n         listenerNames.add(listener.getName());\n       }\n     } catch (InvalidProtocolBufferException e) {\n       logger.log(XdsLogLevel.WARNING, \"Failed to unpack Listeners in LDS response {0}\", e);\n       adsStream.sendNackRequest(\n-          ADS_TYPE_URL_LDS, ImmutableList.of(ldsResourceName),\n+          ADS_TYPE_URL_LDS_v2, ImmutableList.of(ldsResourceName),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU5MjcyNg=="}, "originalCommit": {"oid": "6f32fb0eec0589cd4d606418de35ca2a85cfb855"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyMjk5Mg==", "bodyText": "@markdroth I can see it either way. If the server uses the typeUrl (from the response) for its bookkeeping and version tracking of resources for clients then ACKing/NACKing with the original request's typeUrl could confuse it. It will be good to get a definitive answer from the xDS spec. BTW, what does C-core do?", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r448622992", "createdAt": "2020-07-01T21:22:18Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -553,14 +555,17 @@ private void handleLdsResponseForConfigUpdate(DiscoveryResponse ldsResponse) {\n     List<String> listenerNames = new ArrayList<>(ldsResponse.getResourcesCount());\n     try {\n       for (com.google.protobuf.Any res : ldsResponse.getResourcesList()) {\n+        if (res.getTypeUrl().equals(ADS_TYPE_URL_LDS_v2)) {\n+          res = res.toBuilder().setTypeUrl(ADS_TYPE_URL_LDS).build();\n+        }\n         Listener listener = res.unpack(Listener.class);\n         listeners.add(listener);\n         listenerNames.add(listener.getName());\n       }\n     } catch (InvalidProtocolBufferException e) {\n       logger.log(XdsLogLevel.WARNING, \"Failed to unpack Listeners in LDS response {0}\", e);\n       adsStream.sendNackRequest(\n-          ADS_TYPE_URL_LDS, ImmutableList.of(ldsResourceName),\n+          ADS_TYPE_URL_LDS_v2, ImmutableList.of(ldsResourceName),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU5MjcyNg=="}, "originalCommit": {"oid": "6f32fb0eec0589cd4d606418de35ca2a85cfb855"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyODk4MA==", "bodyText": "In any case, using the typeUrl of the original request sounds more logical so let's go ahead with that for now. If we hear otherwise we can make that change as a separate PR.", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r448628980", "createdAt": "2020-07-01T21:36:12Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -553,14 +555,17 @@ private void handleLdsResponseForConfigUpdate(DiscoveryResponse ldsResponse) {\n     List<String> listenerNames = new ArrayList<>(ldsResponse.getResourcesCount());\n     try {\n       for (com.google.protobuf.Any res : ldsResponse.getResourcesList()) {\n+        if (res.getTypeUrl().equals(ADS_TYPE_URL_LDS_v2)) {\n+          res = res.toBuilder().setTypeUrl(ADS_TYPE_URL_LDS).build();\n+        }\n         Listener listener = res.unpack(Listener.class);\n         listeners.add(listener);\n         listenerNames.add(listener.getName());\n       }\n     } catch (InvalidProtocolBufferException e) {\n       logger.log(XdsLogLevel.WARNING, \"Failed to unpack Listeners in LDS response {0}\", e);\n       adsStream.sendNackRequest(\n-          ADS_TYPE_URL_LDS, ImmutableList.of(ldsResourceName),\n+          ADS_TYPE_URL_LDS_v2, ImmutableList.of(ldsResourceName),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU5MjcyNg=="}, "originalCommit": {"oid": "6f32fb0eec0589cd4d606418de35ca2a85cfb855"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyOTI4Ng==", "bodyText": "My work-in-progress PR for C-core (grpc/grpc#23281) will always use the version that the client is using, not the version that the server sends back.\nThe more I think about this, the less sense it makes to me to use the version that the server sent back.  Any server that decides to send a different version than the one that was asked for is already needing to understand the mapping between those two versions.  And having the client switch which version it's referring to in the middle of the stream seems like it could badly confuse the xDS semantics, because (as I said earlier) an ACK/NACK can be part of the same request as a change to the set of subscribed resource names, and the client will have already previously sent a request for a different set of resource names using the other version.", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r448629286", "createdAt": "2020-07-01T21:36:59Z", "author": {"login": "markdroth"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -553,14 +555,17 @@ private void handleLdsResponseForConfigUpdate(DiscoveryResponse ldsResponse) {\n     List<String> listenerNames = new ArrayList<>(ldsResponse.getResourcesCount());\n     try {\n       for (com.google.protobuf.Any res : ldsResponse.getResourcesList()) {\n+        if (res.getTypeUrl().equals(ADS_TYPE_URL_LDS_v2)) {\n+          res = res.toBuilder().setTypeUrl(ADS_TYPE_URL_LDS).build();\n+        }\n         Listener listener = res.unpack(Listener.class);\n         listeners.add(listener);\n         listenerNames.add(listener.getName());\n       }\n     } catch (InvalidProtocolBufferException e) {\n       logger.log(XdsLogLevel.WARNING, \"Failed to unpack Listeners in LDS response {0}\", e);\n       adsStream.sendNackRequest(\n-          ADS_TYPE_URL_LDS, ImmutableList.of(ldsResourceName),\n+          ADS_TYPE_URL_LDS_v2, ImmutableList.of(ldsResourceName),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU5MjcyNg=="}, "originalCommit": {"oid": "6f32fb0eec0589cd4d606418de35ca2a85cfb855"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzODAwMQ==", "bodyText": "I agree (with Mark's comment) so let's go ahead with that approach. Just to add for better/wider understanding, the server side should ignore the typeUrls in the ACK/NACK but keep using the typeUrl used to establish the stream (in my opinion).", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r448638001", "createdAt": "2020-07-01T21:58:48Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -553,14 +555,17 @@ private void handleLdsResponseForConfigUpdate(DiscoveryResponse ldsResponse) {\n     List<String> listenerNames = new ArrayList<>(ldsResponse.getResourcesCount());\n     try {\n       for (com.google.protobuf.Any res : ldsResponse.getResourcesList()) {\n+        if (res.getTypeUrl().equals(ADS_TYPE_URL_LDS_v2)) {\n+          res = res.toBuilder().setTypeUrl(ADS_TYPE_URL_LDS).build();\n+        }\n         Listener listener = res.unpack(Listener.class);\n         listeners.add(listener);\n         listenerNames.add(listener.getName());\n       }\n     } catch (InvalidProtocolBufferException e) {\n       logger.log(XdsLogLevel.WARNING, \"Failed to unpack Listeners in LDS response {0}\", e);\n       adsStream.sendNackRequest(\n-          ADS_TYPE_URL_LDS, ImmutableList.of(ldsResourceName),\n+          ADS_TYPE_URL_LDS_v2, ImmutableList.of(ldsResourceName),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU5MjcyNg=="}, "originalCommit": {"oid": "6f32fb0eec0589cd4d606418de35ca2a85cfb855"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY2NDQwNQ==", "bodyText": "Yeah, ACK/NACK with the original version.", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r448664405", "createdAt": "2020-07-01T23:19:55Z", "author": {"login": "htuch"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -553,14 +555,17 @@ private void handleLdsResponseForConfigUpdate(DiscoveryResponse ldsResponse) {\n     List<String> listenerNames = new ArrayList<>(ldsResponse.getResourcesCount());\n     try {\n       for (com.google.protobuf.Any res : ldsResponse.getResourcesList()) {\n+        if (res.getTypeUrl().equals(ADS_TYPE_URL_LDS_v2)) {\n+          res = res.toBuilder().setTypeUrl(ADS_TYPE_URL_LDS).build();\n+        }\n         Listener listener = res.unpack(Listener.class);\n         listeners.add(listener);\n         listenerNames.add(listener.getName());\n       }\n     } catch (InvalidProtocolBufferException e) {\n       logger.log(XdsLogLevel.WARNING, \"Failed to unpack Listeners in LDS response {0}\", e);\n       adsStream.sendNackRequest(\n-          ADS_TYPE_URL_LDS, ImmutableList.of(ldsResourceName),\n+          ADS_TYPE_URL_LDS_v2, ImmutableList.of(ldsResourceName),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU5MjcyNg=="}, "originalCommit": {"oid": "6f32fb0eec0589cd4d606418de35ca2a85cfb855"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjI0MjE2OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMTo0MTozN1rOGr2RYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMTozNDo0OFrOGshOVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzMTEzOQ==", "bodyText": "Is this trick really gonna work?", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r448631139", "createdAt": "2020-07-01T21:41:37Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -553,14 +555,17 @@ private void handleLdsResponseForConfigUpdate(DiscoveryResponse ldsResponse) {\n     List<String> listenerNames = new ArrayList<>(ldsResponse.getResourcesCount());\n     try {\n       for (com.google.protobuf.Any res : ldsResponse.getResourcesList()) {\n+        if (res.getTypeUrl().equals(ADS_TYPE_URL_LDS_V2)) {\n+          res = res.toBuilder().setTypeUrl(ADS_TYPE_URL_LDS).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e760d36e065765f36b44cad1fe2521213e548a4"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzMjk1OA==", "bodyText": "I think the answer is yes since that is the whole basis for this PR (or this set of PRs). Having a unit test to prove it works should not be difficult.", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r448632958", "createdAt": "2020-07-01T21:45:59Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -553,14 +555,17 @@ private void handleLdsResponseForConfigUpdate(DiscoveryResponse ldsResponse) {\n     List<String> listenerNames = new ArrayList<>(ldsResponse.getResourcesCount());\n     try {\n       for (com.google.protobuf.Any res : ldsResponse.getResourcesList()) {\n+        if (res.getTypeUrl().equals(ADS_TYPE_URL_LDS_V2)) {\n+          res = res.toBuilder().setTypeUrl(ADS_TYPE_URL_LDS).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzMTEzOQ=="}, "originalCommit": {"oid": "8e760d36e065765f36b44cad1fe2521213e548a4"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzNjcwOA==", "bodyText": "Why not?", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r448636708", "createdAt": "2020-07-01T21:55:20Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -553,14 +555,17 @@ private void handleLdsResponseForConfigUpdate(DiscoveryResponse ldsResponse) {\n     List<String> listenerNames = new ArrayList<>(ldsResponse.getResourcesCount());\n     try {\n       for (com.google.protobuf.Any res : ldsResponse.getResourcesList()) {\n+        if (res.getTypeUrl().equals(ADS_TYPE_URL_LDS_V2)) {\n+          res = res.toBuilder().setTypeUrl(ADS_TYPE_URL_LDS).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzMTEzOQ=="}, "originalCommit": {"oid": "8e760d36e065765f36b44cad1fe2521213e548a4"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY0NzMzMA==", "bodyText": "I am suspecting Any.unpack would break. I really doubt Any.unpack can deserialize a v3 Listener bytes to a v2 Listener without screwing up the message. Do you have any doc reference doing that?", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r448647330", "createdAt": "2020-07-01T22:25:12Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -553,14 +555,17 @@ private void handleLdsResponseForConfigUpdate(DiscoveryResponse ldsResponse) {\n     List<String> listenerNames = new ArrayList<>(ldsResponse.getResourcesCount());\n     try {\n       for (com.google.protobuf.Any res : ldsResponse.getResourcesList()) {\n+        if (res.getTypeUrl().equals(ADS_TYPE_URL_LDS_V2)) {\n+          res = res.toBuilder().setTypeUrl(ADS_TYPE_URL_LDS).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzMTEzOQ=="}, "originalCommit": {"oid": "8e760d36e065765f36b44cad1fe2521213e548a4"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY0ODc5MQ==", "bodyText": "@voidzcy the logic here is the opposite. We are trying to deserialize a v2 proto payload as v3. And the approach has been discussed and agreed to for this work (in the design doc as well as a pending gRFC). If the field numbers are maintained and proper handling is done for deprecated and new fields I don't see why it won't work.", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r448648791", "createdAt": "2020-07-01T22:29:45Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -553,14 +555,17 @@ private void handleLdsResponseForConfigUpdate(DiscoveryResponse ldsResponse) {\n     List<String> listenerNames = new ArrayList<>(ldsResponse.getResourcesCount());\n     try {\n       for (com.google.protobuf.Any res : ldsResponse.getResourcesList()) {\n+        if (res.getTypeUrl().equals(ADS_TYPE_URL_LDS_V2)) {\n+          res = res.toBuilder().setTypeUrl(ADS_TYPE_URL_LDS).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzMTEzOQ=="}, "originalCommit": {"oid": "8e760d36e065765f36b44cad1fe2521213e548a4"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY1MTY0NQ==", "bodyText": "Ok, I see. They put placeholders for deprecated fields and arrange fields in the way that the message is ensured to be the same in the wire format as v2. Then this should work.", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r448651645", "createdAt": "2020-07-01T22:38:12Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -553,14 +555,17 @@ private void handleLdsResponseForConfigUpdate(DiscoveryResponse ldsResponse) {\n     List<String> listenerNames = new ArrayList<>(ldsResponse.getResourcesCount());\n     try {\n       for (com.google.protobuf.Any res : ldsResponse.getResourcesList()) {\n+        if (res.getTypeUrl().equals(ADS_TYPE_URL_LDS_V2)) {\n+          res = res.toBuilder().setTypeUrl(ADS_TYPE_URL_LDS).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzMTEzOQ=="}, "originalCommit": {"oid": "8e760d36e065765f36b44cad1fe2521213e548a4"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMzNDg3MA==", "bodyText": "resolving...", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r449334870", "createdAt": "2020-07-03T01:34:48Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -553,14 +555,17 @@ private void handleLdsResponseForConfigUpdate(DiscoveryResponse ldsResponse) {\n     List<String> listenerNames = new ArrayList<>(ldsResponse.getResourcesCount());\n     try {\n       for (com.google.protobuf.Any res : ldsResponse.getResourcesList()) {\n+        if (res.getTypeUrl().equals(ADS_TYPE_URL_LDS_V2)) {\n+          res = res.toBuilder().setTypeUrl(ADS_TYPE_URL_LDS).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzMTEzOQ=="}, "originalCommit": {"oid": "8e760d36e065765f36b44cad1fe2521213e548a4"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzE5MzY0OnYy", "diffSide": "LEFT", "path": "xds/src/test/java/io/grpc/xds/internal/sds/CommonTlsContextTestsUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMjowNjozNlrOGs4NHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNzowMjoyNlrOGtf0og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxMTM4OA==", "bodyText": "I didn't see the correspnding v3 import for CombinedCertificateValidationContext. It will be good to have that", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r449711388", "createdAt": "2020-07-03T22:06:36Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/test/java/io/grpc/xds/internal/sds/CommonTlsContextTestsUtil.java", "diffHunk": "@@ -18,14 +18,19 @@\n \n import com.google.common.base.Strings;\n import com.google.protobuf.BoolValue;\n-import io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext;\n-import io.envoyproxy.envoy.api.v2.auth.CommonTlsContext;\n-import io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e760d36e065765f36b44cad1fe2521213e548a4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM2MDQ4Mg==", "bodyText": "Done.", "url": "https://github.com/grpc/grpc-java/pull/7169#discussion_r450360482", "createdAt": "2020-07-06T17:02:26Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/test/java/io/grpc/xds/internal/sds/CommonTlsContextTestsUtil.java", "diffHunk": "@@ -18,14 +18,19 @@\n \n import com.google.common.base.Strings;\n import com.google.protobuf.BoolValue;\n-import io.envoyproxy.envoy.api.v2.auth.CertificateValidationContext;\n-import io.envoyproxy.envoy.api.v2.auth.CommonTlsContext;\n-import io.envoyproxy.envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxMTM4OA=="}, "originalCommit": {"oid": "8e760d36e065765f36b44cad1fe2521213e548a4"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2571, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}