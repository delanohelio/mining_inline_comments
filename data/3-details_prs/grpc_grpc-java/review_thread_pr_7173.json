{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyMzA1ODMz", "number": 7173, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzo0Mzo1M1rOEKmrYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMDozMTowOVrOEQ2Dtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTU0OTEzOnYy", "diffSide": "RIGHT", "path": "stub/src/main/java/io/grpc/stub/ServerCalls.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzo0Mzo1M1rOGrvihA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODowMDozOFrOGrwFRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUyMDgzNg==", "bodyText": "I feel this method is just adding an annoying redirection. Why not just call new UnaryServerCallHandler<>(method, serverStreaming) directly whenever asyncUnaryRequestCall is called?", "url": "https://github.com/grpc/grpc-java/pull/7173#discussion_r448520836", "createdAt": "2020-07-01T17:43:53Z", "author": {"login": "dapengzhang0"}, "path": "stub/src/main/java/io/grpc/stub/ServerCalls.java", "diffHunk": "@@ -211,24 +215,26 @@ public void onReady() {\n    * @param method an adaptor to the actual method on the service implementation.\n    */\n   private static <ReqT, RespT> ServerCallHandler<ReqT, RespT> asyncUnaryRequestCall(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7cf787b526407b4539e6195d0c24c8f4b77f271"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUyOTI0MQ==", "bodyText": "That sounds fine. Do you mind if I do that as a follow-up?", "url": "https://github.com/grpc/grpc-java/pull/7173#discussion_r448529241", "createdAt": "2020-07-01T17:59:42Z", "author": {"login": "ejona86"}, "path": "stub/src/main/java/io/grpc/stub/ServerCalls.java", "diffHunk": "@@ -211,24 +215,26 @@ public void onReady() {\n    * @param method an adaptor to the actual method on the service implementation.\n    */\n   private static <ReqT, RespT> ServerCallHandler<ReqT, RespT> asyncUnaryRequestCall(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUyMDgzNg=="}, "originalCommit": {"oid": "b7cf787b526407b4539e6195d0c24c8f4b77f271"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUyOTczMg==", "bodyText": "Actually, let me do it as a pre-refactor, since I was going to let this PR \"sit\" for us to discuss it in the API meeting.", "url": "https://github.com/grpc/grpc-java/pull/7173#discussion_r448529732", "createdAt": "2020-07-01T18:00:38Z", "author": {"login": "ejona86"}, "path": "stub/src/main/java/io/grpc/stub/ServerCalls.java", "diffHunk": "@@ -211,24 +215,26 @@ public void onReady() {\n    * @param method an adaptor to the actual method on the service implementation.\n    */\n   private static <ReqT, RespT> ServerCallHandler<ReqT, RespT> asyncUnaryRequestCall(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUyMDgzNg=="}, "originalCommit": {"oid": "b7cf787b526407b4539e6195d0c24c8f4b77f271"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDk4MzU4OnYy", "diffSide": "RIGHT", "path": "stub/src/main/java/io/grpc/stub/ServerCalls.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMDozMTowOVrOG1Oe5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxODozODozNVrOHbWkrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NDk5OQ==", "bodyText": "This message is confusing. It seems a hint to the developer to change their source code: \"To disable this exception: use ServerCallStreamObserver.setOnCancelHandler()\", not an error message to users.", "url": "https://github.com/grpc/grpc-java/pull/7173#discussion_r458464999", "createdAt": "2020-07-22T00:31:09Z", "author": {"login": "dapengzhang0"}, "path": "stub/src/main/java/io/grpc/stub/ServerCalls.java", "diffHunk": "@@ -331,10 +344,17 @@ public void setCompression(String compression) {\n     @Override\n     public void onNext(RespT response) {\n       if (cancelled) {\n-        if (onCancelHandler == null) {\n-          throw Status.CANCELLED.withDescription(\"call already cancelled\").asRuntimeException();\n+        if (serverStreamingOrBidi) {\n+          throw Status.CANCELLED\n+              .withDescription(\"call already cancelled. \"\n+                  + \"ServerCallStreamObserver.setOnCancelHandler() disables this exception\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c111d855a4a714b26d4ddeac6851a0c2177a7529"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg0NDY0Ng==", "bodyText": "Do you have a suggestion for alternative wording? This is what we discussed in the API review. When would users see this exception?", "url": "https://github.com/grpc/grpc-java/pull/7173#discussion_r458844646", "createdAt": "2020-07-22T14:41:17Z", "author": {"login": "ejona86"}, "path": "stub/src/main/java/io/grpc/stub/ServerCalls.java", "diffHunk": "@@ -331,10 +344,17 @@ public void setCompression(String compression) {\n     @Override\n     public void onNext(RespT response) {\n       if (cancelled) {\n-        if (onCancelHandler == null) {\n-          throw Status.CANCELLED.withDescription(\"call already cancelled\").asRuntimeException();\n+        if (serverStreamingOrBidi) {\n+          throw Status.CANCELLED\n+              .withDescription(\"call already cancelled. \"\n+                  + \"ServerCallStreamObserver.setOnCancelHandler() disables this exception\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NDk5OQ=="}, "originalCommit": {"oid": "c111d855a4a714b26d4ddeac6851a0c2177a7529"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkyNTUzOA==", "bodyText": "Do you have a suggestion for alternative wording?\n\nNo specific alternatives. I think we should just tell the user that this message is a hint to the developers.", "url": "https://github.com/grpc/grpc-java/pull/7173#discussion_r458925538", "createdAt": "2020-07-22T16:30:40Z", "author": {"login": "dapengzhang0"}, "path": "stub/src/main/java/io/grpc/stub/ServerCalls.java", "diffHunk": "@@ -331,10 +344,17 @@ public void setCompression(String compression) {\n     @Override\n     public void onNext(RespT response) {\n       if (cancelled) {\n-        if (onCancelHandler == null) {\n-          throw Status.CANCELLED.withDescription(\"call already cancelled\").asRuntimeException();\n+        if (serverStreamingOrBidi) {\n+          throw Status.CANCELLED\n+              .withDescription(\"call already cancelled. \"\n+                  + \"ServerCallStreamObserver.setOnCancelHandler() disables this exception\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NDk5OQ=="}, "originalCommit": {"oid": "c111d855a4a714b26d4ddeac6851a0c2177a7529"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ0MzQzNg==", "bodyText": "Decided on:\n\"Use ServerCallStreamObserver.setOnCancelHandler() to disable this exception\"", "url": "https://github.com/grpc/grpc-java/pull/7173#discussion_r498443436", "createdAt": "2020-10-01T18:38:35Z", "author": {"login": "ejona86"}, "path": "stub/src/main/java/io/grpc/stub/ServerCalls.java", "diffHunk": "@@ -331,10 +344,17 @@ public void setCompression(String compression) {\n     @Override\n     public void onNext(RespT response) {\n       if (cancelled) {\n-        if (onCancelHandler == null) {\n-          throw Status.CANCELLED.withDescription(\"call already cancelled\").asRuntimeException();\n+        if (serverStreamingOrBidi) {\n+          throw Status.CANCELLED\n+              .withDescription(\"call already cancelled. \"\n+                  + \"ServerCallStreamObserver.setOnCancelHandler() disables this exception\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NDk5OQ=="}, "originalCommit": {"oid": "c111d855a4a714b26d4ddeac6851a0c2177a7529"}, "originalPosition": 143}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2576, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}