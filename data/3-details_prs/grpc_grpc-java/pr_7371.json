{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0ODc2MzI1", "number": 7371, "title": "xds: add server start semantics as per the server api design", "bodyText": "CC @ejona86 xds server start semantics as per the discussion/design", "createdAt": "2020-08-27T18:32:02Z", "url": "https://github.com/grpc/grpc-java/pull/7371", "merged": true, "mergeCommit": {"oid": "b110cf32a003f2825cc0fff9fd979148514a9210"}, "closed": true, "closedAt": "2020-09-09T00:23:58Z", "author": {"login": "sanjaypujare"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdDEtpMgH2gAyNDc0ODc2MzI1OjNkNzA2MTYxNWJhMmQ2NGEwOTY0OTFiZjE5MDRiMzg3YWI0MGU2YTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHAn1ggFqTQ4NDU2OTUzMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3d7061615ba2d64a096491bf1904b387ab40e6a6", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/3d7061615ba2d64a096491bf1904b387ab40e6a6", "committedDate": "2020-08-27T18:28:29Z", "message": "xds: add server start semantics as per the server api design"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MTE0NjAx", "url": "https://github.com/grpc/grpc-java/pull/7371#pullrequestreview-477114601", "createdAt": "2020-08-27T22:01:29Z", "commit": {"oid": "3d7061615ba2d64a096491bf1904b387ab40e6a6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMjowMTozMFrOHIixOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMjowMTozMFrOHIixOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyMDMxNA==", "bodyText": "If this throws an exception, it should cause start() itself to throw an exception. start() should block until delegate.start() completes.", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r478720314", "createdAt": "2020-08-27T22:01:30Z", "author": {"login": "ejona86"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/ServerWrapperForXds.java", "diffHunk": "@@ -36,16 +39,39 @@\n public final class ServerWrapperForXds extends Server {\n   private final Server delegate;\n   private final XdsClientWrapperForServerSds xdsClientWrapperForServerSds;\n+  @Nullable XdsServerBuilder.ErrorNotifier errorNotifier;\n \n-  ServerWrapperForXds(Server delegate, XdsClientWrapperForServerSds xdsClientWrapperForServerSds) {\n+  ServerWrapperForXds(\n+      Server delegate,\n+      XdsClientWrapperForServerSds xdsClientWrapperForServerSds,\n+      @Nullable XdsServerBuilder.ErrorNotifier errorNotifier) {\n     this.delegate = checkNotNull(delegate, \"delegate\");\n     this.xdsClientWrapperForServerSds =\n         checkNotNull(xdsClientWrapperForServerSds, \"xdsClientWrapperForServerSds\");\n+    this.errorNotifier = errorNotifier;\n   }\n \n   @Override\n-  public Server start() throws IOException {\n-    delegate.start();\n+  public Server start() {\n+    xdsClientWrapperForServerSds.addServerWatcher(\n+        new XdsClientWrapperForServerSds.ServerWatcher() {\n+          @Override\n+          public void onError(Status error) {\n+            if (errorNotifier != null) {\n+              errorNotifier.onError(error);\n+            }\n+          }\n+\n+          @Override\n+          public void onSuccess(EnvoyServerProtoData.DownstreamTlsContext downstreamTlsContext) {\n+            try {\n+              delegate.start();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d7061615ba2d64a096491bf1904b387ab40e6a6"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0236e9f307decc2e9e43b1d057c95a348a014d10", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/0236e9f307decc2e9e43b1d057c95a348a014d10", "committedDate": "2020-08-28T02:11:04Z", "message": "address review comments: start should block"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3ODU2OTEy", "url": "https://github.com/grpc/grpc-java/pull/7371#pullrequestreview-477856912", "createdAt": "2020-08-28T16:14:00Z", "commit": {"oid": "0236e9f307decc2e9e43b1d057c95a348a014d10"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjoxNDowMFrOHJMcSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjo0NDowN1rOHJNbhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQwMzA4MQ==", "bodyText": "Should this be private?", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r479403081", "createdAt": "2020-08-28T16:14:00Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientWrapperForServerSds.java", "diffHunk": "@@ -202,6 +208,14 @@ public DownstreamTlsContext getDownstreamTlsContext(Channel channel) {\n       checkState(\n           port == localInetAddr.getPort(),\n           \"Channel localAddress port does not match requested listener port\");\n+      return getDownstreamTlsContext(localInetAddr);\n+    }\n+    return null;\n+  }\n+\n+  DownstreamTlsContext getDownstreamTlsContext(InetSocketAddress localInetAddr) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0236e9f307decc2e9e43b1d057c95a348a014d10"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQwOTIwMw==", "bodyText": "Can the name just be serverWatcher?", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r479409203", "createdAt": "2020-08-28T16:24:41Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/ServerWrapperForXds.java", "diffHunk": "@@ -36,22 +42,59 @@\n public final class ServerWrapperForXds extends Server {\n   private final Server delegate;\n   private final XdsClientWrapperForServerSds xdsClientWrapperForServerSds;\n+  @Nullable XdsServerBuilder.ErrorNotifier errorNotifier;\n+  @Nullable XdsClientWrapperForServerSds.ServerWatcher myServerWatcher;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0236e9f307decc2e9e43b1d057c95a348a014d10"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQxNDc1Ng==", "bodyText": "start()  throws IllegalStateException if already started. Although current implementation does so but could be more graceful without side effect.", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r479414756", "createdAt": "2020-08-28T16:35:12Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/ServerWrapperForXds.java", "diffHunk": "@@ -36,22 +42,59 @@\n public final class ServerWrapperForXds extends Server {\n   private final Server delegate;\n   private final XdsClientWrapperForServerSds xdsClientWrapperForServerSds;\n+  @Nullable XdsServerBuilder.ErrorNotifier errorNotifier;\n+  @Nullable XdsClientWrapperForServerSds.ServerWatcher myServerWatcher;\n \n-  ServerWrapperForXds(Server delegate, XdsClientWrapperForServerSds xdsClientWrapperForServerSds) {\n+  ServerWrapperForXds(\n+      Server delegate,\n+      XdsClientWrapperForServerSds xdsClientWrapperForServerSds,\n+      @Nullable XdsServerBuilder.ErrorNotifier errorNotifier) {\n     this.delegate = checkNotNull(delegate, \"delegate\");\n     this.xdsClientWrapperForServerSds =\n         checkNotNull(xdsClientWrapperForServerSds, \"xdsClientWrapperForServerSds\");\n+    this.errorNotifier = errorNotifier;\n   }\n \n   @Override\n   public Server start() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0236e9f307decc2e9e43b1d057c95a348a014d10"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQxOTI2OA==", "bodyText": "Might be better to move static helper methods to a test util class.", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r479419268", "createdAt": "2020-08-28T16:44:07Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/test/java/io/grpc/xds/XdsClientWrapperForServerSdsTestMisc.java", "diffHunk": "@@ -51,12 +57,14 @@\n   @Mock private Channel channel;\n \n   private XdsClientWrapperForServerSds xdsClientWrapperForServerSds;\n+  private XdsClient.ListenerWatcher registeredWatcher;\n \n   @Before\n   public void setUp() throws IOException {\n     MockitoAnnotations.initMocks(this);\n     xdsClientWrapperForServerSds = new XdsClientWrapperForServerSds(PORT);\n-    xdsClientWrapperForServerSds.start(xdsClient);\n+    registeredWatcher =\n+        XdsServerBuilderTest.startAndGetWatcher(xdsClientWrapperForServerSds, xdsClient, PORT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0236e9f307decc2e9e43b1d057c95a348a014d10"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b230d4cfbd15200ae7d0ee8980cca05cef69ad54", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/b230d4cfbd15200ae7d0ee8980cca05cef69ad54", "committedDate": "2020-08-31T16:35:06Z", "message": "address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4Nzk0MTcx", "url": "https://github.com/grpc/grpc-java/pull/7371#pullrequestreview-478794171", "createdAt": "2020-08-31T17:13:42Z", "commit": {"oid": "b230d4cfbd15200ae7d0ee8980cca05cef69ad54"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNzoxMzo0MlrOHKBYEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNzoxODowOFrOHKBgdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3MDM1Mw==", "bodyText": "I don't understand this method detail from it's name and args. Why there are two sets of port and context? Why there are two ports args but they are always the same value in all usages?", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r480270353", "createdAt": "2020-08-31T17:13:42Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/test/java/io/grpc/xds/XdsServerTestHelper.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.verify;\n+\n+import io.grpc.xds.internal.sds.XdsServerBuilder;\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import org.mockito.ArgumentCaptor;\n+\n+/**\n+ * Helper methods related to {@link XdsServerBuilder} and related classes.\n+ */\n+class XdsServerTestHelper {\n+\n+  static XdsClient.ListenerWatcher startAndGetWatcher(\n+      XdsClientWrapperForServerSds xdsClientWrapperForServerSds,\n+      XdsClient mockXdsClient,\n+      int port) {\n+    xdsClientWrapperForServerSds.start(mockXdsClient);\n+    ArgumentCaptor<XdsClient.ListenerWatcher> listenerWatcherCaptor = ArgumentCaptor.forClass(null);\n+    verify(mockXdsClient).watchListenerData(eq(port), listenerWatcherCaptor.capture());\n+    return listenerWatcherCaptor.getValue();\n+  }\n+\n+  static void generateListenerUpdate(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b230d4cfbd15200ae7d0ee8980cca05cef69ad54"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3MjUwMA==", "bodyText": "We can use an AtomicBoolean and checkState compareAndSet(false, true) instead. synchronized method with IO operation scares me in general although it works in this case.", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r480272500", "createdAt": "2020-08-31T17:18:08Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/ServerWrapperForXds.java", "diffHunk": "@@ -56,26 +59,28 @@\n   }\n \n   @Override\n-  public Server start() throws IOException {\n+  public synchronized Server start() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b230d4cfbd15200ae7d0ee8980cca05cef69ad54"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4ODA0MjUx", "url": "https://github.com/grpc/grpc-java/pull/7371#pullrequestreview-478804251", "createdAt": "2020-08-31T17:28:53Z", "commit": {"oid": "0236e9f307decc2e9e43b1d057c95a348a014d10"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNzoyODo1NFrOHKB2yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxODowNDozMFrOHKDAog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3ODIxOA==", "bodyText": "If interrupted, you need to call Thread.currentThread().interrupt().", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r480278218", "createdAt": "2020-08-31T17:28:54Z", "author": {"login": "ejona86"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/ServerWrapperForXds.java", "diffHunk": "@@ -52,8 +56,26 @@\n   }\n \n   @Override\n-  public Server start() {\n-    xdsClientWrapperForServerSds.addServerWatcher(\n+  public Server start() throws IOException {\n+    Future<EnvoyServerProtoData.DownstreamTlsContext> future = addServerWatcher();\n+    if (!xdsClientWrapperForServerSds.hasXdsClient()) {\n+      xdsClientWrapperForServerSds.createXdsClientAndStart();\n+    }\n+    try {\n+      future.get();\n+    } catch (InterruptedException | ExecutionException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0236e9f307decc2e9e43b1d057c95a348a014d10"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4MTU2Ng==", "bodyText": "We want this logging disabled when a user's watcher is installed. Wait... there's a lot of logging in this class. There should not be any logging at default-enabled log levels in this class (INFO and higher). Maybe there's an exception here or there, but this is clearly too often.", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r480281566", "createdAt": "2020-08-31T17:35:18Z", "author": {"login": "ejona86"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientWrapperForServerSds.java", "diffHunk": "@@ -170,18 +174,20 @@ public void onListenerChanged(XdsClient.ListenerUpdate update) {\n                 \"Setting myListener from ConfigUpdate listener: {0}\",\n                 update.getListener());\n             curListener = update.getListener();\n+            reportSuccess();\n           }\n \n           @Override\n           public void onResourceDoesNotExist(String resourceName) {\n             logger.log(Level.INFO, \"Resource {0} is unavailable\", resourceName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b230d4cfbd15200ae7d0ee8980cca05cef69ad54"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4NTU4Mg==", "bodyText": "AtomicBoolean isn't quite right because that means other start() calls could return before the first start() returns. I think we should just have a non-public lock and lock on it, which is what we do in ServerImpl.start(). That would also allow using lockInterruptibly() to have consistent interruption behavior. (Although multiple simultaneous starts really isn't all that interesting of a use-case.)", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r480285582", "createdAt": "2020-08-31T17:42:49Z", "author": {"login": "ejona86"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/ServerWrapperForXds.java", "diffHunk": "@@ -56,26 +59,28 @@\n   }\n \n   @Override\n-  public Server start() throws IOException {\n+  public synchronized Server start() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3MjUwMA=="}, "originalCommit": {"oid": "b230d4cfbd15200ae7d0ee8980cca05cef69ad54"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4NjU4Nw==", "bodyText": "s/with/set/ or to match other methods, just errorNotifier. We use with* when the method returns a new instance.", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r480286587", "createdAt": "2020-08-31T17:44:38Z", "author": {"login": "ejona86"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/XdsServerBuilder.java", "diffHunk": "@@ -129,6 +131,12 @@ public XdsServerBuilder fallbackProtocolNegotiator(\n     return this;\n   }\n \n+  /** Set the {@link ErrorNotifier}. Pass null to unset a previously set value. */\n+  public XdsServerBuilder withErrorNotifier(ErrorNotifier errorNotifier) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b230d4cfbd15200ae7d0ee8980cca05cef69ad54"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4NzI3Mg==", "bodyText": "This watcher should only be used during start(), so make that clear.", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r480287272", "createdAt": "2020-08-31T17:45:55Z", "author": {"login": "ejona86"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/XdsServerBuilder.java", "diffHunk": "@@ -150,6 +158,13 @@ public Server build() {\n   public ServerWrapperForXds buildServer(ServerSdsProtocolNegotiator serverProtocolNegotiator) {\n     delegate.protocolNegotiator(serverProtocolNegotiator);\n     return new ServerWrapperForXds(\n-        delegate.build(), serverProtocolNegotiator.getXdsClientWrapperForServerSds());\n+        delegate.build(), serverProtocolNegotiator.getXdsClientWrapperForServerSds(),\n+        errorNotifier);\n+  }\n+\n+  /** Watcher to receive error notifications from the xDS control plane. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b230d4cfbd15200ae7d0ee8980cca05cef69ad54"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI5Mjc0Mw==", "bodyText": "This is an synchronized write. It could be read concurrently within start().", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r480292743", "createdAt": "2020-08-31T17:56:06Z", "author": {"login": "ejona86"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/ServerWrapperForXds.java", "diffHunk": "@@ -36,22 +44,62 @@\n public final class ServerWrapperForXds extends Server {\n   private final Server delegate;\n   private final XdsClientWrapperForServerSds xdsClientWrapperForServerSds;\n-\n-  ServerWrapperForXds(Server delegate, XdsClientWrapperForServerSds xdsClientWrapperForServerSds) {\n+  @Nullable XdsServerBuilder.ErrorNotifier errorNotifier;\n+  @Nullable XdsClientWrapperForServerSds.ServerWatcher serverWatcher;\n+  @GuardedBy(\"this\") private boolean started;\n+\n+  ServerWrapperForXds(\n+      Server delegate,\n+      XdsClientWrapperForServerSds xdsClientWrapperForServerSds,\n+      @Nullable XdsServerBuilder.ErrorNotifier errorNotifier) {\n     this.delegate = checkNotNull(delegate, \"delegate\");\n     this.xdsClientWrapperForServerSds =\n         checkNotNull(xdsClientWrapperForServerSds, \"xdsClientWrapperForServerSds\");\n+    this.errorNotifier = errorNotifier;\n   }\n \n   @Override\n-  public Server start() throws IOException {\n-    delegate.start();\n+  public synchronized Server start() throws IOException {\n+    checkState(!started, \"Already started\");\n+    Future<EnvoyServerProtoData.DownstreamTlsContext> future = addServerWatcher();\n     if (!xdsClientWrapperForServerSds.hasXdsClient()) {\n       xdsClientWrapperForServerSds.createXdsClientAndStart();\n     }\n+    try {\n+      future.get();\n+    } catch (InterruptedException | ExecutionException ex) {\n+      xdsClientWrapperForServerSds.removeServerWatcher(serverWatcher);\n+      serverWatcher = null;\n+      throw new RuntimeException(ex);\n+    }\n+    delegate.start();\n+    started = true;\n     return this;\n   }\n \n+  private Future<EnvoyServerProtoData.DownstreamTlsContext> addServerWatcher() {\n+    final SettableFuture<EnvoyServerProtoData.DownstreamTlsContext> settableFuture =\n+        SettableFuture.create();\n+    serverWatcher =\n+        new XdsClientWrapperForServerSds.ServerWatcher() {\n+          @Override\n+          public void onError(Status error) {\n+            if (errorNotifier != null) {\n+              errorNotifier.onError(error);\n+            }\n+          }\n+\n+          @Override\n+          public void onSuccess(EnvoyServerProtoData.DownstreamTlsContext downstreamTlsContext) {\n+            xdsClientWrapperForServerSds.removeServerWatcher(this);\n+            serverWatcher = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b230d4cfbd15200ae7d0ee8980cca05cef69ad54"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI5NzEyMg==", "bodyText": "This doesn't look right. This means the xds client is running and doing I/O before start(). It should be created within start(). Probably best not to fix it in this PR though.", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r480297122", "createdAt": "2020-08-31T18:04:30Z", "author": {"login": "ejona86"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/ServerWrapperForXds.java", "diffHunk": "@@ -36,22 +44,62 @@\n public final class ServerWrapperForXds extends Server {\n   private final Server delegate;\n   private final XdsClientWrapperForServerSds xdsClientWrapperForServerSds;\n-\n-  ServerWrapperForXds(Server delegate, XdsClientWrapperForServerSds xdsClientWrapperForServerSds) {\n+  @Nullable XdsServerBuilder.ErrorNotifier errorNotifier;\n+  @Nullable XdsClientWrapperForServerSds.ServerWatcher serverWatcher;\n+  @GuardedBy(\"this\") private boolean started;\n+\n+  ServerWrapperForXds(\n+      Server delegate,\n+      XdsClientWrapperForServerSds xdsClientWrapperForServerSds,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b230d4cfbd15200ae7d0ee8980cca05cef69ad54"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28468592d1155ce25ca07e90862f9352c426f1d2", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/28468592d1155ce25ca07e90862f9352c426f1d2", "committedDate": "2020-09-01T18:32:55Z", "message": "address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "223b8262209801542b071d931110a23b2016c1cd", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/223b8262209801542b071d931110a23b2016c1cd", "committedDate": "2020-09-02T18:55:47Z", "message": "fix the async code in the test to remove flakiness"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00c1d94131612ccccc645d81d01a753a8ed42538", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/00c1d94131612ccccc645d81d01a753a8ed42538", "committedDate": "2020-09-02T19:40:06Z", "message": "limit the loop iterations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyNDA0NTMx", "url": "https://github.com/grpc/grpc-java/pull/7371#pullrequestreview-482404531", "createdAt": "2020-09-04T06:58:17Z", "commit": {"oid": "00c1d94131612ccccc645d81d01a753a8ed42538"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNjo1ODoxN1rOHNB8VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNjo1ODoxN1rOHNB8VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQyNTM2NQ==", "bodyText": "Should still throw a wrapped exception, otherwise the server is started in a broken state.", "url": "https://github.com/grpc/grpc-java/pull/7371#discussion_r483425365", "createdAt": "2020-09-04T06:58:17Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/ServerWrapperForXds.java", "diffHunk": "@@ -36,22 +44,72 @@\n public final class ServerWrapperForXds extends Server {\n   private final Server delegate;\n   private final XdsClientWrapperForServerSds xdsClientWrapperForServerSds;\n-\n-  ServerWrapperForXds(Server delegate, XdsClientWrapperForServerSds xdsClientWrapperForServerSds) {\n+  @Nullable XdsServerBuilder.ErrorNotifier errorNotifier;\n+  @Nullable XdsClientWrapperForServerSds.ServerWatcher serverWatcher;\n+  private AtomicBoolean started = new AtomicBoolean();\n+\n+  ServerWrapperForXds(\n+      Server delegate,\n+      XdsClientWrapperForServerSds xdsClientWrapperForServerSds,\n+      @Nullable XdsServerBuilder.ErrorNotifier errorNotifier) {\n     this.delegate = checkNotNull(delegate, \"delegate\");\n     this.xdsClientWrapperForServerSds =\n         checkNotNull(xdsClientWrapperForServerSds, \"xdsClientWrapperForServerSds\");\n+    this.errorNotifier = errorNotifier;\n   }\n \n   @Override\n   public Server start() throws IOException {\n-    delegate.start();\n+    checkState(started.compareAndSet(false, true), \"Already started\");\n+    Future<EnvoyServerProtoData.DownstreamTlsContext> future = addServerWatcher();\n     if (!xdsClientWrapperForServerSds.hasXdsClient()) {\n       xdsClientWrapperForServerSds.createXdsClientAndStart();\n     }\n+    try {\n+      future.get();\n+    } catch (InterruptedException | ExecutionException ex) {\n+      removeServerWatcher();\n+      if (ex instanceof InterruptedException) {\n+        Thread.currentThread().interrupt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00c1d94131612ccccc645d81d01a753a8ed42538"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19e5d9ce0c77c677df97fbe3f650ad4786c500f4", "author": {"user": {"login": "sanjaypujare", "name": null}}, "url": "https://github.com/grpc/grpc-java/commit/19e5d9ce0c77c677df97fbe3f650ad4786c500f4", "committedDate": "2020-09-08T18:08:13Z", "message": "address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NTY5NTMz", "url": "https://github.com/grpc/grpc-java/pull/7371#pullrequestreview-484569533", "createdAt": "2020-09-08T23:58:13Z", "commit": {"oid": "19e5d9ce0c77c677df97fbe3f650ad4786c500f4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4216, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}