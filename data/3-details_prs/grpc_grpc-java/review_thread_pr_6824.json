{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3OTI0NjY5", "number": 6824, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMzo0NToxNFrODqCphA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwMDoxMjowOFrODqC2JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDEwMTgwOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/io/grpc/internal/TestUtils.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMzo0NToxNFrOF5l6bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwMToyMTozOVrOF5muGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzNDMxOA==", "bodyText": "This is wrong. This in core/src/test/java/io/grpc/internal/TestUtils.java. It is an in-module utility class for grpc-core's unit test only. Not a test utility.", "url": "https://github.com/grpc/grpc-java/pull/6824#discussion_r395934318", "createdAt": "2020-03-20T23:45:14Z", "author": {"login": "voidzcy"}, "path": "core/src/test/java/io/grpc/internal/TestUtils.java", "diffHunk": "@@ -36,7 +41,41 @@\n /**\n  * Common utility methods for tests.\n  */\n-final class TestUtils {\n+public final class TestUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f78b974db529de2b2151a690661a82ad4675328a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzNzU5MQ==", "bodyText": "The javadoc is specifying it's a test utility. I'm extending it to be public to the entire project.", "url": "https://github.com/grpc/grpc-java/pull/6824#discussion_r395937591", "createdAt": "2020-03-21T00:03:02Z", "author": {"login": "dapengzhang0"}, "path": "core/src/test/java/io/grpc/internal/TestUtils.java", "diffHunk": "@@ -36,7 +41,41 @@\n /**\n  * Common utility methods for tests.\n  */\n-final class TestUtils {\n+public final class TestUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzNDMxOA=="}, "originalCommit": {"oid": "f78b974db529de2b2151a690661a82ad4675328a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzOTM1MQ==", "bodyText": "It's a test utility for grpc-core's unit tests, not for other modules. Look at its file path. It's in the test sourceSet of grpc-core. It is intentionally package private.", "url": "https://github.com/grpc/grpc-java/pull/6824#discussion_r395939351", "createdAt": "2020-03-21T00:13:30Z", "author": {"login": "voidzcy"}, "path": "core/src/test/java/io/grpc/internal/TestUtils.java", "diffHunk": "@@ -36,7 +41,41 @@\n /**\n  * Common utility methods for tests.\n  */\n-final class TestUtils {\n+public final class TestUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzNDMxOA=="}, "originalCommit": {"oid": "f78b974db529de2b2151a690661a82ad4675328a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk0MDY1Mg==", "bodyText": "We did the same for FakeClock. We can not put it in main sourceSet, but we want all modules to use it. grpc-core is the most reasonable module for all modules to use.", "url": "https://github.com/grpc/grpc-java/pull/6824#discussion_r395940652", "createdAt": "2020-03-21T00:22:09Z", "author": {"login": "dapengzhang0"}, "path": "core/src/test/java/io/grpc/internal/TestUtils.java", "diffHunk": "@@ -36,7 +41,41 @@\n /**\n  * Common utility methods for tests.\n  */\n-final class TestUtils {\n+public final class TestUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzNDMxOA=="}, "originalCommit": {"oid": "f78b974db529de2b2151a690661a82ad4675328a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk0NzU0Nw==", "bodyText": "I am surprised FakeClock is from grpc-core's test scope.\nI looked at its history. I suspect initially it was created for testing classes in grpc-core's io.grpc.internal package (#1282). It was package-private at that time. Then it was used for testing classes in grpc-core's io.grpc package (#1602) and it was made to public. This usage was still fair as no cross-module happened. After that, people started to use (abused easily as it is public) it with cross-module reference and put the hack (project(':grpc-core').sourceSets.test.output) in build files.\nI filed #6847 to address this issue (and we may discuss it in next API meeting).\nAnyway, using classes from another module's test scope is bad, it's access is hacked. You should not do this. Also, as I mentioned in the next comment, in your case the usage is completely unnecessary.", "url": "https://github.com/grpc/grpc-java/pull/6824#discussion_r395947547", "createdAt": "2020-03-21T01:21:39Z", "author": {"login": "voidzcy"}, "path": "core/src/test/java/io/grpc/internal/TestUtils.java", "diffHunk": "@@ -36,7 +41,41 @@\n /**\n  * Common utility methods for tests.\n  */\n-final class TestUtils {\n+public final class TestUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzNDMxOA=="}, "originalCommit": {"oid": "f78b974db529de2b2151a690661a82ad4675328a"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDExMTYzOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/io/grpc/internal/TestUtils.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMzo1MzowNVrOF5mALg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzowMjo1MVrOF6PG-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzNTc5MA==", "bodyText": "A fake LoadBalancerProvider is trivial to implement, although it might be a little verbose to always implement isAvailable(), getPriority(), etc in unit test. If your test case is just trying to verify the behavior of looking up the registry correctly, the real default registry suffices.", "url": "https://github.com/grpc/grpc-java/pull/6824#discussion_r395935790", "createdAt": "2020-03-20T23:53:05Z", "author": {"login": "voidzcy"}, "path": "core/src/test/java/io/grpc/internal/TestUtils.java", "diffHunk": "@@ -36,7 +41,41 @@\n /**\n  * Common utility methods for tests.\n  */\n-final class TestUtils {\n+public final class TestUtils {\n+\n+  /** Base class for a standard LoadBalancerProvider implementation. */\n+  public abstract static class StandardLoadBalancerProvider extends LoadBalancerProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f78b974db529de2b2151a690661a82ad4675328a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzODAxNg==", "bodyText": "This class is not about which registry to use, it's about registering fake policy.", "url": "https://github.com/grpc/grpc-java/pull/6824#discussion_r395938016", "createdAt": "2020-03-21T00:05:38Z", "author": {"login": "dapengzhang0"}, "path": "core/src/test/java/io/grpc/internal/TestUtils.java", "diffHunk": "@@ -36,7 +41,41 @@\n /**\n  * Common utility methods for tests.\n  */\n-final class TestUtils {\n+public final class TestUtils {\n+\n+  /** Base class for a standard LoadBalancerProvider implementation. */\n+  public abstract static class StandardLoadBalancerProvider extends LoadBalancerProvider {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzNTc5MA=="}, "originalCommit": {"oid": "f78b974db529de2b2151a690661a82ad4675328a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk0MTU4OA==", "bodyText": "My point is:\nIf you are just verifying your provider's behavior of looking up a policy in the registry, you can use the default registry and look up existing policies such as 'round_robin'. The behavior of looking up 'round_robin' isn't different from looking up 'foo'.\nIf you really have to register a fake policy into the registry, fully implementing all LoadBalancerProvider's methods is still trivial, do not need to have this StandardLoadBalancerProvider.", "url": "https://github.com/grpc/grpc-java/pull/6824#discussion_r395941588", "createdAt": "2020-03-21T00:29:05Z", "author": {"login": "voidzcy"}, "path": "core/src/test/java/io/grpc/internal/TestUtils.java", "diffHunk": "@@ -36,7 +41,41 @@\n /**\n  * Common utility methods for tests.\n  */\n-final class TestUtils {\n+public final class TestUtils {\n+\n+  /** Base class for a standard LoadBalancerProvider implementation. */\n+  public abstract static class StandardLoadBalancerProvider extends LoadBalancerProvider {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzNTc5MA=="}, "originalCommit": {"oid": "f78b974db529de2b2151a690661a82ad4675328a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU1MTE1Mg==", "bodyText": "Fully implementing all LoadBalancerProvider's methods is trivial but is just repeating boilerplates that's not relevant to the test at all, it's distracting to read the test, the new base class does provide some benefit.", "url": "https://github.com/grpc/grpc-java/pull/6824#discussion_r396551152", "createdAt": "2020-03-23T15:45:34Z", "author": {"login": "dapengzhang0"}, "path": "core/src/test/java/io/grpc/internal/TestUtils.java", "diffHunk": "@@ -36,7 +41,41 @@\n /**\n  * Common utility methods for tests.\n  */\n-final class TestUtils {\n+public final class TestUtils {\n+\n+  /** Base class for a standard LoadBalancerProvider implementation. */\n+  public abstract static class StandardLoadBalancerProvider extends LoadBalancerProvider {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzNTc5MA=="}, "originalCommit": {"oid": "f78b974db529de2b2151a690661a82ad4675328a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwOTI3Mg==", "bodyText": "Whatever...", "url": "https://github.com/grpc/grpc-java/pull/6824#discussion_r396609272", "createdAt": "2020-03-23T17:02:51Z", "author": {"login": "voidzcy"}, "path": "core/src/test/java/io/grpc/internal/TestUtils.java", "diffHunk": "@@ -36,7 +41,41 @@\n /**\n  * Common utility methods for tests.\n  */\n-final class TestUtils {\n+public final class TestUtils {\n+\n+  /** Base class for a standard LoadBalancerProvider implementation. */\n+  public abstract static class StandardLoadBalancerProvider extends LoadBalancerProvider {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzNTc5MA=="}, "originalCommit": {"oid": "f78b974db529de2b2151a690661a82ad4675328a"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDEyNTcyOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/XdsRoutingLoadBalancer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwMDowNDo1M1rOF5mIZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjowMzo0OVrOF6MckA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzNzg5NQ==", "bodyText": "nit: keep our convention checkNotNull, although the instantiation is completely internal. Maybe it's always a good practice to check null in constructors for arguments that are saved as fields and to be used later.", "url": "https://github.com/grpc/grpc-java/pull/6824#discussion_r395937895", "createdAt": "2020-03-21T00:04:53Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsRoutingLoadBalancer.java", "diffHunk": "@@ -16,18 +16,209 @@\n \n package io.grpc.xds;\n \n+import static io.grpc.ConnectivityState.CONNECTING;\n+import static io.grpc.ConnectivityState.IDLE;\n+import static io.grpc.ConnectivityState.READY;\n+import static io.grpc.ConnectivityState.TRANSIENT_FAILURE;\n+import static io.grpc.xds.XdsSubchannelPickers.BUFFER_PICKER;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.grpc.ConnectivityState;\n+import io.grpc.InternalLogId;\n import io.grpc.LoadBalancer;\n+import io.grpc.MethodDescriptor;\n import io.grpc.Status;\n+import io.grpc.internal.ServiceConfigUtil.PolicySelection;\n+import io.grpc.util.ForwardingLoadBalancerHelper;\n+import io.grpc.util.GracefulSwitchLoadBalancer;\n+import io.grpc.xds.XdsLogger.XdsLogLevel;\n+import io.grpc.xds.XdsRoutingLoadBalancerProvider.MethodName;\n+import io.grpc.xds.XdsRoutingLoadBalancerProvider.Route;\n+import io.grpc.xds.XdsRoutingLoadBalancerProvider.XdsRoutingConfig;\n+import io.grpc.xds.XdsSubchannelPickers.ErrorPicker;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n \n-// TODO(zdapeng): Implementation.\n /** Load balancer for xds_routing policy. */\n final class XdsRoutingLoadBalancer extends LoadBalancer {\n \n+  private final XdsLogger logger;\n+  private final Helper helper;\n+  private final Map<String, GracefulSwitchLoadBalancer> routeBalancers = new HashMap<>();\n+  private final Map<String, RouteHelper> routeHelpers = new HashMap<>();\n+\n+  private Map<String, PolicySelection> actions = ImmutableMap.of();\n+  private List<Route> routes = ImmutableList.of();\n+\n+  XdsRoutingLoadBalancer(Helper helper) {\n+    this.helper = helper;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f78b974db529de2b2151a690661a82ad4675328a"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU2NTY0OA==", "bodyText": "done.", "url": "https://github.com/grpc/grpc-java/pull/6824#discussion_r396565648", "createdAt": "2020-03-23T16:03:49Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/XdsRoutingLoadBalancer.java", "diffHunk": "@@ -16,18 +16,209 @@\n \n package io.grpc.xds;\n \n+import static io.grpc.ConnectivityState.CONNECTING;\n+import static io.grpc.ConnectivityState.IDLE;\n+import static io.grpc.ConnectivityState.READY;\n+import static io.grpc.ConnectivityState.TRANSIENT_FAILURE;\n+import static io.grpc.xds.XdsSubchannelPickers.BUFFER_PICKER;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.grpc.ConnectivityState;\n+import io.grpc.InternalLogId;\n import io.grpc.LoadBalancer;\n+import io.grpc.MethodDescriptor;\n import io.grpc.Status;\n+import io.grpc.internal.ServiceConfigUtil.PolicySelection;\n+import io.grpc.util.ForwardingLoadBalancerHelper;\n+import io.grpc.util.GracefulSwitchLoadBalancer;\n+import io.grpc.xds.XdsLogger.XdsLogLevel;\n+import io.grpc.xds.XdsRoutingLoadBalancerProvider.MethodName;\n+import io.grpc.xds.XdsRoutingLoadBalancerProvider.Route;\n+import io.grpc.xds.XdsRoutingLoadBalancerProvider.XdsRoutingConfig;\n+import io.grpc.xds.XdsSubchannelPickers.ErrorPicker;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n \n-// TODO(zdapeng): Implementation.\n /** Load balancer for xds_routing policy. */\n final class XdsRoutingLoadBalancer extends LoadBalancer {\n \n+  private final XdsLogger logger;\n+  private final Helper helper;\n+  private final Map<String, GracefulSwitchLoadBalancer> routeBalancers = new HashMap<>();\n+  private final Map<String, RouteHelper> routeHelpers = new HashMap<>();\n+\n+  private Map<String, PolicySelection> actions = ImmutableMap.of();\n+  private List<Route> routes = ImmutableList.of();\n+\n+  XdsRoutingLoadBalancer(Helper helper) {\n+    this.helper = helper;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzNzg5NQ=="}, "originalCommit": {"oid": "f78b974db529de2b2151a690661a82ad4675328a"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDEzNDEyOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/XdsRoutingLoadBalancer.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwMDoxMjowOFrOF5mNNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzozOToxM1rOF6QpaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzOTEyNA==", "bodyText": "Should this also shut down child balancers (if exist) as well?\nNote you shouldn't call handleNameResolutionError() API directly. You could have a helper method for error handling and have handleNameResolutionError() call it as well.", "url": "https://github.com/grpc/grpc-java/pull/6824#discussion_r395939124", "createdAt": "2020-03-21T00:12:08Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsRoutingLoadBalancer.java", "diffHunk": "@@ -16,18 +16,209 @@\n \n package io.grpc.xds;\n \n+import static io.grpc.ConnectivityState.CONNECTING;\n+import static io.grpc.ConnectivityState.IDLE;\n+import static io.grpc.ConnectivityState.READY;\n+import static io.grpc.ConnectivityState.TRANSIENT_FAILURE;\n+import static io.grpc.xds.XdsSubchannelPickers.BUFFER_PICKER;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.grpc.ConnectivityState;\n+import io.grpc.InternalLogId;\n import io.grpc.LoadBalancer;\n+import io.grpc.MethodDescriptor;\n import io.grpc.Status;\n+import io.grpc.internal.ServiceConfigUtil.PolicySelection;\n+import io.grpc.util.ForwardingLoadBalancerHelper;\n+import io.grpc.util.GracefulSwitchLoadBalancer;\n+import io.grpc.xds.XdsLogger.XdsLogLevel;\n+import io.grpc.xds.XdsRoutingLoadBalancerProvider.MethodName;\n+import io.grpc.xds.XdsRoutingLoadBalancerProvider.Route;\n+import io.grpc.xds.XdsRoutingLoadBalancerProvider.XdsRoutingConfig;\n+import io.grpc.xds.XdsSubchannelPickers.ErrorPicker;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n \n-// TODO(zdapeng): Implementation.\n /** Load balancer for xds_routing policy. */\n final class XdsRoutingLoadBalancer extends LoadBalancer {\n \n+  private final XdsLogger logger;\n+  private final Helper helper;\n+  private final Map<String, GracefulSwitchLoadBalancer> routeBalancers = new HashMap<>();\n+  private final Map<String, RouteHelper> routeHelpers = new HashMap<>();\n+\n+  private Map<String, PolicySelection> actions = ImmutableMap.of();\n+  private List<Route> routes = ImmutableList.of();\n+\n+  XdsRoutingLoadBalancer(Helper helper) {\n+    this.helper = helper;\n+    logger = XdsLogger.withLogId(\n+        InternalLogId.allocate(\"xds-routing-lb\", helper.getAuthority()));\n+    logger.log(XdsLogLevel.INFO, \"Created\");\n+  }\n+\n+  @Override\n+  public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n+    logger.log(XdsLogLevel.DEBUG, \"Received resolution result: {0}\", resolvedAddresses);\n+    XdsRoutingConfig xdsRoutingConfig =\n+        (XdsRoutingConfig) resolvedAddresses.getLoadBalancingPolicyConfig();\n+    if (xdsRoutingConfig == null) {\n+      helper.updateBalancingState(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f78b974db529de2b2151a690661a82ad4675328a"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU1Njc4NQ==", "bodyText": "Why should this shutdown child balancers? Even handleNameResolutionError() does not shutdown child balancers.", "url": "https://github.com/grpc/grpc-java/pull/6824#discussion_r396556785", "createdAt": "2020-03-23T15:52:38Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/XdsRoutingLoadBalancer.java", "diffHunk": "@@ -16,18 +16,209 @@\n \n package io.grpc.xds;\n \n+import static io.grpc.ConnectivityState.CONNECTING;\n+import static io.grpc.ConnectivityState.IDLE;\n+import static io.grpc.ConnectivityState.READY;\n+import static io.grpc.ConnectivityState.TRANSIENT_FAILURE;\n+import static io.grpc.xds.XdsSubchannelPickers.BUFFER_PICKER;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.grpc.ConnectivityState;\n+import io.grpc.InternalLogId;\n import io.grpc.LoadBalancer;\n+import io.grpc.MethodDescriptor;\n import io.grpc.Status;\n+import io.grpc.internal.ServiceConfigUtil.PolicySelection;\n+import io.grpc.util.ForwardingLoadBalancerHelper;\n+import io.grpc.util.GracefulSwitchLoadBalancer;\n+import io.grpc.xds.XdsLogger.XdsLogLevel;\n+import io.grpc.xds.XdsRoutingLoadBalancerProvider.MethodName;\n+import io.grpc.xds.XdsRoutingLoadBalancerProvider.Route;\n+import io.grpc.xds.XdsRoutingLoadBalancerProvider.XdsRoutingConfig;\n+import io.grpc.xds.XdsSubchannelPickers.ErrorPicker;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n \n-// TODO(zdapeng): Implementation.\n /** Load balancer for xds_routing policy. */\n final class XdsRoutingLoadBalancer extends LoadBalancer {\n \n+  private final XdsLogger logger;\n+  private final Helper helper;\n+  private final Map<String, GracefulSwitchLoadBalancer> routeBalancers = new HashMap<>();\n+  private final Map<String, RouteHelper> routeHelpers = new HashMap<>();\n+\n+  private Map<String, PolicySelection> actions = ImmutableMap.of();\n+  private List<Route> routes = ImmutableList.of();\n+\n+  XdsRoutingLoadBalancer(Helper helper) {\n+    this.helper = helper;\n+    logger = XdsLogger.withLogId(\n+        InternalLogId.allocate(\"xds-routing-lb\", helper.getAuthority()));\n+    logger.log(XdsLogLevel.INFO, \"Created\");\n+  }\n+\n+  @Override\n+  public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n+    logger.log(XdsLogLevel.DEBUG, \"Received resolution result: {0}\", resolvedAddresses);\n+    XdsRoutingConfig xdsRoutingConfig =\n+        (XdsRoutingConfig) resolvedAddresses.getLoadBalancingPolicyConfig();\n+    if (xdsRoutingConfig == null) {\n+      helper.updateBalancingState(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzOTEyNA=="}, "originalCommit": {"oid": "f78b974db529de2b2151a690661a82ad4675328a"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwODc2MA==", "bodyText": "I mean propagate error to child policies. handleNameResolutionError() propagates error down to child policies and eventually have leaf policies propagate TRANSIENT_FAILURE back to root policy. But here, it behaves differently.", "url": "https://github.com/grpc/grpc-java/pull/6824#discussion_r396608760", "createdAt": "2020-03-23T17:02:07Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsRoutingLoadBalancer.java", "diffHunk": "@@ -16,18 +16,209 @@\n \n package io.grpc.xds;\n \n+import static io.grpc.ConnectivityState.CONNECTING;\n+import static io.grpc.ConnectivityState.IDLE;\n+import static io.grpc.ConnectivityState.READY;\n+import static io.grpc.ConnectivityState.TRANSIENT_FAILURE;\n+import static io.grpc.xds.XdsSubchannelPickers.BUFFER_PICKER;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.grpc.ConnectivityState;\n+import io.grpc.InternalLogId;\n import io.grpc.LoadBalancer;\n+import io.grpc.MethodDescriptor;\n import io.grpc.Status;\n+import io.grpc.internal.ServiceConfigUtil.PolicySelection;\n+import io.grpc.util.ForwardingLoadBalancerHelper;\n+import io.grpc.util.GracefulSwitchLoadBalancer;\n+import io.grpc.xds.XdsLogger.XdsLogLevel;\n+import io.grpc.xds.XdsRoutingLoadBalancerProvider.MethodName;\n+import io.grpc.xds.XdsRoutingLoadBalancerProvider.Route;\n+import io.grpc.xds.XdsRoutingLoadBalancerProvider.XdsRoutingConfig;\n+import io.grpc.xds.XdsSubchannelPickers.ErrorPicker;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n \n-// TODO(zdapeng): Implementation.\n /** Load balancer for xds_routing policy. */\n final class XdsRoutingLoadBalancer extends LoadBalancer {\n \n+  private final XdsLogger logger;\n+  private final Helper helper;\n+  private final Map<String, GracefulSwitchLoadBalancer> routeBalancers = new HashMap<>();\n+  private final Map<String, RouteHelper> routeHelpers = new HashMap<>();\n+\n+  private Map<String, PolicySelection> actions = ImmutableMap.of();\n+  private List<Route> routes = ImmutableList.of();\n+\n+  XdsRoutingLoadBalancer(Helper helper) {\n+    this.helper = helper;\n+    logger = XdsLogger.withLogId(\n+        InternalLogId.allocate(\"xds-routing-lb\", helper.getAuthority()));\n+    logger.log(XdsLogLevel.INFO, \"Created\");\n+  }\n+\n+  @Override\n+  public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n+    logger.log(XdsLogLevel.DEBUG, \"Received resolution result: {0}\", resolvedAddresses);\n+    XdsRoutingConfig xdsRoutingConfig =\n+        (XdsRoutingConfig) resolvedAddresses.getLoadBalancingPolicyConfig();\n+    if (xdsRoutingConfig == null) {\n+      helper.updateBalancingState(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzOTEyNA=="}, "originalCommit": {"oid": "f78b974db529de2b2151a690661a82ad4675328a"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyMzk5Mw==", "bodyText": "Maybe we can just checkNotNull for  xdsRoutingConfig like CdsLoadBalancer does, it can be only programing error of our own.  I don't remember why EdsLoadBalancer needs updateBalancingState instead of checkNotNull.", "url": "https://github.com/grpc/grpc-java/pull/6824#discussion_r396623993", "createdAt": "2020-03-23T17:23:54Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/XdsRoutingLoadBalancer.java", "diffHunk": "@@ -16,18 +16,209 @@\n \n package io.grpc.xds;\n \n+import static io.grpc.ConnectivityState.CONNECTING;\n+import static io.grpc.ConnectivityState.IDLE;\n+import static io.grpc.ConnectivityState.READY;\n+import static io.grpc.ConnectivityState.TRANSIENT_FAILURE;\n+import static io.grpc.xds.XdsSubchannelPickers.BUFFER_PICKER;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.grpc.ConnectivityState;\n+import io.grpc.InternalLogId;\n import io.grpc.LoadBalancer;\n+import io.grpc.MethodDescriptor;\n import io.grpc.Status;\n+import io.grpc.internal.ServiceConfigUtil.PolicySelection;\n+import io.grpc.util.ForwardingLoadBalancerHelper;\n+import io.grpc.util.GracefulSwitchLoadBalancer;\n+import io.grpc.xds.XdsLogger.XdsLogLevel;\n+import io.grpc.xds.XdsRoutingLoadBalancerProvider.MethodName;\n+import io.grpc.xds.XdsRoutingLoadBalancerProvider.Route;\n+import io.grpc.xds.XdsRoutingLoadBalancerProvider.XdsRoutingConfig;\n+import io.grpc.xds.XdsSubchannelPickers.ErrorPicker;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n \n-// TODO(zdapeng): Implementation.\n /** Load balancer for xds_routing policy. */\n final class XdsRoutingLoadBalancer extends LoadBalancer {\n \n+  private final XdsLogger logger;\n+  private final Helper helper;\n+  private final Map<String, GracefulSwitchLoadBalancer> routeBalancers = new HashMap<>();\n+  private final Map<String, RouteHelper> routeHelpers = new HashMap<>();\n+\n+  private Map<String, PolicySelection> actions = ImmutableMap.of();\n+  private List<Route> routes = ImmutableList.of();\n+\n+  XdsRoutingLoadBalancer(Helper helper) {\n+    this.helper = helper;\n+    logger = XdsLogger.withLogId(\n+        InternalLogId.allocate(\"xds-routing-lb\", helper.getAuthority()));\n+    logger.log(XdsLogLevel.INFO, \"Created\");\n+  }\n+\n+  @Override\n+  public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n+    logger.log(XdsLogLevel.DEBUG, \"Received resolution result: {0}\", resolvedAddresses);\n+    XdsRoutingConfig xdsRoutingConfig =\n+        (XdsRoutingConfig) resolvedAddresses.getLoadBalancingPolicyConfig();\n+    if (xdsRoutingConfig == null) {\n+      helper.updateBalancingState(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzOTEyNA=="}, "originalCommit": {"oid": "f78b974db529de2b2151a690661a82ad4675328a"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYzNDQ3Mw==", "bodyText": "I am fine with either. But if you are updating balancing state, you'd better do it completely.", "url": "https://github.com/grpc/grpc-java/pull/6824#discussion_r396634473", "createdAt": "2020-03-23T17:39:13Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsRoutingLoadBalancer.java", "diffHunk": "@@ -16,18 +16,209 @@\n \n package io.grpc.xds;\n \n+import static io.grpc.ConnectivityState.CONNECTING;\n+import static io.grpc.ConnectivityState.IDLE;\n+import static io.grpc.ConnectivityState.READY;\n+import static io.grpc.ConnectivityState.TRANSIENT_FAILURE;\n+import static io.grpc.xds.XdsSubchannelPickers.BUFFER_PICKER;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.grpc.ConnectivityState;\n+import io.grpc.InternalLogId;\n import io.grpc.LoadBalancer;\n+import io.grpc.MethodDescriptor;\n import io.grpc.Status;\n+import io.grpc.internal.ServiceConfigUtil.PolicySelection;\n+import io.grpc.util.ForwardingLoadBalancerHelper;\n+import io.grpc.util.GracefulSwitchLoadBalancer;\n+import io.grpc.xds.XdsLogger.XdsLogLevel;\n+import io.grpc.xds.XdsRoutingLoadBalancerProvider.MethodName;\n+import io.grpc.xds.XdsRoutingLoadBalancerProvider.Route;\n+import io.grpc.xds.XdsRoutingLoadBalancerProvider.XdsRoutingConfig;\n+import io.grpc.xds.XdsSubchannelPickers.ErrorPicker;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n \n-// TODO(zdapeng): Implementation.\n /** Load balancer for xds_routing policy. */\n final class XdsRoutingLoadBalancer extends LoadBalancer {\n \n+  private final XdsLogger logger;\n+  private final Helper helper;\n+  private final Map<String, GracefulSwitchLoadBalancer> routeBalancers = new HashMap<>();\n+  private final Map<String, RouteHelper> routeHelpers = new HashMap<>();\n+\n+  private Map<String, PolicySelection> actions = ImmutableMap.of();\n+  private List<Route> routes = ImmutableList.of();\n+\n+  XdsRoutingLoadBalancer(Helper helper) {\n+    this.helper = helper;\n+    logger = XdsLogger.withLogId(\n+        InternalLogId.allocate(\"xds-routing-lb\", helper.getAuthority()));\n+    logger.log(XdsLogLevel.INFO, \"Created\");\n+  }\n+\n+  @Override\n+  public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n+    logger.log(XdsLogLevel.DEBUG, \"Received resolution result: {0}\", resolvedAddresses);\n+    XdsRoutingConfig xdsRoutingConfig =\n+        (XdsRoutingConfig) resolvedAddresses.getLoadBalancingPolicyConfig();\n+    if (xdsRoutingConfig == null) {\n+      helper.updateBalancingState(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzOTEyNA=="}, "originalCommit": {"oid": "f78b974db529de2b2151a690661a82ad4675328a"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2916, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}