{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MjQxNjU2", "number": 6968, "title": "5439: InProcessTransport optionally adds causal information to status", "bodyText": "Closes #5439\nFeature request to be able to add causal information to the status in InProcessTransport\nAs per @ejona86 suggested:\n\n Added causal information in ServerImpl\n Optionally copy that information in InProcessTransport\n\nI also\n\n Updated tests\n Updated factories\n\nThis is my first open source PR, so any feedback is valued!", "createdAt": "2020-04-23T22:58:39Z", "url": "https://github.com/grpc/grpc-java/pull/6968", "merged": true, "mergeCommit": {"oid": "16b6145064fdb0da8428ea11b7df1be45318f77b"}, "closed": true, "closedAt": "2020-05-06T18:08:16Z", "author": {"login": "reggiemcdonald"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaYYv6AH2gAyNDA4MjQxNjU2OjdmNjQ1M2E3ZDA0Y2E1YWNkMjljYjZhNDc2NmRlM2VmZWY0OTk3ZWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcedlaHgH2gAyNDA4MjQxNjU2OmQyN2UwNzU2ODAwMDc5YmEwMzI1NDcyZGRlZGYyMTM0ZjZlNjZiNjg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7f6453a7d04ca5acd29cb6a4766de3efef4997eb", "author": {"user": {"login": "reggiemcdonald", "name": "Reginald McDonald"}}, "url": "https://github.com/grpc/grpc-java/commit/7f6453a7d04ca5acd29cb6a4766de3efef4997eb", "committedDate": "2020-04-23T08:12:52Z", "message": "inprocess,internal: add ability to pass status cause to client"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NTM3MzE5", "url": "https://github.com/grpc/grpc-java/pull/6968#pullrequestreview-399537319", "createdAt": "2020-04-23T23:07:41Z", "commit": {"oid": "7f6453a7d04ca5acd29cb6a4766de3efef4997eb"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzowNzo0MVrOGK_rnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMDowNjozM1rOGLBBvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4MjMwMA==", "bodyText": "nit: We normally don't set the field explicitly to its default, because it is just noisy. It is fine, though, and no need to change.", "url": "https://github.com/grpc/grpc-java/pull/6968#discussion_r414182300", "createdAt": "2020-04-23T23:07:41Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/inprocess/InProcessChannelBuilder.java", "diffHunk": "@@ -70,6 +70,7 @@ public static InProcessChannelBuilder forAddress(String name, int port) {\n   private final String name;\n   private ScheduledExecutorService scheduledExecutorService;\n   private int maxInboundMetadataSize = Integer.MAX_VALUE;\n+  private boolean transportIncludeStatusCause = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f6453a7d04ca5acd29cb6a4766de3efef4997eb"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4MjU3NA==", "bodyText": "Add an empty line before the @ parts of the javadoc.", "url": "https://github.com/grpc/grpc-java/pull/6968#discussion_r414182574", "createdAt": "2020-04-23T23:08:23Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/inprocess/InProcessChannelBuilder.java", "diffHunk": "@@ -157,11 +158,22 @@ public InProcessChannelBuilder maxInboundMetadataSize(int bytes) {\n     return this;\n   }\n \n+  /**\n+   * Sets whether to override the default behaviour of InProcessTransport to include\n+   * the cause of the status.\n+   * @param enable whether to include cause in status", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f6453a7d04ca5acd29cb6a4766de3efef4997eb"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4NTA3Mg==", "bodyText": "It is generally helpful to include some language about what the purpose of the method is. In this case we could say this is intended to make test failures more clear and easier to debug. We can also note that the default is to strip the cause for consistency with other transports. The cause information can normally leak information to untrusted clients and is language-specific, which aren't concerns for in-process.", "url": "https://github.com/grpc/grpc-java/pull/6968#discussion_r414185072", "createdAt": "2020-04-23T23:14:59Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/inprocess/InProcessChannelBuilder.java", "diffHunk": "@@ -157,11 +158,22 @@ public InProcessChannelBuilder maxInboundMetadataSize(int bytes) {\n     return this;\n   }\n \n+  /**\n+   * Sets whether to override the default behaviour of InProcessTransport to include\n+   * the cause of the status.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f6453a7d04ca5acd29cb6a4766de3efef4997eb"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4NTgwMQ==", "bodyText": "Hmm... The name is a bit awkward. It seems hard to figure out a good name here. Options I thought of:\npropagateStatusCause\ncommunicateStatusCause\npropagateCauseWithStatus (inspired by the includeCauseWithStatus)\nDunno...", "url": "https://github.com/grpc/grpc-java/pull/6968#discussion_r414185801", "createdAt": "2020-04-23T23:16:47Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/inprocess/InProcessChannelBuilder.java", "diffHunk": "@@ -157,11 +158,22 @@ public InProcessChannelBuilder maxInboundMetadataSize(int bytes) {\n     return this;\n   }\n \n+  /**\n+   * Sets whether to override the default behaviour of InProcessTransport to include\n+   * the cause of the status.\n+   * @param enable whether to include cause in status\n+   * @return this\n+   */\n+  public InProcessChannelBuilder transportIncludeStatusCause(boolean enable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f6453a7d04ca5acd29cb6a4766de3efef4997eb"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4NjgxNg==", "bodyText": "Since InProcessTransport is package-private, we don't have to preserve the old constructor. Delete it?", "url": "https://github.com/grpc/grpc-java/pull/6968#discussion_r414186816", "createdAt": "2020-04-23T23:19:30Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/inprocess/InProcessTransport.java", "diffHunk": "@@ -129,26 +131,39 @@ private InProcessTransport(String name, int maxInboundMetadataSize, String autho\n         .build();\n     this.optionalServerListener = optionalServerListener;\n     logId = InternalLogId.allocate(getClass(), name);\n+    this.includeCauseWithStatus = includeCauseWithStatus;\n   }\n \n   public InProcessTransport(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f6453a7d04ca5acd29cb6a4766de3efef4997eb"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4Nzg0Mg==", "bodyText": "This doesn't appear used. Please delete it.", "url": "https://github.com/grpc/grpc-java/pull/6968#discussion_r414187842", "createdAt": "2020-04-23T23:22:07Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/inprocess/InProcessTransport.java", "diffHunk": "@@ -323,6 +338,10 @@ public ScheduledExecutorService getScheduledExecutorService() {\n     return ret;\n   }\n \n+  public boolean getIncludeCauseWithStatus() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f6453a7d04ca5acd29cb6a4766de3efef4997eb"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4OTAzMg==", "bodyText": "We'd like this to be final if we can. I see it is mutated for testing. But I think we can make some tweaks to avoid that. I'll comment on the tests.", "url": "https://github.com/grpc/grpc-java/pull/6968#discussion_r414189032", "createdAt": "2020-04-23T23:25:26Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/inprocess/InProcessTransport.java", "diffHunk": "@@ -83,6 +83,7 @@\n   private final String userAgent;\n   private final Optional<ServerListener> optionalServerListener;\n   private int serverMaxInboundMetadataSize;\n+  private boolean includeCauseWithStatus;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f6453a7d04ca5acd29cb6a4766de3efef4997eb"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5MzQ5NA==", "bodyText": "Note that this comment doesn't matter if the test gets reworked.\nThe implementation of this method in InProcessTransport is pretty straight-forward; you can just copy it here. Alternatively you can make a new protected method in InProcessTransport, newClientTransport(InternalServer server, boolean includeStatusWithCause) and call it here. Both options seem pretty fair and allow us to always pass includeStatusWithCause in the constructor.\n(When the number of arguments gets out of hand, we actually have a pattern to make that cleaner by passing in the builder/transportFactory to the constructor, and letting the constructor grab the things it needs. But it's not a big enough problem here yet to force you to rework that.)", "url": "https://github.com/grpc/grpc-java/pull/6968#discussion_r414193494", "createdAt": "2020-04-23T23:36:52Z", "author": {"login": "ejona86"}, "path": "core/src/test/java/io/grpc/inprocess/InProcessTransportTestWithCause.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.inprocess;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import io.grpc.Status;\n+import io.grpc.internal.InternalServer;\n+import io.grpc.internal.ManagedClientTransport;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class InProcessTransportTestWithCause extends InProcessTransportTest {\n+\n+  @Override\n+  protected ManagedClientTransport newClientTransport(InternalServer server) {\n+    InProcessTransport transport = (InProcessTransport) super.newClientTransport(server);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f6453a7d04ca5acd29cb6a4766de3efef4997eb"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwNDM1MQ==", "bodyText": "Hmm... Extending creates a lot of unnecessary tests.\nLet's create a new test from scratch. I'd basically start with HelloWorldServerTest, with some replacements. We don't want to deal with generated code here, so we can use voidMethod() and ClientCalls and implement the stub stuff ourselves.\n@Rule\npublic final GrpcCleanupRule grpcCleanup = new GrpcCleanupRule();\n\n...\nfinal Throwable t = new Throwable();\nServerServiceDefinition def = ServerServiceDefinition.builder(\"Failing\")\n    .addMethod(TestMethodDescriptors.voidMethod(), new ServerCallHandler<Void, Void>() {\n      @Override public ServerCall.Listener<Void> startCall(ServerCall<Void, Void> call, Metadata headers) {\n        call.close(Status.UNAVAILABLE.withDescription(\"best error message\").withCause(t), new Metadata());\n        return new ServerCall.Listener() {};\n      }\n    })\n    .build();\ngrpcCleanup.register(InProcessServerBuilder.forName(\"failing-server\").directExecutor().addService(def).build().start());\nChannel channel = grpcCleanup.register(InProcessChannelBuilder.forName(\"failing-server\").directExecutor().build());\ntry {\n  ClientCalls.blockingUnaryCall(channel, TestMethodDescriptors.voidMethod(), CallOptions.DEFAULT);\n  fail(\"expected exception\");\n} catch (StatusRuntimeException ex) {\n  assertEquals(t, ex.getCause());\n}\nI've just \"dumped\" that out there; feel free to change formatting and organization. I also don't claim it is 100% correct \ud83d\ude04. But it should be close.\nI know there are a lot of pieces there, but they are all virtually boilerplate. The only \"interesting\" things are creating the Throwable, call.close(), and catching StatusRuntimeException (which is how the blocking stub reports errors).", "url": "https://github.com/grpc/grpc-java/pull/6968#discussion_r414204351", "createdAt": "2020-04-24T00:06:33Z", "author": {"login": "ejona86"}, "path": "core/src/test/java/io/grpc/inprocess/InProcessTransportTestWithCause.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.inprocess;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import io.grpc.Status;\n+import io.grpc.internal.InternalServer;\n+import io.grpc.internal.ManagedClientTransport;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class InProcessTransportTestWithCause extends InProcessTransportTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f6453a7d04ca5acd29cb6a4766de3efef4997eb"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9270e24ea716af9f4c5995674cbd4db6066ce1b", "author": {"user": {"login": "reggiemcdonald", "name": "Reginald McDonald"}}, "url": "https://github.com/grpc/grpc-java/commit/c9270e24ea716af9f4c5995674cbd4db6066ce1b", "committedDate": "2020-04-26T07:11:59Z", "message": "inprocess: improve javadocs and method name for InProcessChannelBuilder.propagateCauseWithStatus\n\nAddresses comment in PR to change method name tranportIncludeStatusCause to something more descriptive: propagateCauseWithStatus. Updates javadoc to better describe what the propagateCauseWithStatus setting does - including the default behaviour of the method."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e85eac9c20848cb43d5dd3b7b0641522e592e68a", "author": {"user": {"login": "reggiemcdonald", "name": "Reginald McDonald"}}, "url": "https://github.com/grpc/grpc-java/commit/e85eac9c20848cb43d5dd3b7b0641522e592e68a", "committedDate": "2020-04-26T09:10:57Z", "message": "inprocess: remove unused method\n\nAddressing PR feedback, this commit removes the getter from InProcessTransport that is not used in the codebase."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2efad75c7b0895419d8465a1a410acb8c0b28569", "author": {"user": {"login": "reggiemcdonald", "name": "Reginald McDonald"}}, "url": "https://github.com/grpc/grpc-java/commit/2efad75c7b0895419d8465a1a410acb8c0b28569", "committedDate": "2020-04-26T21:22:26Z", "message": "inprocess, internal: creates single test to check for propagating cause with status\n\nTo address a PR comment, this commit makes the includeCauseWithStatus field of the InProcessTransport final, and adds a single test case to verify that the cause is propagated properly when configured. The field server of AbstractTransportTest had to be made protected so that it could be nullified in the test case for the after each hook."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NDExNTUx", "url": "https://github.com/grpc/grpc-java/pull/6968#pullrequestreview-405411551", "createdAt": "2020-05-04T23:18:50Z", "commit": {"oid": "2efad75c7b0895419d8465a1a410acb8c0b28569"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMzoxODo1MFrOGQVktA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMzoxODo1MFrOGQVktA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4Mzg2MA==", "bodyText": "Deleting these lines concerns me. Is this necessary?", "url": "https://github.com/grpc/grpc-java/pull/6968#discussion_r419783860", "createdAt": "2020-05-04T23:18:50Z", "author": {"login": "ejona86"}, "path": "core/src/test/java/io/grpc/internal/AbstractTransportTest.java", "diffHunk": "@@ -1219,9 +1210,6 @@ public void clientCancel() throws Exception {\n     assertNotNull(clientStreamListener.trailers.get(TIMEOUT_MS, TimeUnit.MILLISECONDS));\n     Status serverStatus = serverStreamListener.status.get(TIMEOUT_MS, TimeUnit.MILLISECONDS);\n     assertNotEquals(Status.Code.OK, serverStatus.getCode());\n-    // Cause should not be transmitted between client and server", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2efad75c7b0895419d8465a1a410acb8c0b28569"}, "originalPosition": 58}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ac7bebf950c95ec37f927cf2b1bbfc59a26d2d8", "author": {"user": {"login": "reggiemcdonald", "name": "Reginald McDonald"}}, "url": "https://github.com/grpc/grpc-java/commit/4ac7bebf950c95ec37f927cf2b1bbfc59a26d2d8", "committedDate": "2020-05-05T20:16:59Z", "message": "internal: Add back assertnull assertion for server status\n\nThis commit addresses PR feedback by adding back a null assertion. Default behaviour for transports is to strip cause from status. So in AbstractTransportTest.clientCancel, server status should have a null cause."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MTI3NDM4", "url": "https://github.com/grpc/grpc-java/pull/6968#pullrequestreview-406127438", "createdAt": "2020-05-05T20:23:28Z", "commit": {"oid": "4ac7bebf950c95ec37f927cf2b1bbfc59a26d2d8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MTk4ODUx", "url": "https://github.com/grpc/grpc-java/pull/6968#pullrequestreview-406198851", "createdAt": "2020-05-05T22:27:47Z", "commit": {"oid": "4ac7bebf950c95ec37f927cf2b1bbfc59a26d2d8"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMjoyNzo0N1rOGQ93AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMjoyNzo0N1rOGQ93AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ0MzkwNA==", "bodyText": "The method name, the argument, and the javadoc do not match.", "url": "https://github.com/grpc/grpc-java/pull/6968#discussion_r420443904", "createdAt": "2020-05-05T22:27:47Z", "author": {"login": "dapengzhang0"}, "path": "core/src/main/java/io/grpc/inprocess/InProcessTransport.java", "diffHunk": "@@ -849,13 +853,17 @@ public void appendTimeoutInsight(InsightBuilder insight) {\n    * <p>This is, so that the InProcess transport behaves in the same way as the other transports,\n    * when exchanging statuses between client and server and vice versa.\n    */\n-  private static Status stripCause(Status status) {\n+  private static Status stripCause(Status status, boolean includeCauseWithStatus) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ac7bebf950c95ec37f927cf2b1bbfc59a26d2d8"}, "originalPosition": 68}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d27e0756800079ba0325472ddedf2134f6e66b68", "author": {"user": {"login": "reggiemcdonald", "name": "Reginald McDonald"}}, "url": "https://github.com/grpc/grpc-java/commit/d27e0756800079ba0325472ddedf2134f6e66b68", "committedDate": "2020-05-06T00:31:55Z", "message": "inprocess: rename InProccessTransport.stripCause to InProcessTransport.cleanStatus and update javadoc\n\nThis commit addresses PR feedback by renaming InProcessTransport.stripCause to InProcessTransport.cleanStatus and updating the javadoc, to better reflect the fact that the status can now optionally include cause."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4356, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}