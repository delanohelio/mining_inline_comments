{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExMDI1NTEw", "number": 7559, "title": "xds: use internal SynchronizationContext for XdsClient's synchronization", "bodyText": "The XdsClient will create its own SynchronizationContext internally. All of its work will be done inside that SynchronizationContext. Watcher callbacks need to be synchronized with the watching party (on client side this is done by scheduling the task back to client channel's SynchronizationContext).", "createdAt": "2020-10-27T20:06:00Z", "url": "https://github.com/grpc/grpc-java/pull/7559", "merged": true, "mergeCommit": {"oid": "cdf7876813936c5600f8d20a10a71217fe842d1a"}, "closed": true, "closedAt": "2020-10-28T17:41:17Z", "author": {"login": "voidzcy"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWufVvAH2gAyNTExMDI1NTEwOmMxYmJmMjQyMjg3MmM0MTVhNmFmMjc0NDZiNzM0YzMwOWRkYmFiMWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdW_g_CgFqTUxODgwNzQ0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c1bbf2422872c415a6af27446b734c309ddbab1b", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/c1bbf2422872c415a6af27446b734c309ddbab1b", "committedDate": "2020-10-27T19:53:26Z", "message": "Create a SynchronizationContext inside XdsClient."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "556e59c4ad7f3a8f588578a19ed84a336d82ea5b", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/556e59c4ad7f3a8f588578a19ed84a336d82ea5b", "committedDate": "2020-10-27T19:54:18Z", "message": "Replace locks with SynchronizationContext for client side."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "078fba47728b5ff3f20c4b92e7d0a3461b3ab93c", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/078fba47728b5ff3f20c4b92e7d0a3461b3ab93c", "committedDate": "2020-10-27T19:54:51Z", "message": "Use XdsClient's internal SynchronizationContext for server side."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MjQ3MTY1", "url": "https://github.com/grpc/grpc-java/pull/7559#pullrequestreview-518247165", "createdAt": "2020-10-28T00:37:56Z", "commit": {"oid": "078fba47728b5ff3f20c4b92e7d0a3461b3ab93c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MzQ4MjI4", "url": "https://github.com/grpc/grpc-java/pull/7559#pullrequestreview-518348228", "createdAt": "2020-10-28T06:10:22Z", "commit": {"oid": "078fba47728b5ff3f20c4b92e7d0a3461b3ab93c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNjoxMDoyMlrOHpbUEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNjoxMDoyMlrOHpbUEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIwMTE3MQ==", "bodyText": "Why is this comment removed but not the one on line 818 for onError?", "url": "https://github.com/grpc/grpc-java/pull/7559#discussion_r513201171", "createdAt": "2020-10-28T06:10:22Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/ClientXdsClient.java", "diffHunk": "@@ -802,7 +821,6 @@ void onError(Status error) {\n     }\n \n     private void notifyWatcher(ResourceWatcher watcher, ResourceUpdate update) {\n-      // TODO(chengyuanzhang): should invoke callbacks with watcher's own executor.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "078fba47728b5ff3f20c4b92e7d0a3461b3ab93c"}, "originalPosition": 377}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MzUwMjY3", "url": "https://github.com/grpc/grpc-java/pull/7559#pullrequestreview-518350267", "createdAt": "2020-10-28T06:15:55Z", "commit": {"oid": "078fba47728b5ff3f20c4b92e7d0a3461b3ab93c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNjoxNTo1NlrOHpbaLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNjoxNTo1NlrOHpbaLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIwMjczNQ==", "bodyText": "This uncaughtException only logs but does not clean up such as shutting down the channel. Why can't that error handling be done in this PR?", "url": "https://github.com/grpc/grpc-java/pull/7559#discussion_r513202735", "createdAt": "2020-10-28T06:15:56Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/AbstractXdsClient.java", "diffHunk": "@@ -72,6 +73,18 @@\n   private static final String ADS_TYPE_URL_EDS =\n       \"type.googleapis.com/envoy.config.endpoint.v3.ClusterLoadAssignment\";\n \n+  private final SynchronizationContext syncContext = new SynchronizationContext(\n+      new Thread.UncaughtExceptionHandler() {\n+        @Override\n+        public void uncaughtException(Thread t, Throwable e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "078fba47728b5ff3f20c4b92e7d0a3461b3ab93c"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MzUxMDg4", "url": "https://github.com/grpc/grpc-java/pull/7559#pullrequestreview-518351088", "createdAt": "2020-10-28T06:17:53Z", "commit": {"oid": "078fba47728b5ff3f20c4b92e7d0a3461b3ab93c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNjoxNzo1NFrOHpbc0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNjoxNzo1NFrOHpbc0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIwMzQxMA==", "bodyText": "Can we include some identifying info for which XdsClient was logging this: ClientXdsClient or ServerXdsClient and for both what resources were being watched/handled.", "url": "https://github.com/grpc/grpc-java/pull/7559#discussion_r513203410", "createdAt": "2020-10-28T06:17:54Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/AbstractXdsClient.java", "diffHunk": "@@ -72,6 +73,18 @@\n   private static final String ADS_TYPE_URL_EDS =\n       \"type.googleapis.com/envoy.config.endpoint.v3.ClusterLoadAssignment\";\n \n+  private final SynchronizationContext syncContext = new SynchronizationContext(\n+      new Thread.UncaughtExceptionHandler() {\n+        @Override\n+        public void uncaughtException(Thread t, Throwable e) {\n+          getLogger().log(\n+              XdsLogLevel.ERROR,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "078fba47728b5ff3f20c4b92e7d0a3461b3ab93c"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MzU0OTI2", "url": "https://github.com/grpc/grpc-java/pull/7559#pullrequestreview-518354926", "createdAt": "2020-10-28T06:27:56Z", "commit": {"oid": "078fba47728b5ff3f20c4b92e7d0a3461b3ab93c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNjoyNzo1NlrOHpbouw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNjoyNzo1NlrOHpbouw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIwNjQ1OQ==", "bodyText": "The syncContext is used through-out with 2 common patterns:\n\nexecute with. a Runnable\n schedule with a few params and a ScheduledExecutorService which is always getTimeService()\n\nHave you considered just providing 2 methods in AbstractXdsClient that allow the caller to do the same thing but without calling getSyncContext()? So the executeSynchronously is just getSyncContext().execute() and scheduleSynchronously is just  getSyncContext().schedule() with the ScheduledExecutorService always getTimeService(). This will simplify a lot of boilerplate and also hide the actual implementation of syncContext and timeService.", "url": "https://github.com/grpc/grpc-java/pull/7559#discussion_r513206459", "createdAt": "2020-10-28T06:27:56Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/AbstractXdsClient.java", "diffHunk": "@@ -268,6 +276,10 @@ protected final void nackResponse(ResourceType type, String nonce, String errorD\n     adsStream.sendDiscoveryRequest(type, versionInfo, resources, nonce, errorDetail);\n   }\n \n+  protected final SynchronizationContext getSyncContext() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "078fba47728b5ff3f20c4b92e7d0a3461b3ab93c"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MzU2Mzg5", "url": "https://github.com/grpc/grpc-java/pull/7559#pullrequestreview-518356389", "createdAt": "2020-10-28T06:31:43Z", "commit": {"oid": "078fba47728b5ff3f20c4b92e7d0a3461b3ab93c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNjozMTo0M1rOHpbtWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNjozMTo0M1rOHpbtWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIwNzY0MA==", "bodyText": "Shouldn't the above 3 lines (checks) in the main method instead of in the Runnable.run? The caller should get the exception instead of the exception being lost in a different thread.", "url": "https://github.com/grpc/grpc-java/pull/7559#discussion_r513207640", "createdAt": "2020-10-28T06:31:43Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/ServerXdsClient.java", "diffHunk": "@@ -63,33 +61,37 @@\n   @Nullable\n   private ScheduledHandle ldsRespTimer;\n \n-  ServerXdsClient(XdsChannel channel, Node node, SynchronizationContext syncContext,\n-      ScheduledExecutorService timeService, BackoffPolicy.Provider backoffPolicyProvider,\n-      Supplier<Stopwatch> stopwatchSupplier, boolean newServerApi, String instanceIp) {\n+  ServerXdsClient(XdsChannel channel, Node node, ScheduledExecutorService timeService,\n+      BackoffPolicy.Provider backoffPolicyProvider, Supplier<Stopwatch> stopwatchSupplier,\n+      boolean newServerApi, String instanceIp) {\n     super(channel, node, timeService, backoffPolicyProvider, stopwatchSupplier);\n-    this.syncContext = checkNotNull(syncContext, \"syncContext\");\n     this.newServerApi = channel.isUseProtocolV3() && newServerApi;\n     this.instanceIp = (instanceIp != null ? instanceIp : \"0.0.0.0\");\n   }\n \n   @Override\n-  void watchListenerData(int port, ListenerWatcher watcher) {\n-    checkState(listenerWatcher == null, \"ListenerWatcher already registered\");\n-    listenerWatcher = checkNotNull(watcher, \"watcher\");\n-    checkArgument(port > 0, \"port needs to be > 0\");\n-    this.listenerPort = port;\n-    getLogger().log(XdsLogLevel.INFO, \"Started watching listener for port {0}\", port);\n-    if (!newServerApi) {\n-      updateNodeMetadataForListenerRequest(port);\n-    }\n-    adjustResourceSubscription(ResourceType.LDS);\n-    if (!isInBackoff()) {\n-      ldsRespTimer =\n-          syncContext\n-              .schedule(\n-                  new ListenerResourceFetchTimeoutTask(\":\" + port),\n-                  INITIAL_RESOURCE_FETCH_TIMEOUT_SEC, TimeUnit.SECONDS, getTimeService());\n-    }\n+  void watchListenerData(final int port, final ListenerWatcher watcher) {\n+    getSyncContext().execute(new Runnable() {\n+      @Override\n+      public void run() {\n+        checkState(listenerWatcher == null, \"ListenerWatcher already registered\");\n+        listenerWatcher = checkNotNull(watcher, \"watcher\");\n+        checkArgument(port > 0, \"port needs to be > 0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "078fba47728b5ff3f20c4b92e7d0a3461b3ab93c"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MzU4MTQx", "url": "https://github.com/grpc/grpc-java/pull/7559#pullrequestreview-518358141", "createdAt": "2020-10-28T06:36:20Z", "commit": {"oid": "078fba47728b5ff3f20c4b92e7d0a3461b3ab93c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNjozNjoyMFrOHpby9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNjozNjoyMFrOHpby9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIwOTA3OQ==", "bodyText": "The InternalLogId functionality is lost in the new SyncContext in the AbstractXdsClient`. Why can't it be provided?", "url": "https://github.com/grpc/grpc-java/pull/7559#discussion_r513209079", "createdAt": "2020-10-28T06:36:20Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientWrapperForServerSds.java", "diffHunk": "@@ -90,34 +88,6 @@ public XdsClientWrapperForServerSds(int port) {\n     this.port = port;\n   }\n \n-  private SynchronizationContext createSynchronizationContext() {\n-    final InternalLogId logId =\n-        InternalLogId.allocate(\"XdsClientWrapperForServerSds\", Integer.toString(port));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "078fba47728b5ff3f20c4b92e7d0a3461b3ab93c"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MzU4ODM3", "url": "https://github.com/grpc/grpc-java/pull/7559#pullrequestreview-518358837", "createdAt": "2020-10-28T06:37:54Z", "commit": {"oid": "078fba47728b5ff3f20c4b92e7d0a3461b3ab93c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNjozNzo1NFrOHpb1SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNjozNzo1NFrOHpb1SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIwOTY3Mw==", "bodyText": "This test fails because the checks were inside the Runnable. If the checks were outside this test would work. Even if the test is trivial why remove it?", "url": "https://github.com/grpc/grpc-java/pull/7559#discussion_r513209673", "createdAt": "2020-10-28T06:37:54Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/test/java/io/grpc/xds/ServerXdsClientTest.java", "diffHunk": "@@ -236,20 +227,6 @@ private static DiscoveryRequest buildDiscoveryRequest(\n         .build();\n   }\n \n-  /** Error when 2 ListenerWatchers registered. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "078fba47728b5ff3f20c4b92e7d0a3461b3ab93c"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MzU5NDMw", "url": "https://github.com/grpc/grpc-java/pull/7559#pullrequestreview-518359430", "createdAt": "2020-10-28T06:39:22Z", "commit": {"oid": "078fba47728b5ff3f20c4b92e7d0a3461b3ab93c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52519c7c86d59873bc4c3f5ed6febce91dee09f9", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/52519c7c86d59873bc4c3f5ed6febce91dee09f9", "committedDate": "2020-10-28T07:00:13Z", "message": "Run checks outside sync context for server XdsClient API."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "970df24cd5e2528d0b519876322a04380433b5ff", "author": {"user": {"login": "voidzcy", "name": "Chengyuan Zhang"}}, "url": "https://github.com/grpc/grpc-java/commit/970df24cd5e2528d0b519876322a04380433b5ff", "committedDate": "2020-10-28T07:30:31Z", "message": "Remove comment not logger valid."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4ODA3NDQx", "url": "https://github.com/grpc/grpc-java/pull/7559#pullrequestreview-518807441", "createdAt": "2020-10-28T15:43:37Z", "commit": {"oid": "970df24cd5e2528d0b519876322a04380433b5ff"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3948, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}