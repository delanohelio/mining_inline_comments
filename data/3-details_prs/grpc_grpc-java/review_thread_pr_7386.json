{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2NjQ5Nzk5", "number": 7386, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDo0MDozOFrOEgBfDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOToxMToxOVrOEgH0Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDE0MjIxOnYy", "diffSide": "RIGHT", "path": "okhttp/src/test/java/io/grpc/okhttp/OkHttpTransportTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDo0MDozOFrOHMp5UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDo0MDozOFrOHMp5UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAzMTM3Nw==", "bodyText": "Remove unnecessary final. Ditto below.", "url": "https://github.com/grpc/grpc-java/pull/7386#discussion_r483031377", "createdAt": "2020-09-03T14:40:38Z", "author": {"login": "ejona86"}, "path": "okhttp/src/test/java/io/grpc/okhttp/OkHttpTransportTest.java", "diffHunk": "@@ -53,23 +53,21 @@ public void releaseClientFactory() {\n   @Override\n   protected List<? extends InternalServer> newServer(\n       List<ServerStreamTracer.Factory> streamTracerFactories) {\n-    return AccessProtectedHack.serverBuilderBuildTransportServer(\n-        NettyServerBuilder\n-            .forPort(0)\n-            .flowControlWindow(AbstractTransportTest.TEST_FLOW_CONTROL_WINDOW),\n-        streamTracerFactories,\n-        fakeClockTransportTracer);\n+    final NettyServerBuilder builder = NettyServerBuilder", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3793c0e460b6cf7e3db4e95a984d56eb95f09b2"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDI1MDgwOnYy", "diffSide": "RIGHT", "path": "interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTowNDowMVrOHMq9cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTowNDowMVrOHMq9cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA0ODgxOA==", "bodyText": "Seems this was previously tangentally linked to metricsExpected(). Could we default to returning the value of metricsExpected()? I think very few tests would have the values be different, maybe only InProcessTest?", "url": "https://github.com/grpc/grpc-java/pull/7386#discussion_r483048818", "createdAt": "2020-09-03T15:04:01Z", "author": {"login": "ejona86"}, "path": "interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java", "diffHunk": "@@ -373,6 +357,20 @@ protected final ClientInterceptor createCensusStatsClientInterceptor() {\n                 true, true, true, false /* real-time metrics */);\n   }\n \n+  protected final ServerStreamTracer.Factory createCustomCensusTracerFactory() {\n+    return InternalCensusStatsAccessor.getServerStreamTracerFactory(\n+        tagger, tagContextBinarySerializer, serverStatsRecorder,\n+        GrpcUtil.STOPWATCH_SUPPLIER,\n+        true, true, true, false /* real-time metrics */);\n+  }\n+\n+  /**\n+   * Return {@code true} when custom census module used.\n+   */\n+  protected boolean customCensusModulePresent() {\n+    return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3793c0e460b6cf7e3db4e95a984d56eb95f09b2"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDQ0NzIxOnYy", "diffSide": "RIGHT", "path": "interop-testing/src/main/java/io/grpc/testing/integration/AbstractNettyInteropTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTo0ODozMVrOHMs5Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODo0MDo1M1rOHMzGzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA4MDQ1OQ==", "bodyText": "If customCensusModulePresent() was not necessarily (because the default matches the stats boolean), then it would seem appropriate to remove this class and inline the calls to setStatsEnabled and addStreamTracerFactory; that's similar to what is being done on client-side.\nEven right now it's not clear this class is adding enough value for the complexity. Especially for the okhttp test extending it; it would be much better to duplicate to avoid the problem of needing to extend two classes and just to reduce surprise.", "url": "https://github.com/grpc/grpc-java/pull/7386#discussion_r483080459", "createdAt": "2020-09-03T15:48:31Z", "author": {"login": "ejona86"}, "path": "interop-testing/src/main/java/io/grpc/testing/integration/AbstractNettyInteropTest.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.testing.integration;\n+\n+import io.grpc.netty.InternalNettyServerBuilder;\n+import io.grpc.netty.NettyServerBuilder;\n+\n+public abstract class AbstractNettyInteropTest extends AbstractInteropTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3793c0e460b6cf7e3db4e95a984d56eb95f09b2"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE4MjI4NA==", "bodyText": "Great idea.", "url": "https://github.com/grpc/grpc-java/pull/7386#discussion_r483182284", "createdAt": "2020-09-03T18:40:53Z", "author": {"login": "sergiitk"}, "path": "interop-testing/src/main/java/io/grpc/testing/integration/AbstractNettyInteropTest.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.testing.integration;\n+\n+import io.grpc.netty.InternalNettyServerBuilder;\n+import io.grpc.netty.NettyServerBuilder;\n+\n+public abstract class AbstractNettyInteropTest extends AbstractInteropTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA4MDQ1OQ=="}, "originalCommit": {"oid": "c3793c0e460b6cf7e3db4e95a984d56eb95f09b2"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDQ1Mzk2OnYy", "diffSide": "RIGHT", "path": "interop-testing/src/test/java/io/grpc/testing/integration/Http2NettyLocalChannelTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTo1MDowOVrOHMs9Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTo1MDowOVrOHMs9Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA4MTU1NQ==", "bodyText": "This sort of method seems volatile and each time it changes it would change indentation for those builder methods. Let's just define a local variable for the builder and call withCustomCensusModule() on a separate line.", "url": "https://github.com/grpc/grpc-java/pull/7386#discussion_r483081555", "createdAt": "2020-09-03T15:50:09Z", "author": {"login": "ejona86"}, "path": "interop-testing/src/test/java/io/grpc/testing/integration/Http2NettyLocalChannelTest.java", "diffHunk": "@@ -33,19 +33,20 @@\n  * Run transport tests over the Netty in-process channel.\n  */\n @RunWith(JUnit4.class)\n-public class Http2NettyLocalChannelTest extends AbstractInteropTest {\n+public class Http2NettyLocalChannelTest extends AbstractNettyInteropTest {\n \n   private DefaultEventLoopGroup eventLoopGroup = new DefaultEventLoopGroup();\n \n   @Override\n-  protected AbstractServerImplBuilder<?> getServerBuilder() {\n-    return NettyServerBuilder\n-        .forAddress(new LocalAddress(\"in-process-1\"))\n-        .flowControlWindow(AbstractInteropTest.TEST_FLOW_CONTROL_WINDOW)\n-        .maxInboundMessageSize(AbstractInteropTest.MAX_MESSAGE_SIZE)\n-        .channelType(LocalServerChannel.class)\n-        .workerEventLoopGroup(eventLoopGroup)\n-        .bossEventLoopGroup(eventLoopGroup);\n+  protected ServerBuilder<?> getServerBuilder() {\n+    return withCustomCensusModule(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3793c0e460b6cf7e3db4e95a984d56eb95f09b2"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTE3OTMxOnYy", "diffSide": "RIGHT", "path": "interop-testing/src/test/java/io/grpc/testing/integration/TransportCompressionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOToxMToxOVrOHM0EUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOToxMToxOVrOHM0EUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE5ODAzNA==", "bodyText": "Restore original indentation.", "url": "https://github.com/grpc/grpc-java/pull/7386#discussion_r483198034", "createdAt": "2020-09-03T19:11:19Z", "author": {"login": "ejona86"}, "path": "interop-testing/src/test/java/io/grpc/testing/integration/TransportCompressionTest.java", "diffHunk": "@@ -83,21 +84,24 @@ public static void registerCompressors() {\n   }\n \n   @Override\n-  protected AbstractServerImplBuilder<?> getServerBuilder() {\n-    return NettyServerBuilder.forPort(0)\n+  protected ServerBuilder<?> getServerBuilder() {\n+    NettyServerBuilder builder = NettyServerBuilder.forPort(0)\n         .maxInboundMessageSize(AbstractInteropTest.MAX_MESSAGE_SIZE)\n         .compressorRegistry(compressors)\n         .decompressorRegistry(decompressors)\n         .intercept(new ServerInterceptor() {\n-            @Override\n-            public <ReqT, RespT> Listener<ReqT> interceptCall(ServerCall<ReqT, RespT> call,\n-                Metadata headers, ServerCallHandler<ReqT, RespT> next) {\n-              Listener<ReqT> listener = next.startCall(call, headers);\n-              // TODO(carl-mastrangelo): check that encoding was set.\n-              call.setMessageCompression(true);\n-              return listener;\n-            }\n-          });\n+          @Override\n+          public <ReqT, RespT> Listener<ReqT> interceptCall(ServerCall<ReqT, RespT> call,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "236611e6156667775fdcda09273adb93f9b4925e"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2521, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}