{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0MzcyMDY2", "number": 7750, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxOTowNDoyNVrOFMQP_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QyMDoyMzozM1rOFMR8iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MzkzNDcwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/grpc/internal/DelayedClientTransport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxOTowNDoyNVrOIP4ciA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxOTo0NDoxNFrOIP56Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzUyNDM2MA==", "bodyText": "Why not use @Nullable or @CheckForNull annotation rather than comment?", "url": "https://github.com/grpc/grpc-java/pull/7750#discussion_r553524360", "createdAt": "2021-01-07T19:04:25Z", "author": {"login": "dapengzhang0"}, "path": "core/src/main/java/io/grpc/internal/DelayedClientTransport.java", "diffHunk": "@@ -346,7 +344,8 @@ private PendingStream(PickSubchannelArgs args) {\n       this.args = args;\n     }\n \n-    private void createRealStream(ClientTransport transport) {\n+    /** Runnable may be null. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8ffac75a220cf46b35c72ac524150612ff593bd"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzU0ODM1MQ==", "bodyText": "All of those are equivalent, and I wouldn't spend any time debating which to use for a private method. If we had a nullness checker such that the annotations weren't just a comment with a different syntax, it would be different.", "url": "https://github.com/grpc/grpc-java/pull/7750#discussion_r553548351", "createdAt": "2021-01-07T19:44:14Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/internal/DelayedClientTransport.java", "diffHunk": "@@ -346,7 +344,8 @@ private PendingStream(PickSubchannelArgs args) {\n       this.args = args;\n     }\n \n-    private void createRealStream(ClientTransport transport) {\n+    /** Runnable may be null. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzUyNDM2MA=="}, "originalCommit": {"oid": "e8ffac75a220cf46b35c72ac524150612ff593bd"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NDAxNzc5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/grpc/internal/DelayedStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxOToyNjo0M1rOIP5PRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QyMDowMDoxNlrOIP6c7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzUzNzM1MA==", "bodyText": "Seems listenerToClose must be nonnull here (after adding assertion checkState(listener != null)). delegateToRealStream  == true iff listenerToClose == null as they change value together.", "url": "https://github.com/grpc/grpc-java/pull/7750#discussion_r553537350", "createdAt": "2021-01-07T19:26:43Z", "author": {"login": "dapengzhang0"}, "path": "core/src/main/java/io/grpc/internal/DelayedStream.java", "diffHunk": "@@ -298,10 +325,11 @@ public void run() {\n         }\n       });\n     } else {\n+      drainPendingCalls();\n       if (listenerToClose != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8ffac75a220cf46b35c72ac524150612ff593bd"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzU1NzIyOA==", "bodyText": "Yes, listener is non-null and it is copied to listenerToClose only when delegateToRealStream = false. Removed listenerToClose, as there's no longer any synchronization necessary when accessing listener.", "url": "https://github.com/grpc/grpc-java/pull/7750#discussion_r553557228", "createdAt": "2021-01-07T20:00:16Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/internal/DelayedStream.java", "diffHunk": "@@ -298,10 +325,11 @@ public void run() {\n         }\n       });\n     } else {\n+      drainPendingCalls();\n       if (listenerToClose != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzUzNzM1MA=="}, "originalCommit": {"oid": "e8ffac75a220cf46b35c72ac524150612ff593bd"}, "originalPosition": 210}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NDIxMjU2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/grpc/internal/DelayedStream.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QyMDoyMzozM1rOIP7Hvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQyMTo1MjoxNlrOIXU7lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzU2ODE5MQ==", "bodyText": "Separate note: there might be a race at delayedClientTransport shutdownNow() to make start() call after cancel(), which may cause shutdownNow fail?", "url": "https://github.com/grpc/grpc-java/pull/7750#discussion_r553568191", "createdAt": "2021-01-07T20:23:33Z", "author": {"login": "YifeiZhuang"}, "path": "core/src/main/java/io/grpc/internal/DelayedStream.java", "diffHunk": "@@ -306,14 +306,11 @@ public void cancel(final Status reason) {\n     checkState(listener != null, \"May only be called after start\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f8cd49816007538331d3ffd5eb03a4e05cc5543"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzU5NTk5Nw==", "bodyText": "Yes, shutdownNow() could call cancel() before start() which is now disallowed. Fixing that is not trivial; I'll need to look into a few options.", "url": "https://github.com/grpc/grpc-java/pull/7750#discussion_r553595997", "createdAt": "2021-01-07T21:21:10Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/internal/DelayedStream.java", "diffHunk": "@@ -306,14 +306,11 @@ public void cancel(final Status reason) {\n     checkState(listener != null, \"May only be called after start\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzU2ODE5MQ=="}, "originalCommit": {"oid": "2f8cd49816007538331d3ffd5eb03a4e05cc5543"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzYwODE3Nw==", "bodyText": "For shutdownNow(), we can do\nAhh, the stream.cancel() in shutdownNow() is wrong usage of ClientStream.cancel() API as its javadoc specifies \"it may only be called after start\"", "url": "https://github.com/grpc/grpc-java/pull/7750#discussion_r553608177", "createdAt": "2021-01-07T21:48:28Z", "author": {"login": "dapengzhang0"}, "path": "core/src/main/java/io/grpc/internal/DelayedStream.java", "diffHunk": "@@ -306,14 +306,11 @@ public void cancel(final Status reason) {\n     checkState(listener != null, \"May only be called after start\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzU2ODE5MQ=="}, "originalCommit": {"oid": "2f8cd49816007538331d3ffd5eb03a4e05cc5543"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzY1NjYzMg==", "bodyText": "If we keep reusing cancel() for force shutdown then we can't avoid competing with customer call and there is no way we can guarantee the call order, and we would have to support that. I feel it would be fair to have delayedStream take the responsibility instead of shutdownNow(). Or we use another method to do force shutdown to not mix with cancel(), but that would require same about of change. This problem is originally there so I guess we should fix that separately.", "url": "https://github.com/grpc/grpc-java/pull/7750#discussion_r553656632", "createdAt": "2021-01-07T23:41:48Z", "author": {"login": "YifeiZhuang"}, "path": "core/src/main/java/io/grpc/internal/DelayedStream.java", "diffHunk": "@@ -306,14 +306,11 @@ public void cancel(final Status reason) {\n     checkState(listener != null, \"May only be called after start\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzU2ODE5MQ=="}, "originalCommit": {"oid": "2f8cd49816007538331d3ffd5eb03a4e05cc5543"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTMzMTA5NQ==", "bodyText": "I was wrong. Fixing it was trivial! \"Use setStream() instead of cancel().\" Thank you @YifeiZhuang for noticing.", "url": "https://github.com/grpc/grpc-java/pull/7750#discussion_r561331095", "createdAt": "2021-01-20T21:52:16Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/internal/DelayedStream.java", "diffHunk": "@@ -306,14 +306,11 @@ public void cancel(final Status reason) {\n     checkState(listener != null, \"May only be called after start\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzU2ODE5MQ=="}, "originalCommit": {"oid": "2f8cd49816007538331d3ffd5eb03a4e05cc5543"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3030, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}