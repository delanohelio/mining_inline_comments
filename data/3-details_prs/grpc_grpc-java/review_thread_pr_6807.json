{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MDg0MzAz", "number": 6807, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNjoxMDoxM1rODlTPXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMjoxNzoyOVrODtTuQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDM5MTMyOnYy", "diffSide": "RIGHT", "path": "stub/src/main/java/io/grpc/stub/ClientCalls.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNjoxMDoxM1rOFyHaFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNjoxMDoxM1rOFyHaFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA5NDQ4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final class UnaryStreamToFuture<ReqT, RespT> extends StartableListener<RespT> {\n          \n          \n            \n              private static final class UnaryStreamToFuture<RespT> extends StartableListener<RespT> {", "url": "https://github.com/grpc/grpc-java/pull/6807#discussion_r388094487", "createdAt": "2020-03-05T06:10:13Z", "author": {"login": "DRayX"}, "path": "stub/src/main/java/io/grpc/stub/ClientCalls.java", "diffHunk": "@@ -456,12 +450,23 @@ public void onReady() {\n         adapter.onReadyHandler.run();\n       }\n     }\n+\n+    @Override\n+    void onStart() {\n+      if (adapter.autoFlowControlEnabled) {\n+        if (streamingResponse) {\n+          adapter.request(1);\n+        } else {\n+          adapter.request(2);\n+        }\n+      }\n+    }\n   }\n \n   /**\n    * Completes a {@link GrpcFuture} using {@link StreamObserver} events.\n    */\n-  private static final class UnaryStreamToFuture<RespT> extends ClientCall.Listener<RespT> {\n+  private static final class UnaryStreamToFuture<ReqT, RespT> extends StartableListener<RespT> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bb38aca11a85463f22615f2c42f4829269a245"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzExNTE3OnYy", "diffSide": "RIGHT", "path": "stub/src/main/java/io/grpc/stub/CallStreamObserver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMToxNDo0MVrOFz-Z8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMzoxMzozMVrOF0kOGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA0NDE0Nw==", "bodyText": "Mention that they will need one additional request(1) to match the new behavior. It might be worth putting that as a code snippet in the longer method javadoc.", "url": "https://github.com/grpc/grpc-java/pull/6807#discussion_r390044147", "createdAt": "2020-03-10T01:14:41Z", "author": {"login": "ejona86"}, "path": "stub/src/main/java/io/grpc/stub/CallStreamObserver.java", "diffHunk": "@@ -106,9 +106,33 @@\n    *   </li>\n    * </ul>\n    * </p>\n+   *\n+   * @deprecated Use {@link #disableAutoRequest} instead. This method will be removed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80fc740142cf2d7c148b5f7b9183b0de6cb2945b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2MzcwNQ==", "bodyText": "Added a note on migrating with an snippet of example code to the javadoc of disableAutoInboundFlowControl.  Also called out that for server-side, no change is required, but for client side an additional request is needed.", "url": "https://github.com/grpc/grpc-java/pull/6807#discussion_r390663705", "createdAt": "2020-03-10T23:13:31Z", "author": {"login": "DRayX"}, "path": "stub/src/main/java/io/grpc/stub/CallStreamObserver.java", "diffHunk": "@@ -106,9 +106,33 @@\n    *   </li>\n    * </ul>\n    * </p>\n+   *\n+   * @deprecated Use {@link #disableAutoRequest} instead. This method will be removed.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA0NDE0Nw=="}, "originalCommit": {"oid": "80fc740142cf2d7c148b5f7b9183b0de6cb2945b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDE3NDAxOnYy", "diffSide": "RIGHT", "path": "stub/src/main/java/io/grpc/stub/CallStreamObserver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODozMjo1OFrOF0b4iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMjo0Mzo0OFrOF0jnOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyNzExNQ==", "bodyText": "typo: s/recieved/received/s", "url": "https://github.com/grpc/grpc-java/pull/6807#discussion_r390527115", "createdAt": "2020-03-10T18:32:58Z", "author": {"login": "voidzcy"}, "path": "stub/src/main/java/io/grpc/stub/CallStreamObserver.java", "diffHunk": "@@ -106,9 +106,33 @@\n    *   </li>\n    * </ul>\n    * </p>\n+   *\n+   * @deprecated Use {@link #disableAutoRequest} instead. This method will be removed.\n    */\n+  @Deprecated\n   public abstract void disableAutoInboundFlowControl();\n \n+  /**\n+   * Disables automatic flow control where initial tokens are requested when the call is started,\n+   * and a token is returned to the peer after a call to the 'inbound' {@link\n+   * io.grpc.stub.StreamObserver#onNext(Object)} has completed. If disabled an application must\n+   * make explicit calls to {@link #request} to receive any messages.\n+   *\n+   * <p>On client-side this method may only be called during {@link\n+   * ClientResponseObserver#beforeStart}. On server-side it may only be called during the initial\n+   * call to the application, before the service returns its {@code StreamObserver}.\n+   *\n+   * <p>Note that for server-side cases where the message is recieved before the handler is invoked,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80fc740142cf2d7c148b5f7b9183b0de6cb2945b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY1Mzc1Mw==", "bodyText": "Wow, good catch", "url": "https://github.com/grpc/grpc-java/pull/6807#discussion_r390653753", "createdAt": "2020-03-10T22:43:48Z", "author": {"login": "DRayX"}, "path": "stub/src/main/java/io/grpc/stub/CallStreamObserver.java", "diffHunk": "@@ -106,9 +106,33 @@\n    *   </li>\n    * </ul>\n    * </p>\n+   *\n+   * @deprecated Use {@link #disableAutoRequest} instead. This method will be removed.\n    */\n+  @Deprecated\n   public abstract void disableAutoInboundFlowControl();\n \n+  /**\n+   * Disables automatic flow control where initial tokens are requested when the call is started,\n+   * and a token is returned to the peer after a call to the 'inbound' {@link\n+   * io.grpc.stub.StreamObserver#onNext(Object)} has completed. If disabled an application must\n+   * make explicit calls to {@link #request} to receive any messages.\n+   *\n+   * <p>On client-side this method may only be called during {@link\n+   * ClientResponseObserver#beforeStart}. On server-side it may only be called during the initial\n+   * call to the application, before the service returns its {@code StreamObserver}.\n+   *\n+   * <p>Note that for server-side cases where the message is recieved before the handler is invoked,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyNzExNQ=="}, "originalCommit": {"oid": "80fc740142cf2d7c148b5f7b9183b0de6cb2945b"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDQ5NzYwOnYy", "diffSide": "RIGHT", "path": "stub/src/main/java/io/grpc/stub/CallStreamObserver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMDowNTozMVrOF0fCkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMjo1Mjo0NlrOF0jzWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU3ODgzMg==", "bodyText": "although it is previous doc's fault, token is unclear. can you add description about token that it is basically number of messages?\none contributor was asking this before in #6561", "url": "https://github.com/grpc/grpc-java/pull/6807#discussion_r390578832", "createdAt": "2020-03-10T20:05:31Z", "author": {"login": "creamsoup"}, "path": "stub/src/main/java/io/grpc/stub/CallStreamObserver.java", "diffHunk": "@@ -106,9 +106,33 @@\n    *   </li>\n    * </ul>\n    * </p>\n+   *\n+   * @deprecated Use {@link #disableAutoRequest} instead. This method will be removed.\n    */\n+  @Deprecated\n   public abstract void disableAutoInboundFlowControl();\n \n+  /**\n+   * Disables automatic flow control where initial tokens are requested when the call is started,\n+   * and a token is returned to the peer after a call to the 'inbound' {@link", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80fc740142cf2d7c148b5f7b9183b0de6cb2945b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY1Njg1Ng==", "bodyText": "Ya, the problem is that the obvious way to word it is that additional messages are requested from the peer, but that is misleading at best and completely false at worst.  Depending on the size of the message each request may result in the peer being able to send an additional 0 to many messages\nIf the message read from the buffer is small and the peer is trying to send a large message already, it doesn't actually free the peer to send any messages; if the message read from the buffer is very large, and the peer is waiting to send a bunch of small messages (e.g. 0 byte messages), one request could result in the peer generating and sending thousands of messages.\nWithout going into the details of how the message based flow control in the API translates to the underlying byte window based HTTP/2 flow control, I'm not really sure how to accurately document this.  For now I've changed it to \"message to be read\" (without specifying from where).  Thoughts?", "url": "https://github.com/grpc/grpc-java/pull/6807#discussion_r390656856", "createdAt": "2020-03-10T22:52:46Z", "author": {"login": "DRayX"}, "path": "stub/src/main/java/io/grpc/stub/CallStreamObserver.java", "diffHunk": "@@ -106,9 +106,33 @@\n    *   </li>\n    * </ul>\n    * </p>\n+   *\n+   * @deprecated Use {@link #disableAutoRequest} instead. This method will be removed.\n    */\n+  @Deprecated\n   public abstract void disableAutoInboundFlowControl();\n \n+  /**\n+   * Disables automatic flow control where initial tokens are requested when the call is started,\n+   * and a token is returned to the peer after a call to the 'inbound' {@link", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU3ODgzMg=="}, "originalCommit": {"oid": "80fc740142cf2d7c148b5f7b9183b0de6cb2945b"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODM1NjQ5OnYy", "diffSide": "RIGHT", "path": "stub/src/main/java/io/grpc/stub/ClientCalls.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMjoxNzoyOVrOF-qP7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMDowMjo1MVrOGAs_eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI0ODIzOQ==", "bodyText": "This should probably check if the response is unary and if so do an extra request(1).\nThe point of the extra request is to detect the situation a server is sending multiple responses when it shouldn't. Without the additional request(1) the RPC will deadlock. This should be handled in ClientCallImpl, really, but I believe there are issues in that location with how to report the error when a problem is detected.", "url": "https://github.com/grpc/grpc-java/pull/6807#discussion_r401248239", "createdAt": "2020-03-31T22:17:29Z", "author": {"login": "ejona86"}, "path": "stub/src/main/java/io/grpc/stub/ClientCalls.java", "diffHunk": "@@ -372,13 +372,23 @@ public void setOnReadyHandler(Runnable onReadyHandler) {\n       this.onReadyHandler = onReadyHandler;\n     }\n \n+    @Deprecated\n     @Override\n     public void disableAutoInboundFlowControl() {\n       if (frozen) {\n         throw new IllegalStateException(\n             \"Cannot disable auto flow control after call started. Use ClientResponseObserver\");\n       }\n-      autoFlowControlEnabled = false;\n+      autoRequestMode = AutoRequestMode.INITIAL_ONLY;\n+    }\n+\n+    @Override\n+    public void disableAutoRequest() {\n+      if (frozen) {\n+        throw new IllegalStateException(\n+            \"Cannot disable auto flow control after call started. Use ClientResponseObserver\");\n+      }\n+      autoRequestMode = AutoRequestMode.DISABLED;\n     }\n \n     @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4285b05b8b60fcec4cd50e46b7096e70011bacf9"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgwMDgyOA==", "bodyText": "My concern with doing an extra request(1) early of the clients control is that then the client has to handle a message being delivered before one is requested.  The place that would make sense to do this extra request is after the first message is delivered, but that would be a bit confusing as the intent of disableAutoRequest is to turn off auto requesting.", "url": "https://github.com/grpc/grpc-java/pull/6807#discussion_r401800828", "createdAt": "2020-04-01T17:52:10Z", "author": {"login": "DRayX"}, "path": "stub/src/main/java/io/grpc/stub/ClientCalls.java", "diffHunk": "@@ -372,13 +372,23 @@ public void setOnReadyHandler(Runnable onReadyHandler) {\n       this.onReadyHandler = onReadyHandler;\n     }\n \n+    @Deprecated\n     @Override\n     public void disableAutoInboundFlowControl() {\n       if (frozen) {\n         throw new IllegalStateException(\n             \"Cannot disable auto flow control after call started. Use ClientResponseObserver\");\n       }\n-      autoFlowControlEnabled = false;\n+      autoRequestMode = AutoRequestMode.INITIAL_ONLY;\n+    }\n+\n+    @Override\n+    public void disableAutoRequest() {\n+      if (frozen) {\n+        throw new IllegalStateException(\n+            \"Cannot disable auto flow control after call started. Use ClientResponseObserver\");\n+      }\n+      autoRequestMode = AutoRequestMode.DISABLED;\n     }\n \n     @Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI0ODIzOQ=="}, "originalCommit": {"oid": "4285b05b8b60fcec4cd50e46b7096e70011bacf9"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgwMzc3NQ==", "bodyText": "No, I'm suggesting \"when the application does a request(1) for a unary response, turn it into a request(2)\". That should be transparent to the application but let gRPC error if the server does something funky.", "url": "https://github.com/grpc/grpc-java/pull/6807#discussion_r401803775", "createdAt": "2020-04-01T17:56:59Z", "author": {"login": "ejona86"}, "path": "stub/src/main/java/io/grpc/stub/ClientCalls.java", "diffHunk": "@@ -372,13 +372,23 @@ public void setOnReadyHandler(Runnable onReadyHandler) {\n       this.onReadyHandler = onReadyHandler;\n     }\n \n+    @Deprecated\n     @Override\n     public void disableAutoInboundFlowControl() {\n       if (frozen) {\n         throw new IllegalStateException(\n             \"Cannot disable auto flow control after call started. Use ClientResponseObserver\");\n       }\n-      autoFlowControlEnabled = false;\n+      autoRequestMode = AutoRequestMode.INITIAL_ONLY;\n+    }\n+\n+    @Override\n+    public void disableAutoRequest() {\n+      if (frozen) {\n+        throw new IllegalStateException(\n+            \"Cannot disable auto flow control after call started. Use ClientResponseObserver\");\n+      }\n+      autoRequestMode = AutoRequestMode.DISABLED;\n     }\n \n     @Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI0ODIzOQ=="}, "originalCommit": {"oid": "4285b05b8b60fcec4cd50e46b7096e70011bacf9"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM4NzU1OA==", "bodyText": "Oh, I see, sure that makes sense.  Most logical implementation would be to transform request(1) into request(2) when unary and leave all other values the same (so as to not overflow INT_MAX, or erroneously transform request(0) into request(1)).", "url": "https://github.com/grpc/grpc-java/pull/6807#discussion_r403387558", "createdAt": "2020-04-03T23:50:45Z", "author": {"login": "DRayX"}, "path": "stub/src/main/java/io/grpc/stub/ClientCalls.java", "diffHunk": "@@ -372,13 +372,23 @@ public void setOnReadyHandler(Runnable onReadyHandler) {\n       this.onReadyHandler = onReadyHandler;\n     }\n \n+    @Deprecated\n     @Override\n     public void disableAutoInboundFlowControl() {\n       if (frozen) {\n         throw new IllegalStateException(\n             \"Cannot disable auto flow control after call started. Use ClientResponseObserver\");\n       }\n-      autoFlowControlEnabled = false;\n+      autoRequestMode = AutoRequestMode.INITIAL_ONLY;\n+    }\n+\n+    @Override\n+    public void disableAutoRequest() {\n+      if (frozen) {\n+        throw new IllegalStateException(\n+            \"Cannot disable auto flow control after call started. Use ClientResponseObserver\");\n+      }\n+      autoRequestMode = AutoRequestMode.DISABLED;\n     }\n \n     @Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI0ODIzOQ=="}, "originalCommit": {"oid": "4285b05b8b60fcec4cd50e46b7096e70011bacf9"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5MDMzMA==", "bodyText": "Sounds good.", "url": "https://github.com/grpc/grpc-java/pull/6807#discussion_r403390330", "createdAt": "2020-04-04T00:02:51Z", "author": {"login": "ejona86"}, "path": "stub/src/main/java/io/grpc/stub/ClientCalls.java", "diffHunk": "@@ -372,13 +372,23 @@ public void setOnReadyHandler(Runnable onReadyHandler) {\n       this.onReadyHandler = onReadyHandler;\n     }\n \n+    @Deprecated\n     @Override\n     public void disableAutoInboundFlowControl() {\n       if (frozen) {\n         throw new IllegalStateException(\n             \"Cannot disable auto flow control after call started. Use ClientResponseObserver\");\n       }\n-      autoFlowControlEnabled = false;\n+      autoRequestMode = AutoRequestMode.INITIAL_ONLY;\n+    }\n+\n+    @Override\n+    public void disableAutoRequest() {\n+      if (frozen) {\n+        throw new IllegalStateException(\n+            \"Cannot disable auto flow control after call started. Use ClientResponseObserver\");\n+      }\n+      autoRequestMode = AutoRequestMode.DISABLED;\n     }\n \n     @Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI0ODIzOQ=="}, "originalCommit": {"oid": "4285b05b8b60fcec4cd50e46b7096e70011bacf9"}, "originalPosition": 116}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2901, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}