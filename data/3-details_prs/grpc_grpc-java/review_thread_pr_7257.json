{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MDUwOTU5", "number": 7257, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDoyODozNFrOETajTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDozNzo0MlrOETavZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NzkzNDIxOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/EnvoyProtoData.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDoyODozNFrOG5I8TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDoyODozNFrOG5I8TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2ODUyNA==", "bodyText": "If configured as 0, the maximum allowed timeout for gRPC requests is infinity.\nhttps://github.com/envoyproxy/envoy/blob/c694e470dbc9a1dd24b296d117330f0e5becb2c9/api/envoy/api/v2/route/route_components.proto#L964", "url": "https://github.com/grpc/grpc-java/pull/7257#discussion_r462568524", "createdAt": "2020-07-29T20:28:34Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/EnvoyProtoData.java", "diffHunk": "@@ -1146,7 +1162,13 @@ public String toString() {\n           return StructOrError.fromError(\n               \"Unknown cluster specifier: \" + proto.getClusterSpecifierCase());\n       }\n-      return StructOrError.fromStruct(new RouteAction(cluster, weightedClusters));\n+      long timeoutNano = TimeUnit.SECONDS.toNanos(15L);  // default 15s\n+      if (proto.hasMaxGrpcTimeout()) {\n+        timeoutNano = Durations.toNanos(proto.getMaxGrpcTimeout());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e2acd87633daf75846954561fa0b3b047738ae2"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4Nzk2NTE3OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/EnvoyProtoData.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDozNzo0MlrOG5JPkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNzowMDowN1rOG5r3fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3MzQ1Ng==", "bodyText": "The \"downstream end-of-stream has been processed\" in envoy API doc is about the stream from client to the envoy proxy, which more or less corresponds to onComplete() of client's request StreamObserver in proxyless case (Because the local xds plugin itself is the \"envoy proxy\".). I think it shouldn't be stated as \"end-of-stream has been processed\" for the proxyless case, in which the stream connects to the backend directly.  cc @dfawley @ejona86", "url": "https://github.com/grpc/grpc-java/pull/7257#discussion_r462573456", "createdAt": "2020-07-29T20:37:42Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/EnvoyProtoData.java", "diffHunk": "@@ -1067,18 +1069,30 @@ public String toString() {\n \n   /** See corresponding Envoy proto message {@link io.envoyproxy.envoy.api.v2.route.RouteAction}. */\n   static final class RouteAction {\n+    // Specifies the upstream timeout for the route, which spans between the point at which\n+    // the entire downstream request (i.e., end-of-stream) has been processed and when the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e2acd87633daf75846954561fa0b3b047738ae2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3Nzk4OA==", "bodyText": "I also just noticed that by the description of this envoy API doc, in bidi-streaming or client-streaming case, the timeout may not be converted to grpc deadline. (Although max_grpc_timeout can always be converted to grpc deadline)", "url": "https://github.com/grpc/grpc-java/pull/7257#discussion_r462577988", "createdAt": "2020-07-29T20:46:07Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/EnvoyProtoData.java", "diffHunk": "@@ -1067,18 +1069,30 @@ public String toString() {\n \n   /** See corresponding Envoy proto message {@link io.envoyproxy.envoy.api.v2.route.RouteAction}. */\n   static final class RouteAction {\n+    // Specifies the upstream timeout for the route, which spans between the point at which\n+    // the entire downstream request (i.e., end-of-stream) has been processed and when the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3MzQ1Ng=="}, "originalCommit": {"oid": "4e2acd87633daf75846954561fa0b3b047738ae2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU5ODQ4MQ==", "bodyText": "Deleted the comment if you don't like it (although I don't think there is any problem stating in that way as the description is from the perspective of a Route, \"downstream\" still makes senses from an implementation's perspective).\nEnvoy's API doc also mentions that a value of 0 for timeout will disable the route's timeout.  Added that case as well.", "url": "https://github.com/grpc/grpc-java/pull/7257#discussion_r462598481", "createdAt": "2020-07-29T21:25:05Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/EnvoyProtoData.java", "diffHunk": "@@ -1067,18 +1069,30 @@ public String toString() {\n \n   /** See corresponding Envoy proto message {@link io.envoyproxy.envoy.api.v2.route.RouteAction}. */\n   static final class RouteAction {\n+    // Specifies the upstream timeout for the route, which spans between the point at which\n+    // the entire downstream request (i.e., end-of-stream) has been processed and when the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3MzQ1Ng=="}, "originalCommit": {"oid": "4e2acd87633daf75846954561fa0b3b047738ae2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYxNDcwMg==", "bodyText": "Deleted the comment if you don't like it (although I don't think there is any problem stating in that way as the description is from the perspective of a Route, \"downstream\" still makes senses from an implementation's perspective).\n\nThe timeout java field is a combination of timeout envoy api field and max_grpc_timeout envoy api field (The latter, if specified, overrides the former). And I noticed that the two envoy api fields measure different time span for grpc requests, especially for client-streaming case. The latter definitely does not measure the span from \"downstream EOS\"", "url": "https://github.com/grpc/grpc-java/pull/7257#discussion_r462614702", "createdAt": "2020-07-29T22:00:02Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/EnvoyProtoData.java", "diffHunk": "@@ -1067,18 +1069,30 @@ public String toString() {\n \n   /** See corresponding Envoy proto message {@link io.envoyproxy.envoy.api.v2.route.RouteAction}. */\n   static final class RouteAction {\n+    // Specifies the upstream timeout for the route, which spans between the point at which\n+    // the entire downstream request (i.e., end-of-stream) has been processed and when the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3MzQ1Ng=="}, "originalCommit": {"oid": "4e2acd87633daf75846954561fa0b3b047738ae2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1MzM5OA==", "bodyText": "I didn't notice this detail before (timeout starts counting after the client sends its end-stream).  This behavior might be difficult to implement -- at least we can't do it in Go for unary RPCs without some changes in the channel.\n@markdroth do you think we'll need to match Envoy behavior here, or could we treat it as a known difference and call it out in the design?", "url": "https://github.com/grpc/grpc-java/pull/7257#discussion_r462653398", "createdAt": "2020-07-29T23:49:43Z", "author": {"login": "dfawley"}, "path": "xds/src/main/java/io/grpc/xds/EnvoyProtoData.java", "diffHunk": "@@ -1067,18 +1069,30 @@ public String toString() {\n \n   /** See corresponding Envoy proto message {@link io.envoyproxy.envoy.api.v2.route.RouteAction}. */\n   static final class RouteAction {\n+    // Specifies the upstream timeout for the route, which spans between the point at which\n+    // the entire downstream request (i.e., end-of-stream) has been processed and when the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3MzQ1Ng=="}, "originalCommit": {"oid": "4e2acd87633daf75846954561fa0b3b047738ae2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA1MTMzNQ==", "bodyText": "I don't think it's really necessary to mimic Envoy's behavior in this regard.  I think it's fine for us to just use this to control our existing timeout semantics, just as if timeout were set via the service config.\nWe should call this out in the gRFC, though.", "url": "https://github.com/grpc/grpc-java/pull/7257#discussion_r463051335", "createdAt": "2020-07-30T14:46:33Z", "author": {"login": "markdroth"}, "path": "xds/src/main/java/io/grpc/xds/EnvoyProtoData.java", "diffHunk": "@@ -1067,18 +1069,30 @@ public String toString() {\n \n   /** See corresponding Envoy proto message {@link io.envoyproxy.envoy.api.v2.route.RouteAction}. */\n   static final class RouteAction {\n+    // Specifies the upstream timeout for the route, which spans between the point at which\n+    // the entire downstream request (i.e., end-of-stream) has been processed and when the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3MzQ1Ng=="}, "originalCommit": {"oid": "4e2acd87633daf75846954561fa0b3b047738ae2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEzNTE4NQ==", "bodyText": "A preexisting management server may set the HTTP timeout for only 500ms, with grpc_max_timeout unset. This works perfectly for long client streaming with envoy proxy. But it will fail all client streaming requests from a proxyless grpc client.", "url": "https://github.com/grpc/grpc-java/pull/7257#discussion_r463135185", "createdAt": "2020-07-30T16:50:48Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/EnvoyProtoData.java", "diffHunk": "@@ -1067,18 +1069,30 @@ public String toString() {\n \n   /** See corresponding Envoy proto message {@link io.envoyproxy.envoy.api.v2.route.RouteAction}. */\n   static final class RouteAction {\n+    // Specifies the upstream timeout for the route, which spans between the point at which\n+    // the entire downstream request (i.e., end-of-stream) has been processed and when the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3MzQ1Ng=="}, "originalCommit": {"oid": "4e2acd87633daf75846954561fa0b3b047738ae2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE0MDczMg==", "bodyText": "How about we don't support HTTP timeout for client/bidi streaming, only max_grpc_timeout is supported for them?", "url": "https://github.com/grpc/grpc-java/pull/7257#discussion_r463140732", "createdAt": "2020-07-30T17:00:07Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/EnvoyProtoData.java", "diffHunk": "@@ -1067,18 +1069,30 @@ public String toString() {\n \n   /** See corresponding Envoy proto message {@link io.envoyproxy.envoy.api.v2.route.RouteAction}. */\n   static final class RouteAction {\n+    // Specifies the upstream timeout for the route, which spans between the point at which\n+    // the entire downstream request (i.e., end-of-stream) has been processed and when the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3MzQ1Ng=="}, "originalCommit": {"oid": "4e2acd87633daf75846954561fa0b3b047738ae2"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2413, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}