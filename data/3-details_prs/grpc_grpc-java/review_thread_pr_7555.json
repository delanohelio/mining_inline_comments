{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwMzc3OTg0", "number": 7555, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODozMjo1OVrOEyfzVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo0MDoxNlrOEyf92Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzg1MzAwOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/ClientLoadCounter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODozMjo1OVrOHpLGug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMzowNzo1NlrOHpUNfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkzNTYxMA==", "bodyText": "What about declare it as a synchronized method instead of requiring serializing externally?", "url": "https://github.com/grpc/grpc-java/pull/7555#discussion_r512935610", "createdAt": "2020-10-27T18:32:59Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/ClientLoadCounter.java", "diffHunk": "@@ -83,6 +83,8 @@ void recordMetric(String name, double value) {\n   /**\n    * Generates a snapshot for load stats recorded in this counter for the interval between calls\n    * of this method.\n+   *\n+   * <p>Calls to this method must be serialized externally.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "563a26a541c98010a1ec536a483c24ffdc0111a4"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk4ODU0NQ==", "bodyText": "Hmm... We can, but it doesn't need to.", "url": "https://github.com/grpc/grpc-java/pull/7555#discussion_r512988545", "createdAt": "2020-10-27T19:52:18Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/ClientLoadCounter.java", "diffHunk": "@@ -83,6 +83,8 @@ void recordMetric(String name, double value) {\n   /**\n    * Generates a snapshot for load stats recorded in this counter for the interval between calls\n    * of this method.\n+   *\n+   * <p>Calls to this method must be serialized externally.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkzNTYxMA=="}, "originalCommit": {"oid": "563a26a541c98010a1ec536a483c24ffdc0111a4"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA4NDc5OQ==", "bodyText": "Okay, this is on the control path. So it doesn't matter much to use synchronized. I've made the ClientLoadCounter class completely thread-safe.", "url": "https://github.com/grpc/grpc-java/pull/7555#discussion_r513084799", "createdAt": "2020-10-27T23:07:56Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/ClientLoadCounter.java", "diffHunk": "@@ -83,6 +83,8 @@ void recordMetric(String name, double value) {\n   /**\n    * Generates a snapshot for load stats recorded in this counter for the interval between calls\n    * of this method.\n+   *\n+   * <p>Calls to this method must be serialized externally.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkzNTYxMA=="}, "originalCommit": {"oid": "563a26a541c98010a1ec536a483c24ffdc0111a4"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzg3OTkzOnYy", "diffSide": "LEFT", "path": "xds/src/main/java/io/grpc/xds/LoadStatsManager.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODo0MDoxNlrOHpLXUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMzowNjoyMVrOHpULZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkzOTg1OQ==", "bodyText": "Why remove this? Seems not correct. It needs be thread-safe.", "url": "https://github.com/grpc/grpc-java/pull/7555#discussion_r512939859", "createdAt": "2020-10-27T18:40:16Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/LoadStatsManager.java", "diffHunk": "@@ -119,43 +119,41 @@ void removeLoadStats(String cluster, @Nullable String clusterService) {\n     return res;\n   }\n \n+  // Introduced for testing.\n   @VisibleForTesting\n   interface LoadStatsStoreFactory {\n     LoadStatsStore newLoadStatsStore(String cluster, String clusterService);\n   }\n \n   /**\n-   * Interface for client side load stats store. An {@code LoadStatsStore} maintains load stats per\n-   * cluster:cluster_service exposed by traffic director from a gRPC client's perspective,\n-   * including dropped calls. Load stats for endpoints are aggregated in locality granularity\n-   * while the numbers of dropped calls are aggregated in cluster:cluster_service granularity.\n+   * Interface for client side load stats store. A {@link LoadStatsStore} instance holds the load\n+   * stats for a cluster from an gRPC client's perspective by maintaining a set of locality\n+   * counters for each locality it is tracking loads for.\n    */\n   interface LoadStatsStore {\n \n     /**\n      * Generates a report based on recorded load stats (including RPC counts, backend metrics and\n      * dropped calls) for the interval since the previous call of this method.\n      */\n-    // TODO(chengyuanzhang): do not use proto type directly.\n     ClusterStats generateLoadReport();\n \n     /**\n-     * Track load stats for endpoints in the provided locality. Only load stats for endpoints\n-     * in tracked localities will be included in generated load reports.\n+     * Adds tracking for load stats sent to the given {@code locality}. Returns the counter\n+     * object responsible for tracking the client load stats to the given {@code locality}.\n+     * Only load stats for tracked localities will be included in generated load reports.\n      */\n     ClientLoadCounter addLocality(Locality locality);\n \n     /**\n-     * Drop tracking load stats for endpoints in the provided locality. Load stats for endpoints\n-     * in removed localities will no longer be included in future generated load reports after\n+     * Drops tracking for load stats sent to the given {@code locality}. Load stats for removed\n+     * localities will no longer be included in future generated load reports after\n      * their currently recording stats have been fully reported.\n      */\n     void removeLocality(Locality locality);\n \n     /**\n      * Records a drop decision.\n-     *\n-     * <p>This method is thread-safe.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "563a26a541c98010a1ec536a483c24ffdc0111a4"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1Mzg5Ng==", "bodyText": "It is thread-safe. But just remove the document there (not document on the interface).", "url": "https://github.com/grpc/grpc-java/pull/7555#discussion_r512953896", "createdAt": "2020-10-27T19:03:51Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/LoadStatsManager.java", "diffHunk": "@@ -119,43 +119,41 @@ void removeLoadStats(String cluster, @Nullable String clusterService) {\n     return res;\n   }\n \n+  // Introduced for testing.\n   @VisibleForTesting\n   interface LoadStatsStoreFactory {\n     LoadStatsStore newLoadStatsStore(String cluster, String clusterService);\n   }\n \n   /**\n-   * Interface for client side load stats store. An {@code LoadStatsStore} maintains load stats per\n-   * cluster:cluster_service exposed by traffic director from a gRPC client's perspective,\n-   * including dropped calls. Load stats for endpoints are aggregated in locality granularity\n-   * while the numbers of dropped calls are aggregated in cluster:cluster_service granularity.\n+   * Interface for client side load stats store. A {@link LoadStatsStore} instance holds the load\n+   * stats for a cluster from an gRPC client's perspective by maintaining a set of locality\n+   * counters for each locality it is tracking loads for.\n    */\n   interface LoadStatsStore {\n \n     /**\n      * Generates a report based on recorded load stats (including RPC counts, backend metrics and\n      * dropped calls) for the interval since the previous call of this method.\n      */\n-    // TODO(chengyuanzhang): do not use proto type directly.\n     ClusterStats generateLoadReport();\n \n     /**\n-     * Track load stats for endpoints in the provided locality. Only load stats for endpoints\n-     * in tracked localities will be included in generated load reports.\n+     * Adds tracking for load stats sent to the given {@code locality}. Returns the counter\n+     * object responsible for tracking the client load stats to the given {@code locality}.\n+     * Only load stats for tracked localities will be included in generated load reports.\n      */\n     ClientLoadCounter addLocality(Locality locality);\n \n     /**\n-     * Drop tracking load stats for endpoints in the provided locality. Load stats for endpoints\n-     * in removed localities will no longer be included in future generated load reports after\n+     * Drops tracking for load stats sent to the given {@code locality}. Load stats for removed\n+     * localities will no longer be included in future generated load reports after\n      * their currently recording stats have been fully reported.\n      */\n     void removeLocality(Locality locality);\n \n     /**\n      * Records a drop decision.\n-     *\n-     * <p>This method is thread-safe.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkzOTg1OQ=="}, "originalCommit": {"oid": "563a26a541c98010a1ec536a483c24ffdc0111a4"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk3MTE0Mw==", "bodyText": "As usage of it relies on this contract, it should be documented on the interface.", "url": "https://github.com/grpc/grpc-java/pull/7555#discussion_r512971143", "createdAt": "2020-10-27T19:30:55Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/LoadStatsManager.java", "diffHunk": "@@ -119,43 +119,41 @@ void removeLoadStats(String cluster, @Nullable String clusterService) {\n     return res;\n   }\n \n+  // Introduced for testing.\n   @VisibleForTesting\n   interface LoadStatsStoreFactory {\n     LoadStatsStore newLoadStatsStore(String cluster, String clusterService);\n   }\n \n   /**\n-   * Interface for client side load stats store. An {@code LoadStatsStore} maintains load stats per\n-   * cluster:cluster_service exposed by traffic director from a gRPC client's perspective,\n-   * including dropped calls. Load stats for endpoints are aggregated in locality granularity\n-   * while the numbers of dropped calls are aggregated in cluster:cluster_service granularity.\n+   * Interface for client side load stats store. A {@link LoadStatsStore} instance holds the load\n+   * stats for a cluster from an gRPC client's perspective by maintaining a set of locality\n+   * counters for each locality it is tracking loads for.\n    */\n   interface LoadStatsStore {\n \n     /**\n      * Generates a report based on recorded load stats (including RPC counts, backend metrics and\n      * dropped calls) for the interval since the previous call of this method.\n      */\n-    // TODO(chengyuanzhang): do not use proto type directly.\n     ClusterStats generateLoadReport();\n \n     /**\n-     * Track load stats for endpoints in the provided locality. Only load stats for endpoints\n-     * in tracked localities will be included in generated load reports.\n+     * Adds tracking for load stats sent to the given {@code locality}. Returns the counter\n+     * object responsible for tracking the client load stats to the given {@code locality}.\n+     * Only load stats for tracked localities will be included in generated load reports.\n      */\n     ClientLoadCounter addLocality(Locality locality);\n \n     /**\n-     * Drop tracking load stats for endpoints in the provided locality. Load stats for endpoints\n-     * in removed localities will no longer be included in future generated load reports after\n+     * Drops tracking for load stats sent to the given {@code locality}. Load stats for removed\n+     * localities will no longer be included in future generated load reports after\n      * their currently recording stats have been fully reported.\n      */\n     void removeLocality(Locality locality);\n \n     /**\n      * Records a drop decision.\n-     *\n-     * <p>This method is thread-safe.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkzOTg1OQ=="}, "originalCommit": {"oid": "563a26a541c98010a1ec536a483c24ffdc0111a4"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk4MTczMg==", "bodyText": "I think it's better to document on LoadStatsStoreImpl, the interface itself does not have any thread safety implications. Just like Map vs ConcurrentMap.", "url": "https://github.com/grpc/grpc-java/pull/7555#discussion_r512981732", "createdAt": "2020-10-27T19:44:48Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/LoadStatsManager.java", "diffHunk": "@@ -119,43 +119,41 @@ void removeLoadStats(String cluster, @Nullable String clusterService) {\n     return res;\n   }\n \n+  // Introduced for testing.\n   @VisibleForTesting\n   interface LoadStatsStoreFactory {\n     LoadStatsStore newLoadStatsStore(String cluster, String clusterService);\n   }\n \n   /**\n-   * Interface for client side load stats store. An {@code LoadStatsStore} maintains load stats per\n-   * cluster:cluster_service exposed by traffic director from a gRPC client's perspective,\n-   * including dropped calls. Load stats for endpoints are aggregated in locality granularity\n-   * while the numbers of dropped calls are aggregated in cluster:cluster_service granularity.\n+   * Interface for client side load stats store. A {@link LoadStatsStore} instance holds the load\n+   * stats for a cluster from an gRPC client's perspective by maintaining a set of locality\n+   * counters for each locality it is tracking loads for.\n    */\n   interface LoadStatsStore {\n \n     /**\n      * Generates a report based on recorded load stats (including RPC counts, backend metrics and\n      * dropped calls) for the interval since the previous call of this method.\n      */\n-    // TODO(chengyuanzhang): do not use proto type directly.\n     ClusterStats generateLoadReport();\n \n     /**\n-     * Track load stats for endpoints in the provided locality. Only load stats for endpoints\n-     * in tracked localities will be included in generated load reports.\n+     * Adds tracking for load stats sent to the given {@code locality}. Returns the counter\n+     * object responsible for tracking the client load stats to the given {@code locality}.\n+     * Only load stats for tracked localities will be included in generated load reports.\n      */\n     ClientLoadCounter addLocality(Locality locality);\n \n     /**\n-     * Drop tracking load stats for endpoints in the provided locality. Load stats for endpoints\n-     * in removed localities will no longer be included in future generated load reports after\n+     * Drops tracking for load stats sent to the given {@code locality}. Load stats for removed\n+     * localities will no longer be included in future generated load reports after\n      * their currently recording stats have been fully reported.\n      */\n     void removeLocality(Locality locality);\n \n     /**\n      * Records a drop decision.\n-     *\n-     * <p>This method is thread-safe.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkzOTg1OQ=="}, "originalCommit": {"oid": "563a26a541c98010a1ec536a483c24ffdc0111a4"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA3NTQ5Ng==", "bodyText": "It depends on how you use it. In a class, usage like Map m = new ConcurrentMap(), then you can use m and rely on the thread safety documented in  ConcurrentMap. But if in a class like Map m = someAbstractOject.getAbstractMap(), then you can not use m assuming it has thread-safety.\nIn EdsLoadBalancer2, loadStatsStore is declared as interface type. loadStatsStore = xdsClient.addClientStats(cluster, edsServiceName) is also giving an interface type.  But loadStatsStore.recordDroppedRequest() is called assuming thread-safety.", "url": "https://github.com/grpc/grpc-java/pull/7555#discussion_r513075496", "createdAt": "2020-10-27T22:41:11Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/LoadStatsManager.java", "diffHunk": "@@ -119,43 +119,41 @@ void removeLoadStats(String cluster, @Nullable String clusterService) {\n     return res;\n   }\n \n+  // Introduced for testing.\n   @VisibleForTesting\n   interface LoadStatsStoreFactory {\n     LoadStatsStore newLoadStatsStore(String cluster, String clusterService);\n   }\n \n   /**\n-   * Interface for client side load stats store. An {@code LoadStatsStore} maintains load stats per\n-   * cluster:cluster_service exposed by traffic director from a gRPC client's perspective,\n-   * including dropped calls. Load stats for endpoints are aggregated in locality granularity\n-   * while the numbers of dropped calls are aggregated in cluster:cluster_service granularity.\n+   * Interface for client side load stats store. A {@link LoadStatsStore} instance holds the load\n+   * stats for a cluster from an gRPC client's perspective by maintaining a set of locality\n+   * counters for each locality it is tracking loads for.\n    */\n   interface LoadStatsStore {\n \n     /**\n      * Generates a report based on recorded load stats (including RPC counts, backend metrics and\n      * dropped calls) for the interval since the previous call of this method.\n      */\n-    // TODO(chengyuanzhang): do not use proto type directly.\n     ClusterStats generateLoadReport();\n \n     /**\n-     * Track load stats for endpoints in the provided locality. Only load stats for endpoints\n-     * in tracked localities will be included in generated load reports.\n+     * Adds tracking for load stats sent to the given {@code locality}. Returns the counter\n+     * object responsible for tracking the client load stats to the given {@code locality}.\n+     * Only load stats for tracked localities will be included in generated load reports.\n      */\n     ClientLoadCounter addLocality(Locality locality);\n \n     /**\n-     * Drop tracking load stats for endpoints in the provided locality. Load stats for endpoints\n-     * in removed localities will no longer be included in future generated load reports after\n+     * Drops tracking for load stats sent to the given {@code locality}. Load stats for removed\n+     * localities will no longer be included in future generated load reports after\n      * their currently recording stats have been fully reported.\n      */\n     void removeLocality(Locality locality);\n \n     /**\n      * Records a drop decision.\n-     *\n-     * <p>This method is thread-safe.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkzOTg1OQ=="}, "originalCommit": {"oid": "563a26a541c98010a1ec536a483c24ffdc0111a4"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA4NDI2Mw==", "bodyText": "Alright, put back some comment on the thread-safety guaranteed for implementations.\nAnyway, the operation itself doesn't need to have thread-safety implications. Just like Map as an example, put/get operations does not have thread-safety implications, it is the API consumer's responsible to use it correctly.   The API consumer can use put or get without external synchronization in multi-thread context if it is given that the concrete implementation is actually a ConcurrentMap.", "url": "https://github.com/grpc/grpc-java/pull/7555#discussion_r513084263", "createdAt": "2020-10-27T23:06:21Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/LoadStatsManager.java", "diffHunk": "@@ -119,43 +119,41 @@ void removeLoadStats(String cluster, @Nullable String clusterService) {\n     return res;\n   }\n \n+  // Introduced for testing.\n   @VisibleForTesting\n   interface LoadStatsStoreFactory {\n     LoadStatsStore newLoadStatsStore(String cluster, String clusterService);\n   }\n \n   /**\n-   * Interface for client side load stats store. An {@code LoadStatsStore} maintains load stats per\n-   * cluster:cluster_service exposed by traffic director from a gRPC client's perspective,\n-   * including dropped calls. Load stats for endpoints are aggregated in locality granularity\n-   * while the numbers of dropped calls are aggregated in cluster:cluster_service granularity.\n+   * Interface for client side load stats store. A {@link LoadStatsStore} instance holds the load\n+   * stats for a cluster from an gRPC client's perspective by maintaining a set of locality\n+   * counters for each locality it is tracking loads for.\n    */\n   interface LoadStatsStore {\n \n     /**\n      * Generates a report based on recorded load stats (including RPC counts, backend metrics and\n      * dropped calls) for the interval since the previous call of this method.\n      */\n-    // TODO(chengyuanzhang): do not use proto type directly.\n     ClusterStats generateLoadReport();\n \n     /**\n-     * Track load stats for endpoints in the provided locality. Only load stats for endpoints\n-     * in tracked localities will be included in generated load reports.\n+     * Adds tracking for load stats sent to the given {@code locality}. Returns the counter\n+     * object responsible for tracking the client load stats to the given {@code locality}.\n+     * Only load stats for tracked localities will be included in generated load reports.\n      */\n     ClientLoadCounter addLocality(Locality locality);\n \n     /**\n-     * Drop tracking load stats for endpoints in the provided locality. Load stats for endpoints\n-     * in removed localities will no longer be included in future generated load reports after\n+     * Drops tracking for load stats sent to the given {@code locality}. Load stats for removed\n+     * localities will no longer be included in future generated load reports after\n      * their currently recording stats have been fully reported.\n      */\n     void removeLocality(Locality locality);\n \n     /**\n      * Records a drop decision.\n-     *\n-     * <p>This method is thread-safe.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkzOTg1OQ=="}, "originalCommit": {"oid": "563a26a541c98010a1ec536a483c24ffdc0111a4"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2244, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}