{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0MDI1OTcx", "number": 6931, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMTozNjo1MVrODyrweQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMTozNjo1MVrODyrweQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDcyMzEzOnYy", "diffSide": "RIGHT", "path": "xds/src/test/java/io/grpc/xds/EdsLoadBalancerProviderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMTozNjo1MVrOGG4DOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMTozNjo1MVrOGG4DOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg2Mjk3MA==", "bodyText": "nit: +newline", "url": "https://github.com/grpc/grpc-java/pull/6931#discussion_r409862970", "createdAt": "2020-04-16T21:36:51Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/test/java/io/grpc/xds/EdsLoadBalancerProviderTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import io.grpc.NameResolver.ConfigOrError;\n+import io.grpc.internal.JsonParser;\n+import io.grpc.xds.EdsLoadBalancerProvider.EdsConfig;\n+import java.io.IOException;\n+import java.util.Map;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/** Unit tests for {@link EdsLoadBalancerProvider}. */\n+@RunWith(JUnit4.class)\n+public class EdsLoadBalancerProviderTest {\n+  private final EdsLoadBalancerProvider provider = new EdsLoadBalancerProvider();\n+\n+  @Test\n+  public void parseEdsLoadBalancingPolicyConfig() throws IOException {\n+    String rawEdsLbConfig = \"{\\n\"\n+        + \"  \\\"cluster\\\": \\\"cluster-foo.googleapis.com\\\",\\n\"\n+        + \"  \\\"edsServiceName\\\": \\\"cluster-foo:service-blade\\\",\\n\"\n+        + \"  \\\"lrsLoadReportingServerName\\\": \\\"trafficdirector.googleapis.com\\\",\\n\"\n+        + \"  \\\"endpointPickingPolicy\\\": [\\n\"\n+        + \"     { \\\"policy_foo\\\": {} },\\n\"\n+        + \"     { \\\"pick_first\\\": {} }\\n\"\n+        + \"  ]\\n\"\n+        + \"}\";\n+\n+    @SuppressWarnings(\"unchecked\")\n+    Map<String, ?> rawLbConfigMap = (Map<String, ?>) JsonParser.parse(rawEdsLbConfig);\n+    ConfigOrError result = provider.parseLoadBalancingPolicyConfig(rawLbConfigMap);\n+    assertThat(result.getConfig()).isNotNull();\n+    EdsConfig config = (EdsConfig) result.getConfig();\n+    assertThat(config.clusterName).isEqualTo(\"cluster-foo.googleapis.com\");\n+    assertThat(config.edsServiceName).isEqualTo(\"cluster-foo:service-blade\");\n+    assertThat(config.lrsServerName).isEqualTo(\"trafficdirector.googleapis.com\");\n+    assertThat(config.endpointPickingPolicy.getProvider().getPolicyName())\n+        .isEqualTo(\"pick_first\");\n+  }\n+\n+  @Test\n+  public void parseEdsLoadBalancingPolicyConfig_defaultEndpointPickingPolicy_roundRobin()\n+      throws IOException {\n+    String rawEdsLbConfig = \"{\\n\"\n+        + \"  \\\"cluster\\\": \\\"cluster-foo.googleapis.com\\\",\\n\"\n+        + \"  \\\"edsServiceName\\\": \\\"cluster-foo:service-blade\\\",\\n\"\n+        + \"  \\\"lrsLoadReportingServerName\\\": \\\"trafficdirector.googleapis.com\\\"\\n\"\n+        + \"}\";\n+\n+    @SuppressWarnings(\"unchecked\")\n+    Map<String, ?> rawLbConfigMap = (Map<String, ?>) JsonParser.parse(rawEdsLbConfig);\n+    ConfigOrError result = provider.parseLoadBalancingPolicyConfig(rawLbConfigMap);\n+    assertThat(result.getConfig()).isNotNull();\n+    EdsConfig config = (EdsConfig) result.getConfig();\n+    assertThat(config.endpointPickingPolicy.getProvider().getPolicyName())\n+        .isEqualTo(\"round_robin\");\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfcfa0d880a3bbe86fb47aa7e109a68776a3a947"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2799, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}