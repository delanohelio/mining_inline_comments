{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxNDA2MjE5", "number": 7689, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxOTowNjozMFrOFAaitA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMTozMzo1NFrOFDOTjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1OTc5MTg4OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/ServerXdsClient.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxOTowNjozMFrOH-sn-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxODo1ODoxM1rOH_d36Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUwNDg5MA==", "bodyText": "This is still incorrect. It should always return null for type != ResourceType.LDS.", "url": "https://github.com/grpc/grpc-java/pull/7689#discussion_r535504890", "createdAt": "2020-12-03T19:06:30Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/ServerXdsClient.java", "diffHunk": "@@ -107,7 +107,7 @@ public void run() {\n   @Nullable\n   @Override\n   Collection<String> getSubscribedResources(ResourceType type) {\n-    if (newServerApi) {\n+    if (newServerApi && (type == ResourceType.LDS)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b81c50e640f8038c0a1ec5ac7059f0a9870a1be4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUxMjc5Mg==", "bodyText": "I can make the change but just curious what's the difference between returning null vs empty collection if the end result is the same?\nSo just to summarize:\n\nif type is LDS return subscribed resource for newServerApi else empty collection\nif type is non-LDS then just return null\n\nIs that right?", "url": "https://github.com/grpc/grpc-java/pull/7689#discussion_r535512792", "createdAt": "2020-12-03T19:19:05Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/ServerXdsClient.java", "diffHunk": "@@ -107,7 +107,7 @@ public void run() {\n   @Nullable\n   @Override\n   Collection<String> getSubscribedResources(ResourceType type) {\n-    if (newServerApi) {\n+    if (newServerApi && (type == ResourceType.LDS)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUwNDg5MA=="}, "originalCommit": {"oid": "b81c50e640f8038c0a1ec5ac7059f0a9870a1be4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU5OTg3Mg==", "bodyText": "It's not the same. I remember we discussed this before (in the doc).\nIn the old API, ServerXdsClient sends LDS requests with an empty list of resource names. When the RPC stream is recreated, we need to know if we need to re-subscribe to each type of resources. This is done by calling this getSubscribedResources(). It uses null vs non-null values to distinguish if the resources of that type is subscribed, and then decide if such a request needs to be sent. We cannot use empty vs non-empty to distinguish, because ServerXdsClient uses wildcard (empty list of resource names) to subscribe to LDS resources.\nSince ServerXdsClient never subscribes to resources other than LDS, it should always return null for other type of resources so that the abstract layer knows not to send requests for non-LDS resources.\nThe logic here should be\nif (type != ResourceType.LDS) {\n  return null;\n}\nif (newServerApi) {\n  return ImmutableList.<String>of(grpcServerResourceId);\n}\nreturn return Collections.emptyList();", "url": "https://github.com/grpc/grpc-java/pull/7689#discussion_r535599872", "createdAt": "2020-12-03T20:53:54Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/ServerXdsClient.java", "diffHunk": "@@ -107,7 +107,7 @@ public void run() {\n   @Nullable\n   @Override\n   Collection<String> getSubscribedResources(ResourceType type) {\n-    if (newServerApi) {\n+    if (newServerApi && (type == ResourceType.LDS)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUwNDg5MA=="}, "originalCommit": {"oid": "b81c50e640f8038c0a1ec5ac7059f0a9870a1be4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMwOTE3Mg==", "bodyText": "Strictly speaking, you should also include the condition of if there is a watcher watching for the resource. Just as what it initially looked like:\n\n  \n    \n      grpc-java/xds/src/main/java/io/grpc/xds/ServerXdsClient.java\n    \n    \n         Line 90\n      in\n      40191b2\n    \n    \n    \n    \n\n        \n          \n           if (type != ResourceType.LDS || listenerWatcher == null) {", "url": "https://github.com/grpc/grpc-java/pull/7689#discussion_r536309172", "createdAt": "2020-12-04T18:53:50Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/ServerXdsClient.java", "diffHunk": "@@ -107,7 +107,7 @@ public void run() {\n   @Nullable\n   @Override\n   Collection<String> getSubscribedResources(ResourceType type) {\n-    if (newServerApi) {\n+    if (newServerApi && (type == ResourceType.LDS)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUwNDg5MA=="}, "originalCommit": {"oid": "b81c50e640f8038c0a1ec5ac7059f0a9870a1be4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMxMTc4NQ==", "bodyText": "Strictly speaking, you should also include the condition of if there is a watcher watching for the resource. Just as what it initially looked like:\n\nThe ServerSdsClient is only created when there is a watcher to be registered. I can't think of a case where ServerSdsClient exists and there is no watcher. So adding this check is not going to make a difference.", "url": "https://github.com/grpc/grpc-java/pull/7689#discussion_r536311785", "createdAt": "2020-12-04T18:58:13Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/ServerXdsClient.java", "diffHunk": "@@ -107,7 +107,7 @@ public void run() {\n   @Nullable\n   @Override\n   Collection<String> getSubscribedResources(ResourceType type) {\n-    if (newServerApi) {\n+    if (newServerApi && (type == ResourceType.LDS)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUwNDg5MA=="}, "originalCommit": {"oid": "b81c50e640f8038c0a1ec5ac7059f0a9870a1be4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NjQ0NDgzOnYy", "diffSide": "RIGHT", "path": "xds/src/test/java/io/grpc/xds/ServerXdsClientTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwMTo1ODo1NFrOH_oJJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwMTo1ODo1NFrOH_oJJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ4MDAzNw==", "bodyText": "Such a test is fairly weak. It would be much more robust to verify xDS requests sent to an in-process service implementation.", "url": "https://github.com/grpc/grpc-java/pull/7689#discussion_r536480037", "createdAt": "2020-12-05T01:58:54Z", "author": {"login": "voidzcy"}, "path": "xds/src/test/java/io/grpc/xds/ServerXdsClientTest.java", "diffHunk": "@@ -759,6 +759,15 @@ public void streamClosedAndRetry() {\n         backoffPolicy2);\n   }\n \n+  @Test\n+  public void getSubscribedResources() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f6813fb54e009af7ca43ddd26e6cb56327c7395"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODkwNTQ4OnYy", "diffSide": "RIGHT", "path": "xds/src/test/java/io/grpc/xds/ServerXdsClientNewServerApiTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMzozNTo1N1rOICubIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMzo0MzoxNlrOICupFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyODY3NQ==", "bodyText": "This verify isn't useful. any(DiscoveryRequest.class) doesn't include anything, you need to be explicit for things you want to verify (on the other hand, for things not interested in terms of its behavior for a particular test case, you should just not verify it). I don't think we are much interested in verifying the ACK behavior particularly in this test case (that's why it was omitted in the original version). getSubscribedResources() is not covered by this test case, it's not called anywhere inside this test case's operations. It should be verified in streamClosedAndRetry() test case. One more thing, try to keep the two copies of ServerXdsClientTest consistent (that's why I hate maintaining two copies of tests \ud83d\ude04 ).", "url": "https://github.com/grpc/grpc-java/pull/7689#discussion_r539728675", "createdAt": "2020-12-09T23:35:57Z", "author": {"login": "voidzcy"}, "path": "xds/src/test/java/io/grpc/xds/ServerXdsClientNewServerApiTest.java", "diffHunk": "@@ -376,6 +376,8 @@ public void notifyUpdatedListener() {\n     ArgumentCaptor<ListenerUpdate> listenerUpdateCaptor = ArgumentCaptor.forClass(null);\n     verify(listenerWatcher, times(1)).onListenerChanged(listenerUpdateCaptor.capture());\n \n+    // expect only 2 requests: original req and ACK: no other req for no other resource\n+    verify(requestObserver, times(2)).onNext(any(DiscoveryRequest.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "466ddc5c534fdb069b1ee770cc4160bfbbbf6eba"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTczMjI0NA==", "bodyText": "I have moved the test to streamClosedAndRetry() because that's where the new code is exercised. Check the latest commit. Also the count combined with the previous test verifies that LDS was the only query sent on the stream. FWIW the tests fail without the fix in the main code.", "url": "https://github.com/grpc/grpc-java/pull/7689#discussion_r539732244", "createdAt": "2020-12-09T23:43:16Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/test/java/io/grpc/xds/ServerXdsClientNewServerApiTest.java", "diffHunk": "@@ -376,6 +376,8 @@ public void notifyUpdatedListener() {\n     ArgumentCaptor<ListenerUpdate> listenerUpdateCaptor = ArgumentCaptor.forClass(null);\n     verify(listenerWatcher, times(1)).onListenerChanged(listenerUpdateCaptor.capture());\n \n+    // expect only 2 requests: original req and ACK: no other req for no other resource\n+    verify(requestObserver, times(2)).onNext(any(DiscoveryRequest.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyODY3NQ=="}, "originalCommit": {"oid": "466ddc5c534fdb069b1ee770cc4160bfbbbf6eba"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODk1NjUzOnYy", "diffSide": "RIGHT", "path": "xds/src/test/java/io/grpc/xds/ServerXdsClientTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMzo1MToxMFrOICu3uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMDowMDoyNFrOICvGfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTczNTk5Mw==", "bodyText": "Isn't this just what the previous line verified, except it adds the times(1) restriction? I think all you need is verifyNoMoreInteractions(requestObserver) at the end of the lifecycle of each requestObserver instance (note there are several requestObserver updates in this test as more than one RPCs are made).", "url": "https://github.com/grpc/grpc-java/pull/7689#discussion_r539735993", "createdAt": "2020-12-09T23:51:10Z", "author": {"login": "voidzcy"}, "path": "xds/src/test/java/io/grpc/xds/ServerXdsClientTest.java", "diffHunk": "@@ -639,6 +636,8 @@ public void streamClosedAndRetry() {\n     verify(requestObserver)\n         .onNext(eq(buildDiscoveryRequest(getNodeToVerify(), \"\",\n             ResourceType.LDS.typeUrlV2(), \"\")));\n+    // expect only 1 request: for LDS\n+    verify(requestObserver, times(1)).onNext(any(DiscoveryRequest.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34ac6d3ee6251df41f0ad8ec4655daea0d588e41"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTczOTc3Mw==", "bodyText": "So it does verify that there is only request which is the previous one (for LDS) and no more. So verifyNoMoreInteractions(requestObserver) also works but  in terms of qualitative testing there is no difference.", "url": "https://github.com/grpc/grpc-java/pull/7689#discussion_r539739773", "createdAt": "2020-12-10T00:00:24Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/test/java/io/grpc/xds/ServerXdsClientTest.java", "diffHunk": "@@ -639,6 +636,8 @@ public void streamClosedAndRetry() {\n     verify(requestObserver)\n         .onNext(eq(buildDiscoveryRequest(getNodeToVerify(), \"\",\n             ResourceType.LDS.typeUrlV2(), \"\")));\n+    // expect only 1 request: for LDS\n+    verify(requestObserver, times(1)).onNext(any(DiscoveryRequest.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTczNTk5Mw=="}, "originalCommit": {"oid": "34ac6d3ee6251df41f0ad8ec4655daea0d588e41"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTI0NDMxOnYy", "diffSide": "RIGHT", "path": "xds/src/test/java/io/grpc/xds/ServerXdsClientTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMTozMzo1NFrOICxTpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMTozMzo1NFrOICxTpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc3NTkwOQ==", "bodyText": "Well, the two copies of tests have already diverged.  But it is minor...", "url": "https://github.com/grpc/grpc-java/pull/7689#discussion_r539775909", "createdAt": "2020-12-10T01:33:54Z", "author": {"login": "voidzcy"}, "path": "xds/src/test/java/io/grpc/xds/ServerXdsClientTest.java", "diffHunk": "@@ -636,6 +636,7 @@ public void streamClosedAndRetry() {\n     verify(requestObserver)\n         .onNext(eq(buildDiscoveryRequest(getNodeToVerify(), \"\",\n             ResourceType.LDS.typeUrlV2(), \"\")));\n+    verifyNoMoreInteractions(requestObserver);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f09a351f0f77e1272ac57e4229ad226c4fd6613"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2985, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}