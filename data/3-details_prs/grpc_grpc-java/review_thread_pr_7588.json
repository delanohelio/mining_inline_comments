{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1MDAyNTM4", "number": 7588, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxOTo1MDoyM1rOE4zxqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxOTo1MDoyM1rOE4zxqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDA0MDA4OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/SharedCallCounterMap.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxOTo1MDoyM1rOHy82ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMjo0MjozNlrOHzB53Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE4NzgxMg==", "bodyText": "What about avoiding assignment inside if-condition?\nAtomicLong counter = null;\nif (ref != null) {\n  counter = ref.get();\n}\nif (counter == null) {\n  counter = new AtomicLong();\n  ref = new CounterReference(counter, refQueue, cluster, edsServiceName);\n  clusterCounters.put(edsServiceName, ref);\n}", "url": "https://github.com/grpc/grpc-java/pull/7588#discussion_r523187812", "createdAt": "2020-11-13T19:50:23Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/SharedCallCounterMap.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.xds.EdsLoadBalancer2.CallCounterProvider;\n+import java.lang.ref.ReferenceQueue;\n+import java.lang.ref.WeakReference;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * The global map for holding circuit breaker atomic counters.\n+ */\n+@ThreadSafe\n+final class SharedCallCounterMap implements CallCounterProvider {\n+\n+  private final ReferenceQueue<AtomicLong> refQueue = new ReferenceQueue<>();\n+  private final Map<String, Map<String, CounterReference>> counters;\n+\n+  private SharedCallCounterMap() {\n+    this(new HashMap<String, Map<String, CounterReference>>());\n+  }\n+\n+  @VisibleForTesting\n+  SharedCallCounterMap(Map<String, Map<String, CounterReference>> counters) {\n+    this.counters = checkNotNull(counters, \"counters\");\n+  }\n+\n+  static SharedCallCounterMap getInstance() {\n+    return SharedCallCounterMapHolder.instance;\n+  }\n+\n+  @Override\n+  public synchronized AtomicLong getOrCreate(String cluster, @Nullable String edsServiceName) {\n+    Map<String, CounterReference> clusterCounters = counters.get(cluster);\n+    if (clusterCounters == null) {\n+      clusterCounters = new HashMap<>();\n+      counters.put(cluster, clusterCounters);\n+    }\n+    CounterReference ref = clusterCounters.get(edsServiceName);\n+    AtomicLong counter;\n+    if (ref == null || (counter = ref.get()) == null) {\n+      counter = new AtomicLong();\n+      ref = new CounterReference(counter, refQueue, cluster, edsServiceName);\n+      clusterCounters.put(edsServiceName, ref);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db6c43d192c7da6b3b1f8cfb8d2bf6177eba598e"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE5MDYyMg==", "bodyText": "Why choose something that is more verbose? \ud83d\ude04", "url": "https://github.com/grpc/grpc-java/pull/7588#discussion_r523190622", "createdAt": "2020-11-13T19:55:58Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/SharedCallCounterMap.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.xds.EdsLoadBalancer2.CallCounterProvider;\n+import java.lang.ref.ReferenceQueue;\n+import java.lang.ref.WeakReference;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * The global map for holding circuit breaker atomic counters.\n+ */\n+@ThreadSafe\n+final class SharedCallCounterMap implements CallCounterProvider {\n+\n+  private final ReferenceQueue<AtomicLong> refQueue = new ReferenceQueue<>();\n+  private final Map<String, Map<String, CounterReference>> counters;\n+\n+  private SharedCallCounterMap() {\n+    this(new HashMap<String, Map<String, CounterReference>>());\n+  }\n+\n+  @VisibleForTesting\n+  SharedCallCounterMap(Map<String, Map<String, CounterReference>> counters) {\n+    this.counters = checkNotNull(counters, \"counters\");\n+  }\n+\n+  static SharedCallCounterMap getInstance() {\n+    return SharedCallCounterMapHolder.instance;\n+  }\n+\n+  @Override\n+  public synchronized AtomicLong getOrCreate(String cluster, @Nullable String edsServiceName) {\n+    Map<String, CounterReference> clusterCounters = counters.get(cluster);\n+    if (clusterCounters == null) {\n+      clusterCounters = new HashMap<>();\n+      counters.put(cluster, clusterCounters);\n+    }\n+    CounterReference ref = clusterCounters.get(edsServiceName);\n+    AtomicLong counter;\n+    if (ref == null || (counter = ref.get()) == null) {\n+      counter = new AtomicLong();\n+      ref = new CounterReference(counter, refQueue, cluster, edsServiceName);\n+      clusterCounters.put(edsServiceName, ref);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE4NzgxMg=="}, "originalCommit": {"oid": "db6c43d192c7da6b3b1f8cfb8d2bf6177eba598e"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI2NDIyNA==", "bodyText": "Because assignment inside if-condition is less readable.", "url": "https://github.com/grpc/grpc-java/pull/7588#discussion_r523264224", "createdAt": "2020-11-13T22:22:34Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/SharedCallCounterMap.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.xds.EdsLoadBalancer2.CallCounterProvider;\n+import java.lang.ref.ReferenceQueue;\n+import java.lang.ref.WeakReference;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * The global map for holding circuit breaker atomic counters.\n+ */\n+@ThreadSafe\n+final class SharedCallCounterMap implements CallCounterProvider {\n+\n+  private final ReferenceQueue<AtomicLong> refQueue = new ReferenceQueue<>();\n+  private final Map<String, Map<String, CounterReference>> counters;\n+\n+  private SharedCallCounterMap() {\n+    this(new HashMap<String, Map<String, CounterReference>>());\n+  }\n+\n+  @VisibleForTesting\n+  SharedCallCounterMap(Map<String, Map<String, CounterReference>> counters) {\n+    this.counters = checkNotNull(counters, \"counters\");\n+  }\n+\n+  static SharedCallCounterMap getInstance() {\n+    return SharedCallCounterMapHolder.instance;\n+  }\n+\n+  @Override\n+  public synchronized AtomicLong getOrCreate(String cluster, @Nullable String edsServiceName) {\n+    Map<String, CounterReference> clusterCounters = counters.get(cluster);\n+    if (clusterCounters == null) {\n+      clusterCounters = new HashMap<>();\n+      counters.put(cluster, clusterCounters);\n+    }\n+    CounterReference ref = clusterCounters.get(edsServiceName);\n+    AtomicLong counter;\n+    if (ref == null || (counter = ref.get()) == null) {\n+      counter = new AtomicLong();\n+      ref = new CounterReference(counter, refQueue, cluster, edsServiceName);\n+      clusterCounters.put(edsServiceName, ref);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE4NzgxMg=="}, "originalCommit": {"oid": "db6c43d192c7da6b3b1f8cfb8d2bf6177eba598e"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI3MDYyMQ==", "bodyText": "Well, that should not be considered as a readability issue, that's what the language feature is, just like all the one liners in Python.", "url": "https://github.com/grpc/grpc-java/pull/7588#discussion_r523270621", "createdAt": "2020-11-13T22:42:36Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/SharedCallCounterMap.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.xds.EdsLoadBalancer2.CallCounterProvider;\n+import java.lang.ref.ReferenceQueue;\n+import java.lang.ref.WeakReference;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+import javax.annotation.Nullable;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * The global map for holding circuit breaker atomic counters.\n+ */\n+@ThreadSafe\n+final class SharedCallCounterMap implements CallCounterProvider {\n+\n+  private final ReferenceQueue<AtomicLong> refQueue = new ReferenceQueue<>();\n+  private final Map<String, Map<String, CounterReference>> counters;\n+\n+  private SharedCallCounterMap() {\n+    this(new HashMap<String, Map<String, CounterReference>>());\n+  }\n+\n+  @VisibleForTesting\n+  SharedCallCounterMap(Map<String, Map<String, CounterReference>> counters) {\n+    this.counters = checkNotNull(counters, \"counters\");\n+  }\n+\n+  static SharedCallCounterMap getInstance() {\n+    return SharedCallCounterMapHolder.instance;\n+  }\n+\n+  @Override\n+  public synchronized AtomicLong getOrCreate(String cluster, @Nullable String edsServiceName) {\n+    Map<String, CounterReference> clusterCounters = counters.get(cluster);\n+    if (clusterCounters == null) {\n+      clusterCounters = new HashMap<>();\n+      counters.put(cluster, clusterCounters);\n+    }\n+    CounterReference ref = clusterCounters.get(edsServiceName);\n+    AtomicLong counter;\n+    if (ref == null || (counter = ref.get()) == null) {\n+      counter = new AtomicLong();\n+      ref = new CounterReference(counter, refQueue, cluster, edsServiceName);\n+      clusterCounters.put(edsServiceName, ref);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE4NzgxMg=="}, "originalCommit": {"oid": "db6c43d192c7da6b3b1f8cfb8d2bf6177eba598e"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2268, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}