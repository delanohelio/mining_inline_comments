{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4NTkxODg2", "number": 7609, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMjowNzozMFrOE61-sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMjoyMTo1OVrOE62KcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTM3MjY0OnYy", "diffSide": "RIGHT", "path": "interop-testing/src/main/java/io/grpc/testing/integration/XdsTestClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMjowNzozMFrOH2Jv-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMjowNzozMFrOH2Jv-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU0NDg4OA==", "bodyText": "I think this should be reverted too\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private String server = \"localhost:8081\";\n          \n          \n            \n              private String server = \"localhost:8080\";", "url": "https://github.com/grpc/grpc-java/pull/7609#discussion_r526544888", "createdAt": "2020-11-19T02:07:30Z", "author": {"login": "sergiitk"}, "path": "interop-testing/src/main/java/io/grpc/testing/integration/XdsTestClient.java", "diffHunk": "@@ -81,7 +82,8 @@\n   private int qps = 1;\n   private volatile RpcConfig rpcConfig;\n   private int rpcTimeoutSec = 20;\n-  private String server = \"localhost:8080\";\n+  private boolean secureMode = false;\n+  private String server = \"localhost:8081\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd2c3a6545bb463f9f16c12892ceac02247559c"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTM4Mjc4OnYy", "diffSide": "RIGHT", "path": "interop-testing/src/main/java/io/grpc/testing/integration/XdsTestServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMjoxMjoyMFrOH2J2Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMjoxMjoyMFrOH2J2Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU0NjQ0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  System.err.println(\"Timed out waiting for otherServer shutdown\");\n          \n          \n            \n                  System.err.println(\"Timed out waiting for maintenanceServer shutdown\");", "url": "https://github.com/grpc/grpc-java/pull/7609#discussion_r526546446", "createdAt": "2020-11-19T02:12:20Z", "author": {"login": "sergiitk"}, "path": "interop-testing/src/main/java/io/grpc/testing/integration/XdsTestServer.java", "diffHunk": "@@ -135,30 +159,58 @@ private void start() throws Exception {\n       throw new RuntimeException(e);\n     }\n     health = new HealthStatusManager();\n-    server =\n-        NettyServerBuilder.forPort(port)\n-            .addService(\n-                ServerInterceptors.intercept(\n-                    new TestServiceImpl(serverId, host), new TestInfoInterceptor(host)))\n-            .addService(new XdsUpdateHealthServiceImpl(health))\n-            .addService(health.getHealthService())\n-            .addService(ProtoReflectionService.newInstance())\n-            .build()\n-            .start();\n+    if (secureMode) {\n+      server =\n+          XdsServerBuilder.forPort(port)\n+              .addService(\n+                  ServerInterceptors.intercept(\n+                      new TestServiceImpl(serverId, host), new TestInfoInterceptor(host)))\n+              .useXdsSecurityWithPlaintextFallback()\n+              .build()\n+              .start();\n+      maintenanceServer =\n+          NettyServerBuilder.forPort(maintenancePort)\n+              .addService(new XdsUpdateHealthServiceImpl(health))\n+              .addService(health.getHealthService())\n+              .addService(ProtoReflectionService.newInstance())\n+              .build()\n+              .start();\n+    } else {\n+      server =\n+          NettyServerBuilder.forPort(port)\n+              .addService(\n+                  ServerInterceptors.intercept(\n+                      new TestServiceImpl(serverId, host), new TestInfoInterceptor(host)))\n+              .addService(new XdsUpdateHealthServiceImpl(health))\n+              .addService(health.getHealthService())\n+              .addService(ProtoReflectionService.newInstance())\n+              .build()\n+              .start();\n+      maintenanceServer = null;\n+    }\n     health.setStatus(\"\", ServingStatus.SERVING);\n   }\n \n   private void stop() throws Exception {\n     server.shutdownNow();\n+    if (maintenanceServer != null) {\n+      maintenanceServer.shutdownNow();\n+    }\n     if (!server.awaitTermination(5, TimeUnit.SECONDS)) {\n       System.err.println(\"Timed out waiting for server shutdown\");\n     }\n+    if (maintenanceServer != null && !maintenanceServer.awaitTermination(5, TimeUnit.SECONDS)) {\n+      System.err.println(\"Timed out waiting for otherServer shutdown\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd2c3a6545bb463f9f16c12892ceac02247559c"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTM5OTg2OnYy", "diffSide": "RIGHT", "path": "interop-testing/src/main/java/io/grpc/testing/integration/XdsTestServer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMjoyMDozMVrOH2KADw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMjozODo1OVrOH2KXbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU0OTAwNw==", "bodyText": "Do we want to enforce this for the insecure mode? If so, we need to handle the case when --port is set to something that isn't 8080 via CLI args, otherwise it'll break existing runners. Let's say one of existing runners overrides the port:\nbin/xds-test-server --port=8081\nIt'll compare port 8081 to the default maintenance port 8080. So it'll enter this if and try to enforce the security mode.", "url": "https://github.com/grpc/grpc-java/pull/7609#discussion_r526549007", "createdAt": "2020-11-19T02:20:31Z", "author": {"login": "sergiitk"}, "path": "interop-testing/src/main/java/io/grpc/testing/integration/XdsTestServer.java", "diffHunk": "@@ -112,14 +120,30 @@ private void parseArgs(String[] args) {\n       }\n     }\n \n+    if (secureMode == (port == maintenancePort)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd2c3a6545bb463f9f16c12892ceac02247559c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU1NDk4OQ==", "bodyText": "That's a good point. I'll change this to:\n    if (secureMode && (port == maintenancePort)) {\n      System.err.println(\n          \"port and maintenancePort should be different for secure mode: port=\"\n              + port\n              + \", maintenancePort=\"\n              + maintenancePort);\n      usage = true;\n    }\n\nFor the insecure mode if maintenancePort is specified, it will be just ignored but no need to catch or flag that use-case", "url": "https://github.com/grpc/grpc-java/pull/7609#discussion_r526554989", "createdAt": "2020-11-19T02:38:59Z", "author": {"login": "sanjaypujare"}, "path": "interop-testing/src/main/java/io/grpc/testing/integration/XdsTestServer.java", "diffHunk": "@@ -112,14 +120,30 @@ private void parseArgs(String[] args) {\n       }\n     }\n \n+    if (secureMode == (port == maintenancePort)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU0OTAwNw=="}, "originalCommit": {"oid": "acd2c3a6545bb463f9f16c12892ceac02247559c"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTQwMjczOnYy", "diffSide": "RIGHT", "path": "interop-testing/src/main/java/io/grpc/testing/integration/XdsTestServer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMjoyMTo1OVrOH2KBvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwMTo0MTo1M1rOH26Rng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU0OTQzOQ==", "bodyText": "I think these scripts already do snake_case for args: https://github.com/grpc/grpc/blob/master/doc/xds-test-descriptions.md#client\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          + \"\\n  --maintenancePort=INT      listening port for other servers.\"\n          \n          \n            \n                          + \"\\n  --maintenance_port=INT      listening port for other servers.\"\n          \n      \n    \n    \n  \n\nSame for secureMode -> secure_mode", "url": "https://github.com/grpc/grpc-java/pull/7609#discussion_r526549439", "createdAt": "2020-11-19T02:21:59Z", "author": {"login": "sergiitk"}, "path": "interop-testing/src/main/java/io/grpc/testing/integration/XdsTestServer.java", "diffHunk": "@@ -112,14 +120,30 @@ private void parseArgs(String[] args) {\n       }\n     }\n \n+    if (secureMode == (port == maintenancePort)) {\n+      System.err.println(\n+          \"port and maintenancePort should be same for insecure and different for secure mode: port=\"\n+              + port\n+              + \", maintenancePort=\"\n+              + maintenancePort);\n+      usage = true;\n+    }\n+\n     if (usage) {\n       XdsTestServer s = new XdsTestServer();\n       System.err.println(\n           \"Usage: [ARGS...]\"\n               + \"\\n\"\n-              + \"\\n  --port=INT          listening port for server.\"\n+              + \"\\n  --port=INT          listening port for test server.\"\n               + \"\\n                      Default: \"\n               + s.port\n+              + \"\\n  --maintenancePort=INT      listening port for other servers.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd2c3a6545bb463f9f16c12892ceac02247559c"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzMzOTkzNA==", "bodyText": "done", "url": "https://github.com/grpc/grpc-java/pull/7609#discussion_r527339934", "createdAt": "2020-11-20T01:41:53Z", "author": {"login": "sanjaypujare"}, "path": "interop-testing/src/main/java/io/grpc/testing/integration/XdsTestServer.java", "diffHunk": "@@ -112,14 +120,30 @@ private void parseArgs(String[] args) {\n       }\n     }\n \n+    if (secureMode == (port == maintenancePort)) {\n+      System.err.println(\n+          \"port and maintenancePort should be same for insecure and different for secure mode: port=\"\n+              + port\n+              + \", maintenancePort=\"\n+              + maintenancePort);\n+      usage = true;\n+    }\n+\n     if (usage) {\n       XdsTestServer s = new XdsTestServer();\n       System.err.println(\n           \"Usage: [ARGS...]\"\n               + \"\\n\"\n-              + \"\\n  --port=INT          listening port for server.\"\n+              + \"\\n  --port=INT          listening port for test server.\"\n               + \"\\n                      Default: \"\n               + s.port\n+              + \"\\n  --maintenancePort=INT      listening port for other servers.\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU0OTQzOQ=="}, "originalCommit": {"oid": "acd2c3a6545bb463f9f16c12892ceac02247559c"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2284, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}