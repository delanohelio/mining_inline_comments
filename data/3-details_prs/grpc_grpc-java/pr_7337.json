{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5NjQ2NDIw", "number": 7337, "title": "core: fix a bug for hedging with throttling", "bodyText": "Resolves #7222: If a hedging substream fails triggering throttling threshold, the call should be committed.\nRefactored RetryPlan to two separate classes RetryPlan and HedgingPlan.", "createdAt": "2020-08-18T17:47:19Z", "url": "https://github.com/grpc/grpc-java/pull/7337", "merged": true, "mergeCommit": {"oid": "a91acec2d4429c40d3d1fe38745f712f86b0c470"}, "closed": true, "closedAt": "2020-08-19T06:12:27Z", "author": {"login": "dapengzhang0"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdAKrk6gH2gAyNDY5NjQ2NDIwOjAxMGYwMGEzYmVjMjhmYzRiZTE4ZDljM2NjMDkzZjcwYjJhYTQ5ZDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdAUZ0KAFqTQ3MDEyNjM0MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "010f00a3bec28fc4be18d9c3cc093f70b2aa49d6", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/010f00a3bec28fc4be18d9c3cc093f70b2aa49d6", "committedDate": "2020-08-18T17:43:53Z", "message": "core: fix a bug for hedging with throttling"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5ODQ5NjYx", "url": "https://github.com/grpc/grpc-java/pull/7337#pullrequestreview-469849661", "createdAt": "2020-08-18T21:39:35Z", "commit": {"oid": "010f00a3bec28fc4be18d9c3cc093f70b2aa49d6"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMTozOTozNVrOHCnosQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMTo0Nzo1NVrOHCn3bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwODU5Mw==", "bodyText": "No longer using \"fatal\" here, this is \"else isHedgeable=false\"", "url": "https://github.com/grpc/grpc-java/pull/7337#discussion_r472508593", "createdAt": "2020-08-18T21:39:35Z", "author": {"login": "ericgribkoff"}, "path": "core/src/main/java/io/grpc/internal/RetriableStream.java", "diffHunk": "@@ -837,51 +836,54 @@ public void run() {\n             nextBackoffIntervalNanos = retryPolicy.initialBackoffNanos;\n           }\n \n-          RetryPlan retryPlan = makeRetryDecision(status, trailers);\n-          if (retryPlan.shouldRetry) {\n-            // The check state.winningSubstream == null, checking if is not already committed, is\n-            // racy, but is still safe b/c the retry will also handle committed/cancellation\n-            FutureCanceller scheduledRetryCopy;\n+          if (!isHedging) {\n+            RetryPlan retryPlan = makeRetryDecision(status, trailers);\n+            if (retryPlan.shouldRetry) {\n+              // The check state.winningSubstream == null, checking if is not already committed, is\n+              // racy, but is still safe b/c the retry will also handle committed/cancellation\n+              FutureCanceller scheduledRetryCopy;\n+              synchronized (lock) {\n+                scheduledRetry = scheduledRetryCopy = new FutureCanceller(lock);\n+              }\n+              scheduledRetryCopy.setFuture(\n+                  scheduledExecutorService.schedule(\n+                      new Runnable() {\n+                        @Override\n+                        public void run() {\n+                          callExecutor.execute(\n+                              new Runnable() {\n+                                @Override\n+                                public void run() {\n+                                  // retry\n+                                  Substream newSubstream =\n+                                      createSubstream(substream.previousAttemptCount + 1);\n+                                  drain(newSubstream);\n+                                }\n+                              });\n+                        }\n+                      },\n+                      retryPlan.backoffNanos,\n+                      TimeUnit.NANOSECONDS));\n+              return;\n+            }\n+          } else {\n+            HedgingPlan hedgingPlan = makeHedgingDecision(status, trailers);\n+            if (hedgingPlan.isHedgeable) {\n+              pushbackHedging(hedgingPlan.hedgingPushbackMillis);\n+            }\n             synchronized (lock) {\n-              scheduledRetry = scheduledRetryCopy = new FutureCanceller(lock);\n+              state = state.removeActiveHedge(substream);\n+              // The invariant is whether or not #(Potential Hedge + active hedges) > 0.\n+              // Once hasPotentialHedging(state) is false, it will always be false, and then\n+              // #(state.activeHedges) will be decreasing. This guarantees that even there may be\n+              // multiple concurrent hedges, one of the hedges will end up committed.\n+              if (hedgingPlan.isHedgeable) {\n+                if (hasPotentialHedging(state) || !state.activeHedges.isEmpty()) {\n+                  return;\n+                }\n+                // else, no activeHedges, no new hedges possible, try to commit\n+              } // else, fatal, try to commit", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "010f00a3bec28fc4be18d9c3cc093f70b2aa49d6"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwOTgyOQ==", "bodyText": "This looks identical to lines 906-914 in makeRetryDecision. Can it be extracted out?", "url": "https://github.com/grpc/grpc-java/pull/7337#discussion_r472509829", "createdAt": "2020-08-18T21:42:13Z", "author": {"login": "ericgribkoff"}, "path": "core/src/main/java/io/grpc/internal/RetriableStream.java", "diffHunk": "@@ -942,8 +935,27 @@ private RetryPlan makeRetryDecision(Status status, Metadata trailer) {\n         } // else no retry\n       } // else no retry\n \n-      return new RetryPlan(\n-          shouldRetry, /* isFatal = */ false, backoffNanos, isHedging ? pushbackMillis : null);\n+      return new RetryPlan(shouldRetry, backoffNanos);\n+    }\n+\n+    private HedgingPlan makeHedgingDecision(Status status, Metadata trailer) {\n+      String pushbackStr = trailer.get(GRPC_RETRY_PUSHBACK_MS);\n+      Integer pushbackMillis = null;\n+      if (pushbackStr != null) {\n+        try {\n+          pushbackMillis = Integer.valueOf(pushbackStr);\n+        } catch (NumberFormatException e) {\n+          pushbackMillis = -1;\n+        }\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "010f00a3bec28fc4be18d9c3cc093f70b2aa49d6"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUxMDY3NA==", "bodyText": "Can this be && instead of ||? Or, even better, make line 953 if (!isFatal && throttle != null)? If isFatal=true, the return statement below will always be equivalent to return new HedgingPlan(false, pushbackMillis).", "url": "https://github.com/grpc/grpc-java/pull/7337#discussion_r472510674", "createdAt": "2020-08-18T21:44:15Z", "author": {"login": "ericgribkoff"}, "path": "core/src/main/java/io/grpc/internal/RetriableStream.java", "diffHunk": "@@ -942,8 +935,27 @@ private RetryPlan makeRetryDecision(Status status, Metadata trailer) {\n         } // else no retry\n       } // else no retry\n \n-      return new RetryPlan(\n-          shouldRetry, /* isFatal = */ false, backoffNanos, isHedging ? pushbackMillis : null);\n+      return new RetryPlan(shouldRetry, backoffNanos);\n+    }\n+\n+    private HedgingPlan makeHedgingDecision(Status status, Metadata trailer) {\n+      String pushbackStr = trailer.get(GRPC_RETRY_PUSHBACK_MS);\n+      Integer pushbackMillis = null;\n+      if (pushbackStr != null) {\n+        try {\n+          pushbackMillis = Integer.valueOf(pushbackStr);\n+        } catch (NumberFormatException e) {\n+          pushbackMillis = -1;\n+        }\n+      }\n+      boolean isFatal = !hedgingPolicy.nonFatalStatusCodes.contains(status.getCode());\n+      boolean isThrottled = false;\n+      if (throttle != null) {\n+        if (!isFatal || (pushbackMillis != null && pushbackMillis < 0)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "010f00a3bec28fc4be18d9c3cc093f70b2aa49d6"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUxMjM2NA==", "bodyText": "Nit: Swap the blocks here to avoid the negation, so that this can be if (isHedging) { /* handle hedging */ } else { /* handle retry */ }?", "url": "https://github.com/grpc/grpc-java/pull/7337#discussion_r472512364", "createdAt": "2020-08-18T21:47:55Z", "author": {"login": "ericgribkoff"}, "path": "core/src/main/java/io/grpc/internal/RetriableStream.java", "diffHunk": "@@ -837,51 +836,54 @@ public void run() {\n             nextBackoffIntervalNanos = retryPolicy.initialBackoffNanos;\n           }\n \n-          RetryPlan retryPlan = makeRetryDecision(status, trailers);\n-          if (retryPlan.shouldRetry) {\n-            // The check state.winningSubstream == null, checking if is not already committed, is\n-            // racy, but is still safe b/c the retry will also handle committed/cancellation\n-            FutureCanceller scheduledRetryCopy;\n+          if (!isHedging) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "010f00a3bec28fc4be18d9c3cc093f70b2aa49d6"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aeb1a253d28a56fdd68cf2b70b617fb407834370", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/aeb1a253d28a56fdd68cf2b70b617fb407834370", "committedDate": "2020-08-18T22:14:17Z", "message": "update outdated comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90d0a119bc38d4e1895984c49cef44d47ef620dc", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/90d0a119bc38d4e1895984c49cef44d47ef620dc", "committedDate": "2020-08-18T22:22:03Z", "message": "reuse shared code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0a998d019dd50e6b5ed9f5bed93369536fcec0b", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/a0a998d019dd50e6b5ed9f5bed93369536fcec0b", "committedDate": "2020-08-18T23:32:12Z", "message": "swap if (!isHedging) {} with else {}"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwMTI2MzQw", "url": "https://github.com/grpc/grpc-java/pull/7337#pullrequestreview-470126340", "createdAt": "2020-08-19T05:03:32Z", "commit": {"oid": "a0a998d019dd50e6b5ed9f5bed93369536fcec0b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4172, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}