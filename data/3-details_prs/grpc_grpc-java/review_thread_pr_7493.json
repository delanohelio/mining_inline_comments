{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5NjQzMDU1", "number": 7493, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMDoyMjozNFrOEtuytA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzoyNDowNVrOEt1I0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2Mzg4MDIwOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/internal/sds/trust/CertificateUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMDoyMjozNVrOHhsf9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMDoyMjozNVrOHhsf9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA5NDEzMw==", "bodyText": "The comment is unclear whether it's for the line above or below. Maybe change back to the previous format.", "url": "https://github.com/grpc/grpc-java/pull/7493#discussion_r505094133", "createdAt": "2020-10-15T00:22:35Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/internal/sds/trust/CertificateUtils.java", "diffHunk": "@@ -16,23 +16,46 @@\n \n package io.grpc.xds.internal.sds.trust;\n \n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.handler.codec.base64.Base64;\n+import io.netty.util.CharsetUtil;\n import java.io.BufferedInputStream;\n+import java.io.ByteArrayOutputStream;\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.security.KeyException;\n+import java.security.KeyFactory;\n+import java.security.PrivateKey;\n import java.security.cert.Certificate;\n import java.security.cert.CertificateException;\n import java.security.cert.CertificateFactory;\n import java.security.cert.X509Certificate;\n+import java.security.spec.PKCS8EncodedKeySpec;\n import java.util.Collection;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n \n /**\n  * Contains certificate utility method(s).\n  */\n public final class CertificateUtils {\n+  private static final Logger logger = Logger.getLogger(CertificateUtils.class.getName());\n \n   private static CertificateFactory factory;\n+  private static final Pattern KEY_PATTERN =\n+      Pattern.compile(\n+          \"-+BEGIN\\\\s+.*PRIVATE\\\\s+KEY[^-]*-+(?:\\\\s|\\\\r|\\\\n)+\"\n+              + // Header", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b331522c7f1e6315e41b63e26f626c1ae1affdc"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2Mzg5NzAzOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/internal/certprovider/ZatarCertificateProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMDozMTo1OVrOHhsp7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNjowOToxMFrOHiPZWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA5NjY4NA==", "bodyText": "Will this constructor be used not only for testing in future? If so no need to add @VisibleForTesting", "url": "https://github.com/grpc/grpc-java/pull/7493#discussion_r505096684", "createdAt": "2020-10-15T00:31:59Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/internal/certprovider/ZatarCertificateProvider.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.certprovider;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.InternalLogId;\n+import io.grpc.Status;\n+import io.grpc.SynchronizationContext;\n+import io.grpc.internal.TimeProvider;\n+import io.grpc.xds.internal.sds.trust.CertificateUtils;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.security.PrivateKey;\n+import java.security.cert.X509Certificate;\n+import java.util.Arrays;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/** Implementation of {@link CertificateProvider} for Zatar cert provider. */\n+final class ZatarCertificateProvider extends CertificateProvider {\n+  private static final Logger logger = Logger.getLogger(ZatarCertificateProvider.class.getName());\n+\n+  /**\n+   * After the previous cert has expired, if we are unable to get new certificates we will report\n+   * errors. We will start doing this a few seconds before the previous cert expiry whose value is\n+   * given by this constant.\n+   */\n+  @VisibleForTesting static final long GRACE_INTERVAL_IN_SECONDS = 4L;\n+\n+  @VisibleForTesting", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b331522c7f1e6315e41b63e26f626c1ae1affdc"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY2NTg4MQ==", "bodyText": "The constructor is package private only because of tests - otherwise it could have been made private. But it's not clear from the current PR so I will remove the annotation.", "url": "https://github.com/grpc/grpc-java/pull/7493#discussion_r505665881", "createdAt": "2020-10-15T16:09:10Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/internal/certprovider/ZatarCertificateProvider.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.certprovider;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.InternalLogId;\n+import io.grpc.Status;\n+import io.grpc.SynchronizationContext;\n+import io.grpc.internal.TimeProvider;\n+import io.grpc.xds.internal.sds.trust.CertificateUtils;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.security.PrivateKey;\n+import java.security.cert.X509Certificate;\n+import java.util.Arrays;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/** Implementation of {@link CertificateProvider} for Zatar cert provider. */\n+final class ZatarCertificateProvider extends CertificateProvider {\n+  private static final Logger logger = Logger.getLogger(ZatarCertificateProvider.class.getName());\n+\n+  /**\n+   * After the previous cert has expired, if we are unable to get new certificates we will report\n+   * errors. We will start doing this a few seconds before the previous cert expiry whose value is\n+   * given by this constant.\n+   */\n+  @VisibleForTesting static final long GRACE_INTERVAL_IN_SECONDS = 4L;\n+\n+  @VisibleForTesting", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA5NjY4NA=="}, "originalCommit": {"oid": "7b331522c7f1e6315e41b63e26f626c1ae1affdc"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MzkyOTAxOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/internal/certprovider/ZatarCertificateProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMDo0OTo1MFrOHhs8lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNjoxMzowMlrOHiPjqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEwMTQ2Mg==", "bodyText": "Clearly this won't happen because it is either the initial schedule or run by previous task, seems we don't need be too conservative checking the state.", "url": "https://github.com/grpc/grpc-java/pull/7493#discussion_r505101462", "createdAt": "2020-10-15T00:49:50Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/internal/certprovider/ZatarCertificateProvider.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.certprovider;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.InternalLogId;\n+import io.grpc.Status;\n+import io.grpc.SynchronizationContext;\n+import io.grpc.internal.TimeProvider;\n+import io.grpc.xds.internal.sds.trust.CertificateUtils;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.security.PrivateKey;\n+import java.security.cert.X509Certificate;\n+import java.util.Arrays;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/** Implementation of {@link CertificateProvider} for Zatar cert provider. */\n+final class ZatarCertificateProvider extends CertificateProvider {\n+  private static final Logger logger = Logger.getLogger(ZatarCertificateProvider.class.getName());\n+\n+  /**\n+   * After the previous cert has expired, if we are unable to get new certificates we will report\n+   * errors. We will start doing this a few seconds before the previous cert expiry whose value is\n+   * given by this constant.\n+   */\n+  @VisibleForTesting static final long GRACE_INTERVAL_IN_SECONDS = 4L;\n+\n+  @VisibleForTesting\n+  ZatarCertificateProvider(\n+      DistributorWatcher watcher,\n+      boolean notifyCertUpdates,\n+      String directory,\n+      String certFile,\n+      String privateKeyFile,\n+      String trustFile,\n+      long refreshIntervalInSeconds,\n+      ScheduledExecutorService scheduledExecutorService,\n+      TimeProvider timeProvider) {\n+    super(watcher, notifyCertUpdates);\n+    this.scheduledExecutorService =\n+        checkNotNull(scheduledExecutorService, \"scheduledExecutorService\");\n+    this.timeProvider = checkNotNull(timeProvider, \"timeProvider\");\n+    this.directory = Paths.get(checkNotNull(directory, \"diretory\"));\n+    this.certFile = checkNotNull(certFile, \"certFile\");\n+    this.privateKeyFile = checkNotNull(privateKeyFile, \"privateKeyFile\");\n+    this.trustFile = checkNotNull(trustFile, \"trustFile\");\n+    this.refreshIntervalInSeconds = refreshIntervalInSeconds;\n+    this.syncContext = createSynchronizationContext(directory);\n+  }\n+\n+  private SynchronizationContext createSynchronizationContext(String details) {\n+    final InternalLogId logId = InternalLogId.allocate(\"ZatarCertificateProvider\", details);\n+    return new SynchronizationContext(\n+        new Thread.UncaughtExceptionHandler() {\n+          private boolean panicMode;\n+\n+          @Override\n+          public void uncaughtException(Thread t, Throwable e) {\n+            logger.log(\n+                Level.SEVERE,\n+                \"[\" + logId + \"] Uncaught exception in the SynchronizationContext. Panic!\",\n+                e);\n+            panic(e);\n+          }\n+\n+          void panic(final Throwable t) {\n+            if (panicMode) {\n+              // Preserve the first panic information\n+              return;\n+            }\n+            panicMode = true;\n+            close();\n+          }\n+        });\n+  }\n+\n+  @Override\n+  public void start() {\n+    scheduleNextRefreshCertificate(/* delayInSeconds= */0);\n+  }\n+\n+  @Override\n+  public void close() {\n+    if (scheduledHandle != null) {\n+      scheduledHandle.cancel();\n+      scheduledHandle = null;\n+    }\n+    getWatcher().close();\n+  }\n+\n+  private void scheduleNextRefreshCertificate(long delayInSeconds) {\n+    if (scheduledHandle != null && scheduledHandle.isPending()) {\n+      logger.log(Level.SEVERE, \"Pending task found: inconsistent state in scheduledHandle!\");\n+      scheduledHandle.cancel();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b331522c7f1e6315e41b63e26f626c1ae1affdc"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY2ODUyMQ==", "bodyText": "if checkAndReloadCertificates was called from somewhere else and not thru the scheduler then this could happen - but I agree this check is unnecessary if there is no coding bug. Removed", "url": "https://github.com/grpc/grpc-java/pull/7493#discussion_r505668521", "createdAt": "2020-10-15T16:13:02Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/internal/certprovider/ZatarCertificateProvider.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.certprovider;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.InternalLogId;\n+import io.grpc.Status;\n+import io.grpc.SynchronizationContext;\n+import io.grpc.internal.TimeProvider;\n+import io.grpc.xds.internal.sds.trust.CertificateUtils;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.security.PrivateKey;\n+import java.security.cert.X509Certificate;\n+import java.util.Arrays;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/** Implementation of {@link CertificateProvider} for Zatar cert provider. */\n+final class ZatarCertificateProvider extends CertificateProvider {\n+  private static final Logger logger = Logger.getLogger(ZatarCertificateProvider.class.getName());\n+\n+  /**\n+   * After the previous cert has expired, if we are unable to get new certificates we will report\n+   * errors. We will start doing this a few seconds before the previous cert expiry whose value is\n+   * given by this constant.\n+   */\n+  @VisibleForTesting static final long GRACE_INTERVAL_IN_SECONDS = 4L;\n+\n+  @VisibleForTesting\n+  ZatarCertificateProvider(\n+      DistributorWatcher watcher,\n+      boolean notifyCertUpdates,\n+      String directory,\n+      String certFile,\n+      String privateKeyFile,\n+      String trustFile,\n+      long refreshIntervalInSeconds,\n+      ScheduledExecutorService scheduledExecutorService,\n+      TimeProvider timeProvider) {\n+    super(watcher, notifyCertUpdates);\n+    this.scheduledExecutorService =\n+        checkNotNull(scheduledExecutorService, \"scheduledExecutorService\");\n+    this.timeProvider = checkNotNull(timeProvider, \"timeProvider\");\n+    this.directory = Paths.get(checkNotNull(directory, \"diretory\"));\n+    this.certFile = checkNotNull(certFile, \"certFile\");\n+    this.privateKeyFile = checkNotNull(privateKeyFile, \"privateKeyFile\");\n+    this.trustFile = checkNotNull(trustFile, \"trustFile\");\n+    this.refreshIntervalInSeconds = refreshIntervalInSeconds;\n+    this.syncContext = createSynchronizationContext(directory);\n+  }\n+\n+  private SynchronizationContext createSynchronizationContext(String details) {\n+    final InternalLogId logId = InternalLogId.allocate(\"ZatarCertificateProvider\", details);\n+    return new SynchronizationContext(\n+        new Thread.UncaughtExceptionHandler() {\n+          private boolean panicMode;\n+\n+          @Override\n+          public void uncaughtException(Thread t, Throwable e) {\n+            logger.log(\n+                Level.SEVERE,\n+                \"[\" + logId + \"] Uncaught exception in the SynchronizationContext. Panic!\",\n+                e);\n+            panic(e);\n+          }\n+\n+          void panic(final Throwable t) {\n+            if (panicMode) {\n+              // Preserve the first panic information\n+              return;\n+            }\n+            panicMode = true;\n+            close();\n+          }\n+        });\n+  }\n+\n+  @Override\n+  public void start() {\n+    scheduleNextRefreshCertificate(/* delayInSeconds= */0);\n+  }\n+\n+  @Override\n+  public void close() {\n+    if (scheduledHandle != null) {\n+      scheduledHandle.cancel();\n+      scheduledHandle = null;\n+    }\n+    getWatcher().close();\n+  }\n+\n+  private void scheduleNextRefreshCertificate(long delayInSeconds) {\n+    if (scheduledHandle != null && scheduledHandle.isPending()) {\n+      logger.log(Level.SEVERE, \"Pending task found: inconsistent state in scheduledHandle!\");\n+      scheduledHandle.cancel();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEwMTQ2Mg=="}, "originalCommit": {"oid": "7b331522c7f1e6315e41b63e26f626c1ae1affdc"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDc4ODk5OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/internal/certprovider/ZatarCertificateProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzowMzoxOVrOHh1KcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzowMzoxOVrOHh1KcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIzNjA4MQ==", "bodyText": "I'd prefer to move the fields up to the topmost to be somewhat consistent in style.", "url": "https://github.com/grpc/grpc-java/pull/7493#discussion_r505236081", "createdAt": "2020-10-15T07:03:19Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/internal/certprovider/ZatarCertificateProvider.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.certprovider;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.InternalLogId;\n+import io.grpc.Status;\n+import io.grpc.SynchronizationContext;\n+import io.grpc.internal.TimeProvider;\n+import io.grpc.xds.internal.sds.trust.CertificateUtils;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.security.PrivateKey;\n+import java.security.cert.X509Certificate;\n+import java.util.Arrays;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/** Implementation of {@link CertificateProvider} for Zatar cert provider. */\n+final class ZatarCertificateProvider extends CertificateProvider {\n+  private static final Logger logger = Logger.getLogger(ZatarCertificateProvider.class.getName());\n+\n+  /**\n+   * After the previous cert has expired, if we are unable to get new certificates we will report\n+   * errors. We will start doing this a few seconds before the previous cert expiry whose value is\n+   * given by this constant.\n+   */\n+  @VisibleForTesting static final long GRACE_INTERVAL_IN_SECONDS = 4L;\n+\n+  @VisibleForTesting\n+  ZatarCertificateProvider(\n+      DistributorWatcher watcher,\n+      boolean notifyCertUpdates,\n+      String directory,\n+      String certFile,\n+      String privateKeyFile,\n+      String trustFile,\n+      long refreshIntervalInSeconds,\n+      ScheduledExecutorService scheduledExecutorService,\n+      TimeProvider timeProvider) {\n+    super(watcher, notifyCertUpdates);\n+    this.scheduledExecutorService =\n+        checkNotNull(scheduledExecutorService, \"scheduledExecutorService\");\n+    this.timeProvider = checkNotNull(timeProvider, \"timeProvider\");\n+    this.directory = Paths.get(checkNotNull(directory, \"diretory\"));\n+    this.certFile = checkNotNull(certFile, \"certFile\");\n+    this.privateKeyFile = checkNotNull(privateKeyFile, \"privateKeyFile\");\n+    this.trustFile = checkNotNull(trustFile, \"trustFile\");\n+    this.refreshIntervalInSeconds = refreshIntervalInSeconds;\n+    this.syncContext = createSynchronizationContext(directory);\n+  }\n+\n+  private SynchronizationContext createSynchronizationContext(String details) {\n+    final InternalLogId logId = InternalLogId.allocate(\"ZatarCertificateProvider\", details);\n+    return new SynchronizationContext(\n+        new Thread.UncaughtExceptionHandler() {\n+          private boolean panicMode;\n+\n+          @Override\n+          public void uncaughtException(Thread t, Throwable e) {\n+            logger.log(\n+                Level.SEVERE,\n+                \"[\" + logId + \"] Uncaught exception in the SynchronizationContext. Panic!\",\n+                e);\n+            panic(e);\n+          }\n+\n+          void panic(final Throwable t) {\n+            if (panicMode) {\n+              // Preserve the first panic information\n+              return;\n+            }\n+            panicMode = true;\n+            close();\n+          }\n+        });\n+  }\n+\n+  @Override\n+  public void start() {\n+    scheduleNextRefreshCertificate(/* delayInSeconds= */0);\n+  }\n+\n+  @Override\n+  public void close() {\n+    if (scheduledHandle != null) {\n+      scheduledHandle.cancel();\n+      scheduledHandle = null;\n+    }\n+    getWatcher().close();\n+  }\n+\n+  private void scheduleNextRefreshCertificate(long delayInSeconds) {\n+    if (scheduledHandle != null && scheduledHandle.isPending()) {\n+      logger.log(Level.SEVERE, \"Pending task found: inconsistent state in scheduledHandle!\");\n+      scheduledHandle.cancel();\n+    }\n+    RefreshCertificateTask runnable = new RefreshCertificateTask();\n+    scheduledHandle =\n+        syncContext.schedule(runnable, delayInSeconds, TimeUnit.SECONDS, scheduledExecutorService);\n+  }\n+\n+  @VisibleForTesting\n+  void checkAndReloadCertificates() {\n+    try {\n+      Path targetPath = Files.readSymbolicLink(directory);\n+      if (targetPath.equals(lastModifiedTarget)) {\n+        return;\n+      }\n+      PrivateKey privateKey =\n+          CertificateUtils.getPrivateKey(\n+              new FileInputStream(new File(targetPath.toFile(), privateKeyFile)));\n+      X509Certificate[] certs =\n+          CertificateUtils.toX509Certificates(\n+              new FileInputStream(new File(targetPath.toFile(), certFile)));\n+      X509Certificate[] caCerts =\n+          CertificateUtils.toX509Certificates(\n+              new FileInputStream(new File(targetPath.toFile(), trustFile)));\n+      getWatcher().updateCertificate(privateKey, Arrays.asList(certs));\n+      getWatcher().updateTrustedRoots(Arrays.asList(caCerts));\n+      lastModifiedTarget = targetPath;\n+    } catch (Throwable t) {\n+      generateErrorIfCurrentCertExpired(t);\n+    } finally {\n+      scheduleNextRefreshCertificate(refreshIntervalInSeconds);\n+    }\n+  }\n+\n+  private void generateErrorIfCurrentCertExpired(Throwable t) {\n+    X509Certificate currentCert = getWatcher().getLastIdentityCert();\n+    if (currentCert != null) {\n+      long delaySeconds = computeDelaySecondsToCertExpiry(currentCert);\n+      if (delaySeconds > GRACE_INTERVAL_IN_SECONDS) {\n+        logger.log(Level.FINER, \"reload certificate error\", t);\n+        return;\n+      }\n+      getWatcher().clearValues();\n+    }\n+    getWatcher().onError(Status.fromThrowable(t));\n+  }\n+\n+  @SuppressWarnings(\"JdkObsolete\")\n+  private long computeDelaySecondsToCertExpiry(X509Certificate lastCert) {\n+    checkNotNull(lastCert, \"lastCert\");\n+    return TimeUnit.NANOSECONDS.toSeconds(\n+        TimeUnit.MILLISECONDS.toNanos(lastCert.getNotAfter().getTime())\n+            - timeProvider.currentTimeNanos());\n+  }\n+\n+  @VisibleForTesting\n+  class RefreshCertificateTask implements Runnable {\n+    @Override\n+    public void run() {\n+      checkAndReloadCertificates();\n+    }\n+  }\n+\n+  private final SynchronizationContext syncContext;\n+  private final ScheduledExecutorService scheduledExecutorService;\n+  private final TimeProvider timeProvider;\n+  private final Path directory;\n+  private final String certFile;\n+  private final String privateKeyFile;\n+  private final String trustFile;\n+  private final long refreshIntervalInSeconds;\n+  @VisibleForTesting SynchronizationContext.ScheduledHandle scheduledHandle;\n+  private Path lastModifiedTarget;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b331522c7f1e6315e41b63e26f626c1ae1affdc"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDgzNDUxOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/internal/certprovider/ZatarCertificateProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzoxMDo0N1rOHh1pJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzoxMDo0N1rOHh1pJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI0Mzk0MQ==", "bodyText": "Try with resource, or let CertificateUtils close the stream (maybe introducing convenient method CertificateUtils.getPrivateKey(File file) that closes the input stream)?", "url": "https://github.com/grpc/grpc-java/pull/7493#discussion_r505243941", "createdAt": "2020-10-15T07:10:47Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/internal/certprovider/ZatarCertificateProvider.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.certprovider;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.InternalLogId;\n+import io.grpc.Status;\n+import io.grpc.SynchronizationContext;\n+import io.grpc.internal.TimeProvider;\n+import io.grpc.xds.internal.sds.trust.CertificateUtils;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.security.PrivateKey;\n+import java.security.cert.X509Certificate;\n+import java.util.Arrays;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/** Implementation of {@link CertificateProvider} for Zatar cert provider. */\n+final class ZatarCertificateProvider extends CertificateProvider {\n+  private static final Logger logger = Logger.getLogger(ZatarCertificateProvider.class.getName());\n+\n+  /**\n+   * After the previous cert has expired, if we are unable to get new certificates we will report\n+   * errors. We will start doing this a few seconds before the previous cert expiry whose value is\n+   * given by this constant.\n+   */\n+  @VisibleForTesting static final long GRACE_INTERVAL_IN_SECONDS = 4L;\n+\n+  @VisibleForTesting\n+  ZatarCertificateProvider(\n+      DistributorWatcher watcher,\n+      boolean notifyCertUpdates,\n+      String directory,\n+      String certFile,\n+      String privateKeyFile,\n+      String trustFile,\n+      long refreshIntervalInSeconds,\n+      ScheduledExecutorService scheduledExecutorService,\n+      TimeProvider timeProvider) {\n+    super(watcher, notifyCertUpdates);\n+    this.scheduledExecutorService =\n+        checkNotNull(scheduledExecutorService, \"scheduledExecutorService\");\n+    this.timeProvider = checkNotNull(timeProvider, \"timeProvider\");\n+    this.directory = Paths.get(checkNotNull(directory, \"diretory\"));\n+    this.certFile = checkNotNull(certFile, \"certFile\");\n+    this.privateKeyFile = checkNotNull(privateKeyFile, \"privateKeyFile\");\n+    this.trustFile = checkNotNull(trustFile, \"trustFile\");\n+    this.refreshIntervalInSeconds = refreshIntervalInSeconds;\n+    this.syncContext = createSynchronizationContext(directory);\n+  }\n+\n+  private SynchronizationContext createSynchronizationContext(String details) {\n+    final InternalLogId logId = InternalLogId.allocate(\"ZatarCertificateProvider\", details);\n+    return new SynchronizationContext(\n+        new Thread.UncaughtExceptionHandler() {\n+          private boolean panicMode;\n+\n+          @Override\n+          public void uncaughtException(Thread t, Throwable e) {\n+            logger.log(\n+                Level.SEVERE,\n+                \"[\" + logId + \"] Uncaught exception in the SynchronizationContext. Panic!\",\n+                e);\n+            panic(e);\n+          }\n+\n+          void panic(final Throwable t) {\n+            if (panicMode) {\n+              // Preserve the first panic information\n+              return;\n+            }\n+            panicMode = true;\n+            close();\n+          }\n+        });\n+  }\n+\n+  @Override\n+  public void start() {\n+    scheduleNextRefreshCertificate(/* delayInSeconds= */0);\n+  }\n+\n+  @Override\n+  public void close() {\n+    if (scheduledHandle != null) {\n+      scheduledHandle.cancel();\n+      scheduledHandle = null;\n+    }\n+    getWatcher().close();\n+  }\n+\n+  private void scheduleNextRefreshCertificate(long delayInSeconds) {\n+    if (scheduledHandle != null && scheduledHandle.isPending()) {\n+      logger.log(Level.SEVERE, \"Pending task found: inconsistent state in scheduledHandle!\");\n+      scheduledHandle.cancel();\n+    }\n+    RefreshCertificateTask runnable = new RefreshCertificateTask();\n+    scheduledHandle =\n+        syncContext.schedule(runnable, delayInSeconds, TimeUnit.SECONDS, scheduledExecutorService);\n+  }\n+\n+  @VisibleForTesting\n+  void checkAndReloadCertificates() {\n+    try {\n+      Path targetPath = Files.readSymbolicLink(directory);\n+      if (targetPath.equals(lastModifiedTarget)) {\n+        return;\n+      }\n+      PrivateKey privateKey =\n+          CertificateUtils.getPrivateKey(\n+              new FileInputStream(new File(targetPath.toFile(), privateKeyFile)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b331522c7f1e6315e41b63e26f626c1ae1affdc"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDkwNDE0OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/internal/certprovider/ZatarCertificateProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzoyMTozNFrOHh2YIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNjozMzozOVrOHiQaMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI1NTk2OQ==", "bodyText": "This seems generate error if current cert not expired. Maybe my understanding is wrong. Can you explain the logic here?", "url": "https://github.com/grpc/grpc-java/pull/7493#discussion_r505255969", "createdAt": "2020-10-15T07:21:34Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/internal/certprovider/ZatarCertificateProvider.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.certprovider;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.InternalLogId;\n+import io.grpc.Status;\n+import io.grpc.SynchronizationContext;\n+import io.grpc.internal.TimeProvider;\n+import io.grpc.xds.internal.sds.trust.CertificateUtils;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.security.PrivateKey;\n+import java.security.cert.X509Certificate;\n+import java.util.Arrays;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/** Implementation of {@link CertificateProvider} for Zatar cert provider. */\n+final class ZatarCertificateProvider extends CertificateProvider {\n+  private static final Logger logger = Logger.getLogger(ZatarCertificateProvider.class.getName());\n+\n+  /**\n+   * After the previous cert has expired, if we are unable to get new certificates we will report\n+   * errors. We will start doing this a few seconds before the previous cert expiry whose value is\n+   * given by this constant.\n+   */\n+  @VisibleForTesting static final long GRACE_INTERVAL_IN_SECONDS = 4L;\n+\n+  @VisibleForTesting\n+  ZatarCertificateProvider(\n+      DistributorWatcher watcher,\n+      boolean notifyCertUpdates,\n+      String directory,\n+      String certFile,\n+      String privateKeyFile,\n+      String trustFile,\n+      long refreshIntervalInSeconds,\n+      ScheduledExecutorService scheduledExecutorService,\n+      TimeProvider timeProvider) {\n+    super(watcher, notifyCertUpdates);\n+    this.scheduledExecutorService =\n+        checkNotNull(scheduledExecutorService, \"scheduledExecutorService\");\n+    this.timeProvider = checkNotNull(timeProvider, \"timeProvider\");\n+    this.directory = Paths.get(checkNotNull(directory, \"diretory\"));\n+    this.certFile = checkNotNull(certFile, \"certFile\");\n+    this.privateKeyFile = checkNotNull(privateKeyFile, \"privateKeyFile\");\n+    this.trustFile = checkNotNull(trustFile, \"trustFile\");\n+    this.refreshIntervalInSeconds = refreshIntervalInSeconds;\n+    this.syncContext = createSynchronizationContext(directory);\n+  }\n+\n+  private SynchronizationContext createSynchronizationContext(String details) {\n+    final InternalLogId logId = InternalLogId.allocate(\"ZatarCertificateProvider\", details);\n+    return new SynchronizationContext(\n+        new Thread.UncaughtExceptionHandler() {\n+          private boolean panicMode;\n+\n+          @Override\n+          public void uncaughtException(Thread t, Throwable e) {\n+            logger.log(\n+                Level.SEVERE,\n+                \"[\" + logId + \"] Uncaught exception in the SynchronizationContext. Panic!\",\n+                e);\n+            panic(e);\n+          }\n+\n+          void panic(final Throwable t) {\n+            if (panicMode) {\n+              // Preserve the first panic information\n+              return;\n+            }\n+            panicMode = true;\n+            close();\n+          }\n+        });\n+  }\n+\n+  @Override\n+  public void start() {\n+    scheduleNextRefreshCertificate(/* delayInSeconds= */0);\n+  }\n+\n+  @Override\n+  public void close() {\n+    if (scheduledHandle != null) {\n+      scheduledHandle.cancel();\n+      scheduledHandle = null;\n+    }\n+    getWatcher().close();\n+  }\n+\n+  private void scheduleNextRefreshCertificate(long delayInSeconds) {\n+    if (scheduledHandle != null && scheduledHandle.isPending()) {\n+      logger.log(Level.SEVERE, \"Pending task found: inconsistent state in scheduledHandle!\");\n+      scheduledHandle.cancel();\n+    }\n+    RefreshCertificateTask runnable = new RefreshCertificateTask();\n+    scheduledHandle =\n+        syncContext.schedule(runnable, delayInSeconds, TimeUnit.SECONDS, scheduledExecutorService);\n+  }\n+\n+  @VisibleForTesting\n+  void checkAndReloadCertificates() {\n+    try {\n+      Path targetPath = Files.readSymbolicLink(directory);\n+      if (targetPath.equals(lastModifiedTarget)) {\n+        return;\n+      }\n+      PrivateKey privateKey =\n+          CertificateUtils.getPrivateKey(\n+              new FileInputStream(new File(targetPath.toFile(), privateKeyFile)));\n+      X509Certificate[] certs =\n+          CertificateUtils.toX509Certificates(\n+              new FileInputStream(new File(targetPath.toFile(), certFile)));\n+      X509Certificate[] caCerts =\n+          CertificateUtils.toX509Certificates(\n+              new FileInputStream(new File(targetPath.toFile(), trustFile)));\n+      getWatcher().updateCertificate(privateKey, Arrays.asList(certs));\n+      getWatcher().updateTrustedRoots(Arrays.asList(caCerts));\n+      lastModifiedTarget = targetPath;\n+    } catch (Throwable t) {\n+      generateErrorIfCurrentCertExpired(t);\n+    } finally {\n+      scheduleNextRefreshCertificate(refreshIntervalInSeconds);\n+    }\n+  }\n+\n+  private void generateErrorIfCurrentCertExpired(Throwable t) {\n+    X509Certificate currentCert = getWatcher().getLastIdentityCert();\n+    if (currentCert != null) {\n+      long delaySeconds = computeDelaySecondsToCertExpiry(currentCert);\n+      if (delaySeconds > GRACE_INTERVAL_IN_SECONDS) {\n+        logger.log(Level.FINER, \"reload certificate error\", t);\n+        return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b331522c7f1e6315e41b63e26f626c1ae1affdc"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY4MjQ4Mg==", "bodyText": "Sure. As we had specified in the design doc the CertificateProvider will generate error (i.e. notify thru watcher's onError) only if there is no current valid certificate or the last certificate had expired. Here I have provided for some grace period (4 seconds) so I generate the error if the certificate is about to expire in 4 seconds (instead of only after the cert has actually expired).\nBut I can see why there is confusion. I will remove GRACE_INTERVAL_IN_SECONDS and instead just use the refreshInterval as the grace period since it is an error-worthy event if the cert is about to expire in the next 10 minutes and my last cert refresh attempt failed.", "url": "https://github.com/grpc/grpc-java/pull/7493#discussion_r505682482", "createdAt": "2020-10-15T16:33:39Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/internal/certprovider/ZatarCertificateProvider.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.certprovider;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.grpc.InternalLogId;\n+import io.grpc.Status;\n+import io.grpc.SynchronizationContext;\n+import io.grpc.internal.TimeProvider;\n+import io.grpc.xds.internal.sds.trust.CertificateUtils;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.security.PrivateKey;\n+import java.security.cert.X509Certificate;\n+import java.util.Arrays;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/** Implementation of {@link CertificateProvider} for Zatar cert provider. */\n+final class ZatarCertificateProvider extends CertificateProvider {\n+  private static final Logger logger = Logger.getLogger(ZatarCertificateProvider.class.getName());\n+\n+  /**\n+   * After the previous cert has expired, if we are unable to get new certificates we will report\n+   * errors. We will start doing this a few seconds before the previous cert expiry whose value is\n+   * given by this constant.\n+   */\n+  @VisibleForTesting static final long GRACE_INTERVAL_IN_SECONDS = 4L;\n+\n+  @VisibleForTesting\n+  ZatarCertificateProvider(\n+      DistributorWatcher watcher,\n+      boolean notifyCertUpdates,\n+      String directory,\n+      String certFile,\n+      String privateKeyFile,\n+      String trustFile,\n+      long refreshIntervalInSeconds,\n+      ScheduledExecutorService scheduledExecutorService,\n+      TimeProvider timeProvider) {\n+    super(watcher, notifyCertUpdates);\n+    this.scheduledExecutorService =\n+        checkNotNull(scheduledExecutorService, \"scheduledExecutorService\");\n+    this.timeProvider = checkNotNull(timeProvider, \"timeProvider\");\n+    this.directory = Paths.get(checkNotNull(directory, \"diretory\"));\n+    this.certFile = checkNotNull(certFile, \"certFile\");\n+    this.privateKeyFile = checkNotNull(privateKeyFile, \"privateKeyFile\");\n+    this.trustFile = checkNotNull(trustFile, \"trustFile\");\n+    this.refreshIntervalInSeconds = refreshIntervalInSeconds;\n+    this.syncContext = createSynchronizationContext(directory);\n+  }\n+\n+  private SynchronizationContext createSynchronizationContext(String details) {\n+    final InternalLogId logId = InternalLogId.allocate(\"ZatarCertificateProvider\", details);\n+    return new SynchronizationContext(\n+        new Thread.UncaughtExceptionHandler() {\n+          private boolean panicMode;\n+\n+          @Override\n+          public void uncaughtException(Thread t, Throwable e) {\n+            logger.log(\n+                Level.SEVERE,\n+                \"[\" + logId + \"] Uncaught exception in the SynchronizationContext. Panic!\",\n+                e);\n+            panic(e);\n+          }\n+\n+          void panic(final Throwable t) {\n+            if (panicMode) {\n+              // Preserve the first panic information\n+              return;\n+            }\n+            panicMode = true;\n+            close();\n+          }\n+        });\n+  }\n+\n+  @Override\n+  public void start() {\n+    scheduleNextRefreshCertificate(/* delayInSeconds= */0);\n+  }\n+\n+  @Override\n+  public void close() {\n+    if (scheduledHandle != null) {\n+      scheduledHandle.cancel();\n+      scheduledHandle = null;\n+    }\n+    getWatcher().close();\n+  }\n+\n+  private void scheduleNextRefreshCertificate(long delayInSeconds) {\n+    if (scheduledHandle != null && scheduledHandle.isPending()) {\n+      logger.log(Level.SEVERE, \"Pending task found: inconsistent state in scheduledHandle!\");\n+      scheduledHandle.cancel();\n+    }\n+    RefreshCertificateTask runnable = new RefreshCertificateTask();\n+    scheduledHandle =\n+        syncContext.schedule(runnable, delayInSeconds, TimeUnit.SECONDS, scheduledExecutorService);\n+  }\n+\n+  @VisibleForTesting\n+  void checkAndReloadCertificates() {\n+    try {\n+      Path targetPath = Files.readSymbolicLink(directory);\n+      if (targetPath.equals(lastModifiedTarget)) {\n+        return;\n+      }\n+      PrivateKey privateKey =\n+          CertificateUtils.getPrivateKey(\n+              new FileInputStream(new File(targetPath.toFile(), privateKeyFile)));\n+      X509Certificate[] certs =\n+          CertificateUtils.toX509Certificates(\n+              new FileInputStream(new File(targetPath.toFile(), certFile)));\n+      X509Certificate[] caCerts =\n+          CertificateUtils.toX509Certificates(\n+              new FileInputStream(new File(targetPath.toFile(), trustFile)));\n+      getWatcher().updateCertificate(privateKey, Arrays.asList(certs));\n+      getWatcher().updateTrustedRoots(Arrays.asList(caCerts));\n+      lastModifiedTarget = targetPath;\n+    } catch (Throwable t) {\n+      generateErrorIfCurrentCertExpired(t);\n+    } finally {\n+      scheduleNextRefreshCertificate(refreshIntervalInSeconds);\n+    }\n+  }\n+\n+  private void generateErrorIfCurrentCertExpired(Throwable t) {\n+    X509Certificate currentCert = getWatcher().getLastIdentityCert();\n+    if (currentCert != null) {\n+      long delaySeconds = computeDelaySecondsToCertExpiry(currentCert);\n+      if (delaySeconds > GRACE_INTERVAL_IN_SECONDS) {\n+        logger.log(Level.FINER, \"reload certificate error\", t);\n+        return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI1NTk2OQ=="}, "originalCommit": {"oid": "7b331522c7f1e6315e41b63e26f626c1ae1affdc"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDkxOTg2OnYy", "diffSide": "RIGHT", "path": "xds/src/test/java/io/grpc/xds/internal/certprovider/ZatarCertificateProviderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzoyNDowNVrOHh2itg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzoyNDowNVrOHh2itg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI1ODY3OA==", "bodyText": "Not used?", "url": "https://github.com/grpc/grpc-java/pull/7493#discussion_r505258678", "createdAt": "2020-10-15T07:24:05Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/test/java/io/grpc/xds/internal/certprovider/ZatarCertificateProviderTest.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds.internal.certprovider;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static io.grpc.xds.internal.sds.CommonTlsContextTestsUtil.CA_PEM_FILE;\n+import static io.grpc.xds.internal.sds.CommonTlsContextTestsUtil.CLIENT_KEY_FILE;\n+import static io.grpc.xds.internal.sds.CommonTlsContextTestsUtil.CLIENT_PEM_FILE;\n+import static io.grpc.xds.internal.sds.CommonTlsContextTestsUtil.SERVER_0_KEY_FILE;\n+import static io.grpc.xds.internal.sds.CommonTlsContextTestsUtil.SERVER_0_PEM_FILE;\n+import static io.grpc.xds.internal.sds.CommonTlsContextTestsUtil.SERVER_1_PEM_FILE;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.reset;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import io.grpc.Status;\n+import io.grpc.internal.TimeProvider;\n+import io.grpc.testing.GrpcCleanupRule;\n+import io.grpc.xds.internal.certprovider.CertificateProvider.DistributorWatcher;\n+import io.grpc.xds.internal.sds.CommonTlsContextTestsUtil;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.NoSuchFileException;\n+import java.nio.file.Paths;\n+import java.security.PrivateKey;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n+import java.util.List;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+\n+/** Unit tests for {@link ZatarCertificateProvider}. */\n+@RunWith(JUnit4.class)\n+public class ZatarCertificateProviderTest {\n+  private static final String CERT_FILE = \"cert.pem\";\n+  private static final String KEY_FILE = \"key.pem\";\n+  private static final String ROOT_FILE = \"root.pem\";\n+\n+  @Rule\n+  public final GrpcCleanupRule cleanupRule = new GrpcCleanupRule();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b331522c7f1e6315e41b63e26f626c1ae1affdc"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2379, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}