{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2NzQyNDU4", "number": 7664, "title": "example-xds: Mirror helloworld and hostname example", "bodyText": "--secure was moved to front since many languages need flags to precede\npositional parameters, and we'd like other languages to use the same\nflags when feasible.\n:8000 was removed from xds: target in the README, as it isn't all that\nuseful and is confusing as xDS itself provides the backend port numbers.", "createdAt": "2020-11-24T20:18:23Z", "url": "https://github.com/grpc/grpc-java/pull/7664", "merged": true, "mergeCommit": {"oid": "0be12b40c3ad8e45993ac1109666292918bdefe2"}, "closed": true, "closedAt": "2020-11-25T19:12:13Z", "author": {"login": "ejona86"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdfvmVlAH2gAyNTI2NzQyNDU4OjQ3MThjYTY0OTcyYWRiYjQzZTBmYWQ5ZWE1ZDk4NzgwMTM2MzM3YTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdgDHc8AFqTUzODc3NzE5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4718ca64972adbb43e0fad9ea5d98780136337a2", "author": {"user": {"login": "ejona86", "name": "Eric Anderson"}}, "url": "https://github.com/grpc/grpc-java/commit/4718ca64972adbb43e0fad9ea5d98780136337a2", "committedDate": "2020-11-24T20:16:18Z", "message": "example-xds: Mirror helloworld and hostname example\n\n--secure was moved to front since many languages need flags to precede\npositional parameters, and we'd like other languages to use the same\nflags when feasible.\n\n:8000 was removed from xds: target in the README, as it isn't all that\nuseful and is confusing as xDS itself provides the backend port numbers."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78a5782c9f56de7ed3adc68944afdc8cacebb582", "author": {"user": {"login": "ejona86", "name": "Eric Anderson"}}, "url": "https://github.com/grpc/grpc-java/commit/78a5782c9f56de7ed3adc68944afdc8cacebb582", "committedDate": "2020-11-24T20:16:18Z", "message": "example-xds: Prefix class names with Xds, instead of suffix\n\nThis aligns with normal naming practice."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NzE5NjQ3", "url": "https://github.com/grpc/grpc-java/pull/7664#pullrequestreview-538719647", "createdAt": "2020-11-25T17:31:41Z", "commit": {"oid": "78a5782c9f56de7ed3adc68944afdc8cacebb582"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzozMTo0MVrOH59olA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzozMTo0MVrOH59olA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU0MDY5Mg==", "bodyText": "I am okay with --secure but I thought you wanted to change it to something more appropriate (because of the fallback to plaintext)", "url": "https://github.com/grpc/grpc-java/pull/7664#discussion_r530540692", "createdAt": "2020-11-25T17:31:41Z", "author": {"login": "sanjaypujare"}, "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/XdsHelloWorldClient.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.Channel;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.Grpc;\n+import io.grpc.InsecureChannelCredentials;\n+import io.grpc.ManagedChannel;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.xds.XdsChannelCredentials;\n+import java.util.Arrays;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * A simple xDS client that requests a greeting from {@code HelloWorldServer} or {@link\n+ * XdsHelloWorldServer}.\n+ */\n+public class XdsHelloWorldClient {\n+  private static final Logger logger = Logger.getLogger(XdsHelloWorldClient.class.getName());\n+\n+  private final GreeterGrpc.GreeterBlockingStub blockingStub;\n+\n+  /** Construct client for accessing HelloWorld server using the existing channel. */\n+  public XdsHelloWorldClient(Channel channel) {\n+    blockingStub = GreeterGrpc.newBlockingStub(channel);\n+  }\n+\n+  /** Say hello to server. */\n+  public void greet(String name) {\n+    logger.info(\"Will try to greet \" + name + \" ...\");\n+    HelloRequest request = HelloRequest.newBuilder().setName(name).build();\n+    HelloReply response;\n+    try {\n+      response = blockingStub.sayHello(request);\n+    } catch (StatusRuntimeException e) {\n+      logger.log(Level.WARNING, \"RPC failed: {0}\", e.getStatus());\n+      return;\n+    }\n+    logger.info(\"Greeting: \" + response.getMessage());\n+  }\n+\n+  /**\n+   * Greet server. If provided, the first element of {@code args} is the name to use in the\n+   * greeting. The second argument is the target server. A {@code --secure} flag is also accepted.\n+   */\n+  public static void main(String[] args) throws Exception {\n+    String user = \"xds world\";\n+    // The example defaults to the same behavior as the hello world example. To enable xDS, pass an\n+    // \"xds:\"-prefixed string as the target.\n+    String target = \"localhost:50051\";\n+    ChannelCredentials credentials = InsecureChannelCredentials.create();\n+    if (args.length > 0) {\n+      if (\"--help\".equals(args[0])) {\n+        System.out.println(\"Usage: [--secure] [NAME [TARGET]]\\n\");\n+        System.err.println(\"  --secure  Use credentials provided by xDS. Defaults to insecure\");\n+        System.err.println(\"  NAME      The name you wish to be greeted by. Defaults to \" + user);\n+        System.err.println(\"  TARGET    The server to connect to. Defaults to \" + target);\n+        System.exit(1);\n+      } else if (\"--secure\".equals(args[0])) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78a5782c9f56de7ed3adc68944afdc8cacebb582"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NzI2NDM1", "url": "https://github.com/grpc/grpc-java/pull/7664#pullrequestreview-538726435", "createdAt": "2020-11-25T17:41:07Z", "commit": {"oid": "78a5782c9f56de7ed3adc68944afdc8cacebb582"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzo0MTowN1rOH599nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzo0MTowN1rOH599nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU0NjA3OQ==", "bodyText": "Is this a good default for this example? When --secure is used and target is omitted, the --secure flag has no meaning. Also when the target doesn't start with xds:/// also the flag has no meaning.", "url": "https://github.com/grpc/grpc-java/pull/7664#discussion_r530546079", "createdAt": "2020-11-25T17:41:07Z", "author": {"login": "sanjaypujare"}, "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/XdsHelloWorldClient.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.Channel;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.Grpc;\n+import io.grpc.InsecureChannelCredentials;\n+import io.grpc.ManagedChannel;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.xds.XdsChannelCredentials;\n+import java.util.Arrays;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * A simple xDS client that requests a greeting from {@code HelloWorldServer} or {@link\n+ * XdsHelloWorldServer}.\n+ */\n+public class XdsHelloWorldClient {\n+  private static final Logger logger = Logger.getLogger(XdsHelloWorldClient.class.getName());\n+\n+  private final GreeterGrpc.GreeterBlockingStub blockingStub;\n+\n+  /** Construct client for accessing HelloWorld server using the existing channel. */\n+  public XdsHelloWorldClient(Channel channel) {\n+    blockingStub = GreeterGrpc.newBlockingStub(channel);\n+  }\n+\n+  /** Say hello to server. */\n+  public void greet(String name) {\n+    logger.info(\"Will try to greet \" + name + \" ...\");\n+    HelloRequest request = HelloRequest.newBuilder().setName(name).build();\n+    HelloReply response;\n+    try {\n+      response = blockingStub.sayHello(request);\n+    } catch (StatusRuntimeException e) {\n+      logger.log(Level.WARNING, \"RPC failed: {0}\", e.getStatus());\n+      return;\n+    }\n+    logger.info(\"Greeting: \" + response.getMessage());\n+  }\n+\n+  /**\n+   * Greet server. If provided, the first element of {@code args} is the name to use in the\n+   * greeting. The second argument is the target server. A {@code --secure} flag is also accepted.\n+   */\n+  public static void main(String[] args) throws Exception {\n+    String user = \"xds world\";\n+    // The example defaults to the same behavior as the hello world example. To enable xDS, pass an\n+    // \"xds:\"-prefixed string as the target.\n+    String target = \"localhost:50051\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78a5782c9f56de7ed3adc68944afdc8cacebb582"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NzI5MTYx", "url": "https://github.com/grpc/grpc-java/pull/7664#pullrequestreview-538729161", "createdAt": "2020-11-25T17:44:58Z", "commit": {"oid": "78a5782c9f56de7ed3adc68944afdc8cacebb582"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzo0NDo1OVrOH5-GJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzo0NDo1OVrOH5-GJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU0ODI2MQ==", "bodyText": "nit: this can also be\ncredentials = XdsChannelCredentials.create(credentials);\n\nto reuse the previous InsecureChannelCredentials instance and may be more expressive?", "url": "https://github.com/grpc/grpc-java/pull/7664#discussion_r530548261", "createdAt": "2020-11-25T17:44:59Z", "author": {"login": "sanjaypujare"}, "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/XdsHelloWorldClient.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.Channel;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.Grpc;\n+import io.grpc.InsecureChannelCredentials;\n+import io.grpc.ManagedChannel;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.xds.XdsChannelCredentials;\n+import java.util.Arrays;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * A simple xDS client that requests a greeting from {@code HelloWorldServer} or {@link\n+ * XdsHelloWorldServer}.\n+ */\n+public class XdsHelloWorldClient {\n+  private static final Logger logger = Logger.getLogger(XdsHelloWorldClient.class.getName());\n+\n+  private final GreeterGrpc.GreeterBlockingStub blockingStub;\n+\n+  /** Construct client for accessing HelloWorld server using the existing channel. */\n+  public XdsHelloWorldClient(Channel channel) {\n+    blockingStub = GreeterGrpc.newBlockingStub(channel);\n+  }\n+\n+  /** Say hello to server. */\n+  public void greet(String name) {\n+    logger.info(\"Will try to greet \" + name + \" ...\");\n+    HelloRequest request = HelloRequest.newBuilder().setName(name).build();\n+    HelloReply response;\n+    try {\n+      response = blockingStub.sayHello(request);\n+    } catch (StatusRuntimeException e) {\n+      logger.log(Level.WARNING, \"RPC failed: {0}\", e.getStatus());\n+      return;\n+    }\n+    logger.info(\"Greeting: \" + response.getMessage());\n+  }\n+\n+  /**\n+   * Greet server. If provided, the first element of {@code args} is the name to use in the\n+   * greeting. The second argument is the target server. A {@code --secure} flag is also accepted.\n+   */\n+  public static void main(String[] args) throws Exception {\n+    String user = \"xds world\";\n+    // The example defaults to the same behavior as the hello world example. To enable xDS, pass an\n+    // \"xds:\"-prefixed string as the target.\n+    String target = \"localhost:50051\";\n+    ChannelCredentials credentials = InsecureChannelCredentials.create();\n+    if (args.length > 0) {\n+      if (\"--help\".equals(args[0])) {\n+        System.out.println(\"Usage: [--secure] [NAME [TARGET]]\\n\");\n+        System.err.println(\"  --secure  Use credentials provided by xDS. Defaults to insecure\");\n+        System.err.println(\"  NAME      The name you wish to be greeted by. Defaults to \" + user);\n+        System.err.println(\"  TARGET    The server to connect to. Defaults to \" + target);\n+        System.exit(1);\n+      } else if (\"--secure\".equals(args[0])) {\n+        // The xDS credentials use the security configured by the xDS server when available. When\n+        // xDS is not used or when xDS does not provide security configuration, the xDS credentials\n+        // fall back to other credentials (in this case, InsecureChannelCredentials).\n+        credentials = XdsChannelCredentials.create(InsecureChannelCredentials.create());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78a5782c9f56de7ed3adc68944afdc8cacebb582"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NzQ0MTQ0", "url": "https://github.com/grpc/grpc-java/pull/7664#pullrequestreview-538744144", "createdAt": "2020-11-25T18:07:06Z", "commit": {"oid": "78a5782c9f56de7ed3adc68944afdc8cacebb582"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxODowNzowNlrOH5-1Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxODowNzowNlrOH5-1Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU2MDMwNw==", "bodyText": "Would you consider an enhancement to do this in a loop, so the client creates one channel but sends multiple RPCs on it? Could be useful in the xDS case with multiple backends etc. The loop count could be another argument.\nIt doesn't have to be in this PR but may be in future.", "url": "https://github.com/grpc/grpc-java/pull/7664#discussion_r530560307", "createdAt": "2020-11-25T18:07:06Z", "author": {"login": "sanjaypujare"}, "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/XdsHelloWorldClient.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.Channel;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.Grpc;\n+import io.grpc.InsecureChannelCredentials;\n+import io.grpc.ManagedChannel;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+import io.grpc.xds.XdsChannelCredentials;\n+import java.util.Arrays;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * A simple xDS client that requests a greeting from {@code HelloWorldServer} or {@link\n+ * XdsHelloWorldServer}.\n+ */\n+public class XdsHelloWorldClient {\n+  private static final Logger logger = Logger.getLogger(XdsHelloWorldClient.class.getName());\n+\n+  private final GreeterGrpc.GreeterBlockingStub blockingStub;\n+\n+  /** Construct client for accessing HelloWorld server using the existing channel. */\n+  public XdsHelloWorldClient(Channel channel) {\n+    blockingStub = GreeterGrpc.newBlockingStub(channel);\n+  }\n+\n+  /** Say hello to server. */\n+  public void greet(String name) {\n+    logger.info(\"Will try to greet \" + name + \" ...\");\n+    HelloRequest request = HelloRequest.newBuilder().setName(name).build();\n+    HelloReply response;\n+    try {\n+      response = blockingStub.sayHello(request);\n+    } catch (StatusRuntimeException e) {\n+      logger.log(Level.WARNING, \"RPC failed: {0}\", e.getStatus());\n+      return;\n+    }\n+    logger.info(\"Greeting: \" + response.getMessage());\n+  }\n+\n+  /**\n+   * Greet server. If provided, the first element of {@code args} is the name to use in the\n+   * greeting. The second argument is the target server. A {@code --secure} flag is also accepted.\n+   */\n+  public static void main(String[] args) throws Exception {\n+    String user = \"xds world\";\n+    // The example defaults to the same behavior as the hello world example. To enable xDS, pass an\n+    // \"xds:\"-prefixed string as the target.\n+    String target = \"localhost:50051\";\n+    ChannelCredentials credentials = InsecureChannelCredentials.create();\n+    if (args.length > 0) {\n+      if (\"--help\".equals(args[0])) {\n+        System.out.println(\"Usage: [--secure] [NAME [TARGET]]\\n\");\n+        System.err.println(\"  --secure  Use credentials provided by xDS. Defaults to insecure\");\n+        System.err.println(\"  NAME      The name you wish to be greeted by. Defaults to \" + user);\n+        System.err.println(\"  TARGET    The server to connect to. Defaults to \" + target);\n+        System.exit(1);\n+      } else if (\"--secure\".equals(args[0])) {\n+        // The xDS credentials use the security configured by the xDS server when available. When\n+        // xDS is not used or when xDS does not provide security configuration, the xDS credentials\n+        // fall back to other credentials (in this case, InsecureChannelCredentials).\n+        credentials = XdsChannelCredentials.create(InsecureChannelCredentials.create());\n+        args = Arrays.copyOfRange(args, 1, args.length);\n+      }\n+    }\n+    if (args.length > 0) {\n+      user = args[0];\n+    }\n+    if (args.length > 1) {\n+      target = args[1];\n+    }\n+\n+    // This uses the new ChannelCredentials API. Grpc.newChannelBuilder() is the same as\n+    // ManagedChannelBuilder.forTarget(), except that it is passed credentials. When using this API,\n+    // you don't use methods like `managedChannelBuilder.usePlaintext()`, as that configuration is\n+    // provided by the ChannelCredentials.\n+    ManagedChannel channel = Grpc.newChannelBuilder(target, credentials)\n+        .build();\n+    try {\n+      XdsHelloWorldClient client = new XdsHelloWorldClient(channel);\n+      client.greet(user);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78a5782c9f56de7ed3adc68944afdc8cacebb582"}, "originalPosition": 102}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NzU5MDYy", "url": "https://github.com/grpc/grpc-java/pull/7664#pullrequestreview-538759062", "createdAt": "2020-11-25T18:30:32Z", "commit": {"oid": "78a5782c9f56de7ed3adc68944afdc8cacebb582"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxODozMDozMlrOH5_i7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxODozMDozMlrOH5_i7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU3MjAxNA==", "bodyText": "Do we have to use XdsServerBuilder here? Without xDS configuration for this server/port the server won't start.", "url": "https://github.com/grpc/grpc-java/pull/7664#discussion_r530572014", "createdAt": "2020-11-25T18:30:32Z", "author": {"login": "sanjaypujare"}, "path": "examples/example-xds/src/main/java/io/grpc/examples/helloworldxds/XdsHelloWorldServer.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.examples.helloworldxds;\n+\n+import io.grpc.InsecureServerCredentials;\n+import io.grpc.Server;\n+import io.grpc.ServerCredentials;\n+import io.grpc.health.v1.HealthCheckResponse.ServingStatus;\n+import io.grpc.protobuf.services.ProtoReflectionService;\n+import io.grpc.services.HealthStatusManager;\n+import io.grpc.xds.XdsServerBuilder;\n+import io.grpc.xds.XdsServerCredentials;\n+import java.util.Arrays;\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * An xDS-managed Server for the {@code Greeter} service.\n+ */\n+public class XdsHelloWorldServer {\n+  public static void main(String[] args) throws IOException, InterruptedException {\n+    int port = 50051;\n+    String hostname = null;\n+    ServerCredentials credentials = InsecureServerCredentials.create();\n+    if (args.length >= 1 && \"--secure\".equals(args[0])) {\n+      // The xDS credentials use the security configured by the xDS server when available. When xDS\n+      // is not used or when xDS does not provide security configuration, the xDS credentials fall\n+      // back to other credentials (in this case, InsecureServerCredentials).\n+      credentials = XdsServerCredentials.create(InsecureServerCredentials.create());\n+      args = Arrays.copyOfRange(args, 1, args.length);\n+    }\n+    if (args.length >= 1) {\n+      try {\n+        port = Integer.parseInt(args[0]);\n+      } catch (NumberFormatException ex) {\n+        System.err.println(\"Usage: [--secure] [PORT [HOSTNAME]]\");\n+        System.err.println(\"\");\n+        System.err.println(\"  --secure  Use credentials provided by xDS. Defaults to insecure\");\n+        System.err.println(\"  PORT      The listen port. Defaults to \" + port);\n+        System.err.println(\"  HOSTNAME  The name clients will see in greet responses. \");\n+        System.err.println(\"            Defaults to the machine's hostname\");\n+        System.exit(1);\n+      }\n+    }\n+    if (args.length >= 2) {\n+      hostname = args[1];\n+    }\n+    // Since the main server may be using TLS, we start a second server just for plaintext health\n+    // checks\n+    int healthPort = port + 1;\n+    final HealthStatusManager health = new HealthStatusManager();\n+    final Server server = XdsServerBuilder.forPort(port, credentials)\n+        .addService(new HostnameGreeter(hostname))\n+        .addService(ProtoReflectionService.newInstance()) // convenient for command line tools\n+        .addService(health.getHealthService()) // allow management servers to monitor health\n+        .build()\n+        .start();\n+    final Server healthServer =\n+        XdsServerBuilder.forPort(healthPort, InsecureServerCredentials.create())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78a5782c9f56de7ed3adc68944afdc8cacebb582"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4Nzc3MTk1", "url": "https://github.com/grpc/grpc-java/pull/7664#pullrequestreview-538777195", "createdAt": "2020-11-25T19:00:41Z", "commit": {"oid": "78a5782c9f56de7ed3adc68944afdc8cacebb582"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4015, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}