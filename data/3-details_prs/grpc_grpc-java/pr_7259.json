{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MDk4NTI1", "number": 7259, "title": "core: use DelayedClientCall for awaiting configSelector in ManangedChannelImpl", "bodyText": "ManagedChannelImpl.newCall() will return a DelayedClientCall until the name resolver updates the configSelector reference.\nThe configSelector follows the same service config error handling rules.\nI made the following assumption:\nIf there is no service config in resolution result, then there must be no config selector in the resolution result. Actually I ignore any config selector in the resolution result if there is no service config.", "createdAt": "2020-07-28T22:50:27Z", "url": "https://github.com/grpc/grpc-java/pull/7259", "merged": true, "mergeCommit": {"oid": "50d8be70b05af6fae1d9556bdf26e4292db2de20"}, "closed": true, "closedAt": "2020-08-21T19:44:15Z", "author": {"login": "dapengzhang0"}, "timelineItems": {"totalCount": 42, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5ekwgABqjM1OTY1NzQyNjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdBIt6egFqTQ3MjY4NTgwNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5a7864e73e6725bfa1d3a6e9375ee563145279ef", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/5a7864e73e6725bfa1d3a6e9375ee563145279ef", "committedDate": "2020-07-28T22:48:52Z", "message": "core: add DelayedClientCall waiting for configSelector"}, "afterCommit": {"oid": "5136d919171d3877be8e3bd7ed6e1a1e68115b9a", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/5136d919171d3877be8e3bd7ed6e1a1e68115b9a", "committedDate": "2020-07-28T22:56:18Z", "message": "core: add DelayedClientCall waiting for configSelector"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5136d919171d3877be8e3bd7ed6e1a1e68115b9a", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/5136d919171d3877be8e3bd7ed6e1a1e68115b9a", "committedDate": "2020-07-28T22:56:18Z", "message": "core: add DelayedClientCall waiting for configSelector"}, "afterCommit": {"oid": "b4d9da475dd304c445fe4eea48de6a27fde6669e", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/b4d9da475dd304c445fe4eea48de6a27fde6669e", "committedDate": "2020-07-28T23:00:45Z", "message": "core: add DelayedClientCall waiting for configSelector"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b4d9da475dd304c445fe4eea48de6a27fde6669e", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/b4d9da475dd304c445fe4eea48de6a27fde6669e", "committedDate": "2020-07-28T23:00:45Z", "message": "core: add DelayedClientCall waiting for configSelector"}, "afterCommit": {"oid": "f5d2668ed86564a5cb004c6fcdbce66c60dc4609", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/f5d2668ed86564a5cb004c6fcdbce66c60dc4609", "committedDate": "2020-07-28T23:18:47Z", "message": "core: add DelayedClientCall waiting for configSelector"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f5d2668ed86564a5cb004c6fcdbce66c60dc4609", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/f5d2668ed86564a5cb004c6fcdbce66c60dc4609", "committedDate": "2020-07-28T23:18:47Z", "message": "core: add DelayedClientCall waiting for configSelector"}, "afterCommit": {"oid": "36c5605e40ee3a4937339f83baa46a19fe1729da", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/36c5605e40ee3a4937339f83baa46a19fe1729da", "committedDate": "2020-07-29T00:19:29Z", "message": "core: add DelayedClientCall waiting for configSelector"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "36c5605e40ee3a4937339f83baa46a19fe1729da", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/36c5605e40ee3a4937339f83baa46a19fe1729da", "committedDate": "2020-07-29T00:19:29Z", "message": "core: add DelayedClientCall waiting for configSelector"}, "afterCommit": {"oid": "968966731944a11d9d3df35f56c3de0ffaca77db", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/968966731944a11d9d3df35f56c3de0ffaca77db", "committedDate": "2020-07-29T02:08:22Z", "message": "core: add DelayedClientCall waiting for configSelector"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "968966731944a11d9d3df35f56c3de0ffaca77db", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/968966731944a11d9d3df35f56c3de0ffaca77db", "committedDate": "2020-07-29T02:08:22Z", "message": "core: add DelayedClientCall waiting for configSelector"}, "afterCommit": {"oid": "42841da9aaf78ad91d0cd45e9f90ea71151511d7", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/42841da9aaf78ad91d0cd45e9f90ea71151511d7", "committedDate": "2020-07-29T04:31:11Z", "message": "core: add DelayedClientCall waiting for configSelector"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "42841da9aaf78ad91d0cd45e9f90ea71151511d7", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/42841da9aaf78ad91d0cd45e9f90ea71151511d7", "committedDate": "2020-07-29T04:31:11Z", "message": "core: add DelayedClientCall waiting for configSelector"}, "afterCommit": {"oid": "611b3dd3e38015a392e92b7d83c6222f7ef304b1", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/611b3dd3e38015a392e92b7d83c6222f7ef304b1", "committedDate": "2020-07-29T05:15:23Z", "message": "core: add DelayedClientCall waiting for configSelector"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "611b3dd3e38015a392e92b7d83c6222f7ef304b1", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/611b3dd3e38015a392e92b7d83c6222f7ef304b1", "committedDate": "2020-07-29T05:15:23Z", "message": "core: add DelayedClientCall waiting for configSelector"}, "afterCommit": {"oid": "de3a3f494fe74503ff29384fb32af0cec4fa93dd", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/de3a3f494fe74503ff29384fb32af0cec4fa93dd", "committedDate": "2020-07-29T05:30:19Z", "message": "core: add DelayedClientCall waiting for configSelector"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "de3a3f494fe74503ff29384fb32af0cec4fa93dd", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/de3a3f494fe74503ff29384fb32af0cec4fa93dd", "committedDate": "2020-07-29T05:30:19Z", "message": "core: add DelayedClientCall waiting for configSelector"}, "afterCommit": {"oid": "3c89c168d19485482d8b3fd3807a8adb0e22efcb", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/3c89c168d19485482d8b3fd3807a8adb0e22efcb", "committedDate": "2020-07-29T17:12:57Z", "message": "core: add DelayedClientCall waiting for configSelector"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3c89c168d19485482d8b3fd3807a8adb0e22efcb", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/3c89c168d19485482d8b3fd3807a8adb0e22efcb", "committedDate": "2020-07-29T17:12:57Z", "message": "core: add DelayedClientCall waiting for configSelector"}, "afterCommit": {"oid": "212a4825d4ab97eba9334a7b824fde6bdf361fec", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/212a4825d4ab97eba9334a7b824fde6bdf361fec", "committedDate": "2020-07-29T18:57:10Z", "message": "core: add DelayedClientCall waiting for configSelector"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "212a4825d4ab97eba9334a7b824fde6bdf361fec", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/212a4825d4ab97eba9334a7b824fde6bdf361fec", "committedDate": "2020-07-29T18:57:10Z", "message": "core: add DelayedClientCall waiting for configSelector"}, "afterCommit": {"oid": "564c37e1d44c0835bbc3c0f47823fde20e754463", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/564c37e1d44c0835bbc3c0f47823fde20e754463", "committedDate": "2020-08-05T00:04:04Z", "message": "core: use DelayedClientCall for awaiting configSelector in ManangedChannelImpl"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "564c37e1d44c0835bbc3c0f47823fde20e754463", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/564c37e1d44c0835bbc3c0f47823fde20e754463", "committedDate": "2020-08-05T00:04:04Z", "message": "core: use DelayedClientCall for awaiting configSelector in ManangedChannelImpl"}, "afterCommit": {"oid": "de3ac370b898b59372b621d49b32f4e08b5d85fe", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/de3ac370b898b59372b621d49b32f4e08b5d85fe", "committedDate": "2020-08-05T17:25:24Z", "message": "core: use DelayedClientCall for awaiting configSelector in ManangedChannelImpl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed8dae3bff8788c2ca94d30e835dc42b93d843e6", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/ed8dae3bff8788c2ca94d30e835dc42b93d843e6", "committedDate": "2020-08-05T20:23:44Z", "message": "core: use DelayedClientCall for awaiting configSelector in ManangedChannelImpl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17a301e8daabc08d1965fd9899589661c82444d6", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/17a301e8daabc08d1965fd9899589661c82444d6", "committedDate": "2020-08-05T20:49:09Z", "message": "add tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "de3ac370b898b59372b621d49b32f4e08b5d85fe", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/de3ac370b898b59372b621d49b32f4e08b5d85fe", "committedDate": "2020-08-05T17:25:24Z", "message": "core: use DelayedClientCall for awaiting configSelector in ManangedChannelImpl"}, "afterCommit": {"oid": "17a301e8daabc08d1965fd9899589661c82444d6", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/17a301e8daabc08d1965fd9899589661c82444d6", "committedDate": "2020-08-05T20:49:09Z", "message": "add tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMTUwOTky", "url": "https://github.com/grpc/grpc-java/pull/7259#pullrequestreview-462150992", "createdAt": "2020-08-06T02:49:13Z", "commit": {"oid": "17a301e8daabc08d1965fd9899589661c82444d6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMjo0OToxM1rOG8hWNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMjo0OToxM1rOG8hWNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjExNDEwMw==", "bodyText": "Is it better to offload this to the executor?\nfinal List<Runnable> runnables = pendingCalls;\npendingCalls = null;\nexecutor.execute(()-> {\n    for (Runnable pendingCall : runnables) {\n      pendingCall.run();\n    }});", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r466114103", "createdAt": "2020-08-06T02:49:13Z", "author": {"login": "dapengzhang0"}, "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "diffHunk": "@@ -1511,6 +1588,15 @@ private void handleErrorInSyncContext(Status error) {\n       scheduleExponentialBackOffInSyncContext();\n     }\n \n+    private void drainPendingCalls() {\n+      if (pendingCalls != null) {\n+        for (Runnable pendingCall : pendingCalls) {\n+          pendingCall.run();\n+        }\n+        pendingCalls = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17a301e8daabc08d1965fd9899589661c82444d6"}, "originalPosition": 232}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNzI2MzQ0", "url": "https://github.com/grpc/grpc-java/pull/7259#pullrequestreview-462726344", "createdAt": "2020-08-06T17:21:52Z", "commit": {"oid": "17a301e8daabc08d1965fd9899589661c82444d6"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNzoyMTo1MlrOG89BpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxOToyNzozN1rOG9la3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU2NzU4OQ==", "bodyText": "nit: get rid of the else and just reduce the indentation of the rest of this method's code?", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r466567589", "createdAt": "2020-08-06T17:21:52Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "diffHunk": "@@ -889,18 +907,39 @@ private RealChannel(String authority) {\n     }\n \n     @Override\n-    public <ReqT, RespT> ClientCall<ReqT, RespT> newCall(MethodDescriptor<ReqT, RespT> method,\n-        CallOptions callOptions) {\n-      return new ClientCallImpl<>(\n-          method,\n-          getCallExecutor(callOptions),\n-          callOptions,\n-          transportProvider,\n-          terminated ? null : transportFactory.getScheduledExecutorService(),\n-          channelCallTracer)\n-          .setFullStreamDecompression(fullStreamDecompression)\n-          .setDecompressorRegistry(decompressorRegistry)\n-          .setCompressorRegistry(compressorRegistry);\n+    public <ReqT, RespT> ClientCall<ReqT, RespT> newCall(\n+        final MethodDescriptor<ReqT, RespT> method, final CallOptions callOptions) {\n+      if (configSelector.get() != INITIAL_PENDING_SELECTOR) {\n+        return newClientCall(method, callOptions);\n+      } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17a301e8daabc08d1965fd9899589661c82444d6"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU2ODc2OA==", "bodyText": "I don't think the OobChannel should have any service config. It certainly wouldn't share the service config with the parent, right, since it is to some other random server?", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r466568768", "createdAt": "2020-08-06T17:23:14Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "diffHunk": "@@ -1204,7 +1258,8 @@ public ManagedChannel createOobChannel(EquivalentAddressGroup addressGroup, Stri\n               \"OobChannel for \" + addressGroup);\n       final OobChannel oobChannel = new OobChannel(\n           authority, balancerRpcExecutorPool, transportFactory.getScheduledExecutorService(),\n-          syncContext, callTracerFactory.create(), oobChannelTracer, channelz, timeProvider);\n+          syncContext, callTracerFactory.create(), oobChannelTracer, channelz, timeProvider,\n+          configSelector);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17a301e8daabc08d1965fd9899589661c82444d6"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE0NzUzMA==", "bodyText": "I don't think we should log at info level. This could be FINE, but we should not log at a default log level when everything is fine, and even when something is broken we try hard not to log.", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r467147530", "createdAt": "2020-08-07T16:34:53Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "diffHunk": "@@ -1408,13 +1465,21 @@ public void run() {\n             }\n             effectiveServiceConfig =\n                 defaultServiceConfig == null ? EMPTY_SERVICE_CONFIG : defaultServiceConfig;\n+            if (resolvedConfigSelector != null) {\n+              channelLogger.log(\n+                  ChannelLogLevel.INFO,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17a301e8daabc08d1965fd9899589661c82444d6"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE0ODYwOQ==", "bodyText": "I don't understand why you are assuming the config selector will only exist if there is a service config. Why can't we use the config selector here?\nReally, it seems like we can use the configSelector independent of how the service config validated; the name resolver could be fully aware of the failure, after all, and we have decided we want to allow the name resolver to allow communicating things failing independently. The only time we'd avoid applying the config selector is if lookUpServiceConfig == true, although even in that case it could make sense to call the config selector but throw away the service config result (that could be done easily by wrapping resolvedConfigSelector).", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r467148609", "createdAt": "2020-08-07T16:36:58Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "diffHunk": "@@ -1408,13 +1465,21 @@ public void run() {\n             }\n             effectiveServiceConfig =\n                 defaultServiceConfig == null ? EMPTY_SERVICE_CONFIG : defaultServiceConfig;\n+            if (resolvedConfigSelector != null) {\n+              channelLogger.log(\n+                  ChannelLogLevel.INFO,\n+                  \"Config selector from name resolver discarded by channel settings\");\n+            }\n+            configSelector.set(null);\n           } else {\n             // Try to use config if returned from name resolver\n             // Otherwise, try to use the default config if available\n             if (validServiceConfig != null) {\n               effectiveServiceConfig = validServiceConfig;\n+              configSelector.set(resolvedConfigSelector);\n             } else if (defaultServiceConfig != null) {\n               effectiveServiceConfig = defaultServiceConfig;\n+              configSelector.set(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17a301e8daabc08d1965fd9899589661c82444d6"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5NzIwNw==", "bodyText": "Could we always discard this key?", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r467197207", "createdAt": "2020-08-07T18:16:14Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "diffHunk": "@@ -1452,22 +1518,29 @@ public void run() {\n                   re);\n             }\n           }\n+          drainPendingCalls();\n \n           Attributes effectiveAttrs = resolutionResult.getAttributes();\n           // Call LB only if it's not shutdown.  If LB is shutdown, lbHelper won't match.\n           if (NameResolverListener.this.helper == ManagedChannelImpl.this.lbHelper) {\n+            Attributes.Builder attrBuilder = effectiveAttrs.toBuilder();\n+            if (configSelector.get() == null) {\n+              attrBuilder.discard(InternalConfigSelector.KEY);\n+            } else {\n+              attrBuilder.set(InternalConfigSelector.KEY, configSelector.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17a301e8daabc08d1965fd9899589661c82444d6"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwMTYxNQ==", "bodyText": "Are we assuming that the NameResolver will return before we will go idle? We may want a check in enterIdleMode() to wake things up again if configSelector.get() == INITIAL_PENDING_SELECTOR, like where we check inUseStateAggregator. It would probably be good to just update inUseStateAggregator appropriately; that will also handle this exitIdleMode().", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r467201615", "createdAt": "2020-08-07T18:25:46Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "diffHunk": "@@ -889,18 +907,39 @@ private RealChannel(String authority) {\n     }\n \n     @Override\n-    public <ReqT, RespT> ClientCall<ReqT, RespT> newCall(MethodDescriptor<ReqT, RespT> method,\n-        CallOptions callOptions) {\n-      return new ClientCallImpl<>(\n-          method,\n-          getCallExecutor(callOptions),\n-          callOptions,\n-          transportProvider,\n-          terminated ? null : transportFactory.getScheduledExecutorService(),\n-          channelCallTracer)\n-          .setFullStreamDecompression(fullStreamDecompression)\n-          .setDecompressorRegistry(decompressorRegistry)\n-          .setCompressorRegistry(compressorRegistry);\n+    public <ReqT, RespT> ClientCall<ReqT, RespT> newCall(\n+        final MethodDescriptor<ReqT, RespT> method, final CallOptions callOptions) {\n+      if (configSelector.get() != INITIAL_PENDING_SELECTOR) {\n+        return newClientCall(method, callOptions);\n+      } else {\n+        final DelayedClientCall<ReqT, RespT> delayedClientCall = new DelayedClientCall<>(\n+            getCallExecutor(callOptions), scheduledExecutor, callOptions.getDeadline());\n+        final Context context = Context.current();\n+        class TransitionRunnable extends ContextRunnable {\n+          TransitionRunnable() {\n+            super(context);\n+          }\n+\n+          @Override\n+          public void runInContext() {\n+            delayedClientCall.setCall(newClientCall(method, callOptions));\n+          }\n+        }\n+\n+        syncContext.execute(new Runnable() {\n+          @Override\n+          public void run() {\n+            exitIdleMode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17a301e8daabc08d1965fd9899589661c82444d6"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwOTUxNg==", "bodyText": "How much do we care about this holding onto cancelled RPCs during startup? It seems we should remove items for RPC cancellation, right?", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r467209516", "createdAt": "2020-08-07T18:43:31Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "diffHunk": "@@ -207,6 +216,10 @@ public void uncaughtException(Thread t, Throwable e) {\n   // switch to a ConcurrentHashMap.\n   private final Set<InternalSubchannel> subchannels = new HashSet<>(16, .75f);\n \n+  // Must be accessed from syncContext\n+  @Nullable\n+  private Collection<Runnable> pendingCalls = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17a301e8daabc08d1965fd9899589661c82444d6"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIyODAxOQ==", "bodyText": "Yes, I think we need to. We should really follow DelayedClientSteram's approach: schedule each call separately in the executor and if the CallOptions had an executor, we should use it.", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r467228019", "createdAt": "2020-08-07T19:24:31Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "diffHunk": "@@ -1511,6 +1588,15 @@ private void handleErrorInSyncContext(Status error) {\n       scheduleExponentialBackOffInSyncContext();\n     }\n \n+    private void drainPendingCalls() {\n+      if (pendingCalls != null) {\n+        for (Runnable pendingCall : pendingCalls) {\n+          pendingCall.run();\n+        }\n+        pendingCalls = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjExNDEwMw=="}, "originalCommit": {"oid": "17a301e8daabc08d1965fd9899589661c82444d6"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIyOTQwNg==", "bodyText": "I don't see us making an InternalConfigSelector for the provided service config anywhere. The \"normal\" approach is the name resolver will not provide an InternalConfigSelector, and it isn't clear how that is supposed to be handled.", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r467229406", "createdAt": "2020-08-07T19:27:37Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "diffHunk": "@@ -1393,9 +1448,11 @@ public void run() {\n \n           nameResolverBackoffPolicy = null;\n           ConfigOrError configOrError = resolutionResult.getServiceConfig();\n+          InternalConfigSelector resolvedConfigSelector =\n+              resolutionResult.getAttributes().get(InternalConfigSelector.KEY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17a301e8daabc08d1965fd9899589661c82444d6"}, "originalPosition": 142}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7aabd153750d6aa2236afe5263433dd407ec2e81", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/7aabd153750d6aa2236afe5263433dd407ec2e81", "committedDate": "2020-08-10T21:08:45Z", "message": "get rid of else"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5938653b574af989179c9b734278c64c162fba75", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/5938653b574af989179c9b734278c64c162fba75", "committedDate": "2020-08-10T21:10:53Z", "message": "Merge branch 'master' of https://github.com/grpc/grpc-java into delayed-call"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b18de3080a88f94dcc0253ebfe19672b8e9aae4", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/0b18de3080a88f94dcc0253ebfe19672b8e9aae4", "committedDate": "2020-08-10T21:24:27Z", "message": "oob channel should not have config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5849b1e23710a32e1d383a5a1179312aadbb6d66", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/5849b1e23710a32e1d383a5a1179312aadbb6d66", "committedDate": "2020-08-10T21:36:19Z", "message": "always discard config selector attributes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5948fa9b746be63fc10b008de5a827bd49a3549", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/e5948fa9b746be63fc10b008de5a827bd49a3549", "committedDate": "2020-08-10T21:56:35Z", "message": "run pendingCalls in callExecutor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bf2ad2f4aee53edbc3c18ae7c0a071195dd7738", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/1bf2ad2f4aee53edbc3c18ae7c0a071195dd7738", "committedDate": "2020-08-18T06:28:24Z", "message": "fix enterIdle and cancellation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2cb8822dc120b7d56a017ccc98c80a4199d1b57", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/b2cb8822dc120b7d56a017ccc98c80a4199d1b57", "committedDate": "2020-08-18T06:44:16Z", "message": "add TODO"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d9449cda2858319e3ff34ba0cca857956ff1332", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/0d9449cda2858319e3ff34ba0cca857956ff1332", "committedDate": "2020-08-18T06:54:21Z", "message": "fix NPE"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NTMxODE1", "url": "https://github.com/grpc/grpc-java/pull/7259#pullrequestreview-469531815", "createdAt": "2020-08-18T14:48:17Z", "commit": {"oid": "0d9449cda2858319e3ff34ba0cca857956ff1332"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDo0ODoxN1rOHCYK3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDo1MDo0MFrOHCYSAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI1NTE5Ng==", "bodyText": "This is only called from the PendingCallRunnable. cancel() calls setRealCall(), not this method.", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r472255196", "createdAt": "2020-08-18T14:48:17Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "diffHunk": "@@ -889,24 +914,90 @@ private RealChannel(String authority) {\n     }\n \n     @Override\n-    public <ReqT, RespT> ClientCall<ReqT, RespT> newCall(MethodDescriptor<ReqT, RespT> method,\n-        CallOptions callOptions) {\n+    public <ReqT, RespT> ClientCall<ReqT, RespT> newCall(\n+        final MethodDescriptor<ReqT, RespT> method, final CallOptions callOptions) {\n+      if (configSelector.get() != INITIAL_PENDING_SELECTOR) {\n+        return newClientCall(method, callOptions);\n+      }\n+      final Context context = Context.current();\n+      final PendingCall<ReqT, RespT> pendingCall = new PendingCall<>(context, method, callOptions);\n+\n+      syncContext.execute(new Runnable() {\n+        @Override\n+        public void run() {\n+          exitIdleMode();\n+          if (configSelector.get() == INITIAL_PENDING_SELECTOR) {\n+            if (pendingCalls.isEmpty()) {\n+              inUseStateAggregator.updateObjectInUse(RealChannel.this, true);\n+            }\n+            pendingCalls.add(pendingCall);\n+          } else {\n+            pendingCall.pendingCallRunnable.run();\n+          }\n+        }\n+      });\n+      return pendingCall;\n+    }\n+\n+    @Override\n+    public String authority() {\n+      return authority;\n+    }\n+\n+    private final class PendingCall<ReqT, RespT> extends DelayedClientCall<ReqT, RespT> {\n+      final Runnable pendingCallRunnable;\n+\n+      PendingCall(\n+          final Context context, final MethodDescriptor<ReqT, RespT> method,\n+          final CallOptions callOptions) {\n+        super(getCallExecutor(callOptions), scheduledExecutor, callOptions.getDeadline());\n+        class PendingCallRunnable implements Runnable {\n+          @Override\n+          public void run() {\n+            getCallExecutor(callOptions).execute(\n+                new ContextRunnable(context) {\n+                  @Override\n+                  public void runInContext() {\n+                    setCall(newClientCall(method, callOptions));\n+                  }\n+                }\n+            );\n+          }\n+        }\n+\n+        pendingCallRunnable = new PendingCallRunnable();\n+      }\n+\n+      @Override\n+      void setCall(ClientCall<ReqT, RespT> call) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d9449cda2858319e3ff34ba0cca857956ff1332"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI1NzAyNQ==", "bodyText": "This may be large. We don't want to keep it around after we are no longer queuing calls.", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r472257025", "createdAt": "2020-08-18T14:50:40Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "diffHunk": "@@ -207,6 +217,9 @@ public void uncaughtException(Thread t, Throwable e) {\n   // switch to a ConcurrentHashMap.\n   private final Set<InternalSubchannel> subchannels = new HashSet<>(16, .75f);\n \n+  // Must be accessed from syncContext\n+  private final Collection<RealChannel.PendingCall<?, ?>> pendingCalls = new LinkedHashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d9449cda2858319e3ff34ba0cca857956ff1332"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df5eb253af6a1de65217b2dc76be38a9c7d8411e", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/df5eb253af6a1de65217b2dc76be38a9c7d8411e", "committedDate": "2020-08-18T19:06:11Z", "message": "Use callCancelled() call back to update inUseStateAggregator"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NzUwMDEx", "url": "https://github.com/grpc/grpc-java/pull/7259#pullrequestreview-469750011", "createdAt": "2020-08-18T19:15:46Z", "commit": {"oid": "df5eb253af6a1de65217b2dc76be38a9c7d8411e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOToxNTo0NlrOHCiZ8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOToxNTo0NlrOHCiZ8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyMjg5OQ==", "bodyText": "I think you actually had this correct before. We need to wait until the calls are drained (at least the newCall and start() for each call) until we consider this no longer used, as otherwise that opens up a race window where it appears there are no RPCs in progress.", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r472422899", "createdAt": "2020-08-18T19:15:46Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "diffHunk": "@@ -1511,6 +1626,18 @@ private void handleErrorInSyncContext(Status error) {\n       scheduleExponentialBackOffInSyncContext();\n     }\n \n+    // Must run in SynchronizationContext.\n+    private void drainPendingCalls() {\n+      if (pendingCalls == null) {\n+        return;\n+      }\n+      for (RealChannel.PendingCall<?, ?> pendingCall : pendingCalls) {\n+        pendingCall.pendingCallRunnable.run();\n+      }\n+      inUseStateAggregator.updateObjectInUse(pendingCallsInUseObject, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df5eb253af6a1de65217b2dc76be38a9c7d8411e"}, "originalPosition": 280}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47d0f4a0050541e1ac2e60d7fda0908601bb3cb1", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/47d0f4a0050541e1ac2e60d7fda0908601bb3cb1", "committedDate": "2020-08-18T20:29:13Z", "message": "update inUseAggregator when calls are drained"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5ODQzODgy", "url": "https://github.com/grpc/grpc-java/pull/7259#pullrequestreview-469843882", "createdAt": "2020-08-18T21:28:58Z", "commit": {"oid": "47d0f4a0050541e1ac2e60d7fda0908601bb3cb1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMToyODo1OFrOHCnWOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMToyODo1OFrOHCnWOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwMzg2Nw==", "bodyText": "Every call to executeLater must be followed by a drain() call. I don't see such a call here or in callCancelled()", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r472503867", "createdAt": "2020-08-18T21:28:58Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "diffHunk": "@@ -962,6 +962,18 @@ public void run() {\n                   @Override\n                   public void runInContext() {\n                     setCall(newClientCall(method, callOptions));\n+                    syncContext.executeLater(new Runnable() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47d0f4a0050541e1ac2e60d7fda0908601bb3cb1"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82c740ad920505d1a04e2e0cf4399ce0db41b9c1", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/82c740ad920505d1a04e2e0cf4399ce0db41b9c1", "committedDate": "2020-08-18T21:35:30Z", "message": "reuse shared code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a9f07609430fb9a810b12b1360b8635f0157d5e", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/3a9f07609430fb9a810b12b1360b8635f0157d5e", "committedDate": "2020-08-19T19:56:33Z", "message": "not to use executeLater()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxODU2MjQ2", "url": "https://github.com/grpc/grpc-java/pull/7259#pullrequestreview-471856246", "createdAt": "2020-08-20T17:59:07Z", "commit": {"oid": "3a9f07609430fb9a810b12b1360b8635f0157d5e"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNzo1OTowOFrOHENJpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNzo1OTowOFrOHENJpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3MTgxNA==", "bodyText": "I think for the moment this also needs to avoid inheriting the config selector. Yes, it is on a connection to a legit backend, but there's actually no LB policy in place. That means it would break xDS reference counting. It doesn't look like this previously used service config, so I think we should leave it config-less for now.", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r474171814", "createdAt": "2020-08-20T17:59:08Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "diffHunk": "@@ -1737,7 +1864,8 @@ public Channel asChannel() {\n       return new SubchannelChannel(\n           subchannel, balancerRpcExecutorHolder.getExecutor(),\n           transportFactory.getScheduledExecutorService(),\n-          callTracerFactory.create());\n+          callTracerFactory.create(),\n+          configSelector);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a9f07609430fb9a810b12b1360b8635f0157d5e"}, "originalPosition": 293}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "940358d392e2cb3004ed61ab4fdeb175d09f9973", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/940358d392e2cb3004ed61ab4fdeb175d09f9973", "committedDate": "2020-08-20T23:19:34Z", "message": "fix InProcessTransport tests server side behavior change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75fdec9fd225e4c4dcbc2ae8ae34aaf66ac00def", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/75fdec9fd225e4c4dcbc2ae8ae34aaf66ac00def", "committedDate": "2020-08-20T23:35:11Z", "message": "use no config for SubchannelImpl.asChannel()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e17fddc6b181e063692a90776a95a07a3d2b40ae", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/e17fddc6b181e063692a90776a95a07a3d2b40ae", "committedDate": "2020-08-20T23:39:13Z", "message": "use null as no config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e679c7bea027b92ab9813d357e446f62e88aa105", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/e679c7bea027b92ab9813d357e446f62e88aa105", "committedDate": "2020-08-21T00:27:18Z", "message": "run in context only for newClientCall"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3962b7ea4919f14235aedb0cdc0e894bf2a18e42", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/3962b7ea4919f14235aedb0cdc0e894bf2a18e42", "committedDate": "2020-08-21T00:37:34Z", "message": "remove unneeded final"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNjI4MTkx", "url": "https://github.com/grpc/grpc-java/pull/7259#pullrequestreview-472628191", "createdAt": "2020-08-21T16:27:31Z", "commit": {"oid": "3962b7ea4919f14235aedb0cdc0e894bf2a18e42"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNjQzMjY2", "url": "https://github.com/grpc/grpc-java/pull/7259#pullrequestreview-472643266", "createdAt": "2020-08-21T16:51:41Z", "commit": {"oid": "3962b7ea4919f14235aedb0cdc0e894bf2a18e42"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjo1MTo0MVrOHE0U7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzowNDowOVrOHE0s5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxMzY3Ng==", "bodyText": "Why added these lines? It doesn't do anything.", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r474813676", "createdAt": "2020-08-21T16:51:41Z", "author": {"login": "voidzcy"}, "path": "core/src/main/java/io/grpc/internal/DelayedClientCall.java", "diffHunk": "@@ -231,6 +231,10 @@ public void run() {\n       }\n       drainPendingCalls();\n     }\n+    callCancelled();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3962b7ea4919f14235aedb0cdc0e894bf2a18e42"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxOTgxNA==", "bodyText": "nit: this doesn't need to be a Runnable, it could just be a method for PendingCall.", "url": "https://github.com/grpc/grpc-java/pull/7259#discussion_r474819814", "createdAt": "2020-08-21T17:04:09Z", "author": {"login": "voidzcy"}, "path": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "diffHunk": "@@ -889,24 +916,113 @@ private RealChannel(String authority) {\n     }\n \n     @Override\n-    public <ReqT, RespT> ClientCall<ReqT, RespT> newCall(MethodDescriptor<ReqT, RespT> method,\n-        CallOptions callOptions) {\n+    public <ReqT, RespT> ClientCall<ReqT, RespT> newCall(\n+        MethodDescriptor<ReqT, RespT> method, CallOptions callOptions) {\n+      if (configSelector.get() != INITIAL_PENDING_SELECTOR) {\n+        return newClientCall(method, callOptions);\n+      }\n+      syncContext.execute(new Runnable() {\n+        @Override\n+        public void run() {\n+          exitIdleMode();\n+        }\n+      });\n+      if (configSelector.get() != INITIAL_PENDING_SELECTOR) {\n+        // This is an optimization for the case (typically with InProcessTransport) when name\n+        // resolution result is immediately available at this point. Otherwise, some users'\n+        // tests might observe slight behavior difference from earlier grpc versions.\n+        return newClientCall(method, callOptions);\n+      }\n+      Context context = Context.current();\n+      final PendingCall<ReqT, RespT> pendingCall = new PendingCall<>(context, method, callOptions);\n+      syncContext.execute(new Runnable() {\n+        @Override\n+        public void run() {\n+          if (configSelector.get() == INITIAL_PENDING_SELECTOR) {\n+            if (pendingCalls == null) {\n+              pendingCalls = new LinkedHashSet<>();\n+              inUseStateAggregator.updateObjectInUse(pendingCallsInUseObject, true);\n+            }\n+            pendingCalls.add(pendingCall);\n+          } else {\n+            pendingCall.pendingCallRunnable.run();\n+          }\n+        }\n+      });\n+      return pendingCall;\n+    }\n+\n+    @Override\n+    public String authority() {\n+      return authority;\n+    }\n+\n+    private final class PendingCall<ReqT, RespT> extends DelayedClientCall<ReqT, RespT> {\n+      final Runnable pendingCallRunnable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3962b7ea4919f14235aedb0cdc0e894bf2a18e42"}, "originalPosition": 131}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c44fb60bef9c3f39ec6522ce8e4c2dff9f263132", "author": {"user": {"login": "dapengzhang0", "name": "ZHANG Dapeng"}}, "url": "https://github.com/grpc/grpc-java/commit/c44fb60bef9c3f39ec6522ce8e4c2dff9f263132", "committedDate": "2020-08-21T17:49:30Z", "message": "change PendingCall.pendingCallRunnable to a method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNjg1ODA0", "url": "https://github.com/grpc/grpc-java/pull/7259#pullrequestreview-472685804", "createdAt": "2020-08-21T18:00:33Z", "commit": {"oid": "c44fb60bef9c3f39ec6522ce8e4c2dff9f263132"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4113, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}