{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4NTY4MzUw", "number": 7549, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMjoyNTo0MVrOEw92ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwNjoxOToyOVrOExeY3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzgwNDkwOnYy", "diffSide": "RIGHT", "path": "interop-testing/src/main/java/io/grpc/testing/integration/XdsTestClient.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMjoyNTo0MVrOHm2AMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMTo1Nzo1M1rOHm5p8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ5MjcyMg==", "bodyText": "I don't understand this. How to use XdsUpdateClientConfigureService to change the value, when runQps() starts immediately?", "url": "https://github.com/grpc/grpc-java/pull/7549#discussion_r510492722", "createdAt": "2020-10-22T22:25:41Z", "author": {"login": "dapengzhang0"}, "path": "interop-testing/src/main/java/io/grpc/testing/integration/XdsTestClient.java", "diffHunk": "@@ -167,8 +169,10 @@ private void parseArgs(String[] args) {\n               + c.qps\n               + \"\\n  --rpc=STR              Types of RPCs to make, ',' separated string. RPCs can \"\n               + \"be EmptyCall or UnaryCall. Default: UnaryCall\"\n+              + \"\\n[deprecated] Use XdsUpdateClientConfigureService\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34a3ed50ff5a5ee97c883d162efd8c4152340b12"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwNTA1OA==", "bodyText": "By default, the test client just starts up and sends unary RPCs. That's the warmup phase, the test case won't begin until the test driver has checked if there is at least one RPCs succeed on each backend. This is to ensure the backend service configuration has been picked up by TD. We do not care what type of RPCs used to do the warm up, default unary is completely fine. After the warmup phase, we can change call behaviors to whatever needed for achieving the test goal.", "url": "https://github.com/grpc/grpc-java/pull/7549#discussion_r510505058", "createdAt": "2020-10-22T23:02:11Z", "author": {"login": "voidzcy"}, "path": "interop-testing/src/main/java/io/grpc/testing/integration/XdsTestClient.java", "diffHunk": "@@ -167,8 +169,10 @@ private void parseArgs(String[] args) {\n               + c.qps\n               + \"\\n  --rpc=STR              Types of RPCs to make, ',' separated string. RPCs can \"\n               + \"be EmptyCall or UnaryCall. Default: UnaryCall\"\n+              + \"\\n[deprecated] Use XdsUpdateClientConfigureService\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ5MjcyMg=="}, "originalCommit": {"oid": "34a3ed50ff5a5ee97c883d162efd8c4152340b12"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUzMzgzNQ==", "bodyText": "But rpcTypes is only read once in runQps(), how can rpcTypes be used after updated by the driver?", "url": "https://github.com/grpc/grpc-java/pull/7549#discussion_r510533835", "createdAt": "2020-10-23T00:36:47Z", "author": {"login": "dapengzhang0"}, "path": "interop-testing/src/main/java/io/grpc/testing/integration/XdsTestClient.java", "diffHunk": "@@ -167,8 +169,10 @@ private void parseArgs(String[] args) {\n               + c.qps\n               + \"\\n  --rpc=STR              Types of RPCs to make, ',' separated string. RPCs can \"\n               + \"be EmptyCall or UnaryCall. Default: UnaryCall\"\n+              + \"\\n[deprecated] Use XdsUpdateClientConfigureService\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ5MjcyMg=="}, "originalCommit": {"oid": "34a3ed50ff5a5ee97c883d162efd8c4152340b12"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUzODA5Nw==", "bodyText": "Oops, this is screwed up. Currently each PeriodicRpc task is created per RpcType. It should be changed to run a single PeriodicRpc and each time it runs, it looks up the RpcType list and sends out one RPC per RpcType.", "url": "https://github.com/grpc/grpc-java/pull/7549#discussion_r510538097", "createdAt": "2020-10-23T00:55:03Z", "author": {"login": "voidzcy"}, "path": "interop-testing/src/main/java/io/grpc/testing/integration/XdsTestClient.java", "diffHunk": "@@ -167,8 +169,10 @@ private void parseArgs(String[] args) {\n               + c.qps\n               + \"\\n  --rpc=STR              Types of RPCs to make, ',' separated string. RPCs can \"\n               + \"be EmptyCall or UnaryCall. Default: UnaryCall\"\n+              + \"\\n[deprecated] Use XdsUpdateClientConfigureService\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ5MjcyMg=="}, "originalCommit": {"oid": "34a3ed50ff5a5ee97c883d162efd8c4152340b12"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1MjU2Mw==", "bodyText": "Should be fixed now.", "url": "https://github.com/grpc/grpc-java/pull/7549#discussion_r510552563", "createdAt": "2020-10-23T01:57:53Z", "author": {"login": "voidzcy"}, "path": "interop-testing/src/main/java/io/grpc/testing/integration/XdsTestClient.java", "diffHunk": "@@ -167,8 +169,10 @@ private void parseArgs(String[] args) {\n               + c.qps\n               + \"\\n  --rpc=STR              Types of RPCs to make, ',' separated string. RPCs can \"\n               + \"be EmptyCall or UnaryCall. Default: UnaryCall\"\n+              + \"\\n[deprecated] Use XdsUpdateClientConfigureService\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ5MjcyMg=="}, "originalCommit": {"oid": "34a3ed50ff5a5ee97c883d162efd8c4152340b12"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMzEzNTY2OnYy", "diffSide": "RIGHT", "path": "interop-testing/src/main/java/io/grpc/testing/integration/XdsTestClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwNjoxOToyOVrOHno6mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMzoxNzoxOVrOHpUZCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyNjg3Mw==", "bodyText": "Did I miss some synchronization barrier here? It seems like multiple calls to handleRpcCompleted could be executing simultaneously and count might no longer be correct by the time this #put() is invoked.", "url": "https://github.com/grpc/grpc-java/pull/7549#discussion_r511326873", "createdAt": "2020-10-24T06:19:29Z", "author": {"login": "ericgribkoff"}, "path": "interop-testing/src/main/java/io/grpc/testing/integration/XdsTestClient.java", "diffHunk": "@@ -364,31 +375,43 @@ public void onNext(SimpleResponse response) {\n                   }\n                 }\n               });\n+          rpcsStarted.getAndIncrement();\n         }\n       }\n-    }\n \n-    long nanosPerQuery = TimeUnit.SECONDS.toNanos(1) / qps;\n-\n-    for (RpcType rpcType : rpcTypes) {\n-      ListenableScheduledFuture<?> future =\n-          exec.scheduleAtFixedRate(\n-              new PeriodicRpc(rpcType), 0, nanosPerQuery, TimeUnit.NANOSECONDS);\n+      private void handleRpcCompleted(long requestId, RpcType rpcType, String hostname,\n+          Set<XdsStatsWatcher> watchers) {\n+        int count = 0;\n+        if (rpcsSucceededByPeer.containsKey(hostname)) {\n+          count = rpcsSucceededByPeer.get(hostname);\n+        }\n+        rpcsSucceededByPeer.put(hostname, count + 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7825e2343079c8726e5ea685903726a6a715db73"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE5NDE0MQ==", "bodyText": "You are right, this needs to be fixed.\nBtw, now that we are warming up the test client normally before making calls open for testing. So we can still use the existing way for checking if there is at least one RPCs succeeding on each backend (getting the stats for next n RPCs). Then we do not need to categorize the number of successful RPCs for each peer, we just need to know the total successful RPCs.", "url": "https://github.com/grpc/grpc-java/pull/7549#discussion_r512194141", "createdAt": "2020-10-26T18:52:10Z", "author": {"login": "voidzcy"}, "path": "interop-testing/src/main/java/io/grpc/testing/integration/XdsTestClient.java", "diffHunk": "@@ -364,31 +375,43 @@ public void onNext(SimpleResponse response) {\n                   }\n                 }\n               });\n+          rpcsStarted.getAndIncrement();\n         }\n       }\n-    }\n \n-    long nanosPerQuery = TimeUnit.SECONDS.toNanos(1) / qps;\n-\n-    for (RpcType rpcType : rpcTypes) {\n-      ListenableScheduledFuture<?> future =\n-          exec.scheduleAtFixedRate(\n-              new PeriodicRpc(rpcType), 0, nanosPerQuery, TimeUnit.NANOSECONDS);\n+      private void handleRpcCompleted(long requestId, RpcType rpcType, String hostname,\n+          Set<XdsStatsWatcher> watchers) {\n+        int count = 0;\n+        if (rpcsSucceededByPeer.containsKey(hostname)) {\n+          count = rpcsSucceededByPeer.get(hostname);\n+        }\n+        rpcsSucceededByPeer.put(hostname, count + 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyNjg3Mw=="}, "originalCommit": {"oid": "7825e2343079c8726e5ea685903726a6a715db73"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA4Nzc1Mw==", "bodyText": "Updated to count the total number of RPCs succeeded without counting them separately for each remote peer.", "url": "https://github.com/grpc/grpc-java/pull/7549#discussion_r513087753", "createdAt": "2020-10-27T23:17:19Z", "author": {"login": "voidzcy"}, "path": "interop-testing/src/main/java/io/grpc/testing/integration/XdsTestClient.java", "diffHunk": "@@ -364,31 +375,43 @@ public void onNext(SimpleResponse response) {\n                   }\n                 }\n               });\n+          rpcsStarted.getAndIncrement();\n         }\n       }\n-    }\n \n-    long nanosPerQuery = TimeUnit.SECONDS.toNanos(1) / qps;\n-\n-    for (RpcType rpcType : rpcTypes) {\n-      ListenableScheduledFuture<?> future =\n-          exec.scheduleAtFixedRate(\n-              new PeriodicRpc(rpcType), 0, nanosPerQuery, TimeUnit.NANOSECONDS);\n+      private void handleRpcCompleted(long requestId, RpcType rpcType, String hostname,\n+          Set<XdsStatsWatcher> watchers) {\n+        int count = 0;\n+        if (rpcsSucceededByPeer.containsKey(hostname)) {\n+          count = rpcsSucceededByPeer.get(hostname);\n+        }\n+        rpcsSucceededByPeer.put(hostname, count + 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyNjg3Mw=="}, "originalCommit": {"oid": "7825e2343079c8726e5ea685903726a6a715db73"}, "originalPosition": 199}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2237, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}