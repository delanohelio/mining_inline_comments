{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0MDQxNzY1", "number": 6932, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwODowMjoxOVrODyYp4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwODowMjoxOVrODyYp4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTU5MzI4OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwODowMjoxOVrOGGZSlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMDoxMDo0NlrOGG1bAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM1ODk5OQ==", "bodyText": "Isn't duplicate allowed?", "url": "https://github.com/grpc/grpc-java/pull/6932#discussion_r409358999", "createdAt": "2020-04-16T08:02:19Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -944,35 +942,28 @@ private static String validateRoutes(List<EnvoyProtoData.Route> routes) {\n       }\n \n       RouteMatch routeMatch = route.getRouteMatch();\n-      String prefix = routeMatch.getPrefix();\n-      String path = routeMatch.getPath();\n-      if (!prefix.isEmpty()) {\n-        if (!prefix.startsWith(\"/\") || !prefix.endsWith(\"/\") || prefix.length() < 3) {\n-          return \"Prefix route match must be in the format of '/service/'\";\n-        }\n-        if (prefixMatches.contains(prefix)) {\n-          return \"Duplicate prefix match found\";\n-        }\n-        prefixMatches.add(prefix);\n-      } else if (!path.isEmpty()) {\n-        int lastSlash = path.lastIndexOf('/');\n-        if (!path.startsWith(\"/\") || lastSlash == 0 || lastSlash ==  path.length() - 1) {\n-          return \"Path route match must be in the format of '/service/method'\";\n-        }\n-        if (pathMatches.contains(path)) {\n-          return \"Duplicate path match found\";\n-        }\n-        pathMatches.add(path);\n-      } else if (routeMatch.hasRegex()) {\n-        return \"Regex route match not supported\";\n-      } else { // Default route match\n-        if (i != routes.size() - 1) {\n-          return \"Default route found but is not the last route in the route list\";\n+      if (!routeMatch.isDefaultMatcher()) {\n+        String prefix = routeMatch.getPrefix();\n+        String path = routeMatch.getPath();\n+        if (!prefix.isEmpty()) {\n+          if (!prefix.startsWith(\"/\") || !prefix.endsWith(\"/\") || prefix.length() < 3) {\n+            return \"Prefix route match must be in the format of '/service/'\";\n+          }\n+        } else if (!path.isEmpty()) {\n+          int lastSlash = path.lastIndexOf('/');\n+          if (!path.startsWith(\"/\") || lastSlash == 0 || lastSlash == path.length() - 1) {\n+            return \"Path route match must be in the format of '/service/method'\";\n+          }\n+          if (pathMatches.contains(path)) {\n+            return \"Duplicate path match found\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbed440bddd3e7b13003d62a5e8409df2921c151"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY5ODM1OQ==", "bodyText": "good catch, I miss that for path.", "url": "https://github.com/grpc/grpc-java/pull/6932#discussion_r409698359", "createdAt": "2020-04-16T16:41:16Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -944,35 +942,28 @@ private static String validateRoutes(List<EnvoyProtoData.Route> routes) {\n       }\n \n       RouteMatch routeMatch = route.getRouteMatch();\n-      String prefix = routeMatch.getPrefix();\n-      String path = routeMatch.getPath();\n-      if (!prefix.isEmpty()) {\n-        if (!prefix.startsWith(\"/\") || !prefix.endsWith(\"/\") || prefix.length() < 3) {\n-          return \"Prefix route match must be in the format of '/service/'\";\n-        }\n-        if (prefixMatches.contains(prefix)) {\n-          return \"Duplicate prefix match found\";\n-        }\n-        prefixMatches.add(prefix);\n-      } else if (!path.isEmpty()) {\n-        int lastSlash = path.lastIndexOf('/');\n-        if (!path.startsWith(\"/\") || lastSlash == 0 || lastSlash ==  path.length() - 1) {\n-          return \"Path route match must be in the format of '/service/method'\";\n-        }\n-        if (pathMatches.contains(path)) {\n-          return \"Duplicate path match found\";\n-        }\n-        pathMatches.add(path);\n-      } else if (routeMatch.hasRegex()) {\n-        return \"Regex route match not supported\";\n-      } else { // Default route match\n-        if (i != routes.size() - 1) {\n-          return \"Default route found but is not the last route in the route list\";\n+      if (!routeMatch.isDefaultMatcher()) {\n+        String prefix = routeMatch.getPrefix();\n+        String path = routeMatch.getPath();\n+        if (!prefix.isEmpty()) {\n+          if (!prefix.startsWith(\"/\") || !prefix.endsWith(\"/\") || prefix.length() < 3) {\n+            return \"Prefix route match must be in the format of '/service/'\";\n+          }\n+        } else if (!path.isEmpty()) {\n+          int lastSlash = path.lastIndexOf('/');\n+          if (!path.startsWith(\"/\") || lastSlash == 0 || lastSlash == path.length() - 1) {\n+            return \"Path route match must be in the format of '/service/method'\";\n+          }\n+          if (pathMatches.contains(path)) {\n+            return \"Duplicate path match found\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM1ODk5OQ=="}, "originalCommit": {"oid": "bbed440bddd3e7b13003d62a5e8409df2921c151"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgxOTkwNw==", "bodyText": "Fixed.", "url": "https://github.com/grpc/grpc-java/pull/6932#discussion_r409819907", "createdAt": "2020-04-16T20:10:46Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -944,35 +942,28 @@ private static String validateRoutes(List<EnvoyProtoData.Route> routes) {\n       }\n \n       RouteMatch routeMatch = route.getRouteMatch();\n-      String prefix = routeMatch.getPrefix();\n-      String path = routeMatch.getPath();\n-      if (!prefix.isEmpty()) {\n-        if (!prefix.startsWith(\"/\") || !prefix.endsWith(\"/\") || prefix.length() < 3) {\n-          return \"Prefix route match must be in the format of '/service/'\";\n-        }\n-        if (prefixMatches.contains(prefix)) {\n-          return \"Duplicate prefix match found\";\n-        }\n-        prefixMatches.add(prefix);\n-      } else if (!path.isEmpty()) {\n-        int lastSlash = path.lastIndexOf('/');\n-        if (!path.startsWith(\"/\") || lastSlash == 0 || lastSlash ==  path.length() - 1) {\n-          return \"Path route match must be in the format of '/service/method'\";\n-        }\n-        if (pathMatches.contains(path)) {\n-          return \"Duplicate path match found\";\n-        }\n-        pathMatches.add(path);\n-      } else if (routeMatch.hasRegex()) {\n-        return \"Regex route match not supported\";\n-      } else { // Default route match\n-        if (i != routes.size() - 1) {\n-          return \"Default route found but is not the last route in the route list\";\n+      if (!routeMatch.isDefaultMatcher()) {\n+        String prefix = routeMatch.getPrefix();\n+        String path = routeMatch.getPath();\n+        if (!prefix.isEmpty()) {\n+          if (!prefix.startsWith(\"/\") || !prefix.endsWith(\"/\") || prefix.length() < 3) {\n+            return \"Prefix route match must be in the format of '/service/'\";\n+          }\n+        } else if (!path.isEmpty()) {\n+          int lastSlash = path.lastIndexOf('/');\n+          if (!path.startsWith(\"/\") || lastSlash == 0 || lastSlash == path.length() - 1) {\n+            return \"Path route match must be in the format of '/service/method'\";\n+          }\n+          if (pathMatches.contains(path)) {\n+            return \"Duplicate path match found\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM1ODk5OQ=="}, "originalCommit": {"oid": "bbed440bddd3e7b13003d62a5e8409df2921c151"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2801, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}