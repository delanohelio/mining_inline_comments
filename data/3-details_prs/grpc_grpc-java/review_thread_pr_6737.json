{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4MDQxMzc2", "number": 6737, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMDo1Mzo1OVrODhuw3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODoyMTozOVrODh-C6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2Njk1NzczOnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/CdsLoadBalancer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMDo1Mzo1OVrOFsoV8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxOTo0MTo0MFrOFtCc9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM0MjY0Mg==", "bodyText": "cluster =, childPolicy = to be consistent. childPolicy not needed because it has a meaningful type.", "url": "https://github.com/grpc/grpc-java/pull/6737#discussion_r382342642", "createdAt": "2020-02-21T00:53:59Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/CdsLoadBalancer.java", "diffHunk": "@@ -280,11 +280,14 @@ public void onClusterChanged(ClusterUpdate newUpdate) {\n           newUpdate.getLbPolicy().equals(\"round_robin\"),\n           \"The load balancing policy in ClusterUpdate '%s' is not supported\", newUpdate);\n \n-      final XdsConfig edsConfig = new XdsConfig(\n-          new LbConfig(newUpdate.getLbPolicy(), ImmutableMap.<String, Object>of()),\n-          /* fallbackPolicy = */ null,\n-          /* edsServiceName = */ newUpdate.getEdsServiceName(),\n-          /* lrsServerName = */ newUpdate.getLrsServerName());\n+      final XdsConfig edsConfig =\n+          new XdsConfig(\n+              /* cluster */newUpdate.getClusterName(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b6d6f0d8f378777215850fd4db5707fb6a403a"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc3MDQyMw==", "bodyText": "Done.", "url": "https://github.com/grpc/grpc-java/pull/6737#discussion_r382770423", "createdAt": "2020-02-21T19:41:40Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/CdsLoadBalancer.java", "diffHunk": "@@ -280,11 +280,14 @@ public void onClusterChanged(ClusterUpdate newUpdate) {\n           newUpdate.getLbPolicy().equals(\"round_robin\"),\n           \"The load balancing policy in ClusterUpdate '%s' is not supported\", newUpdate);\n \n-      final XdsConfig edsConfig = new XdsConfig(\n-          new LbConfig(newUpdate.getLbPolicy(), ImmutableMap.<String, Object>of()),\n-          /* fallbackPolicy = */ null,\n-          /* edsServiceName = */ newUpdate.getEdsServiceName(),\n-          /* lrsServerName = */ newUpdate.getLrsServerName());\n+      final XdsConfig edsConfig =\n+          new XdsConfig(\n+              /* cluster */newUpdate.getClusterName(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM0MjY0Mg=="}, "originalCommit": {"oid": "d7b6d6f0d8f378777215850fd4db5707fb6a403a"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzAxMDU3OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMToyNDowNFrOFso1zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxOTo0NzowM1rOFtCmuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1MDc5OQ==", "bodyText": "Did you forget to change EdsLoadBalancer.shutdown() back?", "url": "https://github.com/grpc/grpc-java/pull/6737#discussion_r382350799", "createdAt": "2020-02-21T01:24:04Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java", "diffHunk": "@@ -303,8 +298,12 @@ public boolean canHandleEmptyAddressListFromNameResolution() {\n \n       @Override\n       public void shutdown() {\n+        if (isReportingLoad) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b6d6f0d8f378777215850fd4db5707fb6a403a"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc3MjkyMQ==", "bodyText": "Oh, my bad. Changed. Thanks.", "url": "https://github.com/grpc/grpc-java/pull/6737#discussion_r382772921", "createdAt": "2020-02-21T19:47:03Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java", "diffHunk": "@@ -303,8 +298,12 @@ public boolean canHandleEmptyAddressListFromNameResolution() {\n \n       @Override\n       public void shutdown() {\n+        if (isReportingLoad) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1MDc5OQ=="}, "originalCommit": {"oid": "d7b6d6f0d8f378777215850fd4db5707fb6a403a"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzAyODg5OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/LoadReportClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMTozNDozNlrOFspA1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxOTo0MTo0OVrOFtCdKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1MzYyMQ==", "bodyText": "You can use %s placeholder and varargs to avoid stringcat.", "url": "https://github.com/grpc/grpc-java/pull/6737#discussion_r382353621", "createdAt": "2020-02-21T01:34:36Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/LoadReportClient.java", "diffHunk": "@@ -132,37 +143,35 @@ public void stopLoadReporting() {\n    * Provides this LoadReportClient source of load stats data for the given\n    * cluster:cluster_service. If requested, data from the given loadStatsStore is\n    * periodically queried and sent to traffic director by this LoadReportClient.\n-   *\n-   * <p>Currently we expect load stats data for all clusters to report loads for are provided\n-   * before load reporting starts (so that LRS initial request tells management server clusters\n-   * it is reporting loads for). Design TBD for reporting loads for extra clusters after load\n-   * reporting has started.\n-   *\n-   * <p>Note: currently clusterServiceName is always unset.\n    */\n-  public void addLoadStatsStore(\n+  void addLoadStatsStore(\n       String clusterName, @Nullable String clusterServiceName, LoadStatsStore loadStatsStore) {\n     checkState(\n-        !loadStatsStoreMap.containsKey(clusterName),\n-        \"load stats for cluster \" + clusterName + \" already exists\");\n-    // FIXME(chengyuanzhang): relax this restriction after design is fleshed out.\n-    checkState(\n-        !started,\n-        \"load stats for all clusters to report loads for should be provided before \"\n-            + \"load reporting has started\");\n-    loadStatsStoreMap.put(clusterName, loadStatsStore);\n+        !loadStatsStoreMap.containsKey(clusterName)\n+            || !loadStatsStoreMap.get(clusterName).containsKey(clusterServiceName),\n+        \"load stats for cluster: \" + clusterName + \", cluster service: \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b6d6f0d8f378777215850fd4db5707fb6a403a"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc3MDQ3NQ==", "bodyText": "Done.", "url": "https://github.com/grpc/grpc-java/pull/6737#discussion_r382770475", "createdAt": "2020-02-21T19:41:49Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/LoadReportClient.java", "diffHunk": "@@ -132,37 +143,35 @@ public void stopLoadReporting() {\n    * Provides this LoadReportClient source of load stats data for the given\n    * cluster:cluster_service. If requested, data from the given loadStatsStore is\n    * periodically queried and sent to traffic director by this LoadReportClient.\n-   *\n-   * <p>Currently we expect load stats data for all clusters to report loads for are provided\n-   * before load reporting starts (so that LRS initial request tells management server clusters\n-   * it is reporting loads for). Design TBD for reporting loads for extra clusters after load\n-   * reporting has started.\n-   *\n-   * <p>Note: currently clusterServiceName is always unset.\n    */\n-  public void addLoadStatsStore(\n+  void addLoadStatsStore(\n       String clusterName, @Nullable String clusterServiceName, LoadStatsStore loadStatsStore) {\n     checkState(\n-        !loadStatsStoreMap.containsKey(clusterName),\n-        \"load stats for cluster \" + clusterName + \" already exists\");\n-    // FIXME(chengyuanzhang): relax this restriction after design is fleshed out.\n-    checkState(\n-        !started,\n-        \"load stats for all clusters to report loads for should be provided before \"\n-            + \"load reporting has started\");\n-    loadStatsStoreMap.put(clusterName, loadStatsStore);\n+        !loadStatsStoreMap.containsKey(clusterName)\n+            || !loadStatsStoreMap.get(clusterName).containsKey(clusterServiceName),\n+        \"load stats for cluster: \" + clusterName + \", cluster service: \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1MzYyMQ=="}, "originalCommit": {"oid": "d7b6d6f0d8f378777215850fd4db5707fb6a403a"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzAzNTk3OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/LoadReportClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMTozODo1OVrOFspFCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxOTo0MTo1N1rOFtCdgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1NDY5Ng==", "bodyText": "Ditto.", "url": "https://github.com/grpc/grpc-java/pull/6737#discussion_r382354696", "createdAt": "2020-02-21T01:38:59Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/LoadReportClient.java", "diffHunk": "@@ -132,37 +143,35 @@ public void stopLoadReporting() {\n    * Provides this LoadReportClient source of load stats data for the given\n    * cluster:cluster_service. If requested, data from the given loadStatsStore is\n    * periodically queried and sent to traffic director by this LoadReportClient.\n-   *\n-   * <p>Currently we expect load stats data for all clusters to report loads for are provided\n-   * before load reporting starts (so that LRS initial request tells management server clusters\n-   * it is reporting loads for). Design TBD for reporting loads for extra clusters after load\n-   * reporting has started.\n-   *\n-   * <p>Note: currently clusterServiceName is always unset.\n    */\n-  public void addLoadStatsStore(\n+  void addLoadStatsStore(\n       String clusterName, @Nullable String clusterServiceName, LoadStatsStore loadStatsStore) {\n     checkState(\n-        !loadStatsStoreMap.containsKey(clusterName),\n-        \"load stats for cluster \" + clusterName + \" already exists\");\n-    // FIXME(chengyuanzhang): relax this restriction after design is fleshed out.\n-    checkState(\n-        !started,\n-        \"load stats for all clusters to report loads for should be provided before \"\n-            + \"load reporting has started\");\n-    loadStatsStoreMap.put(clusterName, loadStatsStore);\n+        !loadStatsStoreMap.containsKey(clusterName)\n+            || !loadStatsStoreMap.get(clusterName).containsKey(clusterServiceName),\n+        \"load stats for cluster: \" + clusterName + \", cluster service: \"\n+            + clusterServiceName + \" already exists\");\n+    if (!loadStatsStoreMap.containsKey(clusterName)) {\n+      loadStatsStoreMap.put(clusterName, new HashMap<String, LoadStatsStore>());\n+    }\n+    Map<String, LoadStatsStore> clusterLoadStatsStores = loadStatsStoreMap.get(clusterName);\n+    clusterLoadStatsStores.put(clusterServiceName, loadStatsStore);\n   }\n \n   /**\n    * Stops providing load stats data for the given cluster:cluster_service.\n-   *\n-   * <p>Note: currently clusterServiceName is always unset.\n    */\n-  public void removeLoadStatsStore(String clusterName, @Nullable String clusterServiceName) {\n+  void removeLoadStatsStore(String clusterName, @Nullable String clusterServiceName) {\n     checkState(\n-        loadStatsStoreMap.containsKey(clusterName),\n-        \"load stats for cluster \" + clusterName + \" does not exist\");\n-    loadStatsStoreMap.remove(clusterName);\n+        loadStatsStoreMap.containsKey(clusterName)\n+            && loadStatsStoreMap.get(clusterName).containsKey(clusterServiceName),\n+        \"load stats for cluster: \" + clusterName + \", cluster service: \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b6d6f0d8f378777215850fd4db5707fb6a403a"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc3MDU2Mw==", "bodyText": "Done.", "url": "https://github.com/grpc/grpc-java/pull/6737#discussion_r382770563", "createdAt": "2020-02-21T19:41:57Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/LoadReportClient.java", "diffHunk": "@@ -132,37 +143,35 @@ public void stopLoadReporting() {\n    * Provides this LoadReportClient source of load stats data for the given\n    * cluster:cluster_service. If requested, data from the given loadStatsStore is\n    * periodically queried and sent to traffic director by this LoadReportClient.\n-   *\n-   * <p>Currently we expect load stats data for all clusters to report loads for are provided\n-   * before load reporting starts (so that LRS initial request tells management server clusters\n-   * it is reporting loads for). Design TBD for reporting loads for extra clusters after load\n-   * reporting has started.\n-   *\n-   * <p>Note: currently clusterServiceName is always unset.\n    */\n-  public void addLoadStatsStore(\n+  void addLoadStatsStore(\n       String clusterName, @Nullable String clusterServiceName, LoadStatsStore loadStatsStore) {\n     checkState(\n-        !loadStatsStoreMap.containsKey(clusterName),\n-        \"load stats for cluster \" + clusterName + \" already exists\");\n-    // FIXME(chengyuanzhang): relax this restriction after design is fleshed out.\n-    checkState(\n-        !started,\n-        \"load stats for all clusters to report loads for should be provided before \"\n-            + \"load reporting has started\");\n-    loadStatsStoreMap.put(clusterName, loadStatsStore);\n+        !loadStatsStoreMap.containsKey(clusterName)\n+            || !loadStatsStoreMap.get(clusterName).containsKey(clusterServiceName),\n+        \"load stats for cluster: \" + clusterName + \", cluster service: \"\n+            + clusterServiceName + \" already exists\");\n+    if (!loadStatsStoreMap.containsKey(clusterName)) {\n+      loadStatsStoreMap.put(clusterName, new HashMap<String, LoadStatsStore>());\n+    }\n+    Map<String, LoadStatsStore> clusterLoadStatsStores = loadStatsStoreMap.get(clusterName);\n+    clusterLoadStatsStores.put(clusterServiceName, loadStatsStore);\n   }\n \n   /**\n    * Stops providing load stats data for the given cluster:cluster_service.\n-   *\n-   * <p>Note: currently clusterServiceName is always unset.\n    */\n-  public void removeLoadStatsStore(String clusterName, @Nullable String clusterServiceName) {\n+  void removeLoadStatsStore(String clusterName, @Nullable String clusterServiceName) {\n     checkState(\n-        loadStatsStoreMap.containsKey(clusterName),\n-        \"load stats for cluster \" + clusterName + \" does not exist\");\n-    loadStatsStoreMap.remove(clusterName);\n+        loadStatsStoreMap.containsKey(clusterName)\n+            && loadStatsStoreMap.get(clusterName).containsKey(clusterServiceName),\n+        \"load stats for cluster: \" + clusterName + \", cluster service: \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1NDY5Ng=="}, "originalCommit": {"oid": "d7b6d6f0d8f378777215850fd4db5707fb6a403a"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzA0MDM3OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/LoadReportClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMTo0MTo1NVrOFspHtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxOTo0MjowNFrOFtCd3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1NTM4MA==", "bodyText": "This is redundant.", "url": "https://github.com/grpc/grpc-java/pull/6737#discussion_r382355380", "createdAt": "2020-02-21T01:41:55Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/main/java/io/grpc/xds/LoadReportClient.java", "diffHunk": "@@ -80,19 +81,29 @@\n   private LoadReportCallback callback;\n \n   LoadReportClient(\n+      String targetName,\n       ManagedChannel channel,\n       Node node,\n       SynchronizationContext syncContext,\n       ScheduledExecutorService scheduledExecutorService,\n       BackoffPolicy.Provider backoffPolicyProvider,\n       Supplier<Stopwatch> stopwatchSupplier) {\n     this.channel = checkNotNull(channel, \"channel\");\n-    this.node = checkNotNull(node, \"node\");\n     this.syncContext = checkNotNull(syncContext, \"syncContext\");\n     this.timerService = checkNotNull(scheduledExecutorService, \"timeService\");\n     this.backoffPolicyProvider = checkNotNull(backoffPolicyProvider, \"backoffPolicyProvider\");\n     this.stopwatchSupplier = checkNotNull(stopwatchSupplier, \"stopwatchSupplier\");\n     this.retryStopwatch = stopwatchSupplier.get();\n+    checkNotNull(targetName, \"targetName\");\n+    checkNotNull(node, \"node\");\n+    this.node =\n+        node.toBuilder()\n+            .setMetadata(\n+                Struct.newBuilder()\n+                    .putFields(\n+                        TARGET_NAME_METADATA_KEY,\n+                        Value.newBuilder().setStringValue(targetName).build()))\n+            .build();\n     started = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b6d6f0d8f378777215850fd4db5707fb6a403a"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc3MDY1NQ==", "bodyText": "Ok, deleted.", "url": "https://github.com/grpc/grpc-java/pull/6737#discussion_r382770655", "createdAt": "2020-02-21T19:42:04Z", "author": {"login": "voidzcy"}, "path": "xds/src/main/java/io/grpc/xds/LoadReportClient.java", "diffHunk": "@@ -80,19 +81,29 @@\n   private LoadReportCallback callback;\n \n   LoadReportClient(\n+      String targetName,\n       ManagedChannel channel,\n       Node node,\n       SynchronizationContext syncContext,\n       ScheduledExecutorService scheduledExecutorService,\n       BackoffPolicy.Provider backoffPolicyProvider,\n       Supplier<Stopwatch> stopwatchSupplier) {\n     this.channel = checkNotNull(channel, \"channel\");\n-    this.node = checkNotNull(node, \"node\");\n     this.syncContext = checkNotNull(syncContext, \"syncContext\");\n     this.timerService = checkNotNull(scheduledExecutorService, \"timeService\");\n     this.backoffPolicyProvider = checkNotNull(backoffPolicyProvider, \"backoffPolicyProvider\");\n     this.stopwatchSupplier = checkNotNull(stopwatchSupplier, \"stopwatchSupplier\");\n     this.retryStopwatch = stopwatchSupplier.get();\n+    checkNotNull(targetName, \"targetName\");\n+    checkNotNull(node, \"node\");\n+    this.node =\n+        node.toBuilder()\n+            .setMetadata(\n+                Struct.newBuilder()\n+                    .putFields(\n+                        TARGET_NAME_METADATA_KEY,\n+                        Value.newBuilder().setStringValue(targetName).build()))\n+            .build();\n     started = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1NTM4MA=="}, "originalCommit": {"oid": "d7b6d6f0d8f378777215850fd4db5707fb6a403a"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTQ2MTU0OnYy", "diffSide": "RIGHT", "path": "xds/src/test/java/io/grpc/xds/EdsLoadBalancerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODoyMTozOVrOFtAOMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxOTo0NDoyNlrOFtCiBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczMzg3Mg==", "bodyText": "Can you change  \"edsServiceName1\" in this test to null? The clusterLoadAssignment then is expected to use CLUSTER_NAME. That is what is happening in real case.", "url": "https://github.com/grpc/grpc-java/pull/6737#discussion_r382733872", "createdAt": "2020-02-21T18:21:39Z", "author": {"login": "dapengzhang0"}, "path": "xds/src/test/java/io/grpc/xds/EdsLoadBalancerTest.java", "diffHunk": "@@ -519,7 +525,7 @@ public PickResult pickSubchannel(PickSubchannelArgs args) {\n \n   @Test\n   public void handleLocalityAssignmentUpdates_pickersUpdatedFromChildBalancer() {\n-    deliverResolvedAddresses(new XdsConfig(null, null, \"edsServiceName1\", null));\n+    deliverResolvedAddresses(new XdsConfig(CLUSTER_NAME, null, null, \"edsServiceName1\", null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b6d6f0d8f378777215850fd4db5707fb6a403a"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc3MTcxOA==", "bodyText": "Changed test cases to use null edsServiceName. (This doesn't matter much for things we are aiming to test, although being closer to real use case is better).", "url": "https://github.com/grpc/grpc-java/pull/6737#discussion_r382771718", "createdAt": "2020-02-21T19:44:26Z", "author": {"login": "voidzcy"}, "path": "xds/src/test/java/io/grpc/xds/EdsLoadBalancerTest.java", "diffHunk": "@@ -519,7 +525,7 @@ public PickResult pickSubchannel(PickSubchannelArgs args) {\n \n   @Test\n   public void handleLocalityAssignmentUpdates_pickersUpdatedFromChildBalancer() {\n-    deliverResolvedAddresses(new XdsConfig(null, null, \"edsServiceName1\", null));\n+    deliverResolvedAddresses(new XdsConfig(CLUSTER_NAME, null, null, \"edsServiceName1\", null));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczMzg3Mg=="}, "originalCommit": {"oid": "d7b6d6f0d8f378777215850fd4db5707fb6a403a"}, "originalPosition": 101}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2847, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}