{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0MDUxNjU3", "number": 7294, "reviewThreads": {"totalCount": 40, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNzozNTozN1rOEYKPJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzowNDo1NFrOEqaA9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzY4OTk5OnYy", "diffSide": "RIGHT", "path": "alts/src/main/java/io/grpc/alts/AltsChannelBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNzozNTozN1rOHAWPSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxODowODo1OFrOHAXrcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDEyNjQwOA==", "bodyText": "With this change (when !CheckGcpEnvironment.isOnGcp() and  !enableUntrustedAlts) we use a FailingProtocolNegotiator instead of the previous FailingClientInterceptor which fails each client call which is different behavior. May be the difference is not important but we might be able to keep the same behavior by throwing an exception from credentialsBuilder.buildProtocolNegotiatorFactory() and catching that here to apply FailingClientInterceptor on the delegate() which also eliminates the need for FailingProtocolNegotiator* classes.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r470126408", "createdAt": "2020-08-13T17:35:37Z", "author": {"login": "sanjaypujare"}, "path": "alts/src/main/java/io/grpc/alts/AltsChannelBuilder.java", "diffHunk": "@@ -103,47 +82,16 @@ protected NettyChannelBuilder delegate() {\n \n   @Override\n   public ManagedChannel build() {\n-    if (!CheckGcpEnvironment.isOnGcp()) {\n-      if (enableUntrustedAlts) {\n-        logger.log(\n-            Level.WARNING,\n-            \"Untrusted ALTS mode is enabled and we cannot guarantee the trustworthiness of the \"\n-                + \"ALTS handshaker service\");\n-      } else {\n-        Status status =\n-            Status.INTERNAL.withDescription(\"ALTS is only allowed to run on Google Cloud Platform\");\n-        delegate().intercept(new FailingClientInterceptor(status));\n-      }\n-    }\n     InternalNettyChannelBuilder.setProtocolNegotiatorFactory(\n         delegate(),\n-        new ClientAltsProtocolNegotiatorFactory(\n-            targetServiceAccountsBuilder.build(), handshakerChannelPool));\n+        credentialsBuilder.buildProtocolNegotiatorFactory());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eca0e25e37db764b4c7fb3a9ad8405ab0e04b5ef"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDEzODQ5Mw==", "bodyText": "May be the difference is not important\n\nIt doesn't seem very important. And there's really no reason it should be an interceptor. It is really the negotiator that is failing.\n\nbut we might be able to keep the same behavior by throwing an exception from credentialsBuilder.buildProtocolNegotiatorFactory() and catching that here to apply FailingClientInterceptor on the delegate().\n\nThat would produce different code paths between the channel builder and credential. Since there's no gain to my knowledge to using the interceptor, it's not clear why we'd choose that approach.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r470138493", "createdAt": "2020-08-13T17:50:42Z", "author": {"login": "ejona86"}, "path": "alts/src/main/java/io/grpc/alts/AltsChannelBuilder.java", "diffHunk": "@@ -103,47 +82,16 @@ protected NettyChannelBuilder delegate() {\n \n   @Override\n   public ManagedChannel build() {\n-    if (!CheckGcpEnvironment.isOnGcp()) {\n-      if (enableUntrustedAlts) {\n-        logger.log(\n-            Level.WARNING,\n-            \"Untrusted ALTS mode is enabled and we cannot guarantee the trustworthiness of the \"\n-                + \"ALTS handshaker service\");\n-      } else {\n-        Status status =\n-            Status.INTERNAL.withDescription(\"ALTS is only allowed to run on Google Cloud Platform\");\n-        delegate().intercept(new FailingClientInterceptor(status));\n-      }\n-    }\n     InternalNettyChannelBuilder.setProtocolNegotiatorFactory(\n         delegate(),\n-        new ClientAltsProtocolNegotiatorFactory(\n-            targetServiceAccountsBuilder.build(), handshakerChannelPool));\n+        credentialsBuilder.buildProtocolNegotiatorFactory());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDEyNjQwOA=="}, "originalCommit": {"oid": "eca0e25e37db764b4c7fb3a9ad8405ab0e04b5ef"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE1MDAwMg==", "bodyText": "It doesn't seem very important. And there's really no reason it should be an interceptor. It is really the negotiator that is failing.\n\nAgreed and thought this change is more desirable and might be by design, but thought this is worth pointing out in case any client code depended on the old behavior.\n\n\nbut we might be able to keep the same behavior by throwing an exception from credentialsBuilder.buildProtocolNegotiatorFactory() and catching that here to apply FailingClientInterceptor on the delegate().\n\nThat would produce different code paths between the channel builder and credential. Since there's no gain to my knowledge to using the interceptor, it's not clear why we'd choose that approach.\n\nOkay", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r470150002", "createdAt": "2020-08-13T18:08:58Z", "author": {"login": "sanjaypujare"}, "path": "alts/src/main/java/io/grpc/alts/AltsChannelBuilder.java", "diffHunk": "@@ -103,47 +82,16 @@ protected NettyChannelBuilder delegate() {\n \n   @Override\n   public ManagedChannel build() {\n-    if (!CheckGcpEnvironment.isOnGcp()) {\n-      if (enableUntrustedAlts) {\n-        logger.log(\n-            Level.WARNING,\n-            \"Untrusted ALTS mode is enabled and we cannot guarantee the trustworthiness of the \"\n-                + \"ALTS handshaker service\");\n-      } else {\n-        Status status =\n-            Status.INTERNAL.withDescription(\"ALTS is only allowed to run on Google Cloud Platform\");\n-        delegate().intercept(new FailingClientInterceptor(status));\n-      }\n-    }\n     InternalNettyChannelBuilder.setProtocolNegotiatorFactory(\n         delegate(),\n-        new ClientAltsProtocolNegotiatorFactory(\n-            targetServiceAccountsBuilder.build(), handshakerChannelPool));\n+        credentialsBuilder.buildProtocolNegotiatorFactory());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDEyNjQwOA=="}, "originalCommit": {"oid": "eca0e25e37db764b4c7fb3a9ad8405ab0e04b5ef"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzkwNDYxOnYy", "diffSide": "RIGHT", "path": "alts/src/main/java/io/grpc/alts/ComputeEngineChannelBuilder.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxODoyNjo0MlrOHAYRIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNzowMDo1NlrOHA7_GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE1OTY1MQ==", "bodyText": "This can be made  static? I understand this was old code but we can make it static without breaking old code.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r470159651", "createdAt": "2020-08-13T18:26:42Z", "author": {"login": "sanjaypujare"}, "path": "alts/src/main/java/io/grpc/alts/ComputeEngineChannelBuilder.java", "diffHunk": "@@ -84,16 +53,6 @@ protected NettyChannelBuilder delegate() {\n \n   @VisibleForTesting\n   ProtocolNegotiator getProtocolNegotiatorForTest() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eca0e25e37db764b4c7fb3a9ad8405ab0e04b5ef"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIzMDk5Ng==", "bodyText": "I had started to do so originally, but it's really neither here nor there as this method should really just be deleted. If I change it to static the linters will break the build, as you shouldn't call static methods on an instance variable. At that point the tests should be swapped over to using the credentials directly instead of the builder. Are you wanting me to do that now?", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r470230996", "createdAt": "2020-08-13T20:33:05Z", "author": {"login": "ejona86"}, "path": "alts/src/main/java/io/grpc/alts/ComputeEngineChannelBuilder.java", "diffHunk": "@@ -84,16 +53,6 @@ protected NettyChannelBuilder delegate() {\n \n   @VisibleForTesting\n   ProtocolNegotiator getProtocolNegotiatorForTest() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE1OTY1MQ=="}, "originalCommit": {"oid": "eca0e25e37db764b4c7fb3a9ad8405ab0e04b5ef"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIzOTE1Mw==", "bodyText": "(It looks like it would be easy to update the tests; just be a bit more to review.)", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r470239153", "createdAt": "2020-08-13T20:48:11Z", "author": {"login": "ejona86"}, "path": "alts/src/main/java/io/grpc/alts/ComputeEngineChannelBuilder.java", "diffHunk": "@@ -84,16 +53,6 @@ protected NettyChannelBuilder delegate() {\n \n   @VisibleForTesting\n   ProtocolNegotiator getProtocolNegotiatorForTest() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE1OTY1MQ=="}, "originalCommit": {"oid": "eca0e25e37db764b4c7fb3a9ad8405ab0e04b5ef"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI4ODEyNw==", "bodyText": "I looked up and there is only one call to this method from a test (unless I missed others)", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r470288127", "createdAt": "2020-08-13T22:41:37Z", "author": {"login": "sanjaypujare"}, "path": "alts/src/main/java/io/grpc/alts/ComputeEngineChannelBuilder.java", "diffHunk": "@@ -84,16 +53,6 @@ protected NettyChannelBuilder delegate() {\n \n   @VisibleForTesting\n   ProtocolNegotiator getProtocolNegotiatorForTest() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE1OTY1MQ=="}, "originalCommit": {"oid": "eca0e25e37db764b4c7fb3a9ad8405ab0e04b5ef"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc0NDg1Nw==", "bodyText": "I just deleted the method and the callers, here and in GoogleDefaultChannelBuilder and the credentials. They obviously served no purpose when static.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r470744857", "createdAt": "2020-08-14T17:00:56Z", "author": {"login": "ejona86"}, "path": "alts/src/main/java/io/grpc/alts/ComputeEngineChannelBuilder.java", "diffHunk": "@@ -84,16 +53,6 @@ protected NettyChannelBuilder delegate() {\n \n   @VisibleForTesting\n   ProtocolNegotiator getProtocolNegotiatorForTest() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE1OTY1MQ=="}, "originalCommit": {"oid": "eca0e25e37db764b4c7fb3a9ad8405ab0e04b5ef"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODEyODI0OnYy", "diffSide": "RIGHT", "path": "alts/src/main/java/io/grpc/alts/FailingCallCredentials.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOToyMzoyOVrOHAaVeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMDo0NzowMlrOHAdFeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE5MzUzMA==", "bodyText": "This class has no dependency on any alts classes and could be reusable by others. Just a suggestion to move it to io.grpc and mark it @Internal .", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r470193530", "createdAt": "2020-08-13T19:23:29Z", "author": {"login": "sanjaypujare"}, "path": "alts/src/main/java/io/grpc/alts/FailingCallCredentials.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.alts;\n+\n+import com.google.common.base.Preconditions;\n+import io.grpc.CallCredentials;\n+import io.grpc.Status;\n+import java.util.concurrent.Executor;\n+\n+/**\n+ * {@code CallCredentials} that always fail the RPC.\n+ */\n+final class FailingCallCredentials extends CallCredentials {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eca0e25e37db764b4c7fb3a9ad8405ab0e04b5ef"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIzODU4NA==", "bodyText": "I'd move to to io.grpc.internal to avoid polluting io.grpc's namespace. But since there's no other user that just adds a dependency on an internal detail for no benefit. Every internal dependency contributes to version skew breakages, so I'd rather avoid it if there's no benefit. Once it is in io.grpc.internal it is also harder to notice when it is no longer used. It seems easy to move once there's a second user.\nI think this is a hack as well, and so wouldn't want to encourage others to do the same. Using it seems strange for ComputeEngineChannelCredentials; why wouldn't the call credentials already be handling that themselves? For GoogleDefaultChannelCredentials it really seems like we should throw, as the call credential auto-detection can be incorrect and may need to be retried. But those sorts of changes seemed inappropriate in this PR; I tried to find the closest approximation of the previous behavior, now that we can't use interceptors.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r470238584", "createdAt": "2020-08-13T20:47:02Z", "author": {"login": "ejona86"}, "path": "alts/src/main/java/io/grpc/alts/FailingCallCredentials.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.alts;\n+\n+import com.google.common.base.Preconditions;\n+import io.grpc.CallCredentials;\n+import io.grpc.Status;\n+import java.util.concurrent.Executor;\n+\n+/**\n+ * {@code CallCredentials} that always fail the RPC.\n+ */\n+final class FailingCallCredentials extends CallCredentials {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE5MzUzMA=="}, "originalCommit": {"oid": "eca0e25e37db764b4c7fb3a9ad8405ab0e04b5ef"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODc4OTA1OnYy", "diffSide": "RIGHT", "path": "alts/src/main/java/io/grpc/alts/GoogleDefaultChannelCredentials.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMjo1OTo0OFrOHAgezQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNzozNTozM1rOHEMXTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI5NDIyMQ==", "bodyText": "Since the type is ChannelCredentials can we call the variable googleDefaultChannelCredentials instead of googleDefaultNegotiator?", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r470294221", "createdAt": "2020-08-13T22:59:48Z", "author": {"login": "sanjaypujare"}, "path": "alts/src/main/java/io/grpc/alts/GoogleDefaultChannelCredentials.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.alts;\n+\n+import com.google.auth.oauth2.GoogleCredentials;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableList;\n+import io.grpc.CallCredentials;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.CompositeChannelCredentials;\n+import io.grpc.ExperimentalApi;\n+import io.grpc.Status;\n+import io.grpc.alts.internal.AltsProtocolNegotiator.GoogleDefaultProtocolNegotiatorFactory;\n+import io.grpc.auth.MoreCallCredentials;\n+import io.grpc.internal.SharedResourcePool;\n+import io.grpc.netty.GrpcSslContexts;\n+import io.grpc.netty.InternalNettyChannelCredentials;\n+import io.grpc.netty.InternalProtocolNegotiator;\n+import io.grpc.netty.InternalProtocolNegotiator.ProtocolNegotiator;\n+import io.netty.handler.ssl.SslContext;\n+import java.io.IOException;\n+import javax.net.ssl.SSLException;\n+\n+/**\n+ * Google default credentials. This class sets up a secure channel using ALTS if applicable and\n+ * using TLS as fallback.\n+ */\n+@ExperimentalApi(\"TODO\")\n+public final class GoogleDefaultChannelCredentials {\n+  private GoogleDefaultChannelCredentials() {}\n+\n+  /**\n+   * Creates Google default credentials uses a secure channel with ALTS if applicable and uses TLS\n+   * as fallback.\n+   */\n+  public static ChannelCredentials create() {\n+    ChannelCredentials googleDefaultNegotiator =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eca0e25e37db764b4c7fb3a9ad8405ab0e04b5ef"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcyMjk4MQ==", "bodyText": "The problem is it is not googleDefaultChannelCredentials because that would include the call credentials. \"Negotiator\" here is just one part of the credentials. I could name it nettyCreds or something along those lines.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r470722981", "createdAt": "2020-08-14T16:17:27Z", "author": {"login": "ejona86"}, "path": "alts/src/main/java/io/grpc/alts/GoogleDefaultChannelCredentials.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.alts;\n+\n+import com.google.auth.oauth2.GoogleCredentials;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableList;\n+import io.grpc.CallCredentials;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.CompositeChannelCredentials;\n+import io.grpc.ExperimentalApi;\n+import io.grpc.Status;\n+import io.grpc.alts.internal.AltsProtocolNegotiator.GoogleDefaultProtocolNegotiatorFactory;\n+import io.grpc.auth.MoreCallCredentials;\n+import io.grpc.internal.SharedResourcePool;\n+import io.grpc.netty.GrpcSslContexts;\n+import io.grpc.netty.InternalNettyChannelCredentials;\n+import io.grpc.netty.InternalProtocolNegotiator;\n+import io.grpc.netty.InternalProtocolNegotiator.ProtocolNegotiator;\n+import io.netty.handler.ssl.SslContext;\n+import java.io.IOException;\n+import javax.net.ssl.SSLException;\n+\n+/**\n+ * Google default credentials. This class sets up a secure channel using ALTS if applicable and\n+ * using TLS as fallback.\n+ */\n+@ExperimentalApi(\"TODO\")\n+public final class GoogleDefaultChannelCredentials {\n+  private GoogleDefaultChannelCredentials() {}\n+\n+  /**\n+   * Creates Google default credentials uses a secure channel with ALTS if applicable and uses TLS\n+   * as fallback.\n+   */\n+  public static ChannelCredentials create() {\n+    ChannelCredentials googleDefaultNegotiator =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI5NDIyMQ=="}, "originalCommit": {"oid": "eca0e25e37db764b4c7fb3a9ad8405ab0e04b5ef"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNTYyMw==", "bodyText": "nettyCreds sounds good.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r474135623", "createdAt": "2020-08-20T16:53:50Z", "author": {"login": "sanjaypujare"}, "path": "alts/src/main/java/io/grpc/alts/GoogleDefaultChannelCredentials.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.alts;\n+\n+import com.google.auth.oauth2.GoogleCredentials;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableList;\n+import io.grpc.CallCredentials;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.CompositeChannelCredentials;\n+import io.grpc.ExperimentalApi;\n+import io.grpc.Status;\n+import io.grpc.alts.internal.AltsProtocolNegotiator.GoogleDefaultProtocolNegotiatorFactory;\n+import io.grpc.auth.MoreCallCredentials;\n+import io.grpc.internal.SharedResourcePool;\n+import io.grpc.netty.GrpcSslContexts;\n+import io.grpc.netty.InternalNettyChannelCredentials;\n+import io.grpc.netty.InternalProtocolNegotiator;\n+import io.grpc.netty.InternalProtocolNegotiator.ProtocolNegotiator;\n+import io.netty.handler.ssl.SslContext;\n+import java.io.IOException;\n+import javax.net.ssl.SSLException;\n+\n+/**\n+ * Google default credentials. This class sets up a secure channel using ALTS if applicable and\n+ * using TLS as fallback.\n+ */\n+@ExperimentalApi(\"TODO\")\n+public final class GoogleDefaultChannelCredentials {\n+  private GoogleDefaultChannelCredentials() {}\n+\n+  /**\n+   * Creates Google default credentials uses a secure channel with ALTS if applicable and uses TLS\n+   * as fallback.\n+   */\n+  public static ChannelCredentials create() {\n+    ChannelCredentials googleDefaultNegotiator =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI5NDIyMQ=="}, "originalCommit": {"oid": "eca0e25e37db764b4c7fb3a9ad8405ab0e04b5ef"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE1ODkyNg==", "bodyText": "Done.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r474158926", "createdAt": "2020-08-20T17:35:33Z", "author": {"login": "ejona86"}, "path": "alts/src/main/java/io/grpc/alts/GoogleDefaultChannelCredentials.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.alts;\n+\n+import com.google.auth.oauth2.GoogleCredentials;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableList;\n+import io.grpc.CallCredentials;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.CompositeChannelCredentials;\n+import io.grpc.ExperimentalApi;\n+import io.grpc.Status;\n+import io.grpc.alts.internal.AltsProtocolNegotiator.GoogleDefaultProtocolNegotiatorFactory;\n+import io.grpc.auth.MoreCallCredentials;\n+import io.grpc.internal.SharedResourcePool;\n+import io.grpc.netty.GrpcSslContexts;\n+import io.grpc.netty.InternalNettyChannelCredentials;\n+import io.grpc.netty.InternalProtocolNegotiator;\n+import io.grpc.netty.InternalProtocolNegotiator.ProtocolNegotiator;\n+import io.netty.handler.ssl.SslContext;\n+import java.io.IOException;\n+import javax.net.ssl.SSLException;\n+\n+/**\n+ * Google default credentials. This class sets up a secure channel using ALTS if applicable and\n+ * using TLS as fallback.\n+ */\n+@ExperimentalApi(\"TODO\")\n+public final class GoogleDefaultChannelCredentials {\n+  private GoogleDefaultChannelCredentials() {}\n+\n+  /**\n+   * Creates Google default credentials uses a secure channel with ALTS if applicable and uses TLS\n+   * as fallback.\n+   */\n+  public static ChannelCredentials create() {\n+    ChannelCredentials googleDefaultNegotiator =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI5NDIyMQ=="}, "originalCommit": {"oid": "eca0e25e37db764b4c7fb3a9ad8405ab0e04b5ef"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODg4ODk4OnYy", "diffSide": "RIGHT", "path": "alts/src/main/java/io/grpc/alts/internal/AltsProtocolNegotiator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMzo1MDoyMFrOHAhZTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNzowMDowMlrOHA79AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMwOTE5OA==", "bodyText": "What do you think of moving the creation of ClientTsiHandshakerFactory and LazyChannel to inside of ClientAltsProtocolNegotiator constructor? The reason is lazyHandshakerChannel is closed inside ``ClientAltsProtocolNegotiator.close()so it looks symmetric to create and close (release)lazyHandshakerChannel` in that class. Then `ClientAltsProtocolNegotiator` also will need to be created there. Just a suggestion.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r470309198", "createdAt": "2020-08-13T23:50:20Z", "author": {"login": "sanjaypujare"}, "path": "alts/src/main/java/io/grpc/alts/internal/AltsProtocolNegotiator.java", "diffHunk": "@@ -65,24 +64,30 @@\n    * channel.\n    */\n   public static final class ClientAltsProtocolNegotiatorFactory\n-      implements InternalNettyChannelBuilder.ProtocolNegotiatorFactory {\n+      implements InternalProtocolNegotiator.ClientFactory {\n \n     private final ImmutableList<String> targetServiceAccounts;\n-    private final LazyChannel lazyHandshakerChannel;\n+    private final ObjectPool<Channel> handshakerChannelPool;\n \n     public ClientAltsProtocolNegotiatorFactory(\n         List<String> targetServiceAccounts,\n         ObjectPool<Channel> handshakerChannelPool) {\n       this.targetServiceAccounts = ImmutableList.copyOf(targetServiceAccounts);\n-      this.lazyHandshakerChannel = new LazyChannel(handshakerChannelPool);\n+      this.handshakerChannelPool = handshakerChannelPool;\n     }\n \n     @Override\n-    public ProtocolNegotiator buildProtocolNegotiator() {\n+    public ProtocolNegotiator newNegotiator() {\n+      LazyChannel lazyHandshakerChannel = new LazyChannel(handshakerChannelPool);\n       return new ClientAltsProtocolNegotiator(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eca0e25e37db764b4c7fb3a9ad8405ab0e04b5ef"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc0NDMyMQ==", "bodyText": "Done.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r470744321", "createdAt": "2020-08-14T17:00:02Z", "author": {"login": "ejona86"}, "path": "alts/src/main/java/io/grpc/alts/internal/AltsProtocolNegotiator.java", "diffHunk": "@@ -65,24 +64,30 @@\n    * channel.\n    */\n   public static final class ClientAltsProtocolNegotiatorFactory\n-      implements InternalNettyChannelBuilder.ProtocolNegotiatorFactory {\n+      implements InternalProtocolNegotiator.ClientFactory {\n \n     private final ImmutableList<String> targetServiceAccounts;\n-    private final LazyChannel lazyHandshakerChannel;\n+    private final ObjectPool<Channel> handshakerChannelPool;\n \n     public ClientAltsProtocolNegotiatorFactory(\n         List<String> targetServiceAccounts,\n         ObjectPool<Channel> handshakerChannelPool) {\n       this.targetServiceAccounts = ImmutableList.copyOf(targetServiceAccounts);\n-      this.lazyHandshakerChannel = new LazyChannel(handshakerChannelPool);\n+      this.handshakerChannelPool = handshakerChannelPool;\n     }\n \n     @Override\n-    public ProtocolNegotiator buildProtocolNegotiator() {\n+    public ProtocolNegotiator newNegotiator() {\n+      LazyChannel lazyHandshakerChannel = new LazyChannel(handshakerChannelPool);\n       return new ClientAltsProtocolNegotiator(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMwOTE5OA=="}, "originalCommit": {"oid": "eca0e25e37db764b4c7fb3a9ad8405ab0e04b5ef"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTA5NTM1OnYy", "diffSide": "RIGHT", "path": "okhttp/src/main/java/io/grpc/okhttp/OkHttpChannelBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDo1MDozMlrOHAjeBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjo1OTozNVrOHA78Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM0MzE3Mw==", "bodyText": "When innerCreds is empty, error.substring(2) generates StringIndexOutOfBoundsException exception. Don't allow a ChoiceChannelCredentials with empty list?", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r470343173", "createdAt": "2020-08-14T00:50:32Z", "author": {"login": "sanjaypujare"}, "path": "okhttp/src/main/java/io/grpc/okhttp/OkHttpChannelBuilder.java", "diffHunk": "@@ -418,6 +466,99 @@ SSLSocketFactory createSslSocketFactory() {\n     }\n   }\n \n+  private static final EnumSet<TlsChannelCredentials.Feature> understoodTlsFeatures =\n+      EnumSet.noneOf(TlsChannelCredentials.Feature.class);\n+\n+  static SslSocketFactoryResult sslSocketFactoryFrom(ChannelCredentials creds) {\n+    if (creds instanceof TlsChannelCredentials) {\n+      TlsChannelCredentials tlsCreds = (TlsChannelCredentials) creds;\n+      Set<TlsChannelCredentials.Feature> incomprehensible =\n+          tlsCreds.incomprehensible(understoodTlsFeatures);\n+      if (!incomprehensible.isEmpty()) {\n+        return SslSocketFactoryResult.error(\n+            \"TLS features not understood: \" + incomprehensible);\n+      }\n+      SSLSocketFactory sslSocketFactory;\n+      try {\n+        SSLContext sslContext = SSLContext.getInstance(\"Default\", Platform.get().getProvider());\n+        sslSocketFactory = sslContext.getSocketFactory();\n+      } catch (GeneralSecurityException gse) {\n+        throw new RuntimeException(\"TLS Provider failure\", gse);\n+      }\n+      return SslSocketFactoryResult.factory(sslSocketFactory);\n+\n+    } else if (creds instanceof InsecureChannelCredentials) {\n+      return SslSocketFactoryResult.plaintext();\n+\n+    } else if (creds instanceof CompositeChannelCredentials) {\n+      CompositeChannelCredentials compCreds = (CompositeChannelCredentials) creds;\n+      return sslSocketFactoryFrom(compCreds.getChannelCredentials())\n+          .withCallCredentials(compCreds.getCallCredentials());\n+\n+    } else if (creds instanceof SslSocketFactoryChannelCredentials.ChannelCredentials) {\n+      SslSocketFactoryChannelCredentials.ChannelCredentials factoryCreds =\n+          (SslSocketFactoryChannelCredentials.ChannelCredentials) creds;\n+      return SslSocketFactoryResult.factory(factoryCreds.getFactory());\n+\n+    } else if (creds instanceof ChoiceChannelCredentials) {\n+      ChoiceChannelCredentials choiceCreds = (ChoiceChannelCredentials) creds;\n+      StringBuilder error = new StringBuilder();\n+      for (ChannelCredentials innerCreds : choiceCreds.getCredentialsList()) {\n+        SslSocketFactoryResult result = sslSocketFactoryFrom(innerCreds);\n+        if (result.error == null) {\n+          return result;\n+        }\n+        error.append(\", \");\n+        error.append(result.error);\n+      }\n+      return SslSocketFactoryResult.error(error.substring(2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eca0e25e37db764b4c7fb3a9ad8405ab0e04b5ef"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc0NDA3OQ==", "bodyText": "Good catch. There's no point in ChoiceChannelCredentials without at least one option. Adding validation there.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r470744079", "createdAt": "2020-08-14T16:59:35Z", "author": {"login": "ejona86"}, "path": "okhttp/src/main/java/io/grpc/okhttp/OkHttpChannelBuilder.java", "diffHunk": "@@ -418,6 +466,99 @@ SSLSocketFactory createSslSocketFactory() {\n     }\n   }\n \n+  private static final EnumSet<TlsChannelCredentials.Feature> understoodTlsFeatures =\n+      EnumSet.noneOf(TlsChannelCredentials.Feature.class);\n+\n+  static SslSocketFactoryResult sslSocketFactoryFrom(ChannelCredentials creds) {\n+    if (creds instanceof TlsChannelCredentials) {\n+      TlsChannelCredentials tlsCreds = (TlsChannelCredentials) creds;\n+      Set<TlsChannelCredentials.Feature> incomprehensible =\n+          tlsCreds.incomprehensible(understoodTlsFeatures);\n+      if (!incomprehensible.isEmpty()) {\n+        return SslSocketFactoryResult.error(\n+            \"TLS features not understood: \" + incomprehensible);\n+      }\n+      SSLSocketFactory sslSocketFactory;\n+      try {\n+        SSLContext sslContext = SSLContext.getInstance(\"Default\", Platform.get().getProvider());\n+        sslSocketFactory = sslContext.getSocketFactory();\n+      } catch (GeneralSecurityException gse) {\n+        throw new RuntimeException(\"TLS Provider failure\", gse);\n+      }\n+      return SslSocketFactoryResult.factory(sslSocketFactory);\n+\n+    } else if (creds instanceof InsecureChannelCredentials) {\n+      return SslSocketFactoryResult.plaintext();\n+\n+    } else if (creds instanceof CompositeChannelCredentials) {\n+      CompositeChannelCredentials compCreds = (CompositeChannelCredentials) creds;\n+      return sslSocketFactoryFrom(compCreds.getChannelCredentials())\n+          .withCallCredentials(compCreds.getCallCredentials());\n+\n+    } else if (creds instanceof SslSocketFactoryChannelCredentials.ChannelCredentials) {\n+      SslSocketFactoryChannelCredentials.ChannelCredentials factoryCreds =\n+          (SslSocketFactoryChannelCredentials.ChannelCredentials) creds;\n+      return SslSocketFactoryResult.factory(factoryCreds.getFactory());\n+\n+    } else if (creds instanceof ChoiceChannelCredentials) {\n+      ChoiceChannelCredentials choiceCreds = (ChoiceChannelCredentials) creds;\n+      StringBuilder error = new StringBuilder();\n+      for (ChannelCredentials innerCreds : choiceCreds.getCredentialsList()) {\n+        SslSocketFactoryResult result = sslSocketFactoryFrom(innerCreds);\n+        if (result.error == null) {\n+          return result;\n+        }\n+        error.append(\", \");\n+        error.append(result.error);\n+      }\n+      return SslSocketFactoryResult.error(error.substring(2));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM0MzE3Mw=="}, "originalCommit": {"oid": "eca0e25e37db764b4c7fb3a9ad8405ab0e04b5ef"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTIyNDY1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/grpc/ChoiceChannelCredentials.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMTozOTozNlrOHAkxzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjo1OTo0M1rOHA78Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM2NDYyMQ==", "bodyText": "should you check creds is not empty, as it creates problems elsewhere?", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r470364621", "createdAt": "2020-08-14T01:39:36Z", "author": {"login": "sanjaypujare"}, "path": "api/src/main/java/io/grpc/ChoiceChannelCredentials.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+  * Provides a list of {@link ChannelCredentials}, where any one may be used. The credentials are in\n+  * preference order.\n+  */\n+@ExperimentalApi(\"TODO\")\n+public final class ChoiceChannelCredentials extends ChannelCredentials {\n+  private final List<ChannelCredentials> creds;\n+\n+  /** Constructs with the provided {@code creds} as options, with preferred credentials first. */\n+  public ChoiceChannelCredentials(ChannelCredentials... creds) {\n+    for (ChannelCredentials cred : creds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eca0e25e37db764b4c7fb3a9ad8405ab0e04b5ef"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc0NDE2Mg==", "bodyText": "Done.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r470744162", "createdAt": "2020-08-14T16:59:43Z", "author": {"login": "ejona86"}, "path": "api/src/main/java/io/grpc/ChoiceChannelCredentials.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+  * Provides a list of {@link ChannelCredentials}, where any one may be used. The credentials are in\n+  * preference order.\n+  */\n+@ExperimentalApi(\"TODO\")\n+public final class ChoiceChannelCredentials extends ChannelCredentials {\n+  private final List<ChannelCredentials> creds;\n+\n+  /** Constructs with the provided {@code creds} as options, with preferred credentials first. */\n+  public ChoiceChannelCredentials(ChannelCredentials... creds) {\n+    for (ChannelCredentials cred : creds) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM2NDYyMQ=="}, "originalCommit": {"oid": "eca0e25e37db764b4c7fb3a9ad8405ab0e04b5ef"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTI2OTg0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/grpc/Grpc.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMjowODo0N1rOHAlMCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjo1ODo1N1rOHA76sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM3MTMzOA==", "bodyText": "=> Creates a channel builder ...", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r470371338", "createdAt": "2020-08-14T02:08:47Z", "author": {"login": "sanjaypujare"}, "path": "api/src/main/java/io/grpc/Grpc.java", "diffHunk": "@@ -62,4 +64,64 @@ private Grpc() {\n   @Retention(RetentionPolicy.SOURCE)\n   @Documented\n   public @interface TransportAttr {}\n+\n+  /**\n+   * Creates a channel with a target string and credentials. The target can be either a valid {@link", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eca0e25e37db764b4c7fb3a9ad8405ab0e04b5ef"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc0MzczMA==", "bodyText": "This is actually the same language on ManagedChannelBuilder today :). Fixed.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r470743730", "createdAt": "2020-08-14T16:58:57Z", "author": {"login": "ejona86"}, "path": "api/src/main/java/io/grpc/Grpc.java", "diffHunk": "@@ -62,4 +64,64 @@ private Grpc() {\n   @Retention(RetentionPolicy.SOURCE)\n   @Documented\n   public @interface TransportAttr {}\n+\n+  /**\n+   * Creates a channel with a target string and credentials. The target can be either a valid {@link", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM3MTMzOA=="}, "originalCommit": {"oid": "eca0e25e37db764b4c7fb3a9ad8405ab0e04b5ef"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTI3ODkxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/grpc/Grpc.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMjoxNDo0OFrOHAlRTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMjoxNDo0OFrOHAlRTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM3MjY4Ng==", "bodyText": "s/channel/channel builder/", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r470372686", "createdAt": "2020-08-14T02:14:48Z", "author": {"login": "sanjaypujare"}, "path": "api/src/main/java/io/grpc/Grpc.java", "diffHunk": "@@ -62,4 +64,64 @@ private Grpc() {\n   @Retention(RetentionPolicy.SOURCE)\n   @Documented\n   public @interface TransportAttr {}\n+\n+  /**\n+   * Creates a channel with a target string and credentials. The target can be either a valid {@link\n+   * NameResolver}-compliant URI, or an authority string.\n+   *\n+   * <p>A {@code NameResolver}-compliant URI is an absolute hierarchical URI as defined by {@link\n+   * java.net.URI}. Example URIs:\n+   * <ul>\n+   *   <li>{@code \"dns:///foo.googleapis.com:8080\"}</li>\n+   *   <li>{@code \"dns:///foo.googleapis.com\"}</li>\n+   *   <li>{@code \"dns:///%5B2001:db8:85a3:8d3:1319:8a2e:370:7348%5D:443\"}</li>\n+   *   <li>{@code \"dns://8.8.8.8/foo.googleapis.com:8080\"}</li>\n+   *   <li>{@code \"dns://8.8.8.8/foo.googleapis.com\"}</li>\n+   *   <li>{@code \"zookeeper://zk.example.com:9900/example_service\"}</li>\n+   * </ul>\n+   *\n+   * <p>An authority string will be converted to a {@code NameResolver}-compliant URI, which has\n+   * the scheme from the name resolver with the highest priority (e.g. {@code \"dns\"}),\n+   * no authority, and the original authority string as its path after properly escaped.\n+   * We recommend libraries to specify the schema explicitly if it is known, since libraries cannot\n+   * know which NameResolver will be default during runtime.\n+   * Example authority strings:\n+   * <ul>\n+   *   <li>{@code \"localhost\"}</li>\n+   *   <li>{@code \"127.0.0.1\"}</li>\n+   *   <li>{@code \"localhost:8080\"}</li>\n+   *   <li>{@code \"foo.googleapis.com:8080\"}</li>\n+   *   <li>{@code \"127.0.0.1:8080\"}</li>\n+   *   <li>{@code \"[2001:db8:85a3:8d3:1319:8a2e:370:7348]\"}</li>\n+   *   <li>{@code \"[2001:db8:85a3:8d3:1319:8a2e:370:7348]:443\"}</li>\n+   * </ul>\n+   */\n+  @ExperimentalApi(\"TODO\")\n+  public static ManagedChannelBuilder<?> newChannelBuilder(\n+      String target, ChannelCredentials creds) {\n+    return ManagedChannelRegistry.getDefaultRegistry().newChannelBuilder(target, creds);\n+  }\n+\n+  /**\n+   * Creates a channel from a host, port, and credentials. The host and port are combined to form an", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eca0e25e37db764b4c7fb3a9ad8405ab0e04b5ef"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzM0Nzk0OnYy", "diffSide": "RIGHT", "path": "alts/src/main/java/io/grpc/alts/ComputeEngineChannelCredentials.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjoxNToyNVrOHEJGAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNzoyMjoxMlrOHEL5bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwNTM0Ng==", "bodyText": "Have been meaning to ask this. I understand this matches the old behavior but if you are not on Gcp is there a reason to fail each call instead of failing channel creation?  Wouldn't it be better to fail early when the environment is wrong?", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r474105346", "createdAt": "2020-08-20T16:15:25Z", "author": {"login": "sanjaypujare"}, "path": "alts/src/main/java/io/grpc/alts/ComputeEngineChannelCredentials.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2019 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.alts;\n+\n+import com.google.auth.oauth2.ComputeEngineCredentials;\n+import com.google.common.collect.ImmutableList;\n+import io.grpc.CallCredentials;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.CompositeChannelCredentials;\n+import io.grpc.ExperimentalApi;\n+import io.grpc.Status;\n+import io.grpc.alts.internal.AltsProtocolNegotiator.GoogleDefaultProtocolNegotiatorFactory;\n+import io.grpc.auth.MoreCallCredentials;\n+import io.grpc.internal.SharedResourcePool;\n+import io.grpc.netty.GrpcSslContexts;\n+import io.grpc.netty.InternalNettyChannelCredentials;\n+import io.grpc.netty.InternalProtocolNegotiator;\n+import io.netty.handler.ssl.SslContext;\n+import javax.net.ssl.SSLException;\n+\n+/**\n+ * Credentials for Google Compute Engine. This class sets up a secure channel using ALTS if\n+ * applicable and using TLS as fallback.\n+ */\n+@ExperimentalApi(\"TODO\")\n+public final class ComputeEngineChannelCredentials {\n+  private ComputeEngineChannelCredentials() {}\n+\n+  /**\n+   * Creates credentials for Google Compute Engine. This class sets up a secure channel using ALTS\n+   * if applicable and using TLS as fallback.\n+   */\n+  public static ChannelCredentials create() {\n+    ChannelCredentials googleDefaultNegotiator =\n+        InternalNettyChannelCredentials.create(createClientFactory());\n+    CallCredentials callCredentials;\n+    if (CheckGcpEnvironment.isOnGcp()) {\n+      callCredentials = MoreCallCredentials.from(ComputeEngineCredentials.create());\n+    } else {\n+      callCredentials = new FailingCallCredentials(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2dc5c6fe6066ef0cd8a07498b1a2be66bdf1a41"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE1MTI3OQ==", "bodyText": "We don't tend to fail channel creation based on I/O; we do it when you use the API incorrectly. So I think we did it this way to fail in the normal way we fail for I/O.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r474151279", "createdAt": "2020-08-20T17:22:12Z", "author": {"login": "ejona86"}, "path": "alts/src/main/java/io/grpc/alts/ComputeEngineChannelCredentials.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2019 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.alts;\n+\n+import com.google.auth.oauth2.ComputeEngineCredentials;\n+import com.google.common.collect.ImmutableList;\n+import io.grpc.CallCredentials;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.CompositeChannelCredentials;\n+import io.grpc.ExperimentalApi;\n+import io.grpc.Status;\n+import io.grpc.alts.internal.AltsProtocolNegotiator.GoogleDefaultProtocolNegotiatorFactory;\n+import io.grpc.auth.MoreCallCredentials;\n+import io.grpc.internal.SharedResourcePool;\n+import io.grpc.netty.GrpcSslContexts;\n+import io.grpc.netty.InternalNettyChannelCredentials;\n+import io.grpc.netty.InternalProtocolNegotiator;\n+import io.netty.handler.ssl.SslContext;\n+import javax.net.ssl.SSLException;\n+\n+/**\n+ * Credentials for Google Compute Engine. This class sets up a secure channel using ALTS if\n+ * applicable and using TLS as fallback.\n+ */\n+@ExperimentalApi(\"TODO\")\n+public final class ComputeEngineChannelCredentials {\n+  private ComputeEngineChannelCredentials() {}\n+\n+  /**\n+   * Creates credentials for Google Compute Engine. This class sets up a secure channel using ALTS\n+   * if applicable and using TLS as fallback.\n+   */\n+  public static ChannelCredentials create() {\n+    ChannelCredentials googleDefaultNegotiator =\n+        InternalNettyChannelCredentials.create(createClientFactory());\n+    CallCredentials callCredentials;\n+    if (CheckGcpEnvironment.isOnGcp()) {\n+      callCredentials = MoreCallCredentials.from(ComputeEngineCredentials.create());\n+    } else {\n+      callCredentials = new FailingCallCredentials(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwNTM0Ng=="}, "originalCommit": {"oid": "d2dc5c6fe6066ef0cd8a07498b1a2be66bdf1a41"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzU0MDM3OnYy", "diffSide": "RIGHT", "path": "alts/src/main/java/io/grpc/alts/GoogleDefaultChannelCredentials.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjo1NTozMlrOHELAQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNTo1MDo0NFrOHIqXoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNjY0Mw==", "bodyText": "As I commented elsewhere throwing sounds better than FailingCallCredentials unless you want to match existing behavior.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r474136643", "createdAt": "2020-08-20T16:55:32Z", "author": {"login": "sanjaypujare"}, "path": "alts/src/main/java/io/grpc/alts/GoogleDefaultChannelCredentials.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.alts;\n+\n+import com.google.auth.oauth2.GoogleCredentials;\n+import com.google.common.collect.ImmutableList;\n+import io.grpc.CallCredentials;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.CompositeChannelCredentials;\n+import io.grpc.ExperimentalApi;\n+import io.grpc.Status;\n+import io.grpc.alts.internal.AltsProtocolNegotiator.GoogleDefaultProtocolNegotiatorFactory;\n+import io.grpc.auth.MoreCallCredentials;\n+import io.grpc.internal.SharedResourcePool;\n+import io.grpc.netty.GrpcSslContexts;\n+import io.grpc.netty.InternalNettyChannelCredentials;\n+import io.grpc.netty.InternalProtocolNegotiator;\n+import io.netty.handler.ssl.SslContext;\n+import java.io.IOException;\n+import javax.net.ssl.SSLException;\n+\n+/**\n+ * Google default credentials. This class sets up a secure channel using ALTS if applicable and\n+ * using TLS as fallback.\n+ */\n+@ExperimentalApi(\"TODO\")\n+public final class GoogleDefaultChannelCredentials {\n+  private GoogleDefaultChannelCredentials() {}\n+\n+  /**\n+   * Creates Google default credentials uses a secure channel with ALTS if applicable and uses TLS\n+   * as fallback.\n+   */\n+  public static ChannelCredentials create() {\n+    ChannelCredentials googleDefaultNegotiator =\n+        InternalNettyChannelCredentials.create(createClientFactory());\n+    CallCredentials callCredentials;\n+    try {\n+      callCredentials = MoreCallCredentials.from(GoogleCredentials.getApplicationDefault());\n+    } catch (IOException e) {\n+      // TODO(ejona): Should this just throw?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2dc5c6fe6066ef0cd8a07498b1a2be66bdf1a41"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE1NTA1Nw==", "bodyText": "The other case is a bit different. We can check if we're on GCP by looking at the BIOS information, which would be pretty quick and reliable. And ComputeEngineCredentials doesn't do any I/O when created.\nIn this case getApplicationDefault() itself does network I/O and can fail for reasons other than misconfiguration. It seems wrong to permanently break a channel in the case of that failure without providing a good way for users to manage the error themselves. So that's why I suggested throwing here.\nActually, I guess there is another option here: create CallCredentials that call getApplicationDefault() as part of its loading of credentials and if it fails it could continue retrying.\nIn either case, though, I don't think it is appropriate to change the behavior in this PR. And we probably can't change the existing builder. But we do really want to decide the API for GoogleDefaultChannelCredentials before stabilizing it.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r474155057", "createdAt": "2020-08-20T17:28:41Z", "author": {"login": "ejona86"}, "path": "alts/src/main/java/io/grpc/alts/GoogleDefaultChannelCredentials.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.alts;\n+\n+import com.google.auth.oauth2.GoogleCredentials;\n+import com.google.common.collect.ImmutableList;\n+import io.grpc.CallCredentials;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.CompositeChannelCredentials;\n+import io.grpc.ExperimentalApi;\n+import io.grpc.Status;\n+import io.grpc.alts.internal.AltsProtocolNegotiator.GoogleDefaultProtocolNegotiatorFactory;\n+import io.grpc.auth.MoreCallCredentials;\n+import io.grpc.internal.SharedResourcePool;\n+import io.grpc.netty.GrpcSslContexts;\n+import io.grpc.netty.InternalNettyChannelCredentials;\n+import io.grpc.netty.InternalProtocolNegotiator;\n+import io.netty.handler.ssl.SslContext;\n+import java.io.IOException;\n+import javax.net.ssl.SSLException;\n+\n+/**\n+ * Google default credentials. This class sets up a secure channel using ALTS if applicable and\n+ * using TLS as fallback.\n+ */\n+@ExperimentalApi(\"TODO\")\n+public final class GoogleDefaultChannelCredentials {\n+  private GoogleDefaultChannelCredentials() {}\n+\n+  /**\n+   * Creates Google default credentials uses a secure channel with ALTS if applicable and uses TLS\n+   * as fallback.\n+   */\n+  public static ChannelCredentials create() {\n+    ChannelCredentials googleDefaultNegotiator =\n+        InternalNettyChannelCredentials.create(createClientFactory());\n+    CallCredentials callCredentials;\n+    try {\n+      callCredentials = MoreCallCredentials.from(GoogleCredentials.getApplicationDefault());\n+    } catch (IOException e) {\n+      // TODO(ejona): Should this just throw?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNjY0Mw=="}, "originalCommit": {"oid": "d2dc5c6fe6066ef0cd8a07498b1a2be66bdf1a41"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE5NDkwNA==", "bodyText": "It looks like we shall also call CheckGcpEnvironment.isOnGcp() for GoogleDefaultChannelCredentials.\nDo we expect caller of GoogleDefaultChannelCredentials outside GCP? It is not safe to call ALTS without GCP platform check.\nIf we do plan to support GoogleDefaultChannelCredentials outside GCP, we can do platform check, if running outside GCP, disable ALTS, only TLS is allowed. WDYT?", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r474194904", "createdAt": "2020-08-20T18:41:23Z", "author": {"login": "jiangtaoli2016"}, "path": "alts/src/main/java/io/grpc/alts/GoogleDefaultChannelCredentials.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.alts;\n+\n+import com.google.auth.oauth2.GoogleCredentials;\n+import com.google.common.collect.ImmutableList;\n+import io.grpc.CallCredentials;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.CompositeChannelCredentials;\n+import io.grpc.ExperimentalApi;\n+import io.grpc.Status;\n+import io.grpc.alts.internal.AltsProtocolNegotiator.GoogleDefaultProtocolNegotiatorFactory;\n+import io.grpc.auth.MoreCallCredentials;\n+import io.grpc.internal.SharedResourcePool;\n+import io.grpc.netty.GrpcSslContexts;\n+import io.grpc.netty.InternalNettyChannelCredentials;\n+import io.grpc.netty.InternalProtocolNegotiator;\n+import io.netty.handler.ssl.SslContext;\n+import java.io.IOException;\n+import javax.net.ssl.SSLException;\n+\n+/**\n+ * Google default credentials. This class sets up a secure channel using ALTS if applicable and\n+ * using TLS as fallback.\n+ */\n+@ExperimentalApi(\"TODO\")\n+public final class GoogleDefaultChannelCredentials {\n+  private GoogleDefaultChannelCredentials() {}\n+\n+  /**\n+   * Creates Google default credentials uses a secure channel with ALTS if applicable and uses TLS\n+   * as fallback.\n+   */\n+  public static ChannelCredentials create() {\n+    ChannelCredentials googleDefaultNegotiator =\n+        InternalNettyChannelCredentials.create(createClientFactory());\n+    CallCredentials callCredentials;\n+    try {\n+      callCredentials = MoreCallCredentials.from(GoogleCredentials.getApplicationDefault());\n+    } catch (IOException e) {\n+      // TODO(ejona): Should this just throw?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNjY0Mw=="}, "originalCommit": {"oid": "d2dc5c6fe6066ef0cd8a07498b1a2be66bdf1a41"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIwODk2Mw==", "bodyText": "Do we expect caller of GoogleDefaultChannelCredentials outside GCP? It is not safe to call ALTS without GCP platform check.\n\nAbsolutely we do. In that case we won't get any gRPCLB addresses and so won't trigger the ALTS code path.\nThe entire point of GoogleDefaultChannelCredentials (which mirrors C core) is to auto-select the proper credentials to use when communicating with Google independent of where you are. Just like GoogleCredentials.getApplicationDefault().\nIn any case, I do not want to change existing behavior in this PR.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r474208963", "createdAt": "2020-08-20T19:08:14Z", "author": {"login": "ejona86"}, "path": "alts/src/main/java/io/grpc/alts/GoogleDefaultChannelCredentials.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.alts;\n+\n+import com.google.auth.oauth2.GoogleCredentials;\n+import com.google.common.collect.ImmutableList;\n+import io.grpc.CallCredentials;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.CompositeChannelCredentials;\n+import io.grpc.ExperimentalApi;\n+import io.grpc.Status;\n+import io.grpc.alts.internal.AltsProtocolNegotiator.GoogleDefaultProtocolNegotiatorFactory;\n+import io.grpc.auth.MoreCallCredentials;\n+import io.grpc.internal.SharedResourcePool;\n+import io.grpc.netty.GrpcSslContexts;\n+import io.grpc.netty.InternalNettyChannelCredentials;\n+import io.grpc.netty.InternalProtocolNegotiator;\n+import io.netty.handler.ssl.SslContext;\n+import java.io.IOException;\n+import javax.net.ssl.SSLException;\n+\n+/**\n+ * Google default credentials. This class sets up a secure channel using ALTS if applicable and\n+ * using TLS as fallback.\n+ */\n+@ExperimentalApi(\"TODO\")\n+public final class GoogleDefaultChannelCredentials {\n+  private GoogleDefaultChannelCredentials() {}\n+\n+  /**\n+   * Creates Google default credentials uses a secure channel with ALTS if applicable and uses TLS\n+   * as fallback.\n+   */\n+  public static ChannelCredentials create() {\n+    ChannelCredentials googleDefaultNegotiator =\n+        InternalNettyChannelCredentials.create(createClientFactory());\n+    CallCredentials callCredentials;\n+    try {\n+      callCredentials = MoreCallCredentials.from(GoogleCredentials.getApplicationDefault());\n+    } catch (IOException e) {\n+      // TODO(ejona): Should this just throw?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNjY0Mw=="}, "originalCommit": {"oid": "d2dc5c6fe6066ef0cd8a07498b1a2be66bdf1a41"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIxOTQxNA==", "bodyText": "IIUC, google_default_credentials in c core can only be run on GCP. Agree this PR should not change existing behavior.\nIt is reasonable to not perform GCP check for GoogleDefaultCredentials, as we trust DNS to signal if we enable ALTS or not. If GDC runs outside GCP, ALTS code path won't be triggered.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r474219414", "createdAt": "2020-08-20T19:28:25Z", "author": {"login": "jiangtaoli2016"}, "path": "alts/src/main/java/io/grpc/alts/GoogleDefaultChannelCredentials.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.alts;\n+\n+import com.google.auth.oauth2.GoogleCredentials;\n+import com.google.common.collect.ImmutableList;\n+import io.grpc.CallCredentials;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.CompositeChannelCredentials;\n+import io.grpc.ExperimentalApi;\n+import io.grpc.Status;\n+import io.grpc.alts.internal.AltsProtocolNegotiator.GoogleDefaultProtocolNegotiatorFactory;\n+import io.grpc.auth.MoreCallCredentials;\n+import io.grpc.internal.SharedResourcePool;\n+import io.grpc.netty.GrpcSslContexts;\n+import io.grpc.netty.InternalNettyChannelCredentials;\n+import io.grpc.netty.InternalProtocolNegotiator;\n+import io.netty.handler.ssl.SslContext;\n+import java.io.IOException;\n+import javax.net.ssl.SSLException;\n+\n+/**\n+ * Google default credentials. This class sets up a secure channel using ALTS if applicable and\n+ * using TLS as fallback.\n+ */\n+@ExperimentalApi(\"TODO\")\n+public final class GoogleDefaultChannelCredentials {\n+  private GoogleDefaultChannelCredentials() {}\n+\n+  /**\n+   * Creates Google default credentials uses a secure channel with ALTS if applicable and uses TLS\n+   * as fallback.\n+   */\n+  public static ChannelCredentials create() {\n+    ChannelCredentials googleDefaultNegotiator =\n+        InternalNettyChannelCredentials.create(createClientFactory());\n+    CallCredentials callCredentials;\n+    try {\n+      callCredentials = MoreCallCredentials.from(GoogleCredentials.getApplicationDefault());\n+    } catch (IOException e) {\n+      // TODO(ejona): Should this just throw?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNjY0Mw=="}, "originalCommit": {"oid": "d2dc5c6fe6066ef0cd8a07498b1a2be66bdf1a41"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg0NDgzMw==", "bodyText": "ComputeEngineChannelCredentials is the one restricted to GCP. No reason to restrict GoogleDefaultChannelCredentials to GCP (similar to the behavior of GoogleDefaultChannelBuilder)", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r478844833", "createdAt": "2020-08-28T05:50:44Z", "author": {"login": "sanjaypujare"}, "path": "alts/src/main/java/io/grpc/alts/GoogleDefaultChannelCredentials.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.alts;\n+\n+import com.google.auth.oauth2.GoogleCredentials;\n+import com.google.common.collect.ImmutableList;\n+import io.grpc.CallCredentials;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.CompositeChannelCredentials;\n+import io.grpc.ExperimentalApi;\n+import io.grpc.Status;\n+import io.grpc.alts.internal.AltsProtocolNegotiator.GoogleDefaultProtocolNegotiatorFactory;\n+import io.grpc.auth.MoreCallCredentials;\n+import io.grpc.internal.SharedResourcePool;\n+import io.grpc.netty.GrpcSslContexts;\n+import io.grpc.netty.InternalNettyChannelCredentials;\n+import io.grpc.netty.InternalProtocolNegotiator;\n+import io.netty.handler.ssl.SslContext;\n+import java.io.IOException;\n+import javax.net.ssl.SSLException;\n+\n+/**\n+ * Google default credentials. This class sets up a secure channel using ALTS if applicable and\n+ * using TLS as fallback.\n+ */\n+@ExperimentalApi(\"TODO\")\n+public final class GoogleDefaultChannelCredentials {\n+  private GoogleDefaultChannelCredentials() {}\n+\n+  /**\n+   * Creates Google default credentials uses a secure channel with ALTS if applicable and uses TLS\n+   * as fallback.\n+   */\n+  public static ChannelCredentials create() {\n+    ChannelCredentials googleDefaultNegotiator =\n+        InternalNettyChannelCredentials.create(createClientFactory());\n+    CallCredentials callCredentials;\n+    try {\n+      callCredentials = MoreCallCredentials.from(GoogleCredentials.getApplicationDefault());\n+    } catch (IOException e) {\n+      // TODO(ejona): Should this just throw?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEzNjY0Mw=="}, "originalCommit": {"oid": "d2dc5c6fe6066ef0cd8a07498b1a2be66bdf1a41"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzY1NDk4OnYy", "diffSide": "LEFT", "path": "alts/src/test/java/io/grpc/alts/ComputeEngineChannelBuilderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNzoyODozMVrOHEMH2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNzozMTozMFrOHEMOOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE1NDk3MA==", "bodyText": "With this part removed, does this test serve any\u00a0useful purpose? Is there a way we can verify the protocolNegotiatorFactory in the delegate?", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r474154970", "createdAt": "2020-08-20T17:28:31Z", "author": {"login": "sanjaypujare"}, "path": "alts/src/test/java/io/grpc/alts/ComputeEngineChannelBuilderTest.java", "diffHunk": "@@ -30,9 +27,5 @@\n   public void buildsNettyChannel() throws Exception {\n     ComputeEngineChannelBuilder builder = ComputeEngineChannelBuilder.forTarget(\"localhost:8080\");\n     builder.build();\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2dc5c6fe6066ef0cd8a07498b1a2be66bdf1a41"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE1NjYwMw==", "bodyText": "It does verify that the builder doesn't throw. I don't think the test really had much benefit before either.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r474156603", "createdAt": "2020-08-20T17:31:30Z", "author": {"login": "ejona86"}, "path": "alts/src/test/java/io/grpc/alts/ComputeEngineChannelBuilderTest.java", "diffHunk": "@@ -30,9 +27,5 @@\n   public void buildsNettyChannel() throws Exception {\n     ComputeEngineChannelBuilder builder = ComputeEngineChannelBuilder.forTarget(\"localhost:8080\");\n     builder.build();\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE1NDk3MA=="}, "originalCommit": {"oid": "d2dc5c6fe6066ef0cd8a07498b1a2be66bdf1a41"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzgwNzA5OnYy", "diffSide": "RIGHT", "path": "alts/src/main/java/io/grpc/alts/AltsChannelCredentials.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODoxMjo0MlrOHENmLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOToyMzozM1rOHEP55g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3OTExOA==", "bodyText": "Just curious, why credentials API needs to expose port (in particular for client credentials).", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r474179118", "createdAt": "2020-08-20T18:12:42Z", "author": {"login": "jiangtaoli2016"}, "path": "alts/src/main/java/io/grpc/alts/AltsChannelCredentials.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.alts;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.grpc.Channel;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.ExperimentalApi;\n+import io.grpc.Status;\n+import io.grpc.alts.internal.AltsProtocolNegotiator.ClientAltsProtocolNegotiatorFactory;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.internal.SharedResourcePool;\n+import io.grpc.netty.GrpcHttp2ConnectionHandler;\n+import io.grpc.netty.InternalNettyChannelCredentials;\n+import io.grpc.netty.InternalProtocolNegotiator;\n+import io.grpc.netty.InternalProtocolNegotiator.ProtocolNegotiator;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerAdapter;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.util.AsciiString;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * ALTS secure credentials. This class sets up a secure and authenticated commmunication between two\n+ * cloud VMs using ALTS.\n+ */\n+@ExperimentalApi(\"https://github.com/grpc/grpc-java/issues/4151\")\n+public final class AltsChannelCredentials {\n+  private static final Logger logger = Logger.getLogger(AltsChannelCredentials.class.getName());\n+\n+  private AltsChannelCredentials() {}\n+\n+  public static ChannelCredentials create() {\n+    return newBuilder().build();\n+  }\n+\n+  public static Builder newBuilder() {\n+    return new Builder();\n+  }\n+\n+  public static final class Builder {\n+    private final ImmutableList.Builder<String> targetServiceAccountsBuilder =\n+        ImmutableList.builder();\n+    private ObjectPool<Channel> handshakerChannelPool =\n+        SharedResourcePool.forResource(HandshakerServiceChannel.SHARED_HANDSHAKER_CHANNEL);\n+    private boolean enableUntrustedAlts;\n+\n+    /**\n+     * Adds an expected target service accounts. One of the added service accounts should match peer\n+     * service account in the handshaker result. Otherwise, the handshake fails.\n+     */\n+    public Builder addTargetServiceAccount(String targetServiceAccount) {\n+      targetServiceAccountsBuilder.add(targetServiceAccount);\n+      return this;\n+    }\n+\n+    /**\n+     * Enables untrusted ALTS for testing. If this function is called, we will not check whether\n+     * ALTS is running on Google Cloud Platform.\n+     */\n+    public Builder enableUntrustedAltsForTesting() {\n+      enableUntrustedAlts = true;\n+      return this;\n+    }\n+\n+    /** Sets a new handshaker service address for testing. */\n+    public Builder setHandshakerAddressForTesting(String handshakerAddress) {\n+      // Instead of using the default shared channel to the handshaker service, create a separate\n+      // resource to the test address.\n+      handshakerChannelPool =\n+          SharedResourcePool.forResource(\n+              HandshakerServiceChannel.getHandshakerChannelForTesting(handshakerAddress));\n+      return this;\n+    }\n+\n+    public ChannelCredentials build() {\n+      return InternalNettyChannelCredentials.create(buildProtocolNegotiatorFactory());\n+    }\n+\n+    InternalProtocolNegotiator.ClientFactory buildProtocolNegotiatorFactory() {\n+      if (!CheckGcpEnvironment.isOnGcp()) {\n+        if (enableUntrustedAlts) {\n+          logger.log(\n+              Level.WARNING,\n+              \"Untrusted ALTS mode is enabled and we cannot guarantee the trustworthiness of the \"\n+                  + \"ALTS handshaker service\");\n+        } else {\n+          Status status = Status.INTERNAL.withDescription(\n+              \"ALTS is only allowed to run on Google Cloud Platform\");\n+          return new FailingProtocolNegotiatorFactory(status);\n+        }\n+      }\n+\n+      return new ClientAltsProtocolNegotiatorFactory(\n+          targetServiceAccountsBuilder.build(), handshakerChannelPool);\n+    }\n+  }\n+\n+  private static final class FailingProtocolNegotiatorFactory\n+      implements InternalProtocolNegotiator.ClientFactory {\n+    private final Status status;\n+\n+    public FailingProtocolNegotiatorFactory(Status status) {\n+      this.status = status;\n+    }\n+\n+    @Override\n+    public ProtocolNegotiator newNegotiator() {\n+      return new FailingProtocolNegotiator(status);\n+    }\n+\n+    @Override\n+    public int getDefaultPort() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE5MTU0Mw==", "bodyText": "Because plaintext would use port 80. All existing credentials other than plaintext have been using 443.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r474191543", "createdAt": "2020-08-20T18:35:21Z", "author": {"login": "ejona86"}, "path": "alts/src/main/java/io/grpc/alts/AltsChannelCredentials.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.alts;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.grpc.Channel;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.ExperimentalApi;\n+import io.grpc.Status;\n+import io.grpc.alts.internal.AltsProtocolNegotiator.ClientAltsProtocolNegotiatorFactory;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.internal.SharedResourcePool;\n+import io.grpc.netty.GrpcHttp2ConnectionHandler;\n+import io.grpc.netty.InternalNettyChannelCredentials;\n+import io.grpc.netty.InternalProtocolNegotiator;\n+import io.grpc.netty.InternalProtocolNegotiator.ProtocolNegotiator;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerAdapter;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.util.AsciiString;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * ALTS secure credentials. This class sets up a secure and authenticated commmunication between two\n+ * cloud VMs using ALTS.\n+ */\n+@ExperimentalApi(\"https://github.com/grpc/grpc-java/issues/4151\")\n+public final class AltsChannelCredentials {\n+  private static final Logger logger = Logger.getLogger(AltsChannelCredentials.class.getName());\n+\n+  private AltsChannelCredentials() {}\n+\n+  public static ChannelCredentials create() {\n+    return newBuilder().build();\n+  }\n+\n+  public static Builder newBuilder() {\n+    return new Builder();\n+  }\n+\n+  public static final class Builder {\n+    private final ImmutableList.Builder<String> targetServiceAccountsBuilder =\n+        ImmutableList.builder();\n+    private ObjectPool<Channel> handshakerChannelPool =\n+        SharedResourcePool.forResource(HandshakerServiceChannel.SHARED_HANDSHAKER_CHANNEL);\n+    private boolean enableUntrustedAlts;\n+\n+    /**\n+     * Adds an expected target service accounts. One of the added service accounts should match peer\n+     * service account in the handshaker result. Otherwise, the handshake fails.\n+     */\n+    public Builder addTargetServiceAccount(String targetServiceAccount) {\n+      targetServiceAccountsBuilder.add(targetServiceAccount);\n+      return this;\n+    }\n+\n+    /**\n+     * Enables untrusted ALTS for testing. If this function is called, we will not check whether\n+     * ALTS is running on Google Cloud Platform.\n+     */\n+    public Builder enableUntrustedAltsForTesting() {\n+      enableUntrustedAlts = true;\n+      return this;\n+    }\n+\n+    /** Sets a new handshaker service address for testing. */\n+    public Builder setHandshakerAddressForTesting(String handshakerAddress) {\n+      // Instead of using the default shared channel to the handshaker service, create a separate\n+      // resource to the test address.\n+      handshakerChannelPool =\n+          SharedResourcePool.forResource(\n+              HandshakerServiceChannel.getHandshakerChannelForTesting(handshakerAddress));\n+      return this;\n+    }\n+\n+    public ChannelCredentials build() {\n+      return InternalNettyChannelCredentials.create(buildProtocolNegotiatorFactory());\n+    }\n+\n+    InternalProtocolNegotiator.ClientFactory buildProtocolNegotiatorFactory() {\n+      if (!CheckGcpEnvironment.isOnGcp()) {\n+        if (enableUntrustedAlts) {\n+          logger.log(\n+              Level.WARNING,\n+              \"Untrusted ALTS mode is enabled and we cannot guarantee the trustworthiness of the \"\n+                  + \"ALTS handshaker service\");\n+        } else {\n+          Status status = Status.INTERNAL.withDescription(\n+              \"ALTS is only allowed to run on Google Cloud Platform\");\n+          return new FailingProtocolNegotiatorFactory(status);\n+        }\n+      }\n+\n+      return new ClientAltsProtocolNegotiatorFactory(\n+          targetServiceAccountsBuilder.build(), handshakerChannelPool);\n+    }\n+  }\n+\n+  private static final class FailingProtocolNegotiatorFactory\n+      implements InternalProtocolNegotiator.ClientFactory {\n+    private final Status status;\n+\n+    public FailingProtocolNegotiatorFactory(Status status) {\n+      this.status = status;\n+    }\n+\n+    @Override\n+    public ProtocolNegotiator newNegotiator() {\n+      return new FailingProtocolNegotiator(status);\n+    }\n+\n+    @Override\n+    public int getDefaultPort() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3OTExOA=="}, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE5NjIyOA==", "bodyText": "My point is why we expose the port from credentials, not from channel or server?", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r474196228", "createdAt": "2020-08-20T18:43:46Z", "author": {"login": "jiangtaoli2016"}, "path": "alts/src/main/java/io/grpc/alts/AltsChannelCredentials.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.alts;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.grpc.Channel;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.ExperimentalApi;\n+import io.grpc.Status;\n+import io.grpc.alts.internal.AltsProtocolNegotiator.ClientAltsProtocolNegotiatorFactory;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.internal.SharedResourcePool;\n+import io.grpc.netty.GrpcHttp2ConnectionHandler;\n+import io.grpc.netty.InternalNettyChannelCredentials;\n+import io.grpc.netty.InternalProtocolNegotiator;\n+import io.grpc.netty.InternalProtocolNegotiator.ProtocolNegotiator;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerAdapter;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.util.AsciiString;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * ALTS secure credentials. This class sets up a secure and authenticated commmunication between two\n+ * cloud VMs using ALTS.\n+ */\n+@ExperimentalApi(\"https://github.com/grpc/grpc-java/issues/4151\")\n+public final class AltsChannelCredentials {\n+  private static final Logger logger = Logger.getLogger(AltsChannelCredentials.class.getName());\n+\n+  private AltsChannelCredentials() {}\n+\n+  public static ChannelCredentials create() {\n+    return newBuilder().build();\n+  }\n+\n+  public static Builder newBuilder() {\n+    return new Builder();\n+  }\n+\n+  public static final class Builder {\n+    private final ImmutableList.Builder<String> targetServiceAccountsBuilder =\n+        ImmutableList.builder();\n+    private ObjectPool<Channel> handshakerChannelPool =\n+        SharedResourcePool.forResource(HandshakerServiceChannel.SHARED_HANDSHAKER_CHANNEL);\n+    private boolean enableUntrustedAlts;\n+\n+    /**\n+     * Adds an expected target service accounts. One of the added service accounts should match peer\n+     * service account in the handshaker result. Otherwise, the handshake fails.\n+     */\n+    public Builder addTargetServiceAccount(String targetServiceAccount) {\n+      targetServiceAccountsBuilder.add(targetServiceAccount);\n+      return this;\n+    }\n+\n+    /**\n+     * Enables untrusted ALTS for testing. If this function is called, we will not check whether\n+     * ALTS is running on Google Cloud Platform.\n+     */\n+    public Builder enableUntrustedAltsForTesting() {\n+      enableUntrustedAlts = true;\n+      return this;\n+    }\n+\n+    /** Sets a new handshaker service address for testing. */\n+    public Builder setHandshakerAddressForTesting(String handshakerAddress) {\n+      // Instead of using the default shared channel to the handshaker service, create a separate\n+      // resource to the test address.\n+      handshakerChannelPool =\n+          SharedResourcePool.forResource(\n+              HandshakerServiceChannel.getHandshakerChannelForTesting(handshakerAddress));\n+      return this;\n+    }\n+\n+    public ChannelCredentials build() {\n+      return InternalNettyChannelCredentials.create(buildProtocolNegotiatorFactory());\n+    }\n+\n+    InternalProtocolNegotiator.ClientFactory buildProtocolNegotiatorFactory() {\n+      if (!CheckGcpEnvironment.isOnGcp()) {\n+        if (enableUntrustedAlts) {\n+          logger.log(\n+              Level.WARNING,\n+              \"Untrusted ALTS mode is enabled and we cannot guarantee the trustworthiness of the \"\n+                  + \"ALTS handshaker service\");\n+        } else {\n+          Status status = Status.INTERNAL.withDescription(\n+              \"ALTS is only allowed to run on Google Cloud Platform\");\n+          return new FailingProtocolNegotiatorFactory(status);\n+        }\n+      }\n+\n+      return new ClientAltsProtocolNegotiatorFactory(\n+          targetServiceAccountsBuilder.build(), handshakerChannelPool);\n+    }\n+  }\n+\n+  private static final class FailingProtocolNegotiatorFactory\n+      implements InternalProtocolNegotiator.ClientFactory {\n+    private final Status status;\n+\n+    public FailingProtocolNegotiatorFactory(Status status) {\n+      this.status = status;\n+    }\n+\n+    @Override\n+    public ProtocolNegotiator newNegotiator() {\n+      return new FailingProtocolNegotiator(status);\n+    }\n+\n+    @Override\n+    public int getDefaultPort() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3OTExOA=="}, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIwOTUzOQ==", "bodyText": "This port is used when the user does not specify one. If the user uses the target string \"example.com\" (instead of \"example.com:80\" or \"example.com:443\") this is used.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r474209539", "createdAt": "2020-08-20T19:09:29Z", "author": {"login": "ejona86"}, "path": "alts/src/main/java/io/grpc/alts/AltsChannelCredentials.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.alts;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.grpc.Channel;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.ExperimentalApi;\n+import io.grpc.Status;\n+import io.grpc.alts.internal.AltsProtocolNegotiator.ClientAltsProtocolNegotiatorFactory;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.internal.SharedResourcePool;\n+import io.grpc.netty.GrpcHttp2ConnectionHandler;\n+import io.grpc.netty.InternalNettyChannelCredentials;\n+import io.grpc.netty.InternalProtocolNegotiator;\n+import io.grpc.netty.InternalProtocolNegotiator.ProtocolNegotiator;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerAdapter;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.util.AsciiString;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * ALTS secure credentials. This class sets up a secure and authenticated commmunication between two\n+ * cloud VMs using ALTS.\n+ */\n+@ExperimentalApi(\"https://github.com/grpc/grpc-java/issues/4151\")\n+public final class AltsChannelCredentials {\n+  private static final Logger logger = Logger.getLogger(AltsChannelCredentials.class.getName());\n+\n+  private AltsChannelCredentials() {}\n+\n+  public static ChannelCredentials create() {\n+    return newBuilder().build();\n+  }\n+\n+  public static Builder newBuilder() {\n+    return new Builder();\n+  }\n+\n+  public static final class Builder {\n+    private final ImmutableList.Builder<String> targetServiceAccountsBuilder =\n+        ImmutableList.builder();\n+    private ObjectPool<Channel> handshakerChannelPool =\n+        SharedResourcePool.forResource(HandshakerServiceChannel.SHARED_HANDSHAKER_CHANNEL);\n+    private boolean enableUntrustedAlts;\n+\n+    /**\n+     * Adds an expected target service accounts. One of the added service accounts should match peer\n+     * service account in the handshaker result. Otherwise, the handshake fails.\n+     */\n+    public Builder addTargetServiceAccount(String targetServiceAccount) {\n+      targetServiceAccountsBuilder.add(targetServiceAccount);\n+      return this;\n+    }\n+\n+    /**\n+     * Enables untrusted ALTS for testing. If this function is called, we will not check whether\n+     * ALTS is running on Google Cloud Platform.\n+     */\n+    public Builder enableUntrustedAltsForTesting() {\n+      enableUntrustedAlts = true;\n+      return this;\n+    }\n+\n+    /** Sets a new handshaker service address for testing. */\n+    public Builder setHandshakerAddressForTesting(String handshakerAddress) {\n+      // Instead of using the default shared channel to the handshaker service, create a separate\n+      // resource to the test address.\n+      handshakerChannelPool =\n+          SharedResourcePool.forResource(\n+              HandshakerServiceChannel.getHandshakerChannelForTesting(handshakerAddress));\n+      return this;\n+    }\n+\n+    public ChannelCredentials build() {\n+      return InternalNettyChannelCredentials.create(buildProtocolNegotiatorFactory());\n+    }\n+\n+    InternalProtocolNegotiator.ClientFactory buildProtocolNegotiatorFactory() {\n+      if (!CheckGcpEnvironment.isOnGcp()) {\n+        if (enableUntrustedAlts) {\n+          logger.log(\n+              Level.WARNING,\n+              \"Untrusted ALTS mode is enabled and we cannot guarantee the trustworthiness of the \"\n+                  + \"ALTS handshaker service\");\n+        } else {\n+          Status status = Status.INTERNAL.withDescription(\n+              \"ALTS is only allowed to run on Google Cloud Platform\");\n+          return new FailingProtocolNegotiatorFactory(status);\n+        }\n+      }\n+\n+      return new ClientAltsProtocolNegotiatorFactory(\n+          targetServiceAccountsBuilder.build(), handshakerChannelPool);\n+    }\n+  }\n+\n+  private static final class FailingProtocolNegotiatorFactory\n+      implements InternalProtocolNegotiator.ClientFactory {\n+    private final Status status;\n+\n+    public FailingProtocolNegotiatorFactory(Status status) {\n+      this.status = status;\n+    }\n+\n+    @Override\n+    public ProtocolNegotiator newNegotiator() {\n+      return new FailingProtocolNegotiator(status);\n+    }\n+\n+    @Override\n+    public int getDefaultPort() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3OTExOA=="}, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIxNjkzNA==", "bodyText": "Thanks for clarification.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r474216934", "createdAt": "2020-08-20T19:23:33Z", "author": {"login": "jiangtaoli2016"}, "path": "alts/src/main/java/io/grpc/alts/AltsChannelCredentials.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.alts;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.grpc.Channel;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.ExperimentalApi;\n+import io.grpc.Status;\n+import io.grpc.alts.internal.AltsProtocolNegotiator.ClientAltsProtocolNegotiatorFactory;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.internal.SharedResourcePool;\n+import io.grpc.netty.GrpcHttp2ConnectionHandler;\n+import io.grpc.netty.InternalNettyChannelCredentials;\n+import io.grpc.netty.InternalProtocolNegotiator;\n+import io.grpc.netty.InternalProtocolNegotiator.ProtocolNegotiator;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerAdapter;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.util.AsciiString;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * ALTS secure credentials. This class sets up a secure and authenticated commmunication between two\n+ * cloud VMs using ALTS.\n+ */\n+@ExperimentalApi(\"https://github.com/grpc/grpc-java/issues/4151\")\n+public final class AltsChannelCredentials {\n+  private static final Logger logger = Logger.getLogger(AltsChannelCredentials.class.getName());\n+\n+  private AltsChannelCredentials() {}\n+\n+  public static ChannelCredentials create() {\n+    return newBuilder().build();\n+  }\n+\n+  public static Builder newBuilder() {\n+    return new Builder();\n+  }\n+\n+  public static final class Builder {\n+    private final ImmutableList.Builder<String> targetServiceAccountsBuilder =\n+        ImmutableList.builder();\n+    private ObjectPool<Channel> handshakerChannelPool =\n+        SharedResourcePool.forResource(HandshakerServiceChannel.SHARED_HANDSHAKER_CHANNEL);\n+    private boolean enableUntrustedAlts;\n+\n+    /**\n+     * Adds an expected target service accounts. One of the added service accounts should match peer\n+     * service account in the handshaker result. Otherwise, the handshake fails.\n+     */\n+    public Builder addTargetServiceAccount(String targetServiceAccount) {\n+      targetServiceAccountsBuilder.add(targetServiceAccount);\n+      return this;\n+    }\n+\n+    /**\n+     * Enables untrusted ALTS for testing. If this function is called, we will not check whether\n+     * ALTS is running on Google Cloud Platform.\n+     */\n+    public Builder enableUntrustedAltsForTesting() {\n+      enableUntrustedAlts = true;\n+      return this;\n+    }\n+\n+    /** Sets a new handshaker service address for testing. */\n+    public Builder setHandshakerAddressForTesting(String handshakerAddress) {\n+      // Instead of using the default shared channel to the handshaker service, create a separate\n+      // resource to the test address.\n+      handshakerChannelPool =\n+          SharedResourcePool.forResource(\n+              HandshakerServiceChannel.getHandshakerChannelForTesting(handshakerAddress));\n+      return this;\n+    }\n+\n+    public ChannelCredentials build() {\n+      return InternalNettyChannelCredentials.create(buildProtocolNegotiatorFactory());\n+    }\n+\n+    InternalProtocolNegotiator.ClientFactory buildProtocolNegotiatorFactory() {\n+      if (!CheckGcpEnvironment.isOnGcp()) {\n+        if (enableUntrustedAlts) {\n+          logger.log(\n+              Level.WARNING,\n+              \"Untrusted ALTS mode is enabled and we cannot guarantee the trustworthiness of the \"\n+                  + \"ALTS handshaker service\");\n+        } else {\n+          Status status = Status.INTERNAL.withDescription(\n+              \"ALTS is only allowed to run on Google Cloud Platform\");\n+          return new FailingProtocolNegotiatorFactory(status);\n+        }\n+      }\n+\n+      return new ClientAltsProtocolNegotiatorFactory(\n+          targetServiceAccountsBuilder.build(), handshakerChannelPool);\n+    }\n+  }\n+\n+  private static final class FailingProtocolNegotiatorFactory\n+      implements InternalProtocolNegotiator.ClientFactory {\n+    private final Status status;\n+\n+    public FailingProtocolNegotiatorFactory(Status status) {\n+      this.status = status;\n+    }\n+\n+    @Override\n+    public ProtocolNegotiator newNegotiator() {\n+      return new FailingProtocolNegotiator(status);\n+    }\n+\n+    @Override\n+    public int getDefaultPort() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3OTExOA=="}, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDAxOTQ4OnYy", "diffSide": "RIGHT", "path": "alts/src/main/java/io/grpc/alts/GoogleDefaultChannelBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOToxNTo1MlrOHEPqWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOToyOToyOFrOHEQFzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIxMjk1Mg==", "bodyText": "Couple of points/questions:\n\n\nwith the introduction of GoogleDefaultChannelCredentials and ComputeEngineChannelCredentials the builders GoogleDefaultChannelBuilder and ComputeEngineChannelBuilder are just wrappers and don't have much logic. A user can just use the new creds with NettyChannelBuilder. Is the plan to eventually deprecate and remove the builder classes?\n\n\nIf a user creates GoogleDefaultChannelCredentials or ComputeEngineChannelCredentials and passes it to Grpc#newChannelBuilder it should work, right? Should that be only and recommended way? So they don't even need to use NettyChannelBuilder?", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r474212952", "createdAt": "2020-08-20T19:15:52Z", "author": {"login": "sanjaypujare"}, "path": "alts/src/main/java/io/grpc/alts/GoogleDefaultChannelBuilder.java", "diffHunk": "@@ -16,25 +16,10 @@\n \n package io.grpc.alts;\n \n-import com.google.auth.oauth2.GoogleCredentials;\n-import com.google.common.annotations.VisibleForTesting;\n-import com.google.common.collect.ImmutableList;\n-import io.grpc.CallCredentials;\n import io.grpc.ForwardingChannelBuilder;\n import io.grpc.ManagedChannelBuilder;\n-import io.grpc.Status;\n-import io.grpc.alts.internal.AltsProtocolNegotiator.GoogleDefaultProtocolNegotiatorFactory;\n-import io.grpc.auth.MoreCallCredentials;\n import io.grpc.internal.GrpcUtil;\n-import io.grpc.internal.SharedResourcePool;\n-import io.grpc.netty.GrpcSslContexts;\n-import io.grpc.netty.InternalNettyChannelBuilder;\n-import io.grpc.netty.InternalProtocolNegotiator.ProtocolNegotiator;\n import io.grpc.netty.NettyChannelBuilder;\n-import io.netty.handler.ssl.SslContext;\n-import java.io.IOException;\n-import javax.annotation.Nullable;\n-import javax.net.ssl.SSLException;\n \n /**\n  * Google default version of {@code ManagedChannelBuilder}. This class sets up a secure channel", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIxOTk4Mg==", "bodyText": "GoogleDefaultChannelBuilder and ComputeEngineChannelBuilder are stable APIs; they can't be removed. They could be deprecated, although I'd move slowly to do so.\nYou can pass the two credentials to either Grpc.newChannelBuilder or NettyChannelBuilder and it'd work. Grpc would be the stable API to do so. Using Netty does expose more options on the builder, but it is unstable API.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r474219982", "createdAt": "2020-08-20T19:29:28Z", "author": {"login": "ejona86"}, "path": "alts/src/main/java/io/grpc/alts/GoogleDefaultChannelBuilder.java", "diffHunk": "@@ -16,25 +16,10 @@\n \n package io.grpc.alts;\n \n-import com.google.auth.oauth2.GoogleCredentials;\n-import com.google.common.annotations.VisibleForTesting;\n-import com.google.common.collect.ImmutableList;\n-import io.grpc.CallCredentials;\n import io.grpc.ForwardingChannelBuilder;\n import io.grpc.ManagedChannelBuilder;\n-import io.grpc.Status;\n-import io.grpc.alts.internal.AltsProtocolNegotiator.GoogleDefaultProtocolNegotiatorFactory;\n-import io.grpc.auth.MoreCallCredentials;\n import io.grpc.internal.GrpcUtil;\n-import io.grpc.internal.SharedResourcePool;\n-import io.grpc.netty.GrpcSslContexts;\n-import io.grpc.netty.InternalNettyChannelBuilder;\n-import io.grpc.netty.InternalProtocolNegotiator.ProtocolNegotiator;\n import io.grpc.netty.NettyChannelBuilder;\n-import io.netty.handler.ssl.SslContext;\n-import java.io.IOException;\n-import javax.annotation.Nullable;\n-import javax.net.ssl.SSLException;\n \n /**\n  * Google default version of {@code ManagedChannelBuilder}. This class sets up a secure channel", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIxMjk1Mg=="}, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDA1NDAyOnYy", "diffSide": "RIGHT", "path": "alts/src/main/java/io/grpc/alts/GoogleDefaultChannelCredentials.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOToyNjozOFrOHEQAAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOTozNTo0OFrOHEQX-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIxODQ5OQ==", "bodyText": "This code is identical to ComputeEngineChannelCredentials#createClientFactory and in both cases it doesn't have much to do with the enclosing class. Would be a good idea to move it to AltsProtocolNegotiator?", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r474218499", "createdAt": "2020-08-20T19:26:38Z", "author": {"login": "sanjaypujare"}, "path": "alts/src/main/java/io/grpc/alts/GoogleDefaultChannelCredentials.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.alts;\n+\n+import com.google.auth.oauth2.GoogleCredentials;\n+import com.google.common.collect.ImmutableList;\n+import io.grpc.CallCredentials;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.CompositeChannelCredentials;\n+import io.grpc.ExperimentalApi;\n+import io.grpc.Status;\n+import io.grpc.alts.internal.AltsProtocolNegotiator.GoogleDefaultProtocolNegotiatorFactory;\n+import io.grpc.auth.MoreCallCredentials;\n+import io.grpc.internal.SharedResourcePool;\n+import io.grpc.netty.GrpcSslContexts;\n+import io.grpc.netty.InternalNettyChannelCredentials;\n+import io.grpc.netty.InternalProtocolNegotiator;\n+import io.netty.handler.ssl.SslContext;\n+import java.io.IOException;\n+import javax.net.ssl.SSLException;\n+\n+/**\n+ * Google default credentials. This class sets up a secure channel using ALTS if applicable and\n+ * using TLS as fallback.\n+ */\n+@ExperimentalApi(\"TODO\")\n+public final class GoogleDefaultChannelCredentials {\n+  private GoogleDefaultChannelCredentials() {}\n+\n+  /**\n+   * Creates Google default credentials uses a secure channel with ALTS if applicable and uses TLS\n+   * as fallback.\n+   */\n+  public static ChannelCredentials create() {\n+    ChannelCredentials nettyCredentials =\n+        InternalNettyChannelCredentials.create(createClientFactory());\n+    CallCredentials callCredentials;\n+    try {\n+      callCredentials = MoreCallCredentials.from(GoogleCredentials.getApplicationDefault());\n+    } catch (IOException e) {\n+      // TODO(ejona): Should this just throw?\n+      callCredentials = new FailingCallCredentials(\n+          Status.UNAUTHENTICATED\n+              .withDescription(\"Failed to get Google default credentials\")\n+              .withCause(e));\n+    }\n+    return CompositeChannelCredentials.create(nettyCredentials, callCredentials);\n+  }\n+\n+  private static InternalProtocolNegotiator.ClientFactory createClientFactory() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIyMzk4MQ==", "bodyText": "That'd be fine, but this was just moved code. That'd be up to the normal maintainers of the code.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r474223981", "createdAt": "2020-08-20T19:34:43Z", "author": {"login": "ejona86"}, "path": "alts/src/main/java/io/grpc/alts/GoogleDefaultChannelCredentials.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.alts;\n+\n+import com.google.auth.oauth2.GoogleCredentials;\n+import com.google.common.collect.ImmutableList;\n+import io.grpc.CallCredentials;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.CompositeChannelCredentials;\n+import io.grpc.ExperimentalApi;\n+import io.grpc.Status;\n+import io.grpc.alts.internal.AltsProtocolNegotiator.GoogleDefaultProtocolNegotiatorFactory;\n+import io.grpc.auth.MoreCallCredentials;\n+import io.grpc.internal.SharedResourcePool;\n+import io.grpc.netty.GrpcSslContexts;\n+import io.grpc.netty.InternalNettyChannelCredentials;\n+import io.grpc.netty.InternalProtocolNegotiator;\n+import io.netty.handler.ssl.SslContext;\n+import java.io.IOException;\n+import javax.net.ssl.SSLException;\n+\n+/**\n+ * Google default credentials. This class sets up a secure channel using ALTS if applicable and\n+ * using TLS as fallback.\n+ */\n+@ExperimentalApi(\"TODO\")\n+public final class GoogleDefaultChannelCredentials {\n+  private GoogleDefaultChannelCredentials() {}\n+\n+  /**\n+   * Creates Google default credentials uses a secure channel with ALTS if applicable and uses TLS\n+   * as fallback.\n+   */\n+  public static ChannelCredentials create() {\n+    ChannelCredentials nettyCredentials =\n+        InternalNettyChannelCredentials.create(createClientFactory());\n+    CallCredentials callCredentials;\n+    try {\n+      callCredentials = MoreCallCredentials.from(GoogleCredentials.getApplicationDefault());\n+    } catch (IOException e) {\n+      // TODO(ejona): Should this just throw?\n+      callCredentials = new FailingCallCredentials(\n+          Status.UNAUTHENTICATED\n+              .withDescription(\"Failed to get Google default credentials\")\n+              .withCause(e));\n+    }\n+    return CompositeChannelCredentials.create(nettyCredentials, callCredentials);\n+  }\n+\n+  private static InternalProtocolNegotiator.ClientFactory createClientFactory() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIxODQ5OQ=="}, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIyNDYzNQ==", "bodyText": "I actually already removed two duplicates of it during this change.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r474224635", "createdAt": "2020-08-20T19:35:48Z", "author": {"login": "ejona86"}, "path": "alts/src/main/java/io/grpc/alts/GoogleDefaultChannelCredentials.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.alts;\n+\n+import com.google.auth.oauth2.GoogleCredentials;\n+import com.google.common.collect.ImmutableList;\n+import io.grpc.CallCredentials;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.CompositeChannelCredentials;\n+import io.grpc.ExperimentalApi;\n+import io.grpc.Status;\n+import io.grpc.alts.internal.AltsProtocolNegotiator.GoogleDefaultProtocolNegotiatorFactory;\n+import io.grpc.auth.MoreCallCredentials;\n+import io.grpc.internal.SharedResourcePool;\n+import io.grpc.netty.GrpcSslContexts;\n+import io.grpc.netty.InternalNettyChannelCredentials;\n+import io.grpc.netty.InternalProtocolNegotiator;\n+import io.netty.handler.ssl.SslContext;\n+import java.io.IOException;\n+import javax.net.ssl.SSLException;\n+\n+/**\n+ * Google default credentials. This class sets up a secure channel using ALTS if applicable and\n+ * using TLS as fallback.\n+ */\n+@ExperimentalApi(\"TODO\")\n+public final class GoogleDefaultChannelCredentials {\n+  private GoogleDefaultChannelCredentials() {}\n+\n+  /**\n+   * Creates Google default credentials uses a secure channel with ALTS if applicable and uses TLS\n+   * as fallback.\n+   */\n+  public static ChannelCredentials create() {\n+    ChannelCredentials nettyCredentials =\n+        InternalNettyChannelCredentials.create(createClientFactory());\n+    CallCredentials callCredentials;\n+    try {\n+      callCredentials = MoreCallCredentials.from(GoogleCredentials.getApplicationDefault());\n+    } catch (IOException e) {\n+      // TODO(ejona): Should this just throw?\n+      callCredentials = new FailingCallCredentials(\n+          Status.UNAUTHENTICATED\n+              .withDescription(\"Failed to get Google default credentials\")\n+              .withCause(e));\n+    }\n+    return CompositeChannelCredentials.create(nettyCredentials, callCredentials);\n+  }\n+\n+  private static InternalProtocolNegotiator.ClientFactory createClientFactory() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIxODQ5OQ=="}, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDMzMDE1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/grpc/ManagedChannelRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMDo0NzoyMlrOHESuhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxODoyMTozNVrOHKDjeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI2MzE3Mg==", "bodyText": "Wouldn't the name ManagedChannelProviderRegistry be more appropriate for this class then?", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r474263172", "createdAt": "2020-08-20T20:47:22Z", "author": {"login": "sanjaypujare"}, "path": "api/src/main/java/io/grpc/ManagedChannelRegistry.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * Registry of {@link ManagedChannelProvider}s. The {@link #getDefaultRegistry default instance}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwNjA0MQ==", "bodyText": "I don't entirely disagree, although that would be more verbose. This is the nomenclature we for the other registries (and it's not really caused confusion).", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r480306041", "createdAt": "2020-08-31T18:21:35Z", "author": {"login": "ejona86"}, "path": "api/src/main/java/io/grpc/ManagedChannelRegistry.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * Registry of {@link ManagedChannelProvider}s. The {@link #getDefaultRegistry default instance}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI2MzE3Mg=="}, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDQwNDUyOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/io/grpc/ManagedChannelRegistryAccessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMToxMTowMFrOHETcKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxODoyNDo1MFrOHKDqeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI3NDg1Ng==", "bodyText": "2020? Also similar to my other comment should this be called ManagedChannelProviderRegistryAccessor?", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r474274856", "createdAt": "2020-08-20T21:11:00Z", "author": {"login": "sanjaypujare"}, "path": "api/src/test/java/io/grpc/ManagedChannelRegistryAccessor.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2018 The gRPC Authors\n+ * Copyright 2019 The gRPC Authors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwNzgzMg==", "bodyText": "Good eye. Fixed. Also fixed ComputeEngineChannelCredentials\nIt would be renamed if we renamed the other, but I don't think the other will be renamed.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r480307832", "createdAt": "2020-08-31T18:24:50Z", "author": {"login": "ejona86"}, "path": "api/src/test/java/io/grpc/ManagedChannelRegistryAccessor.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2018 The gRPC Authors\n+ * Copyright 2019 The gRPC Authors", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI3NDg1Ng=="}, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDQxMDM1OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/io/grpc/ManagedChannelRegistryTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMToxMjo1OFrOHETfvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxODoyNjozMVrOHKDuaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI3NTc3Mg==", "bodyText": "Rename to ManagedChannelProviderRegistryTest if the main class is renamed to ManagedChannelProviderRegistry?", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r474275772", "createdAt": "2020-08-20T21:12:58Z", "author": {"login": "sanjaypujare"}, "path": "api/src/test/java/io/grpc/ManagedChannelRegistryTest.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.junit.Assert.fail;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/** Unit tests for {@link ManagedChannelRegistry}. */\n+@RunWith(JUnit4.class)\n+public class ManagedChannelRegistryTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwODg0MA==", "bodyText": "It would be renamed if we renamed the other, but I don't think the other will be renamed.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r480308840", "createdAt": "2020-08-31T18:26:31Z", "author": {"login": "ejona86"}, "path": "api/src/test/java/io/grpc/ManagedChannelRegistryTest.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.junit.Assert.fail;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/** Unit tests for {@link ManagedChannelRegistry}. */\n+@RunWith(JUnit4.class)\n+public class ManagedChannelRegistryTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI3NTc3Mg=="}, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDQzMTEwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/grpc/internal/AbstractManagedChannelImplBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMToyMDowN1rOHETslA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxODoyNzozNVrOHKDweg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI3OTA2MA==", "bodyText": "How about\nthis(target, null);\n\nInstead of these 3 lines?", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r474279060", "createdAt": "2020-08-20T21:20:07Z", "author": {"login": "sanjaypujare"}, "path": "core/src/main/java/io/grpc/internal/AbstractManagedChannelImplBuilder.java", "diffHunk": "@@ -183,6 +186,13 @@ protected final int maxInboundMessageSize() {\n \n   protected AbstractManagedChannelImplBuilder(String target) {\n     this.target = Preconditions.checkNotNull(target, \"target\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwOTM3MA==", "bodyText": "Done.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r480309370", "createdAt": "2020-08-31T18:27:35Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/internal/AbstractManagedChannelImplBuilder.java", "diffHunk": "@@ -183,6 +186,13 @@ protected final int maxInboundMessageSize() {\n \n   protected AbstractManagedChannelImplBuilder(String target) {\n     this.target = Preconditions.checkNotNull(target, \"target\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI3OTA2MA=="}, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDQ2MDUzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/grpc/internal/CallCredentialsApplyingTransportFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMTozMDoxMlrOHET-Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNTo1OToyMlrOHbzEyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI4MzU4Ng==", "bodyText": "CompositeCallCredentials constructor checks for both args != null and CallOptions.getCredentials is marked Nullable. Shouldn't you check on line 85 both for non-null? You can also add a test that shows the problem and then fix the problem.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r474283586", "createdAt": "2020-08-20T21:30:12Z", "author": {"login": "sanjaypujare"}, "path": "core/src/main/java/io/grpc/internal/CallCredentialsApplyingTransportFactory.java", "diffHunk": "@@ -78,6 +82,9 @@ protected ConnectionClientTransport delegate() {\n     public ClientStream newStream(\n         final MethodDescriptor<?, ?> method, Metadata headers, final CallOptions callOptions) {\n       CallCredentials creds = callOptions.getCredentials();\n+      if (channelCallCredentials != null) {\n+        creds = new CompositeCallCredentials(channelCallCredentials, creds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxMDQwOQ==", "bodyText": "Oh, gosh. Fixed.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r498910409", "createdAt": "2020-10-02T15:59:22Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/internal/CallCredentialsApplyingTransportFactory.java", "diffHunk": "@@ -78,6 +82,9 @@ protected ConnectionClientTransport delegate() {\n     public ClientStream newStream(\n         final MethodDescriptor<?, ?> method, Metadata headers, final CallOptions callOptions) {\n       CallCredentials creds = callOptions.getCredentials();\n+      if (channelCallCredentials != null) {\n+        creds = new CompositeCallCredentials(channelCallCredentials, creds);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI4MzU4Ng=="}, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjUyMTI4OnYy", "diffSide": "RIGHT", "path": "alts/src/main/java/io/grpc/alts/AltsChannelCredentials.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNjo0NTo1NFrOHG-EFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNTo1ODozN1rOHbzDEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA3MDM1OQ==", "bodyText": "\"This class sets up ... authenticated communication...\"\nThis comment copied from AltsChannelBuilder. Credentials is not the same as communication. How about something like \"this class provides authentication and encryption configuration needed to set up communication ...\"", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r477070359", "createdAt": "2020-08-26T06:45:54Z", "author": {"login": "sanjaypujare"}, "path": "alts/src/main/java/io/grpc/alts/AltsChannelCredentials.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.alts;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.grpc.Channel;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.ExperimentalApi;\n+import io.grpc.Status;\n+import io.grpc.alts.internal.AltsProtocolNegotiator.ClientAltsProtocolNegotiatorFactory;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.internal.SharedResourcePool;\n+import io.grpc.netty.GrpcHttp2ConnectionHandler;\n+import io.grpc.netty.InternalNettyChannelCredentials;\n+import io.grpc.netty.InternalProtocolNegotiator;\n+import io.grpc.netty.InternalProtocolNegotiator.ProtocolNegotiator;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerAdapter;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.util.AsciiString;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * ALTS secure credentials. This class sets up a secure and authenticated commmunication between two", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkwOTk2OA==", "bodyText": "Removed the first sentence and now start with \"Provides secure and...\". Credentials provide secure communication, so I don't see it as completely wrong and your suggested language I think it probably more inaccurate. I agree there's some improvement to be made and I'm still not happy with the language, but I think it is \"good enough\" for now.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r498909968", "createdAt": "2020-10-02T15:58:37Z", "author": {"login": "ejona86"}, "path": "alts/src/main/java/io/grpc/alts/AltsChannelCredentials.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.alts;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.grpc.Channel;\n+import io.grpc.ChannelCredentials;\n+import io.grpc.ExperimentalApi;\n+import io.grpc.Status;\n+import io.grpc.alts.internal.AltsProtocolNegotiator.ClientAltsProtocolNegotiatorFactory;\n+import io.grpc.internal.ObjectPool;\n+import io.grpc.internal.SharedResourcePool;\n+import io.grpc.netty.GrpcHttp2ConnectionHandler;\n+import io.grpc.netty.InternalNettyChannelCredentials;\n+import io.grpc.netty.InternalProtocolNegotiator;\n+import io.grpc.netty.InternalProtocolNegotiator.ProtocolNegotiator;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerAdapter;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.util.AsciiString;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/**\n+ * ALTS secure credentials. This class sets up a secure and authenticated commmunication between two", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA3MDM1OQ=="}, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MzUzMzU1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/grpc/ChannelCredentials.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNjowMDoyNFrOHIqjUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo0ODozOFrOHclfig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg0NzgyNg==", "bodyText": "Not clear about \"TODO\" as I have not seen this used elsewhere. Is this going to be replaced with an actual value/issue# before merging the PR? Or is \"TODO\" a catch-all for multiple future issues?", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r478847826", "createdAt": "2020-08-28T06:00:24Z", "author": {"login": "sanjaypujare"}, "path": "api/src/main/java/io/grpc/ChannelCredentials.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc;\n+\n+/**\n+ * Represents a security configuration to be used for channels. There is no generic mechanism for\n+ * processing arbitrary {@code ChannelCredentials}; the consumer of the credential (the channel)\n+ * must support each implementation explicitly and separately. Consumers are not required to support\n+ * all types or even all possible configurations for types that are partially supported, but they\n+ * <em>must</em> at least fully support {@link ChoiceChannelCredentials}.\n+ *\n+ * <p>A {@code ChannelCredential} provides client identity and authenticates the server. This is\n+ * different from {@link CallCredentials}, which only provides client identity. They can also\n+ * influence types of encryption used and similar security configuration.\n+ *\n+ * <p>The concrete credential type should not be relevant to most users of the API and may be an\n+ * implementation decision. Users should generally use the {@code ChannelCredentials} type for\n+ * variables instead of the concrete type. Freshly-constructed credentials should be returned as\n+ * {@code ChannelCredentials} instead of a concrete type to encourage this pattern. Concrete types\n+ * would only be used after {@code instanceof} checks (which must consider\n+ * {@code ChoiceChannelCredentials}!).\n+ */\n+@ExperimentalApi(\"TODO\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczNjQ1OA==", "bodyText": "It was a temporary placeholder until the review was along long enough to make an accurate issue. Now replaced with a real issue.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r499736458", "createdAt": "2020-10-05T16:48:38Z", "author": {"login": "ejona86"}, "path": "api/src/main/java/io/grpc/ChannelCredentials.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc;\n+\n+/**\n+ * Represents a security configuration to be used for channels. There is no generic mechanism for\n+ * processing arbitrary {@code ChannelCredentials}; the consumer of the credential (the channel)\n+ * must support each implementation explicitly and separately. Consumers are not required to support\n+ * all types or even all possible configurations for types that are partially supported, but they\n+ * <em>must</em> at least fully support {@link ChoiceChannelCredentials}.\n+ *\n+ * <p>A {@code ChannelCredential} provides client identity and authenticates the server. This is\n+ * different from {@link CallCredentials}, which only provides client identity. They can also\n+ * influence types of encryption used and similar security configuration.\n+ *\n+ * <p>The concrete credential type should not be relevant to most users of the API and may be an\n+ * implementation decision. Users should generally use the {@code ChannelCredentials} type for\n+ * variables instead of the concrete type. Freshly-constructed credentials should be returned as\n+ * {@code ChannelCredentials} instead of a concrete type to encourage this pattern. Concrete types\n+ * would only be used after {@code instanceof} checks (which must consider\n+ * {@code ChoiceChannelCredentials}!).\n+ */\n+@ExperimentalApi(\"TODO\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg0NzgyNg=="}, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MzU2NjA5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/grpc/ChoiceChannelCredentials.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNjoxNToyNVrOHIq1lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwMDoyMTo1OFrOHcLInA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg1MjUwMQ==", "bodyText": "If a user puts InsecureChannelCredentials as the first one, we will always use that one based on the logic of ProtocolNegotiators.from so the list is meaningless. Although you may consider that as a user error should we check and not accept such input?", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r478852501", "createdAt": "2020-08-28T06:15:25Z", "author": {"login": "sanjaypujare"}, "path": "api/src/main/java/io/grpc/ChoiceChannelCredentials.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Provides a list of {@link ChannelCredentials}, where any one may be used. The credentials are in\n+ * preference order.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyNTE3Mw==", "bodyText": "If they put TlsChannelCredentials as the first one, we will always use that one based on the logic in ProtocolNegotiators.from. I don't see that as meaningless though.\nI agree that users can configure ChoiceChannelCredentials in a way such that there's no point in ChoiceChannelCredentials, but that is context-dependent and we shouldn't be trying to police that. For all we know some developer will use some user-provided configuration to generate this list and not optimize the result. Note that we don't prohibit a single entry in the list, and I think that's fair. (We could potentially optimize the single-entry case in create(), but that seems more likely to cause bugs than help anyone.)", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r498925173", "createdAt": "2020-10-02T16:28:27Z", "author": {"login": "ejona86"}, "path": "api/src/main/java/io/grpc/ChoiceChannelCredentials.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Provides a list of {@link ChannelCredentials}, where any one may be used. The credentials are in\n+ * preference order.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg1MjUwMQ=="}, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMwNDYwNA==", "bodyText": "If they put TlsChannelCredentials as the first one, we will always use that one based on the logic in ProtocolNegotiators.from. I don't see that as meaningless though.\n\nFor TlsChannelCredentials there can be an error (due to incomprehensible being non-empty) so it can go to the next one. But for insecure no error is possible so it will always be picked. But I agree with you there is no need to enforce any input here based on logic that exists elsewhere.\n\nI agree that users can configure ChoiceChannelCredentials in a way such that there's no point in ChoiceChannelCredentials, but that is context-dependent and we shouldn't be trying to police that. For all we know some developer will use some user-provided configuration to generate this list and not optimize the result. Note that we don't prohibit a single entry in the list, and I think that's fair. (We could potentially optimize the single-entry case in create(), but that seems more likely to cause bugs than help anyone.)", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r499304604", "createdAt": "2020-10-05T00:21:58Z", "author": {"login": "sanjaypujare"}, "path": "api/src/main/java/io/grpc/ChoiceChannelCredentials.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Provides a list of {@link ChannelCredentials}, where any one may be used. The credentials are in\n+ * preference order.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg1MjUwMQ=="}, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MzY4MTgyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/grpc/CompositeCallCredentials.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNzowMDo1MFrOHIr5qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwMDoxMDoxOFrOHcLETQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg2OTkyOA==", "bodyText": "nit: it really supports only 2 and not \"multiple\".", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r478869928", "createdAt": "2020-08-28T07:00:50Z", "author": {"login": "sanjaypujare"}, "path": "api/src/main/java/io/grpc/CompositeCallCredentials.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.concurrent.Executor;\n+\n+/**\n+ * Uses multiple {@code CallCredentials} as if they were one. If the first credential fails, the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4MDc2Ng==", "bodyText": "\"not 1\" is \"multiple.\" Definition: \"having or involving several parts, elements, or members.\" The precise number is simply undefined here.\nIf it'd be used, I'd be fine with adding a constructor that supports more than two. We may just create a tree, but that'd be an implementation detail.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r498980766", "createdAt": "2020-10-02T18:21:08Z", "author": {"login": "ejona86"}, "path": "api/src/main/java/io/grpc/CompositeCallCredentials.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.concurrent.Executor;\n+\n+/**\n+ * Uses multiple {@code CallCredentials} as if they were one. If the first credential fails, the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg2OTkyOA=="}, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMwMzUwMQ==", "bodyText": "No I am not suggesting adding a constructor to create a tree - just that the comment can be more precise to say two instead of multiple. But not a big deal.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r499303501", "createdAt": "2020-10-05T00:10:18Z", "author": {"login": "sanjaypujare"}, "path": "api/src/main/java/io/grpc/CompositeCallCredentials.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.concurrent.Executor;\n+\n+/**\n+ * Uses multiple {@code CallCredentials} as if they were one. If the first credential fails, the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg2OTkyOA=="}, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MzcwNDI4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/grpc/Grpc.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNzowOToyOVrOHIsHNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwMDowMjo0N1rOHcLB8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg3MzM5Ng==", "bodyText": "Couldn't we eliminate copies? e.g. keep this and remove the one in io.grpc.internal.GrpcUtil .", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r478873396", "createdAt": "2020-08-28T07:09:29Z", "author": {"login": "sanjaypujare"}, "path": "api/src/main/java/io/grpc/Grpc.java", "diffHunk": "@@ -62,4 +64,64 @@ private Grpc() {\n   @Retention(RetentionPolicy.SOURCE)\n   @Documented\n   public @interface TransportAttr {}\n+\n+  /**\n+   * Creates a channel builder with a target string and credentials. The target can be either a\n+   * valid {@link NameResolver}-compliant URI, or an authority string.\n+   *\n+   * <p>A {@code NameResolver}-compliant URI is an absolute hierarchical URI as defined by {@link\n+   * java.net.URI}. Example URIs:\n+   * <ul>\n+   *   <li>{@code \"dns:///foo.googleapis.com:8080\"}</li>\n+   *   <li>{@code \"dns:///foo.googleapis.com\"}</li>\n+   *   <li>{@code \"dns:///%5B2001:db8:85a3:8d3:1319:8a2e:370:7348%5D:443\"}</li>\n+   *   <li>{@code \"dns://8.8.8.8/foo.googleapis.com:8080\"}</li>\n+   *   <li>{@code \"dns://8.8.8.8/foo.googleapis.com\"}</li>\n+   *   <li>{@code \"zookeeper://zk.example.com:9900/example_service\"}</li>\n+   * </ul>\n+   *\n+   * <p>An authority string will be converted to a {@code NameResolver}-compliant URI, which has\n+   * the scheme from the name resolver with the highest priority (e.g. {@code \"dns\"}),\n+   * no authority, and the original authority string as its path after properly escaped.\n+   * We recommend libraries to specify the schema explicitly if it is known, since libraries cannot\n+   * know which NameResolver will be default during runtime.\n+   * Example authority strings:\n+   * <ul>\n+   *   <li>{@code \"localhost\"}</li>\n+   *   <li>{@code \"127.0.0.1\"}</li>\n+   *   <li>{@code \"localhost:8080\"}</li>\n+   *   <li>{@code \"foo.googleapis.com:8080\"}</li>\n+   *   <li>{@code \"127.0.0.1:8080\"}</li>\n+   *   <li>{@code \"[2001:db8:85a3:8d3:1319:8a2e:370:7348]\"}</li>\n+   *   <li>{@code \"[2001:db8:85a3:8d3:1319:8a2e:370:7348]:443\"}</li>\n+   * </ul>\n+   */\n+  @ExperimentalApi(\"TODO\")\n+  public static ManagedChannelBuilder<?> newChannelBuilder(\n+      String target, ChannelCredentials creds) {\n+    return ManagedChannelRegistry.getDefaultRegistry().newChannelBuilder(target, creds);\n+  }\n+\n+  /**\n+   * Creates a channel builder from a host, port, and credentials. The host and port are combined to\n+   * form an authority string and then passed to {@link #newChannelBuilder(String,\n+   * ChannelCredentials)}. IPv6 addresses are properly surrounded by square brackets (\"[]\").\n+   */\n+  @ExperimentalApi(\"TODO\")\n+  public static ManagedChannelBuilder<?> newChannelBuilderForAddress(\n+      String host, int port, ChannelCredentials creds) {\n+    return newChannelBuilder(authorityFromHostAndPort(host, port), creds);\n+  }\n+\n+  /**\n+   * Combine a host and port into an authority string.\n+   */\n+  // A copy of GrpcUtil.authorityFromHostAndPort", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4MTU1MQ==", "bodyText": "This method is so trivial I don't want to expose an internal API for it from io.grpc, and it hasn't changed in years. I'd sooner just delete the comment.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r498981551", "createdAt": "2020-10-02T18:22:51Z", "author": {"login": "ejona86"}, "path": "api/src/main/java/io/grpc/Grpc.java", "diffHunk": "@@ -62,4 +64,64 @@ private Grpc() {\n   @Retention(RetentionPolicy.SOURCE)\n   @Documented\n   public @interface TransportAttr {}\n+\n+  /**\n+   * Creates a channel builder with a target string and credentials. The target can be either a\n+   * valid {@link NameResolver}-compliant URI, or an authority string.\n+   *\n+   * <p>A {@code NameResolver}-compliant URI is an absolute hierarchical URI as defined by {@link\n+   * java.net.URI}. Example URIs:\n+   * <ul>\n+   *   <li>{@code \"dns:///foo.googleapis.com:8080\"}</li>\n+   *   <li>{@code \"dns:///foo.googleapis.com\"}</li>\n+   *   <li>{@code \"dns:///%5B2001:db8:85a3:8d3:1319:8a2e:370:7348%5D:443\"}</li>\n+   *   <li>{@code \"dns://8.8.8.8/foo.googleapis.com:8080\"}</li>\n+   *   <li>{@code \"dns://8.8.8.8/foo.googleapis.com\"}</li>\n+   *   <li>{@code \"zookeeper://zk.example.com:9900/example_service\"}</li>\n+   * </ul>\n+   *\n+   * <p>An authority string will be converted to a {@code NameResolver}-compliant URI, which has\n+   * the scheme from the name resolver with the highest priority (e.g. {@code \"dns\"}),\n+   * no authority, and the original authority string as its path after properly escaped.\n+   * We recommend libraries to specify the schema explicitly if it is known, since libraries cannot\n+   * know which NameResolver will be default during runtime.\n+   * Example authority strings:\n+   * <ul>\n+   *   <li>{@code \"localhost\"}</li>\n+   *   <li>{@code \"127.0.0.1\"}</li>\n+   *   <li>{@code \"localhost:8080\"}</li>\n+   *   <li>{@code \"foo.googleapis.com:8080\"}</li>\n+   *   <li>{@code \"127.0.0.1:8080\"}</li>\n+   *   <li>{@code \"[2001:db8:85a3:8d3:1319:8a2e:370:7348]\"}</li>\n+   *   <li>{@code \"[2001:db8:85a3:8d3:1319:8a2e:370:7348]:443\"}</li>\n+   * </ul>\n+   */\n+  @ExperimentalApi(\"TODO\")\n+  public static ManagedChannelBuilder<?> newChannelBuilder(\n+      String target, ChannelCredentials creds) {\n+    return ManagedChannelRegistry.getDefaultRegistry().newChannelBuilder(target, creds);\n+  }\n+\n+  /**\n+   * Creates a channel builder from a host, port, and credentials. The host and port are combined to\n+   * form an authority string and then passed to {@link #newChannelBuilder(String,\n+   * ChannelCredentials)}. IPv6 addresses are properly surrounded by square brackets (\"[]\").\n+   */\n+  @ExperimentalApi(\"TODO\")\n+  public static ManagedChannelBuilder<?> newChannelBuilderForAddress(\n+      String host, int port, ChannelCredentials creds) {\n+    return newChannelBuilder(authorityFromHostAndPort(host, port), creds);\n+  }\n+\n+  /**\n+   * Combine a host and port into an authority string.\n+   */\n+  // A copy of GrpcUtil.authorityFromHostAndPort", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg3MzM5Ng=="}, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMwMjg5Nw==", "bodyText": "ok", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r499302897", "createdAt": "2020-10-05T00:02:47Z", "author": {"login": "sanjaypujare"}, "path": "api/src/main/java/io/grpc/Grpc.java", "diffHunk": "@@ -62,4 +64,64 @@ private Grpc() {\n   @Retention(RetentionPolicy.SOURCE)\n   @Documented\n   public @interface TransportAttr {}\n+\n+  /**\n+   * Creates a channel builder with a target string and credentials. The target can be either a\n+   * valid {@link NameResolver}-compliant URI, or an authority string.\n+   *\n+   * <p>A {@code NameResolver}-compliant URI is an absolute hierarchical URI as defined by {@link\n+   * java.net.URI}. Example URIs:\n+   * <ul>\n+   *   <li>{@code \"dns:///foo.googleapis.com:8080\"}</li>\n+   *   <li>{@code \"dns:///foo.googleapis.com\"}</li>\n+   *   <li>{@code \"dns:///%5B2001:db8:85a3:8d3:1319:8a2e:370:7348%5D:443\"}</li>\n+   *   <li>{@code \"dns://8.8.8.8/foo.googleapis.com:8080\"}</li>\n+   *   <li>{@code \"dns://8.8.8.8/foo.googleapis.com\"}</li>\n+   *   <li>{@code \"zookeeper://zk.example.com:9900/example_service\"}</li>\n+   * </ul>\n+   *\n+   * <p>An authority string will be converted to a {@code NameResolver}-compliant URI, which has\n+   * the scheme from the name resolver with the highest priority (e.g. {@code \"dns\"}),\n+   * no authority, and the original authority string as its path after properly escaped.\n+   * We recommend libraries to specify the schema explicitly if it is known, since libraries cannot\n+   * know which NameResolver will be default during runtime.\n+   * Example authority strings:\n+   * <ul>\n+   *   <li>{@code \"localhost\"}</li>\n+   *   <li>{@code \"127.0.0.1\"}</li>\n+   *   <li>{@code \"localhost:8080\"}</li>\n+   *   <li>{@code \"foo.googleapis.com:8080\"}</li>\n+   *   <li>{@code \"127.0.0.1:8080\"}</li>\n+   *   <li>{@code \"[2001:db8:85a3:8d3:1319:8a2e:370:7348]\"}</li>\n+   *   <li>{@code \"[2001:db8:85a3:8d3:1319:8a2e:370:7348]:443\"}</li>\n+   * </ul>\n+   */\n+  @ExperimentalApi(\"TODO\")\n+  public static ManagedChannelBuilder<?> newChannelBuilder(\n+      String target, ChannelCredentials creds) {\n+    return ManagedChannelRegistry.getDefaultRegistry().newChannelBuilder(target, creds);\n+  }\n+\n+  /**\n+   * Creates a channel builder from a host, port, and credentials. The host and port are combined to\n+   * form an authority string and then passed to {@link #newChannelBuilder(String,\n+   * ChannelCredentials)}. IPv6 addresses are properly surrounded by square brackets (\"[]\").\n+   */\n+  @ExperimentalApi(\"TODO\")\n+  public static ManagedChannelBuilder<?> newChannelBuilderForAddress(\n+      String host, int port, ChannelCredentials creds) {\n+    return newChannelBuilder(authorityFromHostAndPort(host, port), creds);\n+  }\n+\n+  /**\n+   * Combine a host and port into an authority string.\n+   */\n+  // A copy of GrpcUtil.authorityFromHostAndPort", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg3MzM5Ng=="}, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzA2MzcwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/grpc/TlsChannelCredentials.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjo1NjoxMFrOHJNzUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo1MTowMVrOHcllPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQyNTM2MA==", "bodyText": "Couple of things:\n\n\nsomething I have been thinking: how about using a more commonly used term like unsupported instead of incomprehensible ? I understand there is some difference in the meaning of unsupported vs not-even-understood features but that's immaterial here. If a transport doesn't understand or support a certain feature that transport is going to be skipped.\n\n\nthere are currently no unit tests to test this functionality e.g. incomprehensible returns a non-empty set so a transport is skipped. I understand the class is final etc and currently there are no incomprehensible features but it will be good to see the code getting exercised/tested.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r479425360", "createdAt": "2020-08-28T16:56:10Z", "author": {"login": "sanjaypujare"}, "path": "api/src/main/java/io/grpc/TlsChannelCredentials.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+/**\n+ * TLS credentials, providing server authentication and encryption. Consumers of this credential\n+ * must verify they understand the configuration via the {@link #incomprehensible} method. Unless\n+ * overridden by a {@code Feature}, server verification should use customary default root\n+ * certificates.\n+ */\n+@ExperimentalApi(\"TODO\")\n+public final class TlsChannelCredentials extends ChannelCredentials {\n+  /** Use TLS with its defaults. */\n+  public static ChannelCredentials create() {\n+    return newBuilder().build();\n+  }\n+\n+  TlsChannelCredentials(Builder builder) {}\n+\n+  /**\n+   * Returns an empty set if this credential can be adequately understood via\n+   * the features listed, otherwise returns a hint of features that are lacking\n+   * to understand the configuration to be used for manual debugging.\n+   *\n+   * <p>An \"understood\" feature does not imply the caller is able to fully\n+   * handle the feature. It simply means the caller understands the feature\n+   * enough to use the appropriate APIs to read the configuration. The caller\n+   * may support just a subset of a feature, in which case the caller would\n+   * need to look at the configuration to determine if only the supported\n+   * subset is used.\n+   *\n+   * <p>This method may not be as simple as a set difference. There may be\n+   * multiple features that can independently satisfy a piece of configuration.\n+   * If the configuration is incomprehensible, all such features would be\n+   * returned, even though only one may be necessary.\n+   *\n+   * <p>An empty set does not imply that the credentials are fully understood.\n+   * There may be optional configuration that can be ignored if not understood.\n+   *\n+   * <p>Since {@code Feature} is an {@code enum}, {@code understoodFeatures}\n+   * should generally be an {@link java.util.EnumSet}. {@code\n+   * understoodFeatures} will not be modified.\n+   */\n+  public Set<Feature> incomprehensible(Set<Feature> understoodFeatures) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk5MTE5Ng==", "bodyText": "I don't think unsupported is the correct term, because it makes it seem like it has to fully support each feature. I do agree that using a method name like unsupported would be more readable, but I think it also sends the wrong message.\nGood point about the tests. I've added a FAKE feature for testing.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r498991196", "createdAt": "2020-10-02T18:43:00Z", "author": {"login": "ejona86"}, "path": "api/src/main/java/io/grpc/TlsChannelCredentials.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+/**\n+ * TLS credentials, providing server authentication and encryption. Consumers of this credential\n+ * must verify they understand the configuration via the {@link #incomprehensible} method. Unless\n+ * overridden by a {@code Feature}, server verification should use customary default root\n+ * certificates.\n+ */\n+@ExperimentalApi(\"TODO\")\n+public final class TlsChannelCredentials extends ChannelCredentials {\n+  /** Use TLS with its defaults. */\n+  public static ChannelCredentials create() {\n+    return newBuilder().build();\n+  }\n+\n+  TlsChannelCredentials(Builder builder) {}\n+\n+  /**\n+   * Returns an empty set if this credential can be adequately understood via\n+   * the features listed, otherwise returns a hint of features that are lacking\n+   * to understand the configuration to be used for manual debugging.\n+   *\n+   * <p>An \"understood\" feature does not imply the caller is able to fully\n+   * handle the feature. It simply means the caller understands the feature\n+   * enough to use the appropriate APIs to read the configuration. The caller\n+   * may support just a subset of a feature, in which case the caller would\n+   * need to look at the configuration to determine if only the supported\n+   * subset is used.\n+   *\n+   * <p>This method may not be as simple as a set difference. There may be\n+   * multiple features that can independently satisfy a piece of configuration.\n+   * If the configuration is incomprehensible, all such features would be\n+   * returned, even though only one may be necessary.\n+   *\n+   * <p>An empty set does not imply that the credentials are fully understood.\n+   * There may be optional configuration that can be ignored if not understood.\n+   *\n+   * <p>Since {@code Feature} is an {@code enum}, {@code understoodFeatures}\n+   * should generally be an {@link java.util.EnumSet}. {@code\n+   * understoodFeatures} will not be modified.\n+   */\n+  public Set<Feature> incomprehensible(Set<Feature> understoodFeatures) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQyNTM2MA=="}, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMwMjg3Ng==", "bodyText": "How about unrecognized as it is still better (IMO) than incomprehensible? Also call the param requiredFeatures and describe it using the @param tag in the method Javadoc. Just a suggestion.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r499302876", "createdAt": "2020-10-05T00:02:32Z", "author": {"login": "sanjaypujare"}, "path": "api/src/main/java/io/grpc/TlsChannelCredentials.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+/**\n+ * TLS credentials, providing server authentication and encryption. Consumers of this credential\n+ * must verify they understand the configuration via the {@link #incomprehensible} method. Unless\n+ * overridden by a {@code Feature}, server verification should use customary default root\n+ * certificates.\n+ */\n+@ExperimentalApi(\"TODO\")\n+public final class TlsChannelCredentials extends ChannelCredentials {\n+  /** Use TLS with its defaults. */\n+  public static ChannelCredentials create() {\n+    return newBuilder().build();\n+  }\n+\n+  TlsChannelCredentials(Builder builder) {}\n+\n+  /**\n+   * Returns an empty set if this credential can be adequately understood via\n+   * the features listed, otherwise returns a hint of features that are lacking\n+   * to understand the configuration to be used for manual debugging.\n+   *\n+   * <p>An \"understood\" feature does not imply the caller is able to fully\n+   * handle the feature. It simply means the caller understands the feature\n+   * enough to use the appropriate APIs to read the configuration. The caller\n+   * may support just a subset of a feature, in which case the caller would\n+   * need to look at the configuration to determine if only the supported\n+   * subset is used.\n+   *\n+   * <p>This method may not be as simple as a set difference. There may be\n+   * multiple features that can independently satisfy a piece of configuration.\n+   * If the configuration is incomprehensible, all such features would be\n+   * returned, even though only one may be necessary.\n+   *\n+   * <p>An empty set does not imply that the credentials are fully understood.\n+   * There may be optional configuration that can be ignored if not understood.\n+   *\n+   * <p>Since {@code Feature} is an {@code enum}, {@code understoodFeatures}\n+   * should generally be an {@link java.util.EnumSet}. {@code\n+   * understoodFeatures} will not be modified.\n+   */\n+  public Set<Feature> incomprehensible(Set<Feature> understoodFeatures) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQyNTM2MA=="}, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczNDAzMQ==", "bodyText": "unrecognized makes it sound like TlsChannelCredentials doesn't understand some feature, and requiredFeatures is that all the more.\nSome potential other options for the method name: comprehensible, understandable, missingFeatures, neededFeatures, maybe something along the lines of \"safe\", or maybe compatible/incompatible", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r499734031", "createdAt": "2020-10-05T16:44:26Z", "author": {"login": "ejona86"}, "path": "api/src/main/java/io/grpc/TlsChannelCredentials.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+/**\n+ * TLS credentials, providing server authentication and encryption. Consumers of this credential\n+ * must verify they understand the configuration via the {@link #incomprehensible} method. Unless\n+ * overridden by a {@code Feature}, server verification should use customary default root\n+ * certificates.\n+ */\n+@ExperimentalApi(\"TODO\")\n+public final class TlsChannelCredentials extends ChannelCredentials {\n+  /** Use TLS with its defaults. */\n+  public static ChannelCredentials create() {\n+    return newBuilder().build();\n+  }\n+\n+  TlsChannelCredentials(Builder builder) {}\n+\n+  /**\n+   * Returns an empty set if this credential can be adequately understood via\n+   * the features listed, otherwise returns a hint of features that are lacking\n+   * to understand the configuration to be used for manual debugging.\n+   *\n+   * <p>An \"understood\" feature does not imply the caller is able to fully\n+   * handle the feature. It simply means the caller understands the feature\n+   * enough to use the appropriate APIs to read the configuration. The caller\n+   * may support just a subset of a feature, in which case the caller would\n+   * need to look at the configuration to determine if only the supported\n+   * subset is used.\n+   *\n+   * <p>This method may not be as simple as a set difference. There may be\n+   * multiple features that can independently satisfy a piece of configuration.\n+   * If the configuration is incomprehensible, all such features would be\n+   * returned, even though only one may be necessary.\n+   *\n+   * <p>An empty set does not imply that the credentials are fully understood.\n+   * There may be optional configuration that can be ignored if not understood.\n+   *\n+   * <p>Since {@code Feature} is an {@code enum}, {@code understoodFeatures}\n+   * should generally be an {@link java.util.EnumSet}. {@code\n+   * understoodFeatures} will not be modified.\n+   */\n+  public Set<Feature> incomprehensible(Set<Feature> understoodFeatures) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQyNTM2MA=="}, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczNzkxNw==", "bodyText": "Like I said earlier it is just a suggestion for what I think would be a better name than incomprehensible but I understand it's subjective so it's not a big deal. It will be good to have some description (something to the effect that the caller i.e. transport will pass the features that it \"understands\")  with the param tag for the understoodFeatures param.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r499737917", "createdAt": "2020-10-05T16:51:01Z", "author": {"login": "sanjaypujare"}, "path": "api/src/main/java/io/grpc/TlsChannelCredentials.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+/**\n+ * TLS credentials, providing server authentication and encryption. Consumers of this credential\n+ * must verify they understand the configuration via the {@link #incomprehensible} method. Unless\n+ * overridden by a {@code Feature}, server verification should use customary default root\n+ * certificates.\n+ */\n+@ExperimentalApi(\"TODO\")\n+public final class TlsChannelCredentials extends ChannelCredentials {\n+  /** Use TLS with its defaults. */\n+  public static ChannelCredentials create() {\n+    return newBuilder().build();\n+  }\n+\n+  TlsChannelCredentials(Builder builder) {}\n+\n+  /**\n+   * Returns an empty set if this credential can be adequately understood via\n+   * the features listed, otherwise returns a hint of features that are lacking\n+   * to understand the configuration to be used for manual debugging.\n+   *\n+   * <p>An \"understood\" feature does not imply the caller is able to fully\n+   * handle the feature. It simply means the caller understands the feature\n+   * enough to use the appropriate APIs to read the configuration. The caller\n+   * may support just a subset of a feature, in which case the caller would\n+   * need to look at the configuration to determine if only the supported\n+   * subset is used.\n+   *\n+   * <p>This method may not be as simple as a set difference. There may be\n+   * multiple features that can independently satisfy a piece of configuration.\n+   * If the configuration is incomprehensible, all such features would be\n+   * returned, even though only one may be necessary.\n+   *\n+   * <p>An empty set does not imply that the credentials are fully understood.\n+   * There may be optional configuration that can be ignored if not understood.\n+   *\n+   * <p>Since {@code Feature} is an {@code enum}, {@code understoodFeatures}\n+   * should generally be an {@link java.util.EnumSet}. {@code\n+   * understoodFeatures} will not be modified.\n+   */\n+  public Set<Feature> incomprehensible(Set<Feature> understoodFeatures) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQyNTM2MA=="}, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzE5NDEzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/grpc/TlsChannelCredentials.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozODo0OFrOHJPFbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODo1MTo0MFrOHb4PeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ0NjM4Mw==", "bodyText": "Currently there are no features so it is correct to always return the empty-set. But is it possible now to implement the mechanism to return the correct set. e.g. when the TlsChannelCredentials is built by the builder it will also initialize a set of \"required\" features in the instance. Then this method will return the set of \"required\" features that are not in the passed in understoodFeatures. If the logic is more complex, then put a \"TODO\" comment saying so?", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r479446383", "createdAt": "2020-08-28T17:38:48Z", "author": {"login": "sanjaypujare"}, "path": "api/src/main/java/io/grpc/TlsChannelCredentials.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+/**\n+ * TLS credentials, providing server authentication and encryption. Consumers of this credential\n+ * must verify they understand the configuration via the {@link #incomprehensible} method. Unless\n+ * overridden by a {@code Feature}, server verification should use customary default root\n+ * certificates.\n+ */\n+@ExperimentalApi(\"TODO\")\n+public final class TlsChannelCredentials extends ChannelCredentials {\n+  /** Use TLS with its defaults. */\n+  public static ChannelCredentials create() {\n+    return newBuilder().build();\n+  }\n+\n+  TlsChannelCredentials(Builder builder) {}\n+\n+  /**\n+   * Returns an empty set if this credential can be adequately understood via\n+   * the features listed, otherwise returns a hint of features that are lacking\n+   * to understand the configuration to be used for manual debugging.\n+   *\n+   * <p>An \"understood\" feature does not imply the caller is able to fully\n+   * handle the feature. It simply means the caller understands the feature\n+   * enough to use the appropriate APIs to read the configuration. The caller\n+   * may support just a subset of a feature, in which case the caller would\n+   * need to look at the configuration to determine if only the supported\n+   * subset is used.\n+   *\n+   * <p>This method may not be as simple as a set difference. There may be\n+   * multiple features that can independently satisfy a piece of configuration.\n+   * If the configuration is incomprehensible, all such features would be\n+   * returned, even though only one may be necessary.\n+   *\n+   * <p>An empty set does not imply that the credentials are fully understood.\n+   * There may be optional configuration that can be ignored if not understood.\n+   *\n+   * <p>Since {@code Feature} is an {@code enum}, {@code understoodFeatures}\n+   * should generally be an {@link java.util.EnumSet}. {@code\n+   * understoodFeatures} will not be modified.\n+   */\n+  public Set<Feature> incomprehensible(Set<Feature> understoodFeatures) {\n+    return Collections.emptySet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk5NTA2NA==", "bodyText": "I'd much rather leave that to the future, but I've added a bit of a skeleton now for the FAKE feature. As far as I'm concerned, that is free to change at any time.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r498995064", "createdAt": "2020-10-02T18:51:40Z", "author": {"login": "ejona86"}, "path": "api/src/main/java/io/grpc/TlsChannelCredentials.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+/**\n+ * TLS credentials, providing server authentication and encryption. Consumers of this credential\n+ * must verify they understand the configuration via the {@link #incomprehensible} method. Unless\n+ * overridden by a {@code Feature}, server verification should use customary default root\n+ * certificates.\n+ */\n+@ExperimentalApi(\"TODO\")\n+public final class TlsChannelCredentials extends ChannelCredentials {\n+  /** Use TLS with its defaults. */\n+  public static ChannelCredentials create() {\n+    return newBuilder().build();\n+  }\n+\n+  TlsChannelCredentials(Builder builder) {}\n+\n+  /**\n+   * Returns an empty set if this credential can be adequately understood via\n+   * the features listed, otherwise returns a hint of features that are lacking\n+   * to understand the configuration to be used for manual debugging.\n+   *\n+   * <p>An \"understood\" feature does not imply the caller is able to fully\n+   * handle the feature. It simply means the caller understands the feature\n+   * enough to use the appropriate APIs to read the configuration. The caller\n+   * may support just a subset of a feature, in which case the caller would\n+   * need to look at the configuration to determine if only the supported\n+   * subset is used.\n+   *\n+   * <p>This method may not be as simple as a set difference. There may be\n+   * multiple features that can independently satisfy a piece of configuration.\n+   * If the configuration is incomprehensible, all such features would be\n+   * returned, even though only one may be necessary.\n+   *\n+   * <p>An empty set does not imply that the credentials are fully understood.\n+   * There may be optional configuration that can be ignored if not understood.\n+   *\n+   * <p>Since {@code Feature} is an {@code enum}, {@code understoodFeatures}\n+   * should generally be an {@link java.util.EnumSet}. {@code\n+   * understoodFeatures} will not be modified.\n+   */\n+  public Set<Feature> incomprehensible(Set<Feature> understoodFeatures) {\n+    return Collections.emptySet();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ0NjM4Mw=="}, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzI1MjM2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/grpc/internal/GrpcUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzo1ODo1M1rOHJPqTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODo1Mjo0MVrOHb4RYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ1NTgyMA==", "bodyText": "As commented there, why not just remove this copy and have all the callers call the io.grpc.Grpc version?", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r479455820", "createdAt": "2020-08-28T17:58:53Z", "author": {"login": "sanjaypujare"}, "path": "core/src/main/java/io/grpc/internal/GrpcUtil.java", "diffHunk": "@@ -508,6 +508,7 @@ public static String checkAuthority(String authority) {\n   /**\n    * Combine a host and port into an authority string.\n    */\n+  // There is a copy of this method in io.grpc.Grpc", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk5NTU1NQ==", "bodyText": "I responded there. If anything, I'd rather remove the comment.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r498995555", "createdAt": "2020-10-02T18:52:41Z", "author": {"login": "ejona86"}, "path": "core/src/main/java/io/grpc/internal/GrpcUtil.java", "diffHunk": "@@ -508,6 +508,7 @@ public static String checkAuthority(String authority) {\n   /**\n    * Combine a host and port into an authority string.\n    */\n+  // There is a copy of this method in io.grpc.Grpc", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ1NTgyMA=="}, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTc4MDA1OnYy", "diffSide": "RIGHT", "path": "netty/shaded/src/testShadow/java/io/grpc/netty/shaded/ShadingTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNTowMTowNlrOHRwwUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQyMzoyNjoyN1rOHcK2Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM4NjY0MA==", "bodyText": "TlsChannelCredentials.create() also works here and is equivalent to the old code.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r488386640", "createdAt": "2020-09-15T05:01:06Z", "author": {"login": "sanjaypujare"}, "path": "netty/shaded/src/testShadow/java/io/grpc/netty/shaded/ShadingTest.java", "diffHunk": "@@ -67,7 +68,7 @@ public void noNormalNetty() throws Exception {\n   @Test\n   public void serviceLoaderFindsNetty() throws Exception {\n     assertThat(ServerBuilder.forPort(0)).isInstanceOf(NettyServerBuilder.class);\n-    assertThat(ManagedChannelBuilder.forAddress(\"localhost\", 1234))\n+    assertThat(Grpc.newChannelBuilder(\"localhost:1234\", InsecureChannelCredentials.create()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk5NzA0NQ==", "bodyText": "Yes, although this is not testing the credential. With insecure here it is more obvious we aren't actually really testing the credential.\nAlthough I did notice the tcnative() test below wasn't migrated to ChannelCredentials, so I ported it.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r498997045", "createdAt": "2020-10-02T18:55:51Z", "author": {"login": "ejona86"}, "path": "netty/shaded/src/testShadow/java/io/grpc/netty/shaded/ShadingTest.java", "diffHunk": "@@ -67,7 +68,7 @@ public void noNormalNetty() throws Exception {\n   @Test\n   public void serviceLoaderFindsNetty() throws Exception {\n     assertThat(ServerBuilder.forPort(0)).isInstanceOf(NettyServerBuilder.class);\n-    assertThat(ManagedChannelBuilder.forAddress(\"localhost\", 1234))\n+    assertThat(Grpc.newChannelBuilder(\"localhost:1234\", InsecureChannelCredentials.create()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM4NjY0MA=="}, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5OTkzOA==", "bodyText": "okay", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r499299938", "createdAt": "2020-10-04T23:26:27Z", "author": {"login": "sanjaypujare"}, "path": "netty/shaded/src/testShadow/java/io/grpc/netty/shaded/ShadingTest.java", "diffHunk": "@@ -67,7 +68,7 @@ public void noNormalNetty() throws Exception {\n   @Test\n   public void serviceLoaderFindsNetty() throws Exception {\n     assertThat(ServerBuilder.forPort(0)).isInstanceOf(NettyServerBuilder.class);\n-    assertThat(ManagedChannelBuilder.forAddress(\"localhost\", 1234))\n+    assertThat(Grpc.newChannelBuilder(\"localhost:1234\", InsecureChannelCredentials.create()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM4NjY0MA=="}, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTgwMjc0OnYy", "diffSide": "RIGHT", "path": "netty/src/main/java/io/grpc/netty/InternalNettyChannelCredentials.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNToxMzoyOFrOHRw9tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNToxMzoyOFrOHRw9tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM5MDA2OQ==", "bodyText": "s/NettyChannelCredential/NettyChannelCredentials/", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r488390069", "createdAt": "2020-09-15T05:13:28Z", "author": {"login": "sanjaypujare"}, "path": "netty/src/main/java/io/grpc/netty/InternalNettyChannelCredentials.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.netty;\n+\n+import io.grpc.ChannelCredentials;\n+import io.grpc.Internal;\n+\n+/**\n+ * Internal {@link NettyChannelCredential} accessor.  This is intended for usage internal to the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTgwMzQ4OnYy", "diffSide": "RIGHT", "path": "netty/src/main/java/io/grpc/netty/InternalNettyChannelCredentials.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNToxNDowMFrOHRw-OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNToxNDowMFrOHRw-OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM5MDIwMA==", "bodyText": "s/ChannelCredential/{@link ChannelCredentials}/", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r488390200", "createdAt": "2020-09-15T05:14:00Z", "author": {"login": "sanjaypujare"}, "path": "netty/src/main/java/io/grpc/netty/InternalNettyChannelCredentials.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.netty;\n+\n+import io.grpc.ChannelCredentials;\n+import io.grpc.Internal;\n+\n+/**\n+ * Internal {@link NettyChannelCredential} accessor.  This is intended for usage internal to the\n+ * gRPC team. If you *really* think you need to use this, contact the gRPC team first.\n+ */\n+@Internal\n+public final class InternalNettyChannelCredentials {\n+  private InternalNettyChannelCredentials() {}\n+\n+  /** Creates a ChannelCredential that will use the provided {@code negotiator}. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NjA4NTI4OnYy", "diffSide": "RIGHT", "path": "netty/src/main/java/io/grpc/netty/NettyChannelBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNzowNDowMFrOHRzl9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxOTowNToyOFrOHb4nuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQzMzE0Mw==", "bodyText": "Do you want to assert that sslContext is null if negotiationType is PLAINTEXT or PLAINTEXT_UPGRADE?", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r488433143", "createdAt": "2020-09-15T07:04:00Z", "author": {"login": "sanjaypujare"}, "path": "netty/src/main/java/io/grpc/netty/NettyChannelBuilder.java", "diffHunk": "@@ -521,12 +524,54 @@ NettyChannelBuilder setTransportTracerFactory(TransportTracer.Factory transportT\n     return this;\n   }\n \n-  interface ProtocolNegotiatorFactory {\n-    /**\n-     * Returns a ProtocolNegotatior instance configured for this Builder. This method is called\n-     * during {@code ManagedChannelBuilder#build()}.\n-     */\n-    ProtocolNegotiator buildProtocolNegotiator();\n+  @VisibleForTesting\n+  @CheckReturnValue\n+  static ProtocolNegotiator createProtocolNegotiatorByType(\n+      NegotiationType negotiationType,\n+      SslContext sslContext,\n+      ObjectPool<? extends Executor> executorPool) {\n+    switch (negotiationType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwMTI3Mg==", "bodyText": "No, this is pre-existing code, just moved to a less-bad spot. I moved it back to where it was.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r499001272", "createdAt": "2020-10-02T19:05:28Z", "author": {"login": "ejona86"}, "path": "netty/src/main/java/io/grpc/netty/NettyChannelBuilder.java", "diffHunk": "@@ -521,12 +524,54 @@ NettyChannelBuilder setTransportTracerFactory(TransportTracer.Factory transportT\n     return this;\n   }\n \n-  interface ProtocolNegotiatorFactory {\n-    /**\n-     * Returns a ProtocolNegotatior instance configured for this Builder. This method is called\n-     * during {@code ManagedChannelBuilder#build()}.\n-     */\n-    ProtocolNegotiator buildProtocolNegotiator();\n+  @VisibleForTesting\n+  @CheckReturnValue\n+  static ProtocolNegotiator createProtocolNegotiatorByType(\n+      NegotiationType negotiationType,\n+      SslContext sslContext,\n+      ObjectPool<? extends Executor> executorPool) {\n+    switch (negotiationType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQzMzE0Mw=="}, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 217}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NjA4OTM0OnYy", "diffSide": "RIGHT", "path": "netty/src/main/java/io/grpc/netty/NettyChannelBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNzowNToxNFrOHRzoXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQyMzowODowN1rOHcKwpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQzMzc1Ng==", "bodyText": "Do you also want to set ((DefaultProtocolNegotiator) protocolNegotiatorFactory).negotiationType here to TLS?. I could see that in the following case:\n    builder.negotiationType(NegotiationType.PLAINTEXT);\n    builder.sslContext(sslContext);  // sslContext is non-null\n\nBecause negotiationType is PLAINTEXT, the sslContext is saved but ignored by io.grpc.netty.NettyChannelBuilder.DefaultProtocolNegotiator.newNegotiator(). You can treat this as user error but it will be nice to then check for consistent input/state.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r488433756", "createdAt": "2020-09-15T07:05:14Z", "author": {"login": "sanjaypujare"}, "path": "netty/src/main/java/io/grpc/netty/NettyChannelBuilder.java", "diffHunk": "@@ -239,12 +275,18 @@ NettyChannelBuilder eventLoopGroupPool(ObjectPool<? extends EventLoopGroup> even\n    * GrpcSslContexts}, but options could have been overridden.\n    */\n   public NettyChannelBuilder sslContext(SslContext sslContext) {\n+    checkState(!freezeProtocolNegotiatorFactory,\n+               \"Cannot change security when using ChannelCredentials\");\n     if (sslContext != null) {\n       checkArgument(sslContext.isClient(),\n           \"Server SSL context can not be used for client channel\");\n       GrpcSslContexts.ensureAlpnAndH2Enabled(sslContext.applicationProtocolNegotiator());\n     }\n-    this.sslContext = sslContext;\n+    if (!(protocolNegotiatorFactory instanceof DefaultProtocolNegotiator)) {\n+      // Do nothing for compatibility\n+      return this;\n+    }\n+    ((DefaultProtocolNegotiator) protocolNegotiatorFactory).sslContext = sslContext;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwMzI2NQ==", "bodyText": "That would change the behavior. I carefully preserved the existing behavior here. These APIs will be removed eventually. It could maybe be updated, but I don't want it updated in this PR, as it increases risk.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r499003265", "createdAt": "2020-10-02T19:10:15Z", "author": {"login": "ejona86"}, "path": "netty/src/main/java/io/grpc/netty/NettyChannelBuilder.java", "diffHunk": "@@ -239,12 +275,18 @@ NettyChannelBuilder eventLoopGroupPool(ObjectPool<? extends EventLoopGroup> even\n    * GrpcSslContexts}, but options could have been overridden.\n    */\n   public NettyChannelBuilder sslContext(SslContext sslContext) {\n+    checkState(!freezeProtocolNegotiatorFactory,\n+               \"Cannot change security when using ChannelCredentials\");\n     if (sslContext != null) {\n       checkArgument(sslContext.isClient(),\n           \"Server SSL context can not be used for client channel\");\n       GrpcSslContexts.ensureAlpnAndH2Enabled(sslContext.applicationProtocolNegotiator());\n     }\n-    this.sslContext = sslContext;\n+    if (!(protocolNegotiatorFactory instanceof DefaultProtocolNegotiator)) {\n+      // Do nothing for compatibility\n+      return this;\n+    }\n+    ((DefaultProtocolNegotiator) protocolNegotiatorFactory).sslContext = sslContext;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQzMzc1Ng=="}, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5ODQ3MA==", "bodyText": "ok", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r499298470", "createdAt": "2020-10-04T23:08:07Z", "author": {"login": "sanjaypujare"}, "path": "netty/src/main/java/io/grpc/netty/NettyChannelBuilder.java", "diffHunk": "@@ -239,12 +275,18 @@ NettyChannelBuilder eventLoopGroupPool(ObjectPool<? extends EventLoopGroup> even\n    * GrpcSslContexts}, but options could have been overridden.\n    */\n   public NettyChannelBuilder sslContext(SslContext sslContext) {\n+    checkState(!freezeProtocolNegotiatorFactory,\n+               \"Cannot change security when using ChannelCredentials\");\n     if (sslContext != null) {\n       checkArgument(sslContext.isClient(),\n           \"Server SSL context can not be used for client channel\");\n       GrpcSslContexts.ensureAlpnAndH2Enabled(sslContext.applicationProtocolNegotiator());\n     }\n-    this.sslContext = sslContext;\n+    if (!(protocolNegotiatorFactory instanceof DefaultProtocolNegotiator)) {\n+      // Do nothing for compatibility\n+      return this;\n+    }\n+    ((DefaultProtocolNegotiator) protocolNegotiatorFactory).sslContext = sslContext;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQzMzc1Ng=="}, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODg0NTAzOnYy", "diffSide": "RIGHT", "path": "netty/src/main/java/io/grpc/netty/ProtocolNegotiators.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxODoyMDoyMlrOHSOZyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxODoyMDoyMlrOHSOZyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg3MjM5Mg==", "bodyText": "There's only one reference to this function. Can that be replaced with a call to tlsClientFactory(null) ?", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r488872392", "createdAt": "2020-09-15T18:20:22Z", "author": {"login": "sanjaypujare"}, "path": "netty/src/main/java/io/grpc/netty/ProtocolNegotiators.java", "diffHunk": "@@ -434,6 +524,40 @@ public static ProtocolNegotiator tls(SslContext sslContext) {\n     return tls(sslContext, null);\n   }\n \n+  public static ProtocolNegotiator.ClientFactory tlsClientFactory() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzkyNDI5OnYy", "diffSide": "RIGHT", "path": "okhttp/src/main/java/io/grpc/okhttp/OkHttpChannelBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxOTowNzozMlrOHS_6ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxOToxNjoyNFrOHb45gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY4MzY0Mg==", "bodyText": "For line 366: it will be good to fix the link to {@link #sslSocketFactory(SSLSocketFactory)}", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r489683642", "createdAt": "2020-09-16T19:07:32Z", "author": {"login": "sanjaypujare"}, "path": "okhttp/src/main/java/io/grpc/okhttp/OkHttpChannelBuilder.java", "diffHunk": "@@ -322,6 +368,8 @@ public final OkHttpChannelBuilder usePlaintext() {\n    */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwNTgyNg==", "bodyText": "That's really-really preexisting. But done.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r499005826", "createdAt": "2020-10-02T19:16:24Z", "author": {"login": "ejona86"}, "path": "okhttp/src/main/java/io/grpc/okhttp/OkHttpChannelBuilder.java", "diffHunk": "@@ -322,6 +368,8 @@ public final OkHttpChannelBuilder usePlaintext() {\n    */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY4MzY0Mg=="}, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDA5NjU5OnYy", "diffSide": "RIGHT", "path": "okhttp/src/main/java/io/grpc/okhttp/OkHttpChannelBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxOTo0NDowOVrOHTBrxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQyMjo1OToxN1rOHcKuHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcxMjU4Mw==", "bodyText": "These 3 don't need to be public and can be marked @Nullable", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r489712583", "createdAt": "2020-09-16T19:44:09Z", "author": {"login": "sanjaypujare"}, "path": "okhttp/src/main/java/io/grpc/okhttp/OkHttpChannelBuilder.java", "diffHunk": "@@ -418,6 +466,99 @@ SSLSocketFactory createSslSocketFactory() {\n     }\n   }\n \n+  private static final EnumSet<TlsChannelCredentials.Feature> understoodTlsFeatures =\n+      EnumSet.noneOf(TlsChannelCredentials.Feature.class);\n+\n+  static SslSocketFactoryResult sslSocketFactoryFrom(ChannelCredentials creds) {\n+    if (creds instanceof TlsChannelCredentials) {\n+      TlsChannelCredentials tlsCreds = (TlsChannelCredentials) creds;\n+      Set<TlsChannelCredentials.Feature> incomprehensible =\n+          tlsCreds.incomprehensible(understoodTlsFeatures);\n+      if (!incomprehensible.isEmpty()) {\n+        return SslSocketFactoryResult.error(\n+            \"TLS features not understood: \" + incomprehensible);\n+      }\n+      SSLSocketFactory sslSocketFactory;\n+      try {\n+        SSLContext sslContext = SSLContext.getInstance(\"Default\", Platform.get().getProvider());\n+        sslSocketFactory = sslContext.getSocketFactory();\n+      } catch (GeneralSecurityException gse) {\n+        throw new RuntimeException(\"TLS Provider failure\", gse);\n+      }\n+      return SslSocketFactoryResult.factory(sslSocketFactory);\n+\n+    } else if (creds instanceof InsecureChannelCredentials) {\n+      return SslSocketFactoryResult.plaintext();\n+\n+    } else if (creds instanceof CompositeChannelCredentials) {\n+      CompositeChannelCredentials compCreds = (CompositeChannelCredentials) creds;\n+      return sslSocketFactoryFrom(compCreds.getChannelCredentials())\n+          .withCallCredentials(compCreds.getCallCredentials());\n+\n+    } else if (creds instanceof SslSocketFactoryChannelCredentials.ChannelCredentials) {\n+      SslSocketFactoryChannelCredentials.ChannelCredentials factoryCreds =\n+          (SslSocketFactoryChannelCredentials.ChannelCredentials) creds;\n+      return SslSocketFactoryResult.factory(factoryCreds.getFactory());\n+\n+    } else if (creds instanceof ChoiceChannelCredentials) {\n+      ChoiceChannelCredentials choiceCreds = (ChoiceChannelCredentials) creds;\n+      StringBuilder error = new StringBuilder();\n+      for (ChannelCredentials innerCreds : choiceCreds.getCredentialsList()) {\n+        SslSocketFactoryResult result = sslSocketFactoryFrom(innerCreds);\n+        if (result.error == null) {\n+          return result;\n+        }\n+        error.append(\", \");\n+        error.append(result.error);\n+      }\n+      return SslSocketFactoryResult.error(error.substring(2));\n+\n+    } else {\n+      return SslSocketFactoryResult.error(\n+          \"Unsupported credential type: \" + creds.getClass().getName());\n+    }\n+  }\n+\n+  static final class SslSocketFactoryResult {\n+    /** {@code null} implies plaintext if {@code error == null}. */\n+    public final SSLSocketFactory factory;\n+    public final CallCredentials callCredentials;\n+    public final String error;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwNjg3OA==", "bodyText": "I use public when it is public from an API perspective (the consumer is expected to use these fields). So public is appropriate here. I only use Nullable for consistency and sometimes for public APIs. This is a new internal class.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r499006878", "createdAt": "2020-10-02T19:18:47Z", "author": {"login": "ejona86"}, "path": "okhttp/src/main/java/io/grpc/okhttp/OkHttpChannelBuilder.java", "diffHunk": "@@ -418,6 +466,99 @@ SSLSocketFactory createSslSocketFactory() {\n     }\n   }\n \n+  private static final EnumSet<TlsChannelCredentials.Feature> understoodTlsFeatures =\n+      EnumSet.noneOf(TlsChannelCredentials.Feature.class);\n+\n+  static SslSocketFactoryResult sslSocketFactoryFrom(ChannelCredentials creds) {\n+    if (creds instanceof TlsChannelCredentials) {\n+      TlsChannelCredentials tlsCreds = (TlsChannelCredentials) creds;\n+      Set<TlsChannelCredentials.Feature> incomprehensible =\n+          tlsCreds.incomprehensible(understoodTlsFeatures);\n+      if (!incomprehensible.isEmpty()) {\n+        return SslSocketFactoryResult.error(\n+            \"TLS features not understood: \" + incomprehensible);\n+      }\n+      SSLSocketFactory sslSocketFactory;\n+      try {\n+        SSLContext sslContext = SSLContext.getInstance(\"Default\", Platform.get().getProvider());\n+        sslSocketFactory = sslContext.getSocketFactory();\n+      } catch (GeneralSecurityException gse) {\n+        throw new RuntimeException(\"TLS Provider failure\", gse);\n+      }\n+      return SslSocketFactoryResult.factory(sslSocketFactory);\n+\n+    } else if (creds instanceof InsecureChannelCredentials) {\n+      return SslSocketFactoryResult.plaintext();\n+\n+    } else if (creds instanceof CompositeChannelCredentials) {\n+      CompositeChannelCredentials compCreds = (CompositeChannelCredentials) creds;\n+      return sslSocketFactoryFrom(compCreds.getChannelCredentials())\n+          .withCallCredentials(compCreds.getCallCredentials());\n+\n+    } else if (creds instanceof SslSocketFactoryChannelCredentials.ChannelCredentials) {\n+      SslSocketFactoryChannelCredentials.ChannelCredentials factoryCreds =\n+          (SslSocketFactoryChannelCredentials.ChannelCredentials) creds;\n+      return SslSocketFactoryResult.factory(factoryCreds.getFactory());\n+\n+    } else if (creds instanceof ChoiceChannelCredentials) {\n+      ChoiceChannelCredentials choiceCreds = (ChoiceChannelCredentials) creds;\n+      StringBuilder error = new StringBuilder();\n+      for (ChannelCredentials innerCreds : choiceCreds.getCredentialsList()) {\n+        SslSocketFactoryResult result = sslSocketFactoryFrom(innerCreds);\n+        if (result.error == null) {\n+          return result;\n+        }\n+        error.append(\", \");\n+        error.append(result.error);\n+      }\n+      return SslSocketFactoryResult.error(error.substring(2));\n+\n+    } else {\n+      return SslSocketFactoryResult.error(\n+          \"Unsupported credential type: \" + creds.getClass().getName());\n+    }\n+  }\n+\n+  static final class SslSocketFactoryResult {\n+    /** {@code null} implies plaintext if {@code error == null}. */\n+    public final SSLSocketFactory factory;\n+    public final CallCredentials callCredentials;\n+    public final String error;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcxMjU4Mw=="}, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5NzgyMg==", "bodyText": "okay", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r499297822", "createdAt": "2020-10-04T22:59:17Z", "author": {"login": "sanjaypujare"}, "path": "okhttp/src/main/java/io/grpc/okhttp/OkHttpChannelBuilder.java", "diffHunk": "@@ -418,6 +466,99 @@ SSLSocketFactory createSslSocketFactory() {\n     }\n   }\n \n+  private static final EnumSet<TlsChannelCredentials.Feature> understoodTlsFeatures =\n+      EnumSet.noneOf(TlsChannelCredentials.Feature.class);\n+\n+  static SslSocketFactoryResult sslSocketFactoryFrom(ChannelCredentials creds) {\n+    if (creds instanceof TlsChannelCredentials) {\n+      TlsChannelCredentials tlsCreds = (TlsChannelCredentials) creds;\n+      Set<TlsChannelCredentials.Feature> incomprehensible =\n+          tlsCreds.incomprehensible(understoodTlsFeatures);\n+      if (!incomprehensible.isEmpty()) {\n+        return SslSocketFactoryResult.error(\n+            \"TLS features not understood: \" + incomprehensible);\n+      }\n+      SSLSocketFactory sslSocketFactory;\n+      try {\n+        SSLContext sslContext = SSLContext.getInstance(\"Default\", Platform.get().getProvider());\n+        sslSocketFactory = sslContext.getSocketFactory();\n+      } catch (GeneralSecurityException gse) {\n+        throw new RuntimeException(\"TLS Provider failure\", gse);\n+      }\n+      return SslSocketFactoryResult.factory(sslSocketFactory);\n+\n+    } else if (creds instanceof InsecureChannelCredentials) {\n+      return SslSocketFactoryResult.plaintext();\n+\n+    } else if (creds instanceof CompositeChannelCredentials) {\n+      CompositeChannelCredentials compCreds = (CompositeChannelCredentials) creds;\n+      return sslSocketFactoryFrom(compCreds.getChannelCredentials())\n+          .withCallCredentials(compCreds.getCallCredentials());\n+\n+    } else if (creds instanceof SslSocketFactoryChannelCredentials.ChannelCredentials) {\n+      SslSocketFactoryChannelCredentials.ChannelCredentials factoryCreds =\n+          (SslSocketFactoryChannelCredentials.ChannelCredentials) creds;\n+      return SslSocketFactoryResult.factory(factoryCreds.getFactory());\n+\n+    } else if (creds instanceof ChoiceChannelCredentials) {\n+      ChoiceChannelCredentials choiceCreds = (ChoiceChannelCredentials) creds;\n+      StringBuilder error = new StringBuilder();\n+      for (ChannelCredentials innerCreds : choiceCreds.getCredentialsList()) {\n+        SslSocketFactoryResult result = sslSocketFactoryFrom(innerCreds);\n+        if (result.error == null) {\n+          return result;\n+        }\n+        error.append(\", \");\n+        error.append(result.error);\n+      }\n+      return SslSocketFactoryResult.error(error.substring(2));\n+\n+    } else {\n+      return SslSocketFactoryResult.error(\n+          \"Unsupported credential type: \" + creds.getClass().getName());\n+    }\n+  }\n+\n+  static final class SslSocketFactoryResult {\n+    /** {@code null} implies plaintext if {@code error == null}. */\n+    public final SSLSocketFactory factory;\n+    public final CallCredentials callCredentials;\n+    public final String error;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcxMjU4Mw=="}, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 194}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDIyMTQzOnYy", "diffSide": "RIGHT", "path": "okhttp/src/main/java/io/grpc/okhttp/SslSocketFactoryChannelCredentials.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMDoyMzowNlrOHTC4nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxOToyMDoxNFrOHb5AAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczMjI1NQ==", "bodyText": "The qualification SslSocketFactoryChannelCredentials. seems unnecessary. Or else we can name the inner class here something other than ChannelCredentials to avoid confusion. How about LocalChannelCredentials?", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r489732255", "createdAt": "2020-09-16T20:23:06Z", "author": {"login": "sanjaypujare"}, "path": "okhttp/src/main/java/io/grpc/okhttp/SslSocketFactoryChannelCredentials.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.okhttp;\n+\n+import com.google.common.base.Preconditions;\n+import io.grpc.ExperimentalApi;\n+import javax.net.ssl.SSLSocketFactory;\n+\n+/** A credential with full control over the SSLSocketFactory. */\n+@ExperimentalApi(\"There is no plan to make this API stable, given transport API instability\")\n+public final class SslSocketFactoryChannelCredentials {\n+  private SslSocketFactoryChannelCredentials() {}\n+\n+  public static io.grpc.ChannelCredentials create(SSLSocketFactory factory) {\n+    return new SslSocketFactoryChannelCredentials.ChannelCredentials(factory);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwNzQ5MQ==", "bodyText": "Removed SslSocketFactoryChannelCredentials. prefix.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r499007491", "createdAt": "2020-10-02T19:20:14Z", "author": {"login": "ejona86"}, "path": "okhttp/src/main/java/io/grpc/okhttp/SslSocketFactoryChannelCredentials.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.okhttp;\n+\n+import com.google.common.base.Preconditions;\n+import io.grpc.ExperimentalApi;\n+import javax.net.ssl.SSLSocketFactory;\n+\n+/** A credential with full control over the SSLSocketFactory. */\n+@ExperimentalApi(\"There is no plan to make this API stable, given transport API instability\")\n+public final class SslSocketFactoryChannelCredentials {\n+  private SslSocketFactoryChannelCredentials() {}\n+\n+  public static io.grpc.ChannelCredentials create(SSLSocketFactory factory) {\n+    return new SslSocketFactoryChannelCredentials.ChannelCredentials(factory);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczMjI1NQ=="}, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDI1MTk0OnYy", "diffSide": "RIGHT", "path": "xds/src/main/java/io/grpc/xds/XdsClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMDozMjozN1rOHTDL1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxOToyNjo1M1rOHb5LfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczNzE3NA==", "bodyText": "We can also change line 629 above to use the new GoogleDefaultChannelCredentials (instead of using GoogleDefaultChannelBuilder) and just use Grpc.newChannelBuilder` below? Any reason for not doing it?", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r489737174", "createdAt": "2020-09-16T20:32:37Z", "author": {"login": "sanjaypujare"}, "path": "xds/src/main/java/io/grpc/xds/XdsClient.java", "diffHunk": "@@ -630,7 +632,7 @@ XdsChannel createChannel(List<ServerInfo> servers) {\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAxMDQyOQ==", "bodyText": "Updated. I think I just didn't see it.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r499010429", "createdAt": "2020-10-02T19:26:53Z", "author": {"login": "ejona86"}, "path": "xds/src/main/java/io/grpc/xds/XdsClient.java", "diffHunk": "@@ -630,7 +632,7 @@ XdsChannel createChannel(List<ServerInfo> servers) {\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTczNzE3NA=="}, "originalCommit": {"oid": "72c838b9926c493f66add0b5d87e46eade54ff50"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNjEyNzQ1OnYy", "diffSide": "RIGHT", "path": "netty/shaded/src/testShadow/java/io/grpc/netty/shaded/ShadingTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQyMzoyNjowNlrOHcK2Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo1Mjo1M1rOHclpeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5OTkwNw==", "bodyText": "For line 46, there is no class called Shading so the {@link} tag should be removed.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r499299907", "createdAt": "2020-10-04T23:26:06Z", "author": {"login": "sanjaypujare"}, "path": "netty/shaded/src/testShadow/java/io/grpc/netty/shaded/ShadingTest.java", "diffHunk": "@@ -18,14 +18,17 @@\n \n import static com.google.common.truth.Truth.assertThat;\n \n+import io.grpc.ChannelCredentials;\n+import io.grpc.Grpc;\n+import io.grpc.InsecureChannelCredentials;\n import io.grpc.ManagedChannel;\n-import io.grpc.ManagedChannelBuilder;\n import io.grpc.Server;\n import io.grpc.ServerBuilder;\n import io.grpc.internal.testing.TestUtils;\n import io.grpc.netty.shaded.io.grpc.netty.GrpcSslContexts;\n import io.grpc.netty.shaded.io.grpc.netty.NettyChannelBuilder;\n import io.grpc.netty.shaded.io.grpc.netty.NettyServerBuilder;\n+import io.grpc.netty.shaded.io.grpc.netty.NettySslContextChannelCredentials;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da6706ee678d6b78ba5b7b7a1cafafcbc2281277"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczOTAwMQ==", "bodyText": "That's strongly unrelated to this PR. Created #7483 for it", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r499739001", "createdAt": "2020-10-05T16:52:53Z", "author": {"login": "ejona86"}, "path": "netty/shaded/src/testShadow/java/io/grpc/netty/shaded/ShadingTest.java", "diffHunk": "@@ -18,14 +18,17 @@\n \n import static com.google.common.truth.Truth.assertThat;\n \n+import io.grpc.ChannelCredentials;\n+import io.grpc.Grpc;\n+import io.grpc.InsecureChannelCredentials;\n import io.grpc.ManagedChannel;\n-import io.grpc.ManagedChannelBuilder;\n import io.grpc.Server;\n import io.grpc.ServerBuilder;\n import io.grpc.internal.testing.TestUtils;\n import io.grpc.netty.shaded.io.grpc.netty.GrpcSslContexts;\n import io.grpc.netty.shaded.io.grpc.netty.NettyChannelBuilder;\n import io.grpc.netty.shaded.io.grpc.netty.NettyServerBuilder;\n+import io.grpc.netty.shaded.io.grpc.netty.NettySslContextChannelCredentials;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5OTkwNw=="}, "originalCommit": {"oid": "da6706ee678d6b78ba5b7b7a1cafafcbc2281277"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTAxODc4OnYy", "diffSide": "RIGHT", "path": "netty/shaded/src/testShadow/java/io/grpc/netty/shaded/ShadingTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzowNDo1NFrOHcmD8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOToxNToxN1rOHcqVFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0NTc3OQ==", "bodyText": "I just realized: by replacing use of ManagedChannelBuilder or NettyChannelBuilder with Grpc.newChannelBuilder you have effectively removed the old tests for the old API. May be it's not a big deal because the API tests exist elsewhere and this file is just for testing shading. But just trying to point out.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r499745779", "createdAt": "2020-10-05T17:04:54Z", "author": {"login": "sanjaypujare"}, "path": "netty/shaded/src/testShadow/java/io/grpc/netty/shaded/ShadingTest.java", "diffHunk": "@@ -76,9 +79,8 @@ public void basic() throws Exception {\n     server = ServerBuilder.forPort(0)\n         .addService(new SimpleServiceImpl())\n         .build().start();\n-    channel = ManagedChannelBuilder\n-        .forAddress(\"localhost\", server.getPort())\n-        .usePlaintext()\n+    channel = Grpc.newChannelBuilder(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1416253c805e805278713d17dd0b377d3d26bf5d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgxNTcwMA==", "bodyText": "These particular tests are fine to only test one way. I've added a few more unit tests for the new codepath and added a basic test to interop-testing to test the old codepath.", "url": "https://github.com/grpc/grpc-java/pull/7294#discussion_r499815700", "createdAt": "2020-10-05T19:15:17Z", "author": {"login": "ejona86"}, "path": "netty/shaded/src/testShadow/java/io/grpc/netty/shaded/ShadingTest.java", "diffHunk": "@@ -76,9 +79,8 @@ public void basic() throws Exception {\n     server = ServerBuilder.forPort(0)\n         .addService(new SimpleServiceImpl())\n         .build().start();\n-    channel = ManagedChannelBuilder\n-        .forAddress(\"localhost\", server.getPort())\n-        .usePlaintext()\n+    channel = Grpc.newChannelBuilder(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0NTc3OQ=="}, "originalCommit": {"oid": "1416253c805e805278713d17dd0b377d3d26bf5d"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2455, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}