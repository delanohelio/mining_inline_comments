{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NTQxMzcw", "number": 6743, "title": "rls: add proto and converter", "bodyText": "", "createdAt": "2020-02-22T02:37:37Z", "url": "https://github.com/grpc/grpc-java/pull/6743", "merged": true, "mergeCommit": {"oid": "0fd4975d4c519056ec027dadc04872365369866e"}, "closed": true, "closedAt": "2020-02-29T05:41:20Z", "author": {"login": "creamsoup"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGrBcDgH2gAyMzc4NTQxMzcwOjYwMjYwNjMyMWY3NGUxZWY4YTQ2MzIzNzE5YTc4OGQwNTdjODk1Njc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcI59NFgH2gAyMzc4NTQxMzcwOjA5NzZjNmJjOWEwYjFkYTZiMjhlZGRjZDU2MDQ5MjcyYTk4YTc1NTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "602606321f74e1ef8a46323719a788d057c89567", "author": {"user": {"login": "creamsoup", "name": "Jihun Cho"}}, "url": "https://github.com/grpc/grpc-java/commit/602606321f74e1ef8a46323719a788d057c89567", "committedDate": "2020-02-22T02:37:07Z", "message": "rls: add proto and converter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNTk3MzEx", "url": "https://github.com/grpc/grpc-java/pull/6743#pullrequestreview-363597311", "createdAt": "2020-02-24T18:16:39Z", "commit": {"oid": "602606321f74e1ef8a46323719a788d057c89567"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODoxNjo0MFrOFtqwhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODoyODozOVrOFtrHhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQzMDc4OA==", "bodyText": "s/A/An", "url": "https://github.com/grpc/grpc-java/pull/6743#discussion_r383430788", "createdAt": "2020-02-24T18:16:40Z", "author": {"login": "dapengzhang0"}, "path": "rls/src/main/java/io/grpc/rls/RlsProtoConverters.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.base.Converter;\n+import io.grpc.internal.JsonUtil;\n+import io.grpc.lookup.v1.RouteLookupRequest;\n+import io.grpc.lookup.v1.RouteLookupResponse;\n+import io.grpc.rls.RlsProtoData.GrpcKeyBuilder;\n+import io.grpc.rls.RlsProtoData.GrpcKeyBuilder.Name;\n+import io.grpc.rls.RlsProtoData.NameMatcher;\n+import io.grpc.rls.RlsProtoData.RequestProcessingStrategy;\n+import io.grpc.rls.RlsProtoData.RouteLookupConfig;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A RlsProtoConverters is a collection of {@link Converter} between RouteLookupService proto", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "602606321f74e1ef8a46323719a788d057c89567"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQzNjY3OQ==", "bodyText": "I suggest to move most classes in this package to io.grpc.rls.internal.*, as #6711, it could be very difficult to do it later due to pending merge conflicts.", "url": "https://github.com/grpc/grpc-java/pull/6743#discussion_r383436679", "createdAt": "2020-02-24T18:28:39Z", "author": {"login": "dapengzhang0"}, "path": "rls/src/main/java/io/grpc/rls/RlsProtoConverters.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.base.Converter;\n+import io.grpc.internal.JsonUtil;\n+import io.grpc.lookup.v1.RouteLookupRequest;\n+import io.grpc.lookup.v1.RouteLookupResponse;\n+import io.grpc.rls.RlsProtoData.GrpcKeyBuilder;\n+import io.grpc.rls.RlsProtoData.GrpcKeyBuilder.Name;\n+import io.grpc.rls.RlsProtoData.NameMatcher;\n+import io.grpc.rls.RlsProtoData.RequestProcessingStrategy;\n+import io.grpc.rls.RlsProtoData.RouteLookupConfig;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A RlsProtoConverters is a collection of {@link Converter} between RouteLookupService proto\n+ * messages to internal representation in {@link RlsProtoData}.\n+ */\n+public final class RlsProtoConverters {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "602606321f74e1ef8a46323719a788d057c89567"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afa4c2c297a628ee6cec657903e35a7e652721bd", "author": {"user": {"login": "creamsoup", "name": "Jihun Cho"}}, "url": "https://github.com/grpc/grpc-java/commit/afa4c2c297a628ee6cec657903e35a7e652721bd", "committedDate": "2020-02-24T21:06:04Z", "message": "move data/converters to internal package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c245e5061883312008094fe24fdd0aefa638f3ff", "author": {"user": {"login": "creamsoup", "name": "Jihun Cho"}}, "url": "https://github.com/grpc/grpc-java/commit/c245e5061883312008094fe24fdd0aefa638f3ff", "committedDate": "2020-02-24T21:55:19Z", "message": "revise some javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b2324af303c76df7e59b2680e5cdbc861c23e1a", "author": {"user": {"login": "creamsoup", "name": "Jihun Cho"}}, "url": "https://github.com/grpc/grpc-java/commit/2b2324af303c76df7e59b2680e5cdbc861c23e1a", "committedDate": "2020-02-26T00:54:06Z", "message": "rls: build rls, exclude from publish"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fc411a90ece4b8154248ad655eb6206883033d4", "author": {"user": {"login": "creamsoup", "name": "Jihun Cho"}}, "url": "https://github.com/grpc/grpc-java/commit/9fc411a90ece4b8154248ad655eb6206883033d4", "committedDate": "2020-02-26T01:13:36Z", "message": "rls: add generated code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d64696d6c909c4ce0a3b0435347af64684cc2c98", "author": {"user": {"login": "creamsoup", "name": "Jihun Cho"}}, "url": "https://github.com/grpc/grpc-java/commit/d64696d6c909c4ce0a3b0435347af64684cc2c98", "committedDate": "2020-02-26T23:35:11Z", "message": "remove unnecessray dependencies"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NjAwMjkz", "url": "https://github.com/grpc/grpc-java/pull/6743#pullrequestreview-366600293", "createdAt": "2020-02-28T18:32:28Z", "commit": {"oid": "d64696d6c909c4ce0a3b0435347af64684cc2c98"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxODozMjoyOFrOFv-s6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMToyNDo1MlrOFwDP0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg1NDY5OA==", "bodyText": "nit: add /* server = */ to let linter check the arguments are passed in the right order", "url": "https://github.com/grpc/grpc-java/pull/6743#discussion_r385854698", "createdAt": "2020-02-28T18:32:28Z", "author": {"login": "dapengzhang0"}, "path": "rls/src/main/java/io/grpc/rls/internal/RlsProtoConverters.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls.internal;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.base.Converter;\n+import io.grpc.internal.JsonUtil;\n+import io.grpc.lookup.v1.RouteLookupRequest;\n+import io.grpc.lookup.v1.RouteLookupResponse;\n+import io.grpc.rls.internal.RlsProtoData.GrpcKeyBuilder;\n+import io.grpc.rls.internal.RlsProtoData.GrpcKeyBuilder.Name;\n+import io.grpc.rls.internal.RlsProtoData.NameMatcher;\n+import io.grpc.rls.internal.RlsProtoData.RequestProcessingStrategy;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupConfig;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * RlsProtoConverters is a collection of {@link Converter} between RouteLookupService proto messages\n+ * to internal representation in {@link RlsProtoData}.\n+ */\n+public final class RlsProtoConverters {\n+\n+  /**\n+   * RouteLookupRequestConverter converts between {@link RouteLookupRequest} and {@link\n+   * RlsProtoData.RouteLookupRequest}.\n+   */\n+  public static final class RouteLookupRequestConverter\n+      extends Converter<RouteLookupRequest, RlsProtoData.RouteLookupRequest> {\n+\n+    @Override\n+    protected RlsProtoData.RouteLookupRequest doForward(RouteLookupRequest routeLookupRequest) {\n+      return\n+          new RlsProtoData.RouteLookupRequest(\n+              routeLookupRequest.getServer(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d64696d6c909c4ce0a3b0435347af64684cc2c98"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg3MDQ0Mg==", "bodyText": "/** Tests for {@link RlsProtoConverters}. */", "url": "https://github.com/grpc/grpc-java/pull/6743#discussion_r385870442", "createdAt": "2020-02-28T19:06:05Z", "author": {"login": "dapengzhang0"}, "path": "rls/src/test/java/io/grpc/rls/internal/RlsProtoConvertersTest.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls.internal;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.common.base.Converter;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.grpc.internal.JsonParser;\n+import io.grpc.lookup.v1.RouteLookupRequest;\n+import io.grpc.lookup.v1.RouteLookupResponse;\n+import io.grpc.rls.internal.RlsProtoConverters.RouteLookupConfigConverter;\n+import io.grpc.rls.internal.RlsProtoConverters.RouteLookupRequestConverter;\n+import io.grpc.rls.internal.RlsProtoConverters.RouteLookupResponseConverter;\n+import io.grpc.rls.internal.RlsProtoData.GrpcKeyBuilder;\n+import io.grpc.rls.internal.RlsProtoData.GrpcKeyBuilder.Name;\n+import io.grpc.rls.internal.RlsProtoData.NameMatcher;\n+import io.grpc.rls.internal.RlsProtoData.RequestProcessingStrategy;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupConfig;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d64696d6c909c4ce0a3b0435347af64684cc2c98"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkxNzQ2OQ==", "bodyText": "These checks can move to the constructor. If you're not converting from json, e.g. convert from a proto or call the constructor directly in test, you don't have to write the checks again.", "url": "https://github.com/grpc/grpc-java/pull/6743#discussion_r385917469", "createdAt": "2020-02-28T20:54:26Z", "author": {"login": "dapengzhang0"}, "path": "rls/src/main/java/io/grpc/rls/internal/RlsProtoConverters.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls.internal;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.base.Converter;\n+import io.grpc.internal.JsonUtil;\n+import io.grpc.lookup.v1.RouteLookupRequest;\n+import io.grpc.lookup.v1.RouteLookupResponse;\n+import io.grpc.rls.internal.RlsProtoData.GrpcKeyBuilder;\n+import io.grpc.rls.internal.RlsProtoData.GrpcKeyBuilder.Name;\n+import io.grpc.rls.internal.RlsProtoData.NameMatcher;\n+import io.grpc.rls.internal.RlsProtoData.RequestProcessingStrategy;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupConfig;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * RlsProtoConverters is a collection of {@link Converter} between RouteLookupService proto messages\n+ * to internal representation in {@link RlsProtoData}.\n+ */\n+public final class RlsProtoConverters {\n+\n+  /**\n+   * RouteLookupRequestConverter converts between {@link RouteLookupRequest} and {@link\n+   * RlsProtoData.RouteLookupRequest}.\n+   */\n+  public static final class RouteLookupRequestConverter\n+      extends Converter<RouteLookupRequest, RlsProtoData.RouteLookupRequest> {\n+\n+    @Override\n+    protected RlsProtoData.RouteLookupRequest doForward(RouteLookupRequest routeLookupRequest) {\n+      return\n+          new RlsProtoData.RouteLookupRequest(\n+              routeLookupRequest.getServer(),\n+              routeLookupRequest.getPath(),\n+              routeLookupRequest.getTargetType(),\n+              routeLookupRequest.getKeyMapMap());\n+    }\n+\n+    @Override\n+    protected RouteLookupRequest doBackward(RlsProtoData.RouteLookupRequest routeLookupRequest) {\n+      return\n+          RouteLookupRequest.newBuilder()\n+              .setServer(routeLookupRequest.getServer())\n+              .setPath(routeLookupRequest.getPath())\n+              .setTargetType(routeLookupRequest.getTargetType())\n+              .putAllKeyMap(routeLookupRequest.getKeyMap())\n+              .build();\n+    }\n+  }\n+\n+  /**\n+   * RouteLookupResponseConverter converts between {@link RouteLookupResponse} and {@link\n+   * RlsProtoData.RouteLookupResponse}.\n+   */\n+  public static final class RouteLookupResponseConverter\n+      extends Converter<RouteLookupResponse, RlsProtoData.RouteLookupResponse> {\n+\n+    @Override\n+    protected RlsProtoData.RouteLookupResponse doForward(RouteLookupResponse routeLookupResponse) {\n+      return\n+          new RlsProtoData.RouteLookupResponse(\n+              routeLookupResponse.getTarget(),\n+              routeLookupResponse.getHeaderData());\n+    }\n+\n+    @Override\n+    protected RouteLookupResponse doBackward(RlsProtoData.RouteLookupResponse routeLookupResponse) {\n+      return RouteLookupResponse.newBuilder()\n+          .setTarget(routeLookupResponse.getTarget())\n+          .setHeaderData(routeLookupResponse.getHeaderData())\n+          .build();\n+    }\n+  }\n+\n+  /**\n+   * RouteLookupConfigConverter converts between json map to {@link RouteLookupConfig}.\n+   */\n+  public static final class RouteLookupConfigConverter\n+      extends Converter<Map<String, ?>, RouteLookupConfig> {\n+\n+    @Override\n+    protected RouteLookupConfig doForward(Map<String, ?> json) {\n+      List<GrpcKeyBuilder> grpcKeyBuilders =\n+          GrpcKeyBuilderConverter\n+              .covertAll(JsonUtil.checkObjectList(JsonUtil.getList(json, \"grpcKeyBuilders\")));\n+      checkState(!grpcKeyBuilders.isEmpty(), \"At least one GrpcKeyBuilders are expected\");\n+      checkUniqueName(grpcKeyBuilders);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d64696d6c909c4ce0a3b0435347af64684cc2c98"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkyODMyMQ==", "bodyText": "@Nullable", "url": "https://github.com/grpc/grpc-java/pull/6743#discussion_r385928321", "createdAt": "2020-02-28T21:22:39Z", "author": {"login": "dapengzhang0"}, "path": "rls/src/main/java/io/grpc/rls/internal/RlsProtoData.java", "diffHunk": "@@ -0,0 +1,580 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls.internal;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import javax.annotation.concurrent.Immutable;\n+\n+/** RlsProtoData is a collection of internal representation of RouteLookupService proto messages. */\n+public final class RlsProtoData {\n+\n+  /** A request object sent to route lookup service. */\n+  @Immutable\n+  public static final class RouteLookupRequest {\n+\n+    private final String server;\n+\n+    private final String path;\n+\n+    private final String targetType;\n+\n+    private final ImmutableMap<String, String> keyMap;\n+\n+    /** Constructor for RouteLookupRequest. */\n+    public RouteLookupRequest(\n+        String server, String path, String targetType, Map<String, String> keyMap) {\n+      this.server = checkNotNull(server, \"server\");\n+      this.path = checkNotNull(path, \"path\");\n+      this.targetType = checkNotNull(targetType, \"targetName\");\n+      this.keyMap = ImmutableMap.copyOf(checkNotNull(keyMap, \"keyMap\"));\n+    }\n+\n+    /**\n+     * Returns a full host name of the target server, {@literal e.g.} firestore.googleapis.com. Only\n+     * set for gRPC requests; HTTP requests must use key_map explicitly.\n+     */\n+    public String getServer() {\n+      return server;\n+    }\n+\n+    /**\n+     * Returns a full path of the request, {@literal i.e.} \"/service/method\". Only set for gRPC\n+     * requests; HTTP requests must use key_map explicitly.\n+     */\n+    public String getPath() {\n+      return path;\n+    }\n+\n+    /**\n+     * Returns the target type allows the client to specify what kind of target format it would like\n+     * from RLS to allow it to find the regional server, {@literal e.g.} \"grpc\".\n+     */\n+    public String getTargetType() {\n+      return targetType;\n+    }\n+\n+    /** Returns a map of key values extracted via key builders for the gRPC or HTTP request. */\n+    public ImmutableMap<String, String> getKeyMap() {\n+      return keyMap;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      RouteLookupRequest that = (RouteLookupRequest) o;\n+      return Objects.equal(server, that.server)\n+          && Objects.equal(path, that.path)\n+          && Objects.equal(targetType, that.targetType)\n+          && Objects.equal(keyMap, that.keyMap);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hashCode(server, path, targetType, keyMap);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return MoreObjects.toStringHelper(this)\n+          .add(\"server\", server)\n+          .add(\"path\", path)\n+          .add(\"targetName\", targetType)\n+          .add(\"keyMap\", keyMap)\n+          .toString();\n+    }\n+  }\n+\n+  /** A response from route lookup service. */\n+  @Immutable\n+  public static final class RouteLookupResponse {\n+\n+    private final String target;\n+\n+    private final String headerData;\n+\n+    public RouteLookupResponse(String target, String headerData) {\n+      this.target = checkNotNull(target, \"target\");\n+      this.headerData = checkNotNull(headerData, \"headerData\");\n+    }\n+\n+    /**\n+     * Returns target. A target is an actual addressable entity to use for routing decision, using\n+     * syntax requested by the request target_type.\n+     */\n+    public String getTarget() {\n+      return target;\n+    }\n+\n+    /**\n+     * Returns optional header data to pass along to AFE in the X-Google-RLS-Data header. Cached\n+     * with \"target\" and sent with all requests that match the request key. Allows the RLS to pass\n+     * its work product to the eventual target.\n+     */\n+    public String getHeaderData() {\n+      return headerData;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      RouteLookupResponse that = (RouteLookupResponse) o;\n+      return java.util.Objects.equals(target, that.target)\n+          && java.util.Objects.equals(headerData, that.headerData);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return java.util.Objects.hash(target, headerData);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return MoreObjects.toStringHelper(this)\n+          .add(\"target\", target)\n+          .add(\"headerData\", headerData)\n+          .toString();\n+    }\n+  }\n+\n+  /** A config object for gRPC RouteLookupService. */\n+  @Immutable\n+  public static final class RouteLookupConfig {\n+\n+    private static final long MAX_AGE_MILLIS = TimeUnit.MINUTES.toMillis(5);\n+\n+    private final ImmutableList<GrpcKeyBuilder> grpcKeyBuilders;\n+\n+    private final String lookupService;\n+\n+    private final long lookupServiceTimeoutInMillis;\n+\n+    private final long maxAgeInMillis;\n+\n+    private final long staleAgeInMillis;\n+\n+    private final long cacheSizeBytes;\n+\n+    private final ImmutableList<String> validTargets;\n+\n+    private final String defaultTarget;\n+\n+    private final RequestProcessingStrategy requestProcessingStrategy;\n+\n+    /** Constructs RouteLookupConfig. */\n+    public RouteLookupConfig(\n+        List<GrpcKeyBuilder> grpcKeyBuilders,\n+        String lookupService,\n+        long lookupServiceTimeoutInMillis,\n+        Long maxAgeInMillis,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d64696d6c909c4ce0a3b0435347af64684cc2c98"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkyOTE3MA==", "bodyText": "nit: Use /*  argName = */ to let linter check if the args are correctly ordered.", "url": "https://github.com/grpc/grpc-java/pull/6743#discussion_r385929170", "createdAt": "2020-02-28T21:24:52Z", "author": {"login": "dapengzhang0"}, "path": "rls/src/main/java/io/grpc/rls/internal/RlsProtoConverters.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls.internal;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.base.Converter;\n+import io.grpc.internal.JsonUtil;\n+import io.grpc.lookup.v1.RouteLookupRequest;\n+import io.grpc.lookup.v1.RouteLookupResponse;\n+import io.grpc.rls.internal.RlsProtoData.GrpcKeyBuilder;\n+import io.grpc.rls.internal.RlsProtoData.GrpcKeyBuilder.Name;\n+import io.grpc.rls.internal.RlsProtoData.NameMatcher;\n+import io.grpc.rls.internal.RlsProtoData.RequestProcessingStrategy;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupConfig;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * RlsProtoConverters is a collection of {@link Converter} between RouteLookupService proto messages\n+ * to internal representation in {@link RlsProtoData}.\n+ */\n+public final class RlsProtoConverters {\n+\n+  /**\n+   * RouteLookupRequestConverter converts between {@link RouteLookupRequest} and {@link\n+   * RlsProtoData.RouteLookupRequest}.\n+   */\n+  public static final class RouteLookupRequestConverter\n+      extends Converter<RouteLookupRequest, RlsProtoData.RouteLookupRequest> {\n+\n+    @Override\n+    protected RlsProtoData.RouteLookupRequest doForward(RouteLookupRequest routeLookupRequest) {\n+      return\n+          new RlsProtoData.RouteLookupRequest(\n+              routeLookupRequest.getServer(),\n+              routeLookupRequest.getPath(),\n+              routeLookupRequest.getTargetType(),\n+              routeLookupRequest.getKeyMapMap());\n+    }\n+\n+    @Override\n+    protected RouteLookupRequest doBackward(RlsProtoData.RouteLookupRequest routeLookupRequest) {\n+      return\n+          RouteLookupRequest.newBuilder()\n+              .setServer(routeLookupRequest.getServer())\n+              .setPath(routeLookupRequest.getPath())\n+              .setTargetType(routeLookupRequest.getTargetType())\n+              .putAllKeyMap(routeLookupRequest.getKeyMap())\n+              .build();\n+    }\n+  }\n+\n+  /**\n+   * RouteLookupResponseConverter converts between {@link RouteLookupResponse} and {@link\n+   * RlsProtoData.RouteLookupResponse}.\n+   */\n+  public static final class RouteLookupResponseConverter\n+      extends Converter<RouteLookupResponse, RlsProtoData.RouteLookupResponse> {\n+\n+    @Override\n+    protected RlsProtoData.RouteLookupResponse doForward(RouteLookupResponse routeLookupResponse) {\n+      return\n+          new RlsProtoData.RouteLookupResponse(\n+              routeLookupResponse.getTarget(),\n+              routeLookupResponse.getHeaderData());\n+    }\n+\n+    @Override\n+    protected RouteLookupResponse doBackward(RlsProtoData.RouteLookupResponse routeLookupResponse) {\n+      return RouteLookupResponse.newBuilder()\n+          .setTarget(routeLookupResponse.getTarget())\n+          .setHeaderData(routeLookupResponse.getHeaderData())\n+          .build();\n+    }\n+  }\n+\n+  /**\n+   * RouteLookupConfigConverter converts between json map to {@link RouteLookupConfig}.\n+   */\n+  public static final class RouteLookupConfigConverter\n+      extends Converter<Map<String, ?>, RouteLookupConfig> {\n+\n+    @Override\n+    protected RouteLookupConfig doForward(Map<String, ?> json) {\n+      List<GrpcKeyBuilder> grpcKeyBuilders =\n+          GrpcKeyBuilderConverter\n+              .covertAll(JsonUtil.checkObjectList(JsonUtil.getList(json, \"grpcKeyBuilders\")));\n+      checkState(!grpcKeyBuilders.isEmpty(), \"At least one GrpcKeyBuilders are expected\");\n+      checkUniqueName(grpcKeyBuilders);\n+      String lookupService = JsonUtil.getString(json, \"lookupService\");\n+      long timeout =\n+          TimeUnit.SECONDS.toMillis(JsonUtil.getNumberAsLong(json, \"lookupServiceTimeout\"));\n+      Long maxAge =\n+          convertTimeIfNotNull(\n+              TimeUnit.SECONDS, TimeUnit.MILLISECONDS, JsonUtil.getNumberAsLong(json, \"maxAge\"));\n+      Long staleAge =\n+          convertTimeIfNotNull(\n+              TimeUnit.SECONDS, TimeUnit.MILLISECONDS, JsonUtil.getNumberAsLong(json, \"staleAge\"));\n+      long cacheSize = JsonUtil.getNumberAsLong(json, \"cacheSizeBytes\");\n+      List<String> validTargets = JsonUtil.checkStringList(JsonUtil.getList(json, \"validTargets\"));\n+      String defaultTarget = JsonUtil.getString(json, \"defaultTarget\");\n+      RequestProcessingStrategy strategy =\n+          RequestProcessingStrategy\n+              .valueOf(JsonUtil.getString(json, \"requestProcessingStrategy\").toUpperCase());\n+      return new RouteLookupConfig(\n+          grpcKeyBuilders,\n+          lookupService,\n+          timeout,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d64696d6c909c4ce0a3b0435347af64684cc2c98"}, "originalPosition": 128}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8be8437691c2e47b0aece8a124ce9892d435ff7d", "author": {"user": {"login": "creamsoup", "name": "Jihun Cho"}}, "url": "https://github.com/grpc/grpc-java/commit/8be8437691c2e47b0aece8a124ce9892d435ff7d", "committedDate": "2020-02-28T22:23:57Z", "message": "apply review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e70877c82ddfa920d4bf85b563ac5c84cedef8d", "author": {"user": {"login": "creamsoup", "name": "Jihun Cho"}}, "url": "https://github.com/grpc/grpc-java/commit/6e70877c82ddfa920d4bf85b563ac5c84cedef8d", "committedDate": "2020-02-28T22:25:28Z", "message": "Merge remote-tracking branch 'upstream/master' into rls_pr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e57aac89410a387f1cdff6d950224cdc1a9750f1", "author": {"user": {"login": "creamsoup", "name": "Jihun Cho"}}, "url": "https://github.com/grpc/grpc-java/commit/e57aac89410a387f1cdff6d950224cdc1a9750f1", "committedDate": "2020-02-28T22:27:09Z", "message": "Merge remote-tracking branch 'upstream/master' into rls_pr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1897e379c530bc507fe467dec9ac89d84fe4f741", "author": {"user": {"login": "creamsoup", "name": "Jihun Cho"}}, "url": "https://github.com/grpc/grpc-java/commit/1897e379c530bc507fe467dec9ac89d84fe4f741", "committedDate": "2020-02-28T22:39:16Z", "message": "fix lint errors"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NzU4MTQ2", "url": "https://github.com/grpc/grpc-java/pull/6743#pullrequestreview-366758146", "createdAt": "2020-02-29T00:39:24Z", "commit": {"oid": "1897e379c530bc507fe467dec9ac89d84fe4f741"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMDozOToyNFrOFwGdIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMDo0MDoxMFrOFwGdew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4MTczMA==", "bodyText": "proto or raw config messages", "url": "https://github.com/grpc/grpc-java/pull/6743#discussion_r385981730", "createdAt": "2020-02-29T00:39:24Z", "author": {"login": "dapengzhang0"}, "path": "rls/src/main/java/io/grpc/rls/internal/RlsProtoConverters.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls.internal;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.common.base.Converter;\n+import io.grpc.internal.JsonUtil;\n+import io.grpc.lookup.v1.RouteLookupRequest;\n+import io.grpc.lookup.v1.RouteLookupResponse;\n+import io.grpc.rls.internal.RlsProtoData.GrpcKeyBuilder;\n+import io.grpc.rls.internal.RlsProtoData.GrpcKeyBuilder.Name;\n+import io.grpc.rls.internal.RlsProtoData.NameMatcher;\n+import io.grpc.rls.internal.RlsProtoData.RequestProcessingStrategy;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupConfig;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * RlsProtoConverters is a collection of {@link Converter} between RouteLookupService proto messages", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1897e379c530bc507fe467dec9ac89d84fe4f741"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4MTgxOQ==", "bodyText": "Oh, good to know.", "url": "https://github.com/grpc/grpc-java/pull/6743#discussion_r385981819", "createdAt": "2020-02-29T00:40:10Z", "author": {"login": "dapengzhang0"}, "path": "rls/src/test/java/io/grpc/rls/internal/RlsProtoConvertersTest.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.rls.internal;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.common.base.Converter;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.grpc.internal.JsonParser;\n+import io.grpc.lookup.v1.RouteLookupRequest;\n+import io.grpc.lookup.v1.RouteLookupResponse;\n+import io.grpc.rls.internal.RlsProtoConverters.RouteLookupConfigConverter;\n+import io.grpc.rls.internal.RlsProtoConverters.RouteLookupRequestConverter;\n+import io.grpc.rls.internal.RlsProtoConverters.RouteLookupResponseConverter;\n+import io.grpc.rls.internal.RlsProtoData.GrpcKeyBuilder;\n+import io.grpc.rls.internal.RlsProtoData.GrpcKeyBuilder.Name;\n+import io.grpc.rls.internal.RlsProtoData.NameMatcher;\n+import io.grpc.rls.internal.RlsProtoData.RequestProcessingStrategy;\n+import io.grpc.rls.internal.RlsProtoData.RouteLookupConfig;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg3MDQ0Mg=="}, "originalCommit": {"oid": "d64696d6c909c4ce0a3b0435347af64684cc2c98"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NzYxNTI3", "url": "https://github.com/grpc/grpc-java/pull/6743#pullrequestreview-366761527", "createdAt": "2020-02-29T00:59:58Z", "commit": {"oid": "1897e379c530bc507fe467dec9ac89d84fe4f741"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0976c6bc9a0b1da6b28eddcd56049272a98a7556", "author": {"user": {"login": "creamsoup", "name": "Jihun Cho"}}, "url": "https://github.com/grpc/grpc-java/commit/0976c6bc9a0b1da6b28eddcd56049272a98a7556", "committedDate": "2020-02-29T01:08:55Z", "message": "fix javadoc"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4600, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}