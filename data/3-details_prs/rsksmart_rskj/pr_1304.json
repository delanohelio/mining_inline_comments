{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyOTk1OTk4", "number": 1304, "title": "Create OP_RETURN parser", "bodyText": "Create interface and implement it on PegInstructionBaseClase from where all the versions will extend\nCreate multiple exceptions to manage errors", "createdAt": "2020-09-09T16:59:38Z", "url": "https://github.com/rsksmart/rskj/pull/1304", "merged": true, "mergeCommit": {"oid": "aa7df6286f885317102216a0b0ab0b7c4bd9c8ca"}, "closed": true, "closedAt": "2020-09-15T18:03:28Z", "author": {"login": "guidohernan93"}, "timelineItems": {"totalCount": 41, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHP_V2AFqTQ4NTI1MTY3OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJLjcAgBqjM3Njk2MDY5OTA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1MjUxNjc4", "url": "https://github.com/rsksmart/rskj/pull/1304#pullrequestreview-485251678", "createdAt": "2020-09-09T17:36:42Z", "commit": {"oid": "68d653e4b88970592cebaff89ae37dcf80f00075"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNzozNjo0MlrOHPS1Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNzo1MTowN1rOHPTT0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc5OTE4Mw==", "bodyText": "I suggest making this class extend PeginInstructionsException", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485799183", "createdAt": "2020-09-09T17:36:42Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsParseException.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package co.rsk.peg.pegininstructions;\n+\n+public class PeginInstructionsParseException extends Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d653e4b88970592cebaff89ae37dcf80f00075"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwMDAwNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.debug(\"[getOpReturnOutput] {}\", message);\n          \n          \n            \n                        logger.debug(\"[buildPeginInstructions] {}\", message);", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485800006", "createdAt": "2020-09-09T17:38:13Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.peg.utils.BtcTransactionFormatUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+        PeginInstructionsBase peginInstructions;\n+        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d653e4b88970592cebaff89ae37dcf80f00075"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwMTMzMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n          \n          \n            \n                public PeginInstructions buildPeginInstructions(BtcTransaction btcTx) throws PeginInstructionsException {\n          \n      \n    \n    \n  \n\nYou should return the interface, not the base class, and the method should throw a specific Exception, not a generic one", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485801331", "createdAt": "2020-09-09T17:40:30Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.peg.utils.BtcTransactionFormatUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d653e4b88970592cebaff89ae37dcf80f00075"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwMjE5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.debug(\"[getOpReturnOutput] {}\", message);\n          \n          \n            \n                        logger.debug(\"[extractOpReturnData] {}\", message);\n          \n      \n    \n    \n  \n\nAnd there is another logger with the same typo", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485802199", "createdAt": "2020-09-09T17:42:00Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/main/java/co/rsk/peg/utils/BtcTransactionFormatUtils.java", "diffHunk": "@@ -57,4 +68,38 @@ public static boolean isBlockHeaderSize(int size, ActivationConfig.ForBlock acti\n         return (activations.isActive(ConsensusRule.RSKIP124) && size == MIN_BLOCK_HEADER_SIZE) ||\n                 (!activations.isActive(ConsensusRule.RSKIP124) && size >= MIN_BLOCK_HEADER_SIZE && size <= MAX_BLOCK_HEADER_SIZE);\n     }\n+\n+    public static byte[] extractOpReturnData(BtcTransaction btcTx) throws NoOpReturnException, InvalidOpReturnOutputException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.info(\"[getOpReturnOutput] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = \"No OP_RETURN output found for tx\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d653e4b88970592cebaff89ae37dcf80f00075"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwMjQ5OA==", "bodyText": "Why should it fail if it doesn't find an op_return op code?", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485802498", "createdAt": "2020-09-09T17:42:35Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/main/java/co/rsk/peg/utils/BtcTransactionFormatUtils.java", "diffHunk": "@@ -57,4 +68,38 @@ public static boolean isBlockHeaderSize(int size, ActivationConfig.ForBlock acti\n         return (activations.isActive(ConsensusRule.RSKIP124) && size == MIN_BLOCK_HEADER_SIZE) ||\n                 (!activations.isActive(ConsensusRule.RSKIP124) && size >= MIN_BLOCK_HEADER_SIZE && size <= MAX_BLOCK_HEADER_SIZE);\n     }\n+\n+    public static byte[] extractOpReturnData(BtcTransaction btcTx) throws NoOpReturnException, InvalidOpReturnOutputException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.info(\"[getOpReturnOutput] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = \"No OP_RETURN output found for tx\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new NoOpReturnException(message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d653e4b88970592cebaff89ae37dcf80f00075"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwMzEwNA==", "bodyText": "Add a couple more tests, null and empty data at least.", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485803104", "createdAt": "2020-09-09T17:43:42Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsBaseTest.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import org.bouncycastle.util.encoders.Hex;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class PeginInstructionsBaseTest {\n+\n+    @Test\n+    public void extractProtocolVersion() {\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(\n+                Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a\"));\n+\n+        Assert.assertEquals(1, protocolVersion);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d653e4b88970592cebaff89ae37dcf80f00075"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwNTgzMQ==", "bodyText": "This and the following test should be a single test.", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485805831", "createdAt": "2020-09-09T17:48:56Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.bitcoinj.core.Coin;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import co.rsk.bitcoinj.script.Script;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import co.rsk.config.BridgeRegTestConstants;\n+import co.rsk.core.RskAddress;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class PeginInstructionsProviderTest {\n+    private final NetworkParameters params = BridgeRegTestConstants.getInstance().getBtcParams();\n+\n+    @Test(expected = PeginInstructionsException.class)\n+    public void peginInstructionsProvider_buildPeginInstructions_null_op_return_data() throws Exception {\n+        BtcTransaction btcTransaction = new BtcTransaction(params);\n+\n+        // Add OP_RETURN output with empty data\n+        btcTransaction.addOutput(Coin.ZERO, new Script(new byte[] { ScriptOpCodes.OP_RETURN }));\n+\n+        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n+        peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+    }\n+\n+    @Test(expected = PeginInstructionsException.class)\n+    public void peginInstructionsProvider_buildPeginInstructions_invalid_protocol_version() throws Exception {\n+        BtcTransaction btcTransaction = new BtcTransaction(params,\n+                Hex.decode(RawTransactions.INVALID_PROTOCOL_VERSION_TX));\n+\n+        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n+        peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsProvider_buildPeginInstructions_try_parse_data_length_smaller_than_expected_v1() throws\n+            Exception {\n+        BtcTransaction btcTransaction = new BtcTransaction(params,\n+                Hex.decode(RawTransactions.SMALLER_THAN_EXPECTED_DATA_TX));\n+\n+        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n+        peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsProvider_buildPeginInstructions_try_parse_data_length_different_than_supported_v1() throws\n+            Exception {\n+        BtcTransaction btcTransaction = new BtcTransaction(params,\n+                Hex.decode(RawTransactions.UNSUPPORTED_DATA_LENGTH_FOR_V1_TX));\n+\n+        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n+        peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+    }\n+\n+    @Test\n+    public void peginInstructionsProvider_buildPeginInstructions_and_check_protocol_version_v1() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d653e4b88970592cebaff89ae37dcf80f00075"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwNzA1Nw==", "bodyText": "This method should be at most protected", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485807057", "createdAt": "2020-09-09T17:51:07Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsVersion1.class);\n+    private static final int P2PKH_ADDRESS_TYPE = 1;\n+    private static final int P2SH_ADDRESS_TYPE = 2;\n+\n+    private final NetworkParameters params;\n+    private Optional<Address> btcRefundAddress;\n+\n+    public PeginInstructionsVersion1(NetworkParameters params) {\n+        super(1);\n+        this.params = params;\n+    }\n+\n+    @Override\n+    protected void validateDataLength(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length != 22 && data.length != 43) {\n+            logger.debug(\"[validateDataLength] Invalid data length\");\n+            throw new PeginInstructionsParseException(\"[validateDataLength] Invalid data length\");\n+        }\n+    }\n+\n+    @Override\n+    protected void parseAdditionalData(byte[] data) throws PeginInstructionsParseException {\n+        this.btcRefundAddress = getBtcRefundAddressFromData(data);\n+    }\n+\n+    public Optional<Address> getBtcRefundAddressFromData(byte[] data) throws PeginInstructionsParseException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d653e4b88970592cebaff89ae37dcf80f00075"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1Mjg5NTcw", "url": "https://github.com/rsksmart/rskj/pull/1304#pullrequestreview-485289570", "createdAt": "2020-09-09T18:30:13Z", "commit": {"oid": "68d653e4b88970592cebaff89ae37dcf80f00075"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODozMDoxM1rOHPUoKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOTo0NjoxOFrOHPXdLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgyODY1MQ==", "bodyText": "Add @Override annotation", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485828651", "createdAt": "2020-09-09T18:30:13Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.core.RskAddress;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+\n+public abstract class PeginInstructionsBase implements PeginInstructions {\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n+\n+    protected RskAddress rskDestinationAddress;\n+    private final int protocolVersion;\n+\n+    protected PeginInstructionsBase(int protocolVersion) {\n+        this.protocolVersion = protocolVersion;\n+    }\n+\n+    public RskAddress getRskDestinationAddress() {\n+        return this.rskDestinationAddress;\n+    }\n+\n+    public int getProtocolVersion() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d653e4b88970592cebaff89ae37dcf80f00075"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzMjg3MA==", "bodyText": "Add @OverRide annotation", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485832870", "createdAt": "2020-09-09T18:38:07Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.core.RskAddress;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+\n+public abstract class PeginInstructionsBase implements PeginInstructions {\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n+\n+    protected RskAddress rskDestinationAddress;\n+    private final int protocolVersion;\n+\n+    protected PeginInstructionsBase(int protocolVersion) {\n+        this.protocolVersion = protocolVersion;\n+    }\n+\n+    public RskAddress getRskDestinationAddress() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d653e4b88970592cebaff89ae37dcf80f00075"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzMzQ4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new PeginInstructionsParseException(\"Invalid data length\");\n          \n          \n            \n                        throw new PeginInstructionsParseException(\"Invalid data length. Expected at least 22 bytes, received {}\", data.length);", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485833482", "createdAt": "2020-09-09T18:39:21Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.core.RskAddress;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+\n+public abstract class PeginInstructionsBase implements PeginInstructions {\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n+\n+    protected RskAddress rskDestinationAddress;\n+    private final int protocolVersion;\n+\n+    protected PeginInstructionsBase(int protocolVersion) {\n+        this.protocolVersion = protocolVersion;\n+    }\n+\n+    public RskAddress getRskDestinationAddress() {\n+        return this.rskDestinationAddress;\n+    }\n+\n+    public int getProtocolVersion() {\n+        return this.protocolVersion;\n+    }\n+\n+    public static int extractProtocolVersion(byte[] data) {\n+        byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n+        return ByteUtil.byteArrayToInt(protocolVersionBytes);\n+    }\n+\n+    public void parse(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length < 22) {\n+            logger.debug(\"[parse] Invalid data length\");\n+            throw new PeginInstructionsParseException(\"Invalid data length\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d653e4b88970592cebaff89ae37dcf80f00075"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzNTAxNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    PeginInstructionsBase peginInstructions;\n          \n          \n            \n                    PeginInstructions peginInstructions;", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485835016", "createdAt": "2020-09-09T18:42:09Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.peg.utils.BtcTransactionFormatUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+        PeginInstructionsBase peginInstructions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d653e4b88970592cebaff89ae37dcf80f00075"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzNTI5Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n          \n          \n            \n                    byte[] opReturnOutputData = BtcTransactionFormatUtils.extractOpReturnData(btcTx);", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485835296", "createdAt": "2020-09-09T18:42:39Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.peg.utils.BtcTransactionFormatUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+        PeginInstructionsBase peginInstructions;\n+        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d653e4b88970592cebaff89ae37dcf80f00075"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzODE1Nw==", "bodyText": "If opReturnOutput has only 1 byte this will throw OutOfBoundsException. Maybe when checking if the data is null we could also check if data length is at least 22 bytes", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485838157", "createdAt": "2020-09-09T18:48:20Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.peg.utils.BtcTransactionFormatUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+        PeginInstructionsBase peginInstructions;\n+        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d653e4b88970592cebaff89ae37dcf80f00075"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0MjIzMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n          \n          \n            \n                            peginInstructionsVersion1.parse(opReturnOutput);\n          \n          \n            \n                            peginInstructions = peginInstructionsVersion1;\n          \n          \n            \n                            peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n          \n          \n            \n                            ((PeginInstructionsVersion1) peginInstructions).parse(opReturnOutput);", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485842232", "createdAt": "2020-09-09T18:55:57Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.peg.utils.BtcTransactionFormatUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+        PeginInstructionsBase peginInstructions;\n+        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+\n+        switch (protocolVersion) {\n+            case 1:\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructions = peginInstructionsVersion1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d653e4b88970592cebaff89ae37dcf80f00075"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0MjY2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n          \n          \n            \n                            logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485842669", "createdAt": "2020-09-09T18:56:42Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.peg.utils.BtcTransactionFormatUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+        PeginInstructionsBase peginInstructions;\n+        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+\n+        switch (protocolVersion) {\n+            case 1:\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructions = peginInstructionsVersion1;\n+                break;\n+            default:\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d653e4b88970592cebaff89ae37dcf80f00075"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0NDgzMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            logger.trace(\"[buildPeginInstructions] PeginInstructions: {}\", peginInstructions.getClass());", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485844831", "createdAt": "2020-09-09T19:00:36Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.peg.utils.BtcTransactionFormatUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public PeginInstructionsBase buildPeginInstructions(BtcTransaction btcTx) throws Exception {\n+        PeginInstructionsBase peginInstructions;\n+        byte[] opReturnOutput = BtcTransactionFormatUtils.extractOpReturnData(btcTx);\n+\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+\n+        switch (protocolVersion) {\n+            case 1:\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructions = peginInstructionsVersion1;\n+                break;\n+            default:\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                throw new PeginInstructionsException(\"Invalid protocol version\");\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d653e4b88970592cebaff89ae37dcf80f00075"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0Nzc5Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.debug(\"[validateDataLength] Invalid data length\");\n          \n          \n            \n                        logger.debug(\"[validateDataLength] Invalid data length. Expected 22 or 43 bytes, received {}\", data.length);", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485847796", "createdAt": "2020-09-09T19:06:24Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsVersion1.class);\n+    private static final int P2PKH_ADDRESS_TYPE = 1;\n+    private static final int P2SH_ADDRESS_TYPE = 2;\n+\n+    private final NetworkParameters params;\n+    private Optional<Address> btcRefundAddress;\n+\n+    public PeginInstructionsVersion1(NetworkParameters params) {\n+        super(1);\n+        this.params = params;\n+    }\n+\n+    @Override\n+    protected void validateDataLength(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length != 22 && data.length != 43) {\n+            logger.debug(\"[validateDataLength] Invalid data length\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d653e4b88970592cebaff89ae37dcf80f00075"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0ODM2OQ==", "bodyText": "Same message as above, put in a variable", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485848369", "createdAt": "2020-09-09T19:07:20Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsVersion1.class);\n+    private static final int P2PKH_ADDRESS_TYPE = 1;\n+    private static final int P2SH_ADDRESS_TYPE = 2;\n+\n+    private final NetworkParameters params;\n+    private Optional<Address> btcRefundAddress;\n+\n+    public PeginInstructionsVersion1(NetworkParameters params) {\n+        super(1);\n+        this.params = params;\n+    }\n+\n+    @Override\n+    protected void validateDataLength(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length != 22 && data.length != 43) {\n+            logger.debug(\"[validateDataLength] Invalid data length\");\n+            throw new PeginInstructionsParseException(\"[validateDataLength] Invalid data length\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d653e4b88970592cebaff89ae37dcf80f00075"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0OTk0Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger.debug(\"[getBtcRefundAddressFromData] Invalid btc address type\");\n          \n          \n            \n                            logger.debug(\"[getBtcRefundAddressFromData] Invalid btc address type: {}\", btcRefundAddressType);", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485849942", "createdAt": "2020-09-09T19:10:06Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsVersion1.class);\n+    private static final int P2PKH_ADDRESS_TYPE = 1;\n+    private static final int P2SH_ADDRESS_TYPE = 2;\n+\n+    private final NetworkParameters params;\n+    private Optional<Address> btcRefundAddress;\n+\n+    public PeginInstructionsVersion1(NetworkParameters params) {\n+        super(1);\n+        this.params = params;\n+    }\n+\n+    @Override\n+    protected void validateDataLength(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length != 22 && data.length != 43) {\n+            logger.debug(\"[validateDataLength] Invalid data length\");\n+            throw new PeginInstructionsParseException(\"[validateDataLength] Invalid data length\");\n+        }\n+    }\n+\n+    @Override\n+    protected void parseAdditionalData(byte[] data) throws PeginInstructionsParseException {\n+        this.btcRefundAddress = getBtcRefundAddressFromData(data);\n+    }\n+\n+    public Optional<Address> getBtcRefundAddressFromData(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length == 22) {\n+            return Optional.empty();\n+        }\n+\n+        byte[] btcRefundAddressTypeBytes = Arrays.copyOfRange(data, 22, 23);\n+        int btcRefundAddressType = ByteUtil.byteArrayToInt(btcRefundAddressTypeBytes);\n+        byte[] hash = Arrays.copyOfRange(data, 23, data.length);\n+\n+        Address btcRefundAddress;\n+\n+        switch (btcRefundAddressType) {\n+            case P2PKH_ADDRESS_TYPE:\n+                // Uses pubKeyHash\n+                btcRefundAddress = new Address(this.params, hash);\n+                break;\n+            case P2SH_ADDRESS_TYPE:\n+                // Uses scriptPubKeyHash\n+                btcRefundAddress = new Address(this.params, this.params.getP2SHHeader(), hash);\n+                break;\n+            default:\n+                logger.debug(\"[getBtcRefundAddressFromData] Invalid btc address type\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d653e4b88970592cebaff89ae37dcf80f00075"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1MDE4Mg==", "bodyText": "Same message as above, put it in a variable", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485850182", "createdAt": "2020-09-09T19:10:32Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsVersion1.class);\n+    private static final int P2PKH_ADDRESS_TYPE = 1;\n+    private static final int P2SH_ADDRESS_TYPE = 2;\n+\n+    private final NetworkParameters params;\n+    private Optional<Address> btcRefundAddress;\n+\n+    public PeginInstructionsVersion1(NetworkParameters params) {\n+        super(1);\n+        this.params = params;\n+    }\n+\n+    @Override\n+    protected void validateDataLength(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length != 22 && data.length != 43) {\n+            logger.debug(\"[validateDataLength] Invalid data length\");\n+            throw new PeginInstructionsParseException(\"[validateDataLength] Invalid data length\");\n+        }\n+    }\n+\n+    @Override\n+    protected void parseAdditionalData(byte[] data) throws PeginInstructionsParseException {\n+        this.btcRefundAddress = getBtcRefundAddressFromData(data);\n+    }\n+\n+    public Optional<Address> getBtcRefundAddressFromData(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length == 22) {\n+            return Optional.empty();\n+        }\n+\n+        byte[] btcRefundAddressTypeBytes = Arrays.copyOfRange(data, 22, 23);\n+        int btcRefundAddressType = ByteUtil.byteArrayToInt(btcRefundAddressTypeBytes);\n+        byte[] hash = Arrays.copyOfRange(data, 23, data.length);\n+\n+        Address btcRefundAddress;\n+\n+        switch (btcRefundAddressType) {\n+            case P2PKH_ADDRESS_TYPE:\n+                // Uses pubKeyHash\n+                btcRefundAddress = new Address(this.params, hash);\n+                break;\n+            case P2SH_ADDRESS_TYPE:\n+                // Uses scriptPubKeyHash\n+                btcRefundAddress = new Address(this.params, this.params.getP2SHHeader(), hash);\n+                break;\n+            default:\n+                logger.debug(\"[getBtcRefundAddressFromData] Invalid btc address type\");\n+                throw new PeginInstructionsParseException(\"Invalid btc address type\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d653e4b88970592cebaff89ae37dcf80f00075"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1MDY0MA==", "bodyText": "Log obtained address", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485850640", "createdAt": "2020-09-09T19:11:12Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsVersion1.class);\n+    private static final int P2PKH_ADDRESS_TYPE = 1;\n+    private static final int P2SH_ADDRESS_TYPE = 2;\n+\n+    private final NetworkParameters params;\n+    private Optional<Address> btcRefundAddress;\n+\n+    public PeginInstructionsVersion1(NetworkParameters params) {\n+        super(1);\n+        this.params = params;\n+    }\n+\n+    @Override\n+    protected void validateDataLength(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length != 22 && data.length != 43) {\n+            logger.debug(\"[validateDataLength] Invalid data length\");\n+            throw new PeginInstructionsParseException(\"[validateDataLength] Invalid data length\");\n+        }\n+    }\n+\n+    @Override\n+    protected void parseAdditionalData(byte[] data) throws PeginInstructionsParseException {\n+        this.btcRefundAddress = getBtcRefundAddressFromData(data);\n+    }\n+\n+    public Optional<Address> getBtcRefundAddressFromData(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length == 22) {\n+            return Optional.empty();\n+        }\n+\n+        byte[] btcRefundAddressTypeBytes = Arrays.copyOfRange(data, 22, 23);\n+        int btcRefundAddressType = ByteUtil.byteArrayToInt(btcRefundAddressTypeBytes);\n+        byte[] hash = Arrays.copyOfRange(data, 23, data.length);\n+\n+        Address btcRefundAddress;\n+\n+        switch (btcRefundAddressType) {\n+            case P2PKH_ADDRESS_TYPE:\n+                // Uses pubKeyHash\n+                btcRefundAddress = new Address(this.params, hash);\n+                break;\n+            case P2SH_ADDRESS_TYPE:\n+                // Uses scriptPubKeyHash\n+                btcRefundAddress = new Address(this.params, this.params.getP2SHHeader(), hash);\n+                break;\n+            default:\n+                logger.debug(\"[getBtcRefundAddressFromData] Invalid btc address type\");\n+                throw new PeginInstructionsParseException(\"Invalid btc address type\");\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d653e4b88970592cebaff89ae37dcf80f00075"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1MTIzMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n          \n          \n            \n                protected abstract void validateAdditionalDataLength(byte[] data) throws PeginInstructionsParseException;", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485851233", "createdAt": "2020-09-09T19:12:23Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.core.RskAddress;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+\n+public abstract class PeginInstructionsBase implements PeginInstructions {\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n+\n+    protected RskAddress rskDestinationAddress;\n+    private final int protocolVersion;\n+\n+    protected PeginInstructionsBase(int protocolVersion) {\n+        this.protocolVersion = protocolVersion;\n+    }\n+\n+    public RskAddress getRskDestinationAddress() {\n+        return this.rskDestinationAddress;\n+    }\n+\n+    public int getProtocolVersion() {\n+        return this.protocolVersion;\n+    }\n+\n+    public static int extractProtocolVersion(byte[] data) {\n+        byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n+        return ByteUtil.byteArrayToInt(protocolVersionBytes);\n+    }\n+\n+    public void parse(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length < 22) {\n+            logger.debug(\"[parse] Invalid data length\");\n+            throw new PeginInstructionsParseException(\"Invalid data length\");\n+        }\n+\n+        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n+        validateDataLength(data);\n+        parseAdditionalData(data);\n+    }\n+\n+    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d653e4b88970592cebaff89ae37dcf80f00075"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1MTc2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n          \n          \n            \n                protected abstract void validateAdditionalDataLength(byte[] data) throws PeginInstructionsParseException;", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485851762", "createdAt": "2020-09-09T19:13:20Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.core.RskAddress;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+\n+public abstract class PeginInstructionsBase implements PeginInstructions {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n+    private final int protocolVersion;\n+    protected RskAddress rskDestinationAddress;\n+\n+    protected PeginInstructionsBase(int protocolVersion) {\n+        this.protocolVersion = protocolVersion;\n+    }\n+\n+    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n+        byte[] rskDestinationAddress = Arrays.copyOfRange(data, 2, 22);\n+        return new RskAddress(rskDestinationAddress);\n+    }\n+\n+    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99c0bbf50155caf7f5e97d59cdef6831123975a9"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1MjYyMQ==", "bodyText": "I would add some trace level logging, btc tx hash, protocol version, maybe op return data also", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485852621", "createdAt": "2020-09-09T19:14:55Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.bitcoinj.script.ScriptChunk;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import co.rsk.peg.InvalidOpReturnOutputException;\n+import co.rsk.peg.NoOpReturnException;\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public PeginInstructions buildPeginInstructions(BtcTransaction btcTx) throws", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99c0bbf50155caf7f5e97d59cdef6831123975a9"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1NTY3OA==", "bodyText": "This can go inside peginstructions package since it's only thrown from PeginInstructionsProvider. And also inherit from PeginInstructionsException", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485855678", "createdAt": "2020-09-09T19:20:53Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/main/java/co/rsk/peg/InvalidOpReturnOutputException.java", "diffHunk": "@@ -0,0 +1,7 @@\n+package co.rsk.peg;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99c0bbf50155caf7f5e97d59cdef6831123975a9"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1NTc4MQ==", "bodyText": "This can go inside peginstructions package since it's only thrown from PeginInstructionsProvider. And also inherit from PeginInstructionsException", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485855781", "createdAt": "2020-09-09T19:21:05Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/main/java/co/rsk/peg/NoOpReturnException.java", "diffHunk": "@@ -0,0 +1,7 @@\n+package co.rsk.peg;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99c0bbf50155caf7f5e97d59cdef6831123975a9"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1NjY5Mg==", "bodyText": "Add the case when a single byte is sent in the payload", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485856692", "createdAt": "2020-09-09T19:22:47Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsBaseTest.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import org.bouncycastle.util.encoders.Hex;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class PeginInstructionsBaseTest {\n+\n+    @Test\n+    public void extractProtocolVersion() {\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(\n+                Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a\"));\n+\n+        Assert.assertEquals(1, protocolVersion);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwMzEwNA=="}, "originalCommit": {"oid": "68d653e4b88970592cebaff89ae37dcf80f00075"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1NzMxOA==", "bodyText": "Maybe also a test when protocol version > 9 to check that it's parsing hex values to int correctly", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485857318", "createdAt": "2020-09-09T19:24:00Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsBaseTest.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import org.bouncycastle.util.encoders.Hex;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class PeginInstructionsBaseTest {\n+\n+    @Test\n+    public void extractProtocolVersion() {\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(\n+                Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a\"));\n+\n+        Assert.assertEquals(1, protocolVersion);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwMzEwNA=="}, "originalCommit": {"oid": "68d653e4b88970592cebaff89ae37dcf80f00075"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1OTk4Mg==", "bodyText": "thrown InvalidOpReturnOutputException", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485859982", "createdAt": "2020-09-09T19:27:41Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.bitcoinj.script.ScriptChunk;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import co.rsk.peg.InvalidOpReturnOutputException;\n+import co.rsk.peg.NoOpReturnException;\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public PeginInstructions buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException, NoOpReturnException, InvalidOpReturnOutputException {\n+\n+        PeginInstructionsBase peginInstructions;\n+        byte[] opReturnOutput = extractOpReturnData(btcTx);\n+\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[buildPeginInstructions] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+\n+        switch (protocolVersion) {\n+            case 1:\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructions = peginInstructionsVersion1;\n+                break;\n+            default:\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                throw new PeginInstructionsException(\"Invalid protocol version\");\n+        }\n+\n+        return peginInstructions;\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx) throws NoOpReturnException, InvalidOpReturnOutputException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.info(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    opReturnOccurrences++;\n+                    data = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99c0bbf50155caf7f5e97d59cdef6831123975a9"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg2MDgxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String message = \"Only one output with OP_RETURN is allowed\";\n          \n          \n            \n                        String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\", opReturnOccurrences);", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485860812", "createdAt": "2020-09-09T19:28:46Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.bitcoinj.script.ScriptChunk;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import co.rsk.peg.InvalidOpReturnOutputException;\n+import co.rsk.peg.NoOpReturnException;\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public PeginInstructions buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException, NoOpReturnException, InvalidOpReturnOutputException {\n+\n+        PeginInstructionsBase peginInstructions;\n+        byte[] opReturnOutput = extractOpReturnData(btcTx);\n+\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[buildPeginInstructions] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+\n+        switch (protocolVersion) {\n+            case 1:\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructions = peginInstructionsVersion1;\n+                break;\n+            default:\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                throw new PeginInstructionsException(\"Invalid protocol version\");\n+        }\n+\n+        return peginInstructions;\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx) throws NoOpReturnException, InvalidOpReturnOutputException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.info(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = \"No OP_RETURN output found for tx\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);\n+            throw new NoOpReturnException(message);\n+        }\n+\n+        if (opReturnOccurrences > 1) {\n+            String message = \"Only one output with OP_RETURN is allowed\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99c0bbf50155caf7f5e97d59cdef6831123975a9"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg2NDkwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    PeginInstructionsVersion1 peginInstructionsVersion1 =\n          \n          \n            \n                            (PeginInstructionsVersion1) peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n          \n          \n            \n                    PeginInstructions peginInstructions =\n          \n          \n            \n            peginInstructionsProvider.buildPeginInstructions(btcTransaction);", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485864903", "createdAt": "2020-09-09T19:34:21Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsProviderTest.java", "diffHunk": "@@ -0,0 +1,110 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.bitcoinj.core.Coin;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import co.rsk.bitcoinj.script.Script;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import co.rsk.config.BridgeRegTestConstants;\n+import co.rsk.core.RskAddress;\n+import co.rsk.peg.InvalidOpReturnOutputException;\n+import co.rsk.peg.NoOpReturnException;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class PeginInstructionsProviderTest {\n+    private final NetworkParameters params = BridgeRegTestConstants.getInstance().getBtcParams();\n+\n+    @Test(expected = PeginInstructionsException.class)\n+    public void peginInstructionsProvider_buildPeginInstructions_null_op_return_data() throws Exception {\n+        BtcTransaction btcTransaction = new BtcTransaction(params);\n+\n+        // Add OP_RETURN output with empty data\n+        btcTransaction.addOutput(Coin.ZERO, new Script(new byte[] { ScriptOpCodes.OP_RETURN }));\n+\n+        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n+        peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+    }\n+\n+    @Test(expected = PeginInstructionsException.class)\n+    public void peginInstructionsProvider_buildPeginInstructions_invalid_protocol_version() throws Exception {\n+        BtcTransaction btcTransaction = new BtcTransaction(params,\n+                Hex.decode(RawTransactions.INVALID_PROTOCOL_VERSION_TX));\n+\n+        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n+        peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsProvider_buildPeginInstructions_try_parse_data_length_smaller_than_expected_v1() throws\n+            Exception {\n+        BtcTransaction btcTransaction = new BtcTransaction(params,\n+                Hex.decode(RawTransactions.SMALLER_THAN_EXPECTED_DATA_TX));\n+\n+        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n+        peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsProvider_buildPeginInstructions_try_parse_data_length_different_than_supported_v1() throws\n+            Exception {\n+        BtcTransaction btcTransaction = new BtcTransaction(params,\n+                Hex.decode(RawTransactions.UNSUPPORTED_DATA_LENGTH_FOR_V1_TX));\n+\n+        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n+        peginInstructionsProvider.buildPeginInstructions(btcTransaction);\n+    }\n+\n+    @Test\n+    public void peginInstructionsProvider_buildPeginInstructions_and_check_protocol_version_v1() throws Exception {\n+        BtcTransaction btcTransaction = new BtcTransaction(params,\n+                Hex.decode(RawTransactions.VALID_DATA_WITHOUT_REFUND_ADDRESS_V1_TX));\n+\n+        PeginInstructionsProvider peginInstructionsProvider = new PeginInstructionsProvider();\n+        PeginInstructionsVersion1 peginInstructionsVersion1 =\n+                (PeginInstructionsVersion1) peginInstructionsProvider.buildPeginInstructions(btcTransaction);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99c0bbf50155caf7f5e97d59cdef6831123975a9"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg3MzcwMg==", "bodyText": "Assert.assertFalse(obtainedBtcAddress.isP2SHAddress());", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485873702", "createdAt": "2020-09-09T19:44:51Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import co.rsk.config.BridgeRegTestConstants;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Optional;\n+\n+public class PeginInstructionsVersion1Test {\n+    private final NetworkParameters params = BridgeRegTestConstants.getInstance().getBtcParams();\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_validateDataLength_invalid_length_too_large() throws Exception {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        peginInstructionsVersion1.validateDataLength(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a98\"));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getProtocolVersion() {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        Assert.assertEquals(1, peginInstructionsVersion1.getProtocolVersion());\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getRskDestinationAddress_no_data() {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        Assert.assertNull(peginInstructionsVersion1.getRskDestinationAddress());\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_parse_data_invalid_length() throws PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        peginInstructionsVersion1.parse(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b\"));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_no_refund_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Assert.assertEquals(Optional.empty(),\n+                peginInstructionsVersion1.getBtcRefundAddressFromData(\n+                        Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a\")));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_p2pkh_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Address btcAddress = new Address(params, Hex.decode(\"4f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a014f4c767a2d308eebb3f0f1247f9163c896e0b7d2\";\n+        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+\n+        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99c0bbf50155caf7f5e97d59cdef6831123975a9"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg3NDAzOA==", "bodyText": "Assert.assertTrue(obtainedBtcAddress.isP2SHAddress());", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485874038", "createdAt": "2020-09-09T19:45:12Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import co.rsk.config.BridgeRegTestConstants;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Optional;\n+\n+public class PeginInstructionsVersion1Test {\n+    private final NetworkParameters params = BridgeRegTestConstants.getInstance().getBtcParams();\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_validateDataLength_invalid_length_too_large() throws Exception {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        peginInstructionsVersion1.validateDataLength(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a98\"));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getProtocolVersion() {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        Assert.assertEquals(1, peginInstructionsVersion1.getProtocolVersion());\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getRskDestinationAddress_no_data() {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        Assert.assertNull(peginInstructionsVersion1.getRskDestinationAddress());\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_parse_data_invalid_length() throws PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        peginInstructionsVersion1.parse(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b\"));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_no_refund_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Assert.assertEquals(Optional.empty(),\n+                peginInstructionsVersion1.getBtcRefundAddressFromData(\n+                        Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a\")));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_p2pkh_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Address btcAddress = new Address(params, Hex.decode(\"4f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a014f4c767a2d308eebb3f0f1247f9163c896e0b7d2\";\n+        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+\n+        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_p2sh_p2wpkh_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Address btcAddress = new Address(params,\n+                params.getP2SHHeader(),\n+                Hex.decode(\"19d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\"));\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0219d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n+        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+\n+        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99c0bbf50155caf7f5e97d59cdef6831123975a9"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg3NDk5MA==", "bodyText": "Assert.assertTrue(obtainedBtcAddress.isP2SHAddress());", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485874990", "createdAt": "2020-09-09T19:46:18Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1Test.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import co.rsk.config.BridgeRegTestConstants;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Optional;\n+\n+public class PeginInstructionsVersion1Test {\n+    private final NetworkParameters params = BridgeRegTestConstants.getInstance().getBtcParams();\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_validateDataLength_invalid_length_too_large() throws Exception {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        peginInstructionsVersion1.validateDataLength(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a98\"));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getProtocolVersion() {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        Assert.assertEquals(1, peginInstructionsVersion1.getProtocolVersion());\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getRskDestinationAddress_no_data() {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        Assert.assertNull(peginInstructionsVersion1.getRskDestinationAddress());\n+    }\n+\n+    @Test(expected = PeginInstructionsParseException.class)\n+    public void peginInstructionsV1_parse_data_invalid_length() throws PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+        peginInstructionsVersion1.parse(Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b\"));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_no_refund_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Assert.assertEquals(Optional.empty(),\n+                peginInstructionsVersion1.getBtcRefundAddressFromData(\n+                        Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a\")));\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_p2pkh_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Address btcAddress = new Address(params, Hex.decode(\"4f4c767a2d308eebb3f0f1247f9163c896e0b7d2\"));\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a014f4c767a2d308eebb3f0f1247f9163c896e0b7d2\";\n+        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+\n+        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_p2sh_p2wpkh_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Address btcAddress = new Address(params,\n+                params.getP2SHHeader(),\n+                Hex.decode(\"19d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\"));\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a0219d7e0ee9bf6bd70d1d046b066d1c2726e1accc1\";\n+        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+\n+        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);\n+    }\n+\n+    @Test\n+    public void peginInstructionsV1_getBtcRefundAddressFromData_p2sh_multisig_address() throws\n+            PeginInstructionsParseException {\n+        PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(params);\n+\n+        Address btcAddress = new Address(params,\n+                params.getP2SHHeader(),\n+                Hex.decode(\"6c230519d0957afca4a7ffbeda9ab29c3ca233d9\"));\n+\n+        String rawData = \"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a026c230519d0957afca4a7ffbeda9ab29c3ca233d9\";\n+\n+        Optional<Address> obtainedBtcAddress = peginInstructionsVersion1.getBtcRefundAddressFromData(Hex.decode(rawData));\n+        Assert.assertEquals(Optional.of(btcAddress), obtainedBtcAddress);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99c0bbf50155caf7f5e97d59cdef6831123975a9"}, "originalPosition": 89}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "99c0bbf50155caf7f5e97d59cdef6831123975a9", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/99c0bbf50155caf7f5e97d59cdef6831123975a9", "committedDate": "2020-09-09T19:03:58Z", "message": "Reorder PeginInstructionsBase class methods\nMove extractOpReturnData to PeginInstructionsProvider class\nMake getBtcRefundAddressFromData method protected"}, "afterCommit": {"oid": "4b575bbbd11cbe8848014162b77973cb185ce759", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/4b575bbbd11cbe8848014162b77973cb185ce759", "committedDate": "2020-09-09T19:48:51Z", "message": "Reorder PeginInstructionsBase class methods\nMove extractOpReturnData to PeginInstructionsProvider class\nMake getBtcRefundAddressFromData method protected"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4b575bbbd11cbe8848014162b77973cb185ce759", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/4b575bbbd11cbe8848014162b77973cb185ce759", "committedDate": "2020-09-09T19:48:51Z", "message": "Reorder PeginInstructionsBase class methods\nMove extractOpReturnData to PeginInstructionsProvider class\nMake getBtcRefundAddressFromData method protected"}, "afterCommit": {"oid": "43a640736b76964124ac737921ad88ef0473119c", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/43a640736b76964124ac737921ad88ef0473119c", "committedDate": "2020-09-09T20:30:21Z", "message": "Reorder PeginInstructionsBase class methods\nMove extractOpReturnData to PeginInstructionsProvider class\nMake getBtcRefundAddressFromData method protected"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "43a640736b76964124ac737921ad88ef0473119c", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/43a640736b76964124ac737921ad88ef0473119c", "committedDate": "2020-09-09T20:30:21Z", "message": "Reorder PeginInstructionsBase class methods\nMove extractOpReturnData to PeginInstructionsProvider class\nMake getBtcRefundAddressFromData method protected"}, "afterCommit": {"oid": "da429da76fc0bc1cc4b07e9013cdc0f4cf6cc9b7", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/da429da76fc0bc1cc4b07e9013cdc0f4cf6cc9b7", "committedDate": "2020-09-09T20:39:47Z", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "da429da76fc0bc1cc4b07e9013cdc0f4cf6cc9b7", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/da429da76fc0bc1cc4b07e9013cdc0f4cf6cc9b7", "committedDate": "2020-09-09T20:39:47Z", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations"}, "afterCommit": {"oid": "7935fa04834559d8eef2af17e5a0e930c7d48b83", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/7935fa04834559d8eef2af17e5a0e930c7d48b83", "committedDate": "2020-09-09T21:02:07Z", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7935fa04834559d8eef2af17e5a0e930c7d48b83", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/7935fa04834559d8eef2af17e5a0e930c7d48b83", "committedDate": "2020-09-09T21:02:07Z", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional"}, "afterCommit": {"oid": "79b2e23b18abd0a75fca2745198f2206c3e47afc", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/79b2e23b18abd0a75fca2745198f2206c3e47afc", "committedDate": "2020-09-09T21:27:54Z", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "79b2e23b18abd0a75fca2745198f2206c3e47afc", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/79b2e23b18abd0a75fca2745198f2206c3e47afc", "committedDate": "2020-09-09T21:27:54Z", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional"}, "afterCommit": {"oid": "ff67af16ebf89fae1d9cf0ca399c8d6a9c1e20e5", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/ff67af16ebf89fae1d9cf0ca399c8d6a9c1e20e5", "committedDate": "2020-09-09T21:55:50Z", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NDU0MDQx", "url": "https://github.com/rsksmart/rskj/pull/1304#pullrequestreview-485454041", "createdAt": "2020-09-09T22:48:37Z", "commit": {"oid": "ff67af16ebf89fae1d9cf0ca399c8d6a9c1e20e5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjo0ODozN1rOHPc3Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjo0ODozN1rOHPc3Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2MzU0Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected Optional<Address> getBtcRefundAddressFromData(byte[] data) throws PeginInstructionsParseException {\n          \n          \n            \n                protected void getBtcRefundAddressFromData(byte[] data) throws PeginInstructionsParseException {\n          \n      \n    \n    \n  \n\nJust set the value to btcRefundAddress inside this method instead of returning. It will save you a code smell", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r485963542", "createdAt": "2020-09-09T22:48:37Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsVersion1.class);\n+    private static final int P2PKH_ADDRESS_TYPE = 1;\n+    private static final int P2SH_ADDRESS_TYPE = 2;\n+\n+    private final NetworkParameters params;\n+    private Optional<Address> btcRefundAddress;\n+\n+    public PeginInstructionsVersion1(NetworkParameters params) {\n+        super(1);\n+        this.params = params;\n+    }\n+\n+    @Override\n+    protected void validateDataLength(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length != 22 && data.length != 43) {\n+            logger.debug(\"[validateDataLength] Invalid data length\");\n+            throw new PeginInstructionsParseException(\"[validateDataLength] Invalid data length\");\n+        }\n+    }\n+\n+    @Override\n+    protected void parseAdditionalData(byte[] data) throws PeginInstructionsParseException {\n+        this.btcRefundAddress = getBtcRefundAddressFromData(data);\n+    }\n+\n+    protected Optional<Address> getBtcRefundAddressFromData(byte[] data) throws PeginInstructionsParseException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff67af16ebf89fae1d9cf0ca399c8d6a9c1e20e5"}, "originalPosition": 38}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ff67af16ebf89fae1d9cf0ca399c8d6a9c1e20e5", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/ff67af16ebf89fae1d9cf0ca399c8d6a9c1e20e5", "committedDate": "2020-09-09T21:55:50Z", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional"}, "afterCommit": {"oid": "4f8191fcd751e47d69e56d23729922af287838c2", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/4f8191fcd751e47d69e56d23729922af287838c2", "committedDate": "2020-09-10T15:28:12Z", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional\n- Rename getBtcRefundAddress to parseBtcRefundAddress and make it void"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4f8191fcd751e47d69e56d23729922af287838c2", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/4f8191fcd751e47d69e56d23729922af287838c2", "committedDate": "2020-09-10T15:28:12Z", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional\n- Rename getBtcRefundAddress to parseBtcRefundAddress and make it void"}, "afterCommit": {"oid": "1f11bbf405afc836d29dd02b7e49305b60332120", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/1f11bbf405afc836d29dd02b7e49305b60332120", "committedDate": "2020-09-10T16:52:55Z", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional\n- Rename getBtcRefundAddress to parseBtcRefundAddress and make it void"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2Nzc2MjQ2", "url": "https://github.com/rsksmart/rskj/pull/1304#pullrequestreview-486776246", "createdAt": "2020-09-11T12:50:45Z", "commit": {"oid": "1f11bbf405afc836d29dd02b7e49305b60332120"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjo1MDo0NVrOHQdhFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzoxMjoyNVrOHQeRNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyMjg2OA==", "bodyText": "I would make this validation as the first step in this method. We want to validate the length before trying to parse any of the data.", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487022868", "createdAt": "2020-09-11T12:50:45Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.core.RskAddress;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+\n+public abstract class PeginInstructionsBase implements PeginInstructions {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n+    private final int protocolVersion;\n+    protected RskAddress rskDestinationAddress;\n+\n+    protected PeginInstructionsBase(int protocolVersion) {\n+        this.protocolVersion = protocolVersion;\n+    }\n+\n+    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n+        byte[] rskDestinationAddressBytes = Arrays.copyOfRange(data, 2, 22);\n+        return new RskAddress(rskDestinationAddressBytes);\n+    }\n+\n+    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n+\n+    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n+\n+    public static int extractProtocolVersion(byte[] data) {\n+        byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n+        return ByteUtil.byteArrayToInt(protocolVersionBytes);\n+    }\n+\n+    @Override\n+    public RskAddress getRskDestinationAddress() {\n+        return this.rskDestinationAddress;\n+    }\n+\n+    @Override\n+    public int getProtocolVersion() {\n+        return this.protocolVersion;\n+    }\n+\n+    public void parse(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length < 22) {\n+            logger.debug(\"[parse] Invalid data length\");\n+            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n+                + \"received %s\", data.length);\n+            throw new PeginInstructionsParseException(message);\n+        }\n+\n+        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n+        validateDataLength(data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f11bbf405afc836d29dd02b7e49305b60332120"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyMzY1OA==", "bodyText": "How could the data be null? and the data length validation is responsibility of PeginInstructions itself and not the provider", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487023658", "createdAt": "2020-09-11T12:52:06Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.bitcoinj.script.ScriptChunk;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import co.rsk.peg.NoOpReturnException;\n+import java.util.List;\n+import java.util.Optional;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        PeginInstructions peginInstructions;\n+        byte[] opReturnOutputData;\n+\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            return Optional.empty();\n+        }\n+\n+        if (opReturnOutputData == null || opReturnOutputData.length < 22) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f11bbf405afc836d29dd02b7e49305b60332120"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyNDE1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.info(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n          \n          \n            \n                    logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487024159", "createdAt": "2020-09-11T12:52:59Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.bitcoinj.script.ScriptChunk;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import co.rsk.peg.NoOpReturnException;\n+import java.util.List;\n+import java.util.Optional;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        PeginInstructions peginInstructions;\n+        byte[] opReturnOutputData;\n+\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            return Optional.empty();\n+        }\n+\n+        if (opReturnOutputData == null || opReturnOutputData.length < 22) {\n+            String message = \"Invalid OP_RETURN data found\";\n+            logger.debug(\"[buildPeginInstructions] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+\n+        switch (protocolVersion) {\n+            case 1:\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutputData);\n+                peginInstructions = peginInstructionsVersion1;\n+                break;\n+            default:\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                throw new PeginInstructionsException(\"Invalid protocol version\");\n+        }\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.info(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f11bbf405afc836d29dd02b7e49305b60332120"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyNTMyOQ==", "bodyText": "Catch any Exception here as well, because if there is any unhandled exception that would make the caller fail too.\nIf a generic Exception is thrown, log it so we can understand what happened", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487025329", "createdAt": "2020-09-11T12:55:00Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.bitcoinj.script.ScriptChunk;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import co.rsk.peg.NoOpReturnException;\n+import java.util.List;\n+import java.util.Optional;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        PeginInstructions peginInstructions;\n+        byte[] opReturnOutputData;\n+\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f11bbf405afc836d29dd02b7e49305b60332120"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyNTk4NQ==", "bodyText": "I wonder if this could trigger an NPE", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487025985", "createdAt": "2020-09-11T12:56:06Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.bitcoinj.script.ScriptChunk;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import co.rsk.peg.NoOpReturnException;\n+import java.util.List;\n+import java.util.Optional;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        PeginInstructions peginInstructions;\n+        byte[] opReturnOutputData;\n+\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            return Optional.empty();\n+        }\n+\n+        if (opReturnOutputData == null || opReturnOutputData.length < 22) {\n+            String message = \"Invalid OP_RETURN data found\";\n+            logger.debug(\"[buildPeginInstructions] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+\n+        switch (protocolVersion) {\n+            case 1:\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutputData);\n+                peginInstructions = peginInstructionsVersion1;\n+                break;\n+            default:\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                throw new PeginInstructionsException(\"Invalid protocol version\");\n+        }\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.info(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f11bbf405afc836d29dd02b7e49305b60332120"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyNjc3NA==", "bodyText": "I suggest moving the logic of this method directly to parseAdditionalData", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487026774", "createdAt": "2020-09-11T12:57:34Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsVersion1.class);\n+    private static final int P2PKH_ADDRESS_TYPE = 1;\n+    private static final int P2SH_ADDRESS_TYPE = 2;\n+\n+    private final NetworkParameters params;\n+    private Optional<Address> btcRefundAddress;\n+\n+    public PeginInstructionsVersion1(NetworkParameters params) {\n+        super(1);\n+        this.params = params;\n+    }\n+\n+    @Override\n+    protected void validateDataLength(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length != 22 && data.length != 43) {\n+            logger.debug(\"[validateDataLength] Invalid data length\");\n+            throw new PeginInstructionsParseException(\"[validateDataLength] Invalid data length\");\n+        }\n+    }\n+\n+    @Override\n+    protected void parseAdditionalData(byte[] data) throws PeginInstructionsParseException {\n+        parseBtcRefundAddress(data);\n+    }\n+\n+    protected void parseBtcRefundAddress(byte[] data) throws PeginInstructionsParseException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f11bbf405afc836d29dd02b7e49305b60332120"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAzMjUyOA==", "bodyText": "You could move this validation to be the first instruction to avoid parsing anything", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487032528", "createdAt": "2020-09-11T13:08:05Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.core.RskAddress;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+\n+public abstract class PeginInstructionsBase implements PeginInstructions {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n+    private final int protocolVersion;\n+    protected RskAddress rskDestinationAddress;\n+\n+    protected PeginInstructionsBase(int protocolVersion) {\n+        this.protocolVersion = protocolVersion;\n+    }\n+\n+    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n+        byte[] rskDestinationAddressBytes = Arrays.copyOfRange(data, 2, 22);\n+        return new RskAddress(rskDestinationAddressBytes);\n+    }\n+\n+    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n+\n+    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n+\n+    public static int extractProtocolVersion(byte[] data) {\n+        byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n+        return ByteUtil.byteArrayToInt(protocolVersionBytes);\n+    }\n+\n+    @Override\n+    public RskAddress getRskDestinationAddress() {\n+        return this.rskDestinationAddress;\n+    }\n+\n+    @Override\n+    public int getProtocolVersion() {\n+        return this.protocolVersion;\n+    }\n+\n+    public void parse(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length < 22) {\n+            logger.debug(\"[parse] Invalid data length\");\n+            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n+                + \"received %s\", data.length);\n+            throw new PeginInstructionsParseException(message);\n+        }\n+\n+        this.rskDestinationAddress = getRskDestinationAddressFromData(data);\n+        validateDataLength(data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f11bbf405afc836d29dd02b7e49305b60332120"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAzMjc5MA==", "bodyText": "These validations don't seem appropriate for this class", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487032790", "createdAt": "2020-09-11T13:08:32Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.bitcoinj.script.ScriptChunk;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import co.rsk.peg.NoOpReturnException;\n+import java.util.List;\n+import java.util.Optional;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        PeginInstructions peginInstructions;\n+        byte[] opReturnOutputData;\n+\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            return Optional.empty();\n+        }\n+\n+        if (opReturnOutputData == null || opReturnOutputData.length < 22) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f11bbf405afc836d29dd02b7e49305b60332120"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAzNDUwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.info(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n          \n          \n            \n                    logger.debug(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487034500", "createdAt": "2020-09-11T13:11:19Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.bitcoinj.script.ScriptChunk;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import co.rsk.peg.NoOpReturnException;\n+import java.util.List;\n+import java.util.Optional;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        PeginInstructions peginInstructions;\n+        byte[] opReturnOutputData;\n+\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            return Optional.empty();\n+        }\n+\n+        if (opReturnOutputData == null || opReturnOutputData.length < 22) {\n+            String message = \"Invalid OP_RETURN data found\";\n+            logger.debug(\"[buildPeginInstructions] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+\n+        switch (protocolVersion) {\n+            case 1:\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutputData);\n+                peginInstructions = peginInstructionsVersion1;\n+                break;\n+            default:\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                throw new PeginInstructionsException(\"Invalid protocol version\");\n+        }\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.info(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f11bbf405afc836d29dd02b7e49305b60332120"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAzNTE4OA==", "bodyText": "I wonder if this could trigger an NPE", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487035188", "createdAt": "2020-09-11T13:12:25Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.bitcoinj.script.ScriptChunk;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import co.rsk.peg.NoOpReturnException;\n+import java.util.List;\n+import java.util.Optional;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        PeginInstructions peginInstructions;\n+        byte[] opReturnOutputData;\n+\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            return Optional.empty();\n+        }\n+\n+        if (opReturnOutputData == null || opReturnOutputData.length < 22) {\n+            String message = \"Invalid OP_RETURN data found\";\n+            logger.debug(\"[buildPeginInstructions] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+\n+        switch (protocolVersion) {\n+            case 1:\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutputData);\n+                peginInstructions = peginInstructionsVersion1;\n+                break;\n+            default:\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                throw new PeginInstructionsException(\"Invalid protocol version\");\n+        }\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.info(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f11bbf405afc836d29dd02b7e49305b60332120"}, "originalPosition": 59}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1f11bbf405afc836d29dd02b7e49305b60332120", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/1f11bbf405afc836d29dd02b7e49305b60332120", "committedDate": "2020-09-10T16:52:55Z", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional\n- Rename getBtcRefundAddress to parseBtcRefundAddress and make it void"}, "afterCommit": {"oid": "41adaf4b6c73fc6a9665506ef02bb6611556e7d8", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/41adaf4b6c73fc6a9665506ef02bb6611556e7d8", "committedDate": "2020-09-11T13:54:29Z", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional\n- Rename getBtcRefundAddress to parseBtcRefundAddress and make it void\n- Move NoOpReturnException class to pegininstructions package\n- Add some debug info"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2ODM4MTQ3", "url": "https://github.com/rsksmart/rskj/pull/1304#pullrequestreview-486838147", "createdAt": "2020-09-11T14:06:51Z", "commit": {"oid": "41adaf4b6c73fc6a9665506ef02bb6611556e7d8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNDowNjo1MVrOHQgVBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNDowNjo1MVrOHQgVBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA2ODkzMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.debug(\"[getOpReturnOutput] {}\", message);\n          \n          \n            \n                        logger.trace(\"[getOpReturnOutput] {}\", message);", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487068933", "createdAt": "2020-09-11T14:06:51Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.bitcoinj.script.ScriptChunk;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import java.util.List;\n+import java.util.Optional;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n+        PeginInstructions peginInstructions;\n+        byte[] opReturnOutputData;\n+\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (Exception e) {\n+            logger.debug(\"Error extracting OP_RETURN data: {}\", e.getMessage());\n+            return Optional.empty();\n+        }\n+\n+        if (opReturnOutputData == null || opReturnOutputData.length < 22) {\n+            String message = \"Invalid OP_RETURN data found\";\n+            logger.debug(\"[buildPeginInstructions] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+\n+        switch (protocolVersion) {\n+            case 1:\n+                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutputData);\n+                peginInstructions = peginInstructionsVersion1;\n+                logger.trace(\"Successfully created peginInstructions version 1\");\n+                break;\n+            default:\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                throw new PeginInstructionsException(\"Invalid protocol version\");\n+        }\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = \"No OP_RETURN output found for tx\";\n+            logger.debug(\"[getOpReturnOutput] {}\", message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41adaf4b6c73fc6a9665506ef02bb6611556e7d8"}, "originalPosition": 79}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "41adaf4b6c73fc6a9665506ef02bb6611556e7d8", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/41adaf4b6c73fc6a9665506ef02bb6611556e7d8", "committedDate": "2020-09-11T13:54:29Z", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional\n- Rename getBtcRefundAddress to parseBtcRefundAddress and make it void\n- Move NoOpReturnException class to pegininstructions package\n- Add some debug info"}, "afterCommit": {"oid": "edbd1655677b7bc3e6cfdf89d0c048ad141d4a2b", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/edbd1655677b7bc3e6cfdf89d0c048ad141d4a2b", "committedDate": "2020-09-11T14:12:57Z", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional\n- Rename getBtcRefundAddress to parseBtcRefundAddress and make it void\n- Move NoOpReturnException class to pegininstructions package\n- Add some debug info\n- Remove unnecessary data validation length from provider"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "edbd1655677b7bc3e6cfdf89d0c048ad141d4a2b", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/edbd1655677b7bc3e6cfdf89d0c048ad141d4a2b", "committedDate": "2020-09-11T14:12:57Z", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional\n- Rename getBtcRefundAddress to parseBtcRefundAddress and make it void\n- Move NoOpReturnException class to pegininstructions package\n- Add some debug info\n- Remove unnecessary data validation length from provider"}, "afterCommit": {"oid": "100a8aacd63644d80168ed240ae851b2ea13a5d5", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/100a8aacd63644d80168ed240ae851b2ea13a5d5", "committedDate": "2020-09-11T14:16:23Z", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional\n- Rename getBtcRefundAddress to parseBtcRefundAddress and make it void\n- Move NoOpReturnException class to pegininstructions package\n- Add some debug info\n- Remove unnecessary data validation length from provider"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "100a8aacd63644d80168ed240ae851b2ea13a5d5", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/100a8aacd63644d80168ed240ae851b2ea13a5d5", "committedDate": "2020-09-11T14:16:23Z", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional\n- Rename getBtcRefundAddress to parseBtcRefundAddress and make it void\n- Move NoOpReturnException class to pegininstructions package\n- Add some debug info\n- Remove unnecessary data validation length from provider"}, "afterCommit": {"oid": "87f7d18cb3b8c9ffb61aebc593ee2c9452a103b1", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/87f7d18cb3b8c9ffb61aebc593ee2c9452a103b1", "committedDate": "2020-09-11T14:18:46Z", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional\n- Rename getBtcRefundAddress to parseBtcRefundAddress and make it void\n- Move NoOpReturnException class to pegininstructions package\n- Add some debug info\n- Remove unnecessary data validation length from provider\n- Move getBtcRefundAddress logic to parseAdditionalData on PeginInstructionsV1"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "87f7d18cb3b8c9ffb61aebc593ee2c9452a103b1", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/87f7d18cb3b8c9ffb61aebc593ee2c9452a103b1", "committedDate": "2020-09-11T14:18:46Z", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional\n- Rename getBtcRefundAddress to parseBtcRefundAddress and make it void\n- Move NoOpReturnException class to pegininstructions package\n- Add some debug info\n- Remove unnecessary data validation length from provider\n- Move getBtcRefundAddress logic to parseAdditionalData on PeginInstructionsV1"}, "afterCommit": {"oid": "b01755e58a869de0d93b0a61488f94d6e1c87a30", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/b01755e58a869de0d93b0a61488f94d6e1c87a30", "committedDate": "2020-09-11T14:19:59Z", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional\n- Rename getBtcRefundAddress to parseBtcRefundAddress and make it void\n- Move NoOpReturnException class to pegininstructions package\n- Add some debug info\n- Remove unnecessary data validation length from provider\n- Move getBtcRefundAddress logic to parseAdditionalData on PeginInstructionsV1"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2ODYwMTQ2", "url": "https://github.com/rsksmart/rskj/pull/1304#pullrequestreview-486860146", "createdAt": "2020-09-11T14:31:51Z", "commit": {"oid": "b01755e58a869de0d93b0a61488f94d6e1c87a30"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNDozMTo1MVrOHQhTlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNDozMTo1MVrOHQhTlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA4NDk0OA==", "bodyText": "Careful here. We must not treat every exception equally.\nIf there is no OP_RETURN we should return Optional.empty.\nBut if there is any other situation (more than one op_return, null data after op_return, or any unhandled exception) we should raise a new exception for the funds to be returned.", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487084948", "createdAt": "2020-09-11T14:31:51Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.bitcoinj.script.ScriptChunk;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import java.util.List;\n+import java.util.Optional;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n+        PeginInstructions peginInstructions;\n+        byte[] opReturnOutputData;\n+\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b01755e58a869de0d93b0a61488f94d6e1c87a30"}, "originalPosition": 26}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b01755e58a869de0d93b0a61488f94d6e1c87a30", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/b01755e58a869de0d93b0a61488f94d6e1c87a30", "committedDate": "2020-09-11T14:19:59Z", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional\n- Rename getBtcRefundAddress to parseBtcRefundAddress and make it void\n- Move NoOpReturnException class to pegininstructions package\n- Add some debug info\n- Remove unnecessary data validation length from provider\n- Move getBtcRefundAddress logic to parseAdditionalData on PeginInstructionsV1"}, "afterCommit": {"oid": "4756a232cd05ace791ed354e1456cbc4148b4559", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/4756a232cd05ace791ed354e1456cbc4148b4559", "committedDate": "2020-09-11T15:09:20Z", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional\n- Rename getBtcRefundAddress to parseBtcRefundAddress and make it void\n- Move NoOpReturnException class to pegininstructions package\n- Add some debug info\n- Remove unnecessary data validation length from provider\n- Move getBtcRefundAddress logic to parseAdditionalData on PeginInstructionsV1"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4756a232cd05ace791ed354e1456cbc4148b4559", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/4756a232cd05ace791ed354e1456cbc4148b4559", "committedDate": "2020-09-11T15:09:20Z", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional\n- Rename getBtcRefundAddress to parseBtcRefundAddress and make it void\n- Move NoOpReturnException class to pegininstructions package\n- Add some debug info\n- Remove unnecessary data validation length from provider\n- Move getBtcRefundAddress logic to parseAdditionalData on PeginInstructionsV1"}, "afterCommit": {"oid": "d779ac024d7a69d11084b9fea26112defcdc30c3", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/d779ac024d7a69d11084b9fea26112defcdc30c3", "committedDate": "2020-09-11T15:54:49Z", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional\n- Rename getBtcRefundAddress to parseBtcRefundAddress and make it void\n- Move NoOpReturnException class to pegininstructions package\n- Add some debug info\n- Remove unnecessary data validation length from provider\n- Move getBtcRefundAddress logic to parseAdditionalData on PeginInstructionsV1"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2OTIzODI3", "url": "https://github.com/rsksmart/rskj/pull/1304#pullrequestreview-486923827", "createdAt": "2020-09-11T15:48:48Z", "commit": {"oid": "4756a232cd05ace791ed354e1456cbc4148b4559"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNTo0ODo0OFrOHQkTjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNjowNDowNlrOHQk1lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEzNDA5Mw==", "bodyText": "When logging and throwing an exception with the same message it's good to put in a variable. So it is easy to change in both places in case it's necessary", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487134093", "createdAt": "2020-09-11T15:48:48Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.bitcoinj.script.ScriptChunk;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import java.util.List;\n+import java.util.Optional;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n+        PeginInstructions peginInstructions;\n+        byte[] opReturnOutputData;\n+\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            return Optional.empty();\n+        } catch (Exception e) {\n+            logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n+            throw new PeginInstructionsException(\"Transaction has an invalid OP_RETURN structure\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4756a232cd05ace791ed354e1456cbc4148b4559"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEzNDQ1Mg==", "bodyText": "Also, remember to put the method name in brackets as a prefix in the log message", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487134452", "createdAt": "2020-09-11T15:49:27Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.bitcoinj.script.ScriptChunk;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import java.util.List;\n+import java.util.Optional;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n+        PeginInstructions peginInstructions;\n+        byte[] opReturnOutputData;\n+\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            return Optional.empty();\n+        } catch (Exception e) {\n+            logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n+            throw new PeginInstructionsException(\"Transaction has an invalid OP_RETURN structure\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEzNDA5Mw=="}, "originalCommit": {"oid": "4756a232cd05ace791ed354e1456cbc4148b4559"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEzNTQ3MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String message = \"No OP_RETURN output found for tx\";\n          \n          \n            \n                        String message = \"No OP_RETURN output found for tx {}\", tx.getHash;", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487135471", "createdAt": "2020-09-11T15:51:13Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.bitcoinj.script.ScriptChunk;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import java.util.List;\n+import java.util.Optional;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n+        PeginInstructions peginInstructions;\n+        byte[] opReturnOutputData;\n+\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            return Optional.empty();\n+        } catch (Exception e) {\n+            logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n+            throw new PeginInstructionsException(\"Transaction has an invalid OP_RETURN structure\", e);\n+        }\n+\n+        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+\n+        switch (protocolVersion) {\n+            case 1:\n+                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutputData);\n+                peginInstructions = peginInstructionsVersion1;\n+                logger.trace(\"Successfully created peginInstructions version 1\");\n+                break;\n+            default:\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                throw new PeginInstructionsException(\"Invalid protocol version\");\n+        }\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = \"No OP_RETURN output found for tx\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4756a232cd05ace791ed354e1456cbc4148b4559"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEzNjIyMg==", "bodyText": "This is no longer necessary if InvalidOpReturnOutputException is thrown in line 67", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487136222", "createdAt": "2020-09-11T15:52:31Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.bitcoinj.script.ScriptChunk;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import java.util.List;\n+import java.util.Optional;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n+        PeginInstructions peginInstructions;\n+        byte[] opReturnOutputData;\n+\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            return Optional.empty();\n+        } catch (Exception e) {\n+            logger.debug(\"Btc tx: {} has an invalid OP_RETURN structure\", btcTx.getHash());\n+            throw new PeginInstructionsException(\"Transaction has an invalid OP_RETURN structure\", e);\n+        }\n+\n+        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+\n+        switch (protocolVersion) {\n+            case 1:\n+                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutputData);\n+                peginInstructions = peginInstructionsVersion1;\n+                logger.trace(\"Successfully created peginInstructions version 1\");\n+                break;\n+            default:\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                throw new PeginInstructionsException(\"Invalid protocol version\");\n+        }\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = \"No OP_RETURN output found for tx\";\n+            logger.trace(\"[extractOpReturnData] {}\", message);\n+            throw new NoOpReturnException(message);\n+        }\n+\n+        if (opReturnOccurrences > 1) {\n+            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n+                opReturnOccurrences);\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data == null) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4756a232cd05ace791ed354e1456cbc4148b4559"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEzOTYyNw==", "bodyText": "I think it's simpler to throw the exception here instead of continuing the execution and then have an if asking if data == null. When this happens you already know the data received is invalid", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487139627", "createdAt": "2020-09-11T15:58:23Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.bitcoinj.script.ScriptChunk;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import co.rsk.peg.InvalidOpReturnOutputException;\n+import co.rsk.peg.NoOpReturnException;\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public PeginInstructions buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException, NoOpReturnException, InvalidOpReturnOutputException {\n+\n+        PeginInstructionsBase peginInstructions;\n+        byte[] opReturnOutput = extractOpReturnData(btcTx);\n+\n+        if (opReturnOutput == null || opReturnOutput.length == 0) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[buildPeginInstructions] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutput);\n+\n+        switch (protocolVersion) {\n+            case 1:\n+                PeginInstructionsVersion1 peginInstructionsVersion1 = new PeginInstructionsVersion1(btcTx.getParams());\n+                peginInstructionsVersion1.parse(opReturnOutput);\n+                peginInstructions = peginInstructionsVersion1;\n+                break;\n+            default:\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given\");\n+                throw new PeginInstructionsException(\"Invalid protocol version\");\n+        }\n+\n+        return peginInstructions;\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx) throws NoOpReturnException, InvalidOpReturnOutputException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.info(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    opReturnOccurrences++;\n+                    data = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1OTk4Mg=="}, "originalCommit": {"oid": "99c0bbf50155caf7f5e97d59cdef6831123975a9"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE0MjgwNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            String message = String.format(\"[getBtcRefundAddressFromData] Invalid btc address type: %d\", btcRefundAddressType);\n          \n          \n            \n                            String message = String.format(\"[parseAdditionalData] Invalid btc address type: %d\", btcRefundAddressType);", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487142807", "createdAt": "2020-09-11T16:04:06Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsVersion1.class);\n+    private static final int P2PKH_ADDRESS_TYPE = 1;\n+    private static final int P2SH_ADDRESS_TYPE = 2;\n+\n+    private final NetworkParameters params;\n+    private Optional<Address> btcRefundAddress;\n+\n+    public PeginInstructionsVersion1(NetworkParameters params) {\n+        super(1);\n+        this.params = params;\n+    }\n+\n+    @Override\n+    protected void validateDataLength(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length != 22 && data.length != 43) {\n+            String message = String.format(\"[validateDataLength] Invalid data length. Expected 22 or 43 bytes, received %d\", data.length);\n+            logger.debug(message);\n+            throw new PeginInstructionsParseException(message);\n+        }\n+    }\n+\n+    @Override\n+    protected void parseAdditionalData(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length == 22) {\n+            this.btcRefundAddress = Optional.empty();\n+            return;\n+        }\n+\n+        byte[] btcRefundAddressTypeBytes = Arrays.copyOfRange(data, 22, 23);\n+        int btcRefundAddressType = ByteUtil.byteArrayToInt(btcRefundAddressTypeBytes);\n+        byte[] hash = Arrays.copyOfRange(data, 23, data.length);\n+\n+        Address btcRefundAddress;\n+\n+        switch (btcRefundAddressType) {\n+            case P2PKH_ADDRESS_TYPE:\n+                // Uses pubKeyHash\n+                btcRefundAddress = new Address(this.params, hash);\n+                logger.debug(\"Obtained P2PKH BTC address: {}\",btcRefundAddress);\n+                break;\n+            case P2SH_ADDRESS_TYPE:\n+                // Uses scriptPubKeyHash\n+                btcRefundAddress = new Address(this.params, this.params.getP2SHHeader(), hash);\n+                logger.debug(\"Obtained P2SH BTC address: {}\",btcRefundAddress);\n+                break;\n+            default:\n+                String message = String.format(\"[getBtcRefundAddressFromData] Invalid btc address type: %d\", btcRefundAddressType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d779ac024d7a69d11084b9fea26112defcdc30c3"}, "originalPosition": 59}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d779ac024d7a69d11084b9fea26112defcdc30c3", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/d779ac024d7a69d11084b9fea26112defcdc30c3", "committedDate": "2020-09-11T15:54:49Z", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional\n- Rename getBtcRefundAddress to parseBtcRefundAddress and make it void\n- Move NoOpReturnException class to pegininstructions package\n- Add some debug info\n- Remove unnecessary data validation length from provider\n- Move getBtcRefundAddress logic to parseAdditionalData on PeginInstructionsV1"}, "afterCommit": {"oid": "31d5636c13844de89c8ca04ca556e6ddcb22e872", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/31d5636c13844de89c8ca04ca556e6ddcb22e872", "committedDate": "2020-09-11T18:03:09Z", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional\n- Rename getBtcRefundAddress to parseBtcRefundAddress and make it void\n- Move NoOpReturnException class to pegininstructions package\n- Add some debug info\n- Remove unnecessary data validation length from provider\n- Move getBtcRefundAddress logic to parseAdditionalData on PeginInstructionsV1"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MDQ4MzE1", "url": "https://github.com/rsksmart/rskj/pull/1304#pullrequestreview-487048315", "createdAt": "2020-09-11T18:57:09Z", "commit": {"oid": "31d5636c13844de89c8ca04ca556e6ddcb22e872"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxODo1NzowOVrOHQqN7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxODo1NzowOVrOHQqN7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIzMDk1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            + \"received %s\", data.length);\n          \n          \n            \n                            + \"received %d\", data.length);", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487230959", "createdAt": "2020-09-11T18:57:09Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.core.RskAddress;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+\n+public abstract class PeginInstructionsBase implements PeginInstructions {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n+    private final int protocolVersion;\n+    protected RskAddress rskDestinationAddress;\n+\n+    protected PeginInstructionsBase(int protocolVersion) {\n+        this.protocolVersion = protocolVersion;\n+    }\n+\n+    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n+        byte[] rskDestinationAddressBytes = Arrays.copyOfRange(data, 2, 22);\n+        return new RskAddress(rskDestinationAddressBytes);\n+    }\n+\n+    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n+\n+    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n+\n+    public static int extractProtocolVersion(byte[] data) {\n+        byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n+        return ByteUtil.byteArrayToInt(protocolVersionBytes);\n+    }\n+\n+    @Override\n+    public RskAddress getRskDestinationAddress() {\n+        return this.rskDestinationAddress;\n+    }\n+\n+    @Override\n+    public int getProtocolVersion() {\n+        return this.protocolVersion;\n+    }\n+\n+    public void parse(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length < 22) {\n+            logger.debug(\"[parse] Invalid data length\");\n+            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n+                + \"received %s\", data.length);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d5636c13844de89c8ca04ca556e6ddcb22e872"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MDUyNDA2", "url": "https://github.com/rsksmart/rskj/pull/1304#pullrequestreview-487052406", "createdAt": "2020-09-11T19:03:46Z", "commit": {"oid": "31d5636c13844de89c8ca04ca556e6ddcb22e872"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxOTowMzo0NlrOHQqaMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxOTowMzo0NlrOHQqaMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIzNDA5Nw==", "bodyText": "Put method name as prefix", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487234097", "createdAt": "2020-09-11T19:03:46Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsVersion1.class);\n+    private static final int P2PKH_ADDRESS_TYPE = 1;\n+    private static final int P2SH_ADDRESS_TYPE = 2;\n+\n+    private final NetworkParameters params;\n+    private Optional<Address> btcRefundAddress;\n+\n+    public PeginInstructionsVersion1(NetworkParameters params) {\n+        super(1);\n+        this.params = params;\n+    }\n+\n+    @Override\n+    protected void validateDataLength(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length != 22 && data.length != 43) {\n+            String message = String.format(\"[validateDataLength] Invalid data length. Expected 22 or 43 bytes, received %d\", data.length);\n+            logger.debug(message);\n+            throw new PeginInstructionsParseException(message);\n+        }\n+    }\n+\n+    @Override\n+    protected void parseAdditionalData(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length == 22) {\n+            this.btcRefundAddress = Optional.empty();\n+            return;\n+        }\n+\n+        byte[] btcRefundAddressTypeBytes = Arrays.copyOfRange(data, 22, 23);\n+        int btcRefundAddressType = ByteUtil.byteArrayToInt(btcRefundAddressTypeBytes);\n+        byte[] hash = Arrays.copyOfRange(data, 23, data.length);\n+\n+        Address btcRefundAddress;\n+\n+        switch (btcRefundAddressType) {\n+            case P2PKH_ADDRESS_TYPE:\n+                // Uses pubKeyHash\n+                btcRefundAddress = new Address(this.params, hash);\n+                logger.debug(\"Obtained P2PKH BTC address: {}\",btcRefundAddress);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d5636c13844de89c8ca04ca556e6ddcb22e872"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MDUyNTAw", "url": "https://github.com/rsksmart/rskj/pull/1304#pullrequestreview-487052500", "createdAt": "2020-09-11T19:03:55Z", "commit": {"oid": "31d5636c13844de89c8ca04ca556e6ddcb22e872"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxOTowMzo1NVrOHQqafw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxOTowMzo1NVrOHQqafw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIzNDE3NQ==", "bodyText": "Put method name as prefix", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r487234175", "createdAt": "2020-09-11T19:03:55Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsVersion1.class);\n+    private static final int P2PKH_ADDRESS_TYPE = 1;\n+    private static final int P2SH_ADDRESS_TYPE = 2;\n+\n+    private final NetworkParameters params;\n+    private Optional<Address> btcRefundAddress;\n+\n+    public PeginInstructionsVersion1(NetworkParameters params) {\n+        super(1);\n+        this.params = params;\n+    }\n+\n+    @Override\n+    protected void validateDataLength(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length != 22 && data.length != 43) {\n+            String message = String.format(\"[validateDataLength] Invalid data length. Expected 22 or 43 bytes, received %d\", data.length);\n+            logger.debug(message);\n+            throw new PeginInstructionsParseException(message);\n+        }\n+    }\n+\n+    @Override\n+    protected void parseAdditionalData(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length == 22) {\n+            this.btcRefundAddress = Optional.empty();\n+            return;\n+        }\n+\n+        byte[] btcRefundAddressTypeBytes = Arrays.copyOfRange(data, 22, 23);\n+        int btcRefundAddressType = ByteUtil.byteArrayToInt(btcRefundAddressTypeBytes);\n+        byte[] hash = Arrays.copyOfRange(data, 23, data.length);\n+\n+        Address btcRefundAddress;\n+\n+        switch (btcRefundAddressType) {\n+            case P2PKH_ADDRESS_TYPE:\n+                // Uses pubKeyHash\n+                btcRefundAddress = new Address(this.params, hash);\n+                logger.debug(\"Obtained P2PKH BTC address: {}\",btcRefundAddress);\n+                break;\n+            case P2SH_ADDRESS_TYPE:\n+                // Uses scriptPubKeyHash\n+                btcRefundAddress = new Address(this.params, this.params.getP2SHHeader(), hash);\n+                logger.debug(\"Obtained P2SH BTC address: {}\",btcRefundAddress);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d5636c13844de89c8ca04ca556e6ddcb22e872"}, "originalPosition": 56}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "31d5636c13844de89c8ca04ca556e6ddcb22e872", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/31d5636c13844de89c8ca04ca556e6ddcb22e872", "committedDate": "2020-09-11T18:03:09Z", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional\n- Rename getBtcRefundAddress to parseBtcRefundAddress and make it void\n- Move NoOpReturnException class to pegininstructions package\n- Add some debug info\n- Remove unnecessary data validation length from provider\n- Move getBtcRefundAddress logic to parseAdditionalData on PeginInstructionsV1"}, "afterCommit": {"oid": "4cdb27070598b97697997491a8676a2e1d51bd26", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/4cdb27070598b97697997491a8676a2e1d51bd26", "committedDate": "2020-09-11T19:24:50Z", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional\n- Rename getBtcRefundAddress to parseBtcRefundAddress and make it void\n- Move NoOpReturnException class to pegininstructions package\n- Add some debug info\n- Remove unnecessary data validation length from provider\n- Move getBtcRefundAddress logic to parseAdditionalData on PeginInstructionsV1"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4cdb27070598b97697997491a8676a2e1d51bd26", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/4cdb27070598b97697997491a8676a2e1d51bd26", "committedDate": "2020-09-11T19:24:50Z", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional\n- Rename getBtcRefundAddress to parseBtcRefundAddress and make it void\n- Move NoOpReturnException class to pegininstructions package\n- Add some debug info\n- Remove unnecessary data validation length from provider\n- Move getBtcRefundAddress logic to parseAdditionalData on PeginInstructionsV1"}, "afterCommit": {"oid": "ff6e3fe4e7907889f5e2f9ba13548fb8a2a0efd9", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/ff6e3fe4e7907889f5e2f9ba13548fb8a2a0efd9", "committedDate": "2020-09-11T19:54:17Z", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional\n- Rename getBtcRefundAddress to parseBtcRefundAddress and make it void\n- Move NoOpReturnException class to pegininstructions package\n- Add some debug info\n- Remove unnecessary data validation length from provider\n- Move getBtcRefundAddress logic to parseAdditionalData on PeginInstructionsV1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3918d522dbcea4809d2c7d06cfee825674efb02", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/a3918d522dbcea4809d2c7d06cfee825674efb02", "committedDate": "2020-09-14T14:40:45Z", "message": "Create OP_RETURN parser\n\nCreate interface and implement it on PegInstructionBaseClase from where all the versions will extend.\nCreate multiple exceptions to manage errors."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66901af5dbc45c855849d7c53fdb34bb9e9b973d", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/66901af5dbc45c855849d7c53fdb34bb9e9b973d", "committedDate": "2020-09-14T14:40:55Z", "message": "Add unit test for PeginInstructions classes and update BtcTransactionFormatUtilsTest as it now contains the method extractOpReturnData"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "985e7f8e1b94fbf6035adc065456b25cb10ef19e", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/985e7f8e1b94fbf6035adc065456b25cb10ef19e", "committedDate": "2020-09-14T14:41:03Z", "message": "Create class to contain all the raw transactions and rename some tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/02c14eb742c29ef02bec1db906f7f4589bb0142c", "committedDate": "2020-09-14T14:41:11Z", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional\n- Rename getBtcRefundAddress to parseBtcRefundAddress and make it void\n- Move NoOpReturnException class to pegininstructions package\n- Add some debug info\n- Remove unnecessary data validation length from provider\n- Move getBtcRefundAddress logic to parseAdditionalData on PeginInstructionsV1"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ff6e3fe4e7907889f5e2f9ba13548fb8a2a0efd9", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/ff6e3fe4e7907889f5e2f9ba13548fb8a2a0efd9", "committedDate": "2020-09-11T19:54:17Z", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional\n- Rename getBtcRefundAddress to parseBtcRefundAddress and make it void\n- Move NoOpReturnException class to pegininstructions package\n- Add some debug info\n- Remove unnecessary data validation length from provider\n- Move getBtcRefundAddress logic to parseAdditionalData on PeginInstructionsV1"}, "afterCommit": {"oid": "02c14eb742c29ef02bec1db906f7f4589bb0142c", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/02c14eb742c29ef02bec1db906f7f4589bb0142c", "committedDate": "2020-09-14T14:41:11Z", "message": "Applying improvements in PeginInstructions code\n- Reorder PeginInstructionsBase class methods\n- Move extractOpReturnData to PeginInstructionsProvider class\n- Make getBtcRefundAddressFromData method protected\n- Add override annotation to getRskDestinationAddress and getProtocolVersion methods on base class\n- Add op_return data validation on PegInstructionsProvider\n- Fix some test and add validations\n- Make buildPeginInstructions Optional\n- Rename getBtcRefundAddress to parseBtcRefundAddress and make it void\n- Move NoOpReturnException class to pegininstructions package\n- Add some debug info\n- Remove unnecessary data validation length from provider\n- Move getBtcRefundAddress logic to parseAdditionalData on PeginInstructionsV1"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MDg0NzQ0", "url": "https://github.com/rsksmart/rskj/pull/1304#pullrequestreview-488084744", "createdAt": "2020-09-14T19:40:28Z", "commit": {"oid": "02c14eb742c29ef02bec1db906f7f4589bb0142c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxOTo0MDoyOFrOHRj5Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxOTo0MjozNFrOHRj9Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE3NTk1OQ==", "bodyText": "This validation shouldn't be here, is already performed by PeginInstructionsBase", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r488175959", "createdAt": "2020-09-14T19:40:28Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsProvider.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.bitcoinj.script.ScriptChunk;\n+import co.rsk.bitcoinj.script.ScriptOpCodes;\n+import java.util.List;\n+import java.util.Optional;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInstructionsProvider {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsProvider.class);\n+\n+    public Optional<PeginInstructions> buildPeginInstructions(BtcTransaction btcTx) throws\n+        PeginInstructionsException {\n+\n+        logger.trace(\"[buildPeginInstructions] Using btc tx {}\", btcTx.getHash());\n+\n+        PeginInstructionsBase peginInstructions;\n+        byte[] opReturnOutputData;\n+\n+        try {\n+            opReturnOutputData = extractOpReturnData(btcTx);\n+        } catch (NoOpReturnException e) {\n+            logger.trace(\"[buildPeginInstructions] {}\", e.getMessage());\n+            return Optional.empty();\n+        } catch (Exception e) {\n+            String message = String.format(\"Btc tx: %s has an invalid OP_RETURN structure\", btcTx.getHash());\n+            logger.debug(message);\n+            throw new PeginInstructionsException(message, e);\n+        }\n+\n+        logger.trace(\"[buildPeginInstructions] OP_RETURN data: {}\", Hex.toHexString(opReturnOutputData));\n+\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(opReturnOutputData);\n+\n+        switch (protocolVersion) {\n+            case 1:\n+                logger.trace(\"[buildPeginInstructions] Going to build peginInstructions version 1..\");\n+                peginInstructions = new PeginInstructionsVersion1(btcTx.getParams());\n+                break;\n+            default:\n+                logger.debug(\"[buildPeginInstructions] Invalid protocol version given: {}\", protocolVersion);\n+                throw new PeginInstructionsException(\"Invalid protocol version\");\n+        }\n+\n+        peginInstructions.parse(opReturnOutputData);\n+        logger.trace(\"[buildPeginInstructions] Successfully created peginInstructions: {}\",\n+            peginInstructions.getClass());\n+\n+        return Optional.of(peginInstructions);\n+    }\n+\n+    protected static byte[] extractOpReturnData(BtcTransaction btcTx)\n+        throws PeginInstructionsException {\n+        byte[] data = new byte[]{};\n+        int opReturnOccurrences = 0;\n+\n+        logger.trace(\"[extractOpReturnData] Getting OP_RETURN data for btc tx: {}\", btcTx.getHash());\n+\n+        for (int i=0; i<btcTx.getOutputs().size(); i++) {\n+            List<ScriptChunk> chunksByOutput = btcTx.getOutput(i).getScriptPubKey().getChunks();\n+            if (chunksByOutput.get(0).opcode == ScriptOpCodes.OP_RETURN) {\n+                if (chunksByOutput.size() > 1) {\n+                    data = btcTx.getOutput(i).getScriptPubKey().getChunks().get(1).data;\n+                    opReturnOccurrences++;\n+                } else {\n+                    // OP_RETURN exist but data is empty\n+                    opReturnOccurrences++;\n+                    data = null;\n+                }\n+            }\n+        }\n+\n+        if (opReturnOccurrences == 0) {\n+            String message = String.format(\"No OP_RETURN output found for tx %s\", btcTx.getHash());\n+            throw new NoOpReturnException(message);\n+        }\n+\n+        if (opReturnOccurrences > 1) {\n+            String message = String.format(\"Only one output with OP_RETURN is allowed. Found %d\",\n+                opReturnOccurrences);\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data == null) {\n+            String message = \"Empty OP_RETURN data found\";\n+            logger.debug(\"[extractOpReturnData] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+\n+        if (data.length < 22) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02c14eb742c29ef02bec1db906f7f4589bb0142c"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE3Njk3MQ==", "bodyText": "what about:\n\nAdd a couple more tests, null and empty data at least.", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r488176971", "createdAt": "2020-09-14T19:42:34Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/test/java/co/rsk/peg/pegininstructions/PeginInstructionsBaseTest.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import org.bouncycastle.util.encoders.Hex;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class PeginInstructionsBaseTest {\n+\n+    @Test\n+    public void extractProtocolVersion() {\n+        int protocolVersion = PeginInstructionsBase.extractProtocolVersion(\n+                Hex.decode(\"00010e537aad84447a2c2a7590d5f2665ef5cf9b667a\"));\n+\n+        Assert.assertEquals(1, protocolVersion);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgwMzEwNA=="}, "originalCommit": {"oid": "68d653e4b88970592cebaff89ae37dcf80f00075"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4NzEwNjMw", "url": "https://github.com/rsksmart/rskj/pull/1304#pullrequestreview-488710630", "createdAt": "2020-09-15T13:56:06Z", "commit": {"oid": "657ec599cee7850044645b5b44c57c677db7039a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4ODk3Mzg0", "url": "https://github.com/rsksmart/rskj/pull/1304#pullrequestreview-488897384", "createdAt": "2020-09-15T17:16:22Z", "commit": {"oid": "657ec599cee7850044645b5b44c57c677db7039a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzoxNjoyMlrOHSL2Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzoxNjoyMlrOHSL2Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzMDQ4Nw==", "bodyText": "Not sure if it makes sense to have this here, isn't the data length checked in validateDataLength?", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r488830487", "createdAt": "2020-09-15T17:16:22Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.core.RskAddress;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+\n+public abstract class PeginInstructionsBase implements PeginInstructions {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n+    private final int protocolVersion;\n+    protected RskAddress rskDestinationAddress;\n+\n+    protected PeginInstructionsBase(int protocolVersion) {\n+        this.protocolVersion = protocolVersion;\n+    }\n+\n+    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n+        byte[] rskDestinationAddressBytes = Arrays.copyOfRange(data, 2, 22);\n+        return new RskAddress(rskDestinationAddressBytes);\n+    }\n+\n+    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n+\n+    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n+\n+    public static int extractProtocolVersion(byte[] data) throws PeginInstructionsParseException {\n+        if (data == null || data.length < 2) {\n+            String message;\n+\n+            if (data == null) {\n+                message = \"Provided data is null\";\n+            }\n+            else {\n+                message = String.format(\"Invalid data given. Expected at least 2 bytes, \" +\n+                    \"received %d\", data.length);\n+            }\n+\n+            logger.debug(\"[extractProtocolVersion] {}\", message);\n+            throw new PeginInstructionsParseException(message);\n+        }\n+\n+        byte[] protocolVersionBytes = Arrays.copyOfRange(data, 0, 2);\n+        return ByteUtil.byteArrayToInt(protocolVersionBytes);\n+    }\n+\n+    @Override\n+    public RskAddress getRskDestinationAddress() {\n+        return this.rskDestinationAddress;\n+    }\n+\n+    @Override\n+    public int getProtocolVersion() {\n+        return this.protocolVersion;\n+    }\n+\n+    public void parse(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length < 22) {\n+            logger.debug(\"[parse] Invalid data length\");\n+            String message = String.format(\"Invalid data length. Expected at least 22 bytes, \"\n+                + \"received %d\", data.length);\n+            throw new PeginInstructionsParseException(message);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "657ec599cee7850044645b5b44c57c677db7039a"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4ODk3NzU0", "url": "https://github.com/rsksmart/rskj/pull/1304#pullrequestreview-488897754", "createdAt": "2020-09-15T17:16:56Z", "commit": {"oid": "657ec599cee7850044645b5b44c57c677db7039a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzoxNjo1NlrOHSL3XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzoxNjo1NlrOHSL3XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzMDgxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        }\n          \n          \n            \n                        else {\n          \n          \n            \n                        } else {", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r488830812", "createdAt": "2020-09-15T17:16:56Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsBase.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.core.RskAddress;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+\n+public abstract class PeginInstructionsBase implements PeginInstructions {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsBase.class);\n+    private final int protocolVersion;\n+    protected RskAddress rskDestinationAddress;\n+\n+    protected PeginInstructionsBase(int protocolVersion) {\n+        this.protocolVersion = protocolVersion;\n+    }\n+\n+    private RskAddress getRskDestinationAddressFromData(byte[] data) {\n+        byte[] rskDestinationAddressBytes = Arrays.copyOfRange(data, 2, 22);\n+        return new RskAddress(rskDestinationAddressBytes);\n+    }\n+\n+    protected abstract void validateDataLength(byte[] data) throws PeginInstructionsParseException;\n+\n+    protected abstract void parseAdditionalData(byte[] data) throws PeginInstructionsParseException;\n+\n+    public static int extractProtocolVersion(byte[] data) throws PeginInstructionsParseException {\n+        if (data == null || data.length < 2) {\n+            String message;\n+\n+            if (data == null) {\n+                message = \"Provided data is null\";\n+            }\n+            else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "657ec599cee7850044645b5b44c57c677db7039a"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4OTA2MjA2", "url": "https://github.com/rsksmart/rskj/pull/1304#pullrequestreview-488906206", "createdAt": "2020-09-15T17:26:22Z", "commit": {"oid": "657ec599cee7850044645b5b44c57c677db7039a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzoyNjoyMlrOHSMV0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzoyNjoyMlrOHSMV0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzODYxMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Address btcRefundAddress;\n          \n          \n            \n                    Address parsedBtcRefundAddress;\n          \n      \n    \n    \n  \n\nThis will save you a code smell", "url": "https://github.com/rsksmart/rskj/pull/1304#discussion_r488838610", "createdAt": "2020-09-15T17:26:22Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/main/java/co/rsk/peg/pegininstructions/PeginInstructionsVersion1.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package co.rsk.peg.pegininstructions;\n+\n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import org.ethereum.util.ByteUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+public class PeginInstructionsVersion1 extends PeginInstructionsBase {\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInstructionsVersion1.class);\n+    private static final int P2PKH_ADDRESS_TYPE = 1;\n+    private static final int P2SH_ADDRESS_TYPE = 2;\n+\n+    private final NetworkParameters params;\n+    private Optional<Address> btcRefundAddress;\n+\n+    public PeginInstructionsVersion1(NetworkParameters params) {\n+        super(1);\n+        this.params = params;\n+    }\n+\n+    @Override\n+    protected void validateDataLength(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length != 22 && data.length != 43) {\n+            String message = String.format(\"[validateDataLength] Invalid data length. Expected 22 or 43 bytes, received %d\", data.length);\n+            logger.debug(message);\n+            throw new PeginInstructionsParseException(message);\n+        }\n+    }\n+\n+    @Override\n+    protected void parseAdditionalData(byte[] data) throws PeginInstructionsParseException {\n+        if (data.length == 22) {\n+            this.btcRefundAddress = Optional.empty();\n+            return;\n+        }\n+\n+        byte[] btcRefundAddressTypeBytes = Arrays.copyOfRange(data, 22, 23);\n+        int btcRefundAddressType = ByteUtil.byteArrayToInt(btcRefundAddressTypeBytes);\n+        byte[] hash = Arrays.copyOfRange(data, 23, data.length);\n+\n+        Address btcRefundAddress;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "657ec599cee7850044645b5b44c57c677db7039a"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4OTIwMDU2", "url": "https://github.com/rsksmart/rskj/pull/1304#pullrequestreview-488920056", "createdAt": "2020-09-15T17:42:23Z", "commit": {"oid": "657ec599cee7850044645b5b44c57c677db7039a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/0578996bc5b4f7ba89f271425a649e96c9d5b45c", "committedDate": "2020-09-15T17:49:57Z", "message": "Remove data length validation from provider\nValidate data on extractProtocolVersion"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "657ec599cee7850044645b5b44c57c677db7039a", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/657ec599cee7850044645b5b44c57c677db7039a", "committedDate": "2020-09-15T13:40:16Z", "message": "Remove data length validation from provider\nValidate data on extractProtocolVersion"}, "afterCommit": {"oid": "0578996bc5b4f7ba89f271425a649e96c9d5b45c", "author": {"user": {"login": "guidohernan93", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/0578996bc5b4f7ba89f271425a649e96c9d5b45c", "committedDate": "2020-09-15T17:49:57Z", "message": "Remove data length validation from provider\nValidate data on extractProtocolVersion"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 541, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}