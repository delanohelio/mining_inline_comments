{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxMTIxMDI4", "number": 1252, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTo1NDo1NVrOEI0nCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTo1NDo1NVrOEI0nCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Njg2MDI3OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/peg/Federation.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTo1NDo1NVrOGpBIUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDowODowM1rOGrMoFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY2MzMxNQ==", "bodyText": "I'm a bit confused by this change. Why can't we directly assign the creationTime as parameterised?", "url": "https://github.com/rsksmart/rskj/pull/1252#discussion_r445663315", "createdAt": "2020-06-25T15:54:55Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/main/java/co/rsk/peg/Federation.java", "diffHunk": "@@ -54,7 +55,7 @@ public Federation(List<FederationMember> members, Instant creationTime, long cre\n         // effectively immutable\n         this.members = Collections.unmodifiableList(members.stream().sorted(FederationMember.BTC_RSK_MST_PUBKEYS_COMPARATOR).collect(Collectors.toList()));\n \n-        this.creationTime = creationTime;\n+        this.creationTime = creationTime.truncatedTo(ChronoUnit.MILLIS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c711388fe1a2aefb421cebb40296aea99bcb4e0e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY4MTQ2MA==", "bodyText": "I did leave a comment here about this change, but seems it's disappeared after I've update the PR.\nThe issue here is that in java11 nanoseconds part of a Instant object is not zero. In the BridgeSerializationUtils class we have two helper methods serializeFederationWithSerializer and deserializeFederationWithDesserializer. And they do not take into account nanoseconds while serializing / deserializing Federation objects (e.g the serializeFederationWithSerializer method uses this approach federation.getCreationTime().toEpochMilli(), so only milliseconds are being taken and nanos are ignored). Without this change unit tests fail, as serialized Federation object after deserializing does not equal to original one.\nAlso not sure if we can serialize nanos, as older nodes and the ones run by jvn8 would not understand it", "url": "https://github.com/rsksmart/rskj/pull/1252#discussion_r445681460", "createdAt": "2020-06-25T16:21:53Z", "author": {"login": "Vovchyk"}, "path": "rskj-core/src/main/java/co/rsk/peg/Federation.java", "diffHunk": "@@ -54,7 +55,7 @@ public Federation(List<FederationMember> members, Instant creationTime, long cre\n         // effectively immutable\n         this.members = Collections.unmodifiableList(members.stream().sorted(FederationMember.BTC_RSK_MST_PUBKEYS_COMPARATOR).collect(Collectors.toList()));\n \n-        this.creationTime = creationTime;\n+        this.creationTime = creationTime.truncatedTo(ChronoUnit.MILLIS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY2MzMxNQ=="}, "originalCommit": {"oid": "c711388fe1a2aefb421cebb40296aea99bcb4e0e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk0ODgyMA==", "bodyText": "thanks for the clarifications", "url": "https://github.com/rsksmart/rskj/pull/1252#discussion_r447948820", "createdAt": "2020-06-30T20:08:03Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/main/java/co/rsk/peg/Federation.java", "diffHunk": "@@ -54,7 +55,7 @@ public Federation(List<FederationMember> members, Instant creationTime, long cre\n         // effectively immutable\n         this.members = Collections.unmodifiableList(members.stream().sorted(FederationMember.BTC_RSK_MST_PUBKEYS_COMPARATOR).collect(Collectors.toList()));\n \n-        this.creationTime = creationTime;\n+        this.creationTime = creationTime.truncatedTo(ChronoUnit.MILLIS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY2MzMxNQ=="}, "originalCommit": {"oid": "c711388fe1a2aefb421cebb40296aea99bcb4e0e"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4420, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}