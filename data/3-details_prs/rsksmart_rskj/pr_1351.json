{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzMTEzOTQz", "number": 1351, "title": "Peer scoring logs", "bodyText": "In this PR I've created a new InternalService (PeerScoringReporterService) to generate reports of peer scoring stats.\n\nGenerates a report of peers with bad reputation, every 5 minutes.\nEnabled configurable by reference.conf.\nTime report configurable by reference.conf.\n\nAdded logs to PeerScoringManager\n\nFor any peer scoring recorded event\nWhen a node is punished\nWhen a node is banned\nWhen a node is unbanned\n\nI've also exposed a new JSON RPC method (sco_badReputationSummary) to retrieve a bad reputation summary whenever we want.\nMotivation and Context\nPeer scoring analysis\nHow Has This Been Tested?\nRun the entire test suite and unit testing for each new class.\nTypes of changes\n\n Bug fix (non-breaking change which fixes an issue)\n New feature (non-breaking change which adds functionality)\n Breaking change (fix or feature that would cause existing functionality to not work as expected)\n\nChecklist:\n\n My code follows the code style of this project.\n My change requires a change to the documentation.\n I have updated the documentation accordingly.\n Tests for the changes have been added (for bug fixes / features)\n Requires Activation Code (Hard Fork)\n Debug purposes\n\n\nOther information:", "createdAt": "2020-10-30T16:12:39Z", "url": "https://github.com/rsksmart/rskj/pull/1351", "merged": true, "mergeCommit": {"oid": "db5c3be3063a7645a21be78afcae531ac62e76cd"}, "closed": true, "closedAt": "2020-12-04T13:43:18Z", "author": {"login": "fedejinich"}, "timelineItems": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXrAgjAFqTUyMDkyNzQ2Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdiAAHNgFqTU0MjI3MTI2Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwOTI3NDYy", "url": "https://github.com/rsksmart/rskj/pull/1351#pullrequestreview-520927462", "createdAt": "2020-10-30T18:19:49Z", "commit": {"oid": "502c3cc016ce03f74b1df474608e8608fb230463"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODoxOTo0OVrOHrbKYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODoxOTo0OVrOHrbKYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI5NTg0Mw==", "bodyText": "pass an address as parameter too", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r515295843", "createdAt": "2020-10-30T18:19:49Z", "author": {"login": "fedejinich"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringManager.java", "diffHunk": "@@ -71,16 +71,19 @@ protected boolean removeEldestEntry(Map.Entry<NodeID, PeerScoring> eldest) {\n      * @param event     event type (@see EventType)\r\n      */\r\n     public void recordEvent(NodeID id, InetAddress address, EventType event) {\r\n+        //todo(techdebt) this method encourages null params, this is not desirable\r\n         synchronized (accessLock) {\r\n-            if (id != null) {\r\n+            if (id != null) { //todo(techdebt) it seems this is always true\r\n                 PeerScoring scoring = peersByNodeID.computeIfAbsent(id, k -> peerScoringFactory.newInstance());\r\n-                recordEvent(scoring, event, this.nodePunishmentCalculator);\r\n+                recordEventAndStartPunishment(scoring, event, this.nodePunishmentCalculator, id);\r\n             }\r\n \r\n             if (address != null) {\r\n                 PeerScoring scoring = peersByAddress.computeIfAbsent(address, k -> peerScoringFactory.newInstance());\r\n-                recordEvent(scoring, event, this.ipPunishmentCalculator);\r\n+                recordEventAndStartPunishment(scoring, event, this.ipPunishmentCalculator, id);\r\n             }\r\n+\r\n+            PeerScoringLogger.recordEvent(id, event);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502c3cc016ce03f74b1df474608e8608fb230463"}, "originalPosition": 19}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1a1bdddf87b02f81997222f96b5c69318ff7e2f2", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/1a1bdddf87b02f81997222f96b5c69318ff7e2f2", "committedDate": "2020-11-02T20:47:25Z", "message": "removed logger class & added address to recordEvent log"}, "afterCommit": {"oid": "c9bb5bff157f3c5e902b485d80a4becd4ebe1982", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/c9bb5bff157f3c5e902b485d80a4becd4ebe1982", "committedDate": "2020-11-03T01:03:30Z", "message": "removed logger class & added address to recordEvent log"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1NDg3OTAz", "url": "https://github.com/rsksmart/rskj/pull/1351#pullrequestreview-525487903", "createdAt": "2020-11-06T20:55:51Z", "commit": {"oid": "db104a0ae34463ba6ffb79e7665ec6298aac6b53"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDo1NTo1MVrOHu9Seg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMToxNDo0NFrOHu9wcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAwMDY5OA==", "bodyText": "make sense to use just 1 property? if it is -1 is disabled?\ndont know what is our standard for this.", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r519000698", "createdAt": "2020-11-06T20:55:51Z", "author": {"login": "patogallaiovlabs"}, "path": "rskj-core/src/main/java/co/rsk/config/RskSystemProperties.java", "diffHunk": "@@ -343,4 +343,12 @@ public long getVmExecutionStackSize() {\n     }\n \n     public String cryptoLibrary() { return configFromFiles.getString(\"crypto.library\");}\n+\n+    public boolean isPeerScoringStatsReportEnabled() {\n+        return configFromFiles.getBoolean(\"scoring.statsReport.enabled\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db104a0ae34463ba6ffb79e7665ec6298aac6b53"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAwMTQzNw==", "bodyText": "Did you try it? I think it could be both.", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r519001437", "createdAt": "2020-11-06T20:57:32Z", "author": {"login": "patogallaiovlabs"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringManager.java", "diffHunk": "@@ -64,23 +68,28 @@ protected boolean removeEldestEntry(Map.Entry<NodeID, PeerScoring> eldest) {\n     }\r\n \r\n     /**\r\n-     * Record the event, givent the node id and/or the network address\r\n+     * Record the event, given the node id and/or the network address\r\n      *\r\n      * @param id        node id or null\r\n      * @param address   address or null\r\n      * @param event     event type (@see EventType)\r\n      */\r\n     public void recordEvent(NodeID id, InetAddress address, EventType event) {\r\n+        //todo(techdebt) this method encourages null params, this is not desirable\r\n         synchronized (accessLock) {\r\n-            if (id != null) {\r\n+            if (id != null) { //todo(techdebt) it seems this is always true\r\n                 PeerScoring scoring = peersByNodeID.computeIfAbsent(id, k -> peerScoringFactory.newInstance());\r\n-                recordEvent(scoring, event, this.nodePunishmentCalculator);\r\n+                recordEventAndStartPunishment(scoring, event, this.nodePunishmentCalculator, id);\r\n             }\r\n \r\n             if (address != null) {\r\n                 PeerScoring scoring = peersByAddress.computeIfAbsent(address, k -> peerScoringFactory.newInstance());\r\n-                recordEvent(scoring, event, this.ipPunishmentCalculator);\r\n+                recordEventAndStartPunishment(scoring, event, this.ipPunishmentCalculator, id);\r\n             }\r\n+\r\n+            String peersBy = id != null ? \"NodeID\" : \"Address\";\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db104a0ae34463ba6ffb79e7665ec6298aac6b53"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAwMjUwMw==", "bodyText": "I would change \"Reason\" to \"Last event\".", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r519002503", "createdAt": "2020-11-06T20:59:56Z", "author": {"login": "patogallaiovlabs"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringManager.java", "diffHunk": "@@ -241,18 +258,37 @@ public PeerScoring getPeerScoring(InetAddress address) {\n     }\r\n \r\n     /**\r\n-     * Calculates the reputation for a peer\r\n-     * Starts punishment if needed\r\n-     *\r\n-     * @param scoring       the peer scoring\r\n-     * @param calculator    the calculator to use\r\n+     * Records an event and starts punishment if needed\r\n+     * @param peerScoring the peer scoring\r\n+     * @param event an event type\r\n+     * @param punishmentCalculator calculator to use\r\n+     * @param nodeID a node id\r\n      */\r\n-    private void recordEvent(PeerScoring scoring, EventType event, PunishmentCalculator calculator) {\r\n-        scoring.recordEvent(event);\r\n-        boolean reputation = scoringCalculator.hasGoodReputation(scoring);\r\n+    private void recordEventAndStartPunishment(PeerScoring peerScoring, EventType event, PunishmentCalculator punishmentCalculator, NodeID nodeID) {\r\n+        peerScoring.recordEvent(event);\r\n+\r\n+        boolean shouldStartPunishment = !scoringCalculator.hasGoodReputation(peerScoring) && peerScoring.hasGoodReputation();\r\n+        if (shouldStartPunishment) {\r\n+            long punishmentTime = punishmentCalculator.calculate(peerScoring.getPunishmentCounter(), peerScoring.getScore());\r\n+            peerScoring.startPunishment(punishmentTime);\r\n+\r\n+            String nodeIDFormated = nodeIdForLog(nodeID);\r\n+            logger.debug(\"NodeID {} has been punished for {} milliseconds. Reason {}\", nodeIDFormated, punishmentTime, event);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db104a0ae34463ba6ffb79e7665ec6298aac6b53"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAwNzA1Ng==", "bodyText": "Calculate \"toString\" only once.", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r519007056", "createdAt": "2020-11-06T21:11:19Z", "author": {"login": "patogallaiovlabs"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringManager.java", "diffHunk": "@@ -241,18 +258,37 @@ public PeerScoring getPeerScoring(InetAddress address) {\n     }\r\n \r\n     /**\r\n-     * Calculates the reputation for a peer\r\n-     * Starts punishment if needed\r\n-     *\r\n-     * @param scoring       the peer scoring\r\n-     * @param calculator    the calculator to use\r\n+     * Records an event and starts punishment if needed\r\n+     * @param peerScoring the peer scoring\r\n+     * @param event an event type\r\n+     * @param punishmentCalculator calculator to use\r\n+     * @param nodeID a node id\r\n      */\r\n-    private void recordEvent(PeerScoring scoring, EventType event, PunishmentCalculator calculator) {\r\n-        scoring.recordEvent(event);\r\n-        boolean reputation = scoringCalculator.hasGoodReputation(scoring);\r\n+    private void recordEventAndStartPunishment(PeerScoring peerScoring, EventType event, PunishmentCalculator punishmentCalculator, NodeID nodeID) {\r\n+        peerScoring.recordEvent(event);\r\n+\r\n+        boolean shouldStartPunishment = !scoringCalculator.hasGoodReputation(peerScoring) && peerScoring.hasGoodReputation();\r\n+        if (shouldStartPunishment) {\r\n+            long punishmentTime = punishmentCalculator.calculate(peerScoring.getPunishmentCounter(), peerScoring.getScore());\r\n+            peerScoring.startPunishment(punishmentTime);\r\n+\r\n+            String nodeIDFormated = nodeIdForLog(nodeID);\r\n+            logger.debug(\"NodeID {} has been punished for {} milliseconds. Reason {}\", nodeIDFormated, punishmentTime, event);\r\n+            logger.debug(\"{}\", new PeerScoringInformation(peerScoring, nodeIDFormated, \"\"));\r\n+        }\r\n+    }\r\n+\r\n+    private String nodeIdForLog(NodeID id) {\r\n+        if(id == null) {\r\n+            return \"NO_NODE_ID\";\r\n+        }\r\n+        return id.toString().substring(id.toString().length() - 7, id.toString().length() - 1);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db104a0ae34463ba6ffb79e7665ec6298aac6b53"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAwNzk2Mg==", "bodyText": "Be careful with format, we already unified the way nodeID are printed, i think.", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r519007962", "createdAt": "2020-11-06T21:13:48Z", "author": {"login": "patogallaiovlabs"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringManager.java", "diffHunk": "@@ -241,18 +258,37 @@ public PeerScoring getPeerScoring(InetAddress address) {\n     }\r\n \r\n     /**\r\n-     * Calculates the reputation for a peer\r\n-     * Starts punishment if needed\r\n-     *\r\n-     * @param scoring       the peer scoring\r\n-     * @param calculator    the calculator to use\r\n+     * Records an event and starts punishment if needed\r\n+     * @param peerScoring the peer scoring\r\n+     * @param event an event type\r\n+     * @param punishmentCalculator calculator to use\r\n+     * @param nodeID a node id\r\n      */\r\n-    private void recordEvent(PeerScoring scoring, EventType event, PunishmentCalculator calculator) {\r\n-        scoring.recordEvent(event);\r\n-        boolean reputation = scoringCalculator.hasGoodReputation(scoring);\r\n+    private void recordEventAndStartPunishment(PeerScoring peerScoring, EventType event, PunishmentCalculator punishmentCalculator, NodeID nodeID) {\r\n+        peerScoring.recordEvent(event);\r\n+\r\n+        boolean shouldStartPunishment = !scoringCalculator.hasGoodReputation(peerScoring) && peerScoring.hasGoodReputation();\r\n+        if (shouldStartPunishment) {\r\n+            long punishmentTime = punishmentCalculator.calculate(peerScoring.getPunishmentCounter(), peerScoring.getScore());\r\n+            peerScoring.startPunishment(punishmentTime);\r\n+\r\n+            String nodeIDFormated = nodeIdForLog(nodeID);\r\n+            logger.debug(\"NodeID {} has been punished for {} milliseconds. Reason {}\", nodeIDFormated, punishmentTime, event);\r\n+            logger.debug(\"{}\", new PeerScoringInformation(peerScoring, nodeIDFormated, \"\"));\r\n+        }\r\n+    }\r\n+\r\n+    private String nodeIdForLog(NodeID id) {\r\n+        if(id == null) {\r\n+            return \"NO_NODE_ID\";\r\n+        }\r\n+        return id.toString().substring(id.toString().length() - 7, id.toString().length() - 1);\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAwNzA1Ng=="}, "originalCommit": {"oid": "db104a0ae34463ba6ffb79e7665ec6298aac6b53"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAwODEwNQ==", "bodyText": "why upper?", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r519008105", "createdAt": "2020-11-06T21:14:07Z", "author": {"login": "patogallaiovlabs"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringSummaryService.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package co.rsk.scoring;\n+\n+import co.rsk.config.InternalService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+public class PeerScoringSummaryService implements InternalService {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(\"peerScoring\");\n+\n+    private final long REPORT_TIME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db104a0ae34463ba6ffb79e7665ec6298aac6b53"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAwODM2OA==", "bodyText": "logger.error(...)", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r519008368", "createdAt": "2020-11-06T21:14:44Z", "author": {"login": "patogallaiovlabs"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringSummaryService.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package co.rsk.scoring;\n+\n+import co.rsk.config.InternalService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+public class PeerScoringSummaryService implements InternalService {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(\"peerScoring\");\n+\n+    private final long REPORT_TIME;\n+    private final PeerScoringManager peerScoringManager;\n+\n+    public PeerScoringSummaryService(long peerScoringStatsReportTime, PeerScoringManager peerScoringManager) {\n+        this.REPORT_TIME = peerScoringStatsReportTime;\n+        this.peerScoringManager = peerScoringManager;\n+    }\n+\n+    @Override\n+    public void start() {\n+        logger.debug(\"starting peer scoring summary service\");\n+        try {\n+            ScheduledExecutorService executorService = Executors.newSingleThreadScheduledExecutor();\n+            executorService.scheduleAtFixedRate(() -> this.report(peerScoringManager.getPeersInformation()),\n+                    0,\n+                    REPORT_TIME,\n+                    TimeUnit.MILLISECONDS\n+            );\n+        } catch (Exception e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db104a0ae34463ba6ffb79e7665ec6298aac6b53"}, "originalPosition": 35}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "db104a0ae34463ba6ffb79e7665ec6298aac6b53", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/db104a0ae34463ba6ffb79e7665ec6298aac6b53", "committedDate": "2020-11-03T22:32:18Z", "message": "added peer scoring summary service"}, "afterCommit": {"oid": "12d72bd4001b3eb68260f62483174c7d23600a30", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/12d72bd4001b3eb68260f62483174c7d23600a30", "committedDate": "2020-11-09T05:39:56Z", "message": "expose json rpc method sco_badReputationSummary"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1870eb2327645e69a001a8fba3a165794322cd39", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/1870eb2327645e69a001a8fba3a165794322cd39", "committedDate": "2020-11-09T14:34:26Z", "message": "sonarcloud fixies and more test cases"}, "afterCommit": {"oid": "a71f7b3d21a316d31b26eecdff9fb9b5b1ec49ee", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/a71f7b3d21a316d31b26eecdff9fb9b5b1ec49ee", "committedDate": "2020-11-09T15:44:48Z", "message": "sonarcloud fixies and more test cases"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a71f7b3d21a316d31b26eecdff9fb9b5b1ec49ee", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/a71f7b3d21a316d31b26eecdff9fb9b5b1ec49ee", "committedDate": "2020-11-09T15:44:48Z", "message": "sonarcloud fixies and more test cases"}, "afterCommit": {"oid": "fbe8cfddfacbadb547292b7d256adb98f0840a91", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/fbe8cfddfacbadb547292b7d256adb98f0840a91", "committedDate": "2020-11-09T16:18:29Z", "message": "sonarcloud fixies and more test cases"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fbe8cfddfacbadb547292b7d256adb98f0840a91", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/fbe8cfddfacbadb547292b7d256adb98f0840a91", "committedDate": "2020-11-09T16:18:29Z", "message": "sonarcloud fixies and more test cases"}, "afterCommit": {"oid": "813ae849ffdd693215642bd36be3799e304682fa", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/813ae849ffdd693215642bd36be3799e304682fa", "committedDate": "2020-11-09T16:35:20Z", "message": "sonarcloud fixies and more test cases"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "813ae849ffdd693215642bd36be3799e304682fa", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/813ae849ffdd693215642bd36be3799e304682fa", "committedDate": "2020-11-09T16:35:20Z", "message": "sonarcloud fixies and more test cases"}, "afterCommit": {"oid": "f33cb1f800f7d3ac5937a26ee710b31002d63ad6", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/f33cb1f800f7d3ac5937a26ee710b31002d63ad6", "committedDate": "2020-11-09T16:41:22Z", "message": "sonarcloud fixies and more test cases"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxMjk5Nzc3", "url": "https://github.com/rsksmart/rskj/pull/1351#pullrequestreview-531299777", "createdAt": "2020-11-16T13:04:15Z", "commit": {"oid": "a6ff65e68892aea71302bb814bfee258d9d84d8e"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzowNDoxNlrOHz90CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzowOToyNlrOHz9_2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI1MjE2OQ==", "bodyText": "scheduledExecutorService cannot be null here, can it? Also shouldn't we check validity of peerScoringManager and time values in the constructor where they are initially provided?", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r524252169", "createdAt": "2020-11-16T13:04:16Z", "author": {"login": "Vovchyk"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringReporterService.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package co.rsk.scoring;\n+\n+import co.rsk.config.InternalService;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * This service prints a summary of nodes with bad reputation, every 5 minutes (configurable)\n+ * */\n+public class PeerScoringReporterService implements InternalService {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(\"peerScoring\");\n+\n+    private final PeerScoringManager peerScoringManager;\n+    private final long time;\n+    private ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();\n+    private boolean running = false;\n+\n+    public PeerScoringReporterService(long time, PeerScoringManager peerScoringManager) {\n+        this.time = time;\n+        this.peerScoringManager = peerScoringManager;\n+    }\n+\n+    @Override\n+    public void start() {\n+        logger.debug(\"starting peer scoring reporter service\");\n+        try {\n+            List<PeerScoringInformation> peerScoringInformationList = peerScoringManager.getPeersInformation();\n+            scheduledExecutorService.scheduleAtFixedRate(() -> printReport(peerScoringInformationList),\n+                    0,\n+                    time,\n+                    TimeUnit.MILLISECONDS\n+            );\n+            running = true;\n+        } catch (Exception e) {\n+            logger.warn(\"peer scoring reporter failed\", e);\n+            stop();\n+        }\n+    }\n+\n+    @Override\n+    public void stop() {\n+        scheduledExecutorService.shutdown();\n+        logger.warn(\"peer scoring reporter service has been stopped\");\n+        running = false;\n+    }\n+\n+    public boolean printReport(List<PeerScoringInformation> peerScoringInformationList) {\n+        try {\n+            String badReputationSummary = PeerScoringReporterUtil.badReputationSummaryString(peerScoringInformationList);\n+            logger.debug(\"bad reputation summary {}\", badReputationSummary);\n+\n+            String peersInformationDetailed = PeerScoringReporterUtil.detailedBadReputationStatusString(peerScoringInformationList);\n+            logger.debug(\"detailed bad reputation status {}\", peersInformationDetailed);\n+        } catch (Exception e) {\n+            logger.warn(\"failed to print report\", e);\n+\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    @VisibleForTesting\n+    public boolean initialized() {\n+        return scheduledExecutorService != null && peerScoringManager != null && time > 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ff65e68892aea71302bb814bfee258d9d84d8e"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI1NTE5NA==", "bodyText": "As for me this error-handling is a bit over-complicated. Result of this method is not being used by the scheduledExecutorService, is it? It's only for testing purposes? Can we alternatively check if this method throws an exception in the tests, and return nothing here? The PeerScoringReporterUtil's utility methods can only produce unchecked/runtime exceptions I suppose.", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r524255194", "createdAt": "2020-11-16T13:09:26Z", "author": {"login": "Vovchyk"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringReporterService.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package co.rsk.scoring;\n+\n+import co.rsk.config.InternalService;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * This service prints a summary of nodes with bad reputation, every 5 minutes (configurable)\n+ * */\n+public class PeerScoringReporterService implements InternalService {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(\"peerScoring\");\n+\n+    private final PeerScoringManager peerScoringManager;\n+    private final long time;\n+    private ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();\n+    private boolean running = false;\n+\n+    public PeerScoringReporterService(long time, PeerScoringManager peerScoringManager) {\n+        this.time = time;\n+        this.peerScoringManager = peerScoringManager;\n+    }\n+\n+    @Override\n+    public void start() {\n+        logger.debug(\"starting peer scoring reporter service\");\n+        try {\n+            List<PeerScoringInformation> peerScoringInformationList = peerScoringManager.getPeersInformation();\n+            scheduledExecutorService.scheduleAtFixedRate(() -> printReport(peerScoringInformationList),\n+                    0,\n+                    time,\n+                    TimeUnit.MILLISECONDS\n+            );\n+            running = true;\n+        } catch (Exception e) {\n+            logger.warn(\"peer scoring reporter failed\", e);\n+            stop();\n+        }\n+    }\n+\n+    @Override\n+    public void stop() {\n+        scheduledExecutorService.shutdown();\n+        logger.warn(\"peer scoring reporter service has been stopped\");\n+        running = false;\n+    }\n+\n+    public boolean printReport(List<PeerScoringInformation> peerScoringInformationList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ff65e68892aea71302bb814bfee258d9d84d8e"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxNjM3MDMy", "url": "https://github.com/rsksmart/rskj/pull/1351#pullrequestreview-531637032", "createdAt": "2020-11-16T19:27:28Z", "commit": {"oid": "a6ff65e68892aea71302bb814bfee258d9d84d8e"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxOToyNzoyOFrOH0OEIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxOTozNjowNlrOH0OXEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUxODQzMg==", "bodyText": "Why \"BadReputation\"? We could use this information for any peer, not only the ones with bad reputation. ie, the number of valid blocks", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r524518432", "createdAt": "2020-11-16T19:27:28Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringBadReputationSummary.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package co.rsk.scoring;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * This is a presentational object of peers with bad reputation\n+ * It's used to expose a json rpc message (sco_badReputationSummary())\n+ */\n+public class PeerScoringBadReputationSummary {\n+    private int count;\n+    private int successfulHandshakes;\n+    private int failedHandshakes;\n+    private int invalidNetworks;\n+    private int repeatedMessages;\n+    private int validBlocks;\n+    private int validTransactions;\n+    private int invalidBlocks;\n+    private int invalidTransactions;\n+    private int invalidMessages;\n+    private int timeoutMessages;\n+    private int unexpectedMessages;\n+    private int invalidHeader;\n+    private int peersTotalScore;\n+    private int punishments;\n+\n+    public PeerScoringBadReputationSummary(int count,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ff65e68892aea71302bb814bfee258d9d84d8e"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUyMTg2Mg==", "bodyText": "Could we consider the alternative of having an ScoringForTest class (defined in test code that extends Scoring and override the getter methods), to inject a Scoring with some injected values? In this way, we could diminish the production code related with testing", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r524521862", "createdAt": "2020-11-16T19:33:33Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringInformation.java", "diffHunk": "@@ -45,10 +47,38 @@ public PeerScoringInformation(PeerScoring scoring, String id, String type) {\n         this.id = id;\r\n     }\r\n \r\n+    @VisibleForTesting\r\n+    public PeerScoringInformation(String type, boolean goodReputation,\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ff65e68892aea71302bb814bfee258d9d84d8e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUyMzI4MA==", "bodyText": "Usually we collected the events TWICE, if possible: by node id and by address. In some events we don't have the node id, yet. The rationale to have both, is to collect events for the same node_id, but maybe with different address along the time. Or same address with different node id.", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r524523280", "createdAt": "2020-11-16T19:36:06Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringManager.java", "diffHunk": "@@ -64,23 +68,28 @@ protected boolean removeEldestEntry(Map.Entry<NodeID, PeerScoring> eldest) {\n     }\r\n \r\n     /**\r\n-     * Record the event, givent the node id and/or the network address\r\n+     * Record the event, given the node id and/or the network address\r\n      *\r\n      * @param id        node id or null\r\n      * @param address   address or null\r\n      * @param event     event type (@see EventType)\r\n      */\r\n     public void recordEvent(NodeID id, InetAddress address, EventType event) {\r\n+        //todo(techdebt) this method encourages null params, this is not desirable\r\n         synchronized (accessLock) {\r\n-            if (id != null) {\r\n+            if (id != null) { //todo(techdebt) it seems this is always true\r\n                 PeerScoring scoring = peersByNodeID.computeIfAbsent(id, k -> peerScoringFactory.newInstance());\r\n-                recordEvent(scoring, event, this.nodePunishmentCalculator);\r\n+                recordEventAndStartPunishment(scoring, event, this.nodePunishmentCalculator, id);\r\n             }\r\n \r\n             if (address != null) {\r\n                 PeerScoring scoring = peersByAddress.computeIfAbsent(address, k -> peerScoringFactory.newInstance());\r\n-                recordEvent(scoring, event, this.ipPunishmentCalculator);\r\n+                recordEventAndStartPunishment(scoring, event, this.ipPunishmentCalculator, id);\r\n             }\r\n+\r\n+            String peersBy = id != null ? \"NodeID\" : \"Address\";\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAwMTQzNw=="}, "originalCommit": {"oid": "db104a0ae34463ba6ffb79e7665ec6298aac6b53"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1NzEyODU1", "url": "https://github.com/rsksmart/rskj/pull/1351#pullrequestreview-535712855", "createdAt": "2020-11-20T19:19:31Z", "commit": {"oid": "6bb971acf84f9fc41a6289965b70202b6da4a833"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxOToxOTozMlrOH3dvsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxOToxOTozMlrOH3dvsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkyMTA3NQ==", "bodyText": "id.toString() doesn't do this?", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r527921075", "createdAt": "2020-11-20T19:19:32Z", "author": {"login": "patogallaiovlabs"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringManager.java", "diffHunk": "@@ -241,18 +260,37 @@ public PeerScoring getPeerScoring(InetAddress address) {\n     }\r\n \r\n     /**\r\n-     * Calculates the reputation for a peer\r\n-     * Starts punishment if needed\r\n-     *\r\n-     * @param scoring       the peer scoring\r\n-     * @param calculator    the calculator to use\r\n+     * Records an event and starts punishment if needed\r\n+     * @param peerScoring the peer scoring\r\n+     * @param event an event type\r\n+     * @param punishmentCalculator calculator to use\r\n+     * @param nodeID a node id\r\n      */\r\n-    private void recordEvent(PeerScoring scoring, EventType event, PunishmentCalculator calculator) {\r\n-        scoring.recordEvent(event);\r\n-        boolean reputation = scoringCalculator.hasGoodReputation(scoring);\r\n+    private void recordEventAndStartPunishment(PeerScoring peerScoring, EventType event, PunishmentCalculator punishmentCalculator, NodeID nodeID) {\r\n+        peerScoring.recordEvent(event);\r\n+\r\n+        boolean shouldStartPunishment = !scoringCalculator.hasGoodReputation(peerScoring) && peerScoring.hasGoodReputation();\r\n+        if (shouldStartPunishment) {\r\n+            long punishmentTime = punishmentCalculator.calculate(peerScoring.getPunishmentCounter(), peerScoring.getScore());\r\n+            peerScoring.startPunishment(punishmentTime);\r\n+\r\n+            String nodeIDFormated = nodeIdForLog(nodeID);\r\n+            logger.debug(\"NodeID {} has been punished for {} milliseconds. Last event {}\", nodeIDFormated, punishmentTime, event);\r\n+            logger.debug(\"{}\", PeerScoringInformation.buildByScoring(peerScoring, nodeIDFormated, \"\"));\r\n+        }\r\n+    }\r\n+\r\n+    private String nodeIdForLog(NodeID id) {\r\n+        if(id == null) {\r\n+            return \"NO_NODE_ID\";\r\n+        }\r\n+        return ByteUtil.toHexString(id.getID());\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bb971acf84f9fc41a6289965b70202b6da4a833"}, "originalPosition": 133}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1NzEzOTk5", "url": "https://github.com/rsksmart/rskj/pull/1351#pullrequestreview-535713999", "createdAt": "2020-11-20T19:21:17Z", "commit": {"oid": "6bb971acf84f9fc41a6289965b70202b6da4a833"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxOToyMToxN1rOH3dzXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxOToyMToxN1rOH3dzXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkyMjAxMw==", "bodyText": "why do you need equals and hash?", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r527922013", "createdAt": "2020-11-20T19:21:17Z", "author": {"login": "patogallaiovlabs"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringReputationSummary.java", "diffHunk": "@@ -0,0 +1,163 @@\n+package co.rsk.scoring;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * This is a presentational object\n+ * It's used to expose a json rpc message (sco_badReputationSummary())\n+ */\n+public class PeerScoringReputationSummary {\n+    private int count;\n+    private int successfulHandshakes;\n+    private int failedHandshakes;\n+    private int invalidHeader;\n+    private int validBlocks;\n+    private int invalidBlocks;\n+    private int validTransactions;\n+    private int invalidTransactions;\n+    private int invalidNetworks;\n+    private int invalidMessages;\n+    private int repeatedMessages;\n+    private int timeoutMessages;\n+    private int unexpectedMessages;\n+    private int peersTotalScore;\n+    private int punishments;\n+    private int goodReputationCount;\n+    private int badReputationCount;\n+\n+    public PeerScoringReputationSummary(int count,\n+                                        int successfulHandshakes,\n+                                        int failedHandshakes,\n+                                        int invalidNetworks,\n+                                        int repeatedMessages,\n+                                        int validBlocks,\n+                                        int validTransactions,\n+                                        int invalidBlocks,\n+                                        int invalidTransactions,\n+                                        int invalidMessages,\n+                                        int timeoutMessages,\n+                                        int unexpectedMessages,\n+                                        int invalidHeader,\n+                                        int peersTotalScore,\n+                                        int punishments,\n+                                        int goodReputationCount,\n+                                        int badReputationCount) {\n+        this.count = count;\n+        this.successfulHandshakes = successfulHandshakes;\n+        this.failedHandshakes = failedHandshakes;\n+        this.invalidHeader = invalidHeader;\n+        this.validBlocks = validBlocks;\n+        this.invalidBlocks = invalidBlocks;\n+        this.validTransactions = validTransactions;\n+        this.invalidTransactions = invalidTransactions;\n+        this.invalidNetworks = invalidNetworks;\n+        this.invalidMessages = invalidMessages;\n+        this.repeatedMessages = repeatedMessages;\n+        this.timeoutMessages = timeoutMessages;\n+        this.unexpectedMessages = unexpectedMessages;\n+        this.peersTotalScore = peersTotalScore;\n+        this.punishments = punishments;\n+        this.goodReputationCount = goodReputationCount;\n+        this.badReputationCount = badReputationCount;\n+    }\n+\n+    public int getCount() {\n+        return count;\n+    }\n+\n+    public int getSuccessfulHandshakes() {\n+        return successfulHandshakes;\n+    }\n+\n+    public int getFailedHandshakes() {\n+        return failedHandshakes;\n+    }\n+\n+    public int getInvalidNetworks() {\n+        return invalidNetworks;\n+    }\n+\n+    public int getRepeatedMessages() {\n+        return repeatedMessages;\n+    }\n+\n+    public int getValidBlocks() {\n+        return validBlocks;\n+    }\n+\n+    public int getValidTransactions() {\n+        return validTransactions;\n+    }\n+\n+    public int getInvalidBlocks() {\n+        return invalidBlocks;\n+    }\n+\n+    public int getInvalidTransactions() {\n+        return invalidTransactions;\n+    }\n+\n+    public int getInvalidMessages() {\n+        return invalidMessages;\n+    }\n+\n+    public int getTimeoutMessages() {\n+        return timeoutMessages;\n+    }\n+\n+    public int getUnexpectedMessages() {\n+        return unexpectedMessages;\n+    }\n+\n+    public int getInvalidHeader() {\n+        return invalidHeader;\n+    }\n+\n+    public int getPeersTotalScore() {\n+        return peersTotalScore;\n+    }\n+\n+    public int getPunishments() {\n+        return punishments;\n+    }\n+\n+    public int getGoodReputationCount() {\n+        return goodReputationCount;\n+    }\n+\n+    public int getBadReputationCount() {\n+        return badReputationCount;\n+    }\n+\n+    @Override\n+    public boolean equals(Object object) {\n+        if(!(object instanceof PeerScoringReputationSummary)) {\n+            return false;\n+        }\n+        PeerScoringReputationSummary p = (PeerScoringReputationSummary) object;\n+\n+        return getCount() == p.getCount() &&\n+                getFailedHandshakes() == p.getFailedHandshakes() &&\n+                getInvalidMessages() == p.getInvalidMessages() &&\n+                getInvalidNetworks() == p.getInvalidNetworks() &&\n+                getInvalidHeader() == p.getInvalidHeader() &&\n+                getInvalidBlocks() == p.getInvalidBlocks() &&\n+                getInvalidTransactions() == p.getInvalidTransactions() &&\n+                getSuccessfulHandshakes() == p.getSuccessfulHandshakes() &&\n+                getValidTransactions() == p.getValidTransactions() &&\n+                getPunishments() == p.getPunishments() &&\n+                getPeersTotalScore() == p.getPeersTotalScore() &&\n+                getUnexpectedMessages() == p.getUnexpectedMessages() &&\n+                getTimeoutMessages() == p.getTimeoutMessages() &&\n+                getRepeatedMessages() == p.getRepeatedMessages() &&\n+                getValidBlocks() == p.getValidBlocks();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bb971acf84f9fc41a6289965b70202b6da4a833"}, "originalPosition": 153}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5dd4f96f3038b1d11798894920f152db231c1894", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/5dd4f96f3038b1d11798894920f152db231c1894", "committedDate": "2020-11-20T19:23:48Z", "message": "used nodeId.toString()"}, "afterCommit": {"oid": "edcefede36d2c617b42d0f4bf29bebaecec52016", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/edcefede36d2c617b42d0f4bf29bebaecec52016", "committedDate": "2020-11-20T20:54:22Z", "message": "used nodeId.toString()"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "edcefede36d2c617b42d0f4bf29bebaecec52016", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/edcefede36d2c617b42d0f4bf29bebaecec52016", "committedDate": "2020-11-20T20:54:22Z", "message": "used nodeId.toString()"}, "afterCommit": {"oid": "b128686f1c3c2e9481ce7c9d8b2c207c9114413f", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/b128686f1c3c2e9481ce7c9d8b2c207c9114413f", "committedDate": "2020-11-25T19:57:13Z", "message": "used nodeId.toString()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5MzQ5OTA1", "url": "https://github.com/rsksmart/rskj/pull/1351#pullrequestreview-539349905", "createdAt": "2020-11-26T14:15:01Z", "commit": {"oid": "b128686f1c3c2e9481ce7c9d8b2c207c9114413f"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "493b8f59a804aec1792663b479d4d78e19ece49c", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/493b8f59a804aec1792663b479d4d78e19ece49c", "committedDate": "2020-12-01T18:37:44Z", "message": "logs for peer scoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a34e0537a7cc715797407112c2a7f2e56db6641f", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/a34e0537a7cc715797407112c2a7f2e56db6641f", "committedDate": "2020-12-01T18:37:45Z", "message": "maintainability"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5eb543d0c94adc754b73cc6155169b9afa3c271f", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/5eb543d0c94adc754b73cc6155169b9afa3c271f", "committedDate": "2020-12-01T18:37:46Z", "message": "removed unnecesary log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32caa389053f2eed3d27e3412a58709628cbdc09", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/32caa389053f2eed3d27e3412a58709628cbdc09", "committedDate": "2020-12-01T18:37:47Z", "message": "fix sonar codesmells"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b541cbf942626a2734ae0ff2bd2b8f41e7d6e0f2", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/b541cbf942626a2734ae0ff2bd2b8f41e7d6e0f2", "committedDate": "2020-12-01T18:37:48Z", "message": "removed logger class & added address to recordEvent log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a26499d758af1e6193946a24b20f17e5d80d7d52", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/a26499d758af1e6193946a24b20f17e5d80d7d52", "committedDate": "2020-12-01T18:37:49Z", "message": "added peer scoring summary service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9ab4b90efd7003d9b16d0d14145cbdcad98ea70", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/a9ab4b90efd7003d9b16d0d14145cbdcad98ea70", "committedDate": "2020-12-01T18:37:50Z", "message": "expose json rpc method sco_badReputationSummary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63f86de1aac1558a8a4f0f69437b84118b016329", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/63f86de1aac1558a8a4f0f69437b84118b016329", "committedDate": "2020-12-01T18:37:51Z", "message": "sonarcloud fixies and more test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d06a0f8f14d9a90797e5989c3f477dd26b00f09", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/8d06a0f8f14d9a90797e5989c3f477dd26b00f09", "committedDate": "2020-12-01T18:37:52Z", "message": "logging missing exceptions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8abbaa2702fcdb48b965ec5c4b1ab4665eb3c92", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/c8abbaa2702fcdb48b965ec5c4b1ab4665eb3c92", "committedDate": "2020-12-01T18:37:53Z", "message": "now with reputation summary instead of bad reputation summary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11ee5f8b5ab70c6c52ea61d5cfd0443ecdb44db0", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/11ee5f8b5ab70c6c52ea61d5cfd0443ecdb44db0", "committedDate": "2020-12-01T18:37:54Z", "message": "removed testing constructor on PeerScoringInformation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d2a039f4b4f2866655851fda3493aa9083040be", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/7d2a039f4b4f2866655851fda3493aa9083040be", "committedDate": "2020-12-01T18:37:54Z", "message": "logg address and nodeId on PeerScoringManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36e7038fda5891df5ee3ad49084cc17f7279b84f", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/36e7038fda5891df5ee3ad49084cc17f7279b84f", "committedDate": "2020-12-01T18:37:55Z", "message": "removed testing logic from prod"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8614a4d32bc1c332762083beeb053f839ddbb4f2", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/8614a4d32bc1c332762083beeb053f839ddbb4f2", "committedDate": "2020-12-01T18:37:56Z", "message": "remove unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f2eae6714cc66597d9c1a7ee9a83ab655d52b84", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/8f2eae6714cc66597d9c1a7ee9a83ab655d52b84", "committedDate": "2020-12-01T18:37:57Z", "message": "used nodeId.toString()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb2faae359d42e271810981165d3dba637391b67", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/fb2faae359d42e271810981165d3dba637391b67", "committedDate": "2020-12-01T18:37:58Z", "message": "summary every 5 minutes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b128686f1c3c2e9481ce7c9d8b2c207c9114413f", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/b128686f1c3c2e9481ce7c9d8b2c207c9114413f", "committedDate": "2020-11-25T19:57:13Z", "message": "used nodeId.toString()"}, "afterCommit": {"oid": "fb2faae359d42e271810981165d3dba637391b67", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/fb2faae359d42e271810981165d3dba637391b67", "committedDate": "2020-12-01T18:37:58Z", "message": "summary every 5 minutes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMjcxMjYy", "url": "https://github.com/rsksmart/rskj/pull/1351#pullrequestreview-542271262", "createdAt": "2020-12-01T20:30:47Z", "commit": {"oid": "fb2faae359d42e271810981165d3dba637391b67"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 613, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}