{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1MDU1Mzg2", "number": 1321, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTozNzoyMlrOEouGIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTo0MzozMFrOEouOJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTMzNzI5OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/peg/PeginInformation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTozNzoyMlrOHZ-STA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTozNzoyMlrOHZ-STA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk5Njk0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.debug(\"[parse] Trying to parse peg-in information from btc tx {}\", btcTx.getHash());\n          \n          \n            \n                    logger.trace(\"[parse] Trying to parse peg-in information from btc tx {}\", btcTx.getHash());", "url": "https://github.com/rsksmart/rskj/pull/1321#discussion_r496996940", "createdAt": "2020-09-29T19:37:22Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/main/java/co/rsk/peg/PeginInformation.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package co.rsk.peg;\n+\n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.core.RskAddress;\n+import co.rsk.peg.btcLockSender.BtcLockSender;\n+import co.rsk.peg.btcLockSender.BtcLockSenderProvider;\n+import co.rsk.peg.pegininstructions.PeginInstructions;\n+import co.rsk.peg.pegininstructions.PeginInstructionsException;\n+import co.rsk.peg.pegininstructions.PeginInstructionsProvider;\n+import co.rsk.peg.pegininstructions.PeginInstructionsVersion1;\n+import java.util.Optional;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInformation {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInformation.class);\n+\n+    private final BtcLockSenderProvider btcLockSenderProvider;\n+    private final PeginInstructionsProvider peginInstructionsProvider;\n+\n+    private int protocolVersion;\n+    private RskAddress rskDestinationAddress;\n+    private Address btcRefundAddress;\n+\n+    public PeginInformation(\n+        BtcLockSenderProvider btcLockSenderProvider,\n+        PeginInstructionsProvider peginInstructionsProvider) {\n+        this.btcLockSenderProvider = btcLockSenderProvider;\n+        this.peginInstructionsProvider = peginInstructionsProvider;\n+    }\n+\n+    public int getProtocolVersion() {\n+        return protocolVersion;\n+    }\n+\n+    public RskAddress getRskDestinationAddress() {\n+        return this.rskDestinationAddress;\n+    }\n+\n+    public Address getBtcRefundAddress() {\n+        return this.btcRefundAddress;\n+    }\n+\n+    public void parse(BtcTransaction btcTx) throws PeginInstructionsException {\n+        logger.debug(\"[parse] Trying to parse peg-in information from btc tx {}\", btcTx.getHash());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b07ce07a850ffb4fc558ac7d527108f75029fcd"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTMzODMwOnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/peg/PeginInformation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTozNzo0MFrOHZ-S8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTozNzo0MFrOHZ-S8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk5NzEwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(btcLockSenderOptional.isPresent()) {\n          \n          \n            \n                    if (btcLockSenderOptional.isPresent()) {", "url": "https://github.com/rsksmart/rskj/pull/1321#discussion_r496997104", "createdAt": "2020-09-29T19:37:40Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/main/java/co/rsk/peg/PeginInformation.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package co.rsk.peg;\n+\n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.core.RskAddress;\n+import co.rsk.peg.btcLockSender.BtcLockSender;\n+import co.rsk.peg.btcLockSender.BtcLockSenderProvider;\n+import co.rsk.peg.pegininstructions.PeginInstructions;\n+import co.rsk.peg.pegininstructions.PeginInstructionsException;\n+import co.rsk.peg.pegininstructions.PeginInstructionsProvider;\n+import co.rsk.peg.pegininstructions.PeginInstructionsVersion1;\n+import java.util.Optional;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInformation {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInformation.class);\n+\n+    private final BtcLockSenderProvider btcLockSenderProvider;\n+    private final PeginInstructionsProvider peginInstructionsProvider;\n+\n+    private int protocolVersion;\n+    private RskAddress rskDestinationAddress;\n+    private Address btcRefundAddress;\n+\n+    public PeginInformation(\n+        BtcLockSenderProvider btcLockSenderProvider,\n+        PeginInstructionsProvider peginInstructionsProvider) {\n+        this.btcLockSenderProvider = btcLockSenderProvider;\n+        this.peginInstructionsProvider = peginInstructionsProvider;\n+    }\n+\n+    public int getProtocolVersion() {\n+        return protocolVersion;\n+    }\n+\n+    public RskAddress getRskDestinationAddress() {\n+        return this.rskDestinationAddress;\n+    }\n+\n+    public Address getBtcRefundAddress() {\n+        return this.btcRefundAddress;\n+    }\n+\n+    public void parse(BtcTransaction btcTx) throws PeginInstructionsException {\n+        logger.debug(\"[parse] Trying to parse peg-in information from btc tx {}\", btcTx.getHash());\n+\n+        // Get information from tx sender first\n+        Optional<BtcLockSender> btcLockSenderOptional = btcLockSenderProvider.tryGetBtcLockSender(btcTx);\n+        if(btcLockSenderOptional.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b07ce07a850ffb4fc558ac7d527108f75029fcd"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTM0Mjg0OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/peg/PeginInformation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTozOTowM1rOHZ-VoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTozOTowM1rOHZ-VoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk5Nzc5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.error(\"[parse] {}\", message);\n          \n          \n            \n                        logger.warn(\"[parse] {}\", message);", "url": "https://github.com/rsksmart/rskj/pull/1321#discussion_r496997792", "createdAt": "2020-09-29T19:39:03Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/main/java/co/rsk/peg/PeginInformation.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package co.rsk.peg;\n+\n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.core.RskAddress;\n+import co.rsk.peg.btcLockSender.BtcLockSender;\n+import co.rsk.peg.btcLockSender.BtcLockSenderProvider;\n+import co.rsk.peg.pegininstructions.PeginInstructions;\n+import co.rsk.peg.pegininstructions.PeginInstructionsException;\n+import co.rsk.peg.pegininstructions.PeginInstructionsProvider;\n+import co.rsk.peg.pegininstructions.PeginInstructionsVersion1;\n+import java.util.Optional;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInformation {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInformation.class);\n+\n+    private final BtcLockSenderProvider btcLockSenderProvider;\n+    private final PeginInstructionsProvider peginInstructionsProvider;\n+\n+    private int protocolVersion;\n+    private RskAddress rskDestinationAddress;\n+    private Address btcRefundAddress;\n+\n+    public PeginInformation(\n+        BtcLockSenderProvider btcLockSenderProvider,\n+        PeginInstructionsProvider peginInstructionsProvider) {\n+        this.btcLockSenderProvider = btcLockSenderProvider;\n+        this.peginInstructionsProvider = peginInstructionsProvider;\n+    }\n+\n+    public int getProtocolVersion() {\n+        return protocolVersion;\n+    }\n+\n+    public RskAddress getRskDestinationAddress() {\n+        return this.rskDestinationAddress;\n+    }\n+\n+    public Address getBtcRefundAddress() {\n+        return this.btcRefundAddress;\n+    }\n+\n+    public void parse(BtcTransaction btcTx) throws PeginInstructionsException {\n+        logger.debug(\"[parse] Trying to parse peg-in information from btc tx {}\", btcTx.getHash());\n+\n+        // Get information from tx sender first\n+        Optional<BtcLockSender> btcLockSenderOptional = btcLockSenderProvider.tryGetBtcLockSender(btcTx);\n+        if(btcLockSenderOptional.isPresent()) {\n+            BtcLockSender btcLockSender = btcLockSenderOptional.get();\n+            parseFromBtcLockSender(btcLockSender);\n+        }\n+\n+        // If peg-in instructions were provided then override the info obtained from BtcLockSender\n+        Optional<PeginInstructions> peginInstructionsOptional = peginInstructionsProvider.buildPeginInstructions(btcTx);\n+        if (peginInstructionsOptional.isPresent()) {\n+            PeginInstructions peginInstructions = peginInstructionsOptional.get();\n+            parseFromPeginInstructions(peginInstructions);\n+        }\n+\n+        // If BtcLockSender could not be parsed and peg-in instructions were not provided, then this tx can't be processed\n+        if(!btcLockSenderOptional.isPresent() && !peginInstructionsOptional.isPresent()) {\n+            String message = String.format(\"Could not get peg-in information for tx %s\", btcTx.getHash());\n+            logger.error(\"[parse] {}\", message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b07ce07a850ffb4fc558ac7d527108f75029fcd"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTM0NDA3OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/peg/PeginInformation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTozOToyMlrOHZ-WWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTozOToyMlrOHZ-WWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk5Nzk3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.info(\"[parseFromBtcLockSender] RSK destination address: {}\", btcLockSender.getRskAddress());\n          \n          \n            \n                    logger.info(\"[parseFromBtcLockSender] BTC refund address: {}\", btcLockSender.getBTCAddress().toBase58());\n          \n          \n            \n                    logger.trace(\"[parseFromBtcLockSender] RSK destination address: {}\", btcLockSender.getRskAddress());\n          \n          \n            \n                    logger.trace(\"[parseFromBtcLockSender] BTC refund address: {}\", btcLockSender.getBTCAddress());\n          \n      \n    \n    \n  \n\nBesides the logging level, you don't need to call toBase58. Internally this method calls toString which is automatically called by the log, if the logging level is enabled.", "url": "https://github.com/rsksmart/rskj/pull/1321#discussion_r496997976", "createdAt": "2020-09-29T19:39:22Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/main/java/co/rsk/peg/PeginInformation.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package co.rsk.peg;\n+\n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.core.RskAddress;\n+import co.rsk.peg.btcLockSender.BtcLockSender;\n+import co.rsk.peg.btcLockSender.BtcLockSenderProvider;\n+import co.rsk.peg.pegininstructions.PeginInstructions;\n+import co.rsk.peg.pegininstructions.PeginInstructionsException;\n+import co.rsk.peg.pegininstructions.PeginInstructionsProvider;\n+import co.rsk.peg.pegininstructions.PeginInstructionsVersion1;\n+import java.util.Optional;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInformation {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInformation.class);\n+\n+    private final BtcLockSenderProvider btcLockSenderProvider;\n+    private final PeginInstructionsProvider peginInstructionsProvider;\n+\n+    private int protocolVersion;\n+    private RskAddress rskDestinationAddress;\n+    private Address btcRefundAddress;\n+\n+    public PeginInformation(\n+        BtcLockSenderProvider btcLockSenderProvider,\n+        PeginInstructionsProvider peginInstructionsProvider) {\n+        this.btcLockSenderProvider = btcLockSenderProvider;\n+        this.peginInstructionsProvider = peginInstructionsProvider;\n+    }\n+\n+    public int getProtocolVersion() {\n+        return protocolVersion;\n+    }\n+\n+    public RskAddress getRskDestinationAddress() {\n+        return this.rskDestinationAddress;\n+    }\n+\n+    public Address getBtcRefundAddress() {\n+        return this.btcRefundAddress;\n+    }\n+\n+    public void parse(BtcTransaction btcTx) throws PeginInstructionsException {\n+        logger.debug(\"[parse] Trying to parse peg-in information from btc tx {}\", btcTx.getHash());\n+\n+        // Get information from tx sender first\n+        Optional<BtcLockSender> btcLockSenderOptional = btcLockSenderProvider.tryGetBtcLockSender(btcTx);\n+        if(btcLockSenderOptional.isPresent()) {\n+            BtcLockSender btcLockSender = btcLockSenderOptional.get();\n+            parseFromBtcLockSender(btcLockSender);\n+        }\n+\n+        // If peg-in instructions were provided then override the info obtained from BtcLockSender\n+        Optional<PeginInstructions> peginInstructionsOptional = peginInstructionsProvider.buildPeginInstructions(btcTx);\n+        if (peginInstructionsOptional.isPresent()) {\n+            PeginInstructions peginInstructions = peginInstructionsOptional.get();\n+            parseFromPeginInstructions(peginInstructions);\n+        }\n+\n+        // If BtcLockSender could not be parsed and peg-in instructions were not provided, then this tx can't be processed\n+        if(!btcLockSenderOptional.isPresent() && !peginInstructionsOptional.isPresent()) {\n+            String message = String.format(\"Could not get peg-in information for tx %s\", btcTx.getHash());\n+            logger.error(\"[parse] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+    }\n+\n+    private void parseFromBtcLockSender(BtcLockSender btcLockSender) {\n+        this.protocolVersion = 0;\n+        this.rskDestinationAddress = btcLockSender.getRskAddress();\n+        this.btcRefundAddress = btcLockSender.getBTCAddress();\n+\n+        logger.info(\"[parseFromBtcLockSender] RSK destination address: {}\", btcLockSender.getRskAddress());\n+        logger.info(\"[parseFromBtcLockSender] BTC refund address: {}\", btcLockSender.getBTCAddress().toBase58());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b07ce07a850ffb4fc558ac7d527108f75029fcd"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTM0OTMxOnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/peg/PeginInformation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTo0MDo0OFrOHZ-Zkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTo0MDo0OFrOHZ-Zkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk5ODgwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.info(\"[parseFromPeginInstructions] Protocol version: {}\", peginInstructions.getProtocolVersion());\n          \n          \n            \n                    logger.info(\"[parseFromPeginInstructions] RSK destination address: {}\", peginInstructions.getRskDestinationAddress());\n          \n          \n            \n                    logger.trace(\"[parseFromPeginInstructions] Protocol version: {}\", peginInstructions.getProtocolVersion());\n          \n          \n            \n                    logger.trace(\"[parseFromPeginInstructions] RSK destination address: {}\", peginInstructions.getRskDestinationAddress());", "url": "https://github.com/rsksmart/rskj/pull/1321#discussion_r496998803", "createdAt": "2020-09-29T19:40:48Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/main/java/co/rsk/peg/PeginInformation.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package co.rsk.peg;\n+\n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.core.RskAddress;\n+import co.rsk.peg.btcLockSender.BtcLockSender;\n+import co.rsk.peg.btcLockSender.BtcLockSenderProvider;\n+import co.rsk.peg.pegininstructions.PeginInstructions;\n+import co.rsk.peg.pegininstructions.PeginInstructionsException;\n+import co.rsk.peg.pegininstructions.PeginInstructionsProvider;\n+import co.rsk.peg.pegininstructions.PeginInstructionsVersion1;\n+import java.util.Optional;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInformation {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInformation.class);\n+\n+    private final BtcLockSenderProvider btcLockSenderProvider;\n+    private final PeginInstructionsProvider peginInstructionsProvider;\n+\n+    private int protocolVersion;\n+    private RskAddress rskDestinationAddress;\n+    private Address btcRefundAddress;\n+\n+    public PeginInformation(\n+        BtcLockSenderProvider btcLockSenderProvider,\n+        PeginInstructionsProvider peginInstructionsProvider) {\n+        this.btcLockSenderProvider = btcLockSenderProvider;\n+        this.peginInstructionsProvider = peginInstructionsProvider;\n+    }\n+\n+    public int getProtocolVersion() {\n+        return protocolVersion;\n+    }\n+\n+    public RskAddress getRskDestinationAddress() {\n+        return this.rskDestinationAddress;\n+    }\n+\n+    public Address getBtcRefundAddress() {\n+        return this.btcRefundAddress;\n+    }\n+\n+    public void parse(BtcTransaction btcTx) throws PeginInstructionsException {\n+        logger.debug(\"[parse] Trying to parse peg-in information from btc tx {}\", btcTx.getHash());\n+\n+        // Get information from tx sender first\n+        Optional<BtcLockSender> btcLockSenderOptional = btcLockSenderProvider.tryGetBtcLockSender(btcTx);\n+        if(btcLockSenderOptional.isPresent()) {\n+            BtcLockSender btcLockSender = btcLockSenderOptional.get();\n+            parseFromBtcLockSender(btcLockSender);\n+        }\n+\n+        // If peg-in instructions were provided then override the info obtained from BtcLockSender\n+        Optional<PeginInstructions> peginInstructionsOptional = peginInstructionsProvider.buildPeginInstructions(btcTx);\n+        if (peginInstructionsOptional.isPresent()) {\n+            PeginInstructions peginInstructions = peginInstructionsOptional.get();\n+            parseFromPeginInstructions(peginInstructions);\n+        }\n+\n+        // If BtcLockSender could not be parsed and peg-in instructions were not provided, then this tx can't be processed\n+        if(!btcLockSenderOptional.isPresent() && !peginInstructionsOptional.isPresent()) {\n+            String message = String.format(\"Could not get peg-in information for tx %s\", btcTx.getHash());\n+            logger.error(\"[parse] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+    }\n+\n+    private void parseFromBtcLockSender(BtcLockSender btcLockSender) {\n+        this.protocolVersion = 0;\n+        this.rskDestinationAddress = btcLockSender.getRskAddress();\n+        this.btcRefundAddress = btcLockSender.getBTCAddress();\n+\n+        logger.info(\"[parseFromBtcLockSender] RSK destination address: {}\", btcLockSender.getRskAddress());\n+        logger.info(\"[parseFromBtcLockSender] BTC refund address: {}\", btcLockSender.getBTCAddress().toBase58());\n+    }\n+\n+    private void parseFromPeginInstructions(PeginInstructions peginInstructions)  throws PeginInstructionsException {\n+        this.protocolVersion = peginInstructions.getProtocolVersion();\n+        this.rskDestinationAddress = peginInstructions.getRskDestinationAddress();\n+        logger.info(\"[parseFromPeginInstructions] Protocol version: {}\", peginInstructions.getProtocolVersion());\n+        logger.info(\"[parseFromPeginInstructions] RSK destination address: {}\", peginInstructions.getRskDestinationAddress());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b07ce07a850ffb4fc558ac7d527108f75029fcd"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTM1MTM3OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/peg/PeginInformation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTo0MToyOVrOHZ-a2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTo0MToyOVrOHZ-a2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk5OTEzMQ==", "bodyText": "it would be nice to also log the protocol version in this case", "url": "https://github.com/rsksmart/rskj/pull/1321#discussion_r496999131", "createdAt": "2020-09-29T19:41:29Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/main/java/co/rsk/peg/PeginInformation.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package co.rsk.peg;\n+\n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.core.RskAddress;\n+import co.rsk.peg.btcLockSender.BtcLockSender;\n+import co.rsk.peg.btcLockSender.BtcLockSenderProvider;\n+import co.rsk.peg.pegininstructions.PeginInstructions;\n+import co.rsk.peg.pegininstructions.PeginInstructionsException;\n+import co.rsk.peg.pegininstructions.PeginInstructionsProvider;\n+import co.rsk.peg.pegininstructions.PeginInstructionsVersion1;\n+import java.util.Optional;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInformation {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInformation.class);\n+\n+    private final BtcLockSenderProvider btcLockSenderProvider;\n+    private final PeginInstructionsProvider peginInstructionsProvider;\n+\n+    private int protocolVersion;\n+    private RskAddress rskDestinationAddress;\n+    private Address btcRefundAddress;\n+\n+    public PeginInformation(\n+        BtcLockSenderProvider btcLockSenderProvider,\n+        PeginInstructionsProvider peginInstructionsProvider) {\n+        this.btcLockSenderProvider = btcLockSenderProvider;\n+        this.peginInstructionsProvider = peginInstructionsProvider;\n+    }\n+\n+    public int getProtocolVersion() {\n+        return protocolVersion;\n+    }\n+\n+    public RskAddress getRskDestinationAddress() {\n+        return this.rskDestinationAddress;\n+    }\n+\n+    public Address getBtcRefundAddress() {\n+        return this.btcRefundAddress;\n+    }\n+\n+    public void parse(BtcTransaction btcTx) throws PeginInstructionsException {\n+        logger.debug(\"[parse] Trying to parse peg-in information from btc tx {}\", btcTx.getHash());\n+\n+        // Get information from tx sender first\n+        Optional<BtcLockSender> btcLockSenderOptional = btcLockSenderProvider.tryGetBtcLockSender(btcTx);\n+        if(btcLockSenderOptional.isPresent()) {\n+            BtcLockSender btcLockSender = btcLockSenderOptional.get();\n+            parseFromBtcLockSender(btcLockSender);\n+        }\n+\n+        // If peg-in instructions were provided then override the info obtained from BtcLockSender\n+        Optional<PeginInstructions> peginInstructionsOptional = peginInstructionsProvider.buildPeginInstructions(btcTx);\n+        if (peginInstructionsOptional.isPresent()) {\n+            PeginInstructions peginInstructions = peginInstructionsOptional.get();\n+            parseFromPeginInstructions(peginInstructions);\n+        }\n+\n+        // If BtcLockSender could not be parsed and peg-in instructions were not provided, then this tx can't be processed\n+        if(!btcLockSenderOptional.isPresent() && !peginInstructionsOptional.isPresent()) {\n+            String message = String.format(\"Could not get peg-in information for tx %s\", btcTx.getHash());\n+            logger.error(\"[parse] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+    }\n+\n+    private void parseFromBtcLockSender(BtcLockSender btcLockSender) {\n+        this.protocolVersion = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b07ce07a850ffb4fc558ac7d527108f75029fcd"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTM1NTE1OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/peg/PeginInformation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTo0MjozOFrOHZ-dLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTo0MjozOFrOHZ-dLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk5OTcyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                logger.info(\"[parseFromPeginInstructions] BTC refund address: {}\", btcRefundAddressOptional.get().toBase58());\n          \n          \n            \n                                logger.trace(\"[parseFromPeginInstructions] BTC refund address: {}\", btcRefundAddressOptional.get());", "url": "https://github.com/rsksmart/rskj/pull/1321#discussion_r496999726", "createdAt": "2020-09-29T19:42:38Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/main/java/co/rsk/peg/PeginInformation.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package co.rsk.peg;\n+\n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.core.RskAddress;\n+import co.rsk.peg.btcLockSender.BtcLockSender;\n+import co.rsk.peg.btcLockSender.BtcLockSenderProvider;\n+import co.rsk.peg.pegininstructions.PeginInstructions;\n+import co.rsk.peg.pegininstructions.PeginInstructionsException;\n+import co.rsk.peg.pegininstructions.PeginInstructionsProvider;\n+import co.rsk.peg.pegininstructions.PeginInstructionsVersion1;\n+import java.util.Optional;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInformation {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInformation.class);\n+\n+    private final BtcLockSenderProvider btcLockSenderProvider;\n+    private final PeginInstructionsProvider peginInstructionsProvider;\n+\n+    private int protocolVersion;\n+    private RskAddress rskDestinationAddress;\n+    private Address btcRefundAddress;\n+\n+    public PeginInformation(\n+        BtcLockSenderProvider btcLockSenderProvider,\n+        PeginInstructionsProvider peginInstructionsProvider) {\n+        this.btcLockSenderProvider = btcLockSenderProvider;\n+        this.peginInstructionsProvider = peginInstructionsProvider;\n+    }\n+\n+    public int getProtocolVersion() {\n+        return protocolVersion;\n+    }\n+\n+    public RskAddress getRskDestinationAddress() {\n+        return this.rskDestinationAddress;\n+    }\n+\n+    public Address getBtcRefundAddress() {\n+        return this.btcRefundAddress;\n+    }\n+\n+    public void parse(BtcTransaction btcTx) throws PeginInstructionsException {\n+        logger.debug(\"[parse] Trying to parse peg-in information from btc tx {}\", btcTx.getHash());\n+\n+        // Get information from tx sender first\n+        Optional<BtcLockSender> btcLockSenderOptional = btcLockSenderProvider.tryGetBtcLockSender(btcTx);\n+        if(btcLockSenderOptional.isPresent()) {\n+            BtcLockSender btcLockSender = btcLockSenderOptional.get();\n+            parseFromBtcLockSender(btcLockSender);\n+        }\n+\n+        // If peg-in instructions were provided then override the info obtained from BtcLockSender\n+        Optional<PeginInstructions> peginInstructionsOptional = peginInstructionsProvider.buildPeginInstructions(btcTx);\n+        if (peginInstructionsOptional.isPresent()) {\n+            PeginInstructions peginInstructions = peginInstructionsOptional.get();\n+            parseFromPeginInstructions(peginInstructions);\n+        }\n+\n+        // If BtcLockSender could not be parsed and peg-in instructions were not provided, then this tx can't be processed\n+        if(!btcLockSenderOptional.isPresent() && !peginInstructionsOptional.isPresent()) {\n+            String message = String.format(\"Could not get peg-in information for tx %s\", btcTx.getHash());\n+            logger.error(\"[parse] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+    }\n+\n+    private void parseFromBtcLockSender(BtcLockSender btcLockSender) {\n+        this.protocolVersion = 0;\n+        this.rskDestinationAddress = btcLockSender.getRskAddress();\n+        this.btcRefundAddress = btcLockSender.getBTCAddress();\n+\n+        logger.info(\"[parseFromBtcLockSender] RSK destination address: {}\", btcLockSender.getRskAddress());\n+        logger.info(\"[parseFromBtcLockSender] BTC refund address: {}\", btcLockSender.getBTCAddress().toBase58());\n+    }\n+\n+    private void parseFromPeginInstructions(PeginInstructions peginInstructions)  throws PeginInstructionsException {\n+        this.protocolVersion = peginInstructions.getProtocolVersion();\n+        this.rskDestinationAddress = peginInstructions.getRskDestinationAddress();\n+        logger.info(\"[parseFromPeginInstructions] Protocol version: {}\", peginInstructions.getProtocolVersion());\n+        logger.info(\"[parseFromPeginInstructions] RSK destination address: {}\", peginInstructions.getRskDestinationAddress());\n+\n+        switch (protocolVersion) {\n+            case 1:\n+                PeginInstructionsVersion1 peginInstructionsV1 = (PeginInstructionsVersion1) peginInstructions;\n+                Optional<Address> btcRefundAddressOptional = peginInstructionsV1\n+                    .getBtcRefundAddress();\n+                if (btcRefundAddressOptional.isPresent()) {\n+                    this.btcRefundAddress = btcRefundAddressOptional.get();\n+                    logger.info(\"[parseFromPeginInstructions] BTC refund address: {}\", btcRefundAddressOptional.get().toBase58());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b07ce07a850ffb4fc558ac7d527108f75029fcd"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTM1NzgwOnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/peg/PeginInformation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTo0MzozMFrOHZ-eyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTo0MzozMFrOHZ-eyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAwMDEzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger.error(\"[parseFromPeginInstructions] {}\", message);\n          \n          \n            \n                            logger.warn(\"[parseFromPeginInstructions] {}\", message);", "url": "https://github.com/rsksmart/rskj/pull/1321#discussion_r497000136", "createdAt": "2020-09-29T19:43:30Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/main/java/co/rsk/peg/PeginInformation.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package co.rsk.peg;\n+\n+import co.rsk.bitcoinj.core.Address;\n+import co.rsk.bitcoinj.core.BtcTransaction;\n+import co.rsk.core.RskAddress;\n+import co.rsk.peg.btcLockSender.BtcLockSender;\n+import co.rsk.peg.btcLockSender.BtcLockSenderProvider;\n+import co.rsk.peg.pegininstructions.PeginInstructions;\n+import co.rsk.peg.pegininstructions.PeginInstructionsException;\n+import co.rsk.peg.pegininstructions.PeginInstructionsProvider;\n+import co.rsk.peg.pegininstructions.PeginInstructionsVersion1;\n+import java.util.Optional;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PeginInformation {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(PeginInformation.class);\n+\n+    private final BtcLockSenderProvider btcLockSenderProvider;\n+    private final PeginInstructionsProvider peginInstructionsProvider;\n+\n+    private int protocolVersion;\n+    private RskAddress rskDestinationAddress;\n+    private Address btcRefundAddress;\n+\n+    public PeginInformation(\n+        BtcLockSenderProvider btcLockSenderProvider,\n+        PeginInstructionsProvider peginInstructionsProvider) {\n+        this.btcLockSenderProvider = btcLockSenderProvider;\n+        this.peginInstructionsProvider = peginInstructionsProvider;\n+    }\n+\n+    public int getProtocolVersion() {\n+        return protocolVersion;\n+    }\n+\n+    public RskAddress getRskDestinationAddress() {\n+        return this.rskDestinationAddress;\n+    }\n+\n+    public Address getBtcRefundAddress() {\n+        return this.btcRefundAddress;\n+    }\n+\n+    public void parse(BtcTransaction btcTx) throws PeginInstructionsException {\n+        logger.debug(\"[parse] Trying to parse peg-in information from btc tx {}\", btcTx.getHash());\n+\n+        // Get information from tx sender first\n+        Optional<BtcLockSender> btcLockSenderOptional = btcLockSenderProvider.tryGetBtcLockSender(btcTx);\n+        if(btcLockSenderOptional.isPresent()) {\n+            BtcLockSender btcLockSender = btcLockSenderOptional.get();\n+            parseFromBtcLockSender(btcLockSender);\n+        }\n+\n+        // If peg-in instructions were provided then override the info obtained from BtcLockSender\n+        Optional<PeginInstructions> peginInstructionsOptional = peginInstructionsProvider.buildPeginInstructions(btcTx);\n+        if (peginInstructionsOptional.isPresent()) {\n+            PeginInstructions peginInstructions = peginInstructionsOptional.get();\n+            parseFromPeginInstructions(peginInstructions);\n+        }\n+\n+        // If BtcLockSender could not be parsed and peg-in instructions were not provided, then this tx can't be processed\n+        if(!btcLockSenderOptional.isPresent() && !peginInstructionsOptional.isPresent()) {\n+            String message = String.format(\"Could not get peg-in information for tx %s\", btcTx.getHash());\n+            logger.error(\"[parse] {}\", message);\n+            throw new PeginInstructionsException(message);\n+        }\n+    }\n+\n+    private void parseFromBtcLockSender(BtcLockSender btcLockSender) {\n+        this.protocolVersion = 0;\n+        this.rskDestinationAddress = btcLockSender.getRskAddress();\n+        this.btcRefundAddress = btcLockSender.getBTCAddress();\n+\n+        logger.info(\"[parseFromBtcLockSender] RSK destination address: {}\", btcLockSender.getRskAddress());\n+        logger.info(\"[parseFromBtcLockSender] BTC refund address: {}\", btcLockSender.getBTCAddress().toBase58());\n+    }\n+\n+    private void parseFromPeginInstructions(PeginInstructions peginInstructions)  throws PeginInstructionsException {\n+        this.protocolVersion = peginInstructions.getProtocolVersion();\n+        this.rskDestinationAddress = peginInstructions.getRskDestinationAddress();\n+        logger.info(\"[parseFromPeginInstructions] Protocol version: {}\", peginInstructions.getProtocolVersion());\n+        logger.info(\"[parseFromPeginInstructions] RSK destination address: {}\", peginInstructions.getRskDestinationAddress());\n+\n+        switch (protocolVersion) {\n+            case 1:\n+                PeginInstructionsVersion1 peginInstructionsV1 = (PeginInstructionsVersion1) peginInstructions;\n+                Optional<Address> btcRefundAddressOptional = peginInstructionsV1\n+                    .getBtcRefundAddress();\n+                if (btcRefundAddressOptional.isPresent()) {\n+                    this.btcRefundAddress = btcRefundAddressOptional.get();\n+                    logger.info(\"[parseFromPeginInstructions] BTC refund address: {}\", btcRefundAddressOptional.get().toBase58());\n+                }\n+                break;\n+            default:\n+                String message = String.format(\"Invalid protocol version: %d\", protocolVersion);\n+                logger.error(\"[parseFromPeginInstructions] {}\", message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b07ce07a850ffb4fc558ac7d527108f75029fcd"}, "originalPosition": 98}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4486, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}