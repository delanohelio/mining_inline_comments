{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1NDc4MDc5", "number": 1355, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzowMDoxOFrOE1pU3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODo1NTowM1rOE3Xfpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0Njg3MDcwOnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/peg/fastbridge/FastBridgeFederationInformation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzowMDoxOFrOHuCK_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzowMDoxOFrOHuCK_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAzMjEyNA==", "bodyText": "Add new line please", "url": "https://github.com/rsksmart/rskj/pull/1355#discussion_r518032124", "createdAt": "2020-11-05T13:00:18Z", "author": {"login": "guidohernan93"}, "path": "rskj-core/src/main/java/co/rsk/peg/fastbridge/FastBridgeFederationInformation.java", "diffHunk": "@@ -18,4 +18,4 @@ public Sha256Hash getDerivationHash() {\n     public byte[] getFederationScriptHash() {\n         return federationScriptHash.clone();\n     }\n-}\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a38860a09c70e5eaea7d486ee115db6d781a8ae"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzExMDg1OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/test/java/co/rsk/peg/BridgeSupportTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo1ODowOVrOHuEeSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNDowMToyM1rOHuEnpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2OTgzMg==", "bodyText": "Why getBytes()?", "url": "https://github.com/rsksmart/rskj/pull/1355#discussion_r518069832", "createdAt": "2020-11-05T13:58:09Z", "author": {"login": "guidohernan93"}, "path": "rskj-core/src/test/java/co/rsk/peg/BridgeSupportTest.java", "diffHunk": "@@ -4983,6 +4984,59 @@ public void processPegIn_tx_no_lockable_by_surpassing_locking_cap() throws IOExc\n                 ConsensusRule.RSKIP134);\n     }\n \n+    @Test\n+    public void createFastBridgeFederationData_Ok() {\n+        BridgeSupport bridgeSupport = spy(getBridgeSupport(bridgeConstants, mock(BridgeStorageProvider.class)));\n+\n+        Sha256Hash derivationArgumentsHash = Sha256Hash.wrap(HashUtil.randomHash());\n+        Address userRefundAddress = mock(Address.class);\n+        Address lpBtcAddress = mock(Address.class);\n+        RskAddress lbcAddress = mock(RskAddress.class);\n+\n+        Sha256Hash resultDerivationHash = Sha256Hash.wrap(HashUtil.randomHash());\n+        doReturn(resultDerivationHash).when(bridgeSupport).getFastBridgeDerivationHash(\n+                derivationArgumentsHash,\n+                userRefundAddress,\n+                lpBtcAddress,\n+                lbcAddress\n+        );\n+\n+        FastBridgeFederationData fastBridgeFederationData = bridgeSupport.createFastBridgeFederationData(\n+                derivationArgumentsHash,\n+                userRefundAddress,\n+                lpBtcAddress,\n+                lbcAddress\n+        );\n+        Script resultRedeemScript = RedeemScriptParser.createMultiSigFastBridgeRedeemScript(\n+                bridgeSupport.getActiveFederation().getRedeemScript(),\n+                resultDerivationHash\n+        );\n+\n+        Assert.assertArrayEquals(resultDerivationHash.getBytes(), fastBridgeFederationData.getDerivationArgumentsHash().getBytes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a38860a09c70e5eaea7d486ee115db6d781a8ae"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA3MjIzMQ==", "bodyText": "it is an error. Thanks", "url": "https://github.com/rsksmart/rskj/pull/1355#discussion_r518072231", "createdAt": "2020-11-05T14:01:23Z", "author": {"login": "pamgonzalez"}, "path": "rskj-core/src/test/java/co/rsk/peg/BridgeSupportTest.java", "diffHunk": "@@ -4983,6 +4984,59 @@ public void processPegIn_tx_no_lockable_by_surpassing_locking_cap() throws IOExc\n                 ConsensusRule.RSKIP134);\n     }\n \n+    @Test\n+    public void createFastBridgeFederationData_Ok() {\n+        BridgeSupport bridgeSupport = spy(getBridgeSupport(bridgeConstants, mock(BridgeStorageProvider.class)));\n+\n+        Sha256Hash derivationArgumentsHash = Sha256Hash.wrap(HashUtil.randomHash());\n+        Address userRefundAddress = mock(Address.class);\n+        Address lpBtcAddress = mock(Address.class);\n+        RskAddress lbcAddress = mock(RskAddress.class);\n+\n+        Sha256Hash resultDerivationHash = Sha256Hash.wrap(HashUtil.randomHash());\n+        doReturn(resultDerivationHash).when(bridgeSupport).getFastBridgeDerivationHash(\n+                derivationArgumentsHash,\n+                userRefundAddress,\n+                lpBtcAddress,\n+                lbcAddress\n+        );\n+\n+        FastBridgeFederationData fastBridgeFederationData = bridgeSupport.createFastBridgeFederationData(\n+                derivationArgumentsHash,\n+                userRefundAddress,\n+                lpBtcAddress,\n+                lbcAddress\n+        );\n+        Script resultRedeemScript = RedeemScriptParser.createMultiSigFastBridgeRedeemScript(\n+                bridgeSupport.getActiveFederation().getRedeemScript(),\n+                resultDerivationHash\n+        );\n+\n+        Assert.assertArrayEquals(resultDerivationHash.getBytes(), fastBridgeFederationData.getDerivationArgumentsHash().getBytes());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2OTgzMg=="}, "originalCommit": {"oid": "7a38860a09c70e5eaea7d486ee115db6d781a8ae"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDkxODM2OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/test/java/co/rsk/peg/BridgeSupportTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODo1NDo0MFrOHwq-QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODo1NDo0MFrOHwq-QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc5Nzc2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Assert.fail();\n          \n      \n    \n    \n  \n\nIf the test doesn't triggers an exception it will fail, no need for the assert.fail", "url": "https://github.com/rsksmart/rskj/pull/1355#discussion_r520797761", "createdAt": "2020-11-10T18:54:40Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/test/java/co/rsk/peg/BridgeSupportTest.java", "diffHunk": "@@ -5446,6 +5446,79 @@ public void getFastBridgeWallet_OK() {\n         assertEquals(obtainedWallet.getBalance(), Coin.COIN);\n     }\n \n+    @Test\n+    public void createFastBridgeFederationData_Ok() {\n+        BridgeSupport bridgeSupport = spy(getBridgeSupport(bridgeConstants, mock(BridgeStorageProvider.class)));\n+\n+        Sha256Hash derivationArgumentsHash = Sha256Hash.wrap(HashUtil.randomHash());\n+        Address userRefundAddress = mock(Address.class);\n+        Address lpBtcAddress = mock(Address.class);\n+        RskAddress lbcAddress = mock(RskAddress.class);\n+\n+        Sha256Hash resultDerivationHash = Sha256Hash.wrap(HashUtil.randomHash());\n+        doReturn(resultDerivationHash).when(bridgeSupport).getFastBridgeDerivationHash(\n+                derivationArgumentsHash,\n+                userRefundAddress,\n+                lpBtcAddress,\n+                lbcAddress\n+        );\n+\n+        FastBridgeFederationData fastBridgeFederationData = bridgeSupport.createFastBridgeFederationData(\n+                derivationArgumentsHash,\n+                userRefundAddress,\n+                lpBtcAddress,\n+                lbcAddress\n+        );\n+        Script resultRedeemScript = RedeemScriptParser.createMultiSigFastBridgeRedeemScript(\n+                bridgeSupport.getActiveFederation().getRedeemScript(),\n+                resultDerivationHash\n+        );\n+\n+        Assert.assertEquals(resultDerivationHash, fastBridgeFederationData.getDerivationArgumentsHash());\n+        Assert.assertEquals(ScriptBuilder.createP2SHOutputScript(resultRedeemScript), fastBridgeFederationData.getFastBridgeScriptHash());\n+    }\n+\n+    @Test(expected = Exception.class)\n+    public void createFastBridgeFederationData_Error() {\n+        BridgeSupport bridgeSupport = spy(getBridgeSupport(bridgeConstants, mock(BridgeStorageProvider.class)));\n+\n+        Sha256Hash derivationArgumentsHash = Sha256Hash.wrap(HashUtil.randomHash());\n+        Address userRefundAddress = mock(Address.class);\n+        Address lpBtcAddress = mock(Address.class);\n+        RskAddress lbcAddress = mock(RskAddress.class);\n+\n+        Sha256Hash resultDerivationHash = Sha256Hash.wrap(HashUtil.randomHash());\n+        doReturn(null).when(bridgeSupport).getFastBridgeDerivationHash(\n+                derivationArgumentsHash,\n+                userRefundAddress,\n+                lpBtcAddress,\n+                lbcAddress\n+        );\n+\n+        Assert.fail();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96bcc703ab1035ae329936371a2af97666585f36"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDkyMDcxOnYy", "diffSide": "RIGHT", "path": "rskj-core/src/test/java/co/rsk/peg/BridgeSupportTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODo1NTowM1rOHwq_rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODo1NTowM1rOHwq_rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc5ODEyNA==", "bodyText": "Why using generic Exception? Doesn't it triggers custom exceptions?", "url": "https://github.com/rsksmart/rskj/pull/1355#discussion_r520798124", "createdAt": "2020-11-10T18:55:03Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/test/java/co/rsk/peg/BridgeSupportTest.java", "diffHunk": "@@ -5446,6 +5446,79 @@ public void getFastBridgeWallet_OK() {\n         assertEquals(obtainedWallet.getBalance(), Coin.COIN);\n     }\n \n+    @Test\n+    public void createFastBridgeFederationData_Ok() {\n+        BridgeSupport bridgeSupport = spy(getBridgeSupport(bridgeConstants, mock(BridgeStorageProvider.class)));\n+\n+        Sha256Hash derivationArgumentsHash = Sha256Hash.wrap(HashUtil.randomHash());\n+        Address userRefundAddress = mock(Address.class);\n+        Address lpBtcAddress = mock(Address.class);\n+        RskAddress lbcAddress = mock(RskAddress.class);\n+\n+        Sha256Hash resultDerivationHash = Sha256Hash.wrap(HashUtil.randomHash());\n+        doReturn(resultDerivationHash).when(bridgeSupport).getFastBridgeDerivationHash(\n+                derivationArgumentsHash,\n+                userRefundAddress,\n+                lpBtcAddress,\n+                lbcAddress\n+        );\n+\n+        FastBridgeFederationData fastBridgeFederationData = bridgeSupport.createFastBridgeFederationData(\n+                derivationArgumentsHash,\n+                userRefundAddress,\n+                lpBtcAddress,\n+                lbcAddress\n+        );\n+        Script resultRedeemScript = RedeemScriptParser.createMultiSigFastBridgeRedeemScript(\n+                bridgeSupport.getActiveFederation().getRedeemScript(),\n+                resultDerivationHash\n+        );\n+\n+        Assert.assertEquals(resultDerivationHash, fastBridgeFederationData.getDerivationArgumentsHash());\n+        Assert.assertEquals(ScriptBuilder.createP2SHOutputScript(resultRedeemScript), fastBridgeFederationData.getFastBridgeScriptHash());\n+    }\n+\n+    @Test(expected = Exception.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96bcc703ab1035ae329936371a2af97666585f36"}, "originalPosition": 84}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4530, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}