{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2NDcyNzI2", "number": 1257, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzo0MDoxMVrOEHq0PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODo0MjozOVrOEHsDjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDc2OTg5OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/net/light/LightMessageHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzo0MDoxMVrOGnKsrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzozODo0NVrOGnpsEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcyMjkyNA==", "bodyText": "Why do the max amount of blocks is eleven?", "url": "https://github.com/rsksmart/rskj/pull/1257#discussion_r443722924", "createdAt": "2020-06-22T17:40:11Z", "author": {"login": "julianlen"}, "path": "rskj-core/src/main/java/co/rsk/net/light/LightMessageHandler.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2020 RSK Labs Ltd.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package co.rsk.net.light;\n+\n+import co.rsk.config.InternalService;\n+import co.rsk.net.eth.LightClientHandler;\n+import co.rsk.net.light.message.LightClientMessage;\n+import com.google.common.annotations.VisibleForTesting;\n+import io.netty.channel.ChannelHandlerContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+\n+public class LightMessageHandler implements InternalService, Runnable {\n+    private static final Logger logger = LoggerFactory.getLogger(\"lightmessagehandler\");\n+    private static final Logger loggerMessageProcess = LoggerFactory.getLogger(\"lightmessageProcess\");\n+\n+    private final LightProcessor lightProcessor;\n+    private final LightSyncProcessor lightSyncProcessor;\n+\n+    private final ArrayBlockingQueue<MessageTask> queue;\n+\n+    private volatile boolean stopped;\n+\n+    public LightMessageHandler(LightProcessor lightProcessor, LightSyncProcessor lightSyncProcessor) {\n+        this.lightProcessor = lightProcessor;\n+        this.lightSyncProcessor = lightSyncProcessor;\n+        this.queue = new ArrayBlockingQueue<>(11);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c1682fb5f55173ff2d472990f7a623feba930c3"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIzMDY3NQ==", "bodyText": "Left at 11. Comment added on how it can be increased", "url": "https://github.com/rsksmart/rskj/pull/1257#discussion_r444230675", "createdAt": "2020-06-23T13:38:45Z", "author": {"login": "smcsicardi"}, "path": "rskj-core/src/main/java/co/rsk/net/light/LightMessageHandler.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2020 RSK Labs Ltd.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package co.rsk.net.light;\n+\n+import co.rsk.config.InternalService;\n+import co.rsk.net.eth.LightClientHandler;\n+import co.rsk.net.light.message.LightClientMessage;\n+import com.google.common.annotations.VisibleForTesting;\n+import io.netty.channel.ChannelHandlerContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+\n+public class LightMessageHandler implements InternalService, Runnable {\n+    private static final Logger logger = LoggerFactory.getLogger(\"lightmessagehandler\");\n+    private static final Logger loggerMessageProcess = LoggerFactory.getLogger(\"lightmessageProcess\");\n+\n+    private final LightProcessor lightProcessor;\n+    private final LightSyncProcessor lightSyncProcessor;\n+\n+    private final ArrayBlockingQueue<MessageTask> queue;\n+\n+    private volatile boolean stopped;\n+\n+    public LightMessageHandler(LightProcessor lightProcessor, LightSyncProcessor lightSyncProcessor) {\n+        this.lightProcessor = lightProcessor;\n+        this.lightSyncProcessor = lightSyncProcessor;\n+        this.queue = new ArrayBlockingQueue<>(11);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcyMjkyNA=="}, "originalCommit": {"oid": "4c1682fb5f55173ff2d472990f7a623feba930c3"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDc4MzA4OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/net/light/LightMessageHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzo0NDoxNlrOGnK09Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzoxMDo1OVrOGnoe9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcyNTA0NQ==", "bodyText": "Is it just for me? postMessage sounds me a bit confusing, I understand 'postMessage' like \"send message\". A name as \"store message\" could fit better?", "url": "https://github.com/rsksmart/rskj/pull/1257#discussion_r443725045", "createdAt": "2020-06-22T17:44:16Z", "author": {"login": "julianlen"}, "path": "rskj-core/src/main/java/co/rsk/net/light/LightMessageHandler.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2020 RSK Labs Ltd.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package co.rsk.net.light;\n+\n+import co.rsk.config.InternalService;\n+import co.rsk.net.eth.LightClientHandler;\n+import co.rsk.net.light.message.LightClientMessage;\n+import com.google.common.annotations.VisibleForTesting;\n+import io.netty.channel.ChannelHandlerContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+\n+public class LightMessageHandler implements InternalService, Runnable {\n+    private static final Logger logger = LoggerFactory.getLogger(\"lightmessagehandler\");\n+    private static final Logger loggerMessageProcess = LoggerFactory.getLogger(\"lightmessageProcess\");\n+\n+    private final LightProcessor lightProcessor;\n+    private final LightSyncProcessor lightSyncProcessor;\n+\n+    private final ArrayBlockingQueue<MessageTask> queue;\n+\n+    private volatile boolean stopped;\n+\n+    public LightMessageHandler(LightProcessor lightProcessor, LightSyncProcessor lightSyncProcessor) {\n+        this.lightProcessor = lightProcessor;\n+        this.lightSyncProcessor = lightSyncProcessor;\n+        this.queue = new ArrayBlockingQueue<>(11);\n+    }\n+\n+    public void processMessage(LightPeer lightPeer, LightClientMessage message,\n+                               ChannelHandlerContext ctx, LightClientHandler lightClientHandler) {\n+        LightClientMessageVisitor visitor = new LightClientMessageVisitor(lightPeer, lightProcessor, lightSyncProcessor, ctx, lightClientHandler);\n+        message.accept(visitor);\n+    }\n+\n+    public void postMessage(LightPeer lightPeer, LightClientMessage message, ChannelHandlerContext ctx,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c1682fb5f55173ff2d472990f7a623feba930c3"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIxMDkzMw==", "bodyText": "Changed to \"enqueueMessage\" in order to better explain the method, because it does just that :P", "url": "https://github.com/rsksmart/rskj/pull/1257#discussion_r444210933", "createdAt": "2020-06-23T13:10:59Z", "author": {"login": "smcsicardi"}, "path": "rskj-core/src/main/java/co/rsk/net/light/LightMessageHandler.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2020 RSK Labs Ltd.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package co.rsk.net.light;\n+\n+import co.rsk.config.InternalService;\n+import co.rsk.net.eth.LightClientHandler;\n+import co.rsk.net.light.message.LightClientMessage;\n+import com.google.common.annotations.VisibleForTesting;\n+import io.netty.channel.ChannelHandlerContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+\n+public class LightMessageHandler implements InternalService, Runnable {\n+    private static final Logger logger = LoggerFactory.getLogger(\"lightmessagehandler\");\n+    private static final Logger loggerMessageProcess = LoggerFactory.getLogger(\"lightmessageProcess\");\n+\n+    private final LightProcessor lightProcessor;\n+    private final LightSyncProcessor lightSyncProcessor;\n+\n+    private final ArrayBlockingQueue<MessageTask> queue;\n+\n+    private volatile boolean stopped;\n+\n+    public LightMessageHandler(LightProcessor lightProcessor, LightSyncProcessor lightSyncProcessor) {\n+        this.lightProcessor = lightProcessor;\n+        this.lightSyncProcessor = lightSyncProcessor;\n+        this.queue = new ArrayBlockingQueue<>(11);\n+    }\n+\n+    public void processMessage(LightPeer lightPeer, LightClientMessage message,\n+                               ChannelHandlerContext ctx, LightClientHandler lightClientHandler) {\n+        LightClientMessageVisitor visitor = new LightClientMessageVisitor(lightPeer, lightProcessor, lightSyncProcessor, ctx, lightClientHandler);\n+        message.accept(visitor);\n+    }\n+\n+    public void postMessage(LightPeer lightPeer, LightClientMessage message, ChannelHandlerContext ctx,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcyNTA0NQ=="}, "originalCommit": {"oid": "4c1682fb5f55173ff2d472990f7a623feba930c3"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDgzNTE4OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/net/light/LightMessageHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzo1OTozMFrOGnLWBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODo1MjoyNFrOGnM_Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzczMzUxMQ==", "bodyText": "By default, the stopped variable is false?", "url": "https://github.com/rsksmart/rskj/pull/1257#discussion_r443733511", "createdAt": "2020-06-22T17:59:30Z", "author": {"login": "julianlen"}, "path": "rskj-core/src/main/java/co/rsk/net/light/LightMessageHandler.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2020 RSK Labs Ltd.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package co.rsk.net.light;\n+\n+import co.rsk.config.InternalService;\n+import co.rsk.net.eth.LightClientHandler;\n+import co.rsk.net.light.message.LightClientMessage;\n+import com.google.common.annotations.VisibleForTesting;\n+import io.netty.channel.ChannelHandlerContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+\n+public class LightMessageHandler implements InternalService, Runnable {\n+    private static final Logger logger = LoggerFactory.getLogger(\"lightmessagehandler\");\n+    private static final Logger loggerMessageProcess = LoggerFactory.getLogger(\"lightmessageProcess\");\n+\n+    private final LightProcessor lightProcessor;\n+    private final LightSyncProcessor lightSyncProcessor;\n+\n+    private final ArrayBlockingQueue<MessageTask> queue;\n+\n+    private volatile boolean stopped;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c1682fb5f55173ff2d472990f7a623feba930c3"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2MDQzMQ==", "bodyText": "yes, but I should add it just in case", "url": "https://github.com/rsksmart/rskj/pull/1257#discussion_r443760431", "createdAt": "2020-06-22T18:52:24Z", "author": {"login": "smcsicardi"}, "path": "rskj-core/src/main/java/co/rsk/net/light/LightMessageHandler.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2020 RSK Labs Ltd.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package co.rsk.net.light;\n+\n+import co.rsk.config.InternalService;\n+import co.rsk.net.eth.LightClientHandler;\n+import co.rsk.net.light.message.LightClientMessage;\n+import com.google.common.annotations.VisibleForTesting;\n+import io.netty.channel.ChannelHandlerContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+\n+public class LightMessageHandler implements InternalService, Runnable {\n+    private static final Logger logger = LoggerFactory.getLogger(\"lightmessagehandler\");\n+    private static final Logger loggerMessageProcess = LoggerFactory.getLogger(\"lightmessageProcess\");\n+\n+    private final LightProcessor lightProcessor;\n+    private final LightSyncProcessor lightSyncProcessor;\n+\n+    private final ArrayBlockingQueue<MessageTask> queue;\n+\n+    private volatile boolean stopped;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzczMzUxMQ=="}, "originalCommit": {"oid": "4c1682fb5f55173ff2d472990f7a623feba930c3"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDk3Mjk0OnYy", "diffSide": "LEFT", "path": "rskj-core/src/test/java/co/rsk/net/light/LightSyncProcessorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODo0MjozOVrOGnMseg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODo1OTozM1rOGnNNjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1NTY0Mg==", "bodyText": "Ok, we should implement a peer handler before accepting messages from more than one peer, we are not doing anything to peers with bad behavior.", "url": "https://github.com/rsksmart/rskj/pull/1257#discussion_r443755642", "createdAt": "2020-06-22T18:42:39Z", "author": {"login": "julianlen"}, "path": "rskj-core/src/test/java/co/rsk/net/light/LightSyncProcessorTest.java", "diffHunk": "@@ -141,29 +141,12 @@ public void processStatusMessageAndShouldAskForAndReceiveBlockHeaderCorrectly()\n \n         BlockHeadersMessage blockHeadersMessage = new BlockHeadersMessage(requestId, bHs);\n \n-        lightClientHandler.channelRead0(ctx, blockHeadersMessage);\n+        lightMessageHandler.processMessage(lightPeer, blockHeadersMessage, ctx, lightClientHandler);\n \n         assertEquals(1, lightPeer.getBlocks().size());\n         assertEquals(bHs, lightPeer.getBlocks());\n     }\n \n-    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c1682fb5f55173ff2d472990f7a623feba930c3"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2NDExMA==", "bodyText": "This is a mistake on my part, this should not be removed, it relates to a constant I wrongly changed", "url": "https://github.com/rsksmart/rskj/pull/1257#discussion_r443764110", "createdAt": "2020-06-22T18:59:33Z", "author": {"login": "smcsicardi"}, "path": "rskj-core/src/test/java/co/rsk/net/light/LightSyncProcessorTest.java", "diffHunk": "@@ -141,29 +141,12 @@ public void processStatusMessageAndShouldAskForAndReceiveBlockHeaderCorrectly()\n \n         BlockHeadersMessage blockHeadersMessage = new BlockHeadersMessage(requestId, bHs);\n \n-        lightClientHandler.channelRead0(ctx, blockHeadersMessage);\n+        lightMessageHandler.processMessage(lightPeer, blockHeadersMessage, ctx, lightClientHandler);\n \n         assertEquals(1, lightPeer.getBlocks().size());\n         assertEquals(bHs, lightPeer.getBlocks());\n     }\n \n-    @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1NTY0Mg=="}, "originalCommit": {"oid": "4c1682fb5f55173ff2d472990f7a623feba930c3"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4425, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}