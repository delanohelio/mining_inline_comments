{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0MDIwMTY1", "number": 1352, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDo1Mjo1NVrOE2PF9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMToxNTo0NlrOE41oow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MzA1ODQ2OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/test/java/co/rsk/rpc/modules/eth/EthModuleTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDo1Mjo1NVrOHu9Ncg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMzozMDozNFrOHwclpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk5OTQxMA==", "bodyText": "I would not test agains the function, but for the explicit value", "url": "https://github.com/rsksmart/rskj/pull/1352#discussion_r518999410", "createdAt": "2020-11-06T20:52:55Z", "author": {"login": "patogallaiovlabs"}, "path": "rskj-core/src/test/java/co/rsk/rpc/modules/eth/EthModuleTest.java", "diffHunk": "@@ -75,7 +112,7 @@ public void callSmokeTest() {\n                         null, null, null));\n \n         String result = eth.call(args, \"latest\");\n-        assertThat(result, is(TypeConverter.toJsonHex(hreturn)));\n+        assertThat(result, is(TypeConverter.toUnformattedJsonHex(hReturn)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "402cd25ec532fd54ea226799196c970b55966f41"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU2MjA4Ng==", "bodyText": "done", "url": "https://github.com/rsksmart/rskj/pull/1352#discussion_r520562086", "createdAt": "2020-11-10T13:30:34Z", "author": {"login": "Vovchyk"}, "path": "rskj-core/src/test/java/co/rsk/rpc/modules/eth/EthModuleTest.java", "diffHunk": "@@ -75,7 +112,7 @@ public void callSmokeTest() {\n                         null, null, null));\n \n         String result = eth.call(args, \"latest\");\n-        assertThat(result, is(TypeConverter.toJsonHex(hreturn)));\n+        assertThat(result, is(TypeConverter.toUnformattedJsonHex(hReturn)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk5OTQxMA=="}, "originalCommit": {"oid": "402cd25ec532fd54ea226799196c970b55966f41"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MzA1OTczOnYy", "diffSide": "RIGHT", "path": "rskj-core/src/test/java/co/rsk/rpc/modules/eth/EthModuleTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDo1MzoyOVrOHu9OQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMzozMDozOVrOHwclzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk5OTYxOA==", "bodyText": "Same here, to be clear whats the expected value.", "url": "https://github.com/rsksmart/rskj/pull/1352#discussion_r518999618", "createdAt": "2020-11-06T20:53:29Z", "author": {"login": "patogallaiovlabs"}, "path": "rskj-core/src/test/java/co/rsk/rpc/modules/eth/EthModuleTest.java", "diffHunk": "@@ -52,10 +53,46 @@ public void callSmokeTest() {\n                 .thenReturn(blockResult);\n         when(blockResult.getBlock()).thenReturn(block);\n \n-        byte[] hreturn = TypeConverter.stringToByteArray(\"hello\");\n+        byte[] hReturn = TypeConverter.stringToByteArray(\"hello\");\n+        ProgramResult executorResult = mock(ProgramResult.class);\n+        when(executorResult.getHReturn())\n+                .thenReturn(hReturn);\n+\n+        ReversibleTransactionExecutor executor = mock(ReversibleTransactionExecutor.class);\n+        when(executor.executeTransaction(eq(blockResult.getBlock()), any(), any(), any(), any(), any(), any(), any()))\n+                .thenReturn(executorResult);\n+\n+        EthModule eth = new EthModule(\n+                null,\n+                anyByte(),\n+                null,\n+                null,\n+                executor,\n+                retriever,\n+                null,\n+                null,\n+                null,\n+                new BridgeSupportFactory(\n+                        null, null, null));\n+\n+        String result = eth.call(args, \"latest\");\n+        assertThat(result, is(TypeConverter.toUnformattedJsonHex(hReturn)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "402cd25ec532fd54ea226799196c970b55966f41"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU2MjEyNw==", "bodyText": "done", "url": "https://github.com/rsksmart/rskj/pull/1352#discussion_r520562127", "createdAt": "2020-11-10T13:30:39Z", "author": {"login": "Vovchyk"}, "path": "rskj-core/src/test/java/co/rsk/rpc/modules/eth/EthModuleTest.java", "diffHunk": "@@ -52,10 +53,46 @@ public void callSmokeTest() {\n                 .thenReturn(blockResult);\n         when(blockResult.getBlock()).thenReturn(block);\n \n-        byte[] hreturn = TypeConverter.stringToByteArray(\"hello\");\n+        byte[] hReturn = TypeConverter.stringToByteArray(\"hello\");\n+        ProgramResult executorResult = mock(ProgramResult.class);\n+        when(executorResult.getHReturn())\n+                .thenReturn(hReturn);\n+\n+        ReversibleTransactionExecutor executor = mock(ReversibleTransactionExecutor.class);\n+        when(executor.executeTransaction(eq(blockResult.getBlock()), any(), any(), any(), any(), any(), any(), any()))\n+                .thenReturn(executorResult);\n+\n+        EthModule eth = new EthModule(\n+                null,\n+                anyByte(),\n+                null,\n+                null,\n+                executor,\n+                retriever,\n+                null,\n+                null,\n+                null,\n+                new BridgeSupportFactory(\n+                        null, null, null));\n+\n+        String result = eth.call(args, \"latest\");\n+        assertThat(result, is(TypeConverter.toUnformattedJsonHex(hReturn)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk5OTYxOA=="}, "originalCommit": {"oid": "402cd25ec532fd54ea226799196c970b55966f41"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDM0NDY3OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/test/java/co/rsk/rpc/modules/eth/EthModuleTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMToxNTo0NlrOHy_zgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNzo1MjoxOVrOH2qqDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzNjIyNQ==", "bodyText": "Could we have a test using an address without code? To be sure EthModule reacts with the expected behavior, even if we change the internal code in the future. In this test, we are presuming the hReturn will be the empty byte array.", "url": "https://github.com/rsksmart/rskj/pull/1352#discussion_r523236225", "createdAt": "2020-11-13T21:15:46Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/test/java/co/rsk/rpc/modules/eth/EthModuleTest.java", "diffHunk": "@@ -52,10 +54,48 @@ public void callSmokeTest() {\n                 .thenReturn(blockResult);\n         when(blockResult.getBlock()).thenReturn(block);\n \n-        byte[] hreturn = TypeConverter.stringToByteArray(\"hello\");\n+        byte[] hReturn = TypeConverter.stringToByteArray(\"hello\");\n+        ProgramResult executorResult = mock(ProgramResult.class);\n+        when(executorResult.getHReturn())\n+                .thenReturn(hReturn);\n+\n+        ReversibleTransactionExecutor executor = mock(ReversibleTransactionExecutor.class);\n+        when(executor.executeTransaction(eq(blockResult.getBlock()), any(), any(), any(), any(), any(), any(), any()))\n+                .thenReturn(executorResult);\n+\n+        EthModule eth = new EthModule(\n+                null,\n+                anyByte(),\n+                null,\n+                null,\n+                executor,\n+                retriever,\n+                null,\n+                null,\n+                null,\n+                new BridgeSupportFactory(\n+                        null, null, null));\n+\n+        String expectedResult = TypeConverter.toUnformattedJsonHex(hReturn);\n+        String actualResult = eth.call(args, \"latest\");\n+\n+        assertEquals(expectedResult, actualResult);\n+    }\n+\n+    @Test\n+    public void callWithoutReturn() {\n+        Web3.CallArguments args = new Web3.CallArguments();\n+        BlockResult blockResult = mock(BlockResult.class);\n+        Block block = mock(Block.class);\n+        ExecutionBlockRetriever retriever = mock(ExecutionBlockRetriever.class);\n+        when(retriever.getExecutionBlock_workaround(\"latest\"))\n+                .thenReturn(blockResult);\n+        when(blockResult.getBlock()).thenReturn(block);\n+\n+        byte[] hReturn = new byte[0];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d3d090440cab02744e52f0770f579fa5b5e230f"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA4NDA0Ng==", "bodyText": "done", "url": "https://github.com/rsksmart/rskj/pull/1352#discussion_r527084046", "createdAt": "2020-11-19T17:52:19Z", "author": {"login": "Vovchyk"}, "path": "rskj-core/src/test/java/co/rsk/rpc/modules/eth/EthModuleTest.java", "diffHunk": "@@ -52,10 +54,48 @@ public void callSmokeTest() {\n                 .thenReturn(blockResult);\n         when(blockResult.getBlock()).thenReturn(block);\n \n-        byte[] hreturn = TypeConverter.stringToByteArray(\"hello\");\n+        byte[] hReturn = TypeConverter.stringToByteArray(\"hello\");\n+        ProgramResult executorResult = mock(ProgramResult.class);\n+        when(executorResult.getHReturn())\n+                .thenReturn(hReturn);\n+\n+        ReversibleTransactionExecutor executor = mock(ReversibleTransactionExecutor.class);\n+        when(executor.executeTransaction(eq(blockResult.getBlock()), any(), any(), any(), any(), any(), any(), any()))\n+                .thenReturn(executorResult);\n+\n+        EthModule eth = new EthModule(\n+                null,\n+                anyByte(),\n+                null,\n+                null,\n+                executor,\n+                retriever,\n+                null,\n+                null,\n+                null,\n+                new BridgeSupportFactory(\n+                        null, null, null));\n+\n+        String expectedResult = TypeConverter.toUnformattedJsonHex(hReturn);\n+        String actualResult = eth.call(args, \"latest\");\n+\n+        assertEquals(expectedResult, actualResult);\n+    }\n+\n+    @Test\n+    public void callWithoutReturn() {\n+        Web3.CallArguments args = new Web3.CallArguments();\n+        BlockResult blockResult = mock(BlockResult.class);\n+        Block block = mock(Block.class);\n+        ExecutionBlockRetriever retriever = mock(ExecutionBlockRetriever.class);\n+        when(retriever.getExecutionBlock_workaround(\"latest\"))\n+                .thenReturn(blockResult);\n+        when(blockResult.getBlock()).thenReturn(block);\n+\n+        byte[] hReturn = new byte[0];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzNjIyNQ=="}, "originalCommit": {"oid": "3d3d090440cab02744e52f0770f579fa5b5e230f"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4527, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}