{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwMTk4ODU2", "number": 1284, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDozMToyMlrOEUL6eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMzowODozNVrOEZ-DwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NjAyMTY4OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/rpc/modules/trace/ProgramSubtrace.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDozMToyMlrOG6VaFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNjozOToyM1rOG87dyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgyMTMzMg==", "bodyText": "shouldn't be \"create2\" : \"create\" ?", "url": "https://github.com/rsksmart/rskj/pull/1284#discussion_r463821332", "createdAt": "2020-07-31T20:31:22Z", "author": {"login": "patogallaiovlabs"}, "path": "rskj-core/src/main/java/co/rsk/rpc/modules/trace/ProgramSubtrace.java", "diffHunk": "@@ -29,26 +29,28 @@\n     private final TraceType traceType;\n     private final CallType callType;\n     private final CreationData creationData;\n+    private final String creationMethod;\n     private final InvokeData invokeData;\n     private final ProgramResult programResult;\n     private final List<ProgramSubtrace> subtraces;\n \n     public static ProgramSubtrace newSuicideSubtrace(InvokeData invokeData) {\n-        return new ProgramSubtrace(TraceType.SUICIDE, CallType.NONE, null, invokeData, null, Collections.emptyList());\n+        return new ProgramSubtrace(TraceType.SUICIDE, CallType.NONE, null, null, invokeData, null, Collections.emptyList());\n     }\n \n-    public static ProgramSubtrace newCreateSubtrace(CreationData creationData, InvokeData invokeData, ProgramResult programResult, List<ProgramSubtrace> subtraces) {\n-        return new ProgramSubtrace(TraceType.CREATE, CallType.NONE, creationData, invokeData, programResult, subtraces);\n+    public static ProgramSubtrace newCreateSubtrace(CreationData creationData, InvokeData invokeData, ProgramResult programResult, List<ProgramSubtrace> subtraces, boolean isCreate2) {\n+        return new ProgramSubtrace(TraceType.CREATE, CallType.NONE, creationData, isCreate2 ? \"create2\" : null, invokeData, programResult, subtraces);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d0b9debd2c70c730f6d95604096c7576cae43ec"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMwNDk4Mw==", "bodyText": "Well, the creation method field does not appear in Parity output when the creation use the CREATE opcode. Our object to be serialized to JSON DOES NOT serialize fields in null. So, providing null avoid the appearance of creationMethod field in the output JSON, as in Parity", "url": "https://github.com/rsksmart/rskj/pull/1284#discussion_r466304983", "createdAt": "2020-08-06T10:02:57Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/main/java/co/rsk/rpc/modules/trace/ProgramSubtrace.java", "diffHunk": "@@ -29,26 +29,28 @@\n     private final TraceType traceType;\n     private final CallType callType;\n     private final CreationData creationData;\n+    private final String creationMethod;\n     private final InvokeData invokeData;\n     private final ProgramResult programResult;\n     private final List<ProgramSubtrace> subtraces;\n \n     public static ProgramSubtrace newSuicideSubtrace(InvokeData invokeData) {\n-        return new ProgramSubtrace(TraceType.SUICIDE, CallType.NONE, null, invokeData, null, Collections.emptyList());\n+        return new ProgramSubtrace(TraceType.SUICIDE, CallType.NONE, null, null, invokeData, null, Collections.emptyList());\n     }\n \n-    public static ProgramSubtrace newCreateSubtrace(CreationData creationData, InvokeData invokeData, ProgramResult programResult, List<ProgramSubtrace> subtraces) {\n-        return new ProgramSubtrace(TraceType.CREATE, CallType.NONE, creationData, invokeData, programResult, subtraces);\n+    public static ProgramSubtrace newCreateSubtrace(CreationData creationData, InvokeData invokeData, ProgramResult programResult, List<ProgramSubtrace> subtraces, boolean isCreate2) {\n+        return new ProgramSubtrace(TraceType.CREATE, CallType.NONE, creationData, isCreate2 ? \"create2\" : null, invokeData, programResult, subtraces);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgyMTMzMg=="}, "originalCommit": {"oid": "7d0b9debd2c70c730f6d95604096c7576cae43ec"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU0MjAyNA==", "bodyText": "Check this Besu doc:\nhttps://besu.hyperledger.org/en/stable/Reference/API-Methods/#trace_transaction\nIn the Example->Json result tab.", "url": "https://github.com/rsksmart/rskj/pull/1284#discussion_r466542024", "createdAt": "2020-08-06T16:39:23Z", "author": {"login": "patogallaiovlabs"}, "path": "rskj-core/src/main/java/co/rsk/rpc/modules/trace/ProgramSubtrace.java", "diffHunk": "@@ -29,26 +29,28 @@\n     private final TraceType traceType;\n     private final CallType callType;\n     private final CreationData creationData;\n+    private final String creationMethod;\n     private final InvokeData invokeData;\n     private final ProgramResult programResult;\n     private final List<ProgramSubtrace> subtraces;\n \n     public static ProgramSubtrace newSuicideSubtrace(InvokeData invokeData) {\n-        return new ProgramSubtrace(TraceType.SUICIDE, CallType.NONE, null, invokeData, null, Collections.emptyList());\n+        return new ProgramSubtrace(TraceType.SUICIDE, CallType.NONE, null, null, invokeData, null, Collections.emptyList());\n     }\n \n-    public static ProgramSubtrace newCreateSubtrace(CreationData creationData, InvokeData invokeData, ProgramResult programResult, List<ProgramSubtrace> subtraces) {\n-        return new ProgramSubtrace(TraceType.CREATE, CallType.NONE, creationData, invokeData, programResult, subtraces);\n+    public static ProgramSubtrace newCreateSubtrace(CreationData creationData, InvokeData invokeData, ProgramResult programResult, List<ProgramSubtrace> subtraces, boolean isCreate2) {\n+        return new ProgramSubtrace(TraceType.CREATE, CallType.NONE, creationData, isCreate2 ? \"create2\" : null, invokeData, programResult, subtraces);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgyMTMzMg=="}, "originalCommit": {"oid": "7d0b9debd2c70c730f6d95604096c7576cae43ec"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTM3NzI0OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/test/java/co/rsk/test/dsl/WorldDslProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNToxODoyMVrOG8OfDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNjoxNzozM1rOG86sLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgwNTA3MA==", "bodyText": "what does this do? are you using this to simulate something related to create2? I don't really follow it.", "url": "https://github.com/rsksmart/rskj/pull/1284#discussion_r465805070", "createdAt": "2020-08-05T15:18:21Z", "author": {"login": "nicops"}, "path": "rskj-core/src/test/java/co/rsk/test/dsl/WorldDslProcessor.java", "diffHunk": "@@ -121,14 +122,35 @@ private void processAccountNewCommand(DslCommand cmd) {\n         String name = cmd.getArgument(0);\n         builder.name(name);\n \n-        if (cmd.getArity() > 1)\n+        if (cmd.getArity() > 1) {\n             builder.balance(new Coin(new BigInteger(cmd.getArgument(1))));\n+        }\n+\n+        if (cmd.getArity() > 2) {\n+            builder.code(Hex.decode(expandAccounts(cmd.getArgument(2))));\n+        }\n \n         Account account = builder.build();\n \n         world.saveAccount(name, account);\n     }\n \n+    private String expandAccounts(String bytecodes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d0b9debd2c70c730f6d95604096c7576cae43ec"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUyOTMyNg==", "bodyText": "It's related with delegatecall01.txt test file:\naccount_new acc1 10000000\n\n# contract account with simple return\n\n# code\n# PUSH1 0x00\n# PUSH1 0x00\n# RETURN\n\naccount_new delegated 0 60006000f3\n\n# contract account with delegate call\n\n# code\n# PUSH1 0x00    (output data size)\n# PUSH1 0x00    (output data offset)\n# PUSH1 0x00    (input data size)\n# PUSH1 0x00    (input data offset)\n# PUSH20 <delegated contract address>\n# PUSH2 0x1000   (gas to use)\n# DELEGATECALL\n# STOP\n\naccount_new delegatecall 0 600060006000600073[delegated]611000f400\n\nit replace [delegated] by the address of that account. We needed that address in the code to invoke the call to that address. The bytecode `73  push the next 20 bytes into the stack.\nThere is also a test code WorldDslProcessorTest.processAccountNewCommandWithBalanceAndCodeWithOtherAccountAddress", "url": "https://github.com/rsksmart/rskj/pull/1284#discussion_r466529326", "createdAt": "2020-08-06T16:17:33Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/test/java/co/rsk/test/dsl/WorldDslProcessor.java", "diffHunk": "@@ -121,14 +122,35 @@ private void processAccountNewCommand(DslCommand cmd) {\n         String name = cmd.getArgument(0);\n         builder.name(name);\n \n-        if (cmd.getArity() > 1)\n+        if (cmd.getArity() > 1) {\n             builder.balance(new Coin(new BigInteger(cmd.getArgument(1))));\n+        }\n+\n+        if (cmd.getArity() > 2) {\n+            builder.code(Hex.decode(expandAccounts(cmd.getArgument(2))));\n+        }\n \n         Account account = builder.build();\n \n         world.saveAccount(name, account);\n     }\n \n+    private String expandAccounts(String bytecodes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgwNTA3MA=="}, "originalCommit": {"oid": "7d0b9debd2c70c730f6d95604096c7576cae43ec"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NjY2NjI0OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/rpc/modules/trace/TraceTransformer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMzowODozNVrOHDGj8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDowOTozNFrOHDJMyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAxNTI4MA==", "bodyText": "Here you don't check codeAddress for null when calling codeAddress.getLast20Bytes(). But there are some places where null is being passed for the codeAddress argument, like here, so looks like this param is nullable.\nI understand that it could be the case (btw.. is it ? ) that according to the logic codeAddress should never be null when callType == CallType.DELEGATECALL, but I guess it should be explicitly specified here in the code and properly handled if for some odd reason codeAddress is null when callType == CallType.DELEGATECALL", "url": "https://github.com/rsksmart/rskj/pull/1284#discussion_r473015280", "createdAt": "2020-08-19T13:08:35Z", "author": {"login": "Vovchyk"}, "path": "rskj-core/src/main/java/co/rsk/rpc/modules/trace/TraceTransformer.java", "diffHunk": "@@ -168,7 +176,14 @@ public static TraceAction toAction(TraceType traceType, InvokeData invoke, CallT\n         if (traceType == TraceType.CALL) {\n             input = TypeConverter.toUnformattedJsonHex(invoke.getDataCopy(DataWord.ZERO, invoke.getDataSize()));;\n             value = TypeConverter.toQuantityJsonHex(callValue.getData());\n-            to = new RskAddress(invoke.getOwnerAddress().getLast20Bytes()).toJsonString();\n+\n+            if (callType == CallType.DELEGATECALL) {\n+                to = new RskAddress(codeAddress.getLast20Bytes()).toJsonString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97028d43f300862a55751a3b6aab3b2e29391ff4"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA1ODUwNQ==", "bodyText": "Done", "url": "https://github.com/rsksmart/rskj/pull/1284#discussion_r473058505", "createdAt": "2020-08-19T14:09:34Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/main/java/co/rsk/rpc/modules/trace/TraceTransformer.java", "diffHunk": "@@ -168,7 +176,14 @@ public static TraceAction toAction(TraceType traceType, InvokeData invoke, CallT\n         if (traceType == TraceType.CALL) {\n             input = TypeConverter.toUnformattedJsonHex(invoke.getDataCopy(DataWord.ZERO, invoke.getDataSize()));;\n             value = TypeConverter.toQuantityJsonHex(callValue.getData());\n-            to = new RskAddress(invoke.getOwnerAddress().getLast20Bytes()).toJsonString();\n+\n+            if (callType == CallType.DELEGATECALL) {\n+                to = new RskAddress(codeAddress.getLast20Bytes()).toJsonString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAxNTI4MA=="}, "originalCommit": {"oid": "97028d43f300862a55751a3b6aab3b2e29391ff4"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4450, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}