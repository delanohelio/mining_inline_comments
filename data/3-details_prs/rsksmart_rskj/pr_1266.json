{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1MDYzODc1", "number": 1266, "title": "Resend transactions fix and refactor", "bodyText": "Resend Transactions\nGoals\n\nreBroadcast transactions\nRemove TransactionNodeInfo which was storing a lot of transactions (increasing memory use)\n\nContext\nThere are some cases where you want to resend transactions to activePeers for example when, they have expired, or mining nodes have been restarted, or if there were a bug where tx were lost like the previous bug.\nWhen @nicops  fixed this issue, he discover that it wasn't posible to rebroadcast transactions to activePeers because TransactionNodeInformation was blocking it. Then we decided to remove that class because that blocking was no longer needed.\nThis is the actual flow (before this PR) when a transaction arrives to the node:\n\nRPC flows:\n-\u00a0PersonalModuleWalletEnabled.sendTransaction -> EthereumImpl.submitTransaction -> TransactionPoolImpl.addTransaction\n\u00a0- Web3EthModule.eth_sendRawTransaction -> EthModuleTransactionBase.sendRawTransaction -> TransactionPoolImpl.addTransaction\n\u00a0- Web3EthModule.eth_sendTransaction -> EthModuleTransactionBase.sendTransaction -> TransactionPoolImpl.addTransaction\nPeer node flow:\n\nMessageVisitor.apply(TransactionsMessage) -> TransactionGateway.receiveTransactionsFrom -> TransactionPool.addTransactions -> TransactionPool.addTransaction\n\n\n\nImplemented\n\nRemoved TransactionNodeInfo class (and tests)\nRefactored TransactionGateway class\n\nreceiveTransactionsFrom now broadcasts transactions after adding them to TransactionPool\nRemoved a nonsense listener: OnPendingTransactionsReceivedListener\n\n\nIncoming transactions should only be added to TxPool via TxGateway: replaced where we used to call transactionPool.addTransaction with transactionGateway.receiveTransaction/sFrom (because invoking addTransaction was also producing a onPendingTransactionsReceived & onTransactionPoolChanged event )\nRemoved @Ignore annotation from ChanelManagerImplTests\n\nNote: onPendingTransactionsReceived was being consumed from TransactionGateway which then used to call channelManager.broadcastTransaction. Apart from this there is another consumer from this event which is not related with this PR.", "createdAt": "2020-07-07T00:13:31Z", "url": "https://github.com/rsksmart/rskj/pull/1266", "merged": true, "mergeCommit": {"oid": "a8b00e797c05b47c243ff16fc6acf8829799422a"}, "closed": true, "closedAt": "2020-08-13T13:43:20Z", "author": {"login": "fedejinich"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcyafHkgBqjM1MTgwNzgwNDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-gPRnAFqTQ2Njc3MzYwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eea5dfc480a92134698bbcb30a77f80b4349861c", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/eea5dfc480a92134698bbcb30a77f80b4349861c", "committedDate": "2020-07-06T02:00:02Z", "message": "transactions should only be added to txPool via txGateway"}, "afterCommit": {"oid": "68e21541e332adc5b53a51bbf1f0040b244f54b7", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/68e21541e332adc5b53a51bbf1f0040b244f54b7", "committedDate": "2020-07-07T00:04:43Z", "message": "transactions should only be added to txPool via txGateway"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MDg4NDEx", "url": "https://github.com/rsksmart/rskj/pull/1266#pullrequestreview-444088411", "createdAt": "2020-07-07T17:06:01Z", "commit": {"oid": "56d11ba2e971752d5b43d46e594338f7f06df35a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzowNjowMVrOGuHyUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzoyNjoxN1rOGuIgdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAxNTI0OQ==", "bodyText": "why the suffix \"From\"?", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r451015249", "createdAt": "2020-07-07T17:06:01Z", "author": {"login": "patogallaiovlabs"}, "path": "rskj-core/src/main/java/co/rsk/net/TransactionGateway.java", "diffHunk": "@@ -18,66 +18,41 @@\n \n package co.rsk.net;\n \n-import co.rsk.config.InternalService;\n-import co.rsk.crypto.Keccak256;\n import org.ethereum.core.Transaction;\n import org.ethereum.core.TransactionPool;\n-import org.ethereum.listener.CompositeEthereumListener;\n-import org.ethereum.listener.EthereumListenerAdapter;\n+import org.ethereum.core.TransactionPoolAddResult;\n import org.ethereum.net.server.ChannelManager;\n \n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Objects;\n-import java.util.Set;\n+import javax.annotation.Nonnull;\n+import java.util.*;\n \n /**\n  * Centralizes receiving and relaying transactions, so we can only distribute information to nodes that don't already\n  * have it.\n  */\n-public class TransactionGateway implements InternalService {\n+public class TransactionGateway {\n     private final ChannelManager channelManager;\n-    private final CompositeEthereumListener emitter;\n     private final TransactionPool transactionPool;\n \n-    private final TransactionNodeInformation transactionNodeInformation = new TransactionNodeInformation();\n-    private final OnPendingTransactionsReceivedListener listener = new OnPendingTransactionsReceivedListener();\n-\n     public TransactionGateway(\n             ChannelManager channelManager,\n-            TransactionPool transactionPool,\n-            CompositeEthereumListener emitter) {\n+            TransactionPool transactionPool) {\n         this.channelManager = Objects.requireNonNull(channelManager);\n         this.transactionPool = Objects.requireNonNull(transactionPool);\n-        this.emitter = Objects.requireNonNull(emitter);\n-    }\n-\n-    @Override\n-    public void start() {\n-        emitter.addListener(listener);\n-    }\n-\n-    @Override\n-    public void stop() {\n-        emitter.removeListener(listener);\n     }\n \n-    public void receiveTransactionsFrom(List<Transaction> txs, NodeID nodeID) {\n-        txs.forEach(tx -> transactionNodeInformation.addTransactionToNode(tx.getHash(), nodeID));\n-        transactionPool.addTransactions(txs);\n+    public void receiveTransactionsFrom(@Nonnull List<Transaction> txs, @Nonnull Set<NodeID> nodeIDS) {\n+        List<Transaction> result  = transactionPool.addTransactions(txs);\n+        if(!result.isEmpty()) {\n+            channelManager.broadcastTransactions(result, nodeIDS);\n+        }\n     }\n \n-    private class OnPendingTransactionsReceivedListener extends EthereumListenerAdapter {\n-        @Override\n-        public void onPendingTransactionsReceived(List<Transaction> txs) {\n-            for (Transaction tx : txs) {\n-                Keccak256 txHash = tx.getHash();\n-                Set<NodeID> nodesToSkip = new HashSet<>(transactionNodeInformation.getNodesByTransaction(txHash));\n-                Set<NodeID> newNodes = channelManager.broadcastTransaction(tx, nodesToSkip);\n-\n-                newNodes.forEach(nodeID -> transactionNodeInformation.addTransactionToNode(txHash, nodeID));\n-            }\n+    public TransactionPoolAddResult receiveTransactionFrom(Transaction transaction) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56d11ba2e971752d5b43d46e594338f7f06df35a"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAxOTU0NA==", "bodyText": "This could cause a NPE in the check \"if(!result.getTransactionsAdded().isEmpty()) {\" L53 TransactionGateway.", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r451019544", "createdAt": "2020-07-07T17:13:33Z", "author": {"login": "patogallaiovlabs"}, "path": "rskj-core/src/main/java/org/ethereum/core/TransactionPoolAddResult.java", "diffHunk": "@@ -42,11 +48,15 @@ public void ifTransactionWasNotAdded(Consumer<String> errorConsumer) {\n         }\n     }\n \n-    public static TransactionPoolAddResult ok() {\n-        return new TransactionPoolAddResult(true, null);\n+    public static TransactionPoolAddResult ok(Transaction transaction) {\n+        return new TransactionPoolAddResult(true, null, Collections.singletonList(transaction));\n     }\n \n     public static TransactionPoolAddResult withError(String errorMessage) {\n-        return new TransactionPoolAddResult(false, errorMessage);\n+        return new TransactionPoolAddResult(false, errorMessage, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56d11ba2e971752d5b43d46e594338f7f06df35a"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAyNzA2MA==", "bodyText": "Be careful with the use of NodeID... most of the impl returns a copy of those. So, i wonder if it is actually cheaper to return the Node instead of NodeID.", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r451027060", "createdAt": "2020-07-07T17:26:17Z", "author": {"login": "patogallaiovlabs"}, "path": "rskj-core/src/main/java/org/ethereum/net/server/ChannelManager.java", "diffHunk": "@@ -78,4 +78,6 @@\n     Collection<Peer> getActivePeers();\n \n     boolean isAddressBlockAvailable(InetAddress address);\n+\n+    Set<NodeID> broadcastTransactions(@Nonnull List<Transaction> transactions, @Nonnull Set<NodeID> nodeID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56d11ba2e971752d5b43d46e594338f7f06df35a"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "56d11ba2e971752d5b43d46e594338f7f06df35a", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/56d11ba2e971752d5b43d46e594338f7f06df35a", "committedDate": "2020-07-07T00:16:08Z", "message": "removed comments"}, "afterCommit": {"oid": "30a132272a7d799d0b5bd2e8d6feebcbcd9e1877", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/30a132272a7d799d0b5bd2e8d6feebcbcd9e1877", "committedDate": "2020-07-07T18:10:01Z", "message": "removed comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3MjI2ODI0", "url": "https://github.com/rsksmart/rskj/pull/1266#pullrequestreview-447226824", "createdAt": "2020-07-13T13:00:15Z", "commit": {"oid": "1928f10455b35973222a8ad1ecfcb397312fb9d3"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9dfe8700be7b8d88e73175efc55c15e7d6e1ef3d", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/9dfe8700be7b8d88e73175efc55c15e7d6e1ef3d", "committedDate": "2020-07-13T19:21:33Z", "message": "repalced visibleForTesting constructor with setActivePeers at ChannelManager"}, "afterCommit": {"oid": "a72bb395745ad7be2c544234cb2dc933312ea9a2", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/a72bb395745ad7be2c544234cb2dc933312ea9a2", "committedDate": "2020-07-13T19:49:01Z", "message": "transactions should only be added to TxPool from outside world via TxGateway"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "923fd248b5d5b8a1166f74b3a12049235120a394", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/923fd248b5d5b8a1166f74b3a12049235120a394", "committedDate": "2020-08-03T17:53:49Z", "message": "removing TransactionNodeInformation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16af7e4fd7227ab61772705bb22a253a6baa1062", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/16af7e4fd7227ab61772705bb22a253a6baa1062", "committedDate": "2020-08-03T17:58:17Z", "message": "transactions should only be added to TxPool from outside world via TxGateway"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce563769d0208ef2f1c89d64b70e2f232ddd553f", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/ce563769d0208ef2f1c89d64b70e2f232ddd553f", "committedDate": "2020-08-03T17:58:18Z", "message": "TransactionGateway only broadcasts pending transactions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a72bb395745ad7be2c544234cb2dc933312ea9a2", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/a72bb395745ad7be2c544234cb2dc933312ea9a2", "committedDate": "2020-07-13T19:49:01Z", "message": "transactions should only be added to TxPool from outside world via TxGateway"}, "afterCommit": {"oid": "68d88d1f76fd54bede542769f6acc64f0f8dc728", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/68d88d1f76fd54bede542769f6acc64f0f8dc728", "committedDate": "2020-08-03T19:14:27Z", "message": "prevent transaction messages from beeing added to receivedMessage cache: allow resendTransactions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "68d88d1f76fd54bede542769f6acc64f0f8dc728", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/68d88d1f76fd54bede542769f6acc64f0f8dc728", "committedDate": "2020-08-03T19:14:27Z", "message": "prevent transaction messages from beeing added to receivedMessage cache: allow resendTransactions"}, "afterCommit": {"oid": "83de8af9e081bbe8ad4b08db629a2662ed261af1", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/83de8af9e081bbe8ad4b08db629a2662ed261af1", "committedDate": "2020-08-04T15:00:31Z", "message": "prevent transaction messages from beeing added to receivedMessage cache: allow resendTransactions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMTE1MDg3", "url": "https://github.com/rsksmart/rskj/pull/1266#pullrequestreview-461115087", "createdAt": "2020-08-04T19:35:42Z", "commit": {"oid": "83de8af9e081bbe8ad4b08db629a2662ed261af1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTozNTo0MlrOG7ut1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTozNTo0MlrOG7ut1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4NDU2NA==", "bodyText": "You should remove this if, it is confusing, you already asserted it was false the line above", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r465284564", "createdAt": "2020-08-04T19:35:42Z", "author": {"login": "nicops"}, "path": "rskj-core/src/test/java/co/rsk/core/bc/TransactionPoolImplTest.java", "diffHunk": "@@ -512,8 +514,10 @@ public void addTwiceAndGetQueuedTransaction() {\n         transactionPool.addTransaction(tx);\n \n         TransactionPoolAddResult result = transactionPool.addTransaction(tx);\n-        Assert.assertFalse(result.transactionWasAdded());\n-        result.ifTransactionWasNotAdded(msg -> Assert.assertEquals(\"queued transaction with same hash already exists\", msg));\n+        Assert.assertFalse(result.transactionsWereAdded());\n+        if(!result.transactionsWereAdded()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83de8af9e081bbe8ad4b08db629a2662ed261af1"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMTE1MTgw", "url": "https://github.com/rsksmart/rskj/pull/1266#pullrequestreview-461115180", "createdAt": "2020-08-04T19:35:49Z", "commit": {"oid": "83de8af9e081bbe8ad4b08db629a2662ed261af1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTozNTo0OVrOG7uuHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTozNTo0OVrOG7uuHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4NDYzOA==", "bodyText": "ditto", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r465284638", "createdAt": "2020-08-04T19:35:49Z", "author": {"login": "nicops"}, "path": "rskj-core/src/test/java/co/rsk/core/bc/TransactionPoolImplTest.java", "diffHunk": "@@ -557,8 +561,10 @@ public void checkTxWithSameNonceIsRejected() {\n \n         TransactionPoolAddResult result = transactionPool.addTransaction(tx2);\n \n-        Assert.assertFalse(result.transactionWasAdded());\n-        result.ifTransactionWasNotAdded(msg -> Assert.assertEquals(\"gas price not enough to bump transaction\", msg));\n+        Assert.assertFalse(result.transactionsWereAdded());\n+        if(!result.transactionsWereAdded()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83de8af9e081bbe8ad4b08db629a2662ed261af1"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMTE1MzAx", "url": "https://github.com/rsksmart/rskj/pull/1266#pullrequestreview-461115301", "createdAt": "2020-08-04T19:36:02Z", "commit": {"oid": "83de8af9e081bbe8ad4b08db629a2662ed261af1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTozNjowMlrOG7uukA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTozNjowMlrOG7uukA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4NDc1Mg==", "bodyText": "ditto", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r465284752", "createdAt": "2020-08-04T19:36:02Z", "author": {"login": "nicops"}, "path": "rskj-core/src/test/java/co/rsk/core/bc/TransactionPoolImplTest.java", "diffHunk": "@@ -583,8 +589,10 @@ public void checkTxWithHighGasLimitIsRejected() {\n \n         TransactionPoolAddResult result = transactionPool.addTransaction(tx);\n \n-        Assert.assertFalse(result.transactionWasAdded());\n-        result.ifTransactionWasNotAdded(msg -> Assert.assertEquals(\"transaction's gas limit of 3000001 is higher than the block's gas limit of 3000000\", msg));\n+        Assert.assertFalse(result.transactionsWereAdded());\n+        if(!result.transactionsWereAdded()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83de8af9e081bbe8ad4b08db629a2662ed261af1"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMTE3MDcw", "url": "https://github.com/rsksmart/rskj/pull/1266#pullrequestreview-461117070", "createdAt": "2020-08-04T19:38:47Z", "commit": {"oid": "83de8af9e081bbe8ad4b08db629a2662ed261af1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTozODo0N1rOG7uz-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTozODo0N1rOG7uz-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4NjEzNg==", "bodyText": "I would make more assertions here about the return value of each addTransaction. Check that the first one returns ok queued with tx2,  the latter one should add ok pending with the list of the two tx in the right order (first tx1, then tx2).", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r465286136", "createdAt": "2020-08-04T19:38:47Z", "author": {"login": "nicops"}, "path": "rskj-core/src/test/java/co/rsk/core/bc/TransactionPoolImplTest.java", "diffHunk": "@@ -802,8 +825,8 @@ public void addTwoTransactionsOutOfOrderInNonceUsingAddTransaction() {\n         Transaction tx1 = createSampleTransactionWithGasPrice(1, 0, 1000, 0, 1);\n         Transaction tx2 = createSampleTransactionWithGasPrice(1, 0, 2000, 1, 2);\n \n-        Assert.assertTrue(transactionPool.addTransaction(tx2).transactionWasAdded());\n-        Assert.assertTrue(transactionPool.addTransaction(tx1).transactionWasAdded());\n+        Assert.assertTrue(transactionPool.addTransaction(tx2).transactionsWereAdded());\n+        Assert.assertTrue(transactionPool.addTransaction(tx1).transactionsWereAdded());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83de8af9e081bbe8ad4b08db629a2662ed261af1"}, "originalPosition": 195}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMTU4MTI4", "url": "https://github.com/rsksmart/rskj/pull/1266#pullrequestreview-461158128", "createdAt": "2020-08-04T20:42:17Z", "commit": {"oid": "83de8af9e081bbe8ad4b08db629a2662ed261af1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMDo0MjoxN1rOG7wwzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMDo0MjoxN1rOG7wwzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMxODA5NQ==", "bodyText": "I don't think this is correct. This method derives the account nonce based on the line right below this one. To do that consistently it needs to synchronized over the transactionPool because it is accessing it as you can see in the line right below this one.", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r465318095", "createdAt": "2020-08-04T20:42:17Z", "author": {"login": "nicops"}, "path": "rskj-core/src/main/java/co/rsk/rpc/modules/eth/EthModuleTransactionBase.java", "diffHunk": "@@ -64,12 +67,15 @@ public synchronized String sendTransaction(Web3.CallArguments args) {\n                 args.data = args.data.substring(2);\n             }\n \n-            synchronized (transactionPool) {\n+            synchronized (transactionGateway) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83de8af9e081bbe8ad4b08db629a2662ed261af1"}, "originalPosition": 28}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1837ccad6651dc1ad0498dc85b5990e9f1c66c16", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/1837ccad6651dc1ad0498dc85b5990e9f1c66c16", "committedDate": "2020-08-04T22:28:00Z", "message": "addTransaction retrieves pending transaction with pendingSuccessors and more detailed test cases"}, "afterCommit": {"oid": "f6216e6df378c957096921d8450c505c0ef4819c", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/f6216e6df378c957096921d8450c505c0ef4819c", "committedDate": "2020-08-04T22:47:46Z", "message": "addTransaction retrieves pending transaction with pendingSuccessors and more detailed test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a615c435adfce21b68a9fa05f881b9b196fbc9b8", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/a615c435adfce21b68a9fa05f881b9b196fbc9b8", "committedDate": "2020-08-05T04:44:38Z", "message": "prevent transaction messages from beeing added to NodeMessageHandler.receivedMessage cache"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f6216e6df378c957096921d8450c505c0ef4819c", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/f6216e6df378c957096921d8450c505c0ef4819c", "committedDate": "2020-08-04T22:47:46Z", "message": "addTransaction retrieves pending transaction with pendingSuccessors and more detailed test cases"}, "afterCommit": {"oid": "12839722581405c1d3446298a32e880c172b0481", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/12839722581405c1d3446298a32e880c172b0481", "committedDate": "2020-08-05T04:57:01Z", "message": "bug fixes at TxPool and EthModuleTransactionBase and more detailed test cases for TxPool"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMzU5MTA3", "url": "https://github.com/rsksmart/rskj/pull/1266#pullrequestreview-462359107", "createdAt": "2020-08-06T09:30:58Z", "commit": {"oid": "12839722581405c1d3446298a32e880c172b0481"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwOTozMDo1OFrOG8rjlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwOTo1MDozMVrOG8slkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI4MTM2Ng==", "bodyText": "Minor comment: this is not a list \"to be added\". This list has the transaction actually ADDED during the execution of this method", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r466281366", "createdAt": "2020-08-06T09:30:58Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/main/java/co/rsk/core/bc/TransactionPoolImpl.java", "diffHunk": "@@ -159,23 +159,23 @@ private RepositorySnapshot getCurrentRepository() {\n     }\n \n     private List<Transaction> addSuccessors(Transaction tx) {\n-        List<Transaction> added = new ArrayList<>();\n+        List<Transaction> pendingTransactionsToBeAdded = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12839722581405c1d3446298a32e880c172b0481"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5MTA0OA==", "bodyText": "Could you elaborate this decision?\nIf the transaction be replaced by other (ie chaging the gas price), then it is a different transaction\nIf is the SAME transaction send from other node that relay the SAME transaction AFTER its expiration (in that node), we cannot be sure if the node that receives the message with the already processed transaction, will accept it (because expiration time could be different)\nI prefer to remove this receivedMessage variable and logic. But now, this logic helps a lot to discard incoming message that came many times (ie, now it's easy to see the transaction message come from many peers, even before the first transaction message could be processed)", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r466291048", "createdAt": "2020-08-06T09:39:15Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/main/java/co/rsk/net/NodeMessageHandler.java", "diffHunk": "@@ -118,7 +119,7 @@ public void postMessage(Peer sender, Message message) {\n     private void tryAddMessage(Peer sender, Message message) {\n         Keccak256 encodedMessage = new Keccak256(HashUtil.keccak256(message.getEncoded()));\n         if (!receivedMessages.contains(encodedMessage)) {\n-            if (message.getMessageType() == MessageType.BLOCK_MESSAGE || message.getMessageType() == MessageType.TRANSACTIONS) {\n+            if (message.getMessageType() == MessageType.BLOCK_MESSAGE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12839722581405c1d3446298a32e880c172b0481"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5Mzg4MA==", "bodyText": "Really nice! It makes non-sense to have this logic as internal service", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r466293880", "createdAt": "2020-08-06T09:42:32Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/main/java/co/rsk/net/TransactionGateway.java", "diffHunk": "@@ -18,66 +18,41 @@\n \n package co.rsk.net;\n \n-import co.rsk.config.InternalService;\n-import co.rsk.crypto.Keccak256;\n import org.ethereum.core.Transaction;\n import org.ethereum.core.TransactionPool;\n-import org.ethereum.listener.CompositeEthereumListener;\n-import org.ethereum.listener.EthereumListenerAdapter;\n+import org.ethereum.core.TransactionPoolAddResult;\n import org.ethereum.net.server.ChannelManager;\n \n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Objects;\n-import java.util.Set;\n+import javax.annotation.Nonnull;\n+import java.util.*;\n \n /**\n  * Centralizes receiving and relaying transactions, so we can only distribute information to nodes that don't already\n  * have it.\n  */\n-public class TransactionGateway implements InternalService {\n+public class TransactionGateway {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12839722581405c1d3446298a32e880c172b0481"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5NDUxOQ==", "bodyText": "Nice! The listener logic obscure the intention of this object logic and purpose.", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r466294519", "createdAt": "2020-08-06T09:43:43Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/main/java/co/rsk/net/TransactionGateway.java", "diffHunk": "@@ -18,66 +18,41 @@\n \n package co.rsk.net;\n \n-import co.rsk.config.InternalService;\n-import co.rsk.crypto.Keccak256;\n import org.ethereum.core.Transaction;\n import org.ethereum.core.TransactionPool;\n-import org.ethereum.listener.CompositeEthereumListener;\n-import org.ethereum.listener.EthereumListenerAdapter;\n+import org.ethereum.core.TransactionPoolAddResult;\n import org.ethereum.net.server.ChannelManager;\n \n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Objects;\n-import java.util.Set;\n+import javax.annotation.Nonnull;\n+import java.util.*;\n \n /**\n  * Centralizes receiving and relaying transactions, so we can only distribute information to nodes that don't already\n  * have it.\n  */\n-public class TransactionGateway implements InternalService {\n+public class TransactionGateway {\n     private final ChannelManager channelManager;\n-    private final CompositeEthereumListener emitter;\n     private final TransactionPool transactionPool;\n \n-    private final TransactionNodeInformation transactionNodeInformation = new TransactionNodeInformation();\n-    private final OnPendingTransactionsReceivedListener listener = new OnPendingTransactionsReceivedListener();\n-\n     public TransactionGateway(\n             ChannelManager channelManager,\n-            TransactionPool transactionPool,\n-            CompositeEthereumListener emitter) {\n+            TransactionPool transactionPool) {\n         this.channelManager = Objects.requireNonNull(channelManager);\n         this.transactionPool = Objects.requireNonNull(transactionPool);\n-        this.emitter = Objects.requireNonNull(emitter);\n-    }\n-\n-    @Override\n-    public void start() {\n-        emitter.addListener(listener);\n-    }\n-\n-    @Override\n-    public void stop() {\n-        emitter.removeListener(listener);\n     }\n \n-    public void receiveTransactionsFrom(List<Transaction> txs, NodeID nodeID) {\n-        txs.forEach(tx -> transactionNodeInformation.addTransactionToNode(tx.getHash(), nodeID));\n-        transactionPool.addTransactions(txs);\n+    public void receiveTransactionsFrom(@Nonnull List<Transaction> txs, @Nonnull Set<NodeID> nodeIDS) {\n+        List<Transaction> result  = transactionPool.addTransactions(txs);\n+        if(!result.isEmpty()) {\n+            channelManager.broadcastTransactions(result, nodeIDS);\n+        }\n     }\n \n-    private class OnPendingTransactionsReceivedListener extends EthereumListenerAdapter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12839722581405c1d3446298a32e880c172b0481"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5NTQ5Mg==", "bodyText": "Great! Having in memory data to control which transaction was sent to which node, is something that can be easily removed. Everything we keep in memory could generate a friction with other states (in this pull request, with TransactionPoolImpl logic)", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r466295492", "createdAt": "2020-08-06T09:45:25Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/main/java/co/rsk/net/TransactionNodeInformation.java", "diffHunk": "@@ -1,86 +0,0 @@\n-/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12839722581405c1d3446298a32e880c172b0481"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5NjQyMg==", "bodyText": "It's good to have this helper here, using its logic", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r466296422", "createdAt": "2020-08-06T09:47:07Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/main/java/co/rsk/rpc/modules/eth/EthModuleTransactionInstant.java", "diffHunk": "@@ -43,8 +44,9 @@ public EthModuleTransactionInstant(\n             TransactionPool transactionPool,\n             MinerServer minerServer,\n             MinerClient minerClient,\n-            Blockchain blockchain) {\n-        super(constants, wallet, transactionPool);\n+            Blockchain blockchain,\n+            TransactionGateway transactionGateway) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12839722581405c1d3446298a32e880c172b0481"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5ODI1Ng==", "bodyText": "Good to see using the message with MANY transactions", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r466298256", "createdAt": "2020-08-06T09:50:31Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/main/java/org/ethereum/net/server/ChannelManagerImpl.java", "diffHunk": "@@ -321,4 +297,52 @@ public boolean isAddressBlockAvailable(InetAddress inetAddress) {\n         }\n     }\n \n+    /**\n+     * broadcastTransaction Propagates a transaction message across active peers with exclusion of\n+     * the peers with an id belonging to the skip set.\n+     *\n+     * @param transaction new Transaction to be sent\n+     * @param skip        the set of peers to avoid sending the message.\n+     * @return a set containing the ids of the peers that received the transaction.\n+     */\n+    @Nonnull\n+    public Set<NodeID> broadcastTransaction(@Nonnull final Transaction transaction, @Nonnull final Set<NodeID> skip) {\n+        List<Transaction> transactions = Collections.singletonList(transaction);\n+\n+        return internalBroadcastTransactions(skip, transactions);\n+    }\n+\n+    /**\n+     * broadcastTransaction Propagates a transaction message across active peers with exclusion of\n+     * the peers with an id belonging to the skip set.\n+     *\n+     * @param transactions List of Transactions to be sent\n+     * @param skip        the set of peers to avoid sending the message.\n+     * @return a set containing the ids of the peers that received the transaction.\n+     */\n+    @Override\n+    public Set<NodeID> broadcastTransactions(@Nonnull final List<Transaction> transactions, @Nonnull final Set<NodeID> skip) {\n+        return internalBroadcastTransactions(skip, transactions);\n+    }\n+\n+    private Set<NodeID> internalBroadcastTransactions(Set<NodeID> skip, List<Transaction> transactions) {\n+        final Set<NodeID> nodesIdsBroadcastedTo = new HashSet<>();\n+        final Message newTransactions = new TransactionsMessage(transactions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12839722581405c1d3446298a32e880c172b0481"}, "originalPosition": 136}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd15017245dad912d1c58281d395f459af9bed0d", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/bd15017245dad912d1c58281d395f459af9bed0d", "committedDate": "2020-08-06T22:18:42Z", "message": "bug fixes at TxPool and EthModuleTransactionBase and more detailed test cases for TxPool"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "12839722581405c1d3446298a32e880c172b0481", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/12839722581405c1d3446298a32e880c172b0481", "committedDate": "2020-08-05T04:57:01Z", "message": "bug fixes at TxPool and EthModuleTransactionBase and more detailed test cases for TxPool"}, "afterCommit": {"oid": "bd15017245dad912d1c58281d395f459af9bed0d", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/bd15017245dad912d1c58281d395f459af9bed0d", "committedDate": "2020-08-06T22:18:42Z", "message": "bug fixes at TxPool and EthModuleTransactionBase and more detailed test cases for TxPool"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "975e3959e1f665cc4d761a5cfa4133b4970ca95c", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/975e3959e1f665cc4d761a5cfa4133b4970ca95c", "committedDate": "2020-08-10T04:35:17Z", "message": "revert, receivedMessages cache now adds Message.Transaction"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "82c8f004743a3353236851fef68a718f8a44dece", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/82c8f004743a3353236851fef68a718f8a44dece", "committedDate": "2020-08-07T20:18:54Z", "message": "revert, receivedMessages cache now adds Message.Transaction"}, "afterCommit": {"oid": "975e3959e1f665cc4d761a5cfa4133b4970ca95c", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/975e3959e1f665cc4d761a5cfa4133b4970ca95c", "committedDate": "2020-08-10T04:35:17Z", "message": "revert, receivedMessages cache now adds Message.Transaction"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1MDk4OTEw", "url": "https://github.com/rsksmart/rskj/pull/1266#pullrequestreview-465098910", "createdAt": "2020-08-11T14:05:31Z", "commit": {"oid": "975e3959e1f665cc4d761a5cfa4133b4970ca95c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNDowNTozMlrOG-5bBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNDowNTozMlrOG-5bBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYwNTcwMg==", "bodyText": "Messages should be offered only on non negative scores", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r468605702", "createdAt": "2020-08-11T14:05:32Z", "author": {"login": "donequis"}, "path": "rskj-core/src/main/java/co/rsk/net/NodeMessageHandler.java", "diffHunk": "@@ -127,7 +126,8 @@ private void tryAddMessage(Peer sender, Message message) {\n \n             double score = sender.score(System.currentTimeMillis(), message.getMessageType());\n \n-            if (score >= 0 && !this.queue.offer(new MessageTask(sender, message, score))) {\n+            boolean notAdded = !this.queue.offer(new MessageTask(sender, message, score));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "975e3959e1f665cc4d761a5cfa4133b4970ca95c"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85f3c674da3424eee5a8bd4350f0781df19e9e19", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/85f3c674da3424eee5a8bd4350f0781df19e9e19", "committedDate": "2020-08-11T17:52:38Z", "message": "extracted addMessage method at NodeMessageHandler"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2NzczNjAx", "url": "https://github.com/rsksmart/rskj/pull/1266#pullrequestreview-466773601", "createdAt": "2020-08-13T13:43:02Z", "commit": {"oid": "85f3c674da3424eee5a8bd4350f0781df19e9e19"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 477, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}