{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MzM1MTY3", "number": 1184, "title": "Light client capabilities", "bodyText": "In the current PR, the following features were added:\n\n\nLight Client as a capability\n\n\nLightClientMessageCode and LightClientMessageFactory: When a message arrives at the node, the MessageCodec class catches it and then creates a light client message.\n\n\nChannel: This class accepts Light Client as a capability. In this class, the handshake at an RLPx level starts. Once the handshake is finished, a second handshake starts for each protocol (In the Light client protocol, a status message is sent).\n\n\nLight Client peer: Represents the channel between our node and a light client peer, it wraps the Channel class.\n\n\nLightClientMessageHandler: It starts in the Channel class and waits for a new message (performed in the netty ChannelRead0 method). Then, using a visitor pattern design, the new message is settled as a light client message and finally is sent to some processor.\n\n\nLightProcessor and SyncProcessor: They process the messages. The first one will be used for messages On-Demand Request (ODR) related. At the moment, the processing for ODR messages hasn't been implemented yet. The second one processes messages that were involved in the sync (e.g. status message, getBlockHeader, blockHeader).\n\n\nFinally each light client message.", "createdAt": "2020-03-05T15:16:09Z", "url": "https://github.com/rsksmart/rskj/pull/1184", "merged": true, "mergeCommit": {"oid": "66f7fc9d4c803dd000c06b4792dafdff5c3bd92a"}, "closed": true, "closedAt": "2020-06-01T15:00:34Z", "author": {"login": "julianlen"}, "timelineItems": {"totalCount": 72, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKtMAZABqjMxMDE2Njk2MDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcnBN4qABqjMzOTM0MDM5NDc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "77f2b5d7656e8830b55771ce960dff85d0c6e597", "author": {"user": {"login": "smcsicardi", "name": "Sebastian Sicardi"}}, "url": "https://github.com/rsksmart/rskj/commit/77f2b5d7656e8830b55771ce960dff85d0c6e597", "committedDate": "2020-03-05T14:16:53Z", "message": "Merge pull request #1183 from rsksmart/ligh-client-cap-handshake\n\nLight client capability handshake"}, "afterCommit": {"oid": "bd2278383b2685427ec1bbb74dd5d14a2994ec27", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/bd2278383b2685427ec1bbb74dd5d14a2994ec27", "committedDate": "2020-03-05T15:23:49Z", "message": "light client added as part of the handshake, test has been modified too"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bd2278383b2685427ec1bbb74dd5d14a2994ec27", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/bd2278383b2685427ec1bbb74dd5d14a2994ec27", "committedDate": "2020-03-05T15:23:49Z", "message": "light client added as part of the handshake, test has been modified too"}, "afterCommit": {"oid": "c21a0e614e0a738ae87c037b809784828b85f4a0", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/c21a0e614e0a738ae87c037b809784828b85f4a0", "committedDate": "2020-03-05T16:22:53Z", "message": "light client added as part of the handshake, test has been modified too"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "43000b5b26dc6698acfea9a4016430b57c10e0fe", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/43000b5b26dc6698acfea9a4016430b57c10e0fe", "committedDate": "2020-03-10T19:30:14Z", "message": "lightProcessor added in lightClient handler"}, "afterCommit": {"oid": "c4f8a5397bf7c9e3d821d21668ae161db5649c4e", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/c4f8a5397bf7c9e3d821d21668ae161db5649c4e", "committedDate": "2020-03-09T17:12:18Z", "message": "LightClientMessage added"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "836623cc95e63244dffa92481aead8757131e710", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/836623cc95e63244dffa92481aead8757131e710", "committedDate": "2020-03-11T15:06:13Z", "message": "lightprocessor added"}, "afterCommit": {"oid": "6a5524e48d8dc5edea4e8c89e1ac3aeee56e215c", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/6a5524e48d8dc5edea4e8c89e1ac3aeee56e215c", "committedDate": "2020-03-11T15:10:48Z", "message": "lightprocessor added"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "56e7ffbf45a6d74e4bd2a8559c9d43eafcd099ac", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/56e7ffbf45a6d74e4bd2a8559c9d43eafcd099ac", "committedDate": "2020-03-11T15:15:06Z", "message": "changes in order activateLC ops"}, "afterCommit": {"oid": "011db74fa192c8bda0cefb244fd69fa3883c58b5", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/011db74fa192c8bda0cefb244fd69fa3883c58b5", "committedDate": "2020-03-11T15:35:28Z", "message": "changes in order activateLC ops"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b05466c7663a9621477f8438438220d6502428ac", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/b05466c7663a9621477f8438438220d6502428ac", "committedDate": "2020-03-11T18:06:52Z", "message": "light processor deleted from rsk messages"}, "afterCommit": {"oid": "2380eba07828e7c998d3cc2bf7ce1d876c1dde7d", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/2380eba07828e7c998d3cc2bf7ce1d876c1dde7d", "committedDate": "2020-03-11T18:35:08Z", "message": "light processor deleted from rsk messages"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2380eba07828e7c998d3cc2bf7ce1d876c1dde7d", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/2380eba07828e7c998d3cc2bf7ce1d876c1dde7d", "committedDate": "2020-03-11T18:35:08Z", "message": "light processor deleted from rsk messages"}, "afterCommit": {"oid": "33f663912268da3c0031d9216bf6c00bc5150fe6", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/33f663912268da3c0031d9216bf6c00bc5150fe6", "committedDate": "2020-03-11T18:45:56Z", "message": "light processor deleted from rsk messages"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "33f663912268da3c0031d9216bf6c00bc5150fe6", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/33f663912268da3c0031d9216bf6c00bc5150fe6", "committedDate": "2020-03-11T18:45:56Z", "message": "light processor deleted from rsk messages"}, "afterCommit": {"oid": "c445bcf15544ad047c9e1cedefde93936650e0a7", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/c445bcf15544ad047c9e1cedefde93936650e0a7", "committedDate": "2020-03-16T16:07:17Z", "message": "light processor deleted from rsk messages"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c445bcf15544ad047c9e1cedefde93936650e0a7", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/c445bcf15544ad047c9e1cedefde93936650e0a7", "committedDate": "2020-03-16T16:07:17Z", "message": "light processor deleted from rsk messages"}, "afterCommit": {"oid": "b158b61ef9e7966268501e1d416aa039f3864d1b", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/b158b61ef9e7966268501e1d416aa039f3864d1b", "committedDate": "2020-03-16T17:51:03Z", "message": "light processor deleted from rsk messages"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7099ed904c2b6f7fbaac6c58640d204a23a40341", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/7099ed904c2b6f7fbaac6c58640d204a23a40341", "committedDate": "2020-04-15T14:54:27Z", "message": "Status message (#1200)\n\n* change test message for status message adding the latest\r\n\r\n* create and test StatusMessage, also addd it to lightProcessor and lightClientHandler, processStatusMessage is not implemented\r\n\r\n* added LightSyncProcessoras manager for sync messaged, tested processStatus\r\n\r\n* lightPeer added as channel wrapper\r\n\r\n* Create Status as class\r\n\r\n* processing blockheader after status. Also tested"}, "afterCommit": {"oid": "032c313bb33a874840089edc1e7afe5187e9af61", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/032c313bb33a874840089edc1e7afe5187e9af61", "committedDate": "2020-04-15T15:17:59Z", "message": "Status message (#1200)\n\n* change test message for status message adding the latest\r\n\r\n* create and test StatusMessage, also addd it to lightProcessor and lightClientHandler, processStatusMessage is not implemented\r\n\r\n* added LightSyncProcessoras manager for sync messaged, tested processStatus\r\n\r\n* lightPeer added as channel wrapper\r\n\r\n* Create Status as class\r\n\r\n* processing blockheader after status. Also tested"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "511437d961e1f18a0933197e6e5d78f9e2fe754c", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/511437d961e1f18a0933197e6e5d78f9e2fe754c", "committedDate": "2020-04-20T14:06:00Z", "message": "Fix and enhance testing (#1220)\n\n* tests cases in which RLP desencode as null, it's when message fields are in zero\r\n\r\n* pipeline run"}, "afterCommit": {"oid": "f4f5af422779035adf2c354c2f263a651438bf9f", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/f4f5af422779035adf2c354c2f263a651438bf9f", "committedDate": "2020-04-20T14:13:54Z", "message": "Fix and enhance testing (#1220)\n\n* tests cases in which RLP desencode as null, it's when message fields are in zero\r\n\r\n* pipeline run"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "34fe200f999d9ea33acd783850da1f6059467138", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/34fe200f999d9ea33acd783850da1f6059467138", "committedDate": "2020-04-21T17:55:46Z", "message": "deleted unused logger in LightClientHandler"}, "afterCommit": {"oid": "5bb5e528312e5675a3168403ec4188f3598d8432", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/5bb5e528312e5675a3168403ec4188f3598d8432", "committedDate": "2020-04-21T18:08:16Z", "message": "deleted unused logger in LightClientHandler"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f72085e6e051ae5fcf1003a8f4b8a4151ba1c545", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/f72085e6e051ae5fcf1003a8f4b8a4151ba1c545", "committedDate": "2020-04-24T14:59:37Z", "message": "TxRelay added as option in Status message handshake (#1224)\n\n* added txrelay as option in StatusMessage\r\n\r\n* txRelay added as lightpeer data"}, "afterCommit": {"oid": "4a9efe993112373870eb2ed68d19cc0595a8850a", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/4a9efe993112373870eb2ed68d19cc0595a8850a", "committedDate": "2020-04-24T15:02:19Z", "message": "TxRelay added as option in Status message handshake (#1224)\n\n* added txrelay as option in StatusMessage\r\n\r\n* txRelay added as lightpeer data"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4a9efe993112373870eb2ed68d19cc0595a8850a", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/4a9efe993112373870eb2ed68d19cc0595a8850a", "committedDate": "2020-04-24T15:02:19Z", "message": "TxRelay added as option in Status message handshake (#1224)\n\n* added txrelay as option in StatusMessage\r\n\r\n* txRelay added as lightpeer data"}, "afterCommit": {"oid": "e8fdf0a655582af76d996ffeae908880d11abdb7", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/e8fdf0a655582af76d996ffeae908880d11abdb7", "committedDate": "2020-04-28T12:49:50Z", "message": "TxRelay added as option in Status message handshake (#1224)\n\n* added txrelay as option in StatusMessage\r\n\r\n* txRelay added as lightpeer data"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e8fdf0a655582af76d996ffeae908880d11abdb7", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/e8fdf0a655582af76d996ffeae908880d11abdb7", "committedDate": "2020-04-28T12:49:50Z", "message": "TxRelay added as option in Status message handshake (#1224)\n\n* added txrelay as option in StatusMessage\r\n\r\n* txRelay added as lightpeer data"}, "afterCommit": {"oid": "ebf7915690e101cb123b308b0b5ccc13a89a1584", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/ebf7915690e101cb123b308b0b5ccc13a89a1584", "committedDate": "2020-04-28T12:51:03Z", "message": "TxRelay added as option in Status message handshake (#1224)\n\n* added txrelay as option in StatusMessage\r\n\r\n* txRelay added as lightpeer data"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ebf7915690e101cb123b308b0b5ccc13a89a1584", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/ebf7915690e101cb123b308b0b5ccc13a89a1584", "committedDate": "2020-04-28T12:51:03Z", "message": "TxRelay added as option in Status message handshake (#1224)\n\n* added txrelay as option in StatusMessage\r\n\r\n* txRelay added as lightpeer data"}, "afterCommit": {"oid": "8c375b4d2c8062301cf466baf83bbb67e8e89dbf", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/8c375b4d2c8062301cf466baf83bbb67e8e89dbf", "committedDate": "2020-04-28T12:58:55Z", "message": "TxRelay added as option in Status message handshake (#1224)\n\n* added txrelay as option in StatusMessage\r\n\r\n* txRelay added as lightpeer data"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8c375b4d2c8062301cf466baf83bbb67e8e89dbf", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/8c375b4d2c8062301cf466baf83bbb67e8e89dbf", "committedDate": "2020-04-28T12:58:55Z", "message": "TxRelay added as option in Status message handshake (#1224)\n\n* added txrelay as option in StatusMessage\r\n\r\n* txRelay added as lightpeer data"}, "afterCommit": {"oid": "88fa936b791a819a2a6a9aedb3e4d7ec4d966b71", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/88fa936b791a819a2a6a9aedb3e4d7ec4d966b71", "committedDate": "2020-04-29T13:42:20Z", "message": "TxRelay added as option in Status message handshake (#1224)\n\n* added txrelay as option in StatusMessage\r\n\r\n* txRelay added as lightpeer data"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NDM2MjIz", "url": "https://github.com/rsksmart/rskj/pull/1184#pullrequestreview-419436223", "createdAt": "2020-05-27T17:07:01Z", "commit": {"oid": "0ad9527f250d51cca20e951ef97762b428c2886d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzowNzowMVrOGbUv7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzowNzowMVrOGbUv7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwNDY4Ng==", "bodyText": "This seems to be for testing only, since the getBlocks() method is only called from test code, maybe it merits a comment or a TODO.", "url": "https://github.com/rsksmart/rskj/pull/1184#discussion_r431304686", "createdAt": "2020-05-27T17:07:01Z", "author": {"login": "nicops"}, "path": "rskj-core/src/main/java/co/rsk/net/light/LightPeer.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2020 RSK Labs Ltd.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package co.rsk.net.light;\n+\n+import org.ethereum.core.BlockHeader;\n+import org.ethereum.net.MessageQueue;\n+import org.ethereum.net.message.Message;\n+import org.ethereum.net.message.ReasonCode;\n+import org.ethereum.net.server.Channel;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+public class LightPeer {\n+\n+    private final LinkedList<BlockHeader> blockHeaders;\n+    private Channel channel;\n+    private MessageQueue msgQueue;\n+\n+    public LightPeer(Channel channel, MessageQueue msgQueue) {\n+        this.channel = channel;\n+        this.msgQueue = msgQueue;\n+        this.blockHeaders = new LinkedList<>();\n+    }\n+\n+    public String getPeerIdShort() {\n+        return channel.getPeerIdShort();\n+    }\n+\n+    public void sendMessage(Message message) {\n+        msgQueue.sendMessage(message);\n+    }\n+\n+    public void disconnect(ReasonCode reasonCode) {\n+        msgQueue.disconnect(reasonCode);\n+    }\n+\n+    public void receivedBlock(BlockHeader blockHeader) {\n+        blockHeaders.add(blockHeader);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad9527f250d51cca20e951ef97762b428c2886d"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NDM2NDg1", "url": "https://github.com/rsksmart/rskj/pull/1184#pullrequestreview-419436485", "createdAt": "2020-05-27T17:07:21Z", "commit": {"oid": "0ad9527f250d51cca20e951ef97762b428c2886d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzowNzoyMVrOGbUwuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzowNzoyMVrOGbUwuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwNDg4OQ==", "bodyText": "Since there is another MessageVisitor, even if it is on a different namespace, I'm tempted to change the name, (MessageVisitor isn't on itself very meaningful either), maybe to something like LightClientMessageVisitor?", "url": "https://github.com/rsksmart/rskj/pull/1184#discussion_r431304889", "createdAt": "2020-05-27T17:07:21Z", "author": {"login": "nicops"}, "path": "rskj-core/src/main/java/co/rsk/net/light/MessageVisitor.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2019 RSK Labs Ltd.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package co.rsk.net.light;\n+\n+import co.rsk.net.eth.LightClientHandler;\n+import co.rsk.net.light.message.*;\n+import io.netty.channel.ChannelHandlerContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Created by Julian Len and Sebastian Sicardi on 21/04/20.\n+ */\n+public class MessageVisitor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad9527f250d51cca20e951ef97762b428c2886d"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NDM2ODky", "url": "https://github.com/rsksmart/rskj/pull/1184#pullrequestreview-419436892", "createdAt": "2020-05-27T17:07:53Z", "commit": {"oid": "0ad9527f250d51cca20e951ef97762b428c2886d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzowNzo1M1rOGbUx_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzowNzo1M1rOGbUx_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwNTIxMg==", "bodyText": "Since the calling code that uses this method says \"this works only for testing purposes\", should this method have a similar comment? Or will it make sense later?", "url": "https://github.com/rsksmart/rskj/pull/1184#discussion_r431305212", "createdAt": "2020-05-27T17:07:53Z", "author": {"login": "nicops"}, "path": "rskj-core/src/main/java/co/rsk/core/bc/BlockChainStatus.java", "diffHunk": "@@ -50,4 +51,8 @@ public BlockDifficulty getTotalDifficulty() {\n     public boolean hasLowerTotalDifficultyThan(Status status) {\n         return this.totalDifficulty.compareTo(status.getTotalDifficulty()) < 0;\n     }\n+\n+    public boolean hasLowerDifficultyThan(LightStatus status) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad9527f250d51cca20e951ef97762b428c2886d"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NDM3NTEy", "url": "https://github.com/rsksmart/rskj/pull/1184#pullrequestreview-419437512", "createdAt": "2020-05-27T17:08:40Z", "commit": {"oid": "0ad9527f250d51cca20e951ef97762b428c2886d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzowODo0MFrOGbUzwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzowODo0MFrOGbUzwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwNTY2NQ==", "bodyText": "This comment seems off. That's not what the BlockStore does, or is it?", "url": "https://github.com/rsksmart/rskj/pull/1184#discussion_r431305665", "createdAt": "2020-05-27T17:08:40Z", "author": {"login": "nicops"}, "path": "rskj-core/src/main/java/co/rsk/net/light/LightProcessor.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2020 RSK Labs Ltd.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package co.rsk.net.light;\n+\n+import co.rsk.core.RskAddress;\n+import co.rsk.crypto.Keccak256;\n+import co.rsk.db.RepositorySnapshot;\n+import co.rsk.db.RepositoryLocator;\n+import co.rsk.net.light.message.*;\n+import org.ethereum.core.*;\n+import org.ethereum.net.message.Message;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.ethereum.db.BlockStore;\n+import org.ethereum.db.TransactionInfo;\n+import org.ethereum.vm.DataWord;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nonnull;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+\n+/**\n+ * Created by Julian Len and Sebastian Sicardi on 21/10/19.\n+ */\n+public class LightProcessor {\n+    private static final Logger logger = LoggerFactory.getLogger(\"lightprocessor\");\n+    // keep tabs on which nodes know which blocks.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad9527f250d51cca20e951ef97762b428c2886d"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NDM3Njkw", "url": "https://github.com/rsksmart/rskj/pull/1184#pullrequestreview-419437690", "createdAt": "2020-05-27T17:08:54Z", "commit": {"oid": "0ad9527f250d51cca20e951ef97762b428c2886d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzowODo1NFrOGbU0Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzowODo1NFrOGbU0Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwNTgwNw==", "bodyText": "For this and all other methods, will this be the long term solution, to respond nothing? In https://openethereum.github.io/wiki/The-Parity-Light-Protocol-%28PIP%29 there is a mention of exclusion proofs, would that apply here? Alternatively, should we account for spam in some way?", "url": "https://github.com/rsksmart/rskj/pull/1184#discussion_r431305807", "createdAt": "2020-05-27T17:08:54Z", "author": {"login": "nicops"}, "path": "rskj-core/src/main/java/co/rsk/net/light/LightProcessor.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2020 RSK Labs Ltd.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package co.rsk.net.light;\n+\n+import co.rsk.core.RskAddress;\n+import co.rsk.crypto.Keccak256;\n+import co.rsk.db.RepositorySnapshot;\n+import co.rsk.db.RepositoryLocator;\n+import co.rsk.net.light.message.*;\n+import org.ethereum.core.*;\n+import org.ethereum.net.message.Message;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.ethereum.db.BlockStore;\n+import org.ethereum.db.TransactionInfo;\n+import org.ethereum.vm.DataWord;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nonnull;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+\n+/**\n+ * Created by Julian Len and Sebastian Sicardi on 21/10/19.\n+ */\n+public class LightProcessor {\n+    private static final Logger logger = LoggerFactory.getLogger(\"lightprocessor\");\n+    // keep tabs on which nodes know which blocks.\n+    private final BlockStore blockStore;\n+    private final RepositoryLocator repositoryLocator;\n+    private final Blockchain blockchain;\n+\n+    public LightProcessor(@Nonnull final Blockchain blockchain,\n+                          @Nonnull final BlockStore blockStore,\n+                          @Nonnull final RepositoryLocator repositoryLocator) {\n+        this.blockchain = blockchain;\n+        this.blockStore = blockStore;\n+        this.repositoryLocator = repositoryLocator;\n+    }\n+    /**\n+     * processBlockReceiptsRequest sends the requested block receipts if it is available.\n+     * @param requestId the id of the request\n+     * @param blockHash   the requested block hash.\n+     * @param lightPeer\n+     */\n+    public void processGetBlockReceiptsMessage(long requestId, byte[] blockHash, LightPeer lightPeer) {\n+        String blockHashLog = Hex.toHexString(blockHash);\n+        logger.trace(\"Processing block receipts request {} block {}\", requestId, blockHashLog);\n+        final Block block = blockStore.getBlockByHash(blockHash);\n+\n+        if (block == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad9527f250d51cca20e951ef97762b428c2886d"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NDM3ODY5", "url": "https://github.com/rsksmart/rskj/pull/1184#pullrequestreview-419437869", "createdAt": "2020-05-27T17:09:08Z", "commit": {"oid": "0ad9527f250d51cca20e951ef97762b428c2886d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzowOTowOFrOGbU05w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzowOTowOFrOGbU05w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwNTk1OQ==", "bodyText": "Could this possibly return null?", "url": "https://github.com/rsksmart/rskj/pull/1184#discussion_r431305959", "createdAt": "2020-05-27T17:09:08Z", "author": {"login": "nicops"}, "path": "rskj-core/src/main/java/co/rsk/net/light/LightProcessor.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2020 RSK Labs Ltd.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package co.rsk.net.light;\n+\n+import co.rsk.core.RskAddress;\n+import co.rsk.crypto.Keccak256;\n+import co.rsk.db.RepositorySnapshot;\n+import co.rsk.db.RepositoryLocator;\n+import co.rsk.net.light.message.*;\n+import org.ethereum.core.*;\n+import org.ethereum.net.message.Message;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.ethereum.db.BlockStore;\n+import org.ethereum.db.TransactionInfo;\n+import org.ethereum.vm.DataWord;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nonnull;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+\n+/**\n+ * Created by Julian Len and Sebastian Sicardi on 21/10/19.\n+ */\n+public class LightProcessor {\n+    private static final Logger logger = LoggerFactory.getLogger(\"lightprocessor\");\n+    // keep tabs on which nodes know which blocks.\n+    private final BlockStore blockStore;\n+    private final RepositoryLocator repositoryLocator;\n+    private final Blockchain blockchain;\n+\n+    public LightProcessor(@Nonnull final Blockchain blockchain,\n+                          @Nonnull final BlockStore blockStore,\n+                          @Nonnull final RepositoryLocator repositoryLocator) {\n+        this.blockchain = blockchain;\n+        this.blockStore = blockStore;\n+        this.repositoryLocator = repositoryLocator;\n+    }\n+    /**\n+     * processBlockReceiptsRequest sends the requested block receipts if it is available.\n+     * @param requestId the id of the request\n+     * @param blockHash   the requested block hash.\n+     * @param lightPeer\n+     */\n+    public void processGetBlockReceiptsMessage(long requestId, byte[] blockHash, LightPeer lightPeer) {\n+        String blockHashLog = Hex.toHexString(blockHash);\n+        logger.trace(\"Processing block receipts request {} block {}\", requestId, blockHashLog);\n+        final Block block = blockStore.getBlockByHash(blockHash);\n+\n+        if (block == null) {\n+            // Don't waste time sending an empty response.\n+            return;\n+        }\n+\n+        List<TransactionReceipt> receipts = new LinkedList<>();\n+\n+        for (Transaction tx :  block.getTransactionsList()) {\n+            TransactionInfo txInfo = blockchain.getTransactionInfo(tx.getHash().getBytes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad9527f250d51cca20e951ef97762b428c2886d"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NDM3OTQ5", "url": "https://github.com/rsksmart/rskj/pull/1184#pullrequestreview-419437949", "createdAt": "2020-05-27T17:09:15Z", "commit": {"oid": "0ad9527f250d51cca20e951ef97762b428c2886d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzowOToxNVrOGbU1Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzowOToxNVrOGbU1Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwNjAyMg==", "bodyText": "I would delete this and all the other methods that aren't supported. They don't belong together at all: One thing is to reply to LC queries as a full node, something very different is to consume replies to those queries as a light node. I would also rename the class to reflect this, maybe something like LightClientQueriesResolver (I didn't think this through).", "url": "https://github.com/rsksmart/rskj/pull/1184#discussion_r431306022", "createdAt": "2020-05-27T17:09:15Z", "author": {"login": "nicops"}, "path": "rskj-core/src/main/java/co/rsk/net/light/LightProcessor.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2020 RSK Labs Ltd.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package co.rsk.net.light;\n+\n+import co.rsk.core.RskAddress;\n+import co.rsk.crypto.Keccak256;\n+import co.rsk.db.RepositorySnapshot;\n+import co.rsk.db.RepositoryLocator;\n+import co.rsk.net.light.message.*;\n+import org.ethereum.core.*;\n+import org.ethereum.net.message.Message;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.ethereum.db.BlockStore;\n+import org.ethereum.db.TransactionInfo;\n+import org.ethereum.vm.DataWord;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nonnull;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+\n+/**\n+ * Created by Julian Len and Sebastian Sicardi on 21/10/19.\n+ */\n+public class LightProcessor {\n+    private static final Logger logger = LoggerFactory.getLogger(\"lightprocessor\");\n+    // keep tabs on which nodes know which blocks.\n+    private final BlockStore blockStore;\n+    private final RepositoryLocator repositoryLocator;\n+    private final Blockchain blockchain;\n+\n+    public LightProcessor(@Nonnull final Blockchain blockchain,\n+                          @Nonnull final BlockStore blockStore,\n+                          @Nonnull final RepositoryLocator repositoryLocator) {\n+        this.blockchain = blockchain;\n+        this.blockStore = blockStore;\n+        this.repositoryLocator = repositoryLocator;\n+    }\n+    /**\n+     * processBlockReceiptsRequest sends the requested block receipts if it is available.\n+     * @param requestId the id of the request\n+     * @param blockHash   the requested block hash.\n+     * @param lightPeer\n+     */\n+    public void processGetBlockReceiptsMessage(long requestId, byte[] blockHash, LightPeer lightPeer) {\n+        String blockHashLog = Hex.toHexString(blockHash);\n+        logger.trace(\"Processing block receipts request {} block {}\", requestId, blockHashLog);\n+        final Block block = blockStore.getBlockByHash(blockHash);\n+\n+        if (block == null) {\n+            // Don't waste time sending an empty response.\n+            return;\n+        }\n+\n+        List<TransactionReceipt> receipts = new LinkedList<>();\n+\n+        for (Transaction tx :  block.getTransactionsList()) {\n+            TransactionInfo txInfo = blockchain.getTransactionInfo(tx.getHash().getBytes());\n+            receipts.add(txInfo.getReceipt());\n+        }\n+\n+        Message responseMessage = new BlockReceiptsMessage(requestId, receipts);\n+        lightPeer.sendMessage(responseMessage);\n+    }\n+\n+    public void processBlockReceiptsMessage(long id, List<TransactionReceipt> blockReceipts, LightPeer lightPeer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad9527f250d51cca20e951ef97762b428c2886d"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NDM4MTc1", "url": "https://github.com/rsksmart/rskj/pull/1184#pullrequestreview-419438175", "createdAt": "2020-05-27T17:09:33Z", "commit": {"oid": "0ad9527f250d51cca20e951ef97762b428c2886d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzowOTozM1rOGbU1zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzowOTozM1rOGbU1zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwNjE4OQ==", "bodyText": "If this is modelled after https://openethereum.github.io/wiki/The-Parity-Light-Protocol-%28PIP%29 then shouldn't this be the bytecode rather than the code hash?", "url": "https://github.com/rsksmart/rskj/pull/1184#discussion_r431306189", "createdAt": "2020-05-27T17:09:33Z", "author": {"login": "nicops"}, "path": "rskj-core/src/main/java/co/rsk/net/light/LightProcessor.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2020 RSK Labs Ltd.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package co.rsk.net.light;\n+\n+import co.rsk.core.RskAddress;\n+import co.rsk.crypto.Keccak256;\n+import co.rsk.db.RepositorySnapshot;\n+import co.rsk.db.RepositoryLocator;\n+import co.rsk.net.light.message.*;\n+import org.ethereum.core.*;\n+import org.ethereum.net.message.Message;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.ethereum.db.BlockStore;\n+import org.ethereum.db.TransactionInfo;\n+import org.ethereum.vm.DataWord;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nonnull;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+\n+/**\n+ * Created by Julian Len and Sebastian Sicardi on 21/10/19.\n+ */\n+public class LightProcessor {\n+    private static final Logger logger = LoggerFactory.getLogger(\"lightprocessor\");\n+    // keep tabs on which nodes know which blocks.\n+    private final BlockStore blockStore;\n+    private final RepositoryLocator repositoryLocator;\n+    private final Blockchain blockchain;\n+\n+    public LightProcessor(@Nonnull final Blockchain blockchain,\n+                          @Nonnull final BlockStore blockStore,\n+                          @Nonnull final RepositoryLocator repositoryLocator) {\n+        this.blockchain = blockchain;\n+        this.blockStore = blockStore;\n+        this.repositoryLocator = repositoryLocator;\n+    }\n+    /**\n+     * processBlockReceiptsRequest sends the requested block receipts if it is available.\n+     * @param requestId the id of the request\n+     * @param blockHash   the requested block hash.\n+     * @param lightPeer\n+     */\n+    public void processGetBlockReceiptsMessage(long requestId, byte[] blockHash, LightPeer lightPeer) {\n+        String blockHashLog = Hex.toHexString(blockHash);\n+        logger.trace(\"Processing block receipts request {} block {}\", requestId, blockHashLog);\n+        final Block block = blockStore.getBlockByHash(blockHash);\n+\n+        if (block == null) {\n+            // Don't waste time sending an empty response.\n+            return;\n+        }\n+\n+        List<TransactionReceipt> receipts = new LinkedList<>();\n+\n+        for (Transaction tx :  block.getTransactionsList()) {\n+            TransactionInfo txInfo = blockchain.getTransactionInfo(tx.getHash().getBytes());\n+            receipts.add(txInfo.getReceipt());\n+        }\n+\n+        Message responseMessage = new BlockReceiptsMessage(requestId, receipts);\n+        lightPeer.sendMessage(responseMessage);\n+    }\n+\n+    public void processBlockReceiptsMessage(long id, List<TransactionReceipt> blockReceipts, LightPeer lightPeer) {\n+        throw new UnsupportedOperationException(\"Not supported BlockReceipt processing\");\n+    }\n+\n+    public void processGetTransactionIndex(long id, byte[] hash, LightPeer lightPeer) {\n+        logger.debug(\"Get Transaction Index Message Received\");\n+\n+        TransactionInfo txinfo = blockchain.getTransactionInfo(hash);\n+\n+        if (txinfo == null) {\n+            // Don't waste time sending an empty response.\n+            return;\n+        }\n+\n+        byte[] blockHash = txinfo.getBlockHash();\n+        long blockNumber = blockchain.getBlockByHash(blockHash).getNumber();\n+        long txIndex = txinfo.getIndex();\n+\n+        TransactionIndexMessage response = new TransactionIndexMessage(id, blockNumber, blockHash, txIndex);\n+        lightPeer.sendMessage(response);\n+    }\n+\n+    public void processTransactionIndexMessage(long id, long blockNumber, byte[] blockHash, long txIndex, LightPeer lightPeer) {\n+        throw new UnsupportedOperationException(\"Not supported TransactionIndexMessage processing\");\n+    }\n+\n+    public void processGetCodeMessage(long requestId, byte[] blockHash, byte[] address, LightPeer lightPeer) {\n+        String blockHashLog = Hex.toHexString(blockHash);\n+        String addressLog = Hex.toHexString(address);\n+        logger.trace(\"Processing code request {} block {} code {}\", requestId, blockHashLog, addressLog);\n+\n+        final Block block = blockStore.getBlockByHash(blockHash);\n+\n+        if (block == null) {\n+            // Don't waste time sending an empty response.\n+            return;\n+        }\n+\n+        RepositorySnapshot repositorySnapshot = repositoryLocator.snapshotAt(block.getHeader());\n+        RskAddress addr = new RskAddress(address);\n+        Keccak256 codeHash = repositorySnapshot.getCodeHash(addr);\n+\n+        CodeMessage response = new CodeMessage(requestId, codeHash.getBytes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad9527f250d51cca20e951ef97762b428c2886d"}, "originalPosition": 126}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NDM4NDEz", "url": "https://github.com/rsksmart/rskj/pull/1184#pullrequestreview-419438413", "createdAt": "2020-05-27T17:09:50Z", "commit": {"oid": "0ad9527f250d51cca20e951ef97762b428c2886d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzowOTo1MFrOGbU2cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzowOTo1MFrOGbU2cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwNjM1NQ==", "bodyText": "I would add a TODO comment to mark that the merkle proof is yet to be implemented, and the same below", "url": "https://github.com/rsksmart/rskj/pull/1184#discussion_r431306355", "createdAt": "2020-05-27T17:09:50Z", "author": {"login": "nicops"}, "path": "rskj-core/src/main/java/co/rsk/net/light/LightProcessor.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2020 RSK Labs Ltd.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package co.rsk.net.light;\n+\n+import co.rsk.core.RskAddress;\n+import co.rsk.crypto.Keccak256;\n+import co.rsk.db.RepositorySnapshot;\n+import co.rsk.db.RepositoryLocator;\n+import co.rsk.net.light.message.*;\n+import org.ethereum.core.*;\n+import org.ethereum.net.message.Message;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.ethereum.db.BlockStore;\n+import org.ethereum.db.TransactionInfo;\n+import org.ethereum.vm.DataWord;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nonnull;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+\n+/**\n+ * Created by Julian Len and Sebastian Sicardi on 21/10/19.\n+ */\n+public class LightProcessor {\n+    private static final Logger logger = LoggerFactory.getLogger(\"lightprocessor\");\n+    // keep tabs on which nodes know which blocks.\n+    private final BlockStore blockStore;\n+    private final RepositoryLocator repositoryLocator;\n+    private final Blockchain blockchain;\n+\n+    public LightProcessor(@Nonnull final Blockchain blockchain,\n+                          @Nonnull final BlockStore blockStore,\n+                          @Nonnull final RepositoryLocator repositoryLocator) {\n+        this.blockchain = blockchain;\n+        this.blockStore = blockStore;\n+        this.repositoryLocator = repositoryLocator;\n+    }\n+    /**\n+     * processBlockReceiptsRequest sends the requested block receipts if it is available.\n+     * @param requestId the id of the request\n+     * @param blockHash   the requested block hash.\n+     * @param lightPeer\n+     */\n+    public void processGetBlockReceiptsMessage(long requestId, byte[] blockHash, LightPeer lightPeer) {\n+        String blockHashLog = Hex.toHexString(blockHash);\n+        logger.trace(\"Processing block receipts request {} block {}\", requestId, blockHashLog);\n+        final Block block = blockStore.getBlockByHash(blockHash);\n+\n+        if (block == null) {\n+            // Don't waste time sending an empty response.\n+            return;\n+        }\n+\n+        List<TransactionReceipt> receipts = new LinkedList<>();\n+\n+        for (Transaction tx :  block.getTransactionsList()) {\n+            TransactionInfo txInfo = blockchain.getTransactionInfo(tx.getHash().getBytes());\n+            receipts.add(txInfo.getReceipt());\n+        }\n+\n+        Message responseMessage = new BlockReceiptsMessage(requestId, receipts);\n+        lightPeer.sendMessage(responseMessage);\n+    }\n+\n+    public void processBlockReceiptsMessage(long id, List<TransactionReceipt> blockReceipts, LightPeer lightPeer) {\n+        throw new UnsupportedOperationException(\"Not supported BlockReceipt processing\");\n+    }\n+\n+    public void processGetTransactionIndex(long id, byte[] hash, LightPeer lightPeer) {\n+        logger.debug(\"Get Transaction Index Message Received\");\n+\n+        TransactionInfo txinfo = blockchain.getTransactionInfo(hash);\n+\n+        if (txinfo == null) {\n+            // Don't waste time sending an empty response.\n+            return;\n+        }\n+\n+        byte[] blockHash = txinfo.getBlockHash();\n+        long blockNumber = blockchain.getBlockByHash(blockHash).getNumber();\n+        long txIndex = txinfo.getIndex();\n+\n+        TransactionIndexMessage response = new TransactionIndexMessage(id, blockNumber, blockHash, txIndex);\n+        lightPeer.sendMessage(response);\n+    }\n+\n+    public void processTransactionIndexMessage(long id, long blockNumber, byte[] blockHash, long txIndex, LightPeer lightPeer) {\n+        throw new UnsupportedOperationException(\"Not supported TransactionIndexMessage processing\");\n+    }\n+\n+    public void processGetCodeMessage(long requestId, byte[] blockHash, byte[] address, LightPeer lightPeer) {\n+        String blockHashLog = Hex.toHexString(blockHash);\n+        String addressLog = Hex.toHexString(address);\n+        logger.trace(\"Processing code request {} block {} code {}\", requestId, blockHashLog, addressLog);\n+\n+        final Block block = blockStore.getBlockByHash(blockHash);\n+\n+        if (block == null) {\n+            // Don't waste time sending an empty response.\n+            return;\n+        }\n+\n+        RepositorySnapshot repositorySnapshot = repositoryLocator.snapshotAt(block.getHeader());\n+        RskAddress addr = new RskAddress(address);\n+        Keccak256 codeHash = repositorySnapshot.getCodeHash(addr);\n+\n+        CodeMessage response = new CodeMessage(requestId, codeHash.getBytes());\n+        lightPeer.sendMessage(response);\n+    }\n+\n+    public void processCodeMessage(long id, byte[] codeHash, LightPeer lightPeer) {\n+        throw new UnsupportedOperationException(\"Not supported Code processing\");\n+    }\n+\n+    public void processGetAccountsMessage(long id, byte[] blockHash, byte[] addressHash, LightPeer lightPeer) {\n+        logger.debug(\"Get Accounts Message Received: id {}, blockhash: {}, addressHash {}\", id, blockHash, addressHash);\n+\n+        final Block block = blockStore.getBlockByHash(blockHash);\n+\n+        if (block == null) {\n+            // Don't waste time sending an empty response.\n+            return;\n+        }\n+\n+        RepositorySnapshot repositorySnapshot = repositoryLocator.snapshotAt(block.getHeader());\n+        RskAddress address = new RskAddress(addressHash);\n+        AccountState state = repositorySnapshot.getAccountState(address);\n+\n+        AccountsMessage response = new AccountsMessage(id, new byte[] {0x00}, state.getNonce().longValue(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad9527f250d51cca20e951ef97762b428c2886d"}, "originalPosition": 148}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NDM4Nzk3", "url": "https://github.com/rsksmart/rskj/pull/1184#pullrequestreview-419438797", "createdAt": "2020-05-27T17:10:17Z", "commit": {"oid": "0ad9527f250d51cca20e951ef97762b428c2886d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzoxMDoxOFrOGbU3qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzoxMDoxOFrOGbU3qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwNjY2Nw==", "bodyText": "This method encodes only the signature, which doesn't seem correct.", "url": "https://github.com/rsksmart/rskj/pull/1184#discussion_r431306667", "createdAt": "2020-05-27T17:10:18Z", "author": {"login": "nicops"}, "path": "rskj-core/src/main/java/co/rsk/net/light/message/BlockBodyMessage.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2020 RSK Labs Ltd.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package co.rsk.net.light.message;\n+\n+import co.rsk.net.light.MessageVisitor;\n+import org.bouncycastle.util.BigIntegers;\n+import org.ethereum.core.BlockFactory;\n+import org.ethereum.core.BlockHeader;\n+import org.ethereum.core.ImmutableTransaction;\n+import org.ethereum.core.Transaction;\n+import org.ethereum.util.RLPList;\n+\n+import java.math.BigInteger;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import static co.rsk.net.light.LightClientMessageCodes.BLOCK_BODY;\n+import static org.ethereum.util.RLP.*;\n+\n+public class BlockBodyMessage extends LightClientMessage {\n+\n+    private final long id;\n+    private final List<Transaction> transactions;\n+    private final List<BlockHeader> uncles;\n+\n+    public BlockBodyMessage(byte[] encoded, BlockFactory blockFactory) {\n+        RLPList list = (RLPList) decode2(encoded).get(0);\n+        byte[] rlpId = list.get(0).getRLPData();\n+        this.id = rlpId == null ? 0 : BigIntegers.fromUnsignedByteArray(rlpId).longValue();\n+\n+        RLPList rlpTransactions = (RLPList) decode2(list.get(1).getRLPData()).get(0);\n+\n+        List<Transaction> transactionList = new LinkedList<>();\n+        for (int k = 0; k < rlpTransactions.size(); k++) {\n+            byte[] rlpData = rlpTransactions.get(k).getRLPData();\n+            Transaction tx = new ImmutableTransaction(rlpData);\n+            transactionList.add(tx);\n+        }\n+\n+        RLPList rlpUncles = (RLPList) decode2(list.get(2).getRLPData()).get(0);\n+\n+        List<BlockHeader> uncleList = new LinkedList<>();\n+        for (int k = 0; k < rlpUncles.size(); k++) {\n+            byte[] rlpData = rlpUncles.get(k).getRLPData();\n+            BlockHeader uncle = blockFactory.decodeHeader(rlpData);\n+            uncleList.add(uncle);\n+        }\n+\n+        this.transactions = transactionList;\n+        this.uncles = uncleList;\n+        this.code = BLOCK_BODY.asByte();\n+    }\n+\n+    public BlockBodyMessage(long id, List<Transaction> transactionList, List<BlockHeader> uncleList) {\n+\n+        this.id = id;\n+        this.transactions = new LinkedList<>(transactionList);\n+        this.uncles = new LinkedList<>(uncleList);\n+\n+        this.code = BLOCK_BODY.asByte();\n+    }\n+\n+    @Override\n+    public byte[] getEncoded() {\n+        byte[] rlpId = encodeBigInteger(BigInteger.valueOf(getId()));\n+\n+        byte[][] rlpTransactions = getTransactions().stream()\n+                .map(Transaction::getEncoded)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad9527f250d51cca20e951ef97762b428c2886d"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NDM4OTIw", "url": "https://github.com/rsksmart/rskj/pull/1184#pullrequestreview-419438920", "createdAt": "2020-05-27T17:10:27Z", "commit": {"oid": "0ad9527f250d51cca20e951ef97762b428c2886d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzoxMDoyN1rOGbU4DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzoxMDoyN1rOGbU4DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwNjc2NQ==", "bodyText": "Why empty toString on this and the other messages?", "url": "https://github.com/rsksmart/rskj/pull/1184#discussion_r431306765", "createdAt": "2020-05-27T17:10:27Z", "author": {"login": "nicops"}, "path": "rskj-core/src/main/java/co/rsk/net/light/message/BlockBodyMessage.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2020 RSK Labs Ltd.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package co.rsk.net.light.message;\n+\n+import co.rsk.net.light.MessageVisitor;\n+import org.bouncycastle.util.BigIntegers;\n+import org.ethereum.core.BlockFactory;\n+import org.ethereum.core.BlockHeader;\n+import org.ethereum.core.ImmutableTransaction;\n+import org.ethereum.core.Transaction;\n+import org.ethereum.util.RLPList;\n+\n+import java.math.BigInteger;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import static co.rsk.net.light.LightClientMessageCodes.BLOCK_BODY;\n+import static org.ethereum.util.RLP.*;\n+\n+public class BlockBodyMessage extends LightClientMessage {\n+\n+    private final long id;\n+    private final List<Transaction> transactions;\n+    private final List<BlockHeader> uncles;\n+\n+    public BlockBodyMessage(byte[] encoded, BlockFactory blockFactory) {\n+        RLPList list = (RLPList) decode2(encoded).get(0);\n+        byte[] rlpId = list.get(0).getRLPData();\n+        this.id = rlpId == null ? 0 : BigIntegers.fromUnsignedByteArray(rlpId).longValue();\n+\n+        RLPList rlpTransactions = (RLPList) decode2(list.get(1).getRLPData()).get(0);\n+\n+        List<Transaction> transactionList = new LinkedList<>();\n+        for (int k = 0; k < rlpTransactions.size(); k++) {\n+            byte[] rlpData = rlpTransactions.get(k).getRLPData();\n+            Transaction tx = new ImmutableTransaction(rlpData);\n+            transactionList.add(tx);\n+        }\n+\n+        RLPList rlpUncles = (RLPList) decode2(list.get(2).getRLPData()).get(0);\n+\n+        List<BlockHeader> uncleList = new LinkedList<>();\n+        for (int k = 0; k < rlpUncles.size(); k++) {\n+            byte[] rlpData = rlpUncles.get(k).getRLPData();\n+            BlockHeader uncle = blockFactory.decodeHeader(rlpData);\n+            uncleList.add(uncle);\n+        }\n+\n+        this.transactions = transactionList;\n+        this.uncles = uncleList;\n+        this.code = BLOCK_BODY.asByte();\n+    }\n+\n+    public BlockBodyMessage(long id, List<Transaction> transactionList, List<BlockHeader> uncleList) {\n+\n+        this.id = id;\n+        this.transactions = new LinkedList<>(transactionList);\n+        this.uncles = new LinkedList<>(uncleList);\n+\n+        this.code = BLOCK_BODY.asByte();\n+    }\n+\n+    @Override\n+    public byte[] getEncoded() {\n+        byte[] rlpId = encodeBigInteger(BigInteger.valueOf(getId()));\n+\n+        byte[][] rlpTransactions = getTransactions().stream()\n+                .map(Transaction::getEncoded)\n+                .toArray(byte[][]::new);\n+\n+        byte[][] rlpUncles = getUncles().stream()\n+                .map(BlockHeader::getFullEncoded)\n+                .toArray(byte[][]::new);\n+\n+        return encodeList(rlpId, encodeList(rlpTransactions), encodeList(rlpUncles));\n+    }\n+\n+    @Override\n+    public Class<?> getAnswerMessage() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad9527f250d51cca20e951ef97762b428c2886d"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NDM5MDY0", "url": "https://github.com/rsksmart/rskj/pull/1184#pullrequestreview-419439064", "createdAt": "2020-05-27T17:10:39Z", "commit": {"oid": "0ad9527f250d51cca20e951ef97762b428c2886d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzoxMDozOVrOGbU4fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzoxMDozOVrOGbU4fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwNjg3Nw==", "bodyText": "In this and other places, the usage of import static for enum can be a little hard to read. It is of course, a matter of personal preference.", "url": "https://github.com/rsksmart/rskj/pull/1184#discussion_r431306877", "createdAt": "2020-05-27T17:10:39Z", "author": {"login": "nicops"}, "path": "rskj-core/src/main/java/co/rsk/net/light/message/BlockBodyMessage.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2020 RSK Labs Ltd.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package co.rsk.net.light.message;\n+\n+import co.rsk.net.light.MessageVisitor;\n+import org.bouncycastle.util.BigIntegers;\n+import org.ethereum.core.BlockFactory;\n+import org.ethereum.core.BlockHeader;\n+import org.ethereum.core.ImmutableTransaction;\n+import org.ethereum.core.Transaction;\n+import org.ethereum.util.RLPList;\n+\n+import java.math.BigInteger;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import static co.rsk.net.light.LightClientMessageCodes.BLOCK_BODY;\n+import static org.ethereum.util.RLP.*;\n+\n+public class BlockBodyMessage extends LightClientMessage {\n+\n+    private final long id;\n+    private final List<Transaction> transactions;\n+    private final List<BlockHeader> uncles;\n+\n+    public BlockBodyMessage(byte[] encoded, BlockFactory blockFactory) {\n+        RLPList list = (RLPList) decode2(encoded).get(0);\n+        byte[] rlpId = list.get(0).getRLPData();\n+        this.id = rlpId == null ? 0 : BigIntegers.fromUnsignedByteArray(rlpId).longValue();\n+\n+        RLPList rlpTransactions = (RLPList) decode2(list.get(1).getRLPData()).get(0);\n+\n+        List<Transaction> transactionList = new LinkedList<>();\n+        for (int k = 0; k < rlpTransactions.size(); k++) {\n+            byte[] rlpData = rlpTransactions.get(k).getRLPData();\n+            Transaction tx = new ImmutableTransaction(rlpData);\n+            transactionList.add(tx);\n+        }\n+\n+        RLPList rlpUncles = (RLPList) decode2(list.get(2).getRLPData()).get(0);\n+\n+        List<BlockHeader> uncleList = new LinkedList<>();\n+        for (int k = 0; k < rlpUncles.size(); k++) {\n+            byte[] rlpData = rlpUncles.get(k).getRLPData();\n+            BlockHeader uncle = blockFactory.decodeHeader(rlpData);\n+            uncleList.add(uncle);\n+        }\n+\n+        this.transactions = transactionList;\n+        this.uncles = uncleList;\n+        this.code = BLOCK_BODY.asByte();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad9527f250d51cca20e951ef97762b428c2886d"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NDM5Njc4", "url": "https://github.com/rsksmart/rskj/pull/1184#pullrequestreview-419439678", "createdAt": "2020-05-27T17:11:26Z", "commit": {"oid": "0ad9527f250d51cca20e951ef97762b428c2886d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzoxMToyNlrOGbU6Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzoxMToyNlrOGbU6Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwNzMyNg==", "bodyText": "In this and other places, there is a repeated usage of an structure that could be abstracted away in a lambda, maybe as a static method on a utils package. Something like this:\npublic static <T> List<T> mapListRLP(RLPList inputList, Function<byte[], T> lambda) {\n    List<T> output = new LinkedList<>();\n    for (int k = 0; k < inputList.size(); k++) {\n        byte[] rlpData = inputList.get(k).getRLPData();\n        T outputElement = lambda.apply(rlpData);\n        output.add(outputElement);\n    }\n    return output;\n}\n\nAnd then you can replace this with simply\nList<Transaction> transactionList = mapListRLP(rlpTransactions, rlpData -> new ImmutableTransaction(rlpData));", "url": "https://github.com/rsksmart/rskj/pull/1184#discussion_r431307326", "createdAt": "2020-05-27T17:11:26Z", "author": {"login": "nicops"}, "path": "rskj-core/src/main/java/co/rsk/net/light/message/BlockBodyMessage.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2020 RSK Labs Ltd.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package co.rsk.net.light.message;\n+\n+import co.rsk.net.light.MessageVisitor;\n+import org.bouncycastle.util.BigIntegers;\n+import org.ethereum.core.BlockFactory;\n+import org.ethereum.core.BlockHeader;\n+import org.ethereum.core.ImmutableTransaction;\n+import org.ethereum.core.Transaction;\n+import org.ethereum.util.RLPList;\n+\n+import java.math.BigInteger;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import static co.rsk.net.light.LightClientMessageCodes.BLOCK_BODY;\n+import static org.ethereum.util.RLP.*;\n+\n+public class BlockBodyMessage extends LightClientMessage {\n+\n+    private final long id;\n+    private final List<Transaction> transactions;\n+    private final List<BlockHeader> uncles;\n+\n+    public BlockBodyMessage(byte[] encoded, BlockFactory blockFactory) {\n+        RLPList list = (RLPList) decode2(encoded).get(0);\n+        byte[] rlpId = list.get(0).getRLPData();\n+        this.id = rlpId == null ? 0 : BigIntegers.fromUnsignedByteArray(rlpId).longValue();\n+\n+        RLPList rlpTransactions = (RLPList) decode2(list.get(1).getRLPData()).get(0);\n+\n+        List<Transaction> transactionList = new LinkedList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad9527f250d51cca20e951ef97762b428c2886d"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NDQwMTU5", "url": "https://github.com/rsksmart/rskj/pull/1184#pullrequestreview-419440159", "createdAt": "2020-05-27T17:12:06Z", "commit": {"oid": "0ad9527f250d51cca20e951ef97762b428c2886d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzoxMjowNlrOGbU7tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzoxMjowNlrOGbU7tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwNzcwMg==", "bodyText": "This repeated code makes me think that you should have an auxiliary method that returns a disconnection code or null, and then you disconnect with that code.", "url": "https://github.com/rsksmart/rskj/pull/1184#discussion_r431307702", "createdAt": "2020-05-27T17:12:06Z", "author": {"login": "nicops"}, "path": "rskj-core/src/main/java/co/rsk/net/light/LightSyncProcessor.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2020 RSK Labs Ltd.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package co.rsk.net.light;\n+\n+import co.rsk.core.BlockDifficulty;\n+import co.rsk.core.bc.BlockChainStatus;\n+import co.rsk.crypto.Keccak256;\n+import co.rsk.net.eth.LightClientHandler;\n+import co.rsk.net.light.message.GetBlockHeaderMessage;\n+import co.rsk.net.light.message.StatusMessage;\n+import io.netty.channel.ChannelHandlerContext;\n+import org.ethereum.config.SystemProperties;\n+import org.ethereum.core.Block;\n+import org.ethereum.core.BlockHeader;\n+import org.ethereum.core.Blockchain;\n+import org.ethereum.core.Genesis;\n+import org.ethereum.crypto.HashUtil;\n+import org.ethereum.db.BlockStore;\n+import org.ethereum.net.message.ReasonCode;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+import static co.rsk.net.light.LightClientMessageCodes.*;\n+\n+\n+public class LightSyncProcessor {\n+\n+    private static final int MAX_PENDING_MESSAGES = 1;\n+    private static final int MAX_PEER_CONNECTIONS = 1;\n+    private SystemProperties config;\n+    private final Genesis genesis;\n+    private final BlockStore blockStore;\n+    private Blockchain blockchain;\n+    private final byte version;\n+    private static final Logger loggerNet = LoggerFactory.getLogger(\"lightnet\");\n+    private Map<LightPeer, LightStatus> peerStatuses = new HashMap<>();\n+    private Map<LightPeer, Boolean> txRelay = new HashMap<>();\n+    private long lastRequestedId;\n+    private final Map<Long, LightClientMessageCodes> pendingMessages;\n+\n+\n+    public LightSyncProcessor(SystemProperties config, Genesis genesis, BlockStore blockStore, Blockchain blockchain) {\n+        this.config = config;\n+        this.genesis = genesis;\n+        this.blockStore = blockStore;\n+        this.blockchain = blockchain;\n+        this.version = (byte) 0;\n+        this.pendingMessages = new LinkedHashMap<Long, LightClientMessageCodes>() {\n+            @Override\n+            protected boolean removeEldestEntry(Map.Entry<Long, LightClientMessageCodes> eldest) {\n+                boolean shouldDiscard = size() > MAX_PENDING_MESSAGES;\n+                if (shouldDiscard) {\n+                    loggerNet.trace(\"Pending {}@{} DISCARDED\", eldest.getValue(), eldest.getKey());\n+                }\n+                return shouldDiscard;\n+            }\n+        };\n+    }\n+\n+    public void processStatusMessage(StatusMessage msg, LightPeer lightPeer, ChannelHandlerContext ctx, LightClientHandler lightClientHandler) {\n+        LightStatus status = msg.getStatus();\n+        try {\n+            String bestHashLog = HashUtil.shortHash(status.getBestHash());\n+            loggerNet.debug(\"Receiving Status - block {} {}\", status.getBestNumber(), bestHashLog);\n+\n+            byte protocolVersion = status.getProtocolVersion();\n+            if (protocolVersion != version) {\n+                loggerNet.info(\"Removing LCHandler for {} due to protocol incompatibility\", ctx.channel().remoteAddress());\n+                loggerNet.info(\"Protocol version {} - message protocol version {}\",\n+                        version,\n+                        protocolVersion);\n+                lightPeer.disconnect(ReasonCode.INCOMPATIBLE_PROTOCOL);\n+                ctx.pipeline().remove(lightClientHandler); // Peer is not compatible for the 'lc' sub-protocol\n+                return;\n+            }\n+\n+            int networkId = config.networkId();\n+            int msgNetworkId = status.getNetworkId();\n+            if (msgNetworkId != networkId) {\n+                loggerNet.info(\"Removing LCHandler for {} due to invalid network\", ctx.channel().remoteAddress());\n+                loggerNet.info(\"Different network received: config network ID {} - message network ID {}\",\n+                        networkId, msgNetworkId);\n+                lightPeer.disconnect(ReasonCode.NULL_IDENTITY);\n+                ctx.pipeline().remove(lightClientHandler);\n+                return;\n+            }\n+\n+            Keccak256 genesisHash = genesis.getHash();\n+            Keccak256 msgGenesisHash = new Keccak256(status.getGenesisHash());\n+            if (!msgGenesisHash.equals(genesisHash)) {\n+                loggerNet.info(\"Removing LCHandler for {} due to unexpected genesis\", ctx.channel().remoteAddress());\n+                loggerNet.info(\"Config genesis hash {} - message genesis hash {}\",\n+                        genesisHash, msgGenesisHash);\n+                lightPeer.disconnect(ReasonCode.UNEXPECTED_GENESIS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad9527f250d51cca20e951ef97762b428c2886d"}, "originalPosition": 115}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NDQwMjU5", "url": "https://github.com/rsksmart/rskj/pull/1184#pullrequestreview-419440259", "createdAt": "2020-05-27T17:12:16Z", "commit": {"oid": "0ad9527f250d51cca20e951ef97762b428c2886d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzoxMjoxNlrOGbU8AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzoxMjoxNlrOGbU8AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwNzc3Ng==", "bodyText": "I don't understand this line nor the usage of the Map. Why use a Map for what essentially could be an int? why you don't disconnect in this case? Shouldn't there be a mechanism to account for disconnections?", "url": "https://github.com/rsksmart/rskj/pull/1184#discussion_r431307776", "createdAt": "2020-05-27T17:12:16Z", "author": {"login": "nicops"}, "path": "rskj-core/src/main/java/co/rsk/net/light/LightSyncProcessor.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2020 RSK Labs Ltd.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package co.rsk.net.light;\n+\n+import co.rsk.core.BlockDifficulty;\n+import co.rsk.core.bc.BlockChainStatus;\n+import co.rsk.crypto.Keccak256;\n+import co.rsk.net.eth.LightClientHandler;\n+import co.rsk.net.light.message.GetBlockHeaderMessage;\n+import co.rsk.net.light.message.StatusMessage;\n+import io.netty.channel.ChannelHandlerContext;\n+import org.ethereum.config.SystemProperties;\n+import org.ethereum.core.Block;\n+import org.ethereum.core.BlockHeader;\n+import org.ethereum.core.Blockchain;\n+import org.ethereum.core.Genesis;\n+import org.ethereum.crypto.HashUtil;\n+import org.ethereum.db.BlockStore;\n+import org.ethereum.net.message.ReasonCode;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+import static co.rsk.net.light.LightClientMessageCodes.*;\n+\n+\n+public class LightSyncProcessor {\n+\n+    private static final int MAX_PENDING_MESSAGES = 1;\n+    private static final int MAX_PEER_CONNECTIONS = 1;\n+    private SystemProperties config;\n+    private final Genesis genesis;\n+    private final BlockStore blockStore;\n+    private Blockchain blockchain;\n+    private final byte version;\n+    private static final Logger loggerNet = LoggerFactory.getLogger(\"lightnet\");\n+    private Map<LightPeer, LightStatus> peerStatuses = new HashMap<>();\n+    private Map<LightPeer, Boolean> txRelay = new HashMap<>();\n+    private long lastRequestedId;\n+    private final Map<Long, LightClientMessageCodes> pendingMessages;\n+\n+\n+    public LightSyncProcessor(SystemProperties config, Genesis genesis, BlockStore blockStore, Blockchain blockchain) {\n+        this.config = config;\n+        this.genesis = genesis;\n+        this.blockStore = blockStore;\n+        this.blockchain = blockchain;\n+        this.version = (byte) 0;\n+        this.pendingMessages = new LinkedHashMap<Long, LightClientMessageCodes>() {\n+            @Override\n+            protected boolean removeEldestEntry(Map.Entry<Long, LightClientMessageCodes> eldest) {\n+                boolean shouldDiscard = size() > MAX_PENDING_MESSAGES;\n+                if (shouldDiscard) {\n+                    loggerNet.trace(\"Pending {}@{} DISCARDED\", eldest.getValue(), eldest.getKey());\n+                }\n+                return shouldDiscard;\n+            }\n+        };\n+    }\n+\n+    public void processStatusMessage(StatusMessage msg, LightPeer lightPeer, ChannelHandlerContext ctx, LightClientHandler lightClientHandler) {\n+        LightStatus status = msg.getStatus();\n+        try {\n+            String bestHashLog = HashUtil.shortHash(status.getBestHash());\n+            loggerNet.debug(\"Receiving Status - block {} {}\", status.getBestNumber(), bestHashLog);\n+\n+            byte protocolVersion = status.getProtocolVersion();\n+            if (protocolVersion != version) {\n+                loggerNet.info(\"Removing LCHandler for {} due to protocol incompatibility\", ctx.channel().remoteAddress());\n+                loggerNet.info(\"Protocol version {} - message protocol version {}\",\n+                        version,\n+                        protocolVersion);\n+                lightPeer.disconnect(ReasonCode.INCOMPATIBLE_PROTOCOL);\n+                ctx.pipeline().remove(lightClientHandler); // Peer is not compatible for the 'lc' sub-protocol\n+                return;\n+            }\n+\n+            int networkId = config.networkId();\n+            int msgNetworkId = status.getNetworkId();\n+            if (msgNetworkId != networkId) {\n+                loggerNet.info(\"Removing LCHandler for {} due to invalid network\", ctx.channel().remoteAddress());\n+                loggerNet.info(\"Different network received: config network ID {} - message network ID {}\",\n+                        networkId, msgNetworkId);\n+                lightPeer.disconnect(ReasonCode.NULL_IDENTITY);\n+                ctx.pipeline().remove(lightClientHandler);\n+                return;\n+            }\n+\n+            Keccak256 genesisHash = genesis.getHash();\n+            Keccak256 msgGenesisHash = new Keccak256(status.getGenesisHash());\n+            if (!msgGenesisHash.equals(genesisHash)) {\n+                loggerNet.info(\"Removing LCHandler for {} due to unexpected genesis\", ctx.channel().remoteAddress());\n+                loggerNet.info(\"Config genesis hash {} - message genesis hash {}\",\n+                        genesisHash, msgGenesisHash);\n+                lightPeer.disconnect(ReasonCode.UNEXPECTED_GENESIS);\n+                ctx.pipeline().remove(lightClientHandler);\n+                return;\n+            }\n+        } catch (NoSuchElementException e) {\n+            loggerNet.debug(\"LCHandler already removed - exception: {}\", e.getMessage());\n+        }\n+\n+        if (peerStatuses.size() >= MAX_PEER_CONNECTIONS) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad9527f250d51cca20e951ef97762b428c2886d"}, "originalPosition": 123}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NDQwMzky", "url": "https://github.com/rsksmart/rskj/pull/1184#pullrequestreview-419440392", "createdAt": "2020-05-27T17:12:26Z", "commit": {"oid": "0ad9527f250d51cca20e951ef97762b428c2886d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzoxMjoyN1rOGbU8aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzoxMjoyN1rOGbU8aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwNzg4Mw==", "bodyText": "This is always false, except on the unit tests. Right?", "url": "https://github.com/rsksmart/rskj/pull/1184#discussion_r431307883", "createdAt": "2020-05-27T17:12:27Z", "author": {"login": "nicops"}, "path": "rskj-core/src/main/java/co/rsk/net/light/LightSyncProcessor.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2020 RSK Labs Ltd.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package co.rsk.net.light;\n+\n+import co.rsk.core.BlockDifficulty;\n+import co.rsk.core.bc.BlockChainStatus;\n+import co.rsk.crypto.Keccak256;\n+import co.rsk.net.eth.LightClientHandler;\n+import co.rsk.net.light.message.GetBlockHeaderMessage;\n+import co.rsk.net.light.message.StatusMessage;\n+import io.netty.channel.ChannelHandlerContext;\n+import org.ethereum.config.SystemProperties;\n+import org.ethereum.core.Block;\n+import org.ethereum.core.BlockHeader;\n+import org.ethereum.core.Blockchain;\n+import org.ethereum.core.Genesis;\n+import org.ethereum.crypto.HashUtil;\n+import org.ethereum.db.BlockStore;\n+import org.ethereum.net.message.ReasonCode;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+import static co.rsk.net.light.LightClientMessageCodes.*;\n+\n+\n+public class LightSyncProcessor {\n+\n+    private static final int MAX_PENDING_MESSAGES = 1;\n+    private static final int MAX_PEER_CONNECTIONS = 1;\n+    private SystemProperties config;\n+    private final Genesis genesis;\n+    private final BlockStore blockStore;\n+    private Blockchain blockchain;\n+    private final byte version;\n+    private static final Logger loggerNet = LoggerFactory.getLogger(\"lightnet\");\n+    private Map<LightPeer, LightStatus> peerStatuses = new HashMap<>();\n+    private Map<LightPeer, Boolean> txRelay = new HashMap<>();\n+    private long lastRequestedId;\n+    private final Map<Long, LightClientMessageCodes> pendingMessages;\n+\n+\n+    public LightSyncProcessor(SystemProperties config, Genesis genesis, BlockStore blockStore, Blockchain blockchain) {\n+        this.config = config;\n+        this.genesis = genesis;\n+        this.blockStore = blockStore;\n+        this.blockchain = blockchain;\n+        this.version = (byte) 0;\n+        this.pendingMessages = new LinkedHashMap<Long, LightClientMessageCodes>() {\n+            @Override\n+            protected boolean removeEldestEntry(Map.Entry<Long, LightClientMessageCodes> eldest) {\n+                boolean shouldDiscard = size() > MAX_PENDING_MESSAGES;\n+                if (shouldDiscard) {\n+                    loggerNet.trace(\"Pending {}@{} DISCARDED\", eldest.getValue(), eldest.getKey());\n+                }\n+                return shouldDiscard;\n+            }\n+        };\n+    }\n+\n+    public void processStatusMessage(StatusMessage msg, LightPeer lightPeer, ChannelHandlerContext ctx, LightClientHandler lightClientHandler) {\n+        LightStatus status = msg.getStatus();\n+        try {\n+            String bestHashLog = HashUtil.shortHash(status.getBestHash());\n+            loggerNet.debug(\"Receiving Status - block {} {}\", status.getBestNumber(), bestHashLog);\n+\n+            byte protocolVersion = status.getProtocolVersion();\n+            if (protocolVersion != version) {\n+                loggerNet.info(\"Removing LCHandler for {} due to protocol incompatibility\", ctx.channel().remoteAddress());\n+                loggerNet.info(\"Protocol version {} - message protocol version {}\",\n+                        version,\n+                        protocolVersion);\n+                lightPeer.disconnect(ReasonCode.INCOMPATIBLE_PROTOCOL);\n+                ctx.pipeline().remove(lightClientHandler); // Peer is not compatible for the 'lc' sub-protocol\n+                return;\n+            }\n+\n+            int networkId = config.networkId();\n+            int msgNetworkId = status.getNetworkId();\n+            if (msgNetworkId != networkId) {\n+                loggerNet.info(\"Removing LCHandler for {} due to invalid network\", ctx.channel().remoteAddress());\n+                loggerNet.info(\"Different network received: config network ID {} - message network ID {}\",\n+                        networkId, msgNetworkId);\n+                lightPeer.disconnect(ReasonCode.NULL_IDENTITY);\n+                ctx.pipeline().remove(lightClientHandler);\n+                return;\n+            }\n+\n+            Keccak256 genesisHash = genesis.getHash();\n+            Keccak256 msgGenesisHash = new Keccak256(status.getGenesisHash());\n+            if (!msgGenesisHash.equals(genesisHash)) {\n+                loggerNet.info(\"Removing LCHandler for {} due to unexpected genesis\", ctx.channel().remoteAddress());\n+                loggerNet.info(\"Config genesis hash {} - message genesis hash {}\",\n+                        genesisHash, msgGenesisHash);\n+                lightPeer.disconnect(ReasonCode.UNEXPECTED_GENESIS);\n+                ctx.pipeline().remove(lightClientHandler);\n+                return;\n+            }\n+        } catch (NoSuchElementException e) {\n+            loggerNet.debug(\"LCHandler already removed - exception: {}\", e.getMessage());\n+        }\n+\n+        if (peerStatuses.size() >= MAX_PEER_CONNECTIONS) {\n+            return;\n+        }\n+\n+        if (!hasLowerDifficulty(status)) {\n+            return;\n+        }\n+\n+        peerStatuses.put(lightPeer, status);\n+\n+        if (msg.isTxRelay()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad9527f250d51cca20e951ef97762b428c2886d"}, "originalPosition": 133}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NDQwNzE1", "url": "https://github.com/rsksmart/rskj/pull/1184#pullrequestreview-419440715", "createdAt": "2020-05-27T17:12:51Z", "commit": {"oid": "0ad9527f250d51cca20e951ef97762b428c2886d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzoxMjo1MVrOGbU9hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzoxMjo1MVrOGbU9hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwODE2NQ==", "bodyText": "hasTxRelay should have a @VisibleForTesting annotation, or similar. Because it is a method ONLY for testing", "url": "https://github.com/rsksmart/rskj/pull/1184#discussion_r431308165", "createdAt": "2020-05-27T17:12:51Z", "author": {"login": "nicops"}, "path": "rskj-core/src/main/java/co/rsk/net/light/LightSyncProcessor.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2020 RSK Labs Ltd.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package co.rsk.net.light;\n+\n+import co.rsk.core.BlockDifficulty;\n+import co.rsk.core.bc.BlockChainStatus;\n+import co.rsk.crypto.Keccak256;\n+import co.rsk.net.eth.LightClientHandler;\n+import co.rsk.net.light.message.GetBlockHeaderMessage;\n+import co.rsk.net.light.message.StatusMessage;\n+import io.netty.channel.ChannelHandlerContext;\n+import org.ethereum.config.SystemProperties;\n+import org.ethereum.core.Block;\n+import org.ethereum.core.BlockHeader;\n+import org.ethereum.core.Blockchain;\n+import org.ethereum.core.Genesis;\n+import org.ethereum.crypto.HashUtil;\n+import org.ethereum.db.BlockStore;\n+import org.ethereum.net.message.ReasonCode;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+import static co.rsk.net.light.LightClientMessageCodes.*;\n+\n+\n+public class LightSyncProcessor {\n+\n+    private static final int MAX_PENDING_MESSAGES = 1;\n+    private static final int MAX_PEER_CONNECTIONS = 1;\n+    private SystemProperties config;\n+    private final Genesis genesis;\n+    private final BlockStore blockStore;\n+    private Blockchain blockchain;\n+    private final byte version;\n+    private static final Logger loggerNet = LoggerFactory.getLogger(\"lightnet\");\n+    private Map<LightPeer, LightStatus> peerStatuses = new HashMap<>();\n+    private Map<LightPeer, Boolean> txRelay = new HashMap<>();\n+    private long lastRequestedId;\n+    private final Map<Long, LightClientMessageCodes> pendingMessages;\n+\n+\n+    public LightSyncProcessor(SystemProperties config, Genesis genesis, BlockStore blockStore, Blockchain blockchain) {\n+        this.config = config;\n+        this.genesis = genesis;\n+        this.blockStore = blockStore;\n+        this.blockchain = blockchain;\n+        this.version = (byte) 0;\n+        this.pendingMessages = new LinkedHashMap<Long, LightClientMessageCodes>() {\n+            @Override\n+            protected boolean removeEldestEntry(Map.Entry<Long, LightClientMessageCodes> eldest) {\n+                boolean shouldDiscard = size() > MAX_PENDING_MESSAGES;\n+                if (shouldDiscard) {\n+                    loggerNet.trace(\"Pending {}@{} DISCARDED\", eldest.getValue(), eldest.getKey());\n+                }\n+                return shouldDiscard;\n+            }\n+        };\n+    }\n+\n+    public void processStatusMessage(StatusMessage msg, LightPeer lightPeer, ChannelHandlerContext ctx, LightClientHandler lightClientHandler) {\n+        LightStatus status = msg.getStatus();\n+        try {\n+            String bestHashLog = HashUtil.shortHash(status.getBestHash());\n+            loggerNet.debug(\"Receiving Status - block {} {}\", status.getBestNumber(), bestHashLog);\n+\n+            byte protocolVersion = status.getProtocolVersion();\n+            if (protocolVersion != version) {\n+                loggerNet.info(\"Removing LCHandler for {} due to protocol incompatibility\", ctx.channel().remoteAddress());\n+                loggerNet.info(\"Protocol version {} - message protocol version {}\",\n+                        version,\n+                        protocolVersion);\n+                lightPeer.disconnect(ReasonCode.INCOMPATIBLE_PROTOCOL);\n+                ctx.pipeline().remove(lightClientHandler); // Peer is not compatible for the 'lc' sub-protocol\n+                return;\n+            }\n+\n+            int networkId = config.networkId();\n+            int msgNetworkId = status.getNetworkId();\n+            if (msgNetworkId != networkId) {\n+                loggerNet.info(\"Removing LCHandler for {} due to invalid network\", ctx.channel().remoteAddress());\n+                loggerNet.info(\"Different network received: config network ID {} - message network ID {}\",\n+                        networkId, msgNetworkId);\n+                lightPeer.disconnect(ReasonCode.NULL_IDENTITY);\n+                ctx.pipeline().remove(lightClientHandler);\n+                return;\n+            }\n+\n+            Keccak256 genesisHash = genesis.getHash();\n+            Keccak256 msgGenesisHash = new Keccak256(status.getGenesisHash());\n+            if (!msgGenesisHash.equals(genesisHash)) {\n+                loggerNet.info(\"Removing LCHandler for {} due to unexpected genesis\", ctx.channel().remoteAddress());\n+                loggerNet.info(\"Config genesis hash {} - message genesis hash {}\",\n+                        genesisHash, msgGenesisHash);\n+                lightPeer.disconnect(ReasonCode.UNEXPECTED_GENESIS);\n+                ctx.pipeline().remove(lightClientHandler);\n+                return;\n+            }\n+        } catch (NoSuchElementException e) {\n+            loggerNet.debug(\"LCHandler already removed - exception: {}\", e.getMessage());\n+        }\n+\n+        if (peerStatuses.size() >= MAX_PEER_CONNECTIONS) {\n+            return;\n+        }\n+\n+        if (!hasLowerDifficulty(status)) {\n+            return;\n+        }\n+\n+        peerStatuses.put(lightPeer, status);\n+\n+        if (msg.isTxRelay()) {\n+            txRelay.put(lightPeer, true);\n+        }\n+\n+        byte[] bestBlockHash = status.getBestHash();\n+        GetBlockHeaderMessage blockHeaderMessage = new GetBlockHeaderMessage(++lastRequestedId, bestBlockHash);\n+        pendingMessages.put(lastRequestedId, BLOCK_HEADER);\n+        lightPeer.sendMessage(blockHeaderMessage);\n+    }\n+\n+    public void sendStatusMessage(LightPeer lightPeer) {\n+        Block block = blockStore.getBestBlock();\n+        LightStatus status = getCurrentStatus(block);\n+        StatusMessage statusMessage = new StatusMessage(0L, status, false);\n+\n+        lightPeer.sendMessage(statusMessage);\n+\n+        loggerNet.trace(\"Sending status best block {} to {}\",\n+                block.getNumber(), lightPeer.getPeerIdShort());\n+    }\n+\n+    public void processBlockHeaderMessage(long id, BlockHeader blockHeader, LightPeer lightPeer) {\n+        if (!isPending(id, BLOCK_HEADER)) {\n+            return;\n+        }\n+\n+        pendingMessages.remove(id, BLOCK_HEADER);\n+        lightPeer.receivedBlock(blockHeader);\n+    }\n+\n+    public boolean hasTxRelay(LightPeer peer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad9527f250d51cca20e951ef97762b428c2886d"}, "originalPosition": 163}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NDQxMjUw", "url": "https://github.com/rsksmart/rskj/pull/1184#pullrequestreview-419441250", "createdAt": "2020-05-27T17:13:33Z", "commit": {"oid": "0ad9527f250d51cca20e951ef97762b428c2886d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzoxMzozM1rOGbU_Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzoxMzozM1rOGbU_Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwODU1OQ==", "bodyText": "To ask for the presence is a pattern that reoccurs through the code, but it is bad pattern: this should be set in reference.conf, that assures that the value can never be null. Besides that, lc should not be a default", "url": "https://github.com/rsksmart/rskj/pull/1184#discussion_r431308559", "createdAt": "2020-05-27T17:13:33Z", "author": {"login": "nicops"}, "path": "rskj-core/src/main/java/org/ethereum/config/SystemProperties.java", "diffHunk": "@@ -318,7 +318,7 @@ public String helloPhrase() {\n     }\n \n     public List<String> peerCapabilities() {\n-        return configFromFiles.hasPath(\"peer.capabilities\") ?  configFromFiles.getStringList(\"peer.capabilities\") : new ArrayList<>(Arrays.asList(\"rsk\"));\n+        return configFromFiles.hasPath(\"peer.capabilities\") ?  configFromFiles.getStringList(\"peer.capabilities\") : new ArrayList<>(Arrays.asList(\"rsk\",\"lc\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad9527f250d51cca20e951ef97762b428c2886d"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NDQyMzIw", "url": "https://github.com/rsksmart/rskj/pull/1184#pullrequestreview-419442320", "createdAt": "2020-05-27T17:14:58Z", "commit": {"oid": "0ad9527f250d51cca20e951ef97762b428c2886d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzoxNDo1OVrOGbVCNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzoxNDo1OVrOGbVCNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwOTM2NA==", "bodyText": "Like ajl says on his blog https://blogs.msmvps.com/lopez/2012/08/09/tdd-unit-tests-and-mocks/ it's undesirable to mock so much when testing. Ideally, we should have factories to build these objects for us, it is a strong smell to resort to mock all these classes, especially domain classes like Block and Transaction, since it's not exactly the external, unpredictable world the one we're mocking.\nThere is a BlockBuilder class for this, it might be a bit unwieldy for the purposes of this test, but I think it merits trying to make efforts in order to make non mocking tests easy to code.", "url": "https://github.com/rsksmart/rskj/pull/1184#discussion_r431309364", "createdAt": "2020-05-27T17:14:59Z", "author": {"login": "nicops"}, "path": "rskj-core/src/test/java/co/rsk/net/LightProcessorTest.java", "diffHunk": "@@ -0,0 +1,412 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2020 RSK Labs Ltd.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package co.rsk.net;\n+\n+import co.rsk.core.Coin;\n+import co.rsk.core.RskAddress;\n+import co.rsk.crypto.Keccak256;\n+import co.rsk.db.RepositoryLocator;\n+import co.rsk.db.RepositorySnapshot;\n+import co.rsk.net.light.LightPeer;\n+import co.rsk.net.light.LightProcessor;\n+import co.rsk.net.light.message.*;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.ethereum.core.*;\n+import org.ethereum.crypto.HashUtil;\n+import org.ethereum.db.BlockStore;\n+import org.ethereum.db.TransactionInfo;\n+import org.ethereum.net.MessageQueue;\n+import org.ethereum.net.server.Channel;\n+import org.ethereum.vm.DataWord;\n+import org.ethereum.vm.LogInfo;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+\n+import java.math.BigInteger;\n+import java.util.ArrayList;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import static org.ethereum.TestUtils.*;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.mockito.ArgumentCaptor.forClass;\n+import static org.mockito.Mockito.*;\n+\n+/**\n+ * Created by Julian Len and Sebastian Sicardi on 20/10/19.\n+ */\n+public class LightProcessorTest {\n+\n+    private static final byte[] HASH_1 = HashUtil.sha256(new byte[]{1});\n+\n+    private Blockchain blockchain;\n+    private BlockStore blockStore;\n+    private LightProcessor lightProcessor;\n+    private MessageQueue msgQueue;\n+    private Keccak256 blockHash;\n+    private RepositoryLocator repositoryLocator;\n+    private LightPeer lightPeer;\n+\n+    @Before\n+    public void setup(){\n+        blockchain = mock(Blockchain.class);\n+        blockStore = mock(BlockStore.class);\n+        repositoryLocator = mock(RepositoryLocator.class);\n+        lightProcessor = new LightProcessor(blockchain, blockStore, repositoryLocator);\n+        msgQueue = spy(MessageQueue.class);\n+        blockHash = new Keccak256(HASH_1);\n+        lightPeer = new LightPeer(mock(Channel.class), msgQueue);\n+    }\n+\n+    @Test\n+    public void processGetBlockReceiptMessageAndShouldReturnsReceiptsCorrectly() {\n+        List<Transaction> txs = new LinkedList<>();\n+        long requestId = 0;\n+        List<TransactionReceipt> receipts = new LinkedList<>();\n+        TransactionReceipt receipt = createReceipt();\n+        receipts.add(receipt);\n+        final Block block = mock(Block.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad9527f250d51cca20e951ef97762b428c2886d"}, "originalPosition": 85}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NDQyNjk1", "url": "https://github.com/rsksmart/rskj/pull/1184#pullrequestreview-419442695", "createdAt": "2020-05-27T17:15:28Z", "commit": {"oid": "0ad9527f250d51cca20e951ef97762b428c2886d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMzk4NDUx", "url": "https://github.com/rsksmart/rskj/pull/1184#pullrequestreview-420398451", "createdAt": "2020-05-28T18:54:11Z", "commit": {"oid": "0ad9527f250d51cca20e951ef97762b428c2886d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af5a0c686bccb510f213a61766678928f9807259", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/af5a0c686bccb510f213a61766678928f9807259", "committedDate": "2020-06-01T14:32:22Z", "message": "lightprocessor added"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da7681997a189b7887101e63a2f64ddd6fb92ad2", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/da7681997a189b7887101e63a2f64ddd6fb92ad2", "committedDate": "2020-06-01T14:32:22Z", "message": "BlockReceipts added to LightProcessor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57f1d344e6983f004657457177cb7fa49c0fbfa2", "author": {"user": {"login": "smcsicardi", "name": "Sebastian Sicardi"}}, "url": "https://github.com/rsksmart/rskj/commit/57f1d344e6983f004657457177cb7fa49c0fbfa2", "committedDate": "2020-06-01T14:32:22Z", "message": "implemented TransactionIndex messages (Request and Response)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce3b66f57ee37d56f7e073cc57dd0dc01b6c29ed", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/ce3b66f57ee37d56f7e073cc57dd0dc01b6c29ed", "committedDate": "2020-06-01T14:32:22Z", "message": "blockstore and locatorRepository added in lightprocessor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e2bffdd96166e2ae4ec55edb941e5e8d587d288", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/8e2bffdd96166e2ae4ec55edb941e5e8d587d288", "committedDate": "2020-06-01T14:32:22Z", "message": "CodeRequestMessage added"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db9281b8fb7742334f8d14b92dda3e3e1aa6a23d", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/db9281b8fb7742334f8d14b92dda3e3e1aa6a23d", "committedDate": "2020-06-01T14:32:22Z", "message": "lightClient added as capability in Capability class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff197eedc0624019d74bc328f2db6b99b216f0d6", "author": {"user": {"login": "smcsicardi", "name": "Sebastian Sicardi"}}, "url": "https://github.com/rsksmart/rskj/commit/ff197eedc0624019d74bc328f2db6b99b216f0d6", "committedDate": "2020-06-01T14:32:22Z", "message": "init lightclienthandler\n\n\u00b7added LinkedList<>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c158230d6933ee8856ff13de0f60235e7b7eace", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/6c158230d6933ee8856ff13de0f60235e7b7eace", "committedDate": "2020-06-01T14:32:22Z", "message": "lc as default capability"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb4f5e52f781b53049cc95038c473d8ae01fd54f", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/cb4f5e52f781b53049cc95038c473d8ae01fd54f", "committedDate": "2020-06-01T14:32:22Z", "message": "LightClientMessage added"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03970a5d2357616cdae13b81fd4af9bfed9b3ea6", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/03970a5d2357616cdae13b81fd4af9bfed9b3ea6", "committedDate": "2020-06-01T14:32:22Z", "message": "lightprocessor added"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a694b0cb034fa39f7abbafde6581a759f19d01f", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/0a694b0cb034fa39f7abbafde6581a759f19d01f", "committedDate": "2020-06-01T14:32:22Z", "message": "LightClient Receipts messages (#1194)\n\n* GetBlockReceipts and BlockReceipts messages added and tested\r\n\r\n* delete blockreceipts(response/request) unused classes\r\n\r\n* messages added in both lightClientHandler and lightProcessor\r\n\r\n* initialize code instance variables in BlockReceipt y GetBlockReceipts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c05b4a9aba442f75e7530b0f0de3d0aab95c26ba", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/c05b4a9aba442f75e7530b0f0de3d0aab95c26ba", "committedDate": "2020-06-01T14:32:22Z", "message": "Code and GetCode messages (#1197)\n\n* GetCode and Code messages added\r\n\r\n* Code(request/response) message deleted from unused classes\r\n\r\n* CodeMessage and GetCodeMessage added in LightClientHandler and LightProcessor, also in its tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "777f76a480d9b711efa648dc96f2899fe8afca48", "author": {"user": {"login": "smcsicardi", "name": "Sebastian Sicardi"}}, "url": "https://github.com/rsksmart/rskj/commit/777f76a480d9b711efa648dc96f2899fe8afca48", "committedDate": "2020-06-01T14:32:22Z", "message": "GetTransactionIndex and TransactionIndex Messages (#1198)\n\n* init transaction index\r\n\r\n* WIP transactions\r\n\r\n* finished messages\r\n\r\n* added txidx to handler\r\n\r\n* fixed answer message return\r\n\r\n* hooked up to lightprocessor\r\n\r\n* len's changes\r\n\r\n* deleted old messages\r\n\r\n* rename classes\r\n\r\n* init tests\r\n\r\n* added tests for txindex\r\n\r\n* finish tests txindex\r\n\r\n* finish tests\r\n\r\n* fix sonarcould issues\r\n\r\n* code review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4a00b0b67476653671e24325ab0762dbe2a3136", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/b4a00b0b67476653671e24325ab0762dbe2a3136", "committedDate": "2020-06-01T14:32:22Z", "message": "Add break in lightclienthandler for BLOCK_RECEIPTS msg"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02fa3379463bab8def9651a87e8b16a825475a6b", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/02fa3379463bab8def9651a87e8b16a825475a6b", "committedDate": "2020-06-01T14:32:22Z", "message": "GetBlockHeader and BlockHeader messages (#1204)\n\n* BlockHeader and GetBlockHeader messages added\r\n\r\n* Added getBlockHeader and blockHeader in lightProcessor and lightClientHandler, everything tested"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f74623ff1ff81f47c33e23bf878a1793394e258", "author": {"user": {"login": "smcsicardi", "name": "Sebastian Sicardi"}}, "url": "https://github.com/rsksmart/rskj/commit/1f74623ff1ff81f47c33e23bf878a1793394e258", "committedDate": "2020-06-01T14:32:22Z", "message": "Light client GetAccounts and Accounts Messages (#1206)\n\n* added accounts response funcionality\r\n\r\n* accounts message tests\r\n\r\n* added headers\r\n\r\n* more headers hehe\r\n\r\n* changed last message code in inRange method\r\n\r\n* Fixed some typos and better error handling on tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b98515c22fde0a498b8d2c49ba71cd3856f5b473", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/b98515c22fde0a498b8d2c49ba71cd3856f5b473", "committedDate": "2020-06-01T14:32:22Z", "message": "Status message (#1200)\n\n* change test message for status message adding the latest\r\n\r\n* create and test StatusMessage, also addd it to lightProcessor and lightClientHandler, processStatusMessage is not implemented\r\n\r\n* added LightSyncProcessoras manager for sync messaged, tested processStatus\r\n\r\n* lightPeer added as channel wrapper\r\n\r\n* Create Status as class\r\n\r\n* processing blockheader after status. Also tested"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9300c154762e1bd07c4935815c977ade2eca268", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/d9300c154762e1bd07c4935815c977ade2eca268", "committedDate": "2020-06-01T14:32:22Z", "message": "Light client block body message (#1214)\n\n* BlockBody and GetBlockBody messages created and tested\r\n\r\n* GetBlockBody and BlockBody added in lightprocessor and in light handler, both were tested"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6def0b75d20bc039a9ed8aaa430eea630b2c70f", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/a6def0b75d20bc039a9ed8aaa430eea630b2c70f", "committedDate": "2020-06-01T14:32:22Z", "message": "changed logs in light processor (#1219)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a81fb50381fb6f21c054db5504919681a5fc1ad", "author": {"user": {"login": "smcsicardi", "name": "Sebastian Sicardi"}}, "url": "https://github.com/rsksmart/rskj/commit/7a81fb50381fb6f21c054db5504919681a5fc1ad", "committedDate": "2020-06-01T14:32:22Z", "message": "GetStorage and Storage Messages (#1217)\n\n* init storage messages\r\n\r\n* get storage functionality\r\n\r\n* tests!\r\n\r\n* headers\r\n\r\n* forgotten break\r\n\r\n* changes! (from juli's review)\r\n\r\n* fix sonar cloud issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fad593f53687015a95f954a383b413648c71cc8", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/4fad593f53687015a95f954a383b413648c71cc8", "committedDate": "2020-06-01T14:32:22Z", "message": "Fix and enhance testing (#1220)\n\n* tests cases in which RLP desencode as null, it's when message fields are in zero\n\n* pipeline run"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9762917580f032f5b67b2861e21f1bb423599302", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/9762917580f032f5b67b2861e21f1bb423599302", "committedDate": "2020-06-01T14:32:22Z", "message": "processStatusMessage fixed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cb14b04f5f809764243c17e41c019584f72e725", "author": {"user": {"login": "smcsicardi", "name": "Sebastian Sicardi"}}, "url": "https://github.com/rsksmart/rskj/commit/4cb14b04f5f809764243c17e41c019584f72e725", "committedDate": "2020-06-01T14:32:22Z", "message": "Message Visitor for the light client handler (#1223)\n\n* added visitor\r\n* header"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "404fe48d700d76c70626e82a58217679fc89b5ee", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/404fe48d700d76c70626e82a58217679fc89b5ee", "committedDate": "2020-06-01T14:32:22Z", "message": "deleted unused logger in LightClientHandler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "359a4ca464be6d95f4d29f8d3e64228b98bb9a35", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/359a4ca464be6d95f4d29f8d3e64228b98bb9a35", "committedDate": "2020-06-01T14:32:22Z", "message": "TxRelay added as option in Status message handshake (#1224)\n\n* added txrelay as option in StatusMessage\r\n\r\n* txRelay added as lightpeer data"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2e57aabd09a7b16a828ccd697e8e7f6e8a7bee0", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/d2e57aabd09a7b16a828ccd697e8e7f6e8a7bee0", "committedDate": "2020-06-01T14:32:22Z", "message": "txRelay settled"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea41c50326d17ea8d93211e25ce555c9286b51eb", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/ea41c50326d17ea8d93211e25ce555c9286b51eb", "committedDate": "2020-06-01T14:32:22Z", "message": "toString methods in light client messages (#1244)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d447a74568d3218784e12fb411a1d7b77d1e55e", "author": {"user": {"login": "smcsicardi", "name": "Sebastian Sicardi"}}, "url": "https://github.com/rsksmart/rskj/commit/7d447a74568d3218784e12fb411a1d7b77d1e55e", "committedDate": "2020-06-01T14:32:22Z", "message": "Added todo comment and light client message visitor renaming (#1246)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3014011ae33e08dfaea7e714dada7fc0f4b6beaf", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/3014011ae33e08dfaea7e714dada7fc0f4b6beaf", "committedDate": "2020-06-01T14:32:22Z", "message": "Light processor fixes (#1247)\n\n* deleted an old comment\r\n\r\n* unified the variable name request id to id"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1824d74abe4efcce2e2d6f53123a5006529aef07", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/1824d74abe4efcce2e2d6f53123a5006529aef07", "committedDate": "2020-06-01T14:32:22Z", "message": "added VisibleForTesting tag to getBlock method in LightPeer (#1245)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dff1a0127c5b8f41cdcca48d055c430f10bac35d", "author": {"user": {"login": "julianlen", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/dff1a0127c5b8f41cdcca48d055c430f10bac35d", "committedDate": "2020-06-01T14:32:22Z", "message": "add RLP utils to decode some messages, also modified getEncoded() in some message too (#1250)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d36975d56495d15370d29c18ceca636fd3fc3d4", "author": {"user": {"login": "smcsicardi", "name": "Sebastian Sicardi"}}, "url": "https://github.com/rsksmart/rskj/commit/7d36975d56495d15370d29c18ceca636fd3fc3d4", "committedDate": "2020-06-01T14:32:22Z", "message": "Fix get code usage to follow protocol correctly (#1248)\n\n* fix get code usage to follow the protocol correctly\r\n\r\n* added null check\r\n\r\n* test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f076a57a1d3500ac253af322f29a3839b27e07a", "author": {"user": {"login": "smcsicardi", "name": "Sebastian Sicardi"}}, "url": "https://github.com/rsksmart/rskj/commit/1f076a57a1d3500ac253af322f29a3839b27e07a", "committedDate": "2020-06-01T14:32:22Z", "message": "Lc lightsync refactor (#1249)\n\n* posible refactior\r\n\r\n* better refactor\r\n\r\n* added visiblefortesting tag"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1e7f2e2a760d1dbec3c4c54c40d2a395371bac37", "author": {"user": {"login": "smcsicardi", "name": "Sebastian Sicardi"}}, "url": "https://github.com/rsksmart/rskj/commit/1e7f2e2a760d1dbec3c4c54c40d2a395371bac37", "committedDate": "2020-06-01T14:32:10Z", "message": "Lc lightsync refactor (#1249)\n\n* posible refactior\r\n\r\n* better refactor\r\n\r\n* added visiblefortesting tag"}, "afterCommit": {"oid": "1f076a57a1d3500ac253af322f29a3839b27e07a", "author": {"user": {"login": "smcsicardi", "name": "Sebastian Sicardi"}}, "url": "https://github.com/rsksmart/rskj/commit/1f076a57a1d3500ac253af322f29a3839b27e07a", "committedDate": "2020-06-01T14:32:22Z", "message": "Lc lightsync refactor (#1249)\n\n* posible refactior\r\n\r\n* better refactor\r\n\r\n* added visiblefortesting tag"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 668, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}