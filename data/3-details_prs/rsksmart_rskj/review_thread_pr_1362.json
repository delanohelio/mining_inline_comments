{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxNTE0MTY5", "number": 1362, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNDoxNDo0NlrOFGunIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxOTo0MTo1N1rOFG3_fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNTk5NDU3OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/util/TimeProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNDoxNDo0NlrOIH3kJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMzowNjowMlrOIJXnBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTEyMTMxOA==", "bodyText": "2020?", "url": "https://github.com/rsksmart/rskj/pull/1362#discussion_r545121318", "createdAt": "2020-12-17T14:14:46Z", "author": {"login": "patogallaiovlabs"}, "path": "rskj-core/src/main/java/co/rsk/util/TimeProvider.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2017 RSK Labs Ltd.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69cda482a2b6703a16f82a3c812e6dfb045002d9"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY5NDkxOA==", "bodyText": "done", "url": "https://github.com/rsksmart/rskj/pull/1362#discussion_r546694918", "createdAt": "2020-12-21T13:06:02Z", "author": {"login": "Vovchyk"}, "path": "rskj-core/src/main/java/co/rsk/util/TimeProvider.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2017 RSK Labs Ltd.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTEyMTMxOA=="}, "originalCommit": {"oid": "69cda482a2b6703a16f82a3c812e6dfb045002d9"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzQ5OTgyOnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/org/ethereum/config/blockchain/upgrades/ConsensusRule.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxOTozNDowMVrOIIFjfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMzowNjowOVrOIJXnVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM1MDUyNw==", "bodyText": "Could you leave a comment here, telling what #179 is all about, short comment (title?)?\nWe are trying to identify faster whats the main reason behind the code.", "url": "https://github.com/rsksmart/rskj/pull/1362#discussion_r545350527", "createdAt": "2020-12-17T19:34:01Z", "author": {"login": "patogallaiovlabs"}, "path": "rskj-core/src/main/java/org/ethereum/config/blockchain/upgrades/ConsensusRule.java", "diffHunk": "@@ -54,6 +54,7 @@\n     RSKIP171(\"rskip171\"),\n     RSKIP172(\"rskip172\"),\n     RSKIP174(\"rskip174\"),\n+    RSKIP179(\"rskip179\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69cda482a2b6703a16f82a3c812e6dfb045002d9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgyNTkzOA==", "bodyText": "you can find some details of this RSKIP here", "url": "https://github.com/rsksmart/rskj/pull/1362#discussion_r545825938", "createdAt": "2020-12-18T13:19:49Z", "author": {"login": "Vovchyk"}, "path": "rskj-core/src/main/java/org/ethereum/config/blockchain/upgrades/ConsensusRule.java", "diffHunk": "@@ -54,6 +54,7 @@\n     RSKIP171(\"rskip171\"),\n     RSKIP172(\"rskip172\"),\n     RSKIP174(\"rskip174\"),\n+    RSKIP179(\"rskip179\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM1MDUyNw=="}, "originalCommit": {"oid": "69cda482a2b6703a16f82a3c812e6dfb045002d9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY5NDk5OQ==", "bodyText": "done", "url": "https://github.com/rsksmart/rskj/pull/1362#discussion_r546694999", "createdAt": "2020-12-21T13:06:09Z", "author": {"login": "Vovchyk"}, "path": "rskj-core/src/main/java/org/ethereum/config/blockchain/upgrades/ConsensusRule.java", "diffHunk": "@@ -54,6 +54,7 @@\n     RSKIP171(\"rskip171\"),\n     RSKIP172(\"rskip172\"),\n     RSKIP174(\"rskip174\"),\n+    RSKIP179(\"rskip179\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM1MDUyNw=="}, "originalCommit": {"oid": "69cda482a2b6703a16f82a3c812e6dfb045002d9"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzUzMTUwOnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/validators/BlockTimeStampValidationRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxOTo0MTo1N1rOIIF2IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMzoyMjo0NlrOIIiqQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM1NTI5Ng==", "bodyText": "Its the same to use RegTestParams than MainNetParams in this logic class? Because I dont see any other use than this default constructor, so no matter which network we are, it will use regtest params.", "url": "https://github.com/rsksmart/rskj/pull/1362#discussion_r545355296", "createdAt": "2020-12-17T19:41:57Z", "author": {"login": "patogallaiovlabs"}, "path": "rskj-core/src/main/java/co/rsk/validators/BlockTimeStampValidationRule.java", "diffHunk": "@@ -18,22 +18,51 @@\n \n package co.rsk.validators;\n \n+import co.rsk.bitcoinj.core.BtcBlock;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import co.rsk.bitcoinj.params.RegTestParams;\n+import co.rsk.util.TimeProvider;\n+import org.ethereum.config.Constants;\n+import org.ethereum.config.blockchain.upgrades.ActivationConfig;\n+import org.ethereum.config.blockchain.upgrades.ConsensusRule;\n import org.ethereum.core.Block;\n import org.ethereum.core.BlockHeader;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.Objects;\n+\n /**\n  * Created by mario on 23/01/17.\n  */\n public class BlockTimeStampValidationRule implements BlockParentDependantValidationRule, BlockHeaderParentDependantValidationRule, BlockValidationRule, BlockHeaderValidationRule {\n \n     private static final Logger logger = LoggerFactory.getLogger(\"blockvalidator\");\n \n-    private int validPeriodLength;\n+    private static final long MAX_TIMESTAMPS_DIFF_IN_SECS = Constants.getMaxTimestampsDiffInSecs();\n+\n+    private final int validPeriodLength;\n+    private final ActivationConfig activationConfig;\n+    private final TimeProvider timeProvider;\n+    private final NetworkParameters bitcoinNetworkParameters;\n \n-    public BlockTimeStampValidationRule(int validPeriodLength) {\n+    public BlockTimeStampValidationRule(int validPeriodLength, ActivationConfig activationConfig,\n+                                        TimeProvider timeProvider, NetworkParameters bitcoinNetworkParameters) {\n         this.validPeriodLength = validPeriodLength;\n+        this.activationConfig = Objects.requireNonNull(activationConfig);\n+        this.timeProvider = Objects.requireNonNull(timeProvider);\n+        this.bitcoinNetworkParameters = Objects.requireNonNull(bitcoinNetworkParameters);\n+    }\n+\n+    public BlockTimeStampValidationRule(int validPeriodLength, ActivationConfig activationConfig,\n+                                        TimeProvider timeProvider) {\n+        this(validPeriodLength, activationConfig, timeProvider, RegTestParams.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69cda482a2b6703a16f82a3c812e6dfb045002d9"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgyNzM5Mg==", "bodyText": "Yes, this is bitcoin network params and only this RegTestParams is being used across our code base.", "url": "https://github.com/rsksmart/rskj/pull/1362#discussion_r545827392", "createdAt": "2020-12-18T13:22:46Z", "author": {"login": "Vovchyk"}, "path": "rskj-core/src/main/java/co/rsk/validators/BlockTimeStampValidationRule.java", "diffHunk": "@@ -18,22 +18,51 @@\n \n package co.rsk.validators;\n \n+import co.rsk.bitcoinj.core.BtcBlock;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import co.rsk.bitcoinj.params.RegTestParams;\n+import co.rsk.util.TimeProvider;\n+import org.ethereum.config.Constants;\n+import org.ethereum.config.blockchain.upgrades.ActivationConfig;\n+import org.ethereum.config.blockchain.upgrades.ConsensusRule;\n import org.ethereum.core.Block;\n import org.ethereum.core.BlockHeader;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.Objects;\n+\n /**\n  * Created by mario on 23/01/17.\n  */\n public class BlockTimeStampValidationRule implements BlockParentDependantValidationRule, BlockHeaderParentDependantValidationRule, BlockValidationRule, BlockHeaderValidationRule {\n \n     private static final Logger logger = LoggerFactory.getLogger(\"blockvalidator\");\n \n-    private int validPeriodLength;\n+    private static final long MAX_TIMESTAMPS_DIFF_IN_SECS = Constants.getMaxTimestampsDiffInSecs();\n+\n+    private final int validPeriodLength;\n+    private final ActivationConfig activationConfig;\n+    private final TimeProvider timeProvider;\n+    private final NetworkParameters bitcoinNetworkParameters;\n \n-    public BlockTimeStampValidationRule(int validPeriodLength) {\n+    public BlockTimeStampValidationRule(int validPeriodLength, ActivationConfig activationConfig,\n+                                        TimeProvider timeProvider, NetworkParameters bitcoinNetworkParameters) {\n         this.validPeriodLength = validPeriodLength;\n+        this.activationConfig = Objects.requireNonNull(activationConfig);\n+        this.timeProvider = Objects.requireNonNull(timeProvider);\n+        this.bitcoinNetworkParameters = Objects.requireNonNull(bitcoinNetworkParameters);\n+    }\n+\n+    public BlockTimeStampValidationRule(int validPeriodLength, ActivationConfig activationConfig,\n+                                        TimeProvider timeProvider) {\n+        this(validPeriodLength, activationConfig, timeProvider, RegTestParams.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM1NTI5Ng=="}, "originalCommit": {"oid": "69cda482a2b6703a16f82a3c812e6dfb045002d9"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4540, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}