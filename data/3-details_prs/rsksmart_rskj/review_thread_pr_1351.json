{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzMTEzOTQz", "number": 1351, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODoxOTo0OVrOEz6R2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxOToyMToxN1rOE7rqtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODY3NjcyOnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODoxOTo0OVrOHrbKYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODoxOTo0OVrOHrbKYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI5NTg0Mw==", "bodyText": "pass an address as parameter too", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r515295843", "createdAt": "2020-10-30T18:19:49Z", "author": {"login": "fedejinich"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringManager.java", "diffHunk": "@@ -71,16 +71,19 @@ protected boolean removeEldestEntry(Map.Entry<NodeID, PeerScoring> eldest) {\n      * @param event     event type (@see EventType)\r\n      */\r\n     public void recordEvent(NodeID id, InetAddress address, EventType event) {\r\n+        //todo(techdebt) this method encourages null params, this is not desirable\r\n         synchronized (accessLock) {\r\n-            if (id != null) {\r\n+            if (id != null) { //todo(techdebt) it seems this is always true\r\n                 PeerScoring scoring = peersByNodeID.computeIfAbsent(id, k -> peerScoringFactory.newInstance());\r\n-                recordEvent(scoring, event, this.nodePunishmentCalculator);\r\n+                recordEventAndStartPunishment(scoring, event, this.nodePunishmentCalculator, id);\r\n             }\r\n \r\n             if (address != null) {\r\n                 PeerScoring scoring = peersByAddress.computeIfAbsent(address, k -> peerScoringFactory.newInstance());\r\n-                recordEvent(scoring, event, this.ipPunishmentCalculator);\r\n+                recordEventAndStartPunishment(scoring, event, this.ipPunishmentCalculator, id);\r\n             }\r\n+\r\n+            PeerScoringLogger.recordEvent(id, event);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502c3cc016ce03f74b1df474608e8608fb230463"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MzA2NjczOnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/config/RskSystemProperties.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDo1NTo1MVrOHu9Seg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDoxMDo1OVrOHvwmrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAwMDY5OA==", "bodyText": "make sense to use just 1 property? if it is -1 is disabled?\ndont know what is our standard for this.", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r519000698", "createdAt": "2020-11-06T20:55:51Z", "author": {"login": "patogallaiovlabs"}, "path": "rskj-core/src/main/java/co/rsk/config/RskSystemProperties.java", "diffHunk": "@@ -343,4 +343,12 @@ public long getVmExecutionStackSize() {\n     }\n \n     public String cryptoLibrary() { return configFromFiles.getString(\"crypto.library\");}\n+\n+    public boolean isPeerScoringStatsReportEnabled() {\n+        return configFromFiles.getBoolean(\"scoring.statsReport.enabled\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db104a0ae34463ba6ffb79e7665ec6298aac6b53"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg0MTQ1NQ==", "bodyText": "mmm I think it's much more clear to have separate properties like this and avoid supposing properties. On your approach we will have less code (with more intentions).  Lets define that standard :)", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r519841455", "createdAt": "2020-11-09T14:10:59Z", "author": {"login": "fedejinich"}, "path": "rskj-core/src/main/java/co/rsk/config/RskSystemProperties.java", "diffHunk": "@@ -343,4 +343,12 @@ public long getVmExecutionStackSize() {\n     }\n \n     public String cryptoLibrary() { return configFromFiles.getString(\"crypto.library\");}\n+\n+    public boolean isPeerScoringStatsReportEnabled() {\n+        return configFromFiles.getBoolean(\"scoring.statsReport.enabled\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAwMDY5OA=="}, "originalCommit": {"oid": "db104a0ae34463ba6ffb79e7665ec6298aac6b53"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MzA3MTcxOnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringManager.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDo1NzozMlrOHu9VXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxODoxOTo1N1rOH2rvaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAwMTQzNw==", "bodyText": "Did you try it? I think it could be both.", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r519001437", "createdAt": "2020-11-06T20:57:32Z", "author": {"login": "patogallaiovlabs"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringManager.java", "diffHunk": "@@ -64,23 +68,28 @@ protected boolean removeEldestEntry(Map.Entry<NodeID, PeerScoring> eldest) {\n     }\r\n \r\n     /**\r\n-     * Record the event, givent the node id and/or the network address\r\n+     * Record the event, given the node id and/or the network address\r\n      *\r\n      * @param id        node id or null\r\n      * @param address   address or null\r\n      * @param event     event type (@see EventType)\r\n      */\r\n     public void recordEvent(NodeID id, InetAddress address, EventType event) {\r\n+        //todo(techdebt) this method encourages null params, this is not desirable\r\n         synchronized (accessLock) {\r\n-            if (id != null) {\r\n+            if (id != null) { //todo(techdebt) it seems this is always true\r\n                 PeerScoring scoring = peersByNodeID.computeIfAbsent(id, k -> peerScoringFactory.newInstance());\r\n-                recordEvent(scoring, event, this.nodePunishmentCalculator);\r\n+                recordEventAndStartPunishment(scoring, event, this.nodePunishmentCalculator, id);\r\n             }\r\n \r\n             if (address != null) {\r\n                 PeerScoring scoring = peersByAddress.computeIfAbsent(address, k -> peerScoringFactory.newInstance());\r\n-                recordEvent(scoring, event, this.ipPunishmentCalculator);\r\n+                recordEventAndStartPunishment(scoring, event, this.ipPunishmentCalculator, id);\r\n             }\r\n+\r\n+            String peersBy = id != null ? \"NodeID\" : \"Address\";\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db104a0ae34463ba6ffb79e7665ec6298aac6b53"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUyMzI4MA==", "bodyText": "Usually we collected the events TWICE, if possible: by node id and by address. In some events we don't have the node id, yet. The rationale to have both, is to collect events for the same node_id, but maybe with different address along the time. Or same address with different node id.", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r524523280", "createdAt": "2020-11-16T19:36:06Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringManager.java", "diffHunk": "@@ -64,23 +68,28 @@ protected boolean removeEldestEntry(Map.Entry<NodeID, PeerScoring> eldest) {\n     }\r\n \r\n     /**\r\n-     * Record the event, givent the node id and/or the network address\r\n+     * Record the event, given the node id and/or the network address\r\n      *\r\n      * @param id        node id or null\r\n      * @param address   address or null\r\n      * @param event     event type (@see EventType)\r\n      */\r\n     public void recordEvent(NodeID id, InetAddress address, EventType event) {\r\n+        //todo(techdebt) this method encourages null params, this is not desirable\r\n         synchronized (accessLock) {\r\n-            if (id != null) {\r\n+            if (id != null) { //todo(techdebt) it seems this is always true\r\n                 PeerScoring scoring = peersByNodeID.computeIfAbsent(id, k -> peerScoringFactory.newInstance());\r\n-                recordEvent(scoring, event, this.nodePunishmentCalculator);\r\n+                recordEventAndStartPunishment(scoring, event, this.nodePunishmentCalculator, id);\r\n             }\r\n \r\n             if (address != null) {\r\n                 PeerScoring scoring = peersByAddress.computeIfAbsent(address, k -> peerScoringFactory.newInstance());\r\n-                recordEvent(scoring, event, this.ipPunishmentCalculator);\r\n+                recordEventAndStartPunishment(scoring, event, this.ipPunishmentCalculator, id);\r\n             }\r\n+\r\n+            String peersBy = id != null ? \"NodeID\" : \"Address\";\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAwMTQzNw=="}, "originalCommit": {"oid": "db104a0ae34463ba6ffb79e7665ec6298aac6b53"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA4MzY3OA==", "bodyText": "adding this as method comment", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r527083678", "createdAt": "2020-11-19T17:51:45Z", "author": {"login": "fedejinich"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringManager.java", "diffHunk": "@@ -64,23 +68,28 @@ protected boolean removeEldestEntry(Map.Entry<NodeID, PeerScoring> eldest) {\n     }\r\n \r\n     /**\r\n-     * Record the event, givent the node id and/or the network address\r\n+     * Record the event, given the node id and/or the network address\r\n      *\r\n      * @param id        node id or null\r\n      * @param address   address or null\r\n      * @param event     event type (@see EventType)\r\n      */\r\n     public void recordEvent(NodeID id, InetAddress address, EventType event) {\r\n+        //todo(techdebt) this method encourages null params, this is not desirable\r\n         synchronized (accessLock) {\r\n-            if (id != null) {\r\n+            if (id != null) { //todo(techdebt) it seems this is always true\r\n                 PeerScoring scoring = peersByNodeID.computeIfAbsent(id, k -> peerScoringFactory.newInstance());\r\n-                recordEvent(scoring, event, this.nodePunishmentCalculator);\r\n+                recordEventAndStartPunishment(scoring, event, this.nodePunishmentCalculator, id);\r\n             }\r\n \r\n             if (address != null) {\r\n                 PeerScoring scoring = peersByAddress.computeIfAbsent(address, k -> peerScoringFactory.newInstance());\r\n-                recordEvent(scoring, event, this.ipPunishmentCalculator);\r\n+                recordEventAndStartPunishment(scoring, event, this.ipPunishmentCalculator, id);\r\n             }\r\n+\r\n+            String peersBy = id != null ? \"NodeID\" : \"Address\";\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAwMTQzNw=="}, "originalCommit": {"oid": "db104a0ae34463ba6ffb79e7665ec6298aac6b53"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEwMTgwMQ==", "bodyText": "92cc672", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r527101801", "createdAt": "2020-11-19T18:19:57Z", "author": {"login": "fedejinich"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringManager.java", "diffHunk": "@@ -64,23 +68,28 @@ protected boolean removeEldestEntry(Map.Entry<NodeID, PeerScoring> eldest) {\n     }\r\n \r\n     /**\r\n-     * Record the event, givent the node id and/or the network address\r\n+     * Record the event, given the node id and/or the network address\r\n      *\r\n      * @param id        node id or null\r\n      * @param address   address or null\r\n      * @param event     event type (@see EventType)\r\n      */\r\n     public void recordEvent(NodeID id, InetAddress address, EventType event) {\r\n+        //todo(techdebt) this method encourages null params, this is not desirable\r\n         synchronized (accessLock) {\r\n-            if (id != null) {\r\n+            if (id != null) { //todo(techdebt) it seems this is always true\r\n                 PeerScoring scoring = peersByNodeID.computeIfAbsent(id, k -> peerScoringFactory.newInstance());\r\n-                recordEvent(scoring, event, this.nodePunishmentCalculator);\r\n+                recordEventAndStartPunishment(scoring, event, this.nodePunishmentCalculator, id);\r\n             }\r\n \r\n             if (address != null) {\r\n                 PeerScoring scoring = peersByAddress.computeIfAbsent(address, k -> peerScoringFactory.newInstance());\r\n-                recordEvent(scoring, event, this.ipPunishmentCalculator);\r\n+                recordEventAndStartPunishment(scoring, event, this.ipPunishmentCalculator, id);\r\n             }\r\n+\r\n+            String peersBy = id != null ? \"NodeID\" : \"Address\";\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAwMTQzNw=="}, "originalCommit": {"oid": "db104a0ae34463ba6ffb79e7665ec6298aac6b53"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MzA3ODQxOnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDo1OTo1NlrOHu9Zhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDowNTo0MlrOHvwZWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAwMjUwMw==", "bodyText": "I would change \"Reason\" to \"Last event\".", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r519002503", "createdAt": "2020-11-06T20:59:56Z", "author": {"login": "patogallaiovlabs"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringManager.java", "diffHunk": "@@ -241,18 +258,37 @@ public PeerScoring getPeerScoring(InetAddress address) {\n     }\r\n \r\n     /**\r\n-     * Calculates the reputation for a peer\r\n-     * Starts punishment if needed\r\n-     *\r\n-     * @param scoring       the peer scoring\r\n-     * @param calculator    the calculator to use\r\n+     * Records an event and starts punishment if needed\r\n+     * @param peerScoring the peer scoring\r\n+     * @param event an event type\r\n+     * @param punishmentCalculator calculator to use\r\n+     * @param nodeID a node id\r\n      */\r\n-    private void recordEvent(PeerScoring scoring, EventType event, PunishmentCalculator calculator) {\r\n-        scoring.recordEvent(event);\r\n-        boolean reputation = scoringCalculator.hasGoodReputation(scoring);\r\n+    private void recordEventAndStartPunishment(PeerScoring peerScoring, EventType event, PunishmentCalculator punishmentCalculator, NodeID nodeID) {\r\n+        peerScoring.recordEvent(event);\r\n+\r\n+        boolean shouldStartPunishment = !scoringCalculator.hasGoodReputation(peerScoring) && peerScoring.hasGoodReputation();\r\n+        if (shouldStartPunishment) {\r\n+            long punishmentTime = punishmentCalculator.calculate(peerScoring.getPunishmentCounter(), peerScoring.getScore());\r\n+            peerScoring.startPunishment(punishmentTime);\r\n+\r\n+            String nodeIDFormated = nodeIdForLog(nodeID);\r\n+            logger.debug(\"NodeID {} has been punished for {} milliseconds. Reason {}\", nodeIDFormated, punishmentTime, event);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db104a0ae34463ba6ffb79e7665ec6298aac6b53"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgzODA0Mg==", "bodyText": "modified :)", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r519838042", "createdAt": "2020-11-09T14:05:42Z", "author": {"login": "fedejinich"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringManager.java", "diffHunk": "@@ -241,18 +258,37 @@ public PeerScoring getPeerScoring(InetAddress address) {\n     }\r\n \r\n     /**\r\n-     * Calculates the reputation for a peer\r\n-     * Starts punishment if needed\r\n-     *\r\n-     * @param scoring       the peer scoring\r\n-     * @param calculator    the calculator to use\r\n+     * Records an event and starts punishment if needed\r\n+     * @param peerScoring the peer scoring\r\n+     * @param event an event type\r\n+     * @param punishmentCalculator calculator to use\r\n+     * @param nodeID a node id\r\n      */\r\n-    private void recordEvent(PeerScoring scoring, EventType event, PunishmentCalculator calculator) {\r\n-        scoring.recordEvent(event);\r\n-        boolean reputation = scoringCalculator.hasGoodReputation(scoring);\r\n+    private void recordEventAndStartPunishment(PeerScoring peerScoring, EventType event, PunishmentCalculator punishmentCalculator, NodeID nodeID) {\r\n+        peerScoring.recordEvent(event);\r\n+\r\n+        boolean shouldStartPunishment = !scoringCalculator.hasGoodReputation(peerScoring) && peerScoring.hasGoodReputation();\r\n+        if (shouldStartPunishment) {\r\n+            long punishmentTime = punishmentCalculator.calculate(peerScoring.getPunishmentCounter(), peerScoring.getScore());\r\n+            peerScoring.startPunishment(punishmentTime);\r\n+\r\n+            String nodeIDFormated = nodeIdForLog(nodeID);\r\n+            logger.debug(\"NodeID {} has been punished for {} milliseconds. Reason {}\", nodeIDFormated, punishmentTime, event);\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAwMjUwMw=="}, "originalCommit": {"oid": "db104a0ae34463ba6ffb79e7665ec6298aac6b53"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MzEwODU2OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMToxMToxOVrOHu9rUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDowNTozMVrOHvwY3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAwNzA1Ng==", "bodyText": "Calculate \"toString\" only once.", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r519007056", "createdAt": "2020-11-06T21:11:19Z", "author": {"login": "patogallaiovlabs"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringManager.java", "diffHunk": "@@ -241,18 +258,37 @@ public PeerScoring getPeerScoring(InetAddress address) {\n     }\r\n \r\n     /**\r\n-     * Calculates the reputation for a peer\r\n-     * Starts punishment if needed\r\n-     *\r\n-     * @param scoring       the peer scoring\r\n-     * @param calculator    the calculator to use\r\n+     * Records an event and starts punishment if needed\r\n+     * @param peerScoring the peer scoring\r\n+     * @param event an event type\r\n+     * @param punishmentCalculator calculator to use\r\n+     * @param nodeID a node id\r\n      */\r\n-    private void recordEvent(PeerScoring scoring, EventType event, PunishmentCalculator calculator) {\r\n-        scoring.recordEvent(event);\r\n-        boolean reputation = scoringCalculator.hasGoodReputation(scoring);\r\n+    private void recordEventAndStartPunishment(PeerScoring peerScoring, EventType event, PunishmentCalculator punishmentCalculator, NodeID nodeID) {\r\n+        peerScoring.recordEvent(event);\r\n+\r\n+        boolean shouldStartPunishment = !scoringCalculator.hasGoodReputation(peerScoring) && peerScoring.hasGoodReputation();\r\n+        if (shouldStartPunishment) {\r\n+            long punishmentTime = punishmentCalculator.calculate(peerScoring.getPunishmentCounter(), peerScoring.getScore());\r\n+            peerScoring.startPunishment(punishmentTime);\r\n+\r\n+            String nodeIDFormated = nodeIdForLog(nodeID);\r\n+            logger.debug(\"NodeID {} has been punished for {} milliseconds. Reason {}\", nodeIDFormated, punishmentTime, event);\r\n+            logger.debug(\"{}\", new PeerScoringInformation(peerScoring, nodeIDFormated, \"\"));\r\n+        }\r\n+    }\r\n+\r\n+    private String nodeIdForLog(NodeID id) {\r\n+        if(id == null) {\r\n+            return \"NO_NODE_ID\";\r\n+        }\r\n+        return id.toString().substring(id.toString().length() - 7, id.toString().length() - 1);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db104a0ae34463ba6ffb79e7665ec6298aac6b53"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAwNzk2Mg==", "bodyText": "Be careful with format, we already unified the way nodeID are printed, i think.", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r519007962", "createdAt": "2020-11-06T21:13:48Z", "author": {"login": "patogallaiovlabs"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringManager.java", "diffHunk": "@@ -241,18 +258,37 @@ public PeerScoring getPeerScoring(InetAddress address) {\n     }\r\n \r\n     /**\r\n-     * Calculates the reputation for a peer\r\n-     * Starts punishment if needed\r\n-     *\r\n-     * @param scoring       the peer scoring\r\n-     * @param calculator    the calculator to use\r\n+     * Records an event and starts punishment if needed\r\n+     * @param peerScoring the peer scoring\r\n+     * @param event an event type\r\n+     * @param punishmentCalculator calculator to use\r\n+     * @param nodeID a node id\r\n      */\r\n-    private void recordEvent(PeerScoring scoring, EventType event, PunishmentCalculator calculator) {\r\n-        scoring.recordEvent(event);\r\n-        boolean reputation = scoringCalculator.hasGoodReputation(scoring);\r\n+    private void recordEventAndStartPunishment(PeerScoring peerScoring, EventType event, PunishmentCalculator punishmentCalculator, NodeID nodeID) {\r\n+        peerScoring.recordEvent(event);\r\n+\r\n+        boolean shouldStartPunishment = !scoringCalculator.hasGoodReputation(peerScoring) && peerScoring.hasGoodReputation();\r\n+        if (shouldStartPunishment) {\r\n+            long punishmentTime = punishmentCalculator.calculate(peerScoring.getPunishmentCounter(), peerScoring.getScore());\r\n+            peerScoring.startPunishment(punishmentTime);\r\n+\r\n+            String nodeIDFormated = nodeIdForLog(nodeID);\r\n+            logger.debug(\"NodeID {} has been punished for {} milliseconds. Reason {}\", nodeIDFormated, punishmentTime, event);\r\n+            logger.debug(\"{}\", new PeerScoringInformation(peerScoring, nodeIDFormated, \"\"));\r\n+        }\r\n+    }\r\n+\r\n+    private String nodeIdForLog(NodeID id) {\r\n+        if(id == null) {\r\n+            return \"NO_NODE_ID\";\r\n+        }\r\n+        return id.toString().substring(id.toString().length() - 7, id.toString().length() - 1);\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAwNzA1Ng=="}, "originalCommit": {"oid": "db104a0ae34463ba6ffb79e7665ec6298aac6b53"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgzNzkxNw==", "bodyText": "changed :)", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r519837917", "createdAt": "2020-11-09T14:05:31Z", "author": {"login": "fedejinich"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringManager.java", "diffHunk": "@@ -241,18 +258,37 @@ public PeerScoring getPeerScoring(InetAddress address) {\n     }\r\n \r\n     /**\r\n-     * Calculates the reputation for a peer\r\n-     * Starts punishment if needed\r\n-     *\r\n-     * @param scoring       the peer scoring\r\n-     * @param calculator    the calculator to use\r\n+     * Records an event and starts punishment if needed\r\n+     * @param peerScoring the peer scoring\r\n+     * @param event an event type\r\n+     * @param punishmentCalculator calculator to use\r\n+     * @param nodeID a node id\r\n      */\r\n-    private void recordEvent(PeerScoring scoring, EventType event, PunishmentCalculator calculator) {\r\n-        scoring.recordEvent(event);\r\n-        boolean reputation = scoringCalculator.hasGoodReputation(scoring);\r\n+    private void recordEventAndStartPunishment(PeerScoring peerScoring, EventType event, PunishmentCalculator punishmentCalculator, NodeID nodeID) {\r\n+        peerScoring.recordEvent(event);\r\n+\r\n+        boolean shouldStartPunishment = !scoringCalculator.hasGoodReputation(peerScoring) && peerScoring.hasGoodReputation();\r\n+        if (shouldStartPunishment) {\r\n+            long punishmentTime = punishmentCalculator.calculate(peerScoring.getPunishmentCounter(), peerScoring.getScore());\r\n+            peerScoring.startPunishment(punishmentTime);\r\n+\r\n+            String nodeIDFormated = nodeIdForLog(nodeID);\r\n+            logger.debug(\"NodeID {} has been punished for {} milliseconds. Reason {}\", nodeIDFormated, punishmentTime, event);\r\n+            logger.debug(\"{}\", new PeerScoringInformation(peerScoring, nodeIDFormated, \"\"));\r\n+        }\r\n+    }\r\n+\r\n+    private String nodeIdForLog(NodeID id) {\r\n+        if(id == null) {\r\n+            return \"NO_NODE_ID\";\r\n+        }\r\n+        return id.toString().substring(id.toString().length() - 7, id.toString().length() - 1);\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAwNzA1Ng=="}, "originalCommit": {"oid": "db104a0ae34463ba6ffb79e7665ec6298aac6b53"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MzExNTQzOnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringSummaryService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMToxNDowN1rOHu9vaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDowODo1MFrOHvwhIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAwODEwNQ==", "bodyText": "why upper?", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r519008105", "createdAt": "2020-11-06T21:14:07Z", "author": {"login": "patogallaiovlabs"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringSummaryService.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package co.rsk.scoring;\n+\n+import co.rsk.config.InternalService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+public class PeerScoringSummaryService implements InternalService {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(\"peerScoring\");\n+\n+    private final long REPORT_TIME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db104a0ae34463ba6ffb79e7665ec6298aac6b53"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg0MDAzMg==", "bodyText": "because it's a constant :)", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r519840032", "createdAt": "2020-11-09T14:08:50Z", "author": {"login": "fedejinich"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringSummaryService.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package co.rsk.scoring;\n+\n+import co.rsk.config.InternalService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+public class PeerScoringSummaryService implements InternalService {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(\"peerScoring\");\n+\n+    private final long REPORT_TIME;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAwODEwNQ=="}, "originalCommit": {"oid": "db104a0ae34463ba6ffb79e7665ec6298aac6b53"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MzExNzI3OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringSummaryService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMToxNDo0NFrOHu9wcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDowODoxMFrOHvwfaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAwODM2OA==", "bodyText": "logger.error(...)", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r519008368", "createdAt": "2020-11-06T21:14:44Z", "author": {"login": "patogallaiovlabs"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringSummaryService.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package co.rsk.scoring;\n+\n+import co.rsk.config.InternalService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+public class PeerScoringSummaryService implements InternalService {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(\"peerScoring\");\n+\n+    private final long REPORT_TIME;\n+    private final PeerScoringManager peerScoringManager;\n+\n+    public PeerScoringSummaryService(long peerScoringStatsReportTime, PeerScoringManager peerScoringManager) {\n+        this.REPORT_TIME = peerScoringStatsReportTime;\n+        this.peerScoringManager = peerScoringManager;\n+    }\n+\n+    @Override\n+    public void start() {\n+        logger.debug(\"starting peer scoring summary service\");\n+        try {\n+            ScheduledExecutorService executorService = Executors.newSingleThreadScheduledExecutor();\n+            executorService.scheduleAtFixedRate(() -> this.report(peerScoringManager.getPeersInformation()),\n+                    0,\n+                    REPORT_TIME,\n+                    TimeUnit.MILLISECONDS\n+            );\n+        } catch (Exception e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db104a0ae34463ba6ffb79e7665ec6298aac6b53"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgzOTU5Mg==", "bodyText": "i think this one it's too light to be considered as an error, what do you expect from an error?", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r519839592", "createdAt": "2020-11-09T14:08:10Z", "author": {"login": "fedejinich"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringSummaryService.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package co.rsk.scoring;\n+\n+import co.rsk.config.InternalService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+public class PeerScoringSummaryService implements InternalService {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(\"peerScoring\");\n+\n+    private final long REPORT_TIME;\n+    private final PeerScoringManager peerScoringManager;\n+\n+    public PeerScoringSummaryService(long peerScoringStatsReportTime, PeerScoringManager peerScoringManager) {\n+        this.REPORT_TIME = peerScoringStatsReportTime;\n+        this.peerScoringManager = peerScoringManager;\n+    }\n+\n+    @Override\n+    public void start() {\n+        logger.debug(\"starting peer scoring summary service\");\n+        try {\n+            ScheduledExecutorService executorService = Executors.newSingleThreadScheduledExecutor();\n+            executorService.scheduleAtFixedRate(() -> this.report(peerScoringManager.getPeersInformation()),\n+                    0,\n+                    REPORT_TIME,\n+                    TimeUnit.MILLISECONDS\n+            );\n+        } catch (Exception e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAwODM2OA=="}, "originalCommit": {"oid": "db104a0ae34463ba6ffb79e7665ec6298aac6b53"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzA1OTc0OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringReporterService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzowNDoxNlrOHz90CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzowNDoxNlrOHz90CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI1MjE2OQ==", "bodyText": "scheduledExecutorService cannot be null here, can it? Also shouldn't we check validity of peerScoringManager and time values in the constructor where they are initially provided?", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r524252169", "createdAt": "2020-11-16T13:04:16Z", "author": {"login": "Vovchyk"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringReporterService.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package co.rsk.scoring;\n+\n+import co.rsk.config.InternalService;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * This service prints a summary of nodes with bad reputation, every 5 minutes (configurable)\n+ * */\n+public class PeerScoringReporterService implements InternalService {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(\"peerScoring\");\n+\n+    private final PeerScoringManager peerScoringManager;\n+    private final long time;\n+    private ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();\n+    private boolean running = false;\n+\n+    public PeerScoringReporterService(long time, PeerScoringManager peerScoringManager) {\n+        this.time = time;\n+        this.peerScoringManager = peerScoringManager;\n+    }\n+\n+    @Override\n+    public void start() {\n+        logger.debug(\"starting peer scoring reporter service\");\n+        try {\n+            List<PeerScoringInformation> peerScoringInformationList = peerScoringManager.getPeersInformation();\n+            scheduledExecutorService.scheduleAtFixedRate(() -> printReport(peerScoringInformationList),\n+                    0,\n+                    time,\n+                    TimeUnit.MILLISECONDS\n+            );\n+            running = true;\n+        } catch (Exception e) {\n+            logger.warn(\"peer scoring reporter failed\", e);\n+            stop();\n+        }\n+    }\n+\n+    @Override\n+    public void stop() {\n+        scheduledExecutorService.shutdown();\n+        logger.warn(\"peer scoring reporter service has been stopped\");\n+        running = false;\n+    }\n+\n+    public boolean printReport(List<PeerScoringInformation> peerScoringInformationList) {\n+        try {\n+            String badReputationSummary = PeerScoringReporterUtil.badReputationSummaryString(peerScoringInformationList);\n+            logger.debug(\"bad reputation summary {}\", badReputationSummary);\n+\n+            String peersInformationDetailed = PeerScoringReporterUtil.detailedBadReputationStatusString(peerScoringInformationList);\n+            logger.debug(\"detailed bad reputation status {}\", peersInformationDetailed);\n+        } catch (Exception e) {\n+            logger.warn(\"failed to print report\", e);\n+\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    @VisibleForTesting\n+    public boolean initialized() {\n+        return scheduledExecutorService != null && peerScoringManager != null && time > 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ff65e68892aea71302bb814bfee258d9d84d8e"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzA4MDA2OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringReporterService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzowOToyNlrOHz9_2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNzoyNToxMFrOH3ZMrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI1NTE5NA==", "bodyText": "As for me this error-handling is a bit over-complicated. Result of this method is not being used by the scheduledExecutorService, is it? It's only for testing purposes? Can we alternatively check if this method throws an exception in the tests, and return nothing here? The PeerScoringReporterUtil's utility methods can only produce unchecked/runtime exceptions I suppose.", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r524255194", "createdAt": "2020-11-16T13:09:26Z", "author": {"login": "Vovchyk"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringReporterService.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package co.rsk.scoring;\n+\n+import co.rsk.config.InternalService;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * This service prints a summary of nodes with bad reputation, every 5 minutes (configurable)\n+ * */\n+public class PeerScoringReporterService implements InternalService {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(\"peerScoring\");\n+\n+    private final PeerScoringManager peerScoringManager;\n+    private final long time;\n+    private ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();\n+    private boolean running = false;\n+\n+    public PeerScoringReporterService(long time, PeerScoringManager peerScoringManager) {\n+        this.time = time;\n+        this.peerScoringManager = peerScoringManager;\n+    }\n+\n+    @Override\n+    public void start() {\n+        logger.debug(\"starting peer scoring reporter service\");\n+        try {\n+            List<PeerScoringInformation> peerScoringInformationList = peerScoringManager.getPeersInformation();\n+            scheduledExecutorService.scheduleAtFixedRate(() -> printReport(peerScoringInformationList),\n+                    0,\n+                    time,\n+                    TimeUnit.MILLISECONDS\n+            );\n+            running = true;\n+        } catch (Exception e) {\n+            logger.warn(\"peer scoring reporter failed\", e);\n+            stop();\n+        }\n+    }\n+\n+    @Override\n+    public void stop() {\n+        scheduledExecutorService.shutdown();\n+        logger.warn(\"peer scoring reporter service has been stopped\");\n+        running = false;\n+    }\n+\n+    public boolean printReport(List<PeerScoringInformation> peerScoringInformationList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ff65e68892aea71302bb814bfee258d9d84d8e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgzOTgxOQ==", "bodyText": "yep you're right, I confused Exceptions with RuntimeExceptions. I'll move testing logic to a TestPeerScoringReporterService as @ajlopez suggested yesterday.\nAlso I'll simplify that error handling", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r527839819", "createdAt": "2020-11-20T17:16:29Z", "author": {"login": "fedejinich"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringReporterService.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package co.rsk.scoring;\n+\n+import co.rsk.config.InternalService;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * This service prints a summary of nodes with bad reputation, every 5 minutes (configurable)\n+ * */\n+public class PeerScoringReporterService implements InternalService {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(\"peerScoring\");\n+\n+    private final PeerScoringManager peerScoringManager;\n+    private final long time;\n+    private ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();\n+    private boolean running = false;\n+\n+    public PeerScoringReporterService(long time, PeerScoringManager peerScoringManager) {\n+        this.time = time;\n+        this.peerScoringManager = peerScoringManager;\n+    }\n+\n+    @Override\n+    public void start() {\n+        logger.debug(\"starting peer scoring reporter service\");\n+        try {\n+            List<PeerScoringInformation> peerScoringInformationList = peerScoringManager.getPeersInformation();\n+            scheduledExecutorService.scheduleAtFixedRate(() -> printReport(peerScoringInformationList),\n+                    0,\n+                    time,\n+                    TimeUnit.MILLISECONDS\n+            );\n+            running = true;\n+        } catch (Exception e) {\n+            logger.warn(\"peer scoring reporter failed\", e);\n+            stop();\n+        }\n+    }\n+\n+    @Override\n+    public void stop() {\n+        scheduledExecutorService.shutdown();\n+        logger.warn(\"peer scoring reporter service has been stopped\");\n+        running = false;\n+    }\n+\n+    public boolean printReport(List<PeerScoringInformation> peerScoringInformationList) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI1NTE5NA=="}, "originalCommit": {"oid": "a6ff65e68892aea71302bb814bfee258d9d84d8e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg0NjU3NA==", "bodyText": "9b301af", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r527846574", "createdAt": "2020-11-20T17:25:10Z", "author": {"login": "fedejinich"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringReporterService.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package co.rsk.scoring;\n+\n+import co.rsk.config.InternalService;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * This service prints a summary of nodes with bad reputation, every 5 minutes (configurable)\n+ * */\n+public class PeerScoringReporterService implements InternalService {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(\"peerScoring\");\n+\n+    private final PeerScoringManager peerScoringManager;\n+    private final long time;\n+    private ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();\n+    private boolean running = false;\n+\n+    public PeerScoringReporterService(long time, PeerScoringManager peerScoringManager) {\n+        this.time = time;\n+        this.peerScoringManager = peerScoringManager;\n+    }\n+\n+    @Override\n+    public void start() {\n+        logger.debug(\"starting peer scoring reporter service\");\n+        try {\n+            List<PeerScoringInformation> peerScoringInformationList = peerScoringManager.getPeersInformation();\n+            scheduledExecutorService.scheduleAtFixedRate(() -> printReport(peerScoringInformationList),\n+                    0,\n+                    time,\n+                    TimeUnit.MILLISECONDS\n+            );\n+            running = true;\n+        } catch (Exception e) {\n+            logger.warn(\"peer scoring reporter failed\", e);\n+            stop();\n+        }\n+    }\n+\n+    @Override\n+    public void stop() {\n+        scheduledExecutorService.shutdown();\n+        logger.warn(\"peer scoring reporter service has been stopped\");\n+        running = false;\n+    }\n+\n+    public boolean printReport(List<PeerScoringInformation> peerScoringInformationList) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI1NTE5NA=="}, "originalCommit": {"oid": "a6ff65e68892aea71302bb814bfee258d9d84d8e"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODc3MzYyOnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringBadReputationSummary.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxOToyNzoyOFrOH0OEIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNjo1NjowNFrOH2oPVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUxODQzMg==", "bodyText": "Why \"BadReputation\"? We could use this information for any peer, not only the ones with bad reputation. ie, the number of valid blocks", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r524518432", "createdAt": "2020-11-16T19:27:28Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringBadReputationSummary.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package co.rsk.scoring;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * This is a presentational object of peers with bad reputation\n+ * It's used to expose a json rpc message (sco_badReputationSummary())\n+ */\n+public class PeerScoringBadReputationSummary {\n+    private int count;\n+    private int successfulHandshakes;\n+    private int failedHandshakes;\n+    private int invalidNetworks;\n+    private int repeatedMessages;\n+    private int validBlocks;\n+    private int validTransactions;\n+    private int invalidBlocks;\n+    private int invalidTransactions;\n+    private int invalidMessages;\n+    private int timeoutMessages;\n+    private int unexpectedMessages;\n+    private int invalidHeader;\n+    private int peersTotalScore;\n+    private int punishments;\n+\n+    public PeerScoringBadReputationSummary(int count,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ff65e68892aea71302bb814bfee258d9d84d8e"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA0NDQzOQ==", "bodyText": "changed", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r527044439", "createdAt": "2020-11-19T16:56:04Z", "author": {"login": "fedejinich"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringBadReputationSummary.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package co.rsk.scoring;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * This is a presentational object of peers with bad reputation\n+ * It's used to expose a json rpc message (sco_badReputationSummary())\n+ */\n+public class PeerScoringBadReputationSummary {\n+    private int count;\n+    private int successfulHandshakes;\n+    private int failedHandshakes;\n+    private int invalidNetworks;\n+    private int repeatedMessages;\n+    private int validBlocks;\n+    private int validTransactions;\n+    private int invalidBlocks;\n+    private int invalidTransactions;\n+    private int invalidMessages;\n+    private int timeoutMessages;\n+    private int unexpectedMessages;\n+    private int invalidHeader;\n+    private int peersTotalScore;\n+    private int punishments;\n+\n+    public PeerScoringBadReputationSummary(int count,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUxODQzMg=="}, "originalCommit": {"oid": "a6ff65e68892aea71302bb814bfee258d9d84d8e"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODc5NTM1OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringInformation.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxOTozMzozM1rOH0ORhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxODoyMTowMlrOH2rx3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUyMTg2Mg==", "bodyText": "Could we consider the alternative of having an ScoringForTest class (defined in test code that extends Scoring and override the getter methods), to inject a Scoring with some injected values? In this way, we could diminish the production code related with testing", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r524521862", "createdAt": "2020-11-16T19:33:33Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringInformation.java", "diffHunk": "@@ -45,10 +47,38 @@ public PeerScoringInformation(PeerScoring scoring, String id, String type) {\n         this.id = id;\r\n     }\r\n \r\n+    @VisibleForTesting\r\n+    public PeerScoringInformation(String type, boolean goodReputation,\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ff65e68892aea71302bb814bfee258d9d84d8e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAwMTM5OA==", "bodyText": "well, the fact is that I think a class should only have one simple constructor and any other complex construction should be a static method. It's more transparent and it's unified.\nI don't think extending and overriding it's a good practice, I'd rather contruct them in auxiliary methods on test classes", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r527001398", "createdAt": "2020-11-19T15:59:15Z", "author": {"login": "fedejinich"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringInformation.java", "diffHunk": "@@ -45,10 +47,38 @@ public PeerScoringInformation(PeerScoring scoring, String id, String type) {\n         this.id = id;\r\n     }\r\n \r\n+    @VisibleForTesting\r\n+    public PeerScoringInformation(String type, boolean goodReputation,\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUyMTg2Mg=="}, "originalCommit": {"oid": "a6ff65e68892aea71302bb814bfee258d9d84d8e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA1MzM2OA==", "bodyText": "Well, you can do that, for static factory methods, that ARE INVOLVED in production use case. It is not the case with this one, AFAIK. It could be better to move all this to test code; the way I suggested in my previous comment removes any test-oriented-and-only-used-to-test code from production code", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r527053368", "createdAt": "2020-11-19T17:06:45Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringInformation.java", "diffHunk": "@@ -45,10 +47,38 @@ public PeerScoringInformation(PeerScoring scoring, String id, String type) {\n         this.id = id;\r\n     }\r\n \r\n+    @VisibleForTesting\r\n+    public PeerScoringInformation(String type, boolean goodReputation,\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUyMTg2Mg=="}, "originalCommit": {"oid": "a6ff65e68892aea71302bb814bfee258d9d84d8e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5MjkwNQ==", "bodyText": "there is a factory method: construct a PeerScoringInformation given a Scoring object. I agree we should remove test oriented stuff from prod, and we also need to use constructors in a more transparent way", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r527092905", "createdAt": "2020-11-19T18:06:12Z", "author": {"login": "fedejinich"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringInformation.java", "diffHunk": "@@ -45,10 +47,38 @@ public PeerScoringInformation(PeerScoring scoring, String id, String type) {\n         this.id = id;\r\n     }\r\n \r\n+    @VisibleForTesting\r\n+    public PeerScoringInformation(String type, boolean goodReputation,\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUyMTg2Mg=="}, "originalCommit": {"oid": "a6ff65e68892aea71302bb814bfee258d9d84d8e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEwMjQyOQ==", "bodyText": "fc09e75", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r527102429", "createdAt": "2020-11-19T18:21:02Z", "author": {"login": "fedejinich"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringInformation.java", "diffHunk": "@@ -45,10 +47,38 @@ public PeerScoringInformation(PeerScoring scoring, String id, String type) {\n         this.id = id;\r\n     }\r\n \r\n+    @VisibleForTesting\r\n+    public PeerScoringInformation(String type, boolean goodReputation,\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUyMTg2Mg=="}, "originalCommit": {"oid": "a6ff65e68892aea71302bb814bfee258d9d84d8e"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMDE2MjU0OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxOToxOTozMlrOH3dvsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxOTozMjowOFrOH3eIUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkyMTA3NQ==", "bodyText": "id.toString() doesn't do this?", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r527921075", "createdAt": "2020-11-20T19:19:32Z", "author": {"login": "patogallaiovlabs"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringManager.java", "diffHunk": "@@ -241,18 +260,37 @@ public PeerScoring getPeerScoring(InetAddress address) {\n     }\r\n \r\n     /**\r\n-     * Calculates the reputation for a peer\r\n-     * Starts punishment if needed\r\n-     *\r\n-     * @param scoring       the peer scoring\r\n-     * @param calculator    the calculator to use\r\n+     * Records an event and starts punishment if needed\r\n+     * @param peerScoring the peer scoring\r\n+     * @param event an event type\r\n+     * @param punishmentCalculator calculator to use\r\n+     * @param nodeID a node id\r\n      */\r\n-    private void recordEvent(PeerScoring scoring, EventType event, PunishmentCalculator calculator) {\r\n-        scoring.recordEvent(event);\r\n-        boolean reputation = scoringCalculator.hasGoodReputation(scoring);\r\n+    private void recordEventAndStartPunishment(PeerScoring peerScoring, EventType event, PunishmentCalculator punishmentCalculator, NodeID nodeID) {\r\n+        peerScoring.recordEvent(event);\r\n+\r\n+        boolean shouldStartPunishment = !scoringCalculator.hasGoodReputation(peerScoring) && peerScoring.hasGoodReputation();\r\n+        if (shouldStartPunishment) {\r\n+            long punishmentTime = punishmentCalculator.calculate(peerScoring.getPunishmentCounter(), peerScoring.getScore());\r\n+            peerScoring.startPunishment(punishmentTime);\r\n+\r\n+            String nodeIDFormated = nodeIdForLog(nodeID);\r\n+            logger.debug(\"NodeID {} has been punished for {} milliseconds. Last event {}\", nodeIDFormated, punishmentTime, event);\r\n+            logger.debug(\"{}\", PeerScoringInformation.buildByScoring(peerScoring, nodeIDFormated, \"\"));\r\n+        }\r\n+    }\r\n+\r\n+    private String nodeIdForLog(NodeID id) {\r\n+        if(id == null) {\r\n+            return \"NO_NODE_ID\";\r\n+        }\r\n+        return ByteUtil.toHexString(id.getID());\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bb971acf84f9fc41a6289965b70202b6da4a833"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkyNzM3Nw==", "bodyText": "5dd4f96", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r527927377", "createdAt": "2020-11-20T19:32:08Z", "author": {"login": "fedejinich"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringManager.java", "diffHunk": "@@ -241,18 +260,37 @@ public PeerScoring getPeerScoring(InetAddress address) {\n     }\r\n \r\n     /**\r\n-     * Calculates the reputation for a peer\r\n-     * Starts punishment if needed\r\n-     *\r\n-     * @param scoring       the peer scoring\r\n-     * @param calculator    the calculator to use\r\n+     * Records an event and starts punishment if needed\r\n+     * @param peerScoring the peer scoring\r\n+     * @param event an event type\r\n+     * @param punishmentCalculator calculator to use\r\n+     * @param nodeID a node id\r\n      */\r\n-    private void recordEvent(PeerScoring scoring, EventType event, PunishmentCalculator calculator) {\r\n-        scoring.recordEvent(event);\r\n-        boolean reputation = scoringCalculator.hasGoodReputation(scoring);\r\n+    private void recordEventAndStartPunishment(PeerScoring peerScoring, EventType event, PunishmentCalculator punishmentCalculator, NodeID nodeID) {\r\n+        peerScoring.recordEvent(event);\r\n+\r\n+        boolean shouldStartPunishment = !scoringCalculator.hasGoodReputation(peerScoring) && peerScoring.hasGoodReputation();\r\n+        if (shouldStartPunishment) {\r\n+            long punishmentTime = punishmentCalculator.calculate(peerScoring.getPunishmentCounter(), peerScoring.getScore());\r\n+            peerScoring.startPunishment(punishmentTime);\r\n+\r\n+            String nodeIDFormated = nodeIdForLog(nodeID);\r\n+            logger.debug(\"NodeID {} has been punished for {} milliseconds. Last event {}\", nodeIDFormated, punishmentTime, event);\r\n+            logger.debug(\"{}\", PeerScoringInformation.buildByScoring(peerScoring, nodeIDFormated, \"\"));\r\n+        }\r\n+    }\r\n+\r\n+    private String nodeIdForLog(NodeID id) {\r\n+        if(id == null) {\r\n+            return \"NO_NODE_ID\";\r\n+        }\r\n+        return ByteUtil.toHexString(id.getID());\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkyMTA3NQ=="}, "originalCommit": {"oid": "6bb971acf84f9fc41a6289965b70202b6da4a833"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMDE2ODg2OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringReputationSummary.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxOToyMToxN1rOH3dzXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxOTozMToxNlrOH3eGzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkyMjAxMw==", "bodyText": "why do you need equals and hash?", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r527922013", "createdAt": "2020-11-20T19:21:17Z", "author": {"login": "patogallaiovlabs"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringReputationSummary.java", "diffHunk": "@@ -0,0 +1,163 @@\n+package co.rsk.scoring;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * This is a presentational object\n+ * It's used to expose a json rpc message (sco_badReputationSummary())\n+ */\n+public class PeerScoringReputationSummary {\n+    private int count;\n+    private int successfulHandshakes;\n+    private int failedHandshakes;\n+    private int invalidHeader;\n+    private int validBlocks;\n+    private int invalidBlocks;\n+    private int validTransactions;\n+    private int invalidTransactions;\n+    private int invalidNetworks;\n+    private int invalidMessages;\n+    private int repeatedMessages;\n+    private int timeoutMessages;\n+    private int unexpectedMessages;\n+    private int peersTotalScore;\n+    private int punishments;\n+    private int goodReputationCount;\n+    private int badReputationCount;\n+\n+    public PeerScoringReputationSummary(int count,\n+                                        int successfulHandshakes,\n+                                        int failedHandshakes,\n+                                        int invalidNetworks,\n+                                        int repeatedMessages,\n+                                        int validBlocks,\n+                                        int validTransactions,\n+                                        int invalidBlocks,\n+                                        int invalidTransactions,\n+                                        int invalidMessages,\n+                                        int timeoutMessages,\n+                                        int unexpectedMessages,\n+                                        int invalidHeader,\n+                                        int peersTotalScore,\n+                                        int punishments,\n+                                        int goodReputationCount,\n+                                        int badReputationCount) {\n+        this.count = count;\n+        this.successfulHandshakes = successfulHandshakes;\n+        this.failedHandshakes = failedHandshakes;\n+        this.invalidHeader = invalidHeader;\n+        this.validBlocks = validBlocks;\n+        this.invalidBlocks = invalidBlocks;\n+        this.validTransactions = validTransactions;\n+        this.invalidTransactions = invalidTransactions;\n+        this.invalidNetworks = invalidNetworks;\n+        this.invalidMessages = invalidMessages;\n+        this.repeatedMessages = repeatedMessages;\n+        this.timeoutMessages = timeoutMessages;\n+        this.unexpectedMessages = unexpectedMessages;\n+        this.peersTotalScore = peersTotalScore;\n+        this.punishments = punishments;\n+        this.goodReputationCount = goodReputationCount;\n+        this.badReputationCount = badReputationCount;\n+    }\n+\n+    public int getCount() {\n+        return count;\n+    }\n+\n+    public int getSuccessfulHandshakes() {\n+        return successfulHandshakes;\n+    }\n+\n+    public int getFailedHandshakes() {\n+        return failedHandshakes;\n+    }\n+\n+    public int getInvalidNetworks() {\n+        return invalidNetworks;\n+    }\n+\n+    public int getRepeatedMessages() {\n+        return repeatedMessages;\n+    }\n+\n+    public int getValidBlocks() {\n+        return validBlocks;\n+    }\n+\n+    public int getValidTransactions() {\n+        return validTransactions;\n+    }\n+\n+    public int getInvalidBlocks() {\n+        return invalidBlocks;\n+    }\n+\n+    public int getInvalidTransactions() {\n+        return invalidTransactions;\n+    }\n+\n+    public int getInvalidMessages() {\n+        return invalidMessages;\n+    }\n+\n+    public int getTimeoutMessages() {\n+        return timeoutMessages;\n+    }\n+\n+    public int getUnexpectedMessages() {\n+        return unexpectedMessages;\n+    }\n+\n+    public int getInvalidHeader() {\n+        return invalidHeader;\n+    }\n+\n+    public int getPeersTotalScore() {\n+        return peersTotalScore;\n+    }\n+\n+    public int getPunishments() {\n+        return punishments;\n+    }\n+\n+    public int getGoodReputationCount() {\n+        return goodReputationCount;\n+    }\n+\n+    public int getBadReputationCount() {\n+        return badReputationCount;\n+    }\n+\n+    @Override\n+    public boolean equals(Object object) {\n+        if(!(object instanceof PeerScoringReputationSummary)) {\n+            return false;\n+        }\n+        PeerScoringReputationSummary p = (PeerScoringReputationSummary) object;\n+\n+        return getCount() == p.getCount() &&\n+                getFailedHandshakes() == p.getFailedHandshakes() &&\n+                getInvalidMessages() == p.getInvalidMessages() &&\n+                getInvalidNetworks() == p.getInvalidNetworks() &&\n+                getInvalidHeader() == p.getInvalidHeader() &&\n+                getInvalidBlocks() == p.getInvalidBlocks() &&\n+                getInvalidTransactions() == p.getInvalidTransactions() &&\n+                getSuccessfulHandshakes() == p.getSuccessfulHandshakes() &&\n+                getValidTransactions() == p.getValidTransactions() &&\n+                getPunishments() == p.getPunishments() &&\n+                getPeersTotalScore() == p.getPeersTotalScore() &&\n+                getUnexpectedMessages() == p.getUnexpectedMessages() &&\n+                getTimeoutMessages() == p.getTimeoutMessages() &&\n+                getRepeatedMessages() == p.getRepeatedMessages() &&\n+                getValidBlocks() == p.getValidBlocks();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bb971acf84f9fc41a6289965b70202b6da4a833"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkyNjk4OA==", "bodyText": "sonarcloud :(", "url": "https://github.com/rsksmart/rskj/pull/1351#discussion_r527926988", "createdAt": "2020-11-20T19:31:16Z", "author": {"login": "fedejinich"}, "path": "rskj-core/src/main/java/co/rsk/scoring/PeerScoringReputationSummary.java", "diffHunk": "@@ -0,0 +1,163 @@\n+package co.rsk.scoring;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * This is a presentational object\n+ * It's used to expose a json rpc message (sco_badReputationSummary())\n+ */\n+public class PeerScoringReputationSummary {\n+    private int count;\n+    private int successfulHandshakes;\n+    private int failedHandshakes;\n+    private int invalidHeader;\n+    private int validBlocks;\n+    private int invalidBlocks;\n+    private int validTransactions;\n+    private int invalidTransactions;\n+    private int invalidNetworks;\n+    private int invalidMessages;\n+    private int repeatedMessages;\n+    private int timeoutMessages;\n+    private int unexpectedMessages;\n+    private int peersTotalScore;\n+    private int punishments;\n+    private int goodReputationCount;\n+    private int badReputationCount;\n+\n+    public PeerScoringReputationSummary(int count,\n+                                        int successfulHandshakes,\n+                                        int failedHandshakes,\n+                                        int invalidNetworks,\n+                                        int repeatedMessages,\n+                                        int validBlocks,\n+                                        int validTransactions,\n+                                        int invalidBlocks,\n+                                        int invalidTransactions,\n+                                        int invalidMessages,\n+                                        int timeoutMessages,\n+                                        int unexpectedMessages,\n+                                        int invalidHeader,\n+                                        int peersTotalScore,\n+                                        int punishments,\n+                                        int goodReputationCount,\n+                                        int badReputationCount) {\n+        this.count = count;\n+        this.successfulHandshakes = successfulHandshakes;\n+        this.failedHandshakes = failedHandshakes;\n+        this.invalidHeader = invalidHeader;\n+        this.validBlocks = validBlocks;\n+        this.invalidBlocks = invalidBlocks;\n+        this.validTransactions = validTransactions;\n+        this.invalidTransactions = invalidTransactions;\n+        this.invalidNetworks = invalidNetworks;\n+        this.invalidMessages = invalidMessages;\n+        this.repeatedMessages = repeatedMessages;\n+        this.timeoutMessages = timeoutMessages;\n+        this.unexpectedMessages = unexpectedMessages;\n+        this.peersTotalScore = peersTotalScore;\n+        this.punishments = punishments;\n+        this.goodReputationCount = goodReputationCount;\n+        this.badReputationCount = badReputationCount;\n+    }\n+\n+    public int getCount() {\n+        return count;\n+    }\n+\n+    public int getSuccessfulHandshakes() {\n+        return successfulHandshakes;\n+    }\n+\n+    public int getFailedHandshakes() {\n+        return failedHandshakes;\n+    }\n+\n+    public int getInvalidNetworks() {\n+        return invalidNetworks;\n+    }\n+\n+    public int getRepeatedMessages() {\n+        return repeatedMessages;\n+    }\n+\n+    public int getValidBlocks() {\n+        return validBlocks;\n+    }\n+\n+    public int getValidTransactions() {\n+        return validTransactions;\n+    }\n+\n+    public int getInvalidBlocks() {\n+        return invalidBlocks;\n+    }\n+\n+    public int getInvalidTransactions() {\n+        return invalidTransactions;\n+    }\n+\n+    public int getInvalidMessages() {\n+        return invalidMessages;\n+    }\n+\n+    public int getTimeoutMessages() {\n+        return timeoutMessages;\n+    }\n+\n+    public int getUnexpectedMessages() {\n+        return unexpectedMessages;\n+    }\n+\n+    public int getInvalidHeader() {\n+        return invalidHeader;\n+    }\n+\n+    public int getPeersTotalScore() {\n+        return peersTotalScore;\n+    }\n+\n+    public int getPunishments() {\n+        return punishments;\n+    }\n+\n+    public int getGoodReputationCount() {\n+        return goodReputationCount;\n+    }\n+\n+    public int getBadReputationCount() {\n+        return badReputationCount;\n+    }\n+\n+    @Override\n+    public boolean equals(Object object) {\n+        if(!(object instanceof PeerScoringReputationSummary)) {\n+            return false;\n+        }\n+        PeerScoringReputationSummary p = (PeerScoringReputationSummary) object;\n+\n+        return getCount() == p.getCount() &&\n+                getFailedHandshakes() == p.getFailedHandshakes() &&\n+                getInvalidMessages() == p.getInvalidMessages() &&\n+                getInvalidNetworks() == p.getInvalidNetworks() &&\n+                getInvalidHeader() == p.getInvalidHeader() &&\n+                getInvalidBlocks() == p.getInvalidBlocks() &&\n+                getInvalidTransactions() == p.getInvalidTransactions() &&\n+                getSuccessfulHandshakes() == p.getSuccessfulHandshakes() &&\n+                getValidTransactions() == p.getValidTransactions() &&\n+                getPunishments() == p.getPunishments() &&\n+                getPeersTotalScore() == p.getPeersTotalScore() &&\n+                getUnexpectedMessages() == p.getUnexpectedMessages() &&\n+                getTimeoutMessages() == p.getTimeoutMessages() &&\n+                getRepeatedMessages() == p.getRepeatedMessages() &&\n+                getValidBlocks() == p.getValidBlocks();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkyMjAxMw=="}, "originalCommit": {"oid": "6bb971acf84f9fc41a6289965b70202b6da4a833"}, "originalPosition": 153}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4525, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}