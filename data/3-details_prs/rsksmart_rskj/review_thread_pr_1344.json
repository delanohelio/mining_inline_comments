{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5MTg1MjMz", "number": 1344, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDoyODozMVrOEx7UDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNToyMTozN1rOEyaGPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNzg3NDcxOnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/peg/FastBridgeCompatibleBtcWallet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDoyODozMVrOHoSJcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDoyODozMVrOHoSJcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAwMjQxNw==", "bodyText": "You should be using the fastBridgeFederationInformation payToScriptHash.\nThe way you are trying to get the destination address won't work", "url": "https://github.com/rsksmart/rskj/pull/1344#discussion_r512002417", "createdAt": "2020-10-26T14:28:31Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/main/java/co/rsk/peg/FastBridgeCompatibleBtcWallet.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package co.rsk.peg;\n+\n+import co.rsk.bitcoinj.core.Context;\n+import co.rsk.bitcoinj.script.RedeemScriptParser;\n+import co.rsk.bitcoinj.script.Script;\n+import co.rsk.bitcoinj.wallet.RedeemData;\n+import co.rsk.peg.fastbridge.FastBridgeFederationInformation;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+\n+public class FastBridgeCompatibleBtcWallet extends BridgeBtcWallet {\n+    private final BridgeStorageProvider bridgeStorageProvider;\n+\n+    public FastBridgeCompatibleBtcWallet(Context btcContext, List<Federation> federations,\n+        BridgeStorageProvider bridgeStorageProvider) {\n+        super(btcContext, federations);\n+        this.bridgeStorageProvider = bridgeStorageProvider;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public RedeemData findRedeemDataFromScriptHash(byte[] payToScriptHash) {\n+        Optional<FastBridgeFederationInformation> fastBridgeFederationInformation =\n+            this.bridgeStorageProvider.getFastBridgeFederationInformation(payToScriptHash);\n+\n+        if (fastBridgeFederationInformation.isPresent()) {\n+            Optional<Federation> destinationFederation = getDestinationFederation(payToScriptHash);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e6f5c6ae3c0a290ac8fedb4dbc1966086ed701d"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTU3ODA2OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/peg/FastBridgeCompatibleBtcWallet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToxMToxOFrOHoiiTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToxMToxOFrOHoiiTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3MDkyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Optional<Federation> destinationFederation = getDestinationFederation(\n          \n          \n            \n                            fastBridgeFederationInformation.get().getFederationScriptHash());\n          \n          \n            \n                        FastBridgeFederationInformation fastBridgeFederationInformationInstance = fastBridgeFederationInformation.get(); \n          \n          \n            \n                        Optional<Federation> destinationFederation = getDestinationFederation(\n          \n          \n            \n                            fastBridgeFederationInformationInstance.getFederationScriptHash()\n          \n          \n            \n                        );\n          \n      \n    \n    \n  \n\nSeems like you are \"getting\" the optional many times, maybe get it just once into a variable", "url": "https://github.com/rsksmart/rskj/pull/1344#discussion_r512270926", "createdAt": "2020-10-26T21:11:18Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/main/java/co/rsk/peg/FastBridgeCompatibleBtcWallet.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package co.rsk.peg;\n+\n+import co.rsk.bitcoinj.core.Context;\n+import co.rsk.bitcoinj.script.RedeemScriptParser;\n+import co.rsk.bitcoinj.script.Script;\n+import co.rsk.bitcoinj.wallet.RedeemData;\n+import co.rsk.peg.fastbridge.FastBridgeFederationInformation;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+\n+public class FastBridgeCompatibleBtcWallet extends BridgeBtcWallet {\n+    private final BridgeStorageProvider bridgeStorageProvider;\n+\n+    public FastBridgeCompatibleBtcWallet(Context btcContext, List<Federation> federations,\n+        BridgeStorageProvider bridgeStorageProvider) {\n+        super(btcContext, federations);\n+        this.bridgeStorageProvider = bridgeStorageProvider;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public RedeemData findRedeemDataFromScriptHash(byte[] payToScriptHash) {\n+        Optional<FastBridgeFederationInformation> fastBridgeFederationInformation =\n+            this.bridgeStorageProvider.getFastBridgeFederationInformation(payToScriptHash);\n+\n+        if (fastBridgeFederationInformation.isPresent()) {\n+            Optional<Federation> destinationFederation = getDestinationFederation(\n+                fastBridgeFederationInformation.get().getFederationScriptHash());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7146f61cfc58fae6b69c83dcf94fd71d4ad7e51b"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTU4NDYxOnYy", "diffSide": "RIGHT", "path": "rskj-core/src/test/java/co/rsk/peg/FastBridgeCompatibleBtcWalletTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToxMzoyMVrOHoimXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToxMzoyMVrOHoimXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3MTk2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    when(provider.getFastBridgeFederationInformation(fastBridgeFederationP2SH)).thenReturn\n          \n          \n            \n                        (Optional.of(fastBridgeFederationInformation)\n          \n          \n            \n                    );\n          \n          \n            \n                    when(provider.getFastBridgeFederationInformation(fastBridgeFederationP2SH))\n          \n          \n            \n                       .thenReturn(Optional.of(fastBridgeFederationInformation));", "url": "https://github.com/rsksmart/rskj/pull/1344#discussion_r512271965", "createdAt": "2020-10-26T21:13:21Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/test/java/co/rsk/peg/FastBridgeCompatibleBtcWalletTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package co.rsk.peg;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import co.rsk.bitcoinj.core.Context;\n+import co.rsk.bitcoinj.core.NetworkParameters;\n+import co.rsk.bitcoinj.core.Sha256Hash;\n+import co.rsk.bitcoinj.script.RedeemScriptParser;\n+import co.rsk.bitcoinj.script.Script;\n+import co.rsk.bitcoinj.script.ScriptBuilder;\n+import co.rsk.bitcoinj.wallet.RedeemData;\n+import co.rsk.peg.fastbridge.FastBridgeFederationInformation;\n+import java.time.Instant;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class FastBridgeCompatibleBtcWalletTest {\n+    private final Federation federation = new Federation(\n+        FederationTestUtils.getFederationMembers(3),\n+        Instant.ofEpochMilli(1000),\n+        0L,\n+        NetworkParameters.fromID(NetworkParameters.ID_REGTEST)\n+    );\n+\n+    private final List<Federation> federationList = Collections.singletonList(federation);\n+\n+    @Test\n+    public void findRedeemDataFromScriptHash_with_no_fastBridgeInformation_in_storage_call_super() {\n+        BridgeStorageProvider provider = mock(BridgeStorageProvider.class);\n+        when(provider.getFastBridgeFederationInformation(any(byte[].class))).thenReturn(Optional.empty());\n+\n+        FastBridgeCompatibleBtcWallet fastBridgeCompatibleBtcWallet = new FastBridgeCompatibleBtcWallet(\n+            mock(Context.class), federationList, provider);\n+\n+        RedeemData redeemData = fastBridgeCompatibleBtcWallet.findRedeemDataFromScriptHash(\n+            federation.getP2SHScript().getPubKeyHash());\n+\n+        Assert.assertNotNull(redeemData);\n+        Assert.assertEquals(federation.getRedeemScript(), redeemData.redeemScript);\n+    }\n+\n+    @Test\n+    public void findRedeemDataFromScriptHash_with_fastBridgeInformation_in_storage() {\n+        BridgeStorageProvider provider = mock(BridgeStorageProvider.class);\n+        Sha256Hash derivationArgumentsHash = Sha256Hash.of(new byte[]{1});\n+\n+        Script fastBridgeRedeemScript = RedeemScriptParser.createMultiSigFastBridgeRedeemScript(\n+            federation.getRedeemScript(), derivationArgumentsHash);\n+\n+        Script p2SHOutputScript = ScriptBuilder.createP2SHOutputScript(fastBridgeRedeemScript);\n+        byte[] fastBridgeFederationP2SH = p2SHOutputScript.getPubKeyHash();\n+\n+        FastBridgeFederationInformation fastBridgeFederationInformation =\n+            new FastBridgeFederationInformation(derivationArgumentsHash,\n+                federation.getP2SHScript().getPubKeyHash());\n+\n+        when(provider.getFastBridgeFederationInformation(fastBridgeFederationP2SH)).thenReturn\n+            (Optional.of(fastBridgeFederationInformation)\n+        );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7146f61cfc58fae6b69c83dcf94fd71d4ad7e51b"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMjkxNTk0OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/peg/BridgeUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNToyMToxMlrOHpB6ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNToyMToxMlrOHpB6ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc4NTAxOQ==", "bodyText": "please, try to maintain the code standards.", "url": "https://github.com/rsksmart/rskj/pull/1344#discussion_r512785019", "createdAt": "2020-10-27T15:21:12Z", "author": {"login": "pamgonzalez"}, "path": "rskj-core/src/main/java/co/rsk/peg/BridgeUtils.java", "diffHunk": "@@ -49,22 +49,37 @@\n \n     private static final Logger logger = LoggerFactory.getLogger(\"BridgeUtils\");\n \n-    public static Wallet getFederationNoSpendWallet(Context btcContext, Federation federation) {\n-        return getFederationsNoSpendWallet(btcContext, Collections.singletonList(federation));\n+    public static Wallet getFederationNoSpendWallet(Context btcContext, Federation federation, boolean isFastBridgeCompatible, BridgeStorageProvider storageProvider) {\n+        return getFederationsNoSpendWallet(btcContext, Collections.singletonList(federation), isFastBridgeCompatible, storageProvider);\n     }\n \n-    public static Wallet getFederationsNoSpendWallet(Context btcContext, List<Federation> federations) {\n-        Wallet wallet = new BridgeBtcWallet(btcContext, federations);\n+    public static Wallet getFederationsNoSpendWallet(Context btcContext, List<Federation> federations,\n+        boolean isFastBridgeCompatible, BridgeStorageProvider storageProvider) {\n+        Wallet wallet;\n+        if (isFastBridgeCompatible) {\n+            wallet = new FastBridgeCompatibleBtcWallet(btcContext, federations, storageProvider);\n+        } else {\n+            wallet = new BridgeBtcWallet(btcContext, federations);\n+        }\n+\n         federations.forEach(federation -> wallet.addWatchedAddress(federation.getAddress(), federation.getCreationTime().toEpochMilli()));\n         return wallet;\n     }\n \n-    public static Wallet getFederationSpendWallet(Context btcContext, Federation federation, List<UTXO> utxos) {\n-        return getFederationsSpendWallet(btcContext, Collections.singletonList(federation), utxos);\n+    public static Wallet getFederationSpendWallet(Context btcContext, Federation federation, List<UTXO> utxos,\n+        boolean isFastBridgeCompatible, BridgeStorageProvider storageProvider) {\n+        return getFederationsSpendWallet(btcContext, Collections.singletonList(federation), utxos,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2b835303f8790a25ddcdccc4f008e5c7c3b2582"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMjkxNzA2OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/peg/BridgeUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNToyMToyM1rOHpB7Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNToyMToyM1rOHpB7Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc4NTE5OA==", "bodyText": "please, try to maintain the code standards.", "url": "https://github.com/rsksmart/rskj/pull/1344#discussion_r512785198", "createdAt": "2020-10-27T15:21:23Z", "author": {"login": "pamgonzalez"}, "path": "rskj-core/src/main/java/co/rsk/peg/BridgeUtils.java", "diffHunk": "@@ -49,22 +49,37 @@\n \n     private static final Logger logger = LoggerFactory.getLogger(\"BridgeUtils\");\n \n-    public static Wallet getFederationNoSpendWallet(Context btcContext, Federation federation) {\n-        return getFederationsNoSpendWallet(btcContext, Collections.singletonList(federation));\n+    public static Wallet getFederationNoSpendWallet(Context btcContext, Federation federation, boolean isFastBridgeCompatible, BridgeStorageProvider storageProvider) {\n+        return getFederationsNoSpendWallet(btcContext, Collections.singletonList(federation), isFastBridgeCompatible, storageProvider);\n     }\n \n-    public static Wallet getFederationsNoSpendWallet(Context btcContext, List<Federation> federations) {\n-        Wallet wallet = new BridgeBtcWallet(btcContext, federations);\n+    public static Wallet getFederationsNoSpendWallet(Context btcContext, List<Federation> federations,\n+        boolean isFastBridgeCompatible, BridgeStorageProvider storageProvider) {\n+        Wallet wallet;\n+        if (isFastBridgeCompatible) {\n+            wallet = new FastBridgeCompatibleBtcWallet(btcContext, federations, storageProvider);\n+        } else {\n+            wallet = new BridgeBtcWallet(btcContext, federations);\n+        }\n+\n         federations.forEach(federation -> wallet.addWatchedAddress(federation.getAddress(), federation.getCreationTime().toEpochMilli()));\n         return wallet;\n     }\n \n-    public static Wallet getFederationSpendWallet(Context btcContext, Federation federation, List<UTXO> utxos) {\n-        return getFederationsSpendWallet(btcContext, Collections.singletonList(federation), utxos);\n+    public static Wallet getFederationSpendWallet(Context btcContext, Federation federation, List<UTXO> utxos,\n+        boolean isFastBridgeCompatible, BridgeStorageProvider storageProvider) {\n+        return getFederationsSpendWallet(btcContext, Collections.singletonList(federation), utxos,\n+            isFastBridgeCompatible, storageProvider);\n     }\n \n-    public static Wallet getFederationsSpendWallet(Context btcContext, List<Federation> federations, List<UTXO> utxos) {\n-        Wallet wallet = new BridgeBtcWallet(btcContext, federations);\n+    public static Wallet getFederationsSpendWallet(Context btcContext, List<Federation> federations,\n+        List<UTXO> utxos, boolean isFastBridgeCompatible, BridgeStorageProvider storageProvider) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2b835303f8790a25ddcdccc4f008e5c7c3b2582"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMjkxODM3OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/peg/FastBridgeCompatibleBtcWallet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNToyMTozN1rOHpB7-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNToyMTozN1rOHpB7-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc4NTQwMg==", "bodyText": "please, try to maintain the code standards.", "url": "https://github.com/rsksmart/rskj/pull/1344#discussion_r512785402", "createdAt": "2020-10-27T15:21:37Z", "author": {"login": "pamgonzalez"}, "path": "rskj-core/src/main/java/co/rsk/peg/FastBridgeCompatibleBtcWallet.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package co.rsk.peg;\n+\n+import co.rsk.bitcoinj.core.Context;\n+import co.rsk.bitcoinj.script.RedeemScriptParser;\n+import co.rsk.bitcoinj.script.Script;\n+import co.rsk.bitcoinj.wallet.RedeemData;\n+import co.rsk.peg.fastbridge.FastBridgeFederationInformation;\n+import java.util.List;\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+\n+public class FastBridgeCompatibleBtcWallet extends BridgeBtcWallet {\n+    private final BridgeStorageProvider bridgeStorageProvider;\n+\n+    public FastBridgeCompatibleBtcWallet(Context btcContext, List<Federation> federations,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2b835303f8790a25ddcdccc4f008e5c7c3b2582"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4515, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}