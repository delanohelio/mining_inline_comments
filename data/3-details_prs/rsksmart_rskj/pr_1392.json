{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5NTk3MTE3", "number": 1392, "title": "Handle precompiled contracts errors", "bodyText": "Description\n\nThis is a VM level issue fix.\nIn case of failure in precompiled calls from a contract, we are not pushing a Zero to the Stack and the exception bubbles up failing the execution of the caller too, spending all the gas of both executions.\nWhat we are improving in this fix, is the way of handling those errors, not bubbling up the exception and pushing a Zero into the stack, consuming only the necessary gas for the precompiled call.\nMotivation and Context\n\n\nWe want to make sure we can handle the errors for precompiled calls in the best possible way. In the way it was implemented, there was no way of doing it, thats why we add this handler.\nHow Has This Been Tested?\n\n\n\nUnit testing, DSL tests and manual testing.\nTypes of changes\n\n\n Bug fix (non-breaking change which fixes an issue)\n New feature (non-breaking change which adds functionality)\n Breaking change (fix or feature that would cause existing functionality to not work as expected)\n\nChecklist:\n\n\n\n My code follows the code style of this project.\n My change requires a change to the documentation.\n I have updated the documentation accordingly.\n Tests for the changes have been added (for bug fixes / features)\n Requires Activation Code (Hard Fork)\n\n\nOther information:", "createdAt": "2020-12-14T15:43:29Z", "url": "https://github.com/rsksmart/rskj/pull/1392", "merged": true, "mergeCommit": {"oid": "d8d022573d9ebb209b6d90fa3f520e20b435b3c0"}, "closed": true, "closedAt": "2021-01-04T19:10:38Z", "author": {"login": "patogallaiovlabs"}, "timelineItems": {"totalCount": 36, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmaAOUAFqTU1MjQxNjU5NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABds6u7HgFqTU2MTI0ODk0OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNDE2NTk1", "url": "https://github.com/rsksmart/rskj/pull/1392#pullrequestreview-552416595", "createdAt": "2020-12-15T12:50:54Z", "commit": {"oid": "e9d458623d4d381b3650f6681bf536f3485b8336"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjo1MDo1NFrOIGJUEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzowMzo1NlrOIGJ1wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMxNDk2MA==", "bodyText": "Could we write the improvement proposal?", "url": "https://github.com/rsksmart/rskj/pull/1392#discussion_r543314960", "createdAt": "2020-12-15T12:50:54Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/main/java/org/ethereum/config/blockchain/upgrades/ConsensusRule.java", "diffHunk": "@@ -55,7 +55,9 @@\n     RSKIP172(\"rskip172\"),\n     RSKIP174(\"rskip174\"),\n     RSKIP180(\"rskip180\"),\n-    RSKIPUMM(\"rskipUMM\");\n+    RSKIPUMM(\"rskipUMM\"),\n+    // TODO: change activation code RSKIPNEW.\n+    RSKIPNEW(\"rskipNEW\"); //Handle error in Precompile Contracts execution.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9d458623d4d381b3650f6681bf536f3485b8336"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMxNzY3MQ==", "bodyText": "Why not to process these exceptions in TWO catch? And instead of PrecompiledContractException catch ExecutionException or something similar. So we could manage RuntimeException ONLY when the fork is NOT yet activated. Maybe you consider the case as out of scope, but it could be nice to have the RuntimeException removed from execution.", "url": "https://github.com/rsksmart/rskj/pull/1392#discussion_r543317671", "createdAt": "2020-12-15T12:54:55Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/main/java/org/ethereum/core/TransactionExecutor.java", "diffHunk": "@@ -340,7 +341,7 @@ private void call() {\n                 } else if (!track.isContract(targetAddress)) {\n                     track.setupContract(targetAddress);\n                 }\n-            } catch (RuntimeException e) {\n+            } catch (PrecompiledContractException | RuntimeException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9d458623d4d381b3650f6681bf536f3485b8336"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMyMjY2Ng==", "bodyText": "No PrecompiledContractException throws? Why?", "url": "https://github.com/rsksmart/rskj/pull/1392#discussion_r543322666", "createdAt": "2020-12-15T13:02:28Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/main/java/org/ethereum/vm/program/Program.java", "diffHunk": "@@ -1351,7 +1349,7 @@ public int verifyBeginSub(DataWord nextPC) {\n         return ret;\n     }\n \n-    public void callToPrecompiledAddress(MessageCall msg, PrecompiledContract contract, ActivationConfig.ForBlock activations) {\n+    public void callToPrecompiledAddress(MessageCall msg, PrecompiledContract contract) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9d458623d4d381b3650f6681bf536f3485b8336"}, "originalPosition": 230}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMyMzU4NQ==", "bodyText": "No treatment of PrecompiledContractException?", "url": "https://github.com/rsksmart/rskj/pull/1392#discussion_r543323585", "createdAt": "2020-12-15T13:03:56Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/main/java/org/ethereum/vm/VM.java", "diffHunk": "@@ -1490,9 +1490,9 @@ protected void doCALL(){\n         PrecompiledContracts.PrecompiledContract precompiledContract = precompiledContracts.getContractForAddress(activations, codeAddress);\n \n         if (precompiledContract != null) {\n-            program.callToPrecompiledAddress(msg, precompiledContract, activations);\n+            program.callToPrecompiledAddress(msg, precompiledContract);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9d458623d4d381b3650f6681bf536f3485b8336"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "10f4447e411cb00664f0150ddddd8457b986fe9b", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/10f4447e411cb00664f0150ddddd8457b986fe9b", "committedDate": "2020-12-15T17:11:52Z", "message": "fix sonarcloud codesmells"}, "afterCommit": {"oid": "89a8b7a46757319769a2485d4f2664c4dec9597e", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/89a8b7a46757319769a2485d4f2664c4dec9597e", "committedDate": "2020-12-15T17:42:00Z", "message": "fix sonarcloud codesmells"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2a64ddec9ded8207e2158ef91b5410b6be93f20a", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/2a64ddec9ded8207e2158ef91b5410b6be93f20a", "committedDate": "2020-12-16T00:58:21Z", "message": "fixed tests to call every precompiled contract"}, "afterCommit": {"oid": "b84608179b44ede3240829e23f17e26649710566", "author": {"user": {"login": "patogallaiovlabs", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/b84608179b44ede3240829e23f17e26649710566", "committedDate": "2020-12-16T14:15:57Z", "message": "Rename PrecompiledContractException -> VMException. Remove handling of RuntimeException, only VMException handler. Replace throwing of Runtime by VMException in precompiled."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0MDIxNDk5", "url": "https://github.com/rsksmart/rskj/pull/1392#pullrequestreview-554021499", "createdAt": "2020-12-16T19:37:20Z", "commit": {"oid": "2234432b865fc1b1c06fda562b85fe8b2a8f6a94"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0NjY1MzUw", "url": "https://github.com/rsksmart/rskj/pull/1392#pullrequestreview-554665350", "createdAt": "2020-12-17T14:39:36Z", "commit": {"oid": "071b8844e895152133d68a7bffa49a46e846e396"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0OTU5MDA3", "url": "https://github.com/rsksmart/rskj/pull/1392#pullrequestreview-554959007", "createdAt": "2020-12-17T20:23:05Z", "commit": {"oid": "071b8844e895152133d68a7bffa49a46e846e396"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMDoyMzowNVrOIIHWbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMDoyMzowNVrOIIHWbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM3OTk1MA==", "bodyText": "?", "url": "https://github.com/rsksmart/rskj/pull/1392#discussion_r545379950", "createdAt": "2020-12-17T20:23:05Z", "author": {"login": "donequis"}, "path": "rskj-core/src/test/java/co/rsk/peg/performance/FederationChangeTest.java", "diffHunk": "@@ -84,14 +87,15 @@ private void createFederation_winner(int times, ExecutionStats stats) {\n     }\n \n     @Test\n-    public void addFederatorPublicKey() {\n+    public void addFederatorPublicKey() throws VMException {\n         ExecutionStats stats = new ExecutionStats(\"addFederatorPublicKey\");\n         addFederatorPublicKey_noWinner(200, stats);\n         addFederatorPublicKey_winner(200, stats);\n         BridgePerformanceTest.addStats(stats);\n+        Assert.assertTrue(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "071b8844e895152133d68a7bffa49a46e846e396"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0OTU5NjU1", "url": "https://github.com/rsksmart/rskj/pull/1392#pullrequestreview-554959655", "createdAt": "2020-12-17T20:23:49Z", "commit": {"oid": "071b8844e895152133d68a7bffa49a46e846e396"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMDoyMzo0OVrOIIHYiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMDoyMzo0OVrOIIHYiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM4MDQ4OA==", "bodyText": "?", "url": "https://github.com/rsksmart/rskj/pull/1392#discussion_r545380488", "createdAt": "2020-12-17T20:23:49Z", "author": {"login": "donequis"}, "path": "rskj-core/src/test/java/co/rsk/peg/performance/FederationChangeTest.java", "diffHunk": "@@ -119,14 +123,15 @@ private void addFederatorPublicKey_winner(int times, ExecutionStats stats) {\n     }\n \n     @Test\n-    public void commitFederation() {\n+    public void commitFederation() throws VMException {\n         ExecutionStats stats = new ExecutionStats(\"commitFederation\");\n         commitFederation_noWinner(200, stats);\n         commitFederation_winner(200, stats);\n         BridgePerformanceTest.addStats(stats);\n+        Assert.assertTrue(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "071b8844e895152133d68a7bffa49a46e846e396"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0OTU5NzM3", "url": "https://github.com/rsksmart/rskj/pull/1392#pullrequestreview-554959737", "createdAt": "2020-12-17T20:23:56Z", "commit": {"oid": "071b8844e895152133d68a7bffa49a46e846e396"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMDoyMzo1NlrOIIHYzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMDoyMzo1NlrOIIHYzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM4MDU1Ng==", "bodyText": "?", "url": "https://github.com/rsksmart/rskj/pull/1392#discussion_r545380556", "createdAt": "2020-12-17T20:23:56Z", "author": {"login": "donequis"}, "path": "rskj-core/src/test/java/co/rsk/peg/performance/FederationChangeTest.java", "diffHunk": "@@ -151,14 +156,15 @@ private void commitFederation_winner(int times, ExecutionStats stats) {\n     }\n \n     @Test\n-    public void rollbackFederation() {\n+    public void rollbackFederation() throws VMException {\n         ExecutionStats stats = new ExecutionStats(\"rollbackFederation\");\n         rollbackFederation_noWinner(200, stats);\n         rollbackFederation_winner(200, stats);\n         BridgePerformanceTest.addStats(stats);\n+        Assert.assertTrue(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "071b8844e895152133d68a7bffa49a46e846e396"}, "originalPosition": 100}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0OTYwMTY5", "url": "https://github.com/rsksmart/rskj/pull/1392#pullrequestreview-554960169", "createdAt": "2020-12-17T20:24:34Z", "commit": {"oid": "071b8844e895152133d68a7bffa49a46e846e396"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMDoyNDozNVrOIIHaRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMDoyNDozNVrOIIHaRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM4MDkzMw==", "bodyText": "?", "url": "https://github.com/rsksmart/rskj/pull/1392#discussion_r545380933", "createdAt": "2020-12-17T20:24:35Z", "author": {"login": "donequis"}, "path": "rskj-core/src/test/java/co/rsk/peg/performance/LockWhitelistTest.java", "diffHunk": "@@ -45,25 +47,27 @@\n     private static final ECKey authorizedWhitelistChanger = ECKey.fromPrivate(Hex.decode(\"3890187a3071327cee08467ba1b44ed4c13adb2da0d5ffcc0563c371fa88259c\"));\n \n     @Test\n-    public void getLockWhitelistSize() throws IOException {\n+    public void getLockWhitelistSize() throws IOException, VMException {\n         ExecutionStats stats = new ExecutionStats(\"getLockWhitelistSize\");\n         executeTestCase((int executionIndex) -> Bridge.GET_LOCK_WHITELIST_SIZE.encode(), \"getLockWhitelistSize\", 200, stats);\n         BridgePerformanceTest.addStats(stats);\n+        Assert.assertTrue(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "071b8844e895152133d68a7bffa49a46e846e396"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MzcwODQx", "url": "https://github.com/rsksmart/rskj/pull/1392#pullrequestreview-556370841", "createdAt": "2020-12-21T13:16:51Z", "commit": {"oid": "76d46adbbf98326158e854c7f80388c739abf4b1"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1Nzc4Njc5", "url": "https://github.com/rsksmart/rskj/pull/1392#pullrequestreview-555778679", "createdAt": "2020-12-18T20:00:21Z", "commit": {"oid": "76d46adbbf98326158e854c7f80388c739abf4b1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMDowMDoyMVrOIIxCKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMDowMDoyMVrOIIxCKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA2Mjg4OA==", "bodyText": "this if should always be true at this point, right?", "url": "https://github.com/rsksmart/rskj/pull/1392#discussion_r546062888", "createdAt": "2020-12-18T20:00:21Z", "author": {"login": "fedejinich"}, "path": "rskj-core/src/main/java/org/ethereum/vm/program/Program.java", "diffHunk": "@@ -1424,28 +1425,73 @@ public void callToPrecompiledAddress(MessageCall msg, PrecompiledContract contra\n \n         long requiredGas = contract.getGasForData(data);\n         if (requiredGas > msg.getGas().longValue()) {\n-            this.refundGas(0, \"call pre-compiled\"); //matches cpp logic\n+            this.refundGas(0, CALL_PRECOMPILED_CAUSE); //matches cpp logic\n             this.stackPushZero();\n             track.rollback();\n-            this.cleanReturnDataBuffer(activations);\n+            this.cleanReturnDataBuffer();\n         } else {\n+            if (getActivations().isActive(ConsensusRule.RSKIP197)) {\n+                executePrecompiledAndHandleError(contract, msg, requiredGas, track, data);\n+            } else {\n+                executePrecompiled(contract, msg, requiredGas, track, data);\n+            }\n+        }\n+    }\n \n-            this.refundGas(msg.getGas().longValue() - requiredGas, \"call pre-compiled\");\n-\n+    /**\n+     * This is for compatibility before RSKIP197, no error handling was implemented when calling to precompiled contracts.\n+     *\n+     * This method shouldn't be modified, all new changes should go to executePrecompiledAndHandleError() method\n+     */\n+    @Deprecated\n+    private void executePrecompiled(PrecompiledContract contract, MessageCall msg, long requiredGas, Repository track, byte[] data) {\n+        try {\n+            this.refundGas(msg.getGas().longValue() - requiredGas, CALL_PRECOMPILED_CAUSE);\n             byte[] out = contract.execute(data);\n             if (getActivations().isActive(ConsensusRule.RSKIP90)) {\n                 this.returnDataBuffer = out;\n             }\n+            saveOutAfterExecution(msg, out);\n+            this.stackPushOne();\n+            track.commit();\n+        } catch (VMException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n \n-            // Avoid saving null returns to memory and limit the memory it can use.\n-            // If we're behind RSK150 activation, don't care about the null return, just save.\n-            if (getActivations().isActive(ConsensusRule.RSKIP150) && out != null) {\n-                this.memorySaveLimited(msg.getOutDataOffs().intValue(), out, msg.getOutDataSize().intValue());\n-            } else if (!getActivations().isActive(ConsensusRule.RSKIP150)) {\n-                this.memorySave(msg.getOutDataOffs().intValue(), out);\n+    /**\n+     * This is after RSKIP197, where we fix the way in which error is handled after a precompiled execution.\n+     */\n+    private void executePrecompiledAndHandleError(PrecompiledContract contract, MessageCall msg, long requiredGas, Repository track, byte[] data) {\n+        try {\n+            logger.trace(\"Executing Precompiled contract...\");\n+            byte[] out = contract.execute(data);\n+            if (getActivations().isActive(ConsensusRule.RSKIP90)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76d46adbbf98326158e854c7f80388c739abf4b1"}, "originalPosition": 131}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2NTcyMzgw", "url": "https://github.com/rsksmart/rskj/pull/1392#pullrequestreview-556572380", "createdAt": "2020-12-21T18:14:13Z", "commit": {"oid": "f611c8e575e10922a8b313259b8c0577e81793c7"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f611c8e575e10922a8b313259b8c0577e81793c7", "author": {"user": {"login": "patogallaiovlabs", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/f611c8e575e10922a8b313259b8c0577e81793c7", "committedDate": "2020-12-21T18:06:23Z", "message": "Small refactor. Remove old RSKIP checks from new code"}, "afterCommit": {"oid": "a7d2ea1cd86419e01de0502b6a7bcac93f03c1c2", "author": {"user": {"login": "patogallaiovlabs", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/a7d2ea1cd86419e01de0502b6a7bcac93f03c1c2", "committedDate": "2020-12-21T19:00:50Z", "message": "Small refactor. Remove old RSKIP checks from new code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5NTU1NDc4", "url": "https://github.com/rsksmart/rskj/pull/1392#pullrequestreview-559555478", "createdAt": "2020-12-29T14:26:21Z", "commit": {"oid": "a7d2ea1cd86419e01de0502b6a7bcac93f03c1c2"}, "state": "DISMISSED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNDoyNjoyMVrOIMQehA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNDozMjo1OVrOIMQnGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTcyMzc4MA==", "bodyText": "Why not add the try catch internally in ensureBtcBlockStore?", "url": "https://github.com/rsksmart/rskj/pull/1392#discussion_r549723780", "createdAt": "2020-12-29T14:26:21Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/main/java/co/rsk/peg/BridgeSupport.java", "diffHunk": "@@ -1992,9 +1993,14 @@ public boolean increaseLockingCap(Transaction tx, Coin newCap) {\n         return true;\n     }\n \n-    public void registerBtcCoinbaseTransaction(byte[] btcTxSerialized, Sha256Hash blockHash, byte[] pmtSerialized, Sha256Hash witnessMerkleRoot, byte[] witnessReservedValue) throws IOException, BlockStoreException {\n+    public void registerBtcCoinbaseTransaction(byte[] btcTxSerialized, Sha256Hash blockHash, byte[] pmtSerialized, Sha256Hash witnessMerkleRoot, byte[] witnessReservedValue) throws VMException {\n         Context.propagate(btcContext);\n-        this.ensureBtcBlockStore();\n+        try{\n+            this.ensureBtcBlockStore();\n+        }catch (BlockStoreException | IOException e) {\n+            logger.warn(\"Exception in registerBtcCoinbaseTransaction\", e);\n+            throw new VMException(\"Exception in registerBtcCoinbaseTransaction\", e);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7d2ea1cd86419e01de0502b6a7bcac93f03c1c2"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTcyNTk3OQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/rsksmart/rskj/pull/1392#discussion_r549725979", "createdAt": "2020-12-29T14:32:59Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/test/java/co/rsk/peg/performance/ActiveFederationTest.java", "diffHunk": "@@ -49,51 +51,53 @@\n     private Federation federation;\n \n     @Test\n-    public void getFederationAddress() throws IOException {\n+    public void getFederationAddress() throws IOException, VMException {\n         executeTestCase(Bridge.GET_FEDERATION_ADDRESS);\n     }\n \n     @Test\n-    public void getFederationSize() throws IOException {\n+    public void getFederationSize() throws IOException, VMException {\n         executeTestCase(Bridge.GET_FEDERATION_SIZE);\n     }\n \n     @Test\n-    public void getFederationThreshold() throws IOException {\n+    public void getFederationThreshold() throws IOException, VMException {\n         executeTestCase(Bridge.GET_FEDERATION_THRESHOLD);\n     }\n \n     @Test\n-    public void getFederationCreationTime() throws IOException {\n+    public void getFederationCreationTime() throws IOException, VMException {\n         executeTestCase(Bridge.GET_FEDERATION_CREATION_TIME);\n     }\n \n     @Test\n-    public void getFederationCreationBlockNumber() throws IOException {\n+    public void getFederationCreationBlockNumber() throws IOException, VMException {\n         executeTestCase(Bridge.GET_FEDERATION_CREATION_BLOCK_NUMBER);\n     }\n \n     @Test\n-    public void getFederatorPublicKey() throws IOException {\n+    public void getFederatorPublicKey() throws IOException, VMException {\n         ExecutionStats stats = new ExecutionStats(\"getFederatorPublicKey\");\n         ABIEncoder abiEncoder = (int executionIndex) -> Bridge.GET_FEDERATOR_PUBLIC_KEY.encode(new Object[]{Helper.randomInRange(0, federation.getBtcPublicKeys().size()-1)});\n         executeTestCaseSection(abiEncoder, \"getFederatorPublicKey\", true,50, stats);\n         executeTestCaseSection(abiEncoder, \"getFederatorPublicKey\", false,500, stats);\n-        BridgePerformanceTest.addStats(stats);\n+\n+        Assert.assertTrue(BridgePerformanceTest.addStats(stats));\n     }\n \n-    private void executeTestCase(CallTransaction.Function fn) {\n+    private void executeTestCase(CallTransaction.Function fn) throws VMException {\n         ExecutionStats stats = new ExecutionStats(fn.name);\n         executeTestCaseSection(fn,true,50, stats);\n         executeTestCaseSection(fn,false,500, stats);\n-        BridgePerformanceTest.addStats(stats);\n+\n+        Assert.assertTrue(BridgePerformanceTest.addStats(stats));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7d2ea1cd86419e01de0502b6a7bcac93f03c1c2"}, "originalPosition": 61}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eef605504f0681d0e95a01b6a6c8faf0d728cd90", "author": {"user": {"login": "patogallaiovlabs", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/eef605504f0681d0e95a01b6a6c8faf0d728cd90", "committedDate": "2020-12-30T14:14:21Z", "message": "Handle precompiled contracts, declare new exception for declared errors."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d059d8440b4f6210da8c5aea6ac56ebbbf552961", "author": {"user": {"login": "patogallaiovlabs", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/d059d8440b4f6210da8c5aea6ac56ebbbf552961", "committedDate": "2020-12-30T14:14:21Z", "message": "Add tests for nested call contracts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3eb320409106ae79b59522d2fb14cc1be23edbca", "author": {"user": {"login": "patogallaiovlabs", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/3eb320409106ae79b59522d2fb14cc1be23edbca", "committedDate": "2020-12-30T14:14:21Z", "message": "Add nested contract call tests, program tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf759c2c3f429ec01902992a7f3fa2f640501a87", "author": {"user": {"login": "patogallaiovlabs", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/bf759c2c3f429ec01902992a7f3fa2f640501a87", "committedDate": "2020-12-30T14:14:21Z", "message": "Minor changes, comments and signatures"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec550f3eb88e68eab83cd3757ad21f3db28e26ea", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/ec550f3eb88e68eab83cd3757ad21f3db28e26ea", "committedDate": "2020-12-30T14:14:21Z", "message": "add dsl tests for error handling on precompiled contract calls"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0132acafeda341fac3ecfd4574ce58528b766ce8", "author": {"user": {"login": "patogallaiovlabs", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/0132acafeda341fac3ecfd4574ce58528b766ce8", "committedDate": "2020-12-30T14:14:21Z", "message": "add asserts to sonar complaint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07a744f73b6dfcfc6b8633c541af05ca37bf4db4", "author": {"user": {"login": "patogallaiovlabs", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/07a744f73b6dfcfc6b8633c541af05ca37bf4db4", "committedDate": "2020-12-30T14:14:21Z", "message": "change log TRACE back to ERROR, minor sonar fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76ef22f0858b2ef2b043088b977b28d355d3ece6", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/76ef22f0858b2ef2b043088b977b28d355d3ece6", "committedDate": "2020-12-30T14:14:21Z", "message": "fix sonarcloud codesmells"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "119623557232d6ae6437d3548b5848b35cd4402b", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/119623557232d6ae6437d3548b5848b35cd4402b", "committedDate": "2020-12-30T14:14:21Z", "message": "add some comments and remove unused method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f57225773c59647de992b90618e260289d56dbac", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/f57225773c59647de992b90618e260289d56dbac", "committedDate": "2020-12-30T14:14:21Z", "message": "add custom config for DSL tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3ef838bfa7fc938c41792fa6f6737abc5b40acd", "author": {"user": {"login": "patogallaiovlabs", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/b3ef838bfa7fc938c41792fa6f6737abc5b40acd", "committedDate": "2020-12-30T14:41:50Z", "message": "Rename PrecompiledContractException -> VMException. Remove handling of RuntimeException, only VMException handler. Replace throwing of Runtime by VMException in precompiled."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6646e55931f2b72419dfabd869fc4d13fbf29caa", "author": {"user": {"login": "patogallaiovlabs", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/6646e55931f2b72419dfabd869fc4d13fbf29caa", "committedDate": "2020-12-30T14:41:50Z", "message": "fix sonar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e69eb8bca630dade6fc22109135dfa925463ebd", "author": {"user": {"login": "patogallaiovlabs", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/0e69eb8bca630dade6fc22109135dfa925463ebd", "committedDate": "2020-12-30T14:41:50Z", "message": "revert format style code changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c14559b2c7eb8b7f5d67245d11d941a80f3f1601", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/c14559b2c7eb8b7f5d67245d11d941a80f3f1601", "committedDate": "2020-12-30T14:41:51Z", "message": "rename rskip to match rskip197"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b4461ccf90eaeaa0f921339800292328b236937", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/5b4461ccf90eaeaa0f921339800292328b236937", "committedDate": "2020-12-30T14:41:51Z", "message": "fixed comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aba666856466235822eccd61143ed4fd901447b3", "author": {"user": {"login": "patogallaiovlabs", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/aba666856466235822eccd61143ed4fd901447b3", "committedDate": "2020-12-30T14:41:51Z", "message": "minor fixes after review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbeee9301abc5e8f9e9f401fececf6df157670db", "author": {"user": {"login": "fedejinich", "name": "Fede Jinich"}}, "url": "https://github.com/rsksmart/rskj/commit/dbeee9301abc5e8f9e9f401fececf6df157670db", "committedDate": "2020-12-30T14:41:51Z", "message": "executePrecopmiled() @Deprecated"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76ec6217e46a6b4ff178aff99c0469b00f61bda9", "author": {"user": {"login": "patogallaiovlabs", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/76ec6217e46a6b4ff178aff99c0469b00f61bda9", "committedDate": "2020-12-30T14:41:51Z", "message": "remove assertTrue(true)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e80dd11dacdd37121eb6e67234fbd2d6d67c895", "author": {"user": {"login": "patogallaiovlabs", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/2e80dd11dacdd37121eb6e67234fbd2d6d67c895", "committedDate": "2020-12-30T14:41:51Z", "message": "Small refactor. Remove old RSKIP checks from new code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a7d2ea1cd86419e01de0502b6a7bcac93f03c1c2", "author": {"user": {"login": "patogallaiovlabs", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/a7d2ea1cd86419e01de0502b6a7bcac93f03c1c2", "committedDate": "2020-12-21T19:00:50Z", "message": "Small refactor. Remove old RSKIP checks from new code"}, "afterCommit": {"oid": "2e80dd11dacdd37121eb6e67234fbd2d6d67c895", "author": {"user": {"login": "patogallaiovlabs", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/2e80dd11dacdd37121eb6e67234fbd2d6d67c895", "committedDate": "2020-12-30T14:41:51Z", "message": "Small refactor. Remove old RSKIP checks from new code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d4738b72ed504a6ed30e1e806854988a74c7ec4", "author": {"user": {"login": "patogallaiovlabs", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/6d4738b72ed504a6ed30e1e806854988a74c7ec4", "committedDate": "2021-01-04T18:28:53Z", "message": "Minor fix, TRACE to INFO in test logs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxMjQ4OTQ4", "url": "https://github.com/rsksmart/rskj/pull/1392#pullrequestreview-561248948", "createdAt": "2021-01-04T18:35:39Z", "commit": {"oid": "6d4738b72ed504a6ed30e1e806854988a74c7ec4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 452, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}