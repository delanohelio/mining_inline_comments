{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczNDE0NTIy", "number": 1297, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOTo0MToxMFrOEcN3LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzoyNToyNlrOEiOAjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDIyNzAxOnYy", "diffSide": "RIGHT", "path": "rskj-core/src/test/java/co/rsk/peg/BridgeSupportTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOTo0MToxMFrOHGnDIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDoyMDoxMlrOHGoRjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY5MzI4Mg==", "bodyText": "maybe mock the repository", "url": "https://github.com/rsksmart/rskj/pull/1297#discussion_r476693282", "createdAt": "2020-08-25T19:41:10Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/test/java/co/rsk/peg/BridgeSupportTest.java", "diffHunk": "@@ -4803,6 +4804,104 @@ public void addSignatureMultipleInputsPartiallyValid() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void processPegIn_no_lock_tx() throws IOException {\n+        BridgeSupport bridgeSupport = getBridgeSupport(bridgeConstants, mock(BridgeStorageProvider.class));\n+\n+        Assert.assertFalse(bridgeSupport.processPegIn(new BtcTransaction(btcParams),\n+                mock(Transaction.class),\n+                0,\n+                mock(Sha256Hash.class)));\n+    }\n+\n+    @Test\n+    public void processPegIn_tx_no_lockable_by_invalid_sender() throws IOException {\n+        assertProcessPegIn(ConsensusRule.RSKIP143,true, false,\n+                BtcLockSender.TxType.P2SHMULTISIG);\n+    }\n+\n+    @Test\n+    public void processPegIn_tx_no_lockable_by_not_whitelisted_address() throws IOException {\n+        assertProcessPegIn(null,false, false,\n+                BtcLockSender.TxType.P2PKH);\n+    }\n+\n+    @Test\n+    public void processPegIn_tx_no_lockable_by_surpassing_locking_cap() throws IOException {\n+        assertProcessPegIn(ConsensusRule.RSKIP134,true, true,\n+                BtcLockSender.TxType.P2PKH);\n+    }\n+\n+    @Test\n+    public void processRelease_no_release_tx() throws IOException {\n+        BridgeSupport bridgeSupport = getBridgeSupport(bridgeConstants, mock(BridgeStorageProvider.class));\n+        Assert.assertFalse(bridgeSupport.processRelease(new BtcTransaction(btcParams), mock(Sha256Hash.class)));\n+    }\n+\n+    @Test\n+    public void processMigration_no_migration_tx() throws IOException {\n+        BridgeSupport bridgeSupport = getBridgeSupport(bridgeConstants, mock(BridgeStorageProvider.class));\n+        Assert.assertFalse(bridgeSupport.processMigration(new BtcTransaction(btcParams), mock(Sha256Hash.class)));\n+    }\n+\n+    private void assertProcessPegIn(@Nullable ConsensusRule consensusRule, boolean isWhitelisted,\n+                                    boolean mockLockingCap, BtcLockSender.TxType lockSender) throws IOException {\n+        ActivationConfig.ForBlock activations = mock(ActivationConfig.ForBlock.class);\n+\n+        if (consensusRule != null) {\n+            when(activations.isActive(consensusRule)).thenReturn(true);\n+        }\n+\n+        Repository repository = createRepository();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a577abbab04fb4d46417e23707a624072014fae"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjcxMzM1Nw==", "bodyText": "I need to leave it because otherwise fails calling to getBtcLockedInFederation() on verifyLockDoesNotSurpassLockingCap", "url": "https://github.com/rsksmart/rskj/pull/1297#discussion_r476713357", "createdAt": "2020-08-25T20:20:12Z", "author": {"login": "guidohernan93"}, "path": "rskj-core/src/test/java/co/rsk/peg/BridgeSupportTest.java", "diffHunk": "@@ -4803,6 +4804,104 @@ public void addSignatureMultipleInputsPartiallyValid() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void processPegIn_no_lock_tx() throws IOException {\n+        BridgeSupport bridgeSupport = getBridgeSupport(bridgeConstants, mock(BridgeStorageProvider.class));\n+\n+        Assert.assertFalse(bridgeSupport.processPegIn(new BtcTransaction(btcParams),\n+                mock(Transaction.class),\n+                0,\n+                mock(Sha256Hash.class)));\n+    }\n+\n+    @Test\n+    public void processPegIn_tx_no_lockable_by_invalid_sender() throws IOException {\n+        assertProcessPegIn(ConsensusRule.RSKIP143,true, false,\n+                BtcLockSender.TxType.P2SHMULTISIG);\n+    }\n+\n+    @Test\n+    public void processPegIn_tx_no_lockable_by_not_whitelisted_address() throws IOException {\n+        assertProcessPegIn(null,false, false,\n+                BtcLockSender.TxType.P2PKH);\n+    }\n+\n+    @Test\n+    public void processPegIn_tx_no_lockable_by_surpassing_locking_cap() throws IOException {\n+        assertProcessPegIn(ConsensusRule.RSKIP134,true, true,\n+                BtcLockSender.TxType.P2PKH);\n+    }\n+\n+    @Test\n+    public void processRelease_no_release_tx() throws IOException {\n+        BridgeSupport bridgeSupport = getBridgeSupport(bridgeConstants, mock(BridgeStorageProvider.class));\n+        Assert.assertFalse(bridgeSupport.processRelease(new BtcTransaction(btcParams), mock(Sha256Hash.class)));\n+    }\n+\n+    @Test\n+    public void processMigration_no_migration_tx() throws IOException {\n+        BridgeSupport bridgeSupport = getBridgeSupport(bridgeConstants, mock(BridgeStorageProvider.class));\n+        Assert.assertFalse(bridgeSupport.processMigration(new BtcTransaction(btcParams), mock(Sha256Hash.class)));\n+    }\n+\n+    private void assertProcessPegIn(@Nullable ConsensusRule consensusRule, boolean isWhitelisted,\n+                                    boolean mockLockingCap, BtcLockSender.TxType lockSender) throws IOException {\n+        ActivationConfig.ForBlock activations = mock(ActivationConfig.ForBlock.class);\n+\n+        if (consensusRule != null) {\n+            when(activations.isActive(consensusRule)).thenReturn(true);\n+        }\n+\n+        Repository repository = createRepository();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY5MzI4Mg=="}, "originalCommit": {"oid": "0a577abbab04fb4d46417e23707a624072014fae"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDIzMTEyOnYy", "diffSide": "RIGHT", "path": "rskj-core/src/test/java/co/rsk/peg/BridgeSupportTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOTo0MjoyOVrOHGnFqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDoyMDoyMFrOHGoR4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY5MzkyOQ==", "bodyText": "If I'm not wrong, you are testing refunds in here, right?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void assertProcessPegIn(@Nullable ConsensusRule consensusRule, boolean isWhitelisted,\n          \n          \n            \n                private void assertRefundInProcessPegIn(@Nullable ConsensusRule consensusRule, boolean isWhitelisted,", "url": "https://github.com/rsksmart/rskj/pull/1297#discussion_r476693929", "createdAt": "2020-08-25T19:42:29Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/test/java/co/rsk/peg/BridgeSupportTest.java", "diffHunk": "@@ -4803,6 +4804,104 @@ public void addSignatureMultipleInputsPartiallyValid() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void processPegIn_no_lock_tx() throws IOException {\n+        BridgeSupport bridgeSupport = getBridgeSupport(bridgeConstants, mock(BridgeStorageProvider.class));\n+\n+        Assert.assertFalse(bridgeSupport.processPegIn(new BtcTransaction(btcParams),\n+                mock(Transaction.class),\n+                0,\n+                mock(Sha256Hash.class)));\n+    }\n+\n+    @Test\n+    public void processPegIn_tx_no_lockable_by_invalid_sender() throws IOException {\n+        assertProcessPegIn(ConsensusRule.RSKIP143,true, false,\n+                BtcLockSender.TxType.P2SHMULTISIG);\n+    }\n+\n+    @Test\n+    public void processPegIn_tx_no_lockable_by_not_whitelisted_address() throws IOException {\n+        assertProcessPegIn(null,false, false,\n+                BtcLockSender.TxType.P2PKH);\n+    }\n+\n+    @Test\n+    public void processPegIn_tx_no_lockable_by_surpassing_locking_cap() throws IOException {\n+        assertProcessPegIn(ConsensusRule.RSKIP134,true, true,\n+                BtcLockSender.TxType.P2PKH);\n+    }\n+\n+    @Test\n+    public void processRelease_no_release_tx() throws IOException {\n+        BridgeSupport bridgeSupport = getBridgeSupport(bridgeConstants, mock(BridgeStorageProvider.class));\n+        Assert.assertFalse(bridgeSupport.processRelease(new BtcTransaction(btcParams), mock(Sha256Hash.class)));\n+    }\n+\n+    @Test\n+    public void processMigration_no_migration_tx() throws IOException {\n+        BridgeSupport bridgeSupport = getBridgeSupport(bridgeConstants, mock(BridgeStorageProvider.class));\n+        Assert.assertFalse(bridgeSupport.processMigration(new BtcTransaction(btcParams), mock(Sha256Hash.class)));\n+    }\n+\n+    private void assertProcessPegIn(@Nullable ConsensusRule consensusRule, boolean isWhitelisted,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a577abbab04fb4d46417e23707a624072014fae"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjcxMzQ0MQ==", "bodyText": "Done", "url": "https://github.com/rsksmart/rskj/pull/1297#discussion_r476713441", "createdAt": "2020-08-25T20:20:20Z", "author": {"login": "guidohernan93"}, "path": "rskj-core/src/test/java/co/rsk/peg/BridgeSupportTest.java", "diffHunk": "@@ -4803,6 +4804,104 @@ public void addSignatureMultipleInputsPartiallyValid() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void processPegIn_no_lock_tx() throws IOException {\n+        BridgeSupport bridgeSupport = getBridgeSupport(bridgeConstants, mock(BridgeStorageProvider.class));\n+\n+        Assert.assertFalse(bridgeSupport.processPegIn(new BtcTransaction(btcParams),\n+                mock(Transaction.class),\n+                0,\n+                mock(Sha256Hash.class)));\n+    }\n+\n+    @Test\n+    public void processPegIn_tx_no_lockable_by_invalid_sender() throws IOException {\n+        assertProcessPegIn(ConsensusRule.RSKIP143,true, false,\n+                BtcLockSender.TxType.P2SHMULTISIG);\n+    }\n+\n+    @Test\n+    public void processPegIn_tx_no_lockable_by_not_whitelisted_address() throws IOException {\n+        assertProcessPegIn(null,false, false,\n+                BtcLockSender.TxType.P2PKH);\n+    }\n+\n+    @Test\n+    public void processPegIn_tx_no_lockable_by_surpassing_locking_cap() throws IOException {\n+        assertProcessPegIn(ConsensusRule.RSKIP134,true, true,\n+                BtcLockSender.TxType.P2PKH);\n+    }\n+\n+    @Test\n+    public void processRelease_no_release_tx() throws IOException {\n+        BridgeSupport bridgeSupport = getBridgeSupport(bridgeConstants, mock(BridgeStorageProvider.class));\n+        Assert.assertFalse(bridgeSupport.processRelease(new BtcTransaction(btcParams), mock(Sha256Hash.class)));\n+    }\n+\n+    @Test\n+    public void processMigration_no_migration_tx() throws IOException {\n+        BridgeSupport bridgeSupport = getBridgeSupport(bridgeConstants, mock(BridgeStorageProvider.class));\n+        Assert.assertFalse(bridgeSupport.processMigration(new BtcTransaction(btcParams), mock(Sha256Hash.class)));\n+    }\n+\n+    private void assertProcessPegIn(@Nullable ConsensusRule consensusRule, boolean isWhitelisted,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY5MzkyOQ=="}, "originalCommit": {"oid": "0a577abbab04fb4d46417e23707a624072014fae"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDIzMjc5OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/test/java/co/rsk/peg/BridgeSupportTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOTo0MzowNlrOHGnGtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDoyMDo1NVrOHGoTJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY5NDE5OQ==", "bodyText": "?", "url": "https://github.com/rsksmart/rskj/pull/1297#discussion_r476694199", "createdAt": "2020-08-25T19:43:06Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/test/java/co/rsk/peg/BridgeSupportTest.java", "diffHunk": "@@ -53,6 +53,7 @@\n import org.mockito.ArgumentCaptor;\n import org.mockito.Mockito;\n \n+import javax.annotation.Nullable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a577abbab04fb4d46417e23707a624072014fae"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjcxMzc2NQ==", "bodyText": "Move Nullable parameter to the end of list of parameters, but left it just for clarity.", "url": "https://github.com/rsksmart/rskj/pull/1297#discussion_r476713765", "createdAt": "2020-08-25T20:20:55Z", "author": {"login": "guidohernan93"}, "path": "rskj-core/src/test/java/co/rsk/peg/BridgeSupportTest.java", "diffHunk": "@@ -53,6 +53,7 @@\n import org.mockito.ArgumentCaptor;\n import org.mockito.Mockito;\n \n+import javax.annotation.Nullable;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY5NDE5OQ=="}, "originalCommit": {"oid": "0a577abbab04fb4d46417e23707a624072014fae"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzE0ODE3OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/peg/Bridge.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzoyMzoyMFrOHJOoZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozMjozNVrOHJO6SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQzODk0OQ==", "bodyText": "registerBtcTransaction shouldn't throw RegisterBtcTransactionException. It is caught inside the method", "url": "https://github.com/rsksmart/rskj/pull/1297#discussion_r479438949", "createdAt": "2020-08-28T17:23:20Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/main/java/co/rsk/peg/Bridge.java", "diffHunk": "@@ -446,7 +446,7 @@ public void registerBtcTransaction(Object[] args) {\n         byte[] pmtSerialized = (byte[]) args[2];\n         try {\n             bridgeSupport.registerBtcTransaction(rskTx, btcTxSerialized, height, pmtSerialized);\n-        } catch (IOException | BlockStoreException e) {\n+        } catch (IOException | BlockStoreException | RegisterBtcTransactionException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e8d48225d2bb83dbb989582760080f9e4d0f014"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ0MzUyOA==", "bodyText": "Once registerBtcTransaction gets changed to not throw RegisterBtcTransactionException, you should remove the reference of said exception from the tests \ud83d\ude13", "url": "https://github.com/rsksmart/rskj/pull/1297#discussion_r479443528", "createdAt": "2020-08-28T17:32:35Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/main/java/co/rsk/peg/Bridge.java", "diffHunk": "@@ -446,7 +446,7 @@ public void registerBtcTransaction(Object[] args) {\n         byte[] pmtSerialized = (byte[]) args[2];\n         try {\n             bridgeSupport.registerBtcTransaction(rskTx, btcTxSerialized, height, pmtSerialized);\n-        } catch (IOException | BlockStoreException e) {\n+        } catch (IOException | BlockStoreException | RegisterBtcTransactionException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQzODk0OQ=="}, "originalCommit": {"oid": "5e8d48225d2bb83dbb989582760080f9e4d0f014"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzE2NTU4OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/peg/BridgeSupport.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzoyNToyNlrOHP-T9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzoyNToyNlrOHP-T9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUxMTYwNA==", "bodyText": "Check the indentation here", "url": "https://github.com/rsksmart/rskj/pull/1297#discussion_r486511604", "createdAt": "2020-09-10T17:25:26Z", "author": {"login": "marcos-iov"}, "path": "rskj-core/src/main/java/co/rsk/peg/BridgeSupport.java", "diffHunk": "@@ -258,81 +265,118 @@ public Wallet getNoSpendWalletForLiveFederations() throws IOException {\n      * @throws BlockStoreException\n      * @throws IOException\n      */\n-    public void registerBtcTransaction(Transaction rskTx, byte[] btcTxSerialized, int height, byte[] pmtSerialized) throws IOException, BlockStoreException {\n-        Context.propagate(btcContext);\n-        Sha256Hash btcTxHash = BtcTransactionFormatUtils.calculateBtcTxHash(btcTxSerialized);\n+    public void registerBtcTransaction(Transaction rskTx, byte[] btcTxSerialized, int height, byte[] pmtSerialized)\n+            throws IOException, BlockStoreException {\n+            Context.propagate(btcContext);\n+            Sha256Hash btcTxHash = BtcTransactionFormatUtils.calculateBtcTxHash(btcTxSerialized);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b5207fc7c52f1affa35999e1e762f686eb45f3b"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4464, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}