{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0MTk5MjMy", "number": 1395, "title": "Added Peg-in rejection events", "bodyText": "Description\n\nThis adds changes to the Bridge peg-in protocol in order to register evidence on-chain when a peg-in was rejected and why it happened.\nMotivation and Context\n\n\nThese changes will improve the user experience of the peg-in.\nHow Has This Been Tested?\n\n\n\nTypes of changes\n\n\n Bug fix (non-breaking change which fixes an issue)\n New feature (non-breaking change which adds functionality)\n Breaking change (fix or feature that would cause existing functionality to not work as expected)\n\nChecklist:\n\n\n\n My code follows the code style of this project.\n My change requires a change to the documentation.\n I have updated the documentation accordingly.\n Tests for the changes have been added (for bug fixes / features)\n Requires Activation Code (Hard Fork)\n\n\nOther information:\n\nfit:add-pegin-rejection-events", "createdAt": "2020-12-22T15:38:19Z", "url": "https://github.com/rsksmart/rskj/pull/1395", "merged": true, "mergeCommit": {"oid": "39b32debd7731f747162188c36d116224c8882ee"}, "closed": true, "closedAt": "2021-02-03T17:06:30Z", "author": {"login": "Vovchyk"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdq_0UOgFqTU1OTY2OTI1NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABd2haaqAFqTU4MjQ0MDA2NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5NjY5MjU1", "url": "https://github.com/rsksmart/rskj/pull/1395#pullrequestreview-559669255", "createdAt": "2020-12-29T19:23:14Z", "commit": {"oid": "cc13fceb3c18d1b9c26774e6618b87c72f657b0f"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cc13fceb3c18d1b9c26774e6618b87c72f657b0f", "author": {"user": {"login": "Vovchyk", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/cc13fceb3c18d1b9c26774e6618b87c72f657b0f", "committedDate": "2020-12-23T15:33:54Z", "message": "Added unit tests"}, "afterCommit": {"oid": "e5684be3306fc3c948c9e9118e0ab02254d5fb5c", "author": {"user": {"login": "Vovchyk", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/e5684be3306fc3c948c9e9118e0ab02254d5fb5c", "committedDate": "2020-12-30T09:39:42Z", "message": "Added unit tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e5684be3306fc3c948c9e9118e0ab02254d5fb5c", "author": {"user": {"login": "Vovchyk", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/e5684be3306fc3c948c9e9118e0ab02254d5fb5c", "committedDate": "2020-12-30T09:39:42Z", "message": "Added unit tests"}, "afterCommit": {"oid": "9a52062f5feeec9add508bb68f2b820527829e48", "author": {"user": {"login": "Vovchyk", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/9a52062f5feeec9add508bb68f2b820527829e48", "committedDate": "2021-01-22T14:15:58Z", "message": "Added unit tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc0Mzg1NTQx", "url": "https://github.com/rsksmart/rskj/pull/1395#pullrequestreview-574385541", "createdAt": "2021-01-22T15:51:36Z", "commit": {"oid": "9a52062f5feeec9add508bb68f2b820527829e48"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxNTo1MTozNlrOIYqEMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxNTo1MTozNlrOIYqEMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjcyNTkzOA==", "bodyText": "Could we have an explicit test of event having the signature expected by external tools? ie, an assert equals against a calculated hash. So, we could be sure the event is consumible and queryable by external tools, using a code test. My concert is that, if we apply fuzzy testing to the event function code (and then, changing the resulting signature), all these tests could pass in green", "url": "https://github.com/rsksmart/rskj/pull/1395#discussion_r562725938", "createdAt": "2021-01-22T15:51:36Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/test/java/co/rsk/peg/utils/BridgeEventLoggerImplTest.java", "diffHunk": "@@ -625,6 +625,76 @@ public void logReleaseBtcRequested() {\n         Assert.assertArrayEquals(event.encodeEventData(amount.getValue()), result.getData());\n     }\n \n+    @Test\n+    public void logRejectedPegin() {\n+        // Setup event logger\n+        ActivationConfig.ForBlock activations = mock(ActivationConfig.ForBlock.class);\n+        List<LogInfo> eventLogs = new LinkedList<>();\n+\n+        BridgeEventLogger eventLogger = new BridgeEventLoggerImpl(null, activations, eventLogs);\n+\n+        BtcTransaction btcTx = new BtcTransaction(BridgeRegTestConstants.getInstance().getBtcParams());\n+\n+        eventLogger.logRejectedPegin(btcTx, RejectedPeginReason.PEGIN_CAP_SURPASSED);\n+\n+        Assert.assertEquals(1, eventLogs.size());\n+        LogInfo entry = eventLogs.get(0);\n+\n+        Assert.assertEquals(PrecompiledContracts.BRIDGE_ADDR, new RskAddress(entry.getAddress()));\n+\n+        // Assert address that made the log\n+        LogInfo result = eventLogs.get(0);\n+        Assert.assertArrayEquals(PrecompiledContracts.BRIDGE_ADDR.getBytes(), result.getAddress());\n+\n+        // Assert log topics\n+        Assert.assertEquals(2, result.getTopics().size());\n+        CallTransaction.Function event = BridgeEvents.REJECTED_PEGIN.getEvent();\n+\n+        byte[][] topics = event.encodeEventTopics(btcTx.getHash().getBytes());\n+\n+        for (int i=0; i<topics.length; i++) {\n+            Assert.assertArrayEquals(topics[i], result.getTopics().get(i).getData());\n+        }\n+\n+        // Assert log data\n+        Assert.assertArrayEquals(event.encodeEventData(RejectedPeginReason.PEGIN_CAP_SURPASSED.getValue()), result.getData());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a52062f5feeec9add508bb68f2b820527829e48"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc1ODEwNTMx", "url": "https://github.com/rsksmart/rskj/pull/1395#pullrequestreview-575810531", "createdAt": "2021-01-25T21:10:34Z", "commit": {"oid": "9a52062f5feeec9add508bb68f2b820527829e48"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQyMToxMDozNFrOIZ6mVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQyMToxMzowOFrOIZ6rvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDA0NTM5Ng==", "bodyText": "This is not correct.\nThe status of RSKIP170 doesn't ensure the pegin was a pegin-v1. pegin v1 and pegin legacy will co exist after Iris activation.\nYou can check the type of pegin using the peginInformation object (see https://github.com/rsksmart/rskj/blob/master/rskj-core/src/main/java/co/rsk/peg/PeginInformation.java#L44 )\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (activations.isActive(ConsensusRule.RSKIP170)) {\n          \n          \n            \n                                eventLogger.logUnrefundablePegin(btcTx, UnrefundablePeginReason.PEGIN_V1_REFUND_ADDRESS_NOT_SET);\n          \n          \n            \n                            } else {\n          \n          \n            \n                                eventLogger.logUnrefundablePegin(btcTx, UnrefundablePeginReason.LEGACY_PEGIN_UNDETERMINED_SENDER);\n          \n          \n            \n                            }\n          \n          \n            \n                            if (peginInformation.getProtocolVersion() == 1) {\n          \n          \n            \n                                eventLogger.logUnrefundablePegin(btcTx, UnrefundablePeginReason.PEGIN_V1_REFUND_ADDRESS_NOT_SET);\n          \n          \n            \n                            } else {\n          \n          \n            \n                                eventLogger.logUnrefundablePegin(btcTx, UnrefundablePeginReason.LEGACY_PEGIN_UNDETERMINED_SENDER);\n          \n          \n            \n                            }\n          \n      \n    \n    \n  \n\nThis could be improved by at least encoding the 1 in an enum. What do you think @marcos-iov ?", "url": "https://github.com/rsksmart/rskj/pull/1395#discussion_r564045396", "createdAt": "2021-01-25T21:10:34Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/main/java/co/rsk/peg/BridgeSupport.java", "diffHunk": "@@ -475,6 +495,14 @@ private void refundTxSender(\n             generateRejectionRelease(btcTx, btcRefundAddress, rskTx, amount);\n         } else {\n             logger.debug(\"[refundTxSender] No btc refund address provided, couldn't get sender address either. Can't refund\");\n+\n+            if (activations.isActive(ConsensusRule.RSKIP181)) {\n+                if (activations.isActive(ConsensusRule.RSKIP170)) {\n+                    eventLogger.logUnrefundablePegin(btcTx, UnrefundablePeginReason.PEGIN_V1_REFUND_ADDRESS_NOT_SET);\n+                } else {\n+                    eventLogger.logUnrefundablePegin(btcTx, UnrefundablePeginReason.LEGACY_PEGIN_UNDETERMINED_SENDER);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a52062f5feeec9add508bb68f2b820527829e48"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDA0Njc4MA==", "bodyText": "@ajlopezrsk has a good point here. We are doing this though in the integration tests already, so we can leave this comment as tech debt to be solved by the fed team afterwards", "url": "https://github.com/rsksmart/rskj/pull/1395#discussion_r564046780", "createdAt": "2021-01-25T21:13:08Z", "author": {"login": "josedahlquist"}, "path": "rskj-core/src/test/java/co/rsk/peg/utils/BridgeEventLoggerImplTest.java", "diffHunk": "@@ -625,6 +625,76 @@ public void logReleaseBtcRequested() {\n         Assert.assertArrayEquals(event.encodeEventData(amount.getValue()), result.getData());\n     }\n \n+    @Test\n+    public void logRejectedPegin() {\n+        // Setup event logger\n+        ActivationConfig.ForBlock activations = mock(ActivationConfig.ForBlock.class);\n+        List<LogInfo> eventLogs = new LinkedList<>();\n+\n+        BridgeEventLogger eventLogger = new BridgeEventLoggerImpl(null, activations, eventLogs);\n+\n+        BtcTransaction btcTx = new BtcTransaction(BridgeRegTestConstants.getInstance().getBtcParams());\n+\n+        eventLogger.logRejectedPegin(btcTx, RejectedPeginReason.PEGIN_CAP_SURPASSED);\n+\n+        Assert.assertEquals(1, eventLogs.size());\n+        LogInfo entry = eventLogs.get(0);\n+\n+        Assert.assertEquals(PrecompiledContracts.BRIDGE_ADDR, new RskAddress(entry.getAddress()));\n+\n+        // Assert address that made the log\n+        LogInfo result = eventLogs.get(0);\n+        Assert.assertArrayEquals(PrecompiledContracts.BRIDGE_ADDR.getBytes(), result.getAddress());\n+\n+        // Assert log topics\n+        Assert.assertEquals(2, result.getTopics().size());\n+        CallTransaction.Function event = BridgeEvents.REJECTED_PEGIN.getEvent();\n+\n+        byte[][] topics = event.encodeEventTopics(btcTx.getHash().getBytes());\n+\n+        for (int i=0; i<topics.length; i++) {\n+            Assert.assertArrayEquals(topics[i], result.getTopics().get(i).getData());\n+        }\n+\n+        // Assert log data\n+        Assert.assertArrayEquals(event.encodeEventData(RejectedPeginReason.PEGIN_CAP_SURPASSED.getValue()), result.getData());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjcyNTkzOA=="}, "originalCommit": {"oid": "9a52062f5feeec9add508bb68f2b820527829e48"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc2MzkwNzEz", "url": "https://github.com/rsksmart/rskj/pull/1395#pullrequestreview-576390713", "createdAt": "2021-01-26T14:18:30Z", "commit": {"oid": "29da9bbc4995e2bf1da8c9a27ef0e62f9aa317d5"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc2NDgwOTc1", "url": "https://github.com/rsksmart/rskj/pull/1395#pullrequestreview-576480975", "createdAt": "2021-01-26T15:43:03Z", "commit": {"oid": "29da9bbc4995e2bf1da8c9a27ef0e62f9aa317d5"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgwNTQxNDY4", "url": "https://github.com/rsksmart/rskj/pull/1395#pullrequestreview-580541468", "createdAt": "2021-02-01T16:36:58Z", "commit": {"oid": "29da9bbc4995e2bf1da8c9a27ef0e62f9aa317d5"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff56ccc6df30888317cb591ee640b27bbf435a95", "author": {"user": {"login": "Vovchyk", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/ff56ccc6df30888317cb591ee640b27bbf435a95", "committedDate": "2021-02-03T13:33:15Z", "message": "Added Peg-in rejection events"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3c53bf0fd9d3219295c13af69fb5217bcb92eec", "author": {"user": {"login": "Vovchyk", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/f3c53bf0fd9d3219295c13af69fb5217bcb92eec", "committedDate": "2021-02-03T13:33:15Z", "message": "Added HF activation logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e0e7e0268a7e00862a308a0c26924049a86e847", "author": {"user": {"login": "Vovchyk", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/0e0e7e0268a7e00862a308a0c26924049a86e847", "committedDate": "2021-02-03T13:33:15Z", "message": "Added unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74aebb6abbb880d53d8f185275774e3057d1ae48", "author": {"user": {"login": "Vovchyk", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/74aebb6abbb880d53d8f185275774e3057d1ae48", "committedDate": "2021-02-03T13:33:15Z", "message": "Update rskj-core/src/main/java/co/rsk/peg/BridgeSupport.java\n\nCo-authored-by: josedahlquist <jose.dahlquist@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "29da9bbc4995e2bf1da8c9a27ef0e62f9aa317d5", "author": {"user": {"login": "Vovchyk", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/29da9bbc4995e2bf1da8c9a27ef0e62f9aa317d5", "committedDate": "2021-01-26T10:23:27Z", "message": "Update rskj-core/src/main/java/co/rsk/peg/BridgeSupport.java\n\nCo-authored-by: josedahlquist <jose.dahlquist@gmail.com>"}, "afterCommit": {"oid": "74aebb6abbb880d53d8f185275774e3057d1ae48", "author": {"user": {"login": "Vovchyk", "name": null}}, "url": "https://github.com/rsksmart/rskj/commit/74aebb6abbb880d53d8f185275774e3057d1ae48", "committedDate": "2021-02-03T13:33:15Z", "message": "Update rskj-core/src/main/java/co/rsk/peg/BridgeSupport.java\n\nCo-authored-by: josedahlquist <jose.dahlquist@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgyNDQwMDY0", "url": "https://github.com/rsksmart/rskj/pull/1395#pullrequestreview-582440064", "createdAt": "2021-02-03T14:44:52Z", "commit": {"oid": "74aebb6abbb880d53d8f185275774e3057d1ae48"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 458, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}