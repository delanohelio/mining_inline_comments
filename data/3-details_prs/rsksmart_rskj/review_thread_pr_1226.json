{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5NjY3NjQ2", "number": 1226, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNzozNzo1MVrOD6uHXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNzo0MDozMFrOD6uKWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyODk5NTQ4OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/ConnectBlocks.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNzozNzo1MVrOGStpdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNToxMDoxM1rOGTgptg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI3NTQ0NA==", "bodyText": "should we check the presence of the filename? same in the other classes", "url": "https://github.com/rsksmart/rskj/pull/1226#discussion_r422275444", "createdAt": "2020-05-08T17:37:51Z", "author": {"login": "nicops"}, "path": "rskj-core/src/main/java/co/rsk/ConnectBlocks.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2017 RSK Labs Ltd.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package co.rsk;\n+\n+import co.rsk.trie.TrieStore;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.ethereum.core.Block;\n+import org.ethereum.core.BlockFactory;\n+import org.ethereum.core.Blockchain;\n+import org.ethereum.db.BlockStore;\n+import org.ethereum.db.ReceiptStore;\n+\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+\n+/**\n+ * The entry point for connect blocks CLI tool\n+ */\n+public class ConnectBlocks {\n+    public static void main(String[] args) throws IOException {\n+        RskContext ctx = new RskContext(args);\n+\n+        BlockFactory blockFactory = ctx.getBlockFactory();\n+        Blockchain blockchain = ctx.getBlockchain();\n+        TrieStore trieStore = ctx.getTrieStore();\n+        BlockStore blockStore = ctx.getBlockStore();\n+        ReceiptStore receiptStore = ctx.getReceiptStore();\n+\n+        String filename = args[0];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48dc1e06901754a457e4a9e8e63f506b86844df7"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzExMTA5NA==", "bodyText": "The current code is oriented to be simple. We could improve the user experience if these tools are really used", "url": "https://github.com/rsksmart/rskj/pull/1226#discussion_r423111094", "createdAt": "2020-05-11T15:10:13Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/main/java/co/rsk/ConnectBlocks.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2017 RSK Labs Ltd.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package co.rsk;\n+\n+import co.rsk.trie.TrieStore;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.ethereum.core.Block;\n+import org.ethereum.core.BlockFactory;\n+import org.ethereum.core.Blockchain;\n+import org.ethereum.db.BlockStore;\n+import org.ethereum.db.ReceiptStore;\n+\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+\n+/**\n+ * The entry point for connect blocks CLI tool\n+ */\n+public class ConnectBlocks {\n+    public static void main(String[] args) throws IOException {\n+        RskContext ctx = new RskContext(args);\n+\n+        BlockFactory blockFactory = ctx.getBlockFactory();\n+        Blockchain blockchain = ctx.getBlockchain();\n+        TrieStore trieStore = ctx.getTrieStore();\n+        BlockStore blockStore = ctx.getBlockStore();\n+        ReceiptStore receiptStore = ctx.getReceiptStore();\n+\n+        String filename = args[0];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI3NTQ0NA=="}, "originalCommit": {"oid": "48dc1e06901754a457e4a9e8e63f506b86844df7"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyODk5Nzc0OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/ConnectBlocks.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNzozODo0MFrOGStrCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNToxMTo1NVrOGTguIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI3NTg0OA==", "bodyText": "this returns a value that explains if the block has been connected or not. what happens if we don't check it?", "url": "https://github.com/rsksmart/rskj/pull/1226#discussion_r422275848", "createdAt": "2020-05-08T17:38:40Z", "author": {"login": "nicops"}, "path": "rskj-core/src/main/java/co/rsk/ConnectBlocks.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2017 RSK Labs Ltd.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package co.rsk;\n+\n+import co.rsk.trie.TrieStore;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.ethereum.core.Block;\n+import org.ethereum.core.BlockFactory;\n+import org.ethereum.core.Blockchain;\n+import org.ethereum.db.BlockStore;\n+import org.ethereum.db.ReceiptStore;\n+\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+\n+/**\n+ * The entry point for connect blocks CLI tool\n+ */\n+public class ConnectBlocks {\n+    public static void main(String[] args) throws IOException {\n+        RskContext ctx = new RskContext(args);\n+\n+        BlockFactory blockFactory = ctx.getBlockFactory();\n+        Blockchain blockchain = ctx.getBlockchain();\n+        TrieStore trieStore = ctx.getTrieStore();\n+        BlockStore blockStore = ctx.getBlockStore();\n+        ReceiptStore receiptStore = ctx.getReceiptStore();\n+\n+        String filename = args[0];\n+\n+        try (BufferedReader reader = new BufferedReader(new FileReader(filename))) {\n+            execute(blockFactory, blockchain, trieStore, blockStore, receiptStore, reader);\n+        }\n+    }\n+\n+    public static void execute(BlockFactory blockFactory, Blockchain blockchain, TrieStore trieStore, BlockStore blockStore, ReceiptStore receiptStore, BufferedReader reader) throws IOException {\n+        for (String line = reader.readLine(); line != null; line = reader.readLine()) {\n+            String[] parts = line.split(\",\");\n+\n+            if (parts.length < 4) {\n+                continue;\n+            }\n+\n+            byte[] encoded = Hex.decode(parts[3]);\n+\n+            Block block = blockFactory.decodeBlock(encoded);\n+            block.seal();\n+\n+            blockchain.tryToConnect(block);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48dc1e06901754a457e4a9e8e63f506b86844df7"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzExMjIyNQ==", "bodyText": "Nothing. The supplied blocks could be connected best ones, or only connect, or even invalid. One of the use case of this tool is to run the external blocks, maybe to check the execution logs", "url": "https://github.com/rsksmart/rskj/pull/1226#discussion_r423112225", "createdAt": "2020-05-11T15:11:55Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/main/java/co/rsk/ConnectBlocks.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2017 RSK Labs Ltd.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package co.rsk;\n+\n+import co.rsk.trie.TrieStore;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.ethereum.core.Block;\n+import org.ethereum.core.BlockFactory;\n+import org.ethereum.core.Blockchain;\n+import org.ethereum.db.BlockStore;\n+import org.ethereum.db.ReceiptStore;\n+\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+\n+/**\n+ * The entry point for connect blocks CLI tool\n+ */\n+public class ConnectBlocks {\n+    public static void main(String[] args) throws IOException {\n+        RskContext ctx = new RskContext(args);\n+\n+        BlockFactory blockFactory = ctx.getBlockFactory();\n+        Blockchain blockchain = ctx.getBlockchain();\n+        TrieStore trieStore = ctx.getTrieStore();\n+        BlockStore blockStore = ctx.getBlockStore();\n+        ReceiptStore receiptStore = ctx.getReceiptStore();\n+\n+        String filename = args[0];\n+\n+        try (BufferedReader reader = new BufferedReader(new FileReader(filename))) {\n+            execute(blockFactory, blockchain, trieStore, blockStore, receiptStore, reader);\n+        }\n+    }\n+\n+    public static void execute(BlockFactory blockFactory, Blockchain blockchain, TrieStore trieStore, BlockStore blockStore, ReceiptStore receiptStore, BufferedReader reader) throws IOException {\n+        for (String line = reader.readLine(); line != null; line = reader.readLine()) {\n+            String[] parts = line.split(\",\");\n+\n+            if (parts.length < 4) {\n+                continue;\n+            }\n+\n+            byte[] encoded = Hex.decode(parts[3]);\n+\n+            Block block = blockFactory.decodeBlock(encoded);\n+            block.seal();\n+\n+            blockchain.tryToConnect(block);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI3NTg0OA=="}, "originalCommit": {"oid": "48dc1e06901754a457e4a9e8e63f506b86844df7"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTAwMDYxOnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/ExecuteBlocks.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNzozOTozNlrOGSts0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNToxMzoyMVrOGTgygg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI3NjMwNQ==", "bodyText": "why do we need to flush? since we're re executing blocks, we shouldn't be having new data here. or could we?", "url": "https://github.com/rsksmart/rskj/pull/1226#discussion_r422276305", "createdAt": "2020-05-08T17:39:36Z", "author": {"login": "nicops"}, "path": "rskj-core/src/main/java/co/rsk/ExecuteBlocks.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2017 RSK Labs Ltd.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package co.rsk;\n+\n+import co.rsk.core.bc.BlockExecutor;\n+import co.rsk.trie.TrieStore;\n+import org.ethereum.core.Block;\n+import org.ethereum.db.BlockStore;\n+\n+/**\n+ * The entry point for execute blocks CLI tool\n+ */\n+public class ExecuteBlocks {\n+    public static void main(String[] args) {\n+        RskContext ctx = new RskContext(args);\n+\n+        BlockExecutor blockExecutor = ctx.getBlockExecutor();\n+        BlockStore blockStore = ctx.getBlockStore();\n+        TrieStore trieStore = ctx.getTrieStore();\n+        \n+        execute(args, blockExecutor, blockStore, trieStore);\n+    }\n+    \n+    public static void execute(String[] args, BlockExecutor blockExecutor, BlockStore blockStore, TrieStore trieStore) {\n+        long fromBlockNumber = Long.parseLong(args[0]);\n+        long toBlockNumber = Long.parseLong(args[1]);\n+\n+        for (long n = fromBlockNumber; n <= toBlockNumber; n++) {\n+            Block block = blockStore.getChainBlockByNumber(n);\n+            Block parent = blockStore.getBlockByHash(block.getParentHash().getBytes());\n+\n+            blockExecutor.execute(block, parent.getHeader(), false, false);\n+        }\n+\n+        trieStore.flush();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48dc1e06901754a457e4a9e8e63f506b86844df7"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzExMzM0Ng==", "bodyText": "Well, it's related with the \"missing trie\" issue, just in case a trie that should be in the database, was not before the run of this command", "url": "https://github.com/rsksmart/rskj/pull/1226#discussion_r423113346", "createdAt": "2020-05-11T15:13:21Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/main/java/co/rsk/ExecuteBlocks.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2017 RSK Labs Ltd.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package co.rsk;\n+\n+import co.rsk.core.bc.BlockExecutor;\n+import co.rsk.trie.TrieStore;\n+import org.ethereum.core.Block;\n+import org.ethereum.db.BlockStore;\n+\n+/**\n+ * The entry point for execute blocks CLI tool\n+ */\n+public class ExecuteBlocks {\n+    public static void main(String[] args) {\n+        RskContext ctx = new RskContext(args);\n+\n+        BlockExecutor blockExecutor = ctx.getBlockExecutor();\n+        BlockStore blockStore = ctx.getBlockStore();\n+        TrieStore trieStore = ctx.getTrieStore();\n+        \n+        execute(args, blockExecutor, blockStore, trieStore);\n+    }\n+    \n+    public static void execute(String[] args, BlockExecutor blockExecutor, BlockStore blockStore, TrieStore trieStore) {\n+        long fromBlockNumber = Long.parseLong(args[0]);\n+        long toBlockNumber = Long.parseLong(args[1]);\n+\n+        for (long n = fromBlockNumber; n <= toBlockNumber; n++) {\n+            Block block = blockStore.getChainBlockByNumber(n);\n+            Block parent = blockStore.getBlockByHash(block.getParentHash().getBytes());\n+\n+            blockExecutor.execute(block, parent.getHeader(), false, false);\n+        }\n+\n+        trieStore.flush();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI3NjMwNQ=="}, "originalCommit": {"oid": "48dc1e06901754a457e4a9e8e63f506b86844df7"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTAwMzEyOnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/ImportBlocks.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNzo0MDozMFrOGStuZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNToxNDowMVrOGTg0SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI3NjcxMA==", "bodyText": "shouldn't we raise an error here instead of continue? why silently swallow the error?", "url": "https://github.com/rsksmart/rskj/pull/1226#discussion_r422276710", "createdAt": "2020-05-08T17:40:30Z", "author": {"login": "nicops"}, "path": "rskj-core/src/main/java/co/rsk/ImportBlocks.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2017 RSK Labs Ltd.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package co.rsk;\n+\n+import co.rsk.core.BlockDifficulty;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.ethereum.core.Block;\n+import org.ethereum.core.BlockFactory;\n+import org.ethereum.db.BlockStore;\n+\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+\n+/**\n+ * The entry point for import blocks CLI tool\n+ */\n+public class ImportBlocks {\n+    public static void main(String[] args) throws IOException {\n+        RskContext ctx = new RskContext(args);\n+        BlockFactory blockFactory = ctx.getBlockFactory();\n+        BlockStore blockStore = ctx.getBlockStore();\n+\n+        String filename = args[0];\n+\n+        try (BufferedReader reader = new BufferedReader(new FileReader(filename))) {\n+            execute(blockFactory, blockStore, reader);\n+        }\n+    }\n+\n+    public static void execute(BlockFactory blockFactory, BlockStore blockStore, BufferedReader reader) throws IOException {\n+        for (String line = reader.readLine(); line != null; line = reader.readLine()) {\n+            String[] parts = line.split(\",\");\n+\n+            if (parts.length < 4) {\n+                continue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48dc1e06901754a457e4a9e8e63f506b86844df7"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzExMzgwMQ==", "bodyText": "Only for simplicity, until these tools were really used", "url": "https://github.com/rsksmart/rskj/pull/1226#discussion_r423113801", "createdAt": "2020-05-11T15:14:01Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/main/java/co/rsk/ImportBlocks.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2017 RSK Labs Ltd.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package co.rsk;\n+\n+import co.rsk.core.BlockDifficulty;\n+import org.bouncycastle.util.encoders.Hex;\n+import org.ethereum.core.Block;\n+import org.ethereum.core.BlockFactory;\n+import org.ethereum.db.BlockStore;\n+\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+\n+/**\n+ * The entry point for import blocks CLI tool\n+ */\n+public class ImportBlocks {\n+    public static void main(String[] args) throws IOException {\n+        RskContext ctx = new RskContext(args);\n+        BlockFactory blockFactory = ctx.getBlockFactory();\n+        BlockStore blockStore = ctx.getBlockStore();\n+\n+        String filename = args[0];\n+\n+        try (BufferedReader reader = new BufferedReader(new FileReader(filename))) {\n+            execute(blockFactory, blockStore, reader);\n+        }\n+    }\n+\n+    public static void execute(BlockFactory blockFactory, BlockStore blockStore, BufferedReader reader) throws IOException {\n+        for (String line = reader.readLine(); line != null; line = reader.readLine()) {\n+            String[] parts = line.split(\",\");\n+\n+            if (parts.length < 4) {\n+                continue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI3NjcxMA=="}, "originalCommit": {"oid": "48dc1e06901754a457e4a9e8e63f506b86844df7"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4603, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}