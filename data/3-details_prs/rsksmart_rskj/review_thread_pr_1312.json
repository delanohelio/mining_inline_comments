{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3MTgzMDYz", "number": 1312, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDoxNToxM1rOEjwkTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDoxNToxM1rOEjwkTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTMxMzQxOnYy", "diffSide": "RIGHT", "path": "rskj-core/src/test/java/co/rsk/net/handler/txvalidator/TxValidatorNonceRangeValidatorTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDoxNToxM1rOHSS7Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDo0ODoxNFrOHS0jhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk0NjUxOQ==", "bodyText": "When testing i would like to know what happens in the border cases, for instance:\n\nnonce = config -1 / config / config +1 / 0 / high", "url": "https://github.com/rsksmart/rskj/pull/1312#discussion_r488946519", "createdAt": "2020-09-15T20:15:13Z", "author": {"login": "patogallaiovlabs"}, "path": "rskj-core/src/test/java/co/rsk/net/handler/txvalidator/TxValidatorNonceRangeValidatorTest.java", "diffHunk": "@@ -29,32 +29,51 @@\n public class TxValidatorNonceRangeValidatorTest {\n \n     @Test\n-    public void nonceInRange() {\n+    public void oneSlotRange() {\n         Transaction tx1 = Mockito.mock(Transaction.class);\n         Transaction tx2 = Mockito.mock(Transaction.class);\n+        Transaction tx3 = Mockito.mock(Transaction.class);\n         AccountState as = Mockito.mock(AccountState.class);\n \n         Mockito.when(tx1.getNonceAsInteger()).thenReturn(BigInteger.valueOf(0));\n-        Mockito.when(tx2.getNonceAsInteger()).thenReturn(BigInteger.valueOf(3));\n-        Mockito.when(as.getNonce()).thenReturn(BigInteger.valueOf(0));\n+        Mockito.when(tx2.getNonceAsInteger()).thenReturn(BigInteger.valueOf(1));\n+        Mockito.when(tx3.getNonceAsInteger()).thenReturn(BigInteger.valueOf(2));\n+        Mockito.when(as.getNonce()).thenReturn(BigInteger.valueOf(1));\n \n-        TxValidatorNonceRangeValidator tvnrv = new TxValidatorNonceRangeValidator();\n-        Assert.assertTrue(tvnrv.validate(tx1, as, null, null, Long.MAX_VALUE, false).transactionIsValid());\n+        TxValidatorNonceRangeValidator tvnrv = new TxValidatorNonceRangeValidator(1);\n+        Assert.assertFalse(tvnrv.validate(tx1, as, null, null, Long.MAX_VALUE, false).transactionIsValid());\n         Assert.assertTrue(tvnrv.validate(tx2, as, null, null, Long.MAX_VALUE, false).transactionIsValid());\n+        Assert.assertFalse(tvnrv.validate(tx3, as, null, null, Long.MAX_VALUE, false).transactionIsValid());\n     }\n \n     @Test\n-    public void nonceOutOfRange() {\n+    public void fiveSlotsRange() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41bb3d2df2caea4dfaff215152f742314fdbe08a"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE4NDc3Mw==", "bodyText": "I guess these cases are covered in the oneSlotRange and fiveSlotsRange tests. Or did I miss something?\n\nwhen accountSlots == 1 and account nonce == 1 and tx nonce is [0, 1, 2]\nwhen  accountSlots == 5 and account nonce == 1 and tx nonce is [0, 1, 5, 6]", "url": "https://github.com/rsksmart/rskj/pull/1312#discussion_r489184773", "createdAt": "2020-09-16T06:07:30Z", "author": {"login": "Vovchyk"}, "path": "rskj-core/src/test/java/co/rsk/net/handler/txvalidator/TxValidatorNonceRangeValidatorTest.java", "diffHunk": "@@ -29,32 +29,51 @@\n public class TxValidatorNonceRangeValidatorTest {\n \n     @Test\n-    public void nonceInRange() {\n+    public void oneSlotRange() {\n         Transaction tx1 = Mockito.mock(Transaction.class);\n         Transaction tx2 = Mockito.mock(Transaction.class);\n+        Transaction tx3 = Mockito.mock(Transaction.class);\n         AccountState as = Mockito.mock(AccountState.class);\n \n         Mockito.when(tx1.getNonceAsInteger()).thenReturn(BigInteger.valueOf(0));\n-        Mockito.when(tx2.getNonceAsInteger()).thenReturn(BigInteger.valueOf(3));\n-        Mockito.when(as.getNonce()).thenReturn(BigInteger.valueOf(0));\n+        Mockito.when(tx2.getNonceAsInteger()).thenReturn(BigInteger.valueOf(1));\n+        Mockito.when(tx3.getNonceAsInteger()).thenReturn(BigInteger.valueOf(2));\n+        Mockito.when(as.getNonce()).thenReturn(BigInteger.valueOf(1));\n \n-        TxValidatorNonceRangeValidator tvnrv = new TxValidatorNonceRangeValidator();\n-        Assert.assertTrue(tvnrv.validate(tx1, as, null, null, Long.MAX_VALUE, false).transactionIsValid());\n+        TxValidatorNonceRangeValidator tvnrv = new TxValidatorNonceRangeValidator(1);\n+        Assert.assertFalse(tvnrv.validate(tx1, as, null, null, Long.MAX_VALUE, false).transactionIsValid());\n         Assert.assertTrue(tvnrv.validate(tx2, as, null, null, Long.MAX_VALUE, false).transactionIsValid());\n+        Assert.assertFalse(tvnrv.validate(tx3, as, null, null, Long.MAX_VALUE, false).transactionIsValid());\n     }\n \n     @Test\n-    public void nonceOutOfRange() {\n+    public void fiveSlotsRange() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk0NjUxOQ=="}, "originalCommit": {"oid": "41bb3d2df2caea4dfaff215152f742314fdbe08a"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ5NzQ3OQ==", "bodyText": "Ok, i see. The only one left is the 2nd case then, when nonce is 4, right?", "url": "https://github.com/rsksmart/rskj/pull/1312#discussion_r489497479", "createdAt": "2020-09-16T14:48:14Z", "author": {"login": "patogallaiovlabs"}, "path": "rskj-core/src/test/java/co/rsk/net/handler/txvalidator/TxValidatorNonceRangeValidatorTest.java", "diffHunk": "@@ -29,32 +29,51 @@\n public class TxValidatorNonceRangeValidatorTest {\n \n     @Test\n-    public void nonceInRange() {\n+    public void oneSlotRange() {\n         Transaction tx1 = Mockito.mock(Transaction.class);\n         Transaction tx2 = Mockito.mock(Transaction.class);\n+        Transaction tx3 = Mockito.mock(Transaction.class);\n         AccountState as = Mockito.mock(AccountState.class);\n \n         Mockito.when(tx1.getNonceAsInteger()).thenReturn(BigInteger.valueOf(0));\n-        Mockito.when(tx2.getNonceAsInteger()).thenReturn(BigInteger.valueOf(3));\n-        Mockito.when(as.getNonce()).thenReturn(BigInteger.valueOf(0));\n+        Mockito.when(tx2.getNonceAsInteger()).thenReturn(BigInteger.valueOf(1));\n+        Mockito.when(tx3.getNonceAsInteger()).thenReturn(BigInteger.valueOf(2));\n+        Mockito.when(as.getNonce()).thenReturn(BigInteger.valueOf(1));\n \n-        TxValidatorNonceRangeValidator tvnrv = new TxValidatorNonceRangeValidator();\n-        Assert.assertTrue(tvnrv.validate(tx1, as, null, null, Long.MAX_VALUE, false).transactionIsValid());\n+        TxValidatorNonceRangeValidator tvnrv = new TxValidatorNonceRangeValidator(1);\n+        Assert.assertFalse(tvnrv.validate(tx1, as, null, null, Long.MAX_VALUE, false).transactionIsValid());\n         Assert.assertTrue(tvnrv.validate(tx2, as, null, null, Long.MAX_VALUE, false).transactionIsValid());\n+        Assert.assertFalse(tvnrv.validate(tx3, as, null, null, Long.MAX_VALUE, false).transactionIsValid());\n     }\n \n     @Test\n-    public void nonceOutOfRange() {\n+    public void fiveSlotsRange() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk0NjUxOQ=="}, "originalCommit": {"oid": "41bb3d2df2caea4dfaff215152f742314fdbe08a"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4482, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}