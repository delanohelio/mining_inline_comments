{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3OTc3NjE1", "number": 1327, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxOToxNzoyN1rOErwZ_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMzo0OTowM1rOEwQq5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzE3MzA5OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/logfilter/BlocksBloom.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxOToxNzoyN1rOHes_OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxOToxNzoyN1rOHes_OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk1NjQwOA==", "bodyText": "Shouldn't be?\n!this.empty && this.fromBlock <= blockNumber && blockNumber <= this.toBlock;", "url": "https://github.com/rsksmart/rskj/pull/1327#discussion_r501956408", "createdAt": "2020-10-08T19:17:27Z", "author": {"login": "fedejinich"}, "path": "rskj-core/src/main/java/co/rsk/logfilter/BlocksBloom.java", "diffHunk": "@@ -58,6 +58,14 @@ public long size() {\n         return this.toBlock - this.fromBlock + 1;\n     }\n \n+    public boolean hasBlockBloom(long blockNumber) {\n+        if (this.empty) {\n+            return false;\n+        }\n+\n+        return this.fromBlock <= blockNumber && blockNumber <= this.toBlock;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e601ebc1fef4d56f7233b6d05d9f234f9da12be6"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzY5NDc1OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/logfilter/BlocksBloomStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMDoyNjowNVrOHfXqJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMDoyNjowNVrOHfXqJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY1NTUyNg==", "bodyText": "it'd be nice to abstract complex conditions\nmaybe something like this?\n    public synchronized boolean hasBlockNumber(long blockNumber) {\n        // if a block is contained in a block range\n        long firstNumber = this.firstNumberInRange(blockNumber);\n        \n        return isBlockInCache(firstNumber) || isBlockInDataSource(firstNumber);\n    }\n\n    private boolean isBlockInDataSource(long firstNumber) {\n        return this.dataSource != null && this.dataSource.get(longToKey(firstNumber)) != null;\n    }\n\n    private boolean isBlockInCache(long firstNumber) {\n        return this.blocksBloom.containsKey(firstNumber);\n    }", "url": "https://github.com/rsksmart/rskj/pull/1327#discussion_r502655526", "createdAt": "2020-10-09T20:26:05Z", "author": {"login": "fedejinich"}, "path": "rskj-core/src/main/java/co/rsk/logfilter/BlocksBloomStore.java", "diffHunk": "@@ -40,7 +44,7 @@ public BlocksBloomStore(int noBlocks, int noConfirmations, KeyValueDataSource da\n         this.dataSource = dataSource;\n     }\n \n-    public boolean hasBlockNumber(long blockNumber) {\n+    public synchronized boolean hasBlockNumber(long blockNumber) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e601ebc1fef4d56f7233b6d05d9f234f9da12be6"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTQxNjE1OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/resources/reference.conf", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwODoyNToyM1rOHgbKXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOTowNDo1OFrOHg1WxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc2MTUwMg==", "bodyText": "I'd rather use colon symbol instead of equals sign, as above.", "url": "https://github.com/rsksmart/rskj/pull/1327#discussion_r503761502", "createdAt": "2020-10-13T08:25:23Z", "author": {"login": "Vovchyk"}, "path": "rskj-core/src/main/resources/reference.conf", "diffHunk": "@@ -403,3 +403,10 @@ crypto {\n     # - 'native' (Native C lib) <- not yet implemented\n     library: 'bc'\n }\n+\n+blooms = {\n+    blocks = 64\n+    service = false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af9ae7757759f834a861b0be928e7cfef4cb9621"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE5MDY2MQ==", "bodyText": "OK. Done. I'm a bit confused due that equal sign is used in expected.conf", "url": "https://github.com/rsksmart/rskj/pull/1327#discussion_r504190661", "createdAt": "2020-10-13T19:04:58Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/main/resources/reference.conf", "diffHunk": "@@ -403,3 +403,10 @@ crypto {\n     # - 'native' (Native C lib) <- not yet implemented\n     library: 'bc'\n }\n+\n+blooms = {\n+    blocks = 64\n+    service = false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc2MTUwMg=="}, "originalCommit": {"oid": "af9ae7757759f834a861b0be928e7cfef4cb9621"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTQ1NjgwOnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/logfilter/BlocksBloomProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwODozNDo0NlrOHgbjlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMjo0MDozMVrOHhovsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc2Nzk1Nw==", "bodyText": "shouldn't we handle the case when blockNumber is negative?", "url": "https://github.com/rsksmart/rskj/pull/1327#discussion_r503767957", "createdAt": "2020-10-13T08:34:46Z", "author": {"login": "Vovchyk"}, "path": "rskj-core/src/main/java/co/rsk/logfilter/BlocksBloomProcessor.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2017 RSK Labs Ltd.\n+ * (derived from ethereumJ library, Copyright (c) 2016 <ether.camp>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package co.rsk.logfilter;\n+\n+import org.ethereum.core.Bloom;\n+import org.ethereum.db.BlockStore;\n+\n+/**\n+ * Created by ajlopez on 29/09/2020.\n+ */\n+public class BlocksBloomProcessor {\n+    private final BlocksBloomStore blocksBloomStore;\n+    private final BlockStore blockStore;\n+\n+    private BlocksBloom blocksBloomInProcess = null;\n+\n+    public BlocksBloomProcessor(BlocksBloomStore blocksBloomStore, BlockStore blockStore) {\n+        this.blocksBloomStore = blocksBloomStore;\n+        this.blockStore = blockStore;\n+    }\n+\n+    public BlocksBloom getBlocksBloomInProcess() {\n+        return this.blocksBloomInProcess;\n+    }\n+\n+    public void processNewBlockNumber(long newBlockNumber) {\n+        long blockNumber = newBlockNumber - this.blocksBloomStore.getNoConfirmations();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dde21f9d4009ad359591a8d2cf97e3e58f1bf67a"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAzMjYyNQ==", "bodyText": "nice catch! Done", "url": "https://github.com/rsksmart/rskj/pull/1327#discussion_r505032625", "createdAt": "2020-10-14T22:40:31Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/main/java/co/rsk/logfilter/BlocksBloomProcessor.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2017 RSK Labs Ltd.\n+ * (derived from ethereumJ library, Copyright (c) 2016 <ether.camp>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package co.rsk.logfilter;\n+\n+import org.ethereum.core.Bloom;\n+import org.ethereum.db.BlockStore;\n+\n+/**\n+ * Created by ajlopez on 29/09/2020.\n+ */\n+public class BlocksBloomProcessor {\n+    private final BlocksBloomStore blocksBloomStore;\n+    private final BlockStore blockStore;\n+\n+    private BlocksBloom blocksBloomInProcess = null;\n+\n+    public BlocksBloomProcessor(BlocksBloomStore blocksBloomStore, BlockStore blockStore) {\n+        this.blocksBloomStore = blocksBloomStore;\n+        this.blockStore = blockStore;\n+    }\n+\n+    public BlocksBloom getBlocksBloomInProcess() {\n+        return this.blocksBloomInProcess;\n+    }\n+\n+    public void processNewBlockNumber(long newBlockNumber) {\n+        long blockNumber = newBlockNumber - this.blocksBloomStore.getNoConfirmations();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc2Nzk1Nw=="}, "originalCommit": {"oid": "dde21f9d4009ad359591a8d2cf97e3e58f1bf67a"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTcxNzQ0OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/logfilter/BlocksBloomService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOTozNTowNlrOHgeCJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOTowNzozNlrOHg1cXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgwODU1MQ==", "bodyText": "shouldn't we listen to onBestBlock event instead?", "url": "https://github.com/rsksmart/rskj/pull/1327#discussion_r503808551", "createdAt": "2020-10-13T09:35:06Z", "author": {"login": "Vovchyk"}, "path": "rskj-core/src/main/java/co/rsk/logfilter/BlocksBloomService.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2017 RSK Labs Ltd.\n+ * (derived from ethereumJ library, Copyright (c) 2016 <ether.camp>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package co.rsk.logfilter;\n+\n+import co.rsk.config.InternalService;\n+import org.ethereum.core.Block;\n+import org.ethereum.core.TransactionReceipt;\n+import org.ethereum.db.BlockStore;\n+import org.ethereum.listener.CompositeEthereumListener;\n+import org.ethereum.listener.EthereumListenerAdapter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+\n+/**\n+ * Created by ajlopez on 01/10/2020.\n+ */\n+public class BlocksBloomService implements InternalService {\n+    private static final Logger logger = LoggerFactory.getLogger(\"blooms\");\n+\n+    private final CompositeEthereumListener emitter;\n+    private final BlocksBloomProcessor blocksBloomProcessor;\n+\n+    private final BlocksBloomService.OnBlockListener listener = new BlocksBloomService.OnBlockListener();\n+\n+    public BlocksBloomService(CompositeEthereumListener emitter, BlocksBloomStore blocksBloomStore, BlockStore blockStore) {\n+        this.emitter = emitter;\n+        this.blocksBloomProcessor = new BlocksBloomProcessor(blocksBloomStore, blockStore);\n+    }\n+\n+    @Override\n+    public void start() {\n+        logger.info(\"blocks bloom service started\");\n+\n+        emitter.addListener(listener);\n+    }\n+\n+    @Override\n+    public void stop() {\n+        logger.info(\"blocks bloom service stopped\");\n+\n+        emitter.removeListener(listener);\n+    }\n+\n+    public void processNewBlock(long blockNumber) {\n+        this.blocksBloomProcessor.processNewBlockNumber(blockNumber);\n+    }\n+\n+    private class OnBlockListener extends EthereumListenerAdapter {\n+        @Override\n+        public void onBlock(Block block, List<TransactionReceipt> receipts) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dde21f9d4009ad359591a8d2cf97e3e58f1bf67a"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE5MjA5Mg==", "bodyText": "We use onBlock only to take advantage of no of confirmations at the earliest time possible, in an independent way of being processing the next bestchain or not", "url": "https://github.com/rsksmart/rskj/pull/1327#discussion_r504192092", "createdAt": "2020-10-13T19:07:36Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/main/java/co/rsk/logfilter/BlocksBloomService.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2017 RSK Labs Ltd.\n+ * (derived from ethereumJ library, Copyright (c) 2016 <ether.camp>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package co.rsk.logfilter;\n+\n+import co.rsk.config.InternalService;\n+import org.ethereum.core.Block;\n+import org.ethereum.core.TransactionReceipt;\n+import org.ethereum.db.BlockStore;\n+import org.ethereum.listener.CompositeEthereumListener;\n+import org.ethereum.listener.EthereumListenerAdapter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+\n+/**\n+ * Created by ajlopez on 01/10/2020.\n+ */\n+public class BlocksBloomService implements InternalService {\n+    private static final Logger logger = LoggerFactory.getLogger(\"blooms\");\n+\n+    private final CompositeEthereumListener emitter;\n+    private final BlocksBloomProcessor blocksBloomProcessor;\n+\n+    private final BlocksBloomService.OnBlockListener listener = new BlocksBloomService.OnBlockListener();\n+\n+    public BlocksBloomService(CompositeEthereumListener emitter, BlocksBloomStore blocksBloomStore, BlockStore blockStore) {\n+        this.emitter = emitter;\n+        this.blocksBloomProcessor = new BlocksBloomProcessor(blocksBloomStore, blockStore);\n+    }\n+\n+    @Override\n+    public void start() {\n+        logger.info(\"blocks bloom service started\");\n+\n+        emitter.addListener(listener);\n+    }\n+\n+    @Override\n+    public void stop() {\n+        logger.info(\"blocks bloom service stopped\");\n+\n+        emitter.removeListener(listener);\n+    }\n+\n+    public void processNewBlock(long blockNumber) {\n+        this.blocksBloomProcessor.processNewBlockNumber(blockNumber);\n+    }\n+\n+    private class OnBlockListener extends EthereumListenerAdapter {\n+        @Override\n+        public void onBlock(Block block, List<TransactionReceipt> receipts) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgwODU1MQ=="}, "originalCommit": {"oid": "dde21f9d4009ad359591a8d2cf97e3e58f1bf67a"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDE0NzQ3OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/logfilter/BlocksBloomStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwODozMjoxOVrOHhIHcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMzoxNjoyMFrOHkNwsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ5ODAzMw==", "bodyText": "Seems dataSource field cannot be null (non-nullable)? It's being checked for null in a few places in this class. But in other places (e.g. in flush method) it is not.", "url": "https://github.com/rsksmart/rskj/pull/1327#discussion_r504498033", "createdAt": "2020-10-14T08:32:19Z", "author": {"login": "Vovchyk"}, "path": "rskj-core/src/main/java/co/rsk/logfilter/BlocksBloomStore.java", "diffHunk": "@@ -40,22 +44,25 @@ public BlocksBloomStore(int noBlocks, int noConfirmations, KeyValueDataSource da\n         this.dataSource = dataSource;\n     }\n \n-    public boolean hasBlockNumber(long blockNumber) {\n-        if (this.blocksBloom.containsKey(this.firstNumberInRange(blockNumber))) {\n-            return true;\n-        }\n+    public synchronized boolean hasBlockNumber(long blockNumber) {\n+        long key = this.firstNumberInRange(blockNumber);\n \n-        if (this.dataSource != null && this.dataSource.get(longToKey(blockNumber)) != null) {\n-            return true;\n-        }\n+        return hasBlockNumberInCache(key)\n+            || hasBlockNumberInStore(key);\n+    }\n+\n+    private boolean hasBlockNumberInStore(long key) {\n+        return this.dataSource != null && this.dataSource.get(longToKey(key)) != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "742c5282110aaaeed4c569f600db2e973a14526a"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzczNjI0Mg==", "bodyText": "Done, I just added additional checks", "url": "https://github.com/rsksmart/rskj/pull/1327#discussion_r507736242", "createdAt": "2020-10-19T13:16:20Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/main/java/co/rsk/logfilter/BlocksBloomStore.java", "diffHunk": "@@ -40,22 +44,25 @@ public BlocksBloomStore(int noBlocks, int noConfirmations, KeyValueDataSource da\n         this.dataSource = dataSource;\n     }\n \n-    public boolean hasBlockNumber(long blockNumber) {\n-        if (this.blocksBloom.containsKey(this.firstNumberInRange(blockNumber))) {\n-            return true;\n-        }\n+    public synchronized boolean hasBlockNumber(long blockNumber) {\n+        long key = this.firstNumberInRange(blockNumber);\n \n-        if (this.dataSource != null && this.dataSource.get(longToKey(blockNumber)) != null) {\n-            return true;\n-        }\n+        return hasBlockNumberInCache(key)\n+            || hasBlockNumberInStore(key);\n+    }\n+\n+    private boolean hasBlockNumberInStore(long key) {\n+        return this.dataSource != null && this.dataSource.get(longToKey(key)) != null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ5ODAzMw=="}, "originalCommit": {"oid": "742c5282110aaaeed4c569f600db2e973a14526a"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDIwOTA1OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/logfilter/BlocksBloomStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwODo0Njo0MFrOHhIsDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMjo0MDo0N1rOHhowbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUwNzQwNg==", "bodyText": "I guess here we could use HashMap instead of ConcurrentHashMap. Access to this filed is synchronized in this class.", "url": "https://github.com/rsksmart/rskj/pull/1327#discussion_r504507406", "createdAt": "2020-10-14T08:46:40Z", "author": {"login": "Vovchyk"}, "path": "rskj-core/src/main/java/co/rsk/logfilter/BlocksBloomStore.java", "diffHunk": "@@ -29,9 +31,11 @@\n  * Created by ajlopez on 05/02/2019.\n  */\n public class BlocksBloomStore {\n+    private static final Logger logger = LoggerFactory.getLogger(\"blooms\");\n+\n     private final int noBlocks;\n     private final int noConfirmations;\n-    private final Map<Long, BlocksBloom> blocksBloom = new ConcurrentHashMap<>();\n+    private final Map<Long, BlocksBloom> blocksBloomCache = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "742c5282110aaaeed4c569f600db2e973a14526a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAzMjgxMg==", "bodyText": "Done!", "url": "https://github.com/rsksmart/rskj/pull/1327#discussion_r505032812", "createdAt": "2020-10-14T22:40:47Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/main/java/co/rsk/logfilter/BlocksBloomStore.java", "diffHunk": "@@ -29,9 +31,11 @@\n  * Created by ajlopez on 05/02/2019.\n  */\n public class BlocksBloomStore {\n+    private static final Logger logger = LoggerFactory.getLogger(\"blooms\");\n+\n     private final int noBlocks;\n     private final int noConfirmations;\n-    private final Map<Long, BlocksBloom> blocksBloom = new ConcurrentHashMap<>();\n+    private final Map<Long, BlocksBloom> blocksBloomCache = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUwNzQwNg=="}, "originalCommit": {"oid": "742c5282110aaaeed4c569f600db2e973a14526a"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDI2NDYxOnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/logfilter/BlocksBloomProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwODo1OToxOVrOHhJN8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMjo0MDo1OFrOHhow4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUxNjA4Mw==", "bodyText": "Looks like this method is not thread-safe. Shouldn't it be synchronized?", "url": "https://github.com/rsksmart/rskj/pull/1327#discussion_r504516083", "createdAt": "2020-10-14T08:59:19Z", "author": {"login": "Vovchyk"}, "path": "rskj-core/src/main/java/co/rsk/logfilter/BlocksBloomProcessor.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2017 RSK Labs Ltd.\n+ * (derived from ethereumJ library, Copyright (c) 2016 <ether.camp>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package co.rsk.logfilter;\n+\n+import org.ethereum.core.Bloom;\n+import org.ethereum.db.BlockStore;\n+\n+/**\n+ * Created by ajlopez on 29/09/2020.\n+ */\n+public class BlocksBloomProcessor {\n+    private final BlocksBloomStore blocksBloomStore;\n+    private final BlockStore blockStore;\n+\n+    private BlocksBloom blocksBloomInProcess = null;\n+\n+    public BlocksBloomProcessor(BlocksBloomStore blocksBloomStore, BlockStore blockStore) {\n+        this.blocksBloomStore = blocksBloomStore;\n+        this.blockStore = blockStore;\n+    }\n+\n+    public BlocksBloom getBlocksBloomInProcess() {\n+        return this.blocksBloomInProcess;\n+    }\n+\n+    public void processNewBlockNumber(long newBlockNumber) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "742c5282110aaaeed4c569f600db2e973a14526a"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAzMjkyOQ==", "bodyText": "Currently only one thread at a time access this method, but yes, it could be fragile if new changes are added to the block processing logic (like processing blocks in multiple threads). So, done!", "url": "https://github.com/rsksmart/rskj/pull/1327#discussion_r505032929", "createdAt": "2020-10-14T22:40:58Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/main/java/co/rsk/logfilter/BlocksBloomProcessor.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2017 RSK Labs Ltd.\n+ * (derived from ethereumJ library, Copyright (c) 2016 <ether.camp>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package co.rsk.logfilter;\n+\n+import org.ethereum.core.Bloom;\n+import org.ethereum.db.BlockStore;\n+\n+/**\n+ * Created by ajlopez on 29/09/2020.\n+ */\n+public class BlocksBloomProcessor {\n+    private final BlocksBloomStore blocksBloomStore;\n+    private final BlockStore blockStore;\n+\n+    private BlocksBloom blocksBloomInProcess = null;\n+\n+    public BlocksBloomProcessor(BlocksBloomStore blocksBloomStore, BlockStore blockStore) {\n+        this.blocksBloomStore = blocksBloomStore;\n+        this.blockStore = blockStore;\n+    }\n+\n+    public BlocksBloom getBlocksBloomInProcess() {\n+        return this.blocksBloomInProcess;\n+    }\n+\n+    public void processNewBlockNumber(long newBlockNumber) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUxNjA4Mw=="}, "originalCommit": {"oid": "742c5282110aaaeed4c569f600db2e973a14526a"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDI5NDEyOnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/logfilter/BlocksBloomProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOTowNjoxMVrOHhJgBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMjo0MToxMlrOHhoxjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUyMDcxMA==", "bodyText": "blocksBloomInProcess field is not synchronized. And it looks like it's only needed for unit testing. Shouldn't the method be marked as synchronized or VisibleForTesting?", "url": "https://github.com/rsksmart/rskj/pull/1327#discussion_r504520710", "createdAt": "2020-10-14T09:06:11Z", "author": {"login": "Vovchyk"}, "path": "rskj-core/src/main/java/co/rsk/logfilter/BlocksBloomProcessor.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2017 RSK Labs Ltd.\n+ * (derived from ethereumJ library, Copyright (c) 2016 <ether.camp>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package co.rsk.logfilter;\n+\n+import org.ethereum.core.Bloom;\n+import org.ethereum.db.BlockStore;\n+\n+/**\n+ * Created by ajlopez on 29/09/2020.\n+ */\n+public class BlocksBloomProcessor {\n+    private final BlocksBloomStore blocksBloomStore;\n+    private final BlockStore blockStore;\n+\n+    private BlocksBloom blocksBloomInProcess = null;\n+\n+    public BlocksBloomProcessor(BlocksBloomStore blocksBloomStore, BlockStore blockStore) {\n+        this.blocksBloomStore = blocksBloomStore;\n+        this.blockStore = blockStore;\n+    }\n+\n+    public BlocksBloom getBlocksBloomInProcess() {\n+        return this.blocksBloomInProcess;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "742c5282110aaaeed4c569f600db2e973a14526a"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAzMzEwMg==", "bodyText": "Done", "url": "https://github.com/rsksmart/rskj/pull/1327#discussion_r505033102", "createdAt": "2020-10-14T22:41:12Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/main/java/co/rsk/logfilter/BlocksBloomProcessor.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * This file is part of RskJ\n+ * Copyright (C) 2017 RSK Labs Ltd.\n+ * (derived from ethereumJ library, Copyright (c) 2016 <ether.camp>)\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Lesser General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package co.rsk.logfilter;\n+\n+import org.ethereum.core.Bloom;\n+import org.ethereum.db.BlockStore;\n+\n+/**\n+ * Created by ajlopez on 29/09/2020.\n+ */\n+public class BlocksBloomProcessor {\n+    private final BlocksBloomStore blocksBloomStore;\n+    private final BlockStore blockStore;\n+\n+    private BlocksBloom blocksBloomInProcess = null;\n+\n+    public BlocksBloomProcessor(BlocksBloomStore blocksBloomStore, BlockStore blockStore) {\n+        this.blocksBloomStore = blocksBloomStore;\n+        this.blockStore = blockStore;\n+    }\n+\n+    public BlocksBloom getBlocksBloomInProcess() {\n+        return this.blocksBloomInProcess;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUyMDcxMA=="}, "originalCommit": {"oid": "742c5282110aaaeed4c569f600db2e973a14526a"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MDQwMjMxOnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/logfilter/BlocksBloomStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMzo0OTowM1rOHltRKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzo0OTozM1rOHl5iPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMwMTAzMg==", "bodyText": "shouldn't we limit the size of this map?", "url": "https://github.com/rsksmart/rskj/pull/1327#discussion_r509301032", "createdAt": "2020-10-21T13:49:03Z", "author": {"login": "Vovchyk"}, "path": "rskj-core/src/main/java/co/rsk/logfilter/BlocksBloomStore.java", "diffHunk": "@@ -21,17 +21,31 @@\n \n import org.ethereum.datasource.KeyValueDataSource;\n import org.ethereum.vm.DataWord;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n+import java.util.HashMap;\n import java.util.Map;\n-import java.util.concurrent.ConcurrentHashMap;\n \n /**\n+ * Block blooms store\n+ *\n+ * It saves and retrieves coalesced bloom filters\n+ *\n+ * Each record represents a range of blocks\n+ *\n+ * The key is the block number of the first block in the range\n+ *\n+ * It keeps also an in-memory cache of those records\n+ *\n  * Created by ajlopez on 05/02/2019.\n  */\n public class BlocksBloomStore {\n+    private static final Logger logger = LoggerFactory.getLogger(\"blooms\");\n+\n     private final int noBlocks;\n     private final int noConfirmations;\n-    private final Map<Long, BlocksBloom> blocksBloom = new ConcurrentHashMap<>();\n+    private final Map<Long, BlocksBloom> blocksBloomCache = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92b5ae45306d70068a406d779637b6607b01a4fb"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTUwMjAxMg==", "bodyText": "Good. But I though it should be to refine in another tasks. The idea is to not be disruptive with the current behavior the main consumers of the logs have now (like Lumino and token bridge). And all this work (the new blooms) are optional, only to be adopted by power users.\nEven with 2 millions of blocks, the used memory should be few megabytes.", "url": "https://github.com/rsksmart/rskj/pull/1327#discussion_r509502012", "createdAt": "2020-10-21T17:49:33Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/main/java/co/rsk/logfilter/BlocksBloomStore.java", "diffHunk": "@@ -21,17 +21,31 @@\n \n import org.ethereum.datasource.KeyValueDataSource;\n import org.ethereum.vm.DataWord;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n+import java.util.HashMap;\n import java.util.Map;\n-import java.util.concurrent.ConcurrentHashMap;\n \n /**\n+ * Block blooms store\n+ *\n+ * It saves and retrieves coalesced bloom filters\n+ *\n+ * Each record represents a range of blocks\n+ *\n+ * The key is the block number of the first block in the range\n+ *\n+ * It keeps also an in-memory cache of those records\n+ *\n  * Created by ajlopez on 05/02/2019.\n  */\n public class BlocksBloomStore {\n+    private static final Logger logger = LoggerFactory.getLogger(\"blooms\");\n+\n     private final int noBlocks;\n     private final int noConfirmations;\n-    private final Map<Long, BlocksBloom> blocksBloom = new ConcurrentHashMap<>();\n+    private final Map<Long, BlocksBloom> blocksBloomCache = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMwMTAzMg=="}, "originalCommit": {"oid": "92b5ae45306d70068a406d779637b6607b01a4fb"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4496, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}