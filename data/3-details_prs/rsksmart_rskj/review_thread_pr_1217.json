{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1MTQ4MzYy", "number": 1217, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDo1NTo0NVrODy7v8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNTo1MDo0NFrODy9Bkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzM0MzIxOnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/net/light/LightProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDo1NTo0NVrOGHRYjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDo1NTo0NVrOGHRYjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI3ODAyOQ==", "bodyText": "Dont forget to log in the next way:\nString logBlockHash = Hex.toHexString(blockHash);\nlogger.trace(\"Processing block header request {} block {}\", id, logBlockHash);", "url": "https://github.com/rsksmart/rskj/pull/1217#discussion_r410278029", "createdAt": "2020-04-17T14:55:45Z", "author": {"login": "julianlen"}, "path": "rskj-core/src/main/java/co/rsk/net/light/LightProcessor.java", "diffHunk": "@@ -185,4 +186,28 @@ public void processGetBlockBodyMessage(long id, byte[] blockHash, LightPeer ligh\n     public void processBlockBodyMessage(long id, List<BlockHeader> uncles, List<Transaction> transactions, LightPeer lightPeer) {\n         throw new UnsupportedOperationException(\"Not supported BlockBody processing\");\n     }\n+\n+    public void processGetStorageMessage(long id, byte[] blockHash, byte[] addressHash, byte[] storageKeyHash, LightPeer lightPeer) {\n+        final Block block = blockStore.getBlockByHash(blockHash);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8196f3641ab40786228c8370d0ebf511da6b5fe7"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzQxOTQ5OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/test/java/co/rsk/net/LightProcessorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNToxNTowOFrOGHSI1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNToxNTowOFrOGHSI1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI5MDM5MA==", "bodyText": "You should test the case in which the address has null storage", "url": "https://github.com/rsksmart/rskj/pull/1217#discussion_r410290390", "createdAt": "2020-04-17T15:15:08Z", "author": {"login": "julianlen"}, "path": "rskj-core/src/test/java/co/rsk/net/LightProcessorTest.java", "diffHunk": "@@ -329,6 +330,45 @@ public void processBlockBodyMessageAndShouldThrowAnException() {\n         lightProcessor.processBlockBodyMessage(0, uncleList, transactionList,  lightPeer);\n     }\n \n+    @Test\n+    public void processGetStorageMessageAndShouldReturnsBlockBodyCorrectly() {\n+        long id = 0;\n+        final Block block = mock(Block.class);\n+        RskAddress address = randomAddress();\n+        DataWord storageKey = DataWord.valueOf(HashUtil.randomHash());\n+        final RepositorySnapshot repositorySnapshot = mock(RepositorySnapshot.class);\n+        byte[] storageValue = HashUtil.randomHash();\n+\n+        when(blockStore.getBlockByHash(blockHash.getBytes())).thenReturn(block);\n+        when(block.getHash()).thenReturn(blockHash);\n+        when(repositoryLocator.snapshotAt(block.getHeader())).thenReturn(repositorySnapshot);\n+        when(repositorySnapshot.getStorageBytes(address, storageKey)).thenReturn(storageValue);\n+\n+        StorageMessage expectedMessage = new StorageMessage(id, new byte[] {0x00}, storageValue);\n+\n+        ArgumentCaptor<StorageMessage> argument = forClass(StorageMessage.class);\n+        lightProcessor.processGetStorageMessage(id, blockHash.getBytes(), address.getBytes(),\n+                storageKey.getData(), lightPeer);\n+        verify(msgQueue).sendMessage(argument.capture());\n+\n+        assertArrayEquals(expectedMessage.getEncoded(), argument.getValue().getEncoded());\n+    }\n+\n+    @Test\n+    public void processGetStorageyMessageWithInvalidBlockHash() {\n+        when(blockStore.getBlockByHash(blockHash.getBytes())).thenReturn(null);\n+\n+        lightProcessor.processGetStorageMessage(100, blockHash.getBytes(), randomAddress().getBytes(),\n+                new byte[] {0x00}, lightPeer);\n+\n+        verify(msgQueue, times(0)).sendMessage(any());\n+    }\n+\n+    @Test(expected = UnsupportedOperationException.class)\n+    public void processStorageMessageAndShouldThrowAnException() {\n+        lightProcessor.processStorageMessage(0, new byte[] {0x00}, new byte[] {0x00}, lightPeer);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8196f3641ab40786228c8370d0ebf511da6b5fe7"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzU1MjE4OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/net/light/LightProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNTo1MDo0NFrOGHTePg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNTo1MDo0NFrOGHTePg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMxMjI1NA==", "bodyText": "To fix the SonarCloud advice \"Invoke method only conditionally\", we will start to log these messages in the next manner:\nString logBlockHash = Hex.toHexString(blockHash);\n        logger.trace(\"Processing block header request {} block {}\", id, logBlockHash);", "url": "https://github.com/rsksmart/rskj/pull/1217#discussion_r410312254", "createdAt": "2020-04-17T15:50:44Z", "author": {"login": "julianlen"}, "path": "rskj-core/src/main/java/co/rsk/net/light/LightProcessor.java", "diffHunk": "@@ -185,4 +186,30 @@ public void processGetBlockBodyMessage(long id, byte[] blockHash, LightPeer ligh\n     public void processBlockBodyMessage(long id, List<BlockHeader> uncles, List<Transaction> transactions, LightPeer lightPeer) {\n         throw new UnsupportedOperationException(\"Not supported BlockBody processing\");\n     }\n+\n+    public void processGetStorageMessage(long id, byte[] blockHash, byte[] addressHash, byte[] storageKeyHash, LightPeer lightPeer) {\n+        logger.trace(\"Processing storage request {} block {} address {} storage key {}\", id,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ff20ef9373fc0e856e5b415ea59a547379a09da"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4596, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}