{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyNzExOTA3", "number": 1337, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNzo0NDoxM1rOEuGtOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNzo0NDoxM1rOEuGtOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2Nzc5ODM1OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/test/java/co/rsk/peg/BridgeStorageProviderTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNzo0NDoxM1rOHiTDuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxODoxNjoxMVrOHiUUrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyNTg4Mw==", "bodyText": "Is not it more clear activating specifically the expected fork?\nActivationConfig.ForBlock activations = mock(ActivationConfig.ForBlock.class);\nwhen(activations.isActive(ConsensusRule.RSKIP176)).thenReturn(true);", "url": "https://github.com/rsksmart/rskj/pull/1337#discussion_r505725883", "createdAt": "2020-10-15T17:44:13Z", "author": {"login": "guidohernan93"}, "path": "rskj-core/src/test/java/co/rsk/peg/BridgeStorageProviderTest.java", "diffHunk": "@@ -2149,6 +2149,219 @@ public void saveCoinBaseInformation_after_RSKIP143() throws IOException {\n         );\n     }\n \n+    @Test\n+    public void getFastBridgeFederationScriptHash_afterRSKIP176_Ok() {\n+        Repository repository = mock(Repository.class);\n+\n+        Sha256Hash hash = Sha256Hash.ZERO_HASH;\n+        byte[] fastBridgeFedP2SH = new byte[]{(byte) 0xaa};\n+\n+        when(repository.getStorageBytes(PrecompiledContracts.BRIDGE_ADDR, DataWord.fromLongString(\"fastBridgeP2SH-\" + hash.toString())))\n+                .thenReturn(fastBridgeFedP2SH);\n+\n+        BridgeStorageProvider provider = new BridgeStorageProvider(\n+                repository,\n+                PrecompiledContracts.BRIDGE_ADDR,\n+                config.getNetworkConstants().getBridgeConstants(),\n+                activationsAllForks", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47f904a340703bd3c66b35be1c448482a7289349"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc0NjYwNg==", "bodyText": "We will do it. I did it in this way only to maintain the format comparing the rest of the code", "url": "https://github.com/rsksmart/rskj/pull/1337#discussion_r505746606", "createdAt": "2020-10-15T18:16:11Z", "author": {"login": "pamgonzalez"}, "path": "rskj-core/src/test/java/co/rsk/peg/BridgeStorageProviderTest.java", "diffHunk": "@@ -2149,6 +2149,219 @@ public void saveCoinBaseInformation_after_RSKIP143() throws IOException {\n         );\n     }\n \n+    @Test\n+    public void getFastBridgeFederationScriptHash_afterRSKIP176_Ok() {\n+        Repository repository = mock(Repository.class);\n+\n+        Sha256Hash hash = Sha256Hash.ZERO_HASH;\n+        byte[] fastBridgeFedP2SH = new byte[]{(byte) 0xaa};\n+\n+        when(repository.getStorageBytes(PrecompiledContracts.BRIDGE_ADDR, DataWord.fromLongString(\"fastBridgeP2SH-\" + hash.toString())))\n+                .thenReturn(fastBridgeFedP2SH);\n+\n+        BridgeStorageProvider provider = new BridgeStorageProvider(\n+                repository,\n+                PrecompiledContracts.BRIDGE_ADDR,\n+                config.getNetworkConstants().getBridgeConstants(),\n+                activationsAllForks", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyNTg4Mw=="}, "originalCommit": {"oid": "47f904a340703bd3c66b35be1c448482a7289349"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4502, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}