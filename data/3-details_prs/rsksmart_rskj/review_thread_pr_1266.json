{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1MDYzODc1", "number": 1266, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzowNjowMVrOEMKpqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNDowNTozMlrOEXOebw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTkyODczOnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/net/TransactionGateway.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzowNjowMVrOGuHyUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMzozMjowM1rOGuW2NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAxNTI0OQ==", "bodyText": "why the suffix \"From\"?", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r451015249", "createdAt": "2020-07-07T17:06:01Z", "author": {"login": "patogallaiovlabs"}, "path": "rskj-core/src/main/java/co/rsk/net/TransactionGateway.java", "diffHunk": "@@ -18,66 +18,41 @@\n \n package co.rsk.net;\n \n-import co.rsk.config.InternalService;\n-import co.rsk.crypto.Keccak256;\n import org.ethereum.core.Transaction;\n import org.ethereum.core.TransactionPool;\n-import org.ethereum.listener.CompositeEthereumListener;\n-import org.ethereum.listener.EthereumListenerAdapter;\n+import org.ethereum.core.TransactionPoolAddResult;\n import org.ethereum.net.server.ChannelManager;\n \n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Objects;\n-import java.util.Set;\n+import javax.annotation.Nonnull;\n+import java.util.*;\n \n /**\n  * Centralizes receiving and relaying transactions, so we can only distribute information to nodes that don't already\n  * have it.\n  */\n-public class TransactionGateway implements InternalService {\n+public class TransactionGateway {\n     private final ChannelManager channelManager;\n-    private final CompositeEthereumListener emitter;\n     private final TransactionPool transactionPool;\n \n-    private final TransactionNodeInformation transactionNodeInformation = new TransactionNodeInformation();\n-    private final OnPendingTransactionsReceivedListener listener = new OnPendingTransactionsReceivedListener();\n-\n     public TransactionGateway(\n             ChannelManager channelManager,\n-            TransactionPool transactionPool,\n-            CompositeEthereumListener emitter) {\n+            TransactionPool transactionPool) {\n         this.channelManager = Objects.requireNonNull(channelManager);\n         this.transactionPool = Objects.requireNonNull(transactionPool);\n-        this.emitter = Objects.requireNonNull(emitter);\n-    }\n-\n-    @Override\n-    public void start() {\n-        emitter.addListener(listener);\n-    }\n-\n-    @Override\n-    public void stop() {\n-        emitter.removeListener(listener);\n     }\n \n-    public void receiveTransactionsFrom(List<Transaction> txs, NodeID nodeID) {\n-        txs.forEach(tx -> transactionNodeInformation.addTransactionToNode(tx.getHash(), nodeID));\n-        transactionPool.addTransactions(txs);\n+    public void receiveTransactionsFrom(@Nonnull List<Transaction> txs, @Nonnull Set<NodeID> nodeIDS) {\n+        List<Transaction> result  = transactionPool.addTransactions(txs);\n+        if(!result.isEmpty()) {\n+            channelManager.broadcastTransactions(result, nodeIDS);\n+        }\n     }\n \n-    private class OnPendingTransactionsReceivedListener extends EthereumListenerAdapter {\n-        @Override\n-        public void onPendingTransactionsReceived(List<Transaction> txs) {\n-            for (Transaction tx : txs) {\n-                Keccak256 txHash = tx.getHash();\n-                Set<NodeID> nodesToSkip = new HashSet<>(transactionNodeInformation.getNodesByTransaction(txHash));\n-                Set<NodeID> newNodes = channelManager.broadcastTransaction(tx, nodesToSkip);\n-\n-                newNodes.forEach(nodeID -> transactionNodeInformation.addTransactionToNode(txHash, nodeID));\n-            }\n+    public TransactionPoolAddResult receiveTransactionFrom(Transaction transaction) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56d11ba2e971752d5b43d46e594338f7f06df35a"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI2MjAwNQ==", "bodyText": "removed \"from\" suffix", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r451262005", "createdAt": "2020-07-08T03:32:03Z", "author": {"login": "fedejinich"}, "path": "rskj-core/src/main/java/co/rsk/net/TransactionGateway.java", "diffHunk": "@@ -18,66 +18,41 @@\n \n package co.rsk.net;\n \n-import co.rsk.config.InternalService;\n-import co.rsk.crypto.Keccak256;\n import org.ethereum.core.Transaction;\n import org.ethereum.core.TransactionPool;\n-import org.ethereum.listener.CompositeEthereumListener;\n-import org.ethereum.listener.EthereumListenerAdapter;\n+import org.ethereum.core.TransactionPoolAddResult;\n import org.ethereum.net.server.ChannelManager;\n \n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Objects;\n-import java.util.Set;\n+import javax.annotation.Nonnull;\n+import java.util.*;\n \n /**\n  * Centralizes receiving and relaying transactions, so we can only distribute information to nodes that don't already\n  * have it.\n  */\n-public class TransactionGateway implements InternalService {\n+public class TransactionGateway {\n     private final ChannelManager channelManager;\n-    private final CompositeEthereumListener emitter;\n     private final TransactionPool transactionPool;\n \n-    private final TransactionNodeInformation transactionNodeInformation = new TransactionNodeInformation();\n-    private final OnPendingTransactionsReceivedListener listener = new OnPendingTransactionsReceivedListener();\n-\n     public TransactionGateway(\n             ChannelManager channelManager,\n-            TransactionPool transactionPool,\n-            CompositeEthereumListener emitter) {\n+            TransactionPool transactionPool) {\n         this.channelManager = Objects.requireNonNull(channelManager);\n         this.transactionPool = Objects.requireNonNull(transactionPool);\n-        this.emitter = Objects.requireNonNull(emitter);\n-    }\n-\n-    @Override\n-    public void start() {\n-        emitter.addListener(listener);\n-    }\n-\n-    @Override\n-    public void stop() {\n-        emitter.removeListener(listener);\n     }\n \n-    public void receiveTransactionsFrom(List<Transaction> txs, NodeID nodeID) {\n-        txs.forEach(tx -> transactionNodeInformation.addTransactionToNode(tx.getHash(), nodeID));\n-        transactionPool.addTransactions(txs);\n+    public void receiveTransactionsFrom(@Nonnull List<Transaction> txs, @Nonnull Set<NodeID> nodeIDS) {\n+        List<Transaction> result  = transactionPool.addTransactions(txs);\n+        if(!result.isEmpty()) {\n+            channelManager.broadcastTransactions(result, nodeIDS);\n+        }\n     }\n \n-    private class OnPendingTransactionsReceivedListener extends EthereumListenerAdapter {\n-        @Override\n-        public void onPendingTransactionsReceived(List<Transaction> txs) {\n-            for (Transaction tx : txs) {\n-                Keccak256 txHash = tx.getHash();\n-                Set<NodeID> nodesToSkip = new HashSet<>(transactionNodeInformation.getNodesByTransaction(txHash));\n-                Set<NodeID> newNodes = channelManager.broadcastTransaction(tx, nodesToSkip);\n-\n-                newNodes.forEach(nodeID -> transactionNodeInformation.addTransactionToNode(txHash, nodeID));\n-            }\n+    public TransactionPoolAddResult receiveTransactionFrom(Transaction transaction) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAxNTI0OQ=="}, "originalCommit": {"oid": "56d11ba2e971752d5b43d46e594338f7f06df35a"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTk1NTI3OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/org/ethereum/core/TransactionPoolAddResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzoxMzozM1rOGuIDGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMzoxNzoxMlrOGuWoHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAxOTU0NA==", "bodyText": "This could cause a NPE in the check \"if(!result.getTransactionsAdded().isEmpty()) {\" L53 TransactionGateway.", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r451019544", "createdAt": "2020-07-07T17:13:33Z", "author": {"login": "patogallaiovlabs"}, "path": "rskj-core/src/main/java/org/ethereum/core/TransactionPoolAddResult.java", "diffHunk": "@@ -42,11 +48,15 @@ public void ifTransactionWasNotAdded(Consumer<String> errorConsumer) {\n         }\n     }\n \n-    public static TransactionPoolAddResult ok() {\n-        return new TransactionPoolAddResult(true, null);\n+    public static TransactionPoolAddResult ok(Transaction transaction) {\n+        return new TransactionPoolAddResult(true, null, Collections.singletonList(transaction));\n     }\n \n     public static TransactionPoolAddResult withError(String errorMessage) {\n-        return new TransactionPoolAddResult(false, errorMessage);\n+        return new TransactionPoolAddResult(false, errorMessage, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56d11ba2e971752d5b43d46e594338f7f06df35a"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1ODM5OQ==", "bodyText": "fixed", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r451258399", "createdAt": "2020-07-08T03:17:12Z", "author": {"login": "fedejinich"}, "path": "rskj-core/src/main/java/org/ethereum/core/TransactionPoolAddResult.java", "diffHunk": "@@ -42,11 +48,15 @@ public void ifTransactionWasNotAdded(Consumer<String> errorConsumer) {\n         }\n     }\n \n-    public static TransactionPoolAddResult ok() {\n-        return new TransactionPoolAddResult(true, null);\n+    public static TransactionPoolAddResult ok(Transaction transaction) {\n+        return new TransactionPoolAddResult(true, null, Collections.singletonList(transaction));\n     }\n \n     public static TransactionPoolAddResult withError(String errorMessage) {\n-        return new TransactionPoolAddResult(false, errorMessage);\n+        return new TransactionPoolAddResult(false, errorMessage, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAxOTU0NA=="}, "originalCommit": {"oid": "56d11ba2e971752d5b43d46e594338f7f06df35a"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjAwMjA0OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/org/ethereum/net/server/ChannelManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzoyNjoxN1rOGuIgdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMzoyMToxMVrOGuWrsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAyNzA2MA==", "bodyText": "Be careful with the use of NodeID... most of the impl returns a copy of those. So, i wonder if it is actually cheaper to return the Node instead of NodeID.", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r451027060", "createdAt": "2020-07-07T17:26:17Z", "author": {"login": "patogallaiovlabs"}, "path": "rskj-core/src/main/java/org/ethereum/net/server/ChannelManager.java", "diffHunk": "@@ -78,4 +78,6 @@\n     Collection<Peer> getActivePeers();\n \n     boolean isAddressBlockAvailable(InetAddress address);\n+\n+    Set<NodeID> broadcastTransactions(@Nonnull List<Transaction> transactions, @Nonnull Set<NodeID> nodeID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56d11ba2e971752d5b43d46e594338f7f06df35a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1OTMxMg==", "bodyText": "didn't get that. do you think it's worth it? this is just a reuse of broadcastTransaction which has been there before this PR", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r451259312", "createdAt": "2020-07-08T03:21:11Z", "author": {"login": "fedejinich"}, "path": "rskj-core/src/main/java/org/ethereum/net/server/ChannelManager.java", "diffHunk": "@@ -78,4 +78,6 @@\n     Collection<Peer> getActivePeers();\n \n     boolean isAddressBlockAvailable(InetAddress address);\n+\n+    Set<NodeID> broadcastTransactions(@Nonnull List<Transaction> transactions, @Nonnull Set<NodeID> nodeID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAyNzA2MA=="}, "originalCommit": {"oid": "56d11ba2e971752d5b43d46e594338f7f06df35a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjAzMjMxOnYy", "diffSide": "RIGHT", "path": "rskj-core/src/test/java/co/rsk/core/bc/TransactionPoolImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTozNTo0MlrOG7ut1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjoyOTo1MVrOG7zsmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4NDU2NA==", "bodyText": "You should remove this if, it is confusing, you already asserted it was false the line above", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r465284564", "createdAt": "2020-08-04T19:35:42Z", "author": {"login": "nicops"}, "path": "rskj-core/src/test/java/co/rsk/core/bc/TransactionPoolImplTest.java", "diffHunk": "@@ -512,8 +514,10 @@ public void addTwiceAndGetQueuedTransaction() {\n         transactionPool.addTransaction(tx);\n \n         TransactionPoolAddResult result = transactionPool.addTransaction(tx);\n-        Assert.assertFalse(result.transactionWasAdded());\n-        result.ifTransactionWasNotAdded(msg -> Assert.assertEquals(\"queued transaction with same hash already exists\", msg));\n+        Assert.assertFalse(result.transactionsWereAdded());\n+        if(!result.transactionsWereAdded()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83de8af9e081bbe8ad4b08db629a2662ed261af1"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2NjE3MA==", "bodyText": "removed unnecesary if", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r465366170", "createdAt": "2020-08-04T22:29:51Z", "author": {"login": "fedejinich"}, "path": "rskj-core/src/test/java/co/rsk/core/bc/TransactionPoolImplTest.java", "diffHunk": "@@ -512,8 +514,10 @@ public void addTwiceAndGetQueuedTransaction() {\n         transactionPool.addTransaction(tx);\n \n         TransactionPoolAddResult result = transactionPool.addTransaction(tx);\n-        Assert.assertFalse(result.transactionWasAdded());\n-        result.ifTransactionWasNotAdded(msg -> Assert.assertEquals(\"queued transaction with same hash already exists\", msg));\n+        Assert.assertFalse(result.transactionsWereAdded());\n+        if(!result.transactionsWereAdded()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4NDU2NA=="}, "originalCommit": {"oid": "83de8af9e081bbe8ad4b08db629a2662ed261af1"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjAzMjY5OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/test/java/co/rsk/core/bc/TransactionPoolImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTozNTo0OVrOG7uuHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjozMDoxMlrOG7ztPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4NDYzOA==", "bodyText": "ditto", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r465284638", "createdAt": "2020-08-04T19:35:49Z", "author": {"login": "nicops"}, "path": "rskj-core/src/test/java/co/rsk/core/bc/TransactionPoolImplTest.java", "diffHunk": "@@ -557,8 +561,10 @@ public void checkTxWithSameNonceIsRejected() {\n \n         TransactionPoolAddResult result = transactionPool.addTransaction(tx2);\n \n-        Assert.assertFalse(result.transactionWasAdded());\n-        result.ifTransactionWasNotAdded(msg -> Assert.assertEquals(\"gas price not enough to bump transaction\", msg));\n+        Assert.assertFalse(result.transactionsWereAdded());\n+        if(!result.transactionsWereAdded()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83de8af9e081bbe8ad4b08db629a2662ed261af1"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2NjMzNQ==", "bodyText": "removed unnecessary if", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r465366335", "createdAt": "2020-08-04T22:30:12Z", "author": {"login": "fedejinich"}, "path": "rskj-core/src/test/java/co/rsk/core/bc/TransactionPoolImplTest.java", "diffHunk": "@@ -557,8 +561,10 @@ public void checkTxWithSameNonceIsRejected() {\n \n         TransactionPoolAddResult result = transactionPool.addTransaction(tx2);\n \n-        Assert.assertFalse(result.transactionWasAdded());\n-        result.ifTransactionWasNotAdded(msg -> Assert.assertEquals(\"gas price not enough to bump transaction\", msg));\n+        Assert.assertFalse(result.transactionsWereAdded());\n+        if(!result.transactionsWereAdded()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4NDYzOA=="}, "originalCommit": {"oid": "83de8af9e081bbe8ad4b08db629a2662ed261af1"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjAzMzM5OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/test/java/co/rsk/core/bc/TransactionPoolImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTozNjowMlrOG7uukA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjozMDoyNlrOG7zthw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4NDc1Mg==", "bodyText": "ditto", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r465284752", "createdAt": "2020-08-04T19:36:02Z", "author": {"login": "nicops"}, "path": "rskj-core/src/test/java/co/rsk/core/bc/TransactionPoolImplTest.java", "diffHunk": "@@ -583,8 +589,10 @@ public void checkTxWithHighGasLimitIsRejected() {\n \n         TransactionPoolAddResult result = transactionPool.addTransaction(tx);\n \n-        Assert.assertFalse(result.transactionWasAdded());\n-        result.ifTransactionWasNotAdded(msg -> Assert.assertEquals(\"transaction's gas limit of 3000001 is higher than the block's gas limit of 3000000\", msg));\n+        Assert.assertFalse(result.transactionsWereAdded());\n+        if(!result.transactionsWereAdded()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83de8af9e081bbe8ad4b08db629a2662ed261af1"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2NjQwNw==", "bodyText": "removed unnecessary if", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r465366407", "createdAt": "2020-08-04T22:30:26Z", "author": {"login": "fedejinich"}, "path": "rskj-core/src/test/java/co/rsk/core/bc/TransactionPoolImplTest.java", "diffHunk": "@@ -583,8 +589,10 @@ public void checkTxWithHighGasLimitIsRejected() {\n \n         TransactionPoolAddResult result = transactionPool.addTransaction(tx);\n \n-        Assert.assertFalse(result.transactionWasAdded());\n-        result.ifTransactionWasNotAdded(msg -> Assert.assertEquals(\"transaction's gas limit of 3000001 is higher than the block's gas limit of 3000000\", msg));\n+        Assert.assertFalse(result.transactionsWereAdded());\n+        if(!result.transactionsWereAdded()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4NDc1Mg=="}, "originalCommit": {"oid": "83de8af9e081bbe8ad4b08db629a2662ed261af1"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjA0MTg1OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/test/java/co/rsk/core/bc/TransactionPoolImplTest.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTozODo0N1rOG7uz-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzoyNToyMVrOG8Jiiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4NjEzNg==", "bodyText": "I would make more assertions here about the return value of each addTransaction. Check that the first one returns ok queued with tx2,  the latter one should add ok pending with the list of the two tx in the right order (first tx1, then tx2).", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r465286136", "createdAt": "2020-08-04T19:38:47Z", "author": {"login": "nicops"}, "path": "rskj-core/src/test/java/co/rsk/core/bc/TransactionPoolImplTest.java", "diffHunk": "@@ -802,8 +825,8 @@ public void addTwoTransactionsOutOfOrderInNonceUsingAddTransaction() {\n         Transaction tx1 = createSampleTransactionWithGasPrice(1, 0, 1000, 0, 1);\n         Transaction tx2 = createSampleTransactionWithGasPrice(1, 0, 2000, 1, 2);\n \n-        Assert.assertTrue(transactionPool.addTransaction(tx2).transactionWasAdded());\n-        Assert.assertTrue(transactionPool.addTransaction(tx1).transactionWasAdded());\n+        Assert.assertTrue(transactionPool.addTransaction(tx2).transactionsWereAdded());\n+        Assert.assertTrue(transactionPool.addTransaction(tx1).transactionsWereAdded());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83de8af9e081bbe8ad4b08db629a2662ed261af1"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4Njc2NQ==", "bodyText": "the test below (addTwoTransactionsOutOfOrderInNonceUsingAddTransactions), you didn't modify it on this PR, but should have assertions done to the return value as well", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r465286765", "createdAt": "2020-08-04T19:40:06Z", "author": {"login": "nicops"}, "path": "rskj-core/src/test/java/co/rsk/core/bc/TransactionPoolImplTest.java", "diffHunk": "@@ -802,8 +825,8 @@ public void addTwoTransactionsOutOfOrderInNonceUsingAddTransaction() {\n         Transaction tx1 = createSampleTransactionWithGasPrice(1, 0, 1000, 0, 1);\n         Transaction tx2 = createSampleTransactionWithGasPrice(1, 0, 2000, 1, 2);\n \n-        Assert.assertTrue(transactionPool.addTransaction(tx2).transactionWasAdded());\n-        Assert.assertTrue(transactionPool.addTransaction(tx1).transactionWasAdded());\n+        Assert.assertTrue(transactionPool.addTransaction(tx2).transactionsWereAdded());\n+        Assert.assertTrue(transactionPool.addTransaction(tx1).transactionsWereAdded());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4NjEzNg=="}, "originalCommit": {"oid": "83de8af9e081bbe8ad4b08db629a2662ed261af1"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0ODExNQ==", "bodyText": "also this addTransaction only retrieves an internal TransactionPoolAddResult instead of returning internal result+successors (successors are also in pending state now)", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r465348115", "createdAt": "2020-08-04T21:45:18Z", "author": {"login": "fedejinich"}, "path": "rskj-core/src/test/java/co/rsk/core/bc/TransactionPoolImplTest.java", "diffHunk": "@@ -802,8 +825,8 @@ public void addTwoTransactionsOutOfOrderInNonceUsingAddTransaction() {\n         Transaction tx1 = createSampleTransactionWithGasPrice(1, 0, 1000, 0, 1);\n         Transaction tx2 = createSampleTransactionWithGasPrice(1, 0, 2000, 1, 2);\n \n-        Assert.assertTrue(transactionPool.addTransaction(tx2).transactionWasAdded());\n-        Assert.assertTrue(transactionPool.addTransaction(tx1).transactionWasAdded());\n+        Assert.assertTrue(transactionPool.addTransaction(tx2).transactionsWereAdded());\n+        Assert.assertTrue(transactionPool.addTransaction(tx1).transactionsWereAdded());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4NjEzNg=="}, "originalCommit": {"oid": "83de8af9e081bbe8ad4b08db629a2662ed261af1"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0ODM3MA==", "bodyText": "I'll raise another issue to refactor those two methods into one", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r465348370", "createdAt": "2020-08-04T21:45:55Z", "author": {"login": "fedejinich"}, "path": "rskj-core/src/test/java/co/rsk/core/bc/TransactionPoolImplTest.java", "diffHunk": "@@ -802,8 +825,8 @@ public void addTwoTransactionsOutOfOrderInNonceUsingAddTransaction() {\n         Transaction tx1 = createSampleTransactionWithGasPrice(1, 0, 1000, 0, 1);\n         Transaction tx2 = createSampleTransactionWithGasPrice(1, 0, 2000, 1, 2);\n \n-        Assert.assertTrue(transactionPool.addTransaction(tx2).transactionWasAdded());\n-        Assert.assertTrue(transactionPool.addTransaction(tx1).transactionWasAdded());\n+        Assert.assertTrue(transactionPool.addTransaction(tx2).transactionsWereAdded());\n+        Assert.assertTrue(transactionPool.addTransaction(tx1).transactionsWereAdded());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4NjEzNg=="}, "originalCommit": {"oid": "83de8af9e081bbe8ad4b08db629a2662ed261af1"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3MzAwNQ==", "bodyText": "#1286", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r465373005", "createdAt": "2020-08-04T22:49:25Z", "author": {"login": "fedejinich"}, "path": "rskj-core/src/test/java/co/rsk/core/bc/TransactionPoolImplTest.java", "diffHunk": "@@ -802,8 +825,8 @@ public void addTwoTransactionsOutOfOrderInNonceUsingAddTransaction() {\n         Transaction tx1 = createSampleTransactionWithGasPrice(1, 0, 1000, 0, 1);\n         Transaction tx2 = createSampleTransactionWithGasPrice(1, 0, 2000, 1, 2);\n \n-        Assert.assertTrue(transactionPool.addTransaction(tx2).transactionWasAdded());\n-        Assert.assertTrue(transactionPool.addTransaction(tx1).transactionWasAdded());\n+        Assert.assertTrue(transactionPool.addTransaction(tx2).transactionsWereAdded());\n+        Assert.assertTrue(transactionPool.addTransaction(tx1).transactionsWereAdded());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4NjEzNg=="}, "originalCommit": {"oid": "83de8af9e081bbe8ad4b08db629a2662ed261af1"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcyNDA0Mw==", "bodyText": "\ud83d\udc4c \ud83d\udc4c \ud83d\udc4c", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r465724043", "createdAt": "2020-08-05T13:25:21Z", "author": {"login": "nicops"}, "path": "rskj-core/src/test/java/co/rsk/core/bc/TransactionPoolImplTest.java", "diffHunk": "@@ -802,8 +825,8 @@ public void addTwoTransactionsOutOfOrderInNonceUsingAddTransaction() {\n         Transaction tx1 = createSampleTransactionWithGasPrice(1, 0, 1000, 0, 1);\n         Transaction tx2 = createSampleTransactionWithGasPrice(1, 0, 2000, 1, 2);\n \n-        Assert.assertTrue(transactionPool.addTransaction(tx2).transactionWasAdded());\n-        Assert.assertTrue(transactionPool.addTransaction(tx1).transactionWasAdded());\n+        Assert.assertTrue(transactionPool.addTransaction(tx2).transactionsWereAdded());\n+        Assert.assertTrue(transactionPool.addTransaction(tx1).transactionsWereAdded());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4NjEzNg=="}, "originalCommit": {"oid": "83de8af9e081bbe8ad4b08db629a2662ed261af1"}, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjI0MTU4OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/rpc/modules/eth/EthModuleTransactionBase.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMDo0MjoxN1rOG7wwzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjozMjoxM1rOG7zv4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMxODA5NQ==", "bodyText": "I don't think this is correct. This method derives the account nonce based on the line right below this one. To do that consistently it needs to synchronized over the transactionPool because it is accessing it as you can see in the line right below this one.", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r465318095", "createdAt": "2020-08-04T20:42:17Z", "author": {"login": "nicops"}, "path": "rskj-core/src/main/java/co/rsk/rpc/modules/eth/EthModuleTransactionBase.java", "diffHunk": "@@ -64,12 +67,15 @@ public synchronized String sendTransaction(Web3.CallArguments args) {\n                 args.data = args.data.substring(2);\n             }\n \n-            synchronized (transactionPool) {\n+            synchronized (transactionGateway) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83de8af9e081bbe8ad4b08db629a2662ed261af1"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMzMDM5Mw==", "bodyText": "got it", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r465330393", "createdAt": "2020-08-04T21:06:30Z", "author": {"login": "fedejinich"}, "path": "rskj-core/src/main/java/co/rsk/rpc/modules/eth/EthModuleTransactionBase.java", "diffHunk": "@@ -64,12 +67,15 @@ public synchronized String sendTransaction(Web3.CallArguments args) {\n                 args.data = args.data.substring(2);\n             }\n \n-            synchronized (transactionPool) {\n+            synchronized (transactionGateway) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMxODA5NQ=="}, "originalCommit": {"oid": "83de8af9e081bbe8ad4b08db629a2662ed261af1"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2NzAxMQ==", "bodyText": "now it synchronises with txPool instead of txGateway", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r465367011", "createdAt": "2020-08-04T22:32:13Z", "author": {"login": "fedejinich"}, "path": "rskj-core/src/main/java/co/rsk/rpc/modules/eth/EthModuleTransactionBase.java", "diffHunk": "@@ -64,12 +67,15 @@ public synchronized String sendTransaction(Web3.CallArguments args) {\n                 args.data = args.data.substring(2);\n             }\n \n-            synchronized (transactionPool) {\n+            synchronized (transactionGateway) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMxODA5NQ=="}, "originalCommit": {"oid": "83de8af9e081bbe8ad4b08db629a2662ed261af1"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjQxNDIwOnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/core/bc/TransactionPoolImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwOTozMDo1OFrOG8rjlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoyMDo0NFrOG9C5fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI4MTM2Ng==", "bodyText": "Minor comment: this is not a list \"to be added\". This list has the transaction actually ADDED during the execution of this method", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r466281366", "createdAt": "2020-08-06T09:30:58Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/main/java/co/rsk/core/bc/TransactionPoolImpl.java", "diffHunk": "@@ -159,23 +159,23 @@ private RepositorySnapshot getCurrentRepository() {\n     }\n \n     private List<Transaction> addSuccessors(Transaction tx) {\n-        List<Transaction> added = new ArrayList<>();\n+        List<Transaction> pendingTransactionsToBeAdded = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12839722581405c1d3446298a32e880c172b0481"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2MzgwNg==", "bodyText": "yes you're right!", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r466663806", "createdAt": "2020-08-06T20:20:44Z", "author": {"login": "fedejinich"}, "path": "rskj-core/src/main/java/co/rsk/core/bc/TransactionPoolImpl.java", "diffHunk": "@@ -159,23 +159,23 @@ private RepositorySnapshot getCurrentRepository() {\n     }\n \n     private List<Transaction> addSuccessors(Transaction tx) {\n-        List<Transaction> added = new ArrayList<>();\n+        List<Transaction> pendingTransactionsToBeAdded = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI4MTM2Ng=="}, "originalCommit": {"oid": "12839722581405c1d3446298a32e880c172b0481"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjQ2ODg0OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/net/NodeMessageHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwOTozOToxNVrOG8sJaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMjozMToxOVrOG-MhzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5MTA0OA==", "bodyText": "Could you elaborate this decision?\nIf the transaction be replaced by other (ie chaging the gas price), then it is a different transaction\nIf is the SAME transaction send from other node that relay the SAME transaction AFTER its expiration (in that node), we cannot be sure if the node that receives the message with the already processed transaction, will accept it (because expiration time could be different)\nI prefer to remove this receivedMessage variable and logic. But now, this logic helps a lot to discard incoming message that came many times (ie, now it's easy to see the transaction message come from many peers, even before the first transaction message could be processed)", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r466291048", "createdAt": "2020-08-06T09:39:15Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/main/java/co/rsk/net/NodeMessageHandler.java", "diffHunk": "@@ -118,7 +119,7 @@ public void postMessage(Peer sender, Message message) {\n     private void tryAddMessage(Peer sender, Message message) {\n         Keccak256 encodedMessage = new Keccak256(HashUtil.keccak256(message.getEncoded()));\n         if (!receivedMessages.contains(encodedMessage)) {\n-            if (message.getMessageType() == MessageType.BLOCK_MESSAGE || message.getMessageType() == MessageType.TRANSACTIONS) {\n+            if (message.getMessageType() == MessageType.BLOCK_MESSAGE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12839722581405c1d3446298a32e880c172b0481"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1NDg4OQ==", "bodyText": "well this was a team decision, the idea was based on the case \"when a transaction expires\". in the old way we couldn't even process that resented transaction (despite expiration time)", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r466654889", "createdAt": "2020-08-06T20:02:17Z", "author": {"login": "fedejinich"}, "path": "rskj-core/src/main/java/co/rsk/net/NodeMessageHandler.java", "diffHunk": "@@ -118,7 +119,7 @@ public void postMessage(Peer sender, Message message) {\n     private void tryAddMessage(Peer sender, Message message) {\n         Keccak256 encodedMessage = new Keccak256(HashUtil.keccak256(message.getEncoded()));\n         if (!receivedMessages.contains(encodedMessage)) {\n-            if (message.getMessageType() == MessageType.BLOCK_MESSAGE || message.getMessageType() == MessageType.TRANSACTIONS) {\n+            if (message.getMessageType() == MessageType.BLOCK_MESSAGE) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5MTA0OA=="}, "originalCommit": {"oid": "12839722581405c1d3446298a32e880c172b0481"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcxMjcxOA==", "bodyText": "But now, this logic helps a lot to discard incoming message that came many times \n(ie, now it's easy to see the transaction message come from many peers, even before \nthe first transaction message could be processed)\n\nwhat do you think about this @juli @donequis ?", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r466712718", "createdAt": "2020-08-06T22:09:19Z", "author": {"login": "fedejinich"}, "path": "rskj-core/src/main/java/co/rsk/net/NodeMessageHandler.java", "diffHunk": "@@ -118,7 +119,7 @@ public void postMessage(Peer sender, Message message) {\n     private void tryAddMessage(Peer sender, Message message) {\n         Keccak256 encodedMessage = new Keccak256(HashUtil.keccak256(message.getEncoded()));\n         if (!receivedMessages.contains(encodedMessage)) {\n-            if (message.getMessageType() == MessageType.BLOCK_MESSAGE || message.getMessageType() == MessageType.TRANSACTIONS) {\n+            if (message.getMessageType() == MessageType.BLOCK_MESSAGE) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5MTA0OA=="}, "originalCommit": {"oid": "12839722581405c1d3446298a32e880c172b0481"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg3MDE1Ng==", "bodyText": "Does it still help? These are the first lines of the internalAddTransaction method\n        if (pendingTransactions.hasTransaction(tx)) {\n            return TransactionPoolAddResult.withError(\"pending transaction with same hash already exists\");\n        }\n\n        if (queuedTransactions.hasTransaction(tx)) {\n            return TransactionPoolAddResult.withError(\"queued transaction with same hash already exists\");\n        }", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r467870156", "createdAt": "2020-08-10T12:31:19Z", "author": {"login": "donequis"}, "path": "rskj-core/src/main/java/co/rsk/net/NodeMessageHandler.java", "diffHunk": "@@ -118,7 +119,7 @@ public void postMessage(Peer sender, Message message) {\n     private void tryAddMessage(Peer sender, Message message) {\n         Keccak256 encodedMessage = new Keccak256(HashUtil.keccak256(message.getEncoded()));\n         if (!receivedMessages.contains(encodedMessage)) {\n-            if (message.getMessageType() == MessageType.BLOCK_MESSAGE || message.getMessageType() == MessageType.TRANSACTIONS) {\n+            if (message.getMessageType() == MessageType.BLOCK_MESSAGE) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5MTA0OA=="}, "originalCommit": {"oid": "12839722581405c1d3446298a32e880c172b0481"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjQ4NjI5OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/net/TransactionGateway.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwOTo0MjozMlrOG8sUeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDowNToyOVrOG9CcrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5Mzg4MA==", "bodyText": "Really nice! It makes non-sense to have this logic as internal service", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r466293880", "createdAt": "2020-08-06T09:42:32Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/main/java/co/rsk/net/TransactionGateway.java", "diffHunk": "@@ -18,66 +18,41 @@\n \n package co.rsk.net;\n \n-import co.rsk.config.InternalService;\n-import co.rsk.crypto.Keccak256;\n import org.ethereum.core.Transaction;\n import org.ethereum.core.TransactionPool;\n-import org.ethereum.listener.CompositeEthereumListener;\n-import org.ethereum.listener.EthereumListenerAdapter;\n+import org.ethereum.core.TransactionPoolAddResult;\n import org.ethereum.net.server.ChannelManager;\n \n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Objects;\n-import java.util.Set;\n+import javax.annotation.Nonnull;\n+import java.util.*;\n \n /**\n  * Centralizes receiving and relaying transactions, so we can only distribute information to nodes that don't already\n  * have it.\n  */\n-public class TransactionGateway implements InternalService {\n+public class TransactionGateway {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12839722581405c1d3446298a32e880c172b0481"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1NjQyOQ==", "bodyText": "\ud83d\udcaf", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r466656429", "createdAt": "2020-08-06T20:05:29Z", "author": {"login": "fedejinich"}, "path": "rskj-core/src/main/java/co/rsk/net/TransactionGateway.java", "diffHunk": "@@ -18,66 +18,41 @@\n \n package co.rsk.net;\n \n-import co.rsk.config.InternalService;\n-import co.rsk.crypto.Keccak256;\n import org.ethereum.core.Transaction;\n import org.ethereum.core.TransactionPool;\n-import org.ethereum.listener.CompositeEthereumListener;\n-import org.ethereum.listener.EthereumListenerAdapter;\n+import org.ethereum.core.TransactionPoolAddResult;\n import org.ethereum.net.server.ChannelManager;\n \n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Objects;\n-import java.util.Set;\n+import javax.annotation.Nonnull;\n+import java.util.*;\n \n /**\n  * Centralizes receiving and relaying transactions, so we can only distribute information to nodes that don't already\n  * have it.\n  */\n-public class TransactionGateway implements InternalService {\n+public class TransactionGateway {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5Mzg4MA=="}, "originalCommit": {"oid": "12839722581405c1d3446298a32e880c172b0481"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjQ5MDE1OnYy", "diffSide": "LEFT", "path": "rskj-core/src/main/java/co/rsk/net/TransactionGateway.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwOTo0Mzo0M1rOG8sW9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwOTo0Mzo0M1rOG8sW9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5NDUxOQ==", "bodyText": "Nice! The listener logic obscure the intention of this object logic and purpose.", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r466294519", "createdAt": "2020-08-06T09:43:43Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/main/java/co/rsk/net/TransactionGateway.java", "diffHunk": "@@ -18,66 +18,41 @@\n \n package co.rsk.net;\n \n-import co.rsk.config.InternalService;\n-import co.rsk.crypto.Keccak256;\n import org.ethereum.core.Transaction;\n import org.ethereum.core.TransactionPool;\n-import org.ethereum.listener.CompositeEthereumListener;\n-import org.ethereum.listener.EthereumListenerAdapter;\n+import org.ethereum.core.TransactionPoolAddResult;\n import org.ethereum.net.server.ChannelManager;\n \n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Objects;\n-import java.util.Set;\n+import javax.annotation.Nonnull;\n+import java.util.*;\n \n /**\n  * Centralizes receiving and relaying transactions, so we can only distribute information to nodes that don't already\n  * have it.\n  */\n-public class TransactionGateway implements InternalService {\n+public class TransactionGateway {\n     private final ChannelManager channelManager;\n-    private final CompositeEthereumListener emitter;\n     private final TransactionPool transactionPool;\n \n-    private final TransactionNodeInformation transactionNodeInformation = new TransactionNodeInformation();\n-    private final OnPendingTransactionsReceivedListener listener = new OnPendingTransactionsReceivedListener();\n-\n     public TransactionGateway(\n             ChannelManager channelManager,\n-            TransactionPool transactionPool,\n-            CompositeEthereumListener emitter) {\n+            TransactionPool transactionPool) {\n         this.channelManager = Objects.requireNonNull(channelManager);\n         this.transactionPool = Objects.requireNonNull(transactionPool);\n-        this.emitter = Objects.requireNonNull(emitter);\n-    }\n-\n-    @Override\n-    public void start() {\n-        emitter.addListener(listener);\n-    }\n-\n-    @Override\n-    public void stop() {\n-        emitter.removeListener(listener);\n     }\n \n-    public void receiveTransactionsFrom(List<Transaction> txs, NodeID nodeID) {\n-        txs.forEach(tx -> transactionNodeInformation.addTransactionToNode(tx.getHash(), nodeID));\n-        transactionPool.addTransactions(txs);\n+    public void receiveTransactionsFrom(@Nonnull List<Transaction> txs, @Nonnull Set<NodeID> nodeIDS) {\n+        List<Transaction> result  = transactionPool.addTransactions(txs);\n+        if(!result.isEmpty()) {\n+            channelManager.broadcastTransactions(result, nodeIDS);\n+        }\n     }\n \n-    private class OnPendingTransactionsReceivedListener extends EthereumListenerAdapter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12839722581405c1d3446298a32e880c172b0481"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjQ5NjU4OnYy", "diffSide": "LEFT", "path": "rskj-core/src/main/java/co/rsk/net/TransactionNodeInformation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwOTo0NToyNVrOG8saxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwOTo0NToyNVrOG8saxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5NTQ5Mg==", "bodyText": "Great! Having in memory data to control which transaction was sent to which node, is something that can be easily removed. Everything we keep in memory could generate a friction with other states (in this pull request, with TransactionPoolImpl logic)", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r466295492", "createdAt": "2020-08-06T09:45:25Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/main/java/co/rsk/net/TransactionNodeInformation.java", "diffHunk": "@@ -1,86 +0,0 @@\n-/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12839722581405c1d3446298a32e880c172b0481"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjUwMjU2OnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/rpc/modules/eth/EthModuleTransactionInstant.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwOTo0NzowN1rOG8seZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwOTo0NzowN1rOG8seZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5NjQyMg==", "bodyText": "It's good to have this helper here, using its logic", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r466296422", "createdAt": "2020-08-06T09:47:07Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/main/java/co/rsk/rpc/modules/eth/EthModuleTransactionInstant.java", "diffHunk": "@@ -43,8 +44,9 @@ public EthModuleTransactionInstant(\n             TransactionPool transactionPool,\n             MinerServer minerServer,\n             MinerClient minerClient,\n-            Blockchain blockchain) {\n-        super(constants, wallet, transactionPool);\n+            Blockchain blockchain,\n+            TransactionGateway transactionGateway) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12839722581405c1d3446298a32e880c172b0481"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjUxNDMzOnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/org/ethereum/net/server/ChannelManagerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwOTo1MDozMVrOG8slkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwOTo1MDozMVrOG8slkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5ODI1Ng==", "bodyText": "Good to see using the message with MANY transactions", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r466298256", "createdAt": "2020-08-06T09:50:31Z", "author": {"login": "ajlopezrsk"}, "path": "rskj-core/src/main/java/org/ethereum/net/server/ChannelManagerImpl.java", "diffHunk": "@@ -321,4 +297,52 @@ public boolean isAddressBlockAvailable(InetAddress inetAddress) {\n         }\n     }\n \n+    /**\n+     * broadcastTransaction Propagates a transaction message across active peers with exclusion of\n+     * the peers with an id belonging to the skip set.\n+     *\n+     * @param transaction new Transaction to be sent\n+     * @param skip        the set of peers to avoid sending the message.\n+     * @return a set containing the ids of the peers that received the transaction.\n+     */\n+    @Nonnull\n+    public Set<NodeID> broadcastTransaction(@Nonnull final Transaction transaction, @Nonnull final Set<NodeID> skip) {\n+        List<Transaction> transactions = Collections.singletonList(transaction);\n+\n+        return internalBroadcastTransactions(skip, transactions);\n+    }\n+\n+    /**\n+     * broadcastTransaction Propagates a transaction message across active peers with exclusion of\n+     * the peers with an id belonging to the skip set.\n+     *\n+     * @param transactions List of Transactions to be sent\n+     * @param skip        the set of peers to avoid sending the message.\n+     * @return a set containing the ids of the peers that received the transaction.\n+     */\n+    @Override\n+    public Set<NodeID> broadcastTransactions(@Nonnull final List<Transaction> transactions, @Nonnull final Set<NodeID> skip) {\n+        return internalBroadcastTransactions(skip, transactions);\n+    }\n+\n+    private Set<NodeID> internalBroadcastTransactions(Set<NodeID> skip, List<Transaction> transactions) {\n+        final Set<NodeID> nodesIdsBroadcastedTo = new HashSet<>();\n+        final Message newTransactions = new TransactionsMessage(transactions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12839722581405c1d3446298a32e880c172b0481"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzg5ODcxOnYy", "diffSide": "RIGHT", "path": "rskj-core/src/main/java/co/rsk/net/NodeMessageHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNDowNTozMlrOG-5bBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxODoxMTozNFrOG_Df6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYwNTcwMg==", "bodyText": "Messages should be offered only on non negative scores", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r468605702", "createdAt": "2020-08-11T14:05:32Z", "author": {"login": "donequis"}, "path": "rskj-core/src/main/java/co/rsk/net/NodeMessageHandler.java", "diffHunk": "@@ -127,7 +126,8 @@ private void tryAddMessage(Peer sender, Message message) {\n \n             double score = sender.score(System.currentTimeMillis(), message.getMessageType());\n \n-            if (score >= 0 && !this.queue.offer(new MessageTask(sender, message, score))) {\n+            boolean notAdded = !this.queue.offer(new MessageTask(sender, message, score));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "975e3959e1f665cc4d761a5cfa4133b4970ca95c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc3MDc5Mg==", "bodyText": "extracted that part into addMessage method", "url": "https://github.com/rsksmart/rskj/pull/1266#discussion_r468770792", "createdAt": "2020-08-11T18:11:34Z", "author": {"login": "fedejinich"}, "path": "rskj-core/src/main/java/co/rsk/net/NodeMessageHandler.java", "diffHunk": "@@ -127,7 +126,8 @@ private void tryAddMessage(Peer sender, Message message) {\n \n             double score = sender.score(System.currentTimeMillis(), message.getMessageType());\n \n-            if (score >= 0 && !this.queue.offer(new MessageTask(sender, message, score))) {\n+            boolean notAdded = !this.queue.offer(new MessageTask(sender, message, score));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYwNTcwMg=="}, "originalCommit": {"oid": "975e3959e1f665cc4d761a5cfa4133b4970ca95c"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4433, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}