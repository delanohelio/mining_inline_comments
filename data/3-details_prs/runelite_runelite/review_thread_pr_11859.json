{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxNDgyMDYz", "number": 11859, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNDozNTozNFrOEEIx2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNToyMjoxOFrOEEJPQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzczNTk1OnYy", "diffSide": "RIGHT", "path": "runelite-client/src/main/java/net/runelite/client/game/LootManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNDozNTozNFrOGhkipw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxOTowNzo0M1rOGiCpKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg1NDg4Nw==", "bodyText": "Remove this extra newline at EOF\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/runelite/runelite/pull/11859#discussion_r437854887", "createdAt": "2020-06-10T04:35:34Z", "author": {"login": "Nightfirecat"}, "path": "runelite-client/src/main/java/net/runelite/client/game/LootManager.java", "diffHunk": "@@ -403,4 +404,26 @@ private WorldPoint getAdjacentSquareLootTile(NPC npc)\n \n \t\treturn new WorldPoint(x, y, worldLocation.getPlane());\n \t}\n+\n+\t/**\n+\t * Get the list of items present at the provided WorldPoint that spawned this tick.\n+\t *\n+\t * @param worldPoint the location in question\n+\t * @return the list of item stacks\n+\t */\n+\tpublic Collection<ItemStack> getItemSpawns(WorldPoint worldPoint)\n+\t{\n+\t\tLocalPoint localPoint = LocalPoint.fromWorld(client, worldPoint);\n+\t\tif (localPoint == null)\n+\t\t{\n+\t\t\treturn Collections.emptyList();\n+\t\t}\n+\n+\t\tfinal int sceneX = localPoint.getSceneX();\n+\t\tfinal int sceneY = localPoint.getSceneY();\n+\t\tfinal int packed = sceneX << 8 | sceneY;\n+\t\tfinal List<ItemStack> itemStacks = itemSpawns.get(packed);\n+\t\treturn Collections.unmodifiableList(itemStacks);\n+\t}\n }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b2e2fbe1f4a8e9300387fd26768db0647f07f45"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM0ODA3Mg==", "bodyText": "done", "url": "https://github.com/runelite/runelite/pull/11859#discussion_r438348072", "createdAt": "2020-06-10T19:07:43Z", "author": {"login": "leejt"}, "path": "runelite-client/src/main/java/net/runelite/client/game/LootManager.java", "diffHunk": "@@ -403,4 +404,26 @@ private WorldPoint getAdjacentSquareLootTile(NPC npc)\n \n \t\treturn new WorldPoint(x, y, worldLocation.getPlane());\n \t}\n+\n+\t/**\n+\t * Get the list of items present at the provided WorldPoint that spawned this tick.\n+\t *\n+\t * @param worldPoint the location in question\n+\t * @return the list of item stacks\n+\t */\n+\tpublic Collection<ItemStack> getItemSpawns(WorldPoint worldPoint)\n+\t{\n+\t\tLocalPoint localPoint = LocalPoint.fromWorld(client, worldPoint);\n+\t\tif (localPoint == null)\n+\t\t{\n+\t\t\treturn Collections.emptyList();\n+\t\t}\n+\n+\t\tfinal int sceneX = localPoint.getSceneX();\n+\t\tfinal int sceneY = localPoint.getSceneY();\n+\t\tfinal int packed = sceneX << 8 | sceneY;\n+\t\tfinal List<ItemStack> itemStacks = itemSpawns.get(packed);\n+\t\treturn Collections.unmodifiableList(itemStacks);\n+\t}\n }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg1NDg4Nw=="}, "originalCommit": {"oid": "5b2e2fbe1f4a8e9300387fd26768db0647f07f45"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzczNjIxOnYy", "diffSide": "RIGHT", "path": "runelite-client/src/main/java/net/runelite/client/plugins/loottracker/LootTrackerPlugin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNDozNTo0NFrOGhkizg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNDozNTo0NFrOGhkizg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg1NDkyNg==", "bodyText": "And this one\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/runelite/runelite/pull/11859#discussion_r437854926", "createdAt": "2020-06-10T04:35:44Z", "author": {"login": "Nightfirecat"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/loottracker/LootTrackerPlugin.java", "diffHunk": "@@ -891,3 +942,4 @@ private void lootReceivedChatMessage(final Collection<ItemStack> items, final St\n \t\t\t\t.build());\n \t}\n }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b2e2fbe1f4a8e9300387fd26768db0647f07f45"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzgwMDU1OnYy", "diffSide": "RIGHT", "path": "runelite-client/src/main/java/net/runelite/client/plugins/loottracker/LootTrackerPlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNToxNjozMFrOGhlKZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxOTowNzo1M1rOGiCpfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg2NTA2Mw==", "bodyText": "All the clue scroll event cases should have their breaks become returns.", "url": "https://github.com/runelite/runelite/pull/11859#discussion_r437865063", "createdAt": "2020-06-10T05:16:30Z", "author": {"login": "Nightfirecat"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/loottracker/LootTrackerPlugin.java", "diffHunk": "@@ -619,6 +649,13 @@ public void onChatMessage(ChatMessage event)\n \t\t\t\t\tbreak;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b2e2fbe1f4a8e9300387fd26768db0647f07f45"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM0ODE1Ng==", "bodyText": "done", "url": "https://github.com/runelite/runelite/pull/11859#discussion_r438348156", "createdAt": "2020-06-10T19:07:53Z", "author": {"login": "leejt"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/loottracker/LootTrackerPlugin.java", "diffHunk": "@@ -619,6 +649,13 @@ public void onChatMessage(ChatMessage event)\n \t\t\t\t\tbreak;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg2NTA2Mw=="}, "originalCommit": {"oid": "5b2e2fbe1f4a8e9300387fd26768db0647f07f45"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzgxMTIxOnYy", "diffSide": "RIGHT", "path": "runelite-client/src/main/java/net/runelite/client/plugins/loottracker/LootTrackerPlugin.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNToyMjoxOFrOGhlQ6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMToxNDoyM1rOGiGjGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg2NjczMA==", "bodyText": "As written, this would make every chest of different key color recorded in a different loot group, which is kind of weird. I'd expect users to care only about the chest color, not about the key color.", "url": "https://github.com/runelite/runelite/pull/11859#discussion_r437866730", "createdAt": "2020-06-10T05:22:18Z", "author": {"login": "Nightfirecat"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/loottracker/LootTrackerPlugin.java", "diffHunk": "@@ -657,6 +698,13 @@ public void onMenuOptionClicked(MenuOptionClicked event)\n \t\t\tlootRecordType = LootRecordType.EVENT;\n \t\t\ttakeInventorySnapshot();\n \t\t}\n+\n+\t\tif (event.getMenuOption().equals(\"Open\") && SHADE_CHEST_OBJECTS.containsKey(event.getId()))\n+\t\t{\n+\t\t\teventType = SHADE_CHEST_OBJECTS.get(event.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b2e2fbe1f4a8e9300387fd26768db0647f07f45"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM0MzIzNw==", "bodyText": "Splitting by key color is intentional from my perspective \u2013\u00a0our current understanding is that (for example) silver key purple gives a different loot distribution than silver key red.\nIt's an open question whether that's a worthwhile reason to group them separately, but my general inclination has been, let's treat them differently if we think the underlying mechanics are distinct.", "url": "https://github.com/runelite/runelite/pull/11859#discussion_r438343237", "createdAt": "2020-06-10T18:58:19Z", "author": {"login": "leejt"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/loottracker/LootTrackerPlugin.java", "diffHunk": "@@ -657,6 +698,13 @@ public void onMenuOptionClicked(MenuOptionClicked event)\n \t\t\tlootRecordType = LootRecordType.EVENT;\n \t\t\ttakeInventorySnapshot();\n \t\t}\n+\n+\t\tif (event.getMenuOption().equals(\"Open\") && SHADE_CHEST_OBJECTS.containsKey(event.getId()))\n+\t\t{\n+\t\t\teventType = SHADE_CHEST_OBJECTS.get(event.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg2NjczMA=="}, "originalCommit": {"oid": "5b2e2fbe1f4a8e9300387fd26768db0647f07f45"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM3NzczMw==", "bodyText": "I don't know anything about how the rewards are distributed, but the wiki says:\n\nA Silver key black is more likely to yield a better treasure than a Silver key brown, but all silver keys have the exact same set of possible rewards. Purple keys will have the highest chance of receiving a clue scroll.\n\nOne of the wiki and this should be updated, based on which is actually correct.", "url": "https://github.com/runelite/runelite/pull/11859#discussion_r438377733", "createdAt": "2020-06-10T20:05:04Z", "author": {"login": "makingcomment"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/loottracker/LootTrackerPlugin.java", "diffHunk": "@@ -657,6 +698,13 @@ public void onMenuOptionClicked(MenuOptionClicked event)\n \t\t\tlootRecordType = LootRecordType.EVENT;\n \t\t\ttakeInventorySnapshot();\n \t\t}\n+\n+\t\tif (event.getMenuOption().equals(\"Open\") && SHADE_CHEST_OBJECTS.containsKey(event.getId()))\n+\t\t{\n+\t\t\teventType = SHADE_CHEST_OBJECTS.get(event.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg2NjczMA=="}, "originalCommit": {"oid": "5b2e2fbe1f4a8e9300387fd26768db0647f07f45"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQxMjA1OA==", "bodyText": "This is a pretty unexplored area of content, so nobody really knows what's going on (getting data to update the wiki is part of the point of adding this to the loot tracker, FWIW), but: we believe that they all give the same items, but at different rarities. We want to track what those rarities are on a per-key basis.", "url": "https://github.com/runelite/runelite/pull/11859#discussion_r438412058", "createdAt": "2020-06-10T21:14:23Z", "author": {"login": "leejt"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/loottracker/LootTrackerPlugin.java", "diffHunk": "@@ -657,6 +698,13 @@ public void onMenuOptionClicked(MenuOptionClicked event)\n \t\t\tlootRecordType = LootRecordType.EVENT;\n \t\t\ttakeInventorySnapshot();\n \t\t}\n+\n+\t\tif (event.getMenuOption().equals(\"Open\") && SHADE_CHEST_OBJECTS.containsKey(event.getId()))\n+\t\t{\n+\t\t\teventType = SHADE_CHEST_OBJECTS.get(event.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg2NjczMA=="}, "originalCommit": {"oid": "5b2e2fbe1f4a8e9300387fd26768db0647f07f45"}, "originalPosition": 97}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3491, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}