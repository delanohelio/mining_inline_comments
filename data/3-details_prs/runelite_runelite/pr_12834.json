{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2MDA1NTYy", "number": 12834, "title": "Per RuneScape-Profile configuration", "bodyText": "This adds support for per runescape save configuration, allowing plugins to correctly keep account data (slayer task, farming timers, etc.) separate on leagues from the standard game.\nRequires internal!122\nCloses #8050\nCloses #12563", "createdAt": "2020-11-23T21:24:42Z", "url": "https://github.com/runelite/runelite/pull/12834", "merged": true, "mergeCommit": {"oid": "f6a5463a578b837d0e4c394e868490e518e0a016"}, "closed": true, "closedAt": "2020-11-27T05:00:55Z", "author": {"login": "abextm"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdfbzL7AH2gAyNTI2MDA1NTYyOjNiYzdiZmY0YWVkYzk2MzFkMWEzN2JmNGE2ZmQ3NjVkNWNjMWNmZDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdgMNg5ABqjQwNDA4NDA1MTA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3bc7bff4aedc9631d1a37bf4a6fd765d5cc1cfd4", "author": {"user": {"login": "abextm", "name": "Abex"}}, "url": "https://github.com/runelite/runelite/commit/3bc7bff4aedc9631d1a37bf4a6fd765d5cc1cfd4", "committedDate": "2020-11-23T21:12:14Z", "message": "runelite-api: add WorldChanged event"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ac456696b35c45366f93d6b26fcf96f6d77dccb", "author": {"user": {"login": "abextm", "name": "Abex"}}, "url": "https://github.com/runelite/runelite/commit/2ac456696b35c45366f93d6b26fcf96f6d77dccb", "committedDate": "2020-11-23T21:12:15Z", "message": "runelite-api: add PlayerChanged event"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "253baaa31e02f687459ff898c77a9084c61e4618", "author": {"user": {"login": "abextm", "name": "Abex"}}, "url": "https://github.com/runelite/runelite/commit/253baaa31e02f687459ff898c77a9084c61e4618", "committedDate": "2020-11-23T21:12:16Z", "message": "http-api, http-service, rl-client: bulk upload configuration changes"}, "afterCommit": {"oid": "b40c7683b017fce6b6569a8fd16a834fa84245c6", "author": {"user": {"login": "abextm", "name": "Abex"}}, "url": "https://github.com/runelite/runelite/commit/b40c7683b017fce6b6569a8fd16a834fa84245c6", "committedDate": "2020-11-23T23:49:31Z", "message": "http-api, http-service, rl-client: bulk upload configuration changes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b40c7683b017fce6b6569a8fd16a834fa84245c6", "author": {"user": {"login": "abextm", "name": "Abex"}}, "url": "https://github.com/runelite/runelite/commit/b40c7683b017fce6b6569a8fd16a834fa84245c6", "committedDate": "2020-11-23T23:49:31Z", "message": "http-api, http-service, rl-client: bulk upload configuration changes"}, "afterCommit": {"oid": "be88b87170ee4e375056be61327f43fbf34dc3ce", "author": {"user": {"login": "abextm", "name": "Abex"}}, "url": "https://github.com/runelite/runelite/commit/be88b87170ee4e375056be61327f43fbf34dc3ce", "committedDate": "2020-11-24T00:35:45Z", "message": "http-api, http-service, rl-client: bulk upload configuration changes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "be88b87170ee4e375056be61327f43fbf34dc3ce", "author": {"user": {"login": "abextm", "name": "Abex"}}, "url": "https://github.com/runelite/runelite/commit/be88b87170ee4e375056be61327f43fbf34dc3ce", "committedDate": "2020-11-24T00:35:45Z", "message": "http-api, http-service, rl-client: bulk upload configuration changes"}, "afterCommit": {"oid": "aecaffb5b2ee72d48339b6c4f364c5f2de5a53b0", "author": {"user": {"login": "abextm", "name": "Abex"}}, "url": "https://github.com/runelite/runelite/commit/aecaffb5b2ee72d48339b6c4f364c5f2de5a53b0", "committedDate": "2020-11-24T04:24:30Z", "message": "http-api, http-service, rl-client: bulk upload configuration changes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aecaffb5b2ee72d48339b6c4f364c5f2de5a53b0", "author": {"user": {"login": "abextm", "name": "Abex"}}, "url": "https://github.com/runelite/runelite/commit/aecaffb5b2ee72d48339b6c4f364c5f2de5a53b0", "committedDate": "2020-11-24T04:24:30Z", "message": "http-api, http-service, rl-client: bulk upload configuration changes"}, "afterCommit": {"oid": "4d8203625131abf927a386dc9eea405c6cddb698", "author": {"user": {"login": "abextm", "name": "Abex"}}, "url": "https://github.com/runelite/runelite/commit/4d8203625131abf927a386dc9eea405c6cddb698", "committedDate": "2020-11-24T21:55:06Z", "message": "http-api, http-service, rl-client: bulk upload configuration changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NTg4MzA3", "url": "https://github.com/runelite/runelite/pull/12834#pullrequestreview-538588307", "createdAt": "2020-11-25T15:02:46Z", "commit": {"oid": "4d8203625131abf927a386dc9eea405c6cddb698"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNTowMjo0NlrOH53cNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNToxMjo1N1rOH535Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQzOTIyMA==", "bodyText": "It may be good to have this as an int in the event we perform another migration in the future.", "url": "https://github.com/runelite/runelite/pull/12834#discussion_r530439220", "createdAt": "2020-11-25T15:02:46Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/config/ConfigManager.java", "diffHunk": "@@ -720,42 +893,280 @@ private void onClientShutdown(ClientShutdown e)\n \tprivate CompletableFuture<Void> sendConfig()\n \t{\n \t\tCompletableFuture<Void> future = null;\n-\t\tboolean changed;\n \t\tsynchronized (pendingChanges)\n \t\t{\n-\t\t\tif (client != null)\n+\t\t\tif (pendingChanges.isEmpty())\n+\t\t\t{\n+\t\t\t\treturn null;\n+\t\t\t}\n+\n+\t\t\tif (configClient != null)\n \t\t\t{\n-\t\t\t\tfuture = CompletableFuture.allOf(pendingChanges.entrySet().stream().map(entry ->\n+\t\t\t\tConfiguration patch = new Configuration(pendingChanges.entrySet().stream()\n+\t\t\t\t\t.map(e -> new ConfigEntry(e.getKey(), e.getValue()))\n+\t\t\t\t\t.collect(Collectors.toList()));\n+\n+\t\t\t\tfuture = configClient.patch(patch);\n+\t\t\t}\n+\n+\t\t\tpendingChanges.clear();\n+\t\t}\n+\n+\t\ttry\n+\t\t{\n+\t\t\tsaveToFile(propertiesFile);\n+\t\t}\n+\t\tcatch (IOException ex)\n+\t\t{\n+\t\t\tlog.warn(\"unable to save configuration file\", ex);\n+\t\t}\n+\n+\t\treturn future;\n+\t}\n+\n+\tpublic List<RuneScapeProfile> getRSProfiles()\n+\t{\n+\t\tString prefix = RSPROFILE_GROUP + \".\" + RSPROFILE_GROUP + \".\";\n+\t\tSet<String> profileKeys = new HashSet<>();\n+\t\tfor (Object oKey : properties.keySet())\n+\t\t{\n+\t\t\tString key = (String) oKey;\n+\t\t\tif (!key.startsWith(prefix))\n+\t\t\t{\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\n+\t\t\tMatcher m = KEY_SPLITTER.matcher(key);\n+\t\t\tif (!m.find())\n+\t\t\t{\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\n+\t\t\tprofileKeys.add(m.group(KEY_SPLITTER_PROFILE));\n+\t\t}\n+\n+\t\treturn profileKeys.stream()\n+\t\t\t.map(key ->\n+\t\t\t{\n+\t\t\t\tRuneScapeProfile prof = new RuneScapeProfile(\n+\t\t\t\t\tgetConfiguration(RSPROFILE_GROUP, key, RSPROFILE_DISPLAY_NAME),\n+\t\t\t\t\tgetConfiguration(RSPROFILE_GROUP, key, RSPROFILE_TYPE, RuneScapeProfileType.class),\n+\t\t\t\t\tgetConfiguration(RSPROFILE_GROUP, key, RSPROFILE_LOGIN_HASH, byte[].class),\n+\t\t\t\t\tkey\n+\t\t\t\t);\n+\n+\t\t\t\treturn prof;\n+\t\t\t})\n+\t\t\t.collect(Collectors.toList());\n+\t}\n+\n+\tprivate synchronized RuneScapeProfile findRSProfile(List<RuneScapeProfile> profiles, String username, RuneScapeProfileType type, String displayName, boolean create)\n+\t{\n+\t\tbyte[] salt = getConfiguration(RSPROFILE_GROUP, RSPROFILE_LOGIN_SALT, byte[].class);\n+\t\tif (salt == null)\n+\t\t{\n+\t\t\tsalt = new byte[15];\n+\t\t\tnew SecureRandom()\n+\t\t\t\t.nextBytes(salt);\n+\t\t\tsetConfiguration(RSPROFILE_GROUP, RSPROFILE_LOGIN_SALT, salt);\n+\t\t}\n+\n+\t\tHasher h = Hashing.sha512().newHasher();\n+\t\th.putBytes(salt);\n+\t\th.putString(username.toLowerCase(Locale.US), StandardCharsets.UTF_8);\n+\t\tbyte[] loginHash = h.hash().asBytes();\n+\n+\t\tSet<RuneScapeProfile> matches = profiles.stream()\n+\t\t\t.filter(p -> Arrays.equals(p.getLoginHash(), loginHash) && p.getType() == type)\n+\t\t\t.collect(Collectors.toSet());\n+\n+\t\tif (matches.size() > 1)\n+\t\t{\n+\t\t\tlog.warn(\"multiple matching profiles\");\n+\t\t}\n+\n+\t\tif (matches.size() >= 1)\n+\t\t{\n+\t\t\treturn matches.iterator().next();\n+\t\t}\n+\n+\t\tif (!create)\n+\t\t{\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\t// generate the new key deterministically so if you \"create\" the same profile on 2 different clients it doesn't duplicate\n+\t\tSet<String> keys = profiles.stream().map(RuneScapeProfile::getKey).collect(Collectors.toSet());\n+\t\tbyte[] key = Arrays.copyOf(loginHash, 6);\n+\t\tkey[0] += type.ordinal();\n+\t\tfor (int i = 0; i < 0xFF; i++, key[1]++)\n+\t\t{\n+\t\t\tString keyStr = RSPROFILE_GROUP + \".\" + Base64.getUrlEncoder().encodeToString(key);\n+\t\t\tif (!keys.contains(keyStr))\n+\t\t\t{\n+\t\t\t\tlog.info(\"creating new profile {} for user {}\", key, username);\n+\n+\t\t\t\tsetConfiguration(RSPROFILE_GROUP, keyStr, RSPROFILE_LOGIN_HASH, loginHash);\n+\t\t\t\tsetConfiguration(RSPROFILE_GROUP, keyStr, RSPROFILE_TYPE, type);\n+\t\t\t\tif (displayName != null)\n+\t\t\t\t{\n+\t\t\t\t\tsetConfiguration(RSPROFILE_GROUP, keyStr, RSPROFILE_DISPLAY_NAME, displayName);\n+\t\t\t\t}\n+\t\t\t\treturn new RuneScapeProfile(displayName, type, loginHash, keyStr);\n+\t\t\t}\n+\t\t}\n+\t\tthrow new RuntimeException(\"too many rs profiles\");\n+\t}\n+\n+\tprivate void updateRSProfile()\n+\t{\n+\t\tif (client == null)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tList<RuneScapeProfile> profiles = getRSProfiles();\n+\t\tRuneScapeProfile prof = findRSProfile(profiles, client.getUsername(), RuneScapeProfileType.getCurrent(client), null, false);\n+\n+\t\tString key = prof == null ? null : prof.getKey();\n+\t\tif (Objects.equals(key, rsProfileKey))\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\t\trsProfileKey = key;\n+\n+\t\teventBus.post(new RuneScapeProfileChanged());\n+\t}\n+\n+\t@Subscribe\n+\tprivate void onUsernameChanged(UsernameChanged ev)\n+\t{\n+\t\tupdateRSProfile();\n+\t}\n+\n+\t@Subscribe\n+\tprivate void onWorldChanged(WorldChanged ev)\n+\t{\n+\t\tupdateRSProfile();\n+\t}\n+\n+\t@Subscribe\n+\tprivate void onPlayerChanged(PlayerChanged ev)\n+\t{\n+\t\tif (ev.getPlayer() == client.getLocalPlayer())\n+\t\t{\n+\t\t\tString name = ev.getPlayer().getName();\n+\t\t\tsetRSProfileConfiguration(RSPROFILE_GROUP, RSPROFILE_DISPLAY_NAME, name);\n+\t\t}\n+\t}\n+\n+\tprivate synchronized void migrateConfig()\n+\t{\n+\t\tString migrationKey = \"profileMigrationDone\";\n+\t\tif (getConfiguration(\"runelite\", migrationKey) != null)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tMap<String, String> profiles = new HashMap<>();\n+\n+\t\tAtomicInteger changes = new AtomicInteger();\n+\t\tList<Predicate<String>> migrators = new ArrayList<>();\n+\t\tfor (String[] tpl : new String[][]\n+\t\t\t{\n+\t\t\t\t{\"(grandexchange)\\\\.buylimit_(%)\\\\.(#)\", \"$1.buylimit.$3\"},\n+\t\t\t\t{\"(timetracking)\\\\.(%)\\\\.(autoweed|contract)\", \"$1.$3\"},\n+\t\t\t\t{\"(timetracking)\\\\.(%)\\\\.(#\\\\.#)\", \"$1.$3\"},\n+\t\t\t\t{\"(timetracking)\\\\.(%)\\\\.(birdhouse)\\\\.(#)\", \"$1.$3.$4\"},\n+\t\t\t\t{\"(killcount|personalbest)\\\\.(%)\\\\.([^.]+)\", \"$1.$3\"},\n+\t\t\t\t{\"(geoffer)\\\\.(%)\\\\.(#)\", \"$1.$3\"},\n+\t\t\t})\n+\t\t{\n+\t\t\tString replace = tpl[1];\n+\t\t\tString pat = (\"^\" + tpl[0] + \"$\")\n+\t\t\t\t.replace(\"#\", \"-?[0-9]+\")\n+\t\t\t\t.replace(\"(%)\", \"(?<login>.*)\");\n+\t\t\tPattern p = Pattern.compile(pat);\n+\n+\t\t\tmigrators.add(oldkey ->\n+\t\t\t{\n+\t\t\t\tMatcher m = p.matcher(oldkey);\n+\t\t\t\tif (!m.find())\n+\t\t\t\t{\n+\t\t\t\t\treturn false;\n+\t\t\t\t}\n+\n+\t\t\t\tString newKey = m.replaceFirst(replace);\n+\t\t\t\tString username = m.group(\"login\").toLowerCase(Locale.US);\n+\n+\t\t\t\tif (username.startsWith(RSPROFILE_GROUP + \".\"))\n \t\t\t\t{\n-\t\t\t\t\tString key = entry.getKey();\n-\t\t\t\t\tString value = entry.getValue();\n+\t\t\t\t\treturn false;\n+\t\t\t\t}\n \n-\t\t\t\t\tif (Strings.isNullOrEmpty(value))\n+\t\t\t\tString profKey = profiles.computeIfAbsent(username, u ->\n+\t\t\t\t\tfindRSProfile(getRSProfiles(), u, RuneScapeProfileType.STANDARD, u, true).getKey());\n+\n+\t\t\t\tMatcher oldKeyM = KEY_SPLITTER.matcher(oldkey);\n+\t\t\t\tif (!oldKeyM.find())\n+\t\t\t\t{\n+\t\t\t\t\tlog.warn(\"skipping migration of invalid key \\\"{}\\\"\", oldkey);\n+\t\t\t\t\treturn false;\n+\t\t\t\t}\n+\t\t\t\tif (oldKeyM.group(KEY_SPLITTER_PROFILE) != null)\n+\t\t\t\t{\n+\t\t\t\t\tlog.debug(\"skipping migrated key \\\"{}\\\"\", oldkey);\n+\t\t\t\t\treturn false;\n+\t\t\t\t}\n+\n+\t\t\t\tMatcher newKeyM = KEY_SPLITTER.matcher(newKey);\n+\t\t\t\tif (!newKeyM.find() || newKeyM.group(KEY_SPLITTER_PROFILE) != null)\n+\t\t\t\t{\n+\t\t\t\t\tlog.warn(\"migration produced a bad key: \\\"{}\\\" -> \\\"{}\\\"\", oldkey, newKey);\n+\t\t\t\t\treturn false;\n+\t\t\t\t}\n+\n+\t\t\t\tif (changes.getAndAdd(1) <= 0)\n+\t\t\t\t{\n+\t\t\t\t\tFile file = new File(propertiesFile.getParent(), propertiesFile.getName() + \".\" + TIME_FORMAT.format(new Date()));\n+\t\t\t\t\tlog.info(\"backing up pre-migration config to {}\", file);\n+\t\t\t\t\ttry\n \t\t\t\t\t{\n-\t\t\t\t\t\treturn client.unset(key);\n+\t\t\t\t\t\tsaveToFile(file);\n \t\t\t\t\t}\n-\t\t\t\t\telse\n+\t\t\t\t\tcatch (IOException e)\n \t\t\t\t\t{\n-\t\t\t\t\t\treturn client.set(key, value);\n+\t\t\t\t\t\tlog.error(\"Backup failed\", e);\n+\t\t\t\t\t\tthrow new RuntimeException(e);\n \t\t\t\t\t}\n-\t\t\t\t}).toArray(CompletableFuture[]::new));\n-\t\t\t}\n-\t\t\tchanged = !pendingChanges.isEmpty();\n-\t\t\tpendingChanges.clear();\n+\t\t\t\t}\n+\n+\t\t\t\tString oldGroup = oldKeyM.group(KEY_SPLITTER_GROUP);\n+\t\t\t\tString oldKeyPart = oldKeyM.group(KEY_SPLITTER_KEY);\n+\t\t\t\tString value = getConfiguration(oldGroup, oldKeyPart);\n+\t\t\t\tsetConfiguration(newKeyM.group(KEY_SPLITTER_GROUP), profKey, newKeyM.group(KEY_SPLITTER_KEY), value);\n+\t\t\t\tunsetConfiguration(oldGroup, oldKeyPart);\n+\t\t\t\treturn true;\n+\t\t\t});\n \t\t}\n \n-\t\tif (changed)\n+\t\tSet<String> keys = (Set<String>) ImmutableSet.copyOf((Set<?>) properties.keySet());\n+\t\tkeys:\n+\t\tfor (String key : keys)\n \t\t{\n-\t\t\ttry\n-\t\t\t{\n-\t\t\t\tsaveToFile(propertiesFile);\n-\t\t\t}\n-\t\t\tcatch (IOException ex)\n+\t\t\tfor (Predicate<String> mig : migrators)\n \t\t\t{\n-\t\t\t\tlog.warn(\"unable to save configuration file\", ex);\n+\t\t\t\tif (mig.test(key))\n+\t\t\t\t{\n+\t\t\t\t\tcontinue keys;\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \n-\t\treturn future;\n+\t\tif (changes.get() > 0)\n+\t\t{\n+\t\t\tlog.info(\"migrated {} config keys\", changes);\n+\t\t}\n+\t\tsetConfiguration(\"runelite\", migrationKey, \"true\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d8203625131abf927a386dc9eea405c6cddb698"}, "originalPosition": 829}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ0MzgwNQ==", "bodyText": "This should have some javadoc.", "url": "https://github.com/runelite/runelite/pull/12834#discussion_r530443805", "createdAt": "2020-11-25T15:09:10Z", "author": {"login": "Adam-"}, "path": "runelite-api/src/main/java/net/runelite/api/events/PlayerChanged.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright (c) 2020 Abex\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.api.events;\n+\n+import lombok.Value;\n+import net.runelite.api.Player;\n+\n+@Value\n+public class PlayerChanged", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d8203625131abf927a386dc9eea405c6cddb698"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ0NjYyMw==", "bodyText": "javadoc?", "url": "https://github.com/runelite/runelite/pull/12834#discussion_r530446623", "createdAt": "2020-11-25T15:12:57Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/events/ConfigChanged.java", "diffHunk": "@@ -39,6 +40,9 @@\n \t * between other key values that may have the same name.\n \t */\n \tprivate String group;\n+\n+\t@Nullable\n+\tprivate String profile;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d8203625131abf927a386dc9eea405c6cddb698"}, "originalPosition": 14}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4d8203625131abf927a386dc9eea405c6cddb698", "author": {"user": {"login": "abextm", "name": "Abex"}}, "url": "https://github.com/runelite/runelite/commit/4d8203625131abf927a386dc9eea405c6cddb698", "committedDate": "2020-11-24T21:55:06Z", "message": "http-api, http-service, rl-client: bulk upload configuration changes"}, "afterCommit": {"oid": "6033ea38fe3a2b3ffa82ee98139e0dac32067adb", "author": {"user": {"login": "abextm", "name": "Abex"}}, "url": "https://github.com/runelite/runelite/commit/6033ea38fe3a2b3ffa82ee98139e0dac32067adb", "committedDate": "2020-11-25T19:17:42Z", "message": "http-api, http-service, rl-client: bulk upload configuration changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0787178229d967477fea5d52ae35022f712fbde", "author": {"user": {"login": "abextm", "name": "Abex"}}, "url": "https://github.com/runelite/runelite/commit/f0787178229d967477fea5d52ae35022f712fbde", "committedDate": "2020-11-26T05:29:35Z", "message": "runelite-client: add rsprofile support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4309dcd53e3d16a3cae961e2c399bd5a0904181d", "author": {"user": {"login": "abextm", "name": "Abex"}}, "url": "https://github.com/runelite/runelite/commit/4309dcd53e3d16a3cae961e2c399bd5a0904181d", "committedDate": "2020-11-26T05:29:35Z", "message": "ConfigManager: immediately send config after importing local"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e769ee0a7b363d1f0f46f9767aae4693991cc80f", "author": {"user": {"login": "abextm", "name": "Abex"}}, "url": "https://github.com/runelite/runelite/commit/e769ee0a7b363d1f0f46f9767aae4693991cc80f", "committedDate": "2020-11-26T05:29:35Z", "message": "http-api, http-service, rl-client: bulk upload configuration changes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6033ea38fe3a2b3ffa82ee98139e0dac32067adb", "author": {"user": {"login": "abextm", "name": "Abex"}}, "url": "https://github.com/runelite/runelite/commit/6033ea38fe3a2b3ffa82ee98139e0dac32067adb", "committedDate": "2020-11-25T19:17:42Z", "message": "http-api, http-service, rl-client: bulk upload configuration changes"}, "afterCommit": {"oid": "e769ee0a7b363d1f0f46f9767aae4693991cc80f", "author": {"user": {"login": "abextm", "name": "Abex"}}, "url": "https://github.com/runelite/runelite/commit/e769ee0a7b363d1f0f46f9767aae4693991cc80f", "committedDate": "2020-11-26T05:29:35Z", "message": "http-api, http-service, rl-client: bulk upload configuration changes"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3103, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}