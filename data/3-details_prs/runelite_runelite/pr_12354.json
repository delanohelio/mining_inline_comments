{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4NTA2MjMx", "number": 12354, "title": "Add alpha channel to relevant color config options", "bodyText": "Add the ability to configure alpha for various different color config options.\nImplement a new ColorJButton to preview colors with alpha in the config sidebar by overlaying them on top of the classic checkerboard pattern.\nColorUtil: Add new methods: toAlphaHexColor (yields a colors hex string including alpha), colorOfAlpha (change alpha of a given RGB color), and luminance (calculate luminance of a color). Also add unit tests for these methods.\nOverlayUtil: Remove alpha from minimap dots and text overlays.\nTextComponent: Remove alpha from text color.\nCloses #12353", "createdAt": "2020-08-16T22:37:22Z", "url": "https://github.com/runelite/runelite/pull/12354", "merged": true, "mergeCommit": {"oid": "ab4cf1afe913879f9d0c1b031d77798b0b6c865e"}, "closed": true, "closedAt": "2020-12-20T05:01:33Z", "author": {"login": "pilino1234"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdAfg2_gBqjM2NzIwMTIxODc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdn5-RIgBqjQxMzMwMDc3MjM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6c024f1a007041ed8157527760b7fe4bed9cf819", "author": {"user": {"login": "pilino1234", "name": "Martin H"}}, "url": "https://github.com/runelite/runelite/commit/6c024f1a007041ed8157527760b7fe4bed9cf819", "committedDate": "2020-08-16T22:27:37Z", "message": "Add alpha channel to all color config options\n\nAlso some minor cleanup of color code notation to make\nthem more consistent, either using enum constants or\nColor constructor calls with four decimal arguments."}, "afterCommit": {"oid": "f15432b0615ce33f9a71a7b28e306645f01e61af", "author": {"user": {"login": "pilino1234", "name": "Martin H"}}, "url": "https://github.com/runelite/runelite/commit/f15432b0615ce33f9a71a7b28e306645f01e61af", "committedDate": "2020-08-19T17:59:46Z", "message": "Remove color alpha for minimap and player indicators\n\nThese could be abused to obtain an advantage in crowded areas by\nreducing clutter and only highlighting enemies."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1ODg4ODQ2", "url": "https://github.com/runelite/runelite/pull/12354#pullrequestreview-475888846", "createdAt": "2020-08-26T21:58:14Z", "commit": {"oid": "7f9ae4b278ea8d0639438d272f2571dd58c6b0c6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMTo1ODoxNFrOHHfLaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMjowMjoxM1rOHHfRpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYxMjkwNQ==", "bodyText": "Leave the definitions in this file as-is.", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r477612905", "createdAt": "2020-08-26T21:58:14Z", "author": {"login": "Nightfirecat"}, "path": "runelite-client/src/main/java/net/runelite/client/config/ChatColorConfig.java", "diffHunk": "@@ -64,7 +64,7 @@\n \t)\n \tdefault Color opaquePublicChatHighlight()\n \t{\n-\t\treturn Color.decode(\"#000000\");\n+\t\treturn Color.BLACK;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9ae4b278ea8d0639438d272f2571dd58c6b0c6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYxMzI3NA==", "bodyText": "This should at least be in a separate commit", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r477613274", "createdAt": "2020-08-26T21:59:05Z", "author": {"login": "Nightfirecat"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/itemstats/ItemStatConfig.java", "diffHunk": "@@ -130,21 +132,22 @@ default boolean alwaysShowBaseStats()\n \t)\n \tdefault Color colorBetterUncapped()\n \t{\n-\t\treturn new Color(0x33EE33);\n+\t\treturn new Color(51, 238, 51, 255);\n \t}\n \n+\t@Alpha\n \t@ConfigItem(\n \t\tkeyName = \"colorBetterSomecapped\",\n \t\tname = \"Better (Some capped)\",\n-\t\tdescription = \"Color to show when some stat changes are capped, but some ar not\",\n+\t\tdescription = \"Color to show when some stat changes are capped, but some are not\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9ae4b278ea8d0639438d272f2571dd58c6b0c6"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYxNDE3MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\thighlightColor.getBlue(), highlightColor.getAlpha() / 50));\n          \n          \n            \n            \t\t\t\t\thighlightColor.getBlue(), highlightColor.getAlpha() / 5));", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r477614171", "createdAt": "2020-08-26T22:01:18Z", "author": {"login": "Nightfirecat"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderOverlay.java", "diffHunk": "@@ -158,7 +158,7 @@ public Dimension render(Graphics2D graphics)\n \n \t\t\t\tgraphics.draw(objectClickbox);\n \t\t\t\tgraphics.setColor(new Color(highlightColor.getRed(), highlightColor.getGreen(),\n-\t\t\t\t\thighlightColor.getBlue(), 50));\n+\t\t\t\t\thighlightColor.getBlue(), highlightColor.getAlpha() / 50));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9ae4b278ea8d0639438d272f2571dd58c6b0c6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYxNDUwMg==", "bodyText": "This code should be moved to some common public class and referenced in both spots instead of copied.", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r477614502", "createdAt": "2020-08-26T22:02:13Z", "author": {"login": "Nightfirecat"}, "path": "runelite-client/src/main/java/net/runelite/client/ui/components/ColorJButton.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright (c) 2020, Martin H <pilino@posteo.de>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.ui.components;\n+\n+import java.awt.Color;\n+import java.awt.Graphics;\n+import javax.swing.JButton;\n+import lombok.Getter;\n+\n+public class ColorJButton extends JButton\n+{\n+\tprivate static final int CHECKER_SIZE = 10;\n+\tprivate static final int ALPHA_TEXT_CUTOFF = 120;\n+\n+\t@Getter\n+\tprivate Color color;\n+\n+\tpublic ColorJButton(String text)\n+\t{\n+\t\tsuper(text);\n+\n+\t\t// Tell ButtonUI to not paint the background, we do it ourselves.\n+\t\tthis.setContentAreaFilled(false);\n+\t}\n+\n+\tpublic void setColor(Color color)\n+\t{\n+\t\tthis.color = color;\n+\n+\t\t// Calculate perceptive luminance of new color to choose a readable font color\n+\t\t// Based on https://stackoverflow.com/a/1855903\n+\t\tdouble lum = (0.299 * color.getRed() + 0.587 * color.getGreen() + 0.114 * color.getBlue()) / 255;\n+\n+\t\tColor textColor = Color.WHITE;\n+\n+\t\tif (lum > 0.5)\n+\t\t{\n+\t\t\ttextColor = Color.BLACK;\n+\t\t}\n+\t\telse if (color.getAlpha() < ALPHA_TEXT_CUTOFF)\n+\t\t{\n+\t\t\ttextColor = Color.BLACK;\n+\t\t}\n+\n+\t\tthis.setForeground(textColor);\n+\t}\n+\n+\t@Override\n+\tpublic void paint(Graphics g)\n+\t{\n+\t\t// Checkerboard drawing from PreviewPanel.java", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f9ae4b278ea8d0639438d272f2571dd58c6b0c6"}, "originalPosition": 73}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7f9ae4b278ea8d0639438d272f2571dd58c6b0c6", "author": {"user": {"login": "pilino1234", "name": "Martin H"}}, "url": "https://github.com/runelite/runelite/commit/7f9ae4b278ea8d0639438d272f2571dd58c6b0c6", "committedDate": "2020-08-23T16:24:54Z", "message": "Chat colors: Remove alpha option from settings\n\nIn-game chat does not support transparency for colors anyway."}, "afterCommit": {"oid": "c0d8577bcd0e02592d3196a1395618f8b33c3dcf", "author": {"user": {"login": "pilino1234", "name": "Martin H"}}, "url": "https://github.com/runelite/runelite/commit/c0d8577bcd0e02592d3196a1395618f8b33c3dcf", "committedDate": "2020-08-28T09:46:09Z", "message": "Revert default color changes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c0d8577bcd0e02592d3196a1395618f8b33c3dcf", "author": {"user": {"login": "pilino1234", "name": "Martin H"}}, "url": "https://github.com/runelite/runelite/commit/c0d8577bcd0e02592d3196a1395618f8b33c3dcf", "committedDate": "2020-08-28T09:46:09Z", "message": "Revert default color changes"}, "afterCommit": {"oid": "7e48ff285ce204e39360f8371913838227e2173f", "author": {"user": {"login": "pilino1234", "name": "Martin H"}}, "url": "https://github.com/runelite/runelite/commit/7e48ff285ce204e39360f8371913838227e2173f", "committedDate": "2020-08-28T09:49:26Z", "message": "Revert default color changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MjIwODg5", "url": "https://github.com/runelite/runelite/pull/12354#pullrequestreview-478220889", "createdAt": "2020-08-30T17:29:42Z", "commit": {"oid": "7e48ff285ce204e39360f8371913838227e2173f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxNzoyOTo0MlrOHJkX7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxNzoyOTo0MlrOHJkX7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc5NTE4Mg==", "bodyText": "Why is this not just colorPickerBtn = new ColorJButton(existing);?", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r479795182", "createdAt": "2020-08-30T17:29:42Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/config/ConfigPanel.java", "diffHunk": "@@ -410,36 +411,51 @@ public void focusLost(FocusEvent e)\n \t\t\t\tString existing = configManager.getConfiguration(cd.getGroup().value(), cid.getItem().keyName());\n \n \t\t\t\tColor existingColor;\n-\t\t\t\tJButton colorPickerBtn;\n+\t\t\t\tColorJButton colorPickerBtn;\n+\n+\t\t\t\tboolean alphaHidden = cid.getAlpha() == null;\n \n \t\t\t\tif (existing == null)\n \t\t\t\t{\n \t\t\t\t\texistingColor = Color.BLACK;\n-\t\t\t\t\tcolorPickerBtn = new JButton(\"Pick a color\");\n+\t\t\t\t\tcolorPickerBtn = new ColorJButton(\"Pick a color\");\n \t\t\t\t}\n \t\t\t\telse\n \t\t\t\t{\n \t\t\t\t\texistingColor = ColorUtil.fromString(existing);\n-\t\t\t\t\tcolorPickerBtn = new JButton(ColorUtil.toHexColor(existingColor).toUpperCase());\n+\t\t\t\t\tString colorHex = ColorUtil.toHexColor(existingColor).toUpperCase();\n+\t\t\t\t\tif (!alphaHidden)\n+\t\t\t\t\t{\n+\t\t\t\t\t\tcolorHex = ColorUtil.toAlphaHexColor(existingColor).toUpperCase();\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tcolorPickerBtn = new ColorJButton(colorHex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e48ff285ce204e39360f8371913838227e2173f"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MjIxNDI4", "url": "https://github.com/runelite/runelite/pull/12354#pullrequestreview-478221428", "createdAt": "2020-08-30T17:37:28Z", "commit": {"oid": "7e48ff285ce204e39360f8371913838227e2173f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxNzozNzoyOVrOHJkbMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxNzozNzoyOVrOHJkbMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc5NjAxOA==", "bodyText": "Internally all of the config Colors always have alpha=0xff, even when the picker doesn't have alpha enabled, so I think this can just be colorPickerBtn.setText(ColorUtil.toAlphaHexColor(c).toUpperCase());", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r479796018", "createdAt": "2020-08-30T17:37:29Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/config/ConfigPanel.java", "diffHunk": "@@ -410,36 +411,51 @@ public void focusLost(FocusEvent e)\n \t\t\t\tString existing = configManager.getConfiguration(cd.getGroup().value(), cid.getItem().keyName());\n \n \t\t\t\tColor existingColor;\n-\t\t\t\tJButton colorPickerBtn;\n+\t\t\t\tColorJButton colorPickerBtn;\n+\n+\t\t\t\tboolean alphaHidden = cid.getAlpha() == null;\n \n \t\t\t\tif (existing == null)\n \t\t\t\t{\n \t\t\t\t\texistingColor = Color.BLACK;\n-\t\t\t\t\tcolorPickerBtn = new JButton(\"Pick a color\");\n+\t\t\t\t\tcolorPickerBtn = new ColorJButton(\"Pick a color\");\n \t\t\t\t}\n \t\t\t\telse\n \t\t\t\t{\n \t\t\t\t\texistingColor = ColorUtil.fromString(existing);\n-\t\t\t\t\tcolorPickerBtn = new JButton(ColorUtil.toHexColor(existingColor).toUpperCase());\n+\t\t\t\t\tString colorHex = ColorUtil.toHexColor(existingColor).toUpperCase();\n+\t\t\t\t\tif (!alphaHidden)\n+\t\t\t\t\t{\n+\t\t\t\t\t\tcolorHex = ColorUtil.toAlphaHexColor(existingColor).toUpperCase();\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tcolorPickerBtn = new ColorJButton(colorHex);\n \t\t\t\t}\n \n \t\t\t\tcolorPickerBtn.setFocusable(false);\n-\t\t\t\tcolorPickerBtn.setBackground(existingColor);\n+\t\t\t\tcolorPickerBtn.setColor(existingColor);\n \t\t\t\tcolorPickerBtn.addMouseListener(new MouseAdapter()\n \t\t\t\t{\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void mouseClicked(MouseEvent e)\n \t\t\t\t\t{\n \t\t\t\t\t\tRuneliteColorPicker colorPicker = colorPickerManager.create(\n \t\t\t\t\t\t\tSwingUtilities.windowForComponent(ConfigPanel.this),\n-\t\t\t\t\t\t\tcolorPickerBtn.getBackground(),\n+\t\t\t\t\t\t\tcolorPickerBtn.getColor(),\n \t\t\t\t\t\t\tcid.getItem().name(),\n-\t\t\t\t\t\t\tcid.getAlpha() == null);\n+\t\t\t\t\t\t\talphaHidden);\n \t\t\t\t\t\tcolorPicker.setLocation(getLocationOnScreen());\n \t\t\t\t\t\tcolorPicker.setOnColorChange(c ->\n \t\t\t\t\t\t{\n-\t\t\t\t\t\t\tcolorPickerBtn.setBackground(c);\n-\t\t\t\t\t\t\tcolorPickerBtn.setText(ColorUtil.toHexColor(c).toUpperCase());\n+\t\t\t\t\t\t\tcolorPickerBtn.setColor(c);\n+\t\t\t\t\t\t\tif (alphaHidden)\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tcolorPickerBtn.setText(ColorUtil.toHexColor(c).toUpperCase());\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\telse\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tcolorPickerBtn.setText(ColorUtil.toAlphaHexColor(c).toUpperCase());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e48ff285ce204e39360f8371913838227e2173f"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MjIxOTIy", "url": "https://github.com/runelite/runelite/pull/12354#pullrequestreview-478221922", "createdAt": "2020-08-30T17:45:58Z", "commit": {"oid": "7e48ff285ce204e39360f8371913838227e2173f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxNzo0NTo1OFrOHJkeZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxNzo0NTo1OFrOHJkeZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc5NjgzNw==", "bodyText": "This seems like it is in an odd place since it is also used outside of the colorpicker but I'm not sure where a better place would be? Maybe just duplicate it both places?", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r479796837", "createdAt": "2020-08-30T17:45:58Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/ui/components/colorpicker/CheckerboardBackground.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright (c) 2020, Martin H <pilino@posteo.de>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.ui.components.colorpicker;\n+\n+import java.awt.Color;\n+import java.awt.Graphics;\n+\n+public class CheckerboardBackground\n+{\n+\tprivate static final int CHECKER_SIZE = 10;\n+\n+\tpublic static void paintCheckerboard(Graphics g, int width, int height)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e48ff285ce204e39360f8371913838227e2173f"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MjIyMzYx", "url": "https://github.com/runelite/runelite/pull/12354#pullrequestreview-478222361", "createdAt": "2020-08-30T17:53:09Z", "commit": {"oid": "7e48ff285ce204e39360f8371913838227e2173f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxNzo1MzowOVrOHJkhDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxNzo1MzowOVrOHJkhDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc5NzUxOQ==", "bodyText": "I don't think this works because it looks like the Widgets don't support alpha text colors? Does it work for you?", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r479797519", "createdAt": "2020-08-30T17:53:09Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/experiencedrop/XpDropConfig.java", "diffHunk": "@@ -44,6 +45,7 @@ default boolean hideSkillIcons()\n \t\treturn false;\n \t}\n \n+\t@Alpha", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e48ff285ce204e39360f8371913838227e2173f"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MjIyNTAz", "url": "https://github.com/runelite/runelite/pull/12354#pullrequestreview-478222503", "createdAt": "2020-08-30T17:55:32Z", "commit": {"oid": "7e48ff285ce204e39360f8371913838227e2173f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxNzo1NTozMlrOHJkiEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxODowNDowM1rOHJkljg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc5Nzc3Ng==", "bodyText": "This is also applied to widget text.", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r479797776", "createdAt": "2020-08-30T17:55:32Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/friendschat/FriendsChatConfig.java", "diffHunk": "@@ -172,6 +173,7 @@ default boolean showIgnores()\n \t\treturn true;\n \t}\n \n+\t@Alpha", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e48ff285ce204e39360f8371913838227e2173f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc5ODMxNw==", "bodyText": "None of this has any effect due to the overlay hardcoding an alpha value of 100.", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r479798317", "createdAt": "2020-08-30T18:00:27Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/hunter/HunterConfig.java", "diffHunk": "@@ -25,13 +25,15 @@\n package net.runelite.client.plugins.hunter;\n \n import java.awt.Color;\n+import net.runelite.client.config.Alpha;\n import net.runelite.client.config.Config;\n import net.runelite.client.config.ConfigGroup;\n import net.runelite.client.config.ConfigItem;\n \n @ConfigGroup(\"hunterplugin\")\n public interface HunterConfig extends Config\n {\n+\t@Alpha", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e48ff285ce204e39360f8371913838227e2173f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc5ODY3MA==", "bodyText": "Does this work? Even if it does, the menu colors can't be alpha either so it would look weird when configuring ingame.", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r479798670", "createdAt": "2020-08-30T18:04:03Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/inventorytags/InventoryTagsConfig.java", "diffHunk": "@@ -34,6 +35,7 @@\n {\n \tString GROUP = \"inventorytags\";\n \n+\t@Alpha", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e48ff285ce204e39360f8371913838227e2173f"}, "originalPosition": 12}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3c09ce7ba7efd8174d5f5edccfaba7da3c5ee858", "author": {"user": {"login": "pilino1234", "name": "Martin H"}}, "url": "https://github.com/runelite/runelite/commit/3c09ce7ba7efd8174d5f5edccfaba7da3c5ee858", "committedDate": "2020-08-30T21:20:22Z", "message": "Clean up Color config option creation"}, "afterCommit": {"oid": "7d3921c45d7d6b66066302cce48e31af6c4e276a", "author": {"user": {"login": "pilino1234", "name": "Martin H"}}, "url": "https://github.com/runelite/runelite/commit/7d3921c45d7d6b66066302cce48e31af6c4e276a", "committedDate": "2020-10-12T14:44:13Z", "message": "Remove alpha from places it shouldn't have been added to"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2OTYxODcz", "url": "https://github.com/runelite/runelite/pull/12354#pullrequestreview-506961873", "createdAt": "2020-10-12T22:49:43Z", "commit": {"oid": "963d276d30a6f6208f235d71ca1046febea586fe"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMjo0OTo0M1rOHgPmTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMzoxNDo1NlrOHgQE3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3MjA0NA==", "bodyText": "This shouldn't be removed?", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r503572044", "createdAt": "2020-10-12T22:49:43Z", "author": {"login": "Nightfirecat"}, "path": "runelite-client/src/main/java/net/runelite/client/config/RuneLiteConfig.java", "diffHunk": "@@ -374,7 +375,6 @@ default boolean infoBoxTextOutline()\n \t\tposition = 44,\n \t\tsection = overlaySettings\n \t)\n-\t@Alpha", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "963d276d30a6f6208f235d71ca1046febea586fe"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3MjQwOQ==", "bodyText": "?", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r503572409", "createdAt": "2020-10-12T22:50:46Z", "author": {"login": "Nightfirecat"}, "path": "runelite-client/src/main/java/net/runelite/client/config/RuneLiteConfig.java", "diffHunk": "@@ -355,6 +355,7 @@ default int infoBoxSize()\n \t\treturn 35;\n \t}\n \n+\t@Alpha", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "963d276d30a6f6208f235d71ca1046febea586fe"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3NDczNA==", "bodyText": "This should have some test cases added to ensure it works as expected.", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r503574734", "createdAt": "2020-10-12T22:56:59Z", "author": {"login": "Nightfirecat"}, "path": "runelite-client/src/main/java/net/runelite/client/util/ColorUtil.java", "diffHunk": "@@ -85,6 +85,17 @@ public static String toHexColor(final Color color)\n \t\treturn \"#\" + colorToHexCode(color);\n \t}\n \n+\t/**\n+\t * Converts a given color with alpha to its hexadecimal equivalent.\n+\t *\n+\t * @param color Color to get hexadecimal string from.\n+\t * @return      Hexadecimal string representing the given color, in the form \"#aarrggbb\".\n+\t */\n+\tpublic static String toAlphaHexColor(final Color color)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "963d276d30a6f6208f235d71ca1046febea586fe"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3NjAyOA==", "bodyText": "We'd honestly be better off making some kind of ColorUtil function along the lines of Color colorOfAlpha(Color color, int alpha), as this can be used in many other places as well.", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r503576028", "createdAt": "2020-10-12T23:01:06Z", "author": {"login": "Nightfirecat"}, "path": "runelite-client/src/main/java/net/runelite/client/ui/overlay/OverlayUtil.java", "diffHunk": "@@ -92,7 +92,7 @@ public static void renderTextLocation(Graphics2D graphics, Point txtLoc, String\n \t\tgraphics.setColor(Color.BLACK);\n \t\tgraphics.drawString(text, x + 1, y + 1);\n \n-\t\tgraphics.setColor(color);\n+\t\tgraphics.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "963d276d30a6f6208f235d71ca1046febea586fe"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3NzIyNA==", "bodyText": "final Color textColor;\n\nif (lum > 0.5 || color.getAlpha() < ALPHA_TEXT_CUTOFF)\n{\n\ttextColor = Color.BLACK;\n}\nelse\n{\n\ttextColor = Color.WHITE;\n}", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r503577224", "createdAt": "2020-10-12T23:05:27Z", "author": {"login": "Nightfirecat"}, "path": "runelite-client/src/main/java/net/runelite/client/ui/components/ColorJButton.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright (c) 2020, Martin H <pilino@posteo.de>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.ui.components;\n+\n+import java.awt.Color;\n+import java.awt.Graphics;\n+import javax.swing.JButton;\n+import lombok.Getter;\n+import net.runelite.client.ui.components.colorpicker.CheckerboardBackground;\n+\n+public class ColorJButton extends JButton\n+{\n+\tprivate static final int ALPHA_TEXT_CUTOFF = 120;\n+\n+\t@Getter\n+\tprivate Color color;\n+\n+\tpublic ColorJButton(String text)\n+\t{\n+\t\tsuper(text);\n+\n+\t\t// Tell ButtonUI to not paint the background, we do it ourselves.\n+\t\tthis.setContentAreaFilled(false);\n+\t}\n+\n+\tpublic void setColor(Color color)\n+\t{\n+\t\tthis.color = color;\n+\n+\t\t// Calculate perceptive luminance of new color to choose a readable font color\n+\t\t// Based on https://stackoverflow.com/a/1855903\n+\t\tdouble lum = (0.299 * color.getRed() + 0.587 * color.getGreen() + 0.114 * color.getBlue()) / 255;\n+\n+\t\tColor textColor = Color.WHITE;\n+\n+\t\tif (lum > 0.5)\n+\t\t{\n+\t\t\ttextColor = Color.BLACK;\n+\t\t}\n+\t\telse if (color.getAlpha() < ALPHA_TEXT_CUTOFF)\n+\t\t{\n+\t\t\ttextColor = Color.BLACK;\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "963d276d30a6f6208f235d71ca1046febea586fe"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3NzM0NQ==", "bodyText": "A luminance calculation function would also be a good candidate for a ColorUtil function.", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r503577345", "createdAt": "2020-10-12T23:05:53Z", "author": {"login": "Nightfirecat"}, "path": "runelite-client/src/main/java/net/runelite/client/ui/components/ColorJButton.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright (c) 2020, Martin H <pilino@posteo.de>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.ui.components;\n+\n+import java.awt.Color;\n+import java.awt.Graphics;\n+import javax.swing.JButton;\n+import lombok.Getter;\n+import net.runelite.client.ui.components.colorpicker.CheckerboardBackground;\n+\n+public class ColorJButton extends JButton\n+{\n+\tprivate static final int ALPHA_TEXT_CUTOFF = 120;\n+\n+\t@Getter\n+\tprivate Color color;\n+\n+\tpublic ColorJButton(String text)\n+\t{\n+\t\tsuper(text);\n+\n+\t\t// Tell ButtonUI to not paint the background, we do it ourselves.\n+\t\tthis.setContentAreaFilled(false);\n+\t}\n+\n+\tpublic void setColor(Color color)\n+\t{\n+\t\tthis.color = color;\n+\n+\t\t// Calculate perceptive luminance of new color to choose a readable font color\n+\t\t// Based on https://stackoverflow.com/a/1855903\n+\t\tdouble lum = (0.299 * color.getRed() + 0.587 * color.getGreen() + 0.114 * color.getBlue()) / 255;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "963d276d30a6f6208f235d71ca1046febea586fe"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3ODI2Mw==", "bodyText": "It seems to me the color of this class should be provided on creation instead of only allowing it to be set via setter.", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r503578263", "createdAt": "2020-10-12T23:09:08Z", "author": {"login": "Nightfirecat"}, "path": "runelite-client/src/main/java/net/runelite/client/ui/components/ColorJButton.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright (c) 2020, Martin H <pilino@posteo.de>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.ui.components;\n+\n+import java.awt.Color;\n+import java.awt.Graphics;\n+import javax.swing.JButton;\n+import lombok.Getter;\n+import net.runelite.client.ui.components.colorpicker.CheckerboardBackground;\n+\n+public class ColorJButton extends JButton\n+{\n+\tprivate static final int ALPHA_TEXT_CUTOFF = 120;\n+\n+\t@Getter\n+\tprivate Color color;\n+\n+\tpublic ColorJButton(String text)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "963d276d30a6f6208f235d71ca1046febea586fe"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3ODcxNQ==", "bodyText": "This can be wrapped in a check for the color's alpha value (if (color.getAlpha() != 255)) since it is more expensive to do a double-draw on the background.", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r503578715", "createdAt": "2020-10-12T23:10:34Z", "author": {"login": "Nightfirecat"}, "path": "runelite-client/src/main/java/net/runelite/client/ui/components/ColorJButton.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright (c) 2020, Martin H <pilino@posteo.de>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.ui.components;\n+\n+import java.awt.Color;\n+import java.awt.Graphics;\n+import javax.swing.JButton;\n+import lombok.Getter;\n+import net.runelite.client.ui.components.colorpicker.CheckerboardBackground;\n+\n+public class ColorJButton extends JButton\n+{\n+\tprivate static final int ALPHA_TEXT_CUTOFF = 120;\n+\n+\t@Getter\n+\tprivate Color color;\n+\n+\tpublic ColorJButton(String text)\n+\t{\n+\t\tsuper(text);\n+\n+\t\t// Tell ButtonUI to not paint the background, we do it ourselves.\n+\t\tthis.setContentAreaFilled(false);\n+\t}\n+\n+\tpublic void setColor(Color color)\n+\t{\n+\t\tthis.color = color;\n+\n+\t\t// Calculate perceptive luminance of new color to choose a readable font color\n+\t\t// Based on https://stackoverflow.com/a/1855903\n+\t\tdouble lum = (0.299 * color.getRed() + 0.587 * color.getGreen() + 0.114 * color.getBlue()) / 255;\n+\n+\t\tColor textColor = Color.WHITE;\n+\n+\t\tif (lum > 0.5)\n+\t\t{\n+\t\t\ttextColor = Color.BLACK;\n+\t\t}\n+\t\telse if (color.getAlpha() < ALPHA_TEXT_CUTOFF)\n+\t\t{\n+\t\t\ttextColor = Color.BLACK;\n+\t\t}\n+\n+\t\tthis.setForeground(textColor);\n+\t}\n+\n+\t@Override\n+\tpublic void paint(Graphics g)\n+\t{\n+\t\tCheckerboardBackground.paintCheckerboard(g, getWidth(), getHeight());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "963d276d30a6f6208f235d71ca1046febea586fe"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3OTg2OQ==", "bodyText": "I'm not sure we want to draw transparent text on the tooltip since that could look very odd.", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r503579869", "createdAt": "2020-10-12T23:14:56Z", "author": {"login": "Nightfirecat"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/itemstats/ItemStatConfig.java", "diffHunk": "@@ -122,6 +123,7 @@ default boolean alwaysShowBaseStats()\n \t\treturn false;\n \t}\n \n+\t@Alpha", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "963d276d30a6f6208f235d71ca1046febea586fe"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1NjY3OTIz", "url": "https://github.com/runelite/runelite/pull/12354#pullrequestreview-525667923", "createdAt": "2020-11-07T17:26:34Z", "commit": {"oid": "26c0beb3f702c3777b25ca50180b05084cb159a6"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QxNzoyNjozNFrOHvJY5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QxODoyMTozNlrOHvJsVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE5ODk1MA==", "bodyText": "(alphaHidden ? ColorUtil.toHexColor(existing) : ColorUtil.toAlphaHexColor(existing)).toUpperCase()", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r519198950", "createdAt": "2020-11-07T17:26:34Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/config/ConfigPanel.java", "diffHunk": "@@ -407,39 +408,50 @@ public void focusLost(FocusEvent e)\n \n \t\t\tif (cid.getType() == Color.class)\n \t\t\t{\n-\t\t\t\tString existing = configManager.getConfiguration(cd.getGroup().value(), cid.getItem().keyName());\n+\t\t\t\tColor existing = configManager.getConfiguration(cd.getGroup().value(), cid.getItem().keyName(), Color.class);\n \n-\t\t\t\tColor existingColor;\n-\t\t\t\tJButton colorPickerBtn;\n+\t\t\t\tColorJButton colorPickerBtn;\n+\n+\t\t\t\tboolean alphaHidden = cid.getAlpha() == null;\n \n \t\t\t\tif (existing == null)\n \t\t\t\t{\n-\t\t\t\t\texistingColor = Color.BLACK;\n-\t\t\t\t\tcolorPickerBtn = new JButton(\"Pick a color\");\n+\t\t\t\t\tcolorPickerBtn = new ColorJButton(\"Pick a color\", Color.BLACK);\n \t\t\t\t}\n \t\t\t\telse\n \t\t\t\t{\n-\t\t\t\t\texistingColor = ColorUtil.fromString(existing);\n-\t\t\t\t\tcolorPickerBtn = new JButton(ColorUtil.toHexColor(existingColor).toUpperCase());\n+\t\t\t\t\tString colorHex = ColorUtil.toHexColor(existing).toUpperCase();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26c0beb3f702c3777b25ca50180b05084cb159a6"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE5OTA0OA==", "bodyText": "This can also be an inline if", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r519199048", "createdAt": "2020-11-07T17:27:45Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/config/ConfigPanel.java", "diffHunk": "@@ -407,39 +408,50 @@ public void focusLost(FocusEvent e)\n \n \t\t\tif (cid.getType() == Color.class)\n \t\t\t{\n-\t\t\t\tString existing = configManager.getConfiguration(cd.getGroup().value(), cid.getItem().keyName());\n+\t\t\t\tColor existing = configManager.getConfiguration(cd.getGroup().value(), cid.getItem().keyName(), Color.class);\n \n-\t\t\t\tColor existingColor;\n-\t\t\t\tJButton colorPickerBtn;\n+\t\t\t\tColorJButton colorPickerBtn;\n+\n+\t\t\t\tboolean alphaHidden = cid.getAlpha() == null;\n \n \t\t\t\tif (existing == null)\n \t\t\t\t{\n-\t\t\t\t\texistingColor = Color.BLACK;\n-\t\t\t\t\tcolorPickerBtn = new JButton(\"Pick a color\");\n+\t\t\t\t\tcolorPickerBtn = new ColorJButton(\"Pick a color\", Color.BLACK);\n \t\t\t\t}\n \t\t\t\telse\n \t\t\t\t{\n-\t\t\t\t\texistingColor = ColorUtil.fromString(existing);\n-\t\t\t\t\tcolorPickerBtn = new JButton(ColorUtil.toHexColor(existingColor).toUpperCase());\n+\t\t\t\t\tString colorHex = ColorUtil.toHexColor(existing).toUpperCase();\n+\t\t\t\t\tif (!alphaHidden)\n+\t\t\t\t\t{\n+\t\t\t\t\t\tcolorHex = ColorUtil.toAlphaHexColor(existing).toUpperCase();\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tcolorPickerBtn = new ColorJButton(colorHex, existing);\n \t\t\t\t}\n \n \t\t\t\tcolorPickerBtn.setFocusable(false);\n-\t\t\t\tcolorPickerBtn.setBackground(existingColor);\n \t\t\t\tcolorPickerBtn.addMouseListener(new MouseAdapter()\n \t\t\t\t{\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void mouseClicked(MouseEvent e)\n \t\t\t\t\t{\n \t\t\t\t\t\tRuneliteColorPicker colorPicker = colorPickerManager.create(\n \t\t\t\t\t\t\tSwingUtilities.windowForComponent(ConfigPanel.this),\n-\t\t\t\t\t\t\tcolorPickerBtn.getBackground(),\n+\t\t\t\t\t\t\tcolorPickerBtn.getColor(),\n \t\t\t\t\t\t\tcid.getItem().name(),\n-\t\t\t\t\t\t\tcid.getAlpha() == null);\n+\t\t\t\t\t\t\talphaHidden);\n \t\t\t\t\t\tcolorPicker.setLocation(getLocationOnScreen());\n \t\t\t\t\t\tcolorPicker.setOnColorChange(c ->\n \t\t\t\t\t\t{\n-\t\t\t\t\t\t\tcolorPickerBtn.setBackground(c);\n-\t\t\t\t\t\t\tcolorPickerBtn.setText(ColorUtil.toHexColor(c).toUpperCase());\n+\t\t\t\t\t\t\tcolorPickerBtn.setColor(c);\n+\t\t\t\t\t\t\tif (alphaHidden)\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tcolorPickerBtn.setText(ColorUtil.toHexColor(c).toUpperCase());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26c0beb3f702c3777b25ca50180b05084cb159a6"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIwMTQ3NA==", "bodyText": "I've noticed you seem to be intermixing this and colorOfAlpha?", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r519201474", "createdAt": "2020-11-07T17:54:51Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/blastmine/BlastMineRockOverlay.java", "diffHunk": "@@ -202,7 +202,7 @@ private void drawAreaWarning(Graphics2D graphics, BlastMineRock rock, Color colo\n \n \t\t\t\t\tif (poly != null)\n \t\t\t\t\t{\n-\t\t\t\t\t\tgraphics.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), 100));\n+\t\t\t\t\t\tgraphics.setColor(new Color(color.getRed(), color.getGreen(), color.getBlue(), (int) (color.getAlpha() / 2.5)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26c0beb3f702c3777b25ca50180b05084cb159a6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIwMjkzNA==", "bodyText": "This can probably just be in the colorjbutton", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r519202934", "createdAt": "2020-11-07T18:10:56Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/util/ColorUtil.java", "diffHunk": "@@ -131,6 +142,31 @@ public static String colorToAlphaHexCode(final Color color)\n \t\treturn String.format(\"%08x\", color.getRGB());\n \t}\n \n+\t/**\n+\t * Gets the same RGB color with the specified alpha value.\n+\t *\n+\t * @param color The RGB color to use.\n+\t * @param alpha The alpha value to use (0-255).\n+\t * @return      A new Color with the given RGB and alpha.\n+\t */\n+\tpublic static Color colorOfAlpha(final Color color, int alpha)\n+\t{\n+\t\talpha = constrainValue(alpha);\n+\t\treturn new Color((color.getRGB() & 0x00ffffff ) | (alpha << 24), true);\n+\t}\n+\n+\t/**\n+\t * Calculate perceptive luminance of a color.\n+\t * Based on https://stackoverflow.com/a/1855903\n+\t *\n+\t * @param color The to calculate luminance of.\n+\t * @return      Perceptive luminance of the color.\n+\t */\n+\tpublic static double luminance(Color color)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26c0beb3f702c3777b25ca50180b05084cb159a6"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIwMzA2Mg==", "bodyText": "I'd probably rather have it duplicated since it is so small than have the backwards dep of ui components -> colorpicker", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r519203062", "createdAt": "2020-11-07T18:12:29Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/ui/components/colorpicker/CheckerboardBackground.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright (c) 2020, Martin H <pilino@posteo.de>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.ui.components.colorpicker;\n+\n+import java.awt.Color;\n+import java.awt.Graphics;\n+\n+public class CheckerboardBackground\n+{\n+\tprivate static final int CHECKER_SIZE = 10;\n+\n+\tpublic static void paintCheckerboard(Graphics g, int width, int height)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc5NjgzNw=="}, "originalCommit": {"oid": "7e48ff285ce204e39360f8371913838227e2173f"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIwMzQwNg==", "bodyText": "+if (color.getAlpha() == alpha) return color;", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r519203406", "createdAt": "2020-11-07T18:15:50Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/util/ColorUtil.java", "diffHunk": "@@ -131,6 +142,31 @@ public static String colorToAlphaHexCode(final Color color)\n \t\treturn String.format(\"%08x\", color.getRGB());\n \t}\n \n+\t/**\n+\t * Gets the same RGB color with the specified alpha value.\n+\t *\n+\t * @param color The RGB color to use.\n+\t * @param alpha The alpha value to use (0-255).\n+\t * @return      A new Color with the given RGB and alpha.\n+\t */\n+\tpublic static Color colorOfAlpha(final Color color, int alpha)\n+\t{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26c0beb3f702c3777b25ca50180b05084cb159a6"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIwMzkyNg==", "bodyText": "use ImmutableMap.of", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r519203926", "createdAt": "2020-11-07T18:21:36Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/test/java/net/runelite/client/util/ColorUtilTest.java", "diffHunk": "@@ -44,6 +44,12 @@\n \t\tput(Color.WHITE, \"ffffff\");\n \t}};\n \n+\tprivate static final Map<Color, String> COLOR_ALPHA_HEXSTRING_MAP = new HashMap<Color, String>()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26c0beb3f702c3777b25ca50180b05084cb159a6"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1ODMzODAy", "url": "https://github.com/runelite/runelite/pull/12354#pullrequestreview-525833802", "createdAt": "2020-11-08T18:36:26Z", "commit": {"oid": "1d825c3dcaee3c8d44297590d3b16cabded11ede"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxODozNjoyNlrOHvZZSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxODo0MjowN1rOHvZbkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ2MTE5NQ==", "bodyText": "We've strayed away from 1-line if statements in the rest of the client, so this should be expanded to its full block form.\nif (color.getAlpha() == alpha)\n{\n\treturn alpha;\n}", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r519461195", "createdAt": "2020-11-08T18:36:26Z", "author": {"login": "Nightfirecat"}, "path": "runelite-client/src/main/java/net/runelite/client/util/ColorUtil.java", "diffHunk": "@@ -147,10 +147,11 @@ public static String colorToAlphaHexCode(final Color color)\n \t *\n \t * @param color The RGB color to use.\n \t * @param alpha The alpha value to use (0-255).\n-\t * @return      A new Color with the given RGB and alpha.\n+\t * @return      A Color with the given RGB and alpha.\n \t */\n \tpublic static Color colorOfAlpha(final Color color, int alpha)\n \t{\n+\t\tif (color.getAlpha() == alpha) return color;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d825c3dcaee3c8d44297590d3b16cabded11ede"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ2MTc3Ng==", "bodyText": "That is not what happened here. You've added @Alpha to infoBoxTextOutline() (which isn't even a Color config), and removed it from overlayBackgroundColor().", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r519461776", "createdAt": "2020-11-08T18:42:07Z", "author": {"login": "Nightfirecat"}, "path": "runelite-client/src/main/java/net/runelite/client/config/RuneLiteConfig.java", "diffHunk": "@@ -355,6 +355,7 @@ default int infoBoxSize()\n \t\treturn 35;\n \t}\n \n+\t@Alpha", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3MjQwOQ=="}, "originalCommit": {"oid": "963d276d30a6f6208f235d71ca1046febea586fe"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1ODQxNzQ2", "url": "https://github.com/runelite/runelite/pull/12354#pullrequestreview-525841746", "createdAt": "2020-11-08T20:23:51Z", "commit": {"oid": "53bf9c1d72181b647c1e1acbe08dc7b21d508995"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQyMDoyMzo1MlrOHvaFyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQyMDoyNTozOVrOHvaGmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3MjU4Ng==", "bodyText": "newline above", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r519472586", "createdAt": "2020-11-08T20:23:52Z", "author": {"login": "abextm"}, "path": "runelite-client/src/main/java/net/runelite/client/util/ColorUtil.java", "diffHunk": "@@ -131,6 +142,23 @@ public static String colorToAlphaHexCode(final Color color)\n \t\treturn String.format(\"%08x\", color.getRGB());\n \t}\n \n+\t/**\n+\t * Gets the same RGB color with the specified alpha value.\n+\t *\n+\t * @param color The RGB color to use.\n+\t * @param alpha The alpha value to use (0-255).\n+\t * @return      A Color with the given RGB and alpha.\n+\t */\n+\tpublic static Color colorOfAlpha(final Color color, int alpha)\n+\t{\n+\t\tif (color.getAlpha() == alpha)\n+\t\t{\n+\t\t\treturn color;\n+\t\t}\n+\t\talpha = constrainValue(alpha);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53bf9c1d72181b647c1e1acbe08dc7b21d508995"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3MjcxMQ==", "bodyText": "This should be named withAlpha. The color of an alpha value will always be gray.", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r519472711", "createdAt": "2020-11-08T20:24:56Z", "author": {"login": "abextm"}, "path": "runelite-client/src/main/java/net/runelite/client/util/ColorUtil.java", "diffHunk": "@@ -131,6 +142,23 @@ public static String colorToAlphaHexCode(final Color color)\n \t\treturn String.format(\"%08x\", color.getRGB());\n \t}\n \n+\t/**\n+\t * Gets the same RGB color with the specified alpha value.\n+\t *\n+\t * @param color The RGB color to use.\n+\t * @param alpha The alpha value to use (0-255).\n+\t * @return      A Color with the given RGB and alpha.\n+\t */\n+\tpublic static Color colorOfAlpha(final Color color, int alpha)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53bf9c1d72181b647c1e1acbe08dc7b21d508995"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3Mjc5NQ==", "bodyText": "this method name is easily confused with colorToAlphaHexCode and probably should just not exist at all.", "url": "https://github.com/runelite/runelite/pull/12354#discussion_r519472795", "createdAt": "2020-11-08T20:25:39Z", "author": {"login": "abextm"}, "path": "runelite-client/src/main/java/net/runelite/client/util/ColorUtil.java", "diffHunk": "@@ -85,6 +85,17 @@ public static String toHexColor(final Color color)\n \t\treturn \"#\" + colorToHexCode(color);\n \t}\n \n+\t/**\n+\t * Converts a given color with alpha to its hexadecimal equivalent.\n+\t *\n+\t * @param color Color to get hexadecimal string from.\n+\t * @return      Hexadecimal string representing the given color, in the form \"#aarrggbb\".\n+\t */\n+\tpublic static String toAlphaHexColor(final Color color)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53bf9c1d72181b647c1e1acbe08dc7b21d508995"}, "originalPosition": 10}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "53bf9c1d72181b647c1e1acbe08dc7b21d508995", "author": {"user": {"login": "pilino1234", "name": "Martin H"}}, "url": "https://github.com/runelite/runelite/commit/53bf9c1d72181b647c1e1acbe08dc7b21d508995", "committedDate": "2020-11-08T20:10:35Z", "message": "ColorUtil: Add braces to if-statement"}, "afterCommit": {"oid": "4d1a77c3f102ca9bca5fd8d2d230cebeb84b7243", "author": {"user": {"login": "pilino1234", "name": "Martin H"}}, "url": "https://github.com/runelite/runelite/commit/4d1a77c3f102ca9bca5fd8d2d230cebeb84b7243", "committedDate": "2020-11-08T21:01:19Z", "message": "ColorUtil: Nuke toAlphaHexColor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1ODQ5MTk5", "url": "https://github.com/runelite/runelite/pull/12354#pullrequestreview-525849199", "createdAt": "2020-11-08T22:00:10Z", "commit": {"oid": "4d1a77c3f102ca9bca5fd8d2d230cebeb84b7243"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8276ceffa2b585ba0ac51627621db2f99e060a5b", "author": {"user": {"login": "pilino1234", "name": "Martin H"}}, "url": "https://github.com/runelite/runelite/commit/8276ceffa2b585ba0ac51627621db2f99e060a5b", "committedDate": "2020-12-20T04:51:17Z", "message": "Add alpha channel to color config options where applicable"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4d1a77c3f102ca9bca5fd8d2d230cebeb84b7243", "author": {"user": {"login": "pilino1234", "name": "Martin H"}}, "url": "https://github.com/runelite/runelite/commit/4d1a77c3f102ca9bca5fd8d2d230cebeb84b7243", "committedDate": "2020-11-08T21:01:19Z", "message": "ColorUtil: Nuke toAlphaHexColor"}, "afterCommit": {"oid": "8276ceffa2b585ba0ac51627621db2f99e060a5b", "author": {"user": {"login": "pilino1234", "name": "Martin H"}}, "url": "https://github.com/runelite/runelite/commit/8276ceffa2b585ba0ac51627621db2f99e060a5b", "committedDate": "2020-12-20T04:51:17Z", "message": "Add alpha channel to color config options where applicable"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3321, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}