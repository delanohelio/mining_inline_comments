{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1MzY5NTg0", "number": 11304, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTozNzowMVrOD1cUfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxODoxMDo1M1rOD4rm1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzY1MTE5OnYy", "diffSide": "RIGHT", "path": "runelite-client/src/main/java/net/runelite/client/plugins/grounditems/GroundItemsPlugin.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTozNzowMVrOGK426g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMTowMzo0NVrOGLpK0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA3MDUwNg==", "bodyText": "Why is this here? The overlay doesn't have that:\n\t\tfor (GroundItem item : groundItemList)\n\t\t{\n\t\t\tfinal LocalPoint groundPoint = LocalPoint.fromWorld(client, item.getLocation());\n\n\t\t\tif (groundPoint == null || localLocation.distanceTo(groundPoint) > MAX_DISTANCE\n\t\t\t\t|| (onlyShowLoot && !item.isMine()))\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tfinal Color highlighted = plugin.getHighlighted(new NamedQuantity(item), item.getGePrice(), item.getHaPrice());", "url": "https://github.com/runelite/runelite/pull/11304#discussion_r414070506", "createdAt": "2020-04-23T19:37:01Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/grounditems/GroundItemsPlugin.java", "diffHunk": "@@ -495,31 +495,18 @@ public void onMenuEntryAdded(MenuEntryAdded event)\n \t\t\tMenuEntry[] menuEntries = client.getMenuEntries();\n \t\t\tMenuEntry lastEntry = menuEntries[menuEntries.length - 1];\n \n-\t\t\tint quantity = 1;\n-\t\t\tNode current = itemLayer.getBottom();\n-\n-\t\t\twhile (current instanceof TileItem)\n-\t\t\t{\n-\t\t\t\tTileItem item = (TileItem) current;\n-\t\t\t\tif (item.getId() == itemId)\n-\t\t\t\t{\n-\t\t\t\t\tquantity = item.getQuantity();\n-\t\t\t\t}\n-\t\t\t\tcurrent = current.getNext();\n-\t\t\t}\n+\t\t\tGroundItem.GroundItemKey groundItemKey = new GroundItem.GroundItemKey(itemId, tile.getWorldLocation());\n+\t\t\tGroundItem groundItem = collectedGroundItems.get(groundItemKey);\n+\t\t\tint quantity = groundItem.getQuantity();\n \n-\t\t\tfinal ItemComposition itemComposition = itemManager.getItemComposition(itemId);\n-\t\t\tfinal int realItemId = itemComposition.getNote() != -1 ? itemComposition.getLinkedNoteId() : itemComposition.getId();\n-\t\t\tfinal int itemPrice = itemManager.getItemPrice(realItemId);\n-\t\t\tfinal int price = itemPrice <= 0 ? itemComposition.getPrice() : itemPrice;\n-\t\t\tfinal int haPrice = Math.round(itemComposition.getPrice() * Constants.HIGH_ALCHEMY_MULTIPLIER) * quantity;\n-\t\t\tfinal int gePrice = quantity * price;\n-\t\t\tfinal Color hidden = getHidden(new NamedQuantity(itemComposition.getName(), quantity), gePrice, haPrice, itemComposition.isTradeable());\n-\t\t\tfinal Color highlighted = getHighlighted(new NamedQuantity(itemComposition.getName(), quantity), gePrice, haPrice);\n+\t\t\tfinal int itemPrice = groundItem.getGePrice();\n+\t\t\tfinal int haPrice = groundItem.getHaPrice();\n+\t\t\tfinal int gePrice = itemPrice <= 0 ? haPrice : itemPrice;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc1296bb4d4903b373802ddeb71a0343aa5a6f21"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM3NDIwNg==", "bodyText": "I assume you mean the ternary operator that uses the HA price when GE is 0? If not please clarify what you mean by \"this\".\nI tried to preserve the existing logic as best as I could. It's possible that this can be removed, I'll test it and report back.\nPlease compare with the version from branch master:\n\n  \n    \n      runelite/runelite-client/src/main/java/net/runelite/client/plugins/grounditems/GroundItemsPlugin.java\n    \n    \n         Line 514\n      in\n      1c9c71e\n    \n    \n    \n    \n\n        \n          \n           final int price = itemPrice <= 0 ? itemComposition.getPrice() : itemPrice;", "url": "https://github.com/runelite/runelite/pull/11304#discussion_r414374206", "createdAt": "2020-04-24T07:57:49Z", "author": {"login": "rnoennig"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/grounditems/GroundItemsPlugin.java", "diffHunk": "@@ -495,31 +495,18 @@ public void onMenuEntryAdded(MenuEntryAdded event)\n \t\t\tMenuEntry[] menuEntries = client.getMenuEntries();\n \t\t\tMenuEntry lastEntry = menuEntries[menuEntries.length - 1];\n \n-\t\t\tint quantity = 1;\n-\t\t\tNode current = itemLayer.getBottom();\n-\n-\t\t\twhile (current instanceof TileItem)\n-\t\t\t{\n-\t\t\t\tTileItem item = (TileItem) current;\n-\t\t\t\tif (item.getId() == itemId)\n-\t\t\t\t{\n-\t\t\t\t\tquantity = item.getQuantity();\n-\t\t\t\t}\n-\t\t\t\tcurrent = current.getNext();\n-\t\t\t}\n+\t\t\tGroundItem.GroundItemKey groundItemKey = new GroundItem.GroundItemKey(itemId, tile.getWorldLocation());\n+\t\t\tGroundItem groundItem = collectedGroundItems.get(groundItemKey);\n+\t\t\tint quantity = groundItem.getQuantity();\n \n-\t\t\tfinal ItemComposition itemComposition = itemManager.getItemComposition(itemId);\n-\t\t\tfinal int realItemId = itemComposition.getNote() != -1 ? itemComposition.getLinkedNoteId() : itemComposition.getId();\n-\t\t\tfinal int itemPrice = itemManager.getItemPrice(realItemId);\n-\t\t\tfinal int price = itemPrice <= 0 ? itemComposition.getPrice() : itemPrice;\n-\t\t\tfinal int haPrice = Math.round(itemComposition.getPrice() * Constants.HIGH_ALCHEMY_MULTIPLIER) * quantity;\n-\t\t\tfinal int gePrice = quantity * price;\n-\t\t\tfinal Color hidden = getHidden(new NamedQuantity(itemComposition.getName(), quantity), gePrice, haPrice, itemComposition.isTradeable());\n-\t\t\tfinal Color highlighted = getHighlighted(new NamedQuantity(itemComposition.getName(), quantity), gePrice, haPrice);\n+\t\t\tfinal int itemPrice = groundItem.getGePrice();\n+\t\t\tfinal int haPrice = groundItem.getHaPrice();\n+\t\t\tfinal int gePrice = itemPrice <= 0 ? haPrice : itemPrice;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA3MDUwNg=="}, "originalCommit": {"oid": "dc1296bb4d4903b373802ddeb71a0343aa5a6f21"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg2MjAzNA==", "bodyText": "This price defaulting is indeed not necessary. I removed it.", "url": "https://github.com/runelite/runelite/pull/11304#discussion_r414862034", "createdAt": "2020-04-24T21:03:45Z", "author": {"login": "rnoennig"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/grounditems/GroundItemsPlugin.java", "diffHunk": "@@ -495,31 +495,18 @@ public void onMenuEntryAdded(MenuEntryAdded event)\n \t\t\tMenuEntry[] menuEntries = client.getMenuEntries();\n \t\t\tMenuEntry lastEntry = menuEntries[menuEntries.length - 1];\n \n-\t\t\tint quantity = 1;\n-\t\t\tNode current = itemLayer.getBottom();\n-\n-\t\t\twhile (current instanceof TileItem)\n-\t\t\t{\n-\t\t\t\tTileItem item = (TileItem) current;\n-\t\t\t\tif (item.getId() == itemId)\n-\t\t\t\t{\n-\t\t\t\t\tquantity = item.getQuantity();\n-\t\t\t\t}\n-\t\t\t\tcurrent = current.getNext();\n-\t\t\t}\n+\t\t\tGroundItem.GroundItemKey groundItemKey = new GroundItem.GroundItemKey(itemId, tile.getWorldLocation());\n+\t\t\tGroundItem groundItem = collectedGroundItems.get(groundItemKey);\n+\t\t\tint quantity = groundItem.getQuantity();\n \n-\t\t\tfinal ItemComposition itemComposition = itemManager.getItemComposition(itemId);\n-\t\t\tfinal int realItemId = itemComposition.getNote() != -1 ? itemComposition.getLinkedNoteId() : itemComposition.getId();\n-\t\t\tfinal int itemPrice = itemManager.getItemPrice(realItemId);\n-\t\t\tfinal int price = itemPrice <= 0 ? itemComposition.getPrice() : itemPrice;\n-\t\t\tfinal int haPrice = Math.round(itemComposition.getPrice() * Constants.HIGH_ALCHEMY_MULTIPLIER) * quantity;\n-\t\t\tfinal int gePrice = quantity * price;\n-\t\t\tfinal Color hidden = getHidden(new NamedQuantity(itemComposition.getName(), quantity), gePrice, haPrice, itemComposition.isTradeable());\n-\t\t\tfinal Color highlighted = getHighlighted(new NamedQuantity(itemComposition.getName(), quantity), gePrice, haPrice);\n+\t\t\tfinal int itemPrice = groundItem.getGePrice();\n+\t\t\tfinal int haPrice = groundItem.getHaPrice();\n+\t\t\tfinal int gePrice = itemPrice <= 0 ? haPrice : itemPrice;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA3MDUwNg=="}, "originalCommit": {"oid": "dc1296bb4d4903b373802ddeb71a0343aa5a6f21"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzY2MTQyOnYy", "diffSide": "LEFT", "path": "runelite-client/src/main/java/net/runelite/client/plugins/grounditems/GroundItemsPlugin.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTozOTozMlrOGK488A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNjoxNjozMFrOGMGqFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA3MjA0OA==", "bodyText": "Why are you deleting this feature? It looks unrelated.", "url": "https://github.com/runelite/runelite/pull/11304#discussion_r414072048", "createdAt": "2020-04-23T19:39:32Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/grounditems/GroundItemsPlugin.java", "diffHunk": "@@ -495,31 +495,18 @@ public void onMenuEntryAdded(MenuEntryAdded event)\n \t\t\tMenuEntry[] menuEntries = client.getMenuEntries();\n \t\t\tMenuEntry lastEntry = menuEntries[menuEntries.length - 1];\n \n-\t\t\tint quantity = 1;\n-\t\t\tNode current = itemLayer.getBottom();\n-\n-\t\t\twhile (current instanceof TileItem)\n-\t\t\t{\n-\t\t\t\tTileItem item = (TileItem) current;\n-\t\t\t\tif (item.getId() == itemId)\n-\t\t\t\t{\n-\t\t\t\t\tquantity = item.getQuantity();\n-\t\t\t\t}\n-\t\t\t\tcurrent = current.getNext();\n-\t\t\t}\n+\t\t\tGroundItem.GroundItemKey groundItemKey = new GroundItem.GroundItemKey(itemId, tile.getWorldLocation());\n+\t\t\tGroundItem groundItem = collectedGroundItems.get(groundItemKey);\n+\t\t\tint quantity = groundItem.getQuantity();\n \n-\t\t\tfinal ItemComposition itemComposition = itemManager.getItemComposition(itemId);\n-\t\t\tfinal int realItemId = itemComposition.getNote() != -1 ? itemComposition.getLinkedNoteId() : itemComposition.getId();\n-\t\t\tfinal int itemPrice = itemManager.getItemPrice(realItemId);\n-\t\t\tfinal int price = itemPrice <= 0 ? itemComposition.getPrice() : itemPrice;\n-\t\t\tfinal int haPrice = Math.round(itemComposition.getPrice() * Constants.HIGH_ALCHEMY_MULTIPLIER) * quantity;\n-\t\t\tfinal int gePrice = quantity * price;\n-\t\t\tfinal Color hidden = getHidden(new NamedQuantity(itemComposition.getName(), quantity), gePrice, haPrice, itemComposition.isTradeable());\n-\t\t\tfinal Color highlighted = getHighlighted(new NamedQuantity(itemComposition.getName(), quantity), gePrice, haPrice);\n+\t\t\tfinal int itemPrice = groundItem.getGePrice();\n+\t\t\tfinal int haPrice = groundItem.getHaPrice();\n+\t\t\tfinal int gePrice = itemPrice <= 0 ? haPrice : itemPrice;\n+\t\t\tfinal Color hidden = getHidden(new NamedQuantity(groundItem.getName(), quantity), gePrice, haPrice, groundItem.isTradeable());\n+\t\t\tfinal Color highlighted = getHighlighted(new NamedQuantity(groundItem.getName(), quantity), gePrice, haPrice);\n \t\t\tfinal Color color = getItemColor(highlighted, hidden);\n-\t\t\tfinal boolean canBeRecolored = highlighted != null || (hidden != null && config.recolorMenuHiddenItems());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc1296bb4d4903b373802ddeb71a0343aa5a6f21"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM2NTk4OA==", "bodyText": "Thanks for looking into this. This condition prevents that the computed color is actually applied if the value of the item (stack) doesn't match any of the configured value thresholds and thus the default color should be applied.\nCan you clarify which feature is actually removed by this edit? Thanks.", "url": "https://github.com/runelite/runelite/pull/11304#discussion_r414365988", "createdAt": "2020-04-24T07:44:09Z", "author": {"login": "rnoennig"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/grounditems/GroundItemsPlugin.java", "diffHunk": "@@ -495,31 +495,18 @@ public void onMenuEntryAdded(MenuEntryAdded event)\n \t\t\tMenuEntry[] menuEntries = client.getMenuEntries();\n \t\t\tMenuEntry lastEntry = menuEntries[menuEntries.length - 1];\n \n-\t\t\tint quantity = 1;\n-\t\t\tNode current = itemLayer.getBottom();\n-\n-\t\t\twhile (current instanceof TileItem)\n-\t\t\t{\n-\t\t\t\tTileItem item = (TileItem) current;\n-\t\t\t\tif (item.getId() == itemId)\n-\t\t\t\t{\n-\t\t\t\t\tquantity = item.getQuantity();\n-\t\t\t\t}\n-\t\t\t\tcurrent = current.getNext();\n-\t\t\t}\n+\t\t\tGroundItem.GroundItemKey groundItemKey = new GroundItem.GroundItemKey(itemId, tile.getWorldLocation());\n+\t\t\tGroundItem groundItem = collectedGroundItems.get(groundItemKey);\n+\t\t\tint quantity = groundItem.getQuantity();\n \n-\t\t\tfinal ItemComposition itemComposition = itemManager.getItemComposition(itemId);\n-\t\t\tfinal int realItemId = itemComposition.getNote() != -1 ? itemComposition.getLinkedNoteId() : itemComposition.getId();\n-\t\t\tfinal int itemPrice = itemManager.getItemPrice(realItemId);\n-\t\t\tfinal int price = itemPrice <= 0 ? itemComposition.getPrice() : itemPrice;\n-\t\t\tfinal int haPrice = Math.round(itemComposition.getPrice() * Constants.HIGH_ALCHEMY_MULTIPLIER) * quantity;\n-\t\t\tfinal int gePrice = quantity * price;\n-\t\t\tfinal Color hidden = getHidden(new NamedQuantity(itemComposition.getName(), quantity), gePrice, haPrice, itemComposition.isTradeable());\n-\t\t\tfinal Color highlighted = getHighlighted(new NamedQuantity(itemComposition.getName(), quantity), gePrice, haPrice);\n+\t\t\tfinal int itemPrice = groundItem.getGePrice();\n+\t\t\tfinal int haPrice = groundItem.getHaPrice();\n+\t\t\tfinal int gePrice = itemPrice <= 0 ? haPrice : itemPrice;\n+\t\t\tfinal Color hidden = getHidden(new NamedQuantity(groundItem.getName(), quantity), gePrice, haPrice, groundItem.isTradeable());\n+\t\t\tfinal Color highlighted = getHighlighted(new NamedQuantity(groundItem.getName(), quantity), gePrice, haPrice);\n \t\t\tfinal Color color = getItemColor(highlighted, hidden);\n-\t\t\tfinal boolean canBeRecolored = highlighted != null || (hidden != null && config.recolorMenuHiddenItems());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA3MjA0OA=="}, "originalCommit": {"oid": "dc1296bb4d4903b373802ddeb71a0343aa5a6f21"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg2MjM0MQ==", "bodyText": "I didn't notice the feature \"recolorMenuHiddenItems\". I brought it back and edited this pull request.", "url": "https://github.com/runelite/runelite/pull/11304#discussion_r414862341", "createdAt": "2020-04-24T21:04:25Z", "author": {"login": "rnoennig"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/grounditems/GroundItemsPlugin.java", "diffHunk": "@@ -495,31 +495,18 @@ public void onMenuEntryAdded(MenuEntryAdded event)\n \t\t\tMenuEntry[] menuEntries = client.getMenuEntries();\n \t\t\tMenuEntry lastEntry = menuEntries[menuEntries.length - 1];\n \n-\t\t\tint quantity = 1;\n-\t\t\tNode current = itemLayer.getBottom();\n-\n-\t\t\twhile (current instanceof TileItem)\n-\t\t\t{\n-\t\t\t\tTileItem item = (TileItem) current;\n-\t\t\t\tif (item.getId() == itemId)\n-\t\t\t\t{\n-\t\t\t\t\tquantity = item.getQuantity();\n-\t\t\t\t}\n-\t\t\t\tcurrent = current.getNext();\n-\t\t\t}\n+\t\t\tGroundItem.GroundItemKey groundItemKey = new GroundItem.GroundItemKey(itemId, tile.getWorldLocation());\n+\t\t\tGroundItem groundItem = collectedGroundItems.get(groundItemKey);\n+\t\t\tint quantity = groundItem.getQuantity();\n \n-\t\t\tfinal ItemComposition itemComposition = itemManager.getItemComposition(itemId);\n-\t\t\tfinal int realItemId = itemComposition.getNote() != -1 ? itemComposition.getLinkedNoteId() : itemComposition.getId();\n-\t\t\tfinal int itemPrice = itemManager.getItemPrice(realItemId);\n-\t\t\tfinal int price = itemPrice <= 0 ? itemComposition.getPrice() : itemPrice;\n-\t\t\tfinal int haPrice = Math.round(itemComposition.getPrice() * Constants.HIGH_ALCHEMY_MULTIPLIER) * quantity;\n-\t\t\tfinal int gePrice = quantity * price;\n-\t\t\tfinal Color hidden = getHidden(new NamedQuantity(itemComposition.getName(), quantity), gePrice, haPrice, itemComposition.isTradeable());\n-\t\t\tfinal Color highlighted = getHighlighted(new NamedQuantity(itemComposition.getName(), quantity), gePrice, haPrice);\n+\t\t\tfinal int itemPrice = groundItem.getGePrice();\n+\t\t\tfinal int haPrice = groundItem.getHaPrice();\n+\t\t\tfinal int gePrice = itemPrice <= 0 ? haPrice : itemPrice;\n+\t\t\tfinal Color hidden = getHidden(new NamedQuantity(groundItem.getName(), quantity), gePrice, haPrice, groundItem.isTradeable());\n+\t\t\tfinal Color highlighted = getHighlighted(new NamedQuantity(groundItem.getName(), quantity), gePrice, haPrice);\n \t\t\tfinal Color color = getItemColor(highlighted, hidden);\n-\t\t\tfinal boolean canBeRecolored = highlighted != null || (hidden != null && config.recolorMenuHiddenItems());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA3MjA0OA=="}, "originalCommit": {"oid": "dc1296bb4d4903b373802ddeb71a0343aa5a6f21"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM0NTE3NQ==", "bodyText": "Why are you still removing this highlighted check? This will make recolorMenuHiddenItems apply to highlighted items, and also break items which are highlighted and hidden (which should show it as highlighted, as the overlay does)", "url": "https://github.com/runelite/runelite/pull/11304#discussion_r415345175", "createdAt": "2020-04-26T16:16:30Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/grounditems/GroundItemsPlugin.java", "diffHunk": "@@ -495,31 +495,18 @@ public void onMenuEntryAdded(MenuEntryAdded event)\n \t\t\tMenuEntry[] menuEntries = client.getMenuEntries();\n \t\t\tMenuEntry lastEntry = menuEntries[menuEntries.length - 1];\n \n-\t\t\tint quantity = 1;\n-\t\t\tNode current = itemLayer.getBottom();\n-\n-\t\t\twhile (current instanceof TileItem)\n-\t\t\t{\n-\t\t\t\tTileItem item = (TileItem) current;\n-\t\t\t\tif (item.getId() == itemId)\n-\t\t\t\t{\n-\t\t\t\t\tquantity = item.getQuantity();\n-\t\t\t\t}\n-\t\t\t\tcurrent = current.getNext();\n-\t\t\t}\n+\t\t\tGroundItem.GroundItemKey groundItemKey = new GroundItem.GroundItemKey(itemId, tile.getWorldLocation());\n+\t\t\tGroundItem groundItem = collectedGroundItems.get(groundItemKey);\n+\t\t\tint quantity = groundItem.getQuantity();\n \n-\t\t\tfinal ItemComposition itemComposition = itemManager.getItemComposition(itemId);\n-\t\t\tfinal int realItemId = itemComposition.getNote() != -1 ? itemComposition.getLinkedNoteId() : itemComposition.getId();\n-\t\t\tfinal int itemPrice = itemManager.getItemPrice(realItemId);\n-\t\t\tfinal int price = itemPrice <= 0 ? itemComposition.getPrice() : itemPrice;\n-\t\t\tfinal int haPrice = Math.round(itemComposition.getPrice() * Constants.HIGH_ALCHEMY_MULTIPLIER) * quantity;\n-\t\t\tfinal int gePrice = quantity * price;\n-\t\t\tfinal Color hidden = getHidden(new NamedQuantity(itemComposition.getName(), quantity), gePrice, haPrice, itemComposition.isTradeable());\n-\t\t\tfinal Color highlighted = getHighlighted(new NamedQuantity(itemComposition.getName(), quantity), gePrice, haPrice);\n+\t\t\tfinal int itemPrice = groundItem.getGePrice();\n+\t\t\tfinal int haPrice = groundItem.getHaPrice();\n+\t\t\tfinal int gePrice = itemPrice <= 0 ? haPrice : itemPrice;\n+\t\t\tfinal Color hidden = getHidden(new NamedQuantity(groundItem.getName(), quantity), gePrice, haPrice, groundItem.isTradeable());\n+\t\t\tfinal Color highlighted = getHighlighted(new NamedQuantity(groundItem.getName(), quantity), gePrice, haPrice);\n \t\t\tfinal Color color = getItemColor(highlighted, hidden);\n-\t\t\tfinal boolean canBeRecolored = highlighted != null || (hidden != null && config.recolorMenuHiddenItems());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA3MjA0OA=="}, "originalCommit": {"oid": "dc1296bb4d4903b373802ddeb71a0343aa5a6f21"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MzIwNDcyOnYy", "diffSide": "RIGHT", "path": "runelite-client/src/main/java/net/runelite/client/plugins/grounditems/GroundItemsPlugin.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNjoxNjo1NVrOGMGqbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNjoxNjo1NVrOGMGqbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM0NTI2Mw==", "bodyText": "In general avoid double-negatives as it is hard to follow for me (eg !shouldNot...)", "url": "https://github.com/runelite/runelite/pull/11304#discussion_r415345263", "createdAt": "2020-04-26T16:16:55Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/grounditems/GroundItemsPlugin.java", "diffHunk": "@@ -495,31 +495,18 @@ public void onMenuEntryAdded(MenuEntryAdded event)\n \t\t\tMenuEntry[] menuEntries = client.getMenuEntries();\n \t\t\tMenuEntry lastEntry = menuEntries[menuEntries.length - 1];\n \n-\t\t\tint quantity = 1;\n-\t\t\tNode current = itemLayer.getBottom();\n-\n-\t\t\twhile (current instanceof TileItem)\n-\t\t\t{\n-\t\t\t\tTileItem item = (TileItem) current;\n-\t\t\t\tif (item.getId() == itemId)\n-\t\t\t\t{\n-\t\t\t\t\tquantity = item.getQuantity();\n-\t\t\t\t}\n-\t\t\t\tcurrent = current.getNext();\n-\t\t\t}\n+\t\t\tGroundItem.GroundItemKey groundItemKey = new GroundItem.GroundItemKey(itemId, tile.getWorldLocation());\n+\t\t\tGroundItem groundItem = collectedGroundItems.get(groundItemKey);\n+\t\t\tint quantity = groundItem.getQuantity();\n \n-\t\t\tfinal ItemComposition itemComposition = itemManager.getItemComposition(itemId);\n-\t\t\tfinal int realItemId = itemComposition.getNote() != -1 ? itemComposition.getLinkedNoteId() : itemComposition.getId();\n-\t\t\tfinal int itemPrice = itemManager.getItemPrice(realItemId);\n-\t\t\tfinal int price = itemPrice <= 0 ? itemComposition.getPrice() : itemPrice;\n-\t\t\tfinal int haPrice = Math.round(itemComposition.getPrice() * Constants.HIGH_ALCHEMY_MULTIPLIER) * quantity;\n-\t\t\tfinal int gePrice = quantity * price;\n-\t\t\tfinal Color hidden = getHidden(new NamedQuantity(itemComposition.getName(), quantity), gePrice, haPrice, itemComposition.isTradeable());\n-\t\t\tfinal Color highlighted = getHighlighted(new NamedQuantity(itemComposition.getName(), quantity), gePrice, haPrice);\n+\t\t\tfinal int gePrice = groundItem.getGePrice();\n+\t\t\tfinal int haPrice = groundItem.getHaPrice();\n+\t\t\tfinal Color hidden = getHidden(new NamedQuantity(groundItem.getName(), quantity), gePrice, haPrice, groundItem.isTradeable());\n+\t\t\tfinal Color highlighted = getHighlighted(new NamedQuantity(groundItem.getName(), quantity), gePrice, haPrice);\n \t\t\tfinal Color color = getItemColor(highlighted, hidden);\n-\t\t\tfinal boolean canBeRecolored = highlighted != null || (hidden != null && config.recolorMenuHiddenItems());\n+\t\t\tfinal boolean shouldNotRecolorHiddenMenuItem = hidden != null && !config.recolorMenuHiddenItems();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19fa7c777c6befefc174d1335f6868fdb2a3c92a"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzU5OTUzOnYy", "diffSide": "RIGHT", "path": "runelite-client/src/main/java/net/runelite/client/plugins/grounditems/GroundItemsPlugin.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxNzo1NToxOFrOGPk_1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNTowMToyMFrOGPsylg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk4Nzk5MQ==", "bodyText": "Why is this being removed? It would cause the plugin to apply the default overlay color to the menus which it currently doesn't do. It seems unrelated to this bug at least. I think the reason this exists is because the overlay needs a color but the menus already have their own default color which is white.", "url": "https://github.com/runelite/runelite/pull/11304#discussion_r418987991", "createdAt": "2020-05-02T17:55:18Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/grounditems/GroundItemsPlugin.java", "diffHunk": "@@ -495,31 +495,18 @@ public void onMenuEntryAdded(MenuEntryAdded event)\n \t\t\tMenuEntry[] menuEntries = client.getMenuEntries();\n \t\t\tMenuEntry lastEntry = menuEntries[menuEntries.length - 1];\n \n-\t\t\tint quantity = 1;\n-\t\t\tNode current = itemLayer.getBottom();\n-\n-\t\t\twhile (current instanceof TileItem)\n-\t\t\t{\n-\t\t\t\tTileItem item = (TileItem) current;\n-\t\t\t\tif (item.getId() == itemId)\n-\t\t\t\t{\n-\t\t\t\t\tquantity = item.getQuantity();\n-\t\t\t\t}\n-\t\t\t\tcurrent = current.getNext();\n-\t\t\t}\n+\t\t\tGroundItem.GroundItemKey groundItemKey = new GroundItem.GroundItemKey(itemId, tile.getWorldLocation());\n+\t\t\tGroundItem groundItem = collectedGroundItems.get(groundItemKey);\n+\t\t\tint quantity = groundItem.getQuantity();\n \n-\t\t\tfinal ItemComposition itemComposition = itemManager.getItemComposition(itemId);\n-\t\t\tfinal int realItemId = itemComposition.getNote() != -1 ? itemComposition.getLinkedNoteId() : itemComposition.getId();\n-\t\t\tfinal int itemPrice = itemManager.getItemPrice(realItemId);\n-\t\t\tfinal int price = itemPrice <= 0 ? itemComposition.getPrice() : itemPrice;\n-\t\t\tfinal int haPrice = Math.round(itemComposition.getPrice() * Constants.HIGH_ALCHEMY_MULTIPLIER) * quantity;\n-\t\t\tfinal int gePrice = quantity * price;\n-\t\t\tfinal Color hidden = getHidden(new NamedQuantity(itemComposition.getName(), quantity), gePrice, haPrice, itemComposition.isTradeable());\n-\t\t\tfinal Color highlighted = getHighlighted(new NamedQuantity(itemComposition.getName(), quantity), gePrice, haPrice);\n+\t\t\tfinal int gePrice = groundItem.getGePrice();\n+\t\t\tfinal int haPrice = groundItem.getHaPrice();\n+\t\t\tfinal Color hidden = getHidden(new NamedQuantity(groundItem.getName(), quantity), gePrice, haPrice, groundItem.isTradeable());\n+\t\t\tfinal Color highlighted = getHighlighted(new NamedQuantity(groundItem.getName(), quantity), gePrice, haPrice);\n \t\t\tfinal Color color = getItemColor(highlighted, hidden);\n \t\t\tfinal boolean canBeRecolored = highlighted != null || (hidden != null && config.recolorMenuHiddenItems());\n \n-\t\t\tif (color != null && canBeRecolored && !color.equals(config.defaultColor()))\n+\t\t\tif (color != null && canBeRecolored)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd26918a9884cbbcfd41f985d6ea15b70d5fd29a"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA2NDEwMQ==", "bodyText": "If I understood your comment correctly, the default color should only be used for the overlay and not for the menu entry? I recommend changing it so both match the configured colors(highlight, default, hidden). Otherwise I'd recommend changing the description of the color so that's it's clear that the default color doesn't change the default color of menu entries.", "url": "https://github.com/runelite/runelite/pull/11304#discussion_r419064101", "createdAt": "2020-05-03T07:50:11Z", "author": {"login": "rnoennig"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/grounditems/GroundItemsPlugin.java", "diffHunk": "@@ -495,31 +495,18 @@ public void onMenuEntryAdded(MenuEntryAdded event)\n \t\t\tMenuEntry[] menuEntries = client.getMenuEntries();\n \t\t\tMenuEntry lastEntry = menuEntries[menuEntries.length - 1];\n \n-\t\t\tint quantity = 1;\n-\t\t\tNode current = itemLayer.getBottom();\n-\n-\t\t\twhile (current instanceof TileItem)\n-\t\t\t{\n-\t\t\t\tTileItem item = (TileItem) current;\n-\t\t\t\tif (item.getId() == itemId)\n-\t\t\t\t{\n-\t\t\t\t\tquantity = item.getQuantity();\n-\t\t\t\t}\n-\t\t\t\tcurrent = current.getNext();\n-\t\t\t}\n+\t\t\tGroundItem.GroundItemKey groundItemKey = new GroundItem.GroundItemKey(itemId, tile.getWorldLocation());\n+\t\t\tGroundItem groundItem = collectedGroundItems.get(groundItemKey);\n+\t\t\tint quantity = groundItem.getQuantity();\n \n-\t\t\tfinal ItemComposition itemComposition = itemManager.getItemComposition(itemId);\n-\t\t\tfinal int realItemId = itemComposition.getNote() != -1 ? itemComposition.getLinkedNoteId() : itemComposition.getId();\n-\t\t\tfinal int itemPrice = itemManager.getItemPrice(realItemId);\n-\t\t\tfinal int price = itemPrice <= 0 ? itemComposition.getPrice() : itemPrice;\n-\t\t\tfinal int haPrice = Math.round(itemComposition.getPrice() * Constants.HIGH_ALCHEMY_MULTIPLIER) * quantity;\n-\t\t\tfinal int gePrice = quantity * price;\n-\t\t\tfinal Color hidden = getHidden(new NamedQuantity(itemComposition.getName(), quantity), gePrice, haPrice, itemComposition.isTradeable());\n-\t\t\tfinal Color highlighted = getHighlighted(new NamedQuantity(itemComposition.getName(), quantity), gePrice, haPrice);\n+\t\t\tfinal int gePrice = groundItem.getGePrice();\n+\t\t\tfinal int haPrice = groundItem.getHaPrice();\n+\t\t\tfinal Color hidden = getHidden(new NamedQuantity(groundItem.getName(), quantity), gePrice, haPrice, groundItem.isTradeable());\n+\t\t\tfinal Color highlighted = getHighlighted(new NamedQuantity(groundItem.getName(), quantity), gePrice, haPrice);\n \t\t\tfinal Color color = getItemColor(highlighted, hidden);\n \t\t\tfinal boolean canBeRecolored = highlighted != null || (hidden != null && config.recolorMenuHiddenItems());\n \n-\t\t\tif (color != null && canBeRecolored && !color.equals(config.defaultColor()))\n+\t\t\tif (color != null && canBeRecolored)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk4Nzk5MQ=="}, "originalCommit": {"oid": "fd26918a9884cbbcfd41f985d6ea15b70d5fd29a"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTExNTY3MA==", "bodyText": "This would cause a rather user visible behavior change, which generally if we do those (especially without a config option toggle) it upsets people. At the very least it is not related to the two bugs this is trying to fix though.", "url": "https://github.com/runelite/runelite/pull/11304#discussion_r419115670", "createdAt": "2020-05-03T15:01:20Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/grounditems/GroundItemsPlugin.java", "diffHunk": "@@ -495,31 +495,18 @@ public void onMenuEntryAdded(MenuEntryAdded event)\n \t\t\tMenuEntry[] menuEntries = client.getMenuEntries();\n \t\t\tMenuEntry lastEntry = menuEntries[menuEntries.length - 1];\n \n-\t\t\tint quantity = 1;\n-\t\t\tNode current = itemLayer.getBottom();\n-\n-\t\t\twhile (current instanceof TileItem)\n-\t\t\t{\n-\t\t\t\tTileItem item = (TileItem) current;\n-\t\t\t\tif (item.getId() == itemId)\n-\t\t\t\t{\n-\t\t\t\t\tquantity = item.getQuantity();\n-\t\t\t\t}\n-\t\t\t\tcurrent = current.getNext();\n-\t\t\t}\n+\t\t\tGroundItem.GroundItemKey groundItemKey = new GroundItem.GroundItemKey(itemId, tile.getWorldLocation());\n+\t\t\tGroundItem groundItem = collectedGroundItems.get(groundItemKey);\n+\t\t\tint quantity = groundItem.getQuantity();\n \n-\t\t\tfinal ItemComposition itemComposition = itemManager.getItemComposition(itemId);\n-\t\t\tfinal int realItemId = itemComposition.getNote() != -1 ? itemComposition.getLinkedNoteId() : itemComposition.getId();\n-\t\t\tfinal int itemPrice = itemManager.getItemPrice(realItemId);\n-\t\t\tfinal int price = itemPrice <= 0 ? itemComposition.getPrice() : itemPrice;\n-\t\t\tfinal int haPrice = Math.round(itemComposition.getPrice() * Constants.HIGH_ALCHEMY_MULTIPLIER) * quantity;\n-\t\t\tfinal int gePrice = quantity * price;\n-\t\t\tfinal Color hidden = getHidden(new NamedQuantity(itemComposition.getName(), quantity), gePrice, haPrice, itemComposition.isTradeable());\n-\t\t\tfinal Color highlighted = getHighlighted(new NamedQuantity(itemComposition.getName(), quantity), gePrice, haPrice);\n+\t\t\tfinal int gePrice = groundItem.getGePrice();\n+\t\t\tfinal int haPrice = groundItem.getHaPrice();\n+\t\t\tfinal Color hidden = getHidden(new NamedQuantity(groundItem.getName(), quantity), gePrice, haPrice, groundItem.isTradeable());\n+\t\t\tfinal Color highlighted = getHighlighted(new NamedQuantity(groundItem.getName(), quantity), gePrice, haPrice);\n \t\t\tfinal Color color = getItemColor(highlighted, hidden);\n \t\t\tfinal boolean canBeRecolored = highlighted != null || (hidden != null && config.recolorMenuHiddenItems());\n \n-\t\t\tif (color != null && canBeRecolored && !color.equals(config.defaultColor()))\n+\t\t\tif (color != null && canBeRecolored)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk4Nzk5MQ=="}, "originalCommit": {"oid": "fd26918a9884cbbcfd41f985d6ea15b70d5fd29a"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzYwMTA4OnYy", "diffSide": "RIGHT", "path": "runelite-client/src/test/java/net/runelite/client/plugins/grounditems/GroundItemsPluginTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxNzo1Njo1OVrOGPlAnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxNzo1Njo1OVrOGPlAnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk4ODE4OQ==", "bodyText": "This isn't injected into the plugin, so it probably doesn't need to be mock/bound?\nEDIT: it seems this is required by the mouse manager despite it being mocked, not sure why.", "url": "https://github.com/runelite/runelite/pull/11304#discussion_r418988189", "createdAt": "2020-05-02T17:56:59Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/test/java/net/runelite/client/plugins/grounditems/GroundItemsPluginTest.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Copyright (c) 2020 Abex\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.grounditems;\n+\n+import com.google.inject.Guice;\n+import com.google.inject.testing.fieldbinder.Bind;\n+import com.google.inject.testing.fieldbinder.BoundFieldModule;\n+import java.awt.Color;\n+import java.util.concurrent.ScheduledExecutorService;\n+import javax.inject.Inject;\n+import net.runelite.api.Client;\n+import net.runelite.api.ItemComposition;\n+import net.runelite.api.ItemLayer;\n+import net.runelite.api.MenuAction;\n+import net.runelite.api.MenuEntry;\n+import net.runelite.api.Player;\n+import net.runelite.api.Scene;\n+import net.runelite.api.Tile;\n+import net.runelite.api.TileItem;\n+import net.runelite.api.coords.WorldPoint;\n+import net.runelite.api.events.ItemSpawned;\n+import net.runelite.api.events.MenuEntryAdded;\n+import net.runelite.client.Notifier;\n+import net.runelite.client.config.RuneLiteConfig;\n+import net.runelite.client.game.ItemManager;\n+import net.runelite.client.input.KeyManager;\n+import net.runelite.client.input.MouseManager;\n+import net.runelite.client.plugins.grounditems.config.MenuHighlightMode;\n+import net.runelite.client.plugins.grounditems.config.ValueCalculationMode;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+import net.runelite.client.util.ColorUtil;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import static org.mockito.ArgumentMatchers.any;\n+import org.mockito.Mock;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.lenient;\n+import static org.mockito.Mockito.when;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class GroundItemsPluginTest\n+{\n+\t@Inject\n+\tprivate GroundItemsPlugin groundItemsPlugin;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate GroundItemInputListener inputListener;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate MouseManager mouseManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate KeyManager keyManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate Client client;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate ItemManager itemManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate OverlayManager overlayManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate GroundItemsConfig config;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate GroundItemsOverlay overlay;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate Notifier notifier;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate ScheduledExecutorService executor;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate RuneLiteConfig runeLiteConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e44e788943c76d2dfe49bc51026d347cc260ec7"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzYxMzAwOnYy", "diffSide": "RIGHT", "path": "runelite-client/src/test/java/net/runelite/client/plugins/grounditems/GroundItemsPluginTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxODoxMDo1M1rOGPlGjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNDo1NzoyMFrOGPswUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk4OTcwOQ==", "bodyText": "Instead of mocking all of this code, you can just remove it from the plugin, since it is unused", "url": "https://github.com/runelite/runelite/pull/11304#discussion_r418989709", "createdAt": "2020-05-02T18:10:53Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/test/java/net/runelite/client/plugins/grounditems/GroundItemsPluginTest.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Copyright (c) 2020 Abex\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.grounditems;\n+\n+import com.google.inject.Guice;\n+import com.google.inject.testing.fieldbinder.Bind;\n+import com.google.inject.testing.fieldbinder.BoundFieldModule;\n+import java.awt.Color;\n+import java.util.concurrent.ScheduledExecutorService;\n+import javax.inject.Inject;\n+import net.runelite.api.Client;\n+import net.runelite.api.ItemComposition;\n+import net.runelite.api.ItemLayer;\n+import net.runelite.api.MenuAction;\n+import net.runelite.api.MenuEntry;\n+import net.runelite.api.Player;\n+import net.runelite.api.Scene;\n+import net.runelite.api.Tile;\n+import net.runelite.api.TileItem;\n+import net.runelite.api.coords.WorldPoint;\n+import net.runelite.api.events.ItemSpawned;\n+import net.runelite.api.events.MenuEntryAdded;\n+import net.runelite.client.Notifier;\n+import net.runelite.client.config.RuneLiteConfig;\n+import net.runelite.client.game.ItemManager;\n+import net.runelite.client.input.KeyManager;\n+import net.runelite.client.input.MouseManager;\n+import net.runelite.client.plugins.grounditems.config.MenuHighlightMode;\n+import net.runelite.client.plugins.grounditems.config.ValueCalculationMode;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+import net.runelite.client.util.ColorUtil;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import static org.mockito.ArgumentMatchers.any;\n+import org.mockito.Mock;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.lenient;\n+import static org.mockito.Mockito.when;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class GroundItemsPluginTest\n+{\n+\t@Inject\n+\tprivate GroundItemsPlugin groundItemsPlugin;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate GroundItemInputListener inputListener;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate MouseManager mouseManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate KeyManager keyManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate Client client;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate ItemManager itemManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate OverlayManager overlayManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate GroundItemsConfig config;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate GroundItemsOverlay overlay;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate Notifier notifier;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate ScheduledExecutorService executor;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate RuneLiteConfig runeLiteConfig;\n+\n+\t@Mock\n+\tprivate Player player;\n+\n+\t@Mock\n+\tprivate Tile tile;\n+\n+\t@Mock\n+\tprivate TileItem tileItem;\n+\n+\t@Mock\n+\tprivate ItemComposition itemComposition;\n+\n+\t@Mock\n+\tprivate ItemLayer itemLayer;\n+\n+\t@Mock\n+\tprivate Scene scene;\n+\n+\t@Before\n+\tpublic void before()\n+\t{\n+\t\tGuice.createInjector(BoundFieldModule.of(this)).injectMembers(this);\n+\t}\n+\n+\t@Test\n+\tpublic void shouldColorHiddenHighlightedMenuEntry()\n+\t{\n+\t\tString itemName = \"Shovel\";\n+\t\tint itemQuantity = 1;\n+\t\tint itemGEPrice = 10;\n+\t\tint itemItemPrice = 10;\n+\t\tColor highlightedColor = Color.PINK;\n+\n+\t\tMenuEntry menuEntry = prepareMenuEntryTest(itemName, itemQuantity, itemGEPrice, itemItemPrice, itemName, itemName, highlightedColor, Color.GRAY);\n+\n+\t\tgroundItemsPlugin.onItemSpawned(new ItemSpawned(tile, tileItem));\n+\t\tgroundItemsPlugin.onMenuEntryAdded(new MenuEntryAdded(menuEntry.getOption(), menuEntry.getTarget(), menuEntry.getType(), menuEntry.getIdentifier(), menuEntry.getParam0(), menuEntry.getParam1()));\n+\n+\t\tAssert.assertEquals(String.format(\"%s%s\", ColorUtil.colorTag(highlightedColor), itemName), menuEntry.getTarget());\n+\t}\n+\n+\t@Test\n+\tpublic void shouldNotRecolorHiddenMenuEntry()\n+\t{\n+\t\tString itemName = \"Shovel\";\n+\t\tint itemQuantity = 1;\n+\t\tint itemGEPrice = 10;\n+\t\tint itemItemPrice = 10;\n+\t\tColor hiddenColor = Color.GRAY;\n+\n+\t\tMenuEntry menuEntry = prepareMenuEntryTest(itemName, itemQuantity, itemGEPrice, itemItemPrice, itemName, \"\", Color.PINK, hiddenColor);\n+\t\twhen(config.recolorMenuHiddenItems()).thenReturn(true);\n+\n+\t\tgroundItemsPlugin.onItemSpawned(new ItemSpawned(tile, tileItem));\n+\t\tgroundItemsPlugin.onMenuEntryAdded(new MenuEntryAdded(menuEntry.getOption(), menuEntry.getTarget(), menuEntry.getType(), menuEntry.getIdentifier(), menuEntry.getParam0(), menuEntry.getParam1()));\n+\n+\t\tAssert.assertEquals(String.format(\"%s%s\", ColorUtil.colorTag(hiddenColor), itemName), menuEntry.getTarget());\n+\t}\n+\n+\tprivate MenuEntry prepareMenuEntryTest(String itemName, Integer itemQuantity, Integer itemGEPrice, Integer itemItemPrice, String hiddenItemsConfig, String highlightItemsConfig, Color highlightedColor, Color hiddenColor)\n+\t{\n+\t\tMenuEntry menuEntry = new MenuEntry();\n+\n+\t\tint x = 0;\n+\t\tint y = 0;\n+\t\tint plane = 0;\n+\t\tint itemId = 2000;\n+\t\tWorldPoint worldPoint = new WorldPoint(x, y, plane);\n+\n+\t\tmenuEntry.setOption(\"Take\");\n+\t\tmenuEntry.setTarget(itemName);\n+\t\tmenuEntry.setIdentifier(itemId);\n+\t\tmenuEntry.setType(MenuAction.GROUND_ITEM_THIRD_OPTION.getId());\n+\t\tmenuEntry.setParam0(x);\n+\t\tmenuEntry.setParam1(y);\n+\n+\t\twhen(config.getHiddenItems()).thenReturn(hiddenItemsConfig);\n+\t\twhen(config.getHighlightItems()).thenReturn(highlightItemsConfig);\n+\n+\t\twhen(config.getHighlightOverValue()).thenReturn(0);\n+\t\twhen(config.insaneValuePrice()).thenReturn(10_000_000);\n+\t\twhen(config.highValuePrice()).thenReturn(1_000_000);\n+\t\twhen(config.mediumValuePrice()).thenReturn(100_000);\n+\t\twhen(config.lowValuePrice()).thenReturn(1_000);\n+\n+\t\twhen(config.highlightedColor()).thenReturn(highlightedColor);\n+\t\twhen(config.insaneValueColor()).thenReturn(Color.RED);\n+\t\twhen(config.highValueColor()).thenReturn(Color.ORANGE);\n+\t\twhen(config.mediumValueColor()).thenReturn(Color.YELLOW);\n+\t\twhen(config.lowValueColor()).thenReturn(Color.WHITE);\n+\t\twhen(config.hiddenColor()).thenReturn(hiddenColor);\n+\n+\t\tlenient().when(config.valueCalculationMode()).thenReturn(ValueCalculationMode.HIGHEST);\n+\t\twhen(config.menuHighlightMode()).thenReturn(MenuHighlightMode.BOTH);\n+\n+\t\twhen(tileItem.getId()).thenReturn(itemId);\n+\t\twhen(tile.getItemLayer()).thenReturn(itemLayer);\n+\t\twhen(itemManager.getItemComposition(itemId)).thenReturn(itemComposition);\n+\t\twhen(client.getLocalPlayer()).thenReturn(player);\n+\t\twhen(player.getWorldLocation()).thenReturn(worldPoint);\n+\t\twhen(tile.getWorldLocation()).thenReturn(worldPoint);\n+\t\twhen(itemComposition.getNote()).thenReturn(-1);\n+\t\twhen(client.getMenuEntries()).thenReturn(new MenuEntry[]{menuEntry});\n+\t\twhen(client.getScene()).thenReturn(scene);\n+\t\twhen(scene.getTiles()).thenReturn(new Tile[][][]{new Tile[][]{new Tile[]{tile}}});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e44e788943c76d2dfe49bc51026d347cc260ec7"}, "originalPosition": 219}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA2NDQ4Ng==", "bodyText": "I'm not sure what you mean. The 4 lines your highlighted are non-lenient stubs, if they aren't called during execution an error would be thrown. I assure you those lines are needed.", "url": "https://github.com/runelite/runelite/pull/11304#discussion_r419064486", "createdAt": "2020-05-03T07:53:50Z", "author": {"login": "rnoennig"}, "path": "runelite-client/src/test/java/net/runelite/client/plugins/grounditems/GroundItemsPluginTest.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Copyright (c) 2020 Abex\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.grounditems;\n+\n+import com.google.inject.Guice;\n+import com.google.inject.testing.fieldbinder.Bind;\n+import com.google.inject.testing.fieldbinder.BoundFieldModule;\n+import java.awt.Color;\n+import java.util.concurrent.ScheduledExecutorService;\n+import javax.inject.Inject;\n+import net.runelite.api.Client;\n+import net.runelite.api.ItemComposition;\n+import net.runelite.api.ItemLayer;\n+import net.runelite.api.MenuAction;\n+import net.runelite.api.MenuEntry;\n+import net.runelite.api.Player;\n+import net.runelite.api.Scene;\n+import net.runelite.api.Tile;\n+import net.runelite.api.TileItem;\n+import net.runelite.api.coords.WorldPoint;\n+import net.runelite.api.events.ItemSpawned;\n+import net.runelite.api.events.MenuEntryAdded;\n+import net.runelite.client.Notifier;\n+import net.runelite.client.config.RuneLiteConfig;\n+import net.runelite.client.game.ItemManager;\n+import net.runelite.client.input.KeyManager;\n+import net.runelite.client.input.MouseManager;\n+import net.runelite.client.plugins.grounditems.config.MenuHighlightMode;\n+import net.runelite.client.plugins.grounditems.config.ValueCalculationMode;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+import net.runelite.client.util.ColorUtil;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import static org.mockito.ArgumentMatchers.any;\n+import org.mockito.Mock;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.lenient;\n+import static org.mockito.Mockito.when;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class GroundItemsPluginTest\n+{\n+\t@Inject\n+\tprivate GroundItemsPlugin groundItemsPlugin;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate GroundItemInputListener inputListener;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate MouseManager mouseManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate KeyManager keyManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate Client client;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate ItemManager itemManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate OverlayManager overlayManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate GroundItemsConfig config;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate GroundItemsOverlay overlay;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate Notifier notifier;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate ScheduledExecutorService executor;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate RuneLiteConfig runeLiteConfig;\n+\n+\t@Mock\n+\tprivate Player player;\n+\n+\t@Mock\n+\tprivate Tile tile;\n+\n+\t@Mock\n+\tprivate TileItem tileItem;\n+\n+\t@Mock\n+\tprivate ItemComposition itemComposition;\n+\n+\t@Mock\n+\tprivate ItemLayer itemLayer;\n+\n+\t@Mock\n+\tprivate Scene scene;\n+\n+\t@Before\n+\tpublic void before()\n+\t{\n+\t\tGuice.createInjector(BoundFieldModule.of(this)).injectMembers(this);\n+\t}\n+\n+\t@Test\n+\tpublic void shouldColorHiddenHighlightedMenuEntry()\n+\t{\n+\t\tString itemName = \"Shovel\";\n+\t\tint itemQuantity = 1;\n+\t\tint itemGEPrice = 10;\n+\t\tint itemItemPrice = 10;\n+\t\tColor highlightedColor = Color.PINK;\n+\n+\t\tMenuEntry menuEntry = prepareMenuEntryTest(itemName, itemQuantity, itemGEPrice, itemItemPrice, itemName, itemName, highlightedColor, Color.GRAY);\n+\n+\t\tgroundItemsPlugin.onItemSpawned(new ItemSpawned(tile, tileItem));\n+\t\tgroundItemsPlugin.onMenuEntryAdded(new MenuEntryAdded(menuEntry.getOption(), menuEntry.getTarget(), menuEntry.getType(), menuEntry.getIdentifier(), menuEntry.getParam0(), menuEntry.getParam1()));\n+\n+\t\tAssert.assertEquals(String.format(\"%s%s\", ColorUtil.colorTag(highlightedColor), itemName), menuEntry.getTarget());\n+\t}\n+\n+\t@Test\n+\tpublic void shouldNotRecolorHiddenMenuEntry()\n+\t{\n+\t\tString itemName = \"Shovel\";\n+\t\tint itemQuantity = 1;\n+\t\tint itemGEPrice = 10;\n+\t\tint itemItemPrice = 10;\n+\t\tColor hiddenColor = Color.GRAY;\n+\n+\t\tMenuEntry menuEntry = prepareMenuEntryTest(itemName, itemQuantity, itemGEPrice, itemItemPrice, itemName, \"\", Color.PINK, hiddenColor);\n+\t\twhen(config.recolorMenuHiddenItems()).thenReturn(true);\n+\n+\t\tgroundItemsPlugin.onItemSpawned(new ItemSpawned(tile, tileItem));\n+\t\tgroundItemsPlugin.onMenuEntryAdded(new MenuEntryAdded(menuEntry.getOption(), menuEntry.getTarget(), menuEntry.getType(), menuEntry.getIdentifier(), menuEntry.getParam0(), menuEntry.getParam1()));\n+\n+\t\tAssert.assertEquals(String.format(\"%s%s\", ColorUtil.colorTag(hiddenColor), itemName), menuEntry.getTarget());\n+\t}\n+\n+\tprivate MenuEntry prepareMenuEntryTest(String itemName, Integer itemQuantity, Integer itemGEPrice, Integer itemItemPrice, String hiddenItemsConfig, String highlightItemsConfig, Color highlightedColor, Color hiddenColor)\n+\t{\n+\t\tMenuEntry menuEntry = new MenuEntry();\n+\n+\t\tint x = 0;\n+\t\tint y = 0;\n+\t\tint plane = 0;\n+\t\tint itemId = 2000;\n+\t\tWorldPoint worldPoint = new WorldPoint(x, y, plane);\n+\n+\t\tmenuEntry.setOption(\"Take\");\n+\t\tmenuEntry.setTarget(itemName);\n+\t\tmenuEntry.setIdentifier(itemId);\n+\t\tmenuEntry.setType(MenuAction.GROUND_ITEM_THIRD_OPTION.getId());\n+\t\tmenuEntry.setParam0(x);\n+\t\tmenuEntry.setParam1(y);\n+\n+\t\twhen(config.getHiddenItems()).thenReturn(hiddenItemsConfig);\n+\t\twhen(config.getHighlightItems()).thenReturn(highlightItemsConfig);\n+\n+\t\twhen(config.getHighlightOverValue()).thenReturn(0);\n+\t\twhen(config.insaneValuePrice()).thenReturn(10_000_000);\n+\t\twhen(config.highValuePrice()).thenReturn(1_000_000);\n+\t\twhen(config.mediumValuePrice()).thenReturn(100_000);\n+\t\twhen(config.lowValuePrice()).thenReturn(1_000);\n+\n+\t\twhen(config.highlightedColor()).thenReturn(highlightedColor);\n+\t\twhen(config.insaneValueColor()).thenReturn(Color.RED);\n+\t\twhen(config.highValueColor()).thenReturn(Color.ORANGE);\n+\t\twhen(config.mediumValueColor()).thenReturn(Color.YELLOW);\n+\t\twhen(config.lowValueColor()).thenReturn(Color.WHITE);\n+\t\twhen(config.hiddenColor()).thenReturn(hiddenColor);\n+\n+\t\tlenient().when(config.valueCalculationMode()).thenReturn(ValueCalculationMode.HIGHEST);\n+\t\twhen(config.menuHighlightMode()).thenReturn(MenuHighlightMode.BOTH);\n+\n+\t\twhen(tileItem.getId()).thenReturn(itemId);\n+\t\twhen(tile.getItemLayer()).thenReturn(itemLayer);\n+\t\twhen(itemManager.getItemComposition(itemId)).thenReturn(itemComposition);\n+\t\twhen(client.getLocalPlayer()).thenReturn(player);\n+\t\twhen(player.getWorldLocation()).thenReturn(worldPoint);\n+\t\twhen(tile.getWorldLocation()).thenReturn(worldPoint);\n+\t\twhen(itemComposition.getNote()).thenReturn(-1);\n+\t\twhen(client.getMenuEntries()).thenReturn(new MenuEntry[]{menuEntry});\n+\t\twhen(client.getScene()).thenReturn(scene);\n+\t\twhen(scene.getTiles()).thenReturn(new Tile[][][]{new Tile[][]{new Tile[]{tile}}});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk4OTcwOQ=="}, "originalCommit": {"oid": "0e44e788943c76d2dfe49bc51026d347cc260ec7"}, "originalPosition": 219}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTExNTA5MQ==", "bodyText": "If you look at the final commit I pushed, I removed the code which used this from the plugin, which makes it unnecessary.", "url": "https://github.com/runelite/runelite/pull/11304#discussion_r419115091", "createdAt": "2020-05-03T14:57:20Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/test/java/net/runelite/client/plugins/grounditems/GroundItemsPluginTest.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Copyright (c) 2020 Abex\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.grounditems;\n+\n+import com.google.inject.Guice;\n+import com.google.inject.testing.fieldbinder.Bind;\n+import com.google.inject.testing.fieldbinder.BoundFieldModule;\n+import java.awt.Color;\n+import java.util.concurrent.ScheduledExecutorService;\n+import javax.inject.Inject;\n+import net.runelite.api.Client;\n+import net.runelite.api.ItemComposition;\n+import net.runelite.api.ItemLayer;\n+import net.runelite.api.MenuAction;\n+import net.runelite.api.MenuEntry;\n+import net.runelite.api.Player;\n+import net.runelite.api.Scene;\n+import net.runelite.api.Tile;\n+import net.runelite.api.TileItem;\n+import net.runelite.api.coords.WorldPoint;\n+import net.runelite.api.events.ItemSpawned;\n+import net.runelite.api.events.MenuEntryAdded;\n+import net.runelite.client.Notifier;\n+import net.runelite.client.config.RuneLiteConfig;\n+import net.runelite.client.game.ItemManager;\n+import net.runelite.client.input.KeyManager;\n+import net.runelite.client.input.MouseManager;\n+import net.runelite.client.plugins.grounditems.config.MenuHighlightMode;\n+import net.runelite.client.plugins.grounditems.config.ValueCalculationMode;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+import net.runelite.client.util.ColorUtil;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import static org.mockito.ArgumentMatchers.any;\n+import org.mockito.Mock;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.lenient;\n+import static org.mockito.Mockito.when;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class GroundItemsPluginTest\n+{\n+\t@Inject\n+\tprivate GroundItemsPlugin groundItemsPlugin;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate GroundItemInputListener inputListener;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate MouseManager mouseManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate KeyManager keyManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate Client client;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate ItemManager itemManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate OverlayManager overlayManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate GroundItemsConfig config;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate GroundItemsOverlay overlay;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate Notifier notifier;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate ScheduledExecutorService executor;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate RuneLiteConfig runeLiteConfig;\n+\n+\t@Mock\n+\tprivate Player player;\n+\n+\t@Mock\n+\tprivate Tile tile;\n+\n+\t@Mock\n+\tprivate TileItem tileItem;\n+\n+\t@Mock\n+\tprivate ItemComposition itemComposition;\n+\n+\t@Mock\n+\tprivate ItemLayer itemLayer;\n+\n+\t@Mock\n+\tprivate Scene scene;\n+\n+\t@Before\n+\tpublic void before()\n+\t{\n+\t\tGuice.createInjector(BoundFieldModule.of(this)).injectMembers(this);\n+\t}\n+\n+\t@Test\n+\tpublic void shouldColorHiddenHighlightedMenuEntry()\n+\t{\n+\t\tString itemName = \"Shovel\";\n+\t\tint itemQuantity = 1;\n+\t\tint itemGEPrice = 10;\n+\t\tint itemItemPrice = 10;\n+\t\tColor highlightedColor = Color.PINK;\n+\n+\t\tMenuEntry menuEntry = prepareMenuEntryTest(itemName, itemQuantity, itemGEPrice, itemItemPrice, itemName, itemName, highlightedColor, Color.GRAY);\n+\n+\t\tgroundItemsPlugin.onItemSpawned(new ItemSpawned(tile, tileItem));\n+\t\tgroundItemsPlugin.onMenuEntryAdded(new MenuEntryAdded(menuEntry.getOption(), menuEntry.getTarget(), menuEntry.getType(), menuEntry.getIdentifier(), menuEntry.getParam0(), menuEntry.getParam1()));\n+\n+\t\tAssert.assertEquals(String.format(\"%s%s\", ColorUtil.colorTag(highlightedColor), itemName), menuEntry.getTarget());\n+\t}\n+\n+\t@Test\n+\tpublic void shouldNotRecolorHiddenMenuEntry()\n+\t{\n+\t\tString itemName = \"Shovel\";\n+\t\tint itemQuantity = 1;\n+\t\tint itemGEPrice = 10;\n+\t\tint itemItemPrice = 10;\n+\t\tColor hiddenColor = Color.GRAY;\n+\n+\t\tMenuEntry menuEntry = prepareMenuEntryTest(itemName, itemQuantity, itemGEPrice, itemItemPrice, itemName, \"\", Color.PINK, hiddenColor);\n+\t\twhen(config.recolorMenuHiddenItems()).thenReturn(true);\n+\n+\t\tgroundItemsPlugin.onItemSpawned(new ItemSpawned(tile, tileItem));\n+\t\tgroundItemsPlugin.onMenuEntryAdded(new MenuEntryAdded(menuEntry.getOption(), menuEntry.getTarget(), menuEntry.getType(), menuEntry.getIdentifier(), menuEntry.getParam0(), menuEntry.getParam1()));\n+\n+\t\tAssert.assertEquals(String.format(\"%s%s\", ColorUtil.colorTag(hiddenColor), itemName), menuEntry.getTarget());\n+\t}\n+\n+\tprivate MenuEntry prepareMenuEntryTest(String itemName, Integer itemQuantity, Integer itemGEPrice, Integer itemItemPrice, String hiddenItemsConfig, String highlightItemsConfig, Color highlightedColor, Color hiddenColor)\n+\t{\n+\t\tMenuEntry menuEntry = new MenuEntry();\n+\n+\t\tint x = 0;\n+\t\tint y = 0;\n+\t\tint plane = 0;\n+\t\tint itemId = 2000;\n+\t\tWorldPoint worldPoint = new WorldPoint(x, y, plane);\n+\n+\t\tmenuEntry.setOption(\"Take\");\n+\t\tmenuEntry.setTarget(itemName);\n+\t\tmenuEntry.setIdentifier(itemId);\n+\t\tmenuEntry.setType(MenuAction.GROUND_ITEM_THIRD_OPTION.getId());\n+\t\tmenuEntry.setParam0(x);\n+\t\tmenuEntry.setParam1(y);\n+\n+\t\twhen(config.getHiddenItems()).thenReturn(hiddenItemsConfig);\n+\t\twhen(config.getHighlightItems()).thenReturn(highlightItemsConfig);\n+\n+\t\twhen(config.getHighlightOverValue()).thenReturn(0);\n+\t\twhen(config.insaneValuePrice()).thenReturn(10_000_000);\n+\t\twhen(config.highValuePrice()).thenReturn(1_000_000);\n+\t\twhen(config.mediumValuePrice()).thenReturn(100_000);\n+\t\twhen(config.lowValuePrice()).thenReturn(1_000);\n+\n+\t\twhen(config.highlightedColor()).thenReturn(highlightedColor);\n+\t\twhen(config.insaneValueColor()).thenReturn(Color.RED);\n+\t\twhen(config.highValueColor()).thenReturn(Color.ORANGE);\n+\t\twhen(config.mediumValueColor()).thenReturn(Color.YELLOW);\n+\t\twhen(config.lowValueColor()).thenReturn(Color.WHITE);\n+\t\twhen(config.hiddenColor()).thenReturn(hiddenColor);\n+\n+\t\tlenient().when(config.valueCalculationMode()).thenReturn(ValueCalculationMode.HIGHEST);\n+\t\twhen(config.menuHighlightMode()).thenReturn(MenuHighlightMode.BOTH);\n+\n+\t\twhen(tileItem.getId()).thenReturn(itemId);\n+\t\twhen(tile.getItemLayer()).thenReturn(itemLayer);\n+\t\twhen(itemManager.getItemComposition(itemId)).thenReturn(itemComposition);\n+\t\twhen(client.getLocalPlayer()).thenReturn(player);\n+\t\twhen(player.getWorldLocation()).thenReturn(worldPoint);\n+\t\twhen(tile.getWorldLocation()).thenReturn(worldPoint);\n+\t\twhen(itemComposition.getNote()).thenReturn(-1);\n+\t\twhen(client.getMenuEntries()).thenReturn(new MenuEntry[]{menuEntry});\n+\t\twhen(client.getScene()).thenReturn(scene);\n+\t\twhen(scene.getTiles()).thenReturn(new Tile[][][]{new Tile[][]{new Tile[]{tile}}});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk4OTcwOQ=="}, "originalCommit": {"oid": "0e44e788943c76d2dfe49bc51026d347cc260ec7"}, "originalPosition": 219}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3621, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}