{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNDg1MDE5", "number": 12032, "title": "Adding config option to persist tags through restart", "bodyText": "Closes #11961\nAdding config option to have the \"Tag\" or \"Untag\" option to instead modify the \"Npcs To Highlight\" option which allows the tags to persist through restart.", "createdAt": "2020-06-29T15:18:16Z", "url": "https://github.com/runelite/runelite/pull/12032", "merged": true, "mergeCommit": {"oid": "b0d8092d7deb386e9080577a97db4906ba065fa9"}, "closed": true, "closedAt": "2020-07-01T15:07:09Z", "author": {"login": "zeffirojoe"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwadeBAFqTQ0MDEyMjIxMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwrZQUgBqjM1MDI4MzEyNTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMTIyMjEz", "url": "https://github.com/runelite/runelite/pull/12032#pullrequestreview-440122213", "createdAt": "2020-06-30T15:16:16Z", "commit": {"oid": "df73cf5ac1927daa30a16ba7cc2a19e3a863b0ef"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo1OTo1NlrOGrKazA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOTowNDowNVrOGrKkaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxMjY1Mg==", "bodyText": "Are there any situations where we would want to add a Tag/Untag option to npcs which don't exist or have no name? I don't think so. Maybe just return;", "url": "https://github.com/runelite/runelite/pull/12032#discussion_r447912652", "createdAt": "2020-06-30T18:59:56Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/npchighlight/NpcIndicatorsPlugin.java", "diffHunk": "@@ -270,16 +267,50 @@ public void onMenuEntryAdded(MenuEntryAdded event)\n \t\t}\n \t\telse if (menuAction == MenuAction.EXAMINE_NPC && client.isKeyPressed(KeyCode.KC_SHIFT))\n \t\t{\n-\t\t\t// Add tag option\n+\t\t\t// Add tag and tag-all options\n+\t\t\tfinal int id = event.getIdentifier();\n+\t\t\tfinal NPC[] cachedNPCs = client.getCachedNPCs();\n+\t\t\tfinal NPC npcCached = cachedNPCs[id];\n+\t\t\tboolean npcFound = true;\n+\t\t\tboolean matchesList = false;\n+\n+\t\t\tif (npcCached == null || npcCached.getName() == null)\n+\t\t\t{\n+\t\t\t\tnpcFound = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6045c672d40b6ab304e4f87449822dff40d8ad2"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxMzQxMw==", "bodyText": "Declare final String npcName = npc.getName().toLowerCase(); once and then reference it and below.", "url": "https://github.com/runelite/runelite/pull/12032#discussion_r447913413", "createdAt": "2020-06-30T19:01:07Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/npchighlight/NpcIndicatorsPlugin.java", "diffHunk": "@@ -270,16 +267,50 @@ public void onMenuEntryAdded(MenuEntryAdded event)\n \t\t}\n \t\telse if (menuAction == MenuAction.EXAMINE_NPC && client.isKeyPressed(KeyCode.KC_SHIFT))\n \t\t{\n-\t\t\t// Add tag option\n+\t\t\t// Add tag and tag-all options\n+\t\t\tfinal int id = event.getIdentifier();\n+\t\t\tfinal NPC[] cachedNPCs = client.getCachedNPCs();\n+\t\t\tfinal NPC npcCached = cachedNPCs[id];\n+\t\t\tboolean npcFound = true;\n+\t\t\tboolean matchesList = false;\n+\n+\t\t\tif (npcCached == null || npcCached.getName() == null)\n+\t\t\t{\n+\t\t\t\tnpcFound = false;\n+\t\t\t}\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\tmatchesList = highlights.stream()\n+\t\t\t\t\t.filter(highlight -> !highlight.equals(npcCached.getName().toLowerCase()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6045c672d40b6ab304e4f87449822dff40d8ad2"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxNDI5Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\ttagAllEntry.setOption((Arrays.stream(config.getNpcToHighlight().split(\",\")).anyMatch(npc -> npc.toLowerCase().equals(npcCached.getName().toLowerCase())) ? UNTAG_ALL : TAG_ALL));\n          \n          \n            \n            \t\t\t\ttagAllEntry.setOption(highlights.contains(npcName) ? UNTAG_ALL : TAG_ALL));", "url": "https://github.com/runelite/runelite/pull/12032#discussion_r447914296", "createdAt": "2020-06-30T19:02:35Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/npchighlight/NpcIndicatorsPlugin.java", "diffHunk": "@@ -270,16 +267,50 @@ public void onMenuEntryAdded(MenuEntryAdded event)\n \t\t}\n \t\telse if (menuAction == MenuAction.EXAMINE_NPC && client.isKeyPressed(KeyCode.KC_SHIFT))\n \t\t{\n-\t\t\t// Add tag option\n+\t\t\t// Add tag and tag-all options\n+\t\t\tfinal int id = event.getIdentifier();\n+\t\t\tfinal NPC[] cachedNPCs = client.getCachedNPCs();\n+\t\t\tfinal NPC npcCached = cachedNPCs[id];\n+\t\t\tboolean npcFound = true;\n+\t\t\tboolean matchesList = false;\n+\n+\t\t\tif (npcCached == null || npcCached.getName() == null)\n+\t\t\t{\n+\t\t\t\tnpcFound = false;\n+\t\t\t}\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\tmatchesList = highlights.stream()\n+\t\t\t\t\t.filter(highlight -> !highlight.equals(npcCached.getName().toLowerCase()))\n+\t\t\t\t\t.anyMatch(highlight -> WildcardMatcher.matches(highlight, npcCached.getName().toLowerCase()));\n+\t\t\t}\n+\n \t\t\tMenuEntry[] menuEntries = client.getMenuEntries();\n-\t\t\tmenuEntries = Arrays.copyOf(menuEntries, menuEntries.length + 1);\n+\n+\t\t\tif (npcFound && !matchesList)\n+\t\t\t{\n+\t\t\t\tmenuEntries = Arrays.copyOf(menuEntries, menuEntries.length + 2);\n+\t\t\t\tfinal MenuEntry tagAllEntry = menuEntries[menuEntries.length - 2] = new MenuEntry();\n+\t\t\t\ttagAllEntry.setOption((Arrays.stream(config.getNpcToHighlight().split(\",\")).anyMatch(npc -> npc.toLowerCase().equals(npcCached.getName().toLowerCase())) ? UNTAG_ALL : TAG_ALL));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6045c672d40b6ab304e4f87449822dff40d8ad2"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxNDQ2NQ==", "bodyText": "This just becomes highlighedNpcs.contains(npc)", "url": "https://github.com/runelite/runelite/pull/12032#discussion_r447914465", "createdAt": "2020-06-30T19:02:54Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/npchighlight/NpcIndicatorsPlugin.java", "diffHunk": "@@ -270,16 +267,50 @@ public void onMenuEntryAdded(MenuEntryAdded event)\n \t\t}\n \t\telse if (menuAction == MenuAction.EXAMINE_NPC && client.isKeyPressed(KeyCode.KC_SHIFT))\n \t\t{\n-\t\t\t// Add tag option\n+\t\t\t// Add tag and tag-all options\n+\t\t\tfinal int id = event.getIdentifier();\n+\t\t\tfinal NPC[] cachedNPCs = client.getCachedNPCs();\n+\t\t\tfinal NPC npcCached = cachedNPCs[id];\n+\t\t\tboolean npcFound = true;\n+\t\t\tboolean matchesList = false;\n+\n+\t\t\tif (npcCached == null || npcCached.getName() == null)\n+\t\t\t{\n+\t\t\t\tnpcFound = false;\n+\t\t\t}\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\tmatchesList = highlights.stream()\n+\t\t\t\t\t.filter(highlight -> !highlight.equals(npcCached.getName().toLowerCase()))\n+\t\t\t\t\t.anyMatch(highlight -> WildcardMatcher.matches(highlight, npcCached.getName().toLowerCase()));\n+\t\t\t}\n+\n \t\t\tMenuEntry[] menuEntries = client.getMenuEntries();\n-\t\t\tmenuEntries = Arrays.copyOf(menuEntries, menuEntries.length + 1);\n+\n+\t\t\tif (npcFound && !matchesList)\n+\t\t\t{\n+\t\t\t\tmenuEntries = Arrays.copyOf(menuEntries, menuEntries.length + 2);\n+\t\t\t\tfinal MenuEntry tagAllEntry = menuEntries[menuEntries.length - 2] = new MenuEntry();\n+\t\t\t\ttagAllEntry.setOption((Arrays.stream(config.getNpcToHighlight().split(\",\")).anyMatch(npc -> npc.toLowerCase().equals(npcCached.getName().toLowerCase())) ? UNTAG_ALL : TAG_ALL));\n+\t\t\t\ttagAllEntry.setTarget(event.getTarget());\n+\t\t\t\ttagAllEntry.setParam0(event.getActionParam0());\n+\t\t\t\ttagAllEntry.setParam1(event.getActionParam1());\n+\t\t\t\ttagAllEntry.setIdentifier(event.getIdentifier());\n+\t\t\t\ttagAllEntry.setType(MenuAction.RUNELITE.getId());\n+\t\t\t}\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\tmenuEntries = Arrays.copyOf(menuEntries, menuEntries.length + 1);\n+\t\t\t}\n+\n \t\t\tfinal MenuEntry tagEntry = menuEntries[menuEntries.length - 1] = new MenuEntry();\n-\t\t\ttagEntry.setOption(highlightedNpcs.stream().anyMatch(npc -> npc.getIndex() == event.getIdentifier()) ? UNTAG : TAG);\n+\t\t\ttagEntry.setOption((highlightedNpcs.stream().anyMatch(npc -> npc.getIndex() == event.getIdentifier()) ? UNTAG : TAG));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6045c672d40b6ab304e4f87449822dff40d8ad2"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxNDc5NQ==", "bodyText": "These 3 lines + the conditionals below are duplicated in both branches, so move them to be above.", "url": "https://github.com/runelite/runelite/pull/12032#discussion_r447914795", "createdAt": "2020-06-30T19:03:27Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/npchighlight/NpcIndicatorsPlugin.java", "diffHunk": "@@ -288,37 +319,69 @@ else if (menuAction == MenuAction.EXAMINE_NPC && client.isKeyPressed(KeyCode.KC_\n \tpublic void onMenuOptionClicked(MenuOptionClicked click)\n \t{\n \t\tif (click.getMenuAction() != MenuAction.RUNELITE ||\n-\t\t\t!(click.getMenuOption().equals(TAG) || click.getMenuOption().equals(UNTAG)))\n+\t\t\t(!(click.getMenuOption().equals(TAG) || click.getMenuOption().equals(UNTAG)) &&\n+\t\t\t(!(click.getMenuOption().equals(TAG_ALL) || click.getMenuOption().equals(UNTAG_ALL)))))\n \t\t{\n \t\t\treturn;\n \t\t}\n \n-\t\tfinal int id = click.getId();\n-\t\tfinal boolean removed = npcTags.remove(id);\n-\t\tfinal NPC[] cachedNPCs = client.getCachedNPCs();\n-\t\tfinal NPC npc = cachedNPCs[id];\n-\n-\t\tif (npc == null || npc.getName() == null)\n+\t\tif (click.getMenuOption().equals(TAG) || click.getMenuOption().equals(UNTAG))\n \t\t{\n-\t\t\treturn;\n-\t\t}\n+\t\t\tfinal int id = click.getId();\n+\t\t\tfinal boolean removed = npcTags.remove(id);\n+\t\t\tfinal NPC[] cachedNPCs = client.getCachedNPCs();\n+\t\t\tfinal NPC npc = cachedNPCs[id];\n \n-\t\tif (removed)\n-\t\t{\n-\t\t\thighlightedNpcs.remove(npc);\n-\t\t\tmemorizedNpcs.remove(npc.getIndex());\n+\t\t\tif (npc == null || npc.getName() == null)\n+\t\t\t{\n+\t\t\t\treturn;\n+\t\t\t}\n+\n+\t\t\tif (removed)\n+\t\t\t{\n+\t\t\t\thighlightedNpcs.remove(npc);\n+\t\t\t\tmemorizedNpcs.remove(npc.getIndex());\n+\t\t\t}\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\tif (!client.isInInstancedRegion())\n+\t\t\t\t{\n+\t\t\t\t\tmemorizeNpc(npc);\n+\t\t\t\t\tnpcTags.add(id);\n+\t\t\t\t}\n+\t\t\t\thighlightedNpcs.add(npc);\n+\t\t\t}\n+\n+\t\t\tclick.consume();\n \t\t}\n \t\telse\n \t\t{\n-\t\t\tif (!client.isInInstancedRegion())\n+\t\t\tfinal String npcNames = config.getNpcToHighlight().toLowerCase();\n+\t\t\tList<String> highlightNames = new ArrayList<>();\n+\n+\t\t\tif (!npcNames.trim().isEmpty())\n \t\t\t{\n-\t\t\t\tmemorizeNpc(npc);\n-\t\t\t\tnpcTags.add(id);\n+\t\t\t\thighlightNames = new ArrayList<>(Arrays.asList(npcNames.split(\",\")));\n \t\t\t}\n-\t\t\thighlightedNpcs.add(npc);\n-\t\t}\n \n-\t\tclick.consume();\n+\t\t\tfinal int id = click.getId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6045c672d40b6ab304e4f87449822dff40d8ad2"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxNTExMg==", "bodyText": "This is force tolowering the user's config option which it should not be doing.", "url": "https://github.com/runelite/runelite/pull/12032#discussion_r447915112", "createdAt": "2020-06-30T19:04:05Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/npchighlight/NpcIndicatorsPlugin.java", "diffHunk": "@@ -288,37 +319,69 @@ else if (menuAction == MenuAction.EXAMINE_NPC && client.isKeyPressed(KeyCode.KC_\n \tpublic void onMenuOptionClicked(MenuOptionClicked click)\n \t{\n \t\tif (click.getMenuAction() != MenuAction.RUNELITE ||\n-\t\t\t!(click.getMenuOption().equals(TAG) || click.getMenuOption().equals(UNTAG)))\n+\t\t\t(!(click.getMenuOption().equals(TAG) || click.getMenuOption().equals(UNTAG)) &&\n+\t\t\t(!(click.getMenuOption().equals(TAG_ALL) || click.getMenuOption().equals(UNTAG_ALL)))))\n \t\t{\n \t\t\treturn;\n \t\t}\n \n-\t\tfinal int id = click.getId();\n-\t\tfinal boolean removed = npcTags.remove(id);\n-\t\tfinal NPC[] cachedNPCs = client.getCachedNPCs();\n-\t\tfinal NPC npc = cachedNPCs[id];\n-\n-\t\tif (npc == null || npc.getName() == null)\n+\t\tif (click.getMenuOption().equals(TAG) || click.getMenuOption().equals(UNTAG))\n \t\t{\n-\t\t\treturn;\n-\t\t}\n+\t\t\tfinal int id = click.getId();\n+\t\t\tfinal boolean removed = npcTags.remove(id);\n+\t\t\tfinal NPC[] cachedNPCs = client.getCachedNPCs();\n+\t\t\tfinal NPC npc = cachedNPCs[id];\n \n-\t\tif (removed)\n-\t\t{\n-\t\t\thighlightedNpcs.remove(npc);\n-\t\t\tmemorizedNpcs.remove(npc.getIndex());\n+\t\t\tif (npc == null || npc.getName() == null)\n+\t\t\t{\n+\t\t\t\treturn;\n+\t\t\t}\n+\n+\t\t\tif (removed)\n+\t\t\t{\n+\t\t\t\thighlightedNpcs.remove(npc);\n+\t\t\t\tmemorizedNpcs.remove(npc.getIndex());\n+\t\t\t}\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\tif (!client.isInInstancedRegion())\n+\t\t\t\t{\n+\t\t\t\t\tmemorizeNpc(npc);\n+\t\t\t\t\tnpcTags.add(id);\n+\t\t\t\t}\n+\t\t\t\thighlightedNpcs.add(npc);\n+\t\t\t}\n+\n+\t\t\tclick.consume();\n \t\t}\n \t\telse\n \t\t{\n-\t\t\tif (!client.isInInstancedRegion())\n+\t\t\tfinal String npcNames = config.getNpcToHighlight().toLowerCase();\n+\t\t\tList<String> highlightNames = new ArrayList<>();\n+\n+\t\t\tif (!npcNames.trim().isEmpty())\n \t\t\t{\n-\t\t\t\tmemorizeNpc(npc);\n-\t\t\t\tnpcTags.add(id);\n+\t\t\t\thighlightNames = new ArrayList<>(Arrays.asList(npcNames.split(\",\")));\n \t\t\t}\n-\t\t\thighlightedNpcs.add(npc);\n-\t\t}\n \n-\t\tclick.consume();\n+\t\t\tfinal int id = click.getId();\n+\t\t\tfinal NPC[] cachedNPCs = client.getCachedNPCs();\n+\t\t\tfinal NPC npc = cachedNPCs[id];\n+\n+\t\t\tif (npc == null || npc.getName() == null)\n+\t\t\t{\n+\t\t\t\treturn;\n+\t\t\t}\n+\n+\t\t\tfinal String name = npc.getName().toLowerCase();\n+\t\t\tfinal boolean removed = highlightNames.remove(name);\n+\n+\t\t\tif (!removed)\n+\t\t\t{\n+\t\t\t\thighlightNames.add(name);\n+\t\t\t}\n+\t\t\tconfig.setNpcToHighlight(String.join(\",\", highlightNames));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6045c672d40b6ab304e4f87449822dff40d8ad2"}, "originalPosition": 166}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMzYwODQy", "url": "https://github.com/runelite/runelite/pull/12032#pullrequestreview-440360842", "createdAt": "2020-06-30T20:27:54Z", "commit": {"oid": "96164fa4f213f5919789c7fd4fefa9d0300413b4"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDoyNzo1NFrOGrNP8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDozOToxOFrOGrNmFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk1OTAyNQ==", "bodyText": "This lowercase isn't necessary and just causes it to be added to the user's list in lowercase.", "url": "https://github.com/runelite/runelite/pull/12032#discussion_r447959025", "createdAt": "2020-06-30T20:27:54Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/npchighlight/NpcIndicatorsPlugin.java", "diffHunk": "@@ -303,22 +331,33 @@ public void onMenuOptionClicked(MenuOptionClicked click)\n \t\t\treturn;\n \t\t}\n \n-\t\tif (removed)\n+\t\tif (click.getMenuOption().equals(TAG) || click.getMenuOption().equals(UNTAG))\n \t\t{\n-\t\t\thighlightedNpcs.remove(npc);\n-\t\t\tmemorizedNpcs.remove(npc.getIndex());\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tif (!client.isInInstancedRegion())\n+\t\t\tfinal boolean removed = npcTags.remove(id);\n+\n+\t\t\tif (removed)\n \t\t\t{\n-\t\t\t\tmemorizeNpc(npc);\n-\t\t\t\tnpcTags.add(id);\n+\t\t\t\thighlightedNpcs.remove(npc);\n+\t\t\t\tmemorizedNpcs.remove(npc.getIndex());\n \t\t\t}\n-\t\t\thighlightedNpcs.add(npc);\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\tif (!client.isInInstancedRegion())\n+\t\t\t\t{\n+\t\t\t\t\tmemorizeNpc(npc);\n+\t\t\t\t\tnpcTags.add(id);\n+\t\t\t\t}\n+\t\t\t\thighlightedNpcs.add(npc);\n+\t\t\t}\n+\n+\t\t\tclick.consume();\n \t\t}\n+\t\telse\n+\t\t{\n+\t\t\tfinal String name = npc.getName().toLowerCase();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96164fa4f213f5919789c7fd4fefa9d0300413b4"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk1OTIxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\ttagEntry.setOption((highlightedNpcs.contains(npcCached) ? UNTAG : TAG));\n          \n          \n            \n            \t\t\ttagEntry.setOption(highlightedNpcs.contains(npcCached) ? UNTAG : TAG);", "url": "https://github.com/runelite/runelite/pull/12032#discussion_r447959214", "createdAt": "2020-06-30T20:28:16Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/npchighlight/NpcIndicatorsPlugin.java", "diffHunk": "@@ -270,16 +267,47 @@ public void onMenuEntryAdded(MenuEntryAdded event)\n \t\t}\n \t\telse if (menuAction == MenuAction.EXAMINE_NPC && client.isKeyPressed(KeyCode.KC_SHIFT))\n \t\t{\n-\t\t\t// Add tag option\n+\t\t\t// Add tag and tag-all options\n+\t\t\tfinal int id = event.getIdentifier();\n+\t\t\tfinal NPC[] cachedNPCs = client.getCachedNPCs();\n+\t\t\tfinal NPC npcCached = cachedNPCs[id];\n+\n+\t\t\tif (npcCached == null || npcCached.getName() == null)\n+\t\t\t{\n+\t\t\t\treturn;\n+\t\t\t}\n+\n+\t\t\tfinal String npcName = npcCached.getName().toLowerCase();\n+\t\t\tboolean\tmatchesList = highlights.stream()\n+\t\t\t\t\t.filter(highlight -> !highlight.equals(npcName))\n+\t\t\t\t\t.anyMatch(highlight -> WildcardMatcher.matches(highlight, npcName));\n+\n \t\t\tMenuEntry[] menuEntries = client.getMenuEntries();\n-\t\t\tmenuEntries = Arrays.copyOf(menuEntries, menuEntries.length + 1);\n+\n+\t\t\tif (!matchesList)\n+\t\t\t{\n+\t\t\t\tmenuEntries = Arrays.copyOf(menuEntries, menuEntries.length + 2);\n+\t\t\t\tfinal MenuEntry tagAllEntry = menuEntries[menuEntries.length - 2] = new MenuEntry();\n+\t\t\t\ttagAllEntry.setOption(highlights.contains(npcName) ? UNTAG_ALL : TAG_ALL);\n+\t\t\t\ttagAllEntry.setTarget(event.getTarget());\n+\t\t\t\ttagAllEntry.setParam0(event.getActionParam0());\n+\t\t\t\ttagAllEntry.setParam1(event.getActionParam1());\n+\t\t\t\ttagAllEntry.setIdentifier(event.getIdentifier());\n+\t\t\t\ttagAllEntry.setType(MenuAction.RUNELITE.getId());\n+\t\t\t}\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\tmenuEntries = Arrays.copyOf(menuEntries, menuEntries.length + 1);\n+\t\t\t}\n+\n \t\t\tfinal MenuEntry tagEntry = menuEntries[menuEntries.length - 1] = new MenuEntry();\n-\t\t\ttagEntry.setOption(highlightedNpcs.stream().anyMatch(npc -> npc.getIndex() == event.getIdentifier()) ? UNTAG : TAG);\n+\t\t\ttagEntry.setOption((highlightedNpcs.contains(npcCached) ? UNTAG : TAG));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96164fa4f213f5919789c7fd4fefa9d0300413b4"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2MTQzNg==", "bodyText": "This should include a comment explaining what it is trying to do, eg\n// Only add Untag options to npcs not highlighted by a wildcard entry, because untag-all will not remove wildcards", "url": "https://github.com/runelite/runelite/pull/12032#discussion_r447961436", "createdAt": "2020-06-30T20:32:32Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/npchighlight/NpcIndicatorsPlugin.java", "diffHunk": "@@ -270,16 +267,47 @@ public void onMenuEntryAdded(MenuEntryAdded event)\n \t\t}\n \t\telse if (menuAction == MenuAction.EXAMINE_NPC && client.isKeyPressed(KeyCode.KC_SHIFT))\n \t\t{\n-\t\t\t// Add tag option\n+\t\t\t// Add tag and tag-all options\n+\t\t\tfinal int id = event.getIdentifier();\n+\t\t\tfinal NPC[] cachedNPCs = client.getCachedNPCs();\n+\t\t\tfinal NPC npcCached = cachedNPCs[id];\n+\n+\t\t\tif (npcCached == null || npcCached.getName() == null)\n+\t\t\t{\n+\t\t\t\treturn;\n+\t\t\t}\n+\n+\t\t\tfinal String npcName = npcCached.getName().toLowerCase();\n+\t\t\tboolean\tmatchesList = highlights.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96164fa4f213f5919789c7fd4fefa9d0300413b4"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2MTU4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tfinal NPC npcCached = cachedNPCs[id];\n          \n          \n            \n            \t\t\tfinal NPC npc = cachedNPCs[id];\n          \n      \n    \n    \n  \n\nThe \"cached\" name the API uses is basically mis-named currently.", "url": "https://github.com/runelite/runelite/pull/12032#discussion_r447961585", "createdAt": "2020-06-30T20:32:52Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/npchighlight/NpcIndicatorsPlugin.java", "diffHunk": "@@ -270,16 +267,47 @@ public void onMenuEntryAdded(MenuEntryAdded event)\n \t\t}\n \t\telse if (menuAction == MenuAction.EXAMINE_NPC && client.isKeyPressed(KeyCode.KC_SHIFT))\n \t\t{\n-\t\t\t// Add tag option\n+\t\t\t// Add tag and tag-all options\n+\t\t\tfinal int id = event.getIdentifier();\n+\t\t\tfinal NPC[] cachedNPCs = client.getCachedNPCs();\n+\t\t\tfinal NPC npcCached = cachedNPCs[id];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96164fa4f213f5919789c7fd4fefa9d0300413b4"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2MjI5NA==", "bodyText": "This works due to this triggering the config change event to rebuild npcs right? Would add\n// this triggers the config change event and rebuilds npcs", "url": "https://github.com/runelite/runelite/pull/12032#discussion_r447962294", "createdAt": "2020-06-30T20:34:13Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/npchighlight/NpcIndicatorsPlugin.java", "diffHunk": "@@ -388,6 +427,18 @@ public void onGameTick(GameTick event)\n \t\tlastPlayerLocation = client.getLocalPlayer().getWorldLocation();\n \t}\n \n+\tvoid updateList(String item)\n+\t{\n+\t\tfinal List<String> highlightedNpcs = new ArrayList<>(highlights);\n+\n+\t\tif (!highlightedNpcs.removeIf(item::equalsIgnoreCase))\n+\t\t{\n+\t\t\thighlightedNpcs.add(item);\n+\t\t}\n+\n+\t\tconfig.setNpcToHighlight(Text.toCSV(highlightedNpcs));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96164fa4f213f5919789c7fd4fefa9d0300413b4"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2MzMzMQ==", "bodyText": "This reduces to:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t(!(click.getMenuOption().equals(TAG) || click.getMenuOption().equals(UNTAG)) &&\n          \n          \n            \n            \t\t\t!(click.getMenuOption().equals(TAG) || click.getMenuOption().equals(UNTAG) || click.getMenuOption().equals(TAG_ALL) || click.getMenuOption().equals(UNTAG_ALL))", "url": "https://github.com/runelite/runelite/pull/12032#discussion_r447963331", "createdAt": "2020-06-30T20:36:25Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/npchighlight/NpcIndicatorsPlugin.java", "diffHunk": "@@ -288,13 +316,13 @@ else if (menuAction == MenuAction.EXAMINE_NPC && client.isKeyPressed(KeyCode.KC_\n \tpublic void onMenuOptionClicked(MenuOptionClicked click)\n \t{\n \t\tif (click.getMenuAction() != MenuAction.RUNELITE ||\n-\t\t\t!(click.getMenuOption().equals(TAG) || click.getMenuOption().equals(UNTAG)))\n+\t\t\t(!(click.getMenuOption().equals(TAG) || click.getMenuOption().equals(UNTAG)) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96164fa4f213f5919789c7fd4fefa9d0300413b4"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2NDI3Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tvoid updateList(String item)\n          \n          \n            \n            \tprivate void updateNpcsToHighlight(String npc)", "url": "https://github.com/runelite/runelite/pull/12032#discussion_r447964277", "createdAt": "2020-06-30T20:38:28Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/npchighlight/NpcIndicatorsPlugin.java", "diffHunk": "@@ -388,6 +427,18 @@ public void onGameTick(GameTick event)\n \t\tlastPlayerLocation = client.getLocalPlayer().getWorldLocation();\n \t}\n \n+\tvoid updateList(String item)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96164fa4f213f5919789c7fd4fefa9d0300413b4"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2NDY5NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tvoid setNpcToHighlight(String key);\n          \n          \n            \n            \tvoid setNpcToHighlight(String npcsToHighlight);", "url": "https://github.com/runelite/runelite/pull/12032#discussion_r447964695", "createdAt": "2020-06-30T20:39:18Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/npchighlight/NpcIndicatorsConfig.java", "diffHunk": "@@ -87,6 +87,13 @@ default String getNpcToHighlight()\n \t\treturn \"\";\n \t}\n \n+\t@ConfigItem(\n+\t\tkeyName = \"npcToHighlight\",\n+\t\tname = \"\",\n+\t\tdescription = \"\"\n+\t)\n+\tvoid setNpcToHighlight(String key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96164fa4f213f5919789c7fd4fefa9d0300413b4"}, "originalPosition": 9}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5a38c4b0e613b7927c49b6ca0414e4eee76456fb", "author": {"user": {"login": "zeffirojoe", "name": "Joseph Zeffiro"}}, "url": "https://github.com/runelite/runelite/commit/5a38c4b0e613b7927c49b6ca0414e4eee76456fb", "committedDate": "2020-06-30T21:16:31Z", "message": "Adding more suggested changes"}, "afterCommit": {"oid": "e3eae815b69ce6b8ed34d380857c258cad2b2423", "author": {"user": {"login": "zeffirojoe", "name": "Joseph Zeffiro"}}, "url": "https://github.com/runelite/runelite/commit/e3eae815b69ce6b8ed34d380857c258cad2b2423", "committedDate": "2020-07-01T14:23:15Z", "message": "npc indicators: add (un)tag-all option\n\nThis modifies the tagged npc list allowing all npcs of a certain name to\nbe tagged\n\nCo-authored-by: Adam <Adam@sigterm.info>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80afe21d0e7bad6f62fede1cc29dd8e1d76c792d", "author": {"user": {"login": "zeffirojoe", "name": "Joseph Zeffiro"}}, "url": "https://github.com/runelite/runelite/commit/80afe21d0e7bad6f62fede1cc29dd8e1d76c792d", "committedDate": "2020-07-01T14:47:46Z", "message": "npc indicators: add (un)tag-all option\n\nThis modifies the tagged npc list allowing all npcs of a certain name to\nbe tagged\n\nCo-authored-by: Adam <Adam@sigterm.info>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e3eae815b69ce6b8ed34d380857c258cad2b2423", "author": {"user": {"login": "zeffirojoe", "name": "Joseph Zeffiro"}}, "url": "https://github.com/runelite/runelite/commit/e3eae815b69ce6b8ed34d380857c258cad2b2423", "committedDate": "2020-07-01T14:23:15Z", "message": "npc indicators: add (un)tag-all option\n\nThis modifies the tagged npc list allowing all npcs of a certain name to\nbe tagged\n\nCo-authored-by: Adam <Adam@sigterm.info>"}, "afterCommit": {"oid": "80afe21d0e7bad6f62fede1cc29dd8e1d76c792d", "author": {"user": {"login": "zeffirojoe", "name": "Joseph Zeffiro"}}, "url": "https://github.com/runelite/runelite/commit/80afe21d0e7bad6f62fede1cc29dd8e1d76c792d", "committedDate": "2020-07-01T14:47:46Z", "message": "npc indicators: add (un)tag-all option\n\nThis modifies the tagged npc list allowing all npcs of a certain name to\nbe tagged\n\nCo-authored-by: Adam <Adam@sigterm.info>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3434, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}