{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3NDI1NTAx", "number": 12434, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wOFQwMzoxMDoyM1rOF76B3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wOFQwMzoyMToyOVrOF76Fsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk4MzYxMDUzOnYy", "diffSide": "RIGHT", "path": "runelite-client/src/main/resources/net/runelite/client/plugins/chatcommands/pets.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wOFQwMzoxMDoyM1rOJXkLvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wOFQwMzoxMDoyM1rOJXkLvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODY4OTg1Mg==", "bodyText": "This would probably be better represented just by having a Pet enum with a (name, item) constructor. Then you can just use Pet.values() to get a Pet[]", "url": "https://github.com/runelite/runelite/pull/12434#discussion_r628689852", "createdAt": "2021-05-08T03:10:23Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/resources/net/runelite/client/plugins/chatcommands/pets.json", "diffHunk": "@@ -0,0 +1,194 @@\n+[\n+  {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faecfaac743be4027018dcdc3abf3ca87dac31ed"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk4MzYxMDYyOnYy", "diffSide": "RIGHT", "path": "runelite-client/src/main/java/net/runelite/client/plugins/chatcommands/ChatCommandsPlugin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wOFQwMzoxMDozM1rOJXkLxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wOFQwMzoxMDozM1rOJXkLxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODY4OTg2Mw==", "bodyText": "missing break;", "url": "https://github.com/runelite/runelite/pull/12434#discussion_r628689863", "createdAt": "2021-05-08T03:10:33Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/chatcommands/ChatCommandsPlugin.java", "diffHunk": "@@ -562,6 +701,9 @@ public void onGameStateChanged(GameStateChanged event)\n \t\t\tcase LOADING:\n \t\t\tcase HOPPING:\n \t\t\t\tpohOwner = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faecfaac743be4027018dcdc3abf3ca87dac31ed"}, "originalPosition": 239}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk4MzYxMjE2OnYy", "diffSide": "RIGHT", "path": "runelite-client/src/main/java/net/runelite/client/plugins/chatcommands/ChatCommandsPlugin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wOFQwMzoxMTo1OVrOJXkMeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wOFQwMzoxMTo1OVrOJXkMeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODY5MDA0MA==", "bodyText": "It's possible to look at someone else's collection log in their poh, so this should check that similar to how the boss log checks it.", "url": "https://github.com/runelite/runelite/pull/12434#discussion_r628690040", "createdAt": "2021-05-08T03:11:59Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/chatcommands/ChatCommandsPlugin.java", "diffHunk": "@@ -469,6 +585,26 @@ public void onGameTick(GameTick event)\n \t\t\t}\n \t\t}\n \n+\t\tif (collectionLogLoaded)\n+\t\t{\n+\t\t\tWidget collectionLogEntryHeader = client.getWidget(WidgetInfo.COLLECTION_LOG_ENTRY_HEADER);\n+\t\t\tif (collectionLogEntryHeader != null && collectionLogEntryHeader.getChildren() != null)\n+\t\t\t{\n+\t\t\t\tWidget entryTitle = collectionLogEntryHeader.getChild(COL_LOG_ENTRY_HEADER_TITLE_INDEX);\n+\t\t\t\t// Make sure that the player is looking in the All Pets tab of the collection log\n+\t\t\t\tif (entryTitle.getText().equals(\"All Pets\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faecfaac743be4027018dcdc3abf3ca87dac31ed"}, "originalPosition": 210}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk4MzYxMzQ0OnYy", "diffSide": "RIGHT", "path": "runelite-client/src/main/java/net/runelite/client/plugins/chatcommands/ChatCommandsPlugin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wOFQwMzoxMzoxMlrOJXkNEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wOFQwMzoxMzoxMlrOJXkNEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODY5MDE5Mg==", "bodyText": "Typically we inject Gson into the plugin, since is provided by the injector.", "url": "https://github.com/runelite/runelite/pull/12434#discussion_r628690192", "createdAt": "2021-05-08T03:13:12Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/chatcommands/ChatCommandsPlugin.java", "diffHunk": "@@ -262,6 +285,99 @@ private double getPb(String boss)\n \t\treturn personalBest == null ? 0 : personalBest;\n \t}\n \n+\tprivate void loadPetIcons()\n+\t{\n+\t\tfinal IndexedSprite[] modIcons = client.getModIcons();\n+\t\tif (modIconIdx != -1 || modIcons == null)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\t\tfinal Pet[] pets = getPets();\n+\t\tfinal IndexedSprite[] newModIcons = Arrays.copyOf(modIcons, modIcons.length + pets.length);\n+\t\tmodIconIdx = modIcons.length;\n+\n+\t\tfor (int i = 0; i < pets.length; i++)\n+\t\t{\n+\t\t\tfinal Pet pet = pets[i];\n+\n+\t\t\ttry\n+\t\t\t{\n+\t\t\t\tfinal BufferedImage image = ImageUtil.resizeImage(itemManager.getImage(pet.getIcon()), 18, 16);\n+\t\t\t\tfinal IndexedSprite sprite = ImageUtil.getImageIndexedSprite(image, client);\n+\t\t\t\tnewModIcons[modIconIdx + i] = sprite;\n+\t\t\t}\n+\t\t\tcatch (Exception ex)\n+\t\t\t{\n+\t\t\t\tlog.warn(\"Failed to load the sprite for \" + pet.getName(), ex);\n+\t\t\t}\n+\t\t}\n+\n+\t\tlog.debug(\"Adding pet icons\");\n+\t\tclient.setModIcons(newModIcons);\n+\t}\n+\n+\t/**\n+\t * Sets the list of owned pets in local storage for the local player.\n+\t *\n+\t * @param totalPetList The widget containing the list of owned pets for the local player\n+\t */\n+\tprivate void setPetList(Widget[] totalPetList)\n+\t{\n+\t\tif (totalPetList == null)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tList<Pet> petList = new ArrayList<>();\n+\t\tfor (Widget child : totalPetList)\n+\t\t{\n+\t\t\tif (child.getOpacity() == 0)\n+\t\t\t{\n+\t\t\t\tPet pet = new Pet(\n+\t\t\t\t\tchild.getName().replace(\"<col=ff9040>\", \"\").replace(\"</col>\", \"\"),\n+\t\t\t\t\tchild.getItemId());\n+\t\t\t\tpetList.add(pet);\n+\t\t\t}\n+\t\t}\n+\n+\t\tconfigManager.setRSProfileConfiguration(\"pets\", client.getUsername().toLowerCase(),\n+\t\t\tRuneLiteAPI.GSON.toJson(petList.toArray(new Pet[0])));\n+\t}\n+\n+\t/**\n+\t * Looks up the list of owned pets in local storage for the local player\n+\t */\n+\tprivate Pet[] getPetList()\n+\t{\n+\t\tString petListJson = configManager.getRSProfileConfiguration(\"pets\",\n+\t\t\tclient.getUsername().toLowerCase(), String.class);\n+\n+\t\tPet[] petList = RuneLiteAPI.GSON.fromJson(petListJson, Pet[].class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faecfaac743be4027018dcdc3abf3ca87dac31ed"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk4MzYxNDgyOnYy", "diffSide": "RIGHT", "path": "runelite-client/src/main/java/net/runelite/client/plugins/chatcommands/ChatCommandsPlugin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wOFQwMzoxNDozNVrOJXkNug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wOFQwMzoxNDozNVrOJXkNug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODY5MDM2Mg==", "bodyText": "RSProfileConfiguration is already per RS-profile, so it is not necessary to set the key to the client username. I would probably just use chatcommands as the group and pets as the key.", "url": "https://github.com/runelite/runelite/pull/12434#discussion_r628690362", "createdAt": "2021-05-08T03:14:35Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/chatcommands/ChatCommandsPlugin.java", "diffHunk": "@@ -262,6 +285,99 @@ private double getPb(String boss)\n \t\treturn personalBest == null ? 0 : personalBest;\n \t}\n \n+\tprivate void loadPetIcons()\n+\t{\n+\t\tfinal IndexedSprite[] modIcons = client.getModIcons();\n+\t\tif (modIconIdx != -1 || modIcons == null)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\t\tfinal Pet[] pets = getPets();\n+\t\tfinal IndexedSprite[] newModIcons = Arrays.copyOf(modIcons, modIcons.length + pets.length);\n+\t\tmodIconIdx = modIcons.length;\n+\n+\t\tfor (int i = 0; i < pets.length; i++)\n+\t\t{\n+\t\t\tfinal Pet pet = pets[i];\n+\n+\t\t\ttry\n+\t\t\t{\n+\t\t\t\tfinal BufferedImage image = ImageUtil.resizeImage(itemManager.getImage(pet.getIcon()), 18, 16);\n+\t\t\t\tfinal IndexedSprite sprite = ImageUtil.getImageIndexedSprite(image, client);\n+\t\t\t\tnewModIcons[modIconIdx + i] = sprite;\n+\t\t\t}\n+\t\t\tcatch (Exception ex)\n+\t\t\t{\n+\t\t\t\tlog.warn(\"Failed to load the sprite for \" + pet.getName(), ex);\n+\t\t\t}\n+\t\t}\n+\n+\t\tlog.debug(\"Adding pet icons\");\n+\t\tclient.setModIcons(newModIcons);\n+\t}\n+\n+\t/**\n+\t * Sets the list of owned pets in local storage for the local player.\n+\t *\n+\t * @param totalPetList The widget containing the list of owned pets for the local player\n+\t */\n+\tprivate void setPetList(Widget[] totalPetList)\n+\t{\n+\t\tif (totalPetList == null)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tList<Pet> petList = new ArrayList<>();\n+\t\tfor (Widget child : totalPetList)\n+\t\t{\n+\t\t\tif (child.getOpacity() == 0)\n+\t\t\t{\n+\t\t\t\tPet pet = new Pet(\n+\t\t\t\t\tchild.getName().replace(\"<col=ff9040>\", \"\").replace(\"</col>\", \"\"),\n+\t\t\t\t\tchild.getItemId());\n+\t\t\t\tpetList.add(pet);\n+\t\t\t}\n+\t\t}\n+\n+\t\tconfigManager.setRSProfileConfiguration(\"pets\", client.getUsername().toLowerCase(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faecfaac743be4027018dcdc3abf3ca87dac31ed"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk4MzYxNTE3OnYy", "diffSide": "RIGHT", "path": "runelite-client/src/main/java/net/runelite/client/plugins/chatcommands/ChatCommandsPlugin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wOFQwMzoxNDo1N1rOJXkN6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wOFQwMzoxNDo1N1rOJXkN6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODY5MDQwOQ==", "bodyText": "see Text.removeTags", "url": "https://github.com/runelite/runelite/pull/12434#discussion_r628690409", "createdAt": "2021-05-08T03:14:57Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/chatcommands/ChatCommandsPlugin.java", "diffHunk": "@@ -262,6 +285,99 @@ private double getPb(String boss)\n \t\treturn personalBest == null ? 0 : personalBest;\n \t}\n \n+\tprivate void loadPetIcons()\n+\t{\n+\t\tfinal IndexedSprite[] modIcons = client.getModIcons();\n+\t\tif (modIconIdx != -1 || modIcons == null)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\t\tfinal Pet[] pets = getPets();\n+\t\tfinal IndexedSprite[] newModIcons = Arrays.copyOf(modIcons, modIcons.length + pets.length);\n+\t\tmodIconIdx = modIcons.length;\n+\n+\t\tfor (int i = 0; i < pets.length; i++)\n+\t\t{\n+\t\t\tfinal Pet pet = pets[i];\n+\n+\t\t\ttry\n+\t\t\t{\n+\t\t\t\tfinal BufferedImage image = ImageUtil.resizeImage(itemManager.getImage(pet.getIcon()), 18, 16);\n+\t\t\t\tfinal IndexedSprite sprite = ImageUtil.getImageIndexedSprite(image, client);\n+\t\t\t\tnewModIcons[modIconIdx + i] = sprite;\n+\t\t\t}\n+\t\t\tcatch (Exception ex)\n+\t\t\t{\n+\t\t\t\tlog.warn(\"Failed to load the sprite for \" + pet.getName(), ex);\n+\t\t\t}\n+\t\t}\n+\n+\t\tlog.debug(\"Adding pet icons\");\n+\t\tclient.setModIcons(newModIcons);\n+\t}\n+\n+\t/**\n+\t * Sets the list of owned pets in local storage for the local player.\n+\t *\n+\t * @param totalPetList The widget containing the list of owned pets for the local player\n+\t */\n+\tprivate void setPetList(Widget[] totalPetList)\n+\t{\n+\t\tif (totalPetList == null)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tList<Pet> petList = new ArrayList<>();\n+\t\tfor (Widget child : totalPetList)\n+\t\t{\n+\t\t\tif (child.getOpacity() == 0)\n+\t\t\t{\n+\t\t\t\tPet pet = new Pet(\n+\t\t\t\t\tchild.getName().replace(\"<col=ff9040>\", \"\").replace(\"</col>\", \"\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faecfaac743be4027018dcdc3abf3ca87dac31ed"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk4MzYxNjQxOnYy", "diffSide": "RIGHT", "path": "runelite-client/src/main/java/net/runelite/client/plugins/chatcommands/ChatCommandsPlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wOFQwMzoxNjowMlrOJXkOiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wOFQyMTo0ODo1M1rOJXq7ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODY5MDU2OA==", "bodyText": "What is this for? Does anything here throw?", "url": "https://github.com/runelite/runelite/pull/12434#discussion_r628690568", "createdAt": "2021-05-08T03:16:02Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/chatcommands/ChatCommandsPlugin.java", "diffHunk": "@@ -262,6 +285,99 @@ private double getPb(String boss)\n \t\treturn personalBest == null ? 0 : personalBest;\n \t}\n \n+\tprivate void loadPetIcons()\n+\t{\n+\t\tfinal IndexedSprite[] modIcons = client.getModIcons();\n+\t\tif (modIconIdx != -1 || modIcons == null)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\t\tfinal Pet[] pets = getPets();\n+\t\tfinal IndexedSprite[] newModIcons = Arrays.copyOf(modIcons, modIcons.length + pets.length);\n+\t\tmodIconIdx = modIcons.length;\n+\n+\t\tfor (int i = 0; i < pets.length; i++)\n+\t\t{\n+\t\t\tfinal Pet pet = pets[i];\n+\n+\t\t\ttry\n+\t\t\t{\n+\t\t\t\tfinal BufferedImage image = ImageUtil.resizeImage(itemManager.getImage(pet.getIcon()), 18, 16);\n+\t\t\t\tfinal IndexedSprite sprite = ImageUtil.getImageIndexedSprite(image, client);\n+\t\t\t\tnewModIcons[modIconIdx + i] = sprite;\n+\t\t\t}\n+\t\t\tcatch (Exception ex)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faecfaac743be4027018dcdc3abf3ca87dac31ed"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODgwMDM1Ng==", "bodyText": "As this was pulled directly from how the Emoji plugin works, the try catch was originally for if loading one of the png files failed. Good catch, will remove", "url": "https://github.com/runelite/runelite/pull/12434#discussion_r628800356", "createdAt": "2021-05-08T21:48:53Z", "author": {"login": "IllyaMyshakov"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/chatcommands/ChatCommandsPlugin.java", "diffHunk": "@@ -262,6 +285,99 @@ private double getPb(String boss)\n \t\treturn personalBest == null ? 0 : personalBest;\n \t}\n \n+\tprivate void loadPetIcons()\n+\t{\n+\t\tfinal IndexedSprite[] modIcons = client.getModIcons();\n+\t\tif (modIconIdx != -1 || modIcons == null)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\t\tfinal Pet[] pets = getPets();\n+\t\tfinal IndexedSprite[] newModIcons = Arrays.copyOf(modIcons, modIcons.length + pets.length);\n+\t\tmodIconIdx = modIcons.length;\n+\n+\t\tfor (int i = 0; i < pets.length; i++)\n+\t\t{\n+\t\t\tfinal Pet pet = pets[i];\n+\n+\t\t\ttry\n+\t\t\t{\n+\t\t\t\tfinal BufferedImage image = ImageUtil.resizeImage(itemManager.getImage(pet.getIcon()), 18, 16);\n+\t\t\t\tfinal IndexedSprite sprite = ImageUtil.getImageIndexedSprite(image, client);\n+\t\t\t\tnewModIcons[modIconIdx + i] = sprite;\n+\t\t\t}\n+\t\t\tcatch (Exception ex)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODY5MDU2OA=="}, "originalCommit": {"oid": "faecfaac743be4027018dcdc3abf3ca87dac31ed"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk4MzYxNzA0OnYy", "diffSide": "RIGHT", "path": "http-api/src/main/java/net/runelite/http/api/chat/Pet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wOFQwMzoxNjozOFrOJXkO0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wOFQwMzoxNjozOFrOJXkO0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODY5MDY0MQ==", "bodyText": "See @Data", "url": "https://github.com/runelite/runelite/pull/12434#discussion_r628690641", "createdAt": "2021-05-08T03:16:38Z", "author": {"login": "Adam-"}, "path": "http-api/src/main/java/net/runelite/http/api/chat/Pet.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) 2021, Illya Myshakov <https://github.com/IllyaMyshakov>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.http.api.chat;\n+\n+import java.util.Objects;\n+import lombok.Getter;\n+\n+@Getter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faecfaac743be4027018dcdc3abf3ca87dac31ed"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk4MzYyMDM0OnYy", "diffSide": "RIGHT", "path": "http-api/src/main/java/net/runelite/http/api/chat/Pet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wOFQwMzoyMToyOVrOJXkQWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wOFQwMzoyMToyOVrOJXkQWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODY5MTAzMw==", "bodyText": "Classes are placed in http-api if they are used in both runelite-client and http-service as part of the client <-> service communication, as its classpath is available in both modules. However, you are not using this in http-service, which means this class is in the wrong place.", "url": "https://github.com/runelite/runelite/pull/12434#discussion_r628691033", "createdAt": "2021-05-08T03:21:29Z", "author": {"login": "Adam-"}, "path": "http-api/src/main/java/net/runelite/http/api/chat/Pet.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) 2021, Illya Myshakov <https://github.com/IllyaMyshakov>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.http.api.chat;\n+\n+import java.util.Objects;\n+import lombok.Getter;\n+\n+@Getter\n+public class Pet", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faecfaac743be4027018dcdc3abf3ca87dac31ed"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3365, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}