{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1ODMwMDYy", "number": 11543, "title": "chat-history: add option to clear history for all chatbox tabs", "bodyText": "closes #1366\nAdd a Clear history option to all tabs in the chatbox.\nI'm open to suggestions on categorizing MessageTypes to Chatbox tabs. Ex: Clan chat notifications clear with the Clan tab, not Game tab.. Same with trade notifications.\nAlso, the current revision has the ability to remove mod messages. Idk if jagex's built in public chat clearing also removes mod messages.\nNote: Clan chat messages are now removed with the Clan: Clear history instead of previously Public: Clear history.", "createdAt": "2020-05-11T02:21:51Z", "url": "https://github.com/runelite/runelite/pull/11543", "merged": true, "mergeCommit": {"oid": "d434e48d772781270b3b196936b59b26b5c97683"}, "closed": true, "closedAt": "2020-05-22T19:48:13Z", "author": {"login": "while-loop"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcgGW1lABqjMzMjEwMzgzOTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABckh9cQAFqTQxNzM5MTQ1MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b0950c9d283c4e038be5e5a06811cc22a25b9c51", "author": {"user": {"login": "while-loop", "name": "Anthony"}}, "url": "https://github.com/runelite/runelite/commit/b0950c9d283c4e038be5e5a06811cc22a25b9c51", "committedDate": "2020-05-11T02:17:54Z", "message": "chat-history: add option to clear history for all chatbox tabs"}, "afterCommit": {"oid": "ff642c1bbb4036df3b341e220dd9c873c494b33d", "author": {"user": {"login": "while-loop", "name": "Anthony"}}, "url": "https://github.com/runelite/runelite/commit/ff642c1bbb4036df3b341e220dd9c873c494b33d", "committedDate": "2020-05-11T02:35:54Z", "message": "chat-history: add option to clear history for all chatbox tabs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4ODgwNjAw", "url": "https://github.com/runelite/runelite/pull/11543#pullrequestreview-408880600", "createdAt": "2020-05-11T06:04:35Z", "commit": {"oid": "ff642c1bbb4036df3b341e220dd9c873c494b33d"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNjowNDozNVrOGTNrfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNjoyNDoyNFrOGTOI3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgwMDI1NA==", "bodyText": "Package-private\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic static ChatboxTab of(int widgetId)\n          \n          \n            \n            \tstatic ChatboxTab of(int widgetId)", "url": "https://github.com/runelite/runelite/pull/11543#discussion_r422800254", "createdAt": "2020-05-11T06:04:35Z", "author": {"login": "Nightfirecat"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/chathistory/ChatboxTab.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright (c) 2020, Anthony <https://github.com/while-loop>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.chathistory;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+import lombok.Getter;\n+import net.runelite.api.ChatMessageType;\n+import net.runelite.api.widgets.WidgetInfo;\n+\n+@Getter\n+enum ChatboxTab\n+{\n+\n+\tALL(\"All\", \"Switch tab\", WidgetInfo.CHATBOX_TAB_ALL,\n+\t\tChatMessageType.values()),\n+\n+\t// null 'after' var since we're not adding to menu\n+\tPRIVATE(\"Private\", null, WidgetInfo.CHATBOX_TAB_PRIVATE,\n+\t\tChatMessageType.PRIVATECHAT, ChatMessageType.PRIVATECHATOUT, ChatMessageType.MODPRIVATECHAT,\n+\t\tChatMessageType.LOGINLOGOUTNOTIFICATION),\n+\n+\t// null 'after' var since we're not adding to menu\n+\tPUBLIC(\"Public\", null, WidgetInfo.CHATBOX_TAB_PUBLIC,\n+\t\tChatMessageType.PUBLICCHAT, ChatMessageType.AUTOTYPER, ChatMessageType.MODCHAT, ChatMessageType.MODAUTOTYPER),\n+\n+\tGAME(\"Game\", \"Game: Filter\", WidgetInfo.CHATBOX_TAB_GAME,\n+\t\tChatMessageType.GAMEMESSAGE, ChatMessageType.ENGINE, ChatMessageType.BROADCAST,\n+\t\tChatMessageType.SNAPSHOTFEEDBACK, ChatMessageType.ITEM_EXAMINE, ChatMessageType.NPC_EXAMINE,\n+\t\tChatMessageType.OBJECT_EXAMINE, ChatMessageType.FRIENDNOTIFICATION, ChatMessageType.IGNORENOTIFICATION,\n+\t\tChatMessageType.CONSOLE, ChatMessageType.SPAM, ChatMessageType.PLAYERRELATED, ChatMessageType.TENSECTIMEOUT,\n+\t\tChatMessageType.WELCOME, ChatMessageType.UNKNOWN),\n+\n+\tCLAN(\"Clan\", \"Clan: Off\", WidgetInfo.CHATBOX_TAB_CLAN,\n+\t\tChatMessageType.FRIENDSCHATNOTIFICATION, ChatMessageType.FRIENDSCHAT, ChatMessageType.CHALREQ_FRIENDSCHAT),\n+\n+\tTRADE(\"Trade\", \"Trade: Off\", WidgetInfo.CHATBOX_TAB_TRADE,\n+\t\tChatMessageType.TRADE_SENT, ChatMessageType.TRADEREQ, ChatMessageType.TRADE, ChatMessageType.CHALREQ_TRADE),\n+\t;\n+\n+\tprivate static final Map<Integer, ChatboxTab> TAB_MESSAGE_TYPES = new HashMap<>();\n+\n+\t@Nullable\n+\tprivate final String after;\n+\tprivate final String name;\n+\tprivate final int widgetId;\n+\tprivate final List<ChatMessageType> messageTypes;\n+\n+\tChatboxTab(String name, String after, WidgetInfo widgetId, ChatMessageType... messageTypes)\n+\t{\n+\t\tthis.name = name;\n+\t\tthis.after = after;\n+\t\tthis.widgetId = widgetId.getId();\n+\t\tthis.messageTypes = ImmutableList.copyOf(messageTypes);\n+\t}\n+\n+\tstatic\n+\t{\n+\t\tfor (ChatboxTab t : values())\n+\t\t{\n+\t\t\tTAB_MESSAGE_TYPES.put(t.widgetId, t);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Utility method that maps the type value to its respective\n+\t * {@link ChatboxTab} value.\n+\t *\n+\t * @param widgetId packed widget ID\n+\t * @return appropriate message types for a given chatbox tab widgetId,\n+\t */\n+\tpublic static ChatboxTab of(int widgetId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff642c1bbb4036df3b341e220dd9c873c494b33d"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgwMTAxOQ==", "bodyText": "The @return line is not at all accurate to what this method actually does. I don't think this method is complex enough to need javadoc, so this could be removed.", "url": "https://github.com/runelite/runelite/pull/11543#discussion_r422801019", "createdAt": "2020-05-11T06:06:39Z", "author": {"login": "Nightfirecat"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/chathistory/ChatboxTab.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright (c) 2020, Anthony <https://github.com/while-loop>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.chathistory;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+import lombok.Getter;\n+import net.runelite.api.ChatMessageType;\n+import net.runelite.api.widgets.WidgetInfo;\n+\n+@Getter\n+enum ChatboxTab\n+{\n+\n+\tALL(\"All\", \"Switch tab\", WidgetInfo.CHATBOX_TAB_ALL,\n+\t\tChatMessageType.values()),\n+\n+\t// null 'after' var since we're not adding to menu\n+\tPRIVATE(\"Private\", null, WidgetInfo.CHATBOX_TAB_PRIVATE,\n+\t\tChatMessageType.PRIVATECHAT, ChatMessageType.PRIVATECHATOUT, ChatMessageType.MODPRIVATECHAT,\n+\t\tChatMessageType.LOGINLOGOUTNOTIFICATION),\n+\n+\t// null 'after' var since we're not adding to menu\n+\tPUBLIC(\"Public\", null, WidgetInfo.CHATBOX_TAB_PUBLIC,\n+\t\tChatMessageType.PUBLICCHAT, ChatMessageType.AUTOTYPER, ChatMessageType.MODCHAT, ChatMessageType.MODAUTOTYPER),\n+\n+\tGAME(\"Game\", \"Game: Filter\", WidgetInfo.CHATBOX_TAB_GAME,\n+\t\tChatMessageType.GAMEMESSAGE, ChatMessageType.ENGINE, ChatMessageType.BROADCAST,\n+\t\tChatMessageType.SNAPSHOTFEEDBACK, ChatMessageType.ITEM_EXAMINE, ChatMessageType.NPC_EXAMINE,\n+\t\tChatMessageType.OBJECT_EXAMINE, ChatMessageType.FRIENDNOTIFICATION, ChatMessageType.IGNORENOTIFICATION,\n+\t\tChatMessageType.CONSOLE, ChatMessageType.SPAM, ChatMessageType.PLAYERRELATED, ChatMessageType.TENSECTIMEOUT,\n+\t\tChatMessageType.WELCOME, ChatMessageType.UNKNOWN),\n+\n+\tCLAN(\"Clan\", \"Clan: Off\", WidgetInfo.CHATBOX_TAB_CLAN,\n+\t\tChatMessageType.FRIENDSCHATNOTIFICATION, ChatMessageType.FRIENDSCHAT, ChatMessageType.CHALREQ_FRIENDSCHAT),\n+\n+\tTRADE(\"Trade\", \"Trade: Off\", WidgetInfo.CHATBOX_TAB_TRADE,\n+\t\tChatMessageType.TRADE_SENT, ChatMessageType.TRADEREQ, ChatMessageType.TRADE, ChatMessageType.CHALREQ_TRADE),\n+\t;\n+\n+\tprivate static final Map<Integer, ChatboxTab> TAB_MESSAGE_TYPES = new HashMap<>();\n+\n+\t@Nullable\n+\tprivate final String after;\n+\tprivate final String name;\n+\tprivate final int widgetId;\n+\tprivate final List<ChatMessageType> messageTypes;\n+\n+\tChatboxTab(String name, String after, WidgetInfo widgetId, ChatMessageType... messageTypes)\n+\t{\n+\t\tthis.name = name;\n+\t\tthis.after = after;\n+\t\tthis.widgetId = widgetId.getId();\n+\t\tthis.messageTypes = ImmutableList.copyOf(messageTypes);\n+\t}\n+\n+\tstatic\n+\t{\n+\t\tfor (ChatboxTab t : values())\n+\t\t{\n+\t\t\tTAB_MESSAGE_TYPES.put(t.widgetId, t);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Utility method that maps the type value to its respective\n+\t * {@link ChatboxTab} value.\n+\t *\n+\t * @param widgetId packed widget ID\n+\t * @return appropriate message types for a given chatbox tab widgetId,\n+\t */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff642c1bbb4036df3b341e220dd9c873c494b33d"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgwMTQyMQ==", "bodyText": "Instead of null-checking here, do it in clearChatboxHistory().", "url": "https://github.com/runelite/runelite/pull/11543#discussion_r422801421", "createdAt": "2020-05-11T06:07:50Z", "author": {"login": "Nightfirecat"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/chathistory/ChatHistoryPlugin.java", "diffHunk": "@@ -248,19 +254,11 @@ public void onMenuOpened(MenuOpened event)\n \tpublic void onMenuOptionClicked(MenuOptionClicked event)\n \t{\n \t\tString menuOption = event.getMenuOption();\n+\t\tChatboxTab tab = ChatboxTab.of(event.getWidgetId());\n \n-\t\tif (menuOption.contains(CLEAR_HISTORY))\n+\t\tif (tab != null && menuOption.contains(CLEAR_HISTORY))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff642c1bbb4036df3b341e220dd9c873c494b33d"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgwNzAxNw==", "bodyText": "Empty string is the default and doesn't need to be explicitly set.", "url": "https://github.com/runelite/runelite/pull/11543#discussion_r422807017", "createdAt": "2020-05-11T06:22:32Z", "author": {"login": "Nightfirecat"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/chathistory/ChatHistoryPlugin.java", "diffHunk": "@@ -269,6 +267,82 @@ else if (COPY_TO_CLIPBOARD.equals(menuOption) && !Strings.isNullOrEmpty(currentM\n \t\t}\n \t}\n \n+\t@Subscribe\n+\tpublic void onMenuEntryAdded(MenuEntryAdded entry)\n+\t{\n+\t\tString option = Text.removeTags(entry.getOption());\n+\t\tChatboxTab tab = ChatboxTab.of(entry.getActionParam1());\n+\n+\t\tif (!config.clearHistory() || tab == null || !option.equals(tab.getAfter()))\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\t// Public + private Clear history entries are all one word as the option.\n+\t\t// MenuEntry target is empty string.\n+\t\tfinal MenuEntry clearEntry = new MenuEntry();\n+\t\tChatMessageBuilder optionBldr = new ChatMessageBuilder();\n+\t\tif (tab != ChatboxTab.ALL)\n+\t\t{\n+\t\t\toptionBldr.append(Color.yellow, String.format(\"%s: \", tab.getName()));\n+\t\t}\n+\t\toptionBldr.append(CLEAR_HISTORY);\n+\t\tclearEntry.setOption(optionBldr.build());\n+\n+\t\tclearEntry.setTarget(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff642c1bbb4036df3b341e220dd9c873c494b33d"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgwNzc3NQ==", "bodyText": "Suggested change", "url": "https://github.com/runelite/runelite/pull/11543#discussion_r422807775", "createdAt": "2020-05-11T06:24:24Z", "author": {"login": "Nightfirecat"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/chathistory/ChatHistoryPlugin.java", "diffHunk": "@@ -269,6 +267,82 @@ else if (COPY_TO_CLIPBOARD.equals(menuOption) && !Strings.isNullOrEmpty(currentM\n \t\t}\n \t}\n \n+\t@Subscribe\n+\tpublic void onMenuEntryAdded(MenuEntryAdded entry)\n+\t{\n+\t\tString option = Text.removeTags(entry.getOption());\n+\t\tChatboxTab tab = ChatboxTab.of(entry.getActionParam1());\n+\n+\t\tif (!config.clearHistory() || tab == null || !option.equals(tab.getAfter()))\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\t// Public + private Clear history entries are all one word as the option.\n+\t\t// MenuEntry target is empty string.\n+\t\tfinal MenuEntry clearEntry = new MenuEntry();\n+\t\tChatMessageBuilder optionBldr = new ChatMessageBuilder();\n+\t\tif (tab != ChatboxTab.ALL)\n+\t\t{\n+\t\t\toptionBldr.append(Color.yellow, String.format(\"%s: \", tab.getName()));\n+\t\t}\n+\t\toptionBldr.append(CLEAR_HISTORY);\n+\t\tclearEntry.setOption(optionBldr.build());\n+\n+\t\tclearEntry.setTarget(\"\");\n+\t\tclearEntry.setType(MenuAction.RUNELITE.getId());\n+\t\tif (tab == ChatboxTab.GAME)\n+\t\t{\n+\t\t\t// keep type as the original CC_OP to correctly group \"Game: Clear history\" with\n+\t\t\t// other tab \"Game: *\" options.\n+\t\t\tclearEntry.setType(entry.getType());\n+\t\t}\n+\t\tclearEntry.setParam0(entry.getActionParam0());\n+\t\tclearEntry.setParam1(entry.getActionParam1());\n+\n+\t\tMenuEntry[] newMenu = ObjectArrays.concat(client.getMenuEntries(), clearEntry);\n+\t\tArrayUtils.swap(newMenu, newMenu.length - 1, newMenu.length - 2);\n+\t\tclient.setMenuEntries(newMenu);\n+\t}\n+\n+\tprivate void clearMessageQueue(ChatboxTab tab)\n+\t{\n+\t\tif (tab == ChatboxTab.ALL || tab == ChatboxTab.PRIVATE)\n+\t\t{\n+\t\t\tfriends.clear();\n+\t\t}\n+\n+\t\tmessageQueue.removeIf(e -> tab.getMessageTypes().contains(e.getType()));\n+\t}\n+\n+\tprivate void clearChatboxHistory(ChatboxTab tab)\n+\t{\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff642c1bbb4036df3b341e220dd9c873c494b33d"}, "originalPosition": 137}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ff642c1bbb4036df3b341e220dd9c873c494b33d", "author": {"user": {"login": "while-loop", "name": "Anthony"}}, "url": "https://github.com/runelite/runelite/commit/ff642c1bbb4036df3b341e220dd9c873c494b33d", "committedDate": "2020-05-11T02:35:54Z", "message": "chat-history: add option to clear history for all chatbox tabs"}, "afterCommit": {"oid": "730601253d7b176d9882029c22f4345420c3ae44", "author": {"user": {"login": "while-loop", "name": "Anthony"}}, "url": "https://github.com/runelite/runelite/commit/730601253d7b176d9882029c22f4345420c3ae44", "committedDate": "2020-05-11T13:39:33Z", "message": "chat-history: add option to clear history for all chatbox tabs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5Njk1MDA1", "url": "https://github.com/runelite/runelite/pull/11543#pullrequestreview-409695005", "createdAt": "2020-05-12T04:45:49Z", "commit": {"oid": "730601253d7b176d9882029c22f4345420c3ae44"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2Nzc1MTc5", "url": "https://github.com/runelite/runelite/pull/11543#pullrequestreview-416775179", "createdAt": "2020-05-22T09:30:23Z", "commit": {"oid": "730601253d7b176d9882029c22f4345420c3ae44"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09c8eaba9b7b8d627916fe431cc8606291ecce00", "author": {"user": {"login": "while-loop", "name": "Anthony"}}, "url": "https://github.com/runelite/runelite/commit/09c8eaba9b7b8d627916fe431cc8606291ecce00", "committedDate": "2020-05-22T19:20:38Z", "message": "chat-history: add option to clear history for all chatbox tabs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "544a7bb8e6cf5937f15375cf3f5e799a9a9dba93", "author": {"user": {"login": "deathbeam", "name": "Tomas Slusny"}}, "url": "https://github.com/runelite/runelite/commit/544a7bb8e6cf5937f15375cf3f5e799a9a9dba93", "committedDate": "2020-05-22T19:40:11Z", "message": "Cleanup\n\nSigned-off-by: Tomas Slusny <slusnucky@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "730601253d7b176d9882029c22f4345420c3ae44", "author": {"user": {"login": "while-loop", "name": "Anthony"}}, "url": "https://github.com/runelite/runelite/commit/730601253d7b176d9882029c22f4345420c3ae44", "committedDate": "2020-05-11T13:39:33Z", "message": "chat-history: add option to clear history for all chatbox tabs"}, "afterCommit": {"oid": "544a7bb8e6cf5937f15375cf3f5e799a9a9dba93", "author": {"user": {"login": "deathbeam", "name": "Tomas Slusny"}}, "url": "https://github.com/runelite/runelite/commit/544a7bb8e6cf5937f15375cf3f5e799a9a9dba93", "committedDate": "2020-05-22T19:40:11Z", "message": "Cleanup\n\nSigned-off-by: Tomas Slusny <slusnucky@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MzkxNDUx", "url": "https://github.com/runelite/runelite/pull/11543#pullrequestreview-417391451", "createdAt": "2020-05-24T21:01:20Z", "commit": {"oid": "544a7bb8e6cf5937f15375cf3f5e799a9a9dba93"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQyMTowMToyMFrOGZxRqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQyMTowMToyMFrOGZxRqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY3NDkyMA==", "bodyText": "We usually use immutablemaps for these types of things.", "url": "https://github.com/runelite/runelite/pull/11543#discussion_r429674920", "createdAt": "2020-05-24T21:01:20Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/chathistory/ChatboxTab.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright (c) 2020, Anthony <https://github.com/while-loop>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.chathistory;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+import lombok.Getter;\n+import net.runelite.api.ChatMessageType;\n+import net.runelite.api.widgets.WidgetInfo;\n+\n+@Getter\n+enum ChatboxTab\n+{\n+\n+\tALL(\"All\", \"Switch tab\", WidgetInfo.CHATBOX_TAB_ALL,\n+\t\tChatMessageType.values()),\n+\n+\t// null 'after' var since we're not adding to menu\n+\tPRIVATE(\"Private\", null, WidgetInfo.CHATBOX_TAB_PRIVATE,\n+\t\tChatMessageType.PRIVATECHAT, ChatMessageType.PRIVATECHATOUT, ChatMessageType.MODPRIVATECHAT,\n+\t\tChatMessageType.LOGINLOGOUTNOTIFICATION),\n+\n+\t// null 'after' var since we're not adding to menu\n+\tPUBLIC(\"Public\", null, WidgetInfo.CHATBOX_TAB_PUBLIC,\n+\t\tChatMessageType.PUBLICCHAT, ChatMessageType.AUTOTYPER, ChatMessageType.MODCHAT, ChatMessageType.MODAUTOTYPER),\n+\n+\tGAME(\"Game\", \"Game: Filter\", WidgetInfo.CHATBOX_TAB_GAME,\n+\t\tChatMessageType.GAMEMESSAGE, ChatMessageType.ENGINE, ChatMessageType.BROADCAST,\n+\t\tChatMessageType.SNAPSHOTFEEDBACK, ChatMessageType.ITEM_EXAMINE, ChatMessageType.NPC_EXAMINE,\n+\t\tChatMessageType.OBJECT_EXAMINE, ChatMessageType.FRIENDNOTIFICATION, ChatMessageType.IGNORENOTIFICATION,\n+\t\tChatMessageType.CONSOLE, ChatMessageType.SPAM, ChatMessageType.PLAYERRELATED, ChatMessageType.TENSECTIMEOUT,\n+\t\tChatMessageType.WELCOME, ChatMessageType.UNKNOWN),\n+\n+\tCLAN(\"Clan\", \"Clan: Off\", WidgetInfo.CHATBOX_TAB_CLAN,\n+\t\tChatMessageType.FRIENDSCHATNOTIFICATION, ChatMessageType.FRIENDSCHAT, ChatMessageType.CHALREQ_FRIENDSCHAT),\n+\n+\tTRADE(\"Trade\", \"Trade: Off\", WidgetInfo.CHATBOX_TAB_TRADE,\n+\t\tChatMessageType.TRADE_SENT, ChatMessageType.TRADEREQ, ChatMessageType.TRADE, ChatMessageType.CHALREQ_TRADE),\n+\t;\n+\n+\tprivate static final Map<Integer, ChatboxTab> TAB_MESSAGE_TYPES = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "544a7bb8e6cf5937f15375cf3f5e799a9a9dba93"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3709, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}