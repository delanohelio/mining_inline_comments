{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NzAwMjQy", "number": 11782, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMToyNzoxN1rOEIJAfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMToyNzoxN1rOEIJAfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTcxNjQ0OnYy", "diffSide": "RIGHT", "path": "runelite-client/src/main/java/net/runelite/client/game/ItemMapping.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMToyNzoxN1rOGn7QRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMToyNzoxN1rOGn7QRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUxODQ3MA==", "bodyText": "get() is always non-null.", "url": "https://github.com/runelite/runelite/pull/11782#discussion_r444518470", "createdAt": "2020-06-23T21:27:17Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/game/ItemMapping.java", "diffHunk": "@@ -247,69 +249,102 @@\n \tITEM_CRYSTAL_BOW(CRYSTAL_WEAPON_SEED, CRYSTAL_BOW, CRYSTAL_BOW_24123, CRYSTAL_BOW_INACTIVE),\n \tITEM_CRYSTAL_HALBERD(CRYSTAL_WEAPON_SEED, CRYSTAL_HALBERD, CRYSTAL_HALBERD_24125, CRYSTAL_HALBERD_INACTIVE),\n \tITEM_CRYSTAL_SHIELD(CRYSTAL_WEAPON_SEED, CRYSTAL_SHIELD, CRYSTAL_SHIELD_24127, CRYSTAL_SHIELD_INACTIVE),\n+\tITEM_CRYSTAL_HELMET(CRYSTAL_ARMOUR_SEED, CRYSTAL_HELM, CRYSTAL_HELM_INACTIVE),\n+\tITEM_CRYSTAL_LEGS(CRYSTAL_ARMOUR_SEED, 2L, CRYSTAL_LEGS, CRYSTAL_LEGS_INACTIVE),\n+\tITEM_CRYSTAL_BODY(CRYSTAL_ARMOUR_SEED, 3L, CRYSTAL_BODY, CRYSTAL_BODY_INACTIVE),\n \n \t// Bird nests\n \tITEM_BIRD_NEST(BIRD_NEST_5075, BIRD_NEST, BIRD_NEST_5071, BIRD_NEST_5072, BIRD_NEST_5073, BIRD_NEST_5074, BIRD_NEST_7413, BIRD_NEST_13653, BIRD_NEST_22798, BIRD_NEST_22800, CLUE_NEST_EASY, CLUE_NEST_MEDIUM, CLUE_NEST_HARD, CLUE_NEST_ELITE),\n \n \t// Ancestral robes\n \tITEM_ANCESTRAL_HAT(ANCESTRAL_HAT, TWISTED_ANCESTRAL_HAT),\n \tITEM_ANCESTRAL_ROBE_TOP(ANCESTRAL_ROBE_TOP, TWISTED_ANCESTRAL_ROBE_TOP),\n-\tITEM_ANCESTRAL_ROBE_BOTTOM(ANCESTRAL_ROBE_BOTTOM, TWISTED_ANCESTRAL_ROBE_BOTTOM);\n+\tITEM_ANCESTRAL_ROBE_BOTTOM(ANCESTRAL_ROBE_BOTTOM, TWISTED_ANCESTRAL_ROBE_BOTTOM),\n \n-\tprivate static final Multimap<Integer, Integer> MAPPINGS = HashMultimap.create();\n+\t// Graceful\n+\tITEM_MARK_OF_GRACE(AMYLASE_CRYSTAL, true, 10L, MARK_OF_GRACE),\n+\tITEM_GRACEFUL_HOOD(MARK_OF_GRACE, true, 28L, GRACEFUL_HOOD),\n+\tITEM_GRACEFUL_TOP(MARK_OF_GRACE, true, 44L, GRACEFUL_TOP),\n+\tITEM_GRACEFUL_LEGS(MARK_OF_GRACE, true, 48L, GRACEFUL_LEGS),\n+\tITEM_GRACEFUL_GLOVES(MARK_OF_GRACE, true, 24L, GRACEFUL_GLOVES),\n+\tITEM_GRACEFUL_BOOTS(MARK_OF_GRACE, true, 32L, GRACEFUL_BOOTS),\n+\tITEM_GRACEFUL_CAPE(MARK_OF_GRACE, true, 32L, GRACEFUL_CAPE),\n+\n+\t// 10 golden nuggets = 100 soft clay\n+\tITEM_GOLDEN_NUGGET(SOFT_CLAY, true, 10L, GOLDEN_NUGGET),\n+\tITEM_PROSPECTOR_HELMET(GOLDEN_NUGGET, true, 32L, PROSPECTOR_HELMET),\n+\tITEM_PROSPECTOR_JACKET(GOLDEN_NUGGET, true, 48L, PROSPECTOR_JACKET),\n+\tITEM_PROSPECTOR_LEGS(GOLDEN_NUGGET, true, 40L, PROSPECTOR_LEGS),\n+\tITEM_PROSPECTOR_BOOTS(GOLDEN_NUGGET, true, 24L, PROSPECTOR_BOOTS),\n+\n+\t// Converted to coins\n+\tITEM_TATTERED_PAGE(COINS_995, true, 1000L, TATTERED_MOON_PAGE, TATTERED_SUN_PAGE, TATTERED_TEMPLE_PAGE),\n+\tITEM_LONG_BONE(COINS_995, true, 1000L, LONG_BONE),\n+\tITEM_CURVED_BONE(COINS_995, true, 2000L, CURVED_BONE),\n+\tITEM_PERFECT_SHELL(COINS_995, true, 600L, PERFECT_SHELL),\n+\tITEM_PERFECT_SNAIL_SHELL(COINS_995, true, 600L, PERFECT_SNAIL_SHELL),\n+\tITEM_SNAIL_SHELL(COINS_995, true, 600L, SNAIL_SHELL),\n+\tITEM_TORTOISE_SHELL(COINS_995, true, 250L, TORTOISE_SHELL);\n+\n+\tprivate static final Multimap<Integer, ItemMapping> MAPPINGS = HashMultimap.create();\n \tprivate final int tradeableItem;\n \tprivate final int[] untradableItems;\n+\tprivate final long quantity;\n+\tprivate final boolean untradeable;\n \n \tstatic\n \t{\n \t\tfor (final ItemMapping item : values())\n \t\t{\n \t\t\tfor (int itemId : item.untradableItems)\n \t\t\t{\n-\t\t\t\tMAPPINGS.put(itemId, item.tradeableItem);\n+\t\t\t\tif (item.untradeable)\n+\t\t\t\t{\n+\t\t\t\t\tfor (final Integer variation : ItemVariationMapping.getVariations(itemId))\n+\t\t\t\t\t{\n+\t\t\t\t\t\tMAPPINGS.put(variation, item);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\tMAPPINGS.put(itemId, item);\n \t\t\t}\n \t\t}\n \t}\n \n-\tItemMapping(int tradeableItem, int... untradableItems)\n+\tItemMapping(int tradeableItem, boolean untradeable, long quantity, int... untradableItems)\n \t{\n \t\tthis.tradeableItem = tradeableItem;\n \t\tthis.untradableItems = untradableItems;\n+\t\tthis.quantity = quantity;\n+\t\tthis.untradeable = untradeable;\n \t}\n \n-\t/**\n-\t * Get collection of items that are mapped from single item id.\n-\t *\n-\t * @param itemId the item id\n-\t * @return the collection\n-\t */\n-\tpublic static Collection<Integer> map(int itemId)\n+\tItemMapping(int tradeableItem, long quantity, int... untradableItems)\n \t{\n-\t\tfinal Collection<Integer> mapping = MAPPINGS.get(itemId);\n-\n-\t\tif (mapping == null || mapping.isEmpty())\n-\t\t{\n-\t\t\treturn Collections.singleton(itemId);\n-\t\t}\n+\t\tthis(tradeableItem, false, quantity, untradableItems);\n+\t}\n \n-\t\treturn mapping;\n+\tItemMapping(int tradeableItem, int... untradableItems)\n+\t{\n+\t\tthis(tradeableItem, 1L, untradableItems);\n \t}\n \n \t/**\n-\t * Map an item from its untradeable version to its tradeable version\n+\t * Get collection of items that are mapped from single item id.\n \t *\n-\t * @param itemId\n-\t * @return\n+\t * @param itemId the item id\n+\t * @return the collection\n \t */\n-\tpublic static int mapFirst(int itemId)\n+\t@Nullable\n+\tpublic static Collection<ItemMapping> map(int itemId)\n \t{\n-\t\tfinal Collection<Integer> mapping = MAPPINGS.get(itemId);\n+\t\tfinal Collection<ItemMapping> mapping = MAPPINGS.get(itemId);\n \n \t\tif (mapping == null || mapping.isEmpty())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fa097d96854dcee0768f7c55cfdfa154c7739ca"}, "originalPosition": 134}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3468, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}