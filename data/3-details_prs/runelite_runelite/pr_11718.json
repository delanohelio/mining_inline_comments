{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MTIzNTcz", "number": 11718, "title": "Pyramid plunder", "bodyText": "Adds a pyramid plunder plugin that can:\n\nreplace the default large widget with an overlay (77f5540)\nhighlight unopened doors and speartraps (09aa3ea)\nhighlight unopened urns, chest and sarcophagus based on floor (5b685a4)\n\nHere are the options:\n\nThis is what the custom overlay looks like. I went with a overlay instead of an infobox because I wanted to get rid of the widget as it was getting in my way while playing in fixed mode and still wanting to see information such as floor. You will also get an exact timer instead of the bar. When override overlay is on you will get a new overlay and the widget will be hidden, you can also toggle thieving level required as it's not very important.\n\nHere is what the highlight doors and highlight spears turned on look like. Note that once a door is opened it will no longer remain highlighted.\n\nYou can also chose to highlight the urns, chest and sarcophagous if you prefer to click on overlays instead of game objects. It will only highlight them if they are closed. This setting works by selecting a floor. It will then highlight those containers on that floor and up. Setting to 9 effectively disables  highlighting for that object. While I can see how this is a colourful mess, I actually found it useful even though I did not think I would. It's also toggleable so I don't see the harm.\n\nAfter searching I found that a pyramid plunder plugin was removed at some point in time as it was deemed no longer necessary. I find when playing on fixed mode that the widget is still overly large so I would prefer a way to have it removed.\nI'm not the most familiar with runelites code, so if you have any suggestions I would be open to them.\nNote: I'm a pleb that does not have 91 thieving so I could not check that last floor. My experience with the other floors though is that it should not be a problem.\nHere are the related issues I could find:\nCloses: #1983, #2377", "createdAt": "2020-05-27T21:29:05Z", "url": "https://github.com/runelite/runelite/pull/11718", "merged": true, "mergeCommit": {"oid": "c5a698f8525b9da40d73ae409e9fbda55f8385c9"}, "closed": true, "closedAt": "2020-06-24T20:44:19Z", "author": {"login": "Mitchell-Kovacs"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcl0_uggBqjMzODQ3ODI2NjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcufkijABqjM0NzkwOTM4NDc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "87200f91298850ae32a692658c68ece72c4eb41d", "author": {"user": {"login": "Mitchell-Kovacs", "name": "Mitchell Kovacs"}}, "url": "https://github.com/runelite/runelite/commit/87200f91298850ae32a692658c68ece72c4eb41d", "committedDate": "2020-05-28T21:37:50Z", "message": "pyramid-plunder: Use convex hull instead of clickbox for containers. Use infobox instead of overlay for timer. Hide speartrap clickbox once you have passed them."}, "afterCommit": {"oid": "cd6a9f21f8e3c8ea946bcccfd269d73790626cd1", "author": {"user": {"login": "Mitchell-Kovacs", "name": "Mitchell Kovacs"}}, "url": "https://github.com/runelite/runelite/commit/cd6a9f21f8e3c8ea946bcccfd269d73790626cd1", "committedDate": "2020-05-28T21:44:18Z", "message": "pyramid-plunder: Use convex hull instead of clickbox for containers. Use infobox instead of overlay for timer. Hide speartrap clickbox once you have passed them."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MzQxNjEy", "url": "https://github.com/runelite/runelite/pull/11718#pullrequestreview-427341612", "createdAt": "2020-06-09T16:31:55Z", "commit": {"oid": "cd6a9f21f8e3c8ea946bcccfd269d73790626cd1"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNjozMTo1NlrOGhS3Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNjo0NToxN1rOGhTWOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2NTIxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class PyramidPlunderObjects\n          \n          \n            \n            class PyramidPlunderObjects", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r437565214", "createdAt": "2020-06-09T16:31:56Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderObjects.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright (c) 2020 Mitchell <https://github.com/Mitchell-Kovacs>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.pyramidplunder;\n+\n+import com.google.common.collect.ImmutableSet;\n+import java.util.Set;\n+import static net.runelite.api.ObjectID.GRAND_GOLD_CHEST;\n+import static net.runelite.api.ObjectID.SARCOPHAGUS_21255;\n+import static net.runelite.api.ObjectID.SPEARTRAP_21280;\n+import static net.runelite.api.ObjectID.TOMB_DOOR_20948;\n+import static net.runelite.api.ObjectID.URN_21261;\n+import static net.runelite.api.ObjectID.URN_21262;\n+import static net.runelite.api.ObjectID.URN_21263;\n+\n+public class PyramidPlunderObjects", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd6a9f21f8e3c8ea946bcccfd269d73790626cd1"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2NTM5NQ==", "bodyText": "All of the objects in this class should be referencing ObjectID/NullObjectID", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r437565395", "createdAt": "2020-06-09T16:32:16Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderObjects.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright (c) 2020 Mitchell <https://github.com/Mitchell-Kovacs>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.pyramidplunder;\n+\n+import com.google.common.collect.ImmutableSet;\n+import java.util.Set;\n+import static net.runelite.api.ObjectID.GRAND_GOLD_CHEST;\n+import static net.runelite.api.ObjectID.SARCOPHAGUS_21255;\n+import static net.runelite.api.ObjectID.SPEARTRAP_21280;\n+import static net.runelite.api.ObjectID.TOMB_DOOR_20948;\n+import static net.runelite.api.ObjectID.URN_21261;\n+import static net.runelite.api.ObjectID.URN_21262;\n+import static net.runelite.api.ObjectID.URN_21263;\n+\n+public class PyramidPlunderObjects\n+{\n+\tpublic static final Set<Integer> TOMB_DOOR_WALL_IDS = ImmutableSet.of(26618, 26619, 26620, 26621);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd6a9f21f8e3c8ea946bcccfd269d73790626cd1"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2NTU3Ng==", "bodyText": "This can't happen", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r437565576", "createdAt": "2020-06-09T16:32:35Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderOverlay.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright (c) 2020 Mitchell <https://github.com/Mitchell-Kovacs>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.pyramidplunder;\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Graphics2D;\n+import java.awt.Shape;\n+import javax.inject.Inject;\n+import net.runelite.api.Client;\n+import net.runelite.api.ObjectComposition;\n+import net.runelite.api.Point;\n+import net.runelite.api.Varbits;\n+import net.runelite.api.coords.LocalPoint;\n+import net.runelite.api.widgets.Widget;\n+import net.runelite.api.widgets.WidgetInfo;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.GRAND_GOLD_CHEST_CLOSED_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.GRAND_GOLD_CHEST_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SARCOPHAGUS_CLOSED_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SARCOPHAGUS_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SPEARTRAP_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.TOMB_DOOR_CLOSED_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.TOMB_DOOR_WALL_IDS;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.URN_CLOSED_IDS;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.URN_IDS;\n+import net.runelite.client.ui.overlay.Overlay;\n+import net.runelite.client.ui.overlay.OverlayLayer;\n+import net.runelite.client.ui.overlay.OverlayPosition;\n+import net.runelite.client.ui.overlay.OverlayUtil;\n+\n+class PyramidPlunderOverlay extends Overlay\n+{\n+\tprivate static final int MAX_DISTANCE = 2350;\n+\n+\tprivate final Client client;\n+\tprivate final PyramidPlunderPlugin plugin;\n+\tprivate final PyramidPlunderConfig config;\n+\n+\t@Inject\n+\tprivate PyramidPlunderOverlay(Client client, PyramidPlunderPlugin plugin, PyramidPlunderConfig config)\n+\t{\n+\t\tsuper(plugin);\n+\t\tsetPosition(OverlayPosition.DYNAMIC);\n+\t\tsetLayer(OverlayLayer.ABOVE_SCENE);\n+\t\tthis.client = client;\n+\t\tthis.plugin = plugin;\n+\t\tthis.config = config;\n+\t}\n+\n+\t@Override\n+\tpublic Dimension render(Graphics2D graphics)\n+\t{\n+\t\tif (client.getLocalPlayer() == null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd6a9f21f8e3c8ea946bcccfd269d73790626cd1"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2NTc3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class PyramidPlunderTimer extends Timer\n          \n          \n            \n            class PyramidPlunderTimer extends Timer", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r437565779", "createdAt": "2020-06-09T16:32:54Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderTimer.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package net.runelite.client.plugins.pyramidplunder;\n+\n+import java.awt.Color;\n+import java.awt.image.BufferedImage;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import net.runelite.api.Client;\n+import net.runelite.api.Varbits;\n+import net.runelite.client.ui.overlay.infobox.Timer;\n+\n+public class PyramidPlunderTimer extends Timer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd6a9f21f8e3c8ea946bcccfd269d73790626cd1"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2NjA1Mg==", "bodyText": "Add license header to each new file.", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r437566052", "createdAt": "2020-06-09T16:33:25Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderTimer.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package net.runelite.client.plugins.pyramidplunder;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd6a9f21f8e3c8ea946bcccfd269d73790626cd1"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2NjcxNw==", "bodyText": "this can't happen", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r437566717", "createdAt": "2020-06-09T16:34:28Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2020 Mitchell <https://github.com/Mitchell-Kovacs>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.pyramidplunder;\n+\n+import com.google.inject.Provides;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Inject;\n+import lombok.Getter;\n+import net.runelite.api.Client;\n+import net.runelite.api.Constants;\n+import net.runelite.api.GameObject;\n+import net.runelite.api.GameState;\n+import static net.runelite.api.ItemID.PHARAOHS_SCEPTRE;\n+import net.runelite.api.Tile;\n+import net.runelite.api.TileObject;\n+import net.runelite.api.Varbits;\n+import net.runelite.api.WallObject;\n+import net.runelite.api.events.GameObjectSpawned;\n+import net.runelite.api.events.GameStateChanged;\n+import net.runelite.api.events.GameTick;\n+import net.runelite.api.events.WallObjectSpawned;\n+import net.runelite.api.widgets.Widget;\n+import net.runelite.api.widgets.WidgetInfo;\n+import net.runelite.client.config.ConfigManager;\n+import net.runelite.client.eventbus.Subscribe;\n+import net.runelite.client.game.ItemManager;\n+import net.runelite.client.plugins.Plugin;\n+import net.runelite.client.plugins.PluginDescriptor;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.GRAND_GOLD_CHEST_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SARCOPHAGUS_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SPEARTRAP_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.TOMB_DOOR_WALL_IDS;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.URN_IDS;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+import net.runelite.client.ui.overlay.infobox.InfoBoxManager;\n+\n+@PluginDescriptor(\n+\tname = \"Pyramid Plunder\",\n+\tdescription = \"Show custom overlay for Pyramid Plunder\",\n+\ttags = {\"minigame\"},\n+\tenabledByDefault = false\n+)\n+public class PyramidPlunderPlugin extends Plugin\n+{\n+\t// Total number of game ticks until the pyramid plunder round ends (5 minutes)\n+\tprivate static final int PYRAMID_PLUNDER_DURATION = 500;\n+\tprivate static final int PYRAMID_PLUNDER_REGION = 7749;\n+\n+\t@Inject\n+\tprivate Client client;\n+\n+\t@Inject\n+\tprivate PyramidPlunderConfig config;\n+\n+\t@Inject\n+\tprivate OverlayManager overlayManager;\n+\n+\t@Inject\n+\tprivate PyramidPlunderOverlay overlay;\n+\n+\t@Inject\n+\tprivate InfoBoxManager infoBoxManager;\n+\n+\t@Inject\n+\tprivate ItemManager itemManager;\n+\n+\t@Getter\n+\tprivate final Map<TileObject, Tile> tilesToHighlight = new HashMap<>();\n+\n+\t@Getter\n+\tprivate final List<GameObject> objectsToHighlight = new ArrayList<>();\n+\n+\tprivate PyramidPlunderTimer timer;\n+\n+\t@Provides\n+\tPyramidPlunderConfig getConfig(ConfigManager configManager)\n+\t{\n+\t\treturn configManager.getConfig(PyramidPlunderConfig.class);\n+\t}\n+\n+\t@Override\n+\tprotected void startUp() throws Exception\n+\t{\n+\t\toverlayManager.add(overlay);\n+\t}\n+\n+\t@Override\n+\tprotected void shutDown() throws Exception\n+\t{\n+\t\ttilesToHighlight.clear();\n+\t\tobjectsToHighlight.clear();\n+\t\toverlayManager.remove(overlay);\n+\t\ttimer = null;\n+\t\tinfoBoxManager.removeIf(infoBox -> infoBox instanceof PyramidPlunderTimer);\n+\n+\t\tWidget ppWidget = client.getWidget(WidgetInfo.PYRAMID_PLUNDER_DATA);\n+\t\tif (ppWidget != null)\n+\t\t{\n+\t\t\tppWidget.setHidden(false);\n+\t\t}\n+\t}\n+\n+\t@Subscribe\n+\tpublic void onGameStateChanged(GameStateChanged event)\n+\t{\n+\t\tif (event.getGameState() == GameState.LOADING)\n+\t\t{\n+\t\t\ttilesToHighlight.clear();\n+\t\t\tobjectsToHighlight.clear();\n+\t\t}\n+\t}\n+\n+\t@Subscribe\n+\tpublic void onGameTick(GameTick tick)\n+\t{\n+\t\tif (config.showExactTimer() && isInPyramidPlunder())\n+\t\t{\n+\t\t\tif (timer == null)\n+\t\t\t{\n+\t\t\t\tint ppTimer = client.getVar(Varbits.PYRAMID_PLUNDER_TIMER);\n+\t\t\t\tlong timeLeft = (PYRAMID_PLUNDER_DURATION - ppTimer) * Constants.GAME_TICK_LENGTH;\n+\t\t\t\ttimer = new PyramidPlunderTimer(timeLeft, itemManager.getImage(PHARAOHS_SCEPTRE), this,\n+\t\t\t\t\tconfig, client);\n+\t\t\t\tinfoBoxManager.addInfoBox(timer);\n+\t\t\t}\n+\t\t}\n+\t\telse if (timer != null)\n+\t\t{\n+\t\t\tinfoBoxManager.removeIf(infoBox -> infoBox instanceof PyramidPlunderTimer);\n+\t\t\ttimer = null;\n+\t\t}\n+\t}\n+\n+\t@Subscribe\n+\tpublic void onWallObjectSpawned(WallObjectSpawned event)\n+\t{\n+\t\tWallObject object = event.getWallObject();\n+\n+\t\tif (object == null)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tif (TOMB_DOOR_WALL_IDS.contains(object.getId()))\n+\t\t{\n+\t\t\ttilesToHighlight.put(object, event.getTile());\n+\t\t}\n+\t}\n+\n+\t@Subscribe\n+\tpublic void onGameObjectSpawned(GameObjectSpawned event)\n+\t{\n+\t\tGameObject object = event.getGameObject();\n+\n+\t\tif (object == null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd6a9f21f8e3c8ea946bcccfd269d73790626cd1"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2NzExNg==", "bodyText": "This region check is much faster, so check it first.", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r437567116", "createdAt": "2020-06-09T16:35:08Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2020 Mitchell <https://github.com/Mitchell-Kovacs>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.pyramidplunder;\n+\n+import com.google.inject.Provides;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Inject;\n+import lombok.Getter;\n+import net.runelite.api.Client;\n+import net.runelite.api.Constants;\n+import net.runelite.api.GameObject;\n+import net.runelite.api.GameState;\n+import static net.runelite.api.ItemID.PHARAOHS_SCEPTRE;\n+import net.runelite.api.Tile;\n+import net.runelite.api.TileObject;\n+import net.runelite.api.Varbits;\n+import net.runelite.api.WallObject;\n+import net.runelite.api.events.GameObjectSpawned;\n+import net.runelite.api.events.GameStateChanged;\n+import net.runelite.api.events.GameTick;\n+import net.runelite.api.events.WallObjectSpawned;\n+import net.runelite.api.widgets.Widget;\n+import net.runelite.api.widgets.WidgetInfo;\n+import net.runelite.client.config.ConfigManager;\n+import net.runelite.client.eventbus.Subscribe;\n+import net.runelite.client.game.ItemManager;\n+import net.runelite.client.plugins.Plugin;\n+import net.runelite.client.plugins.PluginDescriptor;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.GRAND_GOLD_CHEST_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SARCOPHAGUS_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SPEARTRAP_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.TOMB_DOOR_WALL_IDS;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.URN_IDS;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+import net.runelite.client.ui.overlay.infobox.InfoBoxManager;\n+\n+@PluginDescriptor(\n+\tname = \"Pyramid Plunder\",\n+\tdescription = \"Show custom overlay for Pyramid Plunder\",\n+\ttags = {\"minigame\"},\n+\tenabledByDefault = false\n+)\n+public class PyramidPlunderPlugin extends Plugin\n+{\n+\t// Total number of game ticks until the pyramid plunder round ends (5 minutes)\n+\tprivate static final int PYRAMID_PLUNDER_DURATION = 500;\n+\tprivate static final int PYRAMID_PLUNDER_REGION = 7749;\n+\n+\t@Inject\n+\tprivate Client client;\n+\n+\t@Inject\n+\tprivate PyramidPlunderConfig config;\n+\n+\t@Inject\n+\tprivate OverlayManager overlayManager;\n+\n+\t@Inject\n+\tprivate PyramidPlunderOverlay overlay;\n+\n+\t@Inject\n+\tprivate InfoBoxManager infoBoxManager;\n+\n+\t@Inject\n+\tprivate ItemManager itemManager;\n+\n+\t@Getter\n+\tprivate final Map<TileObject, Tile> tilesToHighlight = new HashMap<>();\n+\n+\t@Getter\n+\tprivate final List<GameObject> objectsToHighlight = new ArrayList<>();\n+\n+\tprivate PyramidPlunderTimer timer;\n+\n+\t@Provides\n+\tPyramidPlunderConfig getConfig(ConfigManager configManager)\n+\t{\n+\t\treturn configManager.getConfig(PyramidPlunderConfig.class);\n+\t}\n+\n+\t@Override\n+\tprotected void startUp() throws Exception\n+\t{\n+\t\toverlayManager.add(overlay);\n+\t}\n+\n+\t@Override\n+\tprotected void shutDown() throws Exception\n+\t{\n+\t\ttilesToHighlight.clear();\n+\t\tobjectsToHighlight.clear();\n+\t\toverlayManager.remove(overlay);\n+\t\ttimer = null;\n+\t\tinfoBoxManager.removeIf(infoBox -> infoBox instanceof PyramidPlunderTimer);\n+\n+\t\tWidget ppWidget = client.getWidget(WidgetInfo.PYRAMID_PLUNDER_DATA);\n+\t\tif (ppWidget != null)\n+\t\t{\n+\t\t\tppWidget.setHidden(false);\n+\t\t}\n+\t}\n+\n+\t@Subscribe\n+\tpublic void onGameStateChanged(GameStateChanged event)\n+\t{\n+\t\tif (event.getGameState() == GameState.LOADING)\n+\t\t{\n+\t\t\ttilesToHighlight.clear();\n+\t\t\tobjectsToHighlight.clear();\n+\t\t}\n+\t}\n+\n+\t@Subscribe\n+\tpublic void onGameTick(GameTick tick)\n+\t{\n+\t\tif (config.showExactTimer() && isInPyramidPlunder())\n+\t\t{\n+\t\t\tif (timer == null)\n+\t\t\t{\n+\t\t\t\tint ppTimer = client.getVar(Varbits.PYRAMID_PLUNDER_TIMER);\n+\t\t\t\tlong timeLeft = (PYRAMID_PLUNDER_DURATION - ppTimer) * Constants.GAME_TICK_LENGTH;\n+\t\t\t\ttimer = new PyramidPlunderTimer(timeLeft, itemManager.getImage(PHARAOHS_SCEPTRE), this,\n+\t\t\t\t\tconfig, client);\n+\t\t\t\tinfoBoxManager.addInfoBox(timer);\n+\t\t\t}\n+\t\t}\n+\t\telse if (timer != null)\n+\t\t{\n+\t\t\tinfoBoxManager.removeIf(infoBox -> infoBox instanceof PyramidPlunderTimer);\n+\t\t\ttimer = null;\n+\t\t}\n+\t}\n+\n+\t@Subscribe\n+\tpublic void onWallObjectSpawned(WallObjectSpawned event)\n+\t{\n+\t\tWallObject object = event.getWallObject();\n+\n+\t\tif (object == null)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tif (TOMB_DOOR_WALL_IDS.contains(object.getId()))\n+\t\t{\n+\t\t\ttilesToHighlight.put(object, event.getTile());\n+\t\t}\n+\t}\n+\n+\t@Subscribe\n+\tpublic void onGameObjectSpawned(GameObjectSpawned event)\n+\t{\n+\t\tGameObject object = event.getGameObject();\n+\n+\t\tif (object == null)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tif (SPEARTRAP_ID == object.getId())\n+\t\t{\n+\t\t\ttilesToHighlight.put(object, event.getTile());\n+\t\t}\n+\t\telse if (URN_IDS.contains(object.getId())\n+\t\t\t|| GRAND_GOLD_CHEST_ID == object.getId()\n+\t\t\t|| SARCOPHAGUS_ID == object.getId())\n+\t\t{\n+\t\t\tobjectsToHighlight.add(object);\n+\t\t}\n+\t}\n+\n+\tpublic boolean isInPyramidPlunder()\n+\t{\n+\t\tint timer = client.getVar(Varbits.PYRAMID_PLUNDER_TIMER);\n+\t\treturn client.getLocalPlayer() != null\n+\t\t\t&& timer > 0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd6a9f21f8e3c8ea946bcccfd269d73790626cd1"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2Nzc3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tinfoBoxManager.removeIf(infoBox -> infoBox instanceof PyramidPlunderTimer);\n          \n          \n            \n            \t\t\tinfoBoxManager.removeInfoBox(timer);", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r437567778", "createdAt": "2020-06-09T16:36:12Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2020 Mitchell <https://github.com/Mitchell-Kovacs>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.pyramidplunder;\n+\n+import com.google.inject.Provides;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Inject;\n+import lombok.Getter;\n+import net.runelite.api.Client;\n+import net.runelite.api.Constants;\n+import net.runelite.api.GameObject;\n+import net.runelite.api.GameState;\n+import static net.runelite.api.ItemID.PHARAOHS_SCEPTRE;\n+import net.runelite.api.Tile;\n+import net.runelite.api.TileObject;\n+import net.runelite.api.Varbits;\n+import net.runelite.api.WallObject;\n+import net.runelite.api.events.GameObjectSpawned;\n+import net.runelite.api.events.GameStateChanged;\n+import net.runelite.api.events.GameTick;\n+import net.runelite.api.events.WallObjectSpawned;\n+import net.runelite.api.widgets.Widget;\n+import net.runelite.api.widgets.WidgetInfo;\n+import net.runelite.client.config.ConfigManager;\n+import net.runelite.client.eventbus.Subscribe;\n+import net.runelite.client.game.ItemManager;\n+import net.runelite.client.plugins.Plugin;\n+import net.runelite.client.plugins.PluginDescriptor;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.GRAND_GOLD_CHEST_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SARCOPHAGUS_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SPEARTRAP_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.TOMB_DOOR_WALL_IDS;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.URN_IDS;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+import net.runelite.client.ui.overlay.infobox.InfoBoxManager;\n+\n+@PluginDescriptor(\n+\tname = \"Pyramid Plunder\",\n+\tdescription = \"Show custom overlay for Pyramid Plunder\",\n+\ttags = {\"minigame\"},\n+\tenabledByDefault = false\n+)\n+public class PyramidPlunderPlugin extends Plugin\n+{\n+\t// Total number of game ticks until the pyramid plunder round ends (5 minutes)\n+\tprivate static final int PYRAMID_PLUNDER_DURATION = 500;\n+\tprivate static final int PYRAMID_PLUNDER_REGION = 7749;\n+\n+\t@Inject\n+\tprivate Client client;\n+\n+\t@Inject\n+\tprivate PyramidPlunderConfig config;\n+\n+\t@Inject\n+\tprivate OverlayManager overlayManager;\n+\n+\t@Inject\n+\tprivate PyramidPlunderOverlay overlay;\n+\n+\t@Inject\n+\tprivate InfoBoxManager infoBoxManager;\n+\n+\t@Inject\n+\tprivate ItemManager itemManager;\n+\n+\t@Getter\n+\tprivate final Map<TileObject, Tile> tilesToHighlight = new HashMap<>();\n+\n+\t@Getter\n+\tprivate final List<GameObject> objectsToHighlight = new ArrayList<>();\n+\n+\tprivate PyramidPlunderTimer timer;\n+\n+\t@Provides\n+\tPyramidPlunderConfig getConfig(ConfigManager configManager)\n+\t{\n+\t\treturn configManager.getConfig(PyramidPlunderConfig.class);\n+\t}\n+\n+\t@Override\n+\tprotected void startUp() throws Exception\n+\t{\n+\t\toverlayManager.add(overlay);\n+\t}\n+\n+\t@Override\n+\tprotected void shutDown() throws Exception\n+\t{\n+\t\ttilesToHighlight.clear();\n+\t\tobjectsToHighlight.clear();\n+\t\toverlayManager.remove(overlay);\n+\t\ttimer = null;\n+\t\tinfoBoxManager.removeIf(infoBox -> infoBox instanceof PyramidPlunderTimer);\n+\n+\t\tWidget ppWidget = client.getWidget(WidgetInfo.PYRAMID_PLUNDER_DATA);\n+\t\tif (ppWidget != null)\n+\t\t{\n+\t\t\tppWidget.setHidden(false);\n+\t\t}\n+\t}\n+\n+\t@Subscribe\n+\tpublic void onGameStateChanged(GameStateChanged event)\n+\t{\n+\t\tif (event.getGameState() == GameState.LOADING)\n+\t\t{\n+\t\t\ttilesToHighlight.clear();\n+\t\t\tobjectsToHighlight.clear();\n+\t\t}\n+\t}\n+\n+\t@Subscribe\n+\tpublic void onGameTick(GameTick tick)\n+\t{\n+\t\tif (config.showExactTimer() && isInPyramidPlunder())\n+\t\t{\n+\t\t\tif (timer == null)\n+\t\t\t{\n+\t\t\t\tint ppTimer = client.getVar(Varbits.PYRAMID_PLUNDER_TIMER);\n+\t\t\t\tlong timeLeft = (PYRAMID_PLUNDER_DURATION - ppTimer) * Constants.GAME_TICK_LENGTH;\n+\t\t\t\ttimer = new PyramidPlunderTimer(timeLeft, itemManager.getImage(PHARAOHS_SCEPTRE), this,\n+\t\t\t\t\tconfig, client);\n+\t\t\t\tinfoBoxManager.addInfoBox(timer);\n+\t\t\t}\n+\t\t}\n+\t\telse if (timer != null)\n+\t\t{\n+\t\t\tinfoBoxManager.removeIf(infoBox -> infoBox instanceof PyramidPlunderTimer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd6a9f21f8e3c8ea946bcccfd269d73790626cd1"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2OTI4NQ==", "bodyText": "this should be in an clientThread.invoke()", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r437569285", "createdAt": "2020-06-09T16:38:39Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2020 Mitchell <https://github.com/Mitchell-Kovacs>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.pyramidplunder;\n+\n+import com.google.inject.Provides;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Inject;\n+import lombok.Getter;\n+import net.runelite.api.Client;\n+import net.runelite.api.Constants;\n+import net.runelite.api.GameObject;\n+import net.runelite.api.GameState;\n+import static net.runelite.api.ItemID.PHARAOHS_SCEPTRE;\n+import net.runelite.api.Tile;\n+import net.runelite.api.TileObject;\n+import net.runelite.api.Varbits;\n+import net.runelite.api.WallObject;\n+import net.runelite.api.events.GameObjectSpawned;\n+import net.runelite.api.events.GameStateChanged;\n+import net.runelite.api.events.GameTick;\n+import net.runelite.api.events.WallObjectSpawned;\n+import net.runelite.api.widgets.Widget;\n+import net.runelite.api.widgets.WidgetInfo;\n+import net.runelite.client.config.ConfigManager;\n+import net.runelite.client.eventbus.Subscribe;\n+import net.runelite.client.game.ItemManager;\n+import net.runelite.client.plugins.Plugin;\n+import net.runelite.client.plugins.PluginDescriptor;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.GRAND_GOLD_CHEST_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SARCOPHAGUS_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SPEARTRAP_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.TOMB_DOOR_WALL_IDS;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.URN_IDS;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+import net.runelite.client.ui.overlay.infobox.InfoBoxManager;\n+\n+@PluginDescriptor(\n+\tname = \"Pyramid Plunder\",\n+\tdescription = \"Show custom overlay for Pyramid Plunder\",\n+\ttags = {\"minigame\"},\n+\tenabledByDefault = false\n+)\n+public class PyramidPlunderPlugin extends Plugin\n+{\n+\t// Total number of game ticks until the pyramid plunder round ends (5 minutes)\n+\tprivate static final int PYRAMID_PLUNDER_DURATION = 500;\n+\tprivate static final int PYRAMID_PLUNDER_REGION = 7749;\n+\n+\t@Inject\n+\tprivate Client client;\n+\n+\t@Inject\n+\tprivate PyramidPlunderConfig config;\n+\n+\t@Inject\n+\tprivate OverlayManager overlayManager;\n+\n+\t@Inject\n+\tprivate PyramidPlunderOverlay overlay;\n+\n+\t@Inject\n+\tprivate InfoBoxManager infoBoxManager;\n+\n+\t@Inject\n+\tprivate ItemManager itemManager;\n+\n+\t@Getter\n+\tprivate final Map<TileObject, Tile> tilesToHighlight = new HashMap<>();\n+\n+\t@Getter\n+\tprivate final List<GameObject> objectsToHighlight = new ArrayList<>();\n+\n+\tprivate PyramidPlunderTimer timer;\n+\n+\t@Provides\n+\tPyramidPlunderConfig getConfig(ConfigManager configManager)\n+\t{\n+\t\treturn configManager.getConfig(PyramidPlunderConfig.class);\n+\t}\n+\n+\t@Override\n+\tprotected void startUp() throws Exception\n+\t{\n+\t\toverlayManager.add(overlay);\n+\t}\n+\n+\t@Override\n+\tprotected void shutDown() throws Exception\n+\t{\n+\t\ttilesToHighlight.clear();\n+\t\tobjectsToHighlight.clear();\n+\t\toverlayManager.remove(overlay);\n+\t\ttimer = null;\n+\t\tinfoBoxManager.removeIf(infoBox -> infoBox instanceof PyramidPlunderTimer);\n+\n+\t\tWidget ppWidget = client.getWidget(WidgetInfo.PYRAMID_PLUNDER_DATA);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd6a9f21f8e3c8ea946bcccfd269d73790626cd1"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2OTc0MA==", "bodyText": "Instead of all of this logic it may be better to just override Infobox render()\n@Override\npublic boolean render() {\n    return config.showExactTimer();\n}", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r437569740", "createdAt": "2020-06-09T16:39:26Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2020 Mitchell <https://github.com/Mitchell-Kovacs>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.pyramidplunder;\n+\n+import com.google.inject.Provides;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Inject;\n+import lombok.Getter;\n+import net.runelite.api.Client;\n+import net.runelite.api.Constants;\n+import net.runelite.api.GameObject;\n+import net.runelite.api.GameState;\n+import static net.runelite.api.ItemID.PHARAOHS_SCEPTRE;\n+import net.runelite.api.Tile;\n+import net.runelite.api.TileObject;\n+import net.runelite.api.Varbits;\n+import net.runelite.api.WallObject;\n+import net.runelite.api.events.GameObjectSpawned;\n+import net.runelite.api.events.GameStateChanged;\n+import net.runelite.api.events.GameTick;\n+import net.runelite.api.events.WallObjectSpawned;\n+import net.runelite.api.widgets.Widget;\n+import net.runelite.api.widgets.WidgetInfo;\n+import net.runelite.client.config.ConfigManager;\n+import net.runelite.client.eventbus.Subscribe;\n+import net.runelite.client.game.ItemManager;\n+import net.runelite.client.plugins.Plugin;\n+import net.runelite.client.plugins.PluginDescriptor;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.GRAND_GOLD_CHEST_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SARCOPHAGUS_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SPEARTRAP_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.TOMB_DOOR_WALL_IDS;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.URN_IDS;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+import net.runelite.client.ui.overlay.infobox.InfoBoxManager;\n+\n+@PluginDescriptor(\n+\tname = \"Pyramid Plunder\",\n+\tdescription = \"Show custom overlay for Pyramid Plunder\",\n+\ttags = {\"minigame\"},\n+\tenabledByDefault = false\n+)\n+public class PyramidPlunderPlugin extends Plugin\n+{\n+\t// Total number of game ticks until the pyramid plunder round ends (5 minutes)\n+\tprivate static final int PYRAMID_PLUNDER_DURATION = 500;\n+\tprivate static final int PYRAMID_PLUNDER_REGION = 7749;\n+\n+\t@Inject\n+\tprivate Client client;\n+\n+\t@Inject\n+\tprivate PyramidPlunderConfig config;\n+\n+\t@Inject\n+\tprivate OverlayManager overlayManager;\n+\n+\t@Inject\n+\tprivate PyramidPlunderOverlay overlay;\n+\n+\t@Inject\n+\tprivate InfoBoxManager infoBoxManager;\n+\n+\t@Inject\n+\tprivate ItemManager itemManager;\n+\n+\t@Getter\n+\tprivate final Map<TileObject, Tile> tilesToHighlight = new HashMap<>();\n+\n+\t@Getter\n+\tprivate final List<GameObject> objectsToHighlight = new ArrayList<>();\n+\n+\tprivate PyramidPlunderTimer timer;\n+\n+\t@Provides\n+\tPyramidPlunderConfig getConfig(ConfigManager configManager)\n+\t{\n+\t\treturn configManager.getConfig(PyramidPlunderConfig.class);\n+\t}\n+\n+\t@Override\n+\tprotected void startUp() throws Exception\n+\t{\n+\t\toverlayManager.add(overlay);\n+\t}\n+\n+\t@Override\n+\tprotected void shutDown() throws Exception\n+\t{\n+\t\ttilesToHighlight.clear();\n+\t\tobjectsToHighlight.clear();\n+\t\toverlayManager.remove(overlay);\n+\t\ttimer = null;\n+\t\tinfoBoxManager.removeIf(infoBox -> infoBox instanceof PyramidPlunderTimer);\n+\n+\t\tWidget ppWidget = client.getWidget(WidgetInfo.PYRAMID_PLUNDER_DATA);\n+\t\tif (ppWidget != null)\n+\t\t{\n+\t\t\tppWidget.setHidden(false);\n+\t\t}\n+\t}\n+\n+\t@Subscribe\n+\tpublic void onGameStateChanged(GameStateChanged event)\n+\t{\n+\t\tif (event.getGameState() == GameState.LOADING)\n+\t\t{\n+\t\t\ttilesToHighlight.clear();\n+\t\t\tobjectsToHighlight.clear();\n+\t\t}\n+\t}\n+\n+\t@Subscribe\n+\tpublic void onGameTick(GameTick tick)\n+\t{\n+\t\tif (config.showExactTimer() && isInPyramidPlunder())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd6a9f21f8e3c8ea946bcccfd269d73790626cd1"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU3MDIxOQ==", "bodyText": "this can't happejn", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r437570219", "createdAt": "2020-06-09T16:40:09Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2020 Mitchell <https://github.com/Mitchell-Kovacs>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.pyramidplunder;\n+\n+import com.google.inject.Provides;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Inject;\n+import lombok.Getter;\n+import net.runelite.api.Client;\n+import net.runelite.api.Constants;\n+import net.runelite.api.GameObject;\n+import net.runelite.api.GameState;\n+import static net.runelite.api.ItemID.PHARAOHS_SCEPTRE;\n+import net.runelite.api.Tile;\n+import net.runelite.api.TileObject;\n+import net.runelite.api.Varbits;\n+import net.runelite.api.WallObject;\n+import net.runelite.api.events.GameObjectSpawned;\n+import net.runelite.api.events.GameStateChanged;\n+import net.runelite.api.events.GameTick;\n+import net.runelite.api.events.WallObjectSpawned;\n+import net.runelite.api.widgets.Widget;\n+import net.runelite.api.widgets.WidgetInfo;\n+import net.runelite.client.config.ConfigManager;\n+import net.runelite.client.eventbus.Subscribe;\n+import net.runelite.client.game.ItemManager;\n+import net.runelite.client.plugins.Plugin;\n+import net.runelite.client.plugins.PluginDescriptor;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.GRAND_GOLD_CHEST_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SARCOPHAGUS_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SPEARTRAP_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.TOMB_DOOR_WALL_IDS;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.URN_IDS;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+import net.runelite.client.ui.overlay.infobox.InfoBoxManager;\n+\n+@PluginDescriptor(\n+\tname = \"Pyramid Plunder\",\n+\tdescription = \"Show custom overlay for Pyramid Plunder\",\n+\ttags = {\"minigame\"},\n+\tenabledByDefault = false\n+)\n+public class PyramidPlunderPlugin extends Plugin\n+{\n+\t// Total number of game ticks until the pyramid plunder round ends (5 minutes)\n+\tprivate static final int PYRAMID_PLUNDER_DURATION = 500;\n+\tprivate static final int PYRAMID_PLUNDER_REGION = 7749;\n+\n+\t@Inject\n+\tprivate Client client;\n+\n+\t@Inject\n+\tprivate PyramidPlunderConfig config;\n+\n+\t@Inject\n+\tprivate OverlayManager overlayManager;\n+\n+\t@Inject\n+\tprivate PyramidPlunderOverlay overlay;\n+\n+\t@Inject\n+\tprivate InfoBoxManager infoBoxManager;\n+\n+\t@Inject\n+\tprivate ItemManager itemManager;\n+\n+\t@Getter\n+\tprivate final Map<TileObject, Tile> tilesToHighlight = new HashMap<>();\n+\n+\t@Getter\n+\tprivate final List<GameObject> objectsToHighlight = new ArrayList<>();\n+\n+\tprivate PyramidPlunderTimer timer;\n+\n+\t@Provides\n+\tPyramidPlunderConfig getConfig(ConfigManager configManager)\n+\t{\n+\t\treturn configManager.getConfig(PyramidPlunderConfig.class);\n+\t}\n+\n+\t@Override\n+\tprotected void startUp() throws Exception\n+\t{\n+\t\toverlayManager.add(overlay);\n+\t}\n+\n+\t@Override\n+\tprotected void shutDown() throws Exception\n+\t{\n+\t\ttilesToHighlight.clear();\n+\t\tobjectsToHighlight.clear();\n+\t\toverlayManager.remove(overlay);\n+\t\ttimer = null;\n+\t\tinfoBoxManager.removeIf(infoBox -> infoBox instanceof PyramidPlunderTimer);\n+\n+\t\tWidget ppWidget = client.getWidget(WidgetInfo.PYRAMID_PLUNDER_DATA);\n+\t\tif (ppWidget != null)\n+\t\t{\n+\t\t\tppWidget.setHidden(false);\n+\t\t}\n+\t}\n+\n+\t@Subscribe\n+\tpublic void onGameStateChanged(GameStateChanged event)\n+\t{\n+\t\tif (event.getGameState() == GameState.LOADING)\n+\t\t{\n+\t\t\ttilesToHighlight.clear();\n+\t\t\tobjectsToHighlight.clear();\n+\t\t}\n+\t}\n+\n+\t@Subscribe\n+\tpublic void onGameTick(GameTick tick)\n+\t{\n+\t\tif (config.showExactTimer() && isInPyramidPlunder())\n+\t\t{\n+\t\t\tif (timer == null)\n+\t\t\t{\n+\t\t\t\tint ppTimer = client.getVar(Varbits.PYRAMID_PLUNDER_TIMER);\n+\t\t\t\tlong timeLeft = (PYRAMID_PLUNDER_DURATION - ppTimer) * Constants.GAME_TICK_LENGTH;\n+\t\t\t\ttimer = new PyramidPlunderTimer(timeLeft, itemManager.getImage(PHARAOHS_SCEPTRE), this,\n+\t\t\t\t\tconfig, client);\n+\t\t\t\tinfoBoxManager.addInfoBox(timer);\n+\t\t\t}\n+\t\t}\n+\t\telse if (timer != null)\n+\t\t{\n+\t\t\tinfoBoxManager.removeIf(infoBox -> infoBox instanceof PyramidPlunderTimer);\n+\t\t\ttimer = null;\n+\t\t}\n+\t}\n+\n+\t@Subscribe\n+\tpublic void onWallObjectSpawned(WallObjectSpawned event)\n+\t{\n+\t\tWallObject object = event.getWallObject();\n+\n+\t\tif (object == null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd6a9f21f8e3c8ea946bcccfd269d73790626cd1"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU3MjgyNQ==", "bodyText": "We have an GAME_TICKS temporal unit in RSTimeUnit if you want to use that.", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r437572825", "createdAt": "2020-06-09T16:44:42Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2020 Mitchell <https://github.com/Mitchell-Kovacs>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.pyramidplunder;\n+\n+import com.google.inject.Provides;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Inject;\n+import lombok.Getter;\n+import net.runelite.api.Client;\n+import net.runelite.api.Constants;\n+import net.runelite.api.GameObject;\n+import net.runelite.api.GameState;\n+import static net.runelite.api.ItemID.PHARAOHS_SCEPTRE;\n+import net.runelite.api.Tile;\n+import net.runelite.api.TileObject;\n+import net.runelite.api.Varbits;\n+import net.runelite.api.WallObject;\n+import net.runelite.api.events.GameObjectSpawned;\n+import net.runelite.api.events.GameStateChanged;\n+import net.runelite.api.events.GameTick;\n+import net.runelite.api.events.WallObjectSpawned;\n+import net.runelite.api.widgets.Widget;\n+import net.runelite.api.widgets.WidgetInfo;\n+import net.runelite.client.config.ConfigManager;\n+import net.runelite.client.eventbus.Subscribe;\n+import net.runelite.client.game.ItemManager;\n+import net.runelite.client.plugins.Plugin;\n+import net.runelite.client.plugins.PluginDescriptor;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.GRAND_GOLD_CHEST_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SARCOPHAGUS_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SPEARTRAP_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.TOMB_DOOR_WALL_IDS;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.URN_IDS;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+import net.runelite.client.ui.overlay.infobox.InfoBoxManager;\n+\n+@PluginDescriptor(\n+\tname = \"Pyramid Plunder\",\n+\tdescription = \"Show custom overlay for Pyramid Plunder\",\n+\ttags = {\"minigame\"},\n+\tenabledByDefault = false\n+)\n+public class PyramidPlunderPlugin extends Plugin\n+{\n+\t// Total number of game ticks until the pyramid plunder round ends (5 minutes)\n+\tprivate static final int PYRAMID_PLUNDER_DURATION = 500;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd6a9f21f8e3c8ea946bcccfd269d73790626cd1"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU3MzE3Nw==", "bodyText": "Prefer loops to forEach if it doesn't decrease readability.", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r437573177", "createdAt": "2020-06-09T16:45:17Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderOverlay.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright (c) 2020 Mitchell <https://github.com/Mitchell-Kovacs>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.pyramidplunder;\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Graphics2D;\n+import java.awt.Shape;\n+import javax.inject.Inject;\n+import net.runelite.api.Client;\n+import net.runelite.api.ObjectComposition;\n+import net.runelite.api.Point;\n+import net.runelite.api.Varbits;\n+import net.runelite.api.coords.LocalPoint;\n+import net.runelite.api.widgets.Widget;\n+import net.runelite.api.widgets.WidgetInfo;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.GRAND_GOLD_CHEST_CLOSED_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.GRAND_GOLD_CHEST_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SARCOPHAGUS_CLOSED_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SARCOPHAGUS_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SPEARTRAP_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.TOMB_DOOR_CLOSED_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.TOMB_DOOR_WALL_IDS;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.URN_CLOSED_IDS;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.URN_IDS;\n+import net.runelite.client.ui.overlay.Overlay;\n+import net.runelite.client.ui.overlay.OverlayLayer;\n+import net.runelite.client.ui.overlay.OverlayPosition;\n+import net.runelite.client.ui.overlay.OverlayUtil;\n+\n+class PyramidPlunderOverlay extends Overlay\n+{\n+\tprivate static final int MAX_DISTANCE = 2350;\n+\n+\tprivate final Client client;\n+\tprivate final PyramidPlunderPlugin plugin;\n+\tprivate final PyramidPlunderConfig config;\n+\n+\t@Inject\n+\tprivate PyramidPlunderOverlay(Client client, PyramidPlunderPlugin plugin, PyramidPlunderConfig config)\n+\t{\n+\t\tsuper(plugin);\n+\t\tsetPosition(OverlayPosition.DYNAMIC);\n+\t\tsetLayer(OverlayLayer.ABOVE_SCENE);\n+\t\tthis.client = client;\n+\t\tthis.plugin = plugin;\n+\t\tthis.config = config;\n+\t}\n+\n+\t@Override\n+\tpublic Dimension render(Graphics2D graphics)\n+\t{\n+\t\tif (client.getLocalPlayer() == null)\n+\t\t{\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tWidget ppWidget = client.getWidget(WidgetInfo.PYRAMID_PLUNDER_DATA);\n+\t\tif (ppWidget == null)\n+\t\t{\n+\t\t\treturn null;\n+\t\t}\n+\t\tppWidget.setHidden(config.hideTimer());\n+\n+\n+\t\t// Highlight convex hulls of urns, chests, and sarcophagus\n+\t\tint currentFloor = client.getVar(Varbits.PYRAMID_PLUNDER_ROOM);\n+\t\tplugin.getObjectsToHighlight().forEach(object ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd6a9f21f8e3c8ea946bcccfd269d73790626cd1"}, "originalPosition": 90}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cd6a9f21f8e3c8ea946bcccfd269d73790626cd1", "author": {"user": {"login": "Mitchell-Kovacs", "name": "Mitchell Kovacs"}}, "url": "https://github.com/runelite/runelite/commit/cd6a9f21f8e3c8ea946bcccfd269d73790626cd1", "committedDate": "2020-05-28T21:44:18Z", "message": "pyramid-plunder: Use convex hull instead of clickbox for containers. Use infobox instead of overlay for timer. Hide speartrap clickbox once you have passed them."}, "afterCommit": {"oid": "6d7007c986771e5c4ebcdad2406aa377018b10b0", "author": {"user": {"login": "Mitchell-Kovacs", "name": "Mitchell Kovacs"}}, "url": "https://github.com/runelite/runelite/commit/6d7007c986771e5c4ebcdad2406aa377018b10b0", "committedDate": "2020-06-10T01:19:43Z", "message": "pyramid-plunder: Addresses feedback:\nPyramidPlunderObjects: Fix visibility and object id imports\nPyramidPlunderOverlay: Removed not needed code and changed loop\nPyramidPlunderTimer: Uses config to determine if timer should be rendered\nPyramidPlunderPlugin: Removed not needed code,  use RSTimeUnit, modified isInPyramidPlunder check order, and moved setting widget to visible on shut down to client thread invoke"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTM1Mzgw", "url": "https://github.com/runelite/runelite/pull/11718#pullrequestreview-428535380", "createdAt": "2020-06-11T01:36:54Z", "commit": {"oid": "48b2b44a3c855f91d9ec9baa62d9a5be3c2faf16"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMTozNjo1NFrOGiLouQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMTo0NzowM1rOGiLykw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5NTQxNw==", "bodyText": "These need distance checks probably. It highlights the objects in all of the rooms.", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r438495417", "createdAt": "2020-06-11T01:36:54Z", "author": {"login": "raiyni"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderOverlay.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright (c) 2020 Mitchell <https://github.com/Mitchell-Kovacs>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.pyramidplunder;\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Graphics2D;\n+import java.awt.Shape;\n+import javax.inject.Inject;\n+import net.runelite.api.Client;\n+import net.runelite.api.GameObject;\n+import net.runelite.api.ObjectComposition;\n+import net.runelite.api.Point;\n+import net.runelite.api.Varbits;\n+import net.runelite.api.coords.LocalPoint;\n+import net.runelite.api.widgets.Widget;\n+import net.runelite.api.widgets.WidgetInfo;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.GRAND_GOLD_CHEST_CLOSED_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.GRAND_GOLD_CHEST_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SARCOPHAGUS_CLOSED_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SARCOPHAGUS_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SPEARTRAP_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.TOMB_DOOR_CLOSED_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.TOMB_DOOR_WALL_IDS;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.URN_CLOSED_IDS;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.URN_IDS;\n+import net.runelite.client.ui.overlay.Overlay;\n+import net.runelite.client.ui.overlay.OverlayLayer;\n+import net.runelite.client.ui.overlay.OverlayPosition;\n+import net.runelite.client.ui.overlay.OverlayUtil;\n+\n+class PyramidPlunderOverlay extends Overlay\n+{\n+\tprivate static final int MAX_DISTANCE = 2350;\n+\n+\tprivate final Client client;\n+\tprivate final PyramidPlunderPlugin plugin;\n+\tprivate final PyramidPlunderConfig config;\n+\n+\t@Inject\n+\tprivate PyramidPlunderOverlay(Client client, PyramidPlunderPlugin plugin, PyramidPlunderConfig config)\n+\t{\n+\t\tsuper(plugin);\n+\t\tsetPosition(OverlayPosition.DYNAMIC);\n+\t\tsetLayer(OverlayLayer.ABOVE_SCENE);\n+\t\tthis.client = client;\n+\t\tthis.plugin = plugin;\n+\t\tthis.config = config;\n+\t}\n+\n+\t@Override\n+\tpublic Dimension render(Graphics2D graphics)\n+\t{\n+\t\tWidget ppWidget = client.getWidget(WidgetInfo.PYRAMID_PLUNDER_DATA);\n+\t\tif (ppWidget == null)\n+\t\t{\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tppWidget.setHidden(config.hideTimer());\n+\n+\t\t// Highlight convex hulls of urns, chests, and sarcophagus\n+\t\tint currentFloor = client.getVar(Varbits.PYRAMID_PLUNDER_ROOM);\n+\t\tfor (GameObject object : plugin.getObjectsToHighlight())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48b2b44a3c855f91d9ec9baa62d9a5be3c2faf16"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5NzAyMQ==", "bodyText": "The time displayed left seems to end a few seconds early in the infobox.", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r438497021", "createdAt": "2020-06-11T01:43:38Z", "author": {"login": "raiyni"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderTimer.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright (c) 2020 Mitchell <https://github.com/Mitchell-Kovacs>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.pyramidplunder;\n+\n+import java.awt.Color;\n+import java.awt.image.BufferedImage;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import net.runelite.api.Client;\n+import net.runelite.api.Varbits;\n+import net.runelite.client.ui.overlay.infobox.Timer;\n+\n+class PyramidPlunderTimer extends Timer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48b2b44a3c855f91d9ec9baa62d9a5be3c2faf16"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5NzM3Ng==", "bodyText": "Do this in onConfigChanged and startup", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r438497376", "createdAt": "2020-06-11T01:44:51Z", "author": {"login": "raiyni"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderOverlay.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright (c) 2020 Mitchell <https://github.com/Mitchell-Kovacs>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.pyramidplunder;\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Graphics2D;\n+import java.awt.Shape;\n+import javax.inject.Inject;\n+import net.runelite.api.Client;\n+import net.runelite.api.GameObject;\n+import net.runelite.api.ObjectComposition;\n+import net.runelite.api.Point;\n+import net.runelite.api.Varbits;\n+import net.runelite.api.coords.LocalPoint;\n+import net.runelite.api.widgets.Widget;\n+import net.runelite.api.widgets.WidgetInfo;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.GRAND_GOLD_CHEST_CLOSED_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.GRAND_GOLD_CHEST_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SARCOPHAGUS_CLOSED_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SARCOPHAGUS_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SPEARTRAP_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.TOMB_DOOR_CLOSED_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.TOMB_DOOR_WALL_IDS;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.URN_CLOSED_IDS;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.URN_IDS;\n+import net.runelite.client.ui.overlay.Overlay;\n+import net.runelite.client.ui.overlay.OverlayLayer;\n+import net.runelite.client.ui.overlay.OverlayPosition;\n+import net.runelite.client.ui.overlay.OverlayUtil;\n+\n+class PyramidPlunderOverlay extends Overlay\n+{\n+\tprivate static final int MAX_DISTANCE = 2350;\n+\n+\tprivate final Client client;\n+\tprivate final PyramidPlunderPlugin plugin;\n+\tprivate final PyramidPlunderConfig config;\n+\n+\t@Inject\n+\tprivate PyramidPlunderOverlay(Client client, PyramidPlunderPlugin plugin, PyramidPlunderConfig config)\n+\t{\n+\t\tsuper(plugin);\n+\t\tsetPosition(OverlayPosition.DYNAMIC);\n+\t\tsetLayer(OverlayLayer.ABOVE_SCENE);\n+\t\tthis.client = client;\n+\t\tthis.plugin = plugin;\n+\t\tthis.config = config;\n+\t}\n+\n+\t@Override\n+\tpublic Dimension render(Graphics2D graphics)\n+\t{\n+\t\tWidget ppWidget = client.getWidget(WidgetInfo.PYRAMID_PLUNDER_DATA);\n+\t\tif (ppWidget == null)\n+\t\t{\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tppWidget.setHidden(config.hideTimer());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48b2b44a3c855f91d9ec9baa62d9a5be3c2faf16"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5NzkzOQ==", "bodyText": "Defaulting these to 9 seems too restricted for the standard player?", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r438497939", "createdAt": "2020-06-11T01:47:03Z", "author": {"login": "raiyni"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderConfig.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Copyright (c) 2020 Mitchell <https://github.com/Mitchell-Kovacs>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.pyramidplunder;\n+import java.awt.Color;\n+import net.runelite.client.config.Config;\n+import net.runelite.client.config.ConfigGroup;\n+import net.runelite.client.config.ConfigItem;\n+\n+@ConfigGroup(\"pyramidplunder\")\n+public interface PyramidPlunderConfig extends Config\n+{\n+\t@ConfigItem(\n+\t\tposition = 0,\n+\t\tkeyName = \"hideTimer\",\n+\t\tname = \"Hide default timer\",\n+\t\tdescription = \"Hides the default pyramid plunder timer\"\n+\t)\n+\tdefault boolean hideTimer()\n+\t{\n+\t\treturn true;\n+\t}\n+\n+\t@ConfigItem(\n+\t\tposition = 1,\n+\t\tkeyName = \"showExactTimer\",\n+\t\tname = \"Show exact timer\",\n+\t\tdescription = \"Displays the amount of time remaining as an infobox\"\n+\t)\n+\tdefault boolean showExactTimer()\n+\t{\n+\t\treturn true;\n+\t}\n+\n+\t@ConfigItem(\n+\t\tposition = 2,\n+\t\tkeyName = \"timerLowWarning\",\n+\t\tname = \"Timer low warning\",\n+\t\tdescription = \"Determines the time when the timers color will change\"\n+\t)\n+\tdefault int timerLowWarning()\n+\t{\n+\t\treturn 30;\n+\t}\n+\n+\t@ConfigItem(\n+\t\tposition = 3,\n+\t\tkeyName = \"highlightDoorsColor\",\n+\t\tname = \"Highlight doors color\",\n+\t\tdescription = \"Selects the color for highlighting tomb doors\"\n+\t)\n+\tdefault Color highlightDoorsColor()\n+\t{\n+\t\treturn Color.green;\n+\t}\n+\n+\t@ConfigItem(\n+\t\tposition = 4,\n+\t\tkeyName = \"highlightDoors\",\n+\t\tname = \"Highlight doors\",\n+\t\tdescription = \"Highlights the four tomb doors in each room\"\n+\t)\n+\tdefault boolean highlightDoors()\n+\t{\n+\t\treturn true;\n+\t}\n+\n+\t@ConfigItem(\n+\t\tposition = 5,\n+\t\tkeyName = \"highlightSpeartrapColor\",\n+\t\tname = \"Highlight speartrap color\",\n+\t\tdescription = \"Selects the color for highlighting speartraps\"\n+\t)\n+\tdefault Color highlightSpeartrapsColor()\n+\t{\n+\t\treturn Color.orange;\n+\t}\n+\n+\t@ConfigItem(\n+\t\tposition = 6,\n+\t\tkeyName = \"highlightSpeartraps\",\n+\t\tname = \"Highlight speartraps\",\n+\t\tdescription = \"Highlight the spear traps at the entrance of each room\"\n+\t)\n+\tdefault boolean highlightSpeartraps()\n+\t{\n+\t\treturn true;\n+\t}\n+\n+\t@ConfigItem(\n+\t\tposition = 7,\n+\t\tkeyName = \"highlightContainersColor\",\n+\t\tname = \"Highlight containers color\",\n+\t\tdescription = \"Selects the color for highlighting urns, chests and sarcophagus\"\n+\t)\n+\tdefault Color highlightContainersColor()\n+\t{\n+\t\treturn Color.yellow;\n+\t}\n+\n+\t@ConfigItem(\n+\t\tposition = 8,\n+\t\tkeyName = \"highlightUrnsFloor\",\n+\t\tname = \"Highlight urns floor\",\n+\t\tdescription = \"Highlight the urns starting at selected floor and up\"\n+\t)\n+\tdefault int highlightUrnsFloor()\n+\t{\n+\t\treturn 9;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48b2b44a3c855f91d9ec9baa62d9a5be3c2faf16"}, "originalPosition": 130}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5ed006ae0c971817e0b150c6ff3d31a2c26e1b0c", "author": {"user": {"login": "Mitchell-Kovacs", "name": "Mitchell Kovacs"}}, "url": "https://github.com/runelite/runelite/commit/5ed006ae0c971817e0b150c6ff3d31a2c26e1b0c", "committedDate": "2020-06-11T04:19:28Z", "message": "pyramid-plunder: Added distance check for game object highlighting. Fixed timer."}, "afterCommit": {"oid": "9e35d17743e34bd1a5ba81334c3f11ddf112afe8", "author": {"user": {"login": "Mitchell-Kovacs", "name": "Mitchell Kovacs"}}, "url": "https://github.com/runelite/runelite/commit/9e35d17743e34bd1a5ba81334c3f11ddf112afe8", "committedDate": "2020-06-24T19:39:19Z", "message": "Add Pyramid Plunder plugin\n\nCo-authored-by: Adam <Adam@sigterm.info>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a431fc8dbdae33027f892b896dddd8ac56c5aec", "author": {"user": {"login": "Mitchell-Kovacs", "name": "Mitchell Kovacs"}}, "url": "https://github.com/runelite/runelite/commit/7a431fc8dbdae33027f892b896dddd8ac56c5aec", "committedDate": "2020-06-24T19:49:18Z", "message": "Add Pyramid Plunder plugin\n\nCo-authored-by: Adam <Adam@sigterm.info>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9e35d17743e34bd1a5ba81334c3f11ddf112afe8", "author": {"user": {"login": "Mitchell-Kovacs", "name": "Mitchell Kovacs"}}, "url": "https://github.com/runelite/runelite/commit/9e35d17743e34bd1a5ba81334c3f11ddf112afe8", "committedDate": "2020-06-24T19:39:19Z", "message": "Add Pyramid Plunder plugin\n\nCo-authored-by: Adam <Adam@sigterm.info>"}, "afterCommit": {"oid": "7a431fc8dbdae33027f892b896dddd8ac56c5aec", "author": {"user": {"login": "Mitchell-Kovacs", "name": "Mitchell Kovacs"}}, "url": "https://github.com/runelite/runelite/commit/7a431fc8dbdae33027f892b896dddd8ac56c5aec", "committedDate": "2020-06-24T19:49:18Z", "message": "Add Pyramid Plunder plugin\n\nCo-authored-by: Adam <Adam@sigterm.info>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3504, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}