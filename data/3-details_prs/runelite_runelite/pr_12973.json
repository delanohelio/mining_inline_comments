{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1NDQ0Njg1", "number": 12973, "title": "Java 14-16 compatability", "bodyText": "Includes workarounds for:\n\nJDK-8173978 (Java 14)\nJEP396/JDK-8255363 (Java 16)\n\nCloses #10113", "createdAt": "2020-12-24T18:43:21Z", "url": "https://github.com/runelite/runelite/pull/12973", "merged": true, "mergeCommit": {"oid": "243929826b99f3dad1605c48f85f000268bdc41e"}, "closed": true, "closedAt": "2021-01-30T16:24:20Z", "author": {"login": "abextm"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdpY_tDABqjQxNDc5NjY0ODE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd1E8enABqjQyNjg3MDE0NDY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "33bcc7f3909202d7a63db847f9a1f395adaf92b6", "author": {"user": {"login": "abextm", "name": "Abex"}}, "url": "https://github.com/runelite/runelite/commit/33bcc7f3909202d7a63db847f9a1f395adaf92b6", "committedDate": "2020-12-24T15:42:40Z", "message": "ReflectUtil: allow privateLookupIn cross-classloader with JDK-8173978"}, "afterCommit": {"oid": "cd13d17cda1e9a19680ab903ed556195a876a66a", "author": {"user": {"login": "abextm", "name": "Abex"}}, "url": "https://github.com/runelite/runelite/commit/cd13d17cda1e9a19680ab903ed556195a876a66a", "committedDate": "2020-12-24T19:35:01Z", "message": "ReflectUtil: allow privateLookupIn cross-classloader with JDK-8173978"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY2NjE2OTM5", "url": "https://github.com/runelite/runelite/pull/12973#pullrequestreview-566616939", "createdAt": "2021-01-12T19:25:00Z", "commit": {"oid": "a35167fefb530e9c8c8f8a2996a8d99c43f58262"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxOToyNTowMVrOISQuiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxOTo0MDo0M1rOISRiSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjAxOTMzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\tfor (; in.peek() != JsonToken.END_OBJECT; )\n          \n          \n            \n            \t\t\t\twhile (in.peek() != JsonToken.END_OBJECT)\n          \n      \n    \n    \n  \n\nfor all the type adapter loops", "url": "https://github.com/runelite/runelite/pull/12973#discussion_r556019339", "createdAt": "2021-01-12T19:25:01Z", "author": {"login": "Nightfirecat"}, "path": "http-api/src/main/java/net/runelite/http/api/gson/ColorTypeAdapter.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright (c) 2020 Abex\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.http.api.gson;\n+\n+import com.google.gson.TypeAdapter;\n+import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonToken;\n+import com.google.gson.stream.JsonWriter;\n+import java.awt.Color;\n+import java.io.IOException;\n+\n+public class ColorTypeAdapter extends TypeAdapter<Color>\n+{\n+\t@Override\n+\tpublic void write(JsonWriter out, Color value) throws IOException\n+\t{\n+\t\tint rgba = value.getRGB();\n+\t\tout.beginObject()\n+\t\t\t.name(\"value\")\n+\t\t\t.value(rgba)\n+\t\t\t.endObject();\n+\t}\n+\n+\t@Override\n+\tpublic Color read(JsonReader in) throws IOException\n+\t{\n+\t\tswitch (in.peek())\n+\t\t{\n+\t\t\tcase NULL:\n+\t\t\t\tin.nextNull();\n+\t\t\t\treturn null;\n+\t\t\tcase BEGIN_OBJECT:\n+\t\t\t\tin.beginObject();\n+\t\t\t\tdouble value = 0;\n+\t\t\t\tfor (; in.peek() != JsonToken.END_OBJECT; )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a35167fefb530e9c8c8f8a2996a8d99c43f58262"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjAzMjA4Mw==", "bodyText": "\ud83d\ude02", "url": "https://github.com/runelite/runelite/pull/12973#discussion_r556032083", "createdAt": "2021-01-12T19:40:05Z", "author": {"login": "Nightfirecat"}, "path": "http-api/src/main/java/net/runelite/http/api/gson/InstantTypeAdapter.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright (c) 2020 Abex\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.http.api.gson;\n+\n+import com.google.gson.TypeAdapter;\n+import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonToken;\n+import com.google.gson.stream.JsonWriter;\n+import java.io.IOException;\n+import java.time.Instant;\n+\n+// Just add water!", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a35167fefb530e9c8c8f8a2996a8d99c43f58262"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjAzMjU4NQ==", "bodyText": "Do we not need to handle null color values for this?", "url": "https://github.com/runelite/runelite/pull/12973#discussion_r556032585", "createdAt": "2021-01-12T19:40:43Z", "author": {"login": "Nightfirecat"}, "path": "http-api/src/main/java/net/runelite/http/api/gson/ColorTypeAdapter.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright (c) 2020 Abex\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.http.api.gson;\n+\n+import com.google.gson.TypeAdapter;\n+import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonToken;\n+import com.google.gson.stream.JsonWriter;\n+import java.awt.Color;\n+import java.io.IOException;\n+\n+public class ColorTypeAdapter extends TypeAdapter<Color>\n+{\n+\t@Override\n+\tpublic void write(JsonWriter out, Color value) throws IOException\n+\t{\n+\t\tint rgba = value.getRGB();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a35167fefb530e9c8c8f8a2996a8d99c43f58262"}, "originalPosition": 39}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cd13d17cda1e9a19680ab903ed556195a876a66a", "author": {"user": {"login": "abextm", "name": "Abex"}}, "url": "https://github.com/runelite/runelite/commit/cd13d17cda1e9a19680ab903ed556195a876a66a", "committedDate": "2020-12-24T19:35:01Z", "message": "ReflectUtil: allow privateLookupIn cross-classloader with JDK-8173978"}, "afterCommit": {"oid": "4650a2a88efbe4c792b20257b50b23531fb701c7", "author": {"user": {"login": "abextm", "name": "Abex"}}, "url": "https://github.com/runelite/runelite/commit/4650a2a88efbe4c792b20257b50b23531fb701c7", "committedDate": "2021-01-14T12:20:43Z", "message": "ReflectUtil: allow privateLookupIn cross-classloader with JDK-8173978"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY4NTM4OTM0", "url": "https://github.com/runelite/runelite/pull/12973#pullrequestreview-568538934", "createdAt": "2021-01-14T19:09:33Z", "commit": {"oid": "4650a2a88efbe4c792b20257b50b23531fb701c7"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81f5f5caa13851a4a4dc8add885cd23895fa558f", "author": {"user": {"login": "abextm", "name": "Abex"}}, "url": "https://github.com/runelite/runelite/commit/81f5f5caa13851a4a4dc8add885cd23895fa558f", "committedDate": "2021-01-29T11:38:00Z", "message": "don't use gson's reflection serialization on non RuneLite classes\n\njava >=16 disallows access to most private fields which makes these\nfail with the reflection type adapter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4650a2a88efbe4c792b20257b50b23531fb701c7", "author": {"user": {"login": "abextm", "name": "Abex"}}, "url": "https://github.com/runelite/runelite/commit/4650a2a88efbe4c792b20257b50b23531fb701c7", "committedDate": "2021-01-14T12:20:43Z", "message": "ReflectUtil: allow privateLookupIn cross-classloader with JDK-8173978"}, "afterCommit": {"oid": "7e04638f151c2c4ca02520b67096f02cbbe188d9", "author": {"user": {"login": "abextm", "name": "Abex"}}, "url": "https://github.com/runelite/runelite/commit/7e04638f151c2c4ca02520b67096f02cbbe188d9", "committedDate": "2021-01-29T11:38:01Z", "message": "ReflectUtil: allow privateLookupIn cross-classloader with JDK-8173978"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc5NTY5NTc2", "url": "https://github.com/runelite/runelite/pull/12973#pullrequestreview-579569576", "createdAt": "2021-01-29T19:48:02Z", "commit": {"oid": "7e04638f151c2c4ca02520b67096f02cbbe188d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQxOTo0ODowMlrOIcyYpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQxOTo0ODowMlrOIcyYpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzA1NjU1MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * module that calls MethodHandles.lookup() and stores it in ReflectUtil for later use.\n          \n          \n            \n            \t * module that calls MethodHandles.lookup() and stores it in the classloader for later use.", "url": "https://github.com/runelite/runelite/pull/12973#discussion_r567056550", "createdAt": "2021-01-29T19:48:02Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/util/ReflectUtil.java", "diffHunk": "@@ -69,4 +80,51 @@ private ReflectUtil()\n \t\t\t}\n \t\t}\n \t}\n+\n+\tpublic interface PrivateLookupableClassLoader\n+\t{\n+\t\t// define class is protected final so this needs a different name to become public\n+\t\tClass<?> defineClass0(String name, byte[] b, int off, int len) throws ClassFormatError;\n+\n+\t\tMethodHandles.Lookup getLookup();\n+\t\tvoid setLookup(MethodHandles.Lookup lookup);\n+\t}\n+\n+\t/**\n+\t * Allows private Lookups to be created for classes in this ClassLoader\n+\t * <p>\n+\t * Due to JDK-8173978 it is impossible to create get a lookup with module scoped permissions when teleporting\n+\t * between modules. Since external plugins are loaded in a separate classloader to us they are contained in unique\n+\t * unnamed modules. Since we (via LambdaMetafactory) are creating a hidden class in that module, we require module\n+\t * scoped access to it, and since the methods can be private, we also require private access. The only way to get\n+\t * MODULE|PRIVATE is to either 1) invokedynamic in that class, 2) call MethodHandles.lookup() from that class, or\n+\t * 3) call privateLookupIn with an existing lookup with PRIVATE|MODULE created from a class in the same module.\n+\t * Our solution is to make classloaders call this method which will define a class in the classloader's unnamed\n+\t * module that calls MethodHandles.lookup() and stores it in ReflectUtil for later use.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e04638f151c2c4ca02520b67096f02cbbe188d9"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90b601109cbdab2fcb4e7860119852b81b6bd582", "author": {"user": {"login": "abextm", "name": "Abex"}}, "url": "https://github.com/runelite/runelite/commit/90b601109cbdab2fcb4e7860119852b81b6bd582", "committedDate": "2021-01-30T02:55:12Z", "message": "ReflectUtil: allow privateLookupIn cross-classloader with JDK-8173978"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7e04638f151c2c4ca02520b67096f02cbbe188d9", "author": {"user": {"login": "abextm", "name": "Abex"}}, "url": "https://github.com/runelite/runelite/commit/7e04638f151c2c4ca02520b67096f02cbbe188d9", "committedDate": "2021-01-29T11:38:01Z", "message": "ReflectUtil: allow privateLookupIn cross-classloader with JDK-8173978"}, "afterCommit": {"oid": "90b601109cbdab2fcb4e7860119852b81b6bd582", "author": {"user": {"login": "abextm", "name": "Abex"}}, "url": "https://github.com/runelite/runelite/commit/90b601109cbdab2fcb4e7860119852b81b6bd582", "committedDate": "2021-01-30T02:55:12Z", "message": "ReflectUtil: allow privateLookupIn cross-classloader with JDK-8173978"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3021, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}