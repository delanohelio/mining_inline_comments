{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1ODM5MDMw", "number": 12212, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwMzo1OToxNFrOESG5eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNDozNzowNlrOESpevQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDIyODQxOnYy", "diffSide": "RIGHT", "path": "runelite-client/src/test/java/net/runelite/client/plugins/prayer/PrayerPluginTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwMzo1OToxNFrOG3JJeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNDozNDo1MVrOG3TVzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3NDc0NQ==", "bodyText": "The expected strings can be inlined in the assertEquals() calls.", "url": "https://github.com/runelite/runelite/pull/12212#discussion_r460474745", "createdAt": "2020-07-26T03:59:14Z", "author": {"login": "Nightfirecat"}, "path": "runelite-client/src/test/java/net/runelite/client/plugins/prayer/PrayerPluginTest.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Copyright (c) 2017, Adam <Adam@sigterm.info>\n+ * Copyright (c) 2018, Raqes <j.raqes@gmail.com>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.prayer;\n+\n+import com.google.inject.Guice;\n+import com.google.inject.testing.fieldbinder.Bind;\n+import com.google.inject.testing.fieldbinder.BoundFieldModule;\n+import net.runelite.api.*;\n+import net.runelite.api.events.ItemContainerChanged;\n+import net.runelite.client.game.ItemManager;\n+import net.runelite.client.game.SpriteManager;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+import net.runelite.client.ui.overlay.infobox.InfoBoxManager;\n+import net.runelite.http.api.item.ItemEquipmentStats;\n+import net.runelite.http.api.item.ItemStats;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import javax.inject.Inject;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class PrayerPluginTest\n+{\n+\n+\t@Inject\n+\tprivate PrayerPlugin prayerPlugin;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate Client client;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate PrayerConfig config;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate OverlayManager overlayManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate InfoBoxManager infoBoxManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate SpriteManager spriteManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate ScheduledExecutorService executor;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate ItemManager itemManager;\n+\n+\t@Before\n+\tpublic void before()\n+\t{\n+\t\tGuice.createInjector(BoundFieldModule.of(this)).injectMembers(this);\n+\t}\n+\n+\t@Test\n+\tpublic void testGetEstimatedTimeRemainingOverOneHour()\n+\t{\n+\n+\t\tString expectedString = \"1:19:12\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93d9d17e646d3e5ea51220f67c8eb73ddf894977"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY0MTc0Mw==", "bodyText": "Fixed in the latest commit", "url": "https://github.com/runelite/runelite/pull/12212#discussion_r460641743", "createdAt": "2020-07-27T04:34:51Z", "author": {"login": "landychan"}, "path": "runelite-client/src/test/java/net/runelite/client/plugins/prayer/PrayerPluginTest.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Copyright (c) 2017, Adam <Adam@sigterm.info>\n+ * Copyright (c) 2018, Raqes <j.raqes@gmail.com>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.prayer;\n+\n+import com.google.inject.Guice;\n+import com.google.inject.testing.fieldbinder.Bind;\n+import com.google.inject.testing.fieldbinder.BoundFieldModule;\n+import net.runelite.api.*;\n+import net.runelite.api.events.ItemContainerChanged;\n+import net.runelite.client.game.ItemManager;\n+import net.runelite.client.game.SpriteManager;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+import net.runelite.client.ui.overlay.infobox.InfoBoxManager;\n+import net.runelite.http.api.item.ItemEquipmentStats;\n+import net.runelite.http.api.item.ItemStats;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import javax.inject.Inject;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class PrayerPluginTest\n+{\n+\n+\t@Inject\n+\tprivate PrayerPlugin prayerPlugin;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate Client client;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate PrayerConfig config;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate OverlayManager overlayManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate InfoBoxManager infoBoxManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate SpriteManager spriteManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate ScheduledExecutorService executor;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate ItemManager itemManager;\n+\n+\t@Before\n+\tpublic void before()\n+\t{\n+\t\tGuice.createInjector(BoundFieldModule.of(this)).injectMembers(this);\n+\t}\n+\n+\t@Test\n+\tpublic void testGetEstimatedTimeRemainingOverOneHour()\n+\t{\n+\n+\t\tString expectedString = \"1:19:12\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3NDc0NQ=="}, "originalCommit": {"oid": "93d9d17e646d3e5ea51220f67c8eb73ddf894977"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDIyODg2OnYy", "diffSide": "RIGHT", "path": "runelite-client/src/test/java/net/runelite/client/plugins/prayer/PrayerPluginTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwMzo1OTo0OVrOG3JJqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNDozNDo0MlrOG3TVrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3NDc5Mw==", "bodyText": "Like our main code, imports should be in a single block with no \"sections\" or blank lines", "url": "https://github.com/runelite/runelite/pull/12212#discussion_r460474793", "createdAt": "2020-07-26T03:59:49Z", "author": {"login": "Nightfirecat"}, "path": "runelite-client/src/test/java/net/runelite/client/plugins/prayer/PrayerPluginTest.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Copyright (c) 2017, Adam <Adam@sigterm.info>\n+ * Copyright (c) 2018, Raqes <j.raqes@gmail.com>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.prayer;\n+\n+import com.google.inject.Guice;\n+import com.google.inject.testing.fieldbinder.Bind;\n+import com.google.inject.testing.fieldbinder.BoundFieldModule;\n+import net.runelite.api.*;\n+import net.runelite.api.events.ItemContainerChanged;\n+import net.runelite.client.game.ItemManager;\n+import net.runelite.client.game.SpriteManager;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+import net.runelite.client.ui.overlay.infobox.InfoBoxManager;\n+import net.runelite.http.api.item.ItemEquipmentStats;\n+import net.runelite.http.api.item.ItemStats;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import javax.inject.Inject;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+import static org.mockito.ArgumentMatchers.anyBoolean;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93d9d17e646d3e5ea51220f67c8eb73ddf894977"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY0MTcxMQ==", "bodyText": "Fixed in the latest commit", "url": "https://github.com/runelite/runelite/pull/12212#discussion_r460641711", "createdAt": "2020-07-27T04:34:42Z", "author": {"login": "landychan"}, "path": "runelite-client/src/test/java/net/runelite/client/plugins/prayer/PrayerPluginTest.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Copyright (c) 2017, Adam <Adam@sigterm.info>\n+ * Copyright (c) 2018, Raqes <j.raqes@gmail.com>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.prayer;\n+\n+import com.google.inject.Guice;\n+import com.google.inject.testing.fieldbinder.Bind;\n+import com.google.inject.testing.fieldbinder.BoundFieldModule;\n+import net.runelite.api.*;\n+import net.runelite.api.events.ItemContainerChanged;\n+import net.runelite.client.game.ItemManager;\n+import net.runelite.client.game.SpriteManager;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+import net.runelite.client.ui.overlay.infobox.InfoBoxManager;\n+import net.runelite.http.api.item.ItemEquipmentStats;\n+import net.runelite.http.api.item.ItemStats;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import javax.inject.Inject;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+import static org.mockito.ArgumentMatchers.anyBoolean;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3NDc5Mw=="}, "originalCommit": {"oid": "93d9d17e646d3e5ea51220f67c8eb73ddf894977"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDIyOTI1OnYy", "diffSide": "RIGHT", "path": "runelite-client/src/test/java/net/runelite/client/plugins/prayer/PrayerPluginTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwNDowMDoyM1rOG3JJ2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNDozNDoyNlrOG3TVew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3NDg0Mg==", "bodyText": "Import assertEquals", "url": "https://github.com/runelite/runelite/pull/12212#discussion_r460474842", "createdAt": "2020-07-26T04:00:23Z", "author": {"login": "Nightfirecat"}, "path": "runelite-client/src/test/java/net/runelite/client/plugins/prayer/PrayerPluginTest.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Copyright (c) 2017, Adam <Adam@sigterm.info>\n+ * Copyright (c) 2018, Raqes <j.raqes@gmail.com>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.prayer;\n+\n+import com.google.inject.Guice;\n+import com.google.inject.testing.fieldbinder.Bind;\n+import com.google.inject.testing.fieldbinder.BoundFieldModule;\n+import net.runelite.api.*;\n+import net.runelite.api.events.ItemContainerChanged;\n+import net.runelite.client.game.ItemManager;\n+import net.runelite.client.game.SpriteManager;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+import net.runelite.client.ui.overlay.infobox.InfoBoxManager;\n+import net.runelite.http.api.item.ItemEquipmentStats;\n+import net.runelite.http.api.item.ItemStats;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import javax.inject.Inject;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class PrayerPluginTest\n+{\n+\n+\t@Inject\n+\tprivate PrayerPlugin prayerPlugin;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate Client client;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate PrayerConfig config;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate OverlayManager overlayManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate InfoBoxManager infoBoxManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate SpriteManager spriteManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate ScheduledExecutorService executor;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate ItemManager itemManager;\n+\n+\t@Before\n+\tpublic void before()\n+\t{\n+\t\tGuice.createInjector(BoundFieldModule.of(this)).injectMembers(this);\n+\t}\n+\n+\t@Test\n+\tpublic void testGetEstimatedTimeRemainingOverOneHour()\n+\t{\n+\n+\t\tString expectedString = \"1:19:12\";\n+\n+\t\tItemStats itemStats = new ItemStats(false, true, 1, 8,\n+\t\t\tItemEquipmentStats.builder()\n+\t\t\t\t.slot(EquipmentInventorySlot.WEAPON.getSlotIdx())\n+\t\t\t\t.prayer(50)\n+\t\t\t\t.build());\n+\n+\t\tItemContainer itemContainer = mock(ItemContainer.class);\n+\n+\t\twhen(client.isPrayerActive(Prayer.PRESERVE)).thenReturn(true);\n+\t\twhen(client.getBoostedSkillLevel(Skill.PRAYER)).thenReturn(99);\n+\t\twhen(client.getItemContainer(InventoryID.EQUIPMENT)).thenReturn(itemContainer);\n+\t\twhen(itemContainer.getItems()).thenReturn(new Item[]{new Item(ItemID.TWISTED_BOW, 1)});\n+\t\twhen(itemManager.getItemStats(anyInt(), anyBoolean())).thenReturn(itemStats);\n+\n+\t\tprayerPlugin.onItemContainerChanged(new ItemContainerChanged(InventoryID.EQUIPMENT.getId(), itemContainer));\n+\t\tString actualString = prayerPlugin.getEstimatedTimeRemaining(false);\n+\n+\t\tAssert.assertEquals(expectedString, actualString);\n+\t}\n+\n+\t@Test\n+\tpublic void testGetEstimatedTimeRemainingUnderOneHour()\n+\t{\n+\n+\t\tString expectedString = \"29:42\";\n+\n+\t\tItemContainer itemContainer = mock(ItemContainer.class);\n+\n+\t\twhen(client.isPrayerActive(Prayer.PRESERVE)).thenReturn(true);\n+\t\twhen(client.getBoostedSkillLevel(Skill.PRAYER)).thenReturn(99);\n+\t\twhen(client.getItemContainer(InventoryID.EQUIPMENT)).thenReturn(itemContainer);\n+\t\twhen(itemContainer.getItems()).thenReturn(new Item[]{});\n+\n+\t\tprayerPlugin.onItemContainerChanged(new ItemContainerChanged(InventoryID.EQUIPMENT.getId(), itemContainer));\n+\t\tString actualString = prayerPlugin.getEstimatedTimeRemaining(false);\n+\n+\t\tAssert.assertEquals(expectedString, actualString);\n+\t}\n+\n+\t@Test\n+\tpublic void testGetEstimatedTimeRemainingFormatForOrbUnderOneHour()\n+\t{\n+\n+\t\tString expectedString = \"29m\";\n+\n+\t\tItemContainer itemContainer = mock(ItemContainer.class);\n+\n+\t\twhen(client.isPrayerActive(Prayer.PRESERVE)).thenReturn(true);\n+\t\twhen(client.getBoostedSkillLevel(Skill.PRAYER)).thenReturn(99);\n+\t\twhen(client.getItemContainer(InventoryID.EQUIPMENT)).thenReturn(itemContainer);\n+\t\twhen(itemContainer.getItems()).thenReturn(new Item[]{});\n+\n+\t\tprayerPlugin.onItemContainerChanged(new ItemContainerChanged(InventoryID.EQUIPMENT.getId(), itemContainer));\n+\t\tString actualString = prayerPlugin.getEstimatedTimeRemaining(true);\n+\n+\t\tAssert.assertEquals(expectedString, actualString);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93d9d17e646d3e5ea51220f67c8eb73ddf894977"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY0MTY1OQ==", "bodyText": "Imported assertEquals in the latest commit", "url": "https://github.com/runelite/runelite/pull/12212#discussion_r460641659", "createdAt": "2020-07-27T04:34:26Z", "author": {"login": "landychan"}, "path": "runelite-client/src/test/java/net/runelite/client/plugins/prayer/PrayerPluginTest.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Copyright (c) 2017, Adam <Adam@sigterm.info>\n+ * Copyright (c) 2018, Raqes <j.raqes@gmail.com>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.prayer;\n+\n+import com.google.inject.Guice;\n+import com.google.inject.testing.fieldbinder.Bind;\n+import com.google.inject.testing.fieldbinder.BoundFieldModule;\n+import net.runelite.api.*;\n+import net.runelite.api.events.ItemContainerChanged;\n+import net.runelite.client.game.ItemManager;\n+import net.runelite.client.game.SpriteManager;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+import net.runelite.client.ui.overlay.infobox.InfoBoxManager;\n+import net.runelite.http.api.item.ItemEquipmentStats;\n+import net.runelite.http.api.item.ItemStats;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import javax.inject.Inject;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class PrayerPluginTest\n+{\n+\n+\t@Inject\n+\tprivate PrayerPlugin prayerPlugin;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate Client client;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate PrayerConfig config;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate OverlayManager overlayManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate InfoBoxManager infoBoxManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate SpriteManager spriteManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate ScheduledExecutorService executor;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate ItemManager itemManager;\n+\n+\t@Before\n+\tpublic void before()\n+\t{\n+\t\tGuice.createInjector(BoundFieldModule.of(this)).injectMembers(this);\n+\t}\n+\n+\t@Test\n+\tpublic void testGetEstimatedTimeRemainingOverOneHour()\n+\t{\n+\n+\t\tString expectedString = \"1:19:12\";\n+\n+\t\tItemStats itemStats = new ItemStats(false, true, 1, 8,\n+\t\t\tItemEquipmentStats.builder()\n+\t\t\t\t.slot(EquipmentInventorySlot.WEAPON.getSlotIdx())\n+\t\t\t\t.prayer(50)\n+\t\t\t\t.build());\n+\n+\t\tItemContainer itemContainer = mock(ItemContainer.class);\n+\n+\t\twhen(client.isPrayerActive(Prayer.PRESERVE)).thenReturn(true);\n+\t\twhen(client.getBoostedSkillLevel(Skill.PRAYER)).thenReturn(99);\n+\t\twhen(client.getItemContainer(InventoryID.EQUIPMENT)).thenReturn(itemContainer);\n+\t\twhen(itemContainer.getItems()).thenReturn(new Item[]{new Item(ItemID.TWISTED_BOW, 1)});\n+\t\twhen(itemManager.getItemStats(anyInt(), anyBoolean())).thenReturn(itemStats);\n+\n+\t\tprayerPlugin.onItemContainerChanged(new ItemContainerChanged(InventoryID.EQUIPMENT.getId(), itemContainer));\n+\t\tString actualString = prayerPlugin.getEstimatedTimeRemaining(false);\n+\n+\t\tAssert.assertEquals(expectedString, actualString);\n+\t}\n+\n+\t@Test\n+\tpublic void testGetEstimatedTimeRemainingUnderOneHour()\n+\t{\n+\n+\t\tString expectedString = \"29:42\";\n+\n+\t\tItemContainer itemContainer = mock(ItemContainer.class);\n+\n+\t\twhen(client.isPrayerActive(Prayer.PRESERVE)).thenReturn(true);\n+\t\twhen(client.getBoostedSkillLevel(Skill.PRAYER)).thenReturn(99);\n+\t\twhen(client.getItemContainer(InventoryID.EQUIPMENT)).thenReturn(itemContainer);\n+\t\twhen(itemContainer.getItems()).thenReturn(new Item[]{});\n+\n+\t\tprayerPlugin.onItemContainerChanged(new ItemContainerChanged(InventoryID.EQUIPMENT.getId(), itemContainer));\n+\t\tString actualString = prayerPlugin.getEstimatedTimeRemaining(false);\n+\n+\t\tAssert.assertEquals(expectedString, actualString);\n+\t}\n+\n+\t@Test\n+\tpublic void testGetEstimatedTimeRemainingFormatForOrbUnderOneHour()\n+\t{\n+\n+\t\tString expectedString = \"29m\";\n+\n+\t\tItemContainer itemContainer = mock(ItemContainer.class);\n+\n+\t\twhen(client.isPrayerActive(Prayer.PRESERVE)).thenReturn(true);\n+\t\twhen(client.getBoostedSkillLevel(Skill.PRAYER)).thenReturn(99);\n+\t\twhen(client.getItemContainer(InventoryID.EQUIPMENT)).thenReturn(itemContainer);\n+\t\twhen(itemContainer.getItems()).thenReturn(new Item[]{});\n+\n+\t\tprayerPlugin.onItemContainerChanged(new ItemContainerChanged(InventoryID.EQUIPMENT.getId(), itemContainer));\n+\t\tString actualString = prayerPlugin.getEstimatedTimeRemaining(true);\n+\n+\t\tAssert.assertEquals(expectedString, actualString);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3NDg0Mg=="}, "originalCommit": {"oid": "93d9d17e646d3e5ea51220f67c8eb73ddf894977"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDIzMzUyOnYy", "diffSide": "RIGHT", "path": "runelite-client/src/test/java/net/runelite/client/plugins/prayer/PrayerPluginTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwNDowODoxMVrOG3JLyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNDozNDowOVrOG3TVRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3NTMzOA==", "bodyText": "Don't use a real item ID unless you're using real stats.", "url": "https://github.com/runelite/runelite/pull/12212#discussion_r460475338", "createdAt": "2020-07-26T04:08:11Z", "author": {"login": "Nightfirecat"}, "path": "runelite-client/src/test/java/net/runelite/client/plugins/prayer/PrayerPluginTest.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Copyright (c) 2017, Adam <Adam@sigterm.info>\n+ * Copyright (c) 2018, Raqes <j.raqes@gmail.com>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.prayer;\n+\n+import com.google.inject.Guice;\n+import com.google.inject.testing.fieldbinder.Bind;\n+import com.google.inject.testing.fieldbinder.BoundFieldModule;\n+import net.runelite.api.*;\n+import net.runelite.api.events.ItemContainerChanged;\n+import net.runelite.client.game.ItemManager;\n+import net.runelite.client.game.SpriteManager;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+import net.runelite.client.ui.overlay.infobox.InfoBoxManager;\n+import net.runelite.http.api.item.ItemEquipmentStats;\n+import net.runelite.http.api.item.ItemStats;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import javax.inject.Inject;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class PrayerPluginTest\n+{\n+\n+\t@Inject\n+\tprivate PrayerPlugin prayerPlugin;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate Client client;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate PrayerConfig config;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate OverlayManager overlayManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate InfoBoxManager infoBoxManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate SpriteManager spriteManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate ScheduledExecutorService executor;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate ItemManager itemManager;\n+\n+\t@Before\n+\tpublic void before()\n+\t{\n+\t\tGuice.createInjector(BoundFieldModule.of(this)).injectMembers(this);\n+\t}\n+\n+\t@Test\n+\tpublic void testGetEstimatedTimeRemainingOverOneHour()\n+\t{\n+\n+\t\tString expectedString = \"1:19:12\";\n+\n+\t\tItemStats itemStats = new ItemStats(false, true, 1, 8,\n+\t\t\tItemEquipmentStats.builder()\n+\t\t\t\t.slot(EquipmentInventorySlot.WEAPON.getSlotIdx())\n+\t\t\t\t.prayer(50)\n+\t\t\t\t.build());\n+\n+\t\tItemContainer itemContainer = mock(ItemContainer.class);\n+\n+\t\twhen(client.isPrayerActive(Prayer.PRESERVE)).thenReturn(true);\n+\t\twhen(client.getBoostedSkillLevel(Skill.PRAYER)).thenReturn(99);\n+\t\twhen(client.getItemContainer(InventoryID.EQUIPMENT)).thenReturn(itemContainer);\n+\t\twhen(itemContainer.getItems()).thenReturn(new Item[]{new Item(ItemID.TWISTED_BOW, 1)});\n+\t\twhen(itemManager.getItemStats(anyInt(), anyBoolean())).thenReturn(itemStats);\n+\n+\t\tprayerPlugin.onItemContainerChanged(new ItemContainerChanged(InventoryID.EQUIPMENT.getId(), itemContainer));\n+\t\tString actualString = prayerPlugin.getEstimatedTimeRemaining(false);\n+\n+\t\tAssert.assertEquals(expectedString, actualString);\n+\t}\n+\n+\t@Test\n+\tpublic void testGetEstimatedTimeRemainingUnderOneHour()\n+\t{\n+\n+\t\tString expectedString = \"29:42\";\n+\n+\t\tItemContainer itemContainer = mock(ItemContainer.class);\n+\n+\t\twhen(client.isPrayerActive(Prayer.PRESERVE)).thenReturn(true);\n+\t\twhen(client.getBoostedSkillLevel(Skill.PRAYER)).thenReturn(99);\n+\t\twhen(client.getItemContainer(InventoryID.EQUIPMENT)).thenReturn(itemContainer);\n+\t\twhen(itemContainer.getItems()).thenReturn(new Item[]{});\n+\n+\t\tprayerPlugin.onItemContainerChanged(new ItemContainerChanged(InventoryID.EQUIPMENT.getId(), itemContainer));\n+\t\tString actualString = prayerPlugin.getEstimatedTimeRemaining(false);\n+\n+\t\tAssert.assertEquals(expectedString, actualString);\n+\t}\n+\n+\t@Test\n+\tpublic void testGetEstimatedTimeRemainingFormatForOrbUnderOneHour()\n+\t{\n+\n+\t\tString expectedString = \"29m\";\n+\n+\t\tItemContainer itemContainer = mock(ItemContainer.class);\n+\n+\t\twhen(client.isPrayerActive(Prayer.PRESERVE)).thenReturn(true);\n+\t\twhen(client.getBoostedSkillLevel(Skill.PRAYER)).thenReturn(99);\n+\t\twhen(client.getItemContainer(InventoryID.EQUIPMENT)).thenReturn(itemContainer);\n+\t\twhen(itemContainer.getItems()).thenReturn(new Item[]{});\n+\n+\t\tprayerPlugin.onItemContainerChanged(new ItemContainerChanged(InventoryID.EQUIPMENT.getId(), itemContainer));\n+\t\tString actualString = prayerPlugin.getEstimatedTimeRemaining(true);\n+\n+\t\tAssert.assertEquals(expectedString, actualString);\n+\t}\n+\n+\t@Test\n+\tpublic void testGetEstimatedTimeRemainingFormatForOrbOverOneHour()\n+\t{\n+\n+\t\tString expectedString = \"79m\";\n+\n+\t\tItemStats itemStats = new ItemStats(false, true, 1, 8,\n+\t\t\tItemEquipmentStats.builder()\n+\t\t\t\t.slot(EquipmentInventorySlot.WEAPON.getSlotIdx())\n+\t\t\t\t.prayer(50)\n+\t\t\t\t.build());\n+\n+\t\tItemContainer itemContainer = mock(ItemContainer.class);\n+\n+\t\twhen(client.isPrayerActive(Prayer.PRESERVE)).thenReturn(true);\n+\t\twhen(client.getBoostedSkillLevel(Skill.PRAYER)).thenReturn(99);\n+\t\twhen(client.getItemContainer(InventoryID.EQUIPMENT)).thenReturn(itemContainer);\n+\t\twhen(itemContainer.getItems()).thenReturn(new Item[]{new Item(ItemID.TWISTED_BOW, 1)});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93d9d17e646d3e5ea51220f67c8eb73ddf894977"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY0MTYwNQ==", "bodyText": "Replaced the real item ID with 99999", "url": "https://github.com/runelite/runelite/pull/12212#discussion_r460641605", "createdAt": "2020-07-27T04:34:09Z", "author": {"login": "landychan"}, "path": "runelite-client/src/test/java/net/runelite/client/plugins/prayer/PrayerPluginTest.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Copyright (c) 2017, Adam <Adam@sigterm.info>\n+ * Copyright (c) 2018, Raqes <j.raqes@gmail.com>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.prayer;\n+\n+import com.google.inject.Guice;\n+import com.google.inject.testing.fieldbinder.Bind;\n+import com.google.inject.testing.fieldbinder.BoundFieldModule;\n+import net.runelite.api.*;\n+import net.runelite.api.events.ItemContainerChanged;\n+import net.runelite.client.game.ItemManager;\n+import net.runelite.client.game.SpriteManager;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+import net.runelite.client.ui.overlay.infobox.InfoBoxManager;\n+import net.runelite.http.api.item.ItemEquipmentStats;\n+import net.runelite.http.api.item.ItemStats;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import javax.inject.Inject;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class PrayerPluginTest\n+{\n+\n+\t@Inject\n+\tprivate PrayerPlugin prayerPlugin;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate Client client;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate PrayerConfig config;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate OverlayManager overlayManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate InfoBoxManager infoBoxManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate SpriteManager spriteManager;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate ScheduledExecutorService executor;\n+\n+\t@Mock\n+\t@Bind\n+\tprivate ItemManager itemManager;\n+\n+\t@Before\n+\tpublic void before()\n+\t{\n+\t\tGuice.createInjector(BoundFieldModule.of(this)).injectMembers(this);\n+\t}\n+\n+\t@Test\n+\tpublic void testGetEstimatedTimeRemainingOverOneHour()\n+\t{\n+\n+\t\tString expectedString = \"1:19:12\";\n+\n+\t\tItemStats itemStats = new ItemStats(false, true, 1, 8,\n+\t\t\tItemEquipmentStats.builder()\n+\t\t\t\t.slot(EquipmentInventorySlot.WEAPON.getSlotIdx())\n+\t\t\t\t.prayer(50)\n+\t\t\t\t.build());\n+\n+\t\tItemContainer itemContainer = mock(ItemContainer.class);\n+\n+\t\twhen(client.isPrayerActive(Prayer.PRESERVE)).thenReturn(true);\n+\t\twhen(client.getBoostedSkillLevel(Skill.PRAYER)).thenReturn(99);\n+\t\twhen(client.getItemContainer(InventoryID.EQUIPMENT)).thenReturn(itemContainer);\n+\t\twhen(itemContainer.getItems()).thenReturn(new Item[]{new Item(ItemID.TWISTED_BOW, 1)});\n+\t\twhen(itemManager.getItemStats(anyInt(), anyBoolean())).thenReturn(itemStats);\n+\n+\t\tprayerPlugin.onItemContainerChanged(new ItemContainerChanged(InventoryID.EQUIPMENT.getId(), itemContainer));\n+\t\tString actualString = prayerPlugin.getEstimatedTimeRemaining(false);\n+\n+\t\tAssert.assertEquals(expectedString, actualString);\n+\t}\n+\n+\t@Test\n+\tpublic void testGetEstimatedTimeRemainingUnderOneHour()\n+\t{\n+\n+\t\tString expectedString = \"29:42\";\n+\n+\t\tItemContainer itemContainer = mock(ItemContainer.class);\n+\n+\t\twhen(client.isPrayerActive(Prayer.PRESERVE)).thenReturn(true);\n+\t\twhen(client.getBoostedSkillLevel(Skill.PRAYER)).thenReturn(99);\n+\t\twhen(client.getItemContainer(InventoryID.EQUIPMENT)).thenReturn(itemContainer);\n+\t\twhen(itemContainer.getItems()).thenReturn(new Item[]{});\n+\n+\t\tprayerPlugin.onItemContainerChanged(new ItemContainerChanged(InventoryID.EQUIPMENT.getId(), itemContainer));\n+\t\tString actualString = prayerPlugin.getEstimatedTimeRemaining(false);\n+\n+\t\tAssert.assertEquals(expectedString, actualString);\n+\t}\n+\n+\t@Test\n+\tpublic void testGetEstimatedTimeRemainingFormatForOrbUnderOneHour()\n+\t{\n+\n+\t\tString expectedString = \"29m\";\n+\n+\t\tItemContainer itemContainer = mock(ItemContainer.class);\n+\n+\t\twhen(client.isPrayerActive(Prayer.PRESERVE)).thenReturn(true);\n+\t\twhen(client.getBoostedSkillLevel(Skill.PRAYER)).thenReturn(99);\n+\t\twhen(client.getItemContainer(InventoryID.EQUIPMENT)).thenReturn(itemContainer);\n+\t\twhen(itemContainer.getItems()).thenReturn(new Item[]{});\n+\n+\t\tprayerPlugin.onItemContainerChanged(new ItemContainerChanged(InventoryID.EQUIPMENT.getId(), itemContainer));\n+\t\tString actualString = prayerPlugin.getEstimatedTimeRemaining(true);\n+\n+\t\tAssert.assertEquals(expectedString, actualString);\n+\t}\n+\n+\t@Test\n+\tpublic void testGetEstimatedTimeRemainingFormatForOrbOverOneHour()\n+\t{\n+\n+\t\tString expectedString = \"79m\";\n+\n+\t\tItemStats itemStats = new ItemStats(false, true, 1, 8,\n+\t\t\tItemEquipmentStats.builder()\n+\t\t\t\t.slot(EquipmentInventorySlot.WEAPON.getSlotIdx())\n+\t\t\t\t.prayer(50)\n+\t\t\t\t.build());\n+\n+\t\tItemContainer itemContainer = mock(ItemContainer.class);\n+\n+\t\twhen(client.isPrayerActive(Prayer.PRESERVE)).thenReturn(true);\n+\t\twhen(client.getBoostedSkillLevel(Skill.PRAYER)).thenReturn(99);\n+\t\twhen(client.getItemContainer(InventoryID.EQUIPMENT)).thenReturn(itemContainer);\n+\t\twhen(itemContainer.getItems()).thenReturn(new Item[]{new Item(ItemID.TWISTED_BOW, 1)});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ3NTMzOA=="}, "originalCommit": {"oid": "93d9d17e646d3e5ea51220f67c8eb73ddf894977"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTg5NDM3OnYy", "diffSide": "RIGHT", "path": "runelite-client/src/test/java/net/runelite/client/plugins/prayer/PrayerPluginTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNDozNzowNlrOG38SrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNDozNzowNlrOG38SrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMxMjY4NA==", "bodyText": "Neither of these people are you--this should be changed.", "url": "https://github.com/runelite/runelite/pull/12212#discussion_r461312684", "createdAt": "2020-07-28T04:37:06Z", "author": {"login": "Nightfirecat"}, "path": "runelite-client/src/test/java/net/runelite/client/plugins/prayer/PrayerPluginTest.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright (c) 2017, Adam <Adam@sigterm.info>\n+ * Copyright (c) 2018, Raqes <j.raqes@gmail.com>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "463a36252507e642fcd0447213597aaf8a9fb671"}, "originalPosition": 3}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3330, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}