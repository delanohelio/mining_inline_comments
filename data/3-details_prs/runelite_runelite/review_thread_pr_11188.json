{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4NDI3NDMz", "number": 11188, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMzo0ODo1MVrODuoGZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDowMjo1NFrODw2KAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjE4MDg0OnYy", "diffSide": "RIGHT", "path": "runelite-client/src/main/java/net/runelite/client/ui/overlay/OverlayPanel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMzo0ODo1MVrOGAszMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMzo0ODo1MVrOGAszMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM4NzE4Ng==", "bodyText": "I think this can just be deleted", "url": "https://github.com/runelite/runelite/pull/11188#discussion_r403387186", "createdAt": "2020-04-03T23:48:51Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/ui/overlay/OverlayPanel.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright (c) 2018, Tomas Slusny <slusnucky@gmail.com>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.ui.overlay;\n+\n+import java.awt.Dimension;\n+import java.awt.Graphics2D;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import lombok.Getter;\n+import lombok.Setter;\n+import net.runelite.client.plugins.Plugin;\n+import net.runelite.client.ui.FontManager;\n+import net.runelite.client.ui.overlay.components.ComponentConstants;\n+import net.runelite.client.ui.overlay.components.PanelComponent;\n+\n+@Getter\n+@Setter\n+public abstract class OverlayPanel extends Overlay\n+{\n+\tprivate final PanelComponent panel = new PanelComponent();\n+\tprivate Point preferredLocation;\n+\tprivate Dimension preferredSize;\n+\tprivate OverlayPosition preferredPosition;\n+\tprivate Rectangle bounds = new Rectangle();\n+\tprivate OverlayPosition position = OverlayPosition.TOP_LEFT;\n+\tprivate OverlayPriority priority = OverlayPriority.NONE;\n+\tprivate OverlayLayer layer = OverlayLayer.UNDER_WIDGETS;\n+\tprivate boolean clearChildren = true;\n+\tprivate boolean dynamicFont = false;\n+\n+\tprotected OverlayPanel()\n+\t{\n+\t\tsuper();\n+\t}\n+\n+\tprotected OverlayPanel(Plugin plugin)\n+\t{\n+\t\tsuper(plugin);\n+\t}\n+\n+\t/**\n+\t * Overlay name, used for saving the overlay, needs to be unique\n+\t * @return overlay name\n+\t */\n+\tpublic String getName()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5d917e1296b60bfe356c5dc0d737235241baec1"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMzcwNzgzOnYy", "diffSide": "RIGHT", "path": "runelite-client/src/main/java/net/runelite/client/ui/overlay/OverlayRenderer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQyMzoyOTo0M1rOGA4ELg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQyMzoyOTo0M1rOGA4ELg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzU3MTc1OA==", "bodyText": "this should probably be a reference comparison, or better yet, a flag for the resizing mode rather than reusing the cursor", "url": "https://github.com/runelite/runelite/pull/11188#discussion_r403571758", "createdAt": "2020-04-04T23:29:43Z", "author": {"login": "abextm"}, "path": "runelite-client/src/main/java/net/runelite/client/ui/overlay/OverlayRenderer.java", "diffHunk": "@@ -277,9 +287,21 @@ public void render(Graphics2D graphics, final OverlayLayer layer)\n \t\t\t\t\tif (inOverlayDraggingMode)\n \t\t\t\t\t{\n \t\t\t\t\t\tfinal Color previous = graphics.getColor();\n-\t\t\t\t\t\tgraphics.setColor(movedOverlay == overlay ? MOVING_OVERLAY_ACTIVE_COLOR : MOVING_OVERLAY_COLOR);\n+\t\t\t\t\t\tfinal Stroke previousStroke = graphics.getStroke();\n+\n+\t\t\t\t\t\tif (hoveredOverlay == overlay && !clientUI.getCurrentCursor().equals(clientUI.getDefaultCursor()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf0346fc4b083bfb4e6c3894e439e15bca676f25"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMzc3MjAxOnYy", "diffSide": "RIGHT", "path": "runelite-client/src/main/java/net/runelite/client/ui/overlay/OverlayPanel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQyMzo0NzowNFrOGA4hdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQyMzo0NzowNFrOGA4hdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzU3OTI1NQ==", "bodyText": "it may be worth adding some javadoc to these", "url": "https://github.com/runelite/runelite/pull/11188#discussion_r403579255", "createdAt": "2020-04-04T23:47:04Z", "author": {"login": "abextm"}, "path": "runelite-client/src/main/java/net/runelite/client/ui/overlay/OverlayPanel.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright (c) 2018, Tomas Slusny <slusnucky@gmail.com>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.ui.overlay;\n+\n+import java.awt.Dimension;\n+import java.awt.Graphics2D;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import lombok.Getter;\n+import lombok.Setter;\n+import net.runelite.client.plugins.Plugin;\n+import net.runelite.client.ui.FontManager;\n+import net.runelite.client.ui.overlay.components.ComponentConstants;\n+import net.runelite.client.ui.overlay.components.PanelComponent;\n+\n+@Getter\n+@Setter\n+public abstract class OverlayPanel extends Overlay\n+{\n+\tprotected final PanelComponent panelComponent = new PanelComponent();\n+\tprivate Point preferredLocation;\n+\tprivate Dimension preferredSize;\n+\tprivate OverlayPosition preferredPosition;\n+\tprivate Rectangle bounds = new Rectangle();\n+\tprivate OverlayPosition position = OverlayPosition.TOP_LEFT;\n+\tprivate OverlayPriority priority = OverlayPriority.NONE;\n+\tprivate OverlayLayer layer = OverlayLayer.UNDER_WIDGETS;\n+\tprivate boolean clearChildren = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0602cab7f2feafff1f229663213fd73030a2ed8c"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMzc3Mjc5OnYy", "diffSide": "RIGHT", "path": "runelite-client/src/main/java/net/runelite/client/ui/overlay/OverlayPanel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQyMzo0NzoyMVrOGA4h4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQyMzo0NzoyMVrOGA4h4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzU3OTM2MA==", "bodyText": "why are you shadowing a bunch of stuff from Overlay?", "url": "https://github.com/runelite/runelite/pull/11188#discussion_r403579360", "createdAt": "2020-04-04T23:47:21Z", "author": {"login": "abextm"}, "path": "runelite-client/src/main/java/net/runelite/client/ui/overlay/OverlayPanel.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright (c) 2018, Tomas Slusny <slusnucky@gmail.com>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.ui.overlay;\n+\n+import java.awt.Dimension;\n+import java.awt.Graphics2D;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import lombok.Getter;\n+import lombok.Setter;\n+import net.runelite.client.plugins.Plugin;\n+import net.runelite.client.ui.FontManager;\n+import net.runelite.client.ui.overlay.components.ComponentConstants;\n+import net.runelite.client.ui.overlay.components.PanelComponent;\n+\n+@Getter\n+@Setter\n+public abstract class OverlayPanel extends Overlay\n+{\n+\tprotected final PanelComponent panelComponent = new PanelComponent();\n+\tprivate Point preferredLocation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0602cab7f2feafff1f229663213fd73030a2ed8c"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNzExNjE2OnYy", "diffSide": "RIGHT", "path": "runelite-client/src/main/java/net/runelite/client/ui/overlay/OverlayRenderer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMjowODozMVrOGBUp1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMjowODozMVrOGBUp1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA0MDE1MA==", "bodyText": "use bitwise or for oring bitfields", "url": "https://github.com/runelite/runelite/pull/11188#discussion_r404040150", "createdAt": "2020-04-06T12:08:31Z", "author": {"login": "abextm"}, "path": "runelite-client/src/main/java/net/runelite/client/ui/overlay/OverlayRenderer.java", "diffHunk": "@@ -294,125 +314,262 @@ public void render(Graphics2D graphics, final OverlayLayer layer)\n \t\t\t\t}\n \t\t\t}\n \t\t}\n+\n \t}\n \n \t@Override\n \tpublic MouseEvent mousePressed(MouseEvent mouseEvent)\n \t{\n-\t\tif (!inOverlayDraggingMode)\n+\t\tif (!inOverlayManagingMode)\n \t\t{\n \t\t\treturn mouseEvent;\n \t\t}\n \n \t\tfinal Point mousePoint = mouseEvent.getPoint();\n \t\tmousePosition.setLocation(mousePoint);\n \n-\t\tsynchronized (overlayManager)\n+\t\tif (currentManagedOverlay == null)\n \t\t{\n-\t\t\tfor (Overlay overlay : overlayManager.getOverlays())\n-\t\t\t{\n-\t\t\t\tfinal OverlayPosition overlayPosition = getCorrectedOverlayPosition(overlay);\n+\t\t\treturn mouseEvent;\n+\t\t}\n \n-\t\t\t\tif (overlayPosition == OverlayPosition.DYNAMIC || overlayPosition == OverlayPosition.TOOLTIP)\n-\t\t\t\t{\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n+\t\tif (SwingUtilities.isRightMouseButton(mouseEvent))\n+\t\t{\n+\t\t\toverlayManager.resetOverlay(currentManagedOverlay);\n+\t\t}\n+\t\telse if (SwingUtilities.isLeftMouseButton(mouseEvent))\n+\t\t{\n+\t\t\tfinal Point offset = new Point(mousePoint.x, mousePoint.y);\n+\t\t\toffset.translate(-currentManagedOverlay.getBounds().x, -currentManagedOverlay.getBounds().y);\n+\t\t\toverlayOffset.setLocation(offset);\n+\n+\t\t\tinOverlayResizingMode = currentManagedOverlay != null && currentManagedOverlay.isResizable() && clientUI.getCurrentCursor() != clientUI.getDefaultCursor();\n+\t\t\tinOverlayDraggingMode = !inOverlayResizingMode;\n+\t\t\tstartedMovingOverlay = true;\n+\t\t\tcurrentManagedBounds = new Rectangle(currentManagedOverlay.getBounds());\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\treturn mouseEvent;\n+\t\t}\n+\n+\t\tmouseEvent.consume();\n+\t\treturn mouseEvent;\n+\t}\n+\n+\t@Override\n+\tpublic MouseEvent mouseMoved(MouseEvent mouseEvent)\n+\t{\n+\t\tif (!inOverlayManagingMode)\n+\t\t{\n+\t\t\treturn mouseEvent;\n+\t\t}\n+\n+\t\tfinal Point mousePoint = mouseEvent.getPoint();\n+\t\tmousePosition.setLocation(mousePoint);\n+\n+\t\tif (!inOverlayResizingMode && !inOverlayDraggingMode)\n+\t\t{\n+\t\t\tcurrentManagedOverlay = null;\n \n-\t\t\t\tif (overlay.getBounds().contains(mousePoint))\n+\t\t\tsynchronized (overlayManager)\n+\t\t\t{\n+\t\t\t\tfor (Overlay overlay : overlayManager.getOverlays())\n \t\t\t\t{\n-\t\t\t\t\tif (SwingUtilities.isRightMouseButton(mouseEvent))\n-\t\t\t\t\t{\n-\t\t\t\t\t\toverlayManager.resetOverlay(overlay);\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n+\t\t\t\t\tfinal Rectangle bounds = overlay.getBounds();\n+\t\t\t\t\tif (bounds.contains(mousePoint))\n \t\t\t\t\t{\n-\t\t\t\t\t\tfinal Point offset = new Point(mousePoint.x, mousePoint.y);\n-\t\t\t\t\t\toffset.translate(-overlay.getBounds().x, -overlay.getBounds().y);\n-\t\t\t\t\t\toverlayOffset.setLocation(offset);\n-\n-\t\t\t\t\t\tmousePoint.translate(-offset.x, -offset.y);\n-\t\t\t\t\t\tmovedOverlay = overlay;\n-\t\t\t\t\t\tmovedOverlay.setPreferredPosition(null);\n-\t\t\t\t\t\tmovedOverlay.setPreferredLocation(mousePoint);\n-\t\t\t\t\t\toverlayManager.saveOverlay(movedOverlay);\n+\t\t\t\t\t\tcurrentManagedOverlay = overlay;\n+\t\t\t\t\t\tbreak;\n \t\t\t\t\t}\n-\n-\t\t\t\t\tmouseEvent.consume();\n-\t\t\t\t\tbreak;\n \t\t\t\t}\n \t\t\t}\n \t\t}\n \n+\t\tif (currentManagedOverlay == null || !currentManagedOverlay.isResizable())\n+\t\t{\n+\t\t\tclientUI.setCursor(clientUI.getDefaultCursor());\n+\t\t\treturn mouseEvent;\n+\t\t}\n+\n+\t\tfinal Rectangle toleranceRect = new Rectangle(currentManagedOverlay.getBounds());\n+\t\ttoleranceRect.grow(-OVERLAY_RESIZE_TOLERANCE, -OVERLAY_RESIZE_TOLERANCE);\n+\t\tfinal int outcode = toleranceRect.outcode(mouseEvent.getPoint());\n+\n+\t\tswitch (outcode)\n+\t\t{\n+\t\t\tcase Rectangle.OUT_TOP:\n+\t\t\t\tclientUI.setCursor(Cursor.getPredefinedCursor(Cursor.N_RESIZE_CURSOR));\n+\t\t\t\tbreak;\n+\t\t\tcase Rectangle.OUT_TOP + Rectangle.OUT_LEFT:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ac946284812a71fb0bbe51ab7cc5368801d3007"}, "originalPosition": 223}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNzEzOTQyOnYy", "diffSide": "RIGHT", "path": "runelite-client/src/main/java/net/runelite/client/ui/overlay/OverlayRenderer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMjoxNDoxNVrOGBU3DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMjoxNDoxNVrOGBU3DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA0MzUzMg==", "bodyText": "It might be good to drop this a few px, its easy to get the resize zone on small overlays when you want to move it.", "url": "https://github.com/runelite/runelite/pull/11188#discussion_r404043532", "createdAt": "2020-04-06T12:14:15Z", "author": {"login": "abextm"}, "path": "runelite-client/src/main/java/net/runelite/client/ui/overlay/OverlayRenderer.java", "diffHunk": "@@ -68,21 +70,29 @@\n \tprivate static final int BORDER = 5;\n \tprivate static final int BORDER_TOP = BORDER + 15;\n \tprivate static final int PADDING = 2;\n+\tprivate static final int MIN_OVERLAY_SIZE = 32;\n+\tprivate static final int OVERLAY_RESIZE_TOLERANCE = 10;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ac946284812a71fb0bbe51ab7cc5368801d3007"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTQwMjUzOnYy", "diffSide": "RIGHT", "path": "runelite-client/src/main/java/net/runelite/client/plugins/inventoryviewer/InventoryViewerOverlay.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTozOTowNlrOGED5bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTozOTowNlrOGED5bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMTM0Mg==", "bodyText": "This also includes the padding/gap, does that matter?", "url": "https://github.com/runelite/runelite/pull/11188#discussion_r406911342", "createdAt": "2020-04-10T19:39:06Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/inventoryviewer/InventoryViewerOverlay.java", "diffHunk": "@@ -57,8 +57,9 @@\n \tprivate InventoryViewerOverlay(Client client, ItemManager itemManager)\n \t{\n \t\tsetPosition(OverlayPosition.BOTTOM_RIGHT);\n-\t\tpanelComponent.setWrapping(4);\n+\t\tpanelComponent.setWrap(true);\n \t\tpanelComponent.setGap(new Point(6, 4));\n+\t\tpanelComponent.setPreferredSize(new Dimension(4 * Constants.ITEM_SPRITE_WIDTH, 0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7512eaa6b2ffd7738a0ca61eed94c9893978f877"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTQwNTA5OnYy", "diffSide": "RIGHT", "path": "runelite-client/src/main/java/net/runelite/client/ui/overlay/infobox/InfoBoxOverlay.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo0MDoxNlrOGED66w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo0MDoxNlrOGED66w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMTcyMw==", "bodyText": "This appears to be causing the infoboxes to wrap at 2 (although it reads like it would make it wrap after 1..?). Regardless it should stay consistent with the current behavior and wrap at 4 by default.", "url": "https://github.com/runelite/runelite/pull/11188#discussion_r406911723", "createdAt": "2020-04-10T19:40:16Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/ui/overlay/infobox/InfoBoxOverlay.java", "diffHunk": "@@ -83,11 +84,10 @@ public Dimension render(Graphics2D graphics)\n \t\t}\n \n \t\tpanelComponent.getChildren().clear();\n-\t\tpanelComponent.setWrapping(config.infoBoxWrap());\n+\t\tpanelComponent.setPreferredSize(new Dimension(config.infoBoxSize(), config.infoBoxSize()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7512eaa6b2ffd7738a0ca61eed94c9893978f877"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTQ1NTM2OnYy", "diffSide": "LEFT", "path": "runelite-client/src/main/java/net/runelite/client/plugins/npcunaggroarea/NpcAggroAreaNotWorkingOverlay.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDowMjo1NFrOGEEaJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDowMjo1NFrOGEEaJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxOTcxOA==", "bodyText": "Couldn't you have instead just setClearChildren(false)?", "url": "https://github.com/runelite/runelite/pull/11188#discussion_r406919718", "createdAt": "2020-04-10T20:02:54Z", "author": {"login": "Adam-"}, "path": "runelite-client/src/main/java/net/runelite/client/plugins/npcunaggroarea/NpcAggroAreaNotWorkingOverlay.java", "diffHunk": "@@ -27,30 +27,22 @@\n import com.google.inject.Inject;\n import java.awt.Dimension;\n import java.awt.Graphics2D;\n-import net.runelite.client.ui.overlay.Overlay;\n+import net.runelite.client.ui.overlay.OverlayPanel;\n import net.runelite.client.ui.overlay.OverlayPosition;\n import net.runelite.client.ui.overlay.OverlayPriority;\n import net.runelite.client.ui.overlay.components.LineComponent;\n-import net.runelite.client.ui.overlay.components.PanelComponent;\n \n-class NpcAggroAreaNotWorkingOverlay extends Overlay\n+class NpcAggroAreaNotWorkingOverlay extends OverlayPanel\n {\n \tprivate final NpcAggroAreaPlugin plugin;\n \tprivate final NpcAggroAreaConfig config;\n-\tprivate final PanelComponent panelComponent;\n \n \t@Inject\n \tprivate NpcAggroAreaNotWorkingOverlay(NpcAggroAreaPlugin plugin, NpcAggroAreaConfig config)\n \t{\n \t\tthis.plugin = plugin;\n \t\tthis.config = config;\n \n-\t\tpanelComponent = new PanelComponent();\n-\t\tpanelComponent.setPreferredSize(new Dimension(150, 0));\n-\t\tpanelComponent.getChildren().add(LineComponent.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27466f3e1f0cad28f57680ff390051f0064bb8a8"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3604, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}