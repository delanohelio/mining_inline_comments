{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxMDk5ODM4", "number": 3784, "reviewThreads": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOTo0ODoyNVrOEmPWOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMzoxMjoyNFrOEs2U6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTMyNzk1OnYy", "diffSide": "RIGHT", "path": "cloud-sql/r2dbc/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOTo0ODoyNVrOHWJ3TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOTo0ODoyNVrOHWJ3TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk5MjMzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [create a project](https://cloud.google.com/resource-manager/docs/creating-managing-projects#creating_a_project).\n          \n          \n            \n            [creating a project](https://cloud.google.com/resource-manager/docs/creating-managing-projects#creating_a_project).", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r492992333", "createdAt": "2020-09-22T19:48:25Z", "author": {"login": "dzou"}, "path": "cloud-sql/r2dbc/README.md", "diffHunk": "@@ -0,0 +1,61 @@\n+# Connecting to Cloud SQL - MySQL\n+\n+## Before you begin\n+\n+1. If you haven't already, set up a Java Development Environment (including google-cloud-sdk and\n+maven utilities) by following the [java setup guide](https://cloud.google.com/java/docs/setup) and\n+[create a project](https://cloud.google.com/resource-manager/docs/creating-managing-projects#creating_a_project).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964cabd4d410250aba1363592d4c49dc2d1ad289"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTMyODk5OnYy", "diffSide": "RIGHT", "path": "cloud-sql/r2dbc/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOTo0ODo0NFrOHWJ36w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOTo0ODo0NFrOHWJ36w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk5MjQ5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            maven utilities) by following the [java setup guide](https://cloud.google.com/java/docs/setup) and\n          \n          \n            \n            maven utilities) by following the [Java setup guide](https://cloud.google.com/java/docs/setup) and", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r492992491", "createdAt": "2020-09-22T19:48:44Z", "author": {"login": "dzou"}, "path": "cloud-sql/r2dbc/README.md", "diffHunk": "@@ -0,0 +1,61 @@\n+# Connecting to Cloud SQL - MySQL\n+\n+## Before you begin\n+\n+1. If you haven't already, set up a Java Development Environment (including google-cloud-sdk and\n+maven utilities) by following the [java setup guide](https://cloud.google.com/java/docs/setup) and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964cabd4d410250aba1363592d4c49dc2d1ad289"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTMzMTY1OnYy", "diffSide": "RIGHT", "path": "cloud-sql/r2dbc/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOTo0OToyOVrOHWJ5hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOTo0OToyOVrOHWJ5hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk5MjkwMA==", "bodyText": "Add four spaces to both code blocks to make them indented within the list in the preview: https://github.com/GoogleCloudPlatform/java-docs-samples/blob/964cabd4d410250aba1363592d4c49dc2d1ad289/cloud-sql/r2dbc/README.md", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r492992900", "createdAt": "2020-09-22T19:49:29Z", "author": {"login": "dzou"}, "path": "cloud-sql/r2dbc/README.md", "diffHunk": "@@ -0,0 +1,61 @@\n+# Connecting to Cloud SQL - MySQL\n+\n+## Before you begin\n+\n+1. If you haven't already, set up a Java Development Environment (including google-cloud-sdk and\n+maven utilities) by following the [java setup guide](https://cloud.google.com/java/docs/setup) and\n+[create a project](https://cloud.google.com/resource-manager/docs/creating-managing-projects#creating_a_project).\n+\n+1. Create a 2nd Gen Cloud SQL Instance by following these\n+[instructions](https://cloud.google.com/sql/docs/mysql/create-instance). Note the connection string,\n+database user, and database password that you create.\n+\n+1. Create a database for your application by following these\n+[instructions](https://cloud.google.com/sql/docs/mysql/create-manage-databases). Note the database\n+name.\n+\n+1. Edit `src/resources/application.properties` and enter your connection details in the following format\n+```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964cabd4d410250aba1363592d4c49dc2d1ad289"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTM0NDEzOnYy", "diffSide": "RIGHT", "path": "cloud-sql/r2dbc/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOTo1MzoxN1rOHWKBWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOTo1MzoxN1rOHWKBWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk5NDkwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            for example\n          \n          \n            \n            For example:", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r492994904", "createdAt": "2020-09-22T19:53:17Z", "author": {"login": "dzou"}, "path": "cloud-sql/r2dbc/README.md", "diffHunk": "@@ -0,0 +1,61 @@\n+# Connecting to Cloud SQL - MySQL\n+\n+## Before you begin\n+\n+1. If you haven't already, set up a Java Development Environment (including google-cloud-sdk and\n+maven utilities) by following the [java setup guide](https://cloud.google.com/java/docs/setup) and\n+[create a project](https://cloud.google.com/resource-manager/docs/creating-managing-projects#creating_a_project).\n+\n+1. Create a 2nd Gen Cloud SQL Instance by following these\n+[instructions](https://cloud.google.com/sql/docs/mysql/create-instance). Note the connection string,\n+database user, and database password that you create.\n+\n+1. Create a database for your application by following these\n+[instructions](https://cloud.google.com/sql/docs/mysql/create-manage-databases). Note the database\n+name.\n+\n+1. Edit `src/resources/application.properties` and enter your connection details in the following format\n+```\n+connectionString = r2dbc:gcp:mysql://<user>:<password>@<connection_name>/<db_name>\n+```\n+for example", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964cabd4d410250aba1363592d4c49dc2d1ad289"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTM1MTQ0OnYy", "diffSide": "RIGHT", "path": "cloud-sql/r2dbc/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOTo1NToxOFrOHWKFuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMjoyOToyNVrOHZR_Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk5NjAyNA==", "bodyText": "Can you do a 4-space tab on the lines under each numbered-list item so they appear indented inside each item in the list?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r492996024", "createdAt": "2020-09-22T19:55:18Z", "author": {"login": "dzou"}, "path": "cloud-sql/r2dbc/README.md", "diffHunk": "@@ -0,0 +1,61 @@\n+# Connecting to Cloud SQL - MySQL\n+\n+## Before you begin\n+\n+1. If you haven't already, set up a Java Development Environment (including google-cloud-sdk and\n+maven utilities) by following the [java setup guide](https://cloud.google.com/java/docs/setup) and\n+[create a project](https://cloud.google.com/resource-manager/docs/creating-managing-projects#creating_a_project).\n+\n+1. Create a 2nd Gen Cloud SQL Instance by following these\n+[instructions](https://cloud.google.com/sql/docs/mysql/create-instance). Note the connection string,\n+database user, and database password that you create.\n+\n+1. Create a database for your application by following these\n+[instructions](https://cloud.google.com/sql/docs/mysql/create-manage-databases). Note the database\n+name.\n+\n+1. Edit `src/resources/application.properties` and enter your connection details in the following format\n+```\n+connectionString = r2dbc:gcp:mysql://<user>:<password>@<connection_name>/<db_name>\n+```\n+for example\n+```\n+connectionString = r2dbc:gcp:mysql://user:123456@my-project:us-central1:r2dbctest/testdb \n+```\n+\n+## Deploying locally\n+\n+To run this application locally, run the following command inside the project folder:\n+\n+```bash\n+mvn spring-boot:run\n+```\n+\n+Navigate towards `http://127.0.0.1:8080` to verify your application is running correctly.\n+\n+### Deploy to Cloud Run\n+\n+See the [Cloud Run documentation](https://cloud.google.com/run/docs/configuring/connect-cloudsql)\n+for more details on connecting a Cloud Run service to Cloud SQL.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964cabd4d410250aba1363592d4c49dc2d1ad289"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI3MTE5OQ==", "bodyText": "resolved", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r496271199", "createdAt": "2020-09-28T22:29:25Z", "author": {"login": "dmitry-s"}, "path": "cloud-sql/r2dbc/README.md", "diffHunk": "@@ -0,0 +1,61 @@\n+# Connecting to Cloud SQL - MySQL\n+\n+## Before you begin\n+\n+1. If you haven't already, set up a Java Development Environment (including google-cloud-sdk and\n+maven utilities) by following the [java setup guide](https://cloud.google.com/java/docs/setup) and\n+[create a project](https://cloud.google.com/resource-manager/docs/creating-managing-projects#creating_a_project).\n+\n+1. Create a 2nd Gen Cloud SQL Instance by following these\n+[instructions](https://cloud.google.com/sql/docs/mysql/create-instance). Note the connection string,\n+database user, and database password that you create.\n+\n+1. Create a database for your application by following these\n+[instructions](https://cloud.google.com/sql/docs/mysql/create-manage-databases). Note the database\n+name.\n+\n+1. Edit `src/resources/application.properties` and enter your connection details in the following format\n+```\n+connectionString = r2dbc:gcp:mysql://<user>:<password>@<connection_name>/<db_name>\n+```\n+for example\n+```\n+connectionString = r2dbc:gcp:mysql://user:123456@my-project:us-central1:r2dbctest/testdb \n+```\n+\n+## Deploying locally\n+\n+To run this application locally, run the following command inside the project folder:\n+\n+```bash\n+mvn spring-boot:run\n+```\n+\n+Navigate towards `http://127.0.0.1:8080` to verify your application is running correctly.\n+\n+### Deploy to Cloud Run\n+\n+See the [Cloud Run documentation](https://cloud.google.com/run/docs/configuring/connect-cloudsql)\n+for more details on connecting a Cloud Run service to Cloud SQL.\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk5NjAyNA=="}, "originalCommit": {"oid": "964cabd4d410250aba1363592d4c49dc2d1ad289"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTM1NzQzOnYy", "diffSide": "RIGHT", "path": "cloud-sql/r2dbc/src/main/java/com/example/cloudsql/r2dbcsample/CommanLineRunnerSchemaCreator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOTo1Njo1OFrOHWKJTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOTo1Njo1OFrOHWKJTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk5Njk0MA==", "bodyText": "All of the source files need to be formatted to use 2-space tabs; there is some inconsistent tab usage.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r492996940", "createdAt": "2020-09-22T19:56:58Z", "author": {"login": "dzou"}, "path": "cloud-sql/r2dbc/src/main/java/com/example/cloudsql/r2dbcsample/CommanLineRunnerSchemaCreator.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964cabd4d410250aba1363592d4c49dc2d1ad289"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTM2MTAzOnYy", "diffSide": "RIGHT", "path": "cloud-sql/r2dbc/src/main/java/com/example/cloudsql/r2dbcsample/CommanLineRunnerSchemaCreator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOTo1ODowOFrOHWKLiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOTo1ODowOFrOHWKLiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk5NzUxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class CommanLineRunnerSchemaCreator implements CommandLineRunner {\n          \n          \n            \n            public class CommandLineRunnerSchemaCreator implements CommandLineRunner {\n          \n      \n    \n    \n  \n\nAlso will need to rename the file.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r492997513", "createdAt": "2020-09-22T19:58:08Z", "author": {"login": "dzou"}, "path": "cloud-sql/r2dbc/src/main/java/com/example/cloudsql/r2dbcsample/CommanLineRunnerSchemaCreator.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudsql.r2dbcsample;\n+\n+import io.r2dbc.spi.ConnectionFactory;\n+import java.util.Arrays;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.data.r2dbc.core.DatabaseClient;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class CommanLineRunnerSchemaCreator implements CommandLineRunner {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964cabd4d410250aba1363592d4c49dc2d1ad289"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTQyMDg4OnYy", "diffSide": "RIGHT", "path": "cloud-sql/r2dbc/src/main/java/com/example/cloudsql/r2dbcsample/VoteController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMDoxNjoyN1rOHWKwag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjoyMTo1N1rOHW2jug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwNjk1NA==", "bodyText": "I think it'd be simpler if you left the .map unnested from the .flatmap, like this:\nreturn serverWebExchange.getFormData()\n        .flatMap(formData -> voteRepository.save(new Vote(formData.getFirst(\"team\"))))\n        .map(vote -> String.format(\n            \"Vote successfully cast for '%s' at time %s!%n\", vote.candidate, vote.timeCast));", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r493006954", "createdAt": "2020-09-22T20:16:27Z", "author": {"login": "dzou"}, "path": "cloud-sql/r2dbc/src/main/java/com/example/cloudsql/r2dbcsample/VoteController.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudsql.r2dbcsample;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.server.ServerWebExchange;\n+import reactor.core.publisher.Mono;\n+\n+@RestController\n+public class VoteController {\n+  @Autowired\n+  VoteRepository voteRepository;\n+\n+  @PostMapping(\"/vote\")\n+  public Mono<String> vote(ServerWebExchange serverWebExchange) {\n+    return serverWebExchange.getFormData()\n+        .flatMap(formData ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964cabd4d410250aba1363592d4c49dc2d1ad289"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyNDYwMg==", "bodyText": "addressed", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r493724602", "createdAt": "2020-09-23T16:21:57Z", "author": {"login": "dmitry-s"}, "path": "cloud-sql/r2dbc/src/main/java/com/example/cloudsql/r2dbcsample/VoteController.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudsql.r2dbcsample;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.server.ServerWebExchange;\n+import reactor.core.publisher.Mono;\n+\n+@RestController\n+public class VoteController {\n+  @Autowired\n+  VoteRepository voteRepository;\n+\n+  @PostMapping(\"/vote\")\n+  public Mono<String> vote(ServerWebExchange serverWebExchange) {\n+    return serverWebExchange.getFormData()\n+        .flatMap(formData ->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwNjk1NA=="}, "originalCommit": {"oid": "964cabd4d410250aba1363592d4c49dc2d1ad289"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NjM0MTI1OnYy", "diffSide": "RIGHT", "path": "cloud-sql/r2dbc/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMjowMjozOFrOHWTSIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMjowMjozOFrOHWTSIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE0NjY1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Navigate towards `http://127.0.0.1:8080` to verify your application is running correctly.\n          \n          \n            \n            Navigate to `http://127.0.0.1:8080` to verify your application is running correctly.\n          \n      \n    \n    \n  \n\nWhy not localhost?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r493146658", "createdAt": "2020-09-23T02:02:38Z", "author": {"login": "meltsufin"}, "path": "cloud-sql/r2dbc/README.md", "diffHunk": "@@ -0,0 +1,61 @@\n+# Connecting to Cloud SQL - MySQL\n+\n+## Before you begin\n+\n+1. If you haven't already, set up a Java Development Environment (including google-cloud-sdk and\n+maven utilities) by following the [java setup guide](https://cloud.google.com/java/docs/setup) and\n+[create a project](https://cloud.google.com/resource-manager/docs/creating-managing-projects#creating_a_project).\n+\n+1. Create a 2nd Gen Cloud SQL Instance by following these\n+[instructions](https://cloud.google.com/sql/docs/mysql/create-instance). Note the connection string,\n+database user, and database password that you create.\n+\n+1. Create a database for your application by following these\n+[instructions](https://cloud.google.com/sql/docs/mysql/create-manage-databases). Note the database\n+name.\n+\n+1. Edit `src/resources/application.properties` and enter your connection details in the following format\n+```\n+connectionString = r2dbc:gcp:mysql://<user>:<password>@<connection_name>/<db_name>\n+```\n+for example\n+```\n+connectionString = r2dbc:gcp:mysql://user:123456@my-project:us-central1:r2dbctest/testdb \n+```\n+\n+## Deploying locally\n+\n+To run this application locally, run the following command inside the project folder:\n+\n+```bash\n+mvn spring-boot:run\n+```\n+\n+Navigate towards `http://127.0.0.1:8080` to verify your application is running correctly.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964cabd4d410250aba1363592d4c49dc2d1ad289"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NjM0NjgzOnYy", "diffSide": "RIGHT", "path": "cloud-sql/r2dbc/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMjowMzo1NlrOHWTVNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMjowMzo1NlrOHWTVNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE0NzQ0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            3. Navigate your browser to the URL noted in step 2.\n          \n          \n            \n            3. Navigate to the URL noted in Step 2.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r493147447", "createdAt": "2020-09-23T02:03:56Z", "author": {"login": "meltsufin"}, "path": "cloud-sql/r2dbc/README.md", "diffHunk": "@@ -0,0 +1,61 @@\n+# Connecting to Cloud SQL - MySQL\n+\n+## Before you begin\n+\n+1. If you haven't already, set up a Java Development Environment (including google-cloud-sdk and\n+maven utilities) by following the [java setup guide](https://cloud.google.com/java/docs/setup) and\n+[create a project](https://cloud.google.com/resource-manager/docs/creating-managing-projects#creating_a_project).\n+\n+1. Create a 2nd Gen Cloud SQL Instance by following these\n+[instructions](https://cloud.google.com/sql/docs/mysql/create-instance). Note the connection string,\n+database user, and database password that you create.\n+\n+1. Create a database for your application by following these\n+[instructions](https://cloud.google.com/sql/docs/mysql/create-manage-databases). Note the database\n+name.\n+\n+1. Edit `src/resources/application.properties` and enter your connection details in the following format\n+```\n+connectionString = r2dbc:gcp:mysql://<user>:<password>@<connection_name>/<db_name>\n+```\n+for example\n+```\n+connectionString = r2dbc:gcp:mysql://user:123456@my-project:us-central1:r2dbctest/testdb \n+```\n+\n+## Deploying locally\n+\n+To run this application locally, run the following command inside the project folder:\n+\n+```bash\n+mvn spring-boot:run\n+```\n+\n+Navigate towards `http://127.0.0.1:8080` to verify your application is running correctly.\n+\n+### Deploy to Cloud Run\n+\n+See the [Cloud Run documentation](https://cloud.google.com/run/docs/configuring/connect-cloudsql)\n+for more details on connecting a Cloud Run service to Cloud SQL.\n+\n+1. Build the container image:\n+\n+```sh\n+mvn compile com.google.cloud.tools:jib-maven-plugin:2.5.2:build \\\n+        -Dimage=gcr.io/[YOUR_PROJECT_ID]/r2dbc-sample\n+```\n+\n+2. Deploy the service to Cloud Run:\n+\n+```sh\n+gcloud run deploy r2dbc-sample \\\n+    --image gcr.io/[YOUR_PROJECT_ID]/r2dbc-sample \\\n+    --platform managed\n+```\n+\n+Take note of the URL output at the end of the deployment process.\n+\n+3. Navigate your browser to the URL noted in step 2.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964cabd4d410250aba1363592d4c49dc2d1ad289"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NjM2MjY4OnYy", "diffSide": "RIGHT", "path": "cloud-sql/r2dbc/src/main/java/com/example/cloudsql/r2dbcsample/CommanLineRunnerSchemaCreator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMjowNzo0NFrOHWTeMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNToyNzo0MFrOHW0NDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE0OTc0Nw==", "bodyText": "Does this class need to be mentioned in the README?\nYou don't talk about creating the schema there.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r493149747", "createdAt": "2020-09-23T02:07:44Z", "author": {"login": "meltsufin"}, "path": "cloud-sql/r2dbc/src/main/java/com/example/cloudsql/r2dbcsample/CommanLineRunnerSchemaCreator.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudsql.r2dbcsample;\n+\n+import io.r2dbc.spi.ConnectionFactory;\n+import java.util.Arrays;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.data.r2dbc.core.DatabaseClient;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class CommanLineRunnerSchemaCreator implements CommandLineRunner {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964cabd4d410250aba1363592d4c49dc2d1ad289"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYzMDA5OA==", "bodyText": "@meltsufin It creates schema automatically when the app starts. Could you clarify why you think it should be mentioned in the readme?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r493630098", "createdAt": "2020-09-23T14:17:17Z", "author": {"login": "dmitry-s"}, "path": "cloud-sql/r2dbc/src/main/java/com/example/cloudsql/r2dbcsample/CommanLineRunnerSchemaCreator.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudsql.r2dbcsample;\n+\n+import io.r2dbc.spi.ConnectionFactory;\n+import java.util.Arrays;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.data.r2dbc.core.DatabaseClient;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class CommanLineRunnerSchemaCreator implements CommandLineRunner {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE0OTc0Nw=="}, "originalCommit": {"oid": "964cabd4d410250aba1363592d4c49dc2d1ad289"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY4NjAyOA==", "bodyText": "I see. I guess you can mention that the schema for the vote table will be automatically created the first time you run the sample.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r493686028", "createdAt": "2020-09-23T15:27:40Z", "author": {"login": "meltsufin"}, "path": "cloud-sql/r2dbc/src/main/java/com/example/cloudsql/r2dbcsample/CommanLineRunnerSchemaCreator.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudsql.r2dbcsample;\n+\n+import io.r2dbc.spi.ConnectionFactory;\n+import java.util.Arrays;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.data.r2dbc.core.DatabaseClient;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class CommanLineRunnerSchemaCreator implements CommandLineRunner {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE0OTc0Nw=="}, "originalCommit": {"oid": "964cabd4d410250aba1363592d4c49dc2d1ad289"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTY2MzYwOnYy", "diffSide": "RIGHT", "path": "cloud-sql/r2dbc/pom.xml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNToxODoxOVrOHWzxgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTo0Nzo1OVrOHXhWyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY3ODk3Ng==", "bodyText": "Should it be r2dbc-mysql-sample because we might have an example for SQL Server and Postgres in the future?\nThe directory would need to b e renamed as well.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r493678976", "createdAt": "2020-09-23T15:18:19Z", "author": {"login": "meltsufin"}, "path": "cloud-sql/r2dbc/pom.xml", "diffHunk": "@@ -0,0 +1,56 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\t<modelVersion>4.0.0</modelVersion>\n+\t<parent>\n+\t\t<groupId>org.springframework.boot</groupId>\n+\t\t<artifactId>spring-boot-starter-parent</artifactId>\n+\t\t<version>2.3.4.RELEASE</version>\n+\t\t<relativePath/>\n+\t</parent>\n+\t<groupId>com.example.cloudsql</groupId>\n+\t<artifactId>r2dbc-sample</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964cabd4d410250aba1363592d4c49dc2d1ad289"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzczNjM3NQ==", "bodyText": "@meltsufin  Actually it is going to work with postgres as well, if the right dependencies are added. Also the connection string needs to be updated. I'll modify the sample to mention that.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r493736375", "createdAt": "2020-09-23T16:40:19Z", "author": {"login": "dmitry-s"}, "path": "cloud-sql/r2dbc/pom.xml", "diffHunk": "@@ -0,0 +1,56 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\t<modelVersion>4.0.0</modelVersion>\n+\t<parent>\n+\t\t<groupId>org.springframework.boot</groupId>\n+\t\t<artifactId>spring-boot-starter-parent</artifactId>\n+\t\t<version>2.3.4.RELEASE</version>\n+\t\t<relativePath/>\n+\t</parent>\n+\t<groupId>com.example.cloudsql</groupId>\n+\t<artifactId>r2dbc-sample</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY3ODk3Ng=="}, "originalCommit": {"oid": "964cabd4d410250aba1363592d4c49dc2d1ad289"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg5NTgwNQ==", "bodyText": "done", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r493895805", "createdAt": "2020-09-23T21:07:22Z", "author": {"login": "dmitry-s"}, "path": "cloud-sql/r2dbc/pom.xml", "diffHunk": "@@ -0,0 +1,56 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\t<modelVersion>4.0.0</modelVersion>\n+\t<parent>\n+\t\t<groupId>org.springframework.boot</groupId>\n+\t\t<artifactId>spring-boot-starter-parent</artifactId>\n+\t\t<version>2.3.4.RELEASE</version>\n+\t\t<relativePath/>\n+\t</parent>\n+\t<groupId>com.example.cloudsql</groupId>\n+\t<artifactId>r2dbc-sample</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY3ODk3Ng=="}, "originalCommit": {"oid": "964cabd4d410250aba1363592d4c49dc2d1ad289"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQyNTgwMw==", "bodyText": "We would prefer 2 different samples, even if the code is 99% the same between them. This makes it easier for us to add region tags and integrate in as quickstarts. The project folder should be something like cloud-sql/spring-boot-r2dbc/mysql.\nI'm okay if you want to leave this PR as MySQL and my team can handle making changes for postgres and sqlserver if you prefer.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r494425803", "createdAt": "2020-09-24T15:47:59Z", "author": {"login": "kurtisvg"}, "path": "cloud-sql/r2dbc/pom.xml", "diffHunk": "@@ -0,0 +1,56 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\t<modelVersion>4.0.0</modelVersion>\n+\t<parent>\n+\t\t<groupId>org.springframework.boot</groupId>\n+\t\t<artifactId>spring-boot-starter-parent</artifactId>\n+\t\t<version>2.3.4.RELEASE</version>\n+\t\t<relativePath/>\n+\t</parent>\n+\t<groupId>com.example.cloudsql</groupId>\n+\t<artifactId>r2dbc-sample</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY3ODk3Ng=="}, "originalCommit": {"oid": "964cabd4d410250aba1363592d4c49dc2d1ad289"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTY2OTUzOnYy", "diffSide": "RIGHT", "path": "cloud-sql/r2dbc/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNToxOTo0MFrOHWz1hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNToxOTo0MFrOHWz1hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY4MDAwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            1. Edit `src/resources/application.properties` and enter your connection details in the following format\n          \n          \n            \n            1. Edit `src/main/resources/application.properties` and enter your connection details in the following format", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r493680005", "createdAt": "2020-09-23T15:19:40Z", "author": {"login": "meltsufin"}, "path": "cloud-sql/r2dbc/README.md", "diffHunk": "@@ -0,0 +1,61 @@\n+# Connecting to Cloud SQL - MySQL\n+\n+## Before you begin\n+\n+1. If you haven't already, set up a Java Development Environment (including google-cloud-sdk and\n+maven utilities) by following the [java setup guide](https://cloud.google.com/java/docs/setup) and\n+[create a project](https://cloud.google.com/resource-manager/docs/creating-managing-projects#creating_a_project).\n+\n+1. Create a 2nd Gen Cloud SQL Instance by following these\n+[instructions](https://cloud.google.com/sql/docs/mysql/create-instance). Note the connection string,\n+database user, and database password that you create.\n+\n+1. Create a database for your application by following these\n+[instructions](https://cloud.google.com/sql/docs/mysql/create-manage-databases). Note the database\n+name.\n+\n+1. Edit `src/resources/application.properties` and enter your connection details in the following format", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964cabd4d410250aba1363592d4c49dc2d1ad289"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTcxOTM3OnYy", "diffSide": "RIGHT", "path": "cloud-sql/r2dbc/src/main/java/com/example/cloudsql/r2dbcsample/CommanLineRunnerSchemaCreator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNTozMDoxMVrOHW0UrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNTozMDoxMVrOHW0UrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY4Nzk4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                logger.info(\"Running DDL: \" + schema);\n          \n          \n            \n                logger.info(\"Executed DDL: \" + schema);\n          \n      \n    \n    \n  \n\nAt this point it would have run. I actually thought it was hanging because that was the last message in the log when I ran it.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r493687980", "createdAt": "2020-09-23T15:30:11Z", "author": {"login": "meltsufin"}, "path": "cloud-sql/r2dbc/src/main/java/com/example/cloudsql/r2dbcsample/CommanLineRunnerSchemaCreator.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudsql.r2dbcsample;\n+\n+import io.r2dbc.spi.ConnectionFactory;\n+import java.util.Arrays;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.data.r2dbc.core.DatabaseClient;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class CommanLineRunnerSchemaCreator implements CommandLineRunner {\n+  private static final Logger logger = LoggerFactory.getLogger(CommanLineRunnerSchemaCreator.class);\n+\n+  @Autowired\n+  ConnectionFactory connectionFactory;\n+\n+  @Override\n+  public void run(String...args) {\n+    runDdl(\"CREATE TABLE IF NOT EXISTS vote ( \"\n+        + \"vote_id SERIAL NOT NULL, \"\n+        + \"time_cast timestamp NOT NULL, \"\n+        + \"candidate CHAR(6) NOT NULL, \"\n+        + \"PRIMARY KEY (vote_id) );\");\n+  }\n+\n+  private void runDdl(String schema) {\n+    DatabaseClient client = DatabaseClient.create(connectionFactory);\n+\n+    client.execute(schema)\n+\t\t\t\t.fetch()\n+\t\t\t\t.rowsUpdated()\n+\t\t\t\t.block();\n+\n+    logger.info(\"Running DDL: \" + schema);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964cabd4d410250aba1363592d4c49dc2d1ad289"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTcyNTY0OnYy", "diffSide": "RIGHT", "path": "cloud-sql/r2dbc/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNTozMTozMlrOHW0Yhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNTozMTozMlrOHW0Yhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY4ODk2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            1. Build the container image:\n          \n          \n            \n            1. Build the container image and push it to Google Container Registry (GCR):", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r493688966", "createdAt": "2020-09-23T15:31:32Z", "author": {"login": "meltsufin"}, "path": "cloud-sql/r2dbc/README.md", "diffHunk": "@@ -0,0 +1,61 @@\n+# Connecting to Cloud SQL - MySQL\n+\n+## Before you begin\n+\n+1. If you haven't already, set up a Java Development Environment (including google-cloud-sdk and\n+maven utilities) by following the [java setup guide](https://cloud.google.com/java/docs/setup) and\n+[create a project](https://cloud.google.com/resource-manager/docs/creating-managing-projects#creating_a_project).\n+\n+1. Create a 2nd Gen Cloud SQL Instance by following these\n+[instructions](https://cloud.google.com/sql/docs/mysql/create-instance). Note the connection string,\n+database user, and database password that you create.\n+\n+1. Create a database for your application by following these\n+[instructions](https://cloud.google.com/sql/docs/mysql/create-manage-databases). Note the database\n+name.\n+\n+1. Edit `src/resources/application.properties` and enter your connection details in the following format\n+```\n+connectionString = r2dbc:gcp:mysql://<user>:<password>@<connection_name>/<db_name>\n+```\n+for example\n+```\n+connectionString = r2dbc:gcp:mysql://user:123456@my-project:us-central1:r2dbctest/testdb \n+```\n+\n+## Deploying locally\n+\n+To run this application locally, run the following command inside the project folder:\n+\n+```bash\n+mvn spring-boot:run\n+```\n+\n+Navigate towards `http://127.0.0.1:8080` to verify your application is running correctly.\n+\n+### Deploy to Cloud Run\n+\n+See the [Cloud Run documentation](https://cloud.google.com/run/docs/configuring/connect-cloudsql)\n+for more details on connecting a Cloud Run service to Cloud SQL.\n+\n+1. Build the container image:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964cabd4d410250aba1363592d4c49dc2d1ad289"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTc0MDI0OnYy", "diffSide": "RIGHT", "path": "cloud-sql/r2dbc/README.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNTozNDo0NlrOHW0hqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMjo0OTowNFrOHXHzoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY5MTMwNg==", "bodyText": "Also need to specify zone.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r493691306", "createdAt": "2020-09-23T15:34:46Z", "author": {"login": "meltsufin"}, "path": "cloud-sql/r2dbc/README.md", "diffHunk": "@@ -0,0 +1,61 @@\n+# Connecting to Cloud SQL - MySQL\n+\n+## Before you begin\n+\n+1. If you haven't already, set up a Java Development Environment (including google-cloud-sdk and\n+maven utilities) by following the [java setup guide](https://cloud.google.com/java/docs/setup) and\n+[create a project](https://cloud.google.com/resource-manager/docs/creating-managing-projects#creating_a_project).\n+\n+1. Create a 2nd Gen Cloud SQL Instance by following these\n+[instructions](https://cloud.google.com/sql/docs/mysql/create-instance). Note the connection string,\n+database user, and database password that you create.\n+\n+1. Create a database for your application by following these\n+[instructions](https://cloud.google.com/sql/docs/mysql/create-manage-databases). Note the database\n+name.\n+\n+1. Edit `src/resources/application.properties` and enter your connection details in the following format\n+```\n+connectionString = r2dbc:gcp:mysql://<user>:<password>@<connection_name>/<db_name>\n+```\n+for example\n+```\n+connectionString = r2dbc:gcp:mysql://user:123456@my-project:us-central1:r2dbctest/testdb \n+```\n+\n+## Deploying locally\n+\n+To run this application locally, run the following command inside the project folder:\n+\n+```bash\n+mvn spring-boot:run\n+```\n+\n+Navigate towards `http://127.0.0.1:8080` to verify your application is running correctly.\n+\n+### Deploy to Cloud Run\n+\n+See the [Cloud Run documentation](https://cloud.google.com/run/docs/configuring/connect-cloudsql)\n+for more details on connecting a Cloud Run service to Cloud SQL.\n+\n+1. Build the container image:\n+\n+```sh\n+mvn compile com.google.cloud.tools:jib-maven-plugin:2.5.2:build \\\n+        -Dimage=gcr.io/[YOUR_PROJECT_ID]/r2dbc-sample\n+```\n+\n+2. Deploy the service to Cloud Run:\n+\n+```sh\n+gcloud run deploy r2dbc-sample \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964cabd4d410250aba1363592d4c49dc2d1ad289"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg4NTcwOQ==", "bodyText": "It's not necessary, the deploy script will request users to select a zone.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r493885709", "createdAt": "2020-09-23T20:48:06Z", "author": {"login": "dmitry-s"}, "path": "cloud-sql/r2dbc/README.md", "diffHunk": "@@ -0,0 +1,61 @@\n+# Connecting to Cloud SQL - MySQL\n+\n+## Before you begin\n+\n+1. If you haven't already, set up a Java Development Environment (including google-cloud-sdk and\n+maven utilities) by following the [java setup guide](https://cloud.google.com/java/docs/setup) and\n+[create a project](https://cloud.google.com/resource-manager/docs/creating-managing-projects#creating_a_project).\n+\n+1. Create a 2nd Gen Cloud SQL Instance by following these\n+[instructions](https://cloud.google.com/sql/docs/mysql/create-instance). Note the connection string,\n+database user, and database password that you create.\n+\n+1. Create a database for your application by following these\n+[instructions](https://cloud.google.com/sql/docs/mysql/create-manage-databases). Note the database\n+name.\n+\n+1. Edit `src/resources/application.properties` and enter your connection details in the following format\n+```\n+connectionString = r2dbc:gcp:mysql://<user>:<password>@<connection_name>/<db_name>\n+```\n+for example\n+```\n+connectionString = r2dbc:gcp:mysql://user:123456@my-project:us-central1:r2dbctest/testdb \n+```\n+\n+## Deploying locally\n+\n+To run this application locally, run the following command inside the project folder:\n+\n+```bash\n+mvn spring-boot:run\n+```\n+\n+Navigate towards `http://127.0.0.1:8080` to verify your application is running correctly.\n+\n+### Deploy to Cloud Run\n+\n+See the [Cloud Run documentation](https://cloud.google.com/run/docs/configuring/connect-cloudsql)\n+for more details on connecting a Cloud Run service to Cloud SQL.\n+\n+1. Build the container image:\n+\n+```sh\n+mvn compile com.google.cloud.tools:jib-maven-plugin:2.5.2:build \\\n+        -Dimage=gcr.io/[YOUR_PROJECT_ID]/r2dbc-sample\n+```\n+\n+2. Deploy the service to Cloud Run:\n+\n+```sh\n+gcloud run deploy r2dbc-sample \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY5MTMwNg=="}, "originalCommit": {"oid": "964cabd4d410250aba1363592d4c49dc2d1ad289"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAwNzIwMA==", "bodyText": "Yes, I saw that. But it seemed like additional friction to me. Maybe we should at least mention to expect a zone selection.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r494007200", "createdAt": "2020-09-24T02:49:04Z", "author": {"login": "meltsufin"}, "path": "cloud-sql/r2dbc/README.md", "diffHunk": "@@ -0,0 +1,61 @@\n+# Connecting to Cloud SQL - MySQL\n+\n+## Before you begin\n+\n+1. If you haven't already, set up a Java Development Environment (including google-cloud-sdk and\n+maven utilities) by following the [java setup guide](https://cloud.google.com/java/docs/setup) and\n+[create a project](https://cloud.google.com/resource-manager/docs/creating-managing-projects#creating_a_project).\n+\n+1. Create a 2nd Gen Cloud SQL Instance by following these\n+[instructions](https://cloud.google.com/sql/docs/mysql/create-instance). Note the connection string,\n+database user, and database password that you create.\n+\n+1. Create a database for your application by following these\n+[instructions](https://cloud.google.com/sql/docs/mysql/create-manage-databases). Note the database\n+name.\n+\n+1. Edit `src/resources/application.properties` and enter your connection details in the following format\n+```\n+connectionString = r2dbc:gcp:mysql://<user>:<password>@<connection_name>/<db_name>\n+```\n+for example\n+```\n+connectionString = r2dbc:gcp:mysql://user:123456@my-project:us-central1:r2dbctest/testdb \n+```\n+\n+## Deploying locally\n+\n+To run this application locally, run the following command inside the project folder:\n+\n+```bash\n+mvn spring-boot:run\n+```\n+\n+Navigate towards `http://127.0.0.1:8080` to verify your application is running correctly.\n+\n+### Deploy to Cloud Run\n+\n+See the [Cloud Run documentation](https://cloud.google.com/run/docs/configuring/connect-cloudsql)\n+for more details on connecting a Cloud Run service to Cloud SQL.\n+\n+1. Build the container image:\n+\n+```sh\n+mvn compile com.google.cloud.tools:jib-maven-plugin:2.5.2:build \\\n+        -Dimage=gcr.io/[YOUR_PROJECT_ID]/r2dbc-sample\n+```\n+\n+2. Deploy the service to Cloud Run:\n+\n+```sh\n+gcloud run deploy r2dbc-sample \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY5MTMwNg=="}, "originalCommit": {"oid": "964cabd4d410250aba1363592d4c49dc2d1ad289"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTc0NzA3OnYy", "diffSide": "RIGHT", "path": "cloud-sql/r2dbc/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNTozNjowOFrOHW0ltQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDo0ODoyMVrOHXAZoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY5MjM0MQ==", "bodyText": "Rather than using [YOUR_PROJECT_ID], I would try using a variable ${GCP_PROJECT} for both commands, that could be defined in the first step.\nThis is because editing multi-line commands in terminal is hard.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r493692341", "createdAt": "2020-09-23T15:36:08Z", "author": {"login": "meltsufin"}, "path": "cloud-sql/r2dbc/README.md", "diffHunk": "@@ -0,0 +1,61 @@\n+# Connecting to Cloud SQL - MySQL\n+\n+## Before you begin\n+\n+1. If you haven't already, set up a Java Development Environment (including google-cloud-sdk and\n+maven utilities) by following the [java setup guide](https://cloud.google.com/java/docs/setup) and\n+[create a project](https://cloud.google.com/resource-manager/docs/creating-managing-projects#creating_a_project).\n+\n+1. Create a 2nd Gen Cloud SQL Instance by following these\n+[instructions](https://cloud.google.com/sql/docs/mysql/create-instance). Note the connection string,\n+database user, and database password that you create.\n+\n+1. Create a database for your application by following these\n+[instructions](https://cloud.google.com/sql/docs/mysql/create-manage-databases). Note the database\n+name.\n+\n+1. Edit `src/resources/application.properties` and enter your connection details in the following format\n+```\n+connectionString = r2dbc:gcp:mysql://<user>:<password>@<connection_name>/<db_name>\n+```\n+for example\n+```\n+connectionString = r2dbc:gcp:mysql://user:123456@my-project:us-central1:r2dbctest/testdb \n+```\n+\n+## Deploying locally\n+\n+To run this application locally, run the following command inside the project folder:\n+\n+```bash\n+mvn spring-boot:run\n+```\n+\n+Navigate towards `http://127.0.0.1:8080` to verify your application is running correctly.\n+\n+### Deploy to Cloud Run\n+\n+See the [Cloud Run documentation](https://cloud.google.com/run/docs/configuring/connect-cloudsql)\n+for more details on connecting a Cloud Run service to Cloud SQL.\n+\n+1. Build the container image:\n+\n+```sh\n+mvn compile com.google.cloud.tools:jib-maven-plugin:2.5.2:build \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964cabd4d410250aba1363592d4c49dc2d1ad289"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg4NTg1Nw==", "bodyText": "addressed", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r493885857", "createdAt": "2020-09-23T20:48:21Z", "author": {"login": "dmitry-s"}, "path": "cloud-sql/r2dbc/README.md", "diffHunk": "@@ -0,0 +1,61 @@\n+# Connecting to Cloud SQL - MySQL\n+\n+## Before you begin\n+\n+1. If you haven't already, set up a Java Development Environment (including google-cloud-sdk and\n+maven utilities) by following the [java setup guide](https://cloud.google.com/java/docs/setup) and\n+[create a project](https://cloud.google.com/resource-manager/docs/creating-managing-projects#creating_a_project).\n+\n+1. Create a 2nd Gen Cloud SQL Instance by following these\n+[instructions](https://cloud.google.com/sql/docs/mysql/create-instance). Note the connection string,\n+database user, and database password that you create.\n+\n+1. Create a database for your application by following these\n+[instructions](https://cloud.google.com/sql/docs/mysql/create-manage-databases). Note the database\n+name.\n+\n+1. Edit `src/resources/application.properties` and enter your connection details in the following format\n+```\n+connectionString = r2dbc:gcp:mysql://<user>:<password>@<connection_name>/<db_name>\n+```\n+for example\n+```\n+connectionString = r2dbc:gcp:mysql://user:123456@my-project:us-central1:r2dbctest/testdb \n+```\n+\n+## Deploying locally\n+\n+To run this application locally, run the following command inside the project folder:\n+\n+```bash\n+mvn spring-boot:run\n+```\n+\n+Navigate towards `http://127.0.0.1:8080` to verify your application is running correctly.\n+\n+### Deploy to Cloud Run\n+\n+See the [Cloud Run documentation](https://cloud.google.com/run/docs/configuring/connect-cloudsql)\n+for more details on connecting a Cloud Run service to Cloud SQL.\n+\n+1. Build the container image:\n+\n+```sh\n+mvn compile com.google.cloud.tools:jib-maven-plugin:2.5.2:build \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY5MjM0MQ=="}, "originalCommit": {"oid": "964cabd4d410250aba1363592d4c49dc2d1ad289"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDQyODIwOnYy", "diffSide": "RIGHT", "path": "cloud-sql/r2dbc/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTo0NTo1NVrOHXhQog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjo1NTo1NlrOHb0zOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQyNDIyNg==", "bodyText": "Please format this file with spaces for consistency.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r494424226", "createdAt": "2020-09-24T15:45:55Z", "author": {"login": "kurtisvg"}, "path": "cloud-sql/r2dbc/pom.xml", "diffHunk": "@@ -0,0 +1,85 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0e7d25394efde4934070e63f192f7f75fec28f"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkzODY4Mg==", "bodyText": "done", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r498938682", "createdAt": "2020-10-02T16:55:56Z", "author": {"login": "dmitry-s"}, "path": "cloud-sql/r2dbc/pom.xml", "diffHunk": "@@ -0,0 +1,85 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQyNDIyNg=="}, "originalCommit": {"oid": "6c0e7d25394efde4934070e63f192f7f75fec28f"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDQ0NjQyOnYy", "diffSide": "RIGHT", "path": "cloud-sql/r2dbc/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTo0OTo0N1rOHXhcAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTo0OTo0N1rOHXhcAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQyNzEzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t<parent>\n          \n          \n            \n            \t\t<groupId>com.google.cloud.samples</groupId>\n          \n          \n            \n            \t\t<artifactId>shared-configuration</artifactId>\n          \n          \n            \n            \t\t<version>1.0.18</version>\n          \n          \n            \n            \t</parent>\n          \n          \n            \n                      <!--\n          \n          \n            \n                          The parent pom defines common style checks and testing strategies for our samples.\n          \n          \n            \n                          Removing or replacing it should not affect the execution of the samples in anyway.\n          \n          \n            \n                        -->\n          \n          \n            \n            \t<parent>\n          \n          \n            \n            \t\t<groupId>com.google.cloud.samples</groupId>\n          \n          \n            \n            \t\t<artifactId>shared-configuration</artifactId>\n          \n          \n            \n            \t\t<version>1.0.18</version>\n          \n          \n            \n            \t</parent>", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r494427137", "createdAt": "2020-09-24T15:49:47Z", "author": {"login": "kurtisvg"}, "path": "cloud-sql/r2dbc/pom.xml", "diffHunk": "@@ -0,0 +1,85 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\t<modelVersion>4.0.0</modelVersion>\n+\t<parent>\n+\t\t<groupId>com.google.cloud.samples</groupId>\n+\t\t<artifactId>shared-configuration</artifactId>\n+\t\t<version>1.0.18</version>\n+\t</parent>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0e7d25394efde4934070e63f192f7f75fec28f"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDA1NzkzOnYy", "diffSide": "RIGHT", "path": "cloud-sql/r2dbc/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMzowMDo0OFrOHYW0qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMzowMDo0OFrOHYW0qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMwMTgwMQ==", "bodyText": "Can we modify the application to pull this information from environment variables? That way it will be consistent with our other Java samples, and it will make setting up end-to-end tests with our CI easier.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r495301801", "createdAt": "2020-09-25T23:00:48Z", "author": {"login": "shubha-rajan"}, "path": "cloud-sql/r2dbc/README.md", "diffHunk": "@@ -0,0 +1,76 @@\n+# Connecting to Cloud SQL - MySQL and Postgres\n+\n+## Before you begin\n+\n+1. If you haven't already, set up a Java Development Environment (including google-cloud-sdk and\n+maven utilities) by following the [Java setup guide](https://cloud.google.com/java/docs/setup) and\n+[creating a project](https://cloud.google.com/resource-manager/docs/creating-managing-projects#creating_a_project).\n+\n+1. You can use MySQL or PostgreSQL instance for this sample. \n+Create a 2nd Gen Cloud SQL Instance by following corresponding instructions: \n+[MySQL](https://cloud.google.com/sql/docs/mysql/create-instance) /\n+[PostgreSQL](https://cloud.google.com/sql/docs/postgres/create-instance).\n+Note the connection string, database user, and database password that you create. \n+\n+1. Create a database for your application by following corresponding instructions:\n+[MySQL](https://cloud.google.com/sql/docs/mysql/create-manage-databases) /\n+[PostgreSQL](https://cloud.google.com/sql/docs/postgres/create-manage-databases).\n+Note the database name.\n+\n+1. Edit `src/main/resources/application.properties` and enter your connection details in the following format\n+    ```\n+    connectionString = r2dbc:gcp:<'mysql' or 'postgres'>://<user>:<password>@<connection_name>/<db_name>\n+    ```\n+    Example for MySQL:\n+    ```\n+    connectionString = r2dbc:gcp:mysql://user:123456@my-project:us-central1:r2dbctest/testdb \n+    ``` \n+\n+    Example for PostgreSQL:\n+    ```\n+    connectionString = r2dbc:gcp:postgres://user:123456@my-project:us-central1:r2dbctest/testdb \n+    ``` ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0e7d25394efde4934070e63f192f7f75fec28f"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDA1OTQ3OnYy", "diffSide": "RIGHT", "path": "cloud-sql/r2dbc/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMzowMToxNlrOHYW1kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMzowMToxNlrOHYW1kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMwMjAzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ## Deploying locally\n          \n          \n            \n            ## Running locally", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r495302035", "createdAt": "2020-09-25T23:01:16Z", "author": {"login": "shubha-rajan"}, "path": "cloud-sql/r2dbc/README.md", "diffHunk": "@@ -0,0 +1,76 @@\n+# Connecting to Cloud SQL - MySQL and Postgres\n+\n+## Before you begin\n+\n+1. If you haven't already, set up a Java Development Environment (including google-cloud-sdk and\n+maven utilities) by following the [Java setup guide](https://cloud.google.com/java/docs/setup) and\n+[creating a project](https://cloud.google.com/resource-manager/docs/creating-managing-projects#creating_a_project).\n+\n+1. You can use MySQL or PostgreSQL instance for this sample. \n+Create a 2nd Gen Cloud SQL Instance by following corresponding instructions: \n+[MySQL](https://cloud.google.com/sql/docs/mysql/create-instance) /\n+[PostgreSQL](https://cloud.google.com/sql/docs/postgres/create-instance).\n+Note the connection string, database user, and database password that you create. \n+\n+1. Create a database for your application by following corresponding instructions:\n+[MySQL](https://cloud.google.com/sql/docs/mysql/create-manage-databases) /\n+[PostgreSQL](https://cloud.google.com/sql/docs/postgres/create-manage-databases).\n+Note the database name.\n+\n+1. Edit `src/main/resources/application.properties` and enter your connection details in the following format\n+    ```\n+    connectionString = r2dbc:gcp:<'mysql' or 'postgres'>://<user>:<password>@<connection_name>/<db_name>\n+    ```\n+    Example for MySQL:\n+    ```\n+    connectionString = r2dbc:gcp:mysql://user:123456@my-project:us-central1:r2dbctest/testdb \n+    ``` \n+\n+    Example for PostgreSQL:\n+    ```\n+    connectionString = r2dbc:gcp:postgres://user:123456@my-project:us-central1:r2dbctest/testdb \n+    ``` \n+## Schema\n+\n+The schema will be created automatically when the application starts.\n+\n+## Deploying locally", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0e7d25394efde4934070e63f192f7f75fec28f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDA3MDA5OnYy", "diffSide": "RIGHT", "path": "cloud-sql/r2dbc/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMzowNDozMVrOHYW8og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMzowNDozMVrOHYW8og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMwMzg0Mg==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            2. Deploy the service to Cloud Run:\n          \n          \n            \n            1. Deploy the service to Cloud Run:", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r495303842", "createdAt": "2020-09-25T23:04:31Z", "author": {"login": "shubha-rajan"}, "path": "cloud-sql/r2dbc/README.md", "diffHunk": "@@ -0,0 +1,76 @@\n+# Connecting to Cloud SQL - MySQL and Postgres\n+\n+## Before you begin\n+\n+1. If you haven't already, set up a Java Development Environment (including google-cloud-sdk and\n+maven utilities) by following the [Java setup guide](https://cloud.google.com/java/docs/setup) and\n+[creating a project](https://cloud.google.com/resource-manager/docs/creating-managing-projects#creating_a_project).\n+\n+1. You can use MySQL or PostgreSQL instance for this sample. \n+Create a 2nd Gen Cloud SQL Instance by following corresponding instructions: \n+[MySQL](https://cloud.google.com/sql/docs/mysql/create-instance) /\n+[PostgreSQL](https://cloud.google.com/sql/docs/postgres/create-instance).\n+Note the connection string, database user, and database password that you create. \n+\n+1. Create a database for your application by following corresponding instructions:\n+[MySQL](https://cloud.google.com/sql/docs/mysql/create-manage-databases) /\n+[PostgreSQL](https://cloud.google.com/sql/docs/postgres/create-manage-databases).\n+Note the database name.\n+\n+1. Edit `src/main/resources/application.properties` and enter your connection details in the following format\n+    ```\n+    connectionString = r2dbc:gcp:<'mysql' or 'postgres'>://<user>:<password>@<connection_name>/<db_name>\n+    ```\n+    Example for MySQL:\n+    ```\n+    connectionString = r2dbc:gcp:mysql://user:123456@my-project:us-central1:r2dbctest/testdb \n+    ``` \n+\n+    Example for PostgreSQL:\n+    ```\n+    connectionString = r2dbc:gcp:postgres://user:123456@my-project:us-central1:r2dbctest/testdb \n+    ``` \n+## Schema\n+\n+The schema will be created automatically when the application starts.\n+\n+## Deploying locally\n+\n+To run this application locally, run the following command inside the project folder:\n+\n+```sh\n+mvn spring-boot:run\n+```\n+\n+Navigate to `http://localhost:8080` to verify your application is running correctly.\n+\n+### Deploy to Cloud Run\n+\n+See the [Cloud Run documentation](https://cloud.google.com/run/docs/configuring/connect-cloudsql)\n+for more details on connecting a Cloud Run service to Cloud SQL.\n+\n+1. Create an environment variable with your GCP project id:\n+    ```sh\n+    export PROJECT_ID=[YOUR_PROJECT_ID]\n+    ```\n+\n+1. Build the container image and push it to Google Container Registry (GCR):\n+\n+    ```sh\n+    mvn compile com.google.cloud.tools:jib-maven-plugin:2.5.2:build \\\n+            -Dimage=gcr.io/$PROJECT_ID/r2dbc-sample\n+    ```\n+\n+2. Deploy the service to Cloud Run:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0e7d25394efde4934070e63f192f7f75fec28f"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDA3MTEyOnYy", "diffSide": "RIGHT", "path": "cloud-sql/r2dbc/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMzowNDo0N1rOHYW9Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMzowNDo0N1rOHYW9Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMwMzk5MA==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            3. Navigate to the URL noted in Step 2.\n          \n          \n            \n            1. Navigate to the URL noted in Step 2.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r495303990", "createdAt": "2020-09-25T23:04:47Z", "author": {"login": "shubha-rajan"}, "path": "cloud-sql/r2dbc/README.md", "diffHunk": "@@ -0,0 +1,76 @@\n+# Connecting to Cloud SQL - MySQL and Postgres\n+\n+## Before you begin\n+\n+1. If you haven't already, set up a Java Development Environment (including google-cloud-sdk and\n+maven utilities) by following the [Java setup guide](https://cloud.google.com/java/docs/setup) and\n+[creating a project](https://cloud.google.com/resource-manager/docs/creating-managing-projects#creating_a_project).\n+\n+1. You can use MySQL or PostgreSQL instance for this sample. \n+Create a 2nd Gen Cloud SQL Instance by following corresponding instructions: \n+[MySQL](https://cloud.google.com/sql/docs/mysql/create-instance) /\n+[PostgreSQL](https://cloud.google.com/sql/docs/postgres/create-instance).\n+Note the connection string, database user, and database password that you create. \n+\n+1. Create a database for your application by following corresponding instructions:\n+[MySQL](https://cloud.google.com/sql/docs/mysql/create-manage-databases) /\n+[PostgreSQL](https://cloud.google.com/sql/docs/postgres/create-manage-databases).\n+Note the database name.\n+\n+1. Edit `src/main/resources/application.properties` and enter your connection details in the following format\n+    ```\n+    connectionString = r2dbc:gcp:<'mysql' or 'postgres'>://<user>:<password>@<connection_name>/<db_name>\n+    ```\n+    Example for MySQL:\n+    ```\n+    connectionString = r2dbc:gcp:mysql://user:123456@my-project:us-central1:r2dbctest/testdb \n+    ``` \n+\n+    Example for PostgreSQL:\n+    ```\n+    connectionString = r2dbc:gcp:postgres://user:123456@my-project:us-central1:r2dbctest/testdb \n+    ``` \n+## Schema\n+\n+The schema will be created automatically when the application starts.\n+\n+## Deploying locally\n+\n+To run this application locally, run the following command inside the project folder:\n+\n+```sh\n+mvn spring-boot:run\n+```\n+\n+Navigate to `http://localhost:8080` to verify your application is running correctly.\n+\n+### Deploy to Cloud Run\n+\n+See the [Cloud Run documentation](https://cloud.google.com/run/docs/configuring/connect-cloudsql)\n+for more details on connecting a Cloud Run service to Cloud SQL.\n+\n+1. Create an environment variable with your GCP project id:\n+    ```sh\n+    export PROJECT_ID=[YOUR_PROJECT_ID]\n+    ```\n+\n+1. Build the container image and push it to Google Container Registry (GCR):\n+\n+    ```sh\n+    mvn compile com.google.cloud.tools:jib-maven-plugin:2.5.2:build \\\n+            -Dimage=gcr.io/$PROJECT_ID/r2dbc-sample\n+    ```\n+\n+2. Deploy the service to Cloud Run:\n+\n+    ```sh\n+    gcloud run deploy r2dbc-sample \\\n+        --image gcr.io/$PROJECT_ID/r2dbc-sample \\\n+        --platform managed\n+    ```\n+    Take note of the URL output at the end of the deployment process.\n+\n+3. Navigate to the URL noted in Step 2.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0e7d25394efde4934070e63f192f7f75fec28f"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDA4OTUxOnYy", "diffSide": "RIGHT", "path": "cloud-sql/r2dbc/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMzowOTo1OFrOHYXJGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjo1NTozN1rOHb0ykg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMwNzAzNA==", "bodyText": "Could we also add instructions for deploying to App Engine? (Or is there a reason why we don't have them?)", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r495307034", "createdAt": "2020-09-25T23:09:58Z", "author": {"login": "shubha-rajan"}, "path": "cloud-sql/r2dbc/README.md", "diffHunk": "@@ -0,0 +1,76 @@\n+# Connecting to Cloud SQL - MySQL and Postgres\n+\n+## Before you begin\n+\n+1. If you haven't already, set up a Java Development Environment (including google-cloud-sdk and\n+maven utilities) by following the [Java setup guide](https://cloud.google.com/java/docs/setup) and\n+[creating a project](https://cloud.google.com/resource-manager/docs/creating-managing-projects#creating_a_project).\n+\n+1. You can use MySQL or PostgreSQL instance for this sample. \n+Create a 2nd Gen Cloud SQL Instance by following corresponding instructions: \n+[MySQL](https://cloud.google.com/sql/docs/mysql/create-instance) /\n+[PostgreSQL](https://cloud.google.com/sql/docs/postgres/create-instance).\n+Note the connection string, database user, and database password that you create. \n+\n+1. Create a database for your application by following corresponding instructions:\n+[MySQL](https://cloud.google.com/sql/docs/mysql/create-manage-databases) /\n+[PostgreSQL](https://cloud.google.com/sql/docs/postgres/create-manage-databases).\n+Note the database name.\n+\n+1. Edit `src/main/resources/application.properties` and enter your connection details in the following format\n+    ```\n+    connectionString = r2dbc:gcp:<'mysql' or 'postgres'>://<user>:<password>@<connection_name>/<db_name>\n+    ```\n+    Example for MySQL:\n+    ```\n+    connectionString = r2dbc:gcp:mysql://user:123456@my-project:us-central1:r2dbctest/testdb \n+    ``` \n+\n+    Example for PostgreSQL:\n+    ```\n+    connectionString = r2dbc:gcp:postgres://user:123456@my-project:us-central1:r2dbctest/testdb \n+    ``` \n+## Schema\n+\n+The schema will be created automatically when the application starts.\n+\n+## Deploying locally\n+\n+To run this application locally, run the following command inside the project folder:\n+\n+```sh\n+mvn spring-boot:run\n+```\n+\n+Navigate to `http://localhost:8080` to verify your application is running correctly.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0e7d25394efde4934070e63f192f7f75fec28f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkzODUxNA==", "bodyText": "done", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r498938514", "createdAt": "2020-10-02T16:55:37Z", "author": {"login": "dmitry-s"}, "path": "cloud-sql/r2dbc/README.md", "diffHunk": "@@ -0,0 +1,76 @@\n+# Connecting to Cloud SQL - MySQL and Postgres\n+\n+## Before you begin\n+\n+1. If you haven't already, set up a Java Development Environment (including google-cloud-sdk and\n+maven utilities) by following the [Java setup guide](https://cloud.google.com/java/docs/setup) and\n+[creating a project](https://cloud.google.com/resource-manager/docs/creating-managing-projects#creating_a_project).\n+\n+1. You can use MySQL or PostgreSQL instance for this sample. \n+Create a 2nd Gen Cloud SQL Instance by following corresponding instructions: \n+[MySQL](https://cloud.google.com/sql/docs/mysql/create-instance) /\n+[PostgreSQL](https://cloud.google.com/sql/docs/postgres/create-instance).\n+Note the connection string, database user, and database password that you create. \n+\n+1. Create a database for your application by following corresponding instructions:\n+[MySQL](https://cloud.google.com/sql/docs/mysql/create-manage-databases) /\n+[PostgreSQL](https://cloud.google.com/sql/docs/postgres/create-manage-databases).\n+Note the database name.\n+\n+1. Edit `src/main/resources/application.properties` and enter your connection details in the following format\n+    ```\n+    connectionString = r2dbc:gcp:<'mysql' or 'postgres'>://<user>:<password>@<connection_name>/<db_name>\n+    ```\n+    Example for MySQL:\n+    ```\n+    connectionString = r2dbc:gcp:mysql://user:123456@my-project:us-central1:r2dbctest/testdb \n+    ``` \n+\n+    Example for PostgreSQL:\n+    ```\n+    connectionString = r2dbc:gcp:postgres://user:123456@my-project:us-central1:r2dbctest/testdb \n+    ``` \n+## Schema\n+\n+The schema will be created automatically when the application starts.\n+\n+## Deploying locally\n+\n+To run this application locally, run the following command inside the project folder:\n+\n+```sh\n+mvn spring-boot:run\n+```\n+\n+Navigate to `http://localhost:8080` to verify your application is running correctly.\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMwNzAzNA=="}, "originalCommit": {"oid": "6c0e7d25394efde4934070e63f192f7f75fec28f"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDExNDgyOnYy", "diffSide": "RIGHT", "path": "cloud-sql/r2dbc/src/main/java/com/example/cloudsql/r2dbcsample/CommandLineRunnerSchemaCreator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMzoxNzoxNVrOHYXZpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMjo1OTozNFrOHgPz2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMxMTI3MQ==", "bodyText": "We've been doing separate samples for each DB engine  because the SQL syntax can vary. This might not matter much between MySQL/Postgres, but for SQL Server, this command wouldn't work. We might want to split into separate samples for Postgres/MySQL for that reason.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r495311271", "createdAt": "2020-09-25T23:17:15Z", "author": {"login": "shubha-rajan"}, "path": "cloud-sql/r2dbc/src/main/java/com/example/cloudsql/r2dbcsample/CommandLineRunnerSchemaCreator.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudsql.r2dbcsample;\n+\n+import io.r2dbc.spi.ConnectionFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.data.r2dbc.core.DatabaseClient;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class CommandLineRunnerSchemaCreator implements CommandLineRunner {\n+\n+  private static final Logger LOGGER =\n+      LoggerFactory.getLogger(CommandLineRunnerSchemaCreator.class);\n+\n+  @Autowired\n+  private ConnectionFactory connectionFactory;\n+\n+  @Override\n+  public void run(String... args) {\n+    runDdl(\"CREATE TABLE IF NOT EXISTS vote ( \"\n+        + \"vote_id SERIAL NOT NULL, \"\n+        + \"time_cast timestamp NOT NULL, \"\n+        + \"candidate CHAR(6) NOT NULL, \"\n+        + \"PRIMARY KEY (vote_id) );\");\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0e7d25394efde4934070e63f192f7f75fec28f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0MjgxMw==", "bodyText": "@shubha-rajan\nI would prefer to avoid code duplication, since this is the only thing that would be different. I think we could make it a variable and let users pass it to the application or put it into a config. What do you think?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r498542813", "createdAt": "2020-10-01T22:27:32Z", "author": {"login": "dmitry-s"}, "path": "cloud-sql/r2dbc/src/main/java/com/example/cloudsql/r2dbcsample/CommandLineRunnerSchemaCreator.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudsql.r2dbcsample;\n+\n+import io.r2dbc.spi.ConnectionFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.data.r2dbc.core.DatabaseClient;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class CommandLineRunnerSchemaCreator implements CommandLineRunner {\n+\n+  private static final Logger LOGGER =\n+      LoggerFactory.getLogger(CommandLineRunnerSchemaCreator.class);\n+\n+  @Autowired\n+  private ConnectionFactory connectionFactory;\n+\n+  @Override\n+  public void run(String... args) {\n+    runDdl(\"CREATE TABLE IF NOT EXISTS vote ( \"\n+        + \"vote_id SERIAL NOT NULL, \"\n+        + \"time_cast timestamp NOT NULL, \"\n+        + \"candidate CHAR(6) NOT NULL, \"\n+        + \"PRIMARY KEY (vote_id) );\");\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMxMTI3MQ=="}, "originalCommit": {"oid": "6c0e7d25394efde4934070e63f192f7f75fec28f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3NTUxNA==", "bodyText": "We can handle this on our end, but the samples will need to be separated out at some point if we want to link to these from Cloud Docs.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r503575514", "createdAt": "2020-10-12T22:59:34Z", "author": {"login": "kurtisvg"}, "path": "cloud-sql/r2dbc/src/main/java/com/example/cloudsql/r2dbcsample/CommandLineRunnerSchemaCreator.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudsql.r2dbcsample;\n+\n+import io.r2dbc.spi.ConnectionFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.data.r2dbc.core.DatabaseClient;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class CommandLineRunnerSchemaCreator implements CommandLineRunner {\n+\n+  private static final Logger LOGGER =\n+      LoggerFactory.getLogger(CommandLineRunnerSchemaCreator.class);\n+\n+  @Autowired\n+  private ConnectionFactory connectionFactory;\n+\n+  @Override\n+  public void run(String... args) {\n+    runDdl(\"CREATE TABLE IF NOT EXISTS vote ( \"\n+        + \"vote_id SERIAL NOT NULL, \"\n+        + \"time_cast timestamp NOT NULL, \"\n+        + \"candidate CHAR(6) NOT NULL, \"\n+        + \"PRIMARY KEY (vote_id) );\");\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMxMTI3MQ=="}, "originalCommit": {"oid": "6c0e7d25394efde4934070e63f192f7f75fec28f"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDE0NTY2OnYy", "diffSide": "RIGHT", "path": "cloud-sql/r2dbc/src/main/java/com/example/cloudsql/r2dbcsample/R2dbcSampleApplication.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMzoyOToyMlrOHYXs9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjo1NjoxM1rOHb0z0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMxNjIxMw==", "bodyText": "Can we configure the application to use a connection pool when creating the connection factory? We recommend connection pooling as a best practice in our docs. The spring-data docs call out r2dbc-pool as a popular option", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r495316213", "createdAt": "2020-09-25T23:29:22Z", "author": {"login": "shubha-rajan"}, "path": "cloud-sql/r2dbc/src/main/java/com/example/cloudsql/r2dbcsample/R2dbcSampleApplication.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudsql.r2dbcsample;\n+\n+import io.r2dbc.spi.ConnectionFactories;\n+import io.r2dbc.spi.ConnectionFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.data.r2dbc.config.AbstractR2dbcConfiguration;\n+import org.springframework.data.r2dbc.repository.config.EnableR2dbcRepositories;\n+\n+@SpringBootApplication\n+@Configuration\n+@EnableR2dbcRepositories\n+public class R2dbcSampleApplication extends AbstractR2dbcConfiguration {\n+\n+  @Value(\"${connectionString}\")\n+  private String connectionString;\n+\n+  public static void main(String[] args) {\n+    SpringApplication.run(R2dbcSampleApplication.class, args);\n+  }\n+\n+  @Override\n+  @Bean\n+  public ConnectionFactory connectionFactory() {\n+    return ConnectionFactories.get(connectionString);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0e7d25394efde4934070e63f192f7f75fec28f"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkzODgzNA==", "bodyText": "done", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r498938834", "createdAt": "2020-10-02T16:56:13Z", "author": {"login": "dmitry-s"}, "path": "cloud-sql/r2dbc/src/main/java/com/example/cloudsql/r2dbcsample/R2dbcSampleApplication.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudsql.r2dbcsample;\n+\n+import io.r2dbc.spi.ConnectionFactories;\n+import io.r2dbc.spi.ConnectionFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.data.r2dbc.config.AbstractR2dbcConfiguration;\n+import org.springframework.data.r2dbc.repository.config.EnableR2dbcRepositories;\n+\n+@SpringBootApplication\n+@Configuration\n+@EnableR2dbcRepositories\n+public class R2dbcSampleApplication extends AbstractR2dbcConfiguration {\n+\n+  @Value(\"${connectionString}\")\n+  private String connectionString;\n+\n+  public static void main(String[] args) {\n+    SpringApplication.run(R2dbcSampleApplication.class, args);\n+  }\n+\n+  @Override\n+  @Bean\n+  public ConnectionFactory connectionFactory() {\n+    return ConnectionFactories.get(connectionString);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMxNjIxMw=="}, "originalCommit": {"oid": "6c0e7d25394efde4934070e63f192f7f75fec28f"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTUyNTkxOnYy", "diffSide": "RIGHT", "path": "cloud-sql/r2dbc/src/main/java/com/example/cloudsql/r2dbcsample/R2dbcSampleApplication.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOTozNzoyNFrOHcrBSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwMDo1NTowNlrOHcyeFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyNzAxNw==", "bodyText": "Can you include an example of what the connection string format would look like in a comment here? That way, users looking at this code snippet through a cloud documentation page would be able to see it without having to look at the code on GitHub.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r499827017", "createdAt": "2020-10-05T19:37:24Z", "author": {"login": "shubha-rajan"}, "path": "cloud-sql/r2dbc/src/main/java/com/example/cloudsql/r2dbcsample/R2dbcSampleApplication.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudsql.r2dbcsample;\n+\n+import io.r2dbc.spi.ConnectionFactories;\n+import io.r2dbc.spi.ConnectionFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.data.r2dbc.config.AbstractR2dbcConfiguration;\n+import org.springframework.data.r2dbc.repository.config.EnableR2dbcRepositories;\n+\n+@SpringBootApplication\n+@Configuration\n+@EnableR2dbcRepositories\n+public class R2dbcSampleApplication extends AbstractR2dbcConfiguration {\n+\n+  @Value(\"${connectionString}\")\n+  private String connectionString;\n+\n+  public static void main(String[] args) {\n+    SpringApplication.run(R2dbcSampleApplication.class, args);\n+  }\n+\n+  @Override\n+  @Bean\n+  public ConnectionFactory connectionFactory() {\n+    return ConnectionFactories.get(connectionString);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7220351bd51e0a6041f4e1b5b32d99b923bd567"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk0OTA3Ng==", "bodyText": "added an example", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r499949076", "createdAt": "2020-10-06T00:55:06Z", "author": {"login": "dmitry-s"}, "path": "cloud-sql/r2dbc/src/main/java/com/example/cloudsql/r2dbcsample/R2dbcSampleApplication.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudsql.r2dbcsample;\n+\n+import io.r2dbc.spi.ConnectionFactories;\n+import io.r2dbc.spi.ConnectionFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.data.r2dbc.config.AbstractR2dbcConfiguration;\n+import org.springframework.data.r2dbc.repository.config.EnableR2dbcRepositories;\n+\n+@SpringBootApplication\n+@Configuration\n+@EnableR2dbcRepositories\n+public class R2dbcSampleApplication extends AbstractR2dbcConfiguration {\n+\n+  @Value(\"${connectionString}\")\n+  private String connectionString;\n+\n+  public static void main(String[] args) {\n+    SpringApplication.run(R2dbcSampleApplication.class, args);\n+  }\n+\n+  @Override\n+  @Bean\n+  public ConnectionFactory connectionFactory() {\n+    return ConnectionFactories.get(connectionString);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyNzAxNw=="}, "originalCommit": {"oid": "c7220351bd51e0a6041f4e1b5b32d99b923bd567"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTUzNDc4OnYy", "diffSide": "RIGHT", "path": "cloud-sql/r2dbc/src/main/java/com/example/cloudsql/r2dbcsample/R2dbcSampleApplication.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOTo0MDoxMlrOHcrGrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwMDo1NDozN1rOHcydpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyODM5OQ==", "bodyText": "Can you also include examples of how to configure attributes like size, timeouts, and number of idle connections for the pool?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r499828399", "createdAt": "2020-10-05T19:40:12Z", "author": {"login": "shubha-rajan"}, "path": "cloud-sql/r2dbc/src/main/java/com/example/cloudsql/r2dbcsample/R2dbcSampleApplication.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudsql.r2dbcsample;\n+\n+import io.r2dbc.spi.ConnectionFactories;\n+import io.r2dbc.spi.ConnectionFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.data.r2dbc.config.AbstractR2dbcConfiguration;\n+import org.springframework.data.r2dbc.repository.config.EnableR2dbcRepositories;\n+\n+@SpringBootApplication\n+@Configuration\n+@EnableR2dbcRepositories\n+public class R2dbcSampleApplication extends AbstractR2dbcConfiguration {\n+\n+  @Value(\"${connectionString}\")\n+  private String connectionString;\n+\n+  public static void main(String[] args) {\n+    SpringApplication.run(R2dbcSampleApplication.class, args);\n+  }\n+\n+  @Override\n+  @Bean\n+  public ConnectionFactory connectionFactory() {\n+    return ConnectionFactories.get(connectionString);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7220351bd51e0a6041f4e1b5b32d99b923bd567"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk0ODk2Ng==", "bodyText": "added a paragraph to the README", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r499948966", "createdAt": "2020-10-06T00:54:37Z", "author": {"login": "dmitry-s"}, "path": "cloud-sql/r2dbc/src/main/java/com/example/cloudsql/r2dbcsample/R2dbcSampleApplication.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudsql.r2dbcsample;\n+\n+import io.r2dbc.spi.ConnectionFactories;\n+import io.r2dbc.spi.ConnectionFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.data.r2dbc.config.AbstractR2dbcConfiguration;\n+import org.springframework.data.r2dbc.repository.config.EnableR2dbcRepositories;\n+\n+@SpringBootApplication\n+@Configuration\n+@EnableR2dbcRepositories\n+public class R2dbcSampleApplication extends AbstractR2dbcConfiguration {\n+\n+  @Value(\"${connectionString}\")\n+  private String connectionString;\n+\n+  public static void main(String[] args) {\n+    SpringApplication.run(R2dbcSampleApplication.class, args);\n+  }\n+\n+  @Override\n+  @Bean\n+  public ConnectionFactory connectionFactory() {\n+    return ConnectionFactories.get(connectionString);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyODM5OQ=="}, "originalCommit": {"oid": "c7220351bd51e0a6041f4e1b5b32d99b923bd567"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDYyODg5OnYy", "diffSide": "RIGHT", "path": "cloud-sql/r2dbc/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMzoxMjoyNFrOHgT33g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMzoxMjoyNFrOHgT33g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY0MjA3OA==", "bodyText": "I'd prefer if the connection options were set programatically within the sample itself rather than in the readme, so that we can include them in the Cloud Docs. Something like:\nConnectionPoolConfiguration configuration = ConnectionPoolConfiguration.builder(connectionFactory)\n   .maxIdleTime(Duration.ofMillis(1000))\n   .maxSize(20)\n   .build();\n\nConnectionPool pool = new ConnectionPool(configuration);", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3784#discussion_r503642078", "createdAt": "2020-10-13T03:12:24Z", "author": {"login": "shubha-rajan"}, "path": "cloud-sql/r2dbc/README.md", "diffHunk": "@@ -0,0 +1,104 @@\n+# Connecting to Cloud SQL - MySQL and Postgres\n+\n+## Before you begin\n+\n+1. If you haven't already, set up a Java Development Environment (including google-cloud-sdk and\n+maven utilities) by following the [Java setup guide](https://cloud.google.com/java/docs/setup) and\n+[creating a project](https://cloud.google.com/resource-manager/docs/creating-managing-projects#creating_a_project).\n+\n+1. You can use MySQL or PostgreSQL instance for this sample. \n+Create a 2nd Gen Cloud SQL Instance by following corresponding instructions: \n+[MySQL](https://cloud.google.com/sql/docs/mysql/create-instance) /\n+[PostgreSQL](https://cloud.google.com/sql/docs/postgres/create-instance).\n+Note the connection string, database user, and database password that you create. \n+\n+1. Create a database for your application by following corresponding instructions:\n+[MySQL](https://cloud.google.com/sql/docs/mysql/create-manage-databases) /\n+[PostgreSQL](https://cloud.google.com/sql/docs/postgres/create-manage-databases).\n+Note the database name.\n+\n+1. Assign your connection details in the following format:\n+\n+    ```\n+    r2dbc:pool:gcp:<'mysql' or 'postgres'>://<user>:<password>@<connection_name>/<db_name>[?connectionOption1=optionValue1[&connectionValue2=optionValue2]]\n+    ```\n+    to an environment variable `CLOUD_SQL_CONNECTION_STRING`.\n+\n+    Example for MySQL:\n+    ```sh\n+    export CLOUD_SQL_CONNECTION_STRING=\"r2dbc:pool:gcp:mysql://user:123456@my-project:us-central1:r2dbctest/testdb?maxIdleTime=PT60S&initialSize=2&maxSize=12\" ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7acc26a0c3936d8cef973d233fe762ba8d1bbde1"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 779, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}