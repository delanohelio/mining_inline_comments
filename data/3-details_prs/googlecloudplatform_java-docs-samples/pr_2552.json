{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3MjY0MTc5", "number": 2552, "title": "Add functions/ocr sample", "bodyText": "\u2705This has already been tested on Cloud Functions itself\nAlso, I wasn't sure if the OcrTranslateApiMessage POJO was the best way to go - so I'd appreciate thoughts on that.", "createdAt": "2020-04-01T22:31:26Z", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552", "merged": true, "mergeCommit": {"oid": "025aa3ffe8ebcc2cf8112f5cf7569a17a7b59b09"}, "closed": true, "closedAt": "2020-04-06T05:11:23Z", "author": {"login": "ace-n"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTfYYiAH2gAyMzk3MjY0MTc5OjMxYzQwMDdhM2U3ZjJhYWVkZTlmZWNlYmMzOGIyNzY1MDI2ZjJkNGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcUzcKMgH2gAyMzk3MjY0MTc5OjI4OWMzYTRhY2ZhN2UzYjI2OTU2NTFkNWEwYzY4NmZkYWNhMWE1NDM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "31c4007a3e7f2aaede9fecebc38b2765026f2d4f", "author": {"user": {"login": "ace-n", "name": "Ace Nassri"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/31c4007a3e7f2aaede9fecebc38b2765026f2d4f", "committedDate": "2020-04-01T22:24:20Z", "message": "Add OCR sample"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69653728fe1c185c9081c9e863c9f0d0be68f753", "author": {"user": {"login": "ace-n", "name": "Ace Nassri"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/69653728fe1c185c9081c9e863c9f0d0be68f753", "committedDate": "2020-04-01T22:31:42Z", "message": "Merge branch 'master' into gcf-ocr"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1OTk5Mzcw", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#pullrequestreview-385999370", "createdAt": "2020-04-01T22:42:16Z", "commit": {"oid": "69653728fe1c185c9081c9e863c9f0d0be68f753"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMjo0MjoxNlrOF_VOcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMjo1NTozOVrOF_Vhlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1MjM3MA==", "bodyText": "1.0.14", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#discussion_r401952370", "createdAt": "2020-04-01T22:42:16Z", "author": {"login": "lesv"}, "path": "functions/snippets/pom.xml", "diffHunk": "@@ -8,14 +8,14 @@\n   <artifactId>functions-snippets</artifactId>\n   <version>1.0-SNAPSHOT</version>\n \n-  <!--\n-   The parent pom defines common style checks and testing strategies for our samples.\n-   Removing or replacing it should not affect the execution of the samples in anyway.\n- -->\n-  <parent>\n-    <groupId>com.google.cloud.samples</groupId>\n-    <artifactId>shared-configuration</artifactId>\n-    <version>1.0.13</version>\n+  <!--  \n+   The parent pom defines common style checks and testing strategies for our samples. \n+   Removing or replacing it should not affect the execution of the samples in anyway. \n+ -->  \n+  <parent>  \n+    <groupId>com.google.cloud.samples</groupId> \n+    <artifactId>shared-configuration</artifactId> \n+    <version>1.0.13</version> ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69653728fe1c185c9081c9e863c9f0d0be68f753"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1MjQyNg==", "bodyText": "4.4.0", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#discussion_r401952426", "createdAt": "2020-04-01T22:42:26Z", "author": {"login": "lesv"}, "path": "functions/snippets/pom.xml", "diffHunk": "@@ -27,7 +27,36 @@\n     <groovy.version>3.0.2</groovy.version>\n   </properties>\n \n+  <dependencyManagement>\n+    <dependencies>\n+      <dependency>\n+        <groupId>com.google.cloud</groupId>\n+        <artifactId>libraries-bom</artifactId>\n+        <version>4.0.0</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69653728fe1c185c9081c9e863c9f0d0be68f753"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1MzI1OA==", "bodyText": "I would expect you'd want to [END functions_ocr_process] here and start it just before accept().", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#discussion_r401953258", "createdAt": "2020-04-01T22:44:40Z", "author": {"login": "lesv"}, "path": "functions/snippets/src/main/java/com/example/functions/OcrProcessImage.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_ocr_process]\n+\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.pubsub.v1.Publisher;\n+import com.google.cloud.translate.v3.DetectLanguageRequest;\n+import com.google.cloud.translate.v3.DetectLanguageResponse;\n+import com.google.cloud.translate.v3.LocationName;\n+import com.google.cloud.translate.v3.TranslationServiceClient;\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.Image;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageSource;\n+import com.google.gson.Gson;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.ProjectTopicName;\n+import com.google.pubsub.v1.PubsubMessage;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Logger;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69653728fe1c185c9081c9e863c9f0d0be68f753"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1NDE1Ng==", "bodyText": "This method seems a bit tiny and pointless as a teaching example - it really only has a single significant line.  I wonder if you might want to do this a bit differently?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#discussion_r401954156", "createdAt": "2020-04-01T22:47:10Z", "author": {"login": "lesv"}, "path": "functions/snippets/src/main/java/com/example/functions/OcrProcessImage.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_ocr_process]\n+\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.pubsub.v1.Publisher;\n+import com.google.cloud.translate.v3.DetectLanguageRequest;\n+import com.google.cloud.translate.v3.DetectLanguageResponse;\n+import com.google.cloud.translate.v3.LocationName;\n+import com.google.cloud.translate.v3.TranslationServiceClient;\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.Image;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageSource;\n+import com.google.gson.Gson;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.ProjectTopicName;\n+import com.google.pubsub.v1.PubsubMessage;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Logger;\n+\n+public class OcrProcessImage implements BackgroundFunction<GcsEvent> {\n+  // TODO<developer> set these environment variables\n+  private static final String PROJECT_ID = System.getenv(\"GCP_PROJECT\");\n+  private static final String TRANSLATE_TOPIC_NAME = System.getenv(\"TRANSLATE_TOPIC\");\n+  private static final String[] TO_LANGS = System.getenv(\"TO_LANG\").split(\",\");\n+\n+  private static final Logger LOGGER = Logger.getLogger(OcrProcessImage.class.getName());\n+  private static final String LOCATION_NAME = LocationName.of(PROJECT_ID, \"global\").toString();\n+  private static Publisher publisher;\n+  private static final Gson gson = new Gson();\n+\n+  public OcrProcessImage() throws IOException {\n+    publisher = Publisher.newBuilder(\n+        ProjectTopicName.of(PROJECT_ID, TRANSLATE_TOPIC_NAME)).build();\n+  }\n+\n+  @Override\n+  public void accept(GcsEvent gcsEvent, Context context) throws RuntimeException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69653728fe1c185c9081c9e863c9f0d0be68f753"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1NDQyNg==", "bodyText": "Why do we do this?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#discussion_r401954426", "createdAt": "2020-04-01T22:47:59Z", "author": {"login": "lesv"}, "path": "functions/snippets/src/main/java/com/example/functions/OcrProcessImage.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_ocr_process]\n+\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.pubsub.v1.Publisher;\n+import com.google.cloud.translate.v3.DetectLanguageRequest;\n+import com.google.cloud.translate.v3.DetectLanguageResponse;\n+import com.google.cloud.translate.v3.LocationName;\n+import com.google.cloud.translate.v3.TranslationServiceClient;\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.Image;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageSource;\n+import com.google.gson.Gson;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.ProjectTopicName;\n+import com.google.pubsub.v1.PubsubMessage;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Logger;\n+\n+public class OcrProcessImage implements BackgroundFunction<GcsEvent> {\n+  // TODO<developer> set these environment variables\n+  private static final String PROJECT_ID = System.getenv(\"GCP_PROJECT\");\n+  private static final String TRANSLATE_TOPIC_NAME = System.getenv(\"TRANSLATE_TOPIC\");\n+  private static final String[] TO_LANGS = System.getenv(\"TO_LANG\").split(\",\");\n+\n+  private static final Logger LOGGER = Logger.getLogger(OcrProcessImage.class.getName());\n+  private static final String LOCATION_NAME = LocationName.of(PROJECT_ID, \"global\").toString();\n+  private static Publisher publisher;\n+  private static final Gson gson = new Gson();\n+\n+  public OcrProcessImage() throws IOException {\n+    publisher = Publisher.newBuilder(\n+        ProjectTopicName.of(PROJECT_ID, TRANSLATE_TOPIC_NAME)).build();\n+  }\n+\n+  @Override\n+  public void accept(GcsEvent gcsEvent, Context context) throws RuntimeException {\n+\n+    // Validate parameters\n+    String bucket = gcsEvent.getBucket();\n+    if (bucket == null) {\n+      throw new IllegalArgumentException(\"Missing bucket parameter\");\n+    }\n+    String filename = gcsEvent.getName();\n+    if (filename == null) {\n+      throw new IllegalArgumentException(\"Missing name parameter\");\n+    }\n+\n+    detectText(bucket, filename);\n+  }\n+  // [END functions_ocr_process]\n+\n+  // [START functions_ocr_detect]\n+  private void detectText(String bucket, String filename) throws RuntimeException {\n+    LOGGER.info(\"Looking for text in image \" + filename);\n+\n+    List<AnnotateImageRequest> visionRequests = new ArrayList<>();\n+    String gcsPath = String.format(\"gs://%s/%s\", bucket, filename);\n+\n+    ImageSource imgSource = ImageSource.newBuilder().setGcsImageUri(gcsPath).build();\n+    Image img = Image.newBuilder().setSource(imgSource).build();\n+\n+    Feature textFeature = Feature.newBuilder().setType(Feature.Type.TEXT_DETECTION).build();\n+    AnnotateImageRequest visionRequest =\n+        AnnotateImageRequest.newBuilder().addFeatures(textFeature).setImage(img).build();\n+    visionRequests.add(visionRequest);\n+\n+    // Detect text in an image using the Cloud Vision API\n+    AnnotateImageResponse visionResponse;\n+    try (ImageAnnotatorClient client = ImageAnnotatorClient.create()) {\n+      visionResponse = client.batchAnnotateImages(visionRequests).getResponses(0);\n+      if (visionResponse.hasError()) {\n+        LOGGER.severe(\"Error detecting text: \" + visionResponse.getError().getMessage());\n+        return;\n+      }\n+    } catch (IOException e) {\n+      // Cast to RuntimeException\n+      throw new RuntimeException(e);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69653728fe1c185c9081c9e863c9f0d0be68f753"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1NDc2OA==", "bodyText": "Just because you use a try w/ resources doesn't mean you need to ever catch anything.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#discussion_r401954768", "createdAt": "2020-04-01T22:48:52Z", "author": {"login": "lesv"}, "path": "functions/snippets/src/main/java/com/example/functions/OcrProcessImage.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_ocr_process]\n+\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.pubsub.v1.Publisher;\n+import com.google.cloud.translate.v3.DetectLanguageRequest;\n+import com.google.cloud.translate.v3.DetectLanguageResponse;\n+import com.google.cloud.translate.v3.LocationName;\n+import com.google.cloud.translate.v3.TranslationServiceClient;\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.Image;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageSource;\n+import com.google.gson.Gson;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.ProjectTopicName;\n+import com.google.pubsub.v1.PubsubMessage;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Logger;\n+\n+public class OcrProcessImage implements BackgroundFunction<GcsEvent> {\n+  // TODO<developer> set these environment variables\n+  private static final String PROJECT_ID = System.getenv(\"GCP_PROJECT\");\n+  private static final String TRANSLATE_TOPIC_NAME = System.getenv(\"TRANSLATE_TOPIC\");\n+  private static final String[] TO_LANGS = System.getenv(\"TO_LANG\").split(\",\");\n+\n+  private static final Logger LOGGER = Logger.getLogger(OcrProcessImage.class.getName());\n+  private static final String LOCATION_NAME = LocationName.of(PROJECT_ID, \"global\").toString();\n+  private static Publisher publisher;\n+  private static final Gson gson = new Gson();\n+\n+  public OcrProcessImage() throws IOException {\n+    publisher = Publisher.newBuilder(\n+        ProjectTopicName.of(PROJECT_ID, TRANSLATE_TOPIC_NAME)).build();\n+  }\n+\n+  @Override\n+  public void accept(GcsEvent gcsEvent, Context context) throws RuntimeException {\n+\n+    // Validate parameters\n+    String bucket = gcsEvent.getBucket();\n+    if (bucket == null) {\n+      throw new IllegalArgumentException(\"Missing bucket parameter\");\n+    }\n+    String filename = gcsEvent.getName();\n+    if (filename == null) {\n+      throw new IllegalArgumentException(\"Missing name parameter\");\n+    }\n+\n+    detectText(bucket, filename);\n+  }\n+  // [END functions_ocr_process]\n+\n+  // [START functions_ocr_detect]\n+  private void detectText(String bucket, String filename) throws RuntimeException {\n+    LOGGER.info(\"Looking for text in image \" + filename);\n+\n+    List<AnnotateImageRequest> visionRequests = new ArrayList<>();\n+    String gcsPath = String.format(\"gs://%s/%s\", bucket, filename);\n+\n+    ImageSource imgSource = ImageSource.newBuilder().setGcsImageUri(gcsPath).build();\n+    Image img = Image.newBuilder().setSource(imgSource).build();\n+\n+    Feature textFeature = Feature.newBuilder().setType(Feature.Type.TEXT_DETECTION).build();\n+    AnnotateImageRequest visionRequest =\n+        AnnotateImageRequest.newBuilder().addFeatures(textFeature).setImage(img).build();\n+    visionRequests.add(visionRequest);\n+\n+    // Detect text in an image using the Cloud Vision API\n+    AnnotateImageResponse visionResponse;\n+    try (ImageAnnotatorClient client = ImageAnnotatorClient.create()) {\n+      visionResponse = client.batchAnnotateImages(visionRequests).getResponses(0);\n+      if (visionResponse.hasError()) {\n+        LOGGER.severe(\"Error detecting text: \" + visionResponse.getError().getMessage());\n+        return;\n+      }\n+    } catch (IOException e) {\n+      // Cast to RuntimeException\n+      throw new RuntimeException(e);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1NDQyNg=="}, "originalCommit": {"oid": "69653728fe1c185c9081c9e863c9f0d0be68f753"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1NTIyOQ==", "bodyText": "Why don't you throw something here?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#discussion_r401955229", "createdAt": "2020-04-01T22:50:04Z", "author": {"login": "lesv"}, "path": "functions/snippets/src/main/java/com/example/functions/OcrProcessImage.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_ocr_process]\n+\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.pubsub.v1.Publisher;\n+import com.google.cloud.translate.v3.DetectLanguageRequest;\n+import com.google.cloud.translate.v3.DetectLanguageResponse;\n+import com.google.cloud.translate.v3.LocationName;\n+import com.google.cloud.translate.v3.TranslationServiceClient;\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.Image;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageSource;\n+import com.google.gson.Gson;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.ProjectTopicName;\n+import com.google.pubsub.v1.PubsubMessage;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Logger;\n+\n+public class OcrProcessImage implements BackgroundFunction<GcsEvent> {\n+  // TODO<developer> set these environment variables\n+  private static final String PROJECT_ID = System.getenv(\"GCP_PROJECT\");\n+  private static final String TRANSLATE_TOPIC_NAME = System.getenv(\"TRANSLATE_TOPIC\");\n+  private static final String[] TO_LANGS = System.getenv(\"TO_LANG\").split(\",\");\n+\n+  private static final Logger LOGGER = Logger.getLogger(OcrProcessImage.class.getName());\n+  private static final String LOCATION_NAME = LocationName.of(PROJECT_ID, \"global\").toString();\n+  private static Publisher publisher;\n+  private static final Gson gson = new Gson();\n+\n+  public OcrProcessImage() throws IOException {\n+    publisher = Publisher.newBuilder(\n+        ProjectTopicName.of(PROJECT_ID, TRANSLATE_TOPIC_NAME)).build();\n+  }\n+\n+  @Override\n+  public void accept(GcsEvent gcsEvent, Context context) throws RuntimeException {\n+\n+    // Validate parameters\n+    String bucket = gcsEvent.getBucket();\n+    if (bucket == null) {\n+      throw new IllegalArgumentException(\"Missing bucket parameter\");\n+    }\n+    String filename = gcsEvent.getName();\n+    if (filename == null) {\n+      throw new IllegalArgumentException(\"Missing name parameter\");\n+    }\n+\n+    detectText(bucket, filename);\n+  }\n+  // [END functions_ocr_process]\n+\n+  // [START functions_ocr_detect]\n+  private void detectText(String bucket, String filename) throws RuntimeException {\n+    LOGGER.info(\"Looking for text in image \" + filename);\n+\n+    List<AnnotateImageRequest> visionRequests = new ArrayList<>();\n+    String gcsPath = String.format(\"gs://%s/%s\", bucket, filename);\n+\n+    ImageSource imgSource = ImageSource.newBuilder().setGcsImageUri(gcsPath).build();\n+    Image img = Image.newBuilder().setSource(imgSource).build();\n+\n+    Feature textFeature = Feature.newBuilder().setType(Feature.Type.TEXT_DETECTION).build();\n+    AnnotateImageRequest visionRequest =\n+        AnnotateImageRequest.newBuilder().addFeatures(textFeature).setImage(img).build();\n+    visionRequests.add(visionRequest);\n+\n+    // Detect text in an image using the Cloud Vision API\n+    AnnotateImageResponse visionResponse;\n+    try (ImageAnnotatorClient client = ImageAnnotatorClient.create()) {\n+      visionResponse = client.batchAnnotateImages(visionRequests).getResponses(0);\n+      if (visionResponse.hasError()) {\n+        LOGGER.severe(\"Error detecting text: \" + visionResponse.getError().getMessage());\n+        return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69653728fe1c185c9081c9e863c9f0d0be68f753"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1NTY3OA==", "bodyText": "Why?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#discussion_r401955678", "createdAt": "2020-04-01T22:51:17Z", "author": {"login": "lesv"}, "path": "functions/snippets/src/main/java/com/example/functions/OcrProcessImage.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_ocr_process]\n+\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.pubsub.v1.Publisher;\n+import com.google.cloud.translate.v3.DetectLanguageRequest;\n+import com.google.cloud.translate.v3.DetectLanguageResponse;\n+import com.google.cloud.translate.v3.LocationName;\n+import com.google.cloud.translate.v3.TranslationServiceClient;\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.Image;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageSource;\n+import com.google.gson.Gson;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.ProjectTopicName;\n+import com.google.pubsub.v1.PubsubMessage;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Logger;\n+\n+public class OcrProcessImage implements BackgroundFunction<GcsEvent> {\n+  // TODO<developer> set these environment variables\n+  private static final String PROJECT_ID = System.getenv(\"GCP_PROJECT\");\n+  private static final String TRANSLATE_TOPIC_NAME = System.getenv(\"TRANSLATE_TOPIC\");\n+  private static final String[] TO_LANGS = System.getenv(\"TO_LANG\").split(\",\");\n+\n+  private static final Logger LOGGER = Logger.getLogger(OcrProcessImage.class.getName());\n+  private static final String LOCATION_NAME = LocationName.of(PROJECT_ID, \"global\").toString();\n+  private static Publisher publisher;\n+  private static final Gson gson = new Gson();\n+\n+  public OcrProcessImage() throws IOException {\n+    publisher = Publisher.newBuilder(\n+        ProjectTopicName.of(PROJECT_ID, TRANSLATE_TOPIC_NAME)).build();\n+  }\n+\n+  @Override\n+  public void accept(GcsEvent gcsEvent, Context context) throws RuntimeException {\n+\n+    // Validate parameters\n+    String bucket = gcsEvent.getBucket();\n+    if (bucket == null) {\n+      throw new IllegalArgumentException(\"Missing bucket parameter\");\n+    }\n+    String filename = gcsEvent.getName();\n+    if (filename == null) {\n+      throw new IllegalArgumentException(\"Missing name parameter\");\n+    }\n+\n+    detectText(bucket, filename);\n+  }\n+  // [END functions_ocr_process]\n+\n+  // [START functions_ocr_detect]\n+  private void detectText(String bucket, String filename) throws RuntimeException {\n+    LOGGER.info(\"Looking for text in image \" + filename);\n+\n+    List<AnnotateImageRequest> visionRequests = new ArrayList<>();\n+    String gcsPath = String.format(\"gs://%s/%s\", bucket, filename);\n+\n+    ImageSource imgSource = ImageSource.newBuilder().setGcsImageUri(gcsPath).build();\n+    Image img = Image.newBuilder().setSource(imgSource).build();\n+\n+    Feature textFeature = Feature.newBuilder().setType(Feature.Type.TEXT_DETECTION).build();\n+    AnnotateImageRequest visionRequest =\n+        AnnotateImageRequest.newBuilder().addFeatures(textFeature).setImage(img).build();\n+    visionRequests.add(visionRequest);\n+\n+    // Detect text in an image using the Cloud Vision API\n+    AnnotateImageResponse visionResponse;\n+    try (ImageAnnotatorClient client = ImageAnnotatorClient.create()) {\n+      visionResponse = client.batchAnnotateImages(visionRequests).getResponses(0);\n+      if (visionResponse.hasError()) {\n+        LOGGER.severe(\"Error detecting text: \" + visionResponse.getError().getMessage());\n+        return;\n+      }\n+    } catch (IOException e) {\n+      // Cast to RuntimeException\n+      throw new RuntimeException(e);\n+    }\n+\n+    if (visionResponse == null || !visionResponse.hasFullTextAnnotation()) {\n+      return;\n+    }\n+\n+    String text = visionResponse.getFullTextAnnotation().getText();\n+    LOGGER.info(\"Extracted text from image: \" + text);\n+\n+    // Detect language using the Cloud Translation API\n+    DetectLanguageRequest languageRequest =\n+        DetectLanguageRequest.newBuilder()\n+            .setParent(LOCATION_NAME.toString())\n+            .setMimeType(\"text/plain\")\n+            .setContent(text)\n+            .build();\n+    DetectLanguageResponse languageResponse;\n+    try (TranslationServiceClient client = TranslationServiceClient.create()) {\n+      languageResponse = client.detectLanguage(languageRequest);\n+    } catch (IOException e) {\n+      // Cast to RuntimeException\n+      throw new RuntimeException(e);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69653728fe1c185c9081c9e863c9f0d0be68f753"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1NTc3MQ==", "bodyText": "Is this a success?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#discussion_r401955771", "createdAt": "2020-04-01T22:51:35Z", "author": {"login": "lesv"}, "path": "functions/snippets/src/main/java/com/example/functions/OcrProcessImage.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_ocr_process]\n+\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.pubsub.v1.Publisher;\n+import com.google.cloud.translate.v3.DetectLanguageRequest;\n+import com.google.cloud.translate.v3.DetectLanguageResponse;\n+import com.google.cloud.translate.v3.LocationName;\n+import com.google.cloud.translate.v3.TranslationServiceClient;\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.Image;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageSource;\n+import com.google.gson.Gson;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.ProjectTopicName;\n+import com.google.pubsub.v1.PubsubMessage;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Logger;\n+\n+public class OcrProcessImage implements BackgroundFunction<GcsEvent> {\n+  // TODO<developer> set these environment variables\n+  private static final String PROJECT_ID = System.getenv(\"GCP_PROJECT\");\n+  private static final String TRANSLATE_TOPIC_NAME = System.getenv(\"TRANSLATE_TOPIC\");\n+  private static final String[] TO_LANGS = System.getenv(\"TO_LANG\").split(\",\");\n+\n+  private static final Logger LOGGER = Logger.getLogger(OcrProcessImage.class.getName());\n+  private static final String LOCATION_NAME = LocationName.of(PROJECT_ID, \"global\").toString();\n+  private static Publisher publisher;\n+  private static final Gson gson = new Gson();\n+\n+  public OcrProcessImage() throws IOException {\n+    publisher = Publisher.newBuilder(\n+        ProjectTopicName.of(PROJECT_ID, TRANSLATE_TOPIC_NAME)).build();\n+  }\n+\n+  @Override\n+  public void accept(GcsEvent gcsEvent, Context context) throws RuntimeException {\n+\n+    // Validate parameters\n+    String bucket = gcsEvent.getBucket();\n+    if (bucket == null) {\n+      throw new IllegalArgumentException(\"Missing bucket parameter\");\n+    }\n+    String filename = gcsEvent.getName();\n+    if (filename == null) {\n+      throw new IllegalArgumentException(\"Missing name parameter\");\n+    }\n+\n+    detectText(bucket, filename);\n+  }\n+  // [END functions_ocr_process]\n+\n+  // [START functions_ocr_detect]\n+  private void detectText(String bucket, String filename) throws RuntimeException {\n+    LOGGER.info(\"Looking for text in image \" + filename);\n+\n+    List<AnnotateImageRequest> visionRequests = new ArrayList<>();\n+    String gcsPath = String.format(\"gs://%s/%s\", bucket, filename);\n+\n+    ImageSource imgSource = ImageSource.newBuilder().setGcsImageUri(gcsPath).build();\n+    Image img = Image.newBuilder().setSource(imgSource).build();\n+\n+    Feature textFeature = Feature.newBuilder().setType(Feature.Type.TEXT_DETECTION).build();\n+    AnnotateImageRequest visionRequest =\n+        AnnotateImageRequest.newBuilder().addFeatures(textFeature).setImage(img).build();\n+    visionRequests.add(visionRequest);\n+\n+    // Detect text in an image using the Cloud Vision API\n+    AnnotateImageResponse visionResponse;\n+    try (ImageAnnotatorClient client = ImageAnnotatorClient.create()) {\n+      visionResponse = client.batchAnnotateImages(visionRequests).getResponses(0);\n+      if (visionResponse.hasError()) {\n+        LOGGER.severe(\"Error detecting text: \" + visionResponse.getError().getMessage());\n+        return;\n+      }\n+    } catch (IOException e) {\n+      // Cast to RuntimeException\n+      throw new RuntimeException(e);\n+    }\n+\n+    if (visionResponse == null || !visionResponse.hasFullTextAnnotation()) {\n+      return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69653728fe1c185c9081c9e863c9f0d0be68f753"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1NTkxNw==", "bodyText": "Is this a success?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#discussion_r401955917", "createdAt": "2020-04-01T22:51:51Z", "author": {"login": "lesv"}, "path": "functions/snippets/src/main/java/com/example/functions/OcrProcessImage.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_ocr_process]\n+\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.pubsub.v1.Publisher;\n+import com.google.cloud.translate.v3.DetectLanguageRequest;\n+import com.google.cloud.translate.v3.DetectLanguageResponse;\n+import com.google.cloud.translate.v3.LocationName;\n+import com.google.cloud.translate.v3.TranslationServiceClient;\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.Image;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageSource;\n+import com.google.gson.Gson;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.ProjectTopicName;\n+import com.google.pubsub.v1.PubsubMessage;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Logger;\n+\n+public class OcrProcessImage implements BackgroundFunction<GcsEvent> {\n+  // TODO<developer> set these environment variables\n+  private static final String PROJECT_ID = System.getenv(\"GCP_PROJECT\");\n+  private static final String TRANSLATE_TOPIC_NAME = System.getenv(\"TRANSLATE_TOPIC\");\n+  private static final String[] TO_LANGS = System.getenv(\"TO_LANG\").split(\",\");\n+\n+  private static final Logger LOGGER = Logger.getLogger(OcrProcessImage.class.getName());\n+  private static final String LOCATION_NAME = LocationName.of(PROJECT_ID, \"global\").toString();\n+  private static Publisher publisher;\n+  private static final Gson gson = new Gson();\n+\n+  public OcrProcessImage() throws IOException {\n+    publisher = Publisher.newBuilder(\n+        ProjectTopicName.of(PROJECT_ID, TRANSLATE_TOPIC_NAME)).build();\n+  }\n+\n+  @Override\n+  public void accept(GcsEvent gcsEvent, Context context) throws RuntimeException {\n+\n+    // Validate parameters\n+    String bucket = gcsEvent.getBucket();\n+    if (bucket == null) {\n+      throw new IllegalArgumentException(\"Missing bucket parameter\");\n+    }\n+    String filename = gcsEvent.getName();\n+    if (filename == null) {\n+      throw new IllegalArgumentException(\"Missing name parameter\");\n+    }\n+\n+    detectText(bucket, filename);\n+  }\n+  // [END functions_ocr_process]\n+\n+  // [START functions_ocr_detect]\n+  private void detectText(String bucket, String filename) throws RuntimeException {\n+    LOGGER.info(\"Looking for text in image \" + filename);\n+\n+    List<AnnotateImageRequest> visionRequests = new ArrayList<>();\n+    String gcsPath = String.format(\"gs://%s/%s\", bucket, filename);\n+\n+    ImageSource imgSource = ImageSource.newBuilder().setGcsImageUri(gcsPath).build();\n+    Image img = Image.newBuilder().setSource(imgSource).build();\n+\n+    Feature textFeature = Feature.newBuilder().setType(Feature.Type.TEXT_DETECTION).build();\n+    AnnotateImageRequest visionRequest =\n+        AnnotateImageRequest.newBuilder().addFeatures(textFeature).setImage(img).build();\n+    visionRequests.add(visionRequest);\n+\n+    // Detect text in an image using the Cloud Vision API\n+    AnnotateImageResponse visionResponse;\n+    try (ImageAnnotatorClient client = ImageAnnotatorClient.create()) {\n+      visionResponse = client.batchAnnotateImages(visionRequests).getResponses(0);\n+      if (visionResponse.hasError()) {\n+        LOGGER.severe(\"Error detecting text: \" + visionResponse.getError().getMessage());\n+        return;\n+      }\n+    } catch (IOException e) {\n+      // Cast to RuntimeException\n+      throw new RuntimeException(e);\n+    }\n+\n+    if (visionResponse == null || !visionResponse.hasFullTextAnnotation()) {\n+      return;\n+    }\n+\n+    String text = visionResponse.getFullTextAnnotation().getText();\n+    LOGGER.info(\"Extracted text from image: \" + text);\n+\n+    // Detect language using the Cloud Translation API\n+    DetectLanguageRequest languageRequest =\n+        DetectLanguageRequest.newBuilder()\n+            .setParent(LOCATION_NAME.toString())\n+            .setMimeType(\"text/plain\")\n+            .setContent(text)\n+            .build();\n+    DetectLanguageResponse languageResponse;\n+    try (TranslationServiceClient client = TranslationServiceClient.create()) {\n+      languageResponse = client.detectLanguage(languageRequest);\n+    } catch (IOException e) {\n+      // Cast to RuntimeException\n+      throw new RuntimeException(e);\n+    }\n+\n+    if (languageResponse == null || languageResponse.getLanguagesCount() == 0) {\n+      return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69653728fe1c185c9081c9e863c9f0d0be68f753"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1NTk4NQ==", "bodyText": "Why?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#discussion_r401955985", "createdAt": "2020-04-01T22:52:04Z", "author": {"login": "lesv"}, "path": "functions/snippets/src/main/java/com/example/functions/OcrProcessImage.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_ocr_process]\n+\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.pubsub.v1.Publisher;\n+import com.google.cloud.translate.v3.DetectLanguageRequest;\n+import com.google.cloud.translate.v3.DetectLanguageResponse;\n+import com.google.cloud.translate.v3.LocationName;\n+import com.google.cloud.translate.v3.TranslationServiceClient;\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.Image;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageSource;\n+import com.google.gson.Gson;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.ProjectTopicName;\n+import com.google.pubsub.v1.PubsubMessage;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Logger;\n+\n+public class OcrProcessImage implements BackgroundFunction<GcsEvent> {\n+  // TODO<developer> set these environment variables\n+  private static final String PROJECT_ID = System.getenv(\"GCP_PROJECT\");\n+  private static final String TRANSLATE_TOPIC_NAME = System.getenv(\"TRANSLATE_TOPIC\");\n+  private static final String[] TO_LANGS = System.getenv(\"TO_LANG\").split(\",\");\n+\n+  private static final Logger LOGGER = Logger.getLogger(OcrProcessImage.class.getName());\n+  private static final String LOCATION_NAME = LocationName.of(PROJECT_ID, \"global\").toString();\n+  private static Publisher publisher;\n+  private static final Gson gson = new Gson();\n+\n+  public OcrProcessImage() throws IOException {\n+    publisher = Publisher.newBuilder(\n+        ProjectTopicName.of(PROJECT_ID, TRANSLATE_TOPIC_NAME)).build();\n+  }\n+\n+  @Override\n+  public void accept(GcsEvent gcsEvent, Context context) throws RuntimeException {\n+\n+    // Validate parameters\n+    String bucket = gcsEvent.getBucket();\n+    if (bucket == null) {\n+      throw new IllegalArgumentException(\"Missing bucket parameter\");\n+    }\n+    String filename = gcsEvent.getName();\n+    if (filename == null) {\n+      throw new IllegalArgumentException(\"Missing name parameter\");\n+    }\n+\n+    detectText(bucket, filename);\n+  }\n+  // [END functions_ocr_process]\n+\n+  // [START functions_ocr_detect]\n+  private void detectText(String bucket, String filename) throws RuntimeException {\n+    LOGGER.info(\"Looking for text in image \" + filename);\n+\n+    List<AnnotateImageRequest> visionRequests = new ArrayList<>();\n+    String gcsPath = String.format(\"gs://%s/%s\", bucket, filename);\n+\n+    ImageSource imgSource = ImageSource.newBuilder().setGcsImageUri(gcsPath).build();\n+    Image img = Image.newBuilder().setSource(imgSource).build();\n+\n+    Feature textFeature = Feature.newBuilder().setType(Feature.Type.TEXT_DETECTION).build();\n+    AnnotateImageRequest visionRequest =\n+        AnnotateImageRequest.newBuilder().addFeatures(textFeature).setImage(img).build();\n+    visionRequests.add(visionRequest);\n+\n+    // Detect text in an image using the Cloud Vision API\n+    AnnotateImageResponse visionResponse;\n+    try (ImageAnnotatorClient client = ImageAnnotatorClient.create()) {\n+      visionResponse = client.batchAnnotateImages(visionRequests).getResponses(0);\n+      if (visionResponse.hasError()) {\n+        LOGGER.severe(\"Error detecting text: \" + visionResponse.getError().getMessage());\n+        return;\n+      }\n+    } catch (IOException e) {\n+      // Cast to RuntimeException\n+      throw new RuntimeException(e);\n+    }\n+\n+    if (visionResponse == null || !visionResponse.hasFullTextAnnotation()) {\n+      return;\n+    }\n+\n+    String text = visionResponse.getFullTextAnnotation().getText();\n+    LOGGER.info(\"Extracted text from image: \" + text);\n+\n+    // Detect language using the Cloud Translation API\n+    DetectLanguageRequest languageRequest =\n+        DetectLanguageRequest.newBuilder()\n+            .setParent(LOCATION_NAME.toString())\n+            .setMimeType(\"text/plain\")\n+            .setContent(text)\n+            .build();\n+    DetectLanguageResponse languageResponse;\n+    try (TranslationServiceClient client = TranslationServiceClient.create()) {\n+      languageResponse = client.detectLanguage(languageRequest);\n+    } catch (IOException e) {\n+      // Cast to RuntimeException\n+      throw new RuntimeException(e);\n+    }\n+\n+    if (languageResponse == null || languageResponse.getLanguagesCount() == 0) {\n+      return;\n+    }\n+\n+    String languageCode = languageResponse.getLanguages(0).getLanguageCode();\n+    LOGGER.info(String.format(\"Detected language %s for file %s\", languageCode, filename));\n+\n+    // Send a Pub/Sub translation request for every language we're going to translate to\n+    for (String targetLanguage : TO_LANGS) {\n+      LOGGER.info(\"Sending translation request for language \" + targetLanguage);\n+      OcrTranslateApiMessage message = new OcrTranslateApiMessage(text, filename, targetLanguage);\n+      ByteString byteStr = ByteString.copyFrom(message.toPubsubData());\n+      PubsubMessage pubsubApiMessage = PubsubMessage.newBuilder().setData(byteStr).build();\n+      try {\n+        publisher.publish(pubsubApiMessage).get();\n+      } catch (InterruptedException | ExecutionException e) {\n+        // Cast to RuntimeException\n+        throw new RuntimeException(e);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69653728fe1c185c9081c9e863c9f0d0be68f753"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1NjY0OA==", "bodyText": "Why?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#discussion_r401956648", "createdAt": "2020-04-01T22:53:56Z", "author": {"login": "lesv"}, "path": "functions/snippets/src/main/java/com/example/functions/OcrTranslateApiMessage.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_ocr_translate_pojo]\n+import com.google.gson.Gson;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.PubsubMessage;\n+import java.util.Base64;\n+\n+// Object for storing OCR translation requests\n+public class OcrTranslateApiMessage {\n+  private String text;\n+  private String filename;\n+  private String lang;\n+\n+  private static final Gson gson = new Gson();\n+\n+  public OcrTranslateApiMessage(String text, String filename, String lang) {\n+    this.text = text;\n+    this.filename = filename;\n+    this.lang = lang;\n+  }\n+\n+  public String getText() {\n+    return text;\n+  }\n+\n+  public String getFilename() {\n+    return filename;\n+  }\n+\n+  public String getLang() {\n+    return lang;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69653728fe1c185c9081c9e863c9f0d0be68f753"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1Njk4MQ==", "bodyText": "Since it's your class, you can access directly.  No reason to use the accessors.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#discussion_r401956981", "createdAt": "2020-04-01T22:54:46Z", "author": {"login": "lesv"}, "path": "functions/snippets/src/main/java/com/example/functions/OcrTranslateApiMessage.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_ocr_translate_pojo]\n+import com.google.gson.Gson;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.PubsubMessage;\n+import java.util.Base64;\n+\n+// Object for storing OCR translation requests\n+public class OcrTranslateApiMessage {\n+  private String text;\n+  private String filename;\n+  private String lang;\n+\n+  private static final Gson gson = new Gson();\n+\n+  public OcrTranslateApiMessage(String text, String filename, String lang) {\n+    this.text = text;\n+    this.filename = filename;\n+    this.lang = lang;\n+  }\n+\n+  public String getText() {\n+    return text;\n+  }\n+\n+  public String getFilename() {\n+    return filename;\n+  }\n+\n+  public String getLang() {\n+    return lang;\n+  }\n+\n+  public static OcrTranslateApiMessage fromPubsubData(byte[] data)\n+      throws IllegalArgumentException {\n+    String jsonStr = new String(Base64.getDecoder().decode(data));\n+    OcrTranslateApiMessage ocrMessage = gson.fromJson(jsonStr, OcrTranslateApiMessage.class);\n+\n+    // Get + verify parameters\n+    String text = ocrMessage.getText();\n+    String filename = ocrMessage.getFilename();\n+    String targetLang = ocrMessage.getLang();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69653728fe1c185c9081c9e863c9f0d0be68f753"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1NzIyNg==", "bodyText": "Why?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#discussion_r401957226", "createdAt": "2020-04-01T22:55:30Z", "author": {"login": "lesv"}, "path": "functions/snippets/src/main/java/com/example/functions/OcrTranslateText.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_ocr_translate]\n+\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.pubsub.v1.Publisher;\n+import com.google.cloud.translate.v3.LocationName;\n+import com.google.cloud.translate.v3.TranslateTextRequest;\n+import com.google.cloud.translate.v3.TranslateTextResponse;\n+import com.google.cloud.translate.v3.TranslationServiceClient;\n+import com.google.gson.Gson;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.ProjectTopicName;\n+import com.google.pubsub.v1.PubsubMessage;\n+import java.io.IOException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Logger;\n+\n+public class OcrTranslateText implements BackgroundFunction<PubSubMessage> {\n+  // TODO<developer> set these environment variables\n+  private static final String PROJECT_ID = System.getenv(\"GCP_PROJECT\");\n+  private static final String RESULTS_TOPIC_NAME = System.getenv(\"RESULT_TOPIC\");\n+\n+  private static final Logger LOGGER = Logger.getLogger(OcrTranslateText.class.getName());\n+  private static Publisher publisher;\n+  private static final Gson gson = new Gson();\n+  private static final String LOCATION_NAME = LocationName.of(PROJECT_ID, \"global\").toString();\n+\n+  public OcrTranslateText() throws IOException {\n+    publisher = Publisher.newBuilder(\n+        ProjectTopicName.of(PROJECT_ID, RESULTS_TOPIC_NAME)).build();\n+  }\n+\n+  @Override\n+  public void accept(PubSubMessage pubSubMessage, Context context) {\n+    OcrTranslateApiMessage ocrMessage = OcrTranslateApiMessage.fromPubsubData(\n+        pubSubMessage.getData().getBytes());\n+\n+    String targetLang = ocrMessage.getLang();\n+    LOGGER.info(\"Translating text into \" + targetLang);\n+\n+    // Translate text to target language\n+    String text = ocrMessage.getText();\n+    TranslateTextRequest request =\n+        TranslateTextRequest.newBuilder()\n+            .setParent(LOCATION_NAME.toString())\n+            .setMimeType(\"text/plain\")\n+            .setTargetLanguageCode(targetLang)\n+            .addContents(text)\n+            .build();\n+\n+    TranslateTextResponse response;\n+    try (TranslationServiceClient client = TranslationServiceClient.create()) {\n+      response = client.translateText(request);\n+    } catch (IOException e) {\n+      // Cast to RuntimeException\n+      throw new RuntimeException(e);\n+    }\n+    if (response == null || response.getTranslationsCount() == 0) {\n+      return;\n+    }\n+\n+    String translatedText = response.getTranslations(0).getTranslatedText();\n+    LOGGER.info(\"Translated text: \" + translatedText);\n+\n+    // Send translated text to (subsequent) Pub/Sub topic\n+    String filename = ocrMessage.getFilename();\n+    OcrTranslateApiMessage translateMessage = new OcrTranslateApiMessage(\n+        translatedText, filename, targetLang);\n+    try {\n+      ByteString byteStr = ByteString.copyFrom(translateMessage.toPubsubData());\n+      PubsubMessage pubsubApiMessage = PubsubMessage.newBuilder().setData(byteStr).build();\n+\n+      publisher.publish(pubsubApiMessage).get();\n+      LOGGER.info(\"Text translated to \" + targetLang);\n+    } catch (InterruptedException | ExecutionException e) {\n+      // Cast to RuntimeException\n+      throw new RuntimeException(e);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69653728fe1c185c9081c9e863c9f0d0be68f753"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1NzI3MQ==", "bodyText": "Why?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#discussion_r401957271", "createdAt": "2020-04-01T22:55:39Z", "author": {"login": "lesv"}, "path": "functions/snippets/src/main/java/com/example/functions/OcrTranslateText.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_ocr_translate]\n+\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.pubsub.v1.Publisher;\n+import com.google.cloud.translate.v3.LocationName;\n+import com.google.cloud.translate.v3.TranslateTextRequest;\n+import com.google.cloud.translate.v3.TranslateTextResponse;\n+import com.google.cloud.translate.v3.TranslationServiceClient;\n+import com.google.gson.Gson;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.ProjectTopicName;\n+import com.google.pubsub.v1.PubsubMessage;\n+import java.io.IOException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Logger;\n+\n+public class OcrTranslateText implements BackgroundFunction<PubSubMessage> {\n+  // TODO<developer> set these environment variables\n+  private static final String PROJECT_ID = System.getenv(\"GCP_PROJECT\");\n+  private static final String RESULTS_TOPIC_NAME = System.getenv(\"RESULT_TOPIC\");\n+\n+  private static final Logger LOGGER = Logger.getLogger(OcrTranslateText.class.getName());\n+  private static Publisher publisher;\n+  private static final Gson gson = new Gson();\n+  private static final String LOCATION_NAME = LocationName.of(PROJECT_ID, \"global\").toString();\n+\n+  public OcrTranslateText() throws IOException {\n+    publisher = Publisher.newBuilder(\n+        ProjectTopicName.of(PROJECT_ID, RESULTS_TOPIC_NAME)).build();\n+  }\n+\n+  @Override\n+  public void accept(PubSubMessage pubSubMessage, Context context) {\n+    OcrTranslateApiMessage ocrMessage = OcrTranslateApiMessage.fromPubsubData(\n+        pubSubMessage.getData().getBytes());\n+\n+    String targetLang = ocrMessage.getLang();\n+    LOGGER.info(\"Translating text into \" + targetLang);\n+\n+    // Translate text to target language\n+    String text = ocrMessage.getText();\n+    TranslateTextRequest request =\n+        TranslateTextRequest.newBuilder()\n+            .setParent(LOCATION_NAME.toString())\n+            .setMimeType(\"text/plain\")\n+            .setTargetLanguageCode(targetLang)\n+            .addContents(text)\n+            .build();\n+\n+    TranslateTextResponse response;\n+    try (TranslationServiceClient client = TranslationServiceClient.create()) {\n+      response = client.translateText(request);\n+    } catch (IOException e) {\n+      // Cast to RuntimeException\n+      throw new RuntimeException(e);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69653728fe1c185c9081c9e863c9f0d0be68f753"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a18a7e8bcc8467dc24f242fafe6e2407d196a37b", "author": {"user": {"login": "ace-n", "name": "Ace Nassri"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/a18a7e8bcc8467dc24f242fafe6e2407d196a37b", "committedDate": "2020-04-01T23:18:11Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18bb4561f4c6d2319fa19b8a0df4e3ea667542ff", "author": {"user": {"login": "ace-n", "name": "Ace Nassri"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/18bb4561f4c6d2319fa19b8a0df4e3ea667542ff", "committedDate": "2020-04-01T23:18:25Z", "message": "Merge branch 'gcf-ocr' of http://github.com/GoogleCloudPlatform/java-docs-samples into gcf-ocr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d6c2c4224bbe617da24a0cdc97951468b827b4a", "author": {"user": {"login": "ace-n", "name": "Ace Nassri"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/8d6c2c4224bbe617da24a0cdc97951468b827b4a", "committedDate": "2020-04-01T23:20:17Z", "message": "Merge branch 'master' into gcf-ocr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1b2e536a65c7f563f7de0833425a62c56205456", "author": {"user": {"login": "ace-n", "name": "Ace Nassri"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/c1b2e536a65c7f563f7de0833425a62c56205456", "committedDate": "2020-04-01T23:20:27Z", "message": "Merge branch 'master' into gcf-ocr"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MDE3NDQw", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#pullrequestreview-386017440", "createdAt": "2020-04-01T23:29:08Z", "commit": {"oid": "c1b2e536a65c7f563f7de0833425a62c56205456"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMzoyOTowOFrOF_WNCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMzozMDo0MlrOF_WO4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk2ODM5NA==", "bodyText": "What if you just say throws IOException ?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#discussion_r401968394", "createdAt": "2020-04-01T23:29:08Z", "author": {"login": "lesv"}, "path": "functions/snippets/src/main/java/com/example/functions/OcrProcessImage.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_ocr_process]\n+\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.pubsub.v1.Publisher;\n+import com.google.cloud.translate.v3.DetectLanguageRequest;\n+import com.google.cloud.translate.v3.DetectLanguageResponse;\n+import com.google.cloud.translate.v3.LocationName;\n+import com.google.cloud.translate.v3.TranslationServiceClient;\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.Image;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageSource;\n+import com.google.gson.Gson;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.ProjectTopicName;\n+import com.google.pubsub.v1.PubsubMessage;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Logger;\n+\n+public class OcrProcessImage implements BackgroundFunction<GcsEvent> {\n+  // TODO<developer> set these environment variables\n+  private static final String PROJECT_ID = System.getenv(\"GCP_PROJECT\");\n+  private static final String TRANSLATE_TOPIC_NAME = System.getenv(\"TRANSLATE_TOPIC\");\n+  private static final String[] TO_LANGS = System.getenv(\"TO_LANG\").split(\",\");\n+\n+  private static final Logger LOGGER = Logger.getLogger(OcrProcessImage.class.getName());\n+  private static final String LOCATION_NAME = LocationName.of(PROJECT_ID, \"global\").toString();\n+  private static Publisher publisher;\n+  private static final Gson gson = new Gson();\n+\n+  public OcrProcessImage() throws IOException {\n+    publisher = Publisher.newBuilder(\n+        ProjectTopicName.of(PROJECT_ID, TRANSLATE_TOPIC_NAME)).build();\n+  }\n+\n+  @Override\n+  public void accept(GcsEvent gcsEvent, Context context) throws RuntimeException {\n+\n+    // Validate parameters\n+    String bucket = gcsEvent.getBucket();\n+    if (bucket == null) {\n+      throw new IllegalArgumentException(\"Missing bucket parameter\");\n+    }\n+    String filename = gcsEvent.getName();\n+    if (filename == null) {\n+      throw new IllegalArgumentException(\"Missing name parameter\");\n+    }\n+\n+    detectText(bucket, filename);\n+  }\n+  // [END functions_ocr_process]\n+\n+  // [START functions_ocr_detect]\n+  private void detectText(String bucket, String filename) throws RuntimeException {\n+    LOGGER.info(\"Looking for text in image \" + filename);\n+\n+    List<AnnotateImageRequest> visionRequests = new ArrayList<>();\n+    String gcsPath = String.format(\"gs://%s/%s\", bucket, filename);\n+\n+    ImageSource imgSource = ImageSource.newBuilder().setGcsImageUri(gcsPath).build();\n+    Image img = Image.newBuilder().setSource(imgSource).build();\n+\n+    Feature textFeature = Feature.newBuilder().setType(Feature.Type.TEXT_DETECTION).build();\n+    AnnotateImageRequest visionRequest =\n+        AnnotateImageRequest.newBuilder().addFeatures(textFeature).setImage(img).build();\n+    visionRequests.add(visionRequest);\n+\n+    // Detect text in an image using the Cloud Vision API\n+    AnnotateImageResponse visionResponse;\n+    try (ImageAnnotatorClient client = ImageAnnotatorClient.create()) {\n+      visionResponse = client.batchAnnotateImages(visionRequests).getResponses(0);\n+      if (visionResponse.hasError()) {\n+        LOGGER.severe(\"Error detecting text: \" + visionResponse.getError().getMessage());\n+        return;\n+      }\n+    } catch (IOException e) {\n+      // Cast to RuntimeException\n+      throw new RuntimeException(e);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1NDQyNg=="}, "originalCommit": {"oid": "69653728fe1c185c9081c9e863c9f0d0be68f753"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk2ODg2NA==", "bodyText": "This is still very wrong.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#discussion_r401968864", "createdAt": "2020-04-01T23:30:42Z", "author": {"login": "lesv"}, "path": "functions/snippets/src/main/java/com/example/functions/OcrTranslateText.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_ocr_translate]\n+\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.pubsub.v1.Publisher;\n+import com.google.cloud.translate.v3.LocationName;\n+import com.google.cloud.translate.v3.TranslateTextRequest;\n+import com.google.cloud.translate.v3.TranslateTextResponse;\n+import com.google.cloud.translate.v3.TranslationServiceClient;\n+import com.google.gson.Gson;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.ProjectTopicName;\n+import com.google.pubsub.v1.PubsubMessage;\n+import java.io.IOException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Logger;\n+\n+public class OcrTranslateText implements BackgroundFunction<PubSubMessage> {\n+  // TODO<developer> set these environment variables\n+  private static final String PROJECT_ID = System.getenv(\"GCP_PROJECT\");\n+  private static final String RESULTS_TOPIC_NAME = System.getenv(\"RESULT_TOPIC\");\n+\n+  private static final Logger LOGGER = Logger.getLogger(OcrTranslateText.class.getName());\n+  private static Publisher publisher;\n+  private static final Gson gson = new Gson();\n+  private static final String LOCATION_NAME = LocationName.of(PROJECT_ID, \"global\").toString();\n+\n+  public OcrTranslateText() throws IOException {\n+    publisher = Publisher.newBuilder(\n+        ProjectTopicName.of(PROJECT_ID, RESULTS_TOPIC_NAME)).build();\n+  }\n+\n+  @Override\n+  public void accept(PubSubMessage pubSubMessage, Context context) {\n+    OcrTranslateApiMessage ocrMessage = OcrTranslateApiMessage.fromPubsubData(\n+        pubSubMessage.getData().getBytes());\n+\n+    String targetLang = ocrMessage.getLang();\n+    LOGGER.info(\"Translating text into \" + targetLang);\n+\n+    // Translate text to target language\n+    String text = ocrMessage.getText();\n+    TranslateTextRequest request =\n+        TranslateTextRequest.newBuilder()\n+            .setParent(LOCATION_NAME.toString())\n+            .setMimeType(\"text/plain\")\n+            .setTargetLanguageCode(targetLang)\n+            .addContents(text)\n+            .build();\n+\n+    TranslateTextResponse response;\n+    try (TranslationServiceClient client = TranslationServiceClient.create()) {\n+      response = client.translateText(request);\n+    } catch (IOException e) {\n+      // Cast to RuntimeException\n+      throw new RuntimeException(e);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1b2e536a65c7f563f7de0833425a62c56205456"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a979154ae745e8965a5618727c7b1ba6ee7e2d1d", "author": {"user": {"login": "ace-n", "name": "Ace Nassri"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/a979154ae745e8965a5618727c7b1ba6ee7e2d1d", "committedDate": "2020-04-02T00:34:00Z", "message": "Merge branch 'master' into gcf-ocr"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MDQzNTYx", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#pullrequestreview-386043561", "createdAt": "2020-04-02T00:50:32Z", "commit": {"oid": "c1b2e536a65c7f563f7de0833425a62c56205456"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwMDo1MDozMlrOF_XqtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwMzoxNTozNVrOF_Z4gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5MjM3Mg==", "bodyText": "Spoke with lesv@ about this - initial thoughts are that the best case would be to add a FunctionException (ala  ServerletException) to the Functions framework interface for handling these type of things.  Would you mind opening an issue for this?\nA reasonable workaround until that is added is log (with Logger.error) in the meantime.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#discussion_r401992372", "createdAt": "2020-04-02T00:50:32Z", "author": {"login": "kurtisvg"}, "path": "functions/snippets/src/main/java/com/example/functions/OcrProcessImage.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_ocr_process]\n+\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.pubsub.v1.Publisher;\n+import com.google.cloud.translate.v3.DetectLanguageRequest;\n+import com.google.cloud.translate.v3.DetectLanguageResponse;\n+import com.google.cloud.translate.v3.LocationName;\n+import com.google.cloud.translate.v3.TranslationServiceClient;\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.Image;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageSource;\n+import com.google.gson.Gson;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.ProjectTopicName;\n+import com.google.pubsub.v1.PubsubMessage;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Logger;\n+\n+public class OcrProcessImage implements BackgroundFunction<GcsEvent> {\n+  // TODO<developer> set these environment variables\n+  private static final String PROJECT_ID = System.getenv(\"GCP_PROJECT\");\n+  private static final String TRANSLATE_TOPIC_NAME = System.getenv(\"TRANSLATE_TOPIC\");\n+  private static final String[] TO_LANGS = System.getenv(\"TO_LANG\").split(\",\");\n+\n+  private static final Logger LOGGER = Logger.getLogger(OcrProcessImage.class.getName());\n+  private static final String LOCATION_NAME = LocationName.of(PROJECT_ID, \"global\").toString();\n+  private static Publisher publisher;\n+  private static final Gson gson = new Gson();\n+\n+  public OcrProcessImage() throws IOException {\n+    publisher = Publisher.newBuilder(\n+        ProjectTopicName.of(PROJECT_ID, TRANSLATE_TOPIC_NAME)).build();\n+  }\n+\n+  @Override\n+  public void accept(GcsEvent gcsEvent, Context context) throws RuntimeException {\n+\n+    // Validate parameters\n+    String bucket = gcsEvent.getBucket();\n+    if (bucket == null) {\n+      throw new IllegalArgumentException(\"Missing bucket parameter\");\n+    }\n+    String filename = gcsEvent.getName();\n+    if (filename == null) {\n+      throw new IllegalArgumentException(\"Missing name parameter\");\n+    }\n+\n+    detectText(bucket, filename);\n+  }\n+  // [END functions_ocr_process]\n+\n+  // [START functions_ocr_detect]\n+  private void detectText(String bucket, String filename) throws RuntimeException {\n+    LOGGER.info(\"Looking for text in image \" + filename);\n+\n+    List<AnnotateImageRequest> visionRequests = new ArrayList<>();\n+    String gcsPath = String.format(\"gs://%s/%s\", bucket, filename);\n+\n+    ImageSource imgSource = ImageSource.newBuilder().setGcsImageUri(gcsPath).build();\n+    Image img = Image.newBuilder().setSource(imgSource).build();\n+\n+    Feature textFeature = Feature.newBuilder().setType(Feature.Type.TEXT_DETECTION).build();\n+    AnnotateImageRequest visionRequest =\n+        AnnotateImageRequest.newBuilder().addFeatures(textFeature).setImage(img).build();\n+    visionRequests.add(visionRequest);\n+\n+    // Detect text in an image using the Cloud Vision API\n+    AnnotateImageResponse visionResponse;\n+    try (ImageAnnotatorClient client = ImageAnnotatorClient.create()) {\n+      visionResponse = client.batchAnnotateImages(visionRequests).getResponses(0);\n+      if (visionResponse.hasError()) {\n+        LOGGER.severe(\"Error detecting text: \" + visionResponse.getError().getMessage());\n+        return;\n+      }\n+    } catch (IOException e) {\n+      // Cast to RuntimeException\n+      throw new RuntimeException(e);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1NDQyNg=="}, "originalCommit": {"oid": "69653728fe1c185c9081c9e863c9f0d0be68f753"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5MjkyMg==", "bodyText": "Is there a reason why we are splitting this class into two functions? Seems like it makes it harder to copy/paste", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#discussion_r401992922", "createdAt": "2020-04-02T00:52:43Z", "author": {"login": "kurtisvg"}, "path": "functions/snippets/src/main/java/com/example/functions/OcrProcessImage.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_ocr_process]\n+\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.pubsub.v1.Publisher;\n+import com.google.cloud.translate.v3.DetectLanguageRequest;\n+import com.google.cloud.translate.v3.DetectLanguageResponse;\n+import com.google.cloud.translate.v3.LocationName;\n+import com.google.cloud.translate.v3.TranslationServiceClient;\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.Image;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageSource;\n+import com.google.gson.Gson;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.ProjectTopicName;\n+import com.google.pubsub.v1.PubsubMessage;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Logger;\n+\n+// [END functions_ocr_process]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a979154ae745e8965a5618727c7b1ba6ee7e2d1d"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5NTA5OA==", "bodyText": "We don't need to add unchecked exceptions to the interface\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void accept(GcsEvent gcsEvent, Context context) throws RuntimeException {\n          \n          \n            \n              public void accept(GcsEvent gcsEvent, Context context) {", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#discussion_r401995098", "createdAt": "2020-04-02T01:00:43Z", "author": {"login": "kurtisvg"}, "path": "functions/snippets/src/main/java/com/example/functions/OcrProcessImage.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_ocr_process]\n+\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.pubsub.v1.Publisher;\n+import com.google.cloud.translate.v3.DetectLanguageRequest;\n+import com.google.cloud.translate.v3.DetectLanguageResponse;\n+import com.google.cloud.translate.v3.LocationName;\n+import com.google.cloud.translate.v3.TranslationServiceClient;\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.Image;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageSource;\n+import com.google.gson.Gson;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.ProjectTopicName;\n+import com.google.pubsub.v1.PubsubMessage;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Logger;\n+\n+// [END functions_ocr_process]\n+\n+public class OcrProcessImage implements BackgroundFunction<GcsEvent> {\n+  // TODO<developer> set these environment variables\n+  private static final String PROJECT_ID = System.getenv(\"GCP_PROJECT\");\n+  private static final String TRANSLATE_TOPIC_NAME = System.getenv(\"TRANSLATE_TOPIC\");\n+  private static final String[] TO_LANGS = System.getenv(\"TO_LANG\").split(\",\");\n+\n+  private static final Logger LOGGER = Logger.getLogger(OcrProcessImage.class.getName());\n+  private static final String LOCATION_NAME = LocationName.of(PROJECT_ID, \"global\").toString();\n+  private static Publisher publisher;\n+  private static final Gson gson = new Gson();\n+\n+  public OcrProcessImage() throws IOException {\n+    publisher = Publisher.newBuilder(\n+        ProjectTopicName.of(PROJECT_ID, TRANSLATE_TOPIC_NAME)).build();\n+  }\n+\n+  // [START functions_ocr_process]\n+  @Override\n+  public void accept(GcsEvent gcsEvent, Context context) throws RuntimeException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a979154ae745e8965a5618727c7b1ba6ee7e2d1d"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAxMTg0MQ==", "bodyText": "This isn't imported from anywhere? Is it supposed to be com.google.pubsub.v1.PubsubMessage?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#discussion_r402011841", "createdAt": "2020-04-02T02:07:33Z", "author": {"login": "kurtisvg"}, "path": "functions/snippets/src/main/java/com/example/functions/OcrSaveResult.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_ocr_save]\n+\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.storage.BlobId;\n+import com.google.cloud.storage.BlobInfo;\n+import com.google.cloud.storage.Storage;\n+import com.google.cloud.storage.StorageOptions;\n+import java.util.logging.Logger;\n+\n+public class OcrSaveResult implements BackgroundFunction<PubSubMessage> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a979154ae745e8965a5618727c7b1ba6ee7e2d1d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAxMjA5MQ==", "bodyText": "Any reason not to make this a com.google.pubsub.v1.PubsubMessage instead of byte[]?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#discussion_r402012091", "createdAt": "2020-04-02T02:08:30Z", "author": {"login": "kurtisvg"}, "path": "functions/snippets/src/main/java/com/example/functions/OcrTranslateApiMessage.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_ocr_translate_pojo]\n+import com.google.gson.Gson;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.PubsubMessage;\n+import java.util.Base64;\n+\n+// Object for storing OCR translation requests\n+public class OcrTranslateApiMessage {\n+  private String text;\n+  private String filename;\n+  private String lang;\n+\n+  private static final Gson gson = new Gson();\n+\n+  public OcrTranslateApiMessage(String text, String filename, String lang) {\n+    this.text = text;\n+    this.filename = filename;\n+    this.lang = lang;\n+  }\n+\n+  public String getText() {\n+    return text;\n+  }\n+\n+  public String getFilename() {\n+    return filename;\n+  }\n+\n+  public String getLang() {\n+    return lang;\n+  }\n+\n+  public static OcrTranslateApiMessage fromPubsubData(byte[] data)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a979154ae745e8965a5618727c7b1ba6ee7e2d1d"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAxMjM1NA==", "bodyText": "Don't need to throw unchecked exceptions", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#discussion_r402012354", "createdAt": "2020-04-02T02:09:24Z", "author": {"login": "kurtisvg"}, "path": "functions/snippets/src/main/java/com/example/functions/OcrTranslateApiMessage.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_ocr_translate_pojo]\n+import com.google.gson.Gson;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.PubsubMessage;\n+import java.util.Base64;\n+\n+// Object for storing OCR translation requests\n+public class OcrTranslateApiMessage {\n+  private String text;\n+  private String filename;\n+  private String lang;\n+\n+  private static final Gson gson = new Gson();\n+\n+  public OcrTranslateApiMessage(String text, String filename, String lang) {\n+    this.text = text;\n+    this.filename = filename;\n+    this.lang = lang;\n+  }\n+\n+  public String getText() {\n+    return text;\n+  }\n+\n+  public String getFilename() {\n+    return filename;\n+  }\n+\n+  public String getLang() {\n+    return lang;\n+  }\n+\n+  public static OcrTranslateApiMessage fromPubsubData(byte[] data)\n+      throws IllegalArgumentException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a979154ae745e8965a5618727c7b1ba6ee7e2d1d"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAxMzMyMA==", "bodyText": "com.google.pubsub.v1.PubsubMessage looks like it has a getData that returns a String. Can you use that instead of decoding?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#discussion_r402013320", "createdAt": "2020-04-02T02:13:28Z", "author": {"login": "kurtisvg"}, "path": "functions/snippets/src/main/java/com/example/functions/OcrTranslateApiMessage.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_ocr_translate_pojo]\n+import com.google.gson.Gson;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.PubsubMessage;\n+import java.util.Base64;\n+\n+// Object for storing OCR translation requests\n+public class OcrTranslateApiMessage {\n+  private String text;\n+  private String filename;\n+  private String lang;\n+\n+  private static final Gson gson = new Gson();\n+\n+  public OcrTranslateApiMessage(String text, String filename, String lang) {\n+    this.text = text;\n+    this.filename = filename;\n+    this.lang = lang;\n+  }\n+\n+  public String getText() {\n+    return text;\n+  }\n+\n+  public String getFilename() {\n+    return filename;\n+  }\n+\n+  public String getLang() {\n+    return lang;\n+  }\n+\n+  public static OcrTranslateApiMessage fromPubsubData(byte[] data)\n+      throws IllegalArgumentException {\n+    String jsonStr = new String(Base64.getDecoder().decode(data));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a979154ae745e8965a5618727c7b1ba6ee7e2d1d"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAyNDc5MA==", "bodyText": "It's a bit of an anti-pattern to deserialize this and THEN verify it. It's implying that you never want text, filename, targetLang to be null, but it's still possible when you use the regular constructor.\nIt's probably better to move the verification to the constructor and do something like this instead:\nJsonObject json = gson.parseString(jsonStr);\nreturn new OcrTranslateApiMessage(json.get('text'), json.get('filename'), json.get('lang'));", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#discussion_r402024790", "createdAt": "2020-04-02T02:59:15Z", "author": {"login": "kurtisvg"}, "path": "functions/snippets/src/main/java/com/example/functions/OcrTranslateApiMessage.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_ocr_translate_pojo]\n+import com.google.gson.Gson;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.PubsubMessage;\n+import java.util.Base64;\n+\n+// Object for storing OCR translation requests\n+public class OcrTranslateApiMessage {\n+  private String text;\n+  private String filename;\n+  private String lang;\n+\n+  private static final Gson gson = new Gson();\n+\n+  public OcrTranslateApiMessage(String text, String filename, String lang) {\n+    this.text = text;\n+    this.filename = filename;\n+    this.lang = lang;\n+  }\n+\n+  public String getText() {\n+    return text;\n+  }\n+\n+  public String getFilename() {\n+    return filename;\n+  }\n+\n+  public String getLang() {\n+    return lang;\n+  }\n+\n+  public static OcrTranslateApiMessage fromPubsubData(byte[] data)\n+      throws IllegalArgumentException {\n+    String jsonStr = new String(Base64.getDecoder().decode(data));\n+    OcrTranslateApiMessage ocrMessage = gson.fromJson(jsonStr, OcrTranslateApiMessage.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a979154ae745e8965a5618727c7b1ba6ee7e2d1d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAyNTQ3NA==", "bodyText": "Any reason not to use com.google.pubsub.v1.PubsubMessage over byte? seems like a weird place to split up the helper functions.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#discussion_r402025474", "createdAt": "2020-04-02T03:02:07Z", "author": {"login": "kurtisvg"}, "path": "functions/snippets/src/main/java/com/example/functions/OcrTranslateApiMessage.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_ocr_translate_pojo]\n+import com.google.gson.Gson;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.PubsubMessage;\n+import java.util.Base64;\n+\n+// Object for storing OCR translation requests\n+public class OcrTranslateApiMessage {\n+  private String text;\n+  private String filename;\n+  private String lang;\n+\n+  private static final Gson gson = new Gson();\n+\n+  public OcrTranslateApiMessage(String text, String filename, String lang) {\n+    this.text = text;\n+    this.filename = filename;\n+    this.lang = lang;\n+  }\n+\n+  public String getText() {\n+    return text;\n+  }\n+\n+  public String getFilename() {\n+    return filename;\n+  }\n+\n+  public String getLang() {\n+    return lang;\n+  }\n+\n+  public static OcrTranslateApiMessage fromPubsubData(byte[] data)\n+      throws IllegalArgumentException {\n+    String jsonStr = new String(Base64.getDecoder().decode(data));\n+    OcrTranslateApiMessage ocrMessage = gson.fromJson(jsonStr, OcrTranslateApiMessage.class);\n+\n+    // Get + verify parameters\n+    String text = ocrMessage.text;\n+    String filename = ocrMessage.filename;\n+    String targetLang = ocrMessage.lang;\n+    if (text == null) {\n+      throw new IllegalArgumentException(\"Missing text parameter\");\n+    }\n+    if (filename == null) {\n+      throw new IllegalArgumentException(\"Missing filename parameter\");\n+    }\n+    if (targetLang == null) {\n+      throw new IllegalArgumentException(\"Missing lang parameter\");\n+    }\n+\n+    return ocrMessage;\n+  }\n+\n+  public byte[] toPubsubData() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a979154ae745e8965a5618727c7b1ba6ee7e2d1d"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAyNTgxNw==", "bodyText": "Any reason not to inline these three variables?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#discussion_r402025817", "createdAt": "2020-04-02T03:03:33Z", "author": {"login": "kurtisvg"}, "path": "functions/snippets/src/main/java/com/example/functions/OcrSaveResult.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_ocr_save]\n+\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.storage.BlobId;\n+import com.google.cloud.storage.BlobInfo;\n+import com.google.cloud.storage.Storage;\n+import com.google.cloud.storage.StorageOptions;\n+import java.util.logging.Logger;\n+\n+public class OcrSaveResult implements BackgroundFunction<PubSubMessage> {\n+  // TODO<developer> set this environment variable\n+  private static final String RESULT_BUCKET = System.getenv(\"RESULT_BUCKET\");\n+\n+  private static final Storage storage = StorageOptions.getDefaultInstance().getService();\n+  private static final Logger LOGGER = Logger.getLogger(OcrSaveResult.class.getName());\n+\n+  @Override\n+  public void accept(PubSubMessage pubSubMessage, Context context) {\n+    OcrTranslateApiMessage ocrMessage = OcrTranslateApiMessage.fromPubsubData(\n+        pubSubMessage.data.getBytes());\n+\n+    String text = ocrMessage.getText();\n+    String filename = ocrMessage.getFilename();\n+    String lang = ocrMessage.getLang();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a979154ae745e8965a5618727c7b1ba6ee7e2d1d"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAyNjE1Mw==", "bodyText": "Why are we checking if response == null? Does the client actually return that as a result?\nCan we add a comment inside function explaining why it's returning?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#discussion_r402026153", "createdAt": "2020-04-02T03:04:45Z", "author": {"login": "kurtisvg"}, "path": "functions/snippets/src/main/java/com/example/functions/OcrTranslateText.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_ocr_translate]\n+\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.pubsub.v1.Publisher;\n+import com.google.cloud.translate.v3.LocationName;\n+import com.google.cloud.translate.v3.TranslateTextRequest;\n+import com.google.cloud.translate.v3.TranslateTextResponse;\n+import com.google.cloud.translate.v3.TranslationServiceClient;\n+import com.google.gson.Gson;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.ProjectTopicName;\n+import com.google.pubsub.v1.PubsubMessage;\n+import java.io.IOException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Logger;\n+\n+public class OcrTranslateText implements BackgroundFunction<PubSubMessage> {\n+  // TODO<developer> set these environment variables\n+  private static final String PROJECT_ID = System.getenv(\"GCP_PROJECT\");\n+  private static final String RESULTS_TOPIC_NAME = System.getenv(\"RESULT_TOPIC\");\n+\n+  private static final Logger LOGGER = Logger.getLogger(OcrTranslateText.class.getName());\n+  private static Publisher publisher;\n+  private static final Gson gson = new Gson();\n+  private static final String LOCATION_NAME = LocationName.of(PROJECT_ID, \"global\").toString();\n+\n+  public OcrTranslateText() throws IOException {\n+    publisher = Publisher.newBuilder(\n+        ProjectTopicName.of(PROJECT_ID, RESULTS_TOPIC_NAME)).build();\n+  }\n+\n+  @Override\n+  public void accept(PubSubMessage pubSubMessage, Context context) {\n+    OcrTranslateApiMessage ocrMessage = OcrTranslateApiMessage.fromPubsubData(\n+        pubSubMessage.getData().getBytes());\n+\n+    String targetLang = ocrMessage.getLang();\n+    LOGGER.info(\"Translating text into \" + targetLang);\n+\n+    // Translate text to target language\n+    String text = ocrMessage.getText();\n+    TranslateTextRequest request =\n+        TranslateTextRequest.newBuilder()\n+            .setParent(LOCATION_NAME.toString())\n+            .setMimeType(\"text/plain\")\n+            .setTargetLanguageCode(targetLang)\n+            .addContents(text)\n+            .build();\n+\n+    TranslateTextResponse response;\n+    try (TranslationServiceClient client = TranslationServiceClient.create()) {\n+      response = client.translateText(request);\n+    } catch (IOException e) {\n+      // Cast to RuntimeException\n+      throw new RuntimeException(e);\n+    }\n+    if (response == null || response.getTranslationsCount() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a979154ae745e8965a5618727c7b1ba6ee7e2d1d"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAyNzAyNA==", "bodyText": "Should use either a setter (or constructor) to set these fields.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#discussion_r402027024", "createdAt": "2020-04-02T03:08:35Z", "author": {"login": "kurtisvg"}, "path": "functions/snippets/src/test/java/com/example/functions/OcrTests.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.storage.BlobInfo;\n+import com.google.cloud.storage.Storage;\n+import com.google.cloud.storage.StorageOptions;\n+import com.google.common.testing.TestLogHandler;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import java.io.IOException;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.logging.LogRecord;\n+import java.util.logging.Logger;\n+import org.junit.After;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class OcrTests {\n+  private static String FUNCTIONS_BUCKET = \"nodejs-docs-samples-tests\";\n+  private static String RESULT_BUCKET = System.getenv(\"RESULT_BUCKET\");\n+\n+  private static final Logger PROCESS_IMAGE_LOGGER = Logger.getLogger(\n+      OcrProcessImage.class.getName());\n+  private static final Logger SAVE_RESULT_LOGGER = Logger.getLogger(OcrSaveResult.class.getName());\n+  private static final Logger TRANSLATE_TEXT_LOGGER = Logger.getLogger(\n+      OcrTranslateText.class.getName());\n+\n+  private static final TestLogHandler LOG_HANDLER = new TestLogHandler();\n+\n+  private static final Gson gson = new Gson();\n+\n+  private static final Storage storage = StorageOptions.getDefaultInstance().getService();\n+\n+  @BeforeClass\n+  public static void beforeClass() {\n+    PROCESS_IMAGE_LOGGER.addHandler(LOG_HANDLER);\n+    SAVE_RESULT_LOGGER.addHandler(LOG_HANDLER);\n+    TRANSLATE_TEXT_LOGGER.addHandler(LOG_HANDLER);\n+  }\n+\n+  @After\n+  public void afterTest() {\n+    LOG_HANDLER.clear();\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void functionsOcrProcess_shouldValidateParams() throws IOException {\n+    new OcrProcessImage().accept(new GcsEvent(), null);\n+  }\n+\n+  @Test\n+  public void functionsOcrProcess_shouldDetectText() throws IOException {\n+    GcsEvent gcsEvent = new GcsEvent();\n+    gcsEvent.bucket = FUNCTIONS_BUCKET;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a979154ae745e8965a5618727c7b1ba6ee7e2d1d"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAyODY3Mw==", "bodyText": "Please use java.time for this instead.  You can use something like Instance.now().minus(5, MINUTES)\nAdditionally, this check doesn't actually verify it worked when run in parallel (as we do with our unit tests).", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#discussion_r402028673", "createdAt": "2020-04-02T03:15:35Z", "author": {"login": "kurtisvg"}, "path": "functions/snippets/src/test/java/com/example/functions/OcrTests.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.storage.BlobInfo;\n+import com.google.cloud.storage.Storage;\n+import com.google.cloud.storage.StorageOptions;\n+import com.google.common.testing.TestLogHandler;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import java.io.IOException;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.logging.LogRecord;\n+import java.util.logging.Logger;\n+import org.junit.After;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class OcrTests {\n+  private static String FUNCTIONS_BUCKET = \"nodejs-docs-samples-tests\";\n+  private static String RESULT_BUCKET = System.getenv(\"RESULT_BUCKET\");\n+\n+  private static final Logger PROCESS_IMAGE_LOGGER = Logger.getLogger(\n+      OcrProcessImage.class.getName());\n+  private static final Logger SAVE_RESULT_LOGGER = Logger.getLogger(OcrSaveResult.class.getName());\n+  private static final Logger TRANSLATE_TEXT_LOGGER = Logger.getLogger(\n+      OcrTranslateText.class.getName());\n+\n+  private static final TestLogHandler LOG_HANDLER = new TestLogHandler();\n+\n+  private static final Gson gson = new Gson();\n+\n+  private static final Storage storage = StorageOptions.getDefaultInstance().getService();\n+\n+  @BeforeClass\n+  public static void beforeClass() {\n+    PROCESS_IMAGE_LOGGER.addHandler(LOG_HANDLER);\n+    SAVE_RESULT_LOGGER.addHandler(LOG_HANDLER);\n+    TRANSLATE_TEXT_LOGGER.addHandler(LOG_HANDLER);\n+  }\n+\n+  @After\n+  public void afterTest() {\n+    LOG_HANDLER.clear();\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void functionsOcrProcess_shouldValidateParams() throws IOException {\n+    new OcrProcessImage().accept(new GcsEvent(), null);\n+  }\n+\n+  @Test\n+  public void functionsOcrProcess_shouldDetectText() throws IOException {\n+    GcsEvent gcsEvent = new GcsEvent();\n+    gcsEvent.bucket = FUNCTIONS_BUCKET;\n+    gcsEvent.name = \"wakeupcat.jpg\";\n+\n+    new OcrProcessImage().accept(gcsEvent, null);\n+\n+    List<LogRecord> logs = LOG_HANDLER.getStoredLogRecords();\n+    assertThat(logs.get(1).getMessage()).contains(\"Extracted text from image: Wake up human!\");\n+    assertThat(logs.get(2).getMessage()).contains(\"Detected language en for file wakeupcat.jpg\");\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void functionsOcrTranslate_shouldValidateParams() throws IOException {\n+    PubSubMessage message = new PubSubMessage();\n+    message.data = new String(Base64.getEncoder().encode(\"{}\".getBytes()));\n+\n+    new OcrTranslateText().accept(message, null);\n+  }\n+\n+  @Test\n+  public void functionsOcrTranslate_shouldTranslateText() throws IOException {\n+    String text = \"Wake up human!\";\n+    String filename = \"wakeupcat.jpg\";\n+    String lang = \"es\";\n+\n+    JsonObject dataJson = new JsonObject();\n+    dataJson.addProperty(\"text\", text);\n+    dataJson.addProperty(\"filename\", filename);\n+    dataJson.addProperty(\"lang\", lang);\n+\n+    PubSubMessage message = new PubSubMessage();\n+    message.data = new String(Base64.getEncoder().encode(gson.toJson(dataJson).getBytes()));\n+\n+    new OcrTranslateText().accept(message, null);\n+\n+    List<LogRecord> logs = LOG_HANDLER.getStoredLogRecords();\n+    assertThat(logs.get(1).getMessage()).contains(\"\u00a1Despierta humano!\");\n+    assertThat(logs.get(2).getMessage()).isEqualTo(\"Text translated to es\");\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void functionsOcrSave_shouldValidateParams() throws IOException {\n+    PubSubMessage message = new PubSubMessage();\n+    message.data = new String(Base64.getEncoder().encode(\"{}\".getBytes()));\n+\n+    new OcrSaveResult().accept(message, null);\n+  }\n+\n+  @Test\n+  public void functionsOcrSave_shouldPublishTranslatedText() throws IOException {\n+    String text = \"Wake up human!\";\n+    String filename = \"wakeupcat.jpg\";\n+    String lang = \"es\";\n+\n+    JsonObject dataJson = new JsonObject();\n+    dataJson.addProperty(\"text\", text);\n+    dataJson.addProperty(\"filename\", filename);\n+    dataJson.addProperty(\"lang\", lang);\n+\n+    PubSubMessage message = new PubSubMessage();\n+    message.data = new String(Base64.getEncoder().encode(gson.toJson(dataJson).getBytes()));\n+\n+    new OcrSaveResult().accept(message, null);\n+\n+    String resultFilename = \"wakeupcat.jpg_to_es.txt\";\n+\n+    // Check log messages\n+    List<LogRecord> logs = LOG_HANDLER.getStoredLogRecords();\n+    String expectedMessage = String.format(\n+        \"Saving result to %s in bucket %s\", resultFilename, RESULT_BUCKET);\n+    assertThat(LOG_HANDLER.getStoredLogRecords().get(1).getMessage()).isEqualTo(expectedMessage);\n+\n+    // Check for (recently) written file\n+    // (Using timestamps instead of exists() saves us a deletion step)\n+    BlobInfo resultBlob = storage.get(RESULT_BUCKET, resultFilename);\n+    Long fiveMinutesAgo = System.currentTimeMillis() - 60000 * 5;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a979154ae745e8965a5618727c7b1ba6ee7e2d1d"}, "originalPosition": 146}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b68ef642b3a4613e69b0119bb4f9e0b4f82e3d6", "author": {"user": {"login": "ace-n", "name": "Ace Nassri"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/3b68ef642b3a4613e69b0119bb4f9e0b4f82e3d6", "committedDate": "2020-04-02T22:51:48Z", "message": "Fix relevant spotbugs errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3c0f914929f41b31c5da0ab9fc259b2291b914b", "author": {"user": {"login": "ace-n", "name": "Ace Nassri"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/b3c0f914929f41b31c5da0ab9fc259b2291b914b", "committedDate": "2020-04-02T22:51:48Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00c5a1d693bc151d4566ae42a5063cac5f35b2bd", "author": {"user": {"login": "ace-n", "name": "Ace Nassri"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/00c5a1d693bc151d4566ae42a5063cac5f35b2bd", "committedDate": "2020-04-02T22:52:26Z", "message": "Merge branch 'master' into gcf-ocr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ebd755aed8f708e2835a3661e1a7a40f1ba85f7", "author": {"user": {"login": "ace-n", "name": "Ace Nassri"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/9ebd755aed8f708e2835a3661e1a7a40f1ba85f7", "committedDate": "2020-04-02T23:13:08Z", "message": "Fix tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2ODQ3NjM1", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#pullrequestreview-386847635", "createdAt": "2020-04-02T23:32:47Z", "commit": {"oid": "9ebd755aed8f708e2835a3661e1a7a40f1ba85f7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMzozMjo0N1rOGAAGrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMzo0MToxMFrOGAAQhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY1NDg5Mw==", "bodyText": "printStackTrace only goes to stdout\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LOGGER.severe(\"Error publishing translation request: \" + e.getMessage());\n          \n          \n            \n                    e.printStackTrace();\n          \n          \n            \n                    LOGGER.log(Level.SEVERE, \"Error publishing translation request: \" + e.getMessage(), e);", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#discussion_r402654893", "createdAt": "2020-04-02T23:32:47Z", "author": {"login": "kurtisvg"}, "path": "functions/snippets/src/main/java/com/example/functions/OcrProcessImage.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_ocr_process]\n+\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.pubsub.v1.Publisher;\n+import com.google.cloud.translate.v3.DetectLanguageRequest;\n+import com.google.cloud.translate.v3.DetectLanguageResponse;\n+import com.google.cloud.translate.v3.LocationName;\n+import com.google.cloud.translate.v3.TranslationServiceClient;\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.Image;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageSource;\n+import com.google.gson.Gson;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.ProjectTopicName;\n+import com.google.pubsub.v1.PubsubMessage;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Logger;\n+\n+// [END functions_ocr_process]\n+\n+public class OcrProcessImage implements BackgroundFunction<GcsEvent> {\n+  // TODO<developer> set these environment variables\n+  private static final String PROJECT_ID = System.getenv(\"GCP_PROJECT\");\n+  private static final String TRANSLATE_TOPIC_NAME = System.getenv(\"TRANSLATE_TOPIC\");\n+  private static final String[] TO_LANGS = System.getenv(\"TO_LANG\").split(\",\");\n+\n+  private static final Logger LOGGER = Logger.getLogger(OcrProcessImage.class.getName());\n+  private static final String LOCATION_NAME = LocationName.of(PROJECT_ID, \"global\").toString();\n+  private Publisher publisher;\n+  private static final Gson gson = new Gson();\n+\n+  public OcrProcessImage() throws IOException {\n+    publisher = Publisher.newBuilder(\n+        ProjectTopicName.of(PROJECT_ID, TRANSLATE_TOPIC_NAME)).build();\n+  }\n+\n+  // [START functions_ocr_process]\n+  @Override\n+  public void accept(GcsEvent gcsEvent, Context context) {\n+\n+    // Validate parameters\n+    String bucket = gcsEvent.getBucket();\n+    if (bucket == null) {\n+      throw new IllegalArgumentException(\"Missing bucket parameter\");\n+    }\n+    String filename = gcsEvent.getName();\n+    if (filename == null) {\n+      throw new IllegalArgumentException(\"Missing name parameter\");\n+    }\n+\n+    detectText(bucket, filename);\n+  }\n+  // [END functions_ocr_process]\n+\n+  // [START functions_ocr_detect]\n+  private void detectText(String bucket, String filename) {\n+    LOGGER.info(\"Looking for text in image \" + filename);\n+\n+    List<AnnotateImageRequest> visionRequests = new ArrayList<>();\n+    String gcsPath = String.format(\"gs://%s/%s\", bucket, filename);\n+\n+    ImageSource imgSource = ImageSource.newBuilder().setGcsImageUri(gcsPath).build();\n+    Image img = Image.newBuilder().setSource(imgSource).build();\n+\n+    Feature textFeature = Feature.newBuilder().setType(Feature.Type.TEXT_DETECTION).build();\n+    AnnotateImageRequest visionRequest =\n+        AnnotateImageRequest.newBuilder().addFeatures(textFeature).setImage(img).build();\n+    visionRequests.add(visionRequest);\n+\n+    // Detect text in an image using the Cloud Vision API\n+    AnnotateImageResponse visionResponse;\n+    try (ImageAnnotatorClient client = ImageAnnotatorClient.create()) {\n+      visionResponse = client.batchAnnotateImages(visionRequests).getResponses(0);\n+      if (visionResponse == null || !visionResponse.hasFullTextAnnotation()) {\n+        LOGGER.info(String.format(\"Image %s contains no text\", filename));\n+        return;\n+      }\n+\n+      if (visionResponse.hasError()) {\n+        throw new RuntimeException(\n+            \"Error detecting text: \" + visionResponse.getError().getMessage());\n+      }\n+    } catch (IOException e) {\n+      // Cast to RuntimeException\n+      throw new RuntimeException(e);\n+    }\n+\n+    String text = visionResponse.getFullTextAnnotation().getText();\n+    LOGGER.info(\"Extracted text from image: \" + text);\n+\n+    // Detect language using the Cloud Translation API\n+    DetectLanguageRequest languageRequest =\n+        DetectLanguageRequest.newBuilder()\n+            .setParent(LOCATION_NAME.toString())\n+            .setMimeType(\"text/plain\")\n+            .setContent(text)\n+            .build();\n+    DetectLanguageResponse languageResponse;\n+    try (TranslationServiceClient client = TranslationServiceClient.create()) {\n+      languageResponse = client.detectLanguage(languageRequest);\n+    } catch (IOException e) {\n+      // Log error\n+      LOGGER.severe(\"Error detecting language: \" + e.getMessage());\n+      e.printStackTrace();\n+      return;\n+    }\n+\n+    if (languageResponse.getLanguagesCount() == 0) {\n+      LOGGER.info(\"No languages were detected for text: \" + text);\n+      return;\n+    }\n+\n+    String languageCode = languageResponse.getLanguages(0).getLanguageCode();\n+    LOGGER.info(String.format(\"Detected language %s for file %s\", languageCode, filename));\n+\n+    // Send a Pub/Sub translation request for every language we're going to translate to\n+    for (String targetLanguage : TO_LANGS) {\n+      LOGGER.info(\"Sending translation request for language \" + targetLanguage);\n+      OcrTranslateApiMessage message = new OcrTranslateApiMessage(text, filename, targetLanguage);\n+      ByteString byteStr = ByteString.copyFrom(message.toPubsubData());\n+      PubsubMessage pubsubApiMessage = PubsubMessage.newBuilder().setData(byteStr).build();\n+      try {\n+        publisher.publish(pubsubApiMessage).get();\n+      } catch (InterruptedException | ExecutionException e) {\n+        // Log error\n+        LOGGER.severe(\"Error publishing translation request: \" + e.getMessage());\n+        e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ebd755aed8f708e2835a3661e1a7a40f1ba85f7"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY1NDk5OQ==", "bodyText": "Please log over RuntimeException everywhere.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#discussion_r402654999", "createdAt": "2020-04-02T23:33:10Z", "author": {"login": "kurtisvg"}, "path": "functions/snippets/src/main/java/com/example/functions/OcrProcessImage.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_ocr_process]\n+\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.pubsub.v1.Publisher;\n+import com.google.cloud.translate.v3.DetectLanguageRequest;\n+import com.google.cloud.translate.v3.DetectLanguageResponse;\n+import com.google.cloud.translate.v3.LocationName;\n+import com.google.cloud.translate.v3.TranslationServiceClient;\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.Image;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageSource;\n+import com.google.gson.Gson;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.ProjectTopicName;\n+import com.google.pubsub.v1.PubsubMessage;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Logger;\n+\n+public class OcrProcessImage implements BackgroundFunction<GcsEvent> {\n+  // TODO<developer> set these environment variables\n+  private static final String PROJECT_ID = System.getenv(\"GCP_PROJECT\");\n+  private static final String TRANSLATE_TOPIC_NAME = System.getenv(\"TRANSLATE_TOPIC\");\n+  private static final String[] TO_LANGS = System.getenv(\"TO_LANG\").split(\",\");\n+\n+  private static final Logger LOGGER = Logger.getLogger(OcrProcessImage.class.getName());\n+  private static final String LOCATION_NAME = LocationName.of(PROJECT_ID, \"global\").toString();\n+  private static Publisher publisher;\n+  private static final Gson gson = new Gson();\n+\n+  public OcrProcessImage() throws IOException {\n+    publisher = Publisher.newBuilder(\n+        ProjectTopicName.of(PROJECT_ID, TRANSLATE_TOPIC_NAME)).build();\n+  }\n+\n+  @Override\n+  public void accept(GcsEvent gcsEvent, Context context) throws RuntimeException {\n+\n+    // Validate parameters\n+    String bucket = gcsEvent.getBucket();\n+    if (bucket == null) {\n+      throw new IllegalArgumentException(\"Missing bucket parameter\");\n+    }\n+    String filename = gcsEvent.getName();\n+    if (filename == null) {\n+      throw new IllegalArgumentException(\"Missing name parameter\");\n+    }\n+\n+    detectText(bucket, filename);\n+  }\n+  // [END functions_ocr_process]\n+\n+  // [START functions_ocr_detect]\n+  private void detectText(String bucket, String filename) throws RuntimeException {\n+    LOGGER.info(\"Looking for text in image \" + filename);\n+\n+    List<AnnotateImageRequest> visionRequests = new ArrayList<>();\n+    String gcsPath = String.format(\"gs://%s/%s\", bucket, filename);\n+\n+    ImageSource imgSource = ImageSource.newBuilder().setGcsImageUri(gcsPath).build();\n+    Image img = Image.newBuilder().setSource(imgSource).build();\n+\n+    Feature textFeature = Feature.newBuilder().setType(Feature.Type.TEXT_DETECTION).build();\n+    AnnotateImageRequest visionRequest =\n+        AnnotateImageRequest.newBuilder().addFeatures(textFeature).setImage(img).build();\n+    visionRequests.add(visionRequest);\n+\n+    // Detect text in an image using the Cloud Vision API\n+    AnnotateImageResponse visionResponse;\n+    try (ImageAnnotatorClient client = ImageAnnotatorClient.create()) {\n+      visionResponse = client.batchAnnotateImages(visionRequests).getResponses(0);\n+      if (visionResponse.hasError()) {\n+        LOGGER.severe(\"Error detecting text: \" + visionResponse.getError().getMessage());\n+        return;\n+      }\n+    } catch (IOException e) {\n+      // Cast to RuntimeException\n+      throw new RuntimeException(e);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1NDQyNg=="}, "originalCommit": {"oid": "69653728fe1c185c9081c9e863c9f0d0be68f753"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY1NzQxNA==", "bodyText": "(please fix everywhere else)", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#discussion_r402657414", "createdAt": "2020-04-02T23:41:10Z", "author": {"login": "kurtisvg"}, "path": "functions/snippets/src/main/java/com/example/functions/OcrProcessImage.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_ocr_process]\n+\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.pubsub.v1.Publisher;\n+import com.google.cloud.translate.v3.DetectLanguageRequest;\n+import com.google.cloud.translate.v3.DetectLanguageResponse;\n+import com.google.cloud.translate.v3.LocationName;\n+import com.google.cloud.translate.v3.TranslationServiceClient;\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.Image;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageSource;\n+import com.google.gson.Gson;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.ProjectTopicName;\n+import com.google.pubsub.v1.PubsubMessage;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Logger;\n+\n+// [END functions_ocr_process]\n+\n+public class OcrProcessImage implements BackgroundFunction<GcsEvent> {\n+  // TODO<developer> set these environment variables\n+  private static final String PROJECT_ID = System.getenv(\"GCP_PROJECT\");\n+  private static final String TRANSLATE_TOPIC_NAME = System.getenv(\"TRANSLATE_TOPIC\");\n+  private static final String[] TO_LANGS = System.getenv(\"TO_LANG\").split(\",\");\n+\n+  private static final Logger LOGGER = Logger.getLogger(OcrProcessImage.class.getName());\n+  private static final String LOCATION_NAME = LocationName.of(PROJECT_ID, \"global\").toString();\n+  private Publisher publisher;\n+  private static final Gson gson = new Gson();\n+\n+  public OcrProcessImage() throws IOException {\n+    publisher = Publisher.newBuilder(\n+        ProjectTopicName.of(PROJECT_ID, TRANSLATE_TOPIC_NAME)).build();\n+  }\n+\n+  // [START functions_ocr_process]\n+  @Override\n+  public void accept(GcsEvent gcsEvent, Context context) {\n+\n+    // Validate parameters\n+    String bucket = gcsEvent.getBucket();\n+    if (bucket == null) {\n+      throw new IllegalArgumentException(\"Missing bucket parameter\");\n+    }\n+    String filename = gcsEvent.getName();\n+    if (filename == null) {\n+      throw new IllegalArgumentException(\"Missing name parameter\");\n+    }\n+\n+    detectText(bucket, filename);\n+  }\n+  // [END functions_ocr_process]\n+\n+  // [START functions_ocr_detect]\n+  private void detectText(String bucket, String filename) {\n+    LOGGER.info(\"Looking for text in image \" + filename);\n+\n+    List<AnnotateImageRequest> visionRequests = new ArrayList<>();\n+    String gcsPath = String.format(\"gs://%s/%s\", bucket, filename);\n+\n+    ImageSource imgSource = ImageSource.newBuilder().setGcsImageUri(gcsPath).build();\n+    Image img = Image.newBuilder().setSource(imgSource).build();\n+\n+    Feature textFeature = Feature.newBuilder().setType(Feature.Type.TEXT_DETECTION).build();\n+    AnnotateImageRequest visionRequest =\n+        AnnotateImageRequest.newBuilder().addFeatures(textFeature).setImage(img).build();\n+    visionRequests.add(visionRequest);\n+\n+    // Detect text in an image using the Cloud Vision API\n+    AnnotateImageResponse visionResponse;\n+    try (ImageAnnotatorClient client = ImageAnnotatorClient.create()) {\n+      visionResponse = client.batchAnnotateImages(visionRequests).getResponses(0);\n+      if (visionResponse == null || !visionResponse.hasFullTextAnnotation()) {\n+        LOGGER.info(String.format(\"Image %s contains no text\", filename));\n+        return;\n+      }\n+\n+      if (visionResponse.hasError()) {\n+        throw new RuntimeException(\n+            \"Error detecting text: \" + visionResponse.getError().getMessage());\n+      }\n+    } catch (IOException e) {\n+      // Cast to RuntimeException\n+      throw new RuntimeException(e);\n+    }\n+\n+    String text = visionResponse.getFullTextAnnotation().getText();\n+    LOGGER.info(\"Extracted text from image: \" + text);\n+\n+    // Detect language using the Cloud Translation API\n+    DetectLanguageRequest languageRequest =\n+        DetectLanguageRequest.newBuilder()\n+            .setParent(LOCATION_NAME.toString())\n+            .setMimeType(\"text/plain\")\n+            .setContent(text)\n+            .build();\n+    DetectLanguageResponse languageResponse;\n+    try (TranslationServiceClient client = TranslationServiceClient.create()) {\n+      languageResponse = client.detectLanguage(languageRequest);\n+    } catch (IOException e) {\n+      // Log error\n+      LOGGER.severe(\"Error detecting language: \" + e.getMessage());\n+      e.printStackTrace();\n+      return;\n+    }\n+\n+    if (languageResponse.getLanguagesCount() == 0) {\n+      LOGGER.info(\"No languages were detected for text: \" + text);\n+      return;\n+    }\n+\n+    String languageCode = languageResponse.getLanguages(0).getLanguageCode();\n+    LOGGER.info(String.format(\"Detected language %s for file %s\", languageCode, filename));\n+\n+    // Send a Pub/Sub translation request for every language we're going to translate to\n+    for (String targetLanguage : TO_LANGS) {\n+      LOGGER.info(\"Sending translation request for language \" + targetLanguage);\n+      OcrTranslateApiMessage message = new OcrTranslateApiMessage(text, filename, targetLanguage);\n+      ByteString byteStr = ByteString.copyFrom(message.toPubsubData());\n+      PubsubMessage pubsubApiMessage = PubsubMessage.newBuilder().setData(byteStr).build();\n+      try {\n+        publisher.publish(pubsubApiMessage).get();\n+      } catch (InterruptedException | ExecutionException e) {\n+        // Log error\n+        LOGGER.severe(\"Error publishing translation request: \" + e.getMessage());\n+        e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY1NDg5Mw=="}, "originalCommit": {"oid": "9ebd755aed8f708e2835a3661e1a7a40f1ba85f7"}, "originalPosition": 152}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4272f897c403f64aecdd5ae939997bcbeb27d74c", "author": {"user": {"login": "ace-n", "name": "Ace Nassri"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/4272f897c403f64aecdd5ae939997bcbeb27d74c", "committedDate": "2020-04-03T00:26:12Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NTc4ODg4", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#pullrequestreview-387578888", "createdAt": "2020-04-03T21:03:16Z", "commit": {"oid": "4272f897c403f64aecdd5ae939997bcbeb27d74c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMTowMzoxNlrOGApk-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMTowNjowM1rOGApp_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMzNDM5Mg==", "bodyText": "nit: Did you mean to downgrade this?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#discussion_r403334392", "createdAt": "2020-04-03T21:03:16Z", "author": {"login": "kurtisvg"}, "path": "functions/snippets/pom.xml", "diffHunk": "@@ -124,7 +130,7 @@\n     <dependency>\n       <groupId>com.google.truth</groupId>\n       <artifactId>truth</artifactId>\n-      <version>1.0.1</version>\n+      <version>0.42</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4272f897c403f64aecdd5ae939997bcbeb27d74c"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMzNTY3OA==", "bodyText": "We shouldn't rewrap errors like this - the visionResponse isn't an IOException.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#discussion_r403335678", "createdAt": "2020-04-03T21:06:03Z", "author": {"login": "kurtisvg"}, "path": "functions/snippets/src/main/java/com/example/functions/OcrProcessImage.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_ocr_process]\n+\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.pubsub.v1.Publisher;\n+import com.google.cloud.translate.v3.DetectLanguageRequest;\n+import com.google.cloud.translate.v3.DetectLanguageResponse;\n+import com.google.cloud.translate.v3.LocationName;\n+import com.google.cloud.translate.v3.TranslationServiceClient;\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.Image;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageSource;\n+import com.google.gson.Gson;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.ProjectTopicName;\n+import com.google.pubsub.v1.PubsubMessage;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+// [END functions_ocr_process]\n+\n+public class OcrProcessImage implements BackgroundFunction<GcsEvent> {\n+  // TODO<developer> set these environment variables\n+  private static final String PROJECT_ID = System.getenv(\"GCP_PROJECT\");\n+  private static final String TRANSLATE_TOPIC_NAME = System.getenv(\"TRANSLATE_TOPIC\");\n+  private static final String[] TO_LANGS = System.getenv(\"TO_LANG\").split(\",\");\n+\n+  private static final Logger LOGGER = Logger.getLogger(OcrProcessImage.class.getName());\n+  private static final String LOCATION_NAME = LocationName.of(PROJECT_ID, \"global\").toString();\n+  private Publisher publisher;\n+  private static final Gson gson = new Gson();\n+\n+  public OcrProcessImage() throws IOException {\n+    publisher = Publisher.newBuilder(\n+        ProjectTopicName.of(PROJECT_ID, TRANSLATE_TOPIC_NAME)).build();\n+  }\n+\n+  // [START functions_ocr_process]\n+  @Override\n+  public void accept(GcsEvent gcsEvent, Context context) {\n+\n+    // Validate parameters\n+    String bucket = gcsEvent.getBucket();\n+    if (bucket == null) {\n+      throw new IllegalArgumentException(\"Missing bucket parameter\");\n+    }\n+    String filename = gcsEvent.getName();\n+    if (filename == null) {\n+      throw new IllegalArgumentException(\"Missing name parameter\");\n+    }\n+\n+    detectText(bucket, filename);\n+  }\n+  // [END functions_ocr_process]\n+\n+  // [START functions_ocr_detect]\n+  private void detectText(String bucket, String filename) {\n+    LOGGER.info(\"Looking for text in image \" + filename);\n+\n+    List<AnnotateImageRequest> visionRequests = new ArrayList<>();\n+    String gcsPath = String.format(\"gs://%s/%s\", bucket, filename);\n+\n+    ImageSource imgSource = ImageSource.newBuilder().setGcsImageUri(gcsPath).build();\n+    Image img = Image.newBuilder().setSource(imgSource).build();\n+\n+    Feature textFeature = Feature.newBuilder().setType(Feature.Type.TEXT_DETECTION).build();\n+    AnnotateImageRequest visionRequest =\n+        AnnotateImageRequest.newBuilder().addFeatures(textFeature).setImage(img).build();\n+    visionRequests.add(visionRequest);\n+\n+    // Detect text in an image using the Cloud Vision API\n+    AnnotateImageResponse visionResponse;\n+    try (ImageAnnotatorClient client = ImageAnnotatorClient.create()) {\n+      visionResponse = client.batchAnnotateImages(visionRequests).getResponses(0);\n+      if (visionResponse == null || !visionResponse.hasFullTextAnnotation()) {\n+        LOGGER.info(String.format(\"Image %s contains no text\", filename));\n+        return;\n+      }\n+\n+      if (visionResponse.hasError()) {\n+        // Throw IOException; to be handled by catch block below\n+        throw new IOException(visionResponse.getError().getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4272f897c403f64aecdd5ae939997bcbeb27d74c"}, "originalPosition": 107}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "299fced61da01c0ae4b649b4e5d3ee5d36e4c03c", "author": {"user": {"login": "ace-n", "name": "Ace Nassri"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/299fced61da01c0ae4b649b4e5d3ee5d36e4c03c", "committedDate": "2020-04-03T21:11:19Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84acc9ca7ccf81bca0decf52e7c7338f987bff27", "author": {"user": {"login": "ace-n", "name": "Ace Nassri"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/84acc9ca7ccf81bca0decf52e7c7338f987bff27", "committedDate": "2020-04-03T21:13:21Z", "message": "Merge branch 'master' into gcf-ocr"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NTk1ODI4", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#pullrequestreview-387595828", "createdAt": "2020-04-03T21:37:59Z", "commit": {"oid": "84acc9ca7ccf81bca0decf52e7c7338f987bff27"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bad4877d5a5f9a405ffa6dd3bdf7b6a6d12dff3c", "author": {"user": {"login": "ace-n", "name": "Ace Nassri"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/bad4877d5a5f9a405ffa6dd3bdf7b6a6d12dff3c", "committedDate": "2020-04-03T22:28:53Z", "message": "Merge branch 'master' into gcf-ocr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01b4a5663dea03fd0f81281f1a123b8fdd20c3e8", "author": {"user": {"login": "ace-n", "name": "Ace Nassri"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/01b4a5663dea03fd0f81281f1a123b8fdd20c3e8", "committedDate": "2020-04-03T22:38:42Z", "message": "Update shared config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5724df630ca56fb5a1ca3118f84d21622b35508", "author": {"user": {"login": "ace-n", "name": "Ace Nassri"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/a5724df630ca56fb5a1ca3118f84d21622b35508", "committedDate": "2020-04-03T22:38:53Z", "message": "Merge branch 'gcf-ocr' of http://github.com/GoogleCloudPlatform/java-docs-samples into gcf-ocr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0eaafb25fd1d91739f3db9884566f360dd99c3ac", "author": {"user": {"login": "ace-n", "name": "Ace Nassri"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/0eaafb25fd1d91739f3db9884566f360dd99c3ac", "committedDate": "2020-04-04T00:26:59Z", "message": "Fix checkstyle typo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3ODc5ODQ1", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2552#pullrequestreview-387879845", "createdAt": "2020-04-06T00:19:49Z", "commit": {"oid": "0eaafb25fd1d91739f3db9884566f360dd99c3ac"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "289c3a4acfa7e3b2695651d5a0c686fdaca1a543", "author": {"user": {"login": "lesv", "name": "Les Vogel"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/289c3a4acfa7e3b2695651d5a0c686fdaca1a543", "committedDate": "2020-04-06T00:20:29Z", "message": "Merge branch 'master' into gcf-ocr"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 892, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}