{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3ODQ2NzM5", "number": 2039, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNzo1NDo1N1rODbUOew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNzo1NjoxNFrODbUQIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5OTY5NTMxOnYy", "diffSide": "RIGHT", "path": "secretmanager/src/main/java/com/example/IamRevokeAccess.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNzo1NDo1N1rOFiuxQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxODoxMTo0OVrOFivS7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk2MjE3Ng==", "bodyText": "nit: better variable name for b", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2039#discussion_r371962176", "createdAt": "2020-01-28T17:54:57Z", "author": {"login": "averikitsch"}, "path": "secretmanager/src/main/java/com/example/IamRevokeAccess.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+// [START secretmanager_iam_revoke_access]\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretName;\n+import com.google.iam.v1.Binding;\n+import com.google.iam.v1.GetIamPolicyRequest;\n+import com.google.iam.v1.Policy;\n+import com.google.iam.v1.SetIamPolicyRequest;\n+import java.io.IOException;\n+\n+public class IamRevokeAccess {\n+\n+  public void iamRevokeAccess() throws IOException {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"your-project-id\";\n+    String secretId = \"your-secret-id\";\n+    String member = \"user:foo@example.com\";\n+    iamRevokeAccess(projectId, secretId, member);\n+  }\n+\n+  // Revoke a member access to a particular secret.\n+  public void iamRevokeAccess(String projectId, String secretId, String member) throws IOException {\n+    // Initialize client that will be used to send requests. This client only needs to be created\n+    // once, and can be reused for multiple requests. After completing all of your requests, call\n+    // the \"close\" method on the client to safely clean up any remaining background resources.\n+    try (SecretManagerServiceClient client = SecretManagerServiceClient.create()) {\n+      // Build the name from the version.\n+      SecretName name = SecretName.of(projectId, secretId);\n+\n+      // Create a request to get the current IAM policy.\n+      GetIamPolicyRequest getRequest =\n+          GetIamPolicyRequest.newBuilder().setResource(name.toString()).build();\n+\n+      // Request the current IAM policy.\n+      Policy policy = client.getIamPolicy(getRequest);\n+\n+      // Search through bindings and remove matches.\n+      String roleToFind = \"roles/secretmanager.secretAccessor\";\n+      for (Binding b : policy.getBindingsList()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18933c51a30080f35ca109d61b6f3ccdc464aa4a"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk3MDc5OA==", "bodyText": "Done", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2039#discussion_r371970798", "createdAt": "2020-01-28T18:11:49Z", "author": {"login": "sethvargo"}, "path": "secretmanager/src/main/java/com/example/IamRevokeAccess.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+// [START secretmanager_iam_revoke_access]\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretName;\n+import com.google.iam.v1.Binding;\n+import com.google.iam.v1.GetIamPolicyRequest;\n+import com.google.iam.v1.Policy;\n+import com.google.iam.v1.SetIamPolicyRequest;\n+import java.io.IOException;\n+\n+public class IamRevokeAccess {\n+\n+  public void iamRevokeAccess() throws IOException {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"your-project-id\";\n+    String secretId = \"your-secret-id\";\n+    String member = \"user:foo@example.com\";\n+    iamRevokeAccess(projectId, secretId, member);\n+  }\n+\n+  // Revoke a member access to a particular secret.\n+  public void iamRevokeAccess(String projectId, String secretId, String member) throws IOException {\n+    // Initialize client that will be used to send requests. This client only needs to be created\n+    // once, and can be reused for multiple requests. After completing all of your requests, call\n+    // the \"close\" method on the client to safely clean up any remaining background resources.\n+    try (SecretManagerServiceClient client = SecretManagerServiceClient.create()) {\n+      // Build the name from the version.\n+      SecretName name = SecretName.of(projectId, secretId);\n+\n+      // Create a request to get the current IAM policy.\n+      GetIamPolicyRequest getRequest =\n+          GetIamPolicyRequest.newBuilder().setResource(name.toString()).build();\n+\n+      // Request the current IAM policy.\n+      Policy policy = client.getIamPolicy(getRequest);\n+\n+      // Search through bindings and remove matches.\n+      String roleToFind = \"roles/secretmanager.secretAccessor\";\n+      for (Binding b : policy.getBindingsList()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk2MjE3Ng=="}, "originalCommit": {"oid": "18933c51a30080f35ca109d61b6f3ccdc464aa4a"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5OTY5OTUyOnYy", "diffSide": "RIGHT", "path": "secretmanager/src/test/java/com/example/SnippetsIT.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNzo1NjoxNFrOFiu0BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxODozMDo1NFrOFiv48Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk2Mjg4NQ==", "bodyText": "probably should change this", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2039#discussion_r371962885", "createdAt": "2020-01-28T17:56:14Z", "author": {"login": "averikitsch"}, "path": "secretmanager/src/test/java/com/example/SnippetsIT.java", "diffHunk": "@@ -47,6 +47,7 @@\n /** Integration (system) tests for {@link Snippets}. */\n @RunWith(JUnit4.class)\n public class SnippetsIT {\n+  private static final String IAM_USER = \"user:sethvargo@google.com\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18933c51a30080f35ca109d61b6f3ccdc464aa4a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk3MDI2MQ==", "bodyText": "Hi @averikitsch - is there a good service account that exists (or could you create one) in the test project please?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2039#discussion_r371970261", "createdAt": "2020-01-28T18:10:44Z", "author": {"login": "sethvargo"}, "path": "secretmanager/src/test/java/com/example/SnippetsIT.java", "diffHunk": "@@ -47,6 +47,7 @@\n /** Integration (system) tests for {@link Snippets}. */\n @RunWith(JUnit4.class)\n public class SnippetsIT {\n+  private static final String IAM_USER = \"user:sethvargo@google.com\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk2Mjg4NQ=="}, "originalCommit": {"oid": "18933c51a30080f35ca109d61b6f3ccdc464aa4a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk3NTE4MQ==", "bodyText": "iam-samples@java-docs-samples-testing.iam.gserviceaccount.com. Currently it has no roles or keys associated with it.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2039#discussion_r371975181", "createdAt": "2020-01-28T18:20:29Z", "author": {"login": "averikitsch"}, "path": "secretmanager/src/test/java/com/example/SnippetsIT.java", "diffHunk": "@@ -47,6 +47,7 @@\n /** Integration (system) tests for {@link Snippets}. */\n @RunWith(JUnit4.class)\n public class SnippetsIT {\n+  private static final String IAM_USER = \"user:sethvargo@google.com\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk2Mjg4NQ=="}, "originalCommit": {"oid": "18933c51a30080f35ca109d61b6f3ccdc464aa4a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk4MDUyOQ==", "bodyText": "Done", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2039#discussion_r371980529", "createdAt": "2020-01-28T18:30:54Z", "author": {"login": "sethvargo"}, "path": "secretmanager/src/test/java/com/example/SnippetsIT.java", "diffHunk": "@@ -47,6 +47,7 @@\n /** Integration (system) tests for {@link Snippets}. */\n @RunWith(JUnit4.class)\n public class SnippetsIT {\n+  private static final String IAM_USER = \"user:sethvargo@google.com\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk2Mjg4NQ=="}, "originalCommit": {"oid": "18933c51a30080f35ca109d61b6f3ccdc464aa4a"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 567, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}