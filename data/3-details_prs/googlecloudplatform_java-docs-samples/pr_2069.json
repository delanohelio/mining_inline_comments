{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1MTE0MDM3", "number": 2069, "title": "Cleanup DLP Risk Analysis snippets", "bodyText": "Working towards #1479\nThis ended up being a larger PR than expected. I can split it up if needed.", "createdAt": "2020-02-13T22:13:45Z", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069", "merged": true, "mergeCommit": {"oid": "c8ef8a57638490a37e9f37b6d048ec9416dcc44a"}, "closed": true, "closedAt": "2020-02-19T21:16:03Z", "author": {"login": "shubha-rajan"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcECxT5gFqTM1ODYwMTY5MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcF9OBtAFqTM2MTQ0MjE2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NjAxNjkw", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#pullrequestreview-358601690", "createdAt": "2020-02-13T22:35:27Z", "commit": {"oid": "648db658112be9a895e6700fb99e7805deab33d0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjYyNDc0", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#pullrequestreview-359262474", "createdAt": "2020-02-14T22:50:59Z", "commit": {"oid": "648db658112be9a895e6700fb99e7805deab33d0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMjo1MDo1OVrOFqFzeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMzowODozMVrOFqGELQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY3OTYwOA==", "bodyText": "This is probably too long for a lamba - can you surface it out into a full function? I think within the class is still fine", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379679608", "createdAt": "2020-02-14T22:50:59Z", "author": {"login": "kurtisvg"}, "path": "dlp/src/main/java/dlp/snippets/RiskAnalysisCategoricalStats.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+// [START dlp_categorical_stats]\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.api.core.SettableApiFuture;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.cloud.pubsub.v1.Subscriber;\n+import com.google.cloud.pubsub.v1.AckReplyConsumer;\n+import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.privacy.dlp.v2.Action;\n+import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket;\n+import com.google.privacy.dlp.v2.BigQueryTable;\n+import com.google.privacy.dlp.v2.CreateDlpJobRequest;\n+import com.google.privacy.dlp.v2.DlpJob;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.GetDlpJobRequest;\n+import com.google.privacy.dlp.v2.PrivacyMetric;\n+import com.google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.RiskAnalysisJobConfig;\n+import com.google.privacy.dlp.v2.ValueFrequency;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.ProjectTopicName;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+class RiskAnalysisCategoricalStats {\n+\n+    public static void categoricalStatsAnalysis() throws Exception {\n+        // TODO(developer): Replace these variables before running the sample.\n+        String projectId = \"your-project-id\";\n+        String datasetId = \"your-bigquery-dataset-id\";\n+        String tableId = \"your-bigquery-table-id\";\n+        String topicId = \"pub-sub-topic\";\n+        String subscriptionId = \"pub-sub-subscription\";\n+        String columnName = \"column_name\";\n+        categoricalStatsAnalysis(\n+                projectId, datasetId, tableId, topicId, subscriptionId, columnName);\n+    }\n+\n+    public static void categoricalStatsAnalysis(\n+            String projectId,\n+            String datasetId,\n+            String tableId,\n+            String topicId,\n+            String subscriptionId,\n+            String columnName) throws Exception {\n+        // Initialize client that will be used to send requests. This client only needs to be created\n+        // once, and can be reused for multiple requests. After completing all of your requests, call\n+        // the \"close\" method on the client to safely clean up any remaining background resources.\n+        try (DlpServiceClient dlpServiceClient = DlpServiceClient.create()) {\n+            // Specify the BigQuery table to analyze\n+            BigQueryTable bigQueryTable =\n+                    BigQueryTable.newBuilder()\n+                            .setProjectId(projectId)\n+                            .setDatasetId(datasetId)\n+                            .setTableId(tableId)\n+                            .build();\n+\n+            // Configure the privacy metric for the job\n+            FieldId fieldId = FieldId.newBuilder().setName(columnName).build();\n+            CategoricalStatsConfig categoricalStatsConfig =\n+                    CategoricalStatsConfig.newBuilder().setField(fieldId).build();\n+            PrivacyMetric privacyMetric =\n+                    PrivacyMetric.newBuilder().setCategoricalStatsConfig(categoricalStatsConfig).build();\n+\n+\n+            // Create action to publish job status notifications over Google Cloud Pub/Sub\n+            ProjectTopicName topicName = ProjectTopicName.of(projectId, topicId);\n+            PublishToPubSub publishToPubSub =\n+                    PublishToPubSub.newBuilder()\n+                            .setTopic(topicName.toString())\n+                            .build();\n+            Action action = Action.newBuilder().setPubSub(publishToPubSub).build();\n+\n+\n+            // Configure the risk analysis job to perform\n+            RiskAnalysisJobConfig riskAnalysisJobConfig =\n+                    RiskAnalysisJobConfig.newBuilder()\n+                            .setSourceTable(bigQueryTable)\n+                            .setPrivacyMetric(privacyMetric)\n+                            .addActions(action)\n+                            .build();\n+\n+            // Build the request to be sent by the client\n+            CreateDlpJobRequest createDlpJobRequest =\n+                    CreateDlpJobRequest.newBuilder()\n+                            .setParent(ProjectName.of(projectId).toString())\n+                            .setRiskJob(riskAnalysisJobConfig)\n+                            .build();\n+\n+            // Send the request to the API using the client\n+            DlpJob dlpJob = dlpServiceClient.createDlpJob(createDlpJobRequest);\n+\n+            // Set up a Pub/Sub subscriber to listen on the job completion status\n+            final SettableApiFuture<Boolean> done = SettableApiFuture.create();\n+\n+            ProjectSubscriptionName subscriptionName =\n+                    ProjectSubscriptionName.of(projectId, subscriptionId);\n+\n+            MessageReceiver handleMessage =\n+                    (PubsubMessage pubsubMessage, AckReplyConsumer ackReplyConsumer) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "648db658112be9a895e6700fb99e7805deab33d0"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY3OTk4Ng==", "bodyText": "Can we pull the request build into a separate var/line? I think that will actually make this shorter.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379679986", "createdAt": "2020-02-14T22:52:29Z", "author": {"login": "kurtisvg"}, "path": "dlp/src/main/java/dlp/snippets/RiskAnalysisCategoricalStats.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+// [START dlp_categorical_stats]\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.api.core.SettableApiFuture;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.cloud.pubsub.v1.Subscriber;\n+import com.google.cloud.pubsub.v1.AckReplyConsumer;\n+import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.privacy.dlp.v2.Action;\n+import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket;\n+import com.google.privacy.dlp.v2.BigQueryTable;\n+import com.google.privacy.dlp.v2.CreateDlpJobRequest;\n+import com.google.privacy.dlp.v2.DlpJob;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.GetDlpJobRequest;\n+import com.google.privacy.dlp.v2.PrivacyMetric;\n+import com.google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.RiskAnalysisJobConfig;\n+import com.google.privacy.dlp.v2.ValueFrequency;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.ProjectTopicName;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+class RiskAnalysisCategoricalStats {\n+\n+    public static void categoricalStatsAnalysis() throws Exception {\n+        // TODO(developer): Replace these variables before running the sample.\n+        String projectId = \"your-project-id\";\n+        String datasetId = \"your-bigquery-dataset-id\";\n+        String tableId = \"your-bigquery-table-id\";\n+        String topicId = \"pub-sub-topic\";\n+        String subscriptionId = \"pub-sub-subscription\";\n+        String columnName = \"column_name\";\n+        categoricalStatsAnalysis(\n+                projectId, datasetId, tableId, topicId, subscriptionId, columnName);\n+    }\n+\n+    public static void categoricalStatsAnalysis(\n+            String projectId,\n+            String datasetId,\n+            String tableId,\n+            String topicId,\n+            String subscriptionId,\n+            String columnName) throws Exception {\n+        // Initialize client that will be used to send requests. This client only needs to be created\n+        // once, and can be reused for multiple requests. After completing all of your requests, call\n+        // the \"close\" method on the client to safely clean up any remaining background resources.\n+        try (DlpServiceClient dlpServiceClient = DlpServiceClient.create()) {\n+            // Specify the BigQuery table to analyze\n+            BigQueryTable bigQueryTable =\n+                    BigQueryTable.newBuilder()\n+                            .setProjectId(projectId)\n+                            .setDatasetId(datasetId)\n+                            .setTableId(tableId)\n+                            .build();\n+\n+            // Configure the privacy metric for the job\n+            FieldId fieldId = FieldId.newBuilder().setName(columnName).build();\n+            CategoricalStatsConfig categoricalStatsConfig =\n+                    CategoricalStatsConfig.newBuilder().setField(fieldId).build();\n+            PrivacyMetric privacyMetric =\n+                    PrivacyMetric.newBuilder().setCategoricalStatsConfig(categoricalStatsConfig).build();\n+\n+\n+            // Create action to publish job status notifications over Google Cloud Pub/Sub\n+            ProjectTopicName topicName = ProjectTopicName.of(projectId, topicId);\n+            PublishToPubSub publishToPubSub =\n+                    PublishToPubSub.newBuilder()\n+                            .setTopic(topicName.toString())\n+                            .build();\n+            Action action = Action.newBuilder().setPubSub(publishToPubSub).build();\n+\n+\n+            // Configure the risk analysis job to perform\n+            RiskAnalysisJobConfig riskAnalysisJobConfig =\n+                    RiskAnalysisJobConfig.newBuilder()\n+                            .setSourceTable(bigQueryTable)\n+                            .setPrivacyMetric(privacyMetric)\n+                            .addActions(action)\n+                            .build();\n+\n+            // Build the request to be sent by the client\n+            CreateDlpJobRequest createDlpJobRequest =\n+                    CreateDlpJobRequest.newBuilder()\n+                            .setParent(ProjectName.of(projectId).toString())\n+                            .setRiskJob(riskAnalysisJobConfig)\n+                            .build();\n+\n+            // Send the request to the API using the client\n+            DlpJob dlpJob = dlpServiceClient.createDlpJob(createDlpJobRequest);\n+\n+            // Set up a Pub/Sub subscriber to listen on the job completion status\n+            final SettableApiFuture<Boolean> done = SettableApiFuture.create();\n+\n+            ProjectSubscriptionName subscriptionName =\n+                    ProjectSubscriptionName.of(projectId, subscriptionId);\n+\n+            MessageReceiver handleMessage =\n+                    (PubsubMessage pubsubMessage, AckReplyConsumer ackReplyConsumer) -> {\n+                        String messageAttribute = pubsubMessage.getAttributesMap().get(\"DlpJobName\");\n+                        if (dlpJob.getName().equals(messageAttribute)) {\n+                            done.set(true);\n+                            ackReplyConsumer.ack();\n+                        } else {\n+                            ackReplyConsumer.nack();\n+                        }\n+                    };\n+            Subscriber subscriber = Subscriber.newBuilder(subscriptionName, handleMessage).build();\n+            subscriber.startAsync();\n+\n+            // Wait for job completion semi-synchronously\n+            // For long jobs, consider using a truly asynchronous execution model such as Cloud Functions\n+            try {\n+                done.get(1, TimeUnit.MINUTES);\n+                Thread.sleep(500); // Wait for the job to become available\n+            } catch (TimeoutException e) {\n+                System.out.println(\"Unable to verify job completion.\");\n+            }\n+\n+            // Retrieve completed job status\n+            DlpJob completedJob =\n+                    dlpServiceClient.getDlpJob(\n+                            GetDlpJobRequest.newBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "648db658112be9a895e6700fb99e7805deab33d0"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4MDA1MQ==", "bodyText": "nit: remove newline", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379680051", "createdAt": "2020-02-14T22:52:48Z", "author": {"login": "kurtisvg"}, "path": "dlp/src/main/java/dlp/snippets/RiskAnalysisCategoricalStats.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+// [START dlp_categorical_stats]\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.api.core.SettableApiFuture;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.cloud.pubsub.v1.Subscriber;\n+import com.google.cloud.pubsub.v1.AckReplyConsumer;\n+import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.privacy.dlp.v2.Action;\n+import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket;\n+import com.google.privacy.dlp.v2.BigQueryTable;\n+import com.google.privacy.dlp.v2.CreateDlpJobRequest;\n+import com.google.privacy.dlp.v2.DlpJob;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.GetDlpJobRequest;\n+import com.google.privacy.dlp.v2.PrivacyMetric;\n+import com.google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.RiskAnalysisJobConfig;\n+import com.google.privacy.dlp.v2.ValueFrequency;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.ProjectTopicName;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+class RiskAnalysisCategoricalStats {\n+\n+    public static void categoricalStatsAnalysis() throws Exception {\n+        // TODO(developer): Replace these variables before running the sample.\n+        String projectId = \"your-project-id\";\n+        String datasetId = \"your-bigquery-dataset-id\";\n+        String tableId = \"your-bigquery-table-id\";\n+        String topicId = \"pub-sub-topic\";\n+        String subscriptionId = \"pub-sub-subscription\";\n+        String columnName = \"column_name\";\n+        categoricalStatsAnalysis(\n+                projectId, datasetId, tableId, topicId, subscriptionId, columnName);\n+    }\n+\n+    public static void categoricalStatsAnalysis(\n+            String projectId,\n+            String datasetId,\n+            String tableId,\n+            String topicId,\n+            String subscriptionId,\n+            String columnName) throws Exception {\n+        // Initialize client that will be used to send requests. This client only needs to be created\n+        // once, and can be reused for multiple requests. After completing all of your requests, call\n+        // the \"close\" method on the client to safely clean up any remaining background resources.\n+        try (DlpServiceClient dlpServiceClient = DlpServiceClient.create()) {\n+            // Specify the BigQuery table to analyze\n+            BigQueryTable bigQueryTable =\n+                    BigQueryTable.newBuilder()\n+                            .setProjectId(projectId)\n+                            .setDatasetId(datasetId)\n+                            .setTableId(tableId)\n+                            .build();\n+\n+            // Configure the privacy metric for the job\n+            FieldId fieldId = FieldId.newBuilder().setName(columnName).build();\n+            CategoricalStatsConfig categoricalStatsConfig =\n+                    CategoricalStatsConfig.newBuilder().setField(fieldId).build();\n+            PrivacyMetric privacyMetric =\n+                    PrivacyMetric.newBuilder().setCategoricalStatsConfig(categoricalStatsConfig).build();\n+\n+\n+            // Create action to publish job status notifications over Google Cloud Pub/Sub\n+            ProjectTopicName topicName = ProjectTopicName.of(projectId, topicId);\n+            PublishToPubSub publishToPubSub =\n+                    PublishToPubSub.newBuilder()\n+                            .setTopic(topicName.toString())\n+                            .build();\n+            Action action = Action.newBuilder().setPubSub(publishToPubSub).build();\n+\n+\n+            // Configure the risk analysis job to perform\n+            RiskAnalysisJobConfig riskAnalysisJobConfig =\n+                    RiskAnalysisJobConfig.newBuilder()\n+                            .setSourceTable(bigQueryTable)\n+                            .setPrivacyMetric(privacyMetric)\n+                            .addActions(action)\n+                            .build();\n+\n+            // Build the request to be sent by the client\n+            CreateDlpJobRequest createDlpJobRequest =\n+                    CreateDlpJobRequest.newBuilder()\n+                            .setParent(ProjectName.of(projectId).toString())\n+                            .setRiskJob(riskAnalysisJobConfig)\n+                            .build();\n+\n+            // Send the request to the API using the client\n+            DlpJob dlpJob = dlpServiceClient.createDlpJob(createDlpJobRequest);\n+\n+            // Set up a Pub/Sub subscriber to listen on the job completion status\n+            final SettableApiFuture<Boolean> done = SettableApiFuture.create();\n+\n+            ProjectSubscriptionName subscriptionName =\n+                    ProjectSubscriptionName.of(projectId, subscriptionId);\n+\n+            MessageReceiver handleMessage =\n+                    (PubsubMessage pubsubMessage, AckReplyConsumer ackReplyConsumer) -> {\n+                        String messageAttribute = pubsubMessage.getAttributesMap().get(\"DlpJobName\");\n+                        if (dlpJob.getName().equals(messageAttribute)) {\n+                            done.set(true);\n+                            ackReplyConsumer.ack();\n+                        } else {\n+                            ackReplyConsumer.nack();\n+                        }\n+                    };\n+            Subscriber subscriber = Subscriber.newBuilder(subscriptionName, handleMessage).build();\n+            subscriber.startAsync();\n+\n+            // Wait for job completion semi-synchronously\n+            // For long jobs, consider using a truly asynchronous execution model such as Cloud Functions\n+            try {\n+                done.get(1, TimeUnit.MINUTES);\n+                Thread.sleep(500); // Wait for the job to become available\n+            } catch (TimeoutException e) {\n+                System.out.println(\"Unable to verify job completion.\");\n+            }\n+\n+            // Retrieve completed job status\n+            DlpJob completedJob =\n+                    dlpServiceClient.getDlpJob(\n+                            GetDlpJobRequest.newBuilder()\n+                                    .setName(dlpJob.getName())\n+                                    .build());\n+            System.out.println(\"Job status: \" + completedJob.getState());\n+\n+            // Get the result and parse through and process the information\n+            CategoricalStatsResult result =\n+                    completedJob.getRiskDetails().getCategoricalStatsResult();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "648db658112be9a895e6700fb99e7805deab33d0"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4MDE5Mw==", "bodyText": "nit: I would pull result.getValueFrequencyHistogramBucketsList() into it's own line too (still 2 lines, but easier to read)", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379680193", "createdAt": "2020-02-14T22:53:26Z", "author": {"login": "kurtisvg"}, "path": "dlp/src/main/java/dlp/snippets/RiskAnalysisCategoricalStats.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+// [START dlp_categorical_stats]\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.api.core.SettableApiFuture;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.cloud.pubsub.v1.Subscriber;\n+import com.google.cloud.pubsub.v1.AckReplyConsumer;\n+import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.privacy.dlp.v2.Action;\n+import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket;\n+import com.google.privacy.dlp.v2.BigQueryTable;\n+import com.google.privacy.dlp.v2.CreateDlpJobRequest;\n+import com.google.privacy.dlp.v2.DlpJob;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.GetDlpJobRequest;\n+import com.google.privacy.dlp.v2.PrivacyMetric;\n+import com.google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.RiskAnalysisJobConfig;\n+import com.google.privacy.dlp.v2.ValueFrequency;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.ProjectTopicName;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+class RiskAnalysisCategoricalStats {\n+\n+    public static void categoricalStatsAnalysis() throws Exception {\n+        // TODO(developer): Replace these variables before running the sample.\n+        String projectId = \"your-project-id\";\n+        String datasetId = \"your-bigquery-dataset-id\";\n+        String tableId = \"your-bigquery-table-id\";\n+        String topicId = \"pub-sub-topic\";\n+        String subscriptionId = \"pub-sub-subscription\";\n+        String columnName = \"column_name\";\n+        categoricalStatsAnalysis(\n+                projectId, datasetId, tableId, topicId, subscriptionId, columnName);\n+    }\n+\n+    public static void categoricalStatsAnalysis(\n+            String projectId,\n+            String datasetId,\n+            String tableId,\n+            String topicId,\n+            String subscriptionId,\n+            String columnName) throws Exception {\n+        // Initialize client that will be used to send requests. This client only needs to be created\n+        // once, and can be reused for multiple requests. After completing all of your requests, call\n+        // the \"close\" method on the client to safely clean up any remaining background resources.\n+        try (DlpServiceClient dlpServiceClient = DlpServiceClient.create()) {\n+            // Specify the BigQuery table to analyze\n+            BigQueryTable bigQueryTable =\n+                    BigQueryTable.newBuilder()\n+                            .setProjectId(projectId)\n+                            .setDatasetId(datasetId)\n+                            .setTableId(tableId)\n+                            .build();\n+\n+            // Configure the privacy metric for the job\n+            FieldId fieldId = FieldId.newBuilder().setName(columnName).build();\n+            CategoricalStatsConfig categoricalStatsConfig =\n+                    CategoricalStatsConfig.newBuilder().setField(fieldId).build();\n+            PrivacyMetric privacyMetric =\n+                    PrivacyMetric.newBuilder().setCategoricalStatsConfig(categoricalStatsConfig).build();\n+\n+\n+            // Create action to publish job status notifications over Google Cloud Pub/Sub\n+            ProjectTopicName topicName = ProjectTopicName.of(projectId, topicId);\n+            PublishToPubSub publishToPubSub =\n+                    PublishToPubSub.newBuilder()\n+                            .setTopic(topicName.toString())\n+                            .build();\n+            Action action = Action.newBuilder().setPubSub(publishToPubSub).build();\n+\n+\n+            // Configure the risk analysis job to perform\n+            RiskAnalysisJobConfig riskAnalysisJobConfig =\n+                    RiskAnalysisJobConfig.newBuilder()\n+                            .setSourceTable(bigQueryTable)\n+                            .setPrivacyMetric(privacyMetric)\n+                            .addActions(action)\n+                            .build();\n+\n+            // Build the request to be sent by the client\n+            CreateDlpJobRequest createDlpJobRequest =\n+                    CreateDlpJobRequest.newBuilder()\n+                            .setParent(ProjectName.of(projectId).toString())\n+                            .setRiskJob(riskAnalysisJobConfig)\n+                            .build();\n+\n+            // Send the request to the API using the client\n+            DlpJob dlpJob = dlpServiceClient.createDlpJob(createDlpJobRequest);\n+\n+            // Set up a Pub/Sub subscriber to listen on the job completion status\n+            final SettableApiFuture<Boolean> done = SettableApiFuture.create();\n+\n+            ProjectSubscriptionName subscriptionName =\n+                    ProjectSubscriptionName.of(projectId, subscriptionId);\n+\n+            MessageReceiver handleMessage =\n+                    (PubsubMessage pubsubMessage, AckReplyConsumer ackReplyConsumer) -> {\n+                        String messageAttribute = pubsubMessage.getAttributesMap().get(\"DlpJobName\");\n+                        if (dlpJob.getName().equals(messageAttribute)) {\n+                            done.set(true);\n+                            ackReplyConsumer.ack();\n+                        } else {\n+                            ackReplyConsumer.nack();\n+                        }\n+                    };\n+            Subscriber subscriber = Subscriber.newBuilder(subscriptionName, handleMessage).build();\n+            subscriber.startAsync();\n+\n+            // Wait for job completion semi-synchronously\n+            // For long jobs, consider using a truly asynchronous execution model such as Cloud Functions\n+            try {\n+                done.get(1, TimeUnit.MINUTES);\n+                Thread.sleep(500); // Wait for the job to become available\n+            } catch (TimeoutException e) {\n+                System.out.println(\"Unable to verify job completion.\");\n+            }\n+\n+            // Retrieve completed job status\n+            DlpJob completedJob =\n+                    dlpServiceClient.getDlpJob(\n+                            GetDlpJobRequest.newBuilder()\n+                                    .setName(dlpJob.getName())\n+                                    .build());\n+            System.out.println(\"Job status: \" + completedJob.getState());\n+\n+            // Get the result and parse through and process the information\n+            CategoricalStatsResult result =\n+                    completedJob.getRiskDetails().getCategoricalStatsResult();\n+\n+            for (CategoricalStatsHistogramBucket bucket :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "648db658112be9a895e6700fb99e7805deab33d0"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4MDQxNA==", "bodyText": "(same for a couple of statements below, but up to you)", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379680414", "createdAt": "2020-02-14T22:54:16Z", "author": {"login": "kurtisvg"}, "path": "dlp/src/main/java/dlp/snippets/RiskAnalysisCategoricalStats.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+// [START dlp_categorical_stats]\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.api.core.SettableApiFuture;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.cloud.pubsub.v1.Subscriber;\n+import com.google.cloud.pubsub.v1.AckReplyConsumer;\n+import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.privacy.dlp.v2.Action;\n+import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket;\n+import com.google.privacy.dlp.v2.BigQueryTable;\n+import com.google.privacy.dlp.v2.CreateDlpJobRequest;\n+import com.google.privacy.dlp.v2.DlpJob;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.GetDlpJobRequest;\n+import com.google.privacy.dlp.v2.PrivacyMetric;\n+import com.google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.RiskAnalysisJobConfig;\n+import com.google.privacy.dlp.v2.ValueFrequency;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.ProjectTopicName;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+class RiskAnalysisCategoricalStats {\n+\n+    public static void categoricalStatsAnalysis() throws Exception {\n+        // TODO(developer): Replace these variables before running the sample.\n+        String projectId = \"your-project-id\";\n+        String datasetId = \"your-bigquery-dataset-id\";\n+        String tableId = \"your-bigquery-table-id\";\n+        String topicId = \"pub-sub-topic\";\n+        String subscriptionId = \"pub-sub-subscription\";\n+        String columnName = \"column_name\";\n+        categoricalStatsAnalysis(\n+                projectId, datasetId, tableId, topicId, subscriptionId, columnName);\n+    }\n+\n+    public static void categoricalStatsAnalysis(\n+            String projectId,\n+            String datasetId,\n+            String tableId,\n+            String topicId,\n+            String subscriptionId,\n+            String columnName) throws Exception {\n+        // Initialize client that will be used to send requests. This client only needs to be created\n+        // once, and can be reused for multiple requests. After completing all of your requests, call\n+        // the \"close\" method on the client to safely clean up any remaining background resources.\n+        try (DlpServiceClient dlpServiceClient = DlpServiceClient.create()) {\n+            // Specify the BigQuery table to analyze\n+            BigQueryTable bigQueryTable =\n+                    BigQueryTable.newBuilder()\n+                            .setProjectId(projectId)\n+                            .setDatasetId(datasetId)\n+                            .setTableId(tableId)\n+                            .build();\n+\n+            // Configure the privacy metric for the job\n+            FieldId fieldId = FieldId.newBuilder().setName(columnName).build();\n+            CategoricalStatsConfig categoricalStatsConfig =\n+                    CategoricalStatsConfig.newBuilder().setField(fieldId).build();\n+            PrivacyMetric privacyMetric =\n+                    PrivacyMetric.newBuilder().setCategoricalStatsConfig(categoricalStatsConfig).build();\n+\n+\n+            // Create action to publish job status notifications over Google Cloud Pub/Sub\n+            ProjectTopicName topicName = ProjectTopicName.of(projectId, topicId);\n+            PublishToPubSub publishToPubSub =\n+                    PublishToPubSub.newBuilder()\n+                            .setTopic(topicName.toString())\n+                            .build();\n+            Action action = Action.newBuilder().setPubSub(publishToPubSub).build();\n+\n+\n+            // Configure the risk analysis job to perform\n+            RiskAnalysisJobConfig riskAnalysisJobConfig =\n+                    RiskAnalysisJobConfig.newBuilder()\n+                            .setSourceTable(bigQueryTable)\n+                            .setPrivacyMetric(privacyMetric)\n+                            .addActions(action)\n+                            .build();\n+\n+            // Build the request to be sent by the client\n+            CreateDlpJobRequest createDlpJobRequest =\n+                    CreateDlpJobRequest.newBuilder()\n+                            .setParent(ProjectName.of(projectId).toString())\n+                            .setRiskJob(riskAnalysisJobConfig)\n+                            .build();\n+\n+            // Send the request to the API using the client\n+            DlpJob dlpJob = dlpServiceClient.createDlpJob(createDlpJobRequest);\n+\n+            // Set up a Pub/Sub subscriber to listen on the job completion status\n+            final SettableApiFuture<Boolean> done = SettableApiFuture.create();\n+\n+            ProjectSubscriptionName subscriptionName =\n+                    ProjectSubscriptionName.of(projectId, subscriptionId);\n+\n+            MessageReceiver handleMessage =\n+                    (PubsubMessage pubsubMessage, AckReplyConsumer ackReplyConsumer) -> {\n+                        String messageAttribute = pubsubMessage.getAttributesMap().get(\"DlpJobName\");\n+                        if (dlpJob.getName().equals(messageAttribute)) {\n+                            done.set(true);\n+                            ackReplyConsumer.ack();\n+                        } else {\n+                            ackReplyConsumer.nack();\n+                        }\n+                    };\n+            Subscriber subscriber = Subscriber.newBuilder(subscriptionName, handleMessage).build();\n+            subscriber.startAsync();\n+\n+            // Wait for job completion semi-synchronously\n+            // For long jobs, consider using a truly asynchronous execution model such as Cloud Functions\n+            try {\n+                done.get(1, TimeUnit.MINUTES);\n+                Thread.sleep(500); // Wait for the job to become available\n+            } catch (TimeoutException e) {\n+                System.out.println(\"Unable to verify job completion.\");\n+            }\n+\n+            // Retrieve completed job status\n+            DlpJob completedJob =\n+                    dlpServiceClient.getDlpJob(\n+                            GetDlpJobRequest.newBuilder()\n+                                    .setName(dlpJob.getName())\n+                                    .build());\n+            System.out.println(\"Job status: \" + completedJob.getState());\n+\n+            // Get the result and parse through and process the information\n+            CategoricalStatsResult result =\n+                    completedJob.getRiskDetails().getCategoricalStatsResult();\n+\n+            for (CategoricalStatsHistogramBucket bucket :", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4MDE5Mw=="}, "originalCommit": {"oid": "648db658112be9a895e6700fb99e7805deab33d0"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4MDY4Mg==", "bodyText": "These should be inline - not required for testing", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379680682", "createdAt": "2020-02-14T22:55:18Z", "author": {"login": "kurtisvg"}, "path": "dlp/src/main/java/dlp/snippets/RiskAnalysisKAnonymity.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package dlp.snippets;\n+\n+// [START dlp_k_anonymity]\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.api.core.SettableApiFuture;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.cloud.pubsub.v1.Subscriber;\n+import com.google.cloud.pubsub.v1.AckReplyConsumer;\n+import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.privacy.dlp.v2.Action;\n+import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket;\n+import com.google.privacy.dlp.v2.BigQueryTable;\n+import com.google.privacy.dlp.v2.CreateDlpJobRequest;\n+import com.google.privacy.dlp.v2.DlpJob;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.GetDlpJobRequest;\n+import com.google.privacy.dlp.v2.PrivacyMetric;\n+import com.google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.RiskAnalysisJobConfig;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.ProjectTopicName;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+class RiskAnalysisKAnonymity {\n+\n+    public static void calculateKAnonymity() throws Exception {\n+        // TODO(developer): Replace these variables before running the sample.\n+        String projectId = \"your-project-id\";\n+        String datasetId = \"your-bigquery-dataset-id\";\n+        String tableId = \"your-bigquery-table-id\";\n+        String topicId = \"pub-sub-topic\";\n+        String subscriptionId = \"pub-sub-subscription\";\n+        List<String> quasiIdColumns = Arrays.asList(\"name\", \"age\", \"zip_code\", \"...\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "648db658112be9a895e6700fb99e7805deab33d0"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4MTEzNw==", "bodyText": "nit: This comment should probably be above L157", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379681137", "createdAt": "2020-02-14T22:57:14Z", "author": {"login": "kurtisvg"}, "path": "dlp/src/main/java/dlp/snippets/RiskAnalysisKAnonymity.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package dlp.snippets;\n+\n+// [START dlp_k_anonymity]\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.api.core.SettableApiFuture;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.cloud.pubsub.v1.Subscriber;\n+import com.google.cloud.pubsub.v1.AckReplyConsumer;\n+import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.privacy.dlp.v2.Action;\n+import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket;\n+import com.google.privacy.dlp.v2.BigQueryTable;\n+import com.google.privacy.dlp.v2.CreateDlpJobRequest;\n+import com.google.privacy.dlp.v2.DlpJob;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.GetDlpJobRequest;\n+import com.google.privacy.dlp.v2.PrivacyMetric;\n+import com.google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.RiskAnalysisJobConfig;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.ProjectTopicName;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+class RiskAnalysisKAnonymity {\n+\n+    public static void calculateKAnonymity() throws Exception {\n+        // TODO(developer): Replace these variables before running the sample.\n+        String projectId = \"your-project-id\";\n+        String datasetId = \"your-bigquery-dataset-id\";\n+        String tableId = \"your-bigquery-table-id\";\n+        String topicId = \"pub-sub-topic\";\n+        String subscriptionId = \"pub-sub-subscription\";\n+        List<String> quasiIdColumns = Arrays.asList(\"name\", \"age\", \"zip_code\", \"...\");\n+        calculateKAnonymity(\n+                projectId, datasetId, tableId, topicId, subscriptionId, quasiIdColumns);\n+    }\n+    public static void calculateKAnonymity(\n+            String projectId,\n+            String datasetId,\n+            String tableId,\n+            String topicId,\n+            String subscriptionId,\n+            List<String> quasiIds) throws Exception {\n+        // Initialize client that will be used to send requests. This client only needs to be created\n+        // once, and can be reused for multiple requests. After completing all of your requests, call\n+        // the \"close\" method on the client to safely clean up any remaining background resources.\n+        try (DlpServiceClient dlpServiceClient = DlpServiceClient.create()) {\n+\n+            // Specify the BigQuery table to analyze\n+            BigQueryTable bigQueryTable =\n+                    BigQueryTable.newBuilder()\n+                            .setProjectId(projectId)\n+                            .setDatasetId(datasetId)\n+                            .setTableId(tableId)\n+                            .build();\n+\n+            // Configure the privacy metric for the job\n+            List<FieldId> quasiIdFields =\n+                    quasiIds\n+                            .stream()\n+                            .map(columnName -> FieldId.newBuilder().setName(columnName).build())\n+                            .collect(Collectors.toList());\n+            KAnonymityConfig kanonymityConfig =\n+                    KAnonymityConfig.newBuilder().addAllQuasiIds(quasiIdFields).build();\n+            PrivacyMetric privacyMetric =\n+                    PrivacyMetric.newBuilder().setKAnonymityConfig(kanonymityConfig).build();\n+\n+\n+\n+            // Create action to publish job status notifications over Google Cloud Pub/Sub\n+            ProjectTopicName topicName = ProjectTopicName.of(projectId, topicId);\n+            PublishToPubSub publishToPubSub =\n+                    PublishToPubSub.newBuilder()\n+                            .setTopic(topicName.toString())\n+                            .build();\n+            Action action = Action.newBuilder().setPubSub(publishToPubSub).build();\n+\n+            // Configure the risk analysis job to perform\n+            RiskAnalysisJobConfig riskAnalysisJobConfig =\n+                    RiskAnalysisJobConfig.newBuilder()\n+                            .setSourceTable(bigQueryTable)\n+                            .setPrivacyMetric(privacyMetric)\n+                            .addActions(action)\n+                            .build();\n+\n+            // Build the request to be sent by the client\n+            CreateDlpJobRequest createDlpJobRequest =\n+                    CreateDlpJobRequest.newBuilder()\n+                            .setParent(ProjectName.of(projectId).toString())\n+                            .setRiskJob(riskAnalysisJobConfig)\n+                            .build();\n+\n+            // Send the request to the API using the client\n+            DlpJob dlpJob = dlpServiceClient.createDlpJob(createDlpJobRequest);\n+\n+            // Set up a Pub/Sub subscriber to listen on the job completion status\n+            final SettableApiFuture<Boolean> done = SettableApiFuture.create();\n+\n+            ProjectSubscriptionName subscriptionName =\n+                    ProjectSubscriptionName.of(projectId, subscriptionId);\n+\n+            MessageReceiver handleMessage =\n+                    (PubsubMessage pubsubMessage, AckReplyConsumer ackReplyConsumer) -> {\n+                        String messageAttribute = pubsubMessage.getAttributesMap().get(\"DlpJobName\");\n+                        if (dlpJob.getName().equals(messageAttribute)) {\n+                            done.set(true);\n+                            ackReplyConsumer.ack();\n+                        } else {\n+                            ackReplyConsumer.nack();\n+                        }\n+                    };\n+            Subscriber subscriber = Subscriber.newBuilder(subscriptionName, handleMessage).build();\n+            subscriber.startAsync();\n+\n+            // Wait for job completion semi-synchronously\n+            // For long jobs, consider using a truly asynchronous execution model such as Cloud Functions\n+            try {\n+                done.get(1, TimeUnit.MINUTES);\n+                Thread.sleep(500); // Wait for the job to become available\n+            } catch (TimeoutException e) {\n+                System.out.println(\"Unable to verify job completion.\");\n+            }\n+\n+            // Retrieve completed job status\n+            DlpJob completedJob =\n+                    dlpServiceClient.getDlpJob(\n+                            GetDlpJobRequest.newBuilder()\n+                                    .setName(dlpJob.getName())\n+                                    .build());\n+            System.out.println(\"Job status: \" + completedJob.getState());\n+\n+\n+            KAnonymityResult kanonymityResult =\n+                    completedJob.getRiskDetails().getKAnonymityResult();\n+\n+            // Get the result and parse through and process the information", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "648db658112be9a895e6700fb99e7805deab33d0"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4MTI2MQ==", "bodyText": "quasiIdColumns and infoTypeNames  should be inlined", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379681261", "createdAt": "2020-02-14T22:57:44Z", "author": {"login": "kurtisvg"}, "path": "dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java", "diffHunk": "@@ -0,0 +1,223 @@\n+\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+// [START dlp_k_map]\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.api.core.SettableApiFuture;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.cloud.pubsub.v1.Subscriber;\n+import com.google.cloud.pubsub.v1.AckReplyConsumer;\n+import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.privacy.dlp.v2.Action;\n+import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues;\n+import com.google.privacy.dlp.v2.BigQueryTable;\n+import com.google.privacy.dlp.v2.CreateDlpJobRequest;\n+import com.google.privacy.dlp.v2.DlpJob;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.GetDlpJobRequest;\n+import com.google.privacy.dlp.v2.InfoType;\n+import com.google.privacy.dlp.v2.PrivacyMetric;\n+import com.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig;\n+import com.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.RiskAnalysisJobConfig;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.ProjectTopicName;\n+\n+import java.util.Arrays;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+class RiskAnalysisKMap {\n+\n+    public static void calculateKMap() throws Exception {\n+        // TODO(developer): Replace these variables before running the sample.\n+        String projectId = \"your-project-id\";\n+        String datasetId = \"your-bigquery-dataset-id\";\n+        String tableId = \"your-bigquery-table-id\";\n+        String topicId = \"pub-sub-topic\";\n+        String subscriptionId = \"pub-sub-subscription\";\n+        List<String> quasiIdColumns = Arrays.asList(\"age\", \"gender\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "648db658112be9a895e6700fb99e7805deab33d0"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4MTQyMQ==", "bodyText": "Can you remove these extra new lines?\nShould (almost?) never need multiple whitespace breaks between statements", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379681421", "createdAt": "2020-02-14T22:58:20Z", "author": {"login": "kurtisvg"}, "path": "dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java", "diffHunk": "@@ -0,0 +1,223 @@\n+\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+// [START dlp_k_map]\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.api.core.SettableApiFuture;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.cloud.pubsub.v1.Subscriber;\n+import com.google.cloud.pubsub.v1.AckReplyConsumer;\n+import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.privacy.dlp.v2.Action;\n+import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues;\n+import com.google.privacy.dlp.v2.BigQueryTable;\n+import com.google.privacy.dlp.v2.CreateDlpJobRequest;\n+import com.google.privacy.dlp.v2.DlpJob;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.GetDlpJobRequest;\n+import com.google.privacy.dlp.v2.InfoType;\n+import com.google.privacy.dlp.v2.PrivacyMetric;\n+import com.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig;\n+import com.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.RiskAnalysisJobConfig;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.ProjectTopicName;\n+\n+import java.util.Arrays;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+class RiskAnalysisKMap {\n+\n+    public static void calculateKMap() throws Exception {\n+        // TODO(developer): Replace these variables before running the sample.\n+        String projectId = \"your-project-id\";\n+        String datasetId = \"your-bigquery-dataset-id\";\n+        String tableId = \"your-bigquery-table-id\";\n+        String topicId = \"pub-sub-topic\";\n+        String subscriptionId = \"pub-sub-subscription\";\n+        List<String> quasiIdColumns = Arrays.asList(\"age\", \"gender\");\n+        List<String> infoTypeNames = Arrays.asList(\"AGE\", \"GENDER\");\n+        calculateKMap(\n+                projectId, datasetId, tableId, topicId,\n+                subscriptionId, quasiIdColumns, infoTypeNames);\n+    }\n+\n+    public static void calculateKMap(\n+            String projectId,\n+            String datasetId,\n+            String tableId,\n+            String topicId,\n+            String subscriptionId,\n+            List<String> quasiIds,\n+            List<String> infoTypeNames) throws Exception {\n+\n+        // Initialize client that will be used to send requests. This client only needs to be created\n+        // once, and can be reused for multiple requests. After completing all of your requests, call\n+        // the \"close\" method on the client to safely clean up any remaining background resources.\n+        try (DlpServiceClient dlpServiceClient = DlpServiceClient.create()) {\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "648db658112be9a895e6700fb99e7805deab33d0"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4MTQ1Mg==", "bodyText": "same in a few other places", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379681452", "createdAt": "2020-02-14T22:58:29Z", "author": {"login": "kurtisvg"}, "path": "dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java", "diffHunk": "@@ -0,0 +1,223 @@\n+\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+// [START dlp_k_map]\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.api.core.SettableApiFuture;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.cloud.pubsub.v1.Subscriber;\n+import com.google.cloud.pubsub.v1.AckReplyConsumer;\n+import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.privacy.dlp.v2.Action;\n+import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues;\n+import com.google.privacy.dlp.v2.BigQueryTable;\n+import com.google.privacy.dlp.v2.CreateDlpJobRequest;\n+import com.google.privacy.dlp.v2.DlpJob;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.GetDlpJobRequest;\n+import com.google.privacy.dlp.v2.InfoType;\n+import com.google.privacy.dlp.v2.PrivacyMetric;\n+import com.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig;\n+import com.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.RiskAnalysisJobConfig;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.ProjectTopicName;\n+\n+import java.util.Arrays;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+class RiskAnalysisKMap {\n+\n+    public static void calculateKMap() throws Exception {\n+        // TODO(developer): Replace these variables before running the sample.\n+        String projectId = \"your-project-id\";\n+        String datasetId = \"your-bigquery-dataset-id\";\n+        String tableId = \"your-bigquery-table-id\";\n+        String topicId = \"pub-sub-topic\";\n+        String subscriptionId = \"pub-sub-subscription\";\n+        List<String> quasiIdColumns = Arrays.asList(\"age\", \"gender\");\n+        List<String> infoTypeNames = Arrays.asList(\"AGE\", \"GENDER\");\n+        calculateKMap(\n+                projectId, datasetId, tableId, topicId,\n+                subscriptionId, quasiIdColumns, infoTypeNames);\n+    }\n+\n+    public static void calculateKMap(\n+            String projectId,\n+            String datasetId,\n+            String tableId,\n+            String topicId,\n+            String subscriptionId,\n+            List<String> quasiIds,\n+            List<String> infoTypeNames) throws Exception {\n+\n+        // Initialize client that will be used to send requests. This client only needs to be created\n+        // once, and can be reused for multiple requests. After completing all of your requests, call\n+        // the \"close\" method on the client to safely clean up any remaining background resources.\n+        try (DlpServiceClient dlpServiceClient = DlpServiceClient.create()) {\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4MTQyMQ=="}, "originalCommit": {"oid": "648db658112be9a895e6700fb99e7805deab33d0"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4MTY4Ng==", "bodyText": "Can we use streams for these over Iterators?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379681686", "createdAt": "2020-02-14T22:59:25Z", "author": {"login": "kurtisvg"}, "path": "dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java", "diffHunk": "@@ -0,0 +1,223 @@\n+\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+// [START dlp_k_map]\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.api.core.SettableApiFuture;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.cloud.pubsub.v1.Subscriber;\n+import com.google.cloud.pubsub.v1.AckReplyConsumer;\n+import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.privacy.dlp.v2.Action;\n+import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues;\n+import com.google.privacy.dlp.v2.BigQueryTable;\n+import com.google.privacy.dlp.v2.CreateDlpJobRequest;\n+import com.google.privacy.dlp.v2.DlpJob;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.GetDlpJobRequest;\n+import com.google.privacy.dlp.v2.InfoType;\n+import com.google.privacy.dlp.v2.PrivacyMetric;\n+import com.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig;\n+import com.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.RiskAnalysisJobConfig;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.ProjectTopicName;\n+\n+import java.util.Arrays;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+class RiskAnalysisKMap {\n+\n+    public static void calculateKMap() throws Exception {\n+        // TODO(developer): Replace these variables before running the sample.\n+        String projectId = \"your-project-id\";\n+        String datasetId = \"your-bigquery-dataset-id\";\n+        String tableId = \"your-bigquery-table-id\";\n+        String topicId = \"pub-sub-topic\";\n+        String subscriptionId = \"pub-sub-subscription\";\n+        List<String> quasiIdColumns = Arrays.asList(\"age\", \"gender\");\n+        List<String> infoTypeNames = Arrays.asList(\"AGE\", \"GENDER\");\n+        calculateKMap(\n+                projectId, datasetId, tableId, topicId,\n+                subscriptionId, quasiIdColumns, infoTypeNames);\n+    }\n+\n+    public static void calculateKMap(\n+            String projectId,\n+            String datasetId,\n+            String tableId,\n+            String topicId,\n+            String subscriptionId,\n+            List<String> quasiIds,\n+            List<String> infoTypeNames) throws Exception {\n+\n+        // Initialize client that will be used to send requests. This client only needs to be created\n+        // once, and can be reused for multiple requests. After completing all of your requests, call\n+        // the \"close\" method on the client to safely clean up any remaining background resources.\n+        try (DlpServiceClient dlpServiceClient = DlpServiceClient.create()) {\n+\n+\n+\n+            // Specify the BigQuery table to analyze\n+            BigQueryTable bigQueryTable =\n+                    BigQueryTable.newBuilder()\n+                            .setProjectId(projectId)\n+                            .setDatasetId(datasetId)\n+                            .setTableId(tableId)\n+                            .build();\n+\n+\n+            // Tag each of the quasiId column names with its corresponding infoType\n+            List<InfoType> infoTypes =\n+                    infoTypeNames.stream()\n+                            .map(it -> InfoType.newBuilder().setName(it).build())\n+                            .collect(Collectors.toList());\n+\n+            Iterator<String> quasiIdsIterator = quasiIds.iterator();\n+            Iterator<InfoType> infoTypesIterator = infoTypes.iterator();\n+\n+            if (quasiIds.size() != infoTypes.size()) {\n+                throw new IllegalArgumentException(\"The numbers of quasi-IDs and infoTypes must be equal!\");\n+            }\n+\n+            ArrayList<TaggedField> taggedFields = new ArrayList();\n+            while (quasiIdsIterator.hasNext() || infoTypesIterator.hasNext()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "648db658112be9a895e6700fb99e7805deab33d0"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4MTk5NQ==", "bodyText": "Long lamba again", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379681995", "createdAt": "2020-02-14T23:00:36Z", "author": {"login": "kurtisvg"}, "path": "dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java", "diffHunk": "@@ -0,0 +1,223 @@\n+\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+// [START dlp_k_map]\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.api.core.SettableApiFuture;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.cloud.pubsub.v1.Subscriber;\n+import com.google.cloud.pubsub.v1.AckReplyConsumer;\n+import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.privacy.dlp.v2.Action;\n+import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues;\n+import com.google.privacy.dlp.v2.BigQueryTable;\n+import com.google.privacy.dlp.v2.CreateDlpJobRequest;\n+import com.google.privacy.dlp.v2.DlpJob;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.GetDlpJobRequest;\n+import com.google.privacy.dlp.v2.InfoType;\n+import com.google.privacy.dlp.v2.PrivacyMetric;\n+import com.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig;\n+import com.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.RiskAnalysisJobConfig;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.ProjectTopicName;\n+\n+import java.util.Arrays;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+class RiskAnalysisKMap {\n+\n+    public static void calculateKMap() throws Exception {\n+        // TODO(developer): Replace these variables before running the sample.\n+        String projectId = \"your-project-id\";\n+        String datasetId = \"your-bigquery-dataset-id\";\n+        String tableId = \"your-bigquery-table-id\";\n+        String topicId = \"pub-sub-topic\";\n+        String subscriptionId = \"pub-sub-subscription\";\n+        List<String> quasiIdColumns = Arrays.asList(\"age\", \"gender\");\n+        List<String> infoTypeNames = Arrays.asList(\"AGE\", \"GENDER\");\n+        calculateKMap(\n+                projectId, datasetId, tableId, topicId,\n+                subscriptionId, quasiIdColumns, infoTypeNames);\n+    }\n+\n+    public static void calculateKMap(\n+            String projectId,\n+            String datasetId,\n+            String tableId,\n+            String topicId,\n+            String subscriptionId,\n+            List<String> quasiIds,\n+            List<String> infoTypeNames) throws Exception {\n+\n+        // Initialize client that will be used to send requests. This client only needs to be created\n+        // once, and can be reused for multiple requests. After completing all of your requests, call\n+        // the \"close\" method on the client to safely clean up any remaining background resources.\n+        try (DlpServiceClient dlpServiceClient = DlpServiceClient.create()) {\n+\n+\n+\n+            // Specify the BigQuery table to analyze\n+            BigQueryTable bigQueryTable =\n+                    BigQueryTable.newBuilder()\n+                            .setProjectId(projectId)\n+                            .setDatasetId(datasetId)\n+                            .setTableId(tableId)\n+                            .build();\n+\n+\n+            // Tag each of the quasiId column names with its corresponding infoType\n+            List<InfoType> infoTypes =\n+                    infoTypeNames.stream()\n+                            .map(it -> InfoType.newBuilder().setName(it).build())\n+                            .collect(Collectors.toList());\n+\n+            Iterator<String> quasiIdsIterator = quasiIds.iterator();\n+            Iterator<InfoType> infoTypesIterator = infoTypes.iterator();\n+\n+            if (quasiIds.size() != infoTypes.size()) {\n+                throw new IllegalArgumentException(\"The numbers of quasi-IDs and infoTypes must be equal!\");\n+            }\n+\n+            ArrayList<TaggedField> taggedFields = new ArrayList();\n+            while (quasiIdsIterator.hasNext() || infoTypesIterator.hasNext()) {\n+                taggedFields.add(\n+                        TaggedField.newBuilder()\n+                                .setField(FieldId.newBuilder().setName(quasiIdsIterator.next()).build())\n+                                .setInfoType(infoTypesIterator.next())\n+                                .build());\n+            }\n+\n+            // The k-map distribution region can be specified by any ISO-3166-1 region code.\n+            String regionCode = \"US\";\n+\n+\n+            // Configure the privacy metric for the job\n+            KMapEstimationConfig kmapConfig =\n+                    KMapEstimationConfig.newBuilder()\n+                            .addAllQuasiIds(taggedFields)\n+                            .setRegionCode(regionCode)\n+                            .build();\n+            PrivacyMetric privacyMetric =\n+                    PrivacyMetric.newBuilder().setKMapEstimationConfig(kmapConfig).build();\n+\n+\n+            // Create action to publish job status notifications over Google Cloud Pub/Sub\n+            ProjectTopicName topicName = ProjectTopicName.of(projectId, topicId);\n+            PublishToPubSub publishToPubSub =\n+                    PublishToPubSub.newBuilder()\n+                            .setTopic(topicName.toString())\n+                            .build();\n+            Action action = Action.newBuilder().setPubSub(publishToPubSub).build();\n+\n+            // Configure the risk analysis job to perform\n+            RiskAnalysisJobConfig riskAnalysisJobConfig =\n+                    RiskAnalysisJobConfig.newBuilder()\n+                            .setSourceTable(bigQueryTable)\n+                            .setPrivacyMetric(privacyMetric)\n+                            .addActions(action)\n+                            .build();\n+\n+            // Build the request to be sent by the client\n+            CreateDlpJobRequest createDlpJobRequest =\n+                    CreateDlpJobRequest.newBuilder()\n+                            .setParent(ProjectName.of(projectId).toString())\n+                            .setRiskJob(riskAnalysisJobConfig)\n+                            .build();\n+\n+            // Send the request to the API using the client\n+            DlpJob dlpJob = dlpServiceClient.createDlpJob(createDlpJobRequest);\n+\n+            // Set up a Pub/Sub subscriber to listen on the job completion status\n+            final SettableApiFuture<Boolean> done = SettableApiFuture.create();\n+\n+            ProjectSubscriptionName subscriptionName =\n+                    ProjectSubscriptionName.of(projectId, subscriptionId);\n+\n+            MessageReceiver handleMessage =\n+                    (PubsubMessage pubsubMessage, AckReplyConsumer ackReplyConsumer) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "648db658112be9a895e6700fb99e7805deab33d0"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4MjEwMg==", "bodyText": "nit: no newline", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379682102", "createdAt": "2020-02-14T23:00:59Z", "author": {"login": "kurtisvg"}, "path": "dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java", "diffHunk": "@@ -0,0 +1,223 @@\n+\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+// [START dlp_k_map]\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.api.core.SettableApiFuture;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.cloud.pubsub.v1.Subscriber;\n+import com.google.cloud.pubsub.v1.AckReplyConsumer;\n+import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.privacy.dlp.v2.Action;\n+import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues;\n+import com.google.privacy.dlp.v2.BigQueryTable;\n+import com.google.privacy.dlp.v2.CreateDlpJobRequest;\n+import com.google.privacy.dlp.v2.DlpJob;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.GetDlpJobRequest;\n+import com.google.privacy.dlp.v2.InfoType;\n+import com.google.privacy.dlp.v2.PrivacyMetric;\n+import com.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig;\n+import com.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.RiskAnalysisJobConfig;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.ProjectTopicName;\n+\n+import java.util.Arrays;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+class RiskAnalysisKMap {\n+\n+    public static void calculateKMap() throws Exception {\n+        // TODO(developer): Replace these variables before running the sample.\n+        String projectId = \"your-project-id\";\n+        String datasetId = \"your-bigquery-dataset-id\";\n+        String tableId = \"your-bigquery-table-id\";\n+        String topicId = \"pub-sub-topic\";\n+        String subscriptionId = \"pub-sub-subscription\";\n+        List<String> quasiIdColumns = Arrays.asList(\"age\", \"gender\");\n+        List<String> infoTypeNames = Arrays.asList(\"AGE\", \"GENDER\");\n+        calculateKMap(\n+                projectId, datasetId, tableId, topicId,\n+                subscriptionId, quasiIdColumns, infoTypeNames);\n+    }\n+\n+    public static void calculateKMap(\n+            String projectId,\n+            String datasetId,\n+            String tableId,\n+            String topicId,\n+            String subscriptionId,\n+            List<String> quasiIds,\n+            List<String> infoTypeNames) throws Exception {\n+\n+        // Initialize client that will be used to send requests. This client only needs to be created\n+        // once, and can be reused for multiple requests. After completing all of your requests, call\n+        // the \"close\" method on the client to safely clean up any remaining background resources.\n+        try (DlpServiceClient dlpServiceClient = DlpServiceClient.create()) {\n+\n+\n+\n+            // Specify the BigQuery table to analyze\n+            BigQueryTable bigQueryTable =\n+                    BigQueryTable.newBuilder()\n+                            .setProjectId(projectId)\n+                            .setDatasetId(datasetId)\n+                            .setTableId(tableId)\n+                            .build();\n+\n+\n+            // Tag each of the quasiId column names with its corresponding infoType\n+            List<InfoType> infoTypes =\n+                    infoTypeNames.stream()\n+                            .map(it -> InfoType.newBuilder().setName(it).build())\n+                            .collect(Collectors.toList());\n+\n+            Iterator<String> quasiIdsIterator = quasiIds.iterator();\n+            Iterator<InfoType> infoTypesIterator = infoTypes.iterator();\n+\n+            if (quasiIds.size() != infoTypes.size()) {\n+                throw new IllegalArgumentException(\"The numbers of quasi-IDs and infoTypes must be equal!\");\n+            }\n+\n+            ArrayList<TaggedField> taggedFields = new ArrayList();\n+            while (quasiIdsIterator.hasNext() || infoTypesIterator.hasNext()) {\n+                taggedFields.add(\n+                        TaggedField.newBuilder()\n+                                .setField(FieldId.newBuilder().setName(quasiIdsIterator.next()).build())\n+                                .setInfoType(infoTypesIterator.next())\n+                                .build());\n+            }\n+\n+            // The k-map distribution region can be specified by any ISO-3166-1 region code.\n+            String regionCode = \"US\";\n+\n+\n+            // Configure the privacy metric for the job\n+            KMapEstimationConfig kmapConfig =\n+                    KMapEstimationConfig.newBuilder()\n+                            .addAllQuasiIds(taggedFields)\n+                            .setRegionCode(regionCode)\n+                            .build();\n+            PrivacyMetric privacyMetric =\n+                    PrivacyMetric.newBuilder().setKMapEstimationConfig(kmapConfig).build();\n+\n+\n+            // Create action to publish job status notifications over Google Cloud Pub/Sub\n+            ProjectTopicName topicName = ProjectTopicName.of(projectId, topicId);\n+            PublishToPubSub publishToPubSub =\n+                    PublishToPubSub.newBuilder()\n+                            .setTopic(topicName.toString())\n+                            .build();\n+            Action action = Action.newBuilder().setPubSub(publishToPubSub).build();\n+\n+            // Configure the risk analysis job to perform\n+            RiskAnalysisJobConfig riskAnalysisJobConfig =\n+                    RiskAnalysisJobConfig.newBuilder()\n+                            .setSourceTable(bigQueryTable)\n+                            .setPrivacyMetric(privacyMetric)\n+                            .addActions(action)\n+                            .build();\n+\n+            // Build the request to be sent by the client\n+            CreateDlpJobRequest createDlpJobRequest =\n+                    CreateDlpJobRequest.newBuilder()\n+                            .setParent(ProjectName.of(projectId).toString())\n+                            .setRiskJob(riskAnalysisJobConfig)\n+                            .build();\n+\n+            // Send the request to the API using the client\n+            DlpJob dlpJob = dlpServiceClient.createDlpJob(createDlpJobRequest);\n+\n+            // Set up a Pub/Sub subscriber to listen on the job completion status\n+            final SettableApiFuture<Boolean> done = SettableApiFuture.create();\n+\n+            ProjectSubscriptionName subscriptionName =\n+                    ProjectSubscriptionName.of(projectId, subscriptionId);\n+\n+            MessageReceiver handleMessage =\n+                    (PubsubMessage pubsubMessage, AckReplyConsumer ackReplyConsumer) -> {\n+                        String messageAttribute = pubsubMessage.getAttributesMap().get(\"DlpJobName\");\n+                        if (dlpJob.getName().equals(messageAttribute)) {\n+                            done.set(true);\n+                            ackReplyConsumer.ack();\n+                        } else {\n+                            ackReplyConsumer.nack();\n+                        }\n+                    };\n+            Subscriber subscriber = Subscriber.newBuilder(subscriptionName, handleMessage).build();\n+            subscriber.startAsync();\n+\n+            // Wait for job completion semi-synchronously\n+            // For long jobs, consider using a truly asynchronous execution model such as Cloud Functions\n+            try {\n+                done.get(1, TimeUnit.MINUTES);\n+                Thread.sleep(500); // Wait for the job to become available\n+            } catch (TimeoutException e) {\n+                System.out.println(\"Unable to verify job completion.\");\n+            }\n+\n+            // Retrieve completed job status\n+            DlpJob completedJob =\n+                    dlpServiceClient.getDlpJob(\n+                            GetDlpJobRequest.newBuilder()\n+                                    .setName(dlpJob.getName())\n+                                    .build());\n+            System.out.println(\"Job status: \" + completedJob.getState());\n+\n+            // Get the result and parse through and process the information\n+            KMapEstimationResult kmapResult  = completedJob.getRiskDetails().getKMapEstimationResult();\n+\n+            for (KMapEstimationHistogramBucket result : kmapResult.getKMapEstimationHistogramList()) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "648db658112be9a895e6700fb99e7805deab33d0"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4MzQ5Ng==", "bodyText": "A comment on this function would be helpful.\nnit: Does there have to be a new line before v -> { (might be a java format thing, just looks weird to me)?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379683496", "createdAt": "2020-02-14T23:06:49Z", "author": {"login": "kurtisvg"}, "path": "dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java", "diffHunk": "@@ -0,0 +1,223 @@\n+\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+// [START dlp_k_map]\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.api.core.SettableApiFuture;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.cloud.pubsub.v1.Subscriber;\n+import com.google.cloud.pubsub.v1.AckReplyConsumer;\n+import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.privacy.dlp.v2.Action;\n+import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues;\n+import com.google.privacy.dlp.v2.BigQueryTable;\n+import com.google.privacy.dlp.v2.CreateDlpJobRequest;\n+import com.google.privacy.dlp.v2.DlpJob;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.GetDlpJobRequest;\n+import com.google.privacy.dlp.v2.InfoType;\n+import com.google.privacy.dlp.v2.PrivacyMetric;\n+import com.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig;\n+import com.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.RiskAnalysisJobConfig;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.ProjectTopicName;\n+\n+import java.util.Arrays;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+class RiskAnalysisKMap {\n+\n+    public static void calculateKMap() throws Exception {\n+        // TODO(developer): Replace these variables before running the sample.\n+        String projectId = \"your-project-id\";\n+        String datasetId = \"your-bigquery-dataset-id\";\n+        String tableId = \"your-bigquery-table-id\";\n+        String topicId = \"pub-sub-topic\";\n+        String subscriptionId = \"pub-sub-subscription\";\n+        List<String> quasiIdColumns = Arrays.asList(\"age\", \"gender\");\n+        List<String> infoTypeNames = Arrays.asList(\"AGE\", \"GENDER\");\n+        calculateKMap(\n+                projectId, datasetId, tableId, topicId,\n+                subscriptionId, quasiIdColumns, infoTypeNames);\n+    }\n+\n+    public static void calculateKMap(\n+            String projectId,\n+            String datasetId,\n+            String tableId,\n+            String topicId,\n+            String subscriptionId,\n+            List<String> quasiIds,\n+            List<String> infoTypeNames) throws Exception {\n+\n+        // Initialize client that will be used to send requests. This client only needs to be created\n+        // once, and can be reused for multiple requests. After completing all of your requests, call\n+        // the \"close\" method on the client to safely clean up any remaining background resources.\n+        try (DlpServiceClient dlpServiceClient = DlpServiceClient.create()) {\n+\n+\n+\n+            // Specify the BigQuery table to analyze\n+            BigQueryTable bigQueryTable =\n+                    BigQueryTable.newBuilder()\n+                            .setProjectId(projectId)\n+                            .setDatasetId(datasetId)\n+                            .setTableId(tableId)\n+                            .build();\n+\n+\n+            // Tag each of the quasiId column names with its corresponding infoType\n+            List<InfoType> infoTypes =\n+                    infoTypeNames.stream()\n+                            .map(it -> InfoType.newBuilder().setName(it).build())\n+                            .collect(Collectors.toList());\n+\n+            Iterator<String> quasiIdsIterator = quasiIds.iterator();\n+            Iterator<InfoType> infoTypesIterator = infoTypes.iterator();\n+\n+            if (quasiIds.size() != infoTypes.size()) {\n+                throw new IllegalArgumentException(\"The numbers of quasi-IDs and infoTypes must be equal!\");\n+            }\n+\n+            ArrayList<TaggedField> taggedFields = new ArrayList();\n+            while (quasiIdsIterator.hasNext() || infoTypesIterator.hasNext()) {\n+                taggedFields.add(\n+                        TaggedField.newBuilder()\n+                                .setField(FieldId.newBuilder().setName(quasiIdsIterator.next()).build())\n+                                .setInfoType(infoTypesIterator.next())\n+                                .build());\n+            }\n+\n+            // The k-map distribution region can be specified by any ISO-3166-1 region code.\n+            String regionCode = \"US\";\n+\n+\n+            // Configure the privacy metric for the job\n+            KMapEstimationConfig kmapConfig =\n+                    KMapEstimationConfig.newBuilder()\n+                            .addAllQuasiIds(taggedFields)\n+                            .setRegionCode(regionCode)\n+                            .build();\n+            PrivacyMetric privacyMetric =\n+                    PrivacyMetric.newBuilder().setKMapEstimationConfig(kmapConfig).build();\n+\n+\n+            // Create action to publish job status notifications over Google Cloud Pub/Sub\n+            ProjectTopicName topicName = ProjectTopicName.of(projectId, topicId);\n+            PublishToPubSub publishToPubSub =\n+                    PublishToPubSub.newBuilder()\n+                            .setTopic(topicName.toString())\n+                            .build();\n+            Action action = Action.newBuilder().setPubSub(publishToPubSub).build();\n+\n+            // Configure the risk analysis job to perform\n+            RiskAnalysisJobConfig riskAnalysisJobConfig =\n+                    RiskAnalysisJobConfig.newBuilder()\n+                            .setSourceTable(bigQueryTable)\n+                            .setPrivacyMetric(privacyMetric)\n+                            .addActions(action)\n+                            .build();\n+\n+            // Build the request to be sent by the client\n+            CreateDlpJobRequest createDlpJobRequest =\n+                    CreateDlpJobRequest.newBuilder()\n+                            .setParent(ProjectName.of(projectId).toString())\n+                            .setRiskJob(riskAnalysisJobConfig)\n+                            .build();\n+\n+            // Send the request to the API using the client\n+            DlpJob dlpJob = dlpServiceClient.createDlpJob(createDlpJobRequest);\n+\n+            // Set up a Pub/Sub subscriber to listen on the job completion status\n+            final SettableApiFuture<Boolean> done = SettableApiFuture.create();\n+\n+            ProjectSubscriptionName subscriptionName =\n+                    ProjectSubscriptionName.of(projectId, subscriptionId);\n+\n+            MessageReceiver handleMessage =\n+                    (PubsubMessage pubsubMessage, AckReplyConsumer ackReplyConsumer) -> {\n+                        String messageAttribute = pubsubMessage.getAttributesMap().get(\"DlpJobName\");\n+                        if (dlpJob.getName().equals(messageAttribute)) {\n+                            done.set(true);\n+                            ackReplyConsumer.ack();\n+                        } else {\n+                            ackReplyConsumer.nack();\n+                        }\n+                    };\n+            Subscriber subscriber = Subscriber.newBuilder(subscriptionName, handleMessage).build();\n+            subscriber.startAsync();\n+\n+            // Wait for job completion semi-synchronously\n+            // For long jobs, consider using a truly asynchronous execution model such as Cloud Functions\n+            try {\n+                done.get(1, TimeUnit.MINUTES);\n+                Thread.sleep(500); // Wait for the job to become available\n+            } catch (TimeoutException e) {\n+                System.out.println(\"Unable to verify job completion.\");\n+            }\n+\n+            // Retrieve completed job status\n+            DlpJob completedJob =\n+                    dlpServiceClient.getDlpJob(\n+                            GetDlpJobRequest.newBuilder()\n+                                    .setName(dlpJob.getName())\n+                                    .build());\n+            System.out.println(\"Job status: \" + completedJob.getState());\n+\n+            // Get the result and parse through and process the information\n+            KMapEstimationResult kmapResult  = completedJob.getRiskDetails().getKMapEstimationResult();\n+\n+            for (KMapEstimationHistogramBucket result : kmapResult.getKMapEstimationHistogramList()) {\n+\n+                System.out.printf(\n+                        \"\\tAnonymity range: [%d, %d]\\n\", result.getMinAnonymity(), result.getMaxAnonymity());\n+                System.out.printf(\"\\tSize: %d\\n\", result.getBucketSize());\n+\n+                for (KMapEstimationQuasiIdValues valueBucket : result.getBucketValuesList()) {\n+                    String quasiIdValues =\n+                            valueBucket\n+                                    .getQuasiIdsValuesList()\n+                                    .stream()\n+                                    .map(\n+                                            v -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "648db658112be9a895e6700fb99e7805deab33d0"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4Mzc4Nw==", "bodyText": "sensitiveAttribute, quasiIds inlined", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379683787", "createdAt": "2020-02-14T23:08:09Z", "author": {"login": "kurtisvg"}, "path": "dlp/src/main/java/dlp/snippets/RiskAnalysisLDiversity.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package dlp.snippets;\n+\n+// [START dlp_l_diversity]\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.api.core.SettableApiFuture;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.cloud.pubsub.v1.Subscriber;\n+import com.google.cloud.pubsub.v1.AckReplyConsumer;\n+import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.privacy.dlp.v2.Action;\n+import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket;\n+import com.google.privacy.dlp.v2.BigQueryTable;\n+import com.google.privacy.dlp.v2.CreateDlpJobRequest;\n+import com.google.privacy.dlp.v2.DlpJob;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.GetDlpJobRequest;\n+import com.google.privacy.dlp.v2.PrivacyMetric;\n+import com.google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.RiskAnalysisJobConfig;\n+import com.google.privacy.dlp.v2.Value;\n+import com.google.privacy.dlp.v2.ValueFrequency;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.ProjectTopicName;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+class RiskAnalysisLDiversity{\n+\n+    public static void calculateLDiversity() throws Exception {\n+        // TODO(developer): Replace these variables before running the sample.\n+        String projectId = \"your-project-id\";\n+        String datasetId = \"your-bigquery-dataset-id\";\n+        String tableId = \"your-bigquery-table-id\";\n+        String topicId = \"pub-sub-topic\";\n+        String subscriptionId = \"pub-sub-subscription\";\n+        String sensitiveAttrColumn = \"name\";\n+        List<String> quasiIdColumns = Arrays.asList(\"age\", \"gender\");\n+        calculateLDiversity(\n+                projectId, datasetId, tableId, topicId,\n+                subscriptionId, sensitiveAttrColumn, quasiIdColumns);\n+\n+    }\n+    public static void calculateLDiversity(\n+            String projectId,\n+            String datasetId,\n+            String tableId,\n+            String topicId,\n+            String subscriptionId,\n+            String sensitiveAttribute,\n+            List<String> quasiIds) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "648db658112be9a895e6700fb99e7805deab33d0"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4Mzg4NQ==", "bodyText": "Long lambda", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r379683885", "createdAt": "2020-02-14T23:08:31Z", "author": {"login": "kurtisvg"}, "path": "dlp/src/main/java/dlp/snippets/RiskAnalysisLDiversity.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package dlp.snippets;\n+\n+// [START dlp_l_diversity]\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.api.core.SettableApiFuture;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.cloud.pubsub.v1.Subscriber;\n+import com.google.cloud.pubsub.v1.AckReplyConsumer;\n+import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.privacy.dlp.v2.Action;\n+import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket;\n+import com.google.privacy.dlp.v2.BigQueryTable;\n+import com.google.privacy.dlp.v2.CreateDlpJobRequest;\n+import com.google.privacy.dlp.v2.DlpJob;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.GetDlpJobRequest;\n+import com.google.privacy.dlp.v2.PrivacyMetric;\n+import com.google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.RiskAnalysisJobConfig;\n+import com.google.privacy.dlp.v2.Value;\n+import com.google.privacy.dlp.v2.ValueFrequency;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.ProjectTopicName;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+class RiskAnalysisLDiversity{\n+\n+    public static void calculateLDiversity() throws Exception {\n+        // TODO(developer): Replace these variables before running the sample.\n+        String projectId = \"your-project-id\";\n+        String datasetId = \"your-bigquery-dataset-id\";\n+        String tableId = \"your-bigquery-table-id\";\n+        String topicId = \"pub-sub-topic\";\n+        String subscriptionId = \"pub-sub-subscription\";\n+        String sensitiveAttrColumn = \"name\";\n+        List<String> quasiIdColumns = Arrays.asList(\"age\", \"gender\");\n+        calculateLDiversity(\n+                projectId, datasetId, tableId, topicId,\n+                subscriptionId, sensitiveAttrColumn, quasiIdColumns);\n+\n+    }\n+    public static void calculateLDiversity(\n+            String projectId,\n+            String datasetId,\n+            String tableId,\n+            String topicId,\n+            String subscriptionId,\n+            String sensitiveAttribute,\n+            List<String> quasiIds) throws Exception {\n+\n+        // Initialize client that will be used to send requests. This client only needs to be created\n+        // once, and can be reused for multiple requests. After completing all of your requests, call\n+        // the \"close\" method on the client to safely clean up any remaining background resources.\n+        try (DlpServiceClient dlpServiceClient = DlpServiceClient.create()) {\n+            // Specify the BigQuery table to analyze\n+            BigQueryTable bigQueryTable =\n+                    BigQueryTable.newBuilder()\n+                            .setProjectId(projectId)\n+                            .setDatasetId(datasetId)\n+                            .setTableId(tableId)\n+                            .build();\n+\n+            // Configure the privacy metric for the job\n+            FieldId sensitiveAttributeField = FieldId.newBuilder().setName(sensitiveAttribute).build();\n+            List<FieldId> quasiIdFields =\n+                    quasiIds\n+                            .stream()\n+                            .map(columnName -> FieldId.newBuilder().setName(columnName).build())\n+                            .collect(Collectors.toList());\n+            LDiversityConfig ldiversityConfig =\n+                    LDiversityConfig.newBuilder()\n+                            .addAllQuasiIds(quasiIdFields)\n+                            .setSensitiveAttribute(sensitiveAttributeField)\n+                            .build();\n+            PrivacyMetric privacyMetric =\n+                    PrivacyMetric.newBuilder().setLDiversityConfig(ldiversityConfig).build();\n+\n+\n+\n+            // Create action to publish job status notifications over Google Cloud Pub/\n+            ProjectTopicName topicName = ProjectTopicName.of(projectId, topicId);\n+            PublishToPubSub publishToPubSub =\n+                    PublishToPubSub.newBuilder()\n+                            .setTopic(topicName.toString())\n+                            .build();\n+            Action action = Action.newBuilder().setPubSub(publishToPubSub).build();\n+\n+            // Configure the risk analysis job to perform\n+            RiskAnalysisJobConfig riskAnalysisJobConfig =\n+                    RiskAnalysisJobConfig.newBuilder()\n+                            .setSourceTable(bigQueryTable)\n+                            .setPrivacyMetric(privacyMetric)\n+                            .addActions(action)\n+                            .build();\n+\n+            // Build the request to be sent by the client\n+            CreateDlpJobRequest createDlpJobRequest =\n+                    CreateDlpJobRequest.newBuilder()\n+                            .setParent(ProjectName.of(projectId).toString())\n+                            .setRiskJob(riskAnalysisJobConfig)\n+                            .build();\n+\n+            // Send the request to the API using the client\n+            DlpJob dlpJob = dlpServiceClient.createDlpJob(createDlpJobRequest);\n+\n+            // Set up a Pub/Sub subscriber to listen on the job completion status\n+            final SettableApiFuture<Boolean> done = SettableApiFuture.create();\n+\n+            ProjectSubscriptionName subscriptionName =\n+                    ProjectSubscriptionName.of(projectId, subscriptionId);\n+\n+            MessageReceiver handleMessage =\n+                    (PubsubMessage pubsubMessage, AckReplyConsumer ackReplyConsumer) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "648db658112be9a895e6700fb99e7805deab33d0"}, "originalPosition": 137}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9d2733fb06ba3cd876e736eb36457d4e97cc4002", "author": {"user": {"login": "shubha-rajan", "name": "Shubha Rajan"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/9d2733fb06ba3cd876e736eb36457d4e97cc4002", "committedDate": "2020-02-15T05:06:50Z", "message": "resolve merge"}, "afterCommit": {"oid": "b8e00a5c9b89008fc37c6072008ef0782781ebef", "author": {"user": {"login": "shubha-rajan", "name": "Shubha Rajan"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/b8e00a5c9b89008fc37c6072008ef0782781ebef", "committedDate": "2020-02-15T04:42:11Z", "message": "moved message receiver lambda to its own method"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b8e00a5c9b89008fc37c6072008ef0782781ebef", "author": {"user": {"login": "shubha-rajan", "name": "Shubha Rajan"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/b8e00a5c9b89008fc37c6072008ef0782781ebef", "committedDate": "2020-02-15T04:42:11Z", "message": "moved message receiver lambda to its own method"}, "afterCommit": {"oid": "0df96fca02b6513ce6a8237424ab2af82f7d526e", "author": {"user": {"login": "shubha-rajan", "name": "Shubha Rajan"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/0df96fca02b6513ce6a8237424ab2af82f7d526e", "committedDate": "2020-02-15T05:25:17Z", "message": "moved message receiver lambda to its own method"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0df96fca02b6513ce6a8237424ab2af82f7d526e", "author": {"user": {"login": "shubha-rajan", "name": "Shubha Rajan"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/0df96fca02b6513ce6a8237424ab2af82f7d526e", "committedDate": "2020-02-15T05:25:17Z", "message": "moved message receiver lambda to its own method"}, "afterCommit": {"oid": "c634313db049ec2402588e612d8da5144154bddb", "author": {"user": {"login": "shubha-rajan", "name": "Shubha Rajan"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/c634313db049ec2402588e612d8da5144154bddb", "committedDate": "2020-02-15T06:18:12Z", "message": "moved message receiver lambda to its own method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17e26c7cd37c4c63511ed951903920830bf092d7", "author": {"user": {"login": "shubha-rajan", "name": "Shubha Rajan"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/17e26c7cd37c4c63511ed951903920830bf092d7", "committedDate": "2020-02-18T22:19:03Z", "message": "refactored Risk analysis samples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13e8e987fe876cbfefd0f9d3c7f1dcae0d7677c6", "author": {"user": {"login": "shubha-rajan", "name": "Shubha Rajan"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/13e8e987fe876cbfefd0f9d3c7f1dcae0d7677c6", "committedDate": "2020-02-18T22:19:03Z", "message": "updated inspect tests and readme"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1e063836fb01a9858d0e46a5e830755a66a55b1", "author": {"user": {"login": "shubha-rajan", "name": "Shubha Rajan"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/f1e063836fb01a9858d0e46a5e830755a66a55b1", "committedDate": "2020-02-18T22:19:04Z", "message": "moved parameters to inline, cleaned up files, reformatted for consistency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6d9ad3f3d2cd167f97c1e2f6695899f2026dd58", "author": {"user": {"login": "shubha-rajan", "name": "Shubha Rajan"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/f6d9ad3f3d2cd167f97c1e2f6695899f2026dd58", "committedDate": "2020-02-18T22:19:04Z", "message": "replaced iterators with intstream in RiskAnalysisKMap"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "065187d573f497ca47f8f4a37491e2b8af382213", "author": {"user": {"login": "shubha-rajan", "name": "Shubha Rajan"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/065187d573f497ca47f8f4a37491e2b8af382213", "committedDate": "2020-02-18T22:19:04Z", "message": "moved message receiver lambda to its own method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a063df3093b0551f6f2c92b8beaaa63fc97aaa5a", "author": {"user": {"login": "shubha-rajan", "name": "Shubha Rajan"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/a063df3093b0551f6f2c92b8beaaa63fc97aaa5a", "committedDate": "2020-02-18T22:19:04Z", "message": "ran code formatter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "673fec40b2f454d1c954b492516240dc65ec8ed2", "author": {"user": {"login": "shubha-rajan", "name": "Shubha Rajan"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/673fec40b2f454d1c954b492516240dc65ec8ed2", "committedDate": "2020-02-18T22:37:53Z", "message": "refactored long messageReciever lambda"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "92ea643434f01d864364af22b4703371f7956835", "author": {"user": {"login": "shubha-rajan", "name": "Shubha Rajan"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/92ea643434f01d864364af22b4703371f7956835", "committedDate": "2020-02-15T06:32:17Z", "message": "removed newline"}, "afterCommit": {"oid": "673fec40b2f454d1c954b492516240dc65ec8ed2", "author": {"user": {"login": "shubha-rajan", "name": "Shubha Rajan"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/673fec40b2f454d1c954b492516240dc65ec8ed2", "committedDate": "2020-02-18T22:37:53Z", "message": "refactored long messageReciever lambda"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0079aa316d1932443865f356684e01067f3064fc", "author": {"user": {"login": "shubha-rajan", "name": "Shubha Rajan"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/0079aa316d1932443865f356684e01067f3064fc", "committedDate": "2020-02-19T00:10:12Z", "message": "rewrote lambda for pubsub message receiver"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNzY5OTg1", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#pullrequestreview-360769985", "createdAt": "2020-02-19T00:30:53Z", "commit": {"oid": "0079aa316d1932443865f356684e01067f3064fc"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDozMDo1M1rOFrXUDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDo0MjowM1rOFrXfXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxNTA1NQ==", "bodyText": "nit: Does this need to be an ArrayList or can it be just a List?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r381015055", "createdAt": "2020-02-19T00:30:53Z", "author": {"login": "kurtisvg"}, "path": "dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+// [START dlp_k_map]\n+\n+import com.google.api.core.SettableApiFuture;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.cloud.pubsub.v1.AckReplyConsumer;\n+import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.cloud.pubsub.v1.Subscriber;\n+import com.google.privacy.dlp.v2.Action;\n+import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues;\n+import com.google.privacy.dlp.v2.BigQueryTable;\n+import com.google.privacy.dlp.v2.CreateDlpJobRequest;\n+import com.google.privacy.dlp.v2.DlpJob;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.GetDlpJobRequest;\n+import com.google.privacy.dlp.v2.InfoType;\n+import com.google.privacy.dlp.v2.PrivacyMetric;\n+import com.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig;\n+import com.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.RiskAnalysisJobConfig;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.ProjectTopicName;\n+import com.google.pubsub.v1.PubsubMessage;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+class RiskAnalysisKMap {\n+\n+  public static void calculateKMap() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"your-project-id\";\n+    String datasetId = \"your-bigquery-dataset-id\";\n+    String tableId = \"your-bigquery-table-id\";\n+    String topicId = \"pub-sub-topic\";\n+    String subscriptionId = \"pub-sub-subscription\";\n+    calculateKMap(projectId, datasetId, tableId, topicId, subscriptionId);\n+  }\n+\n+  public static void calculateKMap(\n+      String projectId, String datasetId, String tableId, String topicId, String subscriptionId)\n+      throws Exception {\n+\n+    // Initialize client that will be used to send requests. This client only needs to be created\n+    // once, and can be reused for multiple requests. After completing all of your requests, call\n+    // the \"close\" method on the client to safely clean up any remaining background resources.\n+    try (DlpServiceClient dlpServiceClient = DlpServiceClient.create()) {\n+      // Specify the BigQuery table to analyze\n+      BigQueryTable bigQueryTable =\n+          BigQueryTable.newBuilder()\n+              .setProjectId(projectId)\n+              .setDatasetId(datasetId)\n+              .setTableId(tableId)\n+              .build();\n+\n+      // These values represent the column names of quasi-identifiers to analyze\n+      List<String> quasiIds = Arrays.asList(\"Age\", \"Gender\");\n+\n+      // These values represent the info types corresponding to the quasi-identifiers above\n+      List<String> infoTypeNames = Arrays.asList(\"AGE\", \"GENDER\");\n+\n+      // Tag each of the quasiId column names with its corresponding infoType\n+      List<InfoType> infoTypes =\n+          infoTypeNames.stream()\n+              .map(it -> InfoType.newBuilder().setName(it).build())\n+              .collect(Collectors.toList());\n+\n+      if (quasiIds.size() != infoTypes.size()) {\n+        throw new IllegalArgumentException(\"The numbers of quasi-IDs and infoTypes must be equal!\");\n+      }\n+\n+      ArrayList<TaggedField> taggedFields =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0079aa316d1932443865f356684e01067f3064fc"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxNzk0OA==", "bodyText": "nit: This might just be a case where it is easier to read as a for loop.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#discussion_r381017948", "createdAt": "2020-02-19T00:42:03Z", "author": {"login": "kurtisvg"}, "path": "dlp/src/main/java/dlp/snippets/RiskAnalysisKMap.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+// [START dlp_k_map]\n+\n+import com.google.api.core.SettableApiFuture;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.cloud.pubsub.v1.AckReplyConsumer;\n+import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.cloud.pubsub.v1.Subscriber;\n+import com.google.privacy.dlp.v2.Action;\n+import com.google.privacy.dlp.v2.Action.PublishToPubSub;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket;\n+import com.google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues;\n+import com.google.privacy.dlp.v2.BigQueryTable;\n+import com.google.privacy.dlp.v2.CreateDlpJobRequest;\n+import com.google.privacy.dlp.v2.DlpJob;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.GetDlpJobRequest;\n+import com.google.privacy.dlp.v2.InfoType;\n+import com.google.privacy.dlp.v2.PrivacyMetric;\n+import com.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig;\n+import com.google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.RiskAnalysisJobConfig;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.ProjectTopicName;\n+import com.google.pubsub.v1.PubsubMessage;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+class RiskAnalysisKMap {\n+\n+  public static void calculateKMap() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"your-project-id\";\n+    String datasetId = \"your-bigquery-dataset-id\";\n+    String tableId = \"your-bigquery-table-id\";\n+    String topicId = \"pub-sub-topic\";\n+    String subscriptionId = \"pub-sub-subscription\";\n+    calculateKMap(projectId, datasetId, tableId, topicId, subscriptionId);\n+  }\n+\n+  public static void calculateKMap(\n+      String projectId, String datasetId, String tableId, String topicId, String subscriptionId)\n+      throws Exception {\n+\n+    // Initialize client that will be used to send requests. This client only needs to be created\n+    // once, and can be reused for multiple requests. After completing all of your requests, call\n+    // the \"close\" method on the client to safely clean up any remaining background resources.\n+    try (DlpServiceClient dlpServiceClient = DlpServiceClient.create()) {\n+      // Specify the BigQuery table to analyze\n+      BigQueryTable bigQueryTable =\n+          BigQueryTable.newBuilder()\n+              .setProjectId(projectId)\n+              .setDatasetId(datasetId)\n+              .setTableId(tableId)\n+              .build();\n+\n+      // These values represent the column names of quasi-identifiers to analyze\n+      List<String> quasiIds = Arrays.asList(\"Age\", \"Gender\");\n+\n+      // These values represent the info types corresponding to the quasi-identifiers above\n+      List<String> infoTypeNames = Arrays.asList(\"AGE\", \"GENDER\");\n+\n+      // Tag each of the quasiId column names with its corresponding infoType\n+      List<InfoType> infoTypes =\n+          infoTypeNames.stream()\n+              .map(it -> InfoType.newBuilder().setName(it).build())\n+              .collect(Collectors.toList());\n+\n+      if (quasiIds.size() != infoTypes.size()) {\n+        throw new IllegalArgumentException(\"The numbers of quasi-IDs and infoTypes must be equal!\");\n+      }\n+\n+      ArrayList<TaggedField> taggedFields =\n+          IntStream.range(0, quasiIds.size())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0079aa316d1932443865f356684e01067f3064fc"}, "originalPosition": 97}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e72a97019c372831d95490261476b474364a84f", "author": {"user": {"login": "shubha-rajan", "name": "Shubha Rajan"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/0e72a97019c372831d95490261476b474364a84f", "committedDate": "2020-02-19T05:38:00Z", "message": "replaced int stream with for loop"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNDQyMTY4", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2069#pullrequestreview-361442168", "createdAt": "2020-02-19T21:15:14Z", "commit": {"oid": "0e72a97019c372831d95490261476b474364a84f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 593, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}