{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwMDM5MTA0", "number": 3445, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNjoyNjo0M1rOEUHhrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNjoyNjo0M1rOEUHhrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTMwMjg3OnYy", "diffSide": "RIGHT", "path": "spanner/cloud-client/src/main/java/com/example/spanner/CustomTimeoutAndRetrySettingsExample.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNjoyNjo0M1rOG6OjCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxMzo1Njo1MVrOG6eJsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcwODkzNw==", "bodyText": "This just looks weird, it took me a while to understand what was going on.  I'm not sure how you fix it, but, I wonder if the .setProjectId(projectId) shouldn't be the first thing in this group, or, if you should do all the options on the SpannerOptions.Builder builder = line(s).", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3445#discussion_r463708937", "createdAt": "2020-07-31T16:26:43Z", "author": {"login": "lesv"}, "path": "spanner/cloud-client/src/main/java/com/example/spanner/CustomTimeoutAndRetrySettingsExample.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.spanner;\n+\n+//[START spanner_set_custom_timeout_and_retry]\n+import com.google.api.gax.retrying.RetrySettings;\n+import com.google.api.gax.rpc.StatusCode.Code;\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.Spanner;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.cloud.spanner.Statement;\n+import com.google.cloud.spanner.TransactionContext;\n+import com.google.cloud.spanner.TransactionRunner.TransactionCallable;\n+import org.threeten.bp.Duration;\n+\n+class CustomTimeoutAndRetrySettingsExample {\n+\n+  static void executeSqlWithCustomTimeoutAndRetrySettings() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"my-project\";\n+    String instanceId = \"my-instance\";\n+    String databaseId = \"my-database\";\n+\n+    executeSqlWithCustomTimeoutAndRetrySettings(projectId, instanceId, databaseId);\n+  }\n+\n+  // Create a Spanner client with custom ExecuteSql timeout and retry settings.\n+  static void executeSqlWithCustomTimeoutAndRetrySettings(\n+      String projectId, String instanceId, String databaseId) {\n+    SpannerOptions.Builder builder = SpannerOptions.newBuilder().setProjectId(projectId);\n+    // Set custom timeout and retry settings for the ExecuteSql RPC.\n+    builder\n+        .getSpannerStubSettingsBuilder()\n+        .executeSqlSettings()\n+        // Configure which errors should be retried.\n+        .setRetryableCodes(Code.DEADLINE_EXCEEDED, Code.UNAVAILABLE)\n+        .setRetrySettings(\n+            RetrySettings.newBuilder()\n+                // Configure retry delay settings.\n+                .setInitialRetryDelay(Duration.ofMillis(500))\n+                .setMaxRetryDelay(Duration.ofSeconds(64))\n+                .setRetryDelayMultiplier(1.5)\n+\n+                // Configure RPC and total timeout settings.\n+                .setInitialRpcTimeout(Duration.ofSeconds(60))\n+                .setMaxRpcTimeout(Duration.ofSeconds(60))\n+                .setRpcTimeoutMultiplier(1.0)\n+                .setTotalTimeout(Duration.ofSeconds(60))\n+                .build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55e7bd0d3a9c3acb6b83ed6f29bdf9d394b301d4"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk2NDU5NQ==", "bodyText": "The problem here is that the setRetryableCodes(..) and setRetrySettings(..) methods return a UnaryCallSettings.Builder instance, and not a SpannerOptions.Builder, and that cannot (easily) be changed as it is part of the generated gapic client. What we are really doing here is exposing a part of the generated gapic client (builder) for the end user to be able to specify timeout and retry settings. That means that it is not possible to create the SpannerOptions instance in one single chain when this option is used, but that it must have at least one separate chain that sets the custom retry and/or timeout settings.\nAdding the .setProjectId(projectId) to this group is possible, but I don't feel that it makes it more readable. I added a comment to clarify why the retry settings are set in a separate chain.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3445#discussion_r463964595", "createdAt": "2020-08-01T13:56:51Z", "author": {"login": "olavloite"}, "path": "spanner/cloud-client/src/main/java/com/example/spanner/CustomTimeoutAndRetrySettingsExample.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.spanner;\n+\n+//[START spanner_set_custom_timeout_and_retry]\n+import com.google.api.gax.retrying.RetrySettings;\n+import com.google.api.gax.rpc.StatusCode.Code;\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.Spanner;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.cloud.spanner.Statement;\n+import com.google.cloud.spanner.TransactionContext;\n+import com.google.cloud.spanner.TransactionRunner.TransactionCallable;\n+import org.threeten.bp.Duration;\n+\n+class CustomTimeoutAndRetrySettingsExample {\n+\n+  static void executeSqlWithCustomTimeoutAndRetrySettings() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"my-project\";\n+    String instanceId = \"my-instance\";\n+    String databaseId = \"my-database\";\n+\n+    executeSqlWithCustomTimeoutAndRetrySettings(projectId, instanceId, databaseId);\n+  }\n+\n+  // Create a Spanner client with custom ExecuteSql timeout and retry settings.\n+  static void executeSqlWithCustomTimeoutAndRetrySettings(\n+      String projectId, String instanceId, String databaseId) {\n+    SpannerOptions.Builder builder = SpannerOptions.newBuilder().setProjectId(projectId);\n+    // Set custom timeout and retry settings for the ExecuteSql RPC.\n+    builder\n+        .getSpannerStubSettingsBuilder()\n+        .executeSqlSettings()\n+        // Configure which errors should be retried.\n+        .setRetryableCodes(Code.DEADLINE_EXCEEDED, Code.UNAVAILABLE)\n+        .setRetrySettings(\n+            RetrySettings.newBuilder()\n+                // Configure retry delay settings.\n+                .setInitialRetryDelay(Duration.ofMillis(500))\n+                .setMaxRetryDelay(Duration.ofSeconds(64))\n+                .setRetryDelayMultiplier(1.5)\n+\n+                // Configure RPC and total timeout settings.\n+                .setInitialRpcTimeout(Duration.ofSeconds(60))\n+                .setMaxRpcTimeout(Duration.ofSeconds(60))\n+                .setRpcTimeoutMultiplier(1.0)\n+                .setTotalTimeout(Duration.ofSeconds(60))\n+                .build());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcwODkzNw=="}, "originalCommit": {"oid": "55e7bd0d3a9c3acb6b83ed6f29bdf9d394b301d4"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 796, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}