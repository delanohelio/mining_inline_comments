{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4Mjk2ODQ4", "number": 2559, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzo0NToyMFrODw0IKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzo1MTozMlrODw0OQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTEyMjk5OnYy", "diffSide": "RIGHT", "path": "spanner/jdbc/src/main/java/com/example/spanner/jdbc/CreateConnectionWithCustomHostExample.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzo0NToyMFrOGEBMog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwNzo0MDozNlrOGEfUNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg2NzEwNg==", "bodyText": "I'm sure there will be text explaining this in the docs, but a comment or two might be helpful here.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2559#discussion_r406867106", "createdAt": "2020-04-10T17:45:20Z", "author": {"login": "lesv"}, "path": "spanner/jdbc/src/main/java/com/example/spanner/jdbc/CreateConnectionWithCustomHostExample.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.spanner.jdbc;\n+\n+import com.google.cloud.spanner.jdbc.CloudSpannerJdbcConnection;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+\n+class CreateConnectionWithCustomHostExample {\n+\n+  static void createConnectionWithCustomHost() throws SQLException {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"my-project\";\n+    String instanceId = \"my-instance\";\n+    String databaseId = \"my-database\";\n+    int port = 9020;\n+    createConnectionWithCustomHost(projectId, instanceId, databaseId, port);\n+  }\n+\n+  @SuppressFBWarnings(\n+      value = \"OBL_UNSATISFIED_OBLIGATION\",\n+      justification = \"https://github.com/spotbugs/spotbugs/issues/293\")\n+  // Creates a JDBC connection to a Cloud Spanner database on a custom host.\n+  static void createConnectionWithCustomHost(\n+      String projectId, String instanceId, String databaseId, int port) throws SQLException {\n+    try (Connection connection =\n+        DriverManager.getConnection(\n+            String.format(\n+                \"jdbc:cloudspanner://localhost:%d/projects/%s/instances/%s/databases/%s\"\n+                    + \"?usePlainText=true\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab54a312b4dbe8dcc665b88b35327d5c6bc4a71d"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM2MDU2Ng==", "bodyText": "Good point, added a comment explaining the usePlainText property.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2559#discussion_r407360566", "createdAt": "2020-04-13T07:40:36Z", "author": {"login": "olavloite"}, "path": "spanner/jdbc/src/main/java/com/example/spanner/jdbc/CreateConnectionWithCustomHostExample.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.spanner.jdbc;\n+\n+import com.google.cloud.spanner.jdbc.CloudSpannerJdbcConnection;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+\n+class CreateConnectionWithCustomHostExample {\n+\n+  static void createConnectionWithCustomHost() throws SQLException {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"my-project\";\n+    String instanceId = \"my-instance\";\n+    String databaseId = \"my-database\";\n+    int port = 9020;\n+    createConnectionWithCustomHost(projectId, instanceId, databaseId, port);\n+  }\n+\n+  @SuppressFBWarnings(\n+      value = \"OBL_UNSATISFIED_OBLIGATION\",\n+      justification = \"https://github.com/spotbugs/spotbugs/issues/293\")\n+  // Creates a JDBC connection to a Cloud Spanner database on a custom host.\n+  static void createConnectionWithCustomHost(\n+      String projectId, String instanceId, String databaseId, int port) throws SQLException {\n+    try (Connection connection =\n+        DriverManager.getConnection(\n+            String.format(\n+                \"jdbc:cloudspanner://localhost:%d/projects/%s/instances/%s/databases/%s\"\n+                    + \"?usePlainText=true\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg2NzEwNg=="}, "originalCommit": {"oid": "ab54a312b4dbe8dcc665b88b35327d5c6bc4a71d"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTEzMjc0OnYy", "diffSide": "RIGHT", "path": "spanner/jdbc/src/main/java/com/example/spanner/jdbc/TransactionWithRetryLoopExample.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzo0OToyNlrOGEBSzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwNzozMTowNFrOGEfIZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg2ODY4Nw==", "bodyText": "It appears the assumption is that it will eventually succeed, that might not be true in all cases.  Or is it?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2559#discussion_r406868687", "createdAt": "2020-04-10T17:49:26Z", "author": {"login": "lesv"}, "path": "spanner/jdbc/src/main/java/com/example/spanner/jdbc/TransactionWithRetryLoopExample.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.spanner.jdbc;\n+\n+import com.google.cloud.spanner.Mutation;\n+import com.google.cloud.spanner.jdbc.CloudSpannerJdbcConnection;\n+import com.google.cloud.spanner.jdbc.JdbcSqlExceptionFactory.JdbcAbortedException;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+\n+class TransactionWithRetryLoopExample {\n+\n+  static void transactionWithRetryLoop() throws SQLException {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"my-project\";\n+    String instanceId = \"my-instance\";\n+    String databaseId = \"my-database\";\n+    transactionWithRetryLoop(projectId, instanceId, databaseId);\n+  }\n+\n+  static void transactionWithRetryLoop(String projectId, String instanceId, String databaseId)\n+      throws SQLException {\n+    // Create a connection that has automatic retry for aborted transactions disabled.\n+    String connectionUrl =\n+        String.format(\n+            \"jdbc:cloudspanner:/projects/%s/instances/%s/databases/%s\"\n+                + \";retryAbortsInternally=false\",\n+            projectId, instanceId, databaseId);\n+    long singerId = 31;\n+    long albumId = 11;\n+    try (Connection connection = DriverManager.getConnection(connectionUrl)) {\n+      while (true) {\n+        try {\n+          CloudSpannerJdbcConnection spannerConnection =\n+              connection.unwrap(CloudSpannerJdbcConnection.class);\n+          spannerConnection.setAutoCommit(false);\n+          Mutation mutationSingers =\n+              Mutation.newInsertBuilder(\"Singers\")\n+                  .set(\"SingerId\")\n+                  .to(singerId)\n+                  .set(\"FirstName\")\n+                  .to(\"Breanna\")\n+                  .set(\"LastName\")\n+                  .to(\"Fountain\")\n+                  .build();\n+          Mutation mutationAlbums =\n+              Mutation.newInsertBuilder(\"Albums\")\n+                  .set(\"SingerId\")\n+                  .to(singerId)\n+                  .set(\"AlbumId\")\n+                  .to(albumId)\n+                  .set(\"AlbumTitle\")\n+                  .to(\"No discounts\")\n+                  .set(\"MarketingBudget\")\n+                  .to(1000)\n+                  .build();\n+          spannerConnection.bufferedWrite(Arrays.asList(mutationSingers, mutationAlbums));\n+          spannerConnection.commit();\n+          System.out.printf(\n+              \"Transaction committed at [%s]%n\", spannerConnection.getCommitTimestamp().toString());\n+          break;\n+        } catch (JdbcAbortedException e) {\n+          // Transaction aborted, retry.\n+          System.out.println(\"Transaction aborted, starting retry\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab54a312b4dbe8dcc665b88b35327d5c6bc4a71d"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM1NzU0Mw==", "bodyText": "It will always eventually succeed, or fail with a different error than Aborted. The JDBC transactions use a Spanner TransactionManager under the hood, which should be used with a loop like this:\nhttps://github.com/googleapis/java-spanner/blob/c8be7b5d43c01f6170eb02c6e8cc146cb2597ecc/google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseClient.java#L252-L279", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2559#discussion_r407357543", "createdAt": "2020-04-13T07:31:04Z", "author": {"login": "olavloite"}, "path": "spanner/jdbc/src/main/java/com/example/spanner/jdbc/TransactionWithRetryLoopExample.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.spanner.jdbc;\n+\n+import com.google.cloud.spanner.Mutation;\n+import com.google.cloud.spanner.jdbc.CloudSpannerJdbcConnection;\n+import com.google.cloud.spanner.jdbc.JdbcSqlExceptionFactory.JdbcAbortedException;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+\n+class TransactionWithRetryLoopExample {\n+\n+  static void transactionWithRetryLoop() throws SQLException {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"my-project\";\n+    String instanceId = \"my-instance\";\n+    String databaseId = \"my-database\";\n+    transactionWithRetryLoop(projectId, instanceId, databaseId);\n+  }\n+\n+  static void transactionWithRetryLoop(String projectId, String instanceId, String databaseId)\n+      throws SQLException {\n+    // Create a connection that has automatic retry for aborted transactions disabled.\n+    String connectionUrl =\n+        String.format(\n+            \"jdbc:cloudspanner:/projects/%s/instances/%s/databases/%s\"\n+                + \";retryAbortsInternally=false\",\n+            projectId, instanceId, databaseId);\n+    long singerId = 31;\n+    long albumId = 11;\n+    try (Connection connection = DriverManager.getConnection(connectionUrl)) {\n+      while (true) {\n+        try {\n+          CloudSpannerJdbcConnection spannerConnection =\n+              connection.unwrap(CloudSpannerJdbcConnection.class);\n+          spannerConnection.setAutoCommit(false);\n+          Mutation mutationSingers =\n+              Mutation.newInsertBuilder(\"Singers\")\n+                  .set(\"SingerId\")\n+                  .to(singerId)\n+                  .set(\"FirstName\")\n+                  .to(\"Breanna\")\n+                  .set(\"LastName\")\n+                  .to(\"Fountain\")\n+                  .build();\n+          Mutation mutationAlbums =\n+              Mutation.newInsertBuilder(\"Albums\")\n+                  .set(\"SingerId\")\n+                  .to(singerId)\n+                  .set(\"AlbumId\")\n+                  .to(albumId)\n+                  .set(\"AlbumTitle\")\n+                  .to(\"No discounts\")\n+                  .set(\"MarketingBudget\")\n+                  .to(1000)\n+                  .build();\n+          spannerConnection.bufferedWrite(Arrays.asList(mutationSingers, mutationAlbums));\n+          spannerConnection.commit();\n+          System.out.printf(\n+              \"Transaction committed at [%s]%n\", spannerConnection.getCommitTimestamp().toString());\n+          break;\n+        } catch (JdbcAbortedException e) {\n+          // Transaction aborted, retry.\n+          System.out.println(\"Transaction aborted, starting retry\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg2ODY4Nw=="}, "originalCommit": {"oid": "ab54a312b4dbe8dcc665b88b35327d5c6bc4a71d"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTEzODU4OnYy", "diffSide": "RIGHT", "path": "spanner/jdbc/src/main/java/com/example/spanner/jdbc/TransactionWithRetryLoopUsingOnlyJdbcExample.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzo1MTozMlrOGEBWWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwNzozMjoxNFrOGEfJvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg2OTU5NA==", "bodyText": "I really like this, but I wonder again if an infinite loop is possible here?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2559#discussion_r406869594", "createdAt": "2020-04-10T17:51:32Z", "author": {"login": "lesv"}, "path": "spanner/jdbc/src/main/java/com/example/spanner/jdbc/TransactionWithRetryLoopUsingOnlyJdbcExample.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.spanner.jdbc;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.grpc.Status.Code;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+class TransactionWithRetryLoopUsingOnlyJdbcExample {\n+\n+  static void genericJdbcTransactionWithRetryLoop() throws SQLException {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"my-project\";\n+    String instanceId = \"my-instance\";\n+    String databaseId = \"my-database\";\n+    genericJdbcTransactionWithRetryLoop(projectId, instanceId, databaseId);\n+  }\n+\n+  @SuppressFBWarnings(value = \"SIL_SQL_IN_LOOP\")\n+  static void genericJdbcTransactionWithRetryLoop(\n+      String projectId, String instanceId, String databaseId) throws SQLException {\n+    // Create a connection that has automatic retry for aborted transactions disabled.\n+    String connectionUrl =\n+        String.format(\n+            \"jdbc:cloudspanner:/projects/%s/instances/%s/databases/%s\"\n+                + \";retryAbortsInternally=false\",\n+            projectId, instanceId, databaseId);\n+    long singerId = 32;\n+    try (Connection connection = DriverManager.getConnection(connectionUrl)) {\n+      while (true) {\n+        try {\n+          connection.setAutoCommit(false);\n+          try (PreparedStatement ps =\n+              connection.prepareStatement(\n+                  \"INSERT INTO Singers (SingerId, FirstName, LastName) VALUES (?, ?, ?)\")) {\n+            ps.setLong(1, singerId);\n+            ps.setString(2, \"Marsha\");\n+            ps.setString(3, \"Roberts\");\n+            ps.executeUpdate();\n+          }\n+          connection.commit();\n+          try (Statement statement = connection.createStatement();\n+              ResultSet rs = statement.executeQuery(\"SHOW VARIABLE COMMIT_TIMESTAMP\")) {\n+            if (rs.next()) {\n+              System.out.printf(\n+                  \"Transaction committed at [%s]%n\",\n+                  rs.getTimestamp(\"COMMIT_TIMESTAMP\").toString());\n+            }\n+          }\n+          break;\n+        } catch (SQLException e) {\n+          if (e.getErrorCode() == Code.ABORTED.value()) {\n+            // Transaction aborted, retry.\n+            System.out.println(\"Transaction aborted, starting retry\");\n+          } else {\n+            throw e;\n+          }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab54a312b4dbe8dcc665b88b35327d5c6bc4a71d"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM1Nzg4NQ==", "bodyText": "This will also always eventually succeed or fail with a different error code than Aborted.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2559#discussion_r407357885", "createdAt": "2020-04-13T07:32:14Z", "author": {"login": "olavloite"}, "path": "spanner/jdbc/src/main/java/com/example/spanner/jdbc/TransactionWithRetryLoopUsingOnlyJdbcExample.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.spanner.jdbc;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.grpc.Status.Code;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+class TransactionWithRetryLoopUsingOnlyJdbcExample {\n+\n+  static void genericJdbcTransactionWithRetryLoop() throws SQLException {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"my-project\";\n+    String instanceId = \"my-instance\";\n+    String databaseId = \"my-database\";\n+    genericJdbcTransactionWithRetryLoop(projectId, instanceId, databaseId);\n+  }\n+\n+  @SuppressFBWarnings(value = \"SIL_SQL_IN_LOOP\")\n+  static void genericJdbcTransactionWithRetryLoop(\n+      String projectId, String instanceId, String databaseId) throws SQLException {\n+    // Create a connection that has automatic retry for aborted transactions disabled.\n+    String connectionUrl =\n+        String.format(\n+            \"jdbc:cloudspanner:/projects/%s/instances/%s/databases/%s\"\n+                + \";retryAbortsInternally=false\",\n+            projectId, instanceId, databaseId);\n+    long singerId = 32;\n+    try (Connection connection = DriverManager.getConnection(connectionUrl)) {\n+      while (true) {\n+        try {\n+          connection.setAutoCommit(false);\n+          try (PreparedStatement ps =\n+              connection.prepareStatement(\n+                  \"INSERT INTO Singers (SingerId, FirstName, LastName) VALUES (?, ?, ?)\")) {\n+            ps.setLong(1, singerId);\n+            ps.setString(2, \"Marsha\");\n+            ps.setString(3, \"Roberts\");\n+            ps.executeUpdate();\n+          }\n+          connection.commit();\n+          try (Statement statement = connection.createStatement();\n+              ResultSet rs = statement.executeQuery(\"SHOW VARIABLE COMMIT_TIMESTAMP\")) {\n+            if (rs.next()) {\n+              System.out.printf(\n+                  \"Transaction committed at [%s]%n\",\n+                  rs.getTimestamp(\"COMMIT_TIMESTAMP\").toString());\n+            }\n+          }\n+          break;\n+        } catch (SQLException e) {\n+          if (e.getErrorCode() == Code.ABORTED.value()) {\n+            // Transaction aborted, retry.\n+            System.out.println(\"Transaction aborted, starting retry\");\n+          } else {\n+            throw e;\n+          }\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg2OTU5NA=="}, "originalCommit": {"oid": "ab54a312b4dbe8dcc665b88b35327d5c6bc4a71d"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 964, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}