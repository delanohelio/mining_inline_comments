{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NzQ5NzA3", "number": 3020, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxODozNTozN1rOEB37IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxODozOTozNlrOEB4AGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDAwMjg4OnYy", "diffSide": "RIGHT", "path": "dlp/src/main/java/dlp/snippets/InspectStringWithExclusionDict.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxODozNTozN1rOGd_IvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxODo1OTo1MVrOGd_8Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA5NjMxNg==", "bodyText": "For new files, use current year, 2020", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3020#discussion_r434096316", "createdAt": "2020-06-02T18:35:37Z", "author": {"login": "gguuss"}, "path": "dlp/src/main/java/dlp/snippets/InspectStringWithExclusionDict.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2019 Google LLC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "093963aec2904b7331d711baf35bca92ed1ab614"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEwOTUwMw==", "bodyText": "Fixed", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3020#discussion_r434109503", "createdAt": "2020-06-02T18:59:51Z", "author": {"login": "sushicw"}, "path": "dlp/src/main/java/dlp/snippets/InspectStringWithExclusionDict.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2019 Google LLC", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA5NjMxNg=="}, "originalCommit": {"oid": "093963aec2904b7331d711baf35bca92ed1ab614"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDAwNTI2OnYy", "diffSide": "RIGHT", "path": "dlp/src/main/java/dlp/snippets/InspectStringWithExclusionDict.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxODozNjowOVrOGd_KFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTowMDozMFrOGd_9qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA5NjY2Mg==", "bodyText": "Probably should remove before committing this", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3020#discussion_r434096662", "createdAt": "2020-06-02T18:36:09Z", "author": {"login": "gguuss"}, "path": "dlp/src/main/java/dlp/snippets/InspectStringWithExclusionDict.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2019 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+// [START dlp_inspect_string_with_exclusion_dict]\n+\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ByteContentItem;\n+import com.google.privacy.dlp.v2.ByteContentItem.BytesType;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.CustomInfoType.Dictionary;\n+import com.google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList;\n+import com.google.privacy.dlp.v2.ExclusionRule;\n+import com.google.privacy.dlp.v2.Finding;\n+import com.google.privacy.dlp.v2.InfoType;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.InspectContentRequest;\n+import com.google.privacy.dlp.v2.InspectContentResponse;\n+import com.google.privacy.dlp.v2.InspectionRule;\n+import com.google.privacy.dlp.v2.InspectionRuleSet;\n+import com.google.privacy.dlp.v2.MatchingType;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.protobuf.ByteString;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class InspectStringWithExclusionDict {\n+\n+  // TODO: Delete me, only for testing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "093963aec2904b7331d711baf35bca92ed1ab614"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEwOTg2NQ==", "bodyText": "Fixed", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3020#discussion_r434109865", "createdAt": "2020-06-02T19:00:30Z", "author": {"login": "sushicw"}, "path": "dlp/src/main/java/dlp/snippets/InspectStringWithExclusionDict.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2019 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+// [START dlp_inspect_string_with_exclusion_dict]\n+\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ByteContentItem;\n+import com.google.privacy.dlp.v2.ByteContentItem.BytesType;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.CustomInfoType.Dictionary;\n+import com.google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList;\n+import com.google.privacy.dlp.v2.ExclusionRule;\n+import com.google.privacy.dlp.v2.Finding;\n+import com.google.privacy.dlp.v2.InfoType;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.InspectContentRequest;\n+import com.google.privacy.dlp.v2.InspectContentResponse;\n+import com.google.privacy.dlp.v2.InspectionRule;\n+import com.google.privacy.dlp.v2.InspectionRuleSet;\n+import com.google.privacy.dlp.v2.MatchingType;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.protobuf.ByteString;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class InspectStringWithExclusionDict {\n+\n+  // TODO: Delete me, only for testing", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA5NjY2Mg=="}, "originalCommit": {"oid": "093963aec2904b7331d711baf35bca92ed1ab614"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDAwOTA5OnYy", "diffSide": "RIGHT", "path": "dlp/src/main/java/dlp/snippets/InspectStringWithExclusionDict.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxODozNzoyNVrOGd_Mtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTowOToyNVrOGeASAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA5NzMzNQ==", "bodyText": "I'd replace line 76 with just the reference to the info types", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3020#discussion_r434097335", "createdAt": "2020-06-02T18:37:25Z", "author": {"login": "gguuss"}, "path": "dlp/src/main/java/dlp/snippets/InspectStringWithExclusionDict.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2019 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+// [START dlp_inspect_string_with_exclusion_dict]\n+\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ByteContentItem;\n+import com.google.privacy.dlp.v2.ByteContentItem.BytesType;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.CustomInfoType.Dictionary;\n+import com.google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList;\n+import com.google.privacy.dlp.v2.ExclusionRule;\n+import com.google.privacy.dlp.v2.Finding;\n+import com.google.privacy.dlp.v2.InfoType;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.InspectContentRequest;\n+import com.google.privacy.dlp.v2.InspectContentResponse;\n+import com.google.privacy.dlp.v2.InspectionRule;\n+import com.google.privacy.dlp.v2.InspectionRuleSet;\n+import com.google.privacy.dlp.v2.MatchingType;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.protobuf.ByteString;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class InspectStringWithExclusionDict {\n+\n+  // TODO: Delete me, only for testing\n+  public static void main(String[] args) {\n+    String projectId = \"crwilson-dlp-experimental\";\n+    inspectStringWithExclusionDict(projectId, args[0], Arrays.asList(args[1]));\n+  }\n+\n+  public static void inspectStringWithExclusionDict() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"your-project-id\";\n+    String textToInspect = \"Some email addresses: gary@example.com, example@example.com\";\n+    List<String> excludedMatchList = Arrays.asList(\"example@example.com\");\n+    inspectStringWithExclusionDict(projectId, textToInspect, excludedMatchList);\n+  }\n+\n+  // Inspects the provided text, avoiding matches specified in the exclusion list.\n+  public static void inspectStringWithExclusionDict(String projectId, String textToInspect,\n+      List<String> excludedMatchList) {\n+    // Initialize client that will be used to send requests. This client only needs to be created\n+    // once, and can be reused for multiple requests. After completing all of your requests, call\n+    // the \"close\" method on the client to safely clean up any remaining background resources.\n+    try (DlpServiceClient dlp = DlpServiceClient.create()) {\n+      // Specify the project used for request.\n+      ProjectName project = ProjectName.of(projectId);\n+\n+      // Specify the type and content to be inspected.\n+      ByteContentItem byteItem =\n+          ByteContentItem.newBuilder()\n+              .setType(BytesType.TEXT_UTF8)\n+              .setData(ByteString.copyFromUtf8(textToInspect))\n+              .build();\n+      ContentItem item = ContentItem.newBuilder().setByteItem(byteItem).build();\n+\n+      // Specify the type of info the inspection will look for.\n+      List<InfoType> infoTypes = new ArrayList<>();\n+      // See https://cloud.google.com/dlp/docs/infotypes-reference for complete list of info types.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "093963aec2904b7331d711baf35bca92ed1ab614"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDExNTA3Mg==", "bodyText": "As clarified offline, moved the comment slightly.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3020#discussion_r434115072", "createdAt": "2020-06-02T19:09:25Z", "author": {"login": "sushicw"}, "path": "dlp/src/main/java/dlp/snippets/InspectStringWithExclusionDict.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2019 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+// [START dlp_inspect_string_with_exclusion_dict]\n+\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ByteContentItem;\n+import com.google.privacy.dlp.v2.ByteContentItem.BytesType;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.CustomInfoType.Dictionary;\n+import com.google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList;\n+import com.google.privacy.dlp.v2.ExclusionRule;\n+import com.google.privacy.dlp.v2.Finding;\n+import com.google.privacy.dlp.v2.InfoType;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.InspectContentRequest;\n+import com.google.privacy.dlp.v2.InspectContentResponse;\n+import com.google.privacy.dlp.v2.InspectionRule;\n+import com.google.privacy.dlp.v2.InspectionRuleSet;\n+import com.google.privacy.dlp.v2.MatchingType;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.protobuf.ByteString;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class InspectStringWithExclusionDict {\n+\n+  // TODO: Delete me, only for testing\n+  public static void main(String[] args) {\n+    String projectId = \"crwilson-dlp-experimental\";\n+    inspectStringWithExclusionDict(projectId, args[0], Arrays.asList(args[1]));\n+  }\n+\n+  public static void inspectStringWithExclusionDict() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"your-project-id\";\n+    String textToInspect = \"Some email addresses: gary@example.com, example@example.com\";\n+    List<String> excludedMatchList = Arrays.asList(\"example@example.com\");\n+    inspectStringWithExclusionDict(projectId, textToInspect, excludedMatchList);\n+  }\n+\n+  // Inspects the provided text, avoiding matches specified in the exclusion list.\n+  public static void inspectStringWithExclusionDict(String projectId, String textToInspect,\n+      List<String> excludedMatchList) {\n+    // Initialize client that will be used to send requests. This client only needs to be created\n+    // once, and can be reused for multiple requests. After completing all of your requests, call\n+    // the \"close\" method on the client to safely clean up any remaining background resources.\n+    try (DlpServiceClient dlp = DlpServiceClient.create()) {\n+      // Specify the project used for request.\n+      ProjectName project = ProjectName.of(projectId);\n+\n+      // Specify the type and content to be inspected.\n+      ByteContentItem byteItem =\n+          ByteContentItem.newBuilder()\n+              .setType(BytesType.TEXT_UTF8)\n+              .setData(ByteString.copyFromUtf8(textToInspect))\n+              .build();\n+      ContentItem item = ContentItem.newBuilder().setByteItem(byteItem).build();\n+\n+      // Specify the type of info the inspection will look for.\n+      List<InfoType> infoTypes = new ArrayList<>();\n+      // See https://cloud.google.com/dlp/docs/infotypes-reference for complete list of info types.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA5NzMzNQ=="}, "originalCommit": {"oid": "093963aec2904b7331d711baf35bca92ed1ab614"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDAxNTYzOnYy", "diffSide": "RIGHT", "path": "dlp/src/main/java/dlp/snippets/InspectStringWithExclusionDict.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxODozOTozNlrOGd_RQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTowNjoyNFrOGeAK4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA5ODQ5OQ==", "bodyText": "Drop the repetition of the type, more effective to comment what the code is doing:\n// Exclude matches from the specified excludedMatchList.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3020#discussion_r434098499", "createdAt": "2020-06-02T18:39:36Z", "author": {"login": "gguuss"}, "path": "dlp/src/main/java/dlp/snippets/InspectStringWithExclusionDict.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2019 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+// [START dlp_inspect_string_with_exclusion_dict]\n+\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ByteContentItem;\n+import com.google.privacy.dlp.v2.ByteContentItem.BytesType;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.CustomInfoType.Dictionary;\n+import com.google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList;\n+import com.google.privacy.dlp.v2.ExclusionRule;\n+import com.google.privacy.dlp.v2.Finding;\n+import com.google.privacy.dlp.v2.InfoType;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.InspectContentRequest;\n+import com.google.privacy.dlp.v2.InspectContentResponse;\n+import com.google.privacy.dlp.v2.InspectionRule;\n+import com.google.privacy.dlp.v2.InspectionRuleSet;\n+import com.google.privacy.dlp.v2.MatchingType;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.protobuf.ByteString;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class InspectStringWithExclusionDict {\n+\n+  // TODO: Delete me, only for testing\n+  public static void main(String[] args) {\n+    String projectId = \"crwilson-dlp-experimental\";\n+    inspectStringWithExclusionDict(projectId, args[0], Arrays.asList(args[1]));\n+  }\n+\n+  public static void inspectStringWithExclusionDict() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"your-project-id\";\n+    String textToInspect = \"Some email addresses: gary@example.com, example@example.com\";\n+    List<String> excludedMatchList = Arrays.asList(\"example@example.com\");\n+    inspectStringWithExclusionDict(projectId, textToInspect, excludedMatchList);\n+  }\n+\n+  // Inspects the provided text, avoiding matches specified in the exclusion list.\n+  public static void inspectStringWithExclusionDict(String projectId, String textToInspect,\n+      List<String> excludedMatchList) {\n+    // Initialize client that will be used to send requests. This client only needs to be created\n+    // once, and can be reused for multiple requests. After completing all of your requests, call\n+    // the \"close\" method on the client to safely clean up any remaining background resources.\n+    try (DlpServiceClient dlp = DlpServiceClient.create()) {\n+      // Specify the project used for request.\n+      ProjectName project = ProjectName.of(projectId);\n+\n+      // Specify the type and content to be inspected.\n+      ByteContentItem byteItem =\n+          ByteContentItem.newBuilder()\n+              .setType(BytesType.TEXT_UTF8)\n+              .setData(ByteString.copyFromUtf8(textToInspect))\n+              .build();\n+      ContentItem item = ContentItem.newBuilder().setByteItem(byteItem).build();\n+\n+      // Specify the type of info the inspection will look for.\n+      List<InfoType> infoTypes = new ArrayList<>();\n+      // See https://cloud.google.com/dlp/docs/infotypes-reference for complete list of info types.\n+      for (String typeName : new String[]{\"PHONE_NUMBER\", \"EMAIL_ADDRESS\", \"CREDIT_CARD_NUMBER\"}) {\n+        infoTypes.add(InfoType.newBuilder().setName(typeName).build());\n+      }\n+\n+      // Construct an exclusion rule that will exclude matches from the specified excludedMatchList.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "093963aec2904b7331d711baf35bca92ed1ab614"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDExMzI1MQ==", "bodyText": "Done", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3020#discussion_r434113251", "createdAt": "2020-06-02T19:06:24Z", "author": {"login": "sushicw"}, "path": "dlp/src/main/java/dlp/snippets/InspectStringWithExclusionDict.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2019 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+// [START dlp_inspect_string_with_exclusion_dict]\n+\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ByteContentItem;\n+import com.google.privacy.dlp.v2.ByteContentItem.BytesType;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.CustomInfoType.Dictionary;\n+import com.google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList;\n+import com.google.privacy.dlp.v2.ExclusionRule;\n+import com.google.privacy.dlp.v2.Finding;\n+import com.google.privacy.dlp.v2.InfoType;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.InspectContentRequest;\n+import com.google.privacy.dlp.v2.InspectContentResponse;\n+import com.google.privacy.dlp.v2.InspectionRule;\n+import com.google.privacy.dlp.v2.InspectionRuleSet;\n+import com.google.privacy.dlp.v2.MatchingType;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.protobuf.ByteString;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class InspectStringWithExclusionDict {\n+\n+  // TODO: Delete me, only for testing\n+  public static void main(String[] args) {\n+    String projectId = \"crwilson-dlp-experimental\";\n+    inspectStringWithExclusionDict(projectId, args[0], Arrays.asList(args[1]));\n+  }\n+\n+  public static void inspectStringWithExclusionDict() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"your-project-id\";\n+    String textToInspect = \"Some email addresses: gary@example.com, example@example.com\";\n+    List<String> excludedMatchList = Arrays.asList(\"example@example.com\");\n+    inspectStringWithExclusionDict(projectId, textToInspect, excludedMatchList);\n+  }\n+\n+  // Inspects the provided text, avoiding matches specified in the exclusion list.\n+  public static void inspectStringWithExclusionDict(String projectId, String textToInspect,\n+      List<String> excludedMatchList) {\n+    // Initialize client that will be used to send requests. This client only needs to be created\n+    // once, and can be reused for multiple requests. After completing all of your requests, call\n+    // the \"close\" method on the client to safely clean up any remaining background resources.\n+    try (DlpServiceClient dlp = DlpServiceClient.create()) {\n+      // Specify the project used for request.\n+      ProjectName project = ProjectName.of(projectId);\n+\n+      // Specify the type and content to be inspected.\n+      ByteContentItem byteItem =\n+          ByteContentItem.newBuilder()\n+              .setType(BytesType.TEXT_UTF8)\n+              .setData(ByteString.copyFromUtf8(textToInspect))\n+              .build();\n+      ContentItem item = ContentItem.newBuilder().setByteItem(byteItem).build();\n+\n+      // Specify the type of info the inspection will look for.\n+      List<InfoType> infoTypes = new ArrayList<>();\n+      // See https://cloud.google.com/dlp/docs/infotypes-reference for complete list of info types.\n+      for (String typeName : new String[]{\"PHONE_NUMBER\", \"EMAIL_ADDRESS\", \"CREDIT_CARD_NUMBER\"}) {\n+        infoTypes.add(InfoType.newBuilder().setName(typeName).build());\n+      }\n+\n+      // Construct an exclusion rule that will exclude matches from the specified excludedMatchList.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA5ODQ5OQ=="}, "originalCommit": {"oid": "093963aec2904b7331d711baf35bca92ed1ab614"}, "originalPosition": 83}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 647, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}