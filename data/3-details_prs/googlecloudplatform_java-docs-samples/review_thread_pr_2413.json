{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5MDcwNTI3", "number": 2413, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMToyNjoyMFrODogbZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOTozMjoyOFrODqhm_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODAwOTM1OnYy", "diffSide": "RIGHT", "path": "functions/snippets/src/test/java/com/example/functions/SnippetsTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMToyNjoyMFrOF3GT3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMToyNjoyMFrOF3GT3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMxOTM5MA==", "bodyText": "If this wasn't in a test, I'd be unhappy as it's assuming a lot.  Ok here, however.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2413#discussion_r393319390", "createdAt": "2020-03-16T21:26:20Z", "author": {"login": "lesv"}, "path": "functions/snippets/src/test/java/com/example/functions/SnippetsTests.java", "diffHunk": "@@ -293,6 +288,75 @@ public void helloHttp_bodyParamsPost() throws IOException {\n     assertThat(responseOut.toString()).isEqualTo(\"Hello Jane!\");\n   }\n \n+  @Test(expected = RuntimeException.class)\n+  public void retryPubsub_handlesRetryMsg() throws IOException {\n+    PubSubMessage pubsubMessage = new PubSubMessage();\n+    pubsubMessage.setData(\"{\\\"retry\\\": true}\");\n+\n+    new RetryPubSub().accept(pubsubMessage, null);\n+\n+    String logMessage = logHandler.getStoredLogRecords().get(0).getMessage();\n+  }\n+\n+  @Test\n+  public void retryPubsub_handlesStopMsg() throws IOException {\n+    PubSubMessage pubsubMessage = new PubSubMessage();\n+    pubsubMessage.setData(\"{\\\"retry\\\": false}\");\n+\n+    new RetryPubSub().accept(pubsubMessage, null);\n+\n+    String logMessage = logHandler.getStoredLogRecords().get(0).getMessage();\n+    assertThat(\"Not retrying...\").isEqualTo(logMessage);\n+  }\n+\n+  @Test\n+  public void retryPubsub_handlesEmptyMsg() throws IOException {\n+    new RetryPubSub().accept(new PubSubMessage(), null);\n+\n+    String logMessage = logHandler.getStoredLogRecords().get(0).getMessage();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24ffac43784dbc3defbb19d023a0029448c1a0c1"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTA4NTgyOnYy", "diffSide": "RIGHT", "path": "functions/snippets/src/main/java/com/example/functions/InfiniteRetryPubSub.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNTozODozNlrOF40TMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNTozODozNlrOF40TMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEyMTQ1Ng==", "bodyText": "nit: Can you import com.example.functions.PubSubMessage so this can be cleaner?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2413#discussion_r395121456", "createdAt": "2020-03-19T15:38:36Z", "author": {"login": "averikitsch"}, "path": "functions/snippets/src/main/java/com/example/functions/InfiniteRetryPubSub.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_tips_infinite_retries]\n+import com.google.api.client.util.DateTime;\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+public class InfiniteRetryPubSub implements BackgroundFunction<PubSubMessage> {\n+  private static final Logger LOGGER = Logger.getLogger(InfiniteRetryPubSub.class.getName());\n+  private static final long MAX_EVENT_AGE = 10_000;\n+\n+  // Use Gson (https://github.com/google/gson) to parse JSON content.\n+  private Gson gsonParser = new Gson();\n+\n+  /**\n+   * Background Cloud Function that only executes within\n+   * a certain time period after the triggering event\n+   */\n+  @Override\n+  public void accept(com.example.functions.PubSubMessage message, Context context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24ffac43784dbc3defbb19d023a0029448c1a0c1"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTA4NzM5OnYy", "diffSide": "RIGHT", "path": "functions/snippets/src/main/java/com/example/functions/InfiniteRetryPubSub.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNTozODo1OFrOF40UHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNTozODo1OFrOF40UHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEyMTY5Mw==", "bodyText": "nit: improve this comment", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2413#discussion_r395121693", "createdAt": "2020-03-19T15:38:58Z", "author": {"login": "averikitsch"}, "path": "functions/snippets/src/main/java/com/example/functions/InfiniteRetryPubSub.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_tips_infinite_retries]\n+import com.google.api.client.util.DateTime;\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+public class InfiniteRetryPubSub implements BackgroundFunction<PubSubMessage> {\n+  private static final Logger LOGGER = Logger.getLogger(InfiniteRetryPubSub.class.getName());\n+  private static final long MAX_EVENT_AGE = 10_000;\n+\n+  // Use Gson (https://github.com/google/gson) to parse JSON content.\n+  private Gson gsonParser = new Gson();\n+\n+  /**\n+   * Background Cloud Function that only executes within\n+   * a certain time period after the triggering event\n+   */\n+  @Override\n+  public void accept(com.example.functions.PubSubMessage message, Context context) {\n+    ZonedDateTime utcNow = ZonedDateTime.now(ZoneOffset.UTC);\n+    ZonedDateTime timestamp = utcNow;\n+\n+    JsonObject body = gsonParser.fromJson(message.data, JsonObject.class);\n+    if (body != null && body.has(\"timestamp\")) {\n+      String tz = body.get(\"timestamp\").getAsString();\n+      timestamp = ZonedDateTime.parse(tz);\n+    }\n+    long eventAge = Duration.between(timestamp, utcNow).toMillis();\n+\n+    // Ignore events that are too old\n+    if (eventAge > MAX_EVENT_AGE) {\n+      LOGGER.info(String.format(\"Dropping event %s.\", body));\n+      return;\n+    }\n+\n+    // Do what the function is supposed to do", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24ffac43784dbc3defbb19d023a0029448c1a0c1"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTE3NDM3OnYy", "diffSide": "RIGHT", "path": "functions/snippets/src/main/java/com/example/functions/RetryPubSub.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOTozMjoyOFrOF6U8qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOTozMjoyOFrOF6U8qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcwNDkzOQ==", "bodyText": "Can you add more comments here since it's confusing what it's doing. Also this should document the thrown error.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2413#discussion_r396704939", "createdAt": "2020-03-23T19:32:28Z", "author": {"login": "averikitsch"}, "path": "functions/snippets/src/main/java/com/example/functions/RetryPubSub.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_tips_retry]\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import java.util.Base64;\n+import java.util.logging.Logger;\n+\n+public class RetryPubSub implements BackgroundFunction<PubSubMessage> {\n+  private static final Logger LOGGER = Logger.getLogger(RetryPubSub.class.getName());\n+\n+  // Use Gson (https://github.com/google/gson) to parse JSON content.\n+  private Gson gsonParser = new Gson();\n+\n+  @Override\n+  public void accept(PubSubMessage message, Context context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f183a3c4404bdb38121814485fbd8feccd7d61b1"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 996, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}