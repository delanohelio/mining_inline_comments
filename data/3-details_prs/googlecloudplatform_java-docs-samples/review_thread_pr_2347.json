{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0ODI3NDUz", "number": 2347, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODoxNTo1M1rODl5L_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNzoxNjo1MlrODrUPDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDYwODYyOnYy", "diffSide": "RIGHT", "path": "spanner/jdbc/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODoxNTo1M1rOFzCiOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNDo1MDo0MlrOF0SZ2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA2MzIyNQ==", "bodyText": "Nice, simple and clear!", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2347#discussion_r389063225", "createdAt": "2020-03-06T18:15:53Z", "author": {"login": "lesv"}, "path": "spanner/jdbc/README.md", "diffHunk": "@@ -0,0 +1,36 @@\n+# Cloud Spanner JDBC Example", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b764234c138cc43102cf2c4650dce680676bd77"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM3MTgwMw==", "bodyText": "Thanks :-)", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2347#discussion_r390371803", "createdAt": "2020-03-10T14:50:42Z", "author": {"login": "olavloite"}, "path": "spanner/jdbc/README.md", "diffHunk": "@@ -0,0 +1,36 @@\n+# Cloud Spanner JDBC Example", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA2MzIyNQ=="}, "originalCommit": {"oid": "7b764234c138cc43102cf2c4650dce680676bd77"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDYwOTkwOnYy", "diffSide": "RIGHT", "path": "spanner/jdbc/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODoxNjoyMVrOFzCjEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNDo1MTo0NlrOF0Sdjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA2MzQ0MA==", "bodyText": "Try 1.0.12 - we are trying to roll it out.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2347#discussion_r389063440", "createdAt": "2020-03-06T18:16:21Z", "author": {"login": "lesv"}, "path": "spanner/jdbc/pom.xml", "diffHunk": "@@ -0,0 +1,94 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <properties>\n+    <maven.compiler.target>1.8</maven.compiler.target>\n+    <maven.compiler.source>1.8</maven.compiler.source>\n+  </properties>\n+\n+  <!--\n+    The parent pom defines common style checks and testing strategies for our samples.\n+    Removing or replacing it should not affect the execution of the samples in anyway.\n+  -->\n+  <parent>\n+    <groupId>com.google.cloud.samples</groupId>\n+    <artifactId>shared-configuration</artifactId>\n+    <version>1.0.11</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b764234c138cc43102cf2c4650dce680676bd77"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM3Mjc1MA==", "bodyText": "Done. Works on my local development environment, so I assume it will also work once the PR this depends on has been merged into the JDBC driver.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2347#discussion_r390372750", "createdAt": "2020-03-10T14:51:46Z", "author": {"login": "olavloite"}, "path": "spanner/jdbc/pom.xml", "diffHunk": "@@ -0,0 +1,94 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <properties>\n+    <maven.compiler.target>1.8</maven.compiler.target>\n+    <maven.compiler.source>1.8</maven.compiler.source>\n+  </properties>\n+\n+  <!--\n+    The parent pom defines common style checks and testing strategies for our samples.\n+    Removing or replacing it should not affect the execution of the samples in anyway.\n+  -->\n+  <parent>\n+    <groupId>com.google.cloud.samples</groupId>\n+    <artifactId>shared-configuration</artifactId>\n+    <version>1.0.11</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA2MzQ0MA=="}, "originalCommit": {"oid": "7b764234c138cc43102cf2c4650dce680676bd77"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDYxMTM0OnYy", "diffSide": "RIGHT", "path": "spanner/jdbc/pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODoxNjo0NlrOFzCj4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNDo1MzoxMlrOF0SiRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA2MzY0OA==", "bodyText": "Don't use -SNAPSHOT's", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2347#discussion_r389063648", "createdAt": "2020-03-06T18:16:46Z", "author": {"login": "lesv"}, "path": "spanner/jdbc/pom.xml", "diffHunk": "@@ -0,0 +1,94 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <properties>\n+    <maven.compiler.target>1.8</maven.compiler.target>\n+    <maven.compiler.source>1.8</maven.compiler.source>\n+  </properties>\n+\n+  <!--\n+    The parent pom defines common style checks and testing strategies for our samples.\n+    Removing or replacing it should not affect the execution of the samples in anyway.\n+  -->\n+  <parent>\n+    <groupId>com.google.cloud.samples</groupId>\n+    <artifactId>shared-configuration</artifactId>\n+    <version>1.0.11</version>\n+  </parent>\n+\n+  <groupId>com.example.spanner</groupId>\n+  <artifactId>cloud-spanner-jdbc</artifactId>\n+  <name>Cloud Spanner with JDBC Code Sample</name>\n+  \n+  <!-- [START spanner_jdbc_dependencies] -->\n+  <dependencies>\n+    <dependency>\n+      <groupId>io.grpc</groupId>\n+      <artifactId>grpc-api</artifactId>\n+      <version>1.27.2</version>\n+    </dependency>\n+    <!-- The Spanner JDBC driver dependency -->\n+    <dependency>\n+      <groupId>com.google.cloud</groupId>\n+      <artifactId>google-cloud-spanner-jdbc</artifactId>\n+      <version>1.13.1-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b764234c138cc43102cf2c4650dce680676bd77"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM3Mzk1Nw==", "bodyText": "I'll change that as soon as a version of the JDBC driver with support for QueryOptions has been released. Until then this PR won't build anyways, so it can't be merged by accident either.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2347#discussion_r390373957", "createdAt": "2020-03-10T14:53:12Z", "author": {"login": "olavloite"}, "path": "spanner/jdbc/pom.xml", "diffHunk": "@@ -0,0 +1,94 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <properties>\n+    <maven.compiler.target>1.8</maven.compiler.target>\n+    <maven.compiler.source>1.8</maven.compiler.source>\n+  </properties>\n+\n+  <!--\n+    The parent pom defines common style checks and testing strategies for our samples.\n+    Removing or replacing it should not affect the execution of the samples in anyway.\n+  -->\n+  <parent>\n+    <groupId>com.google.cloud.samples</groupId>\n+    <artifactId>shared-configuration</artifactId>\n+    <version>1.0.11</version>\n+  </parent>\n+\n+  <groupId>com.example.spanner</groupId>\n+  <artifactId>cloud-spanner-jdbc</artifactId>\n+  <name>Cloud Spanner with JDBC Code Sample</name>\n+  \n+  <!-- [START spanner_jdbc_dependencies] -->\n+  <dependencies>\n+    <dependency>\n+      <groupId>io.grpc</groupId>\n+      <artifactId>grpc-api</artifactId>\n+      <version>1.27.2</version>\n+    </dependency>\n+    <!-- The Spanner JDBC driver dependency -->\n+    <dependency>\n+      <groupId>com.google.cloud</groupId>\n+      <artifactId>google-cloud-spanner-jdbc</artifactId>\n+      <version>1.13.1-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA2MzY0OA=="}, "originalCommit": {"oid": "7b764234c138cc43102cf2c4650dce680676bd77"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDYxMjQxOnYy", "diffSide": "RIGHT", "path": "spanner/jdbc/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODoxNzoxM1rOFzCklQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNDo1MzoxOVrOF0SiqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA2MzgyOQ==", "bodyText": "Not a good idea.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2347#discussion_r389063829", "createdAt": "2020-03-06T18:17:13Z", "author": {"login": "lesv"}, "path": "spanner/jdbc/pom.xml", "diffHunk": "@@ -0,0 +1,94 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <properties>\n+    <maven.compiler.target>1.8</maven.compiler.target>\n+    <maven.compiler.source>1.8</maven.compiler.source>\n+  </properties>\n+\n+  <!--\n+    The parent pom defines common style checks and testing strategies for our samples.\n+    Removing or replacing it should not affect the execution of the samples in anyway.\n+  -->\n+  <parent>\n+    <groupId>com.google.cloud.samples</groupId>\n+    <artifactId>shared-configuration</artifactId>\n+    <version>1.0.11</version>\n+  </parent>\n+\n+  <groupId>com.example.spanner</groupId>\n+  <artifactId>cloud-spanner-jdbc</artifactId>\n+  <name>Cloud Spanner with JDBC Code Sample</name>\n+  \n+  <!-- [START spanner_jdbc_dependencies] -->\n+  <dependencies>\n+    <dependency>\n+      <groupId>io.grpc</groupId>\n+      <artifactId>grpc-api</artifactId>\n+      <version>1.27.2</version>\n+    </dependency>\n+    <!-- The Spanner JDBC driver dependency -->\n+    <dependency>\n+      <groupId>com.google.cloud</groupId>\n+      <artifactId>google-cloud-spanner-jdbc</artifactId>\n+      <version>1.13.1-SNAPSHOT</version>\n+      <exclusions>\n+        <exclusion>\n+          <groupId>io.grpc</groupId>\n+          <artifactId>grpc-api</artifactId>\n+        </exclusion>\n+      </exclusions>\n+    </dependency>\n+    \n+    <!-- Test dependencies -->\n+    <dependency>\n+      <groupId>junit</groupId>\n+      <artifactId>junit</artifactId>\n+      <version>4.13</version>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.google.truth</groupId>\n+      <artifactId>truth</artifactId>\n+      <version>1.0</version>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+  <!-- [END spanner_jdbc_dependencies] -->\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.codehaus.mojo</groupId>\n+        <artifactId>exec-maven-plugin</artifactId>\n+        <version>1.6.0</version>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>java</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <mainClass>com.example.spanner.JdbcSample</mainClass>\n+          <cleanupDaemonThreads>false</cleanupDaemonThreads>\n+        </configuration>\n+      </plugin>\n+    </plugins>\n+  </build>\n+\n+  <!-- [START spanner_jdbc_snapshot_repo] -->\n+  <repositories>\n+    <repository>\n+      <id>snapshots-repo</id>\n+      <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n+      <releases><enabled>false</enabled></releases>\n+      <snapshots><enabled>true</enabled></snapshots>\n+    </repository>\n+  </repositories>\n+  <!-- [END spanner_jdbc_snapshot_repo] -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b764234c138cc43102cf2c4650dce680676bd77"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM3NDA1Nw==", "bodyText": "Removed.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2347#discussion_r390374057", "createdAt": "2020-03-10T14:53:19Z", "author": {"login": "olavloite"}, "path": "spanner/jdbc/pom.xml", "diffHunk": "@@ -0,0 +1,94 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <properties>\n+    <maven.compiler.target>1.8</maven.compiler.target>\n+    <maven.compiler.source>1.8</maven.compiler.source>\n+  </properties>\n+\n+  <!--\n+    The parent pom defines common style checks and testing strategies for our samples.\n+    Removing or replacing it should not affect the execution of the samples in anyway.\n+  -->\n+  <parent>\n+    <groupId>com.google.cloud.samples</groupId>\n+    <artifactId>shared-configuration</artifactId>\n+    <version>1.0.11</version>\n+  </parent>\n+\n+  <groupId>com.example.spanner</groupId>\n+  <artifactId>cloud-spanner-jdbc</artifactId>\n+  <name>Cloud Spanner with JDBC Code Sample</name>\n+  \n+  <!-- [START spanner_jdbc_dependencies] -->\n+  <dependencies>\n+    <dependency>\n+      <groupId>io.grpc</groupId>\n+      <artifactId>grpc-api</artifactId>\n+      <version>1.27.2</version>\n+    </dependency>\n+    <!-- The Spanner JDBC driver dependency -->\n+    <dependency>\n+      <groupId>com.google.cloud</groupId>\n+      <artifactId>google-cloud-spanner-jdbc</artifactId>\n+      <version>1.13.1-SNAPSHOT</version>\n+      <exclusions>\n+        <exclusion>\n+          <groupId>io.grpc</groupId>\n+          <artifactId>grpc-api</artifactId>\n+        </exclusion>\n+      </exclusions>\n+    </dependency>\n+    \n+    <!-- Test dependencies -->\n+    <dependency>\n+      <groupId>junit</groupId>\n+      <artifactId>junit</artifactId>\n+      <version>4.13</version>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.google.truth</groupId>\n+      <artifactId>truth</artifactId>\n+      <version>1.0</version>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+  <!-- [END spanner_jdbc_dependencies] -->\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.codehaus.mojo</groupId>\n+        <artifactId>exec-maven-plugin</artifactId>\n+        <version>1.6.0</version>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>java</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <mainClass>com.example.spanner.JdbcSample</mainClass>\n+          <cleanupDaemonThreads>false</cleanupDaemonThreads>\n+        </configuration>\n+      </plugin>\n+    </plugins>\n+  </build>\n+\n+  <!-- [START spanner_jdbc_snapshot_repo] -->\n+  <repositories>\n+    <repository>\n+      <id>snapshots-repo</id>\n+      <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n+      <releases><enabled>false</enabled></releases>\n+      <snapshots><enabled>true</enabled></snapshots>\n+    </repository>\n+  </repositories>\n+  <!-- [END spanner_jdbc_snapshot_repo] -->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA2MzgyOQ=="}, "originalCommit": {"oid": "7b764234c138cc43102cf2c4650dce680676bd77"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDYxNDc0OnYy", "diffSide": "RIGHT", "path": "spanner/jdbc/src/main/java/com/example/spanner/JdbcSample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODoxODowN1rOFzCmGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODoxODowN1rOFzCmGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA2NDIxOA==", "bodyText": "Nice!", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2347#discussion_r389064218", "createdAt": "2020-03-06T18:18:07Z", "author": {"login": "lesv"}, "path": "spanner/jdbc/src/main/java/com/example/spanner/JdbcSample.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.spanner;\n+\n+import com.google.cloud.spanner.SpannerOptions;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.sql.Types;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/** Example showing how to use the Cloud Spanner open source JDBC driver. */\n+public class JdbcSample {\n+\n+  /** Class to contain singer sample data. */\n+  static class Singer {\n+\n+    final long singerId;\n+    final String firstName;\n+    final String lastName;\n+\n+    Singer(long singerId, String firstName, String lastName) {\n+      this.singerId = singerId;\n+      this.firstName = firstName;\n+      this.lastName = lastName;\n+    }\n+  }\n+\n+  static final List<Singer> SINGERS =\n+      Arrays.asList(\n+          new Singer(1, \"Marc\", \"Richards\"),\n+          new Singer(2, \"Catalina\", \"Smith\"),\n+          new Singer(3, \"Alice\", \"Trentor\"),\n+          new Singer(4, \"Lea\", \"Martin\"),\n+          new Singer(5, \"David\", \"Lomond\"));\n+\n+  /**\n+   * This example shows how to create a JDBC connection and use this to execute queries and updates.\n+   */\n+  public static void main(String[] args) throws Exception {\n+    if (args.length != 3) {\n+      printUsageAndExit();\n+    }\n+\n+    /*\n+     * CREATE TABLE Singers (\n+     *   SingerId   INT64 NOT NULL,\n+     *   FirstName  STRING(1024),\n+     *   LastName   STRING(1024),\n+     *   SingerInfo BYTES(MAX),\n+     * ) PRIMARY KEY (SingerId);\n+     */\n+\n+    String command = args[0];\n+    String projectId = SpannerOptions.getDefaultProjectId();\n+    String instanceId = args[1];\n+    String databaseId = args[2];\n+\n+    String connectionUrl =\n+        String.format(\n+            \"jdbc:cloudspanner:/projects/%s/instances/%s/databases/%s\",\n+            projectId, instanceId, databaseId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b764234c138cc43102cf2c4650dce680676bd77"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDYyNDQ5OnYy", "diffSide": "RIGHT", "path": "spanner/jdbc/src/main/java/com/example/spanner/JdbcSample.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODoyMTozNVrOFzCsfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNToxODowOVrOF0Tt5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA2NTg1NQ==", "bodyText": "I think we try to avoid using CLI tools for java samples.  I'll approve this since I couldn't find a prohibition in https://github.com/GoogleCloudPlatform/java-docs-samples/blob/master/SAMPLE_FORMAT.md", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2347#discussion_r389065855", "createdAt": "2020-03-06T18:21:35Z", "author": {"login": "lesv"}, "path": "spanner/jdbc/src/main/java/com/example/spanner/JdbcSample.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.spanner;\n+\n+import com.google.cloud.spanner.SpannerOptions;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.sql.Types;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/** Example showing how to use the Cloud Spanner open source JDBC driver. */\n+public class JdbcSample {\n+\n+  /** Class to contain singer sample data. */\n+  static class Singer {\n+\n+    final long singerId;\n+    final String firstName;\n+    final String lastName;\n+\n+    Singer(long singerId, String firstName, String lastName) {\n+      this.singerId = singerId;\n+      this.firstName = firstName;\n+      this.lastName = lastName;\n+    }\n+  }\n+\n+  static final List<Singer> SINGERS =\n+      Arrays.asList(\n+          new Singer(1, \"Marc\", \"Richards\"),\n+          new Singer(2, \"Catalina\", \"Smith\"),\n+          new Singer(3, \"Alice\", \"Trentor\"),\n+          new Singer(4, \"Lea\", \"Martin\"),\n+          new Singer(5, \"David\", \"Lomond\"));\n+\n+  /**\n+   * This example shows how to create a JDBC connection and use this to execute queries and updates.\n+   */\n+  public static void main(String[] args) throws Exception {\n+    if (args.length != 3) {\n+      printUsageAndExit();\n+    }\n+\n+    /*\n+     * CREATE TABLE Singers (\n+     *   SingerId   INT64 NOT NULL,\n+     *   FirstName  STRING(1024),\n+     *   LastName   STRING(1024),\n+     *   SingerInfo BYTES(MAX),\n+     * ) PRIMARY KEY (SingerId);\n+     */\n+\n+    String command = args[0];\n+    String projectId = SpannerOptions.getDefaultProjectId();\n+    String instanceId = args[1];\n+    String databaseId = args[2];\n+\n+    String connectionUrl =\n+        String.format(\n+            \"jdbc:cloudspanner:/projects/%s/instances/%s/databases/%s\",\n+            projectId, instanceId, databaseId);\n+    try (Connection connection = DriverManager.getConnection(connectionUrl)) {\n+      run(command, connection, projectId, instanceId, databaseId);\n+    }\n+  }\n+\n+  static void run(\n+      String command, Connection connection, String projectId, String instanceId, String databaseId)\n+      throws SQLException {\n+    switch (command) {\n+      case \"createtable\":\n+        createTable(connection);\n+        break;\n+      case \"insertdata\":\n+        insertData(connection);\n+        break;\n+      case \"connectionwithqueryoptions\":\n+        connectionWithQueryOptions(projectId, instanceId, databaseId);\n+        break;\n+      case \"setqueryoptions\":\n+        setQueryOptions(projectId, instanceId, databaseId);\n+        break;\n+      default:\n+        printUsageAndExit();\n+    }\n+  }\n+\n+  static void printUsageAndExit() {\n+    System.err.println(\"Usage:\");\n+    System.err.println(\"    JdbcSample <command> <instance_id> <database_id>\");\n+    System.err.println(\"\");\n+    System.err.println(\"Examples:\");\n+    System.err.println(\"    JdbcSample createtable my-instance example-db\");\n+    System.err.println(\"    JdbcSample insertdata my-instance example-db\");\n+    System.err.println(\"    JdbcSample connectionwithqueryoptions my-instance example-db\");\n+    System.err.println(\"    JdbcSample setqueryoptions my-instance example-db\");\n+\n+    System.exit(1);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b764234c138cc43102cf2c4650dce680676bd77"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM5MzMxNg==", "bodyText": "This is modeled to work in the same way as the existing SpannerSample samples: \n  \n    \n      java-docs-samples/spanner/cloud-client/src/main/java/com/example/spanner/SpannerSample.java\n    \n    \n        Lines 1597 to 1610\n      in\n      c3c4600\n    \n    \n    \n    \n\n        \n          \n           static void printUsageAndExit() { \n        \n\n        \n          \n             System.err.println(\"Usage:\"); \n        \n\n        \n          \n             System.err.println(\"    SpannerExample <command> <instance_id> <database_id>\"); \n        \n\n        \n          \n             System.err.println(\"\"); \n        \n\n        \n          \n             System.err.println(\"Examples:\"); \n        \n\n        \n          \n             System.err.println(\"    SpannerExample createdatabase my-instance example-db\"); \n        \n\n        \n          \n             System.err.println(\"    SpannerExample write my-instance example-db\"); \n        \n\n        \n          \n             System.err.println(\"    SpannerExample delete my-instance example-db\"); \n        \n\n        \n          \n             System.err.println(\"    SpannerExample query my-instance example-db\"); \n        \n\n        \n          \n             System.err.println(\"    SpannerExample read my-instance example-db\"); \n        \n\n        \n          \n             System.err.println(\"    SpannerExample addmarketingbudget my-instance example-db\"); \n        \n\n        \n          \n             System.err.println(\"    SpannerExample update my-instance example-db\"); \n        \n\n        \n          \n             System.err.println(\"    SpannerExample writetransaction my-instance example-db\"); \n        \n\n        \n          \n             System.err.println(\"    SpannerExample querymarketingbudget my-instance example-db\");", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2347#discussion_r390393316", "createdAt": "2020-03-10T15:18:09Z", "author": {"login": "olavloite"}, "path": "spanner/jdbc/src/main/java/com/example/spanner/JdbcSample.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.spanner;\n+\n+import com.google.cloud.spanner.SpannerOptions;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.sql.Types;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/** Example showing how to use the Cloud Spanner open source JDBC driver. */\n+public class JdbcSample {\n+\n+  /** Class to contain singer sample data. */\n+  static class Singer {\n+\n+    final long singerId;\n+    final String firstName;\n+    final String lastName;\n+\n+    Singer(long singerId, String firstName, String lastName) {\n+      this.singerId = singerId;\n+      this.firstName = firstName;\n+      this.lastName = lastName;\n+    }\n+  }\n+\n+  static final List<Singer> SINGERS =\n+      Arrays.asList(\n+          new Singer(1, \"Marc\", \"Richards\"),\n+          new Singer(2, \"Catalina\", \"Smith\"),\n+          new Singer(3, \"Alice\", \"Trentor\"),\n+          new Singer(4, \"Lea\", \"Martin\"),\n+          new Singer(5, \"David\", \"Lomond\"));\n+\n+  /**\n+   * This example shows how to create a JDBC connection and use this to execute queries and updates.\n+   */\n+  public static void main(String[] args) throws Exception {\n+    if (args.length != 3) {\n+      printUsageAndExit();\n+    }\n+\n+    /*\n+     * CREATE TABLE Singers (\n+     *   SingerId   INT64 NOT NULL,\n+     *   FirstName  STRING(1024),\n+     *   LastName   STRING(1024),\n+     *   SingerInfo BYTES(MAX),\n+     * ) PRIMARY KEY (SingerId);\n+     */\n+\n+    String command = args[0];\n+    String projectId = SpannerOptions.getDefaultProjectId();\n+    String instanceId = args[1];\n+    String databaseId = args[2];\n+\n+    String connectionUrl =\n+        String.format(\n+            \"jdbc:cloudspanner:/projects/%s/instances/%s/databases/%s\",\n+            projectId, instanceId, databaseId);\n+    try (Connection connection = DriverManager.getConnection(connectionUrl)) {\n+      run(command, connection, projectId, instanceId, databaseId);\n+    }\n+  }\n+\n+  static void run(\n+      String command, Connection connection, String projectId, String instanceId, String databaseId)\n+      throws SQLException {\n+    switch (command) {\n+      case \"createtable\":\n+        createTable(connection);\n+        break;\n+      case \"insertdata\":\n+        insertData(connection);\n+        break;\n+      case \"connectionwithqueryoptions\":\n+        connectionWithQueryOptions(projectId, instanceId, databaseId);\n+        break;\n+      case \"setqueryoptions\":\n+        setQueryOptions(projectId, instanceId, databaseId);\n+        break;\n+      default:\n+        printUsageAndExit();\n+    }\n+  }\n+\n+  static void printUsageAndExit() {\n+    System.err.println(\"Usage:\");\n+    System.err.println(\"    JdbcSample <command> <instance_id> <database_id>\");\n+    System.err.println(\"\");\n+    System.err.println(\"Examples:\");\n+    System.err.println(\"    JdbcSample createtable my-instance example-db\");\n+    System.err.println(\"    JdbcSample insertdata my-instance example-db\");\n+    System.err.println(\"    JdbcSample connectionwithqueryoptions my-instance example-db\");\n+    System.err.println(\"    JdbcSample setqueryoptions my-instance example-db\");\n+\n+    System.exit(1);\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA2NTg1NQ=="}, "originalCommit": {"oid": "7b764234c138cc43102cf2c4650dce680676bd77"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDY4ODE1OnYy", "diffSide": "RIGHT", "path": "spanner/jdbc/src/test/java/com/example/spanner/JdbcSampleIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODo0MjozMVrOFzDUPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNToxNzo1M1rOF0TtDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA3NjAyOA==", "bodyText": "Do we need to add something in Java-Docs-Samples-Testing for this?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2347#discussion_r389076028", "createdAt": "2020-03-06T18:42:31Z", "author": {"login": "lesv"}, "path": "spanner/jdbc/src/test/java/com/example/spanner/JdbcSampleIT.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.spanner;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.Spanner;\n+import com.google.cloud.spanner.SpannerOptions;\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.util.Collections;\n+import java.util.UUID;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/** Unit tests for {@code JdbcSample} */\n+@RunWith(JUnit4.class)\n+public class JdbcSampleIT {\n+  // The instance needs to exist for tests to pass.\n+  private final String instanceId = System.getProperty(\"spanner.test.instance\");\n+  private final String databaseId = formatForTest(System.getProperty(\"spanner.sample.database\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b764234c138cc43102cf2c4650dce680676bd77"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM5MzEwMw==", "bodyText": "No, AFAICT this should work out of the box. This is also modeled to work exactly as the existing SpannerSampleIT: \n  \n    \n      java-docs-samples/spanner/cloud-client/src/test/java/com/example/spanner/SpannerSampleIT.java\n    \n    \n        Lines 39 to 40\n      in\n      c3c4600\n    \n    \n    \n    \n\n        \n          \n           private final String instanceId = System.getProperty(\"spanner.test.instance\"); \n        \n\n        \n          \n           private final String databaseId = formatForTest(System.getProperty(\"spanner.sample.database\"));", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2347#discussion_r390393103", "createdAt": "2020-03-10T15:17:53Z", "author": {"login": "olavloite"}, "path": "spanner/jdbc/src/test/java/com/example/spanner/JdbcSampleIT.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.spanner;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.Spanner;\n+import com.google.cloud.spanner.SpannerOptions;\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.util.Collections;\n+import java.util.UUID;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/** Unit tests for {@code JdbcSample} */\n+@RunWith(JUnit4.class)\n+public class JdbcSampleIT {\n+  // The instance needs to exist for tests to pass.\n+  private final String instanceId = System.getProperty(\"spanner.test.instance\");\n+  private final String databaseId = formatForTest(System.getProperty(\"spanner.sample.database\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA3NjAyOA=="}, "originalCommit": {"oid": "7b764234c138cc43102cf2c4650dce680676bd77"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDc2MjQwOnYy", "diffSide": "RIGHT", "path": "spanner/jdbc/src/main/java/com/example/spanner/JdbcSample.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDoxNDoyMFrOF7LmVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwODozODowMlrOF7Qqeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYwMDM0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String optimizerVersion = \"LATEST\";\n          \n          \n            \n                String optimizerVersion = \"1\";", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2347#discussion_r397600340", "createdAt": "2020-03-25T04:14:20Z", "author": {"login": "skuruppu"}, "path": "spanner/jdbc/src/main/java/com/example/spanner/JdbcSample.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.spanner;\n+\n+import com.google.cloud.spanner.SpannerOptions;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.sql.Types;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/** Example showing how to use the Cloud Spanner open source JDBC driver. */\n+public class JdbcSample {\n+\n+  /** Class to contain singer sample data. */\n+  static class Singer {\n+\n+    final long singerId;\n+    final String firstName;\n+    final String lastName;\n+\n+    Singer(long singerId, String firstName, String lastName) {\n+      this.singerId = singerId;\n+      this.firstName = firstName;\n+      this.lastName = lastName;\n+    }\n+  }\n+\n+  static final List<Singer> SINGERS =\n+      Arrays.asList(\n+          new Singer(1, \"Marc\", \"Richards\"),\n+          new Singer(2, \"Catalina\", \"Smith\"),\n+          new Singer(3, \"Alice\", \"Trentor\"),\n+          new Singer(4, \"Lea\", \"Martin\"),\n+          new Singer(5, \"David\", \"Lomond\"));\n+\n+  /**\n+   * This example shows how to create a JDBC connection and use this to execute queries and updates.\n+   */\n+  public static void main(String[] args) throws Exception {\n+    if (args.length != 3) {\n+      printUsageAndExit();\n+    }\n+\n+    /*\n+     * CREATE TABLE Singers (\n+     *   SingerId   INT64 NOT NULL,\n+     *   FirstName  STRING(1024),\n+     *   LastName   STRING(1024),\n+     *   SingerInfo BYTES(MAX),\n+     * ) PRIMARY KEY (SingerId);\n+     */\n+\n+    String command = args[0];\n+    String projectId = SpannerOptions.getDefaultProjectId();\n+    String instanceId = args[1];\n+    String databaseId = args[2];\n+\n+    String connectionUrl =\n+        String.format(\n+            \"jdbc:cloudspanner:/projects/%s/instances/%s/databases/%s\",\n+            projectId, instanceId, databaseId);\n+    try (Connection connection = DriverManager.getConnection(connectionUrl)) {\n+      run(command, connection, projectId, instanceId, databaseId);\n+    }\n+  }\n+\n+  static void run(\n+      String command, Connection connection, String projectId, String instanceId, String databaseId)\n+      throws SQLException {\n+    switch (command) {\n+      case \"createtable\":\n+        createTable(connection);\n+        break;\n+      case \"insertdata\":\n+        insertData(connection);\n+        break;\n+      case \"connectionwithqueryoptions\":\n+        connectionWithQueryOptions(projectId, instanceId, databaseId);\n+        break;\n+      case \"setqueryoptions\":\n+        setQueryOptions(projectId, instanceId, databaseId);\n+        break;\n+      default:\n+        printUsageAndExit();\n+    }\n+  }\n+\n+  static void printUsageAndExit() {\n+    System.err.println(\"Usage:\");\n+    System.err.println(\"    JdbcSample <command> <instance_id> <database_id>\");\n+    System.err.println(\"\");\n+    System.err.println(\"Examples:\");\n+    System.err.println(\"    JdbcSample createtable my-instance example-db\");\n+    System.err.println(\"    JdbcSample insertdata my-instance example-db\");\n+    System.err.println(\"    JdbcSample connectionwithqueryoptions my-instance example-db\");\n+    System.err.println(\"    JdbcSample setqueryoptions my-instance example-db\");\n+\n+    System.exit(1);\n+  }\n+\n+  static void createTable(Connection connection) throws SQLException {\n+    try (Statement statement = connection.createStatement()) {\n+      statement.execute(\n+          \"CREATE TABLE Singers (\\n\"\n+              + \"              SingerId   INT64 NOT NULL,\\n\"\n+              + \"              FirstName  STRING(1024),\\n\"\n+              + \"              LastName   STRING(1024),\\n\"\n+              + \"              SingerInfo BYTES(MAX),\\n\"\n+              + \"              ) PRIMARY KEY (SingerId)\\n\");\n+    }\n+    System.out.println(\"Created table [Singers]\");\n+  }\n+\n+  static void insertData(Connection connection) throws SQLException {\n+    boolean originalAutoCommit = connection.getAutoCommit();\n+    connection.setAutoCommit(false);\n+    try (PreparedStatement ps =\n+        connection.prepareStatement(\n+            \"INSERT INTO Singers\\n\"\n+                + \"(SingerId, FirstName, LastName, SingerInfo)\\n\"\n+                + \"VALUES\\n\"\n+                + \"(?, ?, ?, ?)\")) {\n+      for (Singer singer : SINGERS) {\n+        ps.setLong(1, singer.singerId);\n+        ps.setString(2, singer.firstName);\n+        ps.setString(3, singer.lastName);\n+        ps.setNull(4, Types.BINARY);\n+        ps.addBatch();\n+      }\n+      int[] updateCounts = ps.executeBatch();\n+      connection.commit();\n+      System.out.printf(\"Insert counts: %s\\n\", Arrays.toString(updateCounts));\n+    } finally {\n+      connection.setAutoCommit(originalAutoCommit);\n+    }\n+  }\n+\n+  // [START spanner_jdbc_connection_with_query_options]\n+  static void connectionWithQueryOptions(String projectId, String instanceId, String databaseId)\n+      throws SQLException {\n+    String optimizerVersion = \"LATEST\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7bbd3b207da2f9fcfdc6655f2ee3f69ee42e84b"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY4MzMyMg==", "bodyText": "Done", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2347#discussion_r397683322", "createdAt": "2020-03-25T08:38:02Z", "author": {"login": "olavloite"}, "path": "spanner/jdbc/src/main/java/com/example/spanner/JdbcSample.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.spanner;\n+\n+import com.google.cloud.spanner.SpannerOptions;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.sql.Types;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/** Example showing how to use the Cloud Spanner open source JDBC driver. */\n+public class JdbcSample {\n+\n+  /** Class to contain singer sample data. */\n+  static class Singer {\n+\n+    final long singerId;\n+    final String firstName;\n+    final String lastName;\n+\n+    Singer(long singerId, String firstName, String lastName) {\n+      this.singerId = singerId;\n+      this.firstName = firstName;\n+      this.lastName = lastName;\n+    }\n+  }\n+\n+  static final List<Singer> SINGERS =\n+      Arrays.asList(\n+          new Singer(1, \"Marc\", \"Richards\"),\n+          new Singer(2, \"Catalina\", \"Smith\"),\n+          new Singer(3, \"Alice\", \"Trentor\"),\n+          new Singer(4, \"Lea\", \"Martin\"),\n+          new Singer(5, \"David\", \"Lomond\"));\n+\n+  /**\n+   * This example shows how to create a JDBC connection and use this to execute queries and updates.\n+   */\n+  public static void main(String[] args) throws Exception {\n+    if (args.length != 3) {\n+      printUsageAndExit();\n+    }\n+\n+    /*\n+     * CREATE TABLE Singers (\n+     *   SingerId   INT64 NOT NULL,\n+     *   FirstName  STRING(1024),\n+     *   LastName   STRING(1024),\n+     *   SingerInfo BYTES(MAX),\n+     * ) PRIMARY KEY (SingerId);\n+     */\n+\n+    String command = args[0];\n+    String projectId = SpannerOptions.getDefaultProjectId();\n+    String instanceId = args[1];\n+    String databaseId = args[2];\n+\n+    String connectionUrl =\n+        String.format(\n+            \"jdbc:cloudspanner:/projects/%s/instances/%s/databases/%s\",\n+            projectId, instanceId, databaseId);\n+    try (Connection connection = DriverManager.getConnection(connectionUrl)) {\n+      run(command, connection, projectId, instanceId, databaseId);\n+    }\n+  }\n+\n+  static void run(\n+      String command, Connection connection, String projectId, String instanceId, String databaseId)\n+      throws SQLException {\n+    switch (command) {\n+      case \"createtable\":\n+        createTable(connection);\n+        break;\n+      case \"insertdata\":\n+        insertData(connection);\n+        break;\n+      case \"connectionwithqueryoptions\":\n+        connectionWithQueryOptions(projectId, instanceId, databaseId);\n+        break;\n+      case \"setqueryoptions\":\n+        setQueryOptions(projectId, instanceId, databaseId);\n+        break;\n+      default:\n+        printUsageAndExit();\n+    }\n+  }\n+\n+  static void printUsageAndExit() {\n+    System.err.println(\"Usage:\");\n+    System.err.println(\"    JdbcSample <command> <instance_id> <database_id>\");\n+    System.err.println(\"\");\n+    System.err.println(\"Examples:\");\n+    System.err.println(\"    JdbcSample createtable my-instance example-db\");\n+    System.err.println(\"    JdbcSample insertdata my-instance example-db\");\n+    System.err.println(\"    JdbcSample connectionwithqueryoptions my-instance example-db\");\n+    System.err.println(\"    JdbcSample setqueryoptions my-instance example-db\");\n+\n+    System.exit(1);\n+  }\n+\n+  static void createTable(Connection connection) throws SQLException {\n+    try (Statement statement = connection.createStatement()) {\n+      statement.execute(\n+          \"CREATE TABLE Singers (\\n\"\n+              + \"              SingerId   INT64 NOT NULL,\\n\"\n+              + \"              FirstName  STRING(1024),\\n\"\n+              + \"              LastName   STRING(1024),\\n\"\n+              + \"              SingerInfo BYTES(MAX),\\n\"\n+              + \"              ) PRIMARY KEY (SingerId)\\n\");\n+    }\n+    System.out.println(\"Created table [Singers]\");\n+  }\n+\n+  static void insertData(Connection connection) throws SQLException {\n+    boolean originalAutoCommit = connection.getAutoCommit();\n+    connection.setAutoCommit(false);\n+    try (PreparedStatement ps =\n+        connection.prepareStatement(\n+            \"INSERT INTO Singers\\n\"\n+                + \"(SingerId, FirstName, LastName, SingerInfo)\\n\"\n+                + \"VALUES\\n\"\n+                + \"(?, ?, ?, ?)\")) {\n+      for (Singer singer : SINGERS) {\n+        ps.setLong(1, singer.singerId);\n+        ps.setString(2, singer.firstName);\n+        ps.setString(3, singer.lastName);\n+        ps.setNull(4, Types.BINARY);\n+        ps.addBatch();\n+      }\n+      int[] updateCounts = ps.executeBatch();\n+      connection.commit();\n+      System.out.printf(\"Insert counts: %s\\n\", Arrays.toString(updateCounts));\n+    } finally {\n+      connection.setAutoCommit(originalAutoCommit);\n+    }\n+  }\n+\n+  // [START spanner_jdbc_connection_with_query_options]\n+  static void connectionWithQueryOptions(String projectId, String instanceId, String databaseId)\n+      throws SQLException {\n+    String optimizerVersion = \"LATEST\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYwMDM0MA=="}, "originalCommit": {"oid": "b7bbd3b207da2f9fcfdc6655f2ee3f69ee42e84b"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NzQ2NDgwOnYy", "diffSide": "RIGHT", "path": "spanner/jdbc/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNzoxNjowNlrOF7lyCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMTo0MzoyNFrOF7vgoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyOTMyMQ==", "bodyText": "1.0.13 now", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2347#discussion_r398029321", "createdAt": "2020-03-25T17:16:06Z", "author": {"login": "lesv"}, "path": "spanner/jdbc/pom.xml", "diffHunk": "@@ -0,0 +1,72 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <properties>\n+    <maven.compiler.target>1.8</maven.compiler.target>\n+    <maven.compiler.source>1.8</maven.compiler.source>\n+  </properties>\n+\n+  <!--\n+    The parent pom defines common style checks and testing strategies for our samples.\n+    Removing or replacing it should not affect the execution of the samples in anyway.\n+  -->\n+  <parent>\n+    <groupId>com.google.cloud.samples</groupId>\n+    <artifactId>shared-configuration</artifactId>\n+    <version>1.0.12</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d96d083b85d3adf5405ae565d1f6bbbe1d1ef23"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4ODcwNA==", "bodyText": "Done", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2347#discussion_r398188704", "createdAt": "2020-03-25T21:43:24Z", "author": {"login": "olavloite"}, "path": "spanner/jdbc/pom.xml", "diffHunk": "@@ -0,0 +1,72 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <properties>\n+    <maven.compiler.target>1.8</maven.compiler.target>\n+    <maven.compiler.source>1.8</maven.compiler.source>\n+  </properties>\n+\n+  <!--\n+    The parent pom defines common style checks and testing strategies for our samples.\n+    Removing or replacing it should not affect the execution of the samples in anyway.\n+  -->\n+  <parent>\n+    <groupId>com.google.cloud.samples</groupId>\n+    <artifactId>shared-configuration</artifactId>\n+    <version>1.0.12</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyOTMyMQ=="}, "originalCommit": {"oid": "8d96d083b85d3adf5405ae565d1f6bbbe1d1ef23"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NzQ2ODkyOnYy", "diffSide": "RIGHT", "path": "spanner/jdbc/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNzoxNjo1MlrOF7l0ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMTo0MzoxOFrOF7vgaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyOTkyNQ==", "bodyText": "1.0.1", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2347#discussion_r398029925", "createdAt": "2020-03-25T17:16:52Z", "author": {"login": "lesv"}, "path": "spanner/jdbc/pom.xml", "diffHunk": "@@ -0,0 +1,72 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <properties>\n+    <maven.compiler.target>1.8</maven.compiler.target>\n+    <maven.compiler.source>1.8</maven.compiler.source>\n+  </properties>\n+\n+  <!--\n+    The parent pom defines common style checks and testing strategies for our samples.\n+    Removing or replacing it should not affect the execution of the samples in anyway.\n+  -->\n+  <parent>\n+    <groupId>com.google.cloud.samples</groupId>\n+    <artifactId>shared-configuration</artifactId>\n+    <version>1.0.12</version>\n+  </parent>\n+\n+  <groupId>com.example.spanner</groupId>\n+  <artifactId>cloud-spanner-jdbc</artifactId>\n+  <name>Cloud Spanner with JDBC Code Sample</name>\n+  \n+  <!-- [START spanner_jdbc_dependencies] -->\n+  <dependencies>\n+    <!-- The Spanner JDBC driver dependency -->\n+    <dependency>\n+      <groupId>com.google.cloud</groupId>\n+      <artifactId>google-cloud-spanner-jdbc</artifactId>\n+      <version>1.15.0</version>\n+    </dependency>\n+    \n+    <!-- Test dependencies -->\n+    <dependency>\n+      <groupId>junit</groupId>\n+      <artifactId>junit</artifactId>\n+      <version>4.13</version>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.google.truth</groupId>\n+      <artifactId>truth</artifactId>\n+      <version>1.0</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d96d083b85d3adf5405ae565d1f6bbbe1d1ef23"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4ODY0OQ==", "bodyText": "Done.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2347#discussion_r398188649", "createdAt": "2020-03-25T21:43:18Z", "author": {"login": "olavloite"}, "path": "spanner/jdbc/pom.xml", "diffHunk": "@@ -0,0 +1,72 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <properties>\n+    <maven.compiler.target>1.8</maven.compiler.target>\n+    <maven.compiler.source>1.8</maven.compiler.source>\n+  </properties>\n+\n+  <!--\n+    The parent pom defines common style checks and testing strategies for our samples.\n+    Removing or replacing it should not affect the execution of the samples in anyway.\n+  -->\n+  <parent>\n+    <groupId>com.google.cloud.samples</groupId>\n+    <artifactId>shared-configuration</artifactId>\n+    <version>1.0.12</version>\n+  </parent>\n+\n+  <groupId>com.example.spanner</groupId>\n+  <artifactId>cloud-spanner-jdbc</artifactId>\n+  <name>Cloud Spanner with JDBC Code Sample</name>\n+  \n+  <!-- [START spanner_jdbc_dependencies] -->\n+  <dependencies>\n+    <!-- The Spanner JDBC driver dependency -->\n+    <dependency>\n+      <groupId>com.google.cloud</groupId>\n+      <artifactId>google-cloud-spanner-jdbc</artifactId>\n+      <version>1.15.0</version>\n+    </dependency>\n+    \n+    <!-- Test dependencies -->\n+    <dependency>\n+      <groupId>junit</groupId>\n+      <artifactId>junit</artifactId>\n+      <version>4.13</version>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.google.truth</groupId>\n+      <artifactId>truth</artifactId>\n+      <version>1.0</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyOTkyNQ=="}, "originalCommit": {"oid": "8d96d083b85d3adf5405ae565d1f6bbbe1d1ef23"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 971, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}