{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3MDU2OTUw", "number": 2726, "title": "Add pubsub tests", "bodyText": "", "createdAt": "2020-04-22T05:32:22Z", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2726", "merged": true, "mergeCommit": {"oid": "9004d57ede8f8caf5d11b49a518df0dd1b602796"}, "closed": true, "closedAt": "2020-04-24T01:15:55Z", "author": {"login": "ace-n"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaA2XtAH2gAyNDA3MDU2OTUwOjZkZmQwNTQwMWI5NGEyZDBmZmRmOGY0NmVjYjg0NTg5NDE1YjIxMTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcam3degH2gAyNDA3MDU2OTUwOjBlMjg1ZmU4ODQyZjU0NTgzMjM5Mjg0ODYwM2I5ZTZlZjE3OWEzZWM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6dfd05401b94a2d0ffdf8f46ecb84589415b2111", "author": {"user": {"login": "ace-n", "name": "Ace Nassri"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/6dfd05401b94a2d0ffdf8f46ecb84589415b2111", "committedDate": "2020-04-22T04:47:30Z", "message": "Add pubsub tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4MTU4NTcw", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2726#pullrequestreview-398158570", "createdAt": "2020-04-22T12:53:38Z", "commit": {"oid": "6dfd05401b94a2d0ffdf8f46ecb84589415b2111"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjo1MzozOVrOGJ0zXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzoxNDozNFrOGJ1wCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk1NTQ4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                emulatorProcess = (new ProcessBuilder()).command(\"mvn\", \"function:run\").start();\n          \n          \n            \n                emulatorProcess = new ProcessBuilder(\"mvn\", \"function:run\").start();", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2726#discussion_r412955485", "createdAt": "2020-04-22T12:53:39Z", "author": {"login": "kurtisvg"}, "path": "functions/helloworld/hello-pub-sub/src/test/java/functions/ExampleIntegrationTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package functions;\n+\n+// [START functions_pubsub_integration_test]\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import io.github.resilience4j.core.IntervalFunction;\n+import io.github.resilience4j.retry.Retry;\n+import io.github.resilience4j.retry.RetryConfig;\n+import io.github.resilience4j.retry.RetryRegistry;\n+import io.vavr.CheckedRunnable;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.UUID;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.conn.HttpHostConnectException;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class ExampleIntegrationTest {\n+  // Root URL pointing to the locally hosted function\n+  // The Functions Framework Maven plugin lets us run a function locally\n+  private static final String BASE_URL = \"http://localhost:8080\";\n+\n+  private static Process emulatorProcess = null;\n+  private static HttpClient client = HttpClientBuilder.create().build();\n+\n+  @BeforeClass\n+  public static void setUp() throws IOException {\n+    // Emulate the function locally by running the Functions Framework Maven plugin\n+    emulatorProcess = (new ProcessBuilder()).command(\"mvn\", \"function:run\").start();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dfd05401b94a2d0ffdf8f46ecb84589415b2111"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk1ODA0NQ==", "bodyText": "We should really verify this has started successfully as part of the setUp.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2726#discussion_r412958045", "createdAt": "2020-04-22T12:57:04Z", "author": {"login": "kurtisvg"}, "path": "functions/helloworld/hello-pub-sub/src/test/java/functions/ExampleIntegrationTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package functions;\n+\n+// [START functions_pubsub_integration_test]\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import io.github.resilience4j.core.IntervalFunction;\n+import io.github.resilience4j.retry.Retry;\n+import io.github.resilience4j.retry.RetryConfig;\n+import io.github.resilience4j.retry.RetryRegistry;\n+import io.vavr.CheckedRunnable;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.UUID;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.conn.HttpHostConnectException;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class ExampleIntegrationTest {\n+  // Root URL pointing to the locally hosted function\n+  // The Functions Framework Maven plugin lets us run a function locally\n+  private static final String BASE_URL = \"http://localhost:8080\";\n+\n+  private static Process emulatorProcess = null;\n+  private static HttpClient client = HttpClientBuilder.create().build();\n+\n+  @BeforeClass\n+  public static void setUp() throws IOException {\n+    // Emulate the function locally by running the Functions Framework Maven plugin\n+    emulatorProcess = (new ProcessBuilder()).command(\"mvn\", \"function:run\").start();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk1NTQ4NQ=="}, "originalCommit": {"oid": "6dfd05401b94a2d0ffdf8f46ecb84589415b2111"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk2NDgyNA==", "bodyText": "I don't think the appropriate strategy is to retry for this - users may miss flaky behavior in tests because of that. We should ensure that the Process has started successfully (probably by waiting and/or verifying with stdout), and run the test once.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2726#discussion_r412964824", "createdAt": "2020-04-22T13:06:28Z", "author": {"login": "kurtisvg"}, "path": "functions/helloworld/hello-pub-sub/src/test/java/functions/ExampleIntegrationTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package functions;\n+\n+// [START functions_pubsub_integration_test]\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import io.github.resilience4j.core.IntervalFunction;\n+import io.github.resilience4j.retry.Retry;\n+import io.github.resilience4j.retry.RetryConfig;\n+import io.github.resilience4j.retry.RetryRegistry;\n+import io.vavr.CheckedRunnable;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.UUID;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.conn.HttpHostConnectException;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class ExampleIntegrationTest {\n+  // Root URL pointing to the locally hosted function\n+  // The Functions Framework Maven plugin lets us run a function locally\n+  private static final String BASE_URL = \"http://localhost:8080\";\n+\n+  private static Process emulatorProcess = null;\n+  private static HttpClient client = HttpClientBuilder.create().build();\n+\n+  @BeforeClass\n+  public static void setUp() throws IOException {\n+    // Emulate the function locally by running the Functions Framework Maven plugin\n+    emulatorProcess = (new ProcessBuilder()).command(\"mvn\", \"function:run\").start();\n+  }\n+\n+  @AfterClass\n+  public static void tearDown() {\n+    // Terminate the running Functions Framework Maven plugin process (if it's still running)\n+    if (emulatorProcess.isAlive()) {\n+      emulatorProcess.destroy();\n+    }\n+  }\n+\n+  @Test\n+  public void helloPubSub_shouldRunWithFunctionsFramework() throws Throwable {\n+    String functionUrl = BASE_URL + \"/helloPubsub\"; // URL to your locally-running function\n+\n+    // Initialize constants\n+    String name = UUID.randomUUID().toString();\n+    String nameBase64 = Base64.getEncoder().encodeToString(name.getBytes(StandardCharsets.UTF_8));\n+\n+    String expected = String.format(\"Hello %s!\", name);\n+    String jsonStr = String.format(\"{'data': {'data': '%s'}}\", nameBase64);\n+\n+    HttpPost postRequest =  new HttpPost(URI.create(functionUrl));\n+    postRequest.setEntity(new StringEntity(jsonStr));\n+\n+    // The Functions Framework Maven plugin process takes time to start up\n+    // Use resilience4j to retry the test HTTP request until the plugin responds\n+    RetryRegistry registry = RetryRegistry.of(RetryConfig.custom()\n+        .maxAttempts(8)\n+        .retryExceptions(HttpHostConnectException.class)\n+        .intervalFunction(IntervalFunction.ofExponentialBackoff(200, 2))\n+        .build());\n+    Retry retry = registry.retry(\"my\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dfd05401b94a2d0ffdf8f46ecb84589415b2111"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk2ODI3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String filter = \"resource.type=\\\"cloud_function\\\"\";\n          \n          \n            \n                filter += \" AND severity=INFO\";\n          \n          \n            \n                filter += \" AND resource.labels.function_name=\" + FUNCTION_DEPLOYED_NAME;\n          \n          \n            \n                filter += String.format(\" AND timestamp>=\\\"%s\\\"\", startTimestamp);\n          \n          \n            \n                String filter = \"resource.type=\\\"cloud_function\\\"\"\n          \n          \n            \n                    + \" AND severity=INFO\"\n          \n          \n            \n                    + \" AND resource.labels.function_name=\" + FUNCTION_DEPLOYED_NAME\n          \n          \n            \n                    +  String.format(\" AND timestamp>=\\\"%s\\\"\", startTimestamp);", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2726#discussion_r412968276", "createdAt": "2020-04-22T13:11:09Z", "author": {"login": "kurtisvg"}, "path": "functions/helloworld/hello-pub-sub/src/test/java/functions/ExampleSystemTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package functions;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.logging.LogEntry;\n+import com.google.cloud.logging.Logging;\n+import com.google.cloud.logging.LoggingOptions;\n+import com.google.cloud.pubsub.v1.Publisher;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.ProjectTopicName;\n+import com.google.pubsub.v1.PubsubMessage;\n+import io.github.resilience4j.core.IntervalFunction;\n+import io.github.resilience4j.retry.Retry;\n+import io.github.resilience4j.retry.RetryConfig;\n+import io.github.resilience4j.retry.RetryRegistry;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeFormatter;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class ExampleSystemTest {\n+\n+  // TODO<developer>: set these values (as environment variables, or hard-coded into your test)\n+  private static final String PROJECT_ID = System.getenv(\"GCP_PROJECT\");\n+  private static final String TOPIC_NAME = System.getenv(\"FUNCTIONS_SYSTEM_TEST_TOPIC\");\n+  private static final String FUNCTION_DEPLOYED_NAME = \"HelloPubSub\";\n+\n+  private static Logging loggingClient;\n+\n+  private static Publisher publisher;\n+\n+  private HelloPubSub sampleUnderTest;\n+\n+  @BeforeClass\n+  public static void setUp() throws IOException {\n+    loggingClient = LoggingOptions.getDefaultInstance().getService();\n+    publisher = Publisher.newBuilder(\n+        ProjectTopicName.of(PROJECT_ID, TOPIC_NAME)).build();\n+  }\n+\n+  private static String getLogEntriesAsString(String startTimestamp) {\n+    // Construct Stackdriver logging filter\n+    // See this page for more info: https://cloud.google.com/logging/docs/view/advanced-queries\n+    String filter = \"resource.type=\\\"cloud_function\\\"\";\n+    filter += \" AND severity=INFO\";\n+    filter += \" AND resource.labels.function_name=\" + FUNCTION_DEPLOYED_NAME;\n+    filter += String.format(\" AND timestamp>=\\\"%s\\\"\", startTimestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dfd05401b94a2d0ffdf8f46ecb84589415b2111"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk3MTAxNg==", "bodyText": "Let's not tell users to hard code configuration values into their code.\nIf you want to point them to something helpful, consider linking to SecretManager.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2726#discussion_r412971016", "createdAt": "2020-04-22T13:14:34Z", "author": {"login": "kurtisvg"}, "path": "functions/helloworld/hello-pub-sub/src/test/java/functions/ExampleSystemTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package functions;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.logging.LogEntry;\n+import com.google.cloud.logging.Logging;\n+import com.google.cloud.logging.LoggingOptions;\n+import com.google.cloud.pubsub.v1.Publisher;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.ProjectTopicName;\n+import com.google.pubsub.v1.PubsubMessage;\n+import io.github.resilience4j.core.IntervalFunction;\n+import io.github.resilience4j.retry.Retry;\n+import io.github.resilience4j.retry.RetryConfig;\n+import io.github.resilience4j.retry.RetryRegistry;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.format.DateTimeFormatter;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class ExampleSystemTest {\n+\n+  // TODO<developer>: set these values (as environment variables, or hard-coded into your test)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dfd05401b94a2d0ffdf8f46ecb84589415b2111"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "513499bcf717da6b47b7edc9727639ed4db0c482", "author": {"user": {"login": "ace-n", "name": "Ace Nassri"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/513499bcf717da6b47b7edc9727639ed4db0c482", "committedDate": "2020-04-23T20:31:37Z", "message": "Apply bugfixes from HTTP PR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f27e0531d869386eadef5390adee812220a2fd3", "author": {"user": {"login": "ace-n", "name": "Ace Nassri"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/6f27e0531d869386eadef5390adee812220a2fd3", "committedDate": "2020-04-23T20:41:26Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe323981ff89d1b9415a940abdc1d59a1a05a4f6", "author": {"user": {"login": "ace-n", "name": "Ace Nassri"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/fe323981ff89d1b9415a940abdc1d59a1a05a4f6", "committedDate": "2020-04-23T20:46:38Z", "message": "Update deps"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e8ba246848563ebd6b462f23e735f6b28771ceb", "author": {"user": {"login": "ace-n", "name": "Ace Nassri"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/7e8ba246848563ebd6b462f23e735f6b28771ceb", "committedDate": "2020-04-23T21:41:10Z", "message": "Increase system test retry count"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f36bd7be809c3befb3290334a83173f5a34c12dc", "author": {"user": {"login": "ace-n", "name": "Ace Nassri"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/f36bd7be809c3befb3290334a83173f5a34c12dc", "committedDate": "2020-04-23T22:20:29Z", "message": "Add region tags"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6605541a1f24e5e91887692adfdf96158d9908e2", "author": {"user": {"login": "ace-n", "name": "Ace Nassri"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/6605541a1f24e5e91887692adfdf96158d9908e2", "committedDate": "2020-04-23T22:47:45Z", "message": "Revert \"Increase system test retry count\"\n\nThis reverts commit 7e8ba246848563ebd6b462f23e735f6b28771ceb."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f519979ba50a1cb5f75fb48a98310f15fe01e879", "author": {"user": {"login": "ace-n", "name": "Ace Nassri"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/f519979ba50a1cb5f75fb48a98310f15fe01e879", "committedDate": "2020-04-23T23:25:10Z", "message": "Use gson for json formatting instead of raw strings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6526e8fc573c3cbdefa3b2516437aa18eb5fee92", "author": {"user": {"login": "ace-n", "name": "Ace Nassri"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/6526e8fc573c3cbdefa3b2516437aa18eb5fee92", "committedDate": "2020-04-23T23:49:50Z", "message": "Add region tags"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NTYyODkw", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2726#pullrequestreview-399562890", "createdAt": "2020-04-24T00:20:40Z", "commit": {"oid": "6526e8fc573c3cbdefa3b2516437aa18eb5fee92"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e285fe8842f545832392848603b9e6ef179a3ec", "author": {"user": {"login": "ace-n", "name": "Ace Nassri"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/0e285fe8842f545832392848603b9e6ef179a3ec", "committedDate": "2020-04-24T01:05:05Z", "message": "Fix checkstyle"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 759, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}