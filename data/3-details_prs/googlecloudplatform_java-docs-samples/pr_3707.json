{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1MjM1MDQx", "number": 3707, "title": "samples: add standalone numeric samples for Spanner", "bodyText": "Adds standalone samples for the new NUMERIC data type for Spanner.", "createdAt": "2020-09-11T16:18:05Z", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3707", "merged": true, "mergeCommit": {"oid": "1b93c01881ad9ea9d0e26671574c1ba0a0f55444"}, "closed": true, "closedAt": "2020-09-22T00:23:44Z", "author": {"login": "olavloite"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdH30oJAH2gAyNDg1MjM1MDQxOjA2NDZiYTM1YTYyOWE1Y2JmMDNiN2M4OWEwMjYzMjZkN2NlODkzNTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLF2CWgH2gAyNDg1MjM1MDQxOjNhZjZjMGUyMzQwMWUwYjllMjY2ZDM3OWJhYTBmM2YwMzhlY2U3YTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0646ba35a629a5cbf03b7c89a026326d7ce89358", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/0646ba35a629a5cbf03b7c89a026326d7ce89358", "committedDate": "2020-09-11T16:16:58Z", "message": "samples: add standalone numeric samples for Spanner"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2OTg5MDk0", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3707#pullrequestreview-486989094", "createdAt": "2020-09-11T17:24:01Z", "commit": {"oid": "0646ba35a629a5cbf03b7c89a026326d7ce89358"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNzoyNDowMVrOHQna6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNzoyNDowMVrOHQna6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE4NTEzMA==", "bodyText": "If you aren't handling exceptions, there is no reason to catch them.\nSee Sample Style Guide.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3707#discussion_r487185130", "createdAt": "2020-09-11T17:24:01Z", "author": {"login": "lesv"}, "path": "spanner/cloud-client/src/main/java/com/example/spanner/AddNumericColumnSample.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.spanner;\n+\n+//[START spanner_add_numeric_column]\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.Spanner;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.common.collect.ImmutableList;\n+import com.google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata;\n+import java.util.concurrent.ExecutionException;\n+\n+class AddNumericColumnSample {\n+\n+  static void addNumericColumn() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"my-project\";\n+    String instanceId = \"my-instance\";\n+    String databaseId = \"my-database\";\n+\n+    try (Spanner spanner =\n+        SpannerOptions.newBuilder().setProjectId(projectId).build().getService()) {\n+      DatabaseAdminClient adminClient = spanner.getDatabaseAdminClient();\n+      addNumericColumn(adminClient, instanceId, databaseId);\n+    }\n+  }\n+\n+  static void addNumericColumn(\n+      DatabaseAdminClient adminClient, String instanceId, String databaseId) {\n+    OperationFuture<Void, UpdateDatabaseDdlMetadata> operation =\n+        adminClient.updateDatabaseDdl(\n+            instanceId,\n+            databaseId,\n+            ImmutableList.of(\"ALTER TABLE Venues ADD COLUMN Revenue NUMERIC\"),\n+            null);\n+    try {\n+      operation.get();\n+      System.out.printf(\"Successfully added column `Revenue`%n\");\n+    } catch (ExecutionException e) {\n+      System.out.printf(\"Adding column `Revenue` failed: %s%n\", e.getCause().getMessage());\n+    } catch (InterruptedException e) {\n+      System.out.printf(\"Adding column `Revenue` was interrupted%n\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0646ba35a629a5cbf03b7c89a026326d7ce89358"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MjkxODE5", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3707#pullrequestreview-488291819", "createdAt": "2020-09-15T03:10:21Z", "commit": {"oid": "0646ba35a629a5cbf03b7c89a026326d7ce89358"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MzUwNzUw", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3707#pullrequestreview-488350750", "createdAt": "2020-09-15T06:07:44Z", "commit": {"oid": "0646ba35a629a5cbf03b7c89a026326d7ce89358"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNjowNzo0NFrOHRyEvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNjoxNjoxMlrOHRyR6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQwODI1NQ==", "bodyText": "Updated tag to match the timestamp sample.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // [START spanner_update_data_with_numeric]\n          \n          \n            \n            // [START spanner_update_data_with_numeric_column]", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3707#discussion_r488408255", "createdAt": "2020-09-15T06:07:44Z", "author": {"login": "larkee"}, "path": "spanner/cloud-client/src/main/java/com/example/spanner/InsertNumericDataSample.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.spanner;\n+\n+// [START spanner_update_data_with_numeric]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0646ba35a629a5cbf03b7c89a026326d7ce89358"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQwODUxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .to(1L)\n          \n          \n            \n                            .to(4L)", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3707#discussion_r488408511", "createdAt": "2020-09-15T06:08:24Z", "author": {"login": "larkee"}, "path": "spanner/cloud-client/src/main/java/com/example/spanner/InsertNumericDataSample.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.spanner;\n+\n+// [START spanner_update_data_with_numeric]\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.Mutation;\n+import com.google.cloud.spanner.Spanner;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.common.collect.ImmutableList;\n+import java.math.BigDecimal;\n+\n+class InsertNumericDataSample {\n+\n+  static void insertNumericData() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"my-project\";\n+    String instanceId = \"my-instance\";\n+    String databaseId = \"my-database\";\n+\n+    try (Spanner spanner =\n+        SpannerOptions.newBuilder().setProjectId(projectId).build().getService()) {\n+      DatabaseClient client =\n+          spanner.getDatabaseClient(DatabaseId.of(projectId, instanceId, databaseId));\n+      insertNumericData(client);\n+    }\n+  }\n+\n+  static void insertNumericData(DatabaseClient client) {\n+    client.write(\n+        ImmutableList.of(\n+            Mutation.newInsertOrUpdateBuilder(\"SingerRevenues\")\n+                .set(\"SingerId\")\n+                .to(1L)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0646ba35a629a5cbf03b7c89a026326d7ce89358"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQwODYxMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .to(6L)\n          \n          \n            \n                            .to(19L)", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3707#discussion_r488408610", "createdAt": "2020-09-15T06:08:43Z", "author": {"login": "larkee"}, "path": "spanner/cloud-client/src/main/java/com/example/spanner/InsertNumericDataSample.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.spanner;\n+\n+// [START spanner_update_data_with_numeric]\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.Mutation;\n+import com.google.cloud.spanner.Spanner;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.common.collect.ImmutableList;\n+import java.math.BigDecimal;\n+\n+class InsertNumericDataSample {\n+\n+  static void insertNumericData() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"my-project\";\n+    String instanceId = \"my-instance\";\n+    String databaseId = \"my-database\";\n+\n+    try (Spanner spanner =\n+        SpannerOptions.newBuilder().setProjectId(projectId).build().getService()) {\n+      DatabaseClient client =\n+          spanner.getDatabaseClient(DatabaseId.of(projectId, instanceId, databaseId));\n+      insertNumericData(client);\n+    }\n+  }\n+\n+  static void insertNumericData(DatabaseClient client) {\n+    client.write(\n+        ImmutableList.of(\n+            Mutation.newInsertOrUpdateBuilder(\"SingerRevenues\")\n+                .set(\"SingerId\")\n+                .to(1L)\n+                .set(\"Revenue\")\n+                .to(new BigDecimal(\"35000\"))\n+                .build(),\n+            Mutation.newInsertOrUpdateBuilder(\"SingerRevenues\")\n+                .set(\"SingerId\")\n+                .to(6L)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0646ba35a629a5cbf03b7c89a026326d7ce89358"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQwODY4Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .to(14L)\n          \n          \n            \n                            .to(42L)", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3707#discussion_r488408686", "createdAt": "2020-09-15T06:08:54Z", "author": {"login": "larkee"}, "path": "spanner/cloud-client/src/main/java/com/example/spanner/InsertNumericDataSample.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.spanner;\n+\n+// [START spanner_update_data_with_numeric]\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.Mutation;\n+import com.google.cloud.spanner.Spanner;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.common.collect.ImmutableList;\n+import java.math.BigDecimal;\n+\n+class InsertNumericDataSample {\n+\n+  static void insertNumericData() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"my-project\";\n+    String instanceId = \"my-instance\";\n+    String databaseId = \"my-database\";\n+\n+    try (Spanner spanner =\n+        SpannerOptions.newBuilder().setProjectId(projectId).build().getService()) {\n+      DatabaseClient client =\n+          spanner.getDatabaseClient(DatabaseId.of(projectId, instanceId, databaseId));\n+      insertNumericData(client);\n+    }\n+  }\n+\n+  static void insertNumericData(DatabaseClient client) {\n+    client.write(\n+        ImmutableList.of(\n+            Mutation.newInsertOrUpdateBuilder(\"SingerRevenues\")\n+                .set(\"SingerId\")\n+                .to(1L)\n+                .set(\"Revenue\")\n+                .to(new BigDecimal(\"35000\"))\n+                .build(),\n+            Mutation.newInsertOrUpdateBuilder(\"SingerRevenues\")\n+                .set(\"SingerId\")\n+                .to(6L)\n+                .set(\"Revenue\")\n+                .to(new BigDecimal(\"104500\"))\n+                .build(),\n+            Mutation.newInsertOrUpdateBuilder(\"SingerRevenues\")\n+                .set(\"SingerId\")\n+                .to(14L)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0646ba35a629a5cbf03b7c89a026326d7ce89358"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQxMDQwNA==", "bodyText": "References to Insert should be updated to Update to match the sample tag. The VenueId values should also be updated (as per the suggestions) to match existing rows in the table.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3707#discussion_r488410404", "createdAt": "2020-09-15T06:13:16Z", "author": {"login": "larkee"}, "path": "spanner/cloud-client/src/main/java/com/example/spanner/InsertNumericDataSample.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.spanner;\n+\n+// [START spanner_update_data_with_numeric]\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.Mutation;\n+import com.google.cloud.spanner.Spanner;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.common.collect.ImmutableList;\n+import java.math.BigDecimal;\n+\n+class InsertNumericDataSample {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0646ba35a629a5cbf03b7c89a026326d7ce89358"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQxMTM3Mg==", "bodyText": "Would the table not already having this entries from the previous test?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3707#discussion_r488411372", "createdAt": "2020-09-15T06:15:35Z", "author": {"login": "larkee"}, "path": "spanner/cloud-client/src/test/java/com/example/spanner/SpannerStandaloneExamplesIT.java", "diffHunk": "@@ -100,6 +119,57 @@ public void executeSqlWithCustomTimeoutAndRetrySettings_shouldWriteData() {\n     assertThat(out).contains(\"1 record inserted.\");\n   }\n \n+  @Test\n+  public void addNumericColumn_shouldSuccessfullyAddColumn() {\n+    String out =\n+        runExample(\n+            () ->\n+                AddNumericColumnSample.addNumericColumn(\n+                    spanner.getDatabaseAdminClient(), instanceId, databaseId));\n+    assertThat(out).contains(\"Successfully added column `Revenue`\");\n+  }\n+\n+  @Test\n+  public void insertNumericData_shouldWriteData() {\n+    String projectId = spanner.getOptions().getProjectId();\n+    String out =\n+        runExample(\n+            () ->\n+                InsertNumericDataSample.insertNumericData(\n+                    spanner.getDatabaseClient(DatabaseId.of(projectId, instanceId, databaseId))));\n+    assertThat(out).contains(\"Records successfully inserted\");\n+  }\n+\n+  @Test\n+  public void queryWithNumericParameter_shouldReturnResults() {\n+    String projectId = spanner.getOptions().getProjectId();\n+    DatabaseClient client =\n+        spanner.getDatabaseClient(DatabaseId.of(projectId, instanceId, databaseId));\n+    client.write(\n+        ImmutableList.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0646ba35a629a5cbf03b7c89a026326d7ce89358"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQxMTYyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // [END spanner_update_data_with_numeric]\n          \n          \n            \n            // [END spanner_update_data_with_numeric_column]", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3707#discussion_r488411624", "createdAt": "2020-09-15T06:16:12Z", "author": {"login": "larkee"}, "path": "spanner/cloud-client/src/main/java/com/example/spanner/InsertNumericDataSample.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.spanner;\n+\n+// [START spanner_update_data_with_numeric]\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.Mutation;\n+import com.google.cloud.spanner.Spanner;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.common.collect.ImmutableList;\n+import java.math.BigDecimal;\n+\n+class InsertNumericDataSample {\n+\n+  static void insertNumericData() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"my-project\";\n+    String instanceId = \"my-instance\";\n+    String databaseId = \"my-database\";\n+\n+    try (Spanner spanner =\n+        SpannerOptions.newBuilder().setProjectId(projectId).build().getService()) {\n+      DatabaseClient client =\n+          spanner.getDatabaseClient(DatabaseId.of(projectId, instanceId, databaseId));\n+      insertNumericData(client);\n+    }\n+  }\n+\n+  static void insertNumericData(DatabaseClient client) {\n+    client.write(\n+        ImmutableList.of(\n+            Mutation.newInsertOrUpdateBuilder(\"SingerRevenues\")\n+                .set(\"SingerId\")\n+                .to(1L)\n+                .set(\"Revenue\")\n+                .to(new BigDecimal(\"35000\"))\n+                .build(),\n+            Mutation.newInsertOrUpdateBuilder(\"SingerRevenues\")\n+                .set(\"SingerId\")\n+                .to(6L)\n+                .set(\"Revenue\")\n+                .to(new BigDecimal(\"104500\"))\n+                .build(),\n+            Mutation.newInsertOrUpdateBuilder(\"SingerRevenues\")\n+                .set(\"SingerId\")\n+                .to(14L)\n+                .set(\"Revenue\")\n+                .to(new BigDecimal(\"99999999999999999999999999999.99\"))\n+                .build()));\n+    System.out.println(\"Records successfully inserted\");\n+  }\n+}\n+// [END spanner_update_data_with_numeric]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0646ba35a629a5cbf03b7c89a026326d7ce89358"}, "originalPosition": 68}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e76333f8ffb7b8d8e0b193e27c663dd1214d13f", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/1e76333f8ffb7b8d8e0b193e27c663dd1214d13f", "committedDate": "2020-09-15T16:05:06Z", "message": "fix: review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a430388006d2b2c8b0d65f6bf04143dde5e87c1a", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/a430388006d2b2c8b0d65f6bf04143dde5e87c1a", "committedDate": "2020-09-15T16:20:11Z", "message": "chore: format code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MDUwMjUx", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3707#pullrequestreview-489050251", "createdAt": "2020-09-15T20:35:35Z", "commit": {"oid": "a430388006d2b2c8b0d65f6bf04143dde5e87c1a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyNTY1MjE2", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3707#pullrequestreview-492565216", "createdAt": "2020-09-21T12:48:28Z", "commit": {"oid": "a430388006d2b2c8b0d65f6bf04143dde5e87c1a"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMjo0ODoyOFrOHVOVig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMjo0OTo0MFrOHVOYxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAxNzAzNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                System.out.println(\"Records successfully updated\");\n          \n          \n            \n                System.out.println(\"Venues successfully updated\");", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3707#discussion_r492017034", "createdAt": "2020-09-21T12:48:28Z", "author": {"login": "larkee"}, "path": "spanner/cloud-client/src/main/java/com/example/spanner/UpdateNumericDataSample.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.spanner;\n+\n+// [START spanner_update_data_with_numeric_column]\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.Mutation;\n+import com.google.cloud.spanner.Spanner;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.common.collect.ImmutableList;\n+import java.math.BigDecimal;\n+\n+class UpdateNumericDataSample {\n+\n+  static void updateNumericData() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"my-project\";\n+    String instanceId = \"my-instance\";\n+    String databaseId = \"my-database\";\n+\n+    try (Spanner spanner =\n+        SpannerOptions.newBuilder().setProjectId(projectId).build().getService()) {\n+      DatabaseClient client =\n+          spanner.getDatabaseClient(DatabaseId.of(projectId, instanceId, databaseId));\n+      updateNumericData(client);\n+    }\n+  }\n+\n+  static void updateNumericData(DatabaseClient client) {\n+    client.write(\n+        ImmutableList.of(\n+            Mutation.newInsertOrUpdateBuilder(\"Venues\")\n+                .set(\"VenueId\")\n+                .to(4L)\n+                .set(\"Revenue\")\n+                .to(new BigDecimal(\"35000\"))\n+                .build(),\n+            Mutation.newInsertOrUpdateBuilder(\"Venues\")\n+                .set(\"VenueId\")\n+                .to(19L)\n+                .set(\"Revenue\")\n+                .to(new BigDecimal(\"104500\"))\n+                .build(),\n+            Mutation.newInsertOrUpdateBuilder(\"Venues\")\n+                .set(\"VenueId\")\n+                .to(42L)\n+                .set(\"Revenue\")\n+                .to(new BigDecimal(\"99999999999999999999999999999.99\"))\n+                .build()));\n+    System.out.println(\"Records successfully updated\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a430388006d2b2c8b0d65f6bf04143dde5e87c1a"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAxNzg2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assertThat(out).contains(\"Records successfully updated\");\n          \n          \n            \n                assertThat(out).contains(\"Venues successfully updated\");", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3707#discussion_r492017862", "createdAt": "2020-09-21T12:49:40Z", "author": {"login": "larkee"}, "path": "spanner/cloud-client/src/test/java/com/example/spanner/SpannerStandaloneExamplesIT.java", "diffHunk": "@@ -100,6 +121,75 @@ public void executeSqlWithCustomTimeoutAndRetrySettings_shouldWriteData() {\n     assertThat(out).contains(\"1 record inserted.\");\n   }\n \n+  @Test\n+  public void addNumericColumn_shouldSuccessfullyAddColumn()\n+      throws InterruptedException, ExecutionException {\n+    OperationFuture<Void, UpdateDatabaseDdlMetadata> operation =\n+        spanner\n+            .getDatabaseAdminClient()\n+            .updateDatabaseDdl(\n+                instanceId,\n+                databaseId,\n+                ImmutableList.of(\"ALTER TABLE Venues DROP COLUMN Revenue\"),\n+                null);\n+    operation.get();\n+    String out =\n+        runExample(\n+            () -> {\n+              try {\n+                AddNumericColumnSample.addNumericColumn(\n+                    spanner.getDatabaseAdminClient(), instanceId, databaseId);\n+              } catch (ExecutionException e) {\n+                System.out.printf(\n+                    \"Adding column `Revenue` failed: %s%n\", e.getCause().getMessage());\n+              } catch (InterruptedException e) {\n+                System.out.printf(\"Adding column `Revenue` was interrupted%n\");\n+              }\n+            });\n+    assertThat(out).contains(\"Successfully added column `Revenue`\");\n+  }\n+\n+  @Test\n+  public void updateNumericData_shouldWriteData() {\n+    String projectId = spanner.getOptions().getProjectId();\n+    String out =\n+        runExample(\n+            () ->\n+                UpdateNumericDataSample.updateNumericData(\n+                    spanner.getDatabaseClient(DatabaseId.of(projectId, instanceId, databaseId))));\n+    assertThat(out).contains(\"Records successfully updated\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a430388006d2b2c8b0d65f6bf04143dde5e87c1a"}, "originalPosition": 95}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1fc6e104bf44b1d1717bd2cc1284bc993f9bb94", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/e1fc6e104bf44b1d1717bd2cc1284bc993f9bb94", "committedDate": "2020-09-21T16:18:47Z", "message": "fix: print Venues instead of Records\n\nCo-authored-by: larkee <31196561+larkee@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3af6c0e23401e0b9e266d379baa0f3f038ece7a7", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/3af6c0e23401e0b9e266d379baa0f3f038ece7a7", "committedDate": "2020-09-21T16:18:57Z", "message": "fix: print Venues instead of Records\n\nCo-authored-by: larkee <31196561+larkee@users.noreply.github.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 473, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}