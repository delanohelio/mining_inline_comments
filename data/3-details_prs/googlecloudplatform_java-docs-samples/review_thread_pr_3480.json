{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0MzEyOTAz", "number": 3480, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNTozMjo1NlrOEW2Eow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMDoxMDo0NVrOEXAaFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMzkwMDUxOnYy", "diffSide": "RIGHT", "path": "pubsub/spring/src/main/java/demo/PubSubApplication.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNTozMjo1NlrOG-TyIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzo0NzoyMVrOG-jelg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk4OTAyNA==", "bodyText": "Ok, but shouldn't this be somewhere earlier - possibly as a classvar or static so it gets reused?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3480#discussion_r467989024", "createdAt": "2020-08-10T15:32:56Z", "author": {"login": "lesv"}, "path": "pubsub/spring/src/main/java/demo/PubSubApplication.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package demo;\n+\n+import java.util.Random;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import java.util.stream.Stream;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.cloud.gcp.pubsub.core.PubSubTemplate;\n+import org.springframework.cloud.gcp.pubsub.integration.AckMode;\n+import org.springframework.cloud.gcp.pubsub.integration.inbound.PubSubInboundChannelAdapter;\n+import org.springframework.cloud.gcp.pubsub.integration.outbound.PubSubMessageHandler;\n+import org.springframework.cloud.gcp.pubsub.support.BasicAcknowledgeablePubsubMessage;\n+import org.springframework.cloud.gcp.pubsub.support.GcpPubSubHeaders;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.integration.annotation.ServiceActivator;\n+import org.springframework.integration.channel.PublishSubscribeChannel;\n+import org.springframework.integration.support.MessageBuilder;\n+import org.springframework.messaging.Message;\n+import org.springframework.messaging.MessageChannel;\n+import org.springframework.messaging.MessageHandler;\n+import org.springframework.messaging.handler.annotation.Header;\n+import org.springframework.util.concurrent.ListenableFutureCallback;\n+import reactor.core.publisher.Flux;\n+import reactor.core.scheduler.Schedulers;\n+\n+@SpringBootApplication\n+public class PubSubApplication {\n+\n+  private static final Log LOGGER = LogFactory.getLog(PubSubApplication.class);\n+\n+  public static void main(String[] args) {\n+    SpringApplication.run(PubSubApplication.class, args);\n+  }\n+\n+  // [START pubsub_spring_inbound_channel_adapter]\n+  // Create a message channel for messages arriving from the subscription `sub-one`.\n+  @Bean\n+  public MessageChannel inputMessageChannelForSubOne() {\n+    return new PublishSubscribeChannel();\n+  }\n+\n+  // Create an inbound channel adapter to listen to the subscription `sub-one` and send\n+  // messages to the input message channel.\n+  @Bean\n+  public PubSubInboundChannelAdapter inboundChannelAdapter(\n+      @Qualifier(\"inputMessageChannelForSubOne\") MessageChannel messageChannel,\n+      PubSubTemplate pubSubTemplate) {\n+    PubSubInboundChannelAdapter adapter =\n+        new PubSubInboundChannelAdapter(pubSubTemplate, \"sub-one\");\n+    adapter.setOutputChannel(messageChannel);\n+    adapter.setAckMode(AckMode.MANUAL);\n+    adapter.setPayloadType(String.class);\n+    return adapter;\n+  }\n+\n+  // Define what happens to the messages arriving in the message channel.\n+  @ServiceActivator(inputChannel = \"inputMessageChannelForSubOne\")\n+  public void messageReceiver(\n+      String payload,\n+      @Header(GcpPubSubHeaders.ORIGINAL_MESSAGE) BasicAcknowledgeablePubsubMessage message) {\n+    LOGGER.info(\"Message arrived via an inbound channel adapter from sub-one! Payload: \" + payload);\n+    message.ack();\n+  }\n+  // [END pubsub_spring_inbound_channel_adapter]\n+\n+  // [START pubsub_spring_outbound_channel_adapter]\n+  // Create an outbound channel adapter to send messages from the input message channel to the\n+  // topic `topic-two`.\n+  @Bean\n+  @ServiceActivator(inputChannel = \"inputMessageChannelForSubOne\")\n+  public MessageHandler messageSender(PubSubTemplate pubsubTemplate) {\n+    PubSubMessageHandler adapter = new PubSubMessageHandler(pubsubTemplate, \"topic-two\");\n+\n+    adapter.setPublishCallback(\n+        new ListenableFutureCallback<String>() {\n+          @Override\n+          public void onFailure(Throwable throwable) {\n+            LOGGER.info(\"There was an error sending the message.\");\n+          }\n+\n+          @Override\n+          public void onSuccess(String result) {\n+            LOGGER.info(\"Message was sent via the outbound channel adapter to topic-two!\");\n+          }\n+        });\n+    return adapter;\n+  }\n+  // [END pubsub_spring_outbound_channel_adapter]\n+\n+  // [START pubsub_spring_cloud_stream_input_binder]\n+  // Create an input binder to receive messages from `topic-two` using a Consumer bean.\n+  @Bean\n+  public Consumer<Message<String>> receiveMessageFromTopicTwo() {\n+    return message -> {\n+      LOGGER.info(\n+          \"Message arrived via an input binder from topic-two! Payload: \" + message.getPayload());\n+    };\n+  }\n+  // [END pubsub_spring_cloud_stream_input_binder]\n+\n+  // [START pubsub_spring_cloud_stream_output_binder]\n+  // Create an output binder to send messages to `topic-one` using a Supplier bean.\n+  @Bean\n+  public Supplier<Flux<Message<String>>> sendMessageToTopicOne() {\n+    return () ->\n+        Flux.fromStream(\n+                // Generate a stream that sends a numbered message every 10 seconds.\n+                Stream.generate(\n+                    new Supplier<Message<String>>() {\n+                      @Override\n+                      public Message<String> get() {\n+                        try {\n+                          Thread.sleep(10000);\n+                        } finally {\n+                          Random rand = new Random();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a10149d1da3a0af426f93bd938c170f0ad0e5a60"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0NjE2Ng==", "bodyText": "Sounds good. Updated.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3480#discussion_r468246166", "createdAt": "2020-08-10T23:47:21Z", "author": {"login": "anguillanneuf"}, "path": "pubsub/spring/src/main/java/demo/PubSubApplication.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package demo;\n+\n+import java.util.Random;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import java.util.stream.Stream;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.cloud.gcp.pubsub.core.PubSubTemplate;\n+import org.springframework.cloud.gcp.pubsub.integration.AckMode;\n+import org.springframework.cloud.gcp.pubsub.integration.inbound.PubSubInboundChannelAdapter;\n+import org.springframework.cloud.gcp.pubsub.integration.outbound.PubSubMessageHandler;\n+import org.springframework.cloud.gcp.pubsub.support.BasicAcknowledgeablePubsubMessage;\n+import org.springframework.cloud.gcp.pubsub.support.GcpPubSubHeaders;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.integration.annotation.ServiceActivator;\n+import org.springframework.integration.channel.PublishSubscribeChannel;\n+import org.springframework.integration.support.MessageBuilder;\n+import org.springframework.messaging.Message;\n+import org.springframework.messaging.MessageChannel;\n+import org.springframework.messaging.MessageHandler;\n+import org.springframework.messaging.handler.annotation.Header;\n+import org.springframework.util.concurrent.ListenableFutureCallback;\n+import reactor.core.publisher.Flux;\n+import reactor.core.scheduler.Schedulers;\n+\n+@SpringBootApplication\n+public class PubSubApplication {\n+\n+  private static final Log LOGGER = LogFactory.getLog(PubSubApplication.class);\n+\n+  public static void main(String[] args) {\n+    SpringApplication.run(PubSubApplication.class, args);\n+  }\n+\n+  // [START pubsub_spring_inbound_channel_adapter]\n+  // Create a message channel for messages arriving from the subscription `sub-one`.\n+  @Bean\n+  public MessageChannel inputMessageChannelForSubOne() {\n+    return new PublishSubscribeChannel();\n+  }\n+\n+  // Create an inbound channel adapter to listen to the subscription `sub-one` and send\n+  // messages to the input message channel.\n+  @Bean\n+  public PubSubInboundChannelAdapter inboundChannelAdapter(\n+      @Qualifier(\"inputMessageChannelForSubOne\") MessageChannel messageChannel,\n+      PubSubTemplate pubSubTemplate) {\n+    PubSubInboundChannelAdapter adapter =\n+        new PubSubInboundChannelAdapter(pubSubTemplate, \"sub-one\");\n+    adapter.setOutputChannel(messageChannel);\n+    adapter.setAckMode(AckMode.MANUAL);\n+    adapter.setPayloadType(String.class);\n+    return adapter;\n+  }\n+\n+  // Define what happens to the messages arriving in the message channel.\n+  @ServiceActivator(inputChannel = \"inputMessageChannelForSubOne\")\n+  public void messageReceiver(\n+      String payload,\n+      @Header(GcpPubSubHeaders.ORIGINAL_MESSAGE) BasicAcknowledgeablePubsubMessage message) {\n+    LOGGER.info(\"Message arrived via an inbound channel adapter from sub-one! Payload: \" + payload);\n+    message.ack();\n+  }\n+  // [END pubsub_spring_inbound_channel_adapter]\n+\n+  // [START pubsub_spring_outbound_channel_adapter]\n+  // Create an outbound channel adapter to send messages from the input message channel to the\n+  // topic `topic-two`.\n+  @Bean\n+  @ServiceActivator(inputChannel = \"inputMessageChannelForSubOne\")\n+  public MessageHandler messageSender(PubSubTemplate pubsubTemplate) {\n+    PubSubMessageHandler adapter = new PubSubMessageHandler(pubsubTemplate, \"topic-two\");\n+\n+    adapter.setPublishCallback(\n+        new ListenableFutureCallback<String>() {\n+          @Override\n+          public void onFailure(Throwable throwable) {\n+            LOGGER.info(\"There was an error sending the message.\");\n+          }\n+\n+          @Override\n+          public void onSuccess(String result) {\n+            LOGGER.info(\"Message was sent via the outbound channel adapter to topic-two!\");\n+          }\n+        });\n+    return adapter;\n+  }\n+  // [END pubsub_spring_outbound_channel_adapter]\n+\n+  // [START pubsub_spring_cloud_stream_input_binder]\n+  // Create an input binder to receive messages from `topic-two` using a Consumer bean.\n+  @Bean\n+  public Consumer<Message<String>> receiveMessageFromTopicTwo() {\n+    return message -> {\n+      LOGGER.info(\n+          \"Message arrived via an input binder from topic-two! Payload: \" + message.getPayload());\n+    };\n+  }\n+  // [END pubsub_spring_cloud_stream_input_binder]\n+\n+  // [START pubsub_spring_cloud_stream_output_binder]\n+  // Create an output binder to send messages to `topic-one` using a Supplier bean.\n+  @Bean\n+  public Supplier<Flux<Message<String>>> sendMessageToTopicOne() {\n+    return () ->\n+        Flux.fromStream(\n+                // Generate a stream that sends a numbered message every 10 seconds.\n+                Stream.generate(\n+                    new Supplier<Message<String>>() {\n+                      @Override\n+                      public Message<String> get() {\n+                        try {\n+                          Thread.sleep(10000);\n+                        } finally {\n+                          Random rand = new Random();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk4OTAyNA=="}, "originalCommit": {"oid": "a10149d1da3a0af426f93bd938c170f0ad0e5a60"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTU5MzgzOnYy", "diffSide": "RIGHT", "path": "pubsub/spring/src/main/java/demo/PubSubApplication.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMDoxMDo0NVrOG-j6Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMDozNDowMlrOG-kTVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1MzI0Mw==", "bodyText": "LOL - I was meaning consider making rand static or a class variable.  https://docs.oracle.com/javase/8/docs/api/java/util/Random.html\nIt's a bit heavyweight.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3480#discussion_r468253243", "createdAt": "2020-08-11T00:10:45Z", "author": {"login": "lesv"}, "path": "pubsub/spring/src/main/java/demo/PubSubApplication.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package demo;\n+\n+import java.util.Random;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import java.util.stream.Stream;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.cloud.gcp.pubsub.core.PubSubTemplate;\n+import org.springframework.cloud.gcp.pubsub.integration.AckMode;\n+import org.springframework.cloud.gcp.pubsub.integration.inbound.PubSubInboundChannelAdapter;\n+import org.springframework.cloud.gcp.pubsub.integration.outbound.PubSubMessageHandler;\n+import org.springframework.cloud.gcp.pubsub.support.BasicAcknowledgeablePubsubMessage;\n+import org.springframework.cloud.gcp.pubsub.support.GcpPubSubHeaders;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.integration.annotation.ServiceActivator;\n+import org.springframework.integration.channel.PublishSubscribeChannel;\n+import org.springframework.integration.support.MessageBuilder;\n+import org.springframework.messaging.Message;\n+import org.springframework.messaging.MessageChannel;\n+import org.springframework.messaging.MessageHandler;\n+import org.springframework.messaging.handler.annotation.Header;\n+import org.springframework.util.concurrent.ListenableFutureCallback;\n+import reactor.core.publisher.Flux;\n+import reactor.core.scheduler.Schedulers;\n+\n+@SpringBootApplication\n+public class PubSubApplication {\n+\n+  private static final Log LOGGER = LogFactory.getLog(PubSubApplication.class);\n+\n+  public static Message<String> generateOneMessagePeriodically(int millis) {\n+    try {\n+      Thread.sleep(millis);\n+    } finally {\n+      Random rand = new Random();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf5d4ffe7d54a7e29823b4b3e9dba90422dd7361"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1OTY2OA==", "bodyText": "Oh sorry I misunderstood!", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3480#discussion_r468259668", "createdAt": "2020-08-11T00:34:02Z", "author": {"login": "anguillanneuf"}, "path": "pubsub/spring/src/main/java/demo/PubSubApplication.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package demo;\n+\n+import java.util.Random;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import java.util.stream.Stream;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.cloud.gcp.pubsub.core.PubSubTemplate;\n+import org.springframework.cloud.gcp.pubsub.integration.AckMode;\n+import org.springframework.cloud.gcp.pubsub.integration.inbound.PubSubInboundChannelAdapter;\n+import org.springframework.cloud.gcp.pubsub.integration.outbound.PubSubMessageHandler;\n+import org.springframework.cloud.gcp.pubsub.support.BasicAcknowledgeablePubsubMessage;\n+import org.springframework.cloud.gcp.pubsub.support.GcpPubSubHeaders;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.integration.annotation.ServiceActivator;\n+import org.springframework.integration.channel.PublishSubscribeChannel;\n+import org.springframework.integration.support.MessageBuilder;\n+import org.springframework.messaging.Message;\n+import org.springframework.messaging.MessageChannel;\n+import org.springframework.messaging.MessageHandler;\n+import org.springframework.messaging.handler.annotation.Header;\n+import org.springframework.util.concurrent.ListenableFutureCallback;\n+import reactor.core.publisher.Flux;\n+import reactor.core.scheduler.Schedulers;\n+\n+@SpringBootApplication\n+public class PubSubApplication {\n+\n+  private static final Log LOGGER = LogFactory.getLog(PubSubApplication.class);\n+\n+  public static Message<String> generateOneMessagePeriodically(int millis) {\n+    try {\n+      Thread.sleep(millis);\n+    } finally {\n+      Random rand = new Random();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1MzI0Mw=="}, "originalCommit": {"oid": "bf5d4ffe7d54a7e29823b4b3e9dba90422dd7361"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 798, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}