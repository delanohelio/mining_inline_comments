{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyOTAwMjk3", "number": 2642, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMDo1ODoyNFrODxcJoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMTowMzo1NlrODxcNpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTY4MDMyOnYy", "diffSide": "RIGHT", "path": "healthcare/v1/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMDo1ODoyNFrOGE6YSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxODo1OTowMFrOGFcpAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwMzk3Ng==", "bodyText": "License & copyright", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2642#discussion_r407803976", "createdAt": "2020-04-14T00:58:24Z", "author": {"login": "lesv"}, "path": "healthcare/v1/pom.xml", "diffHunk": "@@ -0,0 +1,97 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b088e1a7b2dfc98ae204ab5bd1b90b952159328"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM2NTMxMw==", "bodyText": "Done.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2642#discussion_r408365313", "createdAt": "2020-04-14T18:59:00Z", "author": {"login": "noerog"}, "path": "healthcare/v1/pom.xml", "diffHunk": "@@ -0,0 +1,97 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwMzk3Ng=="}, "originalCommit": {"oid": "5b088e1a7b2dfc98ae204ab5bd1b90b952159328"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTY4NDg2OnYy", "diffSide": "RIGHT", "path": "healthcare/v1/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMTowMDo0NlrOGE6a5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMTowMDo0NlrOGE6a5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNDY0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  <version>4.5.12</version>\n          \n          \n            \n                  <version>4.5.12</version>\n          \n          \n            \n                  <scope>test</scope>", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2642#discussion_r407804645", "createdAt": "2020-04-14T01:00:46Z", "author": {"login": "lesv"}, "path": "healthcare/v1/pom.xml", "diffHunk": "@@ -0,0 +1,97 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <groupId>com.google.samples</groupId>\n+  <artifactId>healthcare-samples</artifactId>\n+  <version>1.0-SNAPSHOT</version>\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-compiler-plugin</artifactId>\n+        <configuration>\n+          <source>11</source>\n+          <target>11</target>\n+        </configuration>\n+      </plugin>\n+    </plugins>\n+  </build>\n+  <packaging>jar</packaging>\n+\n+  <!--\n+    The parent pom defines common style checks and testing strategies for our samples.\n+    Removing or replacing it should not affect the execution of the samples in anyway.\n+  -->\n+  <parent>\n+    <groupId>com.google.cloud.samples</groupId>\n+    <artifactId>shared-configuration</artifactId>\n+    <version>1.0.15</version>\n+  </parent>\n+\n+  <properties>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+    <maven.compiler.release>11</maven.compiler.release>\n+    <maven.compiler.target>11</maven.compiler.target>\n+    <maven.compiler.source>11</maven.compiler.source>\n+  </properties>\n+\n+  <prerequisites>\n+    <maven>3.5</maven>\n+  </prerequisites>\n+\n+  <!-- [START dependencies] -->\n+  <!--  Using libraries-bom to manage versions.\n+  See https://github.com/GoogleCloudPlatform/cloud-opensource-java/wiki/The-Google-Cloud-Platform-Libraries-BOM -->\n+  <dependencyManagement>\n+    <dependencies>\n+      <dependency>\n+        <groupId>com.google.cloud</groupId>\n+        <artifactId>libraries-bom</artifactId>\n+        <version>4.4.1</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+    </dependencies>\n+  </dependencyManagement>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.google.apis</groupId>\n+      <artifactId>google-api-services-healthcare</artifactId>\n+      <version>v1-rev20200327-1.30.9</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.google.api-client</groupId>\n+      <artifactId>google-api-client</artifactId>\n+      <version>1.30.9</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.google.cloud</groupId>\n+      <artifactId>google-cloud-core</artifactId>\n+      <scope>compile</scope>\n+    </dependency>\n+    <!-- [END dependencies] -->\n+\n+    <!-- Test dependencies -->\n+    <dependency>\n+      <groupId>com.google.truth</groupId>\n+      <artifactId>truth</artifactId>\n+      <version>1.0.1</version>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>junit</groupId>\n+      <artifactId>junit</artifactId>\n+      <version>4.13</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.httpcomponents</groupId>\n+      <artifactId>httpmime</artifactId>\n+      <version>4.5.12</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b088e1a7b2dfc98ae204ab5bd1b90b952159328"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTY4NTgxOnYy", "diffSide": "RIGHT", "path": "healthcare/v1/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMTowMToxNVrOGE6bbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxODo1ODo1NlrOGFco2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNDc4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  <version>4.13</version>\n          \n          \n            \n                  <version>4.13</version>\n          \n          \n            \n                  <scope>test</scope>", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2642#discussion_r407804782", "createdAt": "2020-04-14T01:01:15Z", "author": {"login": "lesv"}, "path": "healthcare/v1/pom.xml", "diffHunk": "@@ -0,0 +1,97 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <groupId>com.google.samples</groupId>\n+  <artifactId>healthcare-samples</artifactId>\n+  <version>1.0-SNAPSHOT</version>\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-compiler-plugin</artifactId>\n+        <configuration>\n+          <source>11</source>\n+          <target>11</target>\n+        </configuration>\n+      </plugin>\n+    </plugins>\n+  </build>\n+  <packaging>jar</packaging>\n+\n+  <!--\n+    The parent pom defines common style checks and testing strategies for our samples.\n+    Removing or replacing it should not affect the execution of the samples in anyway.\n+  -->\n+  <parent>\n+    <groupId>com.google.cloud.samples</groupId>\n+    <artifactId>shared-configuration</artifactId>\n+    <version>1.0.15</version>\n+  </parent>\n+\n+  <properties>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+    <maven.compiler.release>11</maven.compiler.release>\n+    <maven.compiler.target>11</maven.compiler.target>\n+    <maven.compiler.source>11</maven.compiler.source>\n+  </properties>\n+\n+  <prerequisites>\n+    <maven>3.5</maven>\n+  </prerequisites>\n+\n+  <!-- [START dependencies] -->\n+  <!--  Using libraries-bom to manage versions.\n+  See https://github.com/GoogleCloudPlatform/cloud-opensource-java/wiki/The-Google-Cloud-Platform-Libraries-BOM -->\n+  <dependencyManagement>\n+    <dependencies>\n+      <dependency>\n+        <groupId>com.google.cloud</groupId>\n+        <artifactId>libraries-bom</artifactId>\n+        <version>4.4.1</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+    </dependencies>\n+  </dependencyManagement>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.google.apis</groupId>\n+      <artifactId>google-api-services-healthcare</artifactId>\n+      <version>v1-rev20200327-1.30.9</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.google.api-client</groupId>\n+      <artifactId>google-api-client</artifactId>\n+      <version>1.30.9</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.google.cloud</groupId>\n+      <artifactId>google-cloud-core</artifactId>\n+      <scope>compile</scope>\n+    </dependency>\n+    <!-- [END dependencies] -->\n+\n+    <!-- Test dependencies -->\n+    <dependency>\n+      <groupId>com.google.truth</groupId>\n+      <artifactId>truth</artifactId>\n+      <version>1.0.1</version>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>junit</groupId>\n+      <artifactId>junit</artifactId>\n+      <version>4.13</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b088e1a7b2dfc98ae204ab5bd1b90b952159328"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM2NTI3Mg==", "bodyText": "Done.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2642#discussion_r408365272", "createdAt": "2020-04-14T18:58:56Z", "author": {"login": "noerog"}, "path": "healthcare/v1/pom.xml", "diffHunk": "@@ -0,0 +1,97 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <groupId>com.google.samples</groupId>\n+  <artifactId>healthcare-samples</artifactId>\n+  <version>1.0-SNAPSHOT</version>\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-compiler-plugin</artifactId>\n+        <configuration>\n+          <source>11</source>\n+          <target>11</target>\n+        </configuration>\n+      </plugin>\n+    </plugins>\n+  </build>\n+  <packaging>jar</packaging>\n+\n+  <!--\n+    The parent pom defines common style checks and testing strategies for our samples.\n+    Removing or replacing it should not affect the execution of the samples in anyway.\n+  -->\n+  <parent>\n+    <groupId>com.google.cloud.samples</groupId>\n+    <artifactId>shared-configuration</artifactId>\n+    <version>1.0.15</version>\n+  </parent>\n+\n+  <properties>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+    <maven.compiler.release>11</maven.compiler.release>\n+    <maven.compiler.target>11</maven.compiler.target>\n+    <maven.compiler.source>11</maven.compiler.source>\n+  </properties>\n+\n+  <prerequisites>\n+    <maven>3.5</maven>\n+  </prerequisites>\n+\n+  <!-- [START dependencies] -->\n+  <!--  Using libraries-bom to manage versions.\n+  See https://github.com/GoogleCloudPlatform/cloud-opensource-java/wiki/The-Google-Cloud-Platform-Libraries-BOM -->\n+  <dependencyManagement>\n+    <dependencies>\n+      <dependency>\n+        <groupId>com.google.cloud</groupId>\n+        <artifactId>libraries-bom</artifactId>\n+        <version>4.4.1</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+    </dependencies>\n+  </dependencyManagement>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.google.apis</groupId>\n+      <artifactId>google-api-services-healthcare</artifactId>\n+      <version>v1-rev20200327-1.30.9</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.google.api-client</groupId>\n+      <artifactId>google-api-client</artifactId>\n+      <version>1.30.9</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.google.cloud</groupId>\n+      <artifactId>google-cloud-core</artifactId>\n+      <scope>compile</scope>\n+    </dependency>\n+    <!-- [END dependencies] -->\n+\n+    <!-- Test dependencies -->\n+    <dependency>\n+      <groupId>com.google.truth</groupId>\n+      <artifactId>truth</artifactId>\n+      <version>1.0.1</version>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>junit</groupId>\n+      <artifactId>junit</artifactId>\n+      <version>4.13</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNDc4Mg=="}, "originalCommit": {"oid": "5b088e1a7b2dfc98ae204ab5bd1b90b952159328"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTY4OTM2OnYy", "diffSide": "RIGHT", "path": "healthcare/v1/src/main/java/snippets/healthcare/datasets/DatasetCreate.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMTowMzoyNVrOGE6dkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDoxNDoyMVrOGGJ5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNTMyOA==", "bodyText": "Can you be more specific?\nIs there any mitigation?\nDo you need this at all, why not just let it propagate and mention that it might happen?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2642#discussion_r407805328", "createdAt": "2020-04-14T01:03:25Z", "author": {"login": "lesv"}, "path": "healthcare/v1/src/main/java/snippets/healthcare/datasets/DatasetCreate.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2019 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package snippets.healthcare.datasets;\n+\n+// [START healthcare_create_dataset]\n+import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n+import com.google.api.client.http.HttpHeaders;\n+import com.google.api.client.http.HttpRequestInitializer;\n+import com.google.api.client.http.javanet.NetHttpTransport;\n+import com.google.api.client.json.JsonFactory;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.services.healthcare.v1.CloudHealthcare;\n+import com.google.api.services.healthcare.v1.CloudHealthcare.Projects.Locations.Datasets;\n+import com.google.api.services.healthcare.v1.CloudHealthcareScopes;\n+import com.google.api.services.healthcare.v1.model.Dataset;\n+import com.google.api.services.healthcare.v1.model.Operation;\n+import java.io.IOException;\n+import java.util.Collections;\n+\n+public class DatasetCreate {\n+  private static final String DATASET_NAME = \"projects/%s/locations/%s/datasets/%s\";\n+  private static final JsonFactory JSON_FACTORY = new JacksonFactory();\n+  private static final NetHttpTransport HTTP_TRANSPORT = new NetHttpTransport();\n+\n+  public static void datasetCreate(String projectId, String regionId, String datasetId)\n+      throws IOException {\n+    // String projectId = \"your-project-id\";\n+    // String regionId = \"us-central1\";\n+    // String datasetId = \"your-dataset-id\";\n+\n+    // Initialize the client, which will be used to interact with the service.\n+    CloudHealthcare client = createClient();\n+\n+    // Configure the dataset to be created.\n+    Dataset dataset = new Dataset();\n+    dataset.setTimeZone(\"America/Chicago\");\n+\n+    // Create request and configure any parameters.\n+    String parentName = String.format(\"projects/%s/locations/%s\", projectId, regionId);\n+    Datasets.Create request = client.projects().locations().datasets().create(parentName, dataset);\n+    request.setDatasetId(datasetId);\n+\n+    // Execute the request, wait for the operation to complete, and process the results.\n+    try {\n+      Operation operation = request.execute();\n+      System.out.println(operation.toPrettyString());\n+      while (operation.getDone() == null || !operation.getDone()) {\n+        // Update the status of the operation with another request.\n+        Thread.sleep(500); // Pause for 500ms between requests.\n+        operation =\n+            client\n+                .projects()\n+                .locations()\n+                .datasets()\n+                .operations()\n+                .get(operation.getName())\n+                .execute();\n+      }\n+      System.out.println(\"Dataset created. Response content: \" + operation.getResponse());\n+    } catch (Exception ex) {\n+      System.out.printf(\"Error during request execution: %s\\n\", ex.toString());\n+      ex.printStackTrace(System.out);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b088e1a7b2dfc98ae204ab5bd1b90b952159328"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM2NTI1Ng==", "bodyText": "This is sort of a generic CRUD request to the service so the exception could be a number of things. I don't think it would be possible to be more specific. The mitigation should be clear from the error message returned (e.g. if auth is the issue). I see some samples catch errors/exceptions and others don't. Do you have a preference either way?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2642#discussion_r408365256", "createdAt": "2020-04-14T18:58:55Z", "author": {"login": "noerog"}, "path": "healthcare/v1/src/main/java/snippets/healthcare/datasets/DatasetCreate.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2019 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package snippets.healthcare.datasets;\n+\n+// [START healthcare_create_dataset]\n+import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n+import com.google.api.client.http.HttpHeaders;\n+import com.google.api.client.http.HttpRequestInitializer;\n+import com.google.api.client.http.javanet.NetHttpTransport;\n+import com.google.api.client.json.JsonFactory;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.services.healthcare.v1.CloudHealthcare;\n+import com.google.api.services.healthcare.v1.CloudHealthcare.Projects.Locations.Datasets;\n+import com.google.api.services.healthcare.v1.CloudHealthcareScopes;\n+import com.google.api.services.healthcare.v1.model.Dataset;\n+import com.google.api.services.healthcare.v1.model.Operation;\n+import java.io.IOException;\n+import java.util.Collections;\n+\n+public class DatasetCreate {\n+  private static final String DATASET_NAME = \"projects/%s/locations/%s/datasets/%s\";\n+  private static final JsonFactory JSON_FACTORY = new JacksonFactory();\n+  private static final NetHttpTransport HTTP_TRANSPORT = new NetHttpTransport();\n+\n+  public static void datasetCreate(String projectId, String regionId, String datasetId)\n+      throws IOException {\n+    // String projectId = \"your-project-id\";\n+    // String regionId = \"us-central1\";\n+    // String datasetId = \"your-dataset-id\";\n+\n+    // Initialize the client, which will be used to interact with the service.\n+    CloudHealthcare client = createClient();\n+\n+    // Configure the dataset to be created.\n+    Dataset dataset = new Dataset();\n+    dataset.setTimeZone(\"America/Chicago\");\n+\n+    // Create request and configure any parameters.\n+    String parentName = String.format(\"projects/%s/locations/%s\", projectId, regionId);\n+    Datasets.Create request = client.projects().locations().datasets().create(parentName, dataset);\n+    request.setDatasetId(datasetId);\n+\n+    // Execute the request, wait for the operation to complete, and process the results.\n+    try {\n+      Operation operation = request.execute();\n+      System.out.println(operation.toPrettyString());\n+      while (operation.getDone() == null || !operation.getDone()) {\n+        // Update the status of the operation with another request.\n+        Thread.sleep(500); // Pause for 500ms between requests.\n+        operation =\n+            client\n+                .projects()\n+                .locations()\n+                .datasets()\n+                .operations()\n+                .get(operation.getName())\n+                .execute();\n+      }\n+      System.out.println(\"Dataset created. Response content: \" + operation.getResponse());\n+    } catch (Exception ex) {\n+      System.out.printf(\"Error during request execution: %s\\n\", ex.toString());\n+      ex.printStackTrace(System.out);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNTMyOA=="}, "originalCommit": {"oid": "5b088e1a7b2dfc98ae204ab5bd1b90b952159328"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEwNjc0MA==", "bodyText": "Java prefers that we don't catch and ignore errors.  If we are going to ignore it, then let it be caught by a parent.  That said, if it might happen, it's good to mention it.\nhttps://google.github.io/styleguide/javaguide.html#s6.2-caught-exceptions", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2642#discussion_r409106740", "createdAt": "2020-04-15T20:14:21Z", "author": {"login": "lesv"}, "path": "healthcare/v1/src/main/java/snippets/healthcare/datasets/DatasetCreate.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2019 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package snippets.healthcare.datasets;\n+\n+// [START healthcare_create_dataset]\n+import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n+import com.google.api.client.http.HttpHeaders;\n+import com.google.api.client.http.HttpRequestInitializer;\n+import com.google.api.client.http.javanet.NetHttpTransport;\n+import com.google.api.client.json.JsonFactory;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.services.healthcare.v1.CloudHealthcare;\n+import com.google.api.services.healthcare.v1.CloudHealthcare.Projects.Locations.Datasets;\n+import com.google.api.services.healthcare.v1.CloudHealthcareScopes;\n+import com.google.api.services.healthcare.v1.model.Dataset;\n+import com.google.api.services.healthcare.v1.model.Operation;\n+import java.io.IOException;\n+import java.util.Collections;\n+\n+public class DatasetCreate {\n+  private static final String DATASET_NAME = \"projects/%s/locations/%s/datasets/%s\";\n+  private static final JsonFactory JSON_FACTORY = new JacksonFactory();\n+  private static final NetHttpTransport HTTP_TRANSPORT = new NetHttpTransport();\n+\n+  public static void datasetCreate(String projectId, String regionId, String datasetId)\n+      throws IOException {\n+    // String projectId = \"your-project-id\";\n+    // String regionId = \"us-central1\";\n+    // String datasetId = \"your-dataset-id\";\n+\n+    // Initialize the client, which will be used to interact with the service.\n+    CloudHealthcare client = createClient();\n+\n+    // Configure the dataset to be created.\n+    Dataset dataset = new Dataset();\n+    dataset.setTimeZone(\"America/Chicago\");\n+\n+    // Create request and configure any parameters.\n+    String parentName = String.format(\"projects/%s/locations/%s\", projectId, regionId);\n+    Datasets.Create request = client.projects().locations().datasets().create(parentName, dataset);\n+    request.setDatasetId(datasetId);\n+\n+    // Execute the request, wait for the operation to complete, and process the results.\n+    try {\n+      Operation operation = request.execute();\n+      System.out.println(operation.toPrettyString());\n+      while (operation.getDone() == null || !operation.getDone()) {\n+        // Update the status of the operation with another request.\n+        Thread.sleep(500); // Pause for 500ms between requests.\n+        operation =\n+            client\n+                .projects()\n+                .locations()\n+                .datasets()\n+                .operations()\n+                .get(operation.getName())\n+                .execute();\n+      }\n+      System.out.println(\"Dataset created. Response content: \" + operation.getResponse());\n+    } catch (Exception ex) {\n+      System.out.printf(\"Error during request execution: %s\\n\", ex.toString());\n+      ex.printStackTrace(System.out);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNTMyOA=="}, "originalCommit": {"oid": "5b088e1a7b2dfc98ae204ab5bd1b90b952159328"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTY5MDYwOnYy", "diffSide": "RIGHT", "path": "healthcare/v1/src/main/java/snippets/healthcare/datasets/DatasetDeIdentify.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMTowMzo1NlrOGE6ePw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDoxNDoyOFrOGGJ5Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNTUwMw==", "bodyText": "Can you be more specific?\nIs there any mitigation?\nDo you need this at all, why not just let it propagate and mention that it might happen?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2642#discussion_r407805503", "createdAt": "2020-04-14T01:03:56Z", "author": {"login": "lesv"}, "path": "healthcare/v1/src/main/java/snippets/healthcare/datasets/DatasetDeIdentify.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2019 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package snippets.healthcare.datasets;\n+\n+// [START healthcare_dicom_keeplist_deidentify_dataset]\n+import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n+import com.google.api.client.http.HttpHeaders;\n+import com.google.api.client.http.HttpRequestInitializer;\n+import com.google.api.client.http.javanet.NetHttpTransport;\n+import com.google.api.client.json.JsonFactory;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.services.healthcare.v1.CloudHealthcare;\n+import com.google.api.services.healthcare.v1.CloudHealthcare.Projects.Locations.Datasets;\n+import com.google.api.services.healthcare.v1.CloudHealthcareScopes;\n+import com.google.api.services.healthcare.v1.model.DeidentifyConfig;\n+import com.google.api.services.healthcare.v1.model.DeidentifyDatasetRequest;\n+import com.google.api.services.healthcare.v1.model.DicomConfig;\n+import com.google.api.services.healthcare.v1.model.Operation;\n+import com.google.api.services.healthcare.v1.model.TagFilterList;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+\n+public class DatasetDeIdentify {\n+  private static final String DATASET_NAME = \"projects/%s/locations/%s/datasets/%s\";\n+  private static final JsonFactory JSON_FACTORY = new JacksonFactory();\n+  private static final NetHttpTransport HTTP_TRANSPORT = new NetHttpTransport();\n+\n+  public static void datasetDeIdentify(String srcDatasetName, String destDatasetName)\n+      throws IOException {\n+    // String srcDatasetName =\n+    //     String.format(DATASET_NAME, \"your-project-id\", \"your-region-id\", \"your-src-dataset-id\");\n+    // String destDatasetName =\n+    //    String.format(DATASET_NAME, \"your-project-id\", \"your-region-id\", \"your-dest-dataset-id\");\n+\n+    // Initialize the client, which will be used to interact with the service.\n+    CloudHealthcare client = createClient();\n+\n+    // Configure what information needs to be De-Identified.\n+    // For more information on de-identifying using tags, please see the following:\n+    // https://cloud.google.com/healthcare/docs/how-tos/dicom-deidentify#de-identification_using_tags\n+    TagFilterList tags = new TagFilterList().setTags(Arrays.asList(\"PatientID\"));\n+    DicomConfig dicomConfig = new DicomConfig().setKeepList(tags);\n+    DeidentifyConfig config = new DeidentifyConfig().setDicom(dicomConfig);\n+\n+    // Create the de-identify request and configure any parameters.\n+    DeidentifyDatasetRequest deidentifyRequest =\n+        new DeidentifyDatasetRequest().setDestinationDataset(destDatasetName).setConfig(config);\n+    Datasets.Deidentify request =\n+        client.projects().locations().datasets().deidentify(srcDatasetName, deidentifyRequest);\n+\n+    // Execute the request, wait for the operation to complete, and process the results.\n+    try {\n+      Operation operation = request.execute();\n+      while (operation.getDone() == null || !operation.getDone()) {\n+        // Update the status of the operation with another request.\n+        Thread.sleep(500); // Pause for 500ms between requests.\n+        operation =\n+            client\n+                .projects()\n+                .locations()\n+                .datasets()\n+                .operations()\n+                .get(operation.getName())\n+                .execute();\n+      }\n+      System.out.println(\n+          \"De-identified Dataset created. Response content: \" + operation.getResponse());\n+    } catch (Exception ex) {\n+      System.out.printf(\"Error during request execution: %s\", ex.toString());\n+      ex.printStackTrace(System.out);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b088e1a7b2dfc98ae204ab5bd1b90b952159328"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM2NTIzNg==", "bodyText": "Same as above.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2642#discussion_r408365236", "createdAt": "2020-04-14T18:58:53Z", "author": {"login": "noerog"}, "path": "healthcare/v1/src/main/java/snippets/healthcare/datasets/DatasetDeIdentify.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2019 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package snippets.healthcare.datasets;\n+\n+// [START healthcare_dicom_keeplist_deidentify_dataset]\n+import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n+import com.google.api.client.http.HttpHeaders;\n+import com.google.api.client.http.HttpRequestInitializer;\n+import com.google.api.client.http.javanet.NetHttpTransport;\n+import com.google.api.client.json.JsonFactory;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.services.healthcare.v1.CloudHealthcare;\n+import com.google.api.services.healthcare.v1.CloudHealthcare.Projects.Locations.Datasets;\n+import com.google.api.services.healthcare.v1.CloudHealthcareScopes;\n+import com.google.api.services.healthcare.v1.model.DeidentifyConfig;\n+import com.google.api.services.healthcare.v1.model.DeidentifyDatasetRequest;\n+import com.google.api.services.healthcare.v1.model.DicomConfig;\n+import com.google.api.services.healthcare.v1.model.Operation;\n+import com.google.api.services.healthcare.v1.model.TagFilterList;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+\n+public class DatasetDeIdentify {\n+  private static final String DATASET_NAME = \"projects/%s/locations/%s/datasets/%s\";\n+  private static final JsonFactory JSON_FACTORY = new JacksonFactory();\n+  private static final NetHttpTransport HTTP_TRANSPORT = new NetHttpTransport();\n+\n+  public static void datasetDeIdentify(String srcDatasetName, String destDatasetName)\n+      throws IOException {\n+    // String srcDatasetName =\n+    //     String.format(DATASET_NAME, \"your-project-id\", \"your-region-id\", \"your-src-dataset-id\");\n+    // String destDatasetName =\n+    //    String.format(DATASET_NAME, \"your-project-id\", \"your-region-id\", \"your-dest-dataset-id\");\n+\n+    // Initialize the client, which will be used to interact with the service.\n+    CloudHealthcare client = createClient();\n+\n+    // Configure what information needs to be De-Identified.\n+    // For more information on de-identifying using tags, please see the following:\n+    // https://cloud.google.com/healthcare/docs/how-tos/dicom-deidentify#de-identification_using_tags\n+    TagFilterList tags = new TagFilterList().setTags(Arrays.asList(\"PatientID\"));\n+    DicomConfig dicomConfig = new DicomConfig().setKeepList(tags);\n+    DeidentifyConfig config = new DeidentifyConfig().setDicom(dicomConfig);\n+\n+    // Create the de-identify request and configure any parameters.\n+    DeidentifyDatasetRequest deidentifyRequest =\n+        new DeidentifyDatasetRequest().setDestinationDataset(destDatasetName).setConfig(config);\n+    Datasets.Deidentify request =\n+        client.projects().locations().datasets().deidentify(srcDatasetName, deidentifyRequest);\n+\n+    // Execute the request, wait for the operation to complete, and process the results.\n+    try {\n+      Operation operation = request.execute();\n+      while (operation.getDone() == null || !operation.getDone()) {\n+        // Update the status of the operation with another request.\n+        Thread.sleep(500); // Pause for 500ms between requests.\n+        operation =\n+            client\n+                .projects()\n+                .locations()\n+                .datasets()\n+                .operations()\n+                .get(operation.getName())\n+                .execute();\n+      }\n+      System.out.println(\n+          \"De-identified Dataset created. Response content: \" + operation.getResponse());\n+    } catch (Exception ex) {\n+      System.out.printf(\"Error during request execution: %s\", ex.toString());\n+      ex.printStackTrace(System.out);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNTUwMw=="}, "originalCommit": {"oid": "5b088e1a7b2dfc98ae204ab5bd1b90b952159328"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEwNjc5MA==", "bodyText": "https://google.github.io/styleguide/javaguide.html#s6.2-caught-exceptions", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2642#discussion_r409106790", "createdAt": "2020-04-15T20:14:28Z", "author": {"login": "lesv"}, "path": "healthcare/v1/src/main/java/snippets/healthcare/datasets/DatasetDeIdentify.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2019 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package snippets.healthcare.datasets;\n+\n+// [START healthcare_dicom_keeplist_deidentify_dataset]\n+import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n+import com.google.api.client.http.HttpHeaders;\n+import com.google.api.client.http.HttpRequestInitializer;\n+import com.google.api.client.http.javanet.NetHttpTransport;\n+import com.google.api.client.json.JsonFactory;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.services.healthcare.v1.CloudHealthcare;\n+import com.google.api.services.healthcare.v1.CloudHealthcare.Projects.Locations.Datasets;\n+import com.google.api.services.healthcare.v1.CloudHealthcareScopes;\n+import com.google.api.services.healthcare.v1.model.DeidentifyConfig;\n+import com.google.api.services.healthcare.v1.model.DeidentifyDatasetRequest;\n+import com.google.api.services.healthcare.v1.model.DicomConfig;\n+import com.google.api.services.healthcare.v1.model.Operation;\n+import com.google.api.services.healthcare.v1.model.TagFilterList;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+\n+public class DatasetDeIdentify {\n+  private static final String DATASET_NAME = \"projects/%s/locations/%s/datasets/%s\";\n+  private static final JsonFactory JSON_FACTORY = new JacksonFactory();\n+  private static final NetHttpTransport HTTP_TRANSPORT = new NetHttpTransport();\n+\n+  public static void datasetDeIdentify(String srcDatasetName, String destDatasetName)\n+      throws IOException {\n+    // String srcDatasetName =\n+    //     String.format(DATASET_NAME, \"your-project-id\", \"your-region-id\", \"your-src-dataset-id\");\n+    // String destDatasetName =\n+    //    String.format(DATASET_NAME, \"your-project-id\", \"your-region-id\", \"your-dest-dataset-id\");\n+\n+    // Initialize the client, which will be used to interact with the service.\n+    CloudHealthcare client = createClient();\n+\n+    // Configure what information needs to be De-Identified.\n+    // For more information on de-identifying using tags, please see the following:\n+    // https://cloud.google.com/healthcare/docs/how-tos/dicom-deidentify#de-identification_using_tags\n+    TagFilterList tags = new TagFilterList().setTags(Arrays.asList(\"PatientID\"));\n+    DicomConfig dicomConfig = new DicomConfig().setKeepList(tags);\n+    DeidentifyConfig config = new DeidentifyConfig().setDicom(dicomConfig);\n+\n+    // Create the de-identify request and configure any parameters.\n+    DeidentifyDatasetRequest deidentifyRequest =\n+        new DeidentifyDatasetRequest().setDestinationDataset(destDatasetName).setConfig(config);\n+    Datasets.Deidentify request =\n+        client.projects().locations().datasets().deidentify(srcDatasetName, deidentifyRequest);\n+\n+    // Execute the request, wait for the operation to complete, and process the results.\n+    try {\n+      Operation operation = request.execute();\n+      while (operation.getDone() == null || !operation.getDone()) {\n+        // Update the status of the operation with another request.\n+        Thread.sleep(500); // Pause for 500ms between requests.\n+        operation =\n+            client\n+                .projects()\n+                .locations()\n+                .datasets()\n+                .operations()\n+                .get(operation.getName())\n+                .execute();\n+      }\n+      System.out.println(\n+          \"De-identified Dataset created. Response content: \" + operation.getResponse());\n+    } catch (Exception ex) {\n+      System.out.printf(\"Error during request execution: %s\", ex.toString());\n+      ex.printStackTrace(System.out);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNTUwMw=="}, "originalCommit": {"oid": "5b088e1a7b2dfc98ae204ab5bd1b90b952159328"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 886, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}