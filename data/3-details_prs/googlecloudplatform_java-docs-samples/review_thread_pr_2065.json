{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0MDEzNTQ5", "number": 2065, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyMTo0MlrODfQ_Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyMTo0MlrODfQ_Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTEwODEwOnYy", "diffSide": "RIGHT", "path": "dlp/src/main/java/dlp/snippets/TemplatesCreate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyMTo0MlrOFo3kug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyMTo0MlrOFo3kug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5Nzg4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // Optionally et a display name and a description for the template\n          \n          \n            \n                        // Optionally set a display name and a description for the template", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2065#discussion_r378397882", "createdAt": "2020-02-12T17:21:42Z", "author": {"login": "kurtisvg"}, "path": "dlp/src/main/java/dlp/snippets/TemplatesCreate.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+// [START dlp_create_inspect_template]\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.CreateInspectTemplateRequest;\n+import com.google.privacy.dlp.v2.InfoType;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.InspectTemplate;\n+import com.google.privacy.dlp.v2.ProjectName;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import java.util.stream.Collectors;\n+\n+class TemplatesCreate {\n+\n+    public static void createInspectTemplate() throws IOException {\n+        // TODO(developer): Replace these variables before running the sample.\n+        String projectId = \"your-project-id\";\n+        createInspectTemplate(projectId);\n+    }\n+\n+    // Creates a template to persist configuration information\n+    public static void createInspectTemplate(String projectId) throws IOException {\n+        // Initialize client that will be used to send requests. This client only needs to be created\n+        // once, and can be reused for multiple requests. After completing all of your requests, call\n+        // the \"close\" method on the client to safely clean up any remaining background resources.\n+        try (DlpServiceClient dlpServiceClient = DlpServiceClient.create()) {\n+            // Specify the type of info the inspection will look for.\n+            // See https://cloud.google.com/dlp/docs/infotypes-reference for complete list of info types\n+            List<InfoType> infoTypes =\n+                    Stream.of(\"PHONE_NUMBER\", \"EMAIL_ADDRESS\", \"CREDIT_CARD_NUMBER\")\n+                            .map(it -> InfoType.newBuilder().setName(it).build())\n+                            .collect(Collectors.toList());\n+\n+            // Construct the inspection configuration for the template\n+            InspectConfig inspectConfig =\n+                    InspectConfig.newBuilder()\n+                            .addAllInfoTypes(infoTypes)\n+                            .build();\n+\n+            // Optionally et a display name and a description for the template", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c9d970b3b88f18487aee4b5314f9903846c132d"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 584, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}