{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyMjU4MzA4", "number": 2829, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODo0MDo0OVrOD58l9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxODoxMDo1NFrOD6uueg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDg4MTgyOnYy", "diffSide": "RIGHT", "path": "iam/api-client/src/main/java/com/google/iam/snippets/QuickstartV2.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODo0MDo0OVrOGRgb6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMTowNjo0OFrOGRlc9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxMDQwOA==", "bodyText": "Technically we put these after the package statement.\nhttps://github.com/GoogleCloudPlatform/java-docs-samples/blob/master/SAMPLE_FORMAT.md#class-structure", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2829#discussion_r421010408", "createdAt": "2020-05-06T18:40:49Z", "author": {"login": "dzlier-gcp"}, "path": "iam/api-client/src/main/java/com/google/iam/snippets/QuickstartV2.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/* Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// [START iam_quickstart_v2]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6e2438bc3c0fcaf8f4567131d302adcd7e34295"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA5MjU5Ng==", "bodyText": "Done", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2829#discussion_r421092596", "createdAt": "2020-05-06T21:06:48Z", "author": {"login": "melaniedejong"}, "path": "iam/api-client/src/main/java/com/google/iam/snippets/QuickstartV2.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/* Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// [START iam_quickstart_v2]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxMDQwOA=="}, "originalCommit": {"oid": "f6e2438bc3c0fcaf8f4567131d302adcd7e34295"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDkwODg4OnYy", "diffSide": "RIGHT", "path": "iam/api-client/src/main/java/com/google/iam/snippets/QuickstartV2.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODo0ODowMlrOGRgtEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMTowNzoyM1rOGRleCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxNDgwMQ==", "bodyText": "Could you have the public methods up above the private methods that they call? At first it seemed like there were functions here that weren't used by main and were just called from tests, until I followed the code around. Having the public methods first would help this.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2829#discussion_r421014801", "createdAt": "2020-05-06T18:48:02Z", "author": {"login": "dzlier-gcp"}, "path": "iam/api-client/src/main/java/com/google/iam/snippets/QuickstartV2.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/* Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// [START iam_quickstart_v2]\n+\n+package com.google.iam.snippets;\n+\n+import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.services.cloudresourcemanager.CloudResourceManager;\n+import com.google.api.services.cloudresourcemanager.model.*;\n+import com.google.api.services.iam.v1.IamScopes;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+public class QuickstartV2 {\n+\n+  public static void main(String[] args) {\n+    // TODO: Replace with your project ID.\n+    String projectId = \"your-project\";\n+    // TODO: Replace with the ID of your member in the form \"member:user@example.com\"\n+    String member = \"your-member\";\n+    // The role to be granted.\n+    String role = \"roles/logging.logWriter\";\n+\n+    // Initializes the Cloud Resource Manager service.\n+    CloudResourceManager crmService = null;\n+    try {\n+      crmService = initializeService();\n+    } catch (IOException | GeneralSecurityException e) {\n+      System.out.println(\"Unable to initialize service: \\n\" + e.toString());\n+    }\n+\n+    // Grants your member the \"Log writer\" role for your project.\n+    addBinding(crmService, projectId, member, role);\n+\n+    // Get the project's policy and print all members with the \"Log Writer\" role\n+    Policy policy = getPolicy(crmService, projectId);\n+    Binding binding = null;\n+    List<Binding> bindings = policy.getBindings();\n+    for (Binding b : bindings) {\n+      if (b.getRole().equals(role)) {\n+        binding = b;\n+      }\n+    }\n+    System.out.println(\"Role: \" + binding.getRole());\n+    System.out.print(\"Members: \");\n+    for (String m : binding.getMembers()) {\n+      System.out.print(\"[\" + m + \"] \");\n+    }\n+    System.out.println();\n+\n+    // Removes member from the \"Log writer\" role.\n+    removeMember(crmService, projectId, member, role);\n+  }\n+\n+  public static CloudResourceManager initializeService()\n+      throws IOException, GeneralSecurityException {\n+    // Use the Application Default Credentials strategy for authentication. For more info, see:\n+    // https://cloud.google.com/docs/authentication/production#finding_credentials_automatically\n+    GoogleCredential credential =\n+        GoogleCredential.getApplicationDefault()\n+            .createScoped(Collections.singleton(IamScopes.CLOUD_PLATFORM));\n+\n+    // Creates the Cloud Resource Manager service object.\n+    CloudResourceManager service =\n+        new CloudResourceManager.Builder(\n+                GoogleNetHttpTransport.newTrustedTransport(),\n+                JacksonFactory.getDefaultInstance(),\n+                credential)\n+            .setApplicationName(\"service-accounts\")\n+            .build();\n+    return service;\n+  }\n+\n+  public static Policy getPolicy(CloudResourceManager crmService, String projectId) {\n+    // Gets the project's policy by calling the\n+    // Cloud Resource Manager Projects API.\n+    Policy policy = null;\n+    try {\n+      GetIamPolicyRequest request = new GetIamPolicyRequest();\n+      policy = crmService.projects().getIamPolicy(projectId, request).execute();\n+    } catch (IOException e) {\n+      System.out.println(\"Unable to get policy: \\n\" + e.toString());\n+    }\n+    return policy;\n+  }\n+\n+  private static void setPolicy(CloudResourceManager crmService, String projectId, Policy policy) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6e2438bc3c0fcaf8f4567131d302adcd7e34295"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA5Mjg3Mg==", "bodyText": "I reordered them, but I'm not sure it's exactly what you were thinking. lmk if you want me to change something still.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2829#discussion_r421092872", "createdAt": "2020-05-06T21:07:23Z", "author": {"login": "melaniedejong"}, "path": "iam/api-client/src/main/java/com/google/iam/snippets/QuickstartV2.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/* Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// [START iam_quickstart_v2]\n+\n+package com.google.iam.snippets;\n+\n+import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.services.cloudresourcemanager.CloudResourceManager;\n+import com.google.api.services.cloudresourcemanager.model.*;\n+import com.google.api.services.iam.v1.IamScopes;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+public class QuickstartV2 {\n+\n+  public static void main(String[] args) {\n+    // TODO: Replace with your project ID.\n+    String projectId = \"your-project\";\n+    // TODO: Replace with the ID of your member in the form \"member:user@example.com\"\n+    String member = \"your-member\";\n+    // The role to be granted.\n+    String role = \"roles/logging.logWriter\";\n+\n+    // Initializes the Cloud Resource Manager service.\n+    CloudResourceManager crmService = null;\n+    try {\n+      crmService = initializeService();\n+    } catch (IOException | GeneralSecurityException e) {\n+      System.out.println(\"Unable to initialize service: \\n\" + e.toString());\n+    }\n+\n+    // Grants your member the \"Log writer\" role for your project.\n+    addBinding(crmService, projectId, member, role);\n+\n+    // Get the project's policy and print all members with the \"Log Writer\" role\n+    Policy policy = getPolicy(crmService, projectId);\n+    Binding binding = null;\n+    List<Binding> bindings = policy.getBindings();\n+    for (Binding b : bindings) {\n+      if (b.getRole().equals(role)) {\n+        binding = b;\n+      }\n+    }\n+    System.out.println(\"Role: \" + binding.getRole());\n+    System.out.print(\"Members: \");\n+    for (String m : binding.getMembers()) {\n+      System.out.print(\"[\" + m + \"] \");\n+    }\n+    System.out.println();\n+\n+    // Removes member from the \"Log writer\" role.\n+    removeMember(crmService, projectId, member, role);\n+  }\n+\n+  public static CloudResourceManager initializeService()\n+      throws IOException, GeneralSecurityException {\n+    // Use the Application Default Credentials strategy for authentication. For more info, see:\n+    // https://cloud.google.com/docs/authentication/production#finding_credentials_automatically\n+    GoogleCredential credential =\n+        GoogleCredential.getApplicationDefault()\n+            .createScoped(Collections.singleton(IamScopes.CLOUD_PLATFORM));\n+\n+    // Creates the Cloud Resource Manager service object.\n+    CloudResourceManager service =\n+        new CloudResourceManager.Builder(\n+                GoogleNetHttpTransport.newTrustedTransport(),\n+                JacksonFactory.getDefaultInstance(),\n+                credential)\n+            .setApplicationName(\"service-accounts\")\n+            .build();\n+    return service;\n+  }\n+\n+  public static Policy getPolicy(CloudResourceManager crmService, String projectId) {\n+    // Gets the project's policy by calling the\n+    // Cloud Resource Manager Projects API.\n+    Policy policy = null;\n+    try {\n+      GetIamPolicyRequest request = new GetIamPolicyRequest();\n+      policy = crmService.projects().getIamPolicy(projectId, request).execute();\n+    } catch (IOException e) {\n+      System.out.println(\"Unable to get policy: \\n\" + e.toString());\n+    }\n+    return policy;\n+  }\n+\n+  private static void setPolicy(CloudResourceManager crmService, String projectId, Policy policy) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxNDgwMQ=="}, "originalCommit": {"oid": "f6e2438bc3c0fcaf8f4567131d302adcd7e34295"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDkxNjAzOnYy", "diffSide": "RIGHT", "path": "iam/api-client/src/test/java/com/google/iam/snippets/QuickstartV2Tests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODo0OTo1NFrOGRgxhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMTowOTo1MlrOGRljGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxNTk0MA==", "bodyText": "Do you want to create/delete these service accounts before every test? If you only need one per run shared between tests, I would make these @BeforeClass and @AfterClass.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2829#discussion_r421015940", "createdAt": "2020-05-06T18:49:54Z", "author": {"login": "dzlier-gcp"}, "path": "iam/api-client/src/test/java/com/google/iam/snippets/QuickstartV2Tests.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/* Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.iam.snippets;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.services.cloudresourcemanager.CloudResourceManager;\n+import com.google.api.services.cloudresourcemanager.model.Binding;\n+import com.google.api.services.cloudresourcemanager.model.Policy;\n+import com.google.api.services.iam.v1.Iam;\n+import com.google.api.services.iam.v1.IamScopes;\n+import com.google.api.services.iam.v1.model.CreateServiceAccountRequest;\n+import com.google.api.services.iam.v1.model.ServiceAccount;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+@SuppressWarnings(\"checkstyle:abbreviationaswordinname\")\n+public class QuickstartV2Tests {\n+\n+  private ServiceAccount serviceAccount;\n+  private Iam iamService;\n+  private static final String PROJECT_ID = System.getenv(\"GOOGLE_CLOUD_PROJECT\");\n+\n+  private static void requireEnvVar(String varName) {\n+    assertNotNull(\n+        System.getenv(varName),\n+        String.format(\"Environment variable '%s' is required to perform these tests.\", varName));\n+  }\n+\n+  @BeforeClass\n+  public static void checkRequirements() {\n+    requireEnvVar(\"GOOGLE_APPLICATION_CREDENTIALS\");\n+    requireEnvVar(\"GOOGLE_CLOUD_PROJECT\");\n+  }\n+\n+  // Creates a service account to use during the test\n+  @Before", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6e2438bc3c0fcaf8f4567131d302adcd7e34295"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA5NDE2OQ==", "bodyText": "There's only one test, so they aren't created excessively. My reason for making them just @before and @after is because I wanted to use the service account as an instance variable, and @BeforeClass and @afterclass need to be static methods.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2829#discussion_r421094169", "createdAt": "2020-05-06T21:09:52Z", "author": {"login": "melaniedejong"}, "path": "iam/api-client/src/test/java/com/google/iam/snippets/QuickstartV2Tests.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/* Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.iam.snippets;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.services.cloudresourcemanager.CloudResourceManager;\n+import com.google.api.services.cloudresourcemanager.model.Binding;\n+import com.google.api.services.cloudresourcemanager.model.Policy;\n+import com.google.api.services.iam.v1.Iam;\n+import com.google.api.services.iam.v1.IamScopes;\n+import com.google.api.services.iam.v1.model.CreateServiceAccountRequest;\n+import com.google.api.services.iam.v1.model.ServiceAccount;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+@SuppressWarnings(\"checkstyle:abbreviationaswordinname\")\n+public class QuickstartV2Tests {\n+\n+  private ServiceAccount serviceAccount;\n+  private Iam iamService;\n+  private static final String PROJECT_ID = System.getenv(\"GOOGLE_CLOUD_PROJECT\");\n+\n+  private static void requireEnvVar(String varName) {\n+    assertNotNull(\n+        System.getenv(varName),\n+        String.format(\"Environment variable '%s' is required to perform these tests.\", varName));\n+  }\n+\n+  @BeforeClass\n+  public static void checkRequirements() {\n+    requireEnvVar(\"GOOGLE_APPLICATION_CREDENTIALS\");\n+    requireEnvVar(\"GOOGLE_CLOUD_PROJECT\");\n+  }\n+\n+  // Creates a service account to use during the test\n+  @Before", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxNTk0MA=="}, "originalCommit": {"oid": "f6e2438bc3c0fcaf8f4567131d302adcd7e34295"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjA0Mzg4OnYy", "diffSide": "RIGHT", "path": "iam/api-client/src/main/java/com/google/iam/snippets/QuickstartV2.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMjoxMTowOVrOGSSHBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMjoxMTowOVrOGSSHBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgyNDI2Mw==", "bodyText": "Really shouldn't be com.google, please use com.example or better just iam.snippets", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2829#discussion_r421824263", "createdAt": "2020-05-07T22:11:09Z", "author": {"login": "lesv"}, "path": "iam/api-client/src/main/java/com/google/iam/snippets/QuickstartV2.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/* Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.iam.snippets;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e57c499877564d075d51914b97bd5ee87164161d"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTA5NTYyOnYy", "diffSide": "RIGHT", "path": "iam/api-client/src/test/java/iam/snippets/QuickstartV2Tests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxODoxMDo1NFrOGSuoqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxODoxMDo1NFrOGSuoqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI5MTYyNA==", "bodyText": "We start at least 2 tests at the same time, it's possible, however unlikely, that you might get two of these.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2829#discussion_r422291624", "createdAt": "2020-05-08T18:10:54Z", "author": {"login": "lesv"}, "path": "iam/api-client/src/test/java/iam/snippets/QuickstartV2Tests.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/* Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package iam.snippets;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.services.cloudresourcemanager.CloudResourceManager;\n+import com.google.api.services.cloudresourcemanager.model.Binding;\n+import com.google.api.services.cloudresourcemanager.model.Policy;\n+import com.google.api.services.iam.v1.Iam;\n+import com.google.api.services.iam.v1.IamScopes;\n+import com.google.api.services.iam.v1.model.CreateServiceAccountRequest;\n+import com.google.api.services.iam.v1.model.ServiceAccount;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+@SuppressWarnings(\"checkstyle:abbreviationaswordinname\")\n+public class QuickstartV2Tests {\n+\n+  private ServiceAccount serviceAccount;\n+  private Iam iamService;\n+  private static final String PROJECT_ID = System.getenv(\"GOOGLE_CLOUD_PROJECT\");\n+\n+  private static void requireEnvVar(String varName) {\n+    assertNotNull(\n+        System.getenv(varName),\n+        String.format(\"Environment variable '%s' is required to perform these tests.\", varName));\n+  }\n+\n+  @BeforeClass\n+  public static void checkRequirements() {\n+    requireEnvVar(\"GOOGLE_APPLICATION_CREDENTIALS\");\n+    requireEnvVar(\"GOOGLE_CLOUD_PROJECT\");\n+  }\n+\n+  // Creates a service account to use during the test\n+  @Before\n+  public void setUp() {\n+    try {\n+      GoogleCredential credential =\n+          GoogleCredential.getApplicationDefault()\n+              .createScoped(Collections.singleton(IamScopes.CLOUD_PLATFORM));\n+\n+      iamService =\n+          new Iam.Builder(\n+                  GoogleNetHttpTransport.newTrustedTransport(),\n+                  JacksonFactory.getDefaultInstance(),\n+                  credential)\n+              .setApplicationName(\"service-accounts\")\n+              .build();\n+    } catch (IOException | GeneralSecurityException e) {\n+      System.out.println(\"Unable to initialize service: \\n\" + e.toString());\n+      return;\n+    }\n+\n+    try {\n+      serviceAccount = new ServiceAccount();\n+      serviceAccount.setDisplayName(\"iam-test-account\" + new Date().hashCode());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fefd9065e669ddf212d0a21fe16741bf3968aa5c"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 692, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}