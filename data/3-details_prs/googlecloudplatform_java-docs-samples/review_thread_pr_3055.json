{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4MDM4Mjgz", "number": 3055, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMToyMTo1MVrOECvTGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMToyMTo1MVrOECvTGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzA3NTQ2OnYy", "diffSide": "RIGHT", "path": "dlp/src/main/java/dlp/snippets/InspectStringCustomExcludingSubstring.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMToyMTo1MlrOGfYdAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjoyMTozMVrOGfZ-RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU1OTY4Mg==", "bodyText": "It would be nice if you were more specific here and say what might happen and how they might mitigate it.\nhttps://google.github.io/styleguide/javaguide.html#s6.2-caught-exceptions", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3055#discussion_r435559682", "createdAt": "2020-06-04T21:21:52Z", "author": {"login": "lesv"}, "path": "dlp/src/main/java/dlp/snippets/InspectStringCustomExcludingSubstring.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+// [START dlp_inspect_string_custom_excluding_substring]\n+\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ByteContentItem;\n+import com.google.privacy.dlp.v2.ByteContentItem.BytesType;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.CustomInfoType;\n+import com.google.privacy.dlp.v2.CustomInfoType.Dictionary;\n+import com.google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList;\n+import com.google.privacy.dlp.v2.CustomInfoType.Regex;\n+import com.google.privacy.dlp.v2.ExclusionRule;\n+import com.google.privacy.dlp.v2.Finding;\n+import com.google.privacy.dlp.v2.InfoType;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.InspectContentRequest;\n+import com.google.privacy.dlp.v2.InspectContentResponse;\n+import com.google.privacy.dlp.v2.InspectionRule;\n+import com.google.privacy.dlp.v2.InspectionRuleSet;\n+import com.google.privacy.dlp.v2.LocationName;\n+import com.google.privacy.dlp.v2.MatchingType;\n+import com.google.protobuf.ByteString;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class InspectStringCustomExcludingSubstring {\n+\n+  public static void inspectStringCustomExcludingSubstring() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"your-project-id\";\n+    String textToInspect = \"Name: Doe, John. Name: Example, Jimmy\";\n+    String customDetectorPattern = \"[A-Z][a-z]{1,15}, [A-Z][a-z]{1,15}\";\n+    List<String> excludedSubstringList = Arrays.asList(\"Jimmy\");\n+    inspectStringCustomExcludingSubstring(projectId, textToInspect, customDetectorPattern,\n+        excludedSubstringList);\n+  }\n+\n+  // Inspects the provided text, avoiding matches specified in the exclusion list.\n+  public static void inspectStringCustomExcludingSubstring(String projectId, String textToInspect,\n+      String customDetectorPattern, List<String> excludedSubstringList) {\n+    // Initialize client that will be used to send requests. This client only needs to be created\n+    // once, and can be reused for multiple requests. After completing all of your requests, call\n+    // the \"close\" method on the client to safely clean up any remaining background resources.\n+    try (DlpServiceClient dlp = DlpServiceClient.create()) {\n+      // Specify the type and content to be inspected.\n+      ByteContentItem byteItem =\n+          ByteContentItem.newBuilder()\n+              .setType(BytesType.TEXT_UTF8)\n+              .setData(ByteString.copyFromUtf8(textToInspect))\n+              .build();\n+      ContentItem item = ContentItem.newBuilder().setByteItem(byteItem).build();\n+\n+      // Specify the type of info the inspection will look for.\n+      InfoType infoType = InfoType.newBuilder().setName(\"CUSTOM_NAME_DETECTOR\").build();\n+      CustomInfoType customInfoType = CustomInfoType.newBuilder()\n+          .setInfoType(infoType).setRegex(\n+              Regex.newBuilder().setPattern(customDetectorPattern)).build();\n+\n+      // Exclude partial matches from the specified excludedSubstringList.\n+      ExclusionRule exclusionRule = ExclusionRule.newBuilder()\n+          .setMatchingType(MatchingType.MATCHING_TYPE_PARTIAL_MATCH)\n+          .setDictionary(Dictionary.newBuilder()\n+              .setWordList(WordList.newBuilder().addAllWords(excludedSubstringList)))\n+          .build();\n+\n+      // Construct a ruleset that applies the exclusion rule to the EMAIL_ADDRESSES infotype.\n+      InspectionRuleSet ruleSet = InspectionRuleSet.newBuilder()\n+          .addInfoTypes(infoType)\n+          .addRules(InspectionRule.newBuilder().setExclusionRule(exclusionRule))\n+          .build();\n+\n+      // Construct the configuration for the Inspect request, including the ruleset.\n+      InspectConfig config =\n+          InspectConfig.newBuilder()\n+              .addCustomInfoTypes(customInfoType)\n+              .setIncludeQuote(true)\n+              .addRuleSet(ruleSet)\n+              .build();\n+\n+      // Construct the Inspect request to be sent by the client.\n+      InspectContentRequest request =\n+          InspectContentRequest.newBuilder()\n+              .setParent(LocationName.of(projectId, \"global\").toString())\n+              .setItem(item)\n+              .setInspectConfig(config)\n+              .build();\n+\n+      // Use the client to send the API request.\n+      InspectContentResponse response = dlp.inspectContent(request);\n+\n+      // Parse the response and process results\n+      System.out.println(\"Findings: \" + response.getResult().getFindingsCount());\n+      for (Finding f : response.getResult().getFindingsList()) {\n+        System.out.println(\"\\tQuote: \" + f.getQuote());\n+        System.out.println(\"\\tInfo type: \" + f.getInfoType().getName());\n+        System.out.println(\"\\tLikelihood: \" + f.getLikelihood());\n+      }\n+    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "356f28a7095ea028909b3c2a48ef04bdc34a0ec5"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3ODMzNA==", "bodyText": "This is copied from existing parallel sample code. I agree that it's pretty crappy, and we're also not really consistent: sometimes we do this, sometimes we just stick a \"throws \" on the function.\nOf the two I think I prefer the latter, it makes it clear that what the code is explicitly not handling. Can I fix this in a follow-up for all our DLP Java samples? (see internal bug b/158239329)", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3055#discussion_r435578334", "createdAt": "2020-06-04T22:04:39Z", "author": {"login": "sushicw"}, "path": "dlp/src/main/java/dlp/snippets/InspectStringCustomExcludingSubstring.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+// [START dlp_inspect_string_custom_excluding_substring]\n+\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ByteContentItem;\n+import com.google.privacy.dlp.v2.ByteContentItem.BytesType;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.CustomInfoType;\n+import com.google.privacy.dlp.v2.CustomInfoType.Dictionary;\n+import com.google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList;\n+import com.google.privacy.dlp.v2.CustomInfoType.Regex;\n+import com.google.privacy.dlp.v2.ExclusionRule;\n+import com.google.privacy.dlp.v2.Finding;\n+import com.google.privacy.dlp.v2.InfoType;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.InspectContentRequest;\n+import com.google.privacy.dlp.v2.InspectContentResponse;\n+import com.google.privacy.dlp.v2.InspectionRule;\n+import com.google.privacy.dlp.v2.InspectionRuleSet;\n+import com.google.privacy.dlp.v2.LocationName;\n+import com.google.privacy.dlp.v2.MatchingType;\n+import com.google.protobuf.ByteString;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class InspectStringCustomExcludingSubstring {\n+\n+  public static void inspectStringCustomExcludingSubstring() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"your-project-id\";\n+    String textToInspect = \"Name: Doe, John. Name: Example, Jimmy\";\n+    String customDetectorPattern = \"[A-Z][a-z]{1,15}, [A-Z][a-z]{1,15}\";\n+    List<String> excludedSubstringList = Arrays.asList(\"Jimmy\");\n+    inspectStringCustomExcludingSubstring(projectId, textToInspect, customDetectorPattern,\n+        excludedSubstringList);\n+  }\n+\n+  // Inspects the provided text, avoiding matches specified in the exclusion list.\n+  public static void inspectStringCustomExcludingSubstring(String projectId, String textToInspect,\n+      String customDetectorPattern, List<String> excludedSubstringList) {\n+    // Initialize client that will be used to send requests. This client only needs to be created\n+    // once, and can be reused for multiple requests. After completing all of your requests, call\n+    // the \"close\" method on the client to safely clean up any remaining background resources.\n+    try (DlpServiceClient dlp = DlpServiceClient.create()) {\n+      // Specify the type and content to be inspected.\n+      ByteContentItem byteItem =\n+          ByteContentItem.newBuilder()\n+              .setType(BytesType.TEXT_UTF8)\n+              .setData(ByteString.copyFromUtf8(textToInspect))\n+              .build();\n+      ContentItem item = ContentItem.newBuilder().setByteItem(byteItem).build();\n+\n+      // Specify the type of info the inspection will look for.\n+      InfoType infoType = InfoType.newBuilder().setName(\"CUSTOM_NAME_DETECTOR\").build();\n+      CustomInfoType customInfoType = CustomInfoType.newBuilder()\n+          .setInfoType(infoType).setRegex(\n+              Regex.newBuilder().setPattern(customDetectorPattern)).build();\n+\n+      // Exclude partial matches from the specified excludedSubstringList.\n+      ExclusionRule exclusionRule = ExclusionRule.newBuilder()\n+          .setMatchingType(MatchingType.MATCHING_TYPE_PARTIAL_MATCH)\n+          .setDictionary(Dictionary.newBuilder()\n+              .setWordList(WordList.newBuilder().addAllWords(excludedSubstringList)))\n+          .build();\n+\n+      // Construct a ruleset that applies the exclusion rule to the EMAIL_ADDRESSES infotype.\n+      InspectionRuleSet ruleSet = InspectionRuleSet.newBuilder()\n+          .addInfoTypes(infoType)\n+          .addRules(InspectionRule.newBuilder().setExclusionRule(exclusionRule))\n+          .build();\n+\n+      // Construct the configuration for the Inspect request, including the ruleset.\n+      InspectConfig config =\n+          InspectConfig.newBuilder()\n+              .addCustomInfoTypes(customInfoType)\n+              .setIncludeQuote(true)\n+              .addRuleSet(ruleSet)\n+              .build();\n+\n+      // Construct the Inspect request to be sent by the client.\n+      InspectContentRequest request =\n+          InspectContentRequest.newBuilder()\n+              .setParent(LocationName.of(projectId, \"global\").toString())\n+              .setItem(item)\n+              .setInspectConfig(config)\n+              .build();\n+\n+      // Use the client to send the API request.\n+      InspectContentResponse response = dlp.inspectContent(request);\n+\n+      // Parse the response and process results\n+      System.out.println(\"Findings: \" + response.getResult().getFindingsCount());\n+      for (Finding f : response.getResult().getFindingsList()) {\n+        System.out.println(\"\\tQuote: \" + f.getQuote());\n+        System.out.println(\"\\tInfo type: \" + f.getInfoType().getName());\n+        System.out.println(\"\\tLikelihood: \" + f.getLikelihood());\n+      }\n+    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU1OTY4Mg=="}, "originalCommit": {"oid": "356f28a7095ea028909b3c2a48ef04bdc34a0ec5"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4NDU4MQ==", "bodyText": "SGTM", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3055#discussion_r435584581", "createdAt": "2020-06-04T22:21:31Z", "author": {"login": "lesv"}, "path": "dlp/src/main/java/dlp/snippets/InspectStringCustomExcludingSubstring.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+// [START dlp_inspect_string_custom_excluding_substring]\n+\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ByteContentItem;\n+import com.google.privacy.dlp.v2.ByteContentItem.BytesType;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.CustomInfoType;\n+import com.google.privacy.dlp.v2.CustomInfoType.Dictionary;\n+import com.google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList;\n+import com.google.privacy.dlp.v2.CustomInfoType.Regex;\n+import com.google.privacy.dlp.v2.ExclusionRule;\n+import com.google.privacy.dlp.v2.Finding;\n+import com.google.privacy.dlp.v2.InfoType;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.InspectContentRequest;\n+import com.google.privacy.dlp.v2.InspectContentResponse;\n+import com.google.privacy.dlp.v2.InspectionRule;\n+import com.google.privacy.dlp.v2.InspectionRuleSet;\n+import com.google.privacy.dlp.v2.LocationName;\n+import com.google.privacy.dlp.v2.MatchingType;\n+import com.google.protobuf.ByteString;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class InspectStringCustomExcludingSubstring {\n+\n+  public static void inspectStringCustomExcludingSubstring() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"your-project-id\";\n+    String textToInspect = \"Name: Doe, John. Name: Example, Jimmy\";\n+    String customDetectorPattern = \"[A-Z][a-z]{1,15}, [A-Z][a-z]{1,15}\";\n+    List<String> excludedSubstringList = Arrays.asList(\"Jimmy\");\n+    inspectStringCustomExcludingSubstring(projectId, textToInspect, customDetectorPattern,\n+        excludedSubstringList);\n+  }\n+\n+  // Inspects the provided text, avoiding matches specified in the exclusion list.\n+  public static void inspectStringCustomExcludingSubstring(String projectId, String textToInspect,\n+      String customDetectorPattern, List<String> excludedSubstringList) {\n+    // Initialize client that will be used to send requests. This client only needs to be created\n+    // once, and can be reused for multiple requests. After completing all of your requests, call\n+    // the \"close\" method on the client to safely clean up any remaining background resources.\n+    try (DlpServiceClient dlp = DlpServiceClient.create()) {\n+      // Specify the type and content to be inspected.\n+      ByteContentItem byteItem =\n+          ByteContentItem.newBuilder()\n+              .setType(BytesType.TEXT_UTF8)\n+              .setData(ByteString.copyFromUtf8(textToInspect))\n+              .build();\n+      ContentItem item = ContentItem.newBuilder().setByteItem(byteItem).build();\n+\n+      // Specify the type of info the inspection will look for.\n+      InfoType infoType = InfoType.newBuilder().setName(\"CUSTOM_NAME_DETECTOR\").build();\n+      CustomInfoType customInfoType = CustomInfoType.newBuilder()\n+          .setInfoType(infoType).setRegex(\n+              Regex.newBuilder().setPattern(customDetectorPattern)).build();\n+\n+      // Exclude partial matches from the specified excludedSubstringList.\n+      ExclusionRule exclusionRule = ExclusionRule.newBuilder()\n+          .setMatchingType(MatchingType.MATCHING_TYPE_PARTIAL_MATCH)\n+          .setDictionary(Dictionary.newBuilder()\n+              .setWordList(WordList.newBuilder().addAllWords(excludedSubstringList)))\n+          .build();\n+\n+      // Construct a ruleset that applies the exclusion rule to the EMAIL_ADDRESSES infotype.\n+      InspectionRuleSet ruleSet = InspectionRuleSet.newBuilder()\n+          .addInfoTypes(infoType)\n+          .addRules(InspectionRule.newBuilder().setExclusionRule(exclusionRule))\n+          .build();\n+\n+      // Construct the configuration for the Inspect request, including the ruleset.\n+      InspectConfig config =\n+          InspectConfig.newBuilder()\n+              .addCustomInfoTypes(customInfoType)\n+              .setIncludeQuote(true)\n+              .addRuleSet(ruleSet)\n+              .build();\n+\n+      // Construct the Inspect request to be sent by the client.\n+      InspectContentRequest request =\n+          InspectContentRequest.newBuilder()\n+              .setParent(LocationName.of(projectId, \"global\").toString())\n+              .setItem(item)\n+              .setInspectConfig(config)\n+              .build();\n+\n+      // Use the client to send the API request.\n+      InspectContentResponse response = dlp.inspectContent(request);\n+\n+      // Parse the response and process results\n+      System.out.println(\"Findings: \" + response.getResult().getFindingsCount());\n+      for (Finding f : response.getResult().getFindingsList()) {\n+        System.out.println(\"\\tQuote: \" + f.getQuote());\n+        System.out.println(\"\\tInfo type: \" + f.getInfoType().getName());\n+        System.out.println(\"\\tLikelihood: \" + f.getLikelihood());\n+      }\n+    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU1OTY4Mg=="}, "originalCommit": {"oid": "356f28a7095ea028909b3c2a48ef04bdc34a0ec5"}, "originalPosition": 115}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 670, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}