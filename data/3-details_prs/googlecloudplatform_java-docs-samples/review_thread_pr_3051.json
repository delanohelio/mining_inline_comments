{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NTcwMTU0", "number": 3051, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDo0OToyNFrOECmQNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMDo1MDowNVrOEDrF_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTU5MzUxOnYy", "diffSide": "RIGHT", "path": "dlp/src/main/java/dlp/snippets/DeIdentifyWithRedaction.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDo0OToyNFrOGfJuoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxODo0OTowMFrOGfTgDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMxODQzMg==", "bodyText": "I would change any class or method names containing DeIdentify to have a lowercase 'i' to be consistent with the client,  for example DeidentifyConfig.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3051#discussion_r435318432", "createdAt": "2020-06-04T14:49:24Z", "author": {"login": "kolea2"}, "path": "dlp/src/main/java/dlp/snippets/DeIdentifyWithRedaction.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2019 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+// [START dlp_deidentify_redact]\n+\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.DeidentifyConfig;\n+import com.google.privacy.dlp.v2.DeidentifyContentRequest;\n+import com.google.privacy.dlp.v2.DeidentifyContentResponse;\n+import com.google.privacy.dlp.v2.InfoType;\n+import com.google.privacy.dlp.v2.InfoTypeTransformations;\n+import com.google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.LocationName;\n+import com.google.privacy.dlp.v2.PrimitiveTransformation;\n+import com.google.privacy.dlp.v2.RedactConfig;\n+\n+public class DeIdentifyWithRedaction {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51d04bc0741d1d9e7d6888b993d0f1acc2478cdc"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM5NjAwMg==", "bodyText": "Actually samples in java-docs-samples repo all have capitalized class names -- so should be okay.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3051#discussion_r435396002", "createdAt": "2020-06-04T16:37:20Z", "author": {"login": "stephaniewang526"}, "path": "dlp/src/main/java/dlp/snippets/DeIdentifyWithRedaction.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2019 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+// [START dlp_deidentify_redact]\n+\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.DeidentifyConfig;\n+import com.google.privacy.dlp.v2.DeidentifyContentRequest;\n+import com.google.privacy.dlp.v2.DeidentifyContentResponse;\n+import com.google.privacy.dlp.v2.InfoType;\n+import com.google.privacy.dlp.v2.InfoTypeTransformations;\n+import com.google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.LocationName;\n+import com.google.privacy.dlp.v2.PrimitiveTransformation;\n+import com.google.privacy.dlp.v2.RedactConfig;\n+\n+public class DeIdentifyWithRedaction {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMxODQzMg=="}, "originalCommit": {"oid": "51d04bc0741d1d9e7d6888b993d0f1acc2478cdc"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3ODU0Mw==", "bodyText": "Yes, it's using this format for consistency with other examples. We could consider migrating all DeIdentify to Deidentify in a separate item. That would require keeping old names around until all references to them have been migrated to a lowercase name.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3051#discussion_r435478543", "createdAt": "2020-06-04T18:49:00Z", "author": {"login": "jakubrauch"}, "path": "dlp/src/main/java/dlp/snippets/DeIdentifyWithRedaction.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2019 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+// [START dlp_deidentify_redact]\n+\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.DeidentifyConfig;\n+import com.google.privacy.dlp.v2.DeidentifyContentRequest;\n+import com.google.privacy.dlp.v2.DeidentifyContentResponse;\n+import com.google.privacy.dlp.v2.InfoType;\n+import com.google.privacy.dlp.v2.InfoTypeTransformations;\n+import com.google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.LocationName;\n+import com.google.privacy.dlp.v2.PrimitiveTransformation;\n+import com.google.privacy.dlp.v2.RedactConfig;\n+\n+public class DeIdentifyWithRedaction {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMxODQzMg=="}, "originalCommit": {"oid": "51d04bc0741d1d9e7d6888b993d0f1acc2478cdc"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjg2OTkzOnYy", "diffSide": "RIGHT", "path": "dlp/src/main/java/dlp/snippets/DeIdentifyWithRedaction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMDo0ODozMVrOGg1DJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMDo0ODozMVrOGg1DJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3Njc3Mw==", "bodyText": "2020 ??", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3051#discussion_r437076773", "createdAt": "2020-06-09T00:48:31Z", "author": {"login": "lesv"}, "path": "dlp/src/main/java/dlp/snippets/DeIdentifyWithRedaction.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2019 Google LLC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f2e4ed4b3e67d3ead183b0c306d06d3c180830f"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjg3MjI5OnYy", "diffSide": "RIGHT", "path": "dlp/src/main/java/dlp/snippets/DeIdentifyWithRedaction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMDo1MDowNVrOGg1ErA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMDo1MDowNVrOGg1ErA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3NzE2NA==", "bodyText": "Really should explain a bit more here, also can you be more specific about the kind of errors that may occur", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3051#discussion_r437077164", "createdAt": "2020-06-09T00:50:05Z", "author": {"login": "lesv"}, "path": "dlp/src/main/java/dlp/snippets/DeIdentifyWithRedaction.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2019 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+// [START dlp_deidentify_redact]\n+\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.DeidentifyConfig;\n+import com.google.privacy.dlp.v2.DeidentifyContentRequest;\n+import com.google.privacy.dlp.v2.DeidentifyContentResponse;\n+import com.google.privacy.dlp.v2.InfoType;\n+import com.google.privacy.dlp.v2.InfoTypeTransformations;\n+import com.google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.LocationName;\n+import com.google.privacy.dlp.v2.PrimitiveTransformation;\n+import com.google.privacy.dlp.v2.RedactConfig;\n+\n+public class DeIdentifyWithRedaction {\n+\n+  public static void deIdentifyWithRedaction() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"your-project-id\";\n+    String textToInspect =\n+        \"My name is Alicia Abernathy, and my email address is aabernathy@example.com.\";\n+    deIdentifyWithRedaction(projectId, textToInspect);\n+  }\n+\n+  // Inspects the provided text.\n+  public static void deIdentifyWithRedaction(String projectId, String textToRedact) {\n+    // Initialize client that will be used to send requests. This client only needs to be created\n+    // once, and can be reused for multiple requests. After completing all of your requests, call\n+    // the \"close\" method on the client to safely clean up any remaining background resources.\n+    try (DlpServiceClient dlp = DlpServiceClient.create()) {\n+      // Specify the content to be inspected.\n+      ContentItem item = ContentItem.newBuilder()\n+          .setValue(textToRedact).build();\n+\n+      // Specify the type of info the inspection will look for.\n+      // See https://cloud.google.com/dlp/docs/infotypes-reference for complete list of info types\n+      InfoType infoType = InfoType.newBuilder().setName(\"EMAIL_ADDRESS\").build();\n+      InspectConfig inspectConfig = InspectConfig.newBuilder().addInfoTypes(infoType).build();\n+      // Define type of deidentification.\n+      PrimitiveTransformation primitiveTransformation = PrimitiveTransformation.newBuilder()\n+          .setRedactConfig(RedactConfig.getDefaultInstance())\n+          .build();\n+      // Associate deidentification type with info type.\n+      InfoTypeTransformation transformation = InfoTypeTransformation.newBuilder()\n+          .addInfoTypes(infoType)\n+          .setPrimitiveTransformation(primitiveTransformation)\n+          .build();\n+      // Construct the configuration for the Redact request and list all desired transformations.\n+      DeidentifyConfig redactConfig = DeidentifyConfig.newBuilder()\n+          .setInfoTypeTransformations(InfoTypeTransformations.newBuilder()\n+              .addTransformations(transformation))\n+          .build();\n+\n+      // Construct the Redact request to be sent by the client.\n+      DeidentifyContentRequest request =\n+          DeidentifyContentRequest.newBuilder()\n+              .setParent(LocationName.of(projectId, \"global\").toString())\n+              .setItem(item)\n+              .setDeidentifyConfig(redactConfig)\n+              .setInspectConfig(inspectConfig)\n+              .build();\n+\n+      // Use the client to send the API request.\n+      DeidentifyContentResponse response = dlp.deidentifyContent(request);\n+\n+      // Parse the response and process results\n+      System.out.println(\"Text after redaction: \" + response.getItem().getValue());\n+    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f2e4ed4b3e67d3ead183b0c306d06d3c180830f"}, "originalPosition": 87}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 667, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}