{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NzYwMzM0", "number": 2986, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxODozMjowOVrOEA_wBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjo0MjowMVrOEI1xMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDc5OTQwOnYy", "diffSide": "RIGHT", "path": "iap/src/main/java/com/example/iap/VerifyIapRequestHeader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxODozMjowOVrOGcnx-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxODozMjowOVrOGcnx-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY2NTA4Mw==", "bodyText": "This is beautiful!", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2986#discussion_r432665083", "createdAt": "2020-05-29T18:32:09Z", "author": {"login": "bshaffer"}, "path": "iap/src/main/java/com/example/iap/VerifyIapRequestHeader.java", "diffHunk": "@@ -97,37 +55,15 @@ boolean verifyJwtForComputeEngine(\n   }\n \n   private boolean verifyJwt(String jwtToken, String expectedAudience) throws Exception {\n-\n-    // parse signed token into header / claims\n-    SignedJWT signedJwt = SignedJWT.parse(jwtToken);\n-    JWSHeader jwsHeader = signedJwt.getHeader();\n-\n-    // header must have algorithm(\"alg\") and \"kid\"\n-    Preconditions.checkNotNull(jwsHeader.getAlgorithm());\n-    Preconditions.checkNotNull(jwsHeader.getKeyID());\n-\n-    JWTClaimsSet claims = signedJwt.getJWTClaimsSet();\n-\n-    // claims must have audience, issuer\n-    Preconditions.checkArgument(claims.getAudience().contains(expectedAudience));\n-    Preconditions.checkArgument(claims.getIssuer().equals(IAP_ISSUER_URL));\n-\n-    // claim must have issued at time in the past\n-    Date currentTime = Date.from(Instant.now(clock));\n-    Preconditions.checkArgument(claims.getIssueTime().before(currentTime));\n-    // claim must have expiration time in the future\n-    Preconditions.checkArgument(claims.getExpirationTime().after(currentTime));\n-\n-    // must have subject, email\n-    Preconditions.checkNotNull(claims.getSubject());\n-    Preconditions.checkNotNull(claims.getClaim(\"email\"));\n-\n-    // verify using public key : lookup with key id, algorithm name provided\n-    ECPublicKey publicKey = getKey(jwsHeader.getKeyID(), jwsHeader.getAlgorithm().getName());\n-\n-    Preconditions.checkNotNull(publicKey);\n-    JWSVerifier jwsVerifier = new ECDSAVerifier(publicKey);\n-    return signedJwt.verify(jwsVerifier);\n+    TokenVerifier tokenVerifier = TokenVerifier.newBuilder()\n+        .setAudience(expectedAudience)\n+        .build();\n+    try {\n+      tokenVerifier.verify(jwtToken);\n+      return true;\n+    } catch (TokenVerifier.VerificationException e) {\n+      return false;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7a25d6a8b9833f8389e4bc2094c9fe96607ec3a"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDgxOTgwOnYy", "diffSide": "RIGHT", "path": "iap/src/main/java/com/example/iap/VerifyIapRequestHeader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxODozOToxOFrOGcn--w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxODozOToxOFrOGcn--w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY2ODQxMQ==", "bodyText": "What is the recommended way to verify the claims (e.g. pull the email and sub field from the verified JWT)? It would be good to include this.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2986#discussion_r432668411", "createdAt": "2020-05-29T18:39:18Z", "author": {"login": "bshaffer"}, "path": "iap/src/main/java/com/example/iap/VerifyIapRequestHeader.java", "diffHunk": "@@ -97,37 +55,15 @@ boolean verifyJwtForComputeEngine(\n   }\n \n   private boolean verifyJwt(String jwtToken, String expectedAudience) throws Exception {\n-\n-    // parse signed token into header / claims\n-    SignedJWT signedJwt = SignedJWT.parse(jwtToken);\n-    JWSHeader jwsHeader = signedJwt.getHeader();\n-\n-    // header must have algorithm(\"alg\") and \"kid\"\n-    Preconditions.checkNotNull(jwsHeader.getAlgorithm());\n-    Preconditions.checkNotNull(jwsHeader.getKeyID());\n-\n-    JWTClaimsSet claims = signedJwt.getJWTClaimsSet();\n-\n-    // claims must have audience, issuer\n-    Preconditions.checkArgument(claims.getAudience().contains(expectedAudience));\n-    Preconditions.checkArgument(claims.getIssuer().equals(IAP_ISSUER_URL));\n-\n-    // claim must have issued at time in the past\n-    Date currentTime = Date.from(Instant.now(clock));\n-    Preconditions.checkArgument(claims.getIssueTime().before(currentTime));\n-    // claim must have expiration time in the future\n-    Preconditions.checkArgument(claims.getExpirationTime().after(currentTime));\n-\n-    // must have subject, email\n-    Preconditions.checkNotNull(claims.getSubject());\n-    Preconditions.checkNotNull(claims.getClaim(\"email\"));\n-\n-    // verify using public key : lookup with key id, algorithm name provided\n-    ECPublicKey publicKey = getKey(jwsHeader.getKeyID(), jwsHeader.getAlgorithm().getName());\n-\n-    Preconditions.checkNotNull(publicKey);\n-    JWSVerifier jwsVerifier = new ECDSAVerifier(publicKey);\n-    return signedJwt.verify(jwsVerifier);\n+    TokenVerifier tokenVerifier = TokenVerifier.newBuilder()\n+        .setAudience(expectedAudience)\n+        .build();\n+    try {\n+      tokenVerifier.verify(jwtToken);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7a25d6a8b9833f8389e4bc2094c9fe96607ec3a"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDgzMDU2OnYy", "diffSide": "RIGHT", "path": "iap/src/main/java/com/example/iap/VerifyIapRequestHeader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxODo0Mjo1NlrOGcoFyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxODo0Mjo1NlrOGcoFyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY3MDE1Mw==", "bodyText": "this should also set the issuer https://cloud.google.com/iap so this is verified as well!", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2986#discussion_r432670153", "createdAt": "2020-05-29T18:42:56Z", "author": {"login": "bshaffer"}, "path": "iap/src/main/java/com/example/iap/VerifyIapRequestHeader.java", "diffHunk": "@@ -97,37 +55,15 @@ boolean verifyJwtForComputeEngine(\n   }\n \n   private boolean verifyJwt(String jwtToken, String expectedAudience) throws Exception {\n-\n-    // parse signed token into header / claims\n-    SignedJWT signedJwt = SignedJWT.parse(jwtToken);\n-    JWSHeader jwsHeader = signedJwt.getHeader();\n-\n-    // header must have algorithm(\"alg\") and \"kid\"\n-    Preconditions.checkNotNull(jwsHeader.getAlgorithm());\n-    Preconditions.checkNotNull(jwsHeader.getKeyID());\n-\n-    JWTClaimsSet claims = signedJwt.getJWTClaimsSet();\n-\n-    // claims must have audience, issuer\n-    Preconditions.checkArgument(claims.getAudience().contains(expectedAudience));\n-    Preconditions.checkArgument(claims.getIssuer().equals(IAP_ISSUER_URL));\n-\n-    // claim must have issued at time in the past\n-    Date currentTime = Date.from(Instant.now(clock));\n-    Preconditions.checkArgument(claims.getIssueTime().before(currentTime));\n-    // claim must have expiration time in the future\n-    Preconditions.checkArgument(claims.getExpirationTime().after(currentTime));\n-\n-    // must have subject, email\n-    Preconditions.checkNotNull(claims.getSubject());\n-    Preconditions.checkNotNull(claims.getClaim(\"email\"));\n-\n-    // verify using public key : lookup with key id, algorithm name provided\n-    ECPublicKey publicKey = getKey(jwsHeader.getKeyID(), jwsHeader.getAlgorithm().getName());\n-\n-    Preconditions.checkNotNull(publicKey);\n-    JWSVerifier jwsVerifier = new ECDSAVerifier(publicKey);\n-    return signedJwt.verify(jwsVerifier);\n+    TokenVerifier tokenVerifier = TokenVerifier.newBuilder()\n+        .setAudience(expectedAudience)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7a25d6a8b9833f8389e4bc2094c9fe96607ec3a"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDg4MDM4OnYy", "diffSide": "RIGHT", "path": "iap/src/main/java/com/example/iap/VerifyIapRequestHeader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxOTo0NTo1M1rOGiD19A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMDo1Mzo1M1rOGoiwOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM2NzczMg==", "bodyText": "nit: Update comment to be more informative", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2986#discussion_r438367732", "createdAt": "2020-06-10T19:45:53Z", "author": {"login": "averikitsch"}, "path": "iap/src/main/java/com/example/iap/VerifyIapRequestHeader.java", "diffHunk": "@@ -96,38 +57,20 @@ boolean verifyJwtForComputeEngine(\n             Long.toUnsignedString(projectNumber), Long.toUnsignedString(backendServiceId)));\n   }\n \n-  private boolean verifyJwt(String jwtToken, String expectedAudience) throws Exception {\n-\n-    // parse signed token into header / claims\n-    SignedJWT signedJwt = SignedJWT.parse(jwtToken);\n-    JWSHeader jwsHeader = signedJwt.getHeader();\n-\n-    // header must have algorithm(\"alg\") and \"kid\"\n-    Preconditions.checkNotNull(jwsHeader.getAlgorithm());\n-    Preconditions.checkNotNull(jwsHeader.getKeyID());\n-\n-    JWTClaimsSet claims = signedJwt.getJWTClaimsSet();\n-\n-    // claims must have audience, issuer\n-    Preconditions.checkArgument(claims.getAudience().contains(expectedAudience));\n-    Preconditions.checkArgument(claims.getIssuer().equals(IAP_ISSUER_URL));\n-\n-    // claim must have issued at time in the past\n-    Date currentTime = Date.from(Instant.now(clock));\n-    Preconditions.checkArgument(claims.getIssueTime().before(currentTime));\n-    // claim must have expiration time in the future\n-    Preconditions.checkArgument(claims.getExpirationTime().after(currentTime));\n-\n-    // must have subject, email\n-    Preconditions.checkNotNull(claims.getSubject());\n-    Preconditions.checkNotNull(claims.getClaim(\"email\"));\n-\n-    // verify using public key : lookup with key id, algorithm name provided\n-    ECPublicKey publicKey = getKey(jwsHeader.getKeyID(), jwsHeader.getAlgorithm().getName());\n-\n-    Preconditions.checkNotNull(publicKey);\n-    JWSVerifier jwsVerifier = new ECDSAVerifier(publicKey);\n-    return signedJwt.verify(jwsVerifier);\n+  private boolean verifyJwt(String jwtToken, String expectedAudience) {\n+    TokenVerifier tokenVerifier = TokenVerifier.newBuilder()\n+        .setAudience(expectedAudience)\n+        .setIssuer(IAP_ISSUER_URL)\n+        .build();\n+    try {\n+      JsonWebToken jsonWebToken = tokenVerifier.verify(jwtToken);\n+\n+      // must have subject, email", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "660c13cb5a368beea79214f9f5082a8360e961b2"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE2NTYyNg==", "bodyText": "Updated to clarify this comment", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2986#discussion_r445165626", "createdAt": "2020-06-24T20:53:53Z", "author": {"login": "chingor13"}, "path": "iap/src/main/java/com/example/iap/VerifyIapRequestHeader.java", "diffHunk": "@@ -96,38 +57,20 @@ boolean verifyJwtForComputeEngine(\n             Long.toUnsignedString(projectNumber), Long.toUnsignedString(backendServiceId)));\n   }\n \n-  private boolean verifyJwt(String jwtToken, String expectedAudience) throws Exception {\n-\n-    // parse signed token into header / claims\n-    SignedJWT signedJwt = SignedJWT.parse(jwtToken);\n-    JWSHeader jwsHeader = signedJwt.getHeader();\n-\n-    // header must have algorithm(\"alg\") and \"kid\"\n-    Preconditions.checkNotNull(jwsHeader.getAlgorithm());\n-    Preconditions.checkNotNull(jwsHeader.getKeyID());\n-\n-    JWTClaimsSet claims = signedJwt.getJWTClaimsSet();\n-\n-    // claims must have audience, issuer\n-    Preconditions.checkArgument(claims.getAudience().contains(expectedAudience));\n-    Preconditions.checkArgument(claims.getIssuer().equals(IAP_ISSUER_URL));\n-\n-    // claim must have issued at time in the past\n-    Date currentTime = Date.from(Instant.now(clock));\n-    Preconditions.checkArgument(claims.getIssueTime().before(currentTime));\n-    // claim must have expiration time in the future\n-    Preconditions.checkArgument(claims.getExpirationTime().after(currentTime));\n-\n-    // must have subject, email\n-    Preconditions.checkNotNull(claims.getSubject());\n-    Preconditions.checkNotNull(claims.getClaim(\"email\"));\n-\n-    // verify using public key : lookup with key id, algorithm name provided\n-    ECPublicKey publicKey = getKey(jwsHeader.getKeyID(), jwsHeader.getAlgorithm().getName());\n-\n-    Preconditions.checkNotNull(publicKey);\n-    JWSVerifier jwsVerifier = new ECDSAVerifier(publicKey);\n-    return signedJwt.verify(jwsVerifier);\n+  private boolean verifyJwt(String jwtToken, String expectedAudience) {\n+    TokenVerifier tokenVerifier = TokenVerifier.newBuilder()\n+        .setAudience(expectedAudience)\n+        .setIssuer(IAP_ISSUER_URL)\n+        .build();\n+    try {\n+      JsonWebToken jsonWebToken = tokenVerifier.verify(jwtToken);\n+\n+      // must have subject, email", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM2NzczMg=="}, "originalCommit": {"oid": "660c13cb5a368beea79214f9f5082a8360e961b2"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NzA1MDA4OnYy", "diffSide": "RIGHT", "path": "iap/src/main/java/com/example/iap/VerifyIapRequestHeader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjo0MjowMVrOGpDA3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNzoxMDowMVrOGpECfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY5NDE3Mg==", "bodyText": "Do we want to print the exception message so the user knows why verification failed?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2986#discussion_r445694172", "createdAt": "2020-06-25T16:42:01Z", "author": {"login": "bshaffer"}, "path": "iap/src/main/java/com/example/iap/VerifyIapRequestHeader.java", "diffHunk": "@@ -96,38 +57,20 @@ boolean verifyJwtForComputeEngine(\n             Long.toUnsignedString(projectNumber), Long.toUnsignedString(backendServiceId)));\n   }\n \n-  private boolean verifyJwt(String jwtToken, String expectedAudience) throws Exception {\n-\n-    // parse signed token into header / claims\n-    SignedJWT signedJwt = SignedJWT.parse(jwtToken);\n-    JWSHeader jwsHeader = signedJwt.getHeader();\n-\n-    // header must have algorithm(\"alg\") and \"kid\"\n-    Preconditions.checkNotNull(jwsHeader.getAlgorithm());\n-    Preconditions.checkNotNull(jwsHeader.getKeyID());\n-\n-    JWTClaimsSet claims = signedJwt.getJWTClaimsSet();\n-\n-    // claims must have audience, issuer\n-    Preconditions.checkArgument(claims.getAudience().contains(expectedAudience));\n-    Preconditions.checkArgument(claims.getIssuer().equals(IAP_ISSUER_URL));\n-\n-    // claim must have issued at time in the past\n-    Date currentTime = Date.from(Instant.now(clock));\n-    Preconditions.checkArgument(claims.getIssueTime().before(currentTime));\n-    // claim must have expiration time in the future\n-    Preconditions.checkArgument(claims.getExpirationTime().after(currentTime));\n-\n-    // must have subject, email\n-    Preconditions.checkNotNull(claims.getSubject());\n-    Preconditions.checkNotNull(claims.getClaim(\"email\"));\n-\n-    // verify using public key : lookup with key id, algorithm name provided\n-    ECPublicKey publicKey = getKey(jwsHeader.getKeyID(), jwsHeader.getAlgorithm().getName());\n-\n-    Preconditions.checkNotNull(publicKey);\n-    JWSVerifier jwsVerifier = new ECDSAVerifier(publicKey);\n-    return signedJwt.verify(jwsVerifier);\n+  private boolean verifyJwt(String jwtToken, String expectedAudience) {\n+    TokenVerifier tokenVerifier = TokenVerifier.newBuilder()\n+        .setAudience(expectedAudience)\n+        .setIssuer(IAP_ISSUER_URL)\n+        .build();\n+    try {\n+      JsonWebToken jsonWebToken = tokenVerifier.verify(jwtToken);\n+\n+      // Verify that the token contain subject and email claims\n+      JsonWebToken.Payload payload = jsonWebToken.getPayload();\n+      return payload.getSubject() != null && payload.get(\"email\") != null;\n+    } catch (TokenVerifier.VerificationException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebf4587f3961afb23c2be72d6bd9e514f80645d9"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTcxMDk3Mg==", "bodyText": "Sure makes sense - updated to print the message to stdout.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2986#discussion_r445710972", "createdAt": "2020-06-25T17:10:01Z", "author": {"login": "chingor13"}, "path": "iap/src/main/java/com/example/iap/VerifyIapRequestHeader.java", "diffHunk": "@@ -96,38 +57,20 @@ boolean verifyJwtForComputeEngine(\n             Long.toUnsignedString(projectNumber), Long.toUnsignedString(backendServiceId)));\n   }\n \n-  private boolean verifyJwt(String jwtToken, String expectedAudience) throws Exception {\n-\n-    // parse signed token into header / claims\n-    SignedJWT signedJwt = SignedJWT.parse(jwtToken);\n-    JWSHeader jwsHeader = signedJwt.getHeader();\n-\n-    // header must have algorithm(\"alg\") and \"kid\"\n-    Preconditions.checkNotNull(jwsHeader.getAlgorithm());\n-    Preconditions.checkNotNull(jwsHeader.getKeyID());\n-\n-    JWTClaimsSet claims = signedJwt.getJWTClaimsSet();\n-\n-    // claims must have audience, issuer\n-    Preconditions.checkArgument(claims.getAudience().contains(expectedAudience));\n-    Preconditions.checkArgument(claims.getIssuer().equals(IAP_ISSUER_URL));\n-\n-    // claim must have issued at time in the past\n-    Date currentTime = Date.from(Instant.now(clock));\n-    Preconditions.checkArgument(claims.getIssueTime().before(currentTime));\n-    // claim must have expiration time in the future\n-    Preconditions.checkArgument(claims.getExpirationTime().after(currentTime));\n-\n-    // must have subject, email\n-    Preconditions.checkNotNull(claims.getSubject());\n-    Preconditions.checkNotNull(claims.getClaim(\"email\"));\n-\n-    // verify using public key : lookup with key id, algorithm name provided\n-    ECPublicKey publicKey = getKey(jwsHeader.getKeyID(), jwsHeader.getAlgorithm().getName());\n-\n-    Preconditions.checkNotNull(publicKey);\n-    JWSVerifier jwsVerifier = new ECDSAVerifier(publicKey);\n-    return signedJwt.verify(jwsVerifier);\n+  private boolean verifyJwt(String jwtToken, String expectedAudience) {\n+    TokenVerifier tokenVerifier = TokenVerifier.newBuilder()\n+        .setAudience(expectedAudience)\n+        .setIssuer(IAP_ISSUER_URL)\n+        .build();\n+    try {\n+      JsonWebToken jsonWebToken = tokenVerifier.verify(jwtToken);\n+\n+      // Verify that the token contain subject and email claims\n+      JsonWebToken.Payload payload = jsonWebToken.getPayload();\n+      return payload.getSubject() != null && payload.get(\"email\") != null;\n+    } catch (TokenVerifier.VerificationException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY5NDE3Mg=="}, "originalCommit": {"oid": "ebf4587f3961afb23c2be72d6bd9e514f80645d9"}, "originalPosition": 103}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 643, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}