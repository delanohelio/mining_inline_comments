{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMjIzNzUx", "number": 3146, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzo0NDo0OFrOEEyR_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzo0NDo0OFrOEEyR_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDUzNTY3OnYy", "diffSide": "RIGHT", "path": "dlp/src/main/java/dlp/snippets/InspectGcsFileWithSampling.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzo0NDo0OFrOGioDrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzo1NTo0N1rOGioomA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk2MTA3MQ==", "bodyText": "Is there something a user should do here?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3146#discussion_r438961071", "createdAt": "2020-06-11T17:44:48Z", "author": {"login": "lesv"}, "path": "dlp/src/main/java/dlp/snippets/InspectGcsFileWithSampling.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Copyright 2019 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+// [START dlp_inspect_gcs]\n+\n+import com.google.api.core.SettableApiFuture;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.cloud.pubsub.v1.AckReplyConsumer;\n+import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.cloud.pubsub.v1.Subscriber;\n+import com.google.privacy.dlp.v2.Action;\n+import com.google.privacy.dlp.v2.CloudStorageOptions;\n+import com.google.privacy.dlp.v2.CloudStorageOptions.FileSet;\n+import com.google.privacy.dlp.v2.CloudStorageOptions.SampleMethod;\n+import com.google.privacy.dlp.v2.CreateDlpJobRequest;\n+import com.google.privacy.dlp.v2.DlpJob;\n+import com.google.privacy.dlp.v2.FileType;\n+import com.google.privacy.dlp.v2.GetDlpJobRequest;\n+import com.google.privacy.dlp.v2.InfoType;\n+import com.google.privacy.dlp.v2.InfoTypeStats;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.InspectDataSourceDetails;\n+import com.google.privacy.dlp.v2.InspectJobConfig;\n+import com.google.privacy.dlp.v2.Likelihood;\n+import com.google.privacy.dlp.v2.LocationName;\n+import com.google.privacy.dlp.v2.StorageConfig;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.PubsubMessage;\n+import java.io.IOException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+public class InspectGcsFileWithSampling {\n+\n+  public static void inspectGcsFileWithSampling()\n+      throws InterruptedException, ExecutionException, IOException {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"your-project-id\";\n+    String gcsUri = \"gs://\" + \"your-bucket-name\" + \"/path/to/your/file.txt\";\n+    String topicId = \"your-pubsub-topic-id\";\n+    String subscriptionId = \"your-pubsub-subscription-id\";\n+    inspectGcsFileWithSampling(projectId, gcsUri, topicId, subscriptionId);\n+  }\n+\n+  // Inspects a file in a Google Cloud Storage Bucket.\n+  public static void inspectGcsFileWithSampling(\n+      String projectId, String gcsUri, String topicId, String subscriptionId)\n+      throws ExecutionException, InterruptedException, IOException {\n+    // Initialize client that will be used to send requests. This client only needs to be created\n+    // once, and can be reused for multiple requests. After completing all of your requests, call\n+    // the \"close\" method on the client to safely clean up any remaining background resources.\n+    try (DlpServiceClient dlp = DlpServiceClient.create()) {\n+      // Specify the GCS file to be inspected and sampling configuration\n+      CloudStorageOptions cloudStorageOptions =\n+          CloudStorageOptions.newBuilder()\n+              .setFileSet(FileSet.newBuilder().setUrl(gcsUri))\n+              .setBytesLimitPerFile(200)\n+              .addFileTypes(FileType.TEXT_FILE)\n+              .setFilesLimitPercent(90)\n+              .setSampleMethod(SampleMethod.RANDOM_START)\n+              .build();\n+\n+      StorageConfig storageConfig =\n+          StorageConfig.newBuilder().setCloudStorageOptions(cloudStorageOptions).build();\n+\n+      // Specify the type of info the inspection will look for.\n+      // See https://cloud.google.com/dlp/docs/infotypes-reference for complete list of info types\n+      InfoType infoType = InfoType.newBuilder().setName(\"PERSON_NAME\").build();\n+\n+      // Specify how the content should be inspected.\n+      InspectConfig inspectConfig =\n+          InspectConfig.newBuilder()\n+              .addInfoTypes(infoType)\n+              .setExcludeInfoTypes(true)\n+              .setIncludeQuote(true)\n+              .setMinLikelihood(Likelihood.POSSIBLE)\n+              .build();\n+\n+      // Specify the action that is triggered when the job completes.\n+      String pubSubTopic = String.format(\"projects/%s/topics/%s\", projectId, topicId);\n+      Action.PublishToPubSub publishToPubSub =\n+          Action.PublishToPubSub.newBuilder().setTopic(pubSubTopic).build();\n+      Action action = Action.newBuilder().setPubSub(publishToPubSub).build();\n+\n+      // Configure the long running job we want the service to perform.\n+      InspectJobConfig inspectJobConfig =\n+          InspectJobConfig.newBuilder()\n+              .setStorageConfig(storageConfig)\n+              .setInspectConfig(inspectConfig)\n+              .addActions(action)\n+              .build();\n+\n+      // Create the request for the job configured above.\n+      CreateDlpJobRequest createDlpJobRequest =\n+          CreateDlpJobRequest.newBuilder()\n+              .setParent(LocationName.of(projectId, \"global\").toString())\n+              .setInspectJob(inspectJobConfig)\n+              .build();\n+\n+      // Use the client to send the request.\n+      final DlpJob dlpJob = dlp.createDlpJob(createDlpJobRequest);\n+      System.out.println(\"Job created: \" + dlpJob.getName());\n+\n+      // Set up a Pub/Sub subscriber to listen on the job completion status\n+      final SettableApiFuture<Boolean> done = SettableApiFuture.create();\n+\n+      ProjectSubscriptionName subscriptionName =\n+          ProjectSubscriptionName.of(projectId, subscriptionId);\n+\n+      MessageReceiver messageHandler =\n+          (PubsubMessage pubsubMessage, AckReplyConsumer ackReplyConsumer) -> {\n+            handleMessage(dlpJob, done, pubsubMessage, ackReplyConsumer);\n+          };\n+      Subscriber subscriber = Subscriber.newBuilder(subscriptionName, messageHandler).build();\n+      subscriber.startAsync();\n+\n+      // Wait for the original job to complete\n+      try {\n+        done.get(15, TimeUnit.MINUTES);\n+      } catch (TimeoutException e) {\n+        System.out.println(\"Job was not completed after 15 minutes.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1805e94ee5982b6a8fd79fec706df7318da65e85"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MDUyMA==", "bodyText": "For now I'm keeping this consistent with the other existing samples. Obviously \"println and return\" is probably not the right answer for most prod systems, but it does keep the sample simple. Hopefully it's easy for users to tune to their own needs.\nAs a broader effort, it would be great to have a consistent approach to recommend across samples, across APIs, and (ideally) across languages as well.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3146#discussion_r438970520", "createdAt": "2020-06-11T17:55:47Z", "author": {"login": "sushicw"}, "path": "dlp/src/main/java/dlp/snippets/InspectGcsFileWithSampling.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Copyright 2019 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+// [START dlp_inspect_gcs]\n+\n+import com.google.api.core.SettableApiFuture;\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.cloud.pubsub.v1.AckReplyConsumer;\n+import com.google.cloud.pubsub.v1.MessageReceiver;\n+import com.google.cloud.pubsub.v1.Subscriber;\n+import com.google.privacy.dlp.v2.Action;\n+import com.google.privacy.dlp.v2.CloudStorageOptions;\n+import com.google.privacy.dlp.v2.CloudStorageOptions.FileSet;\n+import com.google.privacy.dlp.v2.CloudStorageOptions.SampleMethod;\n+import com.google.privacy.dlp.v2.CreateDlpJobRequest;\n+import com.google.privacy.dlp.v2.DlpJob;\n+import com.google.privacy.dlp.v2.FileType;\n+import com.google.privacy.dlp.v2.GetDlpJobRequest;\n+import com.google.privacy.dlp.v2.InfoType;\n+import com.google.privacy.dlp.v2.InfoTypeStats;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.InspectDataSourceDetails;\n+import com.google.privacy.dlp.v2.InspectJobConfig;\n+import com.google.privacy.dlp.v2.Likelihood;\n+import com.google.privacy.dlp.v2.LocationName;\n+import com.google.privacy.dlp.v2.StorageConfig;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.PubsubMessage;\n+import java.io.IOException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+public class InspectGcsFileWithSampling {\n+\n+  public static void inspectGcsFileWithSampling()\n+      throws InterruptedException, ExecutionException, IOException {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"your-project-id\";\n+    String gcsUri = \"gs://\" + \"your-bucket-name\" + \"/path/to/your/file.txt\";\n+    String topicId = \"your-pubsub-topic-id\";\n+    String subscriptionId = \"your-pubsub-subscription-id\";\n+    inspectGcsFileWithSampling(projectId, gcsUri, topicId, subscriptionId);\n+  }\n+\n+  // Inspects a file in a Google Cloud Storage Bucket.\n+  public static void inspectGcsFileWithSampling(\n+      String projectId, String gcsUri, String topicId, String subscriptionId)\n+      throws ExecutionException, InterruptedException, IOException {\n+    // Initialize client that will be used to send requests. This client only needs to be created\n+    // once, and can be reused for multiple requests. After completing all of your requests, call\n+    // the \"close\" method on the client to safely clean up any remaining background resources.\n+    try (DlpServiceClient dlp = DlpServiceClient.create()) {\n+      // Specify the GCS file to be inspected and sampling configuration\n+      CloudStorageOptions cloudStorageOptions =\n+          CloudStorageOptions.newBuilder()\n+              .setFileSet(FileSet.newBuilder().setUrl(gcsUri))\n+              .setBytesLimitPerFile(200)\n+              .addFileTypes(FileType.TEXT_FILE)\n+              .setFilesLimitPercent(90)\n+              .setSampleMethod(SampleMethod.RANDOM_START)\n+              .build();\n+\n+      StorageConfig storageConfig =\n+          StorageConfig.newBuilder().setCloudStorageOptions(cloudStorageOptions).build();\n+\n+      // Specify the type of info the inspection will look for.\n+      // See https://cloud.google.com/dlp/docs/infotypes-reference for complete list of info types\n+      InfoType infoType = InfoType.newBuilder().setName(\"PERSON_NAME\").build();\n+\n+      // Specify how the content should be inspected.\n+      InspectConfig inspectConfig =\n+          InspectConfig.newBuilder()\n+              .addInfoTypes(infoType)\n+              .setExcludeInfoTypes(true)\n+              .setIncludeQuote(true)\n+              .setMinLikelihood(Likelihood.POSSIBLE)\n+              .build();\n+\n+      // Specify the action that is triggered when the job completes.\n+      String pubSubTopic = String.format(\"projects/%s/topics/%s\", projectId, topicId);\n+      Action.PublishToPubSub publishToPubSub =\n+          Action.PublishToPubSub.newBuilder().setTopic(pubSubTopic).build();\n+      Action action = Action.newBuilder().setPubSub(publishToPubSub).build();\n+\n+      // Configure the long running job we want the service to perform.\n+      InspectJobConfig inspectJobConfig =\n+          InspectJobConfig.newBuilder()\n+              .setStorageConfig(storageConfig)\n+              .setInspectConfig(inspectConfig)\n+              .addActions(action)\n+              .build();\n+\n+      // Create the request for the job configured above.\n+      CreateDlpJobRequest createDlpJobRequest =\n+          CreateDlpJobRequest.newBuilder()\n+              .setParent(LocationName.of(projectId, \"global\").toString())\n+              .setInspectJob(inspectJobConfig)\n+              .build();\n+\n+      // Use the client to send the request.\n+      final DlpJob dlpJob = dlp.createDlpJob(createDlpJobRequest);\n+      System.out.println(\"Job created: \" + dlpJob.getName());\n+\n+      // Set up a Pub/Sub subscriber to listen on the job completion status\n+      final SettableApiFuture<Boolean> done = SettableApiFuture.create();\n+\n+      ProjectSubscriptionName subscriptionName =\n+          ProjectSubscriptionName.of(projectId, subscriptionId);\n+\n+      MessageReceiver messageHandler =\n+          (PubsubMessage pubsubMessage, AckReplyConsumer ackReplyConsumer) -> {\n+            handleMessage(dlpJob, done, pubsubMessage, ackReplyConsumer);\n+          };\n+      Subscriber subscriber = Subscriber.newBuilder(subscriptionName, messageHandler).build();\n+      subscriber.startAsync();\n+\n+      // Wait for the original job to complete\n+      try {\n+        done.get(15, TimeUnit.MINUTES);\n+      } catch (TimeoutException e) {\n+        System.out.println(\"Job was not completed after 15 minutes.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk2MTA3MQ=="}, "originalCommit": {"oid": "1805e94ee5982b6a8fd79fec706df7318da65e85"}, "originalPosition": 137}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 635, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}