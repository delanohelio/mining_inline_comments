{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4OTE0MDYx", "number": 3752, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDozOTowMVrOEkt7tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDo0ODo1M1rOEkuIPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTM2NzU2OnYy", "diffSide": "RIGHT", "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDozOTowMVrOHT0slw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTowNTozNVrOHT1g-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU0ODM3NQ==", "bodyText": "You don't need to update this.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#discussion_r490548375", "createdAt": "2020-09-17T20:39:01Z", "author": {"login": "lesv"}, "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "diffHunk": "@@ -1,4 +1,4 @@\n-/* Copyright 2018 Google LLC\n+/* Copyright 2020 Google LLC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d62b5f7d08c128ca865bc3e52177fbd433b62"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU2MTc4Ng==", "bodyText": "This is technically a new quickstart, I'm just renaming it to avoid confusion. (See #2829)", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#discussion_r490561786", "createdAt": "2020-09-17T21:05:35Z", "author": {"login": "melaniedejong"}, "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "diffHunk": "@@ -1,4 +1,4 @@\n-/* Copyright 2018 Google LLC\n+/* Copyright 2020 Google LLC", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU0ODM3NQ=="}, "originalCommit": {"oid": "7d3d62b5f7d08c128ca865bc3e52177fbd433b62"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTM3NDE2OnYy", "diffSide": "RIGHT", "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDo0MTowNlrOHT0wvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMToyMDoyMlrOHT179g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU0OTQzNw==", "bodyText": "We generally don't want to catch exceptions if they aren't going to do anything.\nSee sample format guide.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#discussion_r490549437", "createdAt": "2020-09-17T20:41:06Z", "author": {"login": "lesv"}, "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "diffHunk": "@@ -13,48 +13,161 @@\n  * limitations under the License.\n  */\n \n-// [START iam_quickstart]\n-\n package iam.snippets;\n \n+// [START iam_quickstart]\n import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n import com.google.api.client.json.jackson2.JacksonFactory;\n-import com.google.api.services.iam.v1.Iam;\n+import com.google.api.services.cloudresourcemanager.CloudResourceManager;\n+import com.google.api.services.cloudresourcemanager.model.Binding;\n+import com.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest;\n+import com.google.api.services.cloudresourcemanager.model.Policy;\n+import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\n import com.google.api.services.iam.v1.IamScopes;\n-import com.google.api.services.iam.v1.model.ListRolesResponse;\n-import com.google.api.services.iam.v1.model.Role;\n import com.google.auth.http.HttpCredentialsAdapter;\n import com.google.auth.oauth2.GoogleCredentials;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n import java.util.Collections;\n import java.util.List;\n \n public class Quickstart {\n \n-  public static void main(String[] args) throws Exception {\n-    // Get credentials\n+  public static void main(String[] args) {\n+    // TODO: Replace with your project ID.\n+    String projectId = \"your-project\";\n+    // TODO: Replace with the ID of your member in the form \"user:member@example.com\"\n+    String member = \"your-member\";\n+    // The role to be granted.\n+    String role = \"roles/logging.logWriter\";\n+\n+    // Initializes the Cloud Resource Manager service.\n+    CloudResourceManager crmService = null;\n+    try {\n+      crmService = initializeService();\n+    } catch (IOException | GeneralSecurityException e) {\n+      System.out.println(\"Unable to initialize service: \\n\" + e.toString());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d62b5f7d08c128ca865bc3e52177fbd433b62"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU2NTg3Nw==", "bodyText": "I remember having this conversation before: #1597 (comment)\nI based my sample here on that same format. Is that okay?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#discussion_r490565877", "createdAt": "2020-09-17T21:14:12Z", "author": {"login": "melaniedejong"}, "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "diffHunk": "@@ -13,48 +13,161 @@\n  * limitations under the License.\n  */\n \n-// [START iam_quickstart]\n-\n package iam.snippets;\n \n+// [START iam_quickstart]\n import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n import com.google.api.client.json.jackson2.JacksonFactory;\n-import com.google.api.services.iam.v1.Iam;\n+import com.google.api.services.cloudresourcemanager.CloudResourceManager;\n+import com.google.api.services.cloudresourcemanager.model.Binding;\n+import com.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest;\n+import com.google.api.services.cloudresourcemanager.model.Policy;\n+import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\n import com.google.api.services.iam.v1.IamScopes;\n-import com.google.api.services.iam.v1.model.ListRolesResponse;\n-import com.google.api.services.iam.v1.model.Role;\n import com.google.auth.http.HttpCredentialsAdapter;\n import com.google.auth.oauth2.GoogleCredentials;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n import java.util.Collections;\n import java.util.List;\n \n public class Quickstart {\n \n-  public static void main(String[] args) throws Exception {\n-    // Get credentials\n+  public static void main(String[] args) {\n+    // TODO: Replace with your project ID.\n+    String projectId = \"your-project\";\n+    // TODO: Replace with the ID of your member in the form \"user:member@example.com\"\n+    String member = \"your-member\";\n+    // The role to be granted.\n+    String role = \"roles/logging.logWriter\";\n+\n+    // Initializes the Cloud Resource Manager service.\n+    CloudResourceManager crmService = null;\n+    try {\n+      crmService = initializeService();\n+    } catch (IOException | GeneralSecurityException e) {\n+      System.out.println(\"Unable to initialize service: \\n\" + e.toString());\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU0OTQzNw=="}, "originalCommit": {"oid": "7d3d62b5f7d08c128ca865bc3e52177fbd433b62"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU2ODY5NA==", "bodyText": "k", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#discussion_r490568694", "createdAt": "2020-09-17T21:20:22Z", "author": {"login": "lesv"}, "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "diffHunk": "@@ -13,48 +13,161 @@\n  * limitations under the License.\n  */\n \n-// [START iam_quickstart]\n-\n package iam.snippets;\n \n+// [START iam_quickstart]\n import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n import com.google.api.client.json.jackson2.JacksonFactory;\n-import com.google.api.services.iam.v1.Iam;\n+import com.google.api.services.cloudresourcemanager.CloudResourceManager;\n+import com.google.api.services.cloudresourcemanager.model.Binding;\n+import com.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest;\n+import com.google.api.services.cloudresourcemanager.model.Policy;\n+import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\n import com.google.api.services.iam.v1.IamScopes;\n-import com.google.api.services.iam.v1.model.ListRolesResponse;\n-import com.google.api.services.iam.v1.model.Role;\n import com.google.auth.http.HttpCredentialsAdapter;\n import com.google.auth.oauth2.GoogleCredentials;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n import java.util.Collections;\n import java.util.List;\n \n public class Quickstart {\n \n-  public static void main(String[] args) throws Exception {\n-    // Get credentials\n+  public static void main(String[] args) {\n+    // TODO: Replace with your project ID.\n+    String projectId = \"your-project\";\n+    // TODO: Replace with the ID of your member in the form \"user:member@example.com\"\n+    String member = \"your-member\";\n+    // The role to be granted.\n+    String role = \"roles/logging.logWriter\";\n+\n+    // Initializes the Cloud Resource Manager service.\n+    CloudResourceManager crmService = null;\n+    try {\n+      crmService = initializeService();\n+    } catch (IOException | GeneralSecurityException e) {\n+      System.out.println(\"Unable to initialize service: \\n\" + e.toString());\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU0OTQzNw=="}, "originalCommit": {"oid": "7d3d62b5f7d08c128ca865bc3e52177fbd433b62"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTM3ODg5OnYy", "diffSide": "RIGHT", "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDo0MjoyNlrOHT0zpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMToyMDowMlrOHT17XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1MDE4Mw==", "bodyText": "It might be better if you used \"Java IAM Quickstart snippet\"", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#discussion_r490550183", "createdAt": "2020-09-17T20:42:26Z", "author": {"login": "lesv"}, "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "diffHunk": "@@ -13,48 +13,161 @@\n  * limitations under the License.\n  */\n \n-// [START iam_quickstart]\n-\n package iam.snippets;\n \n+// [START iam_quickstart]\n import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n import com.google.api.client.json.jackson2.JacksonFactory;\n-import com.google.api.services.iam.v1.Iam;\n+import com.google.api.services.cloudresourcemanager.CloudResourceManager;\n+import com.google.api.services.cloudresourcemanager.model.Binding;\n+import com.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest;\n+import com.google.api.services.cloudresourcemanager.model.Policy;\n+import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\n import com.google.api.services.iam.v1.IamScopes;\n-import com.google.api.services.iam.v1.model.ListRolesResponse;\n-import com.google.api.services.iam.v1.model.Role;\n import com.google.auth.http.HttpCredentialsAdapter;\n import com.google.auth.oauth2.GoogleCredentials;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n import java.util.Collections;\n import java.util.List;\n \n public class Quickstart {\n \n-  public static void main(String[] args) throws Exception {\n-    // Get credentials\n+  public static void main(String[] args) {\n+    // TODO: Replace with your project ID.\n+    String projectId = \"your-project\";\n+    // TODO: Replace with the ID of your member in the form \"user:member@example.com\"\n+    String member = \"your-member\";\n+    // The role to be granted.\n+    String role = \"roles/logging.logWriter\";\n+\n+    // Initializes the Cloud Resource Manager service.\n+    CloudResourceManager crmService = null;\n+    try {\n+      crmService = initializeService();\n+    } catch (IOException | GeneralSecurityException e) {\n+      System.out.println(\"Unable to initialize service: \\n\" + e.toString());\n+    }\n+\n+    // Grants your member the \"Log writer\" role for your project.\n+    addBinding(crmService, projectId, member, role);\n+\n+    // Get the project's policy and print all members with the \"Log Writer\" role\n+    Policy policy = getPolicy(crmService, projectId);\n+    Binding binding = null;\n+    List<Binding> bindings = policy.getBindings();\n+    for (Binding b : bindings) {\n+      if (b.getRole().equals(role)) {\n+        binding = b;\n+        break;\n+      }\n+    }\n+    System.out.println(\"Role: \" + binding.getRole());\n+    System.out.print(\"Members: \");\n+    for (String m : binding.getMembers()) {\n+      System.out.print(\"[\" + m + \"] \");\n+    }\n+    System.out.println();\n+\n+    // Removes member from the \"Log writer\" role.\n+    removeMember(crmService, projectId, member, role);\n+  }\n+\n+  public static CloudResourceManager initializeService()\n+      throws IOException, GeneralSecurityException {\n+    // Use the Application Default Credentials strategy for authentication. For more info, see:\n+    // https://cloud.google.com/docs/authentication/production#finding_credentials_automatically\n     GoogleCredentials credential =\n         GoogleCredentials.getApplicationDefault()\n             .createScoped(Collections.singleton(IamScopes.CLOUD_PLATFORM));\n \n-    // Create the Cloud IAM service object\n-    Iam service =\n-        new Iam.Builder(\n+    // Creates the Cloud Resource Manager service object.\n+    CloudResourceManager service =\n+        new CloudResourceManager.Builder(\n                 GoogleNetHttpTransport.newTrustedTransport(),\n                 JacksonFactory.getDefaultInstance(),\n                 new HttpCredentialsAdapter(credential))\n-            .setApplicationName(\"quickstart\")\n+            .setApplicationName(\"service-accounts\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d62b5f7d08c128ca865bc3e52177fbd433b62"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU2ODU0MA==", "bodyText": "Done.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#discussion_r490568540", "createdAt": "2020-09-17T21:20:02Z", "author": {"login": "melaniedejong"}, "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "diffHunk": "@@ -13,48 +13,161 @@\n  * limitations under the License.\n  */\n \n-// [START iam_quickstart]\n-\n package iam.snippets;\n \n+// [START iam_quickstart]\n import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n import com.google.api.client.json.jackson2.JacksonFactory;\n-import com.google.api.services.iam.v1.Iam;\n+import com.google.api.services.cloudresourcemanager.CloudResourceManager;\n+import com.google.api.services.cloudresourcemanager.model.Binding;\n+import com.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest;\n+import com.google.api.services.cloudresourcemanager.model.Policy;\n+import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\n import com.google.api.services.iam.v1.IamScopes;\n-import com.google.api.services.iam.v1.model.ListRolesResponse;\n-import com.google.api.services.iam.v1.model.Role;\n import com.google.auth.http.HttpCredentialsAdapter;\n import com.google.auth.oauth2.GoogleCredentials;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n import java.util.Collections;\n import java.util.List;\n \n public class Quickstart {\n \n-  public static void main(String[] args) throws Exception {\n-    // Get credentials\n+  public static void main(String[] args) {\n+    // TODO: Replace with your project ID.\n+    String projectId = \"your-project\";\n+    // TODO: Replace with the ID of your member in the form \"user:member@example.com\"\n+    String member = \"your-member\";\n+    // The role to be granted.\n+    String role = \"roles/logging.logWriter\";\n+\n+    // Initializes the Cloud Resource Manager service.\n+    CloudResourceManager crmService = null;\n+    try {\n+      crmService = initializeService();\n+    } catch (IOException | GeneralSecurityException e) {\n+      System.out.println(\"Unable to initialize service: \\n\" + e.toString());\n+    }\n+\n+    // Grants your member the \"Log writer\" role for your project.\n+    addBinding(crmService, projectId, member, role);\n+\n+    // Get the project's policy and print all members with the \"Log Writer\" role\n+    Policy policy = getPolicy(crmService, projectId);\n+    Binding binding = null;\n+    List<Binding> bindings = policy.getBindings();\n+    for (Binding b : bindings) {\n+      if (b.getRole().equals(role)) {\n+        binding = b;\n+        break;\n+      }\n+    }\n+    System.out.println(\"Role: \" + binding.getRole());\n+    System.out.print(\"Members: \");\n+    for (String m : binding.getMembers()) {\n+      System.out.print(\"[\" + m + \"] \");\n+    }\n+    System.out.println();\n+\n+    // Removes member from the \"Log writer\" role.\n+    removeMember(crmService, projectId, member, role);\n+  }\n+\n+  public static CloudResourceManager initializeService()\n+      throws IOException, GeneralSecurityException {\n+    // Use the Application Default Credentials strategy for authentication. For more info, see:\n+    // https://cloud.google.com/docs/authentication/production#finding_credentials_automatically\n     GoogleCredentials credential =\n         GoogleCredentials.getApplicationDefault()\n             .createScoped(Collections.singleton(IamScopes.CLOUD_PLATFORM));\n \n-    // Create the Cloud IAM service object\n-    Iam service =\n-        new Iam.Builder(\n+    // Creates the Cloud Resource Manager service object.\n+    CloudResourceManager service =\n+        new CloudResourceManager.Builder(\n                 GoogleNetHttpTransport.newTrustedTransport(),\n                 JacksonFactory.getDefaultInstance(),\n                 new HttpCredentialsAdapter(credential))\n-            .setApplicationName(\"quickstart\")\n+            .setApplicationName(\"service-accounts\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1MDE4Mw=="}, "originalCommit": {"oid": "7d3d62b5f7d08c128ca865bc3e52177fbd433b62"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTM4NzIwOnYy", "diffSide": "RIGHT", "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDo0NTowMFrOHT04vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMToxNzo0N1rOHT13XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1MTQ4NA==", "bodyText": "I'm good with b, but I've noticed a lot of reviewers prefer to see binding, which is more idiomatic java.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#discussion_r490551484", "createdAt": "2020-09-17T20:45:00Z", "author": {"login": "lesv"}, "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "diffHunk": "@@ -13,48 +13,161 @@\n  * limitations under the License.\n  */\n \n-// [START iam_quickstart]\n-\n package iam.snippets;\n \n+// [START iam_quickstart]\n import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n import com.google.api.client.json.jackson2.JacksonFactory;\n-import com.google.api.services.iam.v1.Iam;\n+import com.google.api.services.cloudresourcemanager.CloudResourceManager;\n+import com.google.api.services.cloudresourcemanager.model.Binding;\n+import com.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest;\n+import com.google.api.services.cloudresourcemanager.model.Policy;\n+import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\n import com.google.api.services.iam.v1.IamScopes;\n-import com.google.api.services.iam.v1.model.ListRolesResponse;\n-import com.google.api.services.iam.v1.model.Role;\n import com.google.auth.http.HttpCredentialsAdapter;\n import com.google.auth.oauth2.GoogleCredentials;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n import java.util.Collections;\n import java.util.List;\n \n public class Quickstart {\n \n-  public static void main(String[] args) throws Exception {\n-    // Get credentials\n+  public static void main(String[] args) {\n+    // TODO: Replace with your project ID.\n+    String projectId = \"your-project\";\n+    // TODO: Replace with the ID of your member in the form \"user:member@example.com\"\n+    String member = \"your-member\";\n+    // The role to be granted.\n+    String role = \"roles/logging.logWriter\";\n+\n+    // Initializes the Cloud Resource Manager service.\n+    CloudResourceManager crmService = null;\n+    try {\n+      crmService = initializeService();\n+    } catch (IOException | GeneralSecurityException e) {\n+      System.out.println(\"Unable to initialize service: \\n\" + e.toString());\n+    }\n+\n+    // Grants your member the \"Log writer\" role for your project.\n+    addBinding(crmService, projectId, member, role);\n+\n+    // Get the project's policy and print all members with the \"Log Writer\" role\n+    Policy policy = getPolicy(crmService, projectId);\n+    Binding binding = null;\n+    List<Binding> bindings = policy.getBindings();\n+    for (Binding b : bindings) {\n+      if (b.getRole().equals(role)) {\n+        binding = b;\n+        break;\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d62b5f7d08c128ca865bc3e52177fbd433b62"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU2NzUxNg==", "bodyText": "I'd prefer to stick with b, here and below, since in each of these cases, I define a different variable called \"binding\" before the for loop.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#discussion_r490567516", "createdAt": "2020-09-17T21:17:47Z", "author": {"login": "melaniedejong"}, "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "diffHunk": "@@ -13,48 +13,161 @@\n  * limitations under the License.\n  */\n \n-// [START iam_quickstart]\n-\n package iam.snippets;\n \n+// [START iam_quickstart]\n import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n import com.google.api.client.json.jackson2.JacksonFactory;\n-import com.google.api.services.iam.v1.Iam;\n+import com.google.api.services.cloudresourcemanager.CloudResourceManager;\n+import com.google.api.services.cloudresourcemanager.model.Binding;\n+import com.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest;\n+import com.google.api.services.cloudresourcemanager.model.Policy;\n+import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\n import com.google.api.services.iam.v1.IamScopes;\n-import com.google.api.services.iam.v1.model.ListRolesResponse;\n-import com.google.api.services.iam.v1.model.Role;\n import com.google.auth.http.HttpCredentialsAdapter;\n import com.google.auth.oauth2.GoogleCredentials;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n import java.util.Collections;\n import java.util.List;\n \n public class Quickstart {\n \n-  public static void main(String[] args) throws Exception {\n-    // Get credentials\n+  public static void main(String[] args) {\n+    // TODO: Replace with your project ID.\n+    String projectId = \"your-project\";\n+    // TODO: Replace with the ID of your member in the form \"user:member@example.com\"\n+    String member = \"your-member\";\n+    // The role to be granted.\n+    String role = \"roles/logging.logWriter\";\n+\n+    // Initializes the Cloud Resource Manager service.\n+    CloudResourceManager crmService = null;\n+    try {\n+      crmService = initializeService();\n+    } catch (IOException | GeneralSecurityException e) {\n+      System.out.println(\"Unable to initialize service: \\n\" + e.toString());\n+    }\n+\n+    // Grants your member the \"Log writer\" role for your project.\n+    addBinding(crmService, projectId, member, role);\n+\n+    // Get the project's policy and print all members with the \"Log Writer\" role\n+    Policy policy = getPolicy(crmService, projectId);\n+    Binding binding = null;\n+    List<Binding> bindings = policy.getBindings();\n+    for (Binding b : bindings) {\n+      if (b.getRole().equals(role)) {\n+        binding = b;\n+        break;\n+      }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1MTQ4NA=="}, "originalCommit": {"oid": "7d3d62b5f7d08c128ca865bc3e52177fbd433b62"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTM4ODMxOnYy", "diffSide": "RIGHT", "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDo0NToxN1rOHT05Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMToyMDozMVrOHT18PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1MTY0Mw==", "bodyText": "member insead of m", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#discussion_r490551643", "createdAt": "2020-09-17T20:45:17Z", "author": {"login": "lesv"}, "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "diffHunk": "@@ -13,48 +13,161 @@\n  * limitations under the License.\n  */\n \n-// [START iam_quickstart]\n-\n package iam.snippets;\n \n+// [START iam_quickstart]\n import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n import com.google.api.client.json.jackson2.JacksonFactory;\n-import com.google.api.services.iam.v1.Iam;\n+import com.google.api.services.cloudresourcemanager.CloudResourceManager;\n+import com.google.api.services.cloudresourcemanager.model.Binding;\n+import com.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest;\n+import com.google.api.services.cloudresourcemanager.model.Policy;\n+import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\n import com.google.api.services.iam.v1.IamScopes;\n-import com.google.api.services.iam.v1.model.ListRolesResponse;\n-import com.google.api.services.iam.v1.model.Role;\n import com.google.auth.http.HttpCredentialsAdapter;\n import com.google.auth.oauth2.GoogleCredentials;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n import java.util.Collections;\n import java.util.List;\n \n public class Quickstart {\n \n-  public static void main(String[] args) throws Exception {\n-    // Get credentials\n+  public static void main(String[] args) {\n+    // TODO: Replace with your project ID.\n+    String projectId = \"your-project\";\n+    // TODO: Replace with the ID of your member in the form \"user:member@example.com\"\n+    String member = \"your-member\";\n+    // The role to be granted.\n+    String role = \"roles/logging.logWriter\";\n+\n+    // Initializes the Cloud Resource Manager service.\n+    CloudResourceManager crmService = null;\n+    try {\n+      crmService = initializeService();\n+    } catch (IOException | GeneralSecurityException e) {\n+      System.out.println(\"Unable to initialize service: \\n\" + e.toString());\n+    }\n+\n+    // Grants your member the \"Log writer\" role for your project.\n+    addBinding(crmService, projectId, member, role);\n+\n+    // Get the project's policy and print all members with the \"Log Writer\" role\n+    Policy policy = getPolicy(crmService, projectId);\n+    Binding binding = null;\n+    List<Binding> bindings = policy.getBindings();\n+    for (Binding b : bindings) {\n+      if (b.getRole().equals(role)) {\n+        binding = b;\n+        break;\n+      }\n+    }\n+    System.out.println(\"Role: \" + binding.getRole());\n+    System.out.print(\"Members: \");\n+    for (String m : binding.getMembers()) {\n+      System.out.print(\"[\" + m + \"] \");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d62b5f7d08c128ca865bc3e52177fbd433b62"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU2Njg3OQ==", "bodyText": "I already defined \"member\" above, so I get an error if I try to use \"member\" here.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#discussion_r490566879", "createdAt": "2020-09-17T21:16:27Z", "author": {"login": "melaniedejong"}, "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "diffHunk": "@@ -13,48 +13,161 @@\n  * limitations under the License.\n  */\n \n-// [START iam_quickstart]\n-\n package iam.snippets;\n \n+// [START iam_quickstart]\n import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n import com.google.api.client.json.jackson2.JacksonFactory;\n-import com.google.api.services.iam.v1.Iam;\n+import com.google.api.services.cloudresourcemanager.CloudResourceManager;\n+import com.google.api.services.cloudresourcemanager.model.Binding;\n+import com.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest;\n+import com.google.api.services.cloudresourcemanager.model.Policy;\n+import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\n import com.google.api.services.iam.v1.IamScopes;\n-import com.google.api.services.iam.v1.model.ListRolesResponse;\n-import com.google.api.services.iam.v1.model.Role;\n import com.google.auth.http.HttpCredentialsAdapter;\n import com.google.auth.oauth2.GoogleCredentials;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n import java.util.Collections;\n import java.util.List;\n \n public class Quickstart {\n \n-  public static void main(String[] args) throws Exception {\n-    // Get credentials\n+  public static void main(String[] args) {\n+    // TODO: Replace with your project ID.\n+    String projectId = \"your-project\";\n+    // TODO: Replace with the ID of your member in the form \"user:member@example.com\"\n+    String member = \"your-member\";\n+    // The role to be granted.\n+    String role = \"roles/logging.logWriter\";\n+\n+    // Initializes the Cloud Resource Manager service.\n+    CloudResourceManager crmService = null;\n+    try {\n+      crmService = initializeService();\n+    } catch (IOException | GeneralSecurityException e) {\n+      System.out.println(\"Unable to initialize service: \\n\" + e.toString());\n+    }\n+\n+    // Grants your member the \"Log writer\" role for your project.\n+    addBinding(crmService, projectId, member, role);\n+\n+    // Get the project's policy and print all members with the \"Log Writer\" role\n+    Policy policy = getPolicy(crmService, projectId);\n+    Binding binding = null;\n+    List<Binding> bindings = policy.getBindings();\n+    for (Binding b : bindings) {\n+      if (b.getRole().equals(role)) {\n+        binding = b;\n+        break;\n+      }\n+    }\n+    System.out.println(\"Role: \" + binding.getRole());\n+    System.out.print(\"Members: \");\n+    for (String m : binding.getMembers()) {\n+      System.out.print(\"[\" + m + \"] \");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1MTY0Mw=="}, "originalCommit": {"oid": "7d3d62b5f7d08c128ca865bc3e52177fbd433b62"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU2ODc2NQ==", "bodyText": "k", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#discussion_r490568765", "createdAt": "2020-09-17T21:20:31Z", "author": {"login": "lesv"}, "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "diffHunk": "@@ -13,48 +13,161 @@\n  * limitations under the License.\n  */\n \n-// [START iam_quickstart]\n-\n package iam.snippets;\n \n+// [START iam_quickstart]\n import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n import com.google.api.client.json.jackson2.JacksonFactory;\n-import com.google.api.services.iam.v1.Iam;\n+import com.google.api.services.cloudresourcemanager.CloudResourceManager;\n+import com.google.api.services.cloudresourcemanager.model.Binding;\n+import com.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest;\n+import com.google.api.services.cloudresourcemanager.model.Policy;\n+import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\n import com.google.api.services.iam.v1.IamScopes;\n-import com.google.api.services.iam.v1.model.ListRolesResponse;\n-import com.google.api.services.iam.v1.model.Role;\n import com.google.auth.http.HttpCredentialsAdapter;\n import com.google.auth.oauth2.GoogleCredentials;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n import java.util.Collections;\n import java.util.List;\n \n public class Quickstart {\n \n-  public static void main(String[] args) throws Exception {\n-    // Get credentials\n+  public static void main(String[] args) {\n+    // TODO: Replace with your project ID.\n+    String projectId = \"your-project\";\n+    // TODO: Replace with the ID of your member in the form \"user:member@example.com\"\n+    String member = \"your-member\";\n+    // The role to be granted.\n+    String role = \"roles/logging.logWriter\";\n+\n+    // Initializes the Cloud Resource Manager service.\n+    CloudResourceManager crmService = null;\n+    try {\n+      crmService = initializeService();\n+    } catch (IOException | GeneralSecurityException e) {\n+      System.out.println(\"Unable to initialize service: \\n\" + e.toString());\n+    }\n+\n+    // Grants your member the \"Log writer\" role for your project.\n+    addBinding(crmService, projectId, member, role);\n+\n+    // Get the project's policy and print all members with the \"Log Writer\" role\n+    Policy policy = getPolicy(crmService, projectId);\n+    Binding binding = null;\n+    List<Binding> bindings = policy.getBindings();\n+    for (Binding b : bindings) {\n+      if (b.getRole().equals(role)) {\n+        binding = b;\n+        break;\n+      }\n+    }\n+    System.out.println(\"Role: \" + binding.getRole());\n+    System.out.print(\"Members: \");\n+    for (String m : binding.getMembers()) {\n+      System.out.print(\"[\" + m + \"] \");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1MTY0Mw=="}, "originalCommit": {"oid": "7d3d62b5f7d08c128ca865bc3e52177fbd433b62"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTM5NDAxOnYy", "diffSide": "RIGHT", "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDo0NzowN1rOHT084g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDo0NzowN1rOHT084g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1MjU0Ng==", "bodyText": "Of course using binding here would overload it.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#discussion_r490552546", "createdAt": "2020-09-17T20:47:07Z", "author": {"login": "lesv"}, "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "diffHunk": "@@ -13,48 +13,161 @@\n  * limitations under the License.\n  */\n \n-// [START iam_quickstart]\n-\n package iam.snippets;\n \n+// [START iam_quickstart]\n import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n import com.google.api.client.json.jackson2.JacksonFactory;\n-import com.google.api.services.iam.v1.Iam;\n+import com.google.api.services.cloudresourcemanager.CloudResourceManager;\n+import com.google.api.services.cloudresourcemanager.model.Binding;\n+import com.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest;\n+import com.google.api.services.cloudresourcemanager.model.Policy;\n+import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\n import com.google.api.services.iam.v1.IamScopes;\n-import com.google.api.services.iam.v1.model.ListRolesResponse;\n-import com.google.api.services.iam.v1.model.Role;\n import com.google.auth.http.HttpCredentialsAdapter;\n import com.google.auth.oauth2.GoogleCredentials;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n import java.util.Collections;\n import java.util.List;\n \n public class Quickstart {\n \n-  public static void main(String[] args) throws Exception {\n-    // Get credentials\n+  public static void main(String[] args) {\n+    // TODO: Replace with your project ID.\n+    String projectId = \"your-project\";\n+    // TODO: Replace with the ID of your member in the form \"user:member@example.com\"\n+    String member = \"your-member\";\n+    // The role to be granted.\n+    String role = \"roles/logging.logWriter\";\n+\n+    // Initializes the Cloud Resource Manager service.\n+    CloudResourceManager crmService = null;\n+    try {\n+      crmService = initializeService();\n+    } catch (IOException | GeneralSecurityException e) {\n+      System.out.println(\"Unable to initialize service: \\n\" + e.toString());\n+    }\n+\n+    // Grants your member the \"Log writer\" role for your project.\n+    addBinding(crmService, projectId, member, role);\n+\n+    // Get the project's policy and print all members with the \"Log Writer\" role\n+    Policy policy = getPolicy(crmService, projectId);\n+    Binding binding = null;\n+    List<Binding> bindings = policy.getBindings();\n+    for (Binding b : bindings) {\n+      if (b.getRole().equals(role)) {\n+        binding = b;\n+        break;\n+      }\n+    }\n+    System.out.println(\"Role: \" + binding.getRole());\n+    System.out.print(\"Members: \");\n+    for (String m : binding.getMembers()) {\n+      System.out.print(\"[\" + m + \"] \");\n+    }\n+    System.out.println();\n+\n+    // Removes member from the \"Log writer\" role.\n+    removeMember(crmService, projectId, member, role);\n+  }\n+\n+  public static CloudResourceManager initializeService()\n+      throws IOException, GeneralSecurityException {\n+    // Use the Application Default Credentials strategy for authentication. For more info, see:\n+    // https://cloud.google.com/docs/authentication/production#finding_credentials_automatically\n     GoogleCredentials credential =\n         GoogleCredentials.getApplicationDefault()\n             .createScoped(Collections.singleton(IamScopes.CLOUD_PLATFORM));\n \n-    // Create the Cloud IAM service object\n-    Iam service =\n-        new Iam.Builder(\n+    // Creates the Cloud Resource Manager service object.\n+    CloudResourceManager service =\n+        new CloudResourceManager.Builder(\n                 GoogleNetHttpTransport.newTrustedTransport(),\n                 JacksonFactory.getDefaultInstance(),\n                 new HttpCredentialsAdapter(credential))\n-            .setApplicationName(\"quickstart\")\n+            .setApplicationName(\"service-accounts\")\n             .build();\n+    return service;\n+  }\n+\n+  public static void addBinding(\n+      CloudResourceManager crmService, String projectId, String member, String role) {\n+\n+    // Gets the project's policy.\n+    Policy policy = getPolicy(crmService, projectId);\n \n-    // Call the Cloud IAM Roles API\n-    ListRolesResponse response = service.roles().list().execute();\n-    List<Role> roles = response.getRoles();\n+    // Finds binding in policy, if it exists\n+    Binding binding = null;\n+    for (Binding b : policy.getBindings()) {\n+      if (b.getRole().equals(role)) {\n+        binding = b; \n+        break;\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d62b5f7d08c128ca865bc3e52177fbd433b62"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTM5NTI1OnYy", "diffSide": "RIGHT", "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDo0NzoyNVrOHT09kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDo0NzoyNVrOHT09kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1MjcyMw==", "bodyText": "and again here.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#discussion_r490552723", "createdAt": "2020-09-17T20:47:25Z", "author": {"login": "lesv"}, "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "diffHunk": "@@ -13,48 +13,161 @@\n  * limitations under the License.\n  */\n \n-// [START iam_quickstart]\n-\n package iam.snippets;\n \n+// [START iam_quickstart]\n import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n import com.google.api.client.json.jackson2.JacksonFactory;\n-import com.google.api.services.iam.v1.Iam;\n+import com.google.api.services.cloudresourcemanager.CloudResourceManager;\n+import com.google.api.services.cloudresourcemanager.model.Binding;\n+import com.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest;\n+import com.google.api.services.cloudresourcemanager.model.Policy;\n+import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\n import com.google.api.services.iam.v1.IamScopes;\n-import com.google.api.services.iam.v1.model.ListRolesResponse;\n-import com.google.api.services.iam.v1.model.Role;\n import com.google.auth.http.HttpCredentialsAdapter;\n import com.google.auth.oauth2.GoogleCredentials;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n import java.util.Collections;\n import java.util.List;\n \n public class Quickstart {\n \n-  public static void main(String[] args) throws Exception {\n-    // Get credentials\n+  public static void main(String[] args) {\n+    // TODO: Replace with your project ID.\n+    String projectId = \"your-project\";\n+    // TODO: Replace with the ID of your member in the form \"user:member@example.com\"\n+    String member = \"your-member\";\n+    // The role to be granted.\n+    String role = \"roles/logging.logWriter\";\n+\n+    // Initializes the Cloud Resource Manager service.\n+    CloudResourceManager crmService = null;\n+    try {\n+      crmService = initializeService();\n+    } catch (IOException | GeneralSecurityException e) {\n+      System.out.println(\"Unable to initialize service: \\n\" + e.toString());\n+    }\n+\n+    // Grants your member the \"Log writer\" role for your project.\n+    addBinding(crmService, projectId, member, role);\n+\n+    // Get the project's policy and print all members with the \"Log Writer\" role\n+    Policy policy = getPolicy(crmService, projectId);\n+    Binding binding = null;\n+    List<Binding> bindings = policy.getBindings();\n+    for (Binding b : bindings) {\n+      if (b.getRole().equals(role)) {\n+        binding = b;\n+        break;\n+      }\n+    }\n+    System.out.println(\"Role: \" + binding.getRole());\n+    System.out.print(\"Members: \");\n+    for (String m : binding.getMembers()) {\n+      System.out.print(\"[\" + m + \"] \");\n+    }\n+    System.out.println();\n+\n+    // Removes member from the \"Log writer\" role.\n+    removeMember(crmService, projectId, member, role);\n+  }\n+\n+  public static CloudResourceManager initializeService()\n+      throws IOException, GeneralSecurityException {\n+    // Use the Application Default Credentials strategy for authentication. For more info, see:\n+    // https://cloud.google.com/docs/authentication/production#finding_credentials_automatically\n     GoogleCredentials credential =\n         GoogleCredentials.getApplicationDefault()\n             .createScoped(Collections.singleton(IamScopes.CLOUD_PLATFORM));\n \n-    // Create the Cloud IAM service object\n-    Iam service =\n-        new Iam.Builder(\n+    // Creates the Cloud Resource Manager service object.\n+    CloudResourceManager service =\n+        new CloudResourceManager.Builder(\n                 GoogleNetHttpTransport.newTrustedTransport(),\n                 JacksonFactory.getDefaultInstance(),\n                 new HttpCredentialsAdapter(credential))\n-            .setApplicationName(\"quickstart\")\n+            .setApplicationName(\"service-accounts\")\n             .build();\n+    return service;\n+  }\n+\n+  public static void addBinding(\n+      CloudResourceManager crmService, String projectId, String member, String role) {\n+\n+    // Gets the project's policy.\n+    Policy policy = getPolicy(crmService, projectId);\n \n-    // Call the Cloud IAM Roles API\n-    ListRolesResponse response = service.roles().list().execute();\n-    List<Role> roles = response.getRoles();\n+    // Finds binding in policy, if it exists\n+    Binding binding = null;\n+    for (Binding b : policy.getBindings()) {\n+      if (b.getRole().equals(role)) {\n+        binding = b; \n+        break;\n+      }\n+    }\n+\n+    if (binding != null) {\n+      // If binding already exists, adds member to binding.\n+      binding.getMembers().add(member);\n+    } else {\n+      // If binding does not exist, adds binding to policy.\n+      binding = new Binding();\n+      binding.setRole(role);\n+      binding.setMembers(Collections.singletonList(member));\n+      policy.getBindings().add(binding);\n+    }\n+\n+    // Sets the updated policy\n+    setPolicy(crmService, projectId, policy);\n+  }\n+\n+  public static void removeMember(\n+      CloudResourceManager crmService, String projectId, String member, String role) {\n+    // Gets the project's policy.\n+    Policy policy = getPolicy(crmService, projectId);\n+\n+    // Removes the member from the role.\n+    Binding binding = null;\n+    for (Binding b : policy.getBindings()) {\n+      if (b.getRole().equals(role)) {\n+        binding = b;\n+        break;\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d62b5f7d08c128ca865bc3e52177fbd433b62"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTM5ODc4OnYy", "diffSide": "RIGHT", "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDo0ODozNFrOHT0_3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDo0ODozNFrOHT0_3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1MzMwOQ==", "bodyText": "Better to just add a throws to getPolicy and not catch IOException if you aren't doing anything with it.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#discussion_r490553309", "createdAt": "2020-09-17T20:48:34Z", "author": {"login": "lesv"}, "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "diffHunk": "@@ -13,48 +13,161 @@\n  * limitations under the License.\n  */\n \n-// [START iam_quickstart]\n-\n package iam.snippets;\n \n+// [START iam_quickstart]\n import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n import com.google.api.client.json.jackson2.JacksonFactory;\n-import com.google.api.services.iam.v1.Iam;\n+import com.google.api.services.cloudresourcemanager.CloudResourceManager;\n+import com.google.api.services.cloudresourcemanager.model.Binding;\n+import com.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest;\n+import com.google.api.services.cloudresourcemanager.model.Policy;\n+import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\n import com.google.api.services.iam.v1.IamScopes;\n-import com.google.api.services.iam.v1.model.ListRolesResponse;\n-import com.google.api.services.iam.v1.model.Role;\n import com.google.auth.http.HttpCredentialsAdapter;\n import com.google.auth.oauth2.GoogleCredentials;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n import java.util.Collections;\n import java.util.List;\n \n public class Quickstart {\n \n-  public static void main(String[] args) throws Exception {\n-    // Get credentials\n+  public static void main(String[] args) {\n+    // TODO: Replace with your project ID.\n+    String projectId = \"your-project\";\n+    // TODO: Replace with the ID of your member in the form \"user:member@example.com\"\n+    String member = \"your-member\";\n+    // The role to be granted.\n+    String role = \"roles/logging.logWriter\";\n+\n+    // Initializes the Cloud Resource Manager service.\n+    CloudResourceManager crmService = null;\n+    try {\n+      crmService = initializeService();\n+    } catch (IOException | GeneralSecurityException e) {\n+      System.out.println(\"Unable to initialize service: \\n\" + e.toString());\n+    }\n+\n+    // Grants your member the \"Log writer\" role for your project.\n+    addBinding(crmService, projectId, member, role);\n+\n+    // Get the project's policy and print all members with the \"Log Writer\" role\n+    Policy policy = getPolicy(crmService, projectId);\n+    Binding binding = null;\n+    List<Binding> bindings = policy.getBindings();\n+    for (Binding b : bindings) {\n+      if (b.getRole().equals(role)) {\n+        binding = b;\n+        break;\n+      }\n+    }\n+    System.out.println(\"Role: \" + binding.getRole());\n+    System.out.print(\"Members: \");\n+    for (String m : binding.getMembers()) {\n+      System.out.print(\"[\" + m + \"] \");\n+    }\n+    System.out.println();\n+\n+    // Removes member from the \"Log writer\" role.\n+    removeMember(crmService, projectId, member, role);\n+  }\n+\n+  public static CloudResourceManager initializeService()\n+      throws IOException, GeneralSecurityException {\n+    // Use the Application Default Credentials strategy for authentication. For more info, see:\n+    // https://cloud.google.com/docs/authentication/production#finding_credentials_automatically\n     GoogleCredentials credential =\n         GoogleCredentials.getApplicationDefault()\n             .createScoped(Collections.singleton(IamScopes.CLOUD_PLATFORM));\n \n-    // Create the Cloud IAM service object\n-    Iam service =\n-        new Iam.Builder(\n+    // Creates the Cloud Resource Manager service object.\n+    CloudResourceManager service =\n+        new CloudResourceManager.Builder(\n                 GoogleNetHttpTransport.newTrustedTransport(),\n                 JacksonFactory.getDefaultInstance(),\n                 new HttpCredentialsAdapter(credential))\n-            .setApplicationName(\"quickstart\")\n+            .setApplicationName(\"service-accounts\")\n             .build();\n+    return service;\n+  }\n+\n+  public static void addBinding(\n+      CloudResourceManager crmService, String projectId, String member, String role) {\n+\n+    // Gets the project's policy.\n+    Policy policy = getPolicy(crmService, projectId);\n \n-    // Call the Cloud IAM Roles API\n-    ListRolesResponse response = service.roles().list().execute();\n-    List<Role> roles = response.getRoles();\n+    // Finds binding in policy, if it exists\n+    Binding binding = null;\n+    for (Binding b : policy.getBindings()) {\n+      if (b.getRole().equals(role)) {\n+        binding = b; \n+        break;\n+      }\n+    }\n+\n+    if (binding != null) {\n+      // If binding already exists, adds member to binding.\n+      binding.getMembers().add(member);\n+    } else {\n+      // If binding does not exist, adds binding to policy.\n+      binding = new Binding();\n+      binding.setRole(role);\n+      binding.setMembers(Collections.singletonList(member));\n+      policy.getBindings().add(binding);\n+    }\n+\n+    // Sets the updated policy\n+    setPolicy(crmService, projectId, policy);\n+  }\n+\n+  public static void removeMember(\n+      CloudResourceManager crmService, String projectId, String member, String role) {\n+    // Gets the project's policy.\n+    Policy policy = getPolicy(crmService, projectId);\n+\n+    // Removes the member from the role.\n+    Binding binding = null;\n+    for (Binding b : policy.getBindings()) {\n+      if (b.getRole().equals(role)) {\n+        binding = b;\n+        break;\n+      }\n+    }\n+    if (binding.getMembers().contains(member)) {\n+      binding.getMembers().remove(member);\n+      if (binding.getMembers().isEmpty()) {\n+        policy.getBindings().remove(binding);\n+      }\n+    }\n+\n+    // Sets the updated policy.\n+    setPolicy(crmService, projectId, policy);\n+  }\n+\n+  public static Policy getPolicy(CloudResourceManager crmService, String projectId) {\n+    // Gets the project's policy by calling the\n+    // Cloud Resource Manager Projects API.\n+    Policy policy = null;\n+    try {\n+      GetIamPolicyRequest request = new GetIamPolicyRequest();\n+      policy = crmService.projects().getIamPolicy(projectId, request).execute();\n+    } catch (IOException e) {\n+      System.out.println(\"Unable to get policy: \\n\" + e.toString());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d62b5f7d08c128ca865bc3e52177fbd433b62"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTM5OTY2OnYy", "diffSide": "RIGHT", "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDo0ODo1M1rOHT1AcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDo0ODo1M1rOHT1AcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1MzQ1Nw==", "bodyText": "Same comment as earlier about exceptions", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#discussion_r490553457", "createdAt": "2020-09-17T20:48:53Z", "author": {"login": "lesv"}, "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "diffHunk": "@@ -13,48 +13,161 @@\n  * limitations under the License.\n  */\n \n-// [START iam_quickstart]\n-\n package iam.snippets;\n \n+// [START iam_quickstart]\n import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n import com.google.api.client.json.jackson2.JacksonFactory;\n-import com.google.api.services.iam.v1.Iam;\n+import com.google.api.services.cloudresourcemanager.CloudResourceManager;\n+import com.google.api.services.cloudresourcemanager.model.Binding;\n+import com.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest;\n+import com.google.api.services.cloudresourcemanager.model.Policy;\n+import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\n import com.google.api.services.iam.v1.IamScopes;\n-import com.google.api.services.iam.v1.model.ListRolesResponse;\n-import com.google.api.services.iam.v1.model.Role;\n import com.google.auth.http.HttpCredentialsAdapter;\n import com.google.auth.oauth2.GoogleCredentials;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n import java.util.Collections;\n import java.util.List;\n \n public class Quickstart {\n \n-  public static void main(String[] args) throws Exception {\n-    // Get credentials\n+  public static void main(String[] args) {\n+    // TODO: Replace with your project ID.\n+    String projectId = \"your-project\";\n+    // TODO: Replace with the ID of your member in the form \"user:member@example.com\"\n+    String member = \"your-member\";\n+    // The role to be granted.\n+    String role = \"roles/logging.logWriter\";\n+\n+    // Initializes the Cloud Resource Manager service.\n+    CloudResourceManager crmService = null;\n+    try {\n+      crmService = initializeService();\n+    } catch (IOException | GeneralSecurityException e) {\n+      System.out.println(\"Unable to initialize service: \\n\" + e.toString());\n+    }\n+\n+    // Grants your member the \"Log writer\" role for your project.\n+    addBinding(crmService, projectId, member, role);\n+\n+    // Get the project's policy and print all members with the \"Log Writer\" role\n+    Policy policy = getPolicy(crmService, projectId);\n+    Binding binding = null;\n+    List<Binding> bindings = policy.getBindings();\n+    for (Binding b : bindings) {\n+      if (b.getRole().equals(role)) {\n+        binding = b;\n+        break;\n+      }\n+    }\n+    System.out.println(\"Role: \" + binding.getRole());\n+    System.out.print(\"Members: \");\n+    for (String m : binding.getMembers()) {\n+      System.out.print(\"[\" + m + \"] \");\n+    }\n+    System.out.println();\n+\n+    // Removes member from the \"Log writer\" role.\n+    removeMember(crmService, projectId, member, role);\n+  }\n+\n+  public static CloudResourceManager initializeService()\n+      throws IOException, GeneralSecurityException {\n+    // Use the Application Default Credentials strategy for authentication. For more info, see:\n+    // https://cloud.google.com/docs/authentication/production#finding_credentials_automatically\n     GoogleCredentials credential =\n         GoogleCredentials.getApplicationDefault()\n             .createScoped(Collections.singleton(IamScopes.CLOUD_PLATFORM));\n \n-    // Create the Cloud IAM service object\n-    Iam service =\n-        new Iam.Builder(\n+    // Creates the Cloud Resource Manager service object.\n+    CloudResourceManager service =\n+        new CloudResourceManager.Builder(\n                 GoogleNetHttpTransport.newTrustedTransport(),\n                 JacksonFactory.getDefaultInstance(),\n                 new HttpCredentialsAdapter(credential))\n-            .setApplicationName(\"quickstart\")\n+            .setApplicationName(\"service-accounts\")\n             .build();\n+    return service;\n+  }\n+\n+  public static void addBinding(\n+      CloudResourceManager crmService, String projectId, String member, String role) {\n+\n+    // Gets the project's policy.\n+    Policy policy = getPolicy(crmService, projectId);\n \n-    // Call the Cloud IAM Roles API\n-    ListRolesResponse response = service.roles().list().execute();\n-    List<Role> roles = response.getRoles();\n+    // Finds binding in policy, if it exists\n+    Binding binding = null;\n+    for (Binding b : policy.getBindings()) {\n+      if (b.getRole().equals(role)) {\n+        binding = b; \n+        break;\n+      }\n+    }\n+\n+    if (binding != null) {\n+      // If binding already exists, adds member to binding.\n+      binding.getMembers().add(member);\n+    } else {\n+      // If binding does not exist, adds binding to policy.\n+      binding = new Binding();\n+      binding.setRole(role);\n+      binding.setMembers(Collections.singletonList(member));\n+      policy.getBindings().add(binding);\n+    }\n+\n+    // Sets the updated policy\n+    setPolicy(crmService, projectId, policy);\n+  }\n+\n+  public static void removeMember(\n+      CloudResourceManager crmService, String projectId, String member, String role) {\n+    // Gets the project's policy.\n+    Policy policy = getPolicy(crmService, projectId);\n+\n+    // Removes the member from the role.\n+    Binding binding = null;\n+    for (Binding b : policy.getBindings()) {\n+      if (b.getRole().equals(role)) {\n+        binding = b;\n+        break;\n+      }\n+    }\n+    if (binding.getMembers().contains(member)) {\n+      binding.getMembers().remove(member);\n+      if (binding.getMembers().isEmpty()) {\n+        policy.getBindings().remove(binding);\n+      }\n+    }\n+\n+    // Sets the updated policy.\n+    setPolicy(crmService, projectId, policy);\n+  }\n+\n+  public static Policy getPolicy(CloudResourceManager crmService, String projectId) {\n+    // Gets the project's policy by calling the\n+    // Cloud Resource Manager Projects API.\n+    Policy policy = null;\n+    try {\n+      GetIamPolicyRequest request = new GetIamPolicyRequest();\n+      policy = crmService.projects().getIamPolicy(projectId, request).execute();\n+    } catch (IOException e) {\n+      System.out.println(\"Unable to get policy: \\n\" + e.toString());\n+    }\n+    return policy;\n+  }\n \n-    // Process the response\n-    for (Role role : roles) {\n-      System.out.println(\"Title: \" + role.getTitle());\n-      System.out.println(\"Name: \" + role.getName());\n-      System.out.println(\"Description: \" + role.getDescription());\n-      System.out.println();\n+  private static void setPolicy(CloudResourceManager crmService, String projectId, Policy policy) {\n+    // Sets the project's policy by calling the\n+    // Cloud Resource Manager Projects API.\n+    try {\n+      SetIamPolicyRequest request = new SetIamPolicyRequest();\n+      request.setPolicy(policy);\n+      crmService.projects().setIamPolicy(projectId, request).execute();\n+    } catch (IOException e) {\n+      System.out.println(\"Unable to set policy: \\n\" + e.toString());\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d62b5f7d08c128ca865bc3e52177fbd433b62"}, "originalPosition": 185}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 762, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}