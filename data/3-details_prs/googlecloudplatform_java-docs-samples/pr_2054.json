{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxNjg3MTg1", "number": 2054, "title": "Cleanup DLP Metadata and Jobs snippets", "bodyText": "Working towards #1479\nAlso updated integration tests.", "createdAt": "2020-02-06T03:16:47Z", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2054", "merged": true, "mergeCommit": {"oid": "ba79255d96c87995216fdee54a25a6098e06c0e7"}, "closed": true, "closedAt": "2020-02-11T20:46:54Z", "author": {"login": "shubha-rajan"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBMc9fAH2gAyMzcxNjg3MTg1OjJiOTA2MDA3ZTI0NzUzOWE3Y2Y0YjIzNGJiNmM1ZjNkMTllODIxZWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDUv8-AFqTM1NjgyODM3Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2b906007e247539a7cf4b234bb6c5f3d19e821ef", "author": {"user": {"login": "shubha-rajan", "name": "Shubha Rajan"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/2b906007e247539a7cf4b234bb6c5f3d19e821ef", "committedDate": "2020-02-05T02:10:30Z", "message": "refactored Metadata.java and corresponding tests to snippet format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ddb85af459447e19fa2bd58d37bd7aae97f35de", "author": {"user": {"login": "shubha-rajan", "name": "Shubha Rajan"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/8ddb85af459447e19fa2bd58d37bd7aae97f35de", "committedDate": "2020-02-06T03:03:02Z", "message": "Refactored Jobs.java into snippets and updated integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ebaa09ebed6b0077f080c5ab4b8eae1df7f9545", "author": {"user": {"login": "shubha-rajan", "name": "Shubha Rajan"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/2ebaa09ebed6b0077f080c5ab4b8eae1df7f9545", "committedDate": "2020-02-06T03:14:04Z", "message": "removed unnecessary imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1141c73d30fa1427669dd3abfca57abf19a8e7cf", "author": {"user": {"login": "shubha-rajan", "name": "Shubha Rajan"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/1141c73d30fa1427669dd3abfca57abf19a8e7cf", "committedDate": "2020-02-06T06:46:06Z", "message": "added step to create job in JobTests.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30e514251cb5856dd2a3ab62078540e64c19a90c", "author": {"user": {"login": "shubha-rajan", "name": "Shubha Rajan"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/30e514251cb5856dd2a3ab62078540e64c19a90c", "committedDate": "2020-02-06T07:01:48Z", "message": "Merge branch 'master' into dlp-snippet-refactor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0NzA2MDU2", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2054#pullrequestreview-354706056", "createdAt": "2020-02-06T19:18:30Z", "commit": {"oid": "1141c73d30fa1427669dd3abfca57abf19a8e7cf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxOToxODozMFrOFmnH0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxOTozMDo1N1rOFmngGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzMTE4Ng==", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String gcsUri = \"gs://\" + \"your-bucket-name\" + \"/path/to/your/test.txt\";\n          \n          \n            \n                String gcsUri = \"gs://\" + \"your-bucket-name\" + \"/path/to/your/file.txt\";", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2054#discussion_r376031186", "createdAt": "2020-02-06T19:18:30Z", "author": {"login": "kurtisvg"}, "path": "dlp/src/main/java/dlp/snippets/InspectGcsFile.java", "diffHunk": "@@ -51,7 +51,7 @@\n   public static void inspectGcsFile() throws InterruptedException, ExecutionException, IOException {\n     // TODO(developer): Replace these variables before running the sample.\n     String projectId = \"your-project-id\";\n-    String gcsUri = \"gs://\" + \"your-bucket-name\" + \"/path/to/your/image.png\";\n+    String gcsUri = \"gs://\" + \"your-bucket-name\" + \"/path/to/your/test.txt\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1141c73d30fa1427669dd3abfca57abf19a8e7cf"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzMjQ2MA==", "bodyText": "These two fields (filter and languageCode) aren't required that the user set to run, so we should inline them in the sample below instead.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2054#discussion_r376032460", "createdAt": "2020-02-06T19:21:15Z", "author": {"login": "kurtisvg"}, "path": "dlp/src/main/java/dlp/snippets/InfoTypesList.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+// [START dlp_list_info_types]\n+\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.InfoTypeDescription;\n+import com.google.privacy.dlp.v2.ListInfoTypesRequest;\n+import com.google.privacy.dlp.v2.ListInfoTypesResponse;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+public class InfoTypesList  {\n+\n+    public static void listInfoTypes() throws IOException {\n+        // TODO(developer): Replace these variables before running the sample.\n+        String filter = \"supported_by=INSPECT\";\n+        String languageCode= \"en-US\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30e514251cb5856dd2a3ab62078540e64c19a90c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzMjc0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // Parse the response and process the results */\n          \n          \n            \n                        // Parse the response and process the results", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2054#discussion_r376032744", "createdAt": "2020-02-06T19:21:48Z", "author": {"login": "kurtisvg"}, "path": "dlp/src/main/java/dlp/snippets/InfoTypesList.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+// [START dlp_list_info_types]\n+\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.InfoTypeDescription;\n+import com.google.privacy.dlp.v2.ListInfoTypesRequest;\n+import com.google.privacy.dlp.v2.ListInfoTypesResponse;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+public class InfoTypesList  {\n+\n+    public static void listInfoTypes() throws IOException {\n+        // TODO(developer): Replace these variables before running the sample.\n+        String filter = \"supported_by=INSPECT\";\n+        String languageCode= \"en-US\";\n+        listInfoTypes(filter, languageCode);\n+    }\n+\n+    // Lists the types of sensitive information the DLP API supports.\n+    public static void listInfoTypes(String filter, String languageCode) throws IOException {\n+        // Initialize client that will be used to send requests. This client only needs to be created\n+        // once, and can be reused for multiple requests. After completing all of your requests, call\n+        // the \"close\" method on the client to safely clean up any remaining background resources.\n+        try (DlpServiceClient dlpClient = DlpServiceClient.create()) {\n+\n+            // Construct the request to be sent by the client\n+            ListInfoTypesRequest listInfoTypesRequest =\n+                    ListInfoTypesRequest.newBuilder().setFilter(filter).setLanguageCode(languageCode).build();\n+\n+            // Use the client to send the API request.\n+            ListInfoTypesResponse infoTypesResponse = dlpClient.listInfoTypes(listInfoTypesRequest);\n+\n+            // Parse the response and process the results */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30e514251cb5856dd2a3ab62078540e64c19a90c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzMzYzNw==", "bodyText": "Consider inlining the getInfoTypesList and adding a top level print statement here:\nSystem.out.println(\"Infotypes found:\");\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        for (InfoTypeDescription infoTypeDescription : infoTypeDescriptions) {\n          \n          \n            \n                        for (InfoTypeDescription infoTypeDescription : response.getInfoTypesList()) {", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2054#discussion_r376033637", "createdAt": "2020-02-06T19:23:43Z", "author": {"login": "kurtisvg"}, "path": "dlp/src/main/java/dlp/snippets/InfoTypesList.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+// [START dlp_list_info_types]\n+\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.InfoTypeDescription;\n+import com.google.privacy.dlp.v2.ListInfoTypesRequest;\n+import com.google.privacy.dlp.v2.ListInfoTypesResponse;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+public class InfoTypesList  {\n+\n+    public static void listInfoTypes() throws IOException {\n+        // TODO(developer): Replace these variables before running the sample.\n+        String filter = \"supported_by=INSPECT\";\n+        String languageCode= \"en-US\";\n+        listInfoTypes(filter, languageCode);\n+    }\n+\n+    // Lists the types of sensitive information the DLP API supports.\n+    public static void listInfoTypes(String filter, String languageCode) throws IOException {\n+        // Initialize client that will be used to send requests. This client only needs to be created\n+        // once, and can be reused for multiple requests. After completing all of your requests, call\n+        // the \"close\" method on the client to safely clean up any remaining background resources.\n+        try (DlpServiceClient dlpClient = DlpServiceClient.create()) {\n+\n+            // Construct the request to be sent by the client\n+            ListInfoTypesRequest listInfoTypesRequest =\n+                    ListInfoTypesRequest.newBuilder().setFilter(filter).setLanguageCode(languageCode).build();\n+\n+            // Use the client to send the API request.\n+            ListInfoTypesResponse infoTypesResponse = dlpClient.listInfoTypes(listInfoTypesRequest);\n+\n+            // Parse the response and process the results */\n+            List<InfoTypeDescription> infoTypeDescriptions = infoTypesResponse.getInfoTypesList();\n+            for (InfoTypeDescription infoTypeDescription : infoTypeDescriptions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30e514251cb5856dd2a3ab62078540e64c19a90c"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzMzkzMQ==", "bodyText": "We should also add links to the docs for these resources, so users know other options that are available for them.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2054#discussion_r376033931", "createdAt": "2020-02-06T19:24:15Z", "author": {"login": "kurtisvg"}, "path": "dlp/src/main/java/dlp/snippets/InfoTypesList.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+// [START dlp_list_info_types]\n+\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.InfoTypeDescription;\n+import com.google.privacy.dlp.v2.ListInfoTypesRequest;\n+import com.google.privacy.dlp.v2.ListInfoTypesResponse;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+public class InfoTypesList  {\n+\n+    public static void listInfoTypes() throws IOException {\n+        // TODO(developer): Replace these variables before running the sample.\n+        String filter = \"supported_by=INSPECT\";\n+        String languageCode= \"en-US\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzMjQ2MA=="}, "originalCommit": {"oid": "30e514251cb5856dd2a3ab62078540e64c19a90c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzNDE3MQ==", "bodyText": "super nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String filePath = \"path/to/textfile.txt\";\n          \n          \n            \n                String filePath = \"path/to/text/file.txt\";", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2054#discussion_r376034171", "createdAt": "2020-02-06T19:24:45Z", "author": {"login": "kurtisvg"}, "path": "dlp/src/main/java/dlp/snippets/InspectTextFile.java", "diffHunk": "@@ -37,7 +37,7 @@\n   public static void inspectTextFile() {\n     // TODO(developer): Replace these variables before running the sample.\n     String projectId = \"my-project-id\";\n-    String filePath = \"path/to/image.png\";\n+    String filePath = \"path/to/textfile.txt\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30e514251cb5856dd2a3ab62078540e64c19a90c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzNDc2MQ==", "bodyText": "nit: Do we use caps in other places? We should be consistent with values we expect users to replace.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2054#discussion_r376034761", "createdAt": "2020-02-06T19:25:53Z", "author": {"login": "kurtisvg"}, "path": "dlp/src/main/java/dlp/snippets/JobsDelete.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+// [START dlp_delete_job]\n+\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.DeleteDlpJobRequest;\n+import com.google.privacy.dlp.v2.DlpJobName;\n+\n+import java.io.IOException;\n+\n+public class JobsDelete  {\n+    public static void deleteJobs() throws IOException {\n+        // TODO(developer): Replace these variables before running the sample.\n+        String projectID = \"your-project-id\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30e514251cb5856dd2a3ab62078540e64c19a90c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzNTA0NQ==", "bodyText": "Same here - please move filter and jobType to the sample", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2054#discussion_r376035045", "createdAt": "2020-02-06T19:26:28Z", "author": {"login": "kurtisvg"}, "path": "dlp/src/main/java/dlp/snippets/JobsList.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+// [START dlp_list_jobs]\n+\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.DlpJob;\n+import com.google.privacy.dlp.v2.DlpJobType;\n+import com.google.privacy.dlp.v2.ListDlpJobsRequest;\n+import com.google.privacy.dlp.v2.ProjectName;\n+\n+import java.io.IOException;\n+\n+public class JobsList {\n+\n+    public static void listJobs() throws IOException {\n+        // TODO(developer): Replace these variables before running the sample.\n+        // For more info on filters and job types,\n+        // see https://cloud.google.com/dlp/docs/reference/rest/v2/projects.dlpJobs/list\n+        String projectId = \"your-project-id\";\n+        String filter = \"state=DONE\";\n+        String jobType = \"INSPECT_JOB\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30e514251cb5856dd2a3ab62078540e64c19a90c"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzNjE4NQ==", "bodyText": "protip: These tests are easier to debug if you use this format:\nAssert.assertThat(x, CoreMatchers.containsString(\"foo\"));\nThe error message will be much more descriptive and easier to debug (Expected x to contain foo, but was \"\" instead).", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2054#discussion_r376036185", "createdAt": "2020-02-06T19:28:38Z", "author": {"login": "kurtisvg"}, "path": "dlp/src/test/java/dlp/snippets/InfoTypesTests.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(JUnit4.class)\n+\n+public class InfoTypesTests {\n+\n+    private ByteArrayOutputStream bout;\n+\n+    private static void requireEnvVar(String varName) {\n+        assertNotNull(\n+                String.format(\"Environment variable '%s' must be set to perform these tests.\", varName),\n+                System.getenv(varName));\n+    }\n+\n+    @Before\n+    public void checkRequirements() {\n+        requireEnvVar(\"GOOGLE_APPLICATION_CREDENTIALS\");\n+    }\n+\n+    @Before\n+    public void setUp() {\n+        bout = new ByteArrayOutputStream();\n+        System.setOut(new PrintStream(bout));\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        System.setOut(null);\n+        bout.reset();\n+    }\n+\n+    @Test\n+    public void testListInfoTypes() throws Exception {\n+        InfoTypesList.listInfoTypes(\"supported_by=INSPECT\", \"en-US\");\n+        String output = bout.toString();\n+        assertTrue(output.contains(\"Name\") && output.contains(\"Display name\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30e514251cb5856dd2a3ab62078540e64c19a90c"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzNjkxNA==", "bodyText": "This should be in a separate cleanup function with the After tag, so it still runs of the test fails.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2054#discussion_r376036914", "createdAt": "2020-02-06T19:30:01Z", "author": {"login": "kurtisvg"}, "path": "dlp/src/test/java/dlp/snippets/RedactTests.java", "diffHunk": "@@ -62,10 +67,14 @@ public void tearDown() {\n   }\n \n   @Test\n-  public void testRedactImage() {\n+  public void testRedactImage() throws IOException {\n     RedactImageFile.redactImageFile(PROJECT_ID, \"src/test/resources/test.png\");\n \n     String output = bout.toString();\n     assertThat(output, containsString(\"Redacted image written\"));\n+\n+    // Clean up test output\n+    Path outputFile = Paths.get(\"redacted.png\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30e514251cb5856dd2a3ab62078540e64c19a90c"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzNzQwMg==", "bodyText": "If there isn't a job, we should make sure there is with a setUp function that creates one that runs first.\nOr, alternatively make the test pass if no jobs are found.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2054#discussion_r376037402", "createdAt": "2020-02-06T19:30:57Z", "author": {"login": "kurtisvg"}, "path": "dlp/src/test/java/dlp/snippets/JobsTests.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.util.concurrent.ExecutionException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(JUnit4.class)\n+public class JobsTests {\n+\n+    private static final Pattern JOB_ID_PATTERN = Pattern.compile(\"projects/.*/dlpJobs/i-\\\\d+\");\n+    private static final String PROJECT_ID = System.getenv(\"GOOGLE_CLOUD_PROJECT\");\n+    private static final String GCS_PATH = System.getenv(\"GCS_PATH\");\n+    private static final String PUB_SUB_TOPIC_ID = \"dlp-tests\";\n+    private static final String PUB_SUB_SUBSCRIPTION_ID = \"dlp-test\";\n+    private ByteArrayOutputStream bout;\n+\n+    private static void requireEnvVar(String varName) {\n+        assertNotNull(\n+                String.format(\"Environment variable '%s' must be set to perform these tests.\", varName),\n+                System.getenv(varName));\n+    }\n+\n+    @Before\n+    public void checkRequirements() {\n+        requireEnvVar(\"GOOGLE_APPLICATION_CREDENTIALS\");\n+        requireEnvVar(\"GOOGLE_CLOUD_PROJECT\");\n+        requireEnvVar(\"GCS_PATH\");\n+    }\n+\n+    @Before\n+    public void setUp() {\n+        bout = new ByteArrayOutputStream();\n+        System.setOut(new PrintStream(bout));\n+\n+    }\n+\n+    \n+    @After\n+    public void tearDown() {\n+        System.setOut(null);\n+        bout.reset();\n+    }\n+\n+    @Test\n+    public void testListJobs() throws Exception {\n+        // Ensure that there is at least one job to list\n+        InspectGcsFile.inspectGcsFile(PROJECT_ID,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30e514251cb5856dd2a3ab62078540e64c19a90c"}, "originalPosition": 76}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6eb9c6de7ea0908a594bb8665ad21e1c610a2f13", "author": {"user": {"login": "shubha-rajan", "name": "Shubha Rajan"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/6eb9c6de7ea0908a594bb8665ad21e1c610a2f13", "committedDate": "2020-02-06T21:52:46Z", "message": "Update dlp/src/main/java/dlp/snippets/InspectTextFile.java\n\nCo-Authored-By: Kurtis Van Gent <31518063+kurtisvg@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c01129895fc823057b8b934de42b7a6fdb4645c7", "author": {"user": {"login": "shubha-rajan", "name": "Shubha Rajan"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/c01129895fc823057b8b934de42b7a6fdb4645c7", "committedDate": "2020-02-06T21:53:06Z", "message": "Update dlp/src/main/java/dlp/snippets/InfoTypesList.java\n\nCo-Authored-By: Kurtis Van Gent <31518063+kurtisvg@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f063d13676de52824437a966f004640ed02dc053", "author": {"user": {"login": "shubha-rajan", "name": "Shubha Rajan"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/f063d13676de52824437a966f004640ed02dc053", "committedDate": "2020-02-06T21:53:19Z", "message": "Update dlp/src/main/java/dlp/snippets/InfoTypesList.java\n\nCo-Authored-By: Kurtis Van Gent <31518063+kurtisvg@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35b751c7dac56d6606c5ea350a82f6269ef9aa4b", "author": {"user": {"login": "shubha-rajan", "name": "Shubha Rajan"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/35b751c7dac56d6606c5ea350a82f6269ef9aa4b", "committedDate": "2020-02-06T21:53:52Z", "message": "Update dlp/src/main/java/dlp/snippets/InspectGcsFile.java\n\nCo-Authored-By: Kurtis Van Gent <31518063+kurtisvg@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66b34caf1cb05e505f9f82ed0ea1cf0f3cc47fc4", "author": {"user": {"login": "shubha-rajan", "name": "Shubha Rajan"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/66b34caf1cb05e505f9f82ed0ea1cf0f3cc47fc4", "committedDate": "2020-02-06T22:51:54Z", "message": "minor refactoring and fixups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65be2be24821414333f2371072b5f4605c8577e7", "author": {"user": {"login": "shubha-rajan", "name": "Shubha Rajan"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/65be2be24821414333f2371072b5f4605c8577e7", "committedDate": "2020-02-06T23:08:52Z", "message": "resolve merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43ab3e0cd4fcd5064e42e3a0707d6d0550fcf453", "author": {"user": {"login": "shubha-rajan", "name": "Shubha Rajan"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/43ab3e0cd4fcd5064e42e3a0707d6d0550fcf453", "committedDate": "2020-02-06T23:16:55Z", "message": "Merge branch 'master' into dlp-snippet-refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1dea798bfc6d949b8de5322889c946092602c7dd", "author": {"user": {"login": "shubha-rajan", "name": "Shubha Rajan"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/1dea798bfc6d949b8de5322889c946092602c7dd", "committedDate": "2020-02-07T02:26:29Z", "message": "added @BeforeClass annotation to checkRequirements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1308bcfeb43a7a3bc568f0a3d9c4f54ba4df9904", "author": {"user": {"login": "shubha-rajan", "name": "Shubha Rajan"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/1308bcfeb43a7a3bc568f0a3d9c4f54ba4df9904", "committedDate": "2020-02-07T02:27:26Z", "message": "Merge branch 'dlp-snippet-refactor' of github.com:shubha-rajan/java-docs-samples into dlp-snippet-refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a20ac8d5812a027ddaf14ebbf7d55e6b7fc64a31", "author": {"user": {"login": "shubha-rajan", "name": "Shubha Rajan"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/a20ac8d5812a027ddaf14ebbf7d55e6b7fc64a31", "committedDate": "2020-02-07T02:31:02Z", "message": "updated documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e9ad0cf6cdb1be755b9a50b8ae8d04f02af7231", "author": {"user": {"login": "shubha-rajan", "name": "Shubha Rajan"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/0e9ad0cf6cdb1be755b9a50b8ae8d04f02af7231", "committedDate": "2020-02-07T03:04:24Z", "message": "removed GCS_PATH env variable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0OTE1MDEy", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2054#pullrequestreview-354915012", "createdAt": "2020-02-07T03:36:24Z", "commit": {"oid": "0e9ad0cf6cdb1be755b9a50b8ae8d04f02af7231"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMzozNjoyNFrOFmxdxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMzo0NDoyMVrOFmxjmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIwMDY0NA==", "bodyText": "I think you were probably right the fist time and this should be a provided env var. More generally, any time we ask the user to provide a specific resources we should probably be asking for an environment variable in a test.\nThis probably applies to PUB_SUB_TOPIC_ID and PUB_SUB_SUBSCRIPTION_ID as well.\nIf you want to address this in this PR, I can walk you through how to set these during our next 1:1. If not, please open an issue and assign it to yourself and we'll fix at a later time.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2054#discussion_r376200644", "createdAt": "2020-02-07T03:36:24Z", "author": {"login": "kurtisvg"}, "path": "dlp/src/test/java/dlp/snippets/JobsTests.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.util.concurrent.ExecutionException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(JUnit4.class)\n+public class JobsTests {\n+\n+    private static final Pattern JOB_ID_PATTERN = Pattern.compile(\"projects/.*/dlpJobs/i-\\\\d+\");\n+    private static final String PROJECT_ID = System.getenv(\"GOOGLE_CLOUD_PROJECT\");\n+    private static final String GCS_PATH = \"gs://\" + PROJECT_ID + \"/dlp\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e9ad0cf6cdb1be755b9a50b8ae8d04f02af7231"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIwMjEzOA==", "bodyText": "I think this pattern is going to introduce a race condition when this test is run in parallel. It's possible while each test is going to create a new job, they could both make a request and get the same job, which one might fail.\nAdditionally, JUNIT doesn't actually guarantee any specific order for tests. deletejobs could run after listjobs.\nI think this means we have to do 2 things:\n\nUpdate ListJobs to pass as long as the request was successful (even if it's empty)\nCreate a job with a specific UUID that the deleteJob can delete.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2054#discussion_r376202138", "createdAt": "2020-02-07T03:44:21Z", "author": {"login": "kurtisvg"}, "path": "dlp/src/test/java/dlp/snippets/JobsTests.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.util.concurrent.ExecutionException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(JUnit4.class)\n+public class JobsTests {\n+\n+    private static final Pattern JOB_ID_PATTERN = Pattern.compile(\"projects/.*/dlpJobs/i-\\\\d+\");\n+    private static final String PROJECT_ID = System.getenv(\"GOOGLE_CLOUD_PROJECT\");\n+    private static final String GCS_PATH = \"gs://\" + PROJECT_ID + \"/dlp\";\n+    private static final String PUB_SUB_TOPIC_ID = \"dlp-tests\";\n+    private static final String PUB_SUB_SUBSCRIPTION_ID = \"dlp-test\";\n+    private ByteArrayOutputStream bout;\n+\n+    private static void requireEnvVar(String varName) {\n+        assertNotNull(\n+                String.format(\"Environment variable '%s' must be set to perform these tests.\", varName),\n+                System.getenv(varName));\n+    }\n+\n+    @BeforeClass\n+    public static void checkRequirements() {\n+        requireEnvVar(\"GOOGLE_APPLICATION_CREDENTIALS\");\n+        requireEnvVar(\"GOOGLE_CLOUD_PROJECT\");\n+    }\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        bout = new ByteArrayOutputStream();\n+        System.setOut(new PrintStream(bout));\n+\n+        // Ensure that there is at least one job to list\n+        InspectGcsFile.inspectGcsFile(PROJECT_ID,\n+                GCS_PATH,\n+                PUB_SUB_TOPIC_ID,\n+                PUB_SUB_SUBSCRIPTION_ID);\n+    }\n+\n+\n+    @After\n+    public void tearDown() {\n+        System.setOut(null);\n+        bout.reset();\n+    }\n+\n+    @Test\n+    public void testListJobs() throws Exception {\n+        // Call listJobs to print out a list of jobIds\n+        JobsList.listJobs(PROJECT_ID);\n+        String output = bout.toString();\n+\n+        // Check that the output contains jobIds\n+        Matcher matcher = JOB_ID_PATTERN.matcher(bout.toString());\n+        assertTrue(\"List must contain results.\", matcher.find());\n+    }\n+\n+    @Test\n+    public void testDeleteJobs() throws Exception {\n+        // Get a list of JobIds, and extract one to delete\n+        JobsList.listJobs(PROJECT_ID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e9ad0cf6cdb1be755b9a50b8ae8d04f02af7231"}, "originalPosition": 91}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a3582c97e970a9c6881b71e1531f17e034a95e0", "author": {"user": {"login": "shubha-rajan", "name": "Shubha Rajan"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/8a3582c97e970a9c6881b71e1531f17e034a95e0", "committedDate": "2020-02-08T02:12:23Z", "message": "updated jobs tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea05ddcf42109daf8c73ce390407ac42e17012b9", "author": {"user": {"login": "shubha-rajan", "name": "Shubha Rajan"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/ea05ddcf42109daf8c73ce390407ac42e17012b9", "committedDate": "2020-02-10T19:20:44Z", "message": "Merge branch 'master' into dlp-snippet-refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12cda40ab5651b0ab31bcbb131b8f5303693c282", "author": {"user": {"login": "shubha-rajan", "name": "Shubha Rajan"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/12cda40ab5651b0ab31bcbb131b8f5303693c282", "committedDate": "2020-02-11T02:08:28Z", "message": "updated imports"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2ODI4Mzcy", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2054#pullrequestreview-356828372", "createdAt": "2020-02-11T16:58:20Z", "commit": {"oid": "12cda40ab5651b0ab31bcbb131b8f5303693c282"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 579, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}