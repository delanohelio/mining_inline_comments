{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMDQ4MTMz", "number": 3111, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMDo0Njo1MFrOEEDGpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMDo0Njo1MFrOEEDGpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjgwNjE0OnYy", "diffSide": "RIGHT", "path": "dlp/src/main/java/dlp/snippets/InspectWithCustomRegex.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMDo0Njo1MFrOGhbnAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMDo0Njo1MFrOGhbnAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcwODU0Nw==", "bodyText": "https://google.github.io/styleguide/javaguide.html#s6.2-caught-exceptions\nIt's better to explain what might happen, but not to catch it.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3111#discussion_r437708547", "createdAt": "2020-06-09T20:46:50Z", "author": {"login": "lesv"}, "path": "dlp/src/main/java/dlp/snippets/InspectWithCustomRegex.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+// [START dlp_inspect_custom_regex]\n+\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ByteContentItem;\n+import com.google.privacy.dlp.v2.ByteContentItem.BytesType;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.CustomInfoType;\n+import com.google.privacy.dlp.v2.CustomInfoType.Regex;\n+import com.google.privacy.dlp.v2.Finding;\n+import com.google.privacy.dlp.v2.InfoType;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.InspectContentRequest;\n+import com.google.privacy.dlp.v2.InspectContentResponse;\n+import com.google.privacy.dlp.v2.Likelihood;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.protobuf.ByteString;\n+\n+public class InspectWithCustomRegex {\n+\n+  public static void inspectWithCustomRegex() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"your-project-id\";\n+    String textToInspect = \"Patients MRN 444-5-22222\";\n+    String customRegexPattern = \"[1-9]{3}-[1-9]{1}-[1-9]{5}\";\n+    inspectWithCustomRegex(projectId, textToInspect, customRegexPattern);\n+  }\n+\n+  // Inspects a BigQuery Table\n+  public static void inspectWithCustomRegex(\n+      String projectId, String textToInspect, String customRegexPattern) {\n+    // Initialize client that will be used to send requests. This client only needs to be created\n+    // once, and can be reused for multiple requests. After completing all of your requests, call\n+    // the \"close\" method on the client to safely clean up any remaining background resources.\n+    try (DlpServiceClient dlp = DlpServiceClient.create()) {\n+      // Specify the project used for request.\n+      ProjectName project = ProjectName.of(projectId);\n+\n+      // Specify the type and content to be inspected.\n+      ByteContentItem byteItem =\n+          ByteContentItem.newBuilder()\n+              .setType(BytesType.TEXT_UTF8)\n+              .setData(ByteString.copyFromUtf8(textToInspect))\n+              .build();\n+      ContentItem item = ContentItem.newBuilder().setByteItem(byteItem).build();\n+\n+      // Specify the regex pattern the inspection will look for.\n+      Regex regex = Regex.newBuilder().setPattern(customRegexPattern).build();\n+\n+      // Construct the custom regex detector.\n+      InfoType infoType = InfoType.newBuilder().setName(\"C_MRN\").build();\n+      CustomInfoType customInfoType =\n+          CustomInfoType.newBuilder().setInfoType(infoType).setRegex(regex).build();\n+\n+      // Construct the configuration for the Inspect request.\n+      InspectConfig config =\n+          InspectConfig.newBuilder()\n+              .addCustomInfoTypes(customInfoType)\n+              .setIncludeQuote(true)\n+              .setMinLikelihood(Likelihood.POSSIBLE)\n+              .build();\n+\n+      // Construct the Inspect request to be sent by the client.\n+      InspectContentRequest request =\n+          InspectContentRequest.newBuilder()\n+              .setParent(project.toString())\n+              .setItem(item)\n+              .setInspectConfig(config)\n+              .build();\n+\n+      // Use the client to send the API request.\n+      InspectContentResponse response = dlp.inspectContent(request);\n+\n+      // Parse the response and process results\n+      System.out.println(\"Findings: \" + response.getResult().getFindingsCount());\n+      for (Finding f : response.getResult().getFindingsList()) {\n+        System.out.println(\"\\tQuote: \" + f.getQuote());\n+        System.out.println(\"\\tInfo type: \" + f.getInfoType().getName());\n+        System.out.println(\"\\tLikelihood: \" + f.getLikelihood());\n+      }\n+    } catch (Exception e) {\n+      System.out.println(\"Error during inspectString: \\n\" + e.toString());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a436d867b924046c3bde39a2c89ffaf7101a033"}, "originalPosition": 100}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 624, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}