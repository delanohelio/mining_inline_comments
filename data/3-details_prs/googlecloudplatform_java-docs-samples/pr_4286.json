{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0MjcwNDU3", "number": 4286, "title": "feat(kms): add integrity verification to samples of crypto operations", "bodyText": "Fixes #4284\n\nIt's a good idea to open an issue first for discussion.\n\n\n I have followed Sample Format Guide\n pom.xml parent set to latest shared-configuration\n Appropriate changes to README are included in PR\n API's need to be enabled to test (tell us)\n Environment Variables need to be set (ask us to set them)\n Tests pass:   mvn clean verify required\n Lint  passes: mvn -P lint checkstyle:check required\n Static Analysis:  mvn -P lint clean compile pmd:cpd-check spotbugs:check advisory only\n Please merge this PR for me once it is approved.", "createdAt": "2020-11-19T22:20:06Z", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4286", "merged": true, "mergeCommit": {"oid": "e684b3d561e8150cdb5d846047cf2200ac0139f4"}, "closed": true, "closedAt": "2020-11-30T21:35:01Z", "author": {"login": "iamtamjam"}, "timelineItems": {"totalCount": 48, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdeKLXtAH2gAyNTI0MjcwNDU3OjMwYWNjYjJhNzc1Y2Q4ZTYxMTc5OGExZWVkYWM1MGQ5ZTdlYjZkMjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdhsUUQgFqTU0MTMxMzE0Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "30accb2a775cd8e611798a1eedac50d9e7eb6d29", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/30accb2a775cd8e611798a1eedac50d9e7eb6d29", "committedDate": "2020-11-19T22:06:26Z", "message": "feat(kms): add integrity verification to samples of crypto operations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0OTA1MzU2", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4286#pullrequestreview-534905356", "createdAt": "2020-11-19T22:21:25Z", "commit": {"oid": "30accb2a775cd8e611798a1eedac50d9e7eb6d29"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7279c3e30e859ee8584894ba7519d730de06300b", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/7279c3e30e859ee8584894ba7519d730de06300b", "committedDate": "2020-11-20T02:04:28Z", "message": "Populate plaintextCrc32c in EncryptSymmetric.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c075079dbed2916984d5a69b6468a42937ca6403", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/c075079dbed2916984d5a69b6468a42937ca6403", "committedDate": "2020-11-20T02:13:43Z", "message": "Fix guava dependency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1da5ce85afac66aa3e92966ecaed7b3732bab319", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/1da5ce85afac66aa3e92966ecaed7b3732bab319", "committedDate": "2020-11-20T16:11:46Z", "message": "Fix build errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca9b00951915c87a587db6ef322e4ac8200e8486", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/ca9b00951915c87a587db6ef322e4ac8200e8486", "committedDate": "2020-11-20T17:51:22Z", "message": "Fix some more build errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50419adfca5b74f956c55c73f9317b80338695d4", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/50419adfca5b74f956c55c73f9317b80338695d4", "committedDate": "2020-11-20T18:09:59Z", "message": "Fix Int64Value construction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12352dfa4e8660677a00a93d55bed282be5bcf79", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/12352dfa4e8660677a00a93d55bed282be5bcf79", "committedDate": "2020-11-20T18:33:40Z", "message": "Add protobuf-java dependency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f542e419e8e954f1e0ba99be4ab1910e59fd4c95", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/f542e419e8e954f1e0ba99be4ab1910e59fd4c95", "committedDate": "2020-11-20T18:40:00Z", "message": "fix typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6edef4852a6cbfb465642073d33da7b4bb5224f", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/b6edef4852a6cbfb465642073d33da7b4bb5224f", "committedDate": "2020-11-20T18:46:10Z", "message": "Test implicit Int64Value construction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b03a8bf8e948aee7e6b0b2d83b91c0a859275d93", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/b03a8bf8e948aee7e6b0b2d83b91c0a859275d93", "committedDate": "2020-11-20T19:07:28Z", "message": "Add EncryptResponse integrity verification"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fab0d40413c343c6d2d244d094619a6880d1c61", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/9fab0d40413c343c6d2d244d094619a6880d1c61", "committedDate": "2020-11-20T19:15:49Z", "message": "Deal with long to int implicit conversion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "769f50452bff88b166c7c622999e07d607dd738e", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/769f50452bff88b166c7c622999e07d607dd738e", "committedDate": "2020-11-20T19:23:20Z", "message": "One more lossy conversion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "918476715bcb075fd59d85d5526abb07f370a853", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/918476715bcb075fd59d85d5526abb07f370a853", "committedDate": "2020-11-20T20:26:14Z", "message": "Test something"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95171b717a7b4c87d73dbc038c57ff98e943229c", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/95171b717a7b4c87d73dbc038c57ff98e943229c", "committedDate": "2020-11-20T21:00:45Z", "message": "Fix IllegalStateException caused by fetching Long from HashCode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6301fc89ad552f7415c78696f6688e9a78d9ed60", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/6301fc89ad552f7415c78696f6688e9a78d9ed60", "committedDate": "2020-11-20T22:34:31Z", "message": "Cleanup EncryptSymmetric.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28c298101b72d8c9d5aa5c7a99a4ecaa183b1ddd", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/28c298101b72d8c9d5aa5c7a99a4ecaa183b1ddd", "committedDate": "2020-11-20T22:41:28Z", "message": "Fix build error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9de9abacffe1f0b437c393d5024cd9e611095820", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/9de9abacffe1f0b437c393d5024cd9e611095820", "committedDate": "2020-11-21T02:55:20Z", "message": "Add print outs to debug ciphertext checksum mismatch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e77e22cca04a3173e8bed87efc463a7ce1eea2fd", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/e77e22cca04a3173e8bed87efc463a7ce1eea2fd", "committedDate": "2020-11-21T03:12:05Z", "message": "Some more debug prints"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30668dcb3a2a3dba62d41d13c26923eba3c528e8", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/30668dcb3a2a3dba62d41d13c26923eba3c528e8", "committedDate": "2020-11-21T03:19:05Z", "message": "ugghhh I should really quit already"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "749ec0f3ca68d23e1527b070c68972c418f28b80", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/749ec0f3ca68d23e1527b070c68972c418f28b80", "committedDate": "2020-11-23T14:31:57Z", "message": "Remove my hardcoded test project"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37a194bd0d3642a655952186b92badd0c98488eb", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/37a194bd0d3642a655952186b92badd0c98488eb", "committedDate": "2020-11-23T14:53:31Z", "message": "Remove test plaintext override"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f5772561f03827a4439e22a4d27c2157032587e", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/1f5772561f03827a4439e22a4d27c2157032587e", "committedDate": "2020-11-23T15:02:38Z", "message": "Comment out debug print outs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "604b79bee6956ee55d72dfa5a23f8afc6327d610", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/604b79bee6956ee55d72dfa5a23f8afc6327d610", "committedDate": "2020-11-23T15:38:54Z", "message": "Clean up debug print outs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a5e72209acc3a829162e885f90df4c456218341", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/2a5e72209acc3a829162e885f90df4c456218341", "committedDate": "2020-11-23T17:10:25Z", "message": "Add integrity verification to DecryptSymmetric.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ca4f130b83c2cf35cda2d726fdafcb0ef10065f", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/8ca4f130b83c2cf35cda2d726fdafcb0ef10065f", "committedDate": "2020-11-23T17:23:49Z", "message": "Fix imports in DecryptSymmetric.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a003e3d789dbfa982d5576a90d1df4cf06eb09d", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/4a003e3d789dbfa982d5576a90d1df4cf06eb09d", "committedDate": "2020-11-23T17:42:02Z", "message": "Add integrity verification to AsymmetricDecrypt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "806d957790fd343771b2428ff7c705b126a1f264", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/806d957790fd343771b2428ff7c705b126a1f264", "committedDate": "2020-11-23T17:56:58Z", "message": "Fix build error by adding explicit conversion to string"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6236370a359a5a7ea2cafa9131282e41442596f5", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/6236370a359a5a7ea2cafa9131282e41442596f5", "committedDate": "2020-11-23T18:13:15Z", "message": "Add integrity verification to GetPublicKey.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a430e4a5ffc8de3c1cbe14e089e0c0c44f689b2", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/1a430e4a5ffc8de3c1cbe14e089e0c0c44f689b2", "committedDate": "2020-11-23T18:50:53Z", "message": "Fix build error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dacd8c96f08a082ddf3feceae91dc6ca8b690744", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/dacd8c96f08a082ddf3feceae91dc6ca8b690744", "committedDate": "2020-11-23T19:17:20Z", "message": "Add integrity verification to SignAsymmetric.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6963c4e00b743b4c89a2ef222a2e017da352efcb", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/6963c4e00b743b4c89a2ef222a2e017da352efcb", "committedDate": "2020-11-23T19:53:18Z", "message": "Remove response handling from try block to see impact on failing tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a41da3854fe3c54fad2a8ba0522d6bce5924ad65", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/a41da3854fe3c54fad2a8ba0522d6bce5924ad65", "committedDate": "2020-11-23T20:00:22Z", "message": "Fix build error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77b22c2f7f9f851eee1706fc531524afc780ba30", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/77b22c2f7f9f851eee1706fc531524afc780ba30", "committedDate": "2020-11-23T20:17:42Z", "message": "Add -e to mvn command and experiment with prints to STDERR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b00198e6ab7646e880dc4e2cfc6a7da9219471fb", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/b00198e6ab7646e880dc4e2cfc6a7da9219471fb", "committedDate": "2020-11-23T22:09:46Z", "message": "Add -Dsurefire.useFile=false to run_tests.sh"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9b071361b10b195f4191e6f63885958aa236374", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/b9b071361b10b195f4191e6f63885958aa236374", "committedDate": "2020-11-23T22:20:36Z", "message": "Add -D.failsafe.useFile=false flag to run_tests.sh"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc866b832d1b627f58549d2b59e4dec1571375ce", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/bc866b832d1b627f58549d2b59e4dec1571375ce", "committedDate": "2020-11-23T22:39:33Z", "message": "Add some debug prints"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a69dd25179e19a1937140d50abc7045c4678c974", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/a69dd25179e19a1937140d50abc7045c4678c974", "committedDate": "2020-11-23T22:49:54Z", "message": "Fix build error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48d3d418f2cdef44c24f34041a15cc33d5d25374", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/48d3d418f2cdef44c24f34041a15cc33d5d25374", "committedDate": "2020-11-23T23:00:00Z", "message": "Adjust string to bytes[] conversion"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2OTE0NTgx", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4286#pullrequestreview-536914581", "createdAt": "2020-11-23T23:05:18Z", "commit": {"oid": "a69dd25179e19a1937140d50abc7045c4678c974"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMzowNTozOVrOH4i3XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMzowODo0NFrOH4i8PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA1MzUzMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return (long) Hashing.crc32c().hashBytes(data).asInt();\n          \n          \n            \n                return Hashing.crc32c().hashBytes(data).padToLong();", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4286#discussion_r529053532", "createdAt": "2020-11-23T23:05:39Z", "author": {"login": "shubha-rajan"}, "path": "kms/src/main/java/kms/EncryptSymmetric.java", "diffHunk": "@@ -38,20 +45,63 @@ public void encryptSymmetric() throws IOException {\n   // Encrypt data with a given key.\n   public void encryptSymmetric(\n       String projectId, String locationId, String keyRingId, String keyId, String plaintext)\n-      throws IOException {\n+      throws IOException, Exception {\n+\n+    System.err.println(\"TAMJAM1: \" + projectId);\n+\n     // Initialize client that will be used to send requests. This client only\n     // needs to be created once, and can be reused for multiple requests. After\n     // completing all of your requests, call the \"close\" method on the client to\n     // safely clean up any remaining background resources.\n+    EncryptResponse response;\n     try (KeyManagementServiceClient client = KeyManagementServiceClient.create()) {\n-      // Build the key version name from the project, location, key ring, key,\n-      // and key version.\n-      CryptoKeyName keyVersionName = CryptoKeyName.of(projectId, locationId, keyRingId, keyId);\n+      // Build the key name from the project, location, key ring, and key.\n+      CryptoKeyName cryptoKeyName = CryptoKeyName.of(projectId, locationId, keyRingId, keyId);\n+\n+      // Convert plaintext to ByteString.\n+      ByteString plaintextByteString = ByteString.copyFromUtf8(plaintext);\n+\n+      // Optional, but recommended: compute plaintext's CRC32C. See helper below.\n+      long plaintextCrc32c = getCrc32cAsLong(plaintextByteString.toByteArray());\n \n       // Encrypt the plaintext.\n-      EncryptResponse response = client.encrypt(keyVersionName, ByteString.copyFromUtf8(plaintext));\n-      System.out.printf(\"Ciphertext: %s%n\", response.getCiphertext().toStringUtf8());\n+      EncryptRequest request = EncryptRequest.newBuilder()\n+                               .setName(cryptoKeyName.toString())\n+                               .setPlaintext(plaintextByteString)\n+                               .setPlaintextCrc32C(\n+                                   Int64Value.newBuilder().setValue(plaintextCrc32c).build())\n+                               .build();\n+      response = client.encrypt(request);\n+    } catch (Exception e) {\n+      throw e;\n+    }\n+    // Optional, but recommended: perform integrity verification on response.\n+    // For more details on ensuring E2E in-transit integrity to and from Cloud KMS visit:\n+    // https://cloud.google.com/kms/docs/data-integrity-guidelines\n+    System.err.println(\"TAMJAM2\");\n+    if (!response.getVerifiedPlaintextCrc32C()) {\n+      throw new IOException(\"Encrypt: request to server corrupted\");\n     }\n+\n+    // See helper below.\n+    if (!crcMatches(response.getCiphertextCrc32C().getValue(),\n+        response.getCiphertext().toByteArray())) {\n+      String details = String.format(\n+          \"Excpected=%d, Actual=%d, getCrc32cAsLong(test)=%d%n\",\n+          response.getCiphertextCrc32C().getValue(), getCrc32cAsLong(response.getCiphertext().toByteArray()),\n+          getCrc32cAsLong(\"test\"));\n+      throw new IOException(\"Encrypt: response from server corrupted. \" + details);\n+    }\n+\n+    System.out.printf(\"Ciphertext: %s%n\", response.getCiphertext().toStringUtf8());\n+  }\n+\n+  private long getCrc32cAsLong(byte[] data) {\n+    return (long) Hashing.crc32c().hashBytes(data).asInt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a69dd25179e19a1937140d50abc7045c4678c974"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA1MzY4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return (long) Hashing.crc32c().hashBytes(data).asInt();\n          \n          \n            \n                return Hashing.crc32c().hashBytes(data).padToLong();", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4286#discussion_r529053684", "createdAt": "2020-11-23T23:06:00Z", "author": {"login": "shubha-rajan"}, "path": "kms/src/main/java/kms/GetPublicKey.java", "diffHunk": "@@ -51,8 +55,30 @@ public void getPublicKey(\n \n       // Get the public key.\n       PublicKey publicKey = client.getPublicKey(keyVersionName);\n+\n+      // Optional, but recommended: perform integrity verification on response.\n+      // For more details on ensuring E2E in-transit integrity to and from Cloud KMS visit:\n+      // https://cloud.google.com/kms/docs/data-integrity-guidelines\n+      if (!publicKey.getName().equals(keyVersionName.toString())) {\n+        throw new IOException(\"GetPublicKey: request to server corrupted\");\n+      }\n+\n+      // See helper below.\n+      if (!crcMatches(publicKey.getPemCrc32C().getValue(),\n+          publicKey.getPemBytes().toByteArray())) {\n+        throw new IOException(\"GetPublicKey: response from server corrupted\");\n+      }\n+\n       System.out.printf(\"Public key: %s%n\", publicKey.getPem());\n     }\n   }\n+\n+  private long getCrc32cAsLong(byte[] data) {\n+    return (long) Hashing.crc32c().hashBytes(data).asInt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a69dd25179e19a1937140d50abc7045c4678c974"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA1Mzc5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return (long) Hashing.crc32c().hashBytes(data).asInt();\n          \n          \n            \n                return Hashing.crc32c().hashBytes(data).padToLong();", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4286#discussion_r529053793", "createdAt": "2020-11-23T23:06:17Z", "author": {"login": "shubha-rajan"}, "path": "kms/src/main/java/kms/SignAsymmetric.java", "diffHunk": "@@ -70,14 +75,44 @@ public void signAsymmetric(\n       // Build the digest object.\n       Digest digest = Digest.newBuilder().setSha256(ByteString.copyFrom(hash)).build();\n \n+      // Optional, but recommended: compute digest's CRC32C. See helper below.\n+      long digestCrc32c = getCrc32cAsLong(hash);\n+\n       // Sign the digest.\n-      AsymmetricSignResponse result = client.asymmetricSign(keyVersionName, digest);\n+      AsymmetricSignRequest request =\n+          AsymmetricSignRequest.newBuilder()\n+              .setName(keyVersionName.toString())\n+              .setDigest(digest)\n+              .setDigestCrc32C(Int64Value.newBuilder().setValue(digestCrc32c).build())\n+              .build();\n+      AsymmetricSignResponse response = client.asymmetricSign(request);\n+\n+      // Optional, but recommended: perform integrity verification on response.\n+      // For more details on ensuring E2E in-transit integrity to and from Cloud KMS visit:\n+      // https://cloud.google.com/kms/docs/data-integrity-guidelines\n+      if (!response.getVerifiedDigestCrc32C()) {\n+        throw new IOException(\"Encrypt: request to server corrupted\");\n+      }\n+\n+      // See helper below.\n+      if (!crcMatches(response.getSignatureCrc32C().getValue(),\n+          response.getSignature().toByteArray())) {\n+        throw new IOException(\"Encrypt: response from server corrupted\");\n+      }\n \n       // Get the signature.\n-      byte[] signature = result.getSignature().toByteArray();\n+      byte[] signature = response.getSignature().toByteArray();\n \n       System.out.printf(\"Signature %s%n\", signature);\n     }\n   }\n+\n+  private long getCrc32cAsLong(byte[] data) {\n+    return (long) Hashing.crc32c().hashBytes(data).asInt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a69dd25179e19a1937140d50abc7045c4678c974"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA1NDE0Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return (long) Hashing.crc32c().hashBytes(data).asInt();\n          \n          \n            \n                return Hashing.crc32c().hashBytes(data).padToLong();", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4286#discussion_r529054142", "createdAt": "2020-11-23T23:07:08Z", "author": {"login": "shubha-rajan"}, "path": "kms/src/main/java/kms/DecryptSymmetric.java", "diffHunk": "@@ -44,14 +51,40 @@ public void decryptSymmetric(\n     // completing all of your requests, call the \"close\" method on the client to\n     // safely clean up any remaining background resources.\n     try (KeyManagementServiceClient client = KeyManagementServiceClient.create()) {\n-      // Build the key version name from the project, location, key ring, and\n-      // key.\n+      // Build the key version from the project, location, key ring, and key.\n       CryptoKeyName keyName = CryptoKeyName.of(projectId, locationId, keyRingId, keyId);\n \n-      // Decrypt the response.\n-      DecryptResponse response = client.decrypt(keyName, ByteString.copyFrom(ciphertext));\n+      // Optional, but recommended: compute ciphertext's CRC32C. See helpers below.\n+      long ceiphertextCrc32c = getCrc32cAsLong(ciphertext);\n+\n+      // Decrypt the ciphertext.\n+      DecryptRequest request =\n+          DecryptRequest.newBuilder()\n+              .setName(keyName.toString())\n+              .setCiphertext(ByteString.copyFrom(ciphertext))\n+              .setCiphertextCrc32C(\n+                  Int64Value.newBuilder().setValue(ceiphertextCrc32c).build())\n+              .build();\n+      DecryptResponse response = client.decrypt(request);\n+\n+      // Optional, but recommended: perform integrity verification on response.\n+      // For more details on ensuring E2E in-transit integrity to and from Cloud KMS visit:\n+      // https://cloud.google.com/kms/docs/data-integrity-guidelines\n+      if (!crcMatches(response.getPlaintextCrc32C().getValue(),\n+          response.getPlaintext().toByteArray())) {\n+        throw new IOException(\"Decrypt: response from server corrupted, getCrc32cAsLong(test)=\" + getCrc32cAsLong(\"test\"));\n+      }\n+\n       System.out.printf(\"Plaintext: %s%n\", response.getPlaintext().toStringUtf8());\n     }\n   }\n+\n+  private long getCrc32cAsLong(byte[] data) {\n+    return (long) Hashing.crc32c().hashBytes(data).asInt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a69dd25179e19a1937140d50abc7045c4678c974"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA1NDIxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return (long) Hashing.crc32c().hashBytes(data).asInt();\n          \n          \n            \n                return Hashing.crc32c().hashBytes(data).padToLong();", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4286#discussion_r529054214", "createdAt": "2020-11-23T23:07:21Z", "author": {"login": "shubha-rajan"}, "path": "kms/src/main/java/kms/DecryptAsymmetric.java", "diffHunk": "@@ -56,11 +61,41 @@ public void decryptAsymmetric(\n       CryptoKeyVersionName keyVersionName =\n           CryptoKeyVersionName.of(projectId, locationId, keyRingId, keyId, keyVersionId);\n \n+      // Optional, but recommended: compute ciphertext's CRC32C. See helpers below.\n+      long ceiphertextCrc32c = getCrc32cAsLong(ciphertext);\n+\n       // Decrypt the ciphertext.\n-      AsymmetricDecryptResponse response =\n-          client.asymmetricDecrypt(keyVersionName, ByteString.copyFrom(ciphertext));\n+      AsymmetricDecryptRequest request =\n+          AsymmetricDecryptRequest.newBuilder()\n+              .setName(keyVersionName.toString())\n+              .setCiphertext(ByteString.copyFrom(ciphertext))\n+              .setCiphertextCrc32C(\n+                  Int64Value.newBuilder().setValue(ceiphertextCrc32c).build())\n+              .build();\n+      AsymmetricDecryptResponse response = client.asymmetricDecrypt(request);\n+\n+      // Optional, but recommended: perform integrity verification on response.\n+      // For more details on ensuring E2E in-transit integrity to and from Cloud KMS visit:\n+      // https://cloud.google.com/kms/docs/data-integrity-guidelines\n+      if (!response.getVerifiedCiphertextCrc32C()) {\n+        throw new IOException(\"AsymmetricDecrypt: request to server corrupted\");\n+      }\n+\n+      if (!crcMatches(response.getPlaintextCrc32C().getValue(),\n+          response.getPlaintext().toByteArray())) {\n+        throw new IOException(\"AsymmetricDecrypt: response from server corrupted\");\n+      }\n+\n       System.out.printf(\"Plaintext: %s%n\", response.getPlaintext().toStringUtf8());\n     }\n   }\n+\n+  private long getCrc32cAsLong(byte[] data) {\n+    return (long) Hashing.crc32c().hashBytes(data).asInt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a69dd25179e19a1937140d50abc7045c4678c974"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA1NDc4MA==", "bodyText": "Any reason you're using asInt() here? I tried this with padToLong() and the tests started to consistently pass. https://guava.dev/releases/19.0/api/docs/com/google/common/hash/HashCode.html#padToLong()", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4286#discussion_r529054780", "createdAt": "2020-11-23T23:08:44Z", "author": {"login": "shubha-rajan"}, "path": "kms/src/main/java/kms/DecryptAsymmetric.java", "diffHunk": "@@ -56,11 +61,41 @@ public void decryptAsymmetric(\n       CryptoKeyVersionName keyVersionName =\n           CryptoKeyVersionName.of(projectId, locationId, keyRingId, keyId, keyVersionId);\n \n+      // Optional, but recommended: compute ciphertext's CRC32C. See helpers below.\n+      long ceiphertextCrc32c = getCrc32cAsLong(ciphertext);\n+\n       // Decrypt the ciphertext.\n-      AsymmetricDecryptResponse response =\n-          client.asymmetricDecrypt(keyVersionName, ByteString.copyFrom(ciphertext));\n+      AsymmetricDecryptRequest request =\n+          AsymmetricDecryptRequest.newBuilder()\n+              .setName(keyVersionName.toString())\n+              .setCiphertext(ByteString.copyFrom(ciphertext))\n+              .setCiphertextCrc32C(\n+                  Int64Value.newBuilder().setValue(ceiphertextCrc32c).build())\n+              .build();\n+      AsymmetricDecryptResponse response = client.asymmetricDecrypt(request);\n+\n+      // Optional, but recommended: perform integrity verification on response.\n+      // For more details on ensuring E2E in-transit integrity to and from Cloud KMS visit:\n+      // https://cloud.google.com/kms/docs/data-integrity-guidelines\n+      if (!response.getVerifiedCiphertextCrc32C()) {\n+        throw new IOException(\"AsymmetricDecrypt: request to server corrupted\");\n+      }\n+\n+      if (!crcMatches(response.getPlaintextCrc32C().getValue(),\n+          response.getPlaintext().toByteArray())) {\n+        throw new IOException(\"AsymmetricDecrypt: response from server corrupted\");\n+      }\n+\n       System.out.printf(\"Plaintext: %s%n\", response.getPlaintext().toStringUtf8());\n     }\n   }\n+\n+  private long getCrc32cAsLong(byte[] data) {\n+    return (long) Hashing.crc32c().hashBytes(data).asInt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a69dd25179e19a1937140d50abc7045c4678c974"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cbef71947d980bec849aa572ad423dd20dc90ae", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/6cbef71947d980bec849aa572ad423dd20dc90ae", "committedDate": "2020-11-24T00:19:28Z", "message": "Try HashCode.padToLong in EncryptSymmetric and DecryptSymmetric"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61fd19cc88222e67cdaf6dfcac59c0b605589fe6", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/61fd19cc88222e67cdaf6dfcac59c0b605589fe6", "committedDate": "2020-11-24T00:35:25Z", "message": "Clean up debug traces"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42e0c059ac9d12ef036f9c5a96bdf1878b767579", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/42e0c059ac9d12ef036f9c5a96bdf1878b767579", "committedDate": "2020-11-24T00:41:32Z", "message": "Fix compilation issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6deacfcbae09934a05f75e2f82fb9e700b845d0", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/a6deacfcbae09934a05f75e2f82fb9e700b845d0", "committedDate": "2020-11-24T01:46:53Z", "message": "Clean up some more"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3MDcwOTA1", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4286#pullrequestreview-537070905", "createdAt": "2020-11-24T04:33:56Z", "commit": {"oid": "a6deacfcbae09934a05f75e2f82fb9e700b845d0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNDozMzo1N1rOH4rk9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNDozMzo1N1rOH4rk9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE5NjI3OA==", "bodyText": "This spelling error shows up in a few other places. I'd suggest doing a global find/replace\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  long ceiphertextCrc32c = getCrc32cAsLong(ciphertext);\n          \n          \n            \n                  long ciphertextCrc32c = getCrc32cAsLong(ciphertext);", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4286#discussion_r529196278", "createdAt": "2020-11-24T04:33:57Z", "author": {"login": "shubha-rajan"}, "path": "kms/src/main/java/kms/DecryptAsymmetric.java", "diffHunk": "@@ -56,11 +61,41 @@ public void decryptAsymmetric(\n       CryptoKeyVersionName keyVersionName =\n           CryptoKeyVersionName.of(projectId, locationId, keyRingId, keyId, keyVersionId);\n \n+      // Optional, but recommended: compute ciphertext's CRC32C. See helpers below.\n+      long ceiphertextCrc32c = getCrc32cAsLong(ciphertext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6deacfcbae09934a05f75e2f82fb9e700b845d0"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f17d85d2138687d12d2433885aedcbd60da279c", "author": {"user": {"login": "iamtamjam", "name": "Tamara Aviv"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/1f17d85d2138687d12d2433885aedcbd60da279c", "committedDate": "2020-11-25T15:47:39Z", "message": "Fix typo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMTk3NDY3", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4286#pullrequestreview-541197467", "createdAt": "2020-11-30T18:52:03Z", "commit": {"oid": "1f17d85d2138687d12d2433885aedcbd60da279c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMzEzMTQz", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4286#pullrequestreview-541313143", "createdAt": "2020-11-30T21:34:45Z", "commit": {"oid": "1f17d85d2138687d12d2433885aedcbd60da279c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 413, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}