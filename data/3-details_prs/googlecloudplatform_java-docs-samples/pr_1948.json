{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNDkyODQy", "number": 1948, "title": "Add secretmanager samples", "bodyText": "", "createdAt": "2020-01-14T07:46:17Z", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948", "merged": true, "mergeCommit": {"oid": "0b04cfdba3057b57bbca2f0dc6cacfd21d3379a9"}, "closed": true, "closedAt": "2020-01-15T17:29:47Z", "author": {"login": "sethvargo"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6VGqMgFqTM0MjcxMjcxNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb6ozxIgFqTM0MzM4NDQ2Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyNzEyNzE2", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#pullrequestreview-342712716", "createdAt": "2020-01-14T17:34:13Z", "commit": {"oid": "6425fe1ad5aad4cd6384a68a9ec03b230476b616"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNzozNDoxM1rOFdf5zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxODoxNDoyNlrOFdhDQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ3NTcyNg==", "bodyText": "Please add the following comment to clarify client usage:\n// Initialize client that will be used to send requests. This client only needs to be created\n// once, and can be reused for multiple requests. After completing all of your requests, call\n// the \"close\" method on the client to safely clean up any remaining background resources.\nSee Client Initialization.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366475726", "createdAt": "2020-01-14T17:34:13Z", "author": {"login": "kurtisvg"}, "path": "secretmanager/src/main/java/com/example/AccessSecretVersion.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+// [START secretmanager_access_secret_version]\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionRequest;\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+import java.io.IOException;\n+\n+public class AccessSecretVersion {\n+\n+  // Access the payload for the given secret version if one exists. The version\n+  // can be a version number as a string (e.g. \"5\") or an alias (e.g. \"latest\").\n+  public AccessSecretVersionResponse accessSecretVersion(\n+      String projectId, String secretId, String versionId) throws IOException {\n+    // Create a Secret Manager client with cleanup.\n+    try (SecretManagerServiceClient client = SecretManagerServiceClient.create()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6425fe1ad5aad4cd6384a68a9ec03b230476b616"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ3NzEwNQ==", "bodyText": "Please add an overloaded function with a //TODO(developer) that can be modified to run the snippet - See Function Structure\n(preferably it should also be return type void and verify it worked via capturing stdout while running the snippet.)", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366477105", "createdAt": "2020-01-14T17:36:58Z", "author": {"login": "kurtisvg"}, "path": "secretmanager/src/main/java/com/example/AccessSecretVersion.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+// [START secretmanager_access_secret_version]\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionRequest;\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+import java.io.IOException;\n+\n+public class AccessSecretVersion {\n+\n+  // Access the payload for the given secret version if one exists. The version\n+  // can be a version number as a string (e.g. \"5\") or an alias (e.g. \"latest\").\n+  public AccessSecretVersionResponse accessSecretVersion(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6425fe1ad5aad4cd6384a68a9ec03b230476b616"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ4MTI2OA==", "bodyText": "nit: Nesting builders like this can hamper readability. I generally prefer to build anything that isn't a single line (or sometimes two) prior to building the request.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366481268", "createdAt": "2020-01-14T17:45:39Z", "author": {"login": "kurtisvg"}, "path": "secretmanager/src/main/java/com/example/CreateSecret.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+// [START secretmanager_create_secret]\n+import com.google.cloud.secretmanager.v1beta1.CreateSecretRequest;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Replication;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import java.io.IOException;\n+\n+public class CreateSecret {\n+\n+  // Add a new version to the existing secret.\n+  public Secret createSecret(String projectId, String secretId) throws IOException {\n+    // Create a Secret Manager client with cleanup.\n+    try (SecretManagerServiceClient client = SecretManagerServiceClient.create()) {\n+      // Build the parent name from the project.\n+      ProjectName parent = ProjectName.of(projectId);\n+\n+      // Create the request.\n+      CreateSecretRequest request =\n+          CreateSecretRequest.newBuilder()\n+              .setParent(parent.toString())\n+              .setSecretId(secretId)\n+              .setSecret(\n+                  Secret.newBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6425fe1ad5aad4cd6384a68a9ec03b230476b616"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ4Njg2Mw==", "bodyText": "This API seems a bit funky - Any reason why getReplication doesn't return an Enum like ReplicationType or something? Is it True if it's set else null?\nAlso, we should probably throw an exception in the case it's neither.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366486863", "createdAt": "2020-01-14T17:57:39Z", "author": {"login": "kurtisvg"}, "path": "secretmanager/src/main/java/com/example/GetSecret.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+// [START secretmanager_get_secret]\n+import com.google.cloud.secretmanager.v1beta1.GetSecretRequest;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretName;\n+import java.io.IOException;\n+\n+public class GetSecret {\n+\n+  // Get an existing secret.\n+  public Secret getSecret(String projectId, String secretId) throws IOException {\n+    // Create a Secret Manager client with cleanup.\n+    try (SecretManagerServiceClient client = SecretManagerServiceClient.create()) {\n+      // Build the name.\n+      SecretName name = SecretName.of(projectId, secretId);\n+\n+      // Create the request.\n+      GetSecretRequest request = GetSecretRequest.newBuilder().setName(name.toString()).build();\n+\n+      // Create the secret.\n+      Secret secret = client.getSecret(request);\n+\n+      // Get the replication policy.\n+      String replication = \"\";\n+      if (secret.getReplication().getAutomatic() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6425fe1ad5aad4cd6384a68a9ec03b230476b616"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ4ODY5OQ==", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  ListSecretVersionsPagedResponse iterator = client.listSecretVersions(request);\n          \n          \n            \n                  ListSecretVersionsPagedResponse pagedResonse = client.listSecretVersions(request);", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366488699", "createdAt": "2020-01-14T18:01:23Z", "author": {"login": "kurtisvg"}, "path": "secretmanager/src/main/java/com/example/ListSecretVersions.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+// [START secretmanager_list_secret_versions]\n+import com.google.cloud.secretmanager.v1beta1.ListSecretVersionsRequest;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretVersionsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretName;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersion;\n+import java.io.IOException;\n+\n+public class ListSecretVersions {\n+\n+  // List all secret versions for a secret.\n+  public void listSecretVersions(String projectId, String secretId) throws IOException {\n+    // Create a Secret Manager client with cleanup.\n+    try (SecretManagerServiceClient client = SecretManagerServiceClient.create()) {\n+      // Build the parent name.\n+      SecretName parent = SecretName.of(projectId, secretId);\n+\n+      // Create the request.\n+      ListSecretVersionsRequest request =\n+          ListSecretVersionsRequest.newBuilder().setParent(parent.toString()).build();\n+\n+      // Get all versions, paginated.\n+      ListSecretVersionsPagedResponse iterator = client.listSecretVersions(request);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6425fe1ad5aad4cd6384a68a9ec03b230476b616"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ4ODkzOQ==", "bodyText": "Does this iterate all versions, or just the versions in this page?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366488939", "createdAt": "2020-01-14T18:01:56Z", "author": {"login": "kurtisvg"}, "path": "secretmanager/src/main/java/com/example/ListSecretVersions.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+// [START secretmanager_list_secret_versions]\n+import com.google.cloud.secretmanager.v1beta1.ListSecretVersionsRequest;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretVersionsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretName;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersion;\n+import java.io.IOException;\n+\n+public class ListSecretVersions {\n+\n+  // List all secret versions for a secret.\n+  public void listSecretVersions(String projectId, String secretId) throws IOException {\n+    // Create a Secret Manager client with cleanup.\n+    try (SecretManagerServiceClient client = SecretManagerServiceClient.create()) {\n+      // Build the parent name.\n+      SecretName parent = SecretName.of(projectId, secretId);\n+\n+      // Create the request.\n+      ListSecretVersionsRequest request =\n+          ListSecretVersionsRequest.newBuilder().setParent(parent.toString()).build();\n+\n+      // Get all versions, paginated.\n+      ListSecretVersionsPagedResponse iterator = client.listSecretVersions(request);\n+\n+      // List all versions and their state.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6425fe1ad5aad4cd6384a68a9ec03b230476b616"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ5MDIwOA==", "bodyText": "Prefer using forEach (this is backwards in the style guide, need to update)\nsomething like:\npagedResponse.iterateAll().forEach(version -> System.out.printf(\"Secret version %s, %s\\n\", version.getName(), version.getState());", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366490208", "createdAt": "2020-01-14T18:04:51Z", "author": {"login": "kurtisvg"}, "path": "secretmanager/src/main/java/com/example/ListSecretVersions.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+// [START secretmanager_list_secret_versions]\n+import com.google.cloud.secretmanager.v1beta1.ListSecretVersionsRequest;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretVersionsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretName;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersion;\n+import java.io.IOException;\n+\n+public class ListSecretVersions {\n+\n+  // List all secret versions for a secret.\n+  public void listSecretVersions(String projectId, String secretId) throws IOException {\n+    // Create a Secret Manager client with cleanup.\n+    try (SecretManagerServiceClient client = SecretManagerServiceClient.create()) {\n+      // Build the parent name.\n+      SecretName parent = SecretName.of(projectId, secretId);\n+\n+      // Create the request.\n+      ListSecretVersionsRequest request =\n+          ListSecretVersionsRequest.newBuilder().setParent(parent.toString()).build();\n+\n+      // Get all versions, paginated.\n+      ListSecretVersionsPagedResponse iterator = client.listSecretVersions(request);\n+\n+      // List all versions and their state.\n+      for (SecretVersion version : iterator.iterateAll()) {\n+        System.out.printf(\"Secret version %s, %s\\n\", version.getName(), version.getState());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6425fe1ad5aad4cd6384a68a9ec03b230476b616"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ5MDgyNw==", "bodyText": "Same elsewhere", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366490827", "createdAt": "2020-01-14T18:06:14Z", "author": {"login": "kurtisvg"}, "path": "secretmanager/src/main/java/com/example/ListSecretVersions.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+// [START secretmanager_list_secret_versions]\n+import com.google.cloud.secretmanager.v1beta1.ListSecretVersionsRequest;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretVersionsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretName;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersion;\n+import java.io.IOException;\n+\n+public class ListSecretVersions {\n+\n+  // List all secret versions for a secret.\n+  public void listSecretVersions(String projectId, String secretId) throws IOException {\n+    // Create a Secret Manager client with cleanup.\n+    try (SecretManagerServiceClient client = SecretManagerServiceClient.create()) {\n+      // Build the parent name.\n+      SecretName parent = SecretName.of(projectId, secretId);\n+\n+      // Create the request.\n+      ListSecretVersionsRequest request =\n+          ListSecretVersionsRequest.newBuilder().setParent(parent.toString()).build();\n+\n+      // Get all versions, paginated.\n+      ListSecretVersionsPagedResponse iterator = client.listSecretVersions(request);\n+\n+      // List all versions and their state.\n+      for (SecretVersion version : iterator.iterateAll()) {\n+        System.out.printf(\"Secret version %s, %s\\n\", version.getName(), version.getState());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ5MDIwOA=="}, "originalCommit": {"oid": "6425fe1ad5aad4cd6384a68a9ec03b230476b616"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ5MDk2NA==", "bodyText": "same elsewhere", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366490964", "createdAt": "2020-01-14T18:06:34Z", "author": {"login": "kurtisvg"}, "path": "secretmanager/src/main/java/com/example/AccessSecretVersion.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+// [START secretmanager_access_secret_version]\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionRequest;\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+import java.io.IOException;\n+\n+public class AccessSecretVersion {\n+\n+  // Access the payload for the given secret version if one exists. The version\n+  // can be a version number as a string (e.g. \"5\") or an alias (e.g. \"latest\").\n+  public AccessSecretVersionResponse accessSecretVersion(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ3NzEwNQ=="}, "originalCommit": {"oid": "6425fe1ad5aad4cd6384a68a9ec03b230476b616"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ5MTAwNw==", "bodyText": "same elsewhere", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366491007", "createdAt": "2020-01-14T18:06:40Z", "author": {"login": "kurtisvg"}, "path": "secretmanager/src/main/java/com/example/AccessSecretVersion.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+// [START secretmanager_access_secret_version]\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionRequest;\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+import java.io.IOException;\n+\n+public class AccessSecretVersion {\n+\n+  // Access the payload for the given secret version if one exists. The version\n+  // can be a version number as a string (e.g. \"5\") or an alias (e.g. \"latest\").\n+  public AccessSecretVersionResponse accessSecretVersion(\n+      String projectId, String secretId, String versionId) throws IOException {\n+    // Create a Secret Manager client with cleanup.\n+    try (SecretManagerServiceClient client = SecretManagerServiceClient.create()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ3NTcyNg=="}, "originalCommit": {"oid": "6425fe1ad5aad4cd6384a68a9ec03b230476b616"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ5MzI3Nw==", "bodyText": "We have a strong preference to not having CLIs in snippets (most java developers use an IDE, and prefer copy/pasting/running from that) . If you feel strongly about keeping it, use main instead of an overloaded function (else add an overloaded function, as mentioned above).", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366493277", "createdAt": "2020-01-14T18:11:32Z", "author": {"login": "kurtisvg"}, "path": "secretmanager/src/main/java/com/example/Quickstart.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+// [START secretmanager_quickstart]\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionRequest;\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.AddSecretVersionRequest;\n+import com.google.cloud.secretmanager.v1beta1.CreateSecretRequest;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Replication;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretPayload;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersion;\n+import com.google.protobuf.ByteString;\n+\n+public class Quickstart {\n+\n+  public static void main(String... args) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6425fe1ad5aad4cd6384a68a9ec03b230476b616"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ5Mzc2NQ==", "bodyText": "As I mentioned above, strong preference to not including CLI for maintainability reasons.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366493765", "createdAt": "2020-01-14T18:12:41Z", "author": {"login": "kurtisvg"}, "path": "secretmanager/src/main/java/com/example/Snippets.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+import java.io.IOException;\n+import org.kohsuke.args4j.Argument;\n+import org.kohsuke.args4j.CmdLineException;\n+import org.kohsuke.args4j.CmdLineParser;\n+import org.kohsuke.args4j.Option;\n+import org.kohsuke.args4j.spi.SubCommand;\n+import org.kohsuke.args4j.spi.SubCommandHandler;\n+import org.kohsuke.args4j.spi.SubCommands;\n+\n+public class Snippets {\n+  public static void main(String... args) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6425fe1ad5aad4cd6384a68a9ec03b230476b616"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ5NDUzMA==", "bodyText": "Looks like we are asserting this to be false above - should prevent this scenario from happening?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366494530", "createdAt": "2020-01-14T18:14:26Z", "author": {"login": "kurtisvg"}, "path": "secretmanager/src/test/java/com/example/QuickstartIT.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.secretmanager.v1beta1.DeleteSecretRequest;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretName;\n+import com.google.common.base.Strings;\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.util.UUID;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/** Integration (system) tests for {@link Quickstart}. */\n+@RunWith(JUnit4.class)\n+public class QuickstartIT {\n+\n+  private static final String PROJECT_ID = System.getenv(\"GOOGLE_CLOUD_PROJECT\");\n+  private static final String SECRET_ID = \"java-quickstart-\" + UUID.randomUUID().toString();\n+\n+  @BeforeClass\n+  public static void beforeAll() throws Exception {\n+    Assert.assertFalse(\"missing GOOGLE_CLOUD_PROJECT\", Strings.isNullOrEmpty(PROJECT_ID));\n+  }\n+\n+  @AfterClass\n+  public static void afterAll() throws Exception {\n+    // Avoid running cleanup if project id was not given. This prevents an\n+    // obtuse error from appearing in test output when the user forgets to set\n+    // GOOGLE_CLOUD_PROJECT.\n+    if (Strings.isNullOrEmpty(PROJECT_ID)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6425fe1ad5aad4cd6384a68a9ec03b230476b616"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyOTkyMjk3", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#pullrequestreview-342992297", "createdAt": "2020-01-15T05:15:26Z", "commit": {"oid": "4bf71c5976fd18cd639d9cc854ec65215b0c24cf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwNToxNToyNlrOFdthgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwNToxOTozN1rOFdtkTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY5ODg4MQ==", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    throw new IOException(\"Unknown replication type\");\n          \n          \n            \n                    throw new IllegalStateException(\"Unknown replication type\");", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366698881", "createdAt": "2020-01-15T05:15:26Z", "author": {"login": "kurtisvg"}, "path": "secretmanager/src/main/java/com/example/GetSecret.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+// [START secretmanager_get_secret]\n+import com.google.cloud.secretmanager.v1beta1.GetSecretRequest;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretName;\n+import java.io.IOException;\n+\n+public class GetSecret {\n+\n+  public void getSecret() throws IOException {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"your-project-id\";\n+    String secretId = \"your-secret-id\";\n+    getSecret(projectId, secretId);\n+  }\n+\n+  // Get an existing secret.\n+  public void getSecret(String projectId, String secretId) throws IOException {\n+    // Initialize client that will be used to send requests. This client only needs to be created\n+    // once, and can be reused for multiple requests. After completing all of your requests, call\n+    // the \"close\" method on the client to safely clean up any remaining background resources.\n+    try (SecretManagerServiceClient client = SecretManagerServiceClient.create()) {\n+      // Build the name.\n+      SecretName name = SecretName.of(projectId, secretId);\n+\n+      // Create the request.\n+      GetSecretRequest request = GetSecretRequest.newBuilder().setName(name.toString()).build();\n+\n+      // Create the secret.\n+      Secret secret = client.getSecret(request);\n+\n+      // Get the replication policy.\n+      String replication = \"\";\n+      if (secret.getReplication().getAutomatic() != null) {\n+        replication = \"AUTOMATIC\";\n+      } else if (secret.getReplication().getUserManaged() != null) {\n+        replication = \"MANAGED\";\n+      } else {\n+        throw new IOException(\"Unknown replication type\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bf71c5976fd18cd639d9cc854ec65215b0c24cf"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY5OTIyMA==", "bodyText": "I'm not sure - that's why I asked. It would be good to clarify in the comment. The previous comment says paginated, which makes me think it will be a page, but the next comment says \"all versions\" so I'm left confused.\nThe forEach change doesn't change the behavior, just more idiomatic to use lambdas in Java 8.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366699220", "createdAt": "2020-01-15T05:17:19Z", "author": {"login": "kurtisvg"}, "path": "secretmanager/src/main/java/com/example/ListSecretVersions.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+// [START secretmanager_list_secret_versions]\n+import com.google.cloud.secretmanager.v1beta1.ListSecretVersionsRequest;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretVersionsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretName;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersion;\n+import java.io.IOException;\n+\n+public class ListSecretVersions {\n+\n+  // List all secret versions for a secret.\n+  public void listSecretVersions(String projectId, String secretId) throws IOException {\n+    // Create a Secret Manager client with cleanup.\n+    try (SecretManagerServiceClient client = SecretManagerServiceClient.create()) {\n+      // Build the parent name.\n+      SecretName parent = SecretName.of(projectId, secretId);\n+\n+      // Create the request.\n+      ListSecretVersionsRequest request =\n+          ListSecretVersionsRequest.newBuilder().setParent(parent.toString()).build();\n+\n+      // Get all versions, paginated.\n+      ListSecretVersionsPagedResponse iterator = client.listSecretVersions(request);\n+\n+      // List all versions and their state.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ4ODkzOQ=="}, "originalCommit": {"oid": "6425fe1ad5aad4cd6384a68a9ec03b230476b616"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY5OTU5Nw==", "bodyText": "This should have an overloaded function with a TODO and easy change projectId and secretId.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366699597", "createdAt": "2020-01-15T05:19:37Z", "author": {"login": "kurtisvg"}, "path": "secretmanager/src/main/java/com/example/Quickstart.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+// [START secretmanager_quickstart]\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionRequest;\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.AddSecretVersionRequest;\n+import com.google.cloud.secretmanager.v1beta1.CreateSecretRequest;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Replication;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretPayload;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersion;\n+import com.google.protobuf.ByteString;\n+\n+public class Quickstart {\n+\n+  public void quickstart(String... args) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bf71c5976fd18cd639d9cc854ec65215b0c24cf"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f87dbd000fc2fcc4c1b8b3bb6a25c4c058cc09b5", "author": {"user": {"login": "sethvargo", "name": "Seth Vargo"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/f87dbd000fc2fcc4c1b8b3bb6a25c4c058cc09b5", "committedDate": "2020-01-15T07:21:10Z", "message": "Ignore .java-version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c9705888cfcd5a50113a9ac4811f47cce1827ea", "author": {"user": {"login": "sethvargo", "name": "Seth Vargo"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/4c9705888cfcd5a50113a9ac4811f47cce1827ea", "committedDate": "2020-01-15T07:21:10Z", "message": "Add secretmanager samples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3295cb8bbbb9c0f546c04be41588cf8fea853f6a", "author": {"user": {"login": "sethvargo", "name": "Seth Vargo"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/3295cb8bbbb9c0f546c04be41588cf8fea853f6a", "committedDate": "2020-01-15T07:21:10Z", "message": "Update client documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ccc4d1afa94fd571fc55e9417aa78bea03cdfa8", "author": {"user": {"login": "sethvargo", "name": "Seth Vargo"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/7ccc4d1afa94fd571fc55e9417aa78bea03cdfa8", "committedDate": "2020-01-15T07:21:10Z", "message": "Throw an exception if replication is unknown"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86b24ea82dbca32d7a2eaada44e142f8b5beee67", "author": {"user": {"login": "sethvargo", "name": "Seth Vargo"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/86b24ea82dbca32d7a2eaada44e142f8b5beee67", "committedDate": "2020-01-15T07:21:10Z", "message": "Rename to pagedResponse"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95f76658efbf52042391bd95ab4e1947061ace42", "author": {"user": {"login": "sethvargo", "name": "Seth Vargo"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/95f76658efbf52042391bd95ab4e1947061ace42", "committedDate": "2020-01-15T07:21:10Z", "message": "Use forEach in iterators"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e375ce6bf2f82ce4f15e37e33f479a10e270b2e", "author": {"user": {"login": "sethvargo", "name": "Seth Vargo"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/7e375ce6bf2f82ce4f15e37e33f479a10e270b2e", "committedDate": "2020-01-15T07:21:10Z", "message": "Remove CLI examples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec99d37bb3d7fe86540f9d30e8d7af950ffb594f", "author": {"user": {"login": "sethvargo", "name": "Seth Vargo"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/ec99d37bb3d7fe86540f9d30e8d7af950ffb594f", "committedDate": "2020-01-15T07:21:10Z", "message": "Less nesting in builders"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7bc41650538fef224ccb80d8d805f962e054cf42", "author": {"user": {"login": "sethvargo", "name": "Seth Vargo"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/7bc41650538fef224ccb80d8d805f962e054cf42", "committedDate": "2020-01-15T07:21:11Z", "message": "Make assert clearer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cda1ec26696965e834111a520321e617be6e3b3", "author": {"user": {"login": "sethvargo", "name": "Seth Vargo"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/8cda1ec26696965e834111a520321e617be6e3b3", "committedDate": "2020-01-15T07:21:11Z", "message": "Add overloaded TODO functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d2a565626cb3f56951d16f15ab5dd67cdb7288f", "author": {"user": {"login": "sethvargo", "name": "Seth Vargo"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/6d2a565626cb3f56951d16f15ab5dd67cdb7288f", "committedDate": "2020-01-15T07:21:11Z", "message": "Use IllegalStateException instead"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "137ee0ef6f7d8df8632390e6902ed48d079dd5c9", "author": {"user": {"login": "sethvargo", "name": "Seth Vargo"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/137ee0ef6f7d8df8632390e6902ed48d079dd5c9", "committedDate": "2020-01-15T07:21:11Z", "message": "Fix list comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "402de952e3f36da8dcabf60f9abb17c784c26d3d", "author": {"user": {"login": "sethvargo", "name": "Seth Vargo"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/402de952e3f36da8dcabf60f9abb17c784c26d3d", "committedDate": "2020-01-15T07:21:11Z", "message": "Overload quickstart"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMDI0MTA1", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#pullrequestreview-343024105", "createdAt": "2020-01-15T07:21:05Z", "commit": {"oid": "4bf71c5976fd18cd639d9cc854ec65215b0c24cf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwNzoyMTowNVrOFdvGRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwNzoyMTowNVrOFdvGRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjcyNDY3OQ==", "bodyText": "Verified it's all pages. Updated.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#discussion_r366724679", "createdAt": "2020-01-15T07:21:05Z", "author": {"login": "sethvargo"}, "path": "secretmanager/src/main/java/com/example/ListSecretVersions.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+// [START secretmanager_list_secret_versions]\n+import com.google.cloud.secretmanager.v1beta1.ListSecretVersionsRequest;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretVersionsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretName;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersion;\n+import java.io.IOException;\n+\n+public class ListSecretVersions {\n+\n+  // List all secret versions for a secret.\n+  public void listSecretVersions(String projectId, String secretId) throws IOException {\n+    // Create a Secret Manager client with cleanup.\n+    try (SecretManagerServiceClient client = SecretManagerServiceClient.create()) {\n+      // Build the parent name.\n+      SecretName parent = SecretName.of(projectId, secretId);\n+\n+      // Create the request.\n+      ListSecretVersionsRequest request =\n+          ListSecretVersionsRequest.newBuilder().setParent(parent.toString()).build();\n+\n+      // Get all versions, paginated.\n+      ListSecretVersionsPagedResponse iterator = client.listSecretVersions(request);\n+\n+      // List all versions and their state.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ4ODkzOQ=="}, "originalCommit": {"oid": "6425fe1ad5aad4cd6384a68a9ec03b230476b616"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMzg0NDY2", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1948#pullrequestreview-343384466", "createdAt": "2020-01-15T17:15:17Z", "commit": {"oid": "402de952e3f36da8dcabf60f9abb17c784c26d3d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 621, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}