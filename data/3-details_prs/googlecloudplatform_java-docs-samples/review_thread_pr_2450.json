{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMzI5NzI1", "number": 2450, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMzowODoxNVrODrNCXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMjoxMzoyNlrODr2ofw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NjI4OTU2OnYy", "diffSide": "RIGHT", "path": "functions/snippets/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMzowODoxNVrOF7aIiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjowMjowNlrOF7wDGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgzODQ3Mw==", "bodyText": "MakeUpperCaseRTDB implies Realtime Database (RTDB) but I see Firestore here.  Not sure if just the comment is wrong or something else needs to change.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2450#discussion_r397838473", "createdAt": "2020-03-25T13:08:15Z", "author": {"login": "samtstern"}, "path": "functions/snippets/pom.xml", "diffHunk": "@@ -52,6 +52,13 @@\n       <version>3.4.2</version>\n     </dependency>\n \n+    <!-- Required for com.example.functions.MakeUpperCaseRTDB -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2822a7fcb7d5977c763efa0366830cbe16f9d25"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE5NzUzMQ==", "bodyText": "Ah - this is out-of-date. Fixed.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2450#discussion_r398197531", "createdAt": "2020-03-25T22:02:06Z", "author": {"login": "ace-n"}, "path": "functions/snippets/pom.xml", "diffHunk": "@@ -52,6 +52,13 @@\n       <version>3.4.2</version>\n     </dependency>\n \n+    <!-- Required for com.example.functions.MakeUpperCaseRTDB -->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgzODQ3Mw=="}, "originalCommit": {"oid": "d2822a7fcb7d5977c763efa0366830cbe16f9d25"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NjI5MjkzOnYy", "diffSide": "RIGHT", "path": "functions/snippets/src/main/java/com/example/functions/FirebaseAnalytics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMzowOTowNVrOF7aKhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMzowOTowNVrOF7aKhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgzODk4MQ==", "bodyText": "I think this START tag has the wrong name.  Maybe s/auth/analytics?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2450#discussion_r397838981", "createdAt": "2020-03-25T13:09:05Z", "author": {"login": "samtstern"}, "path": "functions/snippets/src/main/java/com/example/functions/FirebaseAnalytics.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_firebase_auth]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2822a7fcb7d5977c763efa0366830cbe16f9d25"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NjI5NTUzOnYy", "diffSide": "RIGHT", "path": "functions/snippets/src/main/java/com/example/functions/FirebaseRemoteConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMzowOTo0NVrOF7aMGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMzowOTo0NVrOF7aMGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgzOTM4Ng==", "bodyText": "Snippet name says rtdb but example shows remote config.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2450#discussion_r397839386", "createdAt": "2020-03-25T13:09:45Z", "author": {"login": "samtstern"}, "path": "functions/snippets/src/main/java/com/example/functions/FirebaseRemoteConfig.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_firebase_rtdb]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2822a7fcb7d5977c763efa0366830cbe16f9d25"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODUzODU3OnYy", "diffSide": "RIGHT", "path": "functions/snippets/src/main/java/com/example/functions/FirebaseFirestoreReactive.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjoxMjoxNlrOF7wUdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjoyMTowNFrOF7wjTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwMTk3Mg==", "bodyText": "Why do you bother with this?  Don't bother catching or even the try if you aren't going to do something useful with it.  It will automatically propagate to the parent.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2450#discussion_r398201972", "createdAt": "2020-03-25T22:12:16Z", "author": {"login": "lesv"}, "path": "functions/snippets/src/main/java/com/example/functions/FirebaseFirestoreReactive.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_firebase_reactive]\n+import com.google.api.client.json.Json;\n+import com.google.cloud.firestore.DocumentReference;\n+import com.google.cloud.firestore.Firestore;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.cloud.firestore.SetOptions;\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.functions.RawBackgroundFunction;\n+import com.google.cloud.logging.LoggingHandler;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Logger;\n+import org.apache.commons.lang3.concurrent.ConcurrentException;\n+\n+public class FirebaseFirestoreReactive implements RawBackgroundFunction {\n+\n+  // Use GSON (https://github.com/google/gson) to parse JSON content.\n+  private Gson gsonParser = new Gson();\n+\n+  private static final Logger LOGGER = Logger.getLogger(FirebaseFirestoreReactive.class.getName());\n+  private static final Firestore firestore = FirestoreOptions.getDefaultInstance().getService();\n+\n+  @Override\n+  public void accept(String json, Context context) throws RuntimeException {\n+    // Get the recently-written value\n+    JsonObject body = gsonParser.fromJson(json, JsonObject.class);\n+    JsonObject fields = body.getAsJsonObject(\"value\").getAsJsonObject(\"fields\");\n+    if (!fields.has(\"original\")) {\n+      return;\n+    }\n+\n+    // Convert recently-written value to ALL CAPS\n+    String currentValue = fields.getAsJsonObject(\"original\").get(\"stringValue\").getAsString();\n+    String newValue = currentValue.toUpperCase();\n+\n+    // Update Firestore DB with ALL CAPS value\n+    Map<String, String> newFields = new HashMap<>();\n+    newFields.put(\"original\", newValue);\n+\n+    String affectedDoc = context.resource().split(\"/documents/\")[1].replace(\"\\\"\", \"\");\n+\n+    LOGGER.info(String.format(\"Replacing value: %s --> %s\", currentValue, newValue));\n+    try {\n+      firestore.document(affectedDoc).set(newFields, SetOptions.merge()).get();\n+    } catch (Exception e) {\n+      throw new RuntimeException(e);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89d823030a4844226dc40420cc662889eb429aa9"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwNTc3Mg==", "bodyText": "The .get() method call throws InterruptedException and ConcurrentException, but the accept method can only throw RuntimeException - so we need to cast the former two to the latter.\nI'll change this handler to be more specific, though (and only catch the two exception types I mentioned above).", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2450#discussion_r398205772", "createdAt": "2020-03-25T22:21:04Z", "author": {"login": "ace-n"}, "path": "functions/snippets/src/main/java/com/example/functions/FirebaseFirestoreReactive.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_firebase_reactive]\n+import com.google.api.client.json.Json;\n+import com.google.cloud.firestore.DocumentReference;\n+import com.google.cloud.firestore.Firestore;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.cloud.firestore.SetOptions;\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.functions.RawBackgroundFunction;\n+import com.google.cloud.logging.LoggingHandler;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Logger;\n+import org.apache.commons.lang3.concurrent.ConcurrentException;\n+\n+public class FirebaseFirestoreReactive implements RawBackgroundFunction {\n+\n+  // Use GSON (https://github.com/google/gson) to parse JSON content.\n+  private Gson gsonParser = new Gson();\n+\n+  private static final Logger LOGGER = Logger.getLogger(FirebaseFirestoreReactive.class.getName());\n+  private static final Firestore firestore = FirestoreOptions.getDefaultInstance().getService();\n+\n+  @Override\n+  public void accept(String json, Context context) throws RuntimeException {\n+    // Get the recently-written value\n+    JsonObject body = gsonParser.fromJson(json, JsonObject.class);\n+    JsonObject fields = body.getAsJsonObject(\"value\").getAsJsonObject(\"fields\");\n+    if (!fields.has(\"original\")) {\n+      return;\n+    }\n+\n+    // Convert recently-written value to ALL CAPS\n+    String currentValue = fields.getAsJsonObject(\"original\").get(\"stringValue\").getAsString();\n+    String newValue = currentValue.toUpperCase();\n+\n+    // Update Firestore DB with ALL CAPS value\n+    Map<String, String> newFields = new HashMap<>();\n+    newFields.put(\"original\", newValue);\n+\n+    String affectedDoc = context.resource().split(\"/documents/\")[1].replace(\"\\\"\", \"\");\n+\n+    LOGGER.info(String.format(\"Replacing value: %s --> %s\", currentValue, newValue));\n+    try {\n+      firestore.document(affectedDoc).set(newFields, SetOptions.merge()).get();\n+    } catch (Exception e) {\n+      throw new RuntimeException(e);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwMTk3Mg=="}, "originalCommit": {"oid": "89d823030a4844226dc40420cc662889eb429aa9"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzEwMTQ5OnYy", "diffSide": "RIGHT", "path": "functions/snippets/src/main/java/com/example/functions/FirebaseFirestoreReactive.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMjoxMjoyMVrOF8cYoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMjoxNTo0NVrOF8cejw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkyMzkzNg==", "bodyText": "Sortof ok, but better to just comment that these might occur and let them propoage.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2450#discussion_r398923936", "createdAt": "2020-03-26T22:12:21Z", "author": {"login": "lesv"}, "path": "functions/snippets/src/main/java/com/example/functions/FirebaseFirestoreReactive.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_firebase_reactive]\n+\n+import com.google.cloud.firestore.Firestore;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.cloud.firestore.SetOptions;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.functions.RawBackgroundFunction;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Logger;\n+\n+public class FirebaseFirestoreReactive implements RawBackgroundFunction {\n+\n+  // Use GSON (https://github.com/google/gson) to parse JSON content.\n+  private Gson gsonParser = new Gson();\n+\n+  private static final Logger LOGGER = Logger.getLogger(FirebaseFirestoreReactive.class.getName());\n+  private static final Firestore firestore = FirestoreOptions.getDefaultInstance().getService();\n+\n+  @Override\n+  public void accept(String json, Context context) throws RuntimeException {\n+    // Get the recently-written value\n+    JsonObject body = gsonParser.fromJson(json, JsonObject.class);\n+    JsonObject fields = body.getAsJsonObject(\"value\").getAsJsonObject(\"fields\");\n+    if (!fields.has(\"original\")) {\n+      return;\n+    }\n+\n+    // Convert recently-written value to ALL CAPS\n+    String currentValue = fields.getAsJsonObject(\"original\").get(\"stringValue\").getAsString();\n+    String newValue = currentValue.toUpperCase();\n+\n+    // Update Firestore DB with ALL CAPS value\n+    Map<String, String> newFields = new HashMap<>();\n+    newFields.put(\"original\", newValue);\n+\n+    String affectedDoc = context.resource().split(\"/documents/\")[1].replace(\"\\\"\", \"\");\n+\n+    LOGGER.info(String.format(\"Replacing value: %s --> %s\", currentValue, newValue));\n+    try {\n+      firestore.document(affectedDoc).set(newFields, SetOptions.merge()).get();\n+    } catch (ExecutionException | InterruptedException e) {\n+      throw new RuntimeException(e);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f9d0a74a325fa2979b84925f8445ab19b8e56d2"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkyNTQ1NQ==", "bodyText": "That causes a compiler error - so we have to cast the exception type (or modify the Functions Framework itself).", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2450#discussion_r398925455", "createdAt": "2020-03-26T22:15:45Z", "author": {"login": "ace-n"}, "path": "functions/snippets/src/main/java/com/example/functions/FirebaseFirestoreReactive.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_firebase_reactive]\n+\n+import com.google.cloud.firestore.Firestore;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.cloud.firestore.SetOptions;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.functions.RawBackgroundFunction;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Logger;\n+\n+public class FirebaseFirestoreReactive implements RawBackgroundFunction {\n+\n+  // Use GSON (https://github.com/google/gson) to parse JSON content.\n+  private Gson gsonParser = new Gson();\n+\n+  private static final Logger LOGGER = Logger.getLogger(FirebaseFirestoreReactive.class.getName());\n+  private static final Firestore firestore = FirestoreOptions.getDefaultInstance().getService();\n+\n+  @Override\n+  public void accept(String json, Context context) throws RuntimeException {\n+    // Get the recently-written value\n+    JsonObject body = gsonParser.fromJson(json, JsonObject.class);\n+    JsonObject fields = body.getAsJsonObject(\"value\").getAsJsonObject(\"fields\");\n+    if (!fields.has(\"original\")) {\n+      return;\n+    }\n+\n+    // Convert recently-written value to ALL CAPS\n+    String currentValue = fields.getAsJsonObject(\"original\").get(\"stringValue\").getAsString();\n+    String newValue = currentValue.toUpperCase();\n+\n+    // Update Firestore DB with ALL CAPS value\n+    Map<String, String> newFields = new HashMap<>();\n+    newFields.put(\"original\", newValue);\n+\n+    String affectedDoc = context.resource().split(\"/documents/\")[1].replace(\"\\\"\", \"\");\n+\n+    LOGGER.info(String.format(\"Replacing value: %s --> %s\", currentValue, newValue));\n+    try {\n+      firestore.document(affectedDoc).set(newFields, SetOptions.merge()).get();\n+    } catch (ExecutionException | InterruptedException e) {\n+      throw new RuntimeException(e);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkyMzkzNg=="}, "originalCommit": {"oid": "9f9d0a74a325fa2979b84925f8445ab19b8e56d2"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzEwMzEwOnYy", "diffSide": "RIGHT", "path": "functions/snippets/src/main/java/com/example/functions/FirebaseFirestoreReactive.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMjoxMjo1NVrOF8cZfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMjo1NjoyNVrOF8daDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkyNDE1OA==", "bodyText": "Normally, you'd check between these, or use an operator that checks / skips if null.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2450#discussion_r398924158", "createdAt": "2020-03-26T22:12:55Z", "author": {"login": "lesv"}, "path": "functions/snippets/src/main/java/com/example/functions/FirebaseFirestoreReactive.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_firebase_reactive]\n+\n+import com.google.cloud.firestore.Firestore;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.cloud.firestore.SetOptions;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.functions.RawBackgroundFunction;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Logger;\n+\n+public class FirebaseFirestoreReactive implements RawBackgroundFunction {\n+\n+  // Use GSON (https://github.com/google/gson) to parse JSON content.\n+  private Gson gsonParser = new Gson();\n+\n+  private static final Logger LOGGER = Logger.getLogger(FirebaseFirestoreReactive.class.getName());\n+  private static final Firestore firestore = FirestoreOptions.getDefaultInstance().getService();\n+\n+  @Override\n+  public void accept(String json, Context context) throws RuntimeException {\n+    // Get the recently-written value\n+    JsonObject body = gsonParser.fromJson(json, JsonObject.class);\n+    JsonObject fields = body.getAsJsonObject(\"value\").getAsJsonObject(\"fields\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f9d0a74a325fa2979b84925f8445ab19b8e56d2"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0MDY4Ng==", "bodyText": "Fixed, PTAL.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2450#discussion_r398940686", "createdAt": "2020-03-26T22:56:25Z", "author": {"login": "ace-n"}, "path": "functions/snippets/src/main/java/com/example/functions/FirebaseFirestoreReactive.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_firebase_reactive]\n+\n+import com.google.cloud.firestore.Firestore;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.cloud.firestore.SetOptions;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.functions.RawBackgroundFunction;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Logger;\n+\n+public class FirebaseFirestoreReactive implements RawBackgroundFunction {\n+\n+  // Use GSON (https://github.com/google/gson) to parse JSON content.\n+  private Gson gsonParser = new Gson();\n+\n+  private static final Logger LOGGER = Logger.getLogger(FirebaseFirestoreReactive.class.getName());\n+  private static final Firestore firestore = FirestoreOptions.getDefaultInstance().getService();\n+\n+  @Override\n+  public void accept(String json, Context context) throws RuntimeException {\n+    // Get the recently-written value\n+    JsonObject body = gsonParser.fromJson(json, JsonObject.class);\n+    JsonObject fields = body.getAsJsonObject(\"value\").getAsJsonObject(\"fields\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkyNDE1OA=="}, "originalCommit": {"oid": "9f9d0a74a325fa2979b84925f8445ab19b8e56d2"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzEwNDYzOnYy", "diffSide": "RIGHT", "path": "functions/snippets/src/main/java/com/example/functions/FirebaseFirestoreReactive.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMjoxMzoyNlrOF8caaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMjo1NjoyOVrOF8daKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkyNDM5NQ==", "bodyText": "Same issue, if 'original' isn't present, then you'll get an error getting 'stringValue'", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2450#discussion_r398924395", "createdAt": "2020-03-26T22:13:26Z", "author": {"login": "lesv"}, "path": "functions/snippets/src/main/java/com/example/functions/FirebaseFirestoreReactive.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_firebase_reactive]\n+\n+import com.google.cloud.firestore.Firestore;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.cloud.firestore.SetOptions;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.functions.RawBackgroundFunction;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Logger;\n+\n+public class FirebaseFirestoreReactive implements RawBackgroundFunction {\n+\n+  // Use GSON (https://github.com/google/gson) to parse JSON content.\n+  private Gson gsonParser = new Gson();\n+\n+  private static final Logger LOGGER = Logger.getLogger(FirebaseFirestoreReactive.class.getName());\n+  private static final Firestore firestore = FirestoreOptions.getDefaultInstance().getService();\n+\n+  @Override\n+  public void accept(String json, Context context) throws RuntimeException {\n+    // Get the recently-written value\n+    JsonObject body = gsonParser.fromJson(json, JsonObject.class);\n+    JsonObject fields = body.getAsJsonObject(\"value\").getAsJsonObject(\"fields\");\n+    if (!fields.has(\"original\")) {\n+      return;\n+    }\n+\n+    // Convert recently-written value to ALL CAPS\n+    String currentValue = fields.getAsJsonObject(\"original\").get(\"stringValue\").getAsString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f9d0a74a325fa2979b84925f8445ab19b8e56d2"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0MDcxMg==", "bodyText": "Fixed, PTAL.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2450#discussion_r398940712", "createdAt": "2020-03-26T22:56:29Z", "author": {"login": "ace-n"}, "path": "functions/snippets/src/main/java/com/example/functions/FirebaseFirestoreReactive.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_firebase_reactive]\n+\n+import com.google.cloud.firestore.Firestore;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.cloud.firestore.SetOptions;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.functions.RawBackgroundFunction;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Logger;\n+\n+public class FirebaseFirestoreReactive implements RawBackgroundFunction {\n+\n+  // Use GSON (https://github.com/google/gson) to parse JSON content.\n+  private Gson gsonParser = new Gson();\n+\n+  private static final Logger LOGGER = Logger.getLogger(FirebaseFirestoreReactive.class.getName());\n+  private static final Firestore firestore = FirestoreOptions.getDefaultInstance().getService();\n+\n+  @Override\n+  public void accept(String json, Context context) throws RuntimeException {\n+    // Get the recently-written value\n+    JsonObject body = gsonParser.fromJson(json, JsonObject.class);\n+    JsonObject fields = body.getAsJsonObject(\"value\").getAsJsonObject(\"fields\");\n+    if (!fields.has(\"original\")) {\n+      return;\n+    }\n+\n+    // Convert recently-written value to ALL CAPS\n+    String currentValue = fields.getAsJsonObject(\"original\").get(\"stringValue\").getAsString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkyNDM5NQ=="}, "originalCommit": {"oid": "9f9d0a74a325fa2979b84925f8445ab19b8e56d2"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1013, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}