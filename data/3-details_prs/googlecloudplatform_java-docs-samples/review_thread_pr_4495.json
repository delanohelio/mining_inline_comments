{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2NzkyOTM0", "number": 4495, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxNjo1NjoxOVrOFKIKxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwMDoxNTowM1rOFLfeVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTYzOTExOnYy", "diffSide": "RIGHT", "path": ".kokoro/tests/run_tests.sh", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxNjo1NjoxOVrOIMxPlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQyMDowNjowMlrOIM0bgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI2MDYyOA==", "bodyText": "Have you already set this up? If not we can use secret manager instead.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4495#discussion_r550260628", "createdAt": "2020-12-30T16:56:19Z", "author": {"login": "averikitsch"}, "path": ".kokoro/tests/run_tests.sh", "diffHunk": "@@ -78,6 +78,8 @@ if [[ \"$SCRIPT_DEBUG\" != \"true\" ]]; then\n     source \"${KOKORO_GFILE_DIR}/firestore_secrets.txt\"\n     # spellcheck source=src/cts_v4_secrets.txt\n     source \"${KOKORO_GFILE_DIR}/cts_v4_secrets.txt\"\n+    # shellcheck source=src/cloud_sql_secrets.txt\n+    source \"${KOKORO_GFILE_DIR}/cloud_sql_secrets.txt\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d87593f2bcdb5e2296cb5eac0515ddc2bf0018ef"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI4NDc2OQ==", "bodyText": "I have but it's not working, so let's try using Secret Manager instead if I can't figure it out in the next hour or so. I think it's reading in the variables correctly but I'm not sure.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4495#discussion_r550284769", "createdAt": "2020-12-30T18:21:45Z", "author": {"login": "shubha-rajan"}, "path": ".kokoro/tests/run_tests.sh", "diffHunk": "@@ -78,6 +78,8 @@ if [[ \"$SCRIPT_DEBUG\" != \"true\" ]]; then\n     source \"${KOKORO_GFILE_DIR}/firestore_secrets.txt\"\n     # spellcheck source=src/cts_v4_secrets.txt\n     source \"${KOKORO_GFILE_DIR}/cts_v4_secrets.txt\"\n+    # shellcheck source=src/cloud_sql_secrets.txt\n+    source \"${KOKORO_GFILE_DIR}/cloud_sql_secrets.txt\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI2MDYyOA=="}, "originalCommit": {"oid": "d87593f2bcdb5e2296cb5eac0515ddc2bf0018ef"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI5NTg4NA==", "bodyText": "sgtm. Dropping this example if you decided to switch https://github.com/GoogleCloudPlatform/nodejs-docs-samples/blob/master/.kokoro/build-with-run.sh#L92", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4495#discussion_r550295884", "createdAt": "2020-12-30T19:01:13Z", "author": {"login": "averikitsch"}, "path": ".kokoro/tests/run_tests.sh", "diffHunk": "@@ -78,6 +78,8 @@ if [[ \"$SCRIPT_DEBUG\" != \"true\" ]]; then\n     source \"${KOKORO_GFILE_DIR}/firestore_secrets.txt\"\n     # spellcheck source=src/cts_v4_secrets.txt\n     source \"${KOKORO_GFILE_DIR}/cts_v4_secrets.txt\"\n+    # shellcheck source=src/cloud_sql_secrets.txt\n+    source \"${KOKORO_GFILE_DIR}/cloud_sql_secrets.txt\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI2MDYyOA=="}, "originalCommit": {"oid": "d87593f2bcdb5e2296cb5eac0515ddc2bf0018ef"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDMxMjgzMg==", "bodyText": "Got it working using the secrets file in Cloud Devrel Kokoro Resources. I think for now we can keep this setup, but eventually we should start migrating all the secrets to secret manager.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4495#discussion_r550312832", "createdAt": "2020-12-30T20:06:02Z", "author": {"login": "shubha-rajan"}, "path": ".kokoro/tests/run_tests.sh", "diffHunk": "@@ -78,6 +78,8 @@ if [[ \"$SCRIPT_DEBUG\" != \"true\" ]]; then\n     source \"${KOKORO_GFILE_DIR}/firestore_secrets.txt\"\n     # spellcheck source=src/cts_v4_secrets.txt\n     source \"${KOKORO_GFILE_DIR}/cts_v4_secrets.txt\"\n+    # shellcheck source=src/cloud_sql_secrets.txt\n+    source \"${KOKORO_GFILE_DIR}/cloud_sql_secrets.txt\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI2MDYyOA=="}, "originalCommit": {"oid": "d87593f2bcdb5e2296cb5eac0515ddc2bf0018ef"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NDcxOTM0OnYy", "diffSide": "RIGHT", "path": "cloud-sql/mysql/servlet/src/test/java/com/TestIndexServlet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNzozODo1NlrOIOgt2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNzozODo1NlrOIOgt2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA4NzAwMw==", "bodyText": "update year for new files", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4495#discussion_r552087003", "createdAt": "2021-01-05T17:38:56Z", "author": {"login": "averikitsch"}, "path": "cloud-sql/mysql/servlet/src/test/java/com/TestIndexServlet.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2018 Google LLC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25bd4aa0dd53893e5c1e68de9a5dbc072bdd04f0"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NTE3MDYyOnYy", "diffSide": "RIGHT", "path": "cloud-sql/mysql/servlet/src/main/java/com/example/cloudsql/IndexServlet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxOTo1MjoxMVrOIOlD0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxOTo1MjoxMVrOIOlD0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE1ODE2Mg==", "bodyText": "It's probably more idiomatic to return a POJO, or at minimum an array of results.\nWe should be able to avoid using Object for sure.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4495#discussion_r552158162", "createdAt": "2021-01-05T19:52:11Z", "author": {"login": "kurtisvg"}, "path": "cloud-sql/mysql/servlet/src/main/java/com/example/cloudsql/IndexServlet.java", "diffHunk": "@@ -45,12 +47,9 @@\n \n   private static final Logger LOGGER = Logger.getLogger(IndexServlet.class.getName());\n \n-  @Override\n-  public void doGet(HttpServletRequest req, HttpServletResponse resp)\n-      throws IOException, ServletException {\n-    // Extract the pool from the Servlet Context, reusing the one that was created\n-    // in the ContextListener when the application was started\n-    DataSource pool = (DataSource) req.getServletContext().getAttribute(\"my-pool\");\n+  public Map<String, Object> getTemplateData(DataSource pool) throws ServletException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25bd4aa0dd53893e5c1e68de9a5dbc072bdd04f0"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NTg5Njg1OnYy", "diffSide": "RIGHT", "path": "cloud-sql/postgres/servlet/src/test/java/com/TestIndexServlet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwMDowMDoyMlrOIOr-9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwMDowMDoyMlrOIOr-9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI3MTYwNQ==", "bodyText": "Wrong year", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4495#discussion_r552271605", "createdAt": "2021-01-06T00:00:22Z", "author": {"login": "eaball35"}, "path": "cloud-sql/postgres/servlet/src/test/java/com/TestIndexServlet.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2018 Google LLC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25bd4aa0dd53893e5c1e68de9a5dbc072bdd04f0"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NTkxMjUzOnYy", "diffSide": "RIGHT", "path": "cloud-sql/mysql/servlet/src/test/java/com/TestIndexServlet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwMDowODoxOFrOIOsITw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwMDoyNjoyNFrOISawpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI3Mzk5OQ==", "bodyText": "Does this create a table that needs be to cleaned up after tests?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4495#discussion_r552273999", "createdAt": "2021-01-06T00:08:18Z", "author": {"login": "eaball35"}, "path": "cloud-sql/mysql/servlet/src/test/java/com/TestIndexServlet.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2018 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudsql;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import javax.servlet.ServletContext;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.sql.DataSource;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+\n+public class TestIndexServlet {\n+\n+  private static List<String> requiredEnvVars =\n+      Arrays.asList(\"MYSQL_USER\", \"MYSQL_PASS\", \"MYSQL_DB\", \"MYSQL_CONNECTION_NAME\");\n+\n+  private static DataSource pool;\n+\n+  public static void checkEnvVars() {\n+    // Check that required env vars are set\n+    requiredEnvVars.forEach((varName) -> {\n+      assertWithMessage(\n+          String.format(\"Environment variable '%s' must be set to perform these tests.\", varName))\n+          .that(System.getenv(varName)).isNotEmpty();\n+    });\n+  }\n+\n+  private static void createTable(DataSource pool) throws SQLException {\n+    // Safely attempt to create the table schema.\n+    try (Connection conn = pool.getConnection()) {\n+      String stmt =\n+          \"CREATE TABLE IF NOT EXISTS votes ( \"\n+              + \"vote_id SERIAL NOT NULL, time_cast timestamp NOT NULL, candidate CHAR(6) NOT NULL,\"\n+              + \" PRIMARY KEY (vote_id) );\";\n+      try (PreparedStatement createTableStatement = conn.prepareStatement(stmt);) {\n+        createTableStatement.execute();\n+      }\n+    }\n+  }\n+\n+\n+  @BeforeClass\n+  public static void createPool() throws SQLException {\n+    checkEnvVars();\n+    HikariConfig config = new HikariConfig();\n+\n+    config.setJdbcUrl(String.format(\"jdbc:mysql:///%s\", System.getenv(\"MYSQL_DB\")));\n+    config.setUsername(System.getenv(\"MYSQL_USER\")); // e.g. \"root\", \"mysql\"\n+    config.setPassword(System.getenv(\"MYSQL_PASS\")); // e.g. \"my-password\"\n+    config.addDataSourceProperty(\"socketFactory\", \"com.google.cloud.sql.mysql.SocketFactory\");\n+    config.addDataSourceProperty(\"cloudSqlInstance\", System.getenv(\"MYSQL_CONNECTION_NAME\"));\n+\n+    pool = new HikariDataSource(config);\n+    createTable(pool);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25bd4aa0dd53893e5c1e68de9a5dbc072bdd04f0"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjE4MzcxOA==", "bodyText": "added a cleanup function", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4495#discussion_r556183718", "createdAt": "2021-01-13T00:26:24Z", "author": {"login": "shubha-rajan"}, "path": "cloud-sql/mysql/servlet/src/test/java/com/TestIndexServlet.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2018 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudsql;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import javax.servlet.ServletContext;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.sql.DataSource;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+\n+public class TestIndexServlet {\n+\n+  private static List<String> requiredEnvVars =\n+      Arrays.asList(\"MYSQL_USER\", \"MYSQL_PASS\", \"MYSQL_DB\", \"MYSQL_CONNECTION_NAME\");\n+\n+  private static DataSource pool;\n+\n+  public static void checkEnvVars() {\n+    // Check that required env vars are set\n+    requiredEnvVars.forEach((varName) -> {\n+      assertWithMessage(\n+          String.format(\"Environment variable '%s' must be set to perform these tests.\", varName))\n+          .that(System.getenv(varName)).isNotEmpty();\n+    });\n+  }\n+\n+  private static void createTable(DataSource pool) throws SQLException {\n+    // Safely attempt to create the table schema.\n+    try (Connection conn = pool.getConnection()) {\n+      String stmt =\n+          \"CREATE TABLE IF NOT EXISTS votes ( \"\n+              + \"vote_id SERIAL NOT NULL, time_cast timestamp NOT NULL, candidate CHAR(6) NOT NULL,\"\n+              + \" PRIMARY KEY (vote_id) );\";\n+      try (PreparedStatement createTableStatement = conn.prepareStatement(stmt);) {\n+        createTableStatement.execute();\n+      }\n+    }\n+  }\n+\n+\n+  @BeforeClass\n+  public static void createPool() throws SQLException {\n+    checkEnvVars();\n+    HikariConfig config = new HikariConfig();\n+\n+    config.setJdbcUrl(String.format(\"jdbc:mysql:///%s\", System.getenv(\"MYSQL_DB\")));\n+    config.setUsername(System.getenv(\"MYSQL_USER\")); // e.g. \"root\", \"mysql\"\n+    config.setPassword(System.getenv(\"MYSQL_PASS\")); // e.g. \"my-password\"\n+    config.addDataSourceProperty(\"socketFactory\", \"com.google.cloud.sql.mysql.SocketFactory\");\n+    config.addDataSourceProperty(\"cloudSqlInstance\", System.getenv(\"MYSQL_CONNECTION_NAME\"));\n+\n+    pool = new HikariDataSource(config);\n+    createTable(pool);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI3Mzk5OQ=="}, "originalCommit": {"oid": "25bd4aa0dd53893e5c1e68de9a5dbc072bdd04f0"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NTkxNDU3OnYy", "diffSide": "RIGHT", "path": "cloud-sql/postgres/servlet/src/test/java/com/TestIndexServlet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwMDowOTowOVrOIOsJZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwMDowOTowOVrOIOsJZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI3NDI3OQ==", "bodyText": "old year", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4495#discussion_r552274279", "createdAt": "2021-01-06T00:09:09Z", "author": {"login": "eaball35"}, "path": "cloud-sql/postgres/servlet/src/test/java/com/TestIndexServlet.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2018 Google LLC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25bd4aa0dd53893e5c1e68de9a5dbc072bdd04f0"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NTk0MzI1OnYy", "diffSide": "RIGHT", "path": "cloud-sql/postgres/servlet/src/test/java/com/TestIndexServlet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwMDoxNTowM1rOIOsa7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwMDoyNjoxMVrOISawXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI3ODc2NA==", "bodyText": "Can name be more specific? I thought all of these were duplicates until I looked closer.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4495#discussion_r552278764", "createdAt": "2021-01-06T00:15:03Z", "author": {"login": "eaball35"}, "path": "cloud-sql/postgres/servlet/src/test/java/com/TestIndexServlet.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2018 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudsql;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import javax.servlet.ServletContext;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.sql.DataSource;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+\n+public class TestIndexServlet {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25bd4aa0dd53893e5c1e68de9a5dbc072bdd04f0"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjE4MzY0Nw==", "bodyText": "Renamed these to include the database engine.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4495#discussion_r556183647", "createdAt": "2021-01-13T00:26:11Z", "author": {"login": "shubha-rajan"}, "path": "cloud-sql/postgres/servlet/src/test/java/com/TestIndexServlet.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2018 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudsql;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import javax.servlet.ServletContext;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.sql.DataSource;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+\n+public class TestIndexServlet {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI3ODc2NA=="}, "originalCommit": {"oid": "25bd4aa0dd53893e5c1e68de9a5dbc072bdd04f0"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 703, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}