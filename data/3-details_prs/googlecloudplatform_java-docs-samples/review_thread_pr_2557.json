{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3ODI4OTg0", "number": 2557, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNTo0NDoxN1rODubq5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjowMTo0OVrODucE4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDE0NDM5OnYy", "diffSide": "RIGHT", "path": "run/authentication/src/main/java/com/example/cloudrun/Authentication.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNTo0NDoxN1rOGAbGjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODo1NDoyN1rOGAkDqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5NzIzMQ==", "bodyText": "There are some edge case circumstances noted in Node.js and Golang where the timeout can take longer than 5 seconds. For purposes of the sample may be worth making this 10.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2557#discussion_r403097231", "createdAt": "2020-04-03T15:44:17Z", "author": {"login": "grayside"}, "path": "run/authentication/src/main/java/com/example/cloudrun/Authentication.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudrun;\n+\n+// [START run_service_to_service_auth]\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+public class Authentication {\n+\n+  // Instantiate OkHttpClient\n+  private static final OkHttpClient ok =\n+      new OkHttpClient.Builder()\n+          .readTimeout(500, TimeUnit.MILLISECONDS)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c0673400e0f78e91a3d76bc79e184ff51876e33"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0Mzk0NQ==", "bodyText": "done.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2557#discussion_r403243945", "createdAt": "2020-04-03T18:54:27Z", "author": {"login": "averikitsch"}, "path": "run/authentication/src/main/java/com/example/cloudrun/Authentication.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudrun;\n+\n+// [START run_service_to_service_auth]\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+public class Authentication {\n+\n+  // Instantiate OkHttpClient\n+  private static final OkHttpClient ok =\n+      new OkHttpClient.Builder()\n+          .readTimeout(500, TimeUnit.MILLISECONDS)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5NzIzMQ=="}, "originalCommit": {"oid": "3c0673400e0f78e91a3d76bc79e184ff51876e33"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDE0OTI4OnYy", "diffSide": "RIGHT", "path": "run/authentication/src/main/java/com/example/cloudrun/Authentication.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNTo0NToyN1rOGAbJpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODo1NDoyM1rOGAkDfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5ODAyMw==", "bodyText": "I have not tested, but the domain without protocol may work as well.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2557#discussion_r403098023", "createdAt": "2020-04-03T15:45:27Z", "author": {"login": "grayside"}, "path": "run/authentication/src/main/java/com/example/cloudrun/Authentication.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudrun;\n+\n+// [START run_service_to_service_auth]\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+public class Authentication {\n+\n+  // Instantiate OkHttpClient\n+  private static final OkHttpClient ok =\n+      new OkHttpClient.Builder()\n+          .readTimeout(500, TimeUnit.MILLISECONDS)\n+          .writeTimeout(500, TimeUnit.MILLISECONDS)\n+          .build();\n+\n+  // makeGetRequest makes a GET request to the specified Cloud Run endpoint,\n+  // serviceUrl (must be a complete URL), by authenticating with the Id token", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c0673400e0f78e91a3d76bc79e184ff51876e33"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0MzkwMQ==", "bodyText": "This doesn't work, so I've added a test for it.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2557#discussion_r403243901", "createdAt": "2020-04-03T18:54:23Z", "author": {"login": "averikitsch"}, "path": "run/authentication/src/main/java/com/example/cloudrun/Authentication.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudrun;\n+\n+// [START run_service_to_service_auth]\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+public class Authentication {\n+\n+  // Instantiate OkHttpClient\n+  private static final OkHttpClient ok =\n+      new OkHttpClient.Builder()\n+          .readTimeout(500, TimeUnit.MILLISECONDS)\n+          .writeTimeout(500, TimeUnit.MILLISECONDS)\n+          .build();\n+\n+  // makeGetRequest makes a GET request to the specified Cloud Run endpoint,\n+  // serviceUrl (must be a complete URL), by authenticating with the Id token", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5ODAyMw=="}, "originalCommit": {"oid": "3c0673400e0f78e91a3d76bc79e184ff51876e33"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDIwNDEzOnYy", "diffSide": "RIGHT", "path": "run/authentication/src/test/java/com/example/cloudrun/AuthenticationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNTo1OTo1NVrOGAbspQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODo1NDowNVrOGAkC4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEwNjk4MQ==", "bodyText": "This seems like a good direction for an integration test of whether the metadata server is responding as expected. However, tests with variable expected behavior makes the definition of a passing ambiguous. Maybe the test could log the context around metadata server existing?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2557#discussion_r403106981", "createdAt": "2020-04-03T15:59:55Z", "author": {"login": "grayside"}, "path": "run/authentication/src/test/java/com/example/cloudrun/AuthenticationTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudrun;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.StringContains.containsString;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class AuthenticationTest {\n+  private ByteArrayOutputStream bout;\n+  private PrintStream out;\n+\n+  @Before\n+  public void setUp() {\n+    bout = new ByteArrayOutputStream();\n+    out = new PrintStream(bout);\n+    System.setOut(out);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    System.setOut(null);\n+  }\n+\n+  @Test\n+  public void canMakeGetRequest() throws IOException {\n+    String url = \"http://example.com/\";\n+    String expectedResp;\n+    if (System.getenv(\"GOOGLE_CLOUD_PROJECT\") != null) {\n+      expectedResp = \"Id token query succeeded\";\n+    } else {\n+      expectedResp = \"Id token query failed\";\n+    }\n+    Authentication.makeGetRequest(url);\n+    String got = bout.toString();\n+    assertThat(got, containsString(expectedResp));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c0673400e0f78e91a3d76bc79e184ff51876e33"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0Mzc0Nw==", "bodyText": "done.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2557#discussion_r403243747", "createdAt": "2020-04-03T18:54:05Z", "author": {"login": "averikitsch"}, "path": "run/authentication/src/test/java/com/example/cloudrun/AuthenticationTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudrun;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.StringContains.containsString;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class AuthenticationTest {\n+  private ByteArrayOutputStream bout;\n+  private PrintStream out;\n+\n+  @Before\n+  public void setUp() {\n+    bout = new ByteArrayOutputStream();\n+    out = new PrintStream(bout);\n+    System.setOut(out);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    System.setOut(null);\n+  }\n+\n+  @Test\n+  public void canMakeGetRequest() throws IOException {\n+    String url = \"http://example.com/\";\n+    String expectedResp;\n+    if (System.getenv(\"GOOGLE_CLOUD_PROJECT\") != null) {\n+      expectedResp = \"Id token query succeeded\";\n+    } else {\n+      expectedResp = \"Id token query failed\";\n+    }\n+    Authentication.makeGetRequest(url);\n+    String got = bout.toString();\n+    assertThat(got, containsString(expectedResp));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEwNjk4MQ=="}, "originalCommit": {"oid": "3c0673400e0f78e91a3d76bc79e184ff51876e33"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDIxMDkxOnYy", "diffSide": "RIGHT", "path": "run/authentication/src/test/java/com/example/cloudrun/AuthenticationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjowMTo0OVrOGAbxGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODo1Mzo1OVrOGAkCmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEwODEyMA==", "bodyText": "If run locally, GOOGLE_CLOUD_PROJECT is completely optional. If run without that variable set it may be worth logging some corrective instruction.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2557#discussion_r403108120", "createdAt": "2020-04-03T16:01:49Z", "author": {"login": "grayside"}, "path": "run/authentication/src/test/java/com/example/cloudrun/AuthenticationTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudrun;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.StringContains.containsString;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class AuthenticationTest {\n+  private ByteArrayOutputStream bout;\n+  private PrintStream out;\n+\n+  @Before\n+  public void setUp() {\n+    bout = new ByteArrayOutputStream();\n+    out = new PrintStream(bout);\n+    System.setOut(out);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    System.setOut(null);\n+  }\n+\n+  @Test\n+  public void canMakeGetRequest() throws IOException {\n+    String url = \"http://example.com/\";\n+    String expectedResp;\n+    if (System.getenv(\"GOOGLE_CLOUD_PROJECT\") != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c0673400e0f78e91a3d76bc79e184ff51876e33"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0MzY3Mw==", "bodyText": "done.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2557#discussion_r403243673", "createdAt": "2020-04-03T18:53:59Z", "author": {"login": "averikitsch"}, "path": "run/authentication/src/test/java/com/example/cloudrun/AuthenticationTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudrun;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.StringContains.containsString;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class AuthenticationTest {\n+  private ByteArrayOutputStream bout;\n+  private PrintStream out;\n+\n+  @Before\n+  public void setUp() {\n+    bout = new ByteArrayOutputStream();\n+    out = new PrintStream(bout);\n+    System.setOut(out);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    System.setOut(null);\n+  }\n+\n+  @Test\n+  public void canMakeGetRequest() throws IOException {\n+    String url = \"http://example.com/\";\n+    String expectedResp;\n+    if (System.getenv(\"GOOGLE_CLOUD_PROJECT\") != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEwODEyMA=="}, "originalCommit": {"oid": "3c0673400e0f78e91a3d76bc79e184ff51876e33"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 962, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}