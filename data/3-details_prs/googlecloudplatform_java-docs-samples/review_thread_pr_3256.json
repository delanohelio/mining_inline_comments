{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMjExNjQ4", "number": 3256, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxOTozNzo0NlrOEI5evw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMTo0NTo0NFrOEI72hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NzY1ODIzOnYy", "diffSide": "RIGHT", "path": "run/events-pubsub/src/test/java/com/example/cloudrun/EventControllerTests.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxOTozNzo0NlrOGpJGgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMjo1NjoyOFrOGpOgiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc5MzkyMQ==", "bodyText": "Ok, but in the future, you might consider constructing these w/ JSONObject or GSON.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3256#discussion_r445793921", "createdAt": "2020-06-25T19:37:46Z", "author": {"login": "lesv"}, "path": "run/events-pubsub/src/test/java/com/example/cloudrun/EventControllerTests.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudrun;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.web.servlet.MockMvc;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest\n+@AutoConfigureMockMvc\n+public class EventControllerTests {\n+\n+  @Autowired private MockMvc mockMvc;\n+\n+  @Test\n+  public void addEmptyBody() throws Exception {\n+    mockMvc.perform(post(\"/\")).andExpect(status().isBadRequest());\n+  }\n+\n+  @Test\n+  public void addNoMessage() throws Exception {\n+    String mockBody = \"{}\";\n+\n+    mockMvc\n+        .perform(post(\"/\").contentType(MediaType.APPLICATION_JSON).content(mockBody))\n+        .andExpect(status().isBadRequest());\n+  }\n+\n+  @Test\n+  public void addInvalidMimetype() throws Exception {\n+    String mockBody = \"{\\\"message\\\":{\\\"data\\\":\\\"dGVzdA==\\\",\"\n+                      + \"\\\"attributes\\\":{},\\\"messageId\\\":\\\"91010751788941\\\"\"\n+                      + \",\\\"publishTime\\\":\\\"2017-09-25T23:16:42.302Z\\\"}}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d902ce6b9e0b7042a5f79f873a0bd9091a5d37b6"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgwNjczOQ==", "bodyText": "+1. This seems hard to edit. Can we construct the JSON in a different way?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3256#discussion_r445806739", "createdAt": "2020-06-25T20:03:28Z", "author": {"login": "grant"}, "path": "run/events-pubsub/src/test/java/com/example/cloudrun/EventControllerTests.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudrun;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.web.servlet.MockMvc;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest\n+@AutoConfigureMockMvc\n+public class EventControllerTests {\n+\n+  @Autowired private MockMvc mockMvc;\n+\n+  @Test\n+  public void addEmptyBody() throws Exception {\n+    mockMvc.perform(post(\"/\")).andExpect(status().isBadRequest());\n+  }\n+\n+  @Test\n+  public void addNoMessage() throws Exception {\n+    String mockBody = \"{}\";\n+\n+    mockMvc\n+        .perform(post(\"/\").contentType(MediaType.APPLICATION_JSON).content(mockBody))\n+        .andExpect(status().isBadRequest());\n+  }\n+\n+  @Test\n+  public void addInvalidMimetype() throws Exception {\n+    String mockBody = \"{\\\"message\\\":{\\\"data\\\":\\\"dGVzdA==\\\",\"\n+                      + \"\\\"attributes\\\":{},\\\"messageId\\\":\\\"91010751788941\\\"\"\n+                      + \",\\\"publishTime\\\":\\\"2017-09-25T23:16:42.302Z\\\"}}\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc5MzkyMQ=="}, "originalCommit": {"oid": "d902ce6b9e0b7042a5f79f873a0bd9091a5d37b6"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg4MjUwNQ==", "bodyText": "Updated", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3256#discussion_r445882505", "createdAt": "2020-06-25T22:56:28Z", "author": {"login": "averikitsch"}, "path": "run/events-pubsub/src/test/java/com/example/cloudrun/EventControllerTests.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudrun;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.web.servlet.MockMvc;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest\n+@AutoConfigureMockMvc\n+public class EventControllerTests {\n+\n+  @Autowired private MockMvc mockMvc;\n+\n+  @Test\n+  public void addEmptyBody() throws Exception {\n+    mockMvc.perform(post(\"/\")).andExpect(status().isBadRequest());\n+  }\n+\n+  @Test\n+  public void addNoMessage() throws Exception {\n+    String mockBody = \"{}\";\n+\n+    mockMvc\n+        .perform(post(\"/\").contentType(MediaType.APPLICATION_JSON).content(mockBody))\n+        .andExpect(status().isBadRequest());\n+  }\n+\n+  @Test\n+  public void addInvalidMimetype() throws Exception {\n+    String mockBody = \"{\\\"message\\\":{\\\"data\\\":\\\"dGVzdA==\\\",\"\n+                      + \"\\\"attributes\\\":{},\\\"messageId\\\":\\\"91010751788941\\\"\"\n+                      + \",\\\"publishTime\\\":\\\"2017-09-25T23:16:42.302Z\\\"}}\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc5MzkyMQ=="}, "originalCommit": {"oid": "d902ce6b9e0b7042a5f79f873a0bd9091a5d37b6"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODAzNTA5OnYy", "diffSide": "RIGHT", "path": "run/events-pubsub/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMTo0MTozMFrOGpMz0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMjo1NjozNVrOGpOgrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg1NDY3NQ==", "bodyText": "nit: no space needed before flag.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3256#discussion_r445854675", "createdAt": "2020-06-25T21:41:30Z", "author": {"login": "grant"}, "path": "run/events-pubsub/README.md", "diffHunk": "@@ -0,0 +1,56 @@\n+# Events for Cloud Run - Pub/Sub tutorial\n+\n+This sample shows how to create a service that processes Pub/Sub messages.\n+\n+For more details on how to work with this sample read the [Google Cloud Run Java Samples README](https://github.com/GoogleCloudPlatform/java-docs-samples/tree/master/run).\n+\n+[![Run in Google Cloud][run_img]][run_link]\n+\n+[run_img]: https://storage.googleapis.com/cloudrun/button.svg\n+[run_link]: https://deploy.cloud.run/?git_repo=https://github.com/GoogleCloudPlatform/java-docs-samples&dir=run/events-pubsub\n+\n+\n+## Dependencies\n+\n+* **Spring Boot**: Web server framework.\n+* **Jib**: Container build tool.\n+* **Junit + SpringBootTest**: [development] Test running framework.\n+* **MockMVC**: [development] Integration testing support framework.\n+\n+## Quickstart\n+\n+Create a Cloud Pub/Sub topic:\n+\n+```sh\n+gcloud pubsub topics create my-topic\n+```\n+\n+Use the [Jib Maven Plugin](https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin) to build and push your container image:\n+```sh\n+mvn jib:build -Dimage gcr.io/$(gcloud config get-value project)/cloudrun-events-pubsub\n+```\n+\n+Deploy your Cloud Run service:\n+```sh\n+gcloud run deploy cloudrun-events-pubsub \\\n+ --image gcr.io/$(gcloud config get-value project)/cloudrun-events-pubsub", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d25db3106e6587458d97f8eee0a5542dcf63c28"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg4MjU0MA==", "bodyText": "done", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3256#discussion_r445882540", "createdAt": "2020-06-25T22:56:35Z", "author": {"login": "averikitsch"}, "path": "run/events-pubsub/README.md", "diffHunk": "@@ -0,0 +1,56 @@\n+# Events for Cloud Run - Pub/Sub tutorial\n+\n+This sample shows how to create a service that processes Pub/Sub messages.\n+\n+For more details on how to work with this sample read the [Google Cloud Run Java Samples README](https://github.com/GoogleCloudPlatform/java-docs-samples/tree/master/run).\n+\n+[![Run in Google Cloud][run_img]][run_link]\n+\n+[run_img]: https://storage.googleapis.com/cloudrun/button.svg\n+[run_link]: https://deploy.cloud.run/?git_repo=https://github.com/GoogleCloudPlatform/java-docs-samples&dir=run/events-pubsub\n+\n+\n+## Dependencies\n+\n+* **Spring Boot**: Web server framework.\n+* **Jib**: Container build tool.\n+* **Junit + SpringBootTest**: [development] Test running framework.\n+* **MockMVC**: [development] Integration testing support framework.\n+\n+## Quickstart\n+\n+Create a Cloud Pub/Sub topic:\n+\n+```sh\n+gcloud pubsub topics create my-topic\n+```\n+\n+Use the [Jib Maven Plugin](https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin) to build and push your container image:\n+```sh\n+mvn jib:build -Dimage gcr.io/$(gcloud config get-value project)/cloudrun-events-pubsub\n+```\n+\n+Deploy your Cloud Run service:\n+```sh\n+gcloud run deploy cloudrun-events-pubsub \\\n+ --image gcr.io/$(gcloud config get-value project)/cloudrun-events-pubsub", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg1NDY3NQ=="}, "originalCommit": {"oid": "5d25db3106e6587458d97f8eee0a5542dcf63c28"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODAzNjI1OnYy", "diffSide": "RIGHT", "path": "run/events-pubsub/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMTo0MjowMFrOGpM0kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMjo1Njo0MVrOGpOgwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg1NDg2NQ==", "bodyText": "nit: add newline before codeblocks", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3256#discussion_r445854865", "createdAt": "2020-06-25T21:42:00Z", "author": {"login": "grant"}, "path": "run/events-pubsub/README.md", "diffHunk": "@@ -0,0 +1,56 @@\n+# Events for Cloud Run - Pub/Sub tutorial\n+\n+This sample shows how to create a service that processes Pub/Sub messages.\n+\n+For more details on how to work with this sample read the [Google Cloud Run Java Samples README](https://github.com/GoogleCloudPlatform/java-docs-samples/tree/master/run).\n+\n+[![Run in Google Cloud][run_img]][run_link]\n+\n+[run_img]: https://storage.googleapis.com/cloudrun/button.svg\n+[run_link]: https://deploy.cloud.run/?git_repo=https://github.com/GoogleCloudPlatform/java-docs-samples&dir=run/events-pubsub\n+\n+\n+## Dependencies\n+\n+* **Spring Boot**: Web server framework.\n+* **Jib**: Container build tool.\n+* **Junit + SpringBootTest**: [development] Test running framework.\n+* **MockMVC**: [development] Integration testing support framework.\n+\n+## Quickstart\n+\n+Create a Cloud Pub/Sub topic:\n+\n+```sh\n+gcloud pubsub topics create my-topic\n+```\n+\n+Use the [Jib Maven Plugin](https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin) to build and push your container image:\n+```sh\n+mvn jib:build -Dimage gcr.io/$(gcloud config get-value project)/cloudrun-events-pubsub\n+```\n+\n+Deploy your Cloud Run service:\n+```sh", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d25db3106e6587458d97f8eee0a5542dcf63c28"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg4MjU2MA==", "bodyText": "done", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3256#discussion_r445882560", "createdAt": "2020-06-25T22:56:41Z", "author": {"login": "averikitsch"}, "path": "run/events-pubsub/README.md", "diffHunk": "@@ -0,0 +1,56 @@\n+# Events for Cloud Run - Pub/Sub tutorial\n+\n+This sample shows how to create a service that processes Pub/Sub messages.\n+\n+For more details on how to work with this sample read the [Google Cloud Run Java Samples README](https://github.com/GoogleCloudPlatform/java-docs-samples/tree/master/run).\n+\n+[![Run in Google Cloud][run_img]][run_link]\n+\n+[run_img]: https://storage.googleapis.com/cloudrun/button.svg\n+[run_link]: https://deploy.cloud.run/?git_repo=https://github.com/GoogleCloudPlatform/java-docs-samples&dir=run/events-pubsub\n+\n+\n+## Dependencies\n+\n+* **Spring Boot**: Web server framework.\n+* **Jib**: Container build tool.\n+* **Junit + SpringBootTest**: [development] Test running framework.\n+* **MockMVC**: [development] Integration testing support framework.\n+\n+## Quickstart\n+\n+Create a Cloud Pub/Sub topic:\n+\n+```sh\n+gcloud pubsub topics create my-topic\n+```\n+\n+Use the [Jib Maven Plugin](https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin) to build and push your container image:\n+```sh\n+mvn jib:build -Dimage gcr.io/$(gcloud config get-value project)/cloudrun-events-pubsub\n+```\n+\n+Deploy your Cloud Run service:\n+```sh", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg1NDg2NQ=="}, "originalCommit": {"oid": "5d25db3106e6587458d97f8eee0a5542dcf63c28"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODA0MzE4OnYy", "diffSide": "RIGHT", "path": "run/events-pubsub/src/test/java/com/example/cloudrun/EventControllerTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMTo0NDozNlrOGpM4yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMTo0NDozNlrOGpM4yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg1NTk0NA==", "bodyText": "Ditto formatting.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3256#discussion_r445855944", "createdAt": "2020-06-25T21:44:36Z", "author": {"login": "grant"}, "path": "run/events-pubsub/src/test/java/com/example/cloudrun/EventControllerTests.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudrun;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.web.servlet.MockMvc;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest\n+@AutoConfigureMockMvc\n+public class EventControllerTests {\n+\n+  @Autowired private MockMvc mockMvc;\n+\n+  @Test\n+  public void addEmptyBody() throws Exception {\n+    mockMvc.perform(post(\"/\")).andExpect(status().isBadRequest());\n+  }\n+\n+  @Test\n+  public void addNoMessage() throws Exception {\n+    String mockBody = \"{}\";\n+\n+    mockMvc\n+        .perform(post(\"/\").contentType(MediaType.APPLICATION_JSON).content(mockBody))\n+        .andExpect(status().isBadRequest());\n+  }\n+\n+  @Test\n+  public void addInvalidMimetype() throws Exception {\n+    String mockBody = \"{\\\"message\\\":{\\\"data\\\":\\\"dGVzdA==\\\",\"\n+                      + \"\\\"attributes\\\":{},\\\"messageId\\\":\\\"91010751788941\\\"\"\n+                      + \",\\\"publishTime\\\":\\\"2017-09-25T23:16:42.302Z\\\"}}\";\n+\n+    mockMvc\n+        .perform(post(\"/\").contentType(MediaType.TEXT_HTML).content(mockBody))\n+        .andExpect(status().isUnsupportedMediaType());\n+  }\n+\n+  @Test\n+  public void addMinimalBody() throws Exception {\n+    String mockBody = \"{\\\"message\\\":{}}\";\n+\n+    mockMvc\n+        .perform(post(\"/\").contentType(MediaType.APPLICATION_JSON).content(mockBody))\n+        .andExpect(status().isBadRequest());\n+  }\n+\n+  @Test\n+  public void addFullBody() throws Exception {\n+    String mockBody = \"{\\\"message\\\":{\\\"data\\\":\\\"dGVzdA==\\\",\"\n+                      + \"\\\"attributes\\\":{},\\\"messageId\\\":\\\"91010751788941\\\"\"\n+                      + \",\\\"publishTime\\\":\\\"2017-09-25T23:16:42.302Z\\\"}}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d25db3106e6587458d97f8eee0a5542dcf63c28"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODA0Njc4OnYy", "diffSide": "RIGHT", "path": "run/events-storage/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMTo0NTo0NFrOGpM67Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMjo1Njo0N1rOGpOg6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg1NjQ5Mw==", "bodyText": "nit: spacing/formatting like above", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3256#discussion_r445856493", "createdAt": "2020-06-25T21:45:44Z", "author": {"login": "grant"}, "path": "run/events-storage/README.md", "diffHunk": "@@ -0,0 +1,76 @@\n+# Events for Cloud Run - Cloud Storage tutorial\n+\n+This sample shows how to create a service that processes GCS events.\n+\n+For more details on how to work with this sample read the [Google Cloud Run Java Samples README](https://github.com/GoogleCloudPlatform/java-docs-samples/tree/master/run).\n+\n+[![Run in Google Cloud][run_img]][run_link]\n+\n+[run_img]: https://storage.googleapis.com/cloudrun/button.svg\n+[run_link]: https://deploy.cloud.run/?git_repo=https://github.com/GoogleCloudPlatform/java-docs-samples&dir=run/events-storage\n+\n+\n+## Dependencies\n+\n+* **Spring Boot**: Web server framework.\n+* **Jib**: Container build tool.\n+* **Junit + SpringBootTest**: [development] Test running framework.\n+* **MockMVC**: [development] Integration testing support framework.\n+\n+## Setup\n+\n+Configure environment variables:\n+\n+```sh\n+export MY_RUN_SERVICE=gcs-service\n+export MY_RUN_CONTAINER=gcs-container\n+export MY_GCS_TRIGGER=gcs-trigger\n+export MY_GCS_BUCKET=\"$(gcloud config get-value project)-gcs-bucket\"\n+```\n+\n+## Quickstart\n+\n+Use the [Jib Maven Plugin](https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin) to build and push your container image:\n+```sh\n+mvn jib:build -Dimage gcr.io/$(gcloud config get-value project)/$MY_RUN_CONTAINER\n+```\n+\n+Deploy your Cloud Run service:\n+```sh\n+gcloud run deploy $MY_RUN_SERVICE \\\n+ --image gcr.io/$(gcloud config get-value project)/$MY_RUN_CONTAINER \\\n+ --allow-unauthenticated\n+```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d25db3106e6587458d97f8eee0a5542dcf63c28"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg4MjYwMA==", "bodyText": "done", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3256#discussion_r445882600", "createdAt": "2020-06-25T22:56:47Z", "author": {"login": "averikitsch"}, "path": "run/events-storage/README.md", "diffHunk": "@@ -0,0 +1,76 @@\n+# Events for Cloud Run - Cloud Storage tutorial\n+\n+This sample shows how to create a service that processes GCS events.\n+\n+For more details on how to work with this sample read the [Google Cloud Run Java Samples README](https://github.com/GoogleCloudPlatform/java-docs-samples/tree/master/run).\n+\n+[![Run in Google Cloud][run_img]][run_link]\n+\n+[run_img]: https://storage.googleapis.com/cloudrun/button.svg\n+[run_link]: https://deploy.cloud.run/?git_repo=https://github.com/GoogleCloudPlatform/java-docs-samples&dir=run/events-storage\n+\n+\n+## Dependencies\n+\n+* **Spring Boot**: Web server framework.\n+* **Jib**: Container build tool.\n+* **Junit + SpringBootTest**: [development] Test running framework.\n+* **MockMVC**: [development] Integration testing support framework.\n+\n+## Setup\n+\n+Configure environment variables:\n+\n+```sh\n+export MY_RUN_SERVICE=gcs-service\n+export MY_RUN_CONTAINER=gcs-container\n+export MY_GCS_TRIGGER=gcs-trigger\n+export MY_GCS_BUCKET=\"$(gcloud config get-value project)-gcs-bucket\"\n+```\n+\n+## Quickstart\n+\n+Use the [Jib Maven Plugin](https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin) to build and push your container image:\n+```sh\n+mvn jib:build -Dimage gcr.io/$(gcloud config get-value project)/$MY_RUN_CONTAINER\n+```\n+\n+Deploy your Cloud Run service:\n+```sh\n+gcloud run deploy $MY_RUN_SERVICE \\\n+ --image gcr.io/$(gcloud config get-value project)/$MY_RUN_CONTAINER \\\n+ --allow-unauthenticated\n+```", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg1NjQ5Mw=="}, "originalCommit": {"oid": "5d25db3106e6587458d97f8eee0a5542dcf63c28"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 617, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}