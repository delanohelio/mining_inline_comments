{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3MjkwMjI1", "number": 2734, "title": "sample: add Spanner sample for Cloud Functions", "bodyText": "Sample for querying a Cloud Spanner database through a Java Cloud Function.", "createdAt": "2020-04-22T13:27:26Z", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2734", "merged": true, "mergeCommit": {"oid": "2afb95dc5650b84bea5efc5fc7e5c8a7bb6942e9"}, "closed": true, "closedAt": "2020-04-24T09:48:41Z", "author": {"login": "olavloite"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaIRIeAH2gAyNDA3MjkwMjI1Ojg5MmQ0ZWI3ZjdlNjM4NzM5MDAxNjhhYTA2ODIzZWNlMjQ4YTMwNzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcathSaAH2gAyNDA3MjkwMjI1OmE2NTg2YzFlZmEyN2NiNGU2MWQ3OTQwNzAzZjAyMjhiYjgyOTM3OGM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "892d4eb7f7e63873900168aa06823ece248a3071", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/892d4eb7f7e63873900168aa06823ece248a3071", "committedDate": "2020-04-22T13:26:04Z", "message": "sample: add Spanner sample for Cloud Functions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NDA3NDQ0", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2734#pullrequestreview-398407444", "createdAt": "2020-04-22T17:18:09Z", "commit": {"oid": "892d4eb7f7e63873900168aa06823ece248a3071"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4Njg1ODAx", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2734#pullrequestreview-398685801", "createdAt": "2020-04-23T00:45:18Z", "commit": {"oid": "892d4eb7f7e63873900168aa06823ece248a3071"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMDo0NToxOFrOGKRryA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMDo0NToxOFrOGKRryA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQyODY4MA==", "bodyText": "I take it there's no way to simplify this (e.g. with vavr.io)?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2734#discussion_r413428680", "createdAt": "2020-04-23T00:45:18Z", "author": {"login": "ace-n"}, "path": "functions/spanner/src/main/java/functions/HelloSpanner.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package functions;\n+\n+// [START spanner_functions_quickstart]\n+import com.google.api.client.http.HttpStatusCodes;\n+import com.google.cloud.functions.HttpFunction;\n+import com.google.cloud.functions.HttpRequest;\n+import com.google.cloud.functions.HttpResponse;\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.ResultSet;\n+import com.google.cloud.spanner.Spanner;\n+import com.google.cloud.spanner.SpannerException;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.cloud.spanner.Statement;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.MoreObjects;\n+import java.io.BufferedWriter;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+// HelloSpanner is an example of querying Spanner from a Cloud Function.\n+public class HelloSpanner implements HttpFunction {\n+  private static final Logger LOGGER = Logger.getLogger(HelloSpanner.class.getName());\n+\n+  @VisibleForTesting\n+  static Spanner createSpanner() {\n+    return SpannerOptions.newBuilder().build().getService();\n+  }\n+\n+  // SpannerHolder is a holder class for a Spanner instance that is initialized lazily.\n+  private static final class SpannerHolder {\n+    private final Object lock = new Object();\n+    private volatile boolean initialized;\n+    private volatile DatabaseClient client;\n+    private volatile Throwable error;\n+\n+    private SpannerHolder() {}\n+\n+    // Initialize the {@link Spanner} instance in a method and not as a static variable, as it\n+    // might throw an error, and we want to catch and log that specific error.\n+    DatabaseClient get() throws Throwable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "892d4eb7f7e63873900168aa06823ece248a3071"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4Njg2MDg5", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2734#pullrequestreview-398686089", "createdAt": "2020-04-23T00:46:13Z", "commit": {"oid": "892d4eb7f7e63873900168aa06823ece248a3071"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMDo0NjoxNFrOGKRtPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMDo0NjoxNFrOGKRtPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQyOTA1Mw==", "bodyText": "Nit: would results be clearer?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2734#discussion_r413429053", "createdAt": "2020-04-23T00:46:14Z", "author": {"login": "ace-n"}, "path": "functions/spanner/src/main/java/functions/HelloSpanner.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package functions;\n+\n+// [START spanner_functions_quickstart]\n+import com.google.api.client.http.HttpStatusCodes;\n+import com.google.cloud.functions.HttpFunction;\n+import com.google.cloud.functions.HttpRequest;\n+import com.google.cloud.functions.HttpResponse;\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.ResultSet;\n+import com.google.cloud.spanner.Spanner;\n+import com.google.cloud.spanner.SpannerException;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.cloud.spanner.Statement;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.MoreObjects;\n+import java.io.BufferedWriter;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+// HelloSpanner is an example of querying Spanner from a Cloud Function.\n+public class HelloSpanner implements HttpFunction {\n+  private static final Logger LOGGER = Logger.getLogger(HelloSpanner.class.getName());\n+\n+  @VisibleForTesting\n+  static Spanner createSpanner() {\n+    return SpannerOptions.newBuilder().build().getService();\n+  }\n+\n+  // SpannerHolder is a holder class for a Spanner instance that is initialized lazily.\n+  private static final class SpannerHolder {\n+    private final Object lock = new Object();\n+    private volatile boolean initialized;\n+    private volatile DatabaseClient client;\n+    private volatile Throwable error;\n+\n+    private SpannerHolder() {}\n+\n+    // Initialize the {@link Spanner} instance in a method and not as a static variable, as it\n+    // might throw an error, and we want to catch and log that specific error.\n+    DatabaseClient get() throws Throwable {\n+      if (!initialized) {\n+        synchronized (lock) {\n+          if (!initialized) {\n+            try {\n+              DatabaseId db =\n+                  DatabaseId.of(\n+                      SpannerOptions.getDefaultProjectId(),\n+                      SPANNER_INSTANCE_ID,\n+                      SPANNER_DATABASE_ID);\n+              client = createSpanner().getDatabaseClient(db);\n+            } catch (Throwable t) {\n+              error = t;\n+            }\n+            initialized = true;\n+          }\n+        }\n+      }\n+      if (error != null) {\n+        throw error;\n+      }\n+      return client;\n+    }\n+  }\n+\n+  // The SpannerHolder instance is shared across all instances of the HelloSpanner class.\n+  private static final SpannerHolder SPANNER_HOLDER = new SpannerHolder();\n+\n+  @VisibleForTesting\n+  DatabaseClient getClient() throws Throwable {\n+    return SPANNER_HOLDER.get();\n+  }\n+\n+  // TODO<developer>: Set these environment variables.\n+  private static final String SPANNER_INSTANCE_ID =\n+      MoreObjects.firstNonNull(System.getenv(\"SPANNER_INSTANCE\"), \"my-instance\");\n+  private static final String SPANNER_DATABASE_ID =\n+      MoreObjects.firstNonNull(System.getenv(\"SPANNER_DATABASE\"), \"example-db\");\n+\n+  @Override\n+  public void service(HttpRequest request, HttpResponse response) throws Exception {\n+    BufferedWriter w = response.getWriter();\n+    try {\n+      DatabaseClient client = getClient();\n+      try (ResultSet rs =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "892d4eb7f7e63873900168aa06823ece248a3071"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4Njg2MTg2", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2734#pullrequestreview-398686186", "createdAt": "2020-04-23T00:46:34Z", "commit": {"oid": "892d4eb7f7e63873900168aa06823ece248a3071"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMDo0NjozNFrOGKRttQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMDo0NjozNFrOGKRttQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQyOTE3Mw==", "bodyText": "Ditto - writer?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2734#discussion_r413429173", "createdAt": "2020-04-23T00:46:34Z", "author": {"login": "ace-n"}, "path": "functions/spanner/src/main/java/functions/HelloSpanner.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package functions;\n+\n+// [START spanner_functions_quickstart]\n+import com.google.api.client.http.HttpStatusCodes;\n+import com.google.cloud.functions.HttpFunction;\n+import com.google.cloud.functions.HttpRequest;\n+import com.google.cloud.functions.HttpResponse;\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.ResultSet;\n+import com.google.cloud.spanner.Spanner;\n+import com.google.cloud.spanner.SpannerException;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.cloud.spanner.Statement;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.MoreObjects;\n+import java.io.BufferedWriter;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+// HelloSpanner is an example of querying Spanner from a Cloud Function.\n+public class HelloSpanner implements HttpFunction {\n+  private static final Logger LOGGER = Logger.getLogger(HelloSpanner.class.getName());\n+\n+  @VisibleForTesting\n+  static Spanner createSpanner() {\n+    return SpannerOptions.newBuilder().build().getService();\n+  }\n+\n+  // SpannerHolder is a holder class for a Spanner instance that is initialized lazily.\n+  private static final class SpannerHolder {\n+    private final Object lock = new Object();\n+    private volatile boolean initialized;\n+    private volatile DatabaseClient client;\n+    private volatile Throwable error;\n+\n+    private SpannerHolder() {}\n+\n+    // Initialize the {@link Spanner} instance in a method and not as a static variable, as it\n+    // might throw an error, and we want to catch and log that specific error.\n+    DatabaseClient get() throws Throwable {\n+      if (!initialized) {\n+        synchronized (lock) {\n+          if (!initialized) {\n+            try {\n+              DatabaseId db =\n+                  DatabaseId.of(\n+                      SpannerOptions.getDefaultProjectId(),\n+                      SPANNER_INSTANCE_ID,\n+                      SPANNER_DATABASE_ID);\n+              client = createSpanner().getDatabaseClient(db);\n+            } catch (Throwable t) {\n+              error = t;\n+            }\n+            initialized = true;\n+          }\n+        }\n+      }\n+      if (error != null) {\n+        throw error;\n+      }\n+      return client;\n+    }\n+  }\n+\n+  // The SpannerHolder instance is shared across all instances of the HelloSpanner class.\n+  private static final SpannerHolder SPANNER_HOLDER = new SpannerHolder();\n+\n+  @VisibleForTesting\n+  DatabaseClient getClient() throws Throwable {\n+    return SPANNER_HOLDER.get();\n+  }\n+\n+  // TODO<developer>: Set these environment variables.\n+  private static final String SPANNER_INSTANCE_ID =\n+      MoreObjects.firstNonNull(System.getenv(\"SPANNER_INSTANCE\"), \"my-instance\");\n+  private static final String SPANNER_DATABASE_ID =\n+      MoreObjects.firstNonNull(System.getenv(\"SPANNER_DATABASE\"), \"example-db\");\n+\n+  @Override\n+  public void service(HttpRequest request, HttpResponse response) throws Exception {\n+    BufferedWriter w = response.getWriter();\n+    try {\n+      DatabaseClient client = getClient();\n+      try (ResultSet rs =\n+          client\n+              .singleUse()\n+              .executeQuery(Statement.of(\"SELECT SingerId, AlbumId, AlbumTitle FROM Albums\"))) {\n+        w.write(\"Albums:\\n\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "892d4eb7f7e63873900168aa06823ece248a3071"}, "originalPosition": 105}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4Njg2MzQ4", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2734#pullrequestreview-398686348", "createdAt": "2020-04-23T00:47:05Z", "commit": {"oid": "892d4eb7f7e63873900168aa06823ece248a3071"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMDo0NzowNVrOGKRudA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMDo0NzowNVrOGKRudA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQyOTM2NA==", "bodyText": "Nit: do you need these two lines?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2734#discussion_r413429364", "createdAt": "2020-04-23T00:47:05Z", "author": {"login": "ace-n"}, "path": "functions/spanner/src/test/java/functions/HelloSpannerTest.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package functions;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.functions.HttpRequest;\n+import com.google.cloud.functions.HttpResponse;\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.ErrorCode;\n+import com.google.cloud.spanner.ReadContext;\n+import com.google.cloud.spanner.ResultSet;\n+import com.google.cloud.spanner.SpannerExceptionFactory;\n+import com.google.cloud.spanner.Statement;\n+import com.google.common.testing.TestLogHandler;\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.util.logging.Logger;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+\n+@RunWith(JUnit4.class)\n+public class HelloSpannerTest {\n+  @Mock private HttpRequest request;\n+  @Mock private HttpResponse response;\n+  @Mock private DatabaseClient client;\n+\n+  private static final Logger LOGGER = Logger.getLogger(HelloSpanner.class.getName());\n+  private static final TestLogHandler logHandler = new TestLogHandler();\n+  private static boolean originalUseParentHandlers;\n+\n+  private BufferedWriter writerOut;\n+  private StringWriter responseOut;\n+\n+  @BeforeClass\n+  public static void setupTestLogging() {\n+    LOGGER.addHandler(logHandler);\n+    originalUseParentHandlers = LOGGER.getUseParentHandlers();\n+    LOGGER.setUseParentHandlers(false);\n+  }\n+\n+  @AfterClass\n+  public static void restoreLogging() {\n+    LOGGER.removeHandler(logHandler);\n+    LOGGER.setUseParentHandlers(originalUseParentHandlers);\n+  }\n+\n+  @Before\n+  public void beforeTest() throws IOException {\n+    Mockito.mockitoSession().initMocks(this);\n+\n+    request = PowerMockito.mock(HttpRequest.class);\n+    response = PowerMockito.mock(HttpResponse.class);\n+    client = PowerMockito.mock(DatabaseClient.class);\n+\n+    BufferedReader reader = new BufferedReader(new StringReader(\"{}\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "892d4eb7f7e63873900168aa06823ece248a3071"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4Njg2NjAw", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2734#pullrequestreview-398686600", "createdAt": "2020-04-23T00:47:54Z", "commit": {"oid": "892d4eb7f7e63873900168aa06823ece248a3071"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMDo0Nzo1NFrOGKRveg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMDo0Nzo1NFrOGKRveg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQyOTYyNg==", "bodyText": "Should this be moved to a helper function, or perhaps its own class?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2734#discussion_r413429626", "createdAt": "2020-04-23T00:47:54Z", "author": {"login": "ace-n"}, "path": "functions/spanner/src/test/java/functions/HelloSpannerTest.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package functions;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.functions.HttpRequest;\n+import com.google.cloud.functions.HttpResponse;\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.ErrorCode;\n+import com.google.cloud.spanner.ReadContext;\n+import com.google.cloud.spanner.ResultSet;\n+import com.google.cloud.spanner.SpannerExceptionFactory;\n+import com.google.cloud.spanner.Statement;\n+import com.google.common.testing.TestLogHandler;\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.util.logging.Logger;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+\n+@RunWith(JUnit4.class)\n+public class HelloSpannerTest {\n+  @Mock private HttpRequest request;\n+  @Mock private HttpResponse response;\n+  @Mock private DatabaseClient client;\n+\n+  private static final Logger LOGGER = Logger.getLogger(HelloSpanner.class.getName());\n+  private static final TestLogHandler logHandler = new TestLogHandler();\n+  private static boolean originalUseParentHandlers;\n+\n+  private BufferedWriter writerOut;\n+  private StringWriter responseOut;\n+\n+  @BeforeClass\n+  public static void setupTestLogging() {\n+    LOGGER.addHandler(logHandler);\n+    originalUseParentHandlers = LOGGER.getUseParentHandlers();\n+    LOGGER.setUseParentHandlers(false);\n+  }\n+\n+  @AfterClass\n+  public static void restoreLogging() {\n+    LOGGER.removeHandler(logHandler);\n+    LOGGER.setUseParentHandlers(originalUseParentHandlers);\n+  }\n+\n+  @Before\n+  public void beforeTest() throws IOException {\n+    Mockito.mockitoSession().initMocks(this);\n+\n+    request = PowerMockito.mock(HttpRequest.class);\n+    response = PowerMockito.mock(HttpResponse.class);\n+    client = PowerMockito.mock(DatabaseClient.class);\n+\n+    BufferedReader reader = new BufferedReader(new StringReader(\"{}\"));\n+    PowerMockito.when(request.getReader()).thenReturn(reader);\n+\n+    responseOut = new StringWriter();\n+    writerOut = new BufferedWriter(responseOut);\n+    PowerMockito.when(response.getWriter()).thenReturn(writerOut);\n+\n+    logHandler.clear();\n+  }\n+\n+  private void setupSuccessfulMockQuery() {\n+    ReadContext readContext = PowerMockito.mock(ReadContext.class);\n+    ResultSet resultSet = PowerMockito.mock(ResultSet.class);\n+    PowerMockito.when(resultSet.next()).thenReturn(true, true, false);\n+    PowerMockito.when(resultSet.getLong(\"SingerId\")).thenReturn(1L, 2L, 0L);\n+    PowerMockito.when(resultSet.getLong(\"AlbumId\")).thenReturn(1L, 1L, 0L);\n+    PowerMockito.when(resultSet.getString(\"AlbumTitle\")).thenReturn(\"Album 1\", \"Album 2\", null);\n+    PowerMockito.when(\n+            readContext.executeQuery(\n+                Statement.of(\"SELECT SingerId, AlbumId, AlbumTitle FROM Albums\")))\n+        .thenReturn(resultSet);\n+    PowerMockito.when(client.singleUse()).thenReturn(readContext);\n+  }\n+\n+  @Test\n+  public void functionsHelloSpanner_shouldListAlbums() throws Exception {\n+    setupSuccessfulMockQuery();\n+    new HelloSpanner() {\n+      @Override\n+      DatabaseClient getClient() {\n+        return client;\n+      }\n+    }.service(request, response);\n+    writerOut.flush();\n+    assertThat(responseOut.toString()).isEqualTo(\"Albums:\\n1 1 Album 1\\n2 1 Album 2\\n\");\n+  }\n+\n+  private void setupFailedMockQuery() {\n+    ReadContext readContext = PowerMockito.mock(ReadContext.class);\n+    PowerMockito.when(\n+            readContext.executeQuery(\n+                Statement.of(\"SELECT SingerId, AlbumId, AlbumTitle FROM Albums\")))\n+        .thenThrow(\n+            SpannerExceptionFactory.newSpannerException(\n+                ErrorCode.NOT_FOUND, \"Table `Albums` not found\"));\n+    PowerMockito.when(client.singleUse()).thenReturn(readContext);\n+  }\n+\n+  @Test\n+  public void functionsHelloSpanner_shouldShowQueryError() throws Exception {\n+    setupFailedMockQuery();\n+    new HelloSpanner() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "892d4eb7f7e63873900168aa06823ece248a3071"}, "originalPosition": 131}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6586c1efa27cb4e61d7940703f0228bb829378c", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/a6586c1efa27cb4e61d7940703f0228bb829378c", "committedDate": "2020-04-24T08:50:12Z", "message": "review: process comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 761, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}