{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0MTUxNjI4", "number": 4282, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMTowMzozM1rOE8ZRoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMTowOTowM1rOE8ZYOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzY0MTI5OnYy", "diffSide": "RIGHT", "path": "cloud-sql/sqlserver/servlet/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMTowMzozM1rOH4fPHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMTowMzozM1rOH4fPHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk5NDA3Nw==", "bodyText": "any cleanup instructions we should add?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4282#discussion_r528994077", "createdAt": "2020-11-23T21:03:33Z", "author": {"login": "kolea2"}, "path": "cloud-sql/sqlserver/servlet/README.md", "diffHunk": "@@ -0,0 +1,66 @@\n+# Connecting to Cloud SQL - SQL Server\n+\n+## Before you begin\n+\n+1. If you haven't already, set up a Java Development Environment (including google-cloud-sdk and \n+maven utilities) by following the [java setup guide](https://cloud.google.com/java/docs/setup) and \n+[create a project](https://cloud.google.com/resource-manager/docs/creating-managing-projects#creating_a_project).\n+\n+1. Create a 2nd Gen Cloud SQL Instance by following these \n+[instructions](https://cloud.google.com/sql/docs/sqlserver/create-instance). Note the connection string,\n+database user, and database password that you create.\n+\n+1. Create a database for your application by following these \n+[instructions](https://cloud.google.com/sql/docs/sqlserver/create-manage-databases). Note the database\n+name. \n+\n+1. Create a service account with the 'Cloud SQL Client' permissions by following these \n+[instructions](https://cloud.google.com/sql/docs/sqlserver/connect-external-app#4_if_required_by_your_authentication_method_create_a_service_account).\n+Download a JSON key to use to authenticate your connection. \n+\n+1. Use the information noted in the previous steps:\n+```bash\n+export GOOGLE_APPLICATION_CREDENTIALS=/path/to/service/account/key.json\n+export CLOUD_SQL_CONNECTION_NAME='<MY-PROJECT>:<INSTANCE-REGION>:<MY-DATABASE>'\n+export DB_USER='my-db-user'\n+export DB_PASS='my-db-pass'\n+export DB_NAME='my_db'\n+```\n+Note: Saving credentials in environment variables is convenient, but not secure - consider a more\n+secure solution such as [Cloud KMS](https://cloud.google.com/kms/) to help keep secrets safe.\n+\n+## Deploying locally\n+\n+To run this application locally, run the following command inside the project folder:\n+\n+```bash\n+mvn jetty:run\n+```\n+\n+Navigate towards `http://127.0.0.1:8080` to verify your application is running correctly.\n+\n+## Google App Engine Standard", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2abcf3263e6f4ef9151c3c4c0bf250e2f5e44de"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzY0MzcyOnYy", "diffSide": "RIGHT", "path": "cloud-sql/sqlserver/servlet/pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMTowNDoxOVrOH4fQmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMDozODoxMVrOH4k6aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk5NDQ1Nw==", "bodyText": "this should probably be a placeholder value?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4282#discussion_r528994457", "createdAt": "2020-11-23T21:04:19Z", "author": {"login": "kolea2"}, "path": "cloud-sql/sqlserver/servlet/pom.xml", "diffHunk": "@@ -0,0 +1,91 @@\n+<!--\n+  Copyright 2020 Google LLC\n+\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<project>\n+  <modelVersion>4.0.0</modelVersion>\n+  <packaging>war</packaging>\n+  <version>1.0-SNAPSHOT</version>\n+  <groupId>com.example.cloudsql</groupId>\n+  <artifactId>tabs-vs-spaces-sqlserver</artifactId>\n+\n+  <!--\n+    The parent pom defines common style checks and testing strategies for our samples.\n+    Removing or replacing it should not affect the execution of the samples in anyway.\n+  -->\n+  <parent>\n+    <groupId>com.google.cloud.samples</groupId>\n+    <artifactId>shared-configuration</artifactId>\n+    <version>1.0.15</version>\n+  </parent>\n+\n+  <properties>\n+    <maven.compiler.target>1.8</maven.compiler.target>\n+    <maven.compiler.source>1.8</maven.compiler.source>\n+    <failOnMissingWebXml>false</failOnMissingWebXml>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>javax.servlet</groupId>\n+      <artifactId>javax.servlet-api</artifactId>\n+      <version>3.1.0</version>\n+      <type>jar</type>\n+      <scope>provided</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>javax.servlet</groupId>\n+      <artifactId>jstl</artifactId>\n+      <version>1.2</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.microsoft.sqlserver</groupId>\n+      <artifactId>mssql-jdbc</artifactId>\n+      <version>9.1.0.jre8-preview</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.google.cloud.sql</groupId>\n+      <artifactId>cloud-sql-connector-jdbc-sqlserver</artifactId>\n+      <version>1.2.0</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.zaxxer</groupId>\n+      <artifactId>HikariCP</artifactId>\n+      <version>3.4.2</version>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.eclipse.jetty</groupId>\n+        <artifactId>jetty-maven-plugin</artifactId>\n+        <version>9.4.27.v20200227</version>\n+        <configuration>\n+          <scanIntervalSeconds>1</scanIntervalSeconds>\n+        </configuration>\n+      </plugin>\n+      <!-- Only required for AppEngine Deployments -->\n+      <plugin>\n+        <groupId>com.google.cloud.tools</groupId>\n+        <artifactId>appengine-maven-plugin</artifactId>\n+        <version>2.2.0</version>\n+        <configuration>\n+          <projectId>samples-testing-shubhadayini</projectId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2abcf3263e6f4ef9151c3c4c0bf250e2f5e44de"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA4NzA4MA==", "bodyText": "oops! forgot to set this back to the placeholder value. fixed this and the other occurrence!", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4282#discussion_r529087080", "createdAt": "2020-11-24T00:38:11Z", "author": {"login": "shubha-rajan"}, "path": "cloud-sql/sqlserver/servlet/pom.xml", "diffHunk": "@@ -0,0 +1,91 @@\n+<!--\n+  Copyright 2020 Google LLC\n+\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<project>\n+  <modelVersion>4.0.0</modelVersion>\n+  <packaging>war</packaging>\n+  <version>1.0-SNAPSHOT</version>\n+  <groupId>com.example.cloudsql</groupId>\n+  <artifactId>tabs-vs-spaces-sqlserver</artifactId>\n+\n+  <!--\n+    The parent pom defines common style checks and testing strategies for our samples.\n+    Removing or replacing it should not affect the execution of the samples in anyway.\n+  -->\n+  <parent>\n+    <groupId>com.google.cloud.samples</groupId>\n+    <artifactId>shared-configuration</artifactId>\n+    <version>1.0.15</version>\n+  </parent>\n+\n+  <properties>\n+    <maven.compiler.target>1.8</maven.compiler.target>\n+    <maven.compiler.source>1.8</maven.compiler.source>\n+    <failOnMissingWebXml>false</failOnMissingWebXml>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>javax.servlet</groupId>\n+      <artifactId>javax.servlet-api</artifactId>\n+      <version>3.1.0</version>\n+      <type>jar</type>\n+      <scope>provided</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>javax.servlet</groupId>\n+      <artifactId>jstl</artifactId>\n+      <version>1.2</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.microsoft.sqlserver</groupId>\n+      <artifactId>mssql-jdbc</artifactId>\n+      <version>9.1.0.jre8-preview</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.google.cloud.sql</groupId>\n+      <artifactId>cloud-sql-connector-jdbc-sqlserver</artifactId>\n+      <version>1.2.0</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.zaxxer</groupId>\n+      <artifactId>HikariCP</artifactId>\n+      <version>3.4.2</version>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.eclipse.jetty</groupId>\n+        <artifactId>jetty-maven-plugin</artifactId>\n+        <version>9.4.27.v20200227</version>\n+        <configuration>\n+          <scanIntervalSeconds>1</scanIntervalSeconds>\n+        </configuration>\n+      </plugin>\n+      <!-- Only required for AppEngine Deployments -->\n+      <plugin>\n+        <groupId>com.google.cloud.tools</groupId>\n+        <artifactId>appengine-maven-plugin</artifactId>\n+        <version>2.2.0</version>\n+        <configuration>\n+          <projectId>samples-testing-shubhadayini</projectId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk5NDQ1Nw=="}, "originalCommit": {"oid": "d2abcf3263e6f4ef9151c3c4c0bf250e2f5e44de"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzY1MDgwOnYy", "diffSide": "RIGHT", "path": "cloud-sql/sqlserver/servlet/src/main/java/com/example/cloudsql/IndexServlet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMTowNjozMFrOH4fUwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMTowNjozMFrOH4fUwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk5NTUyMg==", "bodyText": "feel free to take or leave this suggestion - I would refactor new Vote(... out as a variable.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4282#discussion_r528995522", "createdAt": "2020-11-23T21:06:30Z", "author": {"login": "kolea2"}, "path": "cloud-sql/sqlserver/servlet/src/main/java/com/example/cloudsql/IndexServlet.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudsql;\n+\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Timestamp;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.servlet.ServletException;\n+import javax.servlet.annotation.WebServlet;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.sql.DataSource;\n+\n+@WebServlet(name = \"Index\", value = \"\")\n+public class IndexServlet extends HttpServlet {\n+\n+  private static final Logger LOGGER = Logger.getLogger(IndexServlet.class.getName());\n+\n+  @Override\n+  public void doGet(HttpServletRequest req, HttpServletResponse resp)\n+      throws IOException, ServletException {\n+    // Extract the pool from the Servlet Context, reusing the one that was created\n+    // in the ContextListener when the application was started\n+    DataSource pool = (DataSource) req.getServletContext().getAttribute(\"my-pool\");\n+\n+    int tabCount;\n+    int spaceCount;\n+    List<Vote> recentVotes = new ArrayList<>();\n+    try (Connection conn = pool.getConnection()) {\n+      // PreparedStatements are compiled by the database immediately and executed at a later date.\n+      // Most databases cache previously compiled queries, which improves efficiency.\n+      PreparedStatement voteStmt =  conn.prepareStatement(\n+          \"SELECT TOP(5) candidate, time_cast FROM votes ORDER BY time_cast DESC\");\n+      // Execute the statement\n+      ResultSet voteResults = voteStmt.executeQuery();\n+      // Convert a ResultSet into Vote objects\n+      while (voteResults.next()) {\n+        String candidate = voteResults.getString(1);\n+        Timestamp timeCast = voteResults.getTimestamp(2);\n+        recentVotes.add(new Vote(candidate.trim(), timeCast));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2abcf3263e6f4ef9151c3c4c0bf250e2f5e44de"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzY1NDM4OnYy", "diffSide": "RIGHT", "path": "cloud-sql/sqlserver/servlet/src/main/java/com/example/cloudsql/IndexServlet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMTowNzo0MVrOH4fW6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMjo0NDo0NVrOH4ppiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk5NjA3Mw==", "bodyText": "warning or error here?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4282#discussion_r528996073", "createdAt": "2020-11-23T21:07:41Z", "author": {"login": "kolea2"}, "path": "cloud-sql/sqlserver/servlet/src/main/java/com/example/cloudsql/IndexServlet.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudsql;\n+\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Timestamp;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.servlet.ServletException;\n+import javax.servlet.annotation.WebServlet;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.sql.DataSource;\n+\n+@WebServlet(name = \"Index\", value = \"\")\n+public class IndexServlet extends HttpServlet {\n+\n+  private static final Logger LOGGER = Logger.getLogger(IndexServlet.class.getName());\n+\n+  @Override\n+  public void doGet(HttpServletRequest req, HttpServletResponse resp)\n+      throws IOException, ServletException {\n+    // Extract the pool from the Servlet Context, reusing the one that was created\n+    // in the ContextListener when the application was started\n+    DataSource pool = (DataSource) req.getServletContext().getAttribute(\"my-pool\");\n+\n+    int tabCount;\n+    int spaceCount;\n+    List<Vote> recentVotes = new ArrayList<>();\n+    try (Connection conn = pool.getConnection()) {\n+      // PreparedStatements are compiled by the database immediately and executed at a later date.\n+      // Most databases cache previously compiled queries, which improves efficiency.\n+      PreparedStatement voteStmt =  conn.prepareStatement(\n+          \"SELECT TOP(5) candidate, time_cast FROM votes ORDER BY time_cast DESC\");\n+      // Execute the statement\n+      ResultSet voteResults = voteStmt.executeQuery();\n+      // Convert a ResultSet into Vote objects\n+      while (voteResults.next()) {\n+        String candidate = voteResults.getString(1);\n+        Timestamp timeCast = voteResults.getTimestamp(2);\n+        recentVotes.add(new Vote(candidate.trim(), timeCast));\n+      }\n+\n+      // PreparedStatements can also be executed multiple times with different arguments. This can\n+      // improve efficiency, and project a query from being vulnerable to an SQL injection.\n+      PreparedStatement voteCountStmt = conn.prepareStatement(\n+          \"SELECT COUNT(vote_id) FROM votes WHERE candidate=?\");\n+\n+      voteCountStmt.setString(1, \"TABS\");\n+      ResultSet tabResult = voteCountStmt.executeQuery();\n+      tabResult.next(); // Move to the first result\n+      tabCount = tabResult.getInt(1);\n+\n+      voteCountStmt.setString(1, \"SPACES\");\n+      ResultSet spaceResult = voteCountStmt.executeQuery();\n+      spaceResult.next(); // Move to the first result\n+      spaceCount = spaceResult.getInt(1);\n+\n+    } catch (SQLException ex) {\n+      // If something goes wrong, the application needs to react appropriately. This might mean\n+      // getting a new connection and executing the query again, or it might mean redirecting the\n+      // user to a different page to let them know something went wrong.\n+      throw new ServletException(\"Unable to successfully connect to the database. Please check the \"\n+          + \"steps in the README and try again.\", ex);\n+    }\n+\n+    // Add variables and render the page\n+    req.setAttribute(\"tabCount\", tabCount);\n+    req.setAttribute(\"spaceCount\", spaceCount);\n+    req.setAttribute(\"recentVotes\", recentVotes);\n+    req.getRequestDispatcher(\"/index.jsp\").forward(req, resp);\n+  }\n+\n+  @Override\n+  public void doPost(HttpServletRequest req, HttpServletResponse resp)\n+      throws IOException {\n+    // Get the team from the request and record the time of the vote.\n+    String team = req.getParameter(\"team\");\n+    if (team != null) {\n+      team = team.toUpperCase();\n+    }\n+    Timestamp now = new Timestamp(new Date().getTime());\n+    if (team == null || (!team.equals(\"TABS\") && !team.equals(\"SPACES\"))) {\n+      resp.setStatus(400);\n+      resp.getWriter().append(\"Invalid team specified.\");\n+      return;\n+    }\n+\n+    // Reuse the pool that was created in the ContextListener when the Servlet started.\n+    DataSource pool = (DataSource) req.getServletContext().getAttribute(\"my-pool\");\n+    // [START cloud_sql_postgres_servlet_connection]\n+    // Using a try-with-resources statement ensures that the connection is always released back\n+    // into the pool at the end of the statement (even if an error occurs)\n+    try (Connection conn = pool.getConnection()) {\n+\n+      // PreparedStatements can be more efficient and project against injections.\n+      PreparedStatement voteStmt = conn.prepareStatement(\n+          \"INSERT INTO votes (time_cast, candidate) VALUES (?, ?);\");\n+      voteStmt.setTimestamp(1, now);\n+      voteStmt.setString(2, team);\n+\n+      // Finally, execute the statement. If it fails, an error will be thrown.\n+      voteStmt.execute();\n+\n+    } catch (SQLException ex) {\n+      // If something goes wrong, handle the error in this section. This might involve retrying or\n+      // adjusting parameters depending on the situation.\n+      // [START_EXCLUDE]\n+      LOGGER.log(Level.WARNING, \"Error while attempting to submit vote.\", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2abcf3263e6f4ef9151c3c4c0bf250e2f5e44de"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE2NDY4MQ==", "bodyText": "Should be warning, that's what it is in the other samples. The next option above \"WARNING\" is \"SEVERE\" and idk if that's right here.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4282#discussion_r529164681", "createdAt": "2020-11-24T02:44:45Z", "author": {"login": "shubha-rajan"}, "path": "cloud-sql/sqlserver/servlet/src/main/java/com/example/cloudsql/IndexServlet.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudsql;\n+\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Timestamp;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.servlet.ServletException;\n+import javax.servlet.annotation.WebServlet;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.sql.DataSource;\n+\n+@WebServlet(name = \"Index\", value = \"\")\n+public class IndexServlet extends HttpServlet {\n+\n+  private static final Logger LOGGER = Logger.getLogger(IndexServlet.class.getName());\n+\n+  @Override\n+  public void doGet(HttpServletRequest req, HttpServletResponse resp)\n+      throws IOException, ServletException {\n+    // Extract the pool from the Servlet Context, reusing the one that was created\n+    // in the ContextListener when the application was started\n+    DataSource pool = (DataSource) req.getServletContext().getAttribute(\"my-pool\");\n+\n+    int tabCount;\n+    int spaceCount;\n+    List<Vote> recentVotes = new ArrayList<>();\n+    try (Connection conn = pool.getConnection()) {\n+      // PreparedStatements are compiled by the database immediately and executed at a later date.\n+      // Most databases cache previously compiled queries, which improves efficiency.\n+      PreparedStatement voteStmt =  conn.prepareStatement(\n+          \"SELECT TOP(5) candidate, time_cast FROM votes ORDER BY time_cast DESC\");\n+      // Execute the statement\n+      ResultSet voteResults = voteStmt.executeQuery();\n+      // Convert a ResultSet into Vote objects\n+      while (voteResults.next()) {\n+        String candidate = voteResults.getString(1);\n+        Timestamp timeCast = voteResults.getTimestamp(2);\n+        recentVotes.add(new Vote(candidate.trim(), timeCast));\n+      }\n+\n+      // PreparedStatements can also be executed multiple times with different arguments. This can\n+      // improve efficiency, and project a query from being vulnerable to an SQL injection.\n+      PreparedStatement voteCountStmt = conn.prepareStatement(\n+          \"SELECT COUNT(vote_id) FROM votes WHERE candidate=?\");\n+\n+      voteCountStmt.setString(1, \"TABS\");\n+      ResultSet tabResult = voteCountStmt.executeQuery();\n+      tabResult.next(); // Move to the first result\n+      tabCount = tabResult.getInt(1);\n+\n+      voteCountStmt.setString(1, \"SPACES\");\n+      ResultSet spaceResult = voteCountStmt.executeQuery();\n+      spaceResult.next(); // Move to the first result\n+      spaceCount = spaceResult.getInt(1);\n+\n+    } catch (SQLException ex) {\n+      // If something goes wrong, the application needs to react appropriately. This might mean\n+      // getting a new connection and executing the query again, or it might mean redirecting the\n+      // user to a different page to let them know something went wrong.\n+      throw new ServletException(\"Unable to successfully connect to the database. Please check the \"\n+          + \"steps in the README and try again.\", ex);\n+    }\n+\n+    // Add variables and render the page\n+    req.setAttribute(\"tabCount\", tabCount);\n+    req.setAttribute(\"spaceCount\", spaceCount);\n+    req.setAttribute(\"recentVotes\", recentVotes);\n+    req.getRequestDispatcher(\"/index.jsp\").forward(req, resp);\n+  }\n+\n+  @Override\n+  public void doPost(HttpServletRequest req, HttpServletResponse resp)\n+      throws IOException {\n+    // Get the team from the request and record the time of the vote.\n+    String team = req.getParameter(\"team\");\n+    if (team != null) {\n+      team = team.toUpperCase();\n+    }\n+    Timestamp now = new Timestamp(new Date().getTime());\n+    if (team == null || (!team.equals(\"TABS\") && !team.equals(\"SPACES\"))) {\n+      resp.setStatus(400);\n+      resp.getWriter().append(\"Invalid team specified.\");\n+      return;\n+    }\n+\n+    // Reuse the pool that was created in the ContextListener when the Servlet started.\n+    DataSource pool = (DataSource) req.getServletContext().getAttribute(\"my-pool\");\n+    // [START cloud_sql_postgres_servlet_connection]\n+    // Using a try-with-resources statement ensures that the connection is always released back\n+    // into the pool at the end of the statement (even if an error occurs)\n+    try (Connection conn = pool.getConnection()) {\n+\n+      // PreparedStatements can be more efficient and project against injections.\n+      PreparedStatement voteStmt = conn.prepareStatement(\n+          \"INSERT INTO votes (time_cast, candidate) VALUES (?, ?);\");\n+      voteStmt.setTimestamp(1, now);\n+      voteStmt.setString(2, team);\n+\n+      // Finally, execute the statement. If it fails, an error will be thrown.\n+      voteStmt.execute();\n+\n+    } catch (SQLException ex) {\n+      // If something goes wrong, handle the error in this section. This might involve retrying or\n+      // adjusting parameters depending on the situation.\n+      // [START_EXCLUDE]\n+      LOGGER.log(Level.WARNING, \"Error while attempting to submit vote.\", ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk5NjA3Mw=="}, "originalCommit": {"oid": "d2abcf3263e6f4ef9151c3c4c0bf250e2f5e44de"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzY1NTQ0OnYy", "diffSide": "RIGHT", "path": "cloud-sql/sqlserver/servlet/src/main/webapp/WEB-INF/appengine-web.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMTowODowN1rOH4fXqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMTowODowN1rOH4fXqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk5NjI2NA==", "bodyText": "replace value?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4282#discussion_r528996264", "createdAt": "2020-11-23T21:08:07Z", "author": {"login": "kolea2"}, "path": "cloud-sql/sqlserver/servlet/src/main/webapp/WEB-INF/appengine-web.xml", "diffHunk": "@@ -0,0 +1,26 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<!--\n+  Copyright 2020 Google LLC\n+\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<appengine-web-app xmlns=\"http://appengine.google.com/ns/1.0\">\n+  <threadsafe>true</threadsafe>\n+  <runtime>java8</runtime>\n+  <env-variables>\n+    <env-var name=\"CLOUD_SQL_INSTANCE_NAME\" value=\"samples-testing-shubhadayini:us-central1:sql-server-test\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2abcf3263e6f4ef9151c3c4c0bf250e2f5e44de"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzY1ODE5OnYy", "diffSide": "RIGHT", "path": "cloud-sql/sqlserver/servlet/src/main/webapp/index.jsp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMTowOTowM1rOH4fZWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMTowOTowM1rOH4fZWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk5NjY5OA==", "bodyText": "it might be nice to explain somewhere (maybe the README?) what this example app is doing", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/4282#discussion_r528996698", "createdAt": "2020-11-23T21:09:03Z", "author": {"login": "kolea2"}, "path": "cloud-sql/sqlserver/servlet/src/main/webapp/index.jsp", "diffHunk": "@@ -0,0 +1,118 @@\n+<!--\n+Copyright 2020 Google LLC\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+-->\n+<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n+<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>\n+<html lang=\"en\">\n+<head>\n+    <title>Tabs VS Spaces</title>\n+    <link rel=\"stylesheet\"\n+          href=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css\">\n+    <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\n+    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js\"></script>\n+</head>\n+<body>\n+<nav class=\"red lighten-1\">\n+    <div class=\"nav-wrapper\">\n+        <a href=\"#\" class=\"brand-logo center\">Tabs VS Spaces</a>\n+    </div>\n+</nav>\n+<div class=\"section\">\n+    <div class=\"center\">\n+        <h4>\n+            <c:choose>\n+                <c:when test=\"${tabCount == spaceCount}\">\n+                    TABS and SPACES are evenly matched!", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2abcf3263e6f4ef9151c3c4c0bf250e2f5e44de"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 708, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}