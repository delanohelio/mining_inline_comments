{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0MzEyOTAz", "number": 3480, "title": "samples: Pub/Sub Spring", "bodyText": "Add code snippets for a Pub/Sub Spring user guide (similar to how they are done for Spanner Spring).\nThings worth mentioning:\n\nshared-configuration is not added as a parent in pom.xml because spring-boot-starter-parentneed to exist as a parent.\nNo test are added because these will be used as code snippets. I also don't see tests in the Spanner samples.", "createdAt": "2020-08-06T23:31:31Z", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3480", "merged": true, "mergeCommit": {"oid": "a9d4ca85442affa957cbc4902791615cf2445156"}, "closed": true, "closedAt": "2020-08-11T00:51:36Z", "author": {"login": "anguillanneuf"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8Fb6UgH2gAyNDY0MzEyOTAzOjYyZTk3ZTI0ZjQwZjYxMDkwZjM1ZjhlODE4NWU0YTdmYTg4MGRlN2I=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc9r_7AAFqTQ2NDY3ODkwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "62e97e24f40f61090f35f8e8185e4a7fa880de7b", "author": {"user": {"login": "anguillanneuf", "name": "Tianzi Cai"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/62e97e24f40f61090f35f8e8185e4a7fa880de7b", "committedDate": "2020-08-06T01:21:33Z", "message": "add skeleton code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71e3d49b225884d407daee3a71ed164fdfa0aaa9", "author": {"user": {"login": "anguillanneuf", "name": "Tianzi Cai"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/71e3d49b225884d407daee3a71ed164fdfa0aaa9", "committedDate": "2020-08-06T01:26:21Z", "message": "add skeleton code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f19efd6c83fedd1c6aba6c91c7a3d5e98652f7ed", "author": {"user": {"login": "anguillanneuf", "name": "Tianzi Cai"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/f19efd6c83fedd1c6aba6c91c7a3d5e98652f7ed", "committedDate": "2020-08-06T22:11:03Z", "message": "send a message every 10 sec"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa1a229219f4007a9321416b495c0cbf3ad582b4", "author": {"user": {"login": "anguillanneuf", "name": "Tianzi Cai"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/aa1a229219f4007a9321416b495c0cbf3ad582b4", "committedDate": "2020-08-06T23:18:19Z", "message": "Add README and comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a10149d1da3a0af426f93bd938c170f0ad0e5a60", "author": {"user": {"login": "anguillanneuf", "name": "Tianzi Cai"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/a10149d1da3a0af426f93bd938c170f0ad0e5a60", "committedDate": "2020-08-07T00:02:19Z", "message": "add shared-configuration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0MzQzMzY2", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3480#pullrequestreview-464343366", "createdAt": "2020-08-10T15:32:56Z", "commit": {"oid": "a10149d1da3a0af426f93bd938c170f0ad0e5a60"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNTozMjo1NlrOG-TyIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNTozMjo1NlrOG-TyIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk4OTAyNA==", "bodyText": "Ok, but shouldn't this be somewhere earlier - possibly as a classvar or static so it gets reused?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3480#discussion_r467989024", "createdAt": "2020-08-10T15:32:56Z", "author": {"login": "lesv"}, "path": "pubsub/spring/src/main/java/demo/PubSubApplication.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package demo;\n+\n+import java.util.Random;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import java.util.stream.Stream;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.cloud.gcp.pubsub.core.PubSubTemplate;\n+import org.springframework.cloud.gcp.pubsub.integration.AckMode;\n+import org.springframework.cloud.gcp.pubsub.integration.inbound.PubSubInboundChannelAdapter;\n+import org.springframework.cloud.gcp.pubsub.integration.outbound.PubSubMessageHandler;\n+import org.springframework.cloud.gcp.pubsub.support.BasicAcknowledgeablePubsubMessage;\n+import org.springframework.cloud.gcp.pubsub.support.GcpPubSubHeaders;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.integration.annotation.ServiceActivator;\n+import org.springframework.integration.channel.PublishSubscribeChannel;\n+import org.springframework.integration.support.MessageBuilder;\n+import org.springframework.messaging.Message;\n+import org.springframework.messaging.MessageChannel;\n+import org.springframework.messaging.MessageHandler;\n+import org.springframework.messaging.handler.annotation.Header;\n+import org.springframework.util.concurrent.ListenableFutureCallback;\n+import reactor.core.publisher.Flux;\n+import reactor.core.scheduler.Schedulers;\n+\n+@SpringBootApplication\n+public class PubSubApplication {\n+\n+  private static final Log LOGGER = LogFactory.getLog(PubSubApplication.class);\n+\n+  public static void main(String[] args) {\n+    SpringApplication.run(PubSubApplication.class, args);\n+  }\n+\n+  // [START pubsub_spring_inbound_channel_adapter]\n+  // Create a message channel for messages arriving from the subscription `sub-one`.\n+  @Bean\n+  public MessageChannel inputMessageChannelForSubOne() {\n+    return new PublishSubscribeChannel();\n+  }\n+\n+  // Create an inbound channel adapter to listen to the subscription `sub-one` and send\n+  // messages to the input message channel.\n+  @Bean\n+  public PubSubInboundChannelAdapter inboundChannelAdapter(\n+      @Qualifier(\"inputMessageChannelForSubOne\") MessageChannel messageChannel,\n+      PubSubTemplate pubSubTemplate) {\n+    PubSubInboundChannelAdapter adapter =\n+        new PubSubInboundChannelAdapter(pubSubTemplate, \"sub-one\");\n+    adapter.setOutputChannel(messageChannel);\n+    adapter.setAckMode(AckMode.MANUAL);\n+    adapter.setPayloadType(String.class);\n+    return adapter;\n+  }\n+\n+  // Define what happens to the messages arriving in the message channel.\n+  @ServiceActivator(inputChannel = \"inputMessageChannelForSubOne\")\n+  public void messageReceiver(\n+      String payload,\n+      @Header(GcpPubSubHeaders.ORIGINAL_MESSAGE) BasicAcknowledgeablePubsubMessage message) {\n+    LOGGER.info(\"Message arrived via an inbound channel adapter from sub-one! Payload: \" + payload);\n+    message.ack();\n+  }\n+  // [END pubsub_spring_inbound_channel_adapter]\n+\n+  // [START pubsub_spring_outbound_channel_adapter]\n+  // Create an outbound channel adapter to send messages from the input message channel to the\n+  // topic `topic-two`.\n+  @Bean\n+  @ServiceActivator(inputChannel = \"inputMessageChannelForSubOne\")\n+  public MessageHandler messageSender(PubSubTemplate pubsubTemplate) {\n+    PubSubMessageHandler adapter = new PubSubMessageHandler(pubsubTemplate, \"topic-two\");\n+\n+    adapter.setPublishCallback(\n+        new ListenableFutureCallback<String>() {\n+          @Override\n+          public void onFailure(Throwable throwable) {\n+            LOGGER.info(\"There was an error sending the message.\");\n+          }\n+\n+          @Override\n+          public void onSuccess(String result) {\n+            LOGGER.info(\"Message was sent via the outbound channel adapter to topic-two!\");\n+          }\n+        });\n+    return adapter;\n+  }\n+  // [END pubsub_spring_outbound_channel_adapter]\n+\n+  // [START pubsub_spring_cloud_stream_input_binder]\n+  // Create an input binder to receive messages from `topic-two` using a Consumer bean.\n+  @Bean\n+  public Consumer<Message<String>> receiveMessageFromTopicTwo() {\n+    return message -> {\n+      LOGGER.info(\n+          \"Message arrived via an input binder from topic-two! Payload: \" + message.getPayload());\n+    };\n+  }\n+  // [END pubsub_spring_cloud_stream_input_binder]\n+\n+  // [START pubsub_spring_cloud_stream_output_binder]\n+  // Create an output binder to send messages to `topic-one` using a Supplier bean.\n+  @Bean\n+  public Supplier<Flux<Message<String>>> sendMessageToTopicOne() {\n+    return () ->\n+        Flux.fromStream(\n+                // Generate a stream that sends a numbered message every 10 seconds.\n+                Stream.generate(\n+                    new Supplier<Message<String>>() {\n+                      @Override\n+                      public Message<String> get() {\n+                        try {\n+                          Thread.sleep(10000);\n+                        } finally {\n+                          Random rand = new Random();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a10149d1da3a0af426f93bd938c170f0ad0e5a60"}, "originalPosition": 135}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf5d4ffe7d54a7e29823b4b3e9dba90422dd7361", "author": {"user": {"login": "anguillanneuf", "name": "Tianzi Cai"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/bf5d4ffe7d54a7e29823b4b3e9dba90422dd7361", "committedDate": "2020-08-10T23:46:38Z", "message": "apply lesv's suggestion and make try block static"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NjY2ODM0", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3480#pullrequestreview-464666834", "createdAt": "2020-08-11T00:10:45Z", "commit": {"oid": "bf5d4ffe7d54a7e29823b4b3e9dba90422dd7361"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMDoxMDo0NVrOG-j6Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMDoxMDo0NVrOG-j6Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1MzI0Mw==", "bodyText": "LOL - I was meaning consider making rand static or a class variable.  https://docs.oracle.com/javase/8/docs/api/java/util/Random.html\nIt's a bit heavyweight.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3480#discussion_r468253243", "createdAt": "2020-08-11T00:10:45Z", "author": {"login": "lesv"}, "path": "pubsub/spring/src/main/java/demo/PubSubApplication.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package demo;\n+\n+import java.util.Random;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import java.util.stream.Stream;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.cloud.gcp.pubsub.core.PubSubTemplate;\n+import org.springframework.cloud.gcp.pubsub.integration.AckMode;\n+import org.springframework.cloud.gcp.pubsub.integration.inbound.PubSubInboundChannelAdapter;\n+import org.springframework.cloud.gcp.pubsub.integration.outbound.PubSubMessageHandler;\n+import org.springframework.cloud.gcp.pubsub.support.BasicAcknowledgeablePubsubMessage;\n+import org.springframework.cloud.gcp.pubsub.support.GcpPubSubHeaders;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.integration.annotation.ServiceActivator;\n+import org.springframework.integration.channel.PublishSubscribeChannel;\n+import org.springframework.integration.support.MessageBuilder;\n+import org.springframework.messaging.Message;\n+import org.springframework.messaging.MessageChannel;\n+import org.springframework.messaging.MessageHandler;\n+import org.springframework.messaging.handler.annotation.Header;\n+import org.springframework.util.concurrent.ListenableFutureCallback;\n+import reactor.core.publisher.Flux;\n+import reactor.core.scheduler.Schedulers;\n+\n+@SpringBootApplication\n+public class PubSubApplication {\n+\n+  private static final Log LOGGER = LogFactory.getLog(PubSubApplication.class);\n+\n+  public static Message<String> generateOneMessagePeriodically(int millis) {\n+    try {\n+      Thread.sleep(millis);\n+    } finally {\n+      Random rand = new Random();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf5d4ffe7d54a7e29823b4b3e9dba90422dd7361"}, "originalPosition": 55}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "055a8570b9fe1b49e24bb9f9bfcf787896bf58b0", "author": {"user": {"login": "anguillanneuf", "name": "Tianzi Cai"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/055a8570b9fe1b49e24bb9f9bfcf787896bf58b0", "committedDate": "2020-08-11T00:33:13Z", "message": "use a seeded rand as a static variable and update readme"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0Njc4OTAx", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3480#pullrequestreview-464678901", "createdAt": "2020-08-11T00:51:12Z", "commit": {"oid": "055a8570b9fe1b49e24bb9f9bfcf787896bf58b0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 514, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}