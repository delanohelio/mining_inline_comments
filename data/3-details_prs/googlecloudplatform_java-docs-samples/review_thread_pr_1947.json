{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNDI3Nzg1", "number": 1947, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNzo1NjoyM1rODX7-FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNzo1NjoyM1rODX7-FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDI2Mzg5OnYy", "diffSide": "RIGHT", "path": "bigtable/hbase/snippets/src/test/java/com/example/bigtable/ReadsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNzo1NjoyM1rOFdgi8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxOTozNzoyNlrOFdjdKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ4NjI1OA==", "bodyText": "Should there be a discussion of key design?  Having a common prefix is ok for tests, but it's exactly the pattern we are trying to discourage users from doing.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1947#discussion_r366486258", "createdAt": "2020-01-14T17:56:23Z", "author": {"login": "lesv"}, "path": "bigtable/hbase/snippets/src/test/java/com/example/bigtable/ReadsTest.java", "diffHunk": "@@ -0,0 +1,346 @@\n+/*\n+ * Copyright 2019 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigtable;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.junit.Assert.assertNotNull;\n+\n+import com.google.cloud.bigtable.admin.v2.BigtableTableAdminClient;\n+import com.google.cloud.bigtable.admin.v2.models.CreateTableRequest;\n+import com.google.cloud.bigtable.data.v2.BigtableDataClient;\n+import com.google.cloud.bigtable.data.v2.models.BulkMutation;\n+import com.google.cloud.bigtable.data.v2.models.Mutation;\n+import com.google.protobuf.ByteString;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.util.UUID;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n+\n+@FixMethodOrder(MethodSorters.NAME_ASCENDING)\n+public class ReadsTest {\n+\n+  private static final String INSTANCE_ENV = \"BIGTABLE_TESTING_INSTANCE\";\n+  private static final String TABLE_ID =\n+      \"mobile-time-series-\" + UUID.randomUUID().toString().substring(0, 20);\n+  private static final String COLUMN_FAMILY_NAME = \"stats_summary\";\n+  private static final long TIMESTAMP = System.currentTimeMillis();\n+  private static final long TIMESTAMP_NANO = TIMESTAMP * 1000;\n+\n+  private static String projectId;\n+  private static String instanceId;\n+  private ByteArrayOutputStream bout;\n+\n+  private static String requireEnv(String varName) {\n+    String value = System.getenv(varName);\n+    assertNotNull(\n+        String.format(\"Environment variable '%s' is required to perform these tests.\", varName),\n+        value);\n+    return value;\n+  }\n+\n+  @BeforeClass\n+  public static void beforeClass() throws IOException {\n+    projectId = requireEnv(\"GOOGLE_CLOUD_PROJECT\");\n+    instanceId = requireEnv(INSTANCE_ENV);\n+\n+    try (BigtableTableAdminClient adminClient =\n+        BigtableTableAdminClient.create(projectId, instanceId)) {\n+      CreateTableRequest createTableRequest =\n+          CreateTableRequest.of(TABLE_ID).addFamily(COLUMN_FAMILY_NAME);\n+      adminClient.createTable(createTableRequest);\n+\n+      try (BigtableDataClient dataClient = BigtableDataClient.create(projectId, instanceId)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51d3a6e751be4dc2eff31ad4d564f9b2658acba7"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzMzkyOA==", "bodyText": "The schema is deviceType#deviceId#YYYYMMDD this was discussed and reviewed with members of the Bigtable team. This is only a small subset of data so we can't really show much variety", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/1947#discussion_r366533928", "createdAt": "2020-01-14T19:37:26Z", "author": {"login": "billyjacobson"}, "path": "bigtable/hbase/snippets/src/test/java/com/example/bigtable/ReadsTest.java", "diffHunk": "@@ -0,0 +1,346 @@\n+/*\n+ * Copyright 2019 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigtable;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.junit.Assert.assertNotNull;\n+\n+import com.google.cloud.bigtable.admin.v2.BigtableTableAdminClient;\n+import com.google.cloud.bigtable.admin.v2.models.CreateTableRequest;\n+import com.google.cloud.bigtable.data.v2.BigtableDataClient;\n+import com.google.cloud.bigtable.data.v2.models.BulkMutation;\n+import com.google.cloud.bigtable.data.v2.models.Mutation;\n+import com.google.protobuf.ByteString;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.util.UUID;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n+\n+@FixMethodOrder(MethodSorters.NAME_ASCENDING)\n+public class ReadsTest {\n+\n+  private static final String INSTANCE_ENV = \"BIGTABLE_TESTING_INSTANCE\";\n+  private static final String TABLE_ID =\n+      \"mobile-time-series-\" + UUID.randomUUID().toString().substring(0, 20);\n+  private static final String COLUMN_FAMILY_NAME = \"stats_summary\";\n+  private static final long TIMESTAMP = System.currentTimeMillis();\n+  private static final long TIMESTAMP_NANO = TIMESTAMP * 1000;\n+\n+  private static String projectId;\n+  private static String instanceId;\n+  private ByteArrayOutputStream bout;\n+\n+  private static String requireEnv(String varName) {\n+    String value = System.getenv(varName);\n+    assertNotNull(\n+        String.format(\"Environment variable '%s' is required to perform these tests.\", varName),\n+        value);\n+    return value;\n+  }\n+\n+  @BeforeClass\n+  public static void beforeClass() throws IOException {\n+    projectId = requireEnv(\"GOOGLE_CLOUD_PROJECT\");\n+    instanceId = requireEnv(INSTANCE_ENV);\n+\n+    try (BigtableTableAdminClient adminClient =\n+        BigtableTableAdminClient.create(projectId, instanceId)) {\n+      CreateTableRequest createTableRequest =\n+          CreateTableRequest.of(TABLE_ID).addFamily(COLUMN_FAMILY_NAME);\n+      adminClient.createTable(createTableRequest);\n+\n+      try (BigtableDataClient dataClient = BigtableDataClient.create(projectId, instanceId)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ4NjI1OA=="}, "originalCommit": {"oid": "51d3a6e751be4dc2eff31ad4d564f9b2658acba7"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 608, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}