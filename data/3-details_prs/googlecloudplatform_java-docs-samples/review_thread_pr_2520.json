{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1NTUyMzEz", "number": 2520, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjo1Njo0OFrODsxAaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzoxOToxN1rODsxiiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjY2ODU2OnYy", "diffSide": "RIGHT", "path": "functions/snippets/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjo1Njo0OFrOF9zOqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjo1Njo0OFrOF9zOqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM0Njc5Mg==", "bodyText": "4.0.0", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2520#discussion_r400346792", "createdAt": "2020-03-30T16:56:48Z", "author": {"login": "lesv"}, "path": "functions/snippets/pom.xml", "diffHunk": "@@ -27,7 +27,30 @@\n     <groovy.version>3.0.2</groovy.version>\n   </properties>\n \n+  <!-- Required for com.example.functions.ImageMagick -->\n+  <dependencyManagement>\n+   <dependencies>\n+    <dependency>\n+      <groupId>com.google.cloud</groupId>\n+      <artifactId>libraries-bom</artifactId>\n+      <version>3.2.0</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e981310bbbc585166ead2a2c242e8be5179036ab"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjY3MTkxOnYy", "diffSide": "RIGHT", "path": "functions/snippets/src/main/java/com/example/functions/ImageMagick.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjo1Nzo0MFrOF9zQ7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODo1ODowM1rOF930dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM0NzM3Mg==", "bodyText": "You can be explicit here if you wish, though, I'd pick a bucket w/ very little else in it.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2520#discussion_r400347372", "createdAt": "2020-03-30T16:57:40Z", "author": {"login": "lesv"}, "path": "functions/snippets/src/main/java/com/example/functions/ImageMagick.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_imagemagick_setup]\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.storage.Blob;\n+import com.google.cloud.storage.BlobId;\n+import com.google.cloud.storage.BlobInfo;\n+import com.google.cloud.storage.Storage;\n+import com.google.cloud.storage.StorageOptions;\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.BatchAnnotateImagesResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.Feature.Type;\n+import com.google.cloud.vision.v1.Image;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageSource;\n+import com.google.cloud.vision.v1.SafeSearchAnnotation;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Logger;\n+\n+public class ImageMagick implements BackgroundFunction<GcsEvent> {\n+\n+  private static Storage storage = StorageOptions.getDefaultInstance().getService();\n+  private static final String BLURRED_BUCKET_NAME = System.getenv(\"BLURRED_BUCKET_NAME\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e981310bbbc585166ead2a2c242e8be5179036ab"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQyMjAwNw==", "bodyText": "This is supposed to be a user-specified bucket. I'll add a README that states that.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2520#discussion_r400422007", "createdAt": "2020-03-30T18:58:03Z", "author": {"login": "ace-n"}, "path": "functions/snippets/src/main/java/com/example/functions/ImageMagick.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_imagemagick_setup]\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.storage.Blob;\n+import com.google.cloud.storage.BlobId;\n+import com.google.cloud.storage.BlobInfo;\n+import com.google.cloud.storage.Storage;\n+import com.google.cloud.storage.StorageOptions;\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.BatchAnnotateImagesResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.Feature.Type;\n+import com.google.cloud.vision.v1.Image;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageSource;\n+import com.google.cloud.vision.v1.SafeSearchAnnotation;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Logger;\n+\n+public class ImageMagick implements BackgroundFunction<GcsEvent> {\n+\n+  private static Storage storage = StorageOptions.getDefaultInstance().getService();\n+  private static final String BLURRED_BUCKET_NAME = System.getenv(\"BLURRED_BUCKET_NAME\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM0NzM3Mg=="}, "originalCommit": {"oid": "e981310bbbc585166ead2a2c242e8be5179036ab"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjcxMDA2OnYy", "diffSide": "RIGHT", "path": "functions/snippets/src/main/java/com/example/functions/ImageMagick.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzowNzoyNlrOF9zo2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMToyNzo1MVrOF984cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1MzQ5Ng==", "bodyText": "We should make sure you have an empty bucket for this if you are letting users provide the event.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2520#discussion_r400353496", "createdAt": "2020-03-30T17:07:26Z", "author": {"login": "lesv"}, "path": "functions/snippets/src/main/java/com/example/functions/ImageMagick.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_imagemagick_setup]\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.storage.Blob;\n+import com.google.cloud.storage.BlobId;\n+import com.google.cloud.storage.BlobInfo;\n+import com.google.cloud.storage.Storage;\n+import com.google.cloud.storage.StorageOptions;\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.BatchAnnotateImagesResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.Feature.Type;\n+import com.google.cloud.vision.v1.Image;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageSource;\n+import com.google.cloud.vision.v1.SafeSearchAnnotation;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Logger;\n+\n+public class ImageMagick implements BackgroundFunction<GcsEvent> {\n+\n+  private static Storage storage = StorageOptions.getDefaultInstance().getService();\n+  private static final String BLURRED_BUCKET_NAME = System.getenv(\"BLURRED_BUCKET_NAME\");\n+  private static final Logger LOGGER = Logger.getLogger(ImageMagick.class.getName());\n+  // [END functions_imagemagick_setup]\n+\n+  // [START functions_imagemagick_analyze]\n+  @Override\n+  // Blurs uploaded images that are flagged as Adult or Violence.\n+  public void accept(GcsEvent gcsEvent, Context context) {\n+    BlobInfo blobInfo = BlobInfo.newBuilder(gcsEvent.getBucket(), gcsEvent.getName()).build();\n+\n+    // Construct URI to GCS bucket and file.\n+    String gcsPath = String.format(\"gs://%s/%s\", gcsEvent.getBucket(), gcsEvent.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e981310bbbc585166ead2a2c242e8be5179036ab"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1NzgwNg==", "bodyText": "There should be a WARNING: In production, you would not want to allow users the ability to provide unsanitized requests directly to APIs.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2520#discussion_r400357806", "createdAt": "2020-03-30T17:14:26Z", "author": {"login": "lesv"}, "path": "functions/snippets/src/main/java/com/example/functions/ImageMagick.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_imagemagick_setup]\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.storage.Blob;\n+import com.google.cloud.storage.BlobId;\n+import com.google.cloud.storage.BlobInfo;\n+import com.google.cloud.storage.Storage;\n+import com.google.cloud.storage.StorageOptions;\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.BatchAnnotateImagesResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.Feature.Type;\n+import com.google.cloud.vision.v1.Image;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageSource;\n+import com.google.cloud.vision.v1.SafeSearchAnnotation;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Logger;\n+\n+public class ImageMagick implements BackgroundFunction<GcsEvent> {\n+\n+  private static Storage storage = StorageOptions.getDefaultInstance().getService();\n+  private static final String BLURRED_BUCKET_NAME = System.getenv(\"BLURRED_BUCKET_NAME\");\n+  private static final Logger LOGGER = Logger.getLogger(ImageMagick.class.getName());\n+  // [END functions_imagemagick_setup]\n+\n+  // [START functions_imagemagick_analyze]\n+  @Override\n+  // Blurs uploaded images that are flagged as Adult or Violence.\n+  public void accept(GcsEvent gcsEvent, Context context) {\n+    BlobInfo blobInfo = BlobInfo.newBuilder(gcsEvent.getBucket(), gcsEvent.getName()).build();\n+\n+    // Construct URI to GCS bucket and file.\n+    String gcsPath = String.format(\"gs://%s/%s\", gcsEvent.getBucket(), gcsEvent.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1MzQ5Ng=="}, "originalCommit": {"oid": "e981310bbbc585166ead2a2c242e8be5179036ab"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQyNzgyNw==", "bodyText": "This is a storage-triggered function - so I'm assuming the request can only come from GCS?\n(Perhaps it's still worth adding a comment to that effect, or maybe something like WARNING: even though this request comes directly from Cloud Storage, it's still a good idea to sanitize it in production to prevent directory traversal attacks)", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2520#discussion_r400427827", "createdAt": "2020-03-30T19:08:18Z", "author": {"login": "ace-n"}, "path": "functions/snippets/src/main/java/com/example/functions/ImageMagick.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_imagemagick_setup]\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.storage.Blob;\n+import com.google.cloud.storage.BlobId;\n+import com.google.cloud.storage.BlobInfo;\n+import com.google.cloud.storage.Storage;\n+import com.google.cloud.storage.StorageOptions;\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.BatchAnnotateImagesResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.Feature.Type;\n+import com.google.cloud.vision.v1.Image;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageSource;\n+import com.google.cloud.vision.v1.SafeSearchAnnotation;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Logger;\n+\n+public class ImageMagick implements BackgroundFunction<GcsEvent> {\n+\n+  private static Storage storage = StorageOptions.getDefaultInstance().getService();\n+  private static final String BLURRED_BUCKET_NAME = System.getenv(\"BLURRED_BUCKET_NAME\");\n+  private static final Logger LOGGER = Logger.getLogger(ImageMagick.class.getName());\n+  // [END functions_imagemagick_setup]\n+\n+  // [START functions_imagemagick_analyze]\n+  @Override\n+  // Blurs uploaded images that are flagged as Adult or Violence.\n+  public void accept(GcsEvent gcsEvent, Context context) {\n+    BlobInfo blobInfo = BlobInfo.newBuilder(gcsEvent.getBucket(), gcsEvent.getName()).build();\n+\n+    // Construct URI to GCS bucket and file.\n+    String gcsPath = String.format(\"gs://%s/%s\", gcsEvent.getBucket(), gcsEvent.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1MzQ5Ng=="}, "originalCommit": {"oid": "e981310bbbc585166ead2a2c242e8be5179036ab"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUwNDk0Ng==", "bodyText": "yes", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2520#discussion_r400504946", "createdAt": "2020-03-30T21:27:51Z", "author": {"login": "lesv"}, "path": "functions/snippets/src/main/java/com/example/functions/ImageMagick.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_imagemagick_setup]\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.storage.Blob;\n+import com.google.cloud.storage.BlobId;\n+import com.google.cloud.storage.BlobInfo;\n+import com.google.cloud.storage.Storage;\n+import com.google.cloud.storage.StorageOptions;\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.BatchAnnotateImagesResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.Feature.Type;\n+import com.google.cloud.vision.v1.Image;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageSource;\n+import com.google.cloud.vision.v1.SafeSearchAnnotation;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Logger;\n+\n+public class ImageMagick implements BackgroundFunction<GcsEvent> {\n+\n+  private static Storage storage = StorageOptions.getDefaultInstance().getService();\n+  private static final String BLURRED_BUCKET_NAME = System.getenv(\"BLURRED_BUCKET_NAME\");\n+  private static final Logger LOGGER = Logger.getLogger(ImageMagick.class.getName());\n+  // [END functions_imagemagick_setup]\n+\n+  // [START functions_imagemagick_analyze]\n+  @Override\n+  // Blurs uploaded images that are flagged as Adult or Violence.\n+  public void accept(GcsEvent gcsEvent, Context context) {\n+    BlobInfo blobInfo = BlobInfo.newBuilder(gcsEvent.getBucket(), gcsEvent.getName()).build();\n+\n+    // Construct URI to GCS bucket and file.\n+    String gcsPath = String.format(\"gs://%s/%s\", gcsEvent.getBucket(), gcsEvent.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1MzQ5Ng=="}, "originalCommit": {"oid": "e981310bbbc585166ead2a2c242e8be5179036ab"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjcyNTI0OnYy", "diffSide": "RIGHT", "path": "functions/snippets/src/main/java/com/example/functions/ImageMagick.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzoxMTo0MFrOF9zy0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxOTowOTo0N1rOF94OmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1NjA0OQ==", "bodyText": "If users can blindly play w/ our buckets we should talk.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2520#discussion_r400356049", "createdAt": "2020-03-30T17:11:40Z", "author": {"login": "lesv"}, "path": "functions/snippets/src/main/java/com/example/functions/ImageMagick.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_imagemagick_setup]\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.storage.Blob;\n+import com.google.cloud.storage.BlobId;\n+import com.google.cloud.storage.BlobInfo;\n+import com.google.cloud.storage.Storage;\n+import com.google.cloud.storage.StorageOptions;\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.BatchAnnotateImagesResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.Feature.Type;\n+import com.google.cloud.vision.v1.Image;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageSource;\n+import com.google.cloud.vision.v1.SafeSearchAnnotation;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Logger;\n+\n+public class ImageMagick implements BackgroundFunction<GcsEvent> {\n+\n+  private static Storage storage = StorageOptions.getDefaultInstance().getService();\n+  private static final String BLURRED_BUCKET_NAME = System.getenv(\"BLURRED_BUCKET_NAME\");\n+  private static final Logger LOGGER = Logger.getLogger(ImageMagick.class.getName());\n+  // [END functions_imagemagick_setup]\n+\n+  // [START functions_imagemagick_analyze]\n+  @Override\n+  // Blurs uploaded images that are flagged as Adult or Violence.\n+  public void accept(GcsEvent gcsEvent, Context context) {\n+    BlobInfo blobInfo = BlobInfo.newBuilder(gcsEvent.getBucket(), gcsEvent.getName()).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e981310bbbc585166ead2a2c242e8be5179036ab"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQyODY5Nw==", "bodyText": "They can't - all they can do is download (read) the zombie.jpg and wakeupcat.jpg files needed to run this test.\n(They have to specify a separate bucket to upload the blurred file to, as per the README I added.)", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2520#discussion_r400428697", "createdAt": "2020-03-30T19:09:47Z", "author": {"login": "ace-n"}, "path": "functions/snippets/src/main/java/com/example/functions/ImageMagick.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+// [START functions_imagemagick_setup]\n+import com.google.cloud.functions.BackgroundFunction;\n+import com.google.cloud.functions.Context;\n+import com.google.cloud.storage.Blob;\n+import com.google.cloud.storage.BlobId;\n+import com.google.cloud.storage.BlobInfo;\n+import com.google.cloud.storage.Storage;\n+import com.google.cloud.storage.StorageOptions;\n+import com.google.cloud.vision.v1.AnnotateImageRequest;\n+import com.google.cloud.vision.v1.AnnotateImageResponse;\n+import com.google.cloud.vision.v1.BatchAnnotateImagesResponse;\n+import com.google.cloud.vision.v1.Feature;\n+import com.google.cloud.vision.v1.Feature.Type;\n+import com.google.cloud.vision.v1.Image;\n+import com.google.cloud.vision.v1.ImageAnnotatorClient;\n+import com.google.cloud.vision.v1.ImageSource;\n+import com.google.cloud.vision.v1.SafeSearchAnnotation;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Logger;\n+\n+public class ImageMagick implements BackgroundFunction<GcsEvent> {\n+\n+  private static Storage storage = StorageOptions.getDefaultInstance().getService();\n+  private static final String BLURRED_BUCKET_NAME = System.getenv(\"BLURRED_BUCKET_NAME\");\n+  private static final Logger LOGGER = Logger.getLogger(ImageMagick.class.getName());\n+  // [END functions_imagemagick_setup]\n+\n+  // [START functions_imagemagick_analyze]\n+  @Override\n+  // Blurs uploaded images that are flagged as Adult or Violence.\n+  public void accept(GcsEvent gcsEvent, Context context) {\n+    BlobInfo blobInfo = BlobInfo.newBuilder(gcsEvent.getBucket(), gcsEvent.getName()).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1NjA0OQ=="}, "originalCommit": {"oid": "e981310bbbc585166ead2a2c242e8be5179036ab"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Mjc1NTkzOnYy", "diffSide": "RIGHT", "path": "functions/snippets/src/test/java/com/example/functions/ImageMagickTests.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzoxOToxN1rOF90GJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxOToxMDozMFrOF94QVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2MDk5OQ==", "bodyText": "These can be pre-existing buckets.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2520#discussion_r400360999", "createdAt": "2020-03-30T17:19:17Z", "author": {"login": "lesv"}, "path": "functions/snippets/src/test/java/com/example/functions/ImageMagickTests.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.common.testing.TestLogHandler;\n+import com.google.gson.Gson;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.logging.LogRecord;\n+import java.util.logging.Logger;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.contrib.java.lang.system.EnvironmentVariables;\n+\n+public class ImageMagickTests {\n+  private static String BUCKET_NAME = System.getenv(\"FUNCTIONS_BUCKET\");\n+  private static String BLURRED_BUCKET_NAME = System.getenv(\"BLURRED_BUCKET_NAME\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e981310bbbc585166ead2a2c242e8be5179036ab"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2MTIyMQ==", "bodyText": "and well known.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2520#discussion_r400361221", "createdAt": "2020-03-30T17:19:41Z", "author": {"login": "lesv"}, "path": "functions/snippets/src/test/java/com/example/functions/ImageMagickTests.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.common.testing.TestLogHandler;\n+import com.google.gson.Gson;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.logging.LogRecord;\n+import java.util.logging.Logger;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.contrib.java.lang.system.EnvironmentVariables;\n+\n+public class ImageMagickTests {\n+  private static String BUCKET_NAME = System.getenv(\"FUNCTIONS_BUCKET\");\n+  private static String BLURRED_BUCKET_NAME = System.getenv(\"BLURRED_BUCKET_NAME\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2MDk5OQ=="}, "originalCommit": {"oid": "e981310bbbc585166ead2a2c242e8be5179036ab"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQyOTE0MA==", "bodyText": "BUCKET_NAME now points to nodejs-docs-samples-tests.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2520#discussion_r400429140", "createdAt": "2020-03-30T19:10:30Z", "author": {"login": "ace-n"}, "path": "functions/snippets/src/test/java/com/example/functions/ImageMagickTests.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.common.testing.TestLogHandler;\n+import com.google.gson.Gson;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.logging.LogRecord;\n+import java.util.logging.Logger;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.contrib.java.lang.system.EnvironmentVariables;\n+\n+public class ImageMagickTests {\n+  private static String BUCKET_NAME = System.getenv(\"FUNCTIONS_BUCKET\");\n+  private static String BLURRED_BUCKET_NAME = System.getenv(\"BLURRED_BUCKET_NAME\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2MDk5OQ=="}, "originalCommit": {"oid": "e981310bbbc585166ead2a2c242e8be5179036ab"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 951, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}