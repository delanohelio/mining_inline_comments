{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2MjI4NjU5", "number": 2692, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDowNDoyMFrODz5mEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDowNDo0OVrODz5m2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzQ3NjAxOnYy", "diffSide": "RIGHT", "path": "healthcare/v1/src/main/java/snippets/healthcare/dicom/DicomStoreImport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDowNDoyMFrOGIlcQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjowNjowNVrOGIpoVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1NTIzNQ==", "bodyText": "Copy / paste nit, duplicate comment", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2692#discussion_r411655235", "createdAt": "2020-04-20T20:04:20Z", "author": {"login": "gguuss"}, "path": "healthcare/v1/src/main/java/snippets/healthcare/dicom/DicomStoreImport.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2019 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package snippets.healthcare.dicom;\n+\n+// [START healthcare_import_dicom_instance]\n+import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n+import com.google.api.client.http.HttpHeaders;\n+import com.google.api.client.http.HttpRequestInitializer;\n+import com.google.api.client.http.javanet.NetHttpTransport;\n+import com.google.api.client.json.JsonFactory;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.services.healthcare.v1.CloudHealthcare;\n+import com.google.api.services.healthcare.v1.CloudHealthcare.Projects.Locations.Datasets.DicomStores;\n+import com.google.api.services.healthcare.v1.CloudHealthcareScopes;\n+import com.google.api.services.healthcare.v1.model.GoogleCloudHealthcareV1DicomGcsSource;\n+import com.google.api.services.healthcare.v1.model.ImportDicomDataRequest;\n+import com.google.api.services.healthcare.v1.model.Operation;\n+import java.io.IOException;\n+import java.util.Collections;\n+\n+public class DicomStoreImport {\n+  private static final String DICOM_NAME = \"projects/%s/locations/%s/datasets/%s/dicomStores/%s\";\n+  private static final JsonFactory JSON_FACTORY = new JacksonFactory();\n+  private static final NetHttpTransport HTTP_TRANSPORT = new NetHttpTransport();\n+\n+  public static void dicomStoreImport(String dicomStoreName, String gcsUri) throws IOException {\n+    // String dicomStoreName =\n+    //    String.format(\n+    //        DICOM_NAME, \"your-project-id\", \"your-region-id\", \"your-dataset-id\", \"your-dicom-id\");\n+    // String gcsUri = \"gs://your-bucket-id/path/to/destination/dir\"\n+\n+    // Initialize the client, which will be used to interact with the service.\n+    CloudHealthcare client = createClient();\n+\n+    // Configure where the store should be imported from.\n+    GoogleCloudHealthcareV1DicomGcsSource gcsSource =\n+        new GoogleCloudHealthcareV1DicomGcsSource().setUri(gcsUri);\n+    ImportDicomDataRequest importRequest = new ImportDicomDataRequest().setGcsSource(gcsSource);\n+\n+    // Create request and configure any parameters.\n+    DicomStores.CloudHealthcareImport request =\n+        client\n+            .projects()\n+            .locations()\n+            .datasets()\n+            .dicomStores()\n+            .healthcareImport(dicomStoreName, importRequest);\n+\n+    // Execute the request, wait for the operation to complete, and process the results.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8e6e591f71ecb627f2509943a0cba577caa0b9b"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcyMzg2Mw==", "bodyText": "Done.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2692#discussion_r411723863", "createdAt": "2020-04-20T22:06:05Z", "author": {"login": "noerog"}, "path": "healthcare/v1/src/main/java/snippets/healthcare/dicom/DicomStoreImport.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2019 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package snippets.healthcare.dicom;\n+\n+// [START healthcare_import_dicom_instance]\n+import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n+import com.google.api.client.http.HttpHeaders;\n+import com.google.api.client.http.HttpRequestInitializer;\n+import com.google.api.client.http.javanet.NetHttpTransport;\n+import com.google.api.client.json.JsonFactory;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.services.healthcare.v1.CloudHealthcare;\n+import com.google.api.services.healthcare.v1.CloudHealthcare.Projects.Locations.Datasets.DicomStores;\n+import com.google.api.services.healthcare.v1.CloudHealthcareScopes;\n+import com.google.api.services.healthcare.v1.model.GoogleCloudHealthcareV1DicomGcsSource;\n+import com.google.api.services.healthcare.v1.model.ImportDicomDataRequest;\n+import com.google.api.services.healthcare.v1.model.Operation;\n+import java.io.IOException;\n+import java.util.Collections;\n+\n+public class DicomStoreImport {\n+  private static final String DICOM_NAME = \"projects/%s/locations/%s/datasets/%s/dicomStores/%s\";\n+  private static final JsonFactory JSON_FACTORY = new JacksonFactory();\n+  private static final NetHttpTransport HTTP_TRANSPORT = new NetHttpTransport();\n+\n+  public static void dicomStoreImport(String dicomStoreName, String gcsUri) throws IOException {\n+    // String dicomStoreName =\n+    //    String.format(\n+    //        DICOM_NAME, \"your-project-id\", \"your-region-id\", \"your-dataset-id\", \"your-dicom-id\");\n+    // String gcsUri = \"gs://your-bucket-id/path/to/destination/dir\"\n+\n+    // Initialize the client, which will be used to interact with the service.\n+    CloudHealthcare client = createClient();\n+\n+    // Configure where the store should be imported from.\n+    GoogleCloudHealthcareV1DicomGcsSource gcsSource =\n+        new GoogleCloudHealthcareV1DicomGcsSource().setUri(gcsUri);\n+    ImportDicomDataRequest importRequest = new ImportDicomDataRequest().setGcsSource(gcsSource);\n+\n+    // Create request and configure any parameters.\n+    DicomStores.CloudHealthcareImport request =\n+        client\n+            .projects()\n+            .locations()\n+            .datasets()\n+            .dicomStores()\n+            .healthcareImport(dicomStoreName, importRequest);\n+\n+    // Execute the request, wait for the operation to complete, and process the results.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1NTIzNQ=="}, "originalCommit": {"oid": "d8e6e591f71ecb627f2509943a0cba577caa0b9b"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzQ3ODAwOnYy", "diffSide": "RIGHT", "path": "healthcare/v1/src/main/java/snippets/healthcare/dicom/DicomStoreList.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDowNDo0OVrOGIldZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjowNjowNFrOGIpoSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1NTUyNQ==", "bodyText": "If it's a new file, 2020.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2692#discussion_r411655525", "createdAt": "2020-04-20T20:04:49Z", "author": {"login": "gguuss"}, "path": "healthcare/v1/src/main/java/snippets/healthcare/dicom/DicomStoreList.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2019 Google LLC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8e6e591f71ecb627f2509943a0cba577caa0b9b"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcyMzg1MA==", "bodyText": "The OSS team said that if you're just moving a file, then you keep the original copyright date. I don't know the particulars of whether copying a file into a new directory constitutes \"moving\", wdyt?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2692#discussion_r411723850", "createdAt": "2020-04-20T22:06:04Z", "author": {"login": "noerog"}, "path": "healthcare/v1/src/main/java/snippets/healthcare/dicom/DicomStoreList.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2019 Google LLC", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1NTUyNQ=="}, "originalCommit": {"oid": "d8e6e591f71ecb627f2509943a0cba577caa0b9b"}, "originalPosition": 2}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 926, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}