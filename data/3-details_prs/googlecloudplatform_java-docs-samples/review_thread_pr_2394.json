{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3NjIwNTIy", "number": 2394, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzoxOTo1MVrODn6dDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzo0NzozMVrODpN37w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTc4NzY1OnYy", "diffSide": "RIGHT", "path": "functions/snippets/pom.xml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzoxOTo1MVrOF2MHCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMDo1NzowNVrOF3FfxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM2NTgzMw==", "bodyText": "I would hope this isn't true.  Can't you also write to stderr / stdout?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2394#discussion_r392365833", "createdAt": "2020-03-13T17:19:51Z", "author": {"login": "lesv"}, "path": "functions/snippets/pom.xml", "diffHunk": "@@ -26,20 +26,32 @@\n   </properties>\n \n   <dependencies>\n-    <!-- Required to for com.example.functions.ParseContentType -->\n+    <!-- Required for com.example.functions.ParseContentType -->\n     <dependency>\n       <groupId>com.google.code.gson</groupId>\n       <artifactId>gson</artifactId>\n       <version>2.8.6</version>\n     </dependency>\n \n-    <!-- Required to for com.example.functions.RetrieveLogs -->\n+    <!-- Required for com.example.functions.RetrieveLogs -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11139788ba9a60eba2a75ba47f30557af1dfbbdb"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI2ODg2Mg==", "bodyText": "That particular sample shows how to retrieve logs from to Stackdriver.\nThe existing samples use java.util.logging.Logger though - would you want me to replace that with System.out.println?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2394#discussion_r393268862", "createdAt": "2020-03-16T19:41:00Z", "author": {"login": "ace-n"}, "path": "functions/snippets/pom.xml", "diffHunk": "@@ -26,20 +26,32 @@\n   </properties>\n \n   <dependencies>\n-    <!-- Required to for com.example.functions.ParseContentType -->\n+    <!-- Required for com.example.functions.ParseContentType -->\n     <dependency>\n       <groupId>com.google.code.gson</groupId>\n       <artifactId>gson</artifactId>\n       <version>2.8.6</version>\n     </dependency>\n \n-    <!-- Required to for com.example.functions.RetrieveLogs -->\n+    <!-- Required for com.example.functions.RetrieveLogs -->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM2NTgzMw=="}, "originalCommit": {"oid": "11139788ba9a60eba2a75ba47f30557af1dfbbdb"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI3NDg4OQ==", "bodyText": "No - My comment wasn't to discourage use, only that most users can just use stdout/stderr and get it logged.  It's only if you want something specialized do you need Stackdriver.\nPerhaps a different comment would be in order, but that's up to you.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2394#discussion_r393274889", "createdAt": "2020-03-16T19:51:44Z", "author": {"login": "lesv"}, "path": "functions/snippets/pom.xml", "diffHunk": "@@ -26,20 +26,32 @@\n   </properties>\n \n   <dependencies>\n-    <!-- Required to for com.example.functions.ParseContentType -->\n+    <!-- Required for com.example.functions.ParseContentType -->\n     <dependency>\n       <groupId>com.google.code.gson</groupId>\n       <artifactId>gson</artifactId>\n       <version>2.8.6</version>\n     </dependency>\n \n-    <!-- Required to for com.example.functions.RetrieveLogs -->\n+    <!-- Required for com.example.functions.RetrieveLogs -->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM2NTgzMw=="}, "originalCommit": {"oid": "11139788ba9a60eba2a75ba47f30557af1dfbbdb"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwNjA1Mw==", "bodyText": "Ah - so you're thinking of the functions_log_helloworld sample in LogHelloWorld.java.\nFair point - I'll add some non-Stackdriver examples there (in a separate PR).", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2394#discussion_r393306053", "createdAt": "2020-03-16T20:57:05Z", "author": {"login": "ace-n"}, "path": "functions/snippets/pom.xml", "diffHunk": "@@ -26,20 +26,32 @@\n   </properties>\n \n   <dependencies>\n-    <!-- Required to for com.example.functions.ParseContentType -->\n+    <!-- Required for com.example.functions.ParseContentType -->\n     <dependency>\n       <groupId>com.google.code.gson</groupId>\n       <artifactId>gson</artifactId>\n       <version>2.8.6</version>\n     </dependency>\n \n-    <!-- Required to for com.example.functions.RetrieveLogs -->\n+    <!-- Required for com.example.functions.RetrieveLogs -->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM2NTgzMw=="}, "originalCommit": {"oid": "11139788ba9a60eba2a75ba47f30557af1dfbbdb"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTc5NDk5OnYy", "diffSide": "RIGHT", "path": "functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzoyMTo1NFrOF2MLkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMTo0NDoyM1rOF2XF0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM2Njk5Mg==", "bodyText": "OK, but isn't this against 12 factor?  (Shouldn't config come from EnvVar's)?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2394#discussion_r392366992", "createdAt": "2020-03-13T17:21:54Z", "author": {"login": "lesv"}, "path": "functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+import com.github.seratch.jslack.app_backend.SlackSignature;\n+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.client.util.ArrayMap;\n+import com.google.api.services.kgsearch.v1.Kgsearch;\n+import com.google.cloud.functions.HttpFunction;\n+import com.google.cloud.functions.HttpRequest;\n+import com.google.cloud.functions.HttpResponse;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.GeneralSecurityException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+public class SlackSlashCommand implements HttpFunction {\n+\n+  private Kgsearch kgClient;\n+  private static String API_KEY;\n+  private static String SLACK_SECRET;\n+  private static final Logger LOGGER = Logger.getLogger(HelloHttp.class.getName());\n+  private SlackSignature.Verifier verifier;\n+  private Gson gson = new Gson();\n+\n+  public SlackSlashCommand() throws IOException, GeneralSecurityException {\n+    kgClient = new Kgsearch.Builder(\n+        GoogleNetHttpTransport.newTrustedTransport(), new JacksonFactory(), null).build();\n+\n+    // Read + parse config file\n+    Path configPath = Path.of(System.getProperty(\"user.dir\"), \"config.json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11139788ba9a60eba2a75ba47f30557af1dfbbdb"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0MjQyNA==", "bodyText": "I'm not sure the Java runtime (easily) supports file uploads anyway - so that or properties in pom.xml are probably the way to go here.\n(The other samples use config.json files, and I was copying what they did.)", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2394#discussion_r392542424", "createdAt": "2020-03-14T01:06:19Z", "author": {"login": "ace-n"}, "path": "functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+import com.github.seratch.jslack.app_backend.SlackSignature;\n+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.client.util.ArrayMap;\n+import com.google.api.services.kgsearch.v1.Kgsearch;\n+import com.google.cloud.functions.HttpFunction;\n+import com.google.cloud.functions.HttpRequest;\n+import com.google.cloud.functions.HttpResponse;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.GeneralSecurityException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+public class SlackSlashCommand implements HttpFunction {\n+\n+  private Kgsearch kgClient;\n+  private static String API_KEY;\n+  private static String SLACK_SECRET;\n+  private static final Logger LOGGER = Logger.getLogger(HelloHttp.class.getName());\n+  private SlackSignature.Verifier verifier;\n+  private Gson gson = new Gson();\n+\n+  public SlackSlashCommand() throws IOException, GeneralSecurityException {\n+    kgClient = new Kgsearch.Builder(\n+        GoogleNetHttpTransport.newTrustedTransport(), new JacksonFactory(), null).build();\n+\n+    // Read + parse config file\n+    Path configPath = Path.of(System.getProperty(\"user.dir\"), \"config.json\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM2Njk5Mg=="}, "originalCommit": {"oid": "11139788ba9a60eba2a75ba47f30557af1dfbbdb"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NTc0NQ==", "bodyText": "Update: decided to use env vars here.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2394#discussion_r392545745", "createdAt": "2020-03-14T01:44:23Z", "author": {"login": "ace-n"}, "path": "functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+import com.github.seratch.jslack.app_backend.SlackSignature;\n+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.client.util.ArrayMap;\n+import com.google.api.services.kgsearch.v1.Kgsearch;\n+import com.google.cloud.functions.HttpFunction;\n+import com.google.cloud.functions.HttpRequest;\n+import com.google.cloud.functions.HttpResponse;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.GeneralSecurityException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+public class SlackSlashCommand implements HttpFunction {\n+\n+  private Kgsearch kgClient;\n+  private static String API_KEY;\n+  private static String SLACK_SECRET;\n+  private static final Logger LOGGER = Logger.getLogger(HelloHttp.class.getName());\n+  private SlackSignature.Verifier verifier;\n+  private Gson gson = new Gson();\n+\n+  public SlackSlashCommand() throws IOException, GeneralSecurityException {\n+    kgClient = new Kgsearch.Builder(\n+        GoogleNetHttpTransport.newTrustedTransport(), new JacksonFactory(), null).build();\n+\n+    // Read + parse config file\n+    Path configPath = Path.of(System.getProperty(\"user.dir\"), \"config.json\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM2Njk5Mg=="}, "originalCommit": {"oid": "11139788ba9a60eba2a75ba47f30557af1dfbbdb"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTgwNzg0OnYy", "diffSide": "RIGHT", "path": "functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzoyNTo0M1rOF2MTuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxOTo1NDo0MlrOF3DrXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM2OTA4MA==", "bodyText": "Not sure what to recommend here - this has lots of stuff wrong.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2394#discussion_r392369080", "createdAt": "2020-03-13T17:25:43Z", "author": {"login": "lesv"}, "path": "functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+import com.github.seratch.jslack.app_backend.SlackSignature;\n+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.client.util.ArrayMap;\n+import com.google.api.services.kgsearch.v1.Kgsearch;\n+import com.google.cloud.functions.HttpFunction;\n+import com.google.cloud.functions.HttpRequest;\n+import com.google.cloud.functions.HttpResponse;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.GeneralSecurityException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+public class SlackSlashCommand implements HttpFunction {\n+\n+  private Kgsearch kgClient;\n+  private static String API_KEY;\n+  private static String SLACK_SECRET;\n+  private static final Logger LOGGER = Logger.getLogger(HelloHttp.class.getName());\n+  private SlackSignature.Verifier verifier;\n+  private Gson gson = new Gson();\n+\n+  public SlackSlashCommand() throws IOException, GeneralSecurityException {\n+    kgClient = new Kgsearch.Builder(\n+        GoogleNetHttpTransport.newTrustedTransport(), new JacksonFactory(), null).build();\n+\n+    // Read + parse config file\n+    Path configPath = Path.of(System.getProperty(\"user.dir\"), \"config.json\");\n+    JsonObject configJson = (new Gson()).fromJson(Files.readString(configPath), JsonObject.class);\n+\n+    SLACK_SECRET = configJson.get(\"SLACK_SECRET\").getAsString();\n+    API_KEY = configJson.get(\"KG_API_KEY\").getAsString();\n+\n+    verifier = new SlackSignature.Verifier(new SlackSignature.Generator(SLACK_SECRET));\n+  }\n+\n+  private boolean isValidSlackWebhook(HttpRequest request, String requestBody) throws IOException {\n+\n+    // Check for headers\n+    HashMap<String, List<String>> headers = new HashMap(request.getHeaders());\n+    if (!headers.containsKey(\"X-Slack-Request-Timestamp\")\n+        || !headers.containsKey(\"X-Slack-Signature\")) {\n+      return false;\n+    }\n+\n+    return verifier.isValid(\n+        headers.get(\"X-Slack-Request-Timestamp\").get(0),\n+        requestBody,\n+        headers.get(\"X-Slack-Signature\").get(0),\n+        1L);\n+  }\n+\n+  private void addPropertyIfPresent(\n+      JsonObject target, String targetName, ArrayMap source, String sourceName) {\n+    if (source.containsKey(sourceName)) {\n+      target.addProperty(targetName, source.get(sourceName).toString());\n+    }\n+  }\n+\n+  private String formatSlackMessage(List<Object> kgResults, String query) {\n+    JsonObject attachmentJson = new JsonObject();\n+    JsonArray attachments = new JsonArray();\n+\n+    JsonObject responseJson = new JsonObject();\n+    responseJson.addProperty(\"response_type\", \"in_channel\");\n+    responseJson.addProperty(\"text\", String.format(\"Query: %s\", query));\n+\n+    // Extract the first entity from the result list, if any\n+    if (kgResults.size() == 0) {\n+      attachmentJson.addProperty(\"text\",\"No results match your query...\");\n+\n+      attachments.add(attachmentJson);\n+      responseJson.add(\"attachments\", attachmentJson);\n+\n+      return gson.toJson(responseJson);\n+    }\n+\n+    ArrayMap entity = (ArrayMap) ((ArrayMap) kgResults.get(0)).get(\"result\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11139788ba9a60eba2a75ba47f30557af1dfbbdb"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0MjUzNQ==", "bodyText": "Would it be better if this [API response] was converted to JSON, and processed that way?\n(Not sure how possible/easy that conversion is off the top of my head, but it may be easier to conceptualize/work with.)\nThat would also fix the toString() and List<Object> usage.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2394#discussion_r392542535", "createdAt": "2020-03-14T01:07:25Z", "author": {"login": "ace-n"}, "path": "functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+import com.github.seratch.jslack.app_backend.SlackSignature;\n+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.client.util.ArrayMap;\n+import com.google.api.services.kgsearch.v1.Kgsearch;\n+import com.google.cloud.functions.HttpFunction;\n+import com.google.cloud.functions.HttpRequest;\n+import com.google.cloud.functions.HttpResponse;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.GeneralSecurityException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+public class SlackSlashCommand implements HttpFunction {\n+\n+  private Kgsearch kgClient;\n+  private static String API_KEY;\n+  private static String SLACK_SECRET;\n+  private static final Logger LOGGER = Logger.getLogger(HelloHttp.class.getName());\n+  private SlackSignature.Verifier verifier;\n+  private Gson gson = new Gson();\n+\n+  public SlackSlashCommand() throws IOException, GeneralSecurityException {\n+    kgClient = new Kgsearch.Builder(\n+        GoogleNetHttpTransport.newTrustedTransport(), new JacksonFactory(), null).build();\n+\n+    // Read + parse config file\n+    Path configPath = Path.of(System.getProperty(\"user.dir\"), \"config.json\");\n+    JsonObject configJson = (new Gson()).fromJson(Files.readString(configPath), JsonObject.class);\n+\n+    SLACK_SECRET = configJson.get(\"SLACK_SECRET\").getAsString();\n+    API_KEY = configJson.get(\"KG_API_KEY\").getAsString();\n+\n+    verifier = new SlackSignature.Verifier(new SlackSignature.Generator(SLACK_SECRET));\n+  }\n+\n+  private boolean isValidSlackWebhook(HttpRequest request, String requestBody) throws IOException {\n+\n+    // Check for headers\n+    HashMap<String, List<String>> headers = new HashMap(request.getHeaders());\n+    if (!headers.containsKey(\"X-Slack-Request-Timestamp\")\n+        || !headers.containsKey(\"X-Slack-Signature\")) {\n+      return false;\n+    }\n+\n+    return verifier.isValid(\n+        headers.get(\"X-Slack-Request-Timestamp\").get(0),\n+        requestBody,\n+        headers.get(\"X-Slack-Signature\").get(0),\n+        1L);\n+  }\n+\n+  private void addPropertyIfPresent(\n+      JsonObject target, String targetName, ArrayMap source, String sourceName) {\n+    if (source.containsKey(sourceName)) {\n+      target.addProperty(targetName, source.get(sourceName).toString());\n+    }\n+  }\n+\n+  private String formatSlackMessage(List<Object> kgResults, String query) {\n+    JsonObject attachmentJson = new JsonObject();\n+    JsonArray attachments = new JsonArray();\n+\n+    JsonObject responseJson = new JsonObject();\n+    responseJson.addProperty(\"response_type\", \"in_channel\");\n+    responseJson.addProperty(\"text\", String.format(\"Query: %s\", query));\n+\n+    // Extract the first entity from the result list, if any\n+    if (kgResults.size() == 0) {\n+      attachmentJson.addProperty(\"text\",\"No results match your query...\");\n+\n+      attachments.add(attachmentJson);\n+      responseJson.add(\"attachments\", attachmentJson);\n+\n+      return gson.toJson(responseJson);\n+    }\n+\n+    ArrayMap entity = (ArrayMap) ((ArrayMap) kgResults.get(0)).get(\"result\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM2OTA4MA=="}, "originalCommit": {"oid": "11139788ba9a60eba2a75ba47f30557af1dfbbdb"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI3NjI1NQ==", "bodyText": "Yea - either to Json, or pass a map with a well defined set of values.  The key is if you are using Object and casting, then you really should check before you actually do the cast.  Java is a strongly typed language, if you skip that, you are missing the point. (note - I'm not saying this is a good thing, only what is Idiomatic)", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2394#discussion_r393276255", "createdAt": "2020-03-16T19:54:42Z", "author": {"login": "lesv"}, "path": "functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+import com.github.seratch.jslack.app_backend.SlackSignature;\n+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.client.util.ArrayMap;\n+import com.google.api.services.kgsearch.v1.Kgsearch;\n+import com.google.cloud.functions.HttpFunction;\n+import com.google.cloud.functions.HttpRequest;\n+import com.google.cloud.functions.HttpResponse;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.GeneralSecurityException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+public class SlackSlashCommand implements HttpFunction {\n+\n+  private Kgsearch kgClient;\n+  private static String API_KEY;\n+  private static String SLACK_SECRET;\n+  private static final Logger LOGGER = Logger.getLogger(HelloHttp.class.getName());\n+  private SlackSignature.Verifier verifier;\n+  private Gson gson = new Gson();\n+\n+  public SlackSlashCommand() throws IOException, GeneralSecurityException {\n+    kgClient = new Kgsearch.Builder(\n+        GoogleNetHttpTransport.newTrustedTransport(), new JacksonFactory(), null).build();\n+\n+    // Read + parse config file\n+    Path configPath = Path.of(System.getProperty(\"user.dir\"), \"config.json\");\n+    JsonObject configJson = (new Gson()).fromJson(Files.readString(configPath), JsonObject.class);\n+\n+    SLACK_SECRET = configJson.get(\"SLACK_SECRET\").getAsString();\n+    API_KEY = configJson.get(\"KG_API_KEY\").getAsString();\n+\n+    verifier = new SlackSignature.Verifier(new SlackSignature.Generator(SLACK_SECRET));\n+  }\n+\n+  private boolean isValidSlackWebhook(HttpRequest request, String requestBody) throws IOException {\n+\n+    // Check for headers\n+    HashMap<String, List<String>> headers = new HashMap(request.getHeaders());\n+    if (!headers.containsKey(\"X-Slack-Request-Timestamp\")\n+        || !headers.containsKey(\"X-Slack-Signature\")) {\n+      return false;\n+    }\n+\n+    return verifier.isValid(\n+        headers.get(\"X-Slack-Request-Timestamp\").get(0),\n+        requestBody,\n+        headers.get(\"X-Slack-Signature\").get(0),\n+        1L);\n+  }\n+\n+  private void addPropertyIfPresent(\n+      JsonObject target, String targetName, ArrayMap source, String sourceName) {\n+    if (source.containsKey(sourceName)) {\n+      target.addProperty(targetName, source.get(sourceName).toString());\n+    }\n+  }\n+\n+  private String formatSlackMessage(List<Object> kgResults, String query) {\n+    JsonObject attachmentJson = new JsonObject();\n+    JsonArray attachments = new JsonArray();\n+\n+    JsonObject responseJson = new JsonObject();\n+    responseJson.addProperty(\"response_type\", \"in_channel\");\n+    responseJson.addProperty(\"text\", String.format(\"Query: %s\", query));\n+\n+    // Extract the first entity from the result list, if any\n+    if (kgResults.size() == 0) {\n+      attachmentJson.addProperty(\"text\",\"No results match your query...\");\n+\n+      attachments.add(attachmentJson);\n+      responseJson.add(\"attachments\", attachmentJson);\n+\n+      return gson.toJson(responseJson);\n+    }\n+\n+    ArrayMap entity = (ArrayMap) ((ArrayMap) kgResults.get(0)).get(\"result\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM2OTA4MA=="}, "originalCommit": {"oid": "11139788ba9a60eba2a75ba47f30557af1dfbbdb"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTgwODY3OnYy", "diffSide": "RIGHT", "path": "functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzoyNTo1NlrOF2MUOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxOTo1NTowMFrOF3Dr4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM2OTIwOA==", "bodyText": "List is rarely a good idea.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2394#discussion_r392369208", "createdAt": "2020-03-13T17:25:56Z", "author": {"login": "lesv"}, "path": "functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+import com.github.seratch.jslack.app_backend.SlackSignature;\n+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.client.util.ArrayMap;\n+import com.google.api.services.kgsearch.v1.Kgsearch;\n+import com.google.cloud.functions.HttpFunction;\n+import com.google.cloud.functions.HttpRequest;\n+import com.google.cloud.functions.HttpResponse;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.GeneralSecurityException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+public class SlackSlashCommand implements HttpFunction {\n+\n+  private Kgsearch kgClient;\n+  private static String API_KEY;\n+  private static String SLACK_SECRET;\n+  private static final Logger LOGGER = Logger.getLogger(HelloHttp.class.getName());\n+  private SlackSignature.Verifier verifier;\n+  private Gson gson = new Gson();\n+\n+  public SlackSlashCommand() throws IOException, GeneralSecurityException {\n+    kgClient = new Kgsearch.Builder(\n+        GoogleNetHttpTransport.newTrustedTransport(), new JacksonFactory(), null).build();\n+\n+    // Read + parse config file\n+    Path configPath = Path.of(System.getProperty(\"user.dir\"), \"config.json\");\n+    JsonObject configJson = (new Gson()).fromJson(Files.readString(configPath), JsonObject.class);\n+\n+    SLACK_SECRET = configJson.get(\"SLACK_SECRET\").getAsString();\n+    API_KEY = configJson.get(\"KG_API_KEY\").getAsString();\n+\n+    verifier = new SlackSignature.Verifier(new SlackSignature.Generator(SLACK_SECRET));\n+  }\n+\n+  private boolean isValidSlackWebhook(HttpRequest request, String requestBody) throws IOException {\n+\n+    // Check for headers\n+    HashMap<String, List<String>> headers = new HashMap(request.getHeaders());\n+    if (!headers.containsKey(\"X-Slack-Request-Timestamp\")\n+        || !headers.containsKey(\"X-Slack-Signature\")) {\n+      return false;\n+    }\n+\n+    return verifier.isValid(\n+        headers.get(\"X-Slack-Request-Timestamp\").get(0),\n+        requestBody,\n+        headers.get(\"X-Slack-Signature\").get(0),\n+        1L);\n+  }\n+\n+  private void addPropertyIfPresent(\n+      JsonObject target, String targetName, ArrayMap source, String sourceName) {\n+    if (source.containsKey(sourceName)) {\n+      target.addProperty(targetName, source.get(sourceName).toString());\n+    }\n+  }\n+\n+  private String formatSlackMessage(List<Object> kgResults, String query) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11139788ba9a60eba2a75ba47f30557af1dfbbdb"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NTgyNQ==", "bodyText": "Refactored (to use JsonObject) per the comment below.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2394#discussion_r392545825", "createdAt": "2020-03-14T01:45:39Z", "author": {"login": "ace-n"}, "path": "functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+import com.github.seratch.jslack.app_backend.SlackSignature;\n+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.client.util.ArrayMap;\n+import com.google.api.services.kgsearch.v1.Kgsearch;\n+import com.google.cloud.functions.HttpFunction;\n+import com.google.cloud.functions.HttpRequest;\n+import com.google.cloud.functions.HttpResponse;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.GeneralSecurityException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+public class SlackSlashCommand implements HttpFunction {\n+\n+  private Kgsearch kgClient;\n+  private static String API_KEY;\n+  private static String SLACK_SECRET;\n+  private static final Logger LOGGER = Logger.getLogger(HelloHttp.class.getName());\n+  private SlackSignature.Verifier verifier;\n+  private Gson gson = new Gson();\n+\n+  public SlackSlashCommand() throws IOException, GeneralSecurityException {\n+    kgClient = new Kgsearch.Builder(\n+        GoogleNetHttpTransport.newTrustedTransport(), new JacksonFactory(), null).build();\n+\n+    // Read + parse config file\n+    Path configPath = Path.of(System.getProperty(\"user.dir\"), \"config.json\");\n+    JsonObject configJson = (new Gson()).fromJson(Files.readString(configPath), JsonObject.class);\n+\n+    SLACK_SECRET = configJson.get(\"SLACK_SECRET\").getAsString();\n+    API_KEY = configJson.get(\"KG_API_KEY\").getAsString();\n+\n+    verifier = new SlackSignature.Verifier(new SlackSignature.Generator(SLACK_SECRET));\n+  }\n+\n+  private boolean isValidSlackWebhook(HttpRequest request, String requestBody) throws IOException {\n+\n+    // Check for headers\n+    HashMap<String, List<String>> headers = new HashMap(request.getHeaders());\n+    if (!headers.containsKey(\"X-Slack-Request-Timestamp\")\n+        || !headers.containsKey(\"X-Slack-Signature\")) {\n+      return false;\n+    }\n+\n+    return verifier.isValid(\n+        headers.get(\"X-Slack-Request-Timestamp\").get(0),\n+        requestBody,\n+        headers.get(\"X-Slack-Signature\").get(0),\n+        1L);\n+  }\n+\n+  private void addPropertyIfPresent(\n+      JsonObject target, String targetName, ArrayMap source, String sourceName) {\n+    if (source.containsKey(sourceName)) {\n+      target.addProperty(targetName, source.get(sourceName).toString());\n+    }\n+  }\n+\n+  private String formatSlackMessage(List<Object> kgResults, String query) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM2OTIwOA=="}, "originalCommit": {"oid": "11139788ba9a60eba2a75ba47f30557af1dfbbdb"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI3NjM4Ng==", "bodyText": "Sounds good.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2394#discussion_r393276386", "createdAt": "2020-03-16T19:55:00Z", "author": {"login": "lesv"}, "path": "functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+import com.github.seratch.jslack.app_backend.SlackSignature;\n+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.client.util.ArrayMap;\n+import com.google.api.services.kgsearch.v1.Kgsearch;\n+import com.google.cloud.functions.HttpFunction;\n+import com.google.cloud.functions.HttpRequest;\n+import com.google.cloud.functions.HttpResponse;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.GeneralSecurityException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+public class SlackSlashCommand implements HttpFunction {\n+\n+  private Kgsearch kgClient;\n+  private static String API_KEY;\n+  private static String SLACK_SECRET;\n+  private static final Logger LOGGER = Logger.getLogger(HelloHttp.class.getName());\n+  private SlackSignature.Verifier verifier;\n+  private Gson gson = new Gson();\n+\n+  public SlackSlashCommand() throws IOException, GeneralSecurityException {\n+    kgClient = new Kgsearch.Builder(\n+        GoogleNetHttpTransport.newTrustedTransport(), new JacksonFactory(), null).build();\n+\n+    // Read + parse config file\n+    Path configPath = Path.of(System.getProperty(\"user.dir\"), \"config.json\");\n+    JsonObject configJson = (new Gson()).fromJson(Files.readString(configPath), JsonObject.class);\n+\n+    SLACK_SECRET = configJson.get(\"SLACK_SECRET\").getAsString();\n+    API_KEY = configJson.get(\"KG_API_KEY\").getAsString();\n+\n+    verifier = new SlackSignature.Verifier(new SlackSignature.Generator(SLACK_SECRET));\n+  }\n+\n+  private boolean isValidSlackWebhook(HttpRequest request, String requestBody) throws IOException {\n+\n+    // Check for headers\n+    HashMap<String, List<String>> headers = new HashMap(request.getHeaders());\n+    if (!headers.containsKey(\"X-Slack-Request-Timestamp\")\n+        || !headers.containsKey(\"X-Slack-Signature\")) {\n+      return false;\n+    }\n+\n+    return verifier.isValid(\n+        headers.get(\"X-Slack-Request-Timestamp\").get(0),\n+        requestBody,\n+        headers.get(\"X-Slack-Signature\").get(0),\n+        1L);\n+  }\n+\n+  private void addPropertyIfPresent(\n+      JsonObject target, String targetName, ArrayMap source, String sourceName) {\n+    if (source.containsKey(sourceName)) {\n+      target.addProperty(targetName, source.get(sourceName).toString());\n+    }\n+  }\n+\n+  private String formatSlackMessage(List<Object> kgResults, String query) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM2OTIwOA=="}, "originalCommit": {"oid": "11139788ba9a60eba2a75ba47f30557af1dfbbdb"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTgxNjk2OnYy", "diffSide": "RIGHT", "path": "functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzoyODoyNVrOF2MZjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMTo0Nzo0MFrOF2XGww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3MDU3NA==", "bodyText": "Lots of .toString()'s are often a flag of bad design.  .toString() on an object isn't guaranteed to provide something presentable.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2394#discussion_r392370574", "createdAt": "2020-03-13T17:28:25Z", "author": {"login": "lesv"}, "path": "functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+import com.github.seratch.jslack.app_backend.SlackSignature;\n+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.client.util.ArrayMap;\n+import com.google.api.services.kgsearch.v1.Kgsearch;\n+import com.google.cloud.functions.HttpFunction;\n+import com.google.cloud.functions.HttpRequest;\n+import com.google.cloud.functions.HttpResponse;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.GeneralSecurityException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+public class SlackSlashCommand implements HttpFunction {\n+\n+  private Kgsearch kgClient;\n+  private static String API_KEY;\n+  private static String SLACK_SECRET;\n+  private static final Logger LOGGER = Logger.getLogger(HelloHttp.class.getName());\n+  private SlackSignature.Verifier verifier;\n+  private Gson gson = new Gson();\n+\n+  public SlackSlashCommand() throws IOException, GeneralSecurityException {\n+    kgClient = new Kgsearch.Builder(\n+        GoogleNetHttpTransport.newTrustedTransport(), new JacksonFactory(), null).build();\n+\n+    // Read + parse config file\n+    Path configPath = Path.of(System.getProperty(\"user.dir\"), \"config.json\");\n+    JsonObject configJson = (new Gson()).fromJson(Files.readString(configPath), JsonObject.class);\n+\n+    SLACK_SECRET = configJson.get(\"SLACK_SECRET\").getAsString();\n+    API_KEY = configJson.get(\"KG_API_KEY\").getAsString();\n+\n+    verifier = new SlackSignature.Verifier(new SlackSignature.Generator(SLACK_SECRET));\n+  }\n+\n+  private boolean isValidSlackWebhook(HttpRequest request, String requestBody) throws IOException {\n+\n+    // Check for headers\n+    HashMap<String, List<String>> headers = new HashMap(request.getHeaders());\n+    if (!headers.containsKey(\"X-Slack-Request-Timestamp\")\n+        || !headers.containsKey(\"X-Slack-Signature\")) {\n+      return false;\n+    }\n+\n+    return verifier.isValid(\n+        headers.get(\"X-Slack-Request-Timestamp\").get(0),\n+        requestBody,\n+        headers.get(\"X-Slack-Signature\").get(0),\n+        1L);\n+  }\n+\n+  private void addPropertyIfPresent(\n+      JsonObject target, String targetName, ArrayMap source, String sourceName) {\n+    if (source.containsKey(sourceName)) {\n+      target.addProperty(targetName, source.get(sourceName).toString());\n+    }\n+  }\n+\n+  private String formatSlackMessage(List<Object> kgResults, String query) {\n+    JsonObject attachmentJson = new JsonObject();\n+    JsonArray attachments = new JsonArray();\n+\n+    JsonObject responseJson = new JsonObject();\n+    responseJson.addProperty(\"response_type\", \"in_channel\");\n+    responseJson.addProperty(\"text\", String.format(\"Query: %s\", query));\n+\n+    // Extract the first entity from the result list, if any\n+    if (kgResults.size() == 0) {\n+      attachmentJson.addProperty(\"text\",\"No results match your query...\");\n+\n+      attachments.add(attachmentJson);\n+      responseJson.add(\"attachments\", attachmentJson);\n+\n+      return gson.toJson(responseJson);\n+    }\n+\n+    ArrayMap entity = (ArrayMap) ((ArrayMap) kgResults.get(0)).get(\"result\");\n+\n+    // Construct Knowledge Graph response attachment\n+    String title = entity.get(\"name\").toString();\n+    if (entity.containsKey(\"description\")) {\n+      title = String.format(\"%s: %s\", title, entity.get(\"description\").toString());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11139788ba9a60eba2a75ba47f30557af1dfbbdb"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NTk4Nw==", "bodyText": "Refactored to use JsonObject (and getAsString()).", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2394#discussion_r392545987", "createdAt": "2020-03-14T01:47:40Z", "author": {"login": "ace-n"}, "path": "functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+import com.github.seratch.jslack.app_backend.SlackSignature;\n+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.client.util.ArrayMap;\n+import com.google.api.services.kgsearch.v1.Kgsearch;\n+import com.google.cloud.functions.HttpFunction;\n+import com.google.cloud.functions.HttpRequest;\n+import com.google.cloud.functions.HttpResponse;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.GeneralSecurityException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+public class SlackSlashCommand implements HttpFunction {\n+\n+  private Kgsearch kgClient;\n+  private static String API_KEY;\n+  private static String SLACK_SECRET;\n+  private static final Logger LOGGER = Logger.getLogger(HelloHttp.class.getName());\n+  private SlackSignature.Verifier verifier;\n+  private Gson gson = new Gson();\n+\n+  public SlackSlashCommand() throws IOException, GeneralSecurityException {\n+    kgClient = new Kgsearch.Builder(\n+        GoogleNetHttpTransport.newTrustedTransport(), new JacksonFactory(), null).build();\n+\n+    // Read + parse config file\n+    Path configPath = Path.of(System.getProperty(\"user.dir\"), \"config.json\");\n+    JsonObject configJson = (new Gson()).fromJson(Files.readString(configPath), JsonObject.class);\n+\n+    SLACK_SECRET = configJson.get(\"SLACK_SECRET\").getAsString();\n+    API_KEY = configJson.get(\"KG_API_KEY\").getAsString();\n+\n+    verifier = new SlackSignature.Verifier(new SlackSignature.Generator(SLACK_SECRET));\n+  }\n+\n+  private boolean isValidSlackWebhook(HttpRequest request, String requestBody) throws IOException {\n+\n+    // Check for headers\n+    HashMap<String, List<String>> headers = new HashMap(request.getHeaders());\n+    if (!headers.containsKey(\"X-Slack-Request-Timestamp\")\n+        || !headers.containsKey(\"X-Slack-Signature\")) {\n+      return false;\n+    }\n+\n+    return verifier.isValid(\n+        headers.get(\"X-Slack-Request-Timestamp\").get(0),\n+        requestBody,\n+        headers.get(\"X-Slack-Signature\").get(0),\n+        1L);\n+  }\n+\n+  private void addPropertyIfPresent(\n+      JsonObject target, String targetName, ArrayMap source, String sourceName) {\n+    if (source.containsKey(sourceName)) {\n+      target.addProperty(targetName, source.get(sourceName).toString());\n+    }\n+  }\n+\n+  private String formatSlackMessage(List<Object> kgResults, String query) {\n+    JsonObject attachmentJson = new JsonObject();\n+    JsonArray attachments = new JsonArray();\n+\n+    JsonObject responseJson = new JsonObject();\n+    responseJson.addProperty(\"response_type\", \"in_channel\");\n+    responseJson.addProperty(\"text\", String.format(\"Query: %s\", query));\n+\n+    // Extract the first entity from the result list, if any\n+    if (kgResults.size() == 0) {\n+      attachmentJson.addProperty(\"text\",\"No results match your query...\");\n+\n+      attachments.add(attachmentJson);\n+      responseJson.add(\"attachments\", attachmentJson);\n+\n+      return gson.toJson(responseJson);\n+    }\n+\n+    ArrayMap entity = (ArrayMap) ((ArrayMap) kgResults.get(0)).get(\"result\");\n+\n+    // Construct Knowledge Graph response attachment\n+    String title = entity.get(\"name\").toString();\n+    if (entity.containsKey(\"description\")) {\n+      title = String.format(\"%s: %s\", title, entity.get(\"description\").toString());\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3MDU3NA=="}, "originalCommit": {"oid": "11139788ba9a60eba2a75ba47f30557af1dfbbdb"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTgyNDY4OnYy", "diffSide": "RIGHT", "path": "functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzozMDo1NVrOF2Meqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzozMDo1NVrOF2Meqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3MTg4Mg==", "bodyText": "You rarely need private, and List<Object> is rarely correct.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2394#discussion_r392371882", "createdAt": "2020-03-13T17:30:55Z", "author": {"login": "lesv"}, "path": "functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+import com.github.seratch.jslack.app_backend.SlackSignature;\n+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.client.util.ArrayMap;\n+import com.google.api.services.kgsearch.v1.Kgsearch;\n+import com.google.cloud.functions.HttpFunction;\n+import com.google.cloud.functions.HttpRequest;\n+import com.google.cloud.functions.HttpResponse;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.GeneralSecurityException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+public class SlackSlashCommand implements HttpFunction {\n+\n+  private Kgsearch kgClient;\n+  private static String API_KEY;\n+  private static String SLACK_SECRET;\n+  private static final Logger LOGGER = Logger.getLogger(HelloHttp.class.getName());\n+  private SlackSignature.Verifier verifier;\n+  private Gson gson = new Gson();\n+\n+  public SlackSlashCommand() throws IOException, GeneralSecurityException {\n+    kgClient = new Kgsearch.Builder(\n+        GoogleNetHttpTransport.newTrustedTransport(), new JacksonFactory(), null).build();\n+\n+    // Read + parse config file\n+    Path configPath = Path.of(System.getProperty(\"user.dir\"), \"config.json\");\n+    JsonObject configJson = (new Gson()).fromJson(Files.readString(configPath), JsonObject.class);\n+\n+    SLACK_SECRET = configJson.get(\"SLACK_SECRET\").getAsString();\n+    API_KEY = configJson.get(\"KG_API_KEY\").getAsString();\n+\n+    verifier = new SlackSignature.Verifier(new SlackSignature.Generator(SLACK_SECRET));\n+  }\n+\n+  private boolean isValidSlackWebhook(HttpRequest request, String requestBody) throws IOException {\n+\n+    // Check for headers\n+    HashMap<String, List<String>> headers = new HashMap(request.getHeaders());\n+    if (!headers.containsKey(\"X-Slack-Request-Timestamp\")\n+        || !headers.containsKey(\"X-Slack-Signature\")) {\n+      return false;\n+    }\n+\n+    return verifier.isValid(\n+        headers.get(\"X-Slack-Request-Timestamp\").get(0),\n+        requestBody,\n+        headers.get(\"X-Slack-Signature\").get(0),\n+        1L);\n+  }\n+\n+  private void addPropertyIfPresent(\n+      JsonObject target, String targetName, ArrayMap source, String sourceName) {\n+    if (source.containsKey(sourceName)) {\n+      target.addProperty(targetName, source.get(sourceName).toString());\n+    }\n+  }\n+\n+  private String formatSlackMessage(List<Object> kgResults, String query) {\n+    JsonObject attachmentJson = new JsonObject();\n+    JsonArray attachments = new JsonArray();\n+\n+    JsonObject responseJson = new JsonObject();\n+    responseJson.addProperty(\"response_type\", \"in_channel\");\n+    responseJson.addProperty(\"text\", String.format(\"Query: %s\", query));\n+\n+    // Extract the first entity from the result list, if any\n+    if (kgResults.size() == 0) {\n+      attachmentJson.addProperty(\"text\",\"No results match your query...\");\n+\n+      attachments.add(attachmentJson);\n+      responseJson.add(\"attachments\", attachmentJson);\n+\n+      return gson.toJson(responseJson);\n+    }\n+\n+    ArrayMap entity = (ArrayMap) ((ArrayMap) kgResults.get(0)).get(\"result\");\n+\n+    // Construct Knowledge Graph response attachment\n+    String title = entity.get(\"name\").toString();\n+    if (entity.containsKey(\"description\")) {\n+      title = String.format(\"%s: %s\", title, entity.get(\"description\").toString());\n+    }\n+    attachmentJson.addProperty(\"title\", title);\n+\n+    if (entity.containsKey(\"detailedDescription\")) {\n+      ArrayMap detailedDescJson = (ArrayMap) entity.get(\"detailedDescription\");\n+      addPropertyIfPresent(attachmentJson, \"title_link\", detailedDescJson, \"url\");\n+      addPropertyIfPresent(attachmentJson, \"text\", detailedDescJson, \"articleBody\");\n+    }\n+\n+    if (entity.containsKey(\"image\")) {\n+      ArrayMap imageJson = (ArrayMap) entity.get(\"image\");\n+      addPropertyIfPresent(attachmentJson, \"image_url\", imageJson, \"contentUrl\");\n+    }\n+\n+    // Construct top level response\n+    attachments.add(attachmentJson);\n+    responseJson.add(\"attachments\", attachmentJson);\n+\n+    return gson.toJson(responseJson);\n+  }\n+\n+  private List<Object> searchKnowledgeGraph(String query) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11139788ba9a60eba2a75ba47f30557af1dfbbdb"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTgyNjA0OnYy", "diffSide": "RIGHT", "path": "functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzozMToyMFrOF2Mffg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMTo0NDo1OFrOF2XF6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3MjA5NA==", "bodyText": "private probably isn't needed.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2394#discussion_r392372094", "createdAt": "2020-03-13T17:31:20Z", "author": {"login": "lesv"}, "path": "functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+import com.github.seratch.jslack.app_backend.SlackSignature;\n+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.client.util.ArrayMap;\n+import com.google.api.services.kgsearch.v1.Kgsearch;\n+import com.google.cloud.functions.HttpFunction;\n+import com.google.cloud.functions.HttpRequest;\n+import com.google.cloud.functions.HttpResponse;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.GeneralSecurityException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+public class SlackSlashCommand implements HttpFunction {\n+\n+  private Kgsearch kgClient;\n+  private static String API_KEY;\n+  private static String SLACK_SECRET;\n+  private static final Logger LOGGER = Logger.getLogger(HelloHttp.class.getName());\n+  private SlackSignature.Verifier verifier;\n+  private Gson gson = new Gson();\n+\n+  public SlackSlashCommand() throws IOException, GeneralSecurityException {\n+    kgClient = new Kgsearch.Builder(\n+        GoogleNetHttpTransport.newTrustedTransport(), new JacksonFactory(), null).build();\n+\n+    // Read + parse config file\n+    Path configPath = Path.of(System.getProperty(\"user.dir\"), \"config.json\");\n+    JsonObject configJson = (new Gson()).fromJson(Files.readString(configPath), JsonObject.class);\n+\n+    SLACK_SECRET = configJson.get(\"SLACK_SECRET\").getAsString();\n+    API_KEY = configJson.get(\"KG_API_KEY\").getAsString();\n+\n+    verifier = new SlackSignature.Verifier(new SlackSignature.Generator(SLACK_SECRET));\n+  }\n+\n+  private boolean isValidSlackWebhook(HttpRequest request, String requestBody) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11139788ba9a60eba2a75ba47f30557af1dfbbdb"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NTc3MQ==", "bodyText": "Done. (Removed private keyword from method declarations in this file.)", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2394#discussion_r392545771", "createdAt": "2020-03-14T01:44:58Z", "author": {"login": "ace-n"}, "path": "functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+import com.github.seratch.jslack.app_backend.SlackSignature;\n+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.client.util.ArrayMap;\n+import com.google.api.services.kgsearch.v1.Kgsearch;\n+import com.google.cloud.functions.HttpFunction;\n+import com.google.cloud.functions.HttpRequest;\n+import com.google.cloud.functions.HttpResponse;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.GeneralSecurityException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+public class SlackSlashCommand implements HttpFunction {\n+\n+  private Kgsearch kgClient;\n+  private static String API_KEY;\n+  private static String SLACK_SECRET;\n+  private static final Logger LOGGER = Logger.getLogger(HelloHttp.class.getName());\n+  private SlackSignature.Verifier verifier;\n+  private Gson gson = new Gson();\n+\n+  public SlackSlashCommand() throws IOException, GeneralSecurityException {\n+    kgClient = new Kgsearch.Builder(\n+        GoogleNetHttpTransport.newTrustedTransport(), new JacksonFactory(), null).build();\n+\n+    // Read + parse config file\n+    Path configPath = Path.of(System.getProperty(\"user.dir\"), \"config.json\");\n+    JsonObject configJson = (new Gson()).fromJson(Files.readString(configPath), JsonObject.class);\n+\n+    SLACK_SECRET = configJson.get(\"SLACK_SECRET\").getAsString();\n+    API_KEY = configJson.get(\"KG_API_KEY\").getAsString();\n+\n+    verifier = new SlackSignature.Verifier(new SlackSignature.Generator(SLACK_SECRET));\n+  }\n+\n+  private boolean isValidSlackWebhook(HttpRequest request, String requestBody) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3MjA5NA=="}, "originalCommit": {"oid": "11139788ba9a60eba2a75ba47f30557af1dfbbdb"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTgzMDIyOnYy", "diffSide": "RIGHT", "path": "functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzozMjoyN1rOF2MiDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzozMjoyN1rOF2MiDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3Mjc1MQ==", "bodyText": "List<Object> rarely a good idea.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2394#discussion_r392372751", "createdAt": "2020-03-13T17:32:27Z", "author": {"login": "lesv"}, "path": "functions/snippets/src/main/java/com/example/functions/SlackSlashCommand.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.functions;\n+\n+import com.github.seratch.jslack.app_backend.SlackSignature;\n+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.client.util.ArrayMap;\n+import com.google.api.services.kgsearch.v1.Kgsearch;\n+import com.google.cloud.functions.HttpFunction;\n+import com.google.cloud.functions.HttpRequest;\n+import com.google.cloud.functions.HttpResponse;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.GeneralSecurityException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+public class SlackSlashCommand implements HttpFunction {\n+\n+  private Kgsearch kgClient;\n+  private static String API_KEY;\n+  private static String SLACK_SECRET;\n+  private static final Logger LOGGER = Logger.getLogger(HelloHttp.class.getName());\n+  private SlackSignature.Verifier verifier;\n+  private Gson gson = new Gson();\n+\n+  public SlackSlashCommand() throws IOException, GeneralSecurityException {\n+    kgClient = new Kgsearch.Builder(\n+        GoogleNetHttpTransport.newTrustedTransport(), new JacksonFactory(), null).build();\n+\n+    // Read + parse config file\n+    Path configPath = Path.of(System.getProperty(\"user.dir\"), \"config.json\");\n+    JsonObject configJson = (new Gson()).fromJson(Files.readString(configPath), JsonObject.class);\n+\n+    SLACK_SECRET = configJson.get(\"SLACK_SECRET\").getAsString();\n+    API_KEY = configJson.get(\"KG_API_KEY\").getAsString();\n+\n+    verifier = new SlackSignature.Verifier(new SlackSignature.Generator(SLACK_SECRET));\n+  }\n+\n+  private boolean isValidSlackWebhook(HttpRequest request, String requestBody) throws IOException {\n+\n+    // Check for headers\n+    HashMap<String, List<String>> headers = new HashMap(request.getHeaders());\n+    if (!headers.containsKey(\"X-Slack-Request-Timestamp\")\n+        || !headers.containsKey(\"X-Slack-Signature\")) {\n+      return false;\n+    }\n+\n+    return verifier.isValid(\n+        headers.get(\"X-Slack-Request-Timestamp\").get(0),\n+        requestBody,\n+        headers.get(\"X-Slack-Signature\").get(0),\n+        1L);\n+  }\n+\n+  private void addPropertyIfPresent(\n+      JsonObject target, String targetName, ArrayMap source, String sourceName) {\n+    if (source.containsKey(sourceName)) {\n+      target.addProperty(targetName, source.get(sourceName).toString());\n+    }\n+  }\n+\n+  private String formatSlackMessage(List<Object> kgResults, String query) {\n+    JsonObject attachmentJson = new JsonObject();\n+    JsonArray attachments = new JsonArray();\n+\n+    JsonObject responseJson = new JsonObject();\n+    responseJson.addProperty(\"response_type\", \"in_channel\");\n+    responseJson.addProperty(\"text\", String.format(\"Query: %s\", query));\n+\n+    // Extract the first entity from the result list, if any\n+    if (kgResults.size() == 0) {\n+      attachmentJson.addProperty(\"text\",\"No results match your query...\");\n+\n+      attachments.add(attachmentJson);\n+      responseJson.add(\"attachments\", attachmentJson);\n+\n+      return gson.toJson(responseJson);\n+    }\n+\n+    ArrayMap entity = (ArrayMap) ((ArrayMap) kgResults.get(0)).get(\"result\");\n+\n+    // Construct Knowledge Graph response attachment\n+    String title = entity.get(\"name\").toString();\n+    if (entity.containsKey(\"description\")) {\n+      title = String.format(\"%s: %s\", title, entity.get(\"description\").toString());\n+    }\n+    attachmentJson.addProperty(\"title\", title);\n+\n+    if (entity.containsKey(\"detailedDescription\")) {\n+      ArrayMap detailedDescJson = (ArrayMap) entity.get(\"detailedDescription\");\n+      addPropertyIfPresent(attachmentJson, \"title_link\", detailedDescJson, \"url\");\n+      addPropertyIfPresent(attachmentJson, \"text\", detailedDescJson, \"articleBody\");\n+    }\n+\n+    if (entity.containsKey(\"image\")) {\n+      ArrayMap imageJson = (ArrayMap) entity.get(\"image\");\n+      addPropertyIfPresent(attachmentJson, \"image_url\", imageJson, \"contentUrl\");\n+    }\n+\n+    // Construct top level response\n+    attachments.add(attachmentJson);\n+    responseJson.add(\"attachments\", attachmentJson);\n+\n+    return gson.toJson(responseJson);\n+  }\n+\n+  private List<Object> searchKnowledgeGraph(String query) throws IOException {\n+    Kgsearch.Entities.Search kgRequest = kgClient.entities().search();\n+    kgRequest.setQuery(query);\n+    kgRequest.setKey(API_KEY);\n+\n+    return kgRequest.execute().getItemListElement();\n+  }\n+\n+  @Override\n+  public void service(HttpRequest request, HttpResponse response) throws IOException {\n+\n+    // Validate request\n+    if (request.getMethod() != \"POST\") {\n+      response.setStatusCode(HttpURLConnection.HTTP_BAD_METHOD);\n+      return;\n+    }\n+\n+    // reader can only be read once per request, so we preserve its contents\n+    String bodyString = request.getReader().lines().collect(Collectors.joining());\n+    JsonObject body = (new Gson()).fromJson(bodyString, JsonObject.class);\n+\n+    if (body == null || !body.has(\"text\")) {\n+      response.setStatusCode(HttpURLConnection.HTTP_BAD_REQUEST);\n+      return;\n+    }\n+\n+    if (!isValidSlackWebhook(request, bodyString)) {\n+      response.setStatusCode(HttpURLConnection.HTTP_UNAUTHORIZED);\n+      return;\n+    }\n+\n+    String query = body.get(\"text\").getAsString();\n+\n+    // Call knowledge graph API\n+    List<Object> kgResults = searchKnowledgeGraph(query);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11139788ba9a60eba2a75ba47f30557af1dfbbdb"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzk0NDU1OnYy", "diffSide": "RIGHT", "path": ".kokoro/tests/run_tests.sh", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMTowMjo1OFrOF3Fq1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMTowMjo1OFrOF3Fq1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwODg4Nw==", "bodyText": "Thanks - probably should have been in it's own PR", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2394#discussion_r393308887", "createdAt": "2020-03-16T21:02:58Z", "author": {"login": "lesv"}, "path": ".kokoro/tests/run_tests.sh", "diffHunk": "@@ -65,12 +65,14 @@ if [[ \"$SCRIPT_DEBUG\" != \"true\" ]]; then\n     source \"${KOKORO_GFILE_DIR}/aws-secrets.sh\"\n     # shellcheck source=src/storage-hmac-credentials.sh\n     source \"${KOKORO_GFILE_DIR}/storage-hmac-credentials.sh\"\n-    # shellcheck source=src/dlp_secrets.sh\n+    # shellcheck source=src/dlp_secrets.txt\n     source \"${KOKORO_GFILE_DIR}/dlp_secrets.txt\"\n-    # shellcheck source=src/bigtable_secrets.sh\n+    # shellcheck source=src/bigtable_secrets.txt\n     source \"${KOKORO_GFILE_DIR}/bigtable_secrets.txt\"\n-    # shellcheck source=src/automl_secrets.sh\n+    # shellcheck source=src/automl_secrets.txt\n     source \"${KOKORO_GFILE_DIR}/automl_secrets.txt\"\n+    # shellcheck source=src/functions_secrets.txt\n+    source \"${KOKORO_GFILE_DIR}/functions_secrets.txt\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6383b60197d0fd0818776938476c4f06ee9d3833"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzk2NTI4OnYy", "diffSide": "RIGHT", "path": "functions/snippets/config.slack.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMToxMDoxNlrOF3F3zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMToxMDoxNlrOF3F3zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMxMjIwNA==", "bodyText": "Should this now be removed?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2394#discussion_r393312204", "createdAt": "2020-03-16T21:10:16Z", "author": {"login": "lesv"}, "path": "functions/snippets/config.slack.json", "diffHunk": "@@ -0,0 +1,4 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6383b60197d0fd0818776938476c4f06ee9d3833"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTQ1NTE5OnYy", "diffSide": "RIGHT", "path": "functions/snippets/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzo0NzozMVrOF4QUNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMToxNTo1MVrOF5FVFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUzMTg5Mw==", "bodyText": ".gcloudignore isn't going to github, so you are turning off our tests.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2394#discussion_r394531893", "createdAt": "2020-03-18T17:47:31Z", "author": {"login": "lesv"}, "path": "functions/snippets/pom.xml", "diffHunk": "@@ -102,10 +114,36 @@\n     </dependency>\n   </dependencies>\n \n-  <!-- Required for Java 8 (Alpha) functions in the inline editor -->\n+  <!-- Disable tests when deploying to GCF -->\n+  <!-- (where .gcloudignore isn't present) -->\n+  <profiles>\n+    <profile>\n+      <activation>\n+        <file>\n+          <missing>.gcloudignore</missing>\n+        </file>\n+      </activation>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "032e107f06f1b82eb5da399f653be4ab60c72f92"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwMDQ3MQ==", "bodyText": "Found an alternative workaround; see b/151989174 for a proposed longer-term solution.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2394#discussion_r395400471", "createdAt": "2020-03-20T01:15:51Z", "author": {"login": "ace-n"}, "path": "functions/snippets/pom.xml", "diffHunk": "@@ -102,10 +114,36 @@\n     </dependency>\n   </dependencies>\n \n-  <!-- Required for Java 8 (Alpha) functions in the inline editor -->\n+  <!-- Disable tests when deploying to GCF -->\n+  <!-- (where .gcloudignore isn't present) -->\n+  <profiles>\n+    <profile>\n+      <activation>\n+        <file>\n+          <missing>.gcloudignore</missing>\n+        </file>\n+      </activation>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUzMTg5Mw=="}, "originalCommit": {"oid": "032e107f06f1b82eb5da399f653be4ab60c72f92"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 994, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}