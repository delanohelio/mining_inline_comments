{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMTUxMzI2", "number": 3118, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODo0Njo1OFrOEEa1hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODo0Njo1OFrOEEa1hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDY5NDQ2OnYy", "diffSide": "RIGHT", "path": "dlp/src/main/java/dlp/snippets/DeIdentifyTableWithFpe.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODo0Njo1OFrOGiB-lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMjoyOTo0MlrOGiIaog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMzNzE3NQ==", "bodyText": "Can we move both of these under projectId so users don't missing filling them in?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3118#discussion_r438337175", "createdAt": "2020-06-10T18:46:58Z", "author": {"login": "averikitsch"}, "path": "dlp/src/main/java/dlp/snippets/DeIdentifyTableWithFpe.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+// [START dlp_deidentify_table_fpe]\n+\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.common.io.BaseEncoding;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.CryptoKey;\n+import com.google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig;\n+import com.google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.FfxCommonNativeAlphabet;\n+import com.google.privacy.dlp.v2.DeidentifyConfig;\n+import com.google.privacy.dlp.v2.DeidentifyContentRequest;\n+import com.google.privacy.dlp.v2.DeidentifyContentResponse;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.FieldTransformation;\n+import com.google.privacy.dlp.v2.InfoType;\n+import com.google.privacy.dlp.v2.InfoTypeTransformations;\n+import com.google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.KmsWrappedCryptoKey;\n+import com.google.privacy.dlp.v2.LocationName;\n+import com.google.privacy.dlp.v2.PrimitiveTransformation;\n+import com.google.privacy.dlp.v2.RecordTransformations;\n+import com.google.privacy.dlp.v2.Table;\n+import com.google.privacy.dlp.v2.Table.Row;\n+import com.google.privacy.dlp.v2.Value;\n+import com.google.protobuf.ByteString;\n+import java.io.IOException;\n+import java.util.Arrays;\n+\n+public class DeIdentifyTableWithFpe {\n+\n+  public static void deIdentifyTableWithFpe() throws IOException {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"your-project-id\";\n+    Table tableToDeIdentify = Table.newBuilder()\n+        .addHeaders(FieldId.newBuilder().setName(\"Employee ID\").build())\n+        .addHeaders(FieldId.newBuilder().setName(\"Date\").build())\n+        .addHeaders(FieldId.newBuilder().setName(\"Compensation\").build())\n+        .addRows(Row.newBuilder()\n+            .addValues(Value.newBuilder().setStringValue(\"11111\").build())\n+            .addValues(Value.newBuilder().setStringValue(\"2015\").build())\n+            .addValues(Value.newBuilder().setStringValue(\"$10\").build())\n+            .build())\n+        .addRows(Row.newBuilder()\n+            .addValues(Value.newBuilder().setStringValue(\"11111\").build())\n+            .addValues(Value.newBuilder().setStringValue(\"2016\").build())\n+            .addValues(Value.newBuilder().setStringValue(\"$20\").build())\n+            .build())\n+        .addRows(Row.newBuilder()\n+            .addValues(Value.newBuilder().setStringValue(\"22222\").build())\n+            .addValues(Value.newBuilder().setStringValue(\"2016\").build())\n+            .addValues(Value.newBuilder().setStringValue(\"$15\").build())\n+            .build())\n+        .build();\n+    String kmsKeyName =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec11f90c76dbcb55cf72a74e83765bf9ae94e65"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ0MjY1OA==", "bodyText": "Good point, updated", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3118#discussion_r438442658", "createdAt": "2020-06-10T22:29:42Z", "author": {"login": "jakubrauch"}, "path": "dlp/src/main/java/dlp/snippets/DeIdentifyTableWithFpe.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+// [START dlp_deidentify_table_fpe]\n+\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.common.io.BaseEncoding;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.CryptoKey;\n+import com.google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig;\n+import com.google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.FfxCommonNativeAlphabet;\n+import com.google.privacy.dlp.v2.DeidentifyConfig;\n+import com.google.privacy.dlp.v2.DeidentifyContentRequest;\n+import com.google.privacy.dlp.v2.DeidentifyContentResponse;\n+import com.google.privacy.dlp.v2.FieldId;\n+import com.google.privacy.dlp.v2.FieldTransformation;\n+import com.google.privacy.dlp.v2.InfoType;\n+import com.google.privacy.dlp.v2.InfoTypeTransformations;\n+import com.google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.KmsWrappedCryptoKey;\n+import com.google.privacy.dlp.v2.LocationName;\n+import com.google.privacy.dlp.v2.PrimitiveTransformation;\n+import com.google.privacy.dlp.v2.RecordTransformations;\n+import com.google.privacy.dlp.v2.Table;\n+import com.google.privacy.dlp.v2.Table.Row;\n+import com.google.privacy.dlp.v2.Value;\n+import com.google.protobuf.ByteString;\n+import java.io.IOException;\n+import java.util.Arrays;\n+\n+public class DeIdentifyTableWithFpe {\n+\n+  public static void deIdentifyTableWithFpe() throws IOException {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"your-project-id\";\n+    Table tableToDeIdentify = Table.newBuilder()\n+        .addHeaders(FieldId.newBuilder().setName(\"Employee ID\").build())\n+        .addHeaders(FieldId.newBuilder().setName(\"Date\").build())\n+        .addHeaders(FieldId.newBuilder().setName(\"Compensation\").build())\n+        .addRows(Row.newBuilder()\n+            .addValues(Value.newBuilder().setStringValue(\"11111\").build())\n+            .addValues(Value.newBuilder().setStringValue(\"2015\").build())\n+            .addValues(Value.newBuilder().setStringValue(\"$10\").build())\n+            .build())\n+        .addRows(Row.newBuilder()\n+            .addValues(Value.newBuilder().setStringValue(\"11111\").build())\n+            .addValues(Value.newBuilder().setStringValue(\"2016\").build())\n+            .addValues(Value.newBuilder().setStringValue(\"$20\").build())\n+            .build())\n+        .addRows(Row.newBuilder()\n+            .addValues(Value.newBuilder().setStringValue(\"22222\").build())\n+            .addValues(Value.newBuilder().setStringValue(\"2016\").build())\n+            .addValues(Value.newBuilder().setStringValue(\"$15\").build())\n+            .build())\n+        .build();\n+    String kmsKeyName =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMzNzE3NQ=="}, "originalCommit": {"oid": "fec11f90c76dbcb55cf72a74e83765bf9ae94e65"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 629, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}