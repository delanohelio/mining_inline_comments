{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0MzQ0Nzg5", "number": 2504, "title": "Update Guidelines", "bodyText": "Update Contributing to closer match the current cononical version.\nAdd PULL_REQUEST_TEMPLATE\nUpdate README to closer add the License requirement from the cononical version.\nMajor revision of SAMPLE_FORMAT", "createdAt": "2020-03-26T18:28:42Z", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2504", "merged": true, "mergeCommit": {"oid": "e12cc5c26c1814fb0329dd059f2941a5b63a9a68"}, "closed": true, "closedAt": "2020-03-27T21:10:52Z", "author": {"login": "lesv"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRgZpNAH2gAyMzk0MzQ0Nzg5OmZhYzYzOTRlNDA0MmYzYTU5MmM4Njc5N2U3ZjBkMDMyZjRiYTQzOTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcR3OJ3AFqTM4MzE5NzkyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fac6394e4042f3a592c86797e7f0d032f4ba4399", "author": {"user": {"login": "lesv", "name": "Les Vogel"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/fac6394e4042f3a592c86797e7f0d032f4ba4399", "committedDate": "2020-03-26T18:27:46Z", "message": "Update Guidelines\n\n* Update Contributing to closer match the current cononical version.\n* Add PULL_REQUEST_TEMPLATE\n* Update README to closer add the License requirement from the cononical version.\n* Major revision of SAMPLE_FORMAT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ea270cfc108c0ad7334756ad0bd98e6fe7699d8", "author": {"user": {"login": "lesv", "name": "Les Vogel"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/7ea270cfc108c0ad7334756ad0bd98e6fe7699d8", "committedDate": "2020-03-26T18:28:50Z", "message": "Merge branch 'master' into update_guidelines"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMzM5OTA2", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2504#pullrequestreview-382339906", "createdAt": "2020-03-26T19:20:53Z", "commit": {"oid": "7ea270cfc108c0ad7334756ad0bd98e6fe7699d8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOToyMDo1NFrOF8WxhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOToyMDo1NFrOF8WxhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzMjAwNA==", "bodyText": "Will this be updated in another PR?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2504#discussion_r398832004", "createdAt": "2020-03-26T19:20:54Z", "author": {"login": "averikitsch"}, "path": "SAMPLE_FORMAT.md", "diffHunk": "@@ -25,19 +57,128 @@ specifically mentioned in the format, samples should make best-effort attempts i\n * __Idiomatic__ - examples should make best attempts to remain idiomatic and encourage good \n   practices that are specific to a language or practice. \n \n-## Format Guidelines\n+## Build Tools\n+\n+All new samples should build and run integration tests with [Maven](https://maven.apache.org/).\n+[Gradle](https://gradle.org/) support is optional as we don't yet have regular testing.\n+\n+## Testing\n+Snippets should have integration tests that should verify the snippet works and compiles correctly.\n+Creating mocks for these tests are optional. These tests should capture output created by the\n+snippet to verify that it works correctly. See the tests in the canonical for an example of how to\n+do this correctly. \n+\n+* Test Library: [JUnit4](https://junit.org/junit4/)\n+* Test Runner: [Maven Failsafe plugin](https://maven.apache.org/surefire/maven-failsafe-plugin/)\n+and [Maven Surefire plugin](https://maven.apache.org/surefire/maven-surefire-plugin/).\n \n+As an example, the following test code shows how we test a region tag called `region_tag`:\n+```java\n+package com.google.example;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * Store region_tag in test method name, camel-cased\n+ */ \n+@RunWith(JUnit4.class)\n+public class SomeClassTest {\n+  @Test public void regionTag_shouldPass() throws Exception { }\n+\n+  @Test public void regionTag_shouldFail() throws Exception {\n+    Assert.fail(\"should fail\");\n+  }\n+}\n+```\n+You will note that the \"_\" in `region_tag` is removed, and \"_\" is used to separate regionTags from\n+test descriptions.\n+\n+It is also possible to use annotations to provide info for `region_tag` if you need to do this,\n+please contact one of the repo admins.\n+\n+### Testing Setup\n+Most samples require a GCP project and billing account. Keep the following in\n+mind when setting up tests.\n+\n+* **Environment variables**  \n+  Minimize additional environment variables that need to be set to run the tests.\n+  If you do require additional environment variables, they should be added to\n+  `run_tests.sh`.\n+\n+  Existing environment variables include:\n+  * `GOOGLE_APPLICATION_CREDENTIALS`\n+  * `GOOGLE_CLOUD_PROJECT`\n+  * `PROJECT_ID`\n+\n+* **API library**  \n+  If an API needs to be enabled in the testing project, add this information to the\n+  directory's README and to the comments in the PR. If there is no README.md file, add one\n+  in your PR.\n+\n+* **IAM**\n+  Some API's require that the service account have some additional capibilities, these should also\n+  be mentioned in both the PR and the README.\n+\n+* **Cloud resources**  \n+  Most Java samples create the Cloud resources that they need to run. If this\n+  is resource intensive or not possible, add instructions to the directory's CONTRIBUTING.md file\n+  to add the resource to the testing project.\n+\n+* **Keys and Secrets**\n+  Add a note in the pull request, in order for a Java maintainer to assist you\n+  in adding keys and secrets to the testing project.\n+  \n+### Running Locally\n+Run tests locally with commands:\n+\n+* Maven: `mvn verify`\n+* Gradle: `gradle build test`\n+\n+### Gradle Specifics\n+#### NEEDS WORK", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea270cfc108c0ad7334756ad0bd98e6fe7699d8"}, "originalPosition": 137}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMzQyNDk2", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2504#pullrequestreview-382342496", "createdAt": "2020-03-26T19:24:41Z", "commit": {"oid": "7ea270cfc108c0ad7334756ad0bd98e6fe7699d8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOToyNDo0MVrOF8W6Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOToyNDo0MVrOF8W6Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzNDI1OA==", "bodyText": "Should we note that this isn't recommended anymore?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2504#discussion_r398834258", "createdAt": "2020-03-26T19:24:41Z", "author": {"login": "averikitsch"}, "path": "SAMPLE_FORMAT.md", "diffHunk": "@@ -75,50 +218,90 @@ should be used instead of explicitly declaring the client version. See the below\n ```\n \n ### Project Configuration\n-Use of environment variables over system properties is strongly preferred for configuration. \n+Use of environment variables over system properties is strongly preferred for configuration.\n \n Any additional files required should be stored in `src/test/resources`.\n \n-\n ### Project Setup\n The README.md should contain instructions for the user to get the samples operable. Ideally, steps\n   such as project or resource setup should be links to Cloud Documentation. This is to reduce \n   duplicate instructions and README maintenance in the future. \n \n+# Code\n+### Arrange, Act, Assert\n+Samples should generally follow the \"Arrange, Act, Assert\" outline to: \n+* _Arrange_ - Create and configure the components for the request. Avoid nesting these components,\n+  as complex, nested builders can be hard to read.\n+* _Act_ - Send the request and receive the response.\n+* _Assert_ - Verify the call was successful or that the response is correct. This is often done by\n+  print contents of the response to `stdout`.\n+\n+## Style\n+Samples in this repository follow the [Google Java Style Guide][java-style].\n+This is enforced by [Checkstyle](https://checkstyle.org/) and the\n+[Maven Checkstyle Plugin][checkstyle-plugin].\n+\n+[java-style]: https://google.github.io/styleguide/javaguide.html\n+[checkstyle-plugin]: https://maven.apache.org/plugins/maven-checkstyle-plugin/\n+\n+Use the [google-java-format][google-java-format] tool to automatically reformat\n+your source code to adhere to the style guide. It is available as a command-line\n+tool or IntelliJ plugin.\n+\n+[google-java-format]: https://github.com/google/google-java-format\n+\n+### Linting\n+To run the checkstyle & ErrorProne plugins on an existing sample, run\n+\n+```shell\n+mvn clean verify -DskipTests\n+```\n+\n+The `-DskipTests` is optional. It is useful if you want to verify that your code\n+builds and adheres to the style guide without waiting for tests to complete.\n+\n+### Command-Line Arguments", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea270cfc108c0ad7334756ad0bd98e6fe7699d8"}, "originalPosition": 252}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMzQyOTI4", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2504#pullrequestreview-382342928", "createdAt": "2020-03-26T19:25:19Z", "commit": {"oid": "7ea270cfc108c0ad7334756ad0bd98e6fe7699d8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMzQ2MjUz", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2504#pullrequestreview-382346253", "createdAt": "2020-03-26T19:29:35Z", "commit": {"oid": "7ea270cfc108c0ad7334756ad0bd98e6fe7699d8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOToyOTozNVrOF8XG8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOToyOTozNVrOF8XG8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzNzQ4OA==", "bodyText": "Pretty sure this is just cus this is on a branch, but the link doesn't work.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2504#discussion_r398837488", "createdAt": "2020-03-26T19:29:35Z", "author": {"login": "nnegrey"}, "path": "SAMPLE_FORMAT.md", "diffHunk": "@@ -1,15 +1,47 @@\n # Samples Format\n+## Table of Contents\n+  * [Java Version](#java-version)\n+  * [Specific Goals](#specific-goals)\n+  * [Testing](#testing)\n+    * [Testing Setup](#testing-setup)\n+    * [Running Locally](#running-locally)\n+    * [Gradle Specifics](#gradle-specifics)\n+  * [Format Guidelines](#format-guidelines)\n+    * [Location](#project-location)\n+    * [Dependencies](#project-dependencies)\n+    * [Configuration](#project-configuration)\n+    * [Setup](#project-setup)\n+  * [Code](#code)\n+    * [Arrange, Act, Assert](#arrange-act-assert)\n+    * [Style](#style)\n+    * [Linting](#linting)\n+    * [Command-Line Arguments](#command-line-arguments)\n+    * [Package Names](#package-names)\n+    * [Class Structure]()\n+    * [Function Comment]()\n+    * [Function Structure]()\n+    * [Exception Handling]()\n+    * [Client Initialization](#client-initialization)\n+  * [Modern Java](#modern-java)\n+    * [Lambdas](#lambdas)\n+    * [Streams](#streams)\n+    * [Parallel Streams](#parallel-streams)\n+  * [Additional Best Practices](#additional-best-practices)\n+    * [Time](#time)\n+    * [Logging](#logging)\n \n This doc maintains an outline for 'snippet' samples specific to Java. Currently, the java canonical\n samples in this format are located \n-[here](https://github.com/GoogleCloudPlatform/java-docs-samples/tree/master/dlp/src/main/java/dlp/snippets).\n+[here](/tree/master/dlp/src/main/java/dlp/snippets).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea270cfc108c0ad7334756ad0bd98e6fe7699d8"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMzM4ODY3", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2504#pullrequestreview-382338867", "createdAt": "2020-03-26T19:19:28Z", "commit": {"oid": "7ea270cfc108c0ad7334756ad0bd98e6fe7699d8"}, "state": "DISMISSED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOToxOToyOFrOF8WuGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOToyODo0NFrOF8XD8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzMTEzMA==", "bodyText": "Is it worth explaining what region tags are here? (Perhaps for external users and/or Googlers outside our team.)", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2504#discussion_r398831130", "createdAt": "2020-03-26T19:19:28Z", "author": {"login": "ace-n"}, "path": "SAMPLE_FORMAT.md", "diffHunk": "@@ -25,19 +57,128 @@ specifically mentioned in the format, samples should make best-effort attempts i\n * __Idiomatic__ - examples should make best attempts to remain idiomatic and encourage good \n   practices that are specific to a language or practice. \n \n-## Format Guidelines\n+## Build Tools\n+\n+All new samples should build and run integration tests with [Maven](https://maven.apache.org/).\n+[Gradle](https://gradle.org/) support is optional as we don't yet have regular testing.\n+\n+## Testing\n+Snippets should have integration tests that should verify the snippet works and compiles correctly.\n+Creating mocks for these tests are optional. These tests should capture output created by the\n+snippet to verify that it works correctly. See the tests in the canonical for an example of how to\n+do this correctly. \n+\n+* Test Library: [JUnit4](https://junit.org/junit4/)\n+* Test Runner: [Maven Failsafe plugin](https://maven.apache.org/surefire/maven-failsafe-plugin/)\n+and [Maven Surefire plugin](https://maven.apache.org/surefire/maven-surefire-plugin/).\n \n+As an example, the following test code shows how we test a region tag called `region_tag`:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea270cfc108c0ad7334756ad0bd98e6fe7699d8"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzNjA1MQ==", "bodyText": "This should read:\n\nunderscores (_) are used in test method names to separate blocks of camelCase text from test descriptions\nthese blocks denote region tags, which serve as unique IDs for snippets in a given repository\ncamelCase blocks beginning with should or does are not region tags - instead, they simply describe the test being run", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2504#discussion_r398836051", "createdAt": "2020-03-26T19:27:50Z", "author": {"login": "ace-n"}, "path": "SAMPLE_FORMAT.md", "diffHunk": "@@ -25,19 +57,128 @@ specifically mentioned in the format, samples should make best-effort attempts i\n * __Idiomatic__ - examples should make best attempts to remain idiomatic and encourage good \n   practices that are specific to a language or practice. \n \n-## Format Guidelines\n+## Build Tools\n+\n+All new samples should build and run integration tests with [Maven](https://maven.apache.org/).\n+[Gradle](https://gradle.org/) support is optional as we don't yet have regular testing.\n+\n+## Testing\n+Snippets should have integration tests that should verify the snippet works and compiles correctly.\n+Creating mocks for these tests are optional. These tests should capture output created by the\n+snippet to verify that it works correctly. See the tests in the canonical for an example of how to\n+do this correctly. \n+\n+* Test Library: [JUnit4](https://junit.org/junit4/)\n+* Test Runner: [Maven Failsafe plugin](https://maven.apache.org/surefire/maven-failsafe-plugin/)\n+and [Maven Surefire plugin](https://maven.apache.org/surefire/maven-surefire-plugin/).\n \n+As an example, the following test code shows how we test a region tag called `region_tag`:\n+```java\n+package com.google.example;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * Store region_tag in test method name, camel-cased\n+ */ \n+@RunWith(JUnit4.class)\n+public class SomeClassTest {\n+  @Test public void regionTag_shouldPass() throws Exception { }\n+\n+  @Test public void regionTag_shouldFail() throws Exception {\n+    Assert.fail(\"should fail\");\n+  }\n+}\n+```\n+You will note that the \"_\" in `region_tag` is removed, and \"_\" is used to separate regionTags from", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea270cfc108c0ad7334756ad0bd98e6fe7699d8"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzNjcyMQ==", "bodyText": "Nit: printing the", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2504#discussion_r398836721", "createdAt": "2020-03-26T19:28:44Z", "author": {"login": "ace-n"}, "path": "SAMPLE_FORMAT.md", "diffHunk": "@@ -75,50 +218,90 @@ should be used instead of explicitly declaring the client version. See the below\n ```\n \n ### Project Configuration\n-Use of environment variables over system properties is strongly preferred for configuration. \n+Use of environment variables over system properties is strongly preferred for configuration.\n \n Any additional files required should be stored in `src/test/resources`.\n \n-\n ### Project Setup\n The README.md should contain instructions for the user to get the samples operable. Ideally, steps\n   such as project or resource setup should be links to Cloud Documentation. This is to reduce \n   duplicate instructions and README maintenance in the future. \n \n+# Code\n+### Arrange, Act, Assert\n+Samples should generally follow the \"Arrange, Act, Assert\" outline to: \n+* _Arrange_ - Create and configure the components for the request. Avoid nesting these components,\n+  as complex, nested builders can be hard to read.\n+* _Act_ - Send the request and receive the response.\n+* _Assert_ - Verify the call was successful or that the response is correct. This is often done by\n+  print contents of the response to `stdout`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea270cfc108c0ad7334756ad0bd98e6fe7699d8"}, "originalPosition": 226}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMzUyNTQ2", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2504#pullrequestreview-382352546", "createdAt": "2020-03-26T19:38:52Z", "commit": {"oid": "7ea270cfc108c0ad7334756ad0bd98e6fe7699d8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOTozODo1MlrOF8XaWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOTozODo1MlrOF8XaWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg0MjQ1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Snippet functions should specific a return type of `void` and avoid returning any value wherever\n          \n          \n            \n            Snippet functions should specify a return type of `void` and avoid returning any value wherever", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2504#discussion_r398842459", "createdAt": "2020-03-26T19:38:52Z", "author": {"login": "nnegrey"}, "path": "SAMPLE_FORMAT.md", "diffHunk": "@@ -131,7 +314,6 @@ they are example values only.\n Snippet functions should specific a return type of `void` and avoid returning any value wherever", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea270cfc108c0ad7334756ad0bd98e6fe7699d8"}, "originalPosition": 309}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMzAyMzM2", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2504#pullrequestreview-382302336", "createdAt": "2020-03-26T18:36:18Z", "commit": {"oid": "7ea270cfc108c0ad7334756ad0bd98e6fe7699d8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODozNjoxOVrOF8VEpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMTowNTo1OVrOF8aepA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwNDEzMg==", "bodyText": "Can we add something like the following:\n\nChange to samples should be reviewed by both a product stakeholder for accuracy as well as a member of java-samples-reviewers@ to ensure the sample format and best practices for Java are used.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2504#discussion_r398804132", "createdAt": "2020-03-26T18:36:19Z", "author": {"login": "kurtisvg"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,162 +1,34 @@\n-# How to become a contributor and submit your own code\n+# How to Contribute\n \n-* [Contributor License Agreements](#Contributor-License-Agreements)\n-* [Contributing a Patch or New Sample](#Contributing-a-Patch)\n-* [Build Tools](#build-tools)\n-* [Integration Testing](#testing)\n-* [Style](#Style)\n+We'd love to accept your patches and contributions to this project. There are\n+just a few small guidelines you need to follow.\n \n-## Contributor License Agreements\n+## Contributor License Agreement\n \n-We'd love to accept your sample apps and patches! Before we can take them, we\n-have to jump a couple of legal hurdles.\n+Contributions to this project must be accompanied by a Contributor License\n+Agreement. You (or your employer) retain the copyright to your contribution;\n+this simply gives us permission to use and redistribute your contributions as\n+part of the project. Head over to <https://cla.developers.google.com/> to see\n+your current agreements on file or to sign a new one.\n \n-Please fill out either the individual or corporate Contributor License Agreement\n-(CLA).\n-\n-  * If you are an individual writing original source code and you're sure you\n-    own the intellectual property, then you'll need to sign an [individual\n-    CLA](https://developers.google.com/open-source/cla/individual).\n-  * If you work for a company that wants to allow you to contribute your work,\n-    then you'll need to sign a [corporate\n-    CLA](https://developers.google.com/open-source/cla/corporate).\n-\n-Follow either of the two links above to access the appropriate CLA and\n-instructions for how to sign and return it. Once we receive it, we'll be able to\n-accept your pull requests.\n-\n-## Contributing a Patch or New Sample\n-\n-1. Sign a [Contributor License Agreement](#Contributor-License-Agreements).\n-1. Set up your [Java Developer Environment](https://cloud.google.com/java/docs/setup).\n-1. Fork the repo.\n-1. Develop and test your code.\n-1. Ensure that your code adheres to the [SAMPLE_FORMAT.md](SAMPLE_FORMAT.md)\n-guidelines.\n-1. Ensure that your code has an appropriate set of unit tests which all pass.\n-1. Submit a pull request.\n-1. A maintainer will review the pull request and make comments.\n-\n-## Build Tools\n-\n-All new samples should build and run integration tests with both [Maven](https://maven.apache.org/) and [Gradle](https://gradle.org/).\n-\n-## Integration Testing\n-\n-All samples must have integration tests that run with Maven and Gradle\n-\n-* Test Library: [JUnit4](https://junit.org/junit4/)\n-* Test Runner: [Maven Failsafe plugin](https://maven.apache.org/surefire/maven-failsafe-plugin/) and [Maven Surefire plugin](https://maven.apache.org/surefire/maven-surefire-plugin/).\n-\n-### Running Tests Locally\n-\n-Run tests locally with commands:\n-\n-* Maven: `mvn verify`\n-* Gradle: `gradle build test`\n-\n-### Gradle Specifcs\n-Your `build.gradle` should have the following section:\n-\n-```groovy\n-\n-test {\n-  useJUnit()\n-  testLogging.showStandardStreams = true\n-  beforeTest { descriptor ->\n-     logger.lifecycle(\"test: \" + descriptor + \"  Running\")\n-  }\n-\n-  onOutput { descriptor, event ->\n-     logger.lifecycle(\"test: \" + descriptor + \": \" + event.message )\n-  }\n-  afterTest { descriptor, result ->\n-    logger.lifecycle(\"test: \" + descriptor + \": \" + result )\n-  }\n-}\n-```\n-\n-### Other Testing Set Up\n-\n-Most samples require a GCP project and billing account. Keep the following in\n-mind when setting up tests.\n-\n-* **Environment variables**  \n-  Minimize additional environment variables that need to be set to run the tests.\n-  If you do require additional environment variables, they should be added to\n-  `run_tests.sh`.\n-\n-  Existing environment variables include:\n-  * `GOOGLE_APPLICATION_CREDENTIALS`\n-  * `GOOGLE_CLOUD_PROJECT`\n-  * `PROJECT_ID`\n-\n-* **API library**  \n-  If an API needs to be enabled in the testing project, add this information to the\n-  directory's CONTRIBUTING.md file. If there is no CONTRIBUTING.md file, add one in your PR.\n-\n-* **Cloud resources**  \n-  Most Java samples create the Cloud resources that they need to run. If this\n-  is resource intensive or not possible, add instructions to the directory's CONTRIBUTING.md file\n-  to add the resource to the testing project.\n-\n-* **Keys and Secrets**\n-  Add a note in the pull request, in order for a Java maintainer to assist you\n-  in adding keys and secrets to the testing project.\n+You generally only need to submit a CLA once, so if you've already submitted one\n+(even if it was for a different project), you probably don't need to do it\n+again.\n \n ## Style\n \n-Samples in this repository follow the [Google Java Style Guide][java-style].\n-This is enforced using the [Maven Checkstyle Plugin][checkstyle-plugin].\n-\n-[java-style]: https://google.github.io/styleguide/javaguide.html\n-[checkstyle-plugin]: https://maven.apache.org/plugins/maven-checkstyle-plugin/\n-\n-Use the [google-java-format][google-java-format] tool to automatically reformat\n-your source code to adhere to the style guide. It is available as a command-line\n-tool or IntelliJ plugin.\n-\n-[google-java-format]: https://github.com/google/google-java-format\n-\n-### Adding the Checkstyle Plugin to New Samples\n-\n-The samples in this repository use a common parent POM to define plugins used\n-for linting and testing. Add the following to your sample POM to ensure that it\n-uses the common Checkstyle configuration. For more information, see the\n-[java-repo-tools](https://github.com/GoogleCloudPlatform/java-repo-tools)\n-repository.\n-\n-```xml\n-<!--\n-    The parent pom defines common style checks and testing strategies for our samples.\n-    Removing or replacing it should not affect the execution of the samples in anyway.\n-  -->\n-<parent>\n-  <groupId>com.google.cloud</groupId>\n-  <artifactId>doc-samples</artifactId>\n-  <version>1.0.11</version>\n-</parent>\n-```\n-\n-### Running the Linter\n-\n-To run the checkstyle & ErrorProne plugins on an existing sample, run\n+All code should follow the [Sample Format Guidelines](blob/master/SAMPLE_FORMAT.md)\n \n-```shell\n-mvn clean verify -DskipTests\n-```\n+## Code reviews\n \n-The `-DskipTests` is optional. It is useful if you want to verify that your code\n-builds and adheres to the style guide without waiting for tests to complete.\n+All submissions, including submissions by project members, require review. We\n+use GitHub pull requests for this purpose. Consult", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea270cfc108c0ad7334756ad0bd98e6fe7699d8"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwODIwOQ==", "bodyText": "Any infrastructure required to run the test (such as a GCS bucket or a Cloud SQL instance) should be passed in as an environment variable. Tests should clearly indicated which environment variables are required for the tests to pass.\nResources required outside of this infrastructure should be generated and cleaned up (even on failures) as part of the test suite. Please note that tests should run successfully in parallel, and UUIDs should be used to prevent conflicts.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2504#discussion_r398808209", "createdAt": "2020-03-26T18:42:53Z", "author": {"login": "kurtisvg"}, "path": "SAMPLE_FORMAT.md", "diffHunk": "@@ -25,19 +57,128 @@ specifically mentioned in the format, samples should make best-effort attempts i\n * __Idiomatic__ - examples should make best attempts to remain idiomatic and encourage good \n   practices that are specific to a language or practice. \n \n-## Format Guidelines\n+## Build Tools\n+\n+All new samples should build and run integration tests with [Maven](https://maven.apache.org/).\n+[Gradle](https://gradle.org/) support is optional as we don't yet have regular testing.\n+\n+## Testing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea270cfc108c0ad7334756ad0bd98e6fe7699d8"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwODY0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Snippets should have integration tests that should verify the snippet works and compiles correctly.\n          \n          \n            \n            Snippets should have integration tests that should verify the snippet compiles and runs successfully.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2504#discussion_r398808644", "createdAt": "2020-03-26T18:43:33Z", "author": {"login": "kurtisvg"}, "path": "SAMPLE_FORMAT.md", "diffHunk": "@@ -25,19 +57,128 @@ specifically mentioned in the format, samples should make best-effort attempts i\n * __Idiomatic__ - examples should make best attempts to remain idiomatic and encourage good \n   practices that are specific to a language or practice. \n \n-## Format Guidelines\n+## Build Tools\n+\n+All new samples should build and run integration tests with [Maven](https://maven.apache.org/).\n+[Gradle](https://gradle.org/) support is optional as we don't yet have regular testing.\n+\n+## Testing\n+Snippets should have integration tests that should verify the snippet works and compiles correctly.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea270cfc108c0ad7334756ad0bd98e6fe7699d8"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxMDY0Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Creating mocks for these tests are optional. These tests should capture output created by the\n          \n          \n            \n            Tests should only verify that the sample itself is interacting with the service correctly - it is an explicit non goal for tests to verify that API is performing correctly. Because of this, mocks for external services are strongly discouraged.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2504#discussion_r398810642", "createdAt": "2020-03-26T18:46:42Z", "author": {"login": "kurtisvg"}, "path": "SAMPLE_FORMAT.md", "diffHunk": "@@ -25,19 +57,128 @@ specifically mentioned in the format, samples should make best-effort attempts i\n * __Idiomatic__ - examples should make best attempts to remain idiomatic and encourage good \n   practices that are specific to a language or practice. \n \n-## Format Guidelines\n+## Build Tools\n+\n+All new samples should build and run integration tests with [Maven](https://maven.apache.org/).\n+[Gradle](https://gradle.org/) support is optional as we don't yet have regular testing.\n+\n+## Testing\n+Snippets should have integration tests that should verify the snippet works and compiles correctly.\n+Creating mocks for these tests are optional. These tests should capture output created by the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea270cfc108c0ad7334756ad0bd98e6fe7699d8"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxMTc1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            like Compute, CloudRun, Dataproc, Dataflow, functions may have subfolders for other technologies to\n          \n          \n            \n            like Compute, Cloud Run, Dataproc, Dataflow, Functions may have subfolders for other technologies to", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2504#discussion_r398811759", "createdAt": "2020-03-26T18:48:34Z", "author": {"login": "kurtisvg"}, "path": "SAMPLE_FORMAT.md", "diffHunk": "@@ -25,19 +57,128 @@ specifically mentioned in the format, samples should make best-effort attempts i\n * __Idiomatic__ - examples should make best attempts to remain idiomatic and encourage good \n   practices that are specific to a language or practice. \n \n-## Format Guidelines\n+## Build Tools\n+\n+All new samples should build and run integration tests with [Maven](https://maven.apache.org/).\n+[Gradle](https://gradle.org/) support is optional as we don't yet have regular testing.\n+\n+## Testing\n+Snippets should have integration tests that should verify the snippet works and compiles correctly.\n+Creating mocks for these tests are optional. These tests should capture output created by the\n+snippet to verify that it works correctly. See the tests in the canonical for an example of how to\n+do this correctly. \n+\n+* Test Library: [JUnit4](https://junit.org/junit4/)\n+* Test Runner: [Maven Failsafe plugin](https://maven.apache.org/surefire/maven-failsafe-plugin/)\n+and [Maven Surefire plugin](https://maven.apache.org/surefire/maven-surefire-plugin/).\n \n+As an example, the following test code shows how we test a region tag called `region_tag`:\n+```java\n+package com.google.example;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * Store region_tag in test method name, camel-cased\n+ */ \n+@RunWith(JUnit4.class)\n+public class SomeClassTest {\n+  @Test public void regionTag_shouldPass() throws Exception { }\n+\n+  @Test public void regionTag_shouldFail() throws Exception {\n+    Assert.fail(\"should fail\");\n+  }\n+}\n+```\n+You will note that the \"_\" in `region_tag` is removed, and \"_\" is used to separate regionTags from\n+test descriptions.\n+\n+It is also possible to use annotations to provide info for `region_tag` if you need to do this,\n+please contact one of the repo admins.\n+\n+### Testing Setup\n+Most samples require a GCP project and billing account. Keep the following in\n+mind when setting up tests.\n+\n+* **Environment variables**  \n+  Minimize additional environment variables that need to be set to run the tests.\n+  If you do require additional environment variables, they should be added to\n+  `run_tests.sh`.\n+\n+  Existing environment variables include:\n+  * `GOOGLE_APPLICATION_CREDENTIALS`\n+  * `GOOGLE_CLOUD_PROJECT`\n+  * `PROJECT_ID`\n+\n+* **API library**  \n+  If an API needs to be enabled in the testing project, add this information to the\n+  directory's README and to the comments in the PR. If there is no README.md file, add one\n+  in your PR.\n+\n+* **IAM**\n+  Some API's require that the service account have some additional capibilities, these should also\n+  be mentioned in both the PR and the README.\n+\n+* **Cloud resources**  \n+  Most Java samples create the Cloud resources that they need to run. If this\n+  is resource intensive or not possible, add instructions to the directory's CONTRIBUTING.md file\n+  to add the resource to the testing project.\n+\n+* **Keys and Secrets**\n+  Add a note in the pull request, in order for a Java maintainer to assist you\n+  in adding keys and secrets to the testing project.\n+  \n+### Running Locally\n+Run tests locally with commands:\n+\n+* Maven: `mvn verify`\n+* Gradle: `gradle build test`\n+\n+### Gradle Specifics\n+#### NEEDS WORK\n+Your `build.gradle` should have the following section:\n+```groovy\n+test {\n+  useJUnit()\n+  systemProperty 'cucumber.options', '--plugin junit:target/surefire-reports/cucumber-junit.xml' \n+  include '**/*Test.class'\n+}\n+```\n+<!--\n+test {\n+  useJUnit()\n+  testLogging.showStandardStreams = true\n+  beforeTest { descriptor -\\>\n+     logger.lifecycle(\"test: \" + descriptor + \"  Running\")\n+  }\n+\n+  onOutput { descriptor, event -\\>\n+     logger.lifecycle(\"test: \" + descriptor + \": \" + event.message )\n+  }\n+  afterTest { descriptor, result -\\>\n+    logger.lifecycle(\"test: \" + descriptor + \": \" + result )\n+  }\n+}\n+-->\n+\n+## Format Guidelines\n ### Project Location\n-Samples should be in a project folder under the name of the product the snippet represents. \n-  Additional sub folders should be used to differentiate groups of samples. Folder and package paths\n-  should try to avoid containing unnecessary folders to allow users to more easily navigate to the\n-  snippets themselves. \n+Samples should be in a project folder under the name of the technology the snippet represents. \n+Additional sub folders should be used to differentiate groups of samples. Execution technologies,\n+like Compute, CloudRun, Dataproc, Dataflow, functions may have subfolders for other technologies to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea270cfc108c0ad7334756ad0bd98e6fe7699d8"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxMjA4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Additional sub folders should be used to differentiate groups of samples. Execution technologies,\n          \n          \n            \n            Additional subfolders should be used to differentiate groups of samples. Execution technologies,", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2504#discussion_r398812083", "createdAt": "2020-03-26T18:49:03Z", "author": {"login": "kurtisvg"}, "path": "SAMPLE_FORMAT.md", "diffHunk": "@@ -25,19 +57,128 @@ specifically mentioned in the format, samples should make best-effort attempts i\n * __Idiomatic__ - examples should make best attempts to remain idiomatic and encourage good \n   practices that are specific to a language or practice. \n \n-## Format Guidelines\n+## Build Tools\n+\n+All new samples should build and run integration tests with [Maven](https://maven.apache.org/).\n+[Gradle](https://gradle.org/) support is optional as we don't yet have regular testing.\n+\n+## Testing\n+Snippets should have integration tests that should verify the snippet works and compiles correctly.\n+Creating mocks for these tests are optional. These tests should capture output created by the\n+snippet to verify that it works correctly. See the tests in the canonical for an example of how to\n+do this correctly. \n+\n+* Test Library: [JUnit4](https://junit.org/junit4/)\n+* Test Runner: [Maven Failsafe plugin](https://maven.apache.org/surefire/maven-failsafe-plugin/)\n+and [Maven Surefire plugin](https://maven.apache.org/surefire/maven-surefire-plugin/).\n \n+As an example, the following test code shows how we test a region tag called `region_tag`:\n+```java\n+package com.google.example;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * Store region_tag in test method name, camel-cased\n+ */ \n+@RunWith(JUnit4.class)\n+public class SomeClassTest {\n+  @Test public void regionTag_shouldPass() throws Exception { }\n+\n+  @Test public void regionTag_shouldFail() throws Exception {\n+    Assert.fail(\"should fail\");\n+  }\n+}\n+```\n+You will note that the \"_\" in `region_tag` is removed, and \"_\" is used to separate regionTags from\n+test descriptions.\n+\n+It is also possible to use annotations to provide info for `region_tag` if you need to do this,\n+please contact one of the repo admins.\n+\n+### Testing Setup\n+Most samples require a GCP project and billing account. Keep the following in\n+mind when setting up tests.\n+\n+* **Environment variables**  \n+  Minimize additional environment variables that need to be set to run the tests.\n+  If you do require additional environment variables, they should be added to\n+  `run_tests.sh`.\n+\n+  Existing environment variables include:\n+  * `GOOGLE_APPLICATION_CREDENTIALS`\n+  * `GOOGLE_CLOUD_PROJECT`\n+  * `PROJECT_ID`\n+\n+* **API library**  \n+  If an API needs to be enabled in the testing project, add this information to the\n+  directory's README and to the comments in the PR. If there is no README.md file, add one\n+  in your PR.\n+\n+* **IAM**\n+  Some API's require that the service account have some additional capibilities, these should also\n+  be mentioned in both the PR and the README.\n+\n+* **Cloud resources**  \n+  Most Java samples create the Cloud resources that they need to run. If this\n+  is resource intensive or not possible, add instructions to the directory's CONTRIBUTING.md file\n+  to add the resource to the testing project.\n+\n+* **Keys and Secrets**\n+  Add a note in the pull request, in order for a Java maintainer to assist you\n+  in adding keys and secrets to the testing project.\n+  \n+### Running Locally\n+Run tests locally with commands:\n+\n+* Maven: `mvn verify`\n+* Gradle: `gradle build test`\n+\n+### Gradle Specifics\n+#### NEEDS WORK\n+Your `build.gradle` should have the following section:\n+```groovy\n+test {\n+  useJUnit()\n+  systemProperty 'cucumber.options', '--plugin junit:target/surefire-reports/cucumber-junit.xml' \n+  include '**/*Test.class'\n+}\n+```\n+<!--\n+test {\n+  useJUnit()\n+  testLogging.showStandardStreams = true\n+  beforeTest { descriptor -\\>\n+     logger.lifecycle(\"test: \" + descriptor + \"  Running\")\n+  }\n+\n+  onOutput { descriptor, event -\\>\n+     logger.lifecycle(\"test: \" + descriptor + \": \" + event.message )\n+  }\n+  afterTest { descriptor, result -\\>\n+    logger.lifecycle(\"test: \" + descriptor + \": \" + result )\n+  }\n+}\n+-->\n+\n+## Format Guidelines\n ### Project Location\n-Samples should be in a project folder under the name of the product the snippet represents. \n-  Additional sub folders should be used to differentiate groups of samples. Folder and package paths\n-  should try to avoid containing unnecessary folders to allow users to more easily navigate to the\n-  snippets themselves. \n+Samples should be in a project folder under the name of the technology the snippet represents. \n+Additional sub folders should be used to differentiate groups of samples. Execution technologies,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea270cfc108c0ad7334756ad0bd98e6fe7699d8"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxNTY2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Folder and package paths should try to avoid containing unnecessary folders to allow users to more\n          \n          \n            \n            easily navigate to the snippets themselves. \n          \n          \n            \n            Folder and package paths should try to avoid containing unnecessary folders to allow users to more\n          \n          \n            \n            easily navigate to the snippets themselves. However, it is encouraged to use common names like \"snippets\" and \"quickstart\" to allow users to more easily discover the project contents.\n          \n          \n            \n            \n          \n          \n            \n            For example, the the `java-docs-samples/compute` folder may have the following projects:\n          \n          \n            \n            \n          \n          \n            \n            - `compute/snippets`\n          \n          \n            \n            - `compute/quickstart`", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2504#discussion_r398815662", "createdAt": "2020-03-26T18:53:46Z", "author": {"login": "kurtisvg"}, "path": "SAMPLE_FORMAT.md", "diffHunk": "@@ -25,19 +57,128 @@ specifically mentioned in the format, samples should make best-effort attempts i\n * __Idiomatic__ - examples should make best attempts to remain idiomatic and encourage good \n   practices that are specific to a language or practice. \n \n-## Format Guidelines\n+## Build Tools\n+\n+All new samples should build and run integration tests with [Maven](https://maven.apache.org/).\n+[Gradle](https://gradle.org/) support is optional as we don't yet have regular testing.\n+\n+## Testing\n+Snippets should have integration tests that should verify the snippet works and compiles correctly.\n+Creating mocks for these tests are optional. These tests should capture output created by the\n+snippet to verify that it works correctly. See the tests in the canonical for an example of how to\n+do this correctly. \n+\n+* Test Library: [JUnit4](https://junit.org/junit4/)\n+* Test Runner: [Maven Failsafe plugin](https://maven.apache.org/surefire/maven-failsafe-plugin/)\n+and [Maven Surefire plugin](https://maven.apache.org/surefire/maven-surefire-plugin/).\n \n+As an example, the following test code shows how we test a region tag called `region_tag`:\n+```java\n+package com.google.example;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * Store region_tag in test method name, camel-cased\n+ */ \n+@RunWith(JUnit4.class)\n+public class SomeClassTest {\n+  @Test public void regionTag_shouldPass() throws Exception { }\n+\n+  @Test public void regionTag_shouldFail() throws Exception {\n+    Assert.fail(\"should fail\");\n+  }\n+}\n+```\n+You will note that the \"_\" in `region_tag` is removed, and \"_\" is used to separate regionTags from\n+test descriptions.\n+\n+It is also possible to use annotations to provide info for `region_tag` if you need to do this,\n+please contact one of the repo admins.\n+\n+### Testing Setup\n+Most samples require a GCP project and billing account. Keep the following in\n+mind when setting up tests.\n+\n+* **Environment variables**  \n+  Minimize additional environment variables that need to be set to run the tests.\n+  If you do require additional environment variables, they should be added to\n+  `run_tests.sh`.\n+\n+  Existing environment variables include:\n+  * `GOOGLE_APPLICATION_CREDENTIALS`\n+  * `GOOGLE_CLOUD_PROJECT`\n+  * `PROJECT_ID`\n+\n+* **API library**  \n+  If an API needs to be enabled in the testing project, add this information to the\n+  directory's README and to the comments in the PR. If there is no README.md file, add one\n+  in your PR.\n+\n+* **IAM**\n+  Some API's require that the service account have some additional capibilities, these should also\n+  be mentioned in both the PR and the README.\n+\n+* **Cloud resources**  \n+  Most Java samples create the Cloud resources that they need to run. If this\n+  is resource intensive or not possible, add instructions to the directory's CONTRIBUTING.md file\n+  to add the resource to the testing project.\n+\n+* **Keys and Secrets**\n+  Add a note in the pull request, in order for a Java maintainer to assist you\n+  in adding keys and secrets to the testing project.\n+  \n+### Running Locally\n+Run tests locally with commands:\n+\n+* Maven: `mvn verify`\n+* Gradle: `gradle build test`\n+\n+### Gradle Specifics\n+#### NEEDS WORK\n+Your `build.gradle` should have the following section:\n+```groovy\n+test {\n+  useJUnit()\n+  systemProperty 'cucumber.options', '--plugin junit:target/surefire-reports/cucumber-junit.xml' \n+  include '**/*Test.class'\n+}\n+```\n+<!--\n+test {\n+  useJUnit()\n+  testLogging.showStandardStreams = true\n+  beforeTest { descriptor -\\>\n+     logger.lifecycle(\"test: \" + descriptor + \"  Running\")\n+  }\n+\n+  onOutput { descriptor, event -\\>\n+     logger.lifecycle(\"test: \" + descriptor + \": \" + event.message )\n+  }\n+  afterTest { descriptor, result -\\>\n+    logger.lifecycle(\"test: \" + descriptor + \": \" + result )\n+  }\n+}\n+-->\n+\n+## Format Guidelines\n ### Project Location\n-Samples should be in a project folder under the name of the product the snippet represents. \n-  Additional sub folders should be used to differentiate groups of samples. Folder and package paths\n-  should try to avoid containing unnecessary folders to allow users to more easily navigate to the\n-  snippets themselves. \n+Samples should be in a project folder under the name of the technology the snippet represents. \n+Additional sub folders should be used to differentiate groups of samples. Execution technologies,\n+like Compute, CloudRun, Dataproc, Dataflow, functions may have subfolders for other technologies to\n+show using the two technologies together.\n+\n+Folder and package paths should try to avoid containing unnecessary folders to allow users to more\n+easily navigate to the snippets themselves. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea270cfc108c0ad7334756ad0bd98e6fe7699d8"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxNjE2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To run the checkstyle & ErrorProne plugins on an existing sample, run\n          \n          \n            \n            To run the Checkstyle & ErrorProne plugins on an existing sample, run", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2504#discussion_r398816161", "createdAt": "2020-03-26T18:54:40Z", "author": {"login": "kurtisvg"}, "path": "SAMPLE_FORMAT.md", "diffHunk": "@@ -75,50 +218,90 @@ should be used instead of explicitly declaring the client version. See the below\n ```\n \n ### Project Configuration\n-Use of environment variables over system properties is strongly preferred for configuration. \n+Use of environment variables over system properties is strongly preferred for configuration.\n \n Any additional files required should be stored in `src/test/resources`.\n \n-\n ### Project Setup\n The README.md should contain instructions for the user to get the samples operable. Ideally, steps\n   such as project or resource setup should be links to Cloud Documentation. This is to reduce \n   duplicate instructions and README maintenance in the future. \n \n+# Code\n+### Arrange, Act, Assert\n+Samples should generally follow the \"Arrange, Act, Assert\" outline to: \n+* _Arrange_ - Create and configure the components for the request. Avoid nesting these components,\n+  as complex, nested builders can be hard to read.\n+* _Act_ - Send the request and receive the response.\n+* _Assert_ - Verify the call was successful or that the response is correct. This is often done by\n+  print contents of the response to `stdout`.\n+\n+## Style\n+Samples in this repository follow the [Google Java Style Guide][java-style].\n+This is enforced by [Checkstyle](https://checkstyle.org/) and the\n+[Maven Checkstyle Plugin][checkstyle-plugin].\n+\n+[java-style]: https://google.github.io/styleguide/javaguide.html\n+[checkstyle-plugin]: https://maven.apache.org/plugins/maven-checkstyle-plugin/\n+\n+Use the [google-java-format][google-java-format] tool to automatically reformat\n+your source code to adhere to the style guide. It is available as a command-line\n+tool or IntelliJ plugin.\n+\n+[google-java-format]: https://github.com/google/google-java-format\n+\n+### Linting\n+To run the checkstyle & ErrorProne plugins on an existing sample, run", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea270cfc108c0ad7334756ad0bd98e6fe7699d8"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxODI5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Simple command-line samples with only positional arguments should use the\n          \n          \n            \n            `args` argument to `main(String... args)` directly. A command-line sample\n          \n          \n            \n            which has optional parameters should use the [Apache Commons\n          \n          \n            \n            CLI](https://commons.apache.org/proper/commons-cli/index.html) library.\n          \n          \n            \n            Snippet should be optimized to run directly from a user's IDE. Command-Line arguments are strongly discouraged, and new samples should not implement them.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2504#discussion_r398818298", "createdAt": "2020-03-26T18:58:05Z", "author": {"login": "kurtisvg"}, "path": "SAMPLE_FORMAT.md", "diffHunk": "@@ -75,50 +218,90 @@ should be used instead of explicitly declaring the client version. See the below\n ```\n \n ### Project Configuration\n-Use of environment variables over system properties is strongly preferred for configuration. \n+Use of environment variables over system properties is strongly preferred for configuration.\n \n Any additional files required should be stored in `src/test/resources`.\n \n-\n ### Project Setup\n The README.md should contain instructions for the user to get the samples operable. Ideally, steps\n   such as project or resource setup should be links to Cloud Documentation. This is to reduce \n   duplicate instructions and README maintenance in the future. \n \n+# Code\n+### Arrange, Act, Assert\n+Samples should generally follow the \"Arrange, Act, Assert\" outline to: \n+* _Arrange_ - Create and configure the components for the request. Avoid nesting these components,\n+  as complex, nested builders can be hard to read.\n+* _Act_ - Send the request and receive the response.\n+* _Assert_ - Verify the call was successful or that the response is correct. This is often done by\n+  print contents of the response to `stdout`.\n+\n+## Style\n+Samples in this repository follow the [Google Java Style Guide][java-style].\n+This is enforced by [Checkstyle](https://checkstyle.org/) and the\n+[Maven Checkstyle Plugin][checkstyle-plugin].\n+\n+[java-style]: https://google.github.io/styleguide/javaguide.html\n+[checkstyle-plugin]: https://maven.apache.org/plugins/maven-checkstyle-plugin/\n+\n+Use the [google-java-format][google-java-format] tool to automatically reformat\n+your source code to adhere to the style guide. It is available as a command-line\n+tool or IntelliJ plugin.\n+\n+[google-java-format]: https://github.com/google/google-java-format\n+\n+### Linting\n+To run the checkstyle & ErrorProne plugins on an existing sample, run\n+\n+```shell\n+mvn clean verify -DskipTests\n+```\n+\n+The `-DskipTests` is optional. It is useful if you want to verify that your code\n+builds and adheres to the style guide without waiting for tests to complete.\n+\n+### Command-Line Arguments\n+Simple command-line samples with only positional arguments should use the\n+`args` argument to `main(String... args)` directly. A command-line sample\n+which has optional parameters should use the [Apache Commons\n+CLI](https://commons.apache.org/proper/commons-cli/index.html) library.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea270cfc108c0ad7334756ad0bd98e6fe7699d8"}, "originalPosition": 256}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgyMTUyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            It is not necessary to use a package for snippets.  If you choose to use one, please DO NOT use \n          \n          \n            \n            `com.google.` as a prefix.  `com.example` or something related to the technology such as\n          \n          \n            \n            `package dlp.snippets`.\n          \n          \n            \n            Samples should use package names in the following formats: `com.example.<YOUR_PRODUCT>.<FOLDER>`, such as `com.example.dlp.snippets` or `com.example.functions.snippets`. Do not use `com.google.*` or the default package.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2504#discussion_r398821521", "createdAt": "2020-03-26T19:03:23Z", "author": {"login": "kurtisvg"}, "path": "SAMPLE_FORMAT.md", "diffHunk": "@@ -75,50 +218,90 @@ should be used instead of explicitly declaring the client version. See the below\n ```\n \n ### Project Configuration\n-Use of environment variables over system properties is strongly preferred for configuration. \n+Use of environment variables over system properties is strongly preferred for configuration.\n \n Any additional files required should be stored in `src/test/resources`.\n \n-\n ### Project Setup\n The README.md should contain instructions for the user to get the samples operable. Ideally, steps\n   such as project or resource setup should be links to Cloud Documentation. This is to reduce \n   duplicate instructions and README maintenance in the future. \n \n+# Code\n+### Arrange, Act, Assert\n+Samples should generally follow the \"Arrange, Act, Assert\" outline to: \n+* _Arrange_ - Create and configure the components for the request. Avoid nesting these components,\n+  as complex, nested builders can be hard to read.\n+* _Act_ - Send the request and receive the response.\n+* _Assert_ - Verify the call was successful or that the response is correct. This is often done by\n+  print contents of the response to `stdout`.\n+\n+## Style\n+Samples in this repository follow the [Google Java Style Guide][java-style].\n+This is enforced by [Checkstyle](https://checkstyle.org/) and the\n+[Maven Checkstyle Plugin][checkstyle-plugin].\n+\n+[java-style]: https://google.github.io/styleguide/javaguide.html\n+[checkstyle-plugin]: https://maven.apache.org/plugins/maven-checkstyle-plugin/\n+\n+Use the [google-java-format][google-java-format] tool to automatically reformat\n+your source code to adhere to the style guide. It is available as a command-line\n+tool or IntelliJ plugin.\n+\n+[google-java-format]: https://github.com/google/google-java-format\n+\n+### Linting\n+To run the checkstyle & ErrorProne plugins on an existing sample, run\n+\n+```shell\n+mvn clean verify -DskipTests\n+```\n+\n+The `-DskipTests` is optional. It is useful if you want to verify that your code\n+builds and adheres to the style guide without waiting for tests to complete.\n+\n+### Command-Line Arguments\n+Simple command-line samples with only positional arguments should use the\n+`args` argument to `main(String... args)` directly. A command-line sample\n+which has optional parameters should use the [Apache Commons\n+CLI](https://commons.apache.org/proper/commons-cli/index.html) library.\n+\n+**Dataflow** samples are an exception to this guideline, since Dataflow has its own \n+[method for setting options](https://cloud.google.com/dataflow/pipelines/specifying-exec-params).\n+\n+### Package Names\n+It is not necessary to use a package for snippets.  If you choose to use one, please DO NOT use \n+`com.google.` as a prefix.  `com.example` or something related to the technology such as\n+`package dlp.snippets`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea270cfc108c0ad7334756ad0bd98e6fe7699d8"}, "originalPosition": 264}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgyMjQ3Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            snippet and a similarly named function. Region tags should start below the `package` (if there is \n          \n          \n            \n            one), but should include the class and any imports in full. Additional functions can be used if it improves\n          \n          \n            \n            snippet and a similarly named function. Region tags should start below the `package`, but should include the class and any imports in full. Additional functions can be used if it improves", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2504#discussion_r398822477", "createdAt": "2020-03-26T19:04:54Z", "author": {"login": "kurtisvg"}, "path": "SAMPLE_FORMAT.md", "diffHunk": "@@ -75,50 +218,90 @@ should be used instead of explicitly declaring the client version. See the below\n ```\n \n ### Project Configuration\n-Use of environment variables over system properties is strongly preferred for configuration. \n+Use of environment variables over system properties is strongly preferred for configuration.\n \n Any additional files required should be stored in `src/test/resources`.\n \n-\n ### Project Setup\n The README.md should contain instructions for the user to get the samples operable. Ideally, steps\n   such as project or resource setup should be links to Cloud Documentation. This is to reduce \n   duplicate instructions and README maintenance in the future. \n \n+# Code\n+### Arrange, Act, Assert\n+Samples should generally follow the \"Arrange, Act, Assert\" outline to: \n+* _Arrange_ - Create and configure the components for the request. Avoid nesting these components,\n+  as complex, nested builders can be hard to read.\n+* _Act_ - Send the request and receive the response.\n+* _Assert_ - Verify the call was successful or that the response is correct. This is often done by\n+  print contents of the response to `stdout`.\n+\n+## Style\n+Samples in this repository follow the [Google Java Style Guide][java-style].\n+This is enforced by [Checkstyle](https://checkstyle.org/) and the\n+[Maven Checkstyle Plugin][checkstyle-plugin].\n+\n+[java-style]: https://google.github.io/styleguide/javaguide.html\n+[checkstyle-plugin]: https://maven.apache.org/plugins/maven-checkstyle-plugin/\n+\n+Use the [google-java-format][google-java-format] tool to automatically reformat\n+your source code to adhere to the style guide. It is available as a command-line\n+tool or IntelliJ plugin.\n+\n+[google-java-format]: https://github.com/google/google-java-format\n+\n+### Linting\n+To run the checkstyle & ErrorProne plugins on an existing sample, run\n+\n+```shell\n+mvn clean verify -DskipTests\n+```\n+\n+The `-DskipTests` is optional. It is useful if you want to verify that your code\n+builds and adheres to the style guide without waiting for tests to complete.\n+\n+### Command-Line Arguments\n+Simple command-line samples with only positional arguments should use the\n+`args` argument to `main(String... args)` directly. A command-line sample\n+which has optional parameters should use the [Apache Commons\n+CLI](https://commons.apache.org/proper/commons-cli/index.html) library.\n+\n+**Dataflow** samples are an exception to this guideline, since Dataflow has its own \n+[method for setting options](https://cloud.google.com/dataflow/pipelines/specifying-exec-params).\n+\n+### Package Names\n+It is not necessary to use a package for snippets.  If you choose to use one, please DO NOT use \n+`com.google.` as a prefix.  `com.example` or something related to the technology such as\n+`package dlp.snippets`.\n+\n ### Class Structure\n Each snippet should be be contained in its own file, within a class with a name descriptive of the\n-snippet and a similarly named function. Region tags should start below the package, but should\n-include the class and any imports in full. Additional functions can be used if it improves\n+snippet and a similarly named function. Region tags should start below the `package` (if there is \n+one), but should include the class and any imports in full. Additional functions can be used if it improves", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea270cfc108c0ad7334756ad0bd98e6fe7699d8"}, "originalPosition": 271}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgyMjc5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            most 4 parameters). In more cases,\n          \n          \n            \n            most 4 parameters). In most cases,", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2504#discussion_r398822794", "createdAt": "2020-03-26T19:05:24Z", "author": {"login": "kurtisvg"}, "path": "SAMPLE_FORMAT.md", "diffHunk": "@@ -75,50 +218,90 @@ should be used instead of explicitly declaring the client version. See the below\n ```\n \n ### Project Configuration\n-Use of environment variables over system properties is strongly preferred for configuration. \n+Use of environment variables over system properties is strongly preferred for configuration.\n \n Any additional files required should be stored in `src/test/resources`.\n \n-\n ### Project Setup\n The README.md should contain instructions for the user to get the samples operable. Ideally, steps\n   such as project or resource setup should be links to Cloud Documentation. This is to reduce \n   duplicate instructions and README maintenance in the future. \n \n+# Code\n+### Arrange, Act, Assert\n+Samples should generally follow the \"Arrange, Act, Assert\" outline to: \n+* _Arrange_ - Create and configure the components for the request. Avoid nesting these components,\n+  as complex, nested builders can be hard to read.\n+* _Act_ - Send the request and receive the response.\n+* _Assert_ - Verify the call was successful or that the response is correct. This is often done by\n+  print contents of the response to `stdout`.\n+\n+## Style\n+Samples in this repository follow the [Google Java Style Guide][java-style].\n+This is enforced by [Checkstyle](https://checkstyle.org/) and the\n+[Maven Checkstyle Plugin][checkstyle-plugin].\n+\n+[java-style]: https://google.github.io/styleguide/javaguide.html\n+[checkstyle-plugin]: https://maven.apache.org/plugins/maven-checkstyle-plugin/\n+\n+Use the [google-java-format][google-java-format] tool to automatically reformat\n+your source code to adhere to the style guide. It is available as a command-line\n+tool or IntelliJ plugin.\n+\n+[google-java-format]: https://github.com/google/google-java-format\n+\n+### Linting\n+To run the checkstyle & ErrorProne plugins on an existing sample, run\n+\n+```shell\n+mvn clean verify -DskipTests\n+```\n+\n+The `-DskipTests` is optional. It is useful if you want to verify that your code\n+builds and adheres to the style guide without waiting for tests to complete.\n+\n+### Command-Line Arguments\n+Simple command-line samples with only positional arguments should use the\n+`args` argument to `main(String... args)` directly. A command-line sample\n+which has optional parameters should use the [Apache Commons\n+CLI](https://commons.apache.org/proper/commons-cli/index.html) library.\n+\n+**Dataflow** samples are an exception to this guideline, since Dataflow has its own \n+[method for setting options](https://cloud.google.com/dataflow/pipelines/specifying-exec-params).\n+\n+### Package Names\n+It is not necessary to use a package for snippets.  If you choose to use one, please DO NOT use \n+`com.google.` as a prefix.  `com.example` or something related to the technology such as\n+`package dlp.snippets`.\n+\n ### Class Structure\n Each snippet should be be contained in its own file, within a class with a name descriptive of the\n-snippet and a similarly named function. Region tags should start below the package, but should\n-include the class and any imports in full. Additional functions can be used if it improves\n+snippet and a similarly named function. Region tags should start below the `package` (if there is \n+one), but should include the class and any imports in full. Additional functions can be used if it improves\n readability of the sample.\n \n-\n ```java\n-package dlp.snippets;\n-\n // [START product_example]\n-\n import com.example.resource;\n \n public class exampleSnippet {\n   // Snippet functions ...\n }\n // [END product_example]\n ```\n-\n ### Function Comment\n Include a short, descriptive comment detailing what action the snippet it attempting to perform.\n Avoid using the javadoc format, as these samples are not used to generate documentation and it can\n-be redundant whe\n-\n+be redundant.\n ```java\n // This is an example snippet for show best practices.\n public static void exampleSnippet(String projectId, String filePath) {\n     // Snippet content ...\n }\n ```\n-  \n ### Function Structure\n-Function parameters should be limited to what is absolutely required for testing. In more cases,\n+Function parameters should be limited to what is absolutely required for testing (ideally having at\n+most 4 parameters). In more cases,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea270cfc108c0ad7334756ad0bd98e6fe7699d8"}, "originalPosition": 304}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg4NzQzMA==", "bodyText": "Samples should include examples and details of how to catch and handle common Exceptions that are the result of improper interactions with the client or service. Lower level exceptions that are the result of environment or hardware errors (such as IOException, InteruptedException, or FileNotFoundException) should be allowed to bubble up to the next level.\nIf there is no solution (or if the solution is too verbose to resolve in a sample) to resolving the exception programmatically (such as a missing resource), it is acceptable to either log or leave a comment clearly explaining what actions the user should take to correct the situation.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2504#discussion_r398887430", "createdAt": "2020-03-26T20:58:37Z", "author": {"login": "kurtisvg"}, "path": "SAMPLE_FORMAT.md", "diffHunk": "@@ -145,17 +327,17 @@ public static void exampleSnippet(String projectId, String filePath) {\n     // Snippet content ...\n }\n ```\n- \n ### Exception Handling\n Snippets should follow the\n [Google Java style guide](https://google.github.io/styleguide/javaguide.html#s6.2-caught-exceptions)\n-and catch the most specific type of `Exception`, instead of a more general one. Additionally, exceptions\n-of any try/catch blocks should be limited to where an error can actually (within reason) occur. Ideally, we will\n-provide either code or comments suggesting how the developer can mitigate the exception in the catch block, or\n-why it's safe to ignore.\n+and catch the most specific type of `Exception`, instead of a more general one. Additionally, ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea270cfc108c0ad7334756ad0bd98e6fe7699d8"}, "originalPosition": 328}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg5MjcwOA==", "bodyText": "Our java logging examples tell users to use slf4j. Should we be consistent and start using that be default? (I believe it's compatible with Stackdriver too?)", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2504#discussion_r398892708", "createdAt": "2020-03-26T21:05:59Z", "author": {"login": "kurtisvg"}, "path": "SAMPLE_FORMAT.md", "diffHunk": "@@ -211,21 +374,17 @@ Streams can be extremely compact, efficient, and easy to use - consider using th\n * Checked Exceptions can be problematic inside streams.\n   \n ### Parallel Streams\n-Parallel Streams make make sense in a few situations. There are many situations where there use is a net loss.  Really think through your usage and consider what they might mean if you are already doing concurrent operations.\n+Parallel Streams make make sense in a few situations. There are many situations where there use is a\n+net loss.  Really think through your usage and consider what they might mean if you are already\n+doing concurrent operations.\n \n ## Additional Best Practices \n-\n The following are some general Java best practices that should be followed in samples to remain\n idiomatic. \n \n-### Style\n-Wherever possible (and when not conflicting any of the above guidelines), follow the\n-[Google Java Style Guide](https://google.github.io/styleguide/javaguide.html). It's encouraged, but\n-not required to use `[google-java-format](https://github.com/google/google-java-format)` to help \n-format your code. \n-\n ### Time\n Use the `java.time` package when dealing with units of time in some manner. \n \n ### Logging\n-Use `java.util.logging` for consistent logging in web applications. \n+Use `java.util.logging` for consistent logging in web applications. Unless you are demonstrating how", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea270cfc108c0ad7334756ad0bd98e6fe7699d8"}, "originalPosition": 405}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac03a39a8ab5c1c00cc739f349ce319145ab7bd9", "author": {"user": {"login": "lesv", "name": "Les Vogel"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/ac03a39a8ab5c1c00cc739f349ce319145ab7bd9", "committedDate": "2020-03-27T00:11:55Z", "message": "apply comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a82320f1542891a4860333d0fa65d1fb28d00fee", "author": {"user": {"login": "lesv", "name": "Les Vogel"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/a82320f1542891a4860333d0fa65d1fb28d00fee", "committedDate": "2020-03-27T00:12:33Z", "message": "Merge branch 'master' into update_guidelines"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyOTg0NTI2", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2504#pullrequestreview-382984526", "createdAt": "2020-03-27T15:52:54Z", "commit": {"oid": "a82320f1542891a4860333d0fa65d1fb28d00fee"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTo1Mjo1NFrOF83Ulw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTo1NDoyOVrOF83ZAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM2NTI3MQ==", "bodyText": "Can we nix this part since we don't want folks to use CLI?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2504#discussion_r399365271", "createdAt": "2020-03-27T15:52:54Z", "author": {"login": "kurtisvg"}, "path": "SAMPLE_FORMAT.md", "diffHunk": "@@ -75,53 +239,95 @@ should be used instead of explicitly declaring the client version. See the below\n ```\n \n ### Project Configuration\n-Use of environment variables over system properties is strongly preferred for configuration. \n+Use of environment variables over system properties is strongly preferred for configuration.\n \n Any additional files required should be stored in `src/test/resources`.\n \n-\n ### Project Setup\n The README.md should contain instructions for the user to get the samples operable. Ideally, steps\n   such as project or resource setup should be links to Cloud Documentation. This is to reduce \n   duplicate instructions and README maintenance in the future. \n \n+# Code\n+### Arrange, Act, Assert\n+Samples should generally follow the \"Arrange, Act, Assert\" outline to: \n+* _Arrange_ - Create and configure the components for the request. Avoid nesting these components,\n+  as complex, nested builders can be hard to read.\n+* _Act_ - Send the request and receive the response.\n+* _Assert_ - Verify the call was successful or that the response is correct. This is often done by\n+  print the contents of the response to `stdout`.\n+\n+## Style\n+Samples in this repository follow the [Google Java Style Guide][java-style].\n+This is enforced by [Checkstyle](https://checkstyle.org/) and the\n+[Maven Checkstyle Plugin][checkstyle-plugin].\n+\n+[java-style]: https://google.github.io/styleguide/javaguide.html\n+[checkstyle-plugin]: https://maven.apache.org/plugins/maven-checkstyle-plugin/\n+\n+Use the [google-java-format][google-java-format] tool to automatically reformat\n+your source code to adhere to the style guide. It is available as a command-line\n+tool or IntelliJ plugin.\n+\n+[google-java-format]: https://github.com/google/google-java-format\n+\n+### Linting\n+To run the Checkstyle, ErrorProne and SpotBugs plugins on an existing sample, run\n+\n+```shell\n+mvn clean verify -DskipTests\n+```\n+\n+The `-DskipTests` is optional. It is useful if you want to verify that your code\n+builds and adheres to the style guide without waiting for tests to complete.\n+\n+### Command-Line Arguments\n+**NOTE:** Snippet should be optimized to run directly from a user's IDE. Command-Line arguments are\n+strongly discouraged, and new samples should not implement them. \n+\n+Simple command-line samples with only positional arguments should use the\n+`args` argument to `main(String... args)` directly. A command-line sample\n+which has optional parameters should use the [Apache Commons\n+CLI](https://commons.apache.org/proper/commons-cli/index.html) library.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a82320f1542891a4860333d0fa65d1fb28d00fee"}, "originalPosition": 280}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM2NjQwMg==", "bodyText": "IMO, still should nix the default package.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2504#discussion_r399366402", "createdAt": "2020-03-27T15:54:29Z", "author": {"login": "kurtisvg"}, "path": "SAMPLE_FORMAT.md", "diffHunk": "@@ -75,53 +239,95 @@ should be used instead of explicitly declaring the client version. See the below\n ```\n \n ### Project Configuration\n-Use of environment variables over system properties is strongly preferred for configuration. \n+Use of environment variables over system properties is strongly preferred for configuration.\n \n Any additional files required should be stored in `src/test/resources`.\n \n-\n ### Project Setup\n The README.md should contain instructions for the user to get the samples operable. Ideally, steps\n   such as project or resource setup should be links to Cloud Documentation. This is to reduce \n   duplicate instructions and README maintenance in the future. \n \n+# Code\n+### Arrange, Act, Assert\n+Samples should generally follow the \"Arrange, Act, Assert\" outline to: \n+* _Arrange_ - Create and configure the components for the request. Avoid nesting these components,\n+  as complex, nested builders can be hard to read.\n+* _Act_ - Send the request and receive the response.\n+* _Assert_ - Verify the call was successful or that the response is correct. This is often done by\n+  print the contents of the response to `stdout`.\n+\n+## Style\n+Samples in this repository follow the [Google Java Style Guide][java-style].\n+This is enforced by [Checkstyle](https://checkstyle.org/) and the\n+[Maven Checkstyle Plugin][checkstyle-plugin].\n+\n+[java-style]: https://google.github.io/styleguide/javaguide.html\n+[checkstyle-plugin]: https://maven.apache.org/plugins/maven-checkstyle-plugin/\n+\n+Use the [google-java-format][google-java-format] tool to automatically reformat\n+your source code to adhere to the style guide. It is available as a command-line\n+tool or IntelliJ plugin.\n+\n+[google-java-format]: https://github.com/google/google-java-format\n+\n+### Linting\n+To run the Checkstyle, ErrorProne and SpotBugs plugins on an existing sample, run\n+\n+```shell\n+mvn clean verify -DskipTests\n+```\n+\n+The `-DskipTests` is optional. It is useful if you want to verify that your code\n+builds and adheres to the style guide without waiting for tests to complete.\n+\n+### Command-Line Arguments\n+**NOTE:** Snippet should be optimized to run directly from a user's IDE. Command-Line arguments are\n+strongly discouraged, and new samples should not implement them. \n+\n+Simple command-line samples with only positional arguments should use the\n+`args` argument to `main(String... args)` directly. A command-line sample\n+which has optional parameters should use the [Apache Commons\n+CLI](https://commons.apache.org/proper/commons-cli/index.html) library.\n+\n+**Dataflow** samples are an exception to this guideline, since Dataflow has its own \n+[method for setting options](https://cloud.google.com/dataflow/pipelines/specifying-exec-params).\n+\n+### Package Names\n+Samples should use either the default package or package names in the following formats: \n+`com.example.<YOUR_PRODUCT>.<FOLDER>`, such as `com.example.dlp.snippets` or \n+`com.example.functions.snippets`. Do not use `com.google.*`.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a82320f1542891a4860333d0fa65d1fb28d00fee"}, "originalPosition": 289}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e0a20ae90bb4cb7e7ceaf595480ff39701fb129", "author": {"user": {"login": "lesv", "name": "Les Vogel"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/4e0a20ae90bb4cb7e7ceaf595480ff39701fb129", "committedDate": "2020-03-27T20:28:33Z", "message": "Update SAMPLE_FORMAT.md\n\n* Discourage use of CLI.\n* Discourage use of the default package."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e708b98015e9d4ec27a3c19f1885fbf9d42cb63a", "author": {"user": {"login": "lesv", "name": "Les Vogel"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/e708b98015e9d4ec27a3c19f1885fbf9d42cb63a", "committedDate": "2020-03-27T20:30:46Z", "message": "Merge branch 'master' into update_guidelines"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMTgzOTAx", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2504#pullrequestreview-383183901", "createdAt": "2020-03-27T20:37:36Z", "commit": {"oid": "e708b98015e9d4ec27a3c19f1885fbf9d42cb63a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMTg0NzM3", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2504#pullrequestreview-383184737", "createdAt": "2020-03-27T20:39:10Z", "commit": {"oid": "e708b98015e9d4ec27a3c19f1885fbf9d42cb63a"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDozOToxMFrOF9BIrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDo0NTo1NlrOF9BUcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUyNjA2Mg==", "bodyText": "Incomplete?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2504#discussion_r399526062", "createdAt": "2020-03-27T20:39:10Z", "author": {"login": "dzlier-gcp"}, "path": "SAMPLE_FORMAT.md", "diffHunk": "@@ -25,19 +57,149 @@ specifically mentioned in the format, samples should make best-effort attempts i\n * __Idiomatic__ - examples should make best attempts to remain idiomatic and encourage good \n   practices that are specific to a language or practice. \n \n-## Format Guidelines\n+## Build Tools\n+\n+All new samples should build and run integration tests with [Maven](https://maven.apache.org/).\n+[Gradle](https://gradle.org/) support is optional as we don't yet have regular testing.\n+\n+## Testing\n+Any infrastructure required to run the test (such as a GCS bucket or a Cloud SQL instance) should\n+be passed in as an environment variable. Tests should clearly indicated which environment variables\n+are required for the tests to pass.\n+\n+Resources required outside of this infrastructure should be generated and cleaned up (even on \n+failures) as part of the test suite. Please note that tests should run successfully in parallel, \n+and UUIDs should be used to prevent conflicts.\n+\n+Snippets should have integration tests that should verify the snippet compiles and runs\n+successfully. Tests should only verify that the sample itself is interacting with the service\n+correctly - it is an explicit non goal for tests to verify that API is performing correctly.\n+Because of this, mocks for external services are strongly discouraged.\n+\n+* Test Library: [JUnit4](https://junit.org/junit4/)\n+* Test Runner: [Maven Failsafe plugin](https://maven.apache.org/surefire/maven-failsafe-plugin/)\n+and [Maven Surefire plugin](https://maven.apache.org/surefire/maven-surefire-plugin/).\n+\n+As an example, the following test code shows how we test a region tag (region tags are tools Google\n+uses to identify sections of the snippets to be highlighted in documentation) called `region_tag`:\n+```java\n+package com.google.example;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * Store region_tag in test method name, camel-cased\n+ */ \n+@RunWith(JUnit4.class)\n+public class SomeClassTest {\n+  @Test public void regionTag_shouldPass() throws Exception { }\n+\n+  @Test public void regionTag_shouldFail() throws Exception {\n+    Assert.fail(\"should fail\");\n+  }\n+}\n+```\n+You will note:\n+ * underscores (`_`) are used in test method names to separate blocks of `camelCase` text\n+ * these blocks denote _region tags_, which serve as unique IDs for snippets in a given repository\n+ * `camelCase` blocks beginning with `should` or `does` are **not** region tags - instead, they\n+ simply describe the test being run\n+\n+\n+that the \"_\" in `region_tag` is removed, and \"_\" is used to separate regionTags from\n+test descriptions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e708b98015e9d4ec27a3c19f1885fbf9d42cb63a"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUyNjI5Mg==", "bodyText": "Link to file?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2504#discussion_r399526292", "createdAt": "2020-03-27T20:39:44Z", "author": {"login": "dzlier-gcp"}, "path": "SAMPLE_FORMAT.md", "diffHunk": "@@ -25,19 +57,149 @@ specifically mentioned in the format, samples should make best-effort attempts i\n * __Idiomatic__ - examples should make best attempts to remain idiomatic and encourage good \n   practices that are specific to a language or practice. \n \n-## Format Guidelines\n+## Build Tools\n+\n+All new samples should build and run integration tests with [Maven](https://maven.apache.org/).\n+[Gradle](https://gradle.org/) support is optional as we don't yet have regular testing.\n+\n+## Testing\n+Any infrastructure required to run the test (such as a GCS bucket or a Cloud SQL instance) should\n+be passed in as an environment variable. Tests should clearly indicated which environment variables\n+are required for the tests to pass.\n+\n+Resources required outside of this infrastructure should be generated and cleaned up (even on \n+failures) as part of the test suite. Please note that tests should run successfully in parallel, \n+and UUIDs should be used to prevent conflicts.\n+\n+Snippets should have integration tests that should verify the snippet compiles and runs\n+successfully. Tests should only verify that the sample itself is interacting with the service\n+correctly - it is an explicit non goal for tests to verify that API is performing correctly.\n+Because of this, mocks for external services are strongly discouraged.\n+\n+* Test Library: [JUnit4](https://junit.org/junit4/)\n+* Test Runner: [Maven Failsafe plugin](https://maven.apache.org/surefire/maven-failsafe-plugin/)\n+and [Maven Surefire plugin](https://maven.apache.org/surefire/maven-surefire-plugin/).\n+\n+As an example, the following test code shows how we test a region tag (region tags are tools Google\n+uses to identify sections of the snippets to be highlighted in documentation) called `region_tag`:\n+```java\n+package com.google.example;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * Store region_tag in test method name, camel-cased\n+ */ \n+@RunWith(JUnit4.class)\n+public class SomeClassTest {\n+  @Test public void regionTag_shouldPass() throws Exception { }\n+\n+  @Test public void regionTag_shouldFail() throws Exception {\n+    Assert.fail(\"should fail\");\n+  }\n+}\n+```\n+You will note:\n+ * underscores (`_`) are used in test method names to separate blocks of `camelCase` text\n+ * these blocks denote _region tags_, which serve as unique IDs for snippets in a given repository\n+ * `camelCase` blocks beginning with `should` or `does` are **not** region tags - instead, they\n+ simply describe the test being run\n+\n+\n+that the \"_\" in `region_tag` is removed, and \"_\" is used to separate regionTags from\n+test descriptions.\n+\n+It is also possible to use annotations to provide info for `region_tag` if you need to do this,\n+please contact one of the repo admins.\n+\n+### Testing Setup\n+Most samples require a GCP project and billing account. Keep the following in\n+mind when setting up tests.\n+\n+* **Environment variables**  \n+  Minimize additional environment variables that need to be set to run the tests.\n+  If you do require additional environment variables, they should be added to\n+  `run_tests.sh`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e708b98015e9d4ec27a3c19f1885fbf9d42cb63a"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUyNjg5MA==", "bodyText": "As per the \"keeping tests from getting stale\" lightning talk we recently had, might want to add a note about how tests that create cloud resources should also delete those resources when they are done testing, particularly in a way that will ensure the deletion of the resource even if the test fails, such as with with a finally block or in an @After or @AfterClass function.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2504#discussion_r399526890", "createdAt": "2020-03-27T20:41:07Z", "author": {"login": "dzlier-gcp"}, "path": "SAMPLE_FORMAT.md", "diffHunk": "@@ -25,19 +57,149 @@ specifically mentioned in the format, samples should make best-effort attempts i\n * __Idiomatic__ - examples should make best attempts to remain idiomatic and encourage good \n   practices that are specific to a language or practice. \n \n-## Format Guidelines\n+## Build Tools\n+\n+All new samples should build and run integration tests with [Maven](https://maven.apache.org/).\n+[Gradle](https://gradle.org/) support is optional as we don't yet have regular testing.\n+\n+## Testing\n+Any infrastructure required to run the test (such as a GCS bucket or a Cloud SQL instance) should\n+be passed in as an environment variable. Tests should clearly indicated which environment variables\n+are required for the tests to pass.\n+\n+Resources required outside of this infrastructure should be generated and cleaned up (even on \n+failures) as part of the test suite. Please note that tests should run successfully in parallel, \n+and UUIDs should be used to prevent conflicts.\n+\n+Snippets should have integration tests that should verify the snippet compiles and runs\n+successfully. Tests should only verify that the sample itself is interacting with the service\n+correctly - it is an explicit non goal for tests to verify that API is performing correctly.\n+Because of this, mocks for external services are strongly discouraged.\n+\n+* Test Library: [JUnit4](https://junit.org/junit4/)\n+* Test Runner: [Maven Failsafe plugin](https://maven.apache.org/surefire/maven-failsafe-plugin/)\n+and [Maven Surefire plugin](https://maven.apache.org/surefire/maven-surefire-plugin/).\n+\n+As an example, the following test code shows how we test a region tag (region tags are tools Google\n+uses to identify sections of the snippets to be highlighted in documentation) called `region_tag`:\n+```java\n+package com.google.example;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * Store region_tag in test method name, camel-cased\n+ */ \n+@RunWith(JUnit4.class)\n+public class SomeClassTest {\n+  @Test public void regionTag_shouldPass() throws Exception { }\n+\n+  @Test public void regionTag_shouldFail() throws Exception {\n+    Assert.fail(\"should fail\");\n+  }\n+}\n+```\n+You will note:\n+ * underscores (`_`) are used in test method names to separate blocks of `camelCase` text\n+ * these blocks denote _region tags_, which serve as unique IDs for snippets in a given repository\n+ * `camelCase` blocks beginning with `should` or `does` are **not** region tags - instead, they\n+ simply describe the test being run\n+\n+\n+that the \"_\" in `region_tag` is removed, and \"_\" is used to separate regionTags from\n+test descriptions.\n+\n+It is also possible to use annotations to provide info for `region_tag` if you need to do this,\n+please contact one of the repo admins.\n+\n+### Testing Setup\n+Most samples require a GCP project and billing account. Keep the following in\n+mind when setting up tests.\n+\n+* **Environment variables**  \n+  Minimize additional environment variables that need to be set to run the tests.\n+  If you do require additional environment variables, they should be added to\n+  `run_tests.sh`.\n+\n+  Existing environment variables include:\n+  * `GOOGLE_APPLICATION_CREDENTIALS`\n+  * `GOOGLE_CLOUD_PROJECT`\n+  * `PROJECT_ID`\n+\n+* **API library**  \n+  If an API needs to be enabled in the testing project, add this information to the\n+  directory's README and to the comments in the PR. If there is no README.md file, add one\n+  in your PR.\n+\n+* **IAM**\n+  Some API's require that the service account have some additional capibilities, these should also\n+  be mentioned in both the PR and the README.\n+\n+* **Cloud resources**  \n+  Most Java samples create the Cloud resources that they need to run. If this", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e708b98015e9d4ec27a3c19f1885fbf9d42cb63a"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUyOTA3Mw==", "bodyText": "make make sense", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2504#discussion_r399529073", "createdAt": "2020-03-27T20:45:56Z", "author": {"login": "dzlier-gcp"}, "path": "SAMPLE_FORMAT.md", "diffHunk": "@@ -211,21 +394,17 @@ Streams can be extremely compact, efficient, and easy to use - consider using th\n * Checked Exceptions can be problematic inside streams.\n   \n ### Parallel Streams\n-Parallel Streams make make sense in a few situations. There are many situations where there use is a net loss.  Really think through your usage and consider what they might mean if you are already doing concurrent operations.\n+Parallel Streams make make sense in a few situations. There are many situations where there use is a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e708b98015e9d4ec27a3c19f1885fbf9d42cb63a"}, "originalPosition": 413}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33960aea9efdf907ea18966846de3edd7ac67ae8", "author": {"user": {"login": "lesv", "name": "Les Vogel"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/33960aea9efdf907ea18966846de3edd7ac67ae8", "committedDate": "2020-03-27T20:49:25Z", "message": "Merge branch 'master' into update_guidelines"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f69d3e8894b7f7fd4c465c384dc15145e5dbac1", "author": {"user": {"login": "lesv", "name": "Les Vogel"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/7f69d3e8894b7f7fd4c465c384dc15145e5dbac1", "committedDate": "2020-03-27T20:57:57Z", "message": "Dane's feedback\n\n* remove xtra stuff in test labels for Region_Tags\n* Fix some language and change from CONTRIBUTING to README for resources\n* Parallel Streams - fix language"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d66554d1bb7f4b945b8e58aa5e8d07467c9d42c7", "author": {"user": {"login": "lesv", "name": "Les Vogel"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/d66554d1bb7f4b945b8e58aa5e8d07467c9d42c7", "committedDate": "2020-03-27T20:58:15Z", "message": "Merge branch 'update_guidelines' of https://github.com/GoogleCloudPlatform/java-docs-samples into update_guidelines"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58b7aecc87b8f3263414a7f5d14cfcb49052aef5", "author": {"user": {"login": "lesv", "name": "Les Vogel"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/58b7aecc87b8f3263414a7f5d14cfcb49052aef5", "committedDate": "2020-03-27T21:01:13Z", "message": "two more from Dane\n\n* Fix path\n* Add a path."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMTk3OTI2", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2504#pullrequestreview-383197926", "createdAt": "2020-03-27T21:03:02Z", "commit": {"oid": "58b7aecc87b8f3263414a7f5d14cfcb49052aef5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 876, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}