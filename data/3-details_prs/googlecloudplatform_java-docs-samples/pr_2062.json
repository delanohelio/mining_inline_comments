{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNDQ2Njk3", "number": 2062, "title": "Cleanup DLP Triggers Snippets", "bodyText": "Working towards #1479", "createdAt": "2020-02-11T02:29:21Z", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2062", "merged": true, "mergeCommit": {"oid": "ec118f9b2ad1d4791452e4c0862859ffb2f8370e"}, "closed": true, "closedAt": "2020-02-14T23:06:25Z", "author": {"login": "shubha-rajan"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDIRnOAH2gAyMzczNDQ2Njk3OjQ3NzVlYmM0OWFlY2RlN2U1ZThjODIyMmY4Y2FlYmVmODcwM2IwZDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDYFLdAH2gAyMzczNDQ2Njk3OjUwYjMzZjBiZGNkNDYwNzg1ZmQ3NmMwMTA5NDUzYTFjNzkwMWVjNzc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4775ebc49aecde7e5e8c8222f8caebef8703b0d7", "author": {"user": {"login": "shubha-rajan", "name": "Shubha Rajan"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/4775ebc49aecde7e5e8c8222f8caebef8703b0d7", "committedDate": "2020-02-11T02:26:20Z", "message": "refactored triggers samples into snippet format"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2ODM0MTY4", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2062#pullrequestreview-356834168", "createdAt": "2020-02-11T17:05:42Z", "commit": {"oid": "4775ebc49aecde7e5e8c8222f8caebef8703b0d7"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzowNTo0MlrOFoRYEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzowNTo0MlrOFoRYEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc3MjA0OQ==", "bodyText": "nit: Extra newline", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2062#discussion_r377772049", "createdAt": "2020-02-11T17:05:42Z", "author": {"login": "kurtisvg"}, "path": "dlp/src/test/java/dlp/snippets/TriggersTests.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.CloudStorageOptions;\n+import com.google.privacy.dlp.v2.CreateJobTriggerRequest;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.InspectJobConfig;\n+import com.google.privacy.dlp.v2.JobTrigger;\n+import com.google.privacy.dlp.v2.ProjectName;\n+import com.google.privacy.dlp.v2.StorageConfig;\n+import com.google.privacy.dlp.v2.Schedule;\n+import com.google.protobuf.Duration;\n+\n+\n+import org.hamcrest.CoreMatchers;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThat;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.io.IOException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+\n+@RunWith(JUnit4.class)\n+public class TriggersTests {\n+\n+    private static final String PROJECT_ID = System.getenv(\"GOOGLE_CLOUD_PROJECT\");\n+    private static final String GCS_PATH = System.getenv(\"GCS_PATH\");\n+\n+    private ByteArrayOutputStream bout;\n+\n+    private static void requireEnvVar(String varName) {\n+        assertNotNull(\n+                String.format(\"Environment variable '%s' must be set to perform these tests.\", varName),\n+                System.getenv(varName));\n+    }\n+\n+    private static JobTrigger createTrigger() throws IOException {\n+        try (DlpServiceClient dlpServiceClient = DlpServiceClient.create()) {\n+            CloudStorageOptions cloudStorageOptions =\n+                    CloudStorageOptions.newBuilder()\n+                            .setFileSet(CloudStorageOptions.FileSet.newBuilder().setUrl(GCS_PATH))\n+                            .build();\n+            StorageConfig storageConfig =\n+                    StorageConfig.newBuilder().setCloudStorageOptions(cloudStorageOptions).build();\n+\n+\n+            InspectJobConfig inspectJobConfig =\n+                    InspectJobConfig.newBuilder()\n+                            .setInspectConfig(InspectConfig.newBuilder().build())\n+                            .setStorageConfig(storageConfig)\n+                            .build();\n+\n+            Duration duration = Duration.newBuilder().setSeconds(24 * 3600).build();\n+            Schedule schedule = Schedule.newBuilder().setRecurrencePeriodDuration(duration).build();\n+            JobTrigger.Trigger trigger = JobTrigger.Trigger.newBuilder().setSchedule(schedule).build();\n+            JobTrigger jobTrigger =\n+                    JobTrigger.newBuilder()\n+                            .setInspectJob(inspectJobConfig)\n+                            .setStatus(JobTrigger.Status.HEALTHY)\n+                            .addTriggers(trigger)\n+                            .build();\n+\n+            CreateJobTriggerRequest createJobTriggerRequest =\n+                    CreateJobTriggerRequest.newBuilder()\n+                            .setParent(ProjectName.of(PROJECT_ID).toString())\n+                            .setJobTrigger(jobTrigger)\n+                            .build();\n+\n+            return dlpServiceClient.createJobTrigger(createJobTriggerRequest);\n+        }\n+    }\n+\n+    @BeforeClass\n+    public static void checkRequirements() {\n+        requireEnvVar(\"GOOGLE_APPLICATION_CREDENTIALS\");\n+        requireEnvVar(\"GOOGLE_CLOUD_PROJECT\");\n+        requireEnvVar(\"GCS_PATH\");\n+    }\n+\n+    @Before\n+    public void setUp() {\n+        bout = new ByteArrayOutputStream();\n+        System.setOut(new PrintStream(bout));\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        System.setOut(null);\n+        bout.reset();\n+    }\n+\n+    @Test\n+    public void testCreateTrigger() throws Exception {\n+        TriggersCreate.createTrigger(PROJECT_ID, GCS_PATH);\n+        String output = bout.toString();\n+        assertThat(output, CoreMatchers.containsString(\"Created Trigger:\"));\n+    }\n+\n+    @Test\n+    public void testListTrigger() throws Exception {\n+        TriggersList.listTriggers(PROJECT_ID);\n+        String output = bout.toString();\n+        assertThat(output, CoreMatchers.containsString(\"DLP triggers found:\"));\n+    }\n+\n+    @Test\n+    public void testDeleteTrigger() throws Exception {\n+        JobTrigger trigger = createTrigger();\n+        String triggerName = createTrigger().getName();\n+        String triggerId;\n+\n+        Matcher matcher = Pattern.compile(\"jobTriggers/\").matcher(triggerName);\n+        if(matcher.find()) {\n+            triggerId = triggerName.substring(matcher.end());\n+        } else {\n+            throw new Exception(\"Could not extract triggerID\");\n+        }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4775ebc49aecde7e5e8c8222f8caebef8703b0d7"}, "originalPosition": 146}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a23fa6e1e9cdff1d4f1fab23da27c912075d49af", "author": {"user": {"login": "shubha-rajan", "name": "Shubha Rajan"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/a23fa6e1e9cdff1d4f1fab23da27c912075d49af", "committedDate": "2020-02-11T20:50:45Z", "message": "removed extra newline"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50b33f0bdcd460785fd76c0109453a1c7901ec77", "author": {"user": {"login": "kurtisvg", "name": "Kurtis Van Gent"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/50b33f0bdcd460785fd76c0109453a1c7901ec77", "committedDate": "2020-02-11T20:51:14Z", "message": "Remove extra newline."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 587, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}