{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNzQwMzQ3", "number": 2661, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1MjozOFrODyM3XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTowMDowMlrODyNDMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTY2MTcyOnYy", "diffSide": "RIGHT", "path": "functions/firebase/auth/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1MjozOFrOGGHJeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1MjozOFrOGGHJeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2MTc1Mw==", "bodyText": "You are mixing Junit5 & Junit4 -- we are currently using JUnit4", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2661#discussion_r409061753", "createdAt": "2020-04-15T18:52:38Z", "author": {"login": "lesv"}, "path": "functions/firebase/auth/pom.xml", "diffHunk": "@@ -0,0 +1,153 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<!--\n+  Copyright 2020 Google LLC\n+\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <groupId>com.example.cloud.functions</groupId>\n+  <artifactId>functions-firebase-auth</artifactId>\n+\n+  <parent>\n+    <groupId>com.google.cloud.samples</groupId>\n+    <artifactId>shared-configuration</artifactId>\n+    <version>1.0.15</version>\n+  </parent>\n+\n+  <properties>\n+    <maven.compiler.target>11</maven.compiler.target>\n+    <maven.compiler.source>11</maven.compiler.source>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.google.code.gson</groupId>\n+      <artifactId>gson</artifactId>\n+      <version>2.8.6</version>\n+    </dependency>\n+\n+    <!-- Required for Function primitives -->\n+    <dependency>\n+      <groupId>com.google.cloud.functions</groupId>\n+      <artifactId>functions-framework-api</artifactId>\n+      <version>1.0.1</version>\n+    </dependency>\n+\n+    <!-- The following dependencies are only required for testing -->\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-api</artifactId>\n+      <version>5.6.2</version>\n+      <scope>test</scope>\n+    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7293f3ab8509ce4bf34327030a33f7ce53c6de07"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTY3MDQxOnYy", "diffSide": "RIGHT", "path": "functions/firebase/auth/src/test/java/functions/FirebaseAuthTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1NDo0MlrOGGHOwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1NDo0MlrOGGHOwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2MzEwNA==", "bodyText": "You might wish to use some of the json object tools, like either GSON or JSonObject to create and maintain JSON constants.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2661#discussion_r409063104", "createdAt": "2020-04-15T18:54:42Z", "author": {"login": "lesv"}, "path": "functions/firebase/auth/src/test/java/functions/FirebaseAuthTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package functions;\n+\n+import com.google.common.testing.TestLogHandler;\n+import com.google.common.truth.Truth;\n+import java.io.IOException;\n+import java.util.logging.Logger;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class FirebaseAuthTest {\n+\n+  // Loggers + handlers for various tested classes\n+  // (Must be declared at class-level, or LoggingHandler won't detect log records!)\n+  private static final Logger LOGGER = Logger.getLogger(FirebaseAuth.class.getName());\n+\n+  private static final TestLogHandler LOG_HANDLER = new TestLogHandler();\n+\n+  @BeforeClass\n+  public static void beforeClass() {\n+    LOGGER.addHandler(LOG_HANDLER);\n+  }\n+\n+  @Before\n+  public void beforeTest() throws IOException {\n+    LOG_HANDLER.clear();\n+  }\n+\n+  @Test\n+  public void functionsFirebaseAuth_shouldShowUserId() {\n+    new FirebaseAuth().accept(\"{\\\"uid\\\": \\\"foo\\\"}\", null);\n+\n+    Truth.assertThat(LOG_HANDLER.getStoredLogRecords().get(0).getMessage()).isEqualTo(\n+        \"Function triggered by change to user: foo\");\n+  }\n+\n+  @Test\n+  public void functionsFirebaseAuth_shouldShowOrigin() {\n+    new FirebaseAuth().accept(\"{\\\"metadata\\\": {\\\"createdAt\\\": \\\"123\\\"}}\", null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7293f3ab8509ce4bf34327030a33f7ce53c6de07"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTY3MzE3OnYy", "diffSide": "RIGHT", "path": "functions/firebase/auth/src/test/java/functions/FirebaseAuthTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1NToxOVrOGGHQcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1NToxOVrOGGHQcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2MzUzNg==", "bodyText": "ditto", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2661#discussion_r409063536", "createdAt": "2020-04-15T18:55:19Z", "author": {"login": "lesv"}, "path": "functions/firebase/auth/src/test/java/functions/FirebaseAuthTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package functions;\n+\n+import com.google.common.testing.TestLogHandler;\n+import com.google.common.truth.Truth;\n+import java.io.IOException;\n+import java.util.logging.Logger;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class FirebaseAuthTest {\n+\n+  // Loggers + handlers for various tested classes\n+  // (Must be declared at class-level, or LoggingHandler won't detect log records!)\n+  private static final Logger LOGGER = Logger.getLogger(FirebaseAuth.class.getName());\n+\n+  private static final TestLogHandler LOG_HANDLER = new TestLogHandler();\n+\n+  @BeforeClass\n+  public static void beforeClass() {\n+    LOGGER.addHandler(LOG_HANDLER);\n+  }\n+\n+  @Before\n+  public void beforeTest() throws IOException {\n+    LOG_HANDLER.clear();\n+  }\n+\n+  @Test\n+  public void functionsFirebaseAuth_shouldShowUserId() {\n+    new FirebaseAuth().accept(\"{\\\"uid\\\": \\\"foo\\\"}\", null);\n+\n+    Truth.assertThat(LOG_HANDLER.getStoredLogRecords().get(0).getMessage()).isEqualTo(\n+        \"Function triggered by change to user: foo\");\n+  }\n+\n+  @Test\n+  public void functionsFirebaseAuth_shouldShowOrigin() {\n+    new FirebaseAuth().accept(\"{\\\"metadata\\\": {\\\"createdAt\\\": \\\"123\\\"}}\", null);\n+\n+    Truth.assertThat(LOG_HANDLER.getStoredLogRecords().get(0).getMessage()).isEqualTo(\n+        \"Created at: 123\");\n+  }\n+\n+  @Test\n+  public void functionsFirebaseAuth_shouldShowVersion()  {\n+    new FirebaseAuth().accept(\"{\\\"email\\\": \\\"foo@google.com\\\"}\", null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7293f3ab8509ce4bf34327030a33f7ce53c6de07"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTY3NDAyOnYy", "diffSide": "RIGHT", "path": "functions/firebase/auth/src/test/java/functions/FirebaseAuthTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1NToyOVrOGGHQ8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1NToyOVrOGGHQ8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2MzY2NQ==", "bodyText": "see comment below", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2661#discussion_r409063665", "createdAt": "2020-04-15T18:55:29Z", "author": {"login": "lesv"}, "path": "functions/firebase/auth/src/test/java/functions/FirebaseAuthTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package functions;\n+\n+import com.google.common.testing.TestLogHandler;\n+import com.google.common.truth.Truth;\n+import java.io.IOException;\n+import java.util.logging.Logger;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class FirebaseAuthTest {\n+\n+  // Loggers + handlers for various tested classes\n+  // (Must be declared at class-level, or LoggingHandler won't detect log records!)\n+  private static final Logger LOGGER = Logger.getLogger(FirebaseAuth.class.getName());\n+\n+  private static final TestLogHandler LOG_HANDLER = new TestLogHandler();\n+\n+  @BeforeClass\n+  public static void beforeClass() {\n+    LOGGER.addHandler(LOG_HANDLER);\n+  }\n+\n+  @Before\n+  public void beforeTest() throws IOException {\n+    LOG_HANDLER.clear();\n+  }\n+\n+  @Test\n+  public void functionsFirebaseAuth_shouldShowUserId() {\n+    new FirebaseAuth().accept(\"{\\\"uid\\\": \\\"foo\\\"}\", null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7293f3ab8509ce4bf34327030a33f7ce53c6de07"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTY3NjgzOnYy", "diffSide": "RIGHT", "path": "functions/firebase/firestore-reactive/src/test/java/functions/FirebaseFirestoreReactiveTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1NjoxNVrOGGHS1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1NjoxNVrOGGHS1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NDE0OA==", "bodyText": "Use GSON, JsonObject, or some other tool to maintain JSON constants.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2661#discussion_r409064148", "createdAt": "2020-04-15T18:56:15Z", "author": {"login": "lesv"}, "path": "functions/firebase/firestore-reactive/src/test/java/functions/FirebaseFirestoreReactiveTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package functions;\n+\n+import static org.powermock.api.mockito.PowerMockito.mock;\n+import static org.powermock.api.mockito.PowerMockito.when;\n+\n+import com.google.cloud.firestore.DocumentReference;\n+import com.google.cloud.firestore.Firestore;\n+import com.google.common.testing.TestLogHandler;\n+import com.google.common.truth.Truth;\n+import functions.eventpojos.MockContext;\n+import java.io.IOException;\n+import java.util.logging.Logger;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.reflect.Whitebox;\n+\n+@RunWith(JUnit4.class)\n+public class FirebaseFirestoreReactiveTest {\n+\n+  @Mock private Firestore firestoreMock;\n+  @Mock private DocumentReference referenceMock;\n+\n+  // Loggers + handlers for various tested classes\n+  // (Must be declared at class-level, or LoggingHandler won't detect log records!)\n+  private static final Logger LOGGER = Logger.getLogger(FirebaseFirestoreReactive.class.getName());\n+\n+  private static final TestLogHandler LOG_HANDLER = new TestLogHandler();\n+\n+  @BeforeClass\n+  public static void beforeClass() {\n+    LOGGER.addHandler(LOG_HANDLER);\n+  }\n+\n+  @Before\n+  public void beforeTest() throws IOException {\n+    Mockito.mockitoSession().initMocks(this);\n+\n+    referenceMock = mock(DocumentReference.class, Mockito.RETURNS_DEEP_STUBS);\n+    when(referenceMock.set(ArgumentMatchers.any())).thenReturn(null);\n+\n+    firestoreMock = PowerMockito.mock(Firestore.class);\n+    when(firestoreMock.document(ArgumentMatchers.any())).thenReturn(referenceMock);\n+\n+    LOG_HANDLER.clear();\n+  }\n+\n+  @After\n+  public void afterTest() {\n+    System.out.flush();\n+    LOG_HANDLER.clear();\n+  }\n+\n+  @Test\n+  public void functionsFirebaseReactive_shouldCapitalizeOriginalValue()  {\n+    String jsonStr = \"{\\\"value\\\":{\\\"fields\\\":{\\\"original\\\":{\\\"stringValue\\\":\\\"foo\\\"}}}}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7293f3ab8509ce4bf34327030a33f7ce53c6de07"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTY3NzUxOnYy", "diffSide": "RIGHT", "path": "functions/firebase/firestore-reactive/src/test/java/functions/FirebaseFirestoreReactiveTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1NjoyNlrOGGHTPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1NjoyNlrOGGHTPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NDI1Mw==", "bodyText": "ditto", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2661#discussion_r409064253", "createdAt": "2020-04-15T18:56:26Z", "author": {"login": "lesv"}, "path": "functions/firebase/firestore-reactive/src/test/java/functions/FirebaseFirestoreReactiveTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package functions;\n+\n+import static org.powermock.api.mockito.PowerMockito.mock;\n+import static org.powermock.api.mockito.PowerMockito.when;\n+\n+import com.google.cloud.firestore.DocumentReference;\n+import com.google.cloud.firestore.Firestore;\n+import com.google.common.testing.TestLogHandler;\n+import com.google.common.truth.Truth;\n+import functions.eventpojos.MockContext;\n+import java.io.IOException;\n+import java.util.logging.Logger;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.reflect.Whitebox;\n+\n+@RunWith(JUnit4.class)\n+public class FirebaseFirestoreReactiveTest {\n+\n+  @Mock private Firestore firestoreMock;\n+  @Mock private DocumentReference referenceMock;\n+\n+  // Loggers + handlers for various tested classes\n+  // (Must be declared at class-level, or LoggingHandler won't detect log records!)\n+  private static final Logger LOGGER = Logger.getLogger(FirebaseFirestoreReactive.class.getName());\n+\n+  private static final TestLogHandler LOG_HANDLER = new TestLogHandler();\n+\n+  @BeforeClass\n+  public static void beforeClass() {\n+    LOGGER.addHandler(LOG_HANDLER);\n+  }\n+\n+  @Before\n+  public void beforeTest() throws IOException {\n+    Mockito.mockitoSession().initMocks(this);\n+\n+    referenceMock = mock(DocumentReference.class, Mockito.RETURNS_DEEP_STUBS);\n+    when(referenceMock.set(ArgumentMatchers.any())).thenReturn(null);\n+\n+    firestoreMock = PowerMockito.mock(Firestore.class);\n+    when(firestoreMock.document(ArgumentMatchers.any())).thenReturn(referenceMock);\n+\n+    LOG_HANDLER.clear();\n+  }\n+\n+  @After\n+  public void afterTest() {\n+    System.out.flush();\n+    LOG_HANDLER.clear();\n+  }\n+\n+  @Test\n+  public void functionsFirebaseReactive_shouldCapitalizeOriginalValue()  {\n+    String jsonStr = \"{\\\"value\\\":{\\\"fields\\\":{\\\"original\\\":{\\\"stringValue\\\":\\\"foo\\\"}}}}\";\n+\n+    MockContext context = new MockContext();\n+    context.resource = \"projects/_/databases/(default)/documents/messages/ABCDE12345\";\n+\n+    FirebaseFirestoreReactive functionInstance = new FirebaseFirestoreReactive();\n+    Whitebox.setInternalState(FirebaseFirestoreReactive.class, \"FIRESTORE\", firestoreMock);\n+\n+    functionInstance.accept(jsonStr, context);\n+\n+    Truth.assertThat(LOG_HANDLER.getStoredLogRecords().get(0).getMessage()).isEqualTo(\n+        \"Replacing value: foo --> FOO\");\n+  }\n+\n+  @Test\n+  public void functionsFirebaseReactive_shouldReportBadJson()  {\n+    String jsonStr = \"{\\\"value\\\":{\\\"fields\\\":{\\\"original\\\":{\\\"missingValue\\\":\\\"foo\\\"}}}}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7293f3ab8509ce4bf34327030a33f7ce53c6de07"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTY3OTY5OnYy", "diffSide": "RIGHT", "path": "functions/firebase/firestore/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1NzowMVrOGGHUhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1NzowMVrOGGHUhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NDU4Mg==", "bodyText": "mixing JUnit4 & JUnit5", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2661#discussion_r409064582", "createdAt": "2020-04-15T18:57:01Z", "author": {"login": "lesv"}, "path": "functions/firebase/firestore/pom.xml", "diffHunk": "@@ -0,0 +1,153 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<!--\n+  Copyright 2020 Google LLC\n+\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <groupId>com.example.cloud.functions</groupId>\n+  <artifactId>functions-firebase-firestore</artifactId>\n+\n+  <parent>\n+    <groupId>com.google.cloud.samples</groupId>\n+    <artifactId>shared-configuration</artifactId>\n+    <version>1.0.15</version>\n+  </parent>\n+\n+  <properties>\n+    <maven.compiler.target>11</maven.compiler.target>\n+    <maven.compiler.source>11</maven.compiler.source>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.google.cloud</groupId>\n+      <artifactId>google-cloud-firestore</artifactId>\n+      <version>1.33.0</version>\n+    </dependency>\n+\n+    <!-- Required for Function primitives -->\n+    <dependency>\n+      <groupId>com.google.cloud.functions</groupId>\n+      <artifactId>functions-framework-api</artifactId>\n+      <version>1.0.1</version>\n+    </dependency>\n+\n+    <!-- The following dependencies are only required for testing -->\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-api</artifactId>\n+      <version>5.6.2</version>\n+      <scope>test</scope>\n+    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7293f3ab8509ce4bf34327030a33f7ce53c6de07"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTY4MTk0OnYy", "diffSide": "RIGHT", "path": "functions/firebase/firestore/src/test/java/functions/FirebaseFirestoreTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1NzozOFrOGGHV_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1NzozOFrOGGHV_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NDk1Nw==", "bodyText": "Use GSON, or JsonObject to maintain JSON constants", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2661#discussion_r409064957", "createdAt": "2020-04-15T18:57:38Z", "author": {"login": "lesv"}, "path": "functions/firebase/firestore/src/test/java/functions/FirebaseFirestoreTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package functions;\n+\n+import com.google.common.testing.TestLogHandler;\n+import com.google.common.truth.Truth;\n+import functions.eventpojos.MockContext;\n+import java.util.List;\n+import java.util.logging.LogRecord;\n+import java.util.logging.Logger;\n+import org.junit.After;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class FirebaseFirestoreTest {\n+\n+  // Loggers + handlers for various tested classes\n+  // (Must be declared at class-level, or LoggingHandler won't detect log records!)\n+  private static final Logger LOGGER = Logger.getLogger(FirebaseFirestore.class.getName());\n+\n+  private static final TestLogHandler LOG_HANDLER = new TestLogHandler();\n+\n+  @BeforeClass\n+  public static void beforeClass() {\n+    LOGGER.addHandler(LOG_HANDLER);\n+  }\n+\n+  @After\n+  public void afterTest() {\n+    LOG_HANDLER.clear();\n+  }\n+\n+  @Test\n+  public void functionsFirebaseFirestore_shouldIgnoreMissingValuesTest() {\n+    MockContext context = new MockContext();\n+    context.resource = \"resource_1\";\n+    context.eventType = \"event_type_2\";\n+\n+    new FirebaseFirestore().accept(\"\", context);\n+\n+    List<LogRecord> logs = LOG_HANDLER.getStoredLogRecords();\n+    Truth.assertThat(logs.size()).isEqualTo(2);\n+    Truth.assertThat(logs.get(0).getMessage()).isEqualTo(\n+        \"Function triggered by event on: resource_1\");\n+    Truth.assertThat(logs.get(1).getMessage()).isEqualTo(\"Event type: event_type_2\");\n+  }\n+\n+  @Test\n+  public void functionsFirebaseFirestore_shouldProcessPresentValues() {\n+    String jsonStr = \"{\\\"oldValue\\\": 999, \\\"value\\\": 777 }\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7293f3ab8509ce4bf34327030a33f7ce53c6de07"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTY4Mzg1OnYy", "diffSide": "RIGHT", "path": "functions/firebase/remote-config/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1ODowN1rOGGHXHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1ODowN1rOGGHXHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NTI0Nw==", "bodyText": "Shouldn't mix JUnit4 & JUnit5", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2661#discussion_r409065247", "createdAt": "2020-04-15T18:58:07Z", "author": {"login": "lesv"}, "path": "functions/firebase/remote-config/pom.xml", "diffHunk": "@@ -0,0 +1,153 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<!--\n+  Copyright 2020 Google LLC\n+\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <groupId>com.example.cloud.functions</groupId>\n+  <artifactId>functions-firebase-firebase-remote-config</artifactId>\n+\n+  <parent>\n+    <groupId>com.google.cloud.samples</groupId>\n+    <artifactId>shared-configuration</artifactId>\n+    <version>1.0.15</version>\n+  </parent>\n+\n+  <properties>\n+    <maven.compiler.target>11</maven.compiler.target>\n+    <maven.compiler.source>11</maven.compiler.source>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.google.code.gson</groupId>\n+      <artifactId>gson</artifactId>\n+      <version>2.8.6</version>\n+    </dependency>\n+\n+    <!-- Required for Function primitives -->\n+    <dependency>\n+      <groupId>com.google.cloud.functions</groupId>\n+      <artifactId>functions-framework-api</artifactId>\n+      <version>1.0.1</version>\n+    </dependency>\n+\n+    <!-- The following dependencies are only required for testing -->\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-api</artifactId>\n+      <version>5.6.2</version>\n+      <scope>test</scope>\n+    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7293f3ab8509ce4bf34327030a33f7ce53c6de07"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTY4NjU0OnYy", "diffSide": "RIGHT", "path": "functions/firebase/remote-config/src/test/java/functions/FirebaseRemoteConfigTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1ODo0NlrOGGHYuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1ODo0NlrOGGHYuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NTY1Nw==", "bodyText": "use GSON or JsonObject to maintain JSON constants", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2661#discussion_r409065657", "createdAt": "2020-04-15T18:58:46Z", "author": {"login": "lesv"}, "path": "functions/firebase/remote-config/src/test/java/functions/FirebaseRemoteConfigTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package functions;\n+\n+import com.google.common.testing.TestLogHandler;\n+import com.google.common.truth.Truth;\n+import java.util.logging.Logger;\n+import org.junit.After;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class FirebaseRemoteConfigTest {\n+  // Loggers + handlers for various tested classes\n+  // (Must be declared at class-level, or LoggingHandler won't detect log records!)\n+  private static final Logger LOGGER = Logger.getLogger(FirebaseRemoteConfig.class.getName());\n+\n+  private static final TestLogHandler LOG_HANDLER = new TestLogHandler();\n+\n+  @BeforeClass\n+  public static void beforeClass() {\n+    LOGGER.addHandler(LOG_HANDLER);\n+  }\n+\n+  @After\n+  public void afterTest() {\n+    LOG_HANDLER.clear();\n+  }\n+\n+  @Test\n+  public void functionsFirebaseRemoteConfig_shouldShowUpdateType() {\n+    new FirebaseRemoteConfig().accept(\"{\\\"updateType\\\": \\\"foo\\\"}\", null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7293f3ab8509ce4bf34327030a33f7ce53c6de07"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTY4Njk0OnYy", "diffSide": "RIGHT", "path": "functions/firebase/remote-config/src/test/java/functions/FirebaseRemoteConfigTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1ODo1MlrOGGHY_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1ODo1MlrOGGHY_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NTcyNw==", "bodyText": "ditto", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2661#discussion_r409065727", "createdAt": "2020-04-15T18:58:52Z", "author": {"login": "lesv"}, "path": "functions/firebase/remote-config/src/test/java/functions/FirebaseRemoteConfigTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package functions;\n+\n+import com.google.common.testing.TestLogHandler;\n+import com.google.common.truth.Truth;\n+import java.util.logging.Logger;\n+import org.junit.After;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class FirebaseRemoteConfigTest {\n+  // Loggers + handlers for various tested classes\n+  // (Must be declared at class-level, or LoggingHandler won't detect log records!)\n+  private static final Logger LOGGER = Logger.getLogger(FirebaseRemoteConfig.class.getName());\n+\n+  private static final TestLogHandler LOG_HANDLER = new TestLogHandler();\n+\n+  @BeforeClass\n+  public static void beforeClass() {\n+    LOGGER.addHandler(LOG_HANDLER);\n+  }\n+\n+  @After\n+  public void afterTest() {\n+    LOG_HANDLER.clear();\n+  }\n+\n+  @Test\n+  public void functionsFirebaseRemoteConfig_shouldShowUpdateType() {\n+    new FirebaseRemoteConfig().accept(\"{\\\"updateType\\\": \\\"foo\\\"}\", null);\n+\n+    Truth.assertThat(LOG_HANDLER.getStoredLogRecords().get(0).getMessage()).isEqualTo(\n+        \"Update type: foo\");\n+  }\n+\n+  @Test\n+  public void functionsFirebaseRemoteConfig_shouldShowOrigin() {\n+    new FirebaseRemoteConfig().accept(\"{\\\"updateOrigin\\\": \\\"foo\\\"}\", null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7293f3ab8509ce4bf34327030a33f7ce53c6de07"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTY4NzkxOnYy", "diffSide": "RIGHT", "path": "functions/firebase/remote-config/src/test/java/functions/FirebaseRemoteConfigTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1OTowNFrOGGHZjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1OTowNFrOGGHZjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NTg3MA==", "bodyText": "ditto", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2661#discussion_r409065870", "createdAt": "2020-04-15T18:59:04Z", "author": {"login": "lesv"}, "path": "functions/firebase/remote-config/src/test/java/functions/FirebaseRemoteConfigTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package functions;\n+\n+import com.google.common.testing.TestLogHandler;\n+import com.google.common.truth.Truth;\n+import java.util.logging.Logger;\n+import org.junit.After;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class FirebaseRemoteConfigTest {\n+  // Loggers + handlers for various tested classes\n+  // (Must be declared at class-level, or LoggingHandler won't detect log records!)\n+  private static final Logger LOGGER = Logger.getLogger(FirebaseRemoteConfig.class.getName());\n+\n+  private static final TestLogHandler LOG_HANDLER = new TestLogHandler();\n+\n+  @BeforeClass\n+  public static void beforeClass() {\n+    LOGGER.addHandler(LOG_HANDLER);\n+  }\n+\n+  @After\n+  public void afterTest() {\n+    LOG_HANDLER.clear();\n+  }\n+\n+  @Test\n+  public void functionsFirebaseRemoteConfig_shouldShowUpdateType() {\n+    new FirebaseRemoteConfig().accept(\"{\\\"updateType\\\": \\\"foo\\\"}\", null);\n+\n+    Truth.assertThat(LOG_HANDLER.getStoredLogRecords().get(0).getMessage()).isEqualTo(\n+        \"Update type: foo\");\n+  }\n+\n+  @Test\n+  public void functionsFirebaseRemoteConfig_shouldShowOrigin() {\n+    new FirebaseRemoteConfig().accept(\"{\\\"updateOrigin\\\": \\\"foo\\\"}\", null);\n+\n+    Truth.assertThat(LOG_HANDLER.getStoredLogRecords().get(0).getMessage()).isEqualTo(\n+        \"Origin: foo\");\n+  }\n+\n+  @Test\n+  public void functionsFirebaseRemoteConfig_shouldShowVersion() {\n+    new FirebaseRemoteConfig().accept(\"{\\\"versionNumber\\\": 2}\", null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7293f3ab8509ce4bf34327030a33f7ce53c6de07"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTY4OTQzOnYy", "diffSide": "RIGHT", "path": "functions/firebase/rtdb/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1OTozMFrOGGHaig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1OTozMFrOGGHaig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NjEyMg==", "bodyText": "Don't mix JUnit4 & JUnit5", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2661#discussion_r409066122", "createdAt": "2020-04-15T18:59:30Z", "author": {"login": "lesv"}, "path": "functions/firebase/rtdb/pom.xml", "diffHunk": "@@ -0,0 +1,153 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<!--\n+  Copyright 2020 Google LLC\n+\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <groupId>com.example.cloud.functions</groupId>\n+  <artifactId>functions-firebase-rtdb</artifactId>\n+\n+  <parent>\n+    <groupId>com.google.cloud.samples</groupId>\n+    <artifactId>shared-configuration</artifactId>\n+    <version>1.0.15</version>\n+  </parent>\n+\n+  <properties>\n+    <maven.compiler.target>11</maven.compiler.target>\n+    <maven.compiler.source>11</maven.compiler.source>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.google.code.gson</groupId>\n+      <artifactId>gson</artifactId>\n+      <version>2.8.6</version>\n+    </dependency>\n+    \n+    <!-- Required for Function primitives -->\n+    <dependency>\n+      <groupId>com.google.cloud.functions</groupId>\n+      <artifactId>functions-framework-api</artifactId>\n+      <version>1.0.1</version>\n+    </dependency>\n+\n+    <!-- The following dependencies are only required for testing -->\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-api</artifactId>\n+      <version>5.6.2</version>\n+      <scope>test</scope>\n+    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7293f3ab8509ce4bf34327030a33f7ce53c6de07"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTY5MTU3OnYy", "diffSide": "RIGHT", "path": "functions/firebase/rtdb/src/test/java/functions/FirebaseRtdbTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1OTo1NVrOGGHbsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1OTo1NVrOGGHbsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NjQxOA==", "bodyText": "GSON | JsonObject", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2661#discussion_r409066418", "createdAt": "2020-04-15T18:59:55Z", "author": {"login": "lesv"}, "path": "functions/firebase/rtdb/src/test/java/functions/FirebaseRtdbTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package functions;\n+\n+import com.google.common.testing.TestLogHandler;\n+import com.google.common.truth.Truth;\n+import functions.eventpojos.MockContext;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.logging.LogRecord;\n+import java.util.logging.Logger;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class FirebaseRtdbTest {\n+  // Loggers + handlers for various tested classes\n+  // (Must be declared at class-level, or LoggingHandler won't detect log records!)\n+  private static final Logger LOGGER = Logger.getLogger(FirebaseRtdb.class.getName());\n+\n+  private static final TestLogHandler LOG_HANDLER = new TestLogHandler();\n+\n+  @BeforeClass\n+  public static void beforeClass() {\n+    LOGGER.addHandler(LOG_HANDLER);\n+  }\n+\n+  @Before\n+  public void beforeTest() throws IOException {\n+    LOG_HANDLER.clear();\n+  }\n+\n+  @Test\n+  public void functionsFirebaseRtdb_shouldDefaultAdminToZero() {\n+    MockContext context = new MockContext();\n+    context.resource = \"resource_1\";\n+\n+    new FirebaseRtdb().accept(\"\", context);\n+\n+    List<LogRecord> logs = LOG_HANDLER.getStoredLogRecords();\n+    Truth.assertThat(logs.get(0).getMessage()).isEqualTo(\n+        \"Function triggered by change to: resource_1\");\n+    Truth.assertThat(logs.get(1).getMessage()).isEqualTo(\"Admin?: false\");\n+  }\n+\n+  @Test\n+  public void functionsFirebaseRtdb_shouldDisplayAdminStatus() {\n+    String jsonStr = \"{\\\"auth\\\": { \\\"admin\\\": true }}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7293f3ab8509ce4bf34327030a33f7ce53c6de07"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTY5MjAzOnYy", "diffSide": "RIGHT", "path": "functions/firebase/rtdb/src/test/java/functions/FirebaseRtdbTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTowMDowMlrOGGHb9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTowMDowMlrOGGHb9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NjQ4Nw==", "bodyText": "ditto", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2661#discussion_r409066487", "createdAt": "2020-04-15T19:00:02Z", "author": {"login": "lesv"}, "path": "functions/firebase/rtdb/src/test/java/functions/FirebaseRtdbTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package functions;\n+\n+import com.google.common.testing.TestLogHandler;\n+import com.google.common.truth.Truth;\n+import functions.eventpojos.MockContext;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.logging.LogRecord;\n+import java.util.logging.Logger;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class FirebaseRtdbTest {\n+  // Loggers + handlers for various tested classes\n+  // (Must be declared at class-level, or LoggingHandler won't detect log records!)\n+  private static final Logger LOGGER = Logger.getLogger(FirebaseRtdb.class.getName());\n+\n+  private static final TestLogHandler LOG_HANDLER = new TestLogHandler();\n+\n+  @BeforeClass\n+  public static void beforeClass() {\n+    LOGGER.addHandler(LOG_HANDLER);\n+  }\n+\n+  @Before\n+  public void beforeTest() throws IOException {\n+    LOG_HANDLER.clear();\n+  }\n+\n+  @Test\n+  public void functionsFirebaseRtdb_shouldDefaultAdminToZero() {\n+    MockContext context = new MockContext();\n+    context.resource = \"resource_1\";\n+\n+    new FirebaseRtdb().accept(\"\", context);\n+\n+    List<LogRecord> logs = LOG_HANDLER.getStoredLogRecords();\n+    Truth.assertThat(logs.get(0).getMessage()).isEqualTo(\n+        \"Function triggered by change to: resource_1\");\n+    Truth.assertThat(logs.get(1).getMessage()).isEqualTo(\"Admin?: false\");\n+  }\n+\n+  @Test\n+  public void functionsFirebaseRtdb_shouldDisplayAdminStatus() {\n+    String jsonStr = \"{\\\"auth\\\": { \\\"admin\\\": true }}\";\n+\n+    MockContext context = new MockContext();\n+    context.resource = \"resource_1\";\n+    context.eventType = \"event_type_2\";\n+\n+    new FirebaseRtdb().accept(jsonStr, context);\n+\n+    List<LogRecord> logs = LOG_HANDLER.getStoredLogRecords();\n+    Truth.assertThat(logs.get(0).getMessage()).isEqualTo(\n+        \"Function triggered by change to: resource_1\");\n+    Truth.assertThat(logs.get(1).getMessage()).isEqualTo(\"Admin?: true\");\n+  }\n+\n+  @Test\n+  public void functionsFirebaseRtdb_shouldShowDelta() {\n+    String jsonStr = \"{\\\"delta\\\": { \\\"value\\\": 2 }}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7293f3ab8509ce4bf34327030a33f7ce53c6de07"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 894, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}