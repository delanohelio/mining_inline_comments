{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMDQ4MTU5", "number": 3112, "title": "Create Java code sample for multiple rules", "bodyText": "Fixes internal bug b/156974340\n\n I have followed Sample Format Guide\n pom.xml parent set to latest shared-configuration\n Appropriate changes to README are included in PR\n API's need to be enabled to test (tell us) (Nothing new)\n Environment Variables need to be set (ask us to set them) (Nothing new)\n Tests pass (mvn -P lint clean verify)\n\n(Note- Checkstyle passing is required; Spotbugs, ErrorProne, PMD, etc. ERROR's are advisory only)\n\n\n Please merge this PR for me once it is approved.", "createdAt": "2020-06-09T20:33:58Z", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3112", "merged": true, "mergeCommit": {"oid": "9a4816ee92a21839a5bf3ab31ccfc6c26b4fa49f"}, "closed": true, "closedAt": "2020-06-10T19:12:57Z", "author": {"login": "sushicw"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcprI0wAH2gAyNDMyMDQ4MTU5OmFjNTZmYWQxOTM5MGQxY2FkN2UxNmQzMTk1N2VhN2Q1M2MwZTk2MzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcp8-cOgFqTQyODI3MDkyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ac56fad19390d1cad7e16d31957ea7d53c0e9630", "author": {"user": {"login": "sushicw", "name": "Chris Wilson"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/ac56fad19390d1cad7e16d31957ea7d53c0e9630", "committedDate": "2020-06-09T20:32:32Z", "message": "Create Java code sample for multiple rules"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NTMyMjMx", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3112#pullrequestreview-427532231", "createdAt": "2020-06-09T20:46:19Z", "commit": {"oid": "ac56fad19390d1cad7e16d31957ea7d53c0e9630"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMDo0NjoxOVrOGhblKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMDo0NjoxOVrOGhblKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcwODA3Mw==", "bodyText": "Can you add tests for the \"doctor\", \"Quasimodo\", and \"Redacted\" rules used in the sample as well?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3112#discussion_r437708073", "createdAt": "2020-06-09T20:46:19Z", "author": {"login": "dzlier-gcp"}, "path": "dlp/src/test/java/dlp/snippets/InspectTests.java", "diffHunk": "@@ -251,6 +251,15 @@ public void testInspectStringCustomHotwordNegativeExample() throws Exception {\n     assertThat(output, not(containsString(\"John Doe\")));\n   }\n \n+  @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac56fad19390d1cad7e16d31957ea7d53c0e9630"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "757cc5447cc11a13ca1abed81167402ec1748957", "author": {"user": {"login": "sushicw", "name": "Chris Wilson"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/757cc5447cc11a13ca1abed81167402ec1748957", "committedDate": "2020-06-09T22:16:00Z", "message": "add more tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NTg3OTUy", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3112#pullrequestreview-427587952", "createdAt": "2020-06-09T22:25:52Z", "commit": {"oid": "757cc5447cc11a13ca1abed81167402ec1748957"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMjoyNTo1MlrOGheiMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMjoyNTo1MlrOGheiMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc1NjQ2Ng==", "bodyText": "Shouldn't there be a finding here?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3112#discussion_r437756466", "createdAt": "2020-06-09T22:25:52Z", "author": {"login": "dzlier-gcp"}, "path": "dlp/src/test/java/dlp/snippets/InspectTests.java", "diffHunk": "@@ -251,6 +251,42 @@ public void testInspectStringCustomHotwordNegativeExample() throws Exception {\n     assertThat(output, not(containsString(\"John Doe\")));\n   }\n \n+  @Test\n+  public void testInspectStringMultipleRulesPatientRule() throws Exception {\n+    InspectStringMultipleRules.inspectStringMultipleRules(PROJECT_ID,\n+        \"patient: Jane Doe\");\n+\n+    String output = bout.toString();\n+    assertThat(output, containsString(\"VERY_LIKELY\"));\n+  }\n+\n+  @Test\n+  public void testInspectStringMultipleRulesDoctorRule() throws Exception {\n+    InspectStringMultipleRules.inspectStringMultipleRules(PROJECT_ID,\n+        \"doctor: Jane Doe\");\n+\n+    String output = bout.toString();\n+    assertThat(output, containsString(\"Findings: 0\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "757cc5447cc11a13ca1abed81167402ec1748957"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NjIwNzMy", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3112#pullrequestreview-427620732", "createdAt": "2020-06-09T23:50:18Z", "commit": {"oid": "757cc5447cc11a13ca1abed81167402ec1748957"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMzo1MDoxOVrOGhgNCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMzo1MDoxOVrOGhgNCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4MzgxNg==", "bodyText": "Is this formatted correctly?  Shouldn't they be aligned to make reading easier?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3112#discussion_r437783816", "createdAt": "2020-06-09T23:50:19Z", "author": {"login": "lesv"}, "path": "dlp/src/main/java/dlp/snippets/InspectStringMultipleRules.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+// [START dlp_inspect_string_multiple_rules]\n+\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ByteContentItem;\n+import com.google.privacy.dlp.v2.ByteContentItem.BytesType;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule;\n+import com.google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment;\n+import com.google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity;\n+import com.google.privacy.dlp.v2.CustomInfoType.Dictionary;\n+import com.google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList;\n+import com.google.privacy.dlp.v2.CustomInfoType.Regex;\n+import com.google.privacy.dlp.v2.ExclusionRule;\n+import com.google.privacy.dlp.v2.Finding;\n+import com.google.privacy.dlp.v2.InfoType;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.InspectContentRequest;\n+import com.google.privacy.dlp.v2.InspectContentResponse;\n+import com.google.privacy.dlp.v2.InspectionRule;\n+import com.google.privacy.dlp.v2.InspectionRuleSet;\n+import com.google.privacy.dlp.v2.Likelihood;\n+import com.google.privacy.dlp.v2.LocationName;\n+import com.google.privacy.dlp.v2.MatchingType;\n+import com.google.protobuf.ByteString;\n+import java.io.IOException;\n+\n+public class InspectStringMultipleRules {\n+\n+  public static void inspectStringMultipleRules() throws IOException {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"your-project-id\";\n+    String textToInspect = \"patient: Jane Doe\";\n+    inspectStringMultipleRules(projectId, textToInspect);\n+  }\n+\n+  // Inspects the provided text, avoiding matches specified in the exclusion list.\n+  public static void inspectStringMultipleRules(String projectId, String textToInspect)\n+      throws IOException {\n+    // Initialize client that will be used to send requests. This client only needs to be created\n+    // once, and can be reused for multiple requests. After completing all of your requests, call\n+    // the \"close\" method on the client to safely clean up any remaining background resources.\n+    try (DlpServiceClient dlp = DlpServiceClient.create()) {\n+      // Specify the type and content to be inspected.\n+      ByteContentItem byteItem =\n+          ByteContentItem.newBuilder()\n+              .setType(BytesType.TEXT_UTF8)\n+              .setData(ByteString.copyFromUtf8(textToInspect))\n+              .build();\n+      ContentItem item = ContentItem.newBuilder().setByteItem(byteItem).build();\n+\n+      // Construct hotword rules\n+      HotwordRule patientRule = HotwordRule.newBuilder()\n+          .setHotwordRegex(Regex.newBuilder()\n+              .setPattern(\"patient\"))\n+          .setProximity(Proximity.newBuilder()\n+              .setWindowBefore(10))\n+          .setLikelihoodAdjustment(LikelihoodAdjustment.newBuilder()\n+              .setFixedLikelihood(Likelihood.VERY_LIKELY))\n+          .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "757cc5447cc11a13ca1abed81167402ec1748957"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NjIwNzc4", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3112#pullrequestreview-427620778", "createdAt": "2020-06-09T23:50:26Z", "commit": {"oid": "757cc5447cc11a13ca1abed81167402ec1748957"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMzo1MDoyNlrOGhgNKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMzo1MDoyNlrOGhgNKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4Mzg1MQ==", "bodyText": "ditto", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3112#discussion_r437783851", "createdAt": "2020-06-09T23:50:26Z", "author": {"login": "lesv"}, "path": "dlp/src/main/java/dlp/snippets/InspectStringMultipleRules.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package dlp.snippets;\n+\n+// [START dlp_inspect_string_multiple_rules]\n+\n+import com.google.cloud.dlp.v2.DlpServiceClient;\n+import com.google.privacy.dlp.v2.ByteContentItem;\n+import com.google.privacy.dlp.v2.ByteContentItem.BytesType;\n+import com.google.privacy.dlp.v2.ContentItem;\n+import com.google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule;\n+import com.google.privacy.dlp.v2.CustomInfoType.DetectionRule.LikelihoodAdjustment;\n+import com.google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity;\n+import com.google.privacy.dlp.v2.CustomInfoType.Dictionary;\n+import com.google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList;\n+import com.google.privacy.dlp.v2.CustomInfoType.Regex;\n+import com.google.privacy.dlp.v2.ExclusionRule;\n+import com.google.privacy.dlp.v2.Finding;\n+import com.google.privacy.dlp.v2.InfoType;\n+import com.google.privacy.dlp.v2.InspectConfig;\n+import com.google.privacy.dlp.v2.InspectContentRequest;\n+import com.google.privacy.dlp.v2.InspectContentResponse;\n+import com.google.privacy.dlp.v2.InspectionRule;\n+import com.google.privacy.dlp.v2.InspectionRuleSet;\n+import com.google.privacy.dlp.v2.Likelihood;\n+import com.google.privacy.dlp.v2.LocationName;\n+import com.google.privacy.dlp.v2.MatchingType;\n+import com.google.protobuf.ByteString;\n+import java.io.IOException;\n+\n+public class InspectStringMultipleRules {\n+\n+  public static void inspectStringMultipleRules() throws IOException {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"your-project-id\";\n+    String textToInspect = \"patient: Jane Doe\";\n+    inspectStringMultipleRules(projectId, textToInspect);\n+  }\n+\n+  // Inspects the provided text, avoiding matches specified in the exclusion list.\n+  public static void inspectStringMultipleRules(String projectId, String textToInspect)\n+      throws IOException {\n+    // Initialize client that will be used to send requests. This client only needs to be created\n+    // once, and can be reused for multiple requests. After completing all of your requests, call\n+    // the \"close\" method on the client to safely clean up any remaining background resources.\n+    try (DlpServiceClient dlp = DlpServiceClient.create()) {\n+      // Specify the type and content to be inspected.\n+      ByteContentItem byteItem =\n+          ByteContentItem.newBuilder()\n+              .setType(BytesType.TEXT_UTF8)\n+              .setData(ByteString.copyFromUtf8(textToInspect))\n+              .build();\n+      ContentItem item = ContentItem.newBuilder().setByteItem(byteItem).build();\n+\n+      // Construct hotword rules\n+      HotwordRule patientRule = HotwordRule.newBuilder()\n+          .setHotwordRegex(Regex.newBuilder()\n+              .setPattern(\"patient\"))\n+          .setProximity(Proximity.newBuilder()\n+              .setWindowBefore(10))\n+          .setLikelihoodAdjustment(LikelihoodAdjustment.newBuilder()\n+              .setFixedLikelihood(Likelihood.VERY_LIKELY))\n+          .build();\n+\n+      HotwordRule doctorRule = HotwordRule.newBuilder()\n+          .setHotwordRegex(Regex.newBuilder()\n+              .setPattern(\"doctor\"))\n+          .setProximity(Proximity.newBuilder()\n+              .setWindowBefore(10))\n+          .setLikelihoodAdjustment(LikelihoodAdjustment.newBuilder()\n+              .setFixedLikelihood(Likelihood.UNLIKELY))\n+          .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "757cc5447cc11a13ca1abed81167402ec1748957"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d687e95d6dfa49f14894ae39ff366bf966f275f", "author": {"user": {"login": "sushicw", "name": "Chris Wilson"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/5d687e95d6dfa49f14894ae39ff366bf966f275f", "committedDate": "2020-06-10T17:14:56Z", "message": "fix formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5b06c6112afbf871ecae77a3f098b71885ede59", "author": {"user": {"login": "sushicw", "name": "Chris Wilson"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/b5b06c6112afbf871ecae77a3f098b71885ede59", "committedDate": "2020-06-10T17:16:55Z", "message": "More formatting fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f419006e75cdb39c0c9d0d12757bc83c5c4bf39", "author": {"user": {"login": "sushicw", "name": "Chris Wilson"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/5f419006e75cdb39c0c9d0d12757bc83c5c4bf39", "committedDate": "2020-06-10T17:18:43Z", "message": "one more format fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MjcwOTI1", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3112#pullrequestreview-428270925", "createdAt": "2020-06-10T17:19:29Z", "commit": {"oid": "b5b06c6112afbf871ecae77a3f098b71885ede59"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 645, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}