{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2NDA2NjQ1", "number": 2868, "title": "Update Auth sample to use Google Library", "bodyText": "Fixes #issue\n\nIt's a good idea to open an issue first for discussion.\n\n\n pom.xml parent set to latest shared-configuration\n Appropriate changes to README are included in PR\n API's need to be enabled to test (tell us)\n Environment Variables need to be set (ask us to set them)\n Tests pass (mvn -P lint clean verify)\n\n(Note- Checkstyle passing is required; Spotbugs, ErrorProne, PMD, etc. ERROR's are advisory only)\n\n\n Please merge this PR for me once it is approved.", "createdAt": "2020-05-11T23:47:54Z", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2868", "merged": true, "mergeCommit": {"oid": "5e62c022bee9aa5c96edccd6810bef91d2ab2b8a"}, "closed": true, "closedAt": "2020-07-08T21:27:03Z", "author": {"login": "averikitsch"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcgYiKtAH2gAyNDE2NDA2NjQ1OmZjYTEwZjhmMmU4ZDUzMDU3N2U5Mzc2NjA4NDEwNjY5Njc1ZmI3YjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABczCWxPAFqTQ0NTE3NjUzNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fca10f8f2e8d530577e9376608410669675fb7b4", "author": {"user": {"login": "averikitsch", "name": "Averi Kitsch"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/fca10f8f2e8d530577e9376608410669675fb7b4", "committedDate": "2020-05-11T23:46:42Z", "message": "Update Auth sample to use Google Library"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NTUyODgy", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2868#pullrequestreview-425552882", "createdAt": "2020-06-05T19:02:42Z", "commit": {"oid": "fca10f8f2e8d530577e9376608410669675fb7b4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4c2a49e3cc55a89300cc84602c859e059f62689", "author": {"user": {"login": "averikitsch", "name": "Averi Kitsch"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/f4c2a49e3cc55a89300cc84602c859e059f62689", "committedDate": "2020-07-08T17:59:07Z", "message": "Merge branch 'master' into auth-updates"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MDk2Mzk0", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2868#pullrequestreview-445096394", "createdAt": "2020-07-08T20:15:06Z", "commit": {"oid": "f4c2a49e3cc55a89300cc84602c859e059f62689"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMDoxNTowNlrOGu3rTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMDoxNjoxNVrOGu3tgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc5OTg4Ng==", "bodyText": "0.20.1", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2868#discussion_r451799886", "createdAt": "2020-07-08T20:15:06Z", "author": {"login": "lesv"}, "path": "run/authentication/pom.xml", "diffHunk": "@@ -35,9 +35,9 @@ limitations under the License.\n \n   <dependencies>\n     <dependency>\n-      <groupId>com.squareup.okhttp3</groupId>\n-      <artifactId>okhttp</artifactId>\n-      <version>4.7.2</version>\n+      <groupId>com.google.auth</groupId>\n+      <artifactId>google-auth-library-oauth2-http</artifactId>\n+      <version>0.20.0</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c2a49e3cc55a89300cc84602c859e059f62689"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwMDQ1MQ==", "bodyText": "2.2 is current, 1.3 is from 2012", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2868#discussion_r451800451", "createdAt": "2020-07-08T20:16:15Z", "author": {"login": "lesv"}, "path": "run/authentication/pom.xml", "diffHunk": "@@ -46,6 +46,11 @@ limitations under the License.\n       <version>4.13</version>\n       <scope>test</scope>\n     </dependency>\n-\n+    <dependency>\n+      <groupId>org.hamcrest</groupId>\n+      <artifactId>hamcrest-library</artifactId>\n+      <version>1.3</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c2a49e3cc55a89300cc84602c859e059f62689"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a84df527feec46e4b71d3b12cf900d0e2704a81", "author": {"user": {"login": "averikitsch", "name": "Averi Kitsch"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/5a84df527feec46e4b71d3b12cf900d0e2704a81", "committedDate": "2020-07-08T20:20:50Z", "message": "Update pom.xml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b32a830095955ce027f1df2a7dcd09443bb41958", "author": {"user": {"login": "averikitsch", "name": "Averi Kitsch"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/b32a830095955ce027f1df2a7dcd09443bb41958", "committedDate": "2020-07-08T21:03:16Z", "message": "Update pom.xml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fed3e9a5095472d1b74628e7446fc7d0870bd91e", "author": {"user": {"login": "averikitsch", "name": "Averi Kitsch"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/fed3e9a5095472d1b74628e7446fc7d0870bd91e", "committedDate": "2020-07-08T21:20:24Z", "message": "Update library"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MTc1ODY0", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2868#pullrequestreview-445175864", "createdAt": "2020-07-08T22:39:16Z", "commit": {"oid": "fed3e9a5095472d1b74628e7446fc7d0870bd91e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMjozOToxNlrOGu7kPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMjozOToxNlrOGu7kPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg2MzYxNQ==", "bodyText": "is the cast necessary?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2868#discussion_r451863615", "createdAt": "2020-07-08T22:39:16Z", "author": {"login": "saturnism"}, "path": "run/authentication/src/main/java/com/example/cloudrun/Authentication.java", "diffHunk": "@@ -17,47 +17,38 @@\n package com.example.cloudrun;\n \n // [START run_service_to_service_auth]\n+import com.google.api.client.http.GenericUrl;\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpResponse;\n+import com.google.api.client.http.HttpTransport;\n+import com.google.api.client.http.javanet.NetHttpTransport;\n+import com.google.auth.http.HttpCredentialsAdapter;\n+import com.google.auth.oauth2.GoogleCredentials;\n+import com.google.auth.oauth2.IdTokenCredentials;\n+import com.google.auth.oauth2.IdTokenProvider;\n import java.io.IOException;\n-import java.util.concurrent.TimeUnit;\n-import okhttp3.OkHttpClient;\n-import okhttp3.Request;\n-import okhttp3.Response;\n \n public class Authentication {\n \n-  // Instantiate OkHttpClient\n-  private static final OkHttpClient ok =\n-      new OkHttpClient.Builder()\n-          .readTimeout(10, TimeUnit.SECONDS)\n-          .writeTimeout(10, TimeUnit.SECONDS)\n-          .build();\n-\n   // makeGetRequest makes a GET request to the specified Cloud Run endpoint,\n-  // serviceUrl (must be a complete URL), by authenticating with the Id token\n-  // obtained from the Metadata API.\n-  public static Response makeGetRequest(String serviceUrl) throws IOException {\n-    Request.Builder serviceRequest = new Request.Builder().url(serviceUrl);\n-\n-    // Set up metadata server request\n-    // https://cloud.google.com/compute/docs/instances/verifying-instance-identity#request_signature\n-    String tokenUrl =\n-        String.format(\n-            \"http://metadata/computeMetadata/v1/instance/service-accounts/default/identity?audience=%s\",\n-            serviceUrl);\n-    Request tokenRequest =\n-        new Request.Builder().url(tokenUrl).addHeader(\"Metadata-Flavor\", \"Google\").get().build();\n-    // Fetch the token\n-    try (Response tokenResponse = ok.newCall(tokenRequest).execute()) {\n-      String token = tokenResponse.body().string();\n-      // Provide the token in the request to the receiving service\n-      serviceRequest.addHeader(\"Authorization\", \"Bearer \" + token);\n-      System.out.println(\"Id token query succeeded.\");\n-    } catch (IOException e) {\n-      System.out.println(\"Id token query failed: \" + e);\n+  // serviceUrl (must be a complete URL), by authenticating with an Id token\n+  // retrieved from Application Default Credentials.\n+  public static HttpResponse makeGetRequest(String serviceUrl) throws IOException {\n+    GoogleCredentials credentials = GoogleCredentials.getApplicationDefault();\n+    if (!(credentials instanceof IdTokenProvider)) {\n+      throw new IllegalArgumentException(\"Credentials are not an instance of IdTokenProvider.\");\n     }\n-\n-    return ok.newCall(serviceRequest.get().build()).execute();\n+    IdTokenCredentials tokenCredential =\n+        IdTokenCredentials.newBuilder()\n+            .setIdTokenProvider((IdTokenProvider) credentials)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fed3e9a5095472d1b74628e7446fc7d0870bd91e"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MTc2NTM0", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2868#pullrequestreview-445176534", "createdAt": "2020-07-08T22:40:54Z", "commit": {"oid": "fed3e9a5095472d1b74628e7446fc7d0870bd91e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMjo0MDo1NFrOGu7mig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMjo0MDo1NFrOGu7mig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg2NDIwMg==", "bodyText": "how do we actually get the id token? and what headers should it go into?\nusers may be using many other http clients, and not google http client.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/2868#discussion_r451864202", "createdAt": "2020-07-08T22:40:54Z", "author": {"login": "saturnism"}, "path": "run/authentication/src/main/java/com/example/cloudrun/Authentication.java", "diffHunk": "@@ -17,47 +17,38 @@\n package com.example.cloudrun;\n \n // [START run_service_to_service_auth]\n+import com.google.api.client.http.GenericUrl;\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpResponse;\n+import com.google.api.client.http.HttpTransport;\n+import com.google.api.client.http.javanet.NetHttpTransport;\n+import com.google.auth.http.HttpCredentialsAdapter;\n+import com.google.auth.oauth2.GoogleCredentials;\n+import com.google.auth.oauth2.IdTokenCredentials;\n+import com.google.auth.oauth2.IdTokenProvider;\n import java.io.IOException;\n-import java.util.concurrent.TimeUnit;\n-import okhttp3.OkHttpClient;\n-import okhttp3.Request;\n-import okhttp3.Response;\n \n public class Authentication {\n \n-  // Instantiate OkHttpClient\n-  private static final OkHttpClient ok =\n-      new OkHttpClient.Builder()\n-          .readTimeout(10, TimeUnit.SECONDS)\n-          .writeTimeout(10, TimeUnit.SECONDS)\n-          .build();\n-\n   // makeGetRequest makes a GET request to the specified Cloud Run endpoint,\n-  // serviceUrl (must be a complete URL), by authenticating with the Id token\n-  // obtained from the Metadata API.\n-  public static Response makeGetRequest(String serviceUrl) throws IOException {\n-    Request.Builder serviceRequest = new Request.Builder().url(serviceUrl);\n-\n-    // Set up metadata server request\n-    // https://cloud.google.com/compute/docs/instances/verifying-instance-identity#request_signature\n-    String tokenUrl =\n-        String.format(\n-            \"http://metadata/computeMetadata/v1/instance/service-accounts/default/identity?audience=%s\",\n-            serviceUrl);\n-    Request tokenRequest =\n-        new Request.Builder().url(tokenUrl).addHeader(\"Metadata-Flavor\", \"Google\").get().build();\n-    // Fetch the token\n-    try (Response tokenResponse = ok.newCall(tokenRequest).execute()) {\n-      String token = tokenResponse.body().string();\n-      // Provide the token in the request to the receiving service\n-      serviceRequest.addHeader(\"Authorization\", \"Bearer \" + token);\n-      System.out.println(\"Id token query succeeded.\");\n-    } catch (IOException e) {\n-      System.out.println(\"Id token query failed: \" + e);\n+  // serviceUrl (must be a complete URL), by authenticating with an Id token\n+  // retrieved from Application Default Credentials.\n+  public static HttpResponse makeGetRequest(String serviceUrl) throws IOException {\n+    GoogleCredentials credentials = GoogleCredentials.getApplicationDefault();\n+    if (!(credentials instanceof IdTokenProvider)) {\n+      throw new IllegalArgumentException(\"Credentials are not an instance of IdTokenProvider.\");\n     }\n-\n-    return ok.newCall(serviceRequest.get().build()).execute();\n+    IdTokenCredentials tokenCredential =\n+        IdTokenCredentials.newBuilder()\n+            .setIdTokenProvider((IdTokenProvider) credentials)\n+            .setTargetAudience(serviceUrl)\n+            .build();\n+\n+    GenericUrl genericUrl = new GenericUrl(serviceUrl);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fed3e9a5095472d1b74628e7446fc7d0870bd91e"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 713, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}