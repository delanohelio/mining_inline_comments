{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4NTQ5MDY5", "number": 3429, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1Nzo0OVrOETbKHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODoxNTo1OVrOETyqvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODAzMzU4OnYy", "diffSide": "RIGHT", "path": "spanner/cloud-client/src/main/java/com/example/spanner/AsyncDmlExample.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDo1Nzo0OVrOG5J5gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNjozMDowMlrOG5U3dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4NDE5Mw==", "bodyText": "Do you really want 2 of these?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3429#discussion_r462584193", "createdAt": "2020-07-29T20:57:49Z", "author": {"login": "lesv"}, "path": "spanner/cloud-client/src/main/java/com/example/spanner/AsyncDmlExample.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.spanner;\n+\n+import com.google.api.core.ApiFuture;\n+import com.google.cloud.spanner.AsyncRunner.AsyncWork;\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.Spanner;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.cloud.spanner.Statement;\n+import com.google.cloud.spanner.TransactionContext;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeoutException;\n+\n+class AsyncDmlExample {\n+\n+  static void asyncDml() throws InterruptedException, ExecutionException, TimeoutException {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"my-project\";\n+    String instanceId = \"my-instance\";\n+    String databaseId = \"my-database\";\n+\n+    try (Spanner spanner =\n+        SpannerOptions.newBuilder().setProjectId(projectId).build().getService()) {\n+      DatabaseClient client =\n+          spanner.getDatabaseClient(DatabaseId.of(projectId, instanceId, databaseId));\n+      asyncDml(client);\n+    }\n+  }\n+\n+  // Execute a DML statement asynchronously.\n+  static void asyncDml(DatabaseClient client)\n+      throws InterruptedException, ExecutionException, TimeoutException {\n+    ExecutorService executor = Executors.newSingleThreadExecutor();\n+    ApiFuture<Long> rowCount =\n+        client\n+            .runAsync()\n+            .runAsync(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f957e33bbb935303603d262ffafb6ed3bb01d93"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc2Mzg5NA==", "bodyText": "It is correct, but I agree that it unfortunately looks a little bit strange and could easily be seen as a coding error. I've changed it to adhere to the example that we also have in the Javadoc, which should make it clearer what is going on.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3429#discussion_r462763894", "createdAt": "2020-07-30T06:30:02Z", "author": {"login": "olavloite"}, "path": "spanner/cloud-client/src/main/java/com/example/spanner/AsyncDmlExample.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.spanner;\n+\n+import com.google.api.core.ApiFuture;\n+import com.google.cloud.spanner.AsyncRunner.AsyncWork;\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.Spanner;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.cloud.spanner.Statement;\n+import com.google.cloud.spanner.TransactionContext;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeoutException;\n+\n+class AsyncDmlExample {\n+\n+  static void asyncDml() throws InterruptedException, ExecutionException, TimeoutException {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"my-project\";\n+    String instanceId = \"my-instance\";\n+    String databaseId = \"my-database\";\n+\n+    try (Spanner spanner =\n+        SpannerOptions.newBuilder().setProjectId(projectId).build().getService()) {\n+      DatabaseClient client =\n+          spanner.getDatabaseClient(DatabaseId.of(projectId, instanceId, databaseId));\n+      asyncDml(client);\n+    }\n+  }\n+\n+  // Execute a DML statement asynchronously.\n+  static void asyncDml(DatabaseClient client)\n+      throws InterruptedException, ExecutionException, TimeoutException {\n+    ExecutorService executor = Executors.newSingleThreadExecutor();\n+    ApiFuture<Long> rowCount =\n+        client\n+            .runAsync()\n+            .runAsync(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4NDE5Mw=="}, "originalCommit": {"oid": "8f957e33bbb935303603d262ffafb6ed3bb01d93"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MTg4NTQyOnYy", "diffSide": "RIGHT", "path": "spanner/cloud-client/src/main/java/com/example/spanner/AsyncQueryExample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODoxNTo1OVrOG5ufEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODoxNTo1OVrOG5ufEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE4MzYzNA==", "bodyText": "This looks wrong style wise, but if lint is ok w/ it, I am as well.\nI'm not usually a fan of catch / system.out style patterns, so, is there anything more to say here?  If not, it's ok.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3429#discussion_r463183634", "createdAt": "2020-07-30T18:15:59Z", "author": {"login": "lesv"}, "path": "spanner/cloud-client/src/main/java/com/example/spanner/AsyncQueryExample.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.spanner;\n+\n+// [START spanner_async_query_data]\n+import com.google.api.core.ApiFuture;\n+import com.google.cloud.spanner.AsyncResultSet;\n+import com.google.cloud.spanner.AsyncResultSet.CallbackResponse;\n+import com.google.cloud.spanner.AsyncResultSet.ReadyCallback;\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.Spanner;\n+import com.google.cloud.spanner.SpannerException;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.cloud.spanner.Statement;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+class AsyncQueryExample {\n+\n+  static void asyncQuery() throws InterruptedException, ExecutionException, TimeoutException {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"my-project\";\n+    String instanceId = \"my-instance\";\n+    String databaseId = \"my-database\";\n+\n+    try (Spanner spanner =\n+        SpannerOptions.newBuilder().setProjectId(projectId).build().getService()) {\n+      DatabaseClient client =\n+          spanner.getDatabaseClient(DatabaseId.of(projectId, instanceId, databaseId));\n+      asyncQuery(client);\n+    }\n+  }\n+\n+  // Execute a query asynchronously and process the results in a callback.\n+  static void asyncQuery(DatabaseClient client)\n+      throws InterruptedException, ExecutionException, TimeoutException {\n+    ApiFuture<Void> finished;\n+    ExecutorService executor = Executors.newSingleThreadExecutor();\n+    try (AsyncResultSet resultSet =\n+        client\n+            .singleUse()\n+            .executeQueryAsync(Statement.of(\"SELECT SingerId, AlbumId, AlbumTitle FROM Albums\"))) {\n+      // Setting a callback will automatically start the iteration over the results of the query\n+      // using the specified executor. The callback will be called at least once. The returned\n+      // ApiFuture is done when the callback has returned DONE and all resources used by the\n+      // AsyncResultSet have been released.\n+      finished =\n+          resultSet.setCallback(\n+              executor,\n+              new ReadyCallback() {\n+                @Override\n+                public CallbackResponse cursorReady(AsyncResultSet resultSet) {\n+                  try {\n+                    while (true) {\n+                      switch (resultSet.tryNext()) {\n+                        // OK: There is a row ready.\n+                        case OK:\n+                          System.out.printf(\n+                              \"%d %d %s%n\",\n+                              resultSet.getLong(0), resultSet.getLong(1), resultSet.getString(2));\n+                          break;\n+\n+                        // DONE: There are no more rows in the result set.\n+                        case DONE:\n+                          return CallbackResponse.DONE;\n+\n+                        // NOT_READY: There are currently no more rows in the buffer.\n+                        case NOT_READY:\n+                          return CallbackResponse.CONTINUE;\n+\n+                        default:\n+                          throw new IllegalStateException();\n+                      }\n+                    }\n+                  } catch (SpannerException e) {\n+                    System.out.printf(\"Error in callback: %s%n\", e.getMessage());\n+                    return CallbackResponse.DONE;\n+                  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "337aac43b069be1e37b326fed84473d0a4675cfb"}, "originalPosition": 96}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 794, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}