{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMjExNjQ4", "number": 3256, "title": "Add Cloud Run Events Samples", "bodyText": "Fixes #issue\n\nIt's a good idea to open an issue first for discussion.\n\n\n I have followed Sample Format Guide\n pom.xml parent set to latest shared-configuration\n Appropriate changes to README are included in PR\n API's need to be enabled to test (tell us)\n Environment Variables need to be set (ask us to set them)\n Tests pass:   mvn clean verify required\n Lint  passes: mvn -P lint checkstyle:check required\n Static Analysis:  mvn -P lint clean compile pmd:cpd-check spotbugs:check advisory only\n Please merge this PR for me once it is approved.", "createdAt": "2020-06-25T19:21:15Z", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3256", "merged": true, "mergeCommit": {"oid": "fe4dadebc24fa18e0a2ae4bc26859f7eba982bca"}, "closed": true, "closedAt": "2020-06-25T23:08:12Z", "author": {"login": "averikitsch"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuzMqJgH2gAyNDQwMjExNjQ4OjY5OGQ5OTZmYjdhMGMwNWQ3ZTE0ZGQxYWRiY2UyZGJjNmVkMzk2NmM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcu26QNAFqTQzNzkxNjM5OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "698d996fb7a0c05d7e14dd1adbce2dbc6ed3966c", "author": {"user": {"login": "averikitsch", "name": "Averi Kitsch"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/698d996fb7a0c05d7e14dd1adbce2dbc6ed3966c", "committedDate": "2020-06-25T18:45:35Z", "message": "Add events pubsub sample"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f71c0fb544a17f7de6dad963d0a502d4851add4e", "author": {"user": {"login": "averikitsch", "name": "Averi Kitsch"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/f71c0fb544a17f7de6dad963d0a502d4851add4e", "committedDate": "2020-06-25T19:15:20Z", "message": "Add events storage sample"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62aed160ebc7766a8c468024a679c19c457ef00c", "author": {"user": {"login": "averikitsch", "name": "Averi Kitsch"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/62aed160ebc7766a8c468024a679c19c457ef00c", "committedDate": "2020-06-25T19:17:29Z", "message": "Update jib config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a16fe26a1d823679d8aed261910a144aec001b95", "author": {"user": {"login": "averikitsch", "name": "Averi Kitsch"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/a16fe26a1d823679d8aed261910a144aec001b95", "committedDate": "2020-06-25T19:20:30Z", "message": "Update linting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d902ce6b9e0b7042a5f79f873a0bd9091a5d37b6", "author": {"user": {"login": "averikitsch", "name": "Averi Kitsch"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/d902ce6b9e0b7042a5f79f873a0bd9091a5d37b6", "committedDate": "2020-06-25T19:29:12Z", "message": "Update Readme"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3ODAxMTA2", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3256#pullrequestreview-437801106", "createdAt": "2020-06-25T19:37:45Z", "commit": {"oid": "d902ce6b9e0b7042a5f79f873a0bd9091a5d37b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxOTozNzo0NlrOGpJGgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxOTozNzo0NlrOGpJGgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc5MzkyMQ==", "bodyText": "Ok, but in the future, you might consider constructing these w/ JSONObject or GSON.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3256#discussion_r445793921", "createdAt": "2020-06-25T19:37:46Z", "author": {"login": "lesv"}, "path": "run/events-pubsub/src/test/java/com/example/cloudrun/EventControllerTests.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudrun;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.web.servlet.MockMvc;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest\n+@AutoConfigureMockMvc\n+public class EventControllerTests {\n+\n+  @Autowired private MockMvc mockMvc;\n+\n+  @Test\n+  public void addEmptyBody() throws Exception {\n+    mockMvc.perform(post(\"/\")).andExpect(status().isBadRequest());\n+  }\n+\n+  @Test\n+  public void addNoMessage() throws Exception {\n+    String mockBody = \"{}\";\n+\n+    mockMvc\n+        .perform(post(\"/\").contentType(MediaType.APPLICATION_JSON).content(mockBody))\n+        .andExpect(status().isBadRequest());\n+  }\n+\n+  @Test\n+  public void addInvalidMimetype() throws Exception {\n+    String mockBody = \"{\\\"message\\\":{\\\"data\\\":\\\"dGVzdA==\\\",\"\n+                      + \"\\\"attributes\\\":{},\\\"messageId\\\":\\\"91010751788941\\\"\"\n+                      + \",\\\"publishTime\\\":\\\"2017-09-25T23:16:42.302Z\\\"}}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d902ce6b9e0b7042a5f79f873a0bd9091a5d37b6"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3ODAyNTU3", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3256#pullrequestreview-437802557", "createdAt": "2020-06-25T19:40:03Z", "commit": {"oid": "d902ce6b9e0b7042a5f79f873a0bd9091a5d37b6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d25db3106e6587458d97f8eee0a5542dcf63c28", "author": {"user": {"login": "averikitsch", "name": "Averi Kitsch"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/5d25db3106e6587458d97f8eee0a5542dcf63c28", "committedDate": "2020-06-25T19:53:43Z", "message": "Update bucket name"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3ODEyNzI2", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3256#pullrequestreview-437812726", "createdAt": "2020-06-25T19:55:36Z", "commit": {"oid": "5d25db3106e6587458d97f8eee0a5542dcf63c28"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3ODE3ODY5", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3256#pullrequestreview-437817869", "createdAt": "2020-06-25T20:03:28Z", "commit": {"oid": "5d25db3106e6587458d97f8eee0a5542dcf63c28"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDowMzoyOFrOGpJ4kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMTo0NTo0NFrOGpM67Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgwNjczOQ==", "bodyText": "+1. This seems hard to edit. Can we construct the JSON in a different way?", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3256#discussion_r445806739", "createdAt": "2020-06-25T20:03:28Z", "author": {"login": "grant"}, "path": "run/events-pubsub/src/test/java/com/example/cloudrun/EventControllerTests.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudrun;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.web.servlet.MockMvc;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest\n+@AutoConfigureMockMvc\n+public class EventControllerTests {\n+\n+  @Autowired private MockMvc mockMvc;\n+\n+  @Test\n+  public void addEmptyBody() throws Exception {\n+    mockMvc.perform(post(\"/\")).andExpect(status().isBadRequest());\n+  }\n+\n+  @Test\n+  public void addNoMessage() throws Exception {\n+    String mockBody = \"{}\";\n+\n+    mockMvc\n+        .perform(post(\"/\").contentType(MediaType.APPLICATION_JSON).content(mockBody))\n+        .andExpect(status().isBadRequest());\n+  }\n+\n+  @Test\n+  public void addInvalidMimetype() throws Exception {\n+    String mockBody = \"{\\\"message\\\":{\\\"data\\\":\\\"dGVzdA==\\\",\"\n+                      + \"\\\"attributes\\\":{},\\\"messageId\\\":\\\"91010751788941\\\"\"\n+                      + \",\\\"publishTime\\\":\\\"2017-09-25T23:16:42.302Z\\\"}}\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc5MzkyMQ=="}, "originalCommit": {"oid": "d902ce6b9e0b7042a5f79f873a0bd9091a5d37b6"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg1NDY3NQ==", "bodyText": "nit: no space needed before flag.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3256#discussion_r445854675", "createdAt": "2020-06-25T21:41:30Z", "author": {"login": "grant"}, "path": "run/events-pubsub/README.md", "diffHunk": "@@ -0,0 +1,56 @@\n+# Events for Cloud Run - Pub/Sub tutorial\n+\n+This sample shows how to create a service that processes Pub/Sub messages.\n+\n+For more details on how to work with this sample read the [Google Cloud Run Java Samples README](https://github.com/GoogleCloudPlatform/java-docs-samples/tree/master/run).\n+\n+[![Run in Google Cloud][run_img]][run_link]\n+\n+[run_img]: https://storage.googleapis.com/cloudrun/button.svg\n+[run_link]: https://deploy.cloud.run/?git_repo=https://github.com/GoogleCloudPlatform/java-docs-samples&dir=run/events-pubsub\n+\n+\n+## Dependencies\n+\n+* **Spring Boot**: Web server framework.\n+* **Jib**: Container build tool.\n+* **Junit + SpringBootTest**: [development] Test running framework.\n+* **MockMVC**: [development] Integration testing support framework.\n+\n+## Quickstart\n+\n+Create a Cloud Pub/Sub topic:\n+\n+```sh\n+gcloud pubsub topics create my-topic\n+```\n+\n+Use the [Jib Maven Plugin](https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin) to build and push your container image:\n+```sh\n+mvn jib:build -Dimage gcr.io/$(gcloud config get-value project)/cloudrun-events-pubsub\n+```\n+\n+Deploy your Cloud Run service:\n+```sh\n+gcloud run deploy cloudrun-events-pubsub \\\n+ --image gcr.io/$(gcloud config get-value project)/cloudrun-events-pubsub", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d25db3106e6587458d97f8eee0a5542dcf63c28"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg1NDg2NQ==", "bodyText": "nit: add newline before codeblocks", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3256#discussion_r445854865", "createdAt": "2020-06-25T21:42:00Z", "author": {"login": "grant"}, "path": "run/events-pubsub/README.md", "diffHunk": "@@ -0,0 +1,56 @@\n+# Events for Cloud Run - Pub/Sub tutorial\n+\n+This sample shows how to create a service that processes Pub/Sub messages.\n+\n+For more details on how to work with this sample read the [Google Cloud Run Java Samples README](https://github.com/GoogleCloudPlatform/java-docs-samples/tree/master/run).\n+\n+[![Run in Google Cloud][run_img]][run_link]\n+\n+[run_img]: https://storage.googleapis.com/cloudrun/button.svg\n+[run_link]: https://deploy.cloud.run/?git_repo=https://github.com/GoogleCloudPlatform/java-docs-samples&dir=run/events-pubsub\n+\n+\n+## Dependencies\n+\n+* **Spring Boot**: Web server framework.\n+* **Jib**: Container build tool.\n+* **Junit + SpringBootTest**: [development] Test running framework.\n+* **MockMVC**: [development] Integration testing support framework.\n+\n+## Quickstart\n+\n+Create a Cloud Pub/Sub topic:\n+\n+```sh\n+gcloud pubsub topics create my-topic\n+```\n+\n+Use the [Jib Maven Plugin](https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin) to build and push your container image:\n+```sh\n+mvn jib:build -Dimage gcr.io/$(gcloud config get-value project)/cloudrun-events-pubsub\n+```\n+\n+Deploy your Cloud Run service:\n+```sh", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d25db3106e6587458d97f8eee0a5542dcf63c28"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg1NTk0NA==", "bodyText": "Ditto formatting.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3256#discussion_r445855944", "createdAt": "2020-06-25T21:44:36Z", "author": {"login": "grant"}, "path": "run/events-pubsub/src/test/java/com/example/cloudrun/EventControllerTests.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.cloudrun;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.web.servlet.MockMvc;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest\n+@AutoConfigureMockMvc\n+public class EventControllerTests {\n+\n+  @Autowired private MockMvc mockMvc;\n+\n+  @Test\n+  public void addEmptyBody() throws Exception {\n+    mockMvc.perform(post(\"/\")).andExpect(status().isBadRequest());\n+  }\n+\n+  @Test\n+  public void addNoMessage() throws Exception {\n+    String mockBody = \"{}\";\n+\n+    mockMvc\n+        .perform(post(\"/\").contentType(MediaType.APPLICATION_JSON).content(mockBody))\n+        .andExpect(status().isBadRequest());\n+  }\n+\n+  @Test\n+  public void addInvalidMimetype() throws Exception {\n+    String mockBody = \"{\\\"message\\\":{\\\"data\\\":\\\"dGVzdA==\\\",\"\n+                      + \"\\\"attributes\\\":{},\\\"messageId\\\":\\\"91010751788941\\\"\"\n+                      + \",\\\"publishTime\\\":\\\"2017-09-25T23:16:42.302Z\\\"}}\";\n+\n+    mockMvc\n+        .perform(post(\"/\").contentType(MediaType.TEXT_HTML).content(mockBody))\n+        .andExpect(status().isUnsupportedMediaType());\n+  }\n+\n+  @Test\n+  public void addMinimalBody() throws Exception {\n+    String mockBody = \"{\\\"message\\\":{}}\";\n+\n+    mockMvc\n+        .perform(post(\"/\").contentType(MediaType.APPLICATION_JSON).content(mockBody))\n+        .andExpect(status().isBadRequest());\n+  }\n+\n+  @Test\n+  public void addFullBody() throws Exception {\n+    String mockBody = \"{\\\"message\\\":{\\\"data\\\":\\\"dGVzdA==\\\",\"\n+                      + \"\\\"attributes\\\":{},\\\"messageId\\\":\\\"91010751788941\\\"\"\n+                      + \",\\\"publishTime\\\":\\\"2017-09-25T23:16:42.302Z\\\"}}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d25db3106e6587458d97f8eee0a5542dcf63c28"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg1NjQ5Mw==", "bodyText": "nit: spacing/formatting like above", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3256#discussion_r445856493", "createdAt": "2020-06-25T21:45:44Z", "author": {"login": "grant"}, "path": "run/events-storage/README.md", "diffHunk": "@@ -0,0 +1,76 @@\n+# Events for Cloud Run - Cloud Storage tutorial\n+\n+This sample shows how to create a service that processes GCS events.\n+\n+For more details on how to work with this sample read the [Google Cloud Run Java Samples README](https://github.com/GoogleCloudPlatform/java-docs-samples/tree/master/run).\n+\n+[![Run in Google Cloud][run_img]][run_link]\n+\n+[run_img]: https://storage.googleapis.com/cloudrun/button.svg\n+[run_link]: https://deploy.cloud.run/?git_repo=https://github.com/GoogleCloudPlatform/java-docs-samples&dir=run/events-storage\n+\n+\n+## Dependencies\n+\n+* **Spring Boot**: Web server framework.\n+* **Jib**: Container build tool.\n+* **Junit + SpringBootTest**: [development] Test running framework.\n+* **MockMVC**: [development] Integration testing support framework.\n+\n+## Setup\n+\n+Configure environment variables:\n+\n+```sh\n+export MY_RUN_SERVICE=gcs-service\n+export MY_RUN_CONTAINER=gcs-container\n+export MY_GCS_TRIGGER=gcs-trigger\n+export MY_GCS_BUCKET=\"$(gcloud config get-value project)-gcs-bucket\"\n+```\n+\n+## Quickstart\n+\n+Use the [Jib Maven Plugin](https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin) to build and push your container image:\n+```sh\n+mvn jib:build -Dimage gcr.io/$(gcloud config get-value project)/$MY_RUN_CONTAINER\n+```\n+\n+Deploy your Cloud Run service:\n+```sh\n+gcloud run deploy $MY_RUN_SERVICE \\\n+ --image gcr.io/$(gcloud config get-value project)/$MY_RUN_CONTAINER \\\n+ --allow-unauthenticated\n+```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d25db3106e6587458d97f8eee0a5542dcf63c28"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76f3476163874a4293ae0467d5aa80da85d6910a", "author": {"user": {"login": "averikitsch", "name": "Averi Kitsch"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/76f3476163874a4293ae0467d5aa80da85d6910a", "committedDate": "2020-06-25T22:55:46Z", "message": "Update test JSON and README"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3OTE2Mzk4", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3256#pullrequestreview-437916398", "createdAt": "2020-06-25T23:05:06Z", "commit": {"oid": "76f3476163874a4293ae0467d5aa80da85d6910a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 635, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}