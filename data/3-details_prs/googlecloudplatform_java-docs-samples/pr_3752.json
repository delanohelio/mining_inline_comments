{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4OTE0MDYx", "number": 3752, "title": "[IAM] Remove old quickstart, add dependencies", "bodyText": "Removes old Quickstart. Also adds dependencies for IAM Credentials and Troubleshooter, which will be used to keep the client library install instructions up-to-date.\n\n\n I have followed Sample Format Guide\n\n\n pom.xml parent set to latest shared-configuration\n\n\n Appropriate changes to README are included in PR\n\n\n Tests pass:   mvn clean verify required\n\n\n Lint  passes: mvn -P lint checkstyle:check required\n\n\n Please merge this PR for me once it is approved.\n\nPlease coordinate with me though because I need to publish a documentation CL simultaneously (cl/332295147)", "createdAt": "2020-09-17T20:28:48Z", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752", "merged": true, "mergeCommit": {"oid": "ba096de0c440fdf5bfe9615a0254efc5eac80561"}, "closed": true, "closedAt": "2020-09-17T21:52:48Z", "author": {"login": "melaniedejong"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJ2apcAH2gAyNDg4OTE0MDYxOmRiZjM0Nzk1MmNmMDFhOGM0YTFlMmYzMTc3MDFkMjBlZWUwYzFmMjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJ4H-ggH2gAyNDg4OTE0MDYxOmQ3ODdiNmJhMWQ4NGU2NWJlZjY0OGJhZTk5ZWY1NzgxN2RlZDM1OGQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "dbf347952cf01a8c4a1e2f317701d20eee0c1f25", "author": {"user": {"login": "melaniedejong", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/dbf347952cf01a8c4a1e2f317701d20eee0c1f25", "committedDate": "2020-09-17T19:46:32Z", "message": "Remove old quickstart, add dependencies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4668138b26c021508b22466d98a07bba6efec091", "author": {"user": {"login": "melaniedejong", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/4668138b26c021508b22466d98a07bba6efec091", "committedDate": "2020-09-17T19:59:24Z", "message": "Update QuickstartTests file name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d3d62b5f7d08c128ca865bc3e52177fbd433b62", "author": {"user": {"login": "melaniedejong", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/7d3d62b5f7d08c128ca865bc3e52177fbd433b62", "committedDate": "2020-09-17T20:25:52Z", "message": "Update README and enable mvn:exec for quickstart"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwOTcxNjQ0", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#pullrequestreview-490971644", "createdAt": "2020-09-17T20:39:01Z", "commit": {"oid": "7d3d62b5f7d08c128ca865bc3e52177fbd433b62"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDozOTowMVrOHT0slw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDozOTowMVrOHT0slw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU0ODM3NQ==", "bodyText": "You don't need to update this.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#discussion_r490548375", "createdAt": "2020-09-17T20:39:01Z", "author": {"login": "lesv"}, "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "diffHunk": "@@ -1,4 +1,4 @@\n-/* Copyright 2018 Google LLC\n+/* Copyright 2020 Google LLC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d62b5f7d08c128ca865bc3e52177fbd433b62"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwOTcyOTg1", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#pullrequestreview-490972985", "createdAt": "2020-09-17T20:41:05Z", "commit": {"oid": "7d3d62b5f7d08c128ca865bc3e52177fbd433b62"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDo0MTowNlrOHT0wvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDo0MTowNlrOHT0wvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU0OTQzNw==", "bodyText": "We generally don't want to catch exceptions if they aren't going to do anything.\nSee sample format guide.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#discussion_r490549437", "createdAt": "2020-09-17T20:41:06Z", "author": {"login": "lesv"}, "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "diffHunk": "@@ -13,48 +13,161 @@\n  * limitations under the License.\n  */\n \n-// [START iam_quickstart]\n-\n package iam.snippets;\n \n+// [START iam_quickstart]\n import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n import com.google.api.client.json.jackson2.JacksonFactory;\n-import com.google.api.services.iam.v1.Iam;\n+import com.google.api.services.cloudresourcemanager.CloudResourceManager;\n+import com.google.api.services.cloudresourcemanager.model.Binding;\n+import com.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest;\n+import com.google.api.services.cloudresourcemanager.model.Policy;\n+import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\n import com.google.api.services.iam.v1.IamScopes;\n-import com.google.api.services.iam.v1.model.ListRolesResponse;\n-import com.google.api.services.iam.v1.model.Role;\n import com.google.auth.http.HttpCredentialsAdapter;\n import com.google.auth.oauth2.GoogleCredentials;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n import java.util.Collections;\n import java.util.List;\n \n public class Quickstart {\n \n-  public static void main(String[] args) throws Exception {\n-    // Get credentials\n+  public static void main(String[] args) {\n+    // TODO: Replace with your project ID.\n+    String projectId = \"your-project\";\n+    // TODO: Replace with the ID of your member in the form \"user:member@example.com\"\n+    String member = \"your-member\";\n+    // The role to be granted.\n+    String role = \"roles/logging.logWriter\";\n+\n+    // Initializes the Cloud Resource Manager service.\n+    CloudResourceManager crmService = null;\n+    try {\n+      crmService = initializeService();\n+    } catch (IOException | GeneralSecurityException e) {\n+      System.out.println(\"Unable to initialize service: \\n\" + e.toString());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d62b5f7d08c128ca865bc3e52177fbd433b62"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwOTczODcz", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#pullrequestreview-490973873", "createdAt": "2020-09-17T20:42:26Z", "commit": {"oid": "7d3d62b5f7d08c128ca865bc3e52177fbd433b62"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDo0MjoyNlrOHT0zpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDo0MjoyNlrOHT0zpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1MDE4Mw==", "bodyText": "It might be better if you used \"Java IAM Quickstart snippet\"", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#discussion_r490550183", "createdAt": "2020-09-17T20:42:26Z", "author": {"login": "lesv"}, "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "diffHunk": "@@ -13,48 +13,161 @@\n  * limitations under the License.\n  */\n \n-// [START iam_quickstart]\n-\n package iam.snippets;\n \n+// [START iam_quickstart]\n import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n import com.google.api.client.json.jackson2.JacksonFactory;\n-import com.google.api.services.iam.v1.Iam;\n+import com.google.api.services.cloudresourcemanager.CloudResourceManager;\n+import com.google.api.services.cloudresourcemanager.model.Binding;\n+import com.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest;\n+import com.google.api.services.cloudresourcemanager.model.Policy;\n+import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\n import com.google.api.services.iam.v1.IamScopes;\n-import com.google.api.services.iam.v1.model.ListRolesResponse;\n-import com.google.api.services.iam.v1.model.Role;\n import com.google.auth.http.HttpCredentialsAdapter;\n import com.google.auth.oauth2.GoogleCredentials;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n import java.util.Collections;\n import java.util.List;\n \n public class Quickstart {\n \n-  public static void main(String[] args) throws Exception {\n-    // Get credentials\n+  public static void main(String[] args) {\n+    // TODO: Replace with your project ID.\n+    String projectId = \"your-project\";\n+    // TODO: Replace with the ID of your member in the form \"user:member@example.com\"\n+    String member = \"your-member\";\n+    // The role to be granted.\n+    String role = \"roles/logging.logWriter\";\n+\n+    // Initializes the Cloud Resource Manager service.\n+    CloudResourceManager crmService = null;\n+    try {\n+      crmService = initializeService();\n+    } catch (IOException | GeneralSecurityException e) {\n+      System.out.println(\"Unable to initialize service: \\n\" + e.toString());\n+    }\n+\n+    // Grants your member the \"Log writer\" role for your project.\n+    addBinding(crmService, projectId, member, role);\n+\n+    // Get the project's policy and print all members with the \"Log Writer\" role\n+    Policy policy = getPolicy(crmService, projectId);\n+    Binding binding = null;\n+    List<Binding> bindings = policy.getBindings();\n+    for (Binding b : bindings) {\n+      if (b.getRole().equals(role)) {\n+        binding = b;\n+        break;\n+      }\n+    }\n+    System.out.println(\"Role: \" + binding.getRole());\n+    System.out.print(\"Members: \");\n+    for (String m : binding.getMembers()) {\n+      System.out.print(\"[\" + m + \"] \");\n+    }\n+    System.out.println();\n+\n+    // Removes member from the \"Log writer\" role.\n+    removeMember(crmService, projectId, member, role);\n+  }\n+\n+  public static CloudResourceManager initializeService()\n+      throws IOException, GeneralSecurityException {\n+    // Use the Application Default Credentials strategy for authentication. For more info, see:\n+    // https://cloud.google.com/docs/authentication/production#finding_credentials_automatically\n     GoogleCredentials credential =\n         GoogleCredentials.getApplicationDefault()\n             .createScoped(Collections.singleton(IamScopes.CLOUD_PLATFORM));\n \n-    // Create the Cloud IAM service object\n-    Iam service =\n-        new Iam.Builder(\n+    // Creates the Cloud Resource Manager service object.\n+    CloudResourceManager service =\n+        new CloudResourceManager.Builder(\n                 GoogleNetHttpTransport.newTrustedTransport(),\n                 JacksonFactory.getDefaultInstance(),\n                 new HttpCredentialsAdapter(credential))\n-            .setApplicationName(\"quickstart\")\n+            .setApplicationName(\"service-accounts\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d62b5f7d08c128ca865bc3e52177fbd433b62"}, "originalPosition": 95}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwOTc1NTE1", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#pullrequestreview-490975515", "createdAt": "2020-09-17T20:45:00Z", "commit": {"oid": "7d3d62b5f7d08c128ca865bc3e52177fbd433b62"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDo0NTowMFrOHT04vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDo0ODo1M1rOHT1AcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1MTQ4NA==", "bodyText": "I'm good with b, but I've noticed a lot of reviewers prefer to see binding, which is more idiomatic java.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#discussion_r490551484", "createdAt": "2020-09-17T20:45:00Z", "author": {"login": "lesv"}, "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "diffHunk": "@@ -13,48 +13,161 @@\n  * limitations under the License.\n  */\n \n-// [START iam_quickstart]\n-\n package iam.snippets;\n \n+// [START iam_quickstart]\n import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n import com.google.api.client.json.jackson2.JacksonFactory;\n-import com.google.api.services.iam.v1.Iam;\n+import com.google.api.services.cloudresourcemanager.CloudResourceManager;\n+import com.google.api.services.cloudresourcemanager.model.Binding;\n+import com.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest;\n+import com.google.api.services.cloudresourcemanager.model.Policy;\n+import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\n import com.google.api.services.iam.v1.IamScopes;\n-import com.google.api.services.iam.v1.model.ListRolesResponse;\n-import com.google.api.services.iam.v1.model.Role;\n import com.google.auth.http.HttpCredentialsAdapter;\n import com.google.auth.oauth2.GoogleCredentials;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n import java.util.Collections;\n import java.util.List;\n \n public class Quickstart {\n \n-  public static void main(String[] args) throws Exception {\n-    // Get credentials\n+  public static void main(String[] args) {\n+    // TODO: Replace with your project ID.\n+    String projectId = \"your-project\";\n+    // TODO: Replace with the ID of your member in the form \"user:member@example.com\"\n+    String member = \"your-member\";\n+    // The role to be granted.\n+    String role = \"roles/logging.logWriter\";\n+\n+    // Initializes the Cloud Resource Manager service.\n+    CloudResourceManager crmService = null;\n+    try {\n+      crmService = initializeService();\n+    } catch (IOException | GeneralSecurityException e) {\n+      System.out.println(\"Unable to initialize service: \\n\" + e.toString());\n+    }\n+\n+    // Grants your member the \"Log writer\" role for your project.\n+    addBinding(crmService, projectId, member, role);\n+\n+    // Get the project's policy and print all members with the \"Log Writer\" role\n+    Policy policy = getPolicy(crmService, projectId);\n+    Binding binding = null;\n+    List<Binding> bindings = policy.getBindings();\n+    for (Binding b : bindings) {\n+      if (b.getRole().equals(role)) {\n+        binding = b;\n+        break;\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d62b5f7d08c128ca865bc3e52177fbd433b62"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1MTY0Mw==", "bodyText": "member insead of m", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#discussion_r490551643", "createdAt": "2020-09-17T20:45:17Z", "author": {"login": "lesv"}, "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "diffHunk": "@@ -13,48 +13,161 @@\n  * limitations under the License.\n  */\n \n-// [START iam_quickstart]\n-\n package iam.snippets;\n \n+// [START iam_quickstart]\n import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n import com.google.api.client.json.jackson2.JacksonFactory;\n-import com.google.api.services.iam.v1.Iam;\n+import com.google.api.services.cloudresourcemanager.CloudResourceManager;\n+import com.google.api.services.cloudresourcemanager.model.Binding;\n+import com.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest;\n+import com.google.api.services.cloudresourcemanager.model.Policy;\n+import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\n import com.google.api.services.iam.v1.IamScopes;\n-import com.google.api.services.iam.v1.model.ListRolesResponse;\n-import com.google.api.services.iam.v1.model.Role;\n import com.google.auth.http.HttpCredentialsAdapter;\n import com.google.auth.oauth2.GoogleCredentials;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n import java.util.Collections;\n import java.util.List;\n \n public class Quickstart {\n \n-  public static void main(String[] args) throws Exception {\n-    // Get credentials\n+  public static void main(String[] args) {\n+    // TODO: Replace with your project ID.\n+    String projectId = \"your-project\";\n+    // TODO: Replace with the ID of your member in the form \"user:member@example.com\"\n+    String member = \"your-member\";\n+    // The role to be granted.\n+    String role = \"roles/logging.logWriter\";\n+\n+    // Initializes the Cloud Resource Manager service.\n+    CloudResourceManager crmService = null;\n+    try {\n+      crmService = initializeService();\n+    } catch (IOException | GeneralSecurityException e) {\n+      System.out.println(\"Unable to initialize service: \\n\" + e.toString());\n+    }\n+\n+    // Grants your member the \"Log writer\" role for your project.\n+    addBinding(crmService, projectId, member, role);\n+\n+    // Get the project's policy and print all members with the \"Log Writer\" role\n+    Policy policy = getPolicy(crmService, projectId);\n+    Binding binding = null;\n+    List<Binding> bindings = policy.getBindings();\n+    for (Binding b : bindings) {\n+      if (b.getRole().equals(role)) {\n+        binding = b;\n+        break;\n+      }\n+    }\n+    System.out.println(\"Role: \" + binding.getRole());\n+    System.out.print(\"Members: \");\n+    for (String m : binding.getMembers()) {\n+      System.out.print(\"[\" + m + \"] \");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d62b5f7d08c128ca865bc3e52177fbd433b62"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1MjU0Ng==", "bodyText": "Of course using binding here would overload it.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#discussion_r490552546", "createdAt": "2020-09-17T20:47:07Z", "author": {"login": "lesv"}, "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "diffHunk": "@@ -13,48 +13,161 @@\n  * limitations under the License.\n  */\n \n-// [START iam_quickstart]\n-\n package iam.snippets;\n \n+// [START iam_quickstart]\n import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n import com.google.api.client.json.jackson2.JacksonFactory;\n-import com.google.api.services.iam.v1.Iam;\n+import com.google.api.services.cloudresourcemanager.CloudResourceManager;\n+import com.google.api.services.cloudresourcemanager.model.Binding;\n+import com.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest;\n+import com.google.api.services.cloudresourcemanager.model.Policy;\n+import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\n import com.google.api.services.iam.v1.IamScopes;\n-import com.google.api.services.iam.v1.model.ListRolesResponse;\n-import com.google.api.services.iam.v1.model.Role;\n import com.google.auth.http.HttpCredentialsAdapter;\n import com.google.auth.oauth2.GoogleCredentials;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n import java.util.Collections;\n import java.util.List;\n \n public class Quickstart {\n \n-  public static void main(String[] args) throws Exception {\n-    // Get credentials\n+  public static void main(String[] args) {\n+    // TODO: Replace with your project ID.\n+    String projectId = \"your-project\";\n+    // TODO: Replace with the ID of your member in the form \"user:member@example.com\"\n+    String member = \"your-member\";\n+    // The role to be granted.\n+    String role = \"roles/logging.logWriter\";\n+\n+    // Initializes the Cloud Resource Manager service.\n+    CloudResourceManager crmService = null;\n+    try {\n+      crmService = initializeService();\n+    } catch (IOException | GeneralSecurityException e) {\n+      System.out.println(\"Unable to initialize service: \\n\" + e.toString());\n+    }\n+\n+    // Grants your member the \"Log writer\" role for your project.\n+    addBinding(crmService, projectId, member, role);\n+\n+    // Get the project's policy and print all members with the \"Log Writer\" role\n+    Policy policy = getPolicy(crmService, projectId);\n+    Binding binding = null;\n+    List<Binding> bindings = policy.getBindings();\n+    for (Binding b : bindings) {\n+      if (b.getRole().equals(role)) {\n+        binding = b;\n+        break;\n+      }\n+    }\n+    System.out.println(\"Role: \" + binding.getRole());\n+    System.out.print(\"Members: \");\n+    for (String m : binding.getMembers()) {\n+      System.out.print(\"[\" + m + \"] \");\n+    }\n+    System.out.println();\n+\n+    // Removes member from the \"Log writer\" role.\n+    removeMember(crmService, projectId, member, role);\n+  }\n+\n+  public static CloudResourceManager initializeService()\n+      throws IOException, GeneralSecurityException {\n+    // Use the Application Default Credentials strategy for authentication. For more info, see:\n+    // https://cloud.google.com/docs/authentication/production#finding_credentials_automatically\n     GoogleCredentials credential =\n         GoogleCredentials.getApplicationDefault()\n             .createScoped(Collections.singleton(IamScopes.CLOUD_PLATFORM));\n \n-    // Create the Cloud IAM service object\n-    Iam service =\n-        new Iam.Builder(\n+    // Creates the Cloud Resource Manager service object.\n+    CloudResourceManager service =\n+        new CloudResourceManager.Builder(\n                 GoogleNetHttpTransport.newTrustedTransport(),\n                 JacksonFactory.getDefaultInstance(),\n                 new HttpCredentialsAdapter(credential))\n-            .setApplicationName(\"quickstart\")\n+            .setApplicationName(\"service-accounts\")\n             .build();\n+    return service;\n+  }\n+\n+  public static void addBinding(\n+      CloudResourceManager crmService, String projectId, String member, String role) {\n+\n+    // Gets the project's policy.\n+    Policy policy = getPolicy(crmService, projectId);\n \n-    // Call the Cloud IAM Roles API\n-    ListRolesResponse response = service.roles().list().execute();\n-    List<Role> roles = response.getRoles();\n+    // Finds binding in policy, if it exists\n+    Binding binding = null;\n+    for (Binding b : policy.getBindings()) {\n+      if (b.getRole().equals(role)) {\n+        binding = b; \n+        break;\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d62b5f7d08c128ca865bc3e52177fbd433b62"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1MjcyMw==", "bodyText": "and again here.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#discussion_r490552723", "createdAt": "2020-09-17T20:47:25Z", "author": {"login": "lesv"}, "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "diffHunk": "@@ -13,48 +13,161 @@\n  * limitations under the License.\n  */\n \n-// [START iam_quickstart]\n-\n package iam.snippets;\n \n+// [START iam_quickstart]\n import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n import com.google.api.client.json.jackson2.JacksonFactory;\n-import com.google.api.services.iam.v1.Iam;\n+import com.google.api.services.cloudresourcemanager.CloudResourceManager;\n+import com.google.api.services.cloudresourcemanager.model.Binding;\n+import com.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest;\n+import com.google.api.services.cloudresourcemanager.model.Policy;\n+import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\n import com.google.api.services.iam.v1.IamScopes;\n-import com.google.api.services.iam.v1.model.ListRolesResponse;\n-import com.google.api.services.iam.v1.model.Role;\n import com.google.auth.http.HttpCredentialsAdapter;\n import com.google.auth.oauth2.GoogleCredentials;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n import java.util.Collections;\n import java.util.List;\n \n public class Quickstart {\n \n-  public static void main(String[] args) throws Exception {\n-    // Get credentials\n+  public static void main(String[] args) {\n+    // TODO: Replace with your project ID.\n+    String projectId = \"your-project\";\n+    // TODO: Replace with the ID of your member in the form \"user:member@example.com\"\n+    String member = \"your-member\";\n+    // The role to be granted.\n+    String role = \"roles/logging.logWriter\";\n+\n+    // Initializes the Cloud Resource Manager service.\n+    CloudResourceManager crmService = null;\n+    try {\n+      crmService = initializeService();\n+    } catch (IOException | GeneralSecurityException e) {\n+      System.out.println(\"Unable to initialize service: \\n\" + e.toString());\n+    }\n+\n+    // Grants your member the \"Log writer\" role for your project.\n+    addBinding(crmService, projectId, member, role);\n+\n+    // Get the project's policy and print all members with the \"Log Writer\" role\n+    Policy policy = getPolicy(crmService, projectId);\n+    Binding binding = null;\n+    List<Binding> bindings = policy.getBindings();\n+    for (Binding b : bindings) {\n+      if (b.getRole().equals(role)) {\n+        binding = b;\n+        break;\n+      }\n+    }\n+    System.out.println(\"Role: \" + binding.getRole());\n+    System.out.print(\"Members: \");\n+    for (String m : binding.getMembers()) {\n+      System.out.print(\"[\" + m + \"] \");\n+    }\n+    System.out.println();\n+\n+    // Removes member from the \"Log writer\" role.\n+    removeMember(crmService, projectId, member, role);\n+  }\n+\n+  public static CloudResourceManager initializeService()\n+      throws IOException, GeneralSecurityException {\n+    // Use the Application Default Credentials strategy for authentication. For more info, see:\n+    // https://cloud.google.com/docs/authentication/production#finding_credentials_automatically\n     GoogleCredentials credential =\n         GoogleCredentials.getApplicationDefault()\n             .createScoped(Collections.singleton(IamScopes.CLOUD_PLATFORM));\n \n-    // Create the Cloud IAM service object\n-    Iam service =\n-        new Iam.Builder(\n+    // Creates the Cloud Resource Manager service object.\n+    CloudResourceManager service =\n+        new CloudResourceManager.Builder(\n                 GoogleNetHttpTransport.newTrustedTransport(),\n                 JacksonFactory.getDefaultInstance(),\n                 new HttpCredentialsAdapter(credential))\n-            .setApplicationName(\"quickstart\")\n+            .setApplicationName(\"service-accounts\")\n             .build();\n+    return service;\n+  }\n+\n+  public static void addBinding(\n+      CloudResourceManager crmService, String projectId, String member, String role) {\n+\n+    // Gets the project's policy.\n+    Policy policy = getPolicy(crmService, projectId);\n \n-    // Call the Cloud IAM Roles API\n-    ListRolesResponse response = service.roles().list().execute();\n-    List<Role> roles = response.getRoles();\n+    // Finds binding in policy, if it exists\n+    Binding binding = null;\n+    for (Binding b : policy.getBindings()) {\n+      if (b.getRole().equals(role)) {\n+        binding = b; \n+        break;\n+      }\n+    }\n+\n+    if (binding != null) {\n+      // If binding already exists, adds member to binding.\n+      binding.getMembers().add(member);\n+    } else {\n+      // If binding does not exist, adds binding to policy.\n+      binding = new Binding();\n+      binding.setRole(role);\n+      binding.setMembers(Collections.singletonList(member));\n+      policy.getBindings().add(binding);\n+    }\n+\n+    // Sets the updated policy\n+    setPolicy(crmService, projectId, policy);\n+  }\n+\n+  public static void removeMember(\n+      CloudResourceManager crmService, String projectId, String member, String role) {\n+    // Gets the project's policy.\n+    Policy policy = getPolicy(crmService, projectId);\n+\n+    // Removes the member from the role.\n+    Binding binding = null;\n+    for (Binding b : policy.getBindings()) {\n+      if (b.getRole().equals(role)) {\n+        binding = b;\n+        break;\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d62b5f7d08c128ca865bc3e52177fbd433b62"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1MzMwOQ==", "bodyText": "Better to just add a throws to getPolicy and not catch IOException if you aren't doing anything with it.", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#discussion_r490553309", "createdAt": "2020-09-17T20:48:34Z", "author": {"login": "lesv"}, "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "diffHunk": "@@ -13,48 +13,161 @@\n  * limitations under the License.\n  */\n \n-// [START iam_quickstart]\n-\n package iam.snippets;\n \n+// [START iam_quickstart]\n import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n import com.google.api.client.json.jackson2.JacksonFactory;\n-import com.google.api.services.iam.v1.Iam;\n+import com.google.api.services.cloudresourcemanager.CloudResourceManager;\n+import com.google.api.services.cloudresourcemanager.model.Binding;\n+import com.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest;\n+import com.google.api.services.cloudresourcemanager.model.Policy;\n+import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\n import com.google.api.services.iam.v1.IamScopes;\n-import com.google.api.services.iam.v1.model.ListRolesResponse;\n-import com.google.api.services.iam.v1.model.Role;\n import com.google.auth.http.HttpCredentialsAdapter;\n import com.google.auth.oauth2.GoogleCredentials;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n import java.util.Collections;\n import java.util.List;\n \n public class Quickstart {\n \n-  public static void main(String[] args) throws Exception {\n-    // Get credentials\n+  public static void main(String[] args) {\n+    // TODO: Replace with your project ID.\n+    String projectId = \"your-project\";\n+    // TODO: Replace with the ID of your member in the form \"user:member@example.com\"\n+    String member = \"your-member\";\n+    // The role to be granted.\n+    String role = \"roles/logging.logWriter\";\n+\n+    // Initializes the Cloud Resource Manager service.\n+    CloudResourceManager crmService = null;\n+    try {\n+      crmService = initializeService();\n+    } catch (IOException | GeneralSecurityException e) {\n+      System.out.println(\"Unable to initialize service: \\n\" + e.toString());\n+    }\n+\n+    // Grants your member the \"Log writer\" role for your project.\n+    addBinding(crmService, projectId, member, role);\n+\n+    // Get the project's policy and print all members with the \"Log Writer\" role\n+    Policy policy = getPolicy(crmService, projectId);\n+    Binding binding = null;\n+    List<Binding> bindings = policy.getBindings();\n+    for (Binding b : bindings) {\n+      if (b.getRole().equals(role)) {\n+        binding = b;\n+        break;\n+      }\n+    }\n+    System.out.println(\"Role: \" + binding.getRole());\n+    System.out.print(\"Members: \");\n+    for (String m : binding.getMembers()) {\n+      System.out.print(\"[\" + m + \"] \");\n+    }\n+    System.out.println();\n+\n+    // Removes member from the \"Log writer\" role.\n+    removeMember(crmService, projectId, member, role);\n+  }\n+\n+  public static CloudResourceManager initializeService()\n+      throws IOException, GeneralSecurityException {\n+    // Use the Application Default Credentials strategy for authentication. For more info, see:\n+    // https://cloud.google.com/docs/authentication/production#finding_credentials_automatically\n     GoogleCredentials credential =\n         GoogleCredentials.getApplicationDefault()\n             .createScoped(Collections.singleton(IamScopes.CLOUD_PLATFORM));\n \n-    // Create the Cloud IAM service object\n-    Iam service =\n-        new Iam.Builder(\n+    // Creates the Cloud Resource Manager service object.\n+    CloudResourceManager service =\n+        new CloudResourceManager.Builder(\n                 GoogleNetHttpTransport.newTrustedTransport(),\n                 JacksonFactory.getDefaultInstance(),\n                 new HttpCredentialsAdapter(credential))\n-            .setApplicationName(\"quickstart\")\n+            .setApplicationName(\"service-accounts\")\n             .build();\n+    return service;\n+  }\n+\n+  public static void addBinding(\n+      CloudResourceManager crmService, String projectId, String member, String role) {\n+\n+    // Gets the project's policy.\n+    Policy policy = getPolicy(crmService, projectId);\n \n-    // Call the Cloud IAM Roles API\n-    ListRolesResponse response = service.roles().list().execute();\n-    List<Role> roles = response.getRoles();\n+    // Finds binding in policy, if it exists\n+    Binding binding = null;\n+    for (Binding b : policy.getBindings()) {\n+      if (b.getRole().equals(role)) {\n+        binding = b; \n+        break;\n+      }\n+    }\n+\n+    if (binding != null) {\n+      // If binding already exists, adds member to binding.\n+      binding.getMembers().add(member);\n+    } else {\n+      // If binding does not exist, adds binding to policy.\n+      binding = new Binding();\n+      binding.setRole(role);\n+      binding.setMembers(Collections.singletonList(member));\n+      policy.getBindings().add(binding);\n+    }\n+\n+    // Sets the updated policy\n+    setPolicy(crmService, projectId, policy);\n+  }\n+\n+  public static void removeMember(\n+      CloudResourceManager crmService, String projectId, String member, String role) {\n+    // Gets the project's policy.\n+    Policy policy = getPolicy(crmService, projectId);\n+\n+    // Removes the member from the role.\n+    Binding binding = null;\n+    for (Binding b : policy.getBindings()) {\n+      if (b.getRole().equals(role)) {\n+        binding = b;\n+        break;\n+      }\n+    }\n+    if (binding.getMembers().contains(member)) {\n+      binding.getMembers().remove(member);\n+      if (binding.getMembers().isEmpty()) {\n+        policy.getBindings().remove(binding);\n+      }\n+    }\n+\n+    // Sets the updated policy.\n+    setPolicy(crmService, projectId, policy);\n+  }\n+\n+  public static Policy getPolicy(CloudResourceManager crmService, String projectId) {\n+    // Gets the project's policy by calling the\n+    // Cloud Resource Manager Projects API.\n+    Policy policy = null;\n+    try {\n+      GetIamPolicyRequest request = new GetIamPolicyRequest();\n+      policy = crmService.projects().getIamPolicy(projectId, request).execute();\n+    } catch (IOException e) {\n+      System.out.println(\"Unable to get policy: \\n\" + e.toString());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d62b5f7d08c128ca865bc3e52177fbd433b62"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1MzQ1Nw==", "bodyText": "Same comment as earlier about exceptions", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#discussion_r490553457", "createdAt": "2020-09-17T20:48:53Z", "author": {"login": "lesv"}, "path": "iam/api-client/src/main/java/iam/snippets/Quickstart.java", "diffHunk": "@@ -13,48 +13,161 @@\n  * limitations under the License.\n  */\n \n-// [START iam_quickstart]\n-\n package iam.snippets;\n \n+// [START iam_quickstart]\n import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n import com.google.api.client.json.jackson2.JacksonFactory;\n-import com.google.api.services.iam.v1.Iam;\n+import com.google.api.services.cloudresourcemanager.CloudResourceManager;\n+import com.google.api.services.cloudresourcemanager.model.Binding;\n+import com.google.api.services.cloudresourcemanager.model.GetIamPolicyRequest;\n+import com.google.api.services.cloudresourcemanager.model.Policy;\n+import com.google.api.services.cloudresourcemanager.model.SetIamPolicyRequest;\n import com.google.api.services.iam.v1.IamScopes;\n-import com.google.api.services.iam.v1.model.ListRolesResponse;\n-import com.google.api.services.iam.v1.model.Role;\n import com.google.auth.http.HttpCredentialsAdapter;\n import com.google.auth.oauth2.GoogleCredentials;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n import java.util.Collections;\n import java.util.List;\n \n public class Quickstart {\n \n-  public static void main(String[] args) throws Exception {\n-    // Get credentials\n+  public static void main(String[] args) {\n+    // TODO: Replace with your project ID.\n+    String projectId = \"your-project\";\n+    // TODO: Replace with the ID of your member in the form \"user:member@example.com\"\n+    String member = \"your-member\";\n+    // The role to be granted.\n+    String role = \"roles/logging.logWriter\";\n+\n+    // Initializes the Cloud Resource Manager service.\n+    CloudResourceManager crmService = null;\n+    try {\n+      crmService = initializeService();\n+    } catch (IOException | GeneralSecurityException e) {\n+      System.out.println(\"Unable to initialize service: \\n\" + e.toString());\n+    }\n+\n+    // Grants your member the \"Log writer\" role for your project.\n+    addBinding(crmService, projectId, member, role);\n+\n+    // Get the project's policy and print all members with the \"Log Writer\" role\n+    Policy policy = getPolicy(crmService, projectId);\n+    Binding binding = null;\n+    List<Binding> bindings = policy.getBindings();\n+    for (Binding b : bindings) {\n+      if (b.getRole().equals(role)) {\n+        binding = b;\n+        break;\n+      }\n+    }\n+    System.out.println(\"Role: \" + binding.getRole());\n+    System.out.print(\"Members: \");\n+    for (String m : binding.getMembers()) {\n+      System.out.print(\"[\" + m + \"] \");\n+    }\n+    System.out.println();\n+\n+    // Removes member from the \"Log writer\" role.\n+    removeMember(crmService, projectId, member, role);\n+  }\n+\n+  public static CloudResourceManager initializeService()\n+      throws IOException, GeneralSecurityException {\n+    // Use the Application Default Credentials strategy for authentication. For more info, see:\n+    // https://cloud.google.com/docs/authentication/production#finding_credentials_automatically\n     GoogleCredentials credential =\n         GoogleCredentials.getApplicationDefault()\n             .createScoped(Collections.singleton(IamScopes.CLOUD_PLATFORM));\n \n-    // Create the Cloud IAM service object\n-    Iam service =\n-        new Iam.Builder(\n+    // Creates the Cloud Resource Manager service object.\n+    CloudResourceManager service =\n+        new CloudResourceManager.Builder(\n                 GoogleNetHttpTransport.newTrustedTransport(),\n                 JacksonFactory.getDefaultInstance(),\n                 new HttpCredentialsAdapter(credential))\n-            .setApplicationName(\"quickstart\")\n+            .setApplicationName(\"service-accounts\")\n             .build();\n+    return service;\n+  }\n+\n+  public static void addBinding(\n+      CloudResourceManager crmService, String projectId, String member, String role) {\n+\n+    // Gets the project's policy.\n+    Policy policy = getPolicy(crmService, projectId);\n \n-    // Call the Cloud IAM Roles API\n-    ListRolesResponse response = service.roles().list().execute();\n-    List<Role> roles = response.getRoles();\n+    // Finds binding in policy, if it exists\n+    Binding binding = null;\n+    for (Binding b : policy.getBindings()) {\n+      if (b.getRole().equals(role)) {\n+        binding = b; \n+        break;\n+      }\n+    }\n+\n+    if (binding != null) {\n+      // If binding already exists, adds member to binding.\n+      binding.getMembers().add(member);\n+    } else {\n+      // If binding does not exist, adds binding to policy.\n+      binding = new Binding();\n+      binding.setRole(role);\n+      binding.setMembers(Collections.singletonList(member));\n+      policy.getBindings().add(binding);\n+    }\n+\n+    // Sets the updated policy\n+    setPolicy(crmService, projectId, policy);\n+  }\n+\n+  public static void removeMember(\n+      CloudResourceManager crmService, String projectId, String member, String role) {\n+    // Gets the project's policy.\n+    Policy policy = getPolicy(crmService, projectId);\n+\n+    // Removes the member from the role.\n+    Binding binding = null;\n+    for (Binding b : policy.getBindings()) {\n+      if (b.getRole().equals(role)) {\n+        binding = b;\n+        break;\n+      }\n+    }\n+    if (binding.getMembers().contains(member)) {\n+      binding.getMembers().remove(member);\n+      if (binding.getMembers().isEmpty()) {\n+        policy.getBindings().remove(binding);\n+      }\n+    }\n+\n+    // Sets the updated policy.\n+    setPolicy(crmService, projectId, policy);\n+  }\n+\n+  public static Policy getPolicy(CloudResourceManager crmService, String projectId) {\n+    // Gets the project's policy by calling the\n+    // Cloud Resource Manager Projects API.\n+    Policy policy = null;\n+    try {\n+      GetIamPolicyRequest request = new GetIamPolicyRequest();\n+      policy = crmService.projects().getIamPolicy(projectId, request).execute();\n+    } catch (IOException e) {\n+      System.out.println(\"Unable to get policy: \\n\" + e.toString());\n+    }\n+    return policy;\n+  }\n \n-    // Process the response\n-    for (Role role : roles) {\n-      System.out.println(\"Title: \" + role.getTitle());\n-      System.out.println(\"Name: \" + role.getName());\n-      System.out.println(\"Description: \" + role.getDescription());\n-      System.out.println();\n+  private static void setPolicy(CloudResourceManager crmService, String projectId, Policy policy) {\n+    // Sets the project's policy by calling the\n+    // Cloud Resource Manager Projects API.\n+    try {\n+      SetIamPolicyRequest request = new SetIamPolicyRequest();\n+      request.setPolicy(policy);\n+      crmService.projects().setIamPolicy(projectId, request).execute();\n+    } catch (IOException e) {\n+      System.out.println(\"Unable to set policy: \\n\" + e.toString());\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d62b5f7d08c128ca865bc3e52177fbd433b62"}, "originalPosition": 185}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwOTk2MTAz", "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/pull/3752#pullrequestreview-490996103", "createdAt": "2020-09-17T21:18:28Z", "commit": {"oid": "7d3d62b5f7d08c128ca865bc3e52177fbd433b62"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35bd6338a2536dac06f8ec33492382d99ea2d665", "author": {"user": {"login": "melaniedejong", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/35bd6338a2536dac06f8ec33492382d99ea2d665", "committedDate": "2020-09-17T21:19:16Z", "message": "Rename application"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5249eeccb3411d62f07e4f72ee305908b5de58f1", "author": {"user": {"login": "melaniedejong", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/5249eeccb3411d62f07e4f72ee305908b5de58f1", "committedDate": "2020-09-17T21:45:29Z", "message": "Update error reporting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5dc70138dcb4b76ea8280574aa2e349ab7b36519", "author": {"user": {"login": "lesv", "name": "Les Vogel"}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/5dc70138dcb4b76ea8280574aa2e349ab7b36519", "committedDate": "2020-09-17T21:45:38Z", "message": "Merge branch 'master' into quickstart"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d787b6ba1d84e65bef648bae99ef57817ded358d", "author": {"user": {"login": "melaniedejong", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/java-docs-samples/commit/d787b6ba1d84e65bef648bae99ef57817ded358d", "committedDate": "2020-09-17T21:45:57Z", "message": "Merge branch 'quickstart' of https://github.com/melaniedejong/java-docs-samples into quickstart"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 481, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}