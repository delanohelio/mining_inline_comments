{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4MTg2MTUz", "number": 960, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwMDoxNzo0OVrOEqhicA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwODowOTozNlrOEqnSFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDI1MTM2OnYy", "diffSide": "RIGHT", "path": "device/iot-device-samples/pnp-device-sample/temperature-controller-device-sample/src/main/java/samples/com/microsoft/azure/sdk/iot/device/PnpConvention.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwMDoxNzo0OVrOHcx59A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwMDoxNzo0OVrOHcx59A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkzOTgyOA==", "bodyText": "Note: no need to have CreatePropertyPatch taking hashmap since sendReportedProperties already takes a Set and is easy to directly use that.\nSet reportProperties = new HashSet()\n{\n{\nadd(new Property(\"prop1\", 70));\nadd(new Property(\"prop2\", \"value\"));\n}\n};", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/960#discussion_r499939828", "createdAt": "2020-10-06T00:17:49Z", "author": {"login": "bikamani"}, "path": "device/iot-device-samples/pnp-device-sample/temperature-controller-device-sample/src/main/java/samples/com/microsoft/azure/sdk/iot/device/PnpConvention.java", "diffHunk": "@@ -92,18 +105,39 @@ public static Message createIotHubMessageUtf8(@NonNull String telemetryName, @No\n      *     }\n      * }\n      */\n-    public static Set<Property> createPropertyPatch(@NonNull final String propertyName, @NonNull final Object propertyValue, String componentName) {\n+    public static Set<Property> createComponentPropertyPatch(@NonNull final String propertyName, @NonNull final Object propertyValue, @NonNull String componentName) {\n+\n+        return createComponentPropertyPatch(componentName, new HashMap<String, Object>()\n+        {{\n+            put(propertyName, propertyValue);\n+        }});\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48af488cef2f1e7da9c7f20e16a7d27e4ca40147"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTE2NDk3OnYy", "diffSide": "RIGHT", "path": "device/iot-device-samples/pnp-device-sample/temperature-controller-device-sample/src/main/java/samples/com/microsoft/azure/sdk/iot/device/PnpConvention.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwODowMjowNVrOHc6ePw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwODowMjowNVrOHc6ePw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4MDE5MQ==", "bodyText": "he -> the", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/960#discussion_r500080191", "createdAt": "2020-10-06T08:02:05Z", "author": {"login": "barustum"}, "path": "device/iot-device-samples/pnp-device-sample/temperature-controller-device-sample/src/main/java/samples/com/microsoft/azure/sdk/iot/device/PnpConvention.java", "diffHunk": "@@ -49,7 +50,21 @@ public static Message createIotHubMessageUtf8(@NonNull String telemetryName, @No\n     public static Message createIotHubMessageUtf8(@NonNull String telemetryName, @NonNull Object telemetryValue, String componentName) {\n         Map<String, Object> payload = singletonMap(telemetryName, telemetryValue);\n \n-        Message message = new Message(gson.toJson(payload));\n+        return createIotHubMessageUtf8(new HashMap<String, Object>()\n+        {{\n+            put(telemetryName, telemetryValue);\n+        }}, componentName);\n+    }\n+\n+    /**\n+     * Create a plug and play compatible telemetry message.\n+     * @param telemetryPairs he unserialized name and value telemetry pairs, as defined in the DTDL interface. Names must be 64 characters or less. For more details see", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48af488cef2f1e7da9c7f20e16a7d27e4ca40147"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTE3NzQ4OnYy", "diffSide": "RIGHT", "path": "device/iot-device-samples/pnp-device-sample/temperature-controller-device-sample/src/main/java/samples/com/microsoft/azure/sdk/iot/device/PnpConvention.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwODowNToyOFrOHc6mCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjoyMDo0MVrOHdP0tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4MjE4NQ==", "bodyText": "this says componentName is optional, and can be null. Yet the argument is decorated with \"NonNull\". Doesn't that make componentName required?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/960#discussion_r500082185", "createdAt": "2020-10-06T08:05:28Z", "author": {"login": "barustum"}, "path": "device/iot-device-samples/pnp-device-sample/temperature-controller-device-sample/src/main/java/samples/com/microsoft/azure/sdk/iot/device/PnpConvention.java", "diffHunk": "@@ -92,18 +105,39 @@ public static Message createIotHubMessageUtf8(@NonNull String telemetryName, @No\n      *     }\n      * }\n      */\n-    public static Set<Property> createPropertyPatch(@NonNull final String propertyName, @NonNull final Object propertyValue, String componentName) {\n+    public static Set<Property> createComponentPropertyPatch(@NonNull final String propertyName, @NonNull final Object propertyValue, @NonNull String componentName) {\n+\n+        return createComponentPropertyPatch(componentName, new HashMap<String, Object>()\n+        {{\n+            put(propertyName, propertyValue);\n+        }});\n+    }\n+\n+    /**\n+     * Create a key-value property patch for both read-only and read-write properties.\n+     * @param propertyKeyValuePairs The property name and an unserialized value, as defined in the DTDL interface.\n+     * @param componentName (optional) The name of the component in which the property is defined. Can be null for property defined under the root interface.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48af488cef2f1e7da9c7f20e16a7d27e4ca40147"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzMDAwNQ==", "bodyText": "Good observation, will modify comment", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/960#discussion_r500430005", "createdAt": "2020-10-06T16:20:41Z", "author": {"login": "bikamani"}, "path": "device/iot-device-samples/pnp-device-sample/temperature-controller-device-sample/src/main/java/samples/com/microsoft/azure/sdk/iot/device/PnpConvention.java", "diffHunk": "@@ -92,18 +105,39 @@ public static Message createIotHubMessageUtf8(@NonNull String telemetryName, @No\n      *     }\n      * }\n      */\n-    public static Set<Property> createPropertyPatch(@NonNull final String propertyName, @NonNull final Object propertyValue, String componentName) {\n+    public static Set<Property> createComponentPropertyPatch(@NonNull final String propertyName, @NonNull final Object propertyValue, @NonNull String componentName) {\n+\n+        return createComponentPropertyPatch(componentName, new HashMap<String, Object>()\n+        {{\n+            put(propertyName, propertyValue);\n+        }});\n+    }\n+\n+    /**\n+     * Create a key-value property patch for both read-only and read-write properties.\n+     * @param propertyKeyValuePairs The property name and an unserialized value, as defined in the DTDL interface.\n+     * @param componentName (optional) The name of the component in which the property is defined. Can be null for property defined under the root interface.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4MjE4NQ=="}, "originalCommit": {"oid": "48af488cef2f1e7da9c7f20e16a7d27e4ca40147"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTE4OTIzOnYy", "diffSide": "RIGHT", "path": "device/iot-device-samples/pnp-device-sample/temperature-controller-device-sample/src/main/java/samples/com/microsoft/azure/sdk/iot/device/PnpConvention.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwODowODo0MlrOHc6tiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjoyMTowN1rOHdP15Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4NDEwNA==", "bodyText": "since ackDescription is not null and is not empty, shouldn't this line include the ackDescription, as such:\nresponse.add(new Property(k, new WritablePropertyResponse(v, ackCode, ackVersion, ackDescription)));\nand line 209 without the ackDescription?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/960#discussion_r500084104", "createdAt": "2020-10-06T08:08:42Z", "author": {"login": "barustum"}, "path": "device/iot-device-samples/pnp-device-sample/temperature-controller-device-sample/src/main/java/samples/com/microsoft/azure/sdk/iot/device/PnpConvention.java", "diffHunk": "@@ -121,29 +155,66 @@ public static Message createIotHubMessageUtf8(@NonNull String telemetryName, @No\n      *     }\n      * }\n      */\n-    public static Set<Property> createPropertyEmbeddedValuePatch(\n+    public static Set<Property> createWritablePropertyResponse(\n             @NonNull String propertyName,\n             @NonNull final Object propertyValue,\n             @NonNull final Integer ackCode,\n             @NonNull final Long ackVersion,\n             String ackDescription) {\n \n-        Map<String, Object> embeddedProperty = new HashMap<String, Object>() {{\n-            put(\"value\", propertyValue);\n-            put(\"ac\", ackCode);\n-            put(\"av\", ackVersion);\n-        }};\n+        return createWritablePropertyResponse(new HashMap<String, Object>()\n+        {{\n+            put(propertyName, propertyValue);\n+        }}, ackCode, ackVersion, ackDescription);\n+    }\n \n-        if (ackDescription != null && !ackDescription.isEmpty()) {\n-            embeddedProperty.put(\"ad\", ackDescription);\n-        }\n+    /**\n+     * Creates a response to a write request on a device property.\n+     * @param propertyPairs The name and unserialized value of the property to report.\n+     * @param ackCode The acknowledgment code from the device, for the embedded value property update.\n+     * @param ackVersion The version no. of the service-initiated read-write property update.\n+     * @param ackDescription (optional) The description from the device, accompanying the embedded value property update.\n+     * @return The property patch for embedded value property updates for read-write properties.\n+     *\n+     * The property patch is created in the below format:\n+     * {\n+     *     \"samplePropertyName\": {\n+     *         \"value\": 20,\n+     *         \"ac\": 200,\n+     *         \"av\": 5,\n+     *         \"ad\": \"The update was successful.\"\n+     *     }\n+     * }\n+     */\n+    public static Set<Property> createWritablePropertyResponse(\n+            @NonNull HashMap<String, Object> propertyPairs,\n+            @NonNull final Integer ackCode,\n+            @NonNull final Long ackVersion,\n+            String ackDescription) {\n+\n+        Set<Property> response = new HashSet<>();\n+\n+        propertyPairs.forEach((k,v) ->\n+            {\n+                if(k == null || k.isEmpty())\n+                {\n+                    throw new IllegalArgumentException(\"One of the propertyPairs keys was null, empty, or white space.\");\n+                }\n \n-        return singleton(new Property(propertyName, embeddedProperty));\n+                if (ackDescription != null && !ackDescription.isEmpty()) {\n+                    response.add(new Property(k, new WritablePropertyResponse(v, ackCode, ackVersion)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48af488cef2f1e7da9c7f20e16a7d27e4ca40147"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzMDMwOQ==", "bodyText": "agreed will change", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/960#discussion_r500430309", "createdAt": "2020-10-06T16:21:07Z", "author": {"login": "bikamani"}, "path": "device/iot-device-samples/pnp-device-sample/temperature-controller-device-sample/src/main/java/samples/com/microsoft/azure/sdk/iot/device/PnpConvention.java", "diffHunk": "@@ -121,29 +155,66 @@ public static Message createIotHubMessageUtf8(@NonNull String telemetryName, @No\n      *     }\n      * }\n      */\n-    public static Set<Property> createPropertyEmbeddedValuePatch(\n+    public static Set<Property> createWritablePropertyResponse(\n             @NonNull String propertyName,\n             @NonNull final Object propertyValue,\n             @NonNull final Integer ackCode,\n             @NonNull final Long ackVersion,\n             String ackDescription) {\n \n-        Map<String, Object> embeddedProperty = new HashMap<String, Object>() {{\n-            put(\"value\", propertyValue);\n-            put(\"ac\", ackCode);\n-            put(\"av\", ackVersion);\n-        }};\n+        return createWritablePropertyResponse(new HashMap<String, Object>()\n+        {{\n+            put(propertyName, propertyValue);\n+        }}, ackCode, ackVersion, ackDescription);\n+    }\n \n-        if (ackDescription != null && !ackDescription.isEmpty()) {\n-            embeddedProperty.put(\"ad\", ackDescription);\n-        }\n+    /**\n+     * Creates a response to a write request on a device property.\n+     * @param propertyPairs The name and unserialized value of the property to report.\n+     * @param ackCode The acknowledgment code from the device, for the embedded value property update.\n+     * @param ackVersion The version no. of the service-initiated read-write property update.\n+     * @param ackDescription (optional) The description from the device, accompanying the embedded value property update.\n+     * @return The property patch for embedded value property updates for read-write properties.\n+     *\n+     * The property patch is created in the below format:\n+     * {\n+     *     \"samplePropertyName\": {\n+     *         \"value\": 20,\n+     *         \"ac\": 200,\n+     *         \"av\": 5,\n+     *         \"ad\": \"The update was successful.\"\n+     *     }\n+     * }\n+     */\n+    public static Set<Property> createWritablePropertyResponse(\n+            @NonNull HashMap<String, Object> propertyPairs,\n+            @NonNull final Integer ackCode,\n+            @NonNull final Long ackVersion,\n+            String ackDescription) {\n+\n+        Set<Property> response = new HashSet<>();\n+\n+        propertyPairs.forEach((k,v) ->\n+            {\n+                if(k == null || k.isEmpty())\n+                {\n+                    throw new IllegalArgumentException(\"One of the propertyPairs keys was null, empty, or white space.\");\n+                }\n \n-        return singleton(new Property(propertyName, embeddedProperty));\n+                if (ackDescription != null && !ackDescription.isEmpty()) {\n+                    response.add(new Property(k, new WritablePropertyResponse(v, ackCode, ackVersion)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4NDEwNA=="}, "originalCommit": {"oid": "48af488cef2f1e7da9c7f20e16a7d27e4ca40147"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTE5MjU0OnYy", "diffSide": "RIGHT", "path": "device/iot-device-samples/pnp-device-sample/temperature-controller-device-sample/src/main/java/samples/com/microsoft/azure/sdk/iot/device/PnpConvention.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwODowOTozNlrOHc6vlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjoyMTozMVrOHdP20A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4NDYyOA==", "bodyText": "is componentName still considered optional since you added the NonNull?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/960#discussion_r500084628", "createdAt": "2020-10-06T08:09:36Z", "author": {"login": "barustum"}, "path": "device/iot-device-samples/pnp-device-sample/temperature-controller-device-sample/src/main/java/samples/com/microsoft/azure/sdk/iot/device/PnpConvention.java", "diffHunk": "@@ -121,29 +155,66 @@ public static Message createIotHubMessageUtf8(@NonNull String telemetryName, @No\n      *     }\n      * }\n      */\n-    public static Set<Property> createPropertyEmbeddedValuePatch(\n+    public static Set<Property> createWritablePropertyResponse(\n             @NonNull String propertyName,\n             @NonNull final Object propertyValue,\n             @NonNull final Integer ackCode,\n             @NonNull final Long ackVersion,\n             String ackDescription) {\n \n-        Map<String, Object> embeddedProperty = new HashMap<String, Object>() {{\n-            put(\"value\", propertyValue);\n-            put(\"ac\", ackCode);\n-            put(\"av\", ackVersion);\n-        }};\n+        return createWritablePropertyResponse(new HashMap<String, Object>()\n+        {{\n+            put(propertyName, propertyValue);\n+        }}, ackCode, ackVersion, ackDescription);\n+    }\n \n-        if (ackDescription != null && !ackDescription.isEmpty()) {\n-            embeddedProperty.put(\"ad\", ackDescription);\n-        }\n+    /**\n+     * Creates a response to a write request on a device property.\n+     * @param propertyPairs The name and unserialized value of the property to report.\n+     * @param ackCode The acknowledgment code from the device, for the embedded value property update.\n+     * @param ackVersion The version no. of the service-initiated read-write property update.\n+     * @param ackDescription (optional) The description from the device, accompanying the embedded value property update.\n+     * @return The property patch for embedded value property updates for read-write properties.\n+     *\n+     * The property patch is created in the below format:\n+     * {\n+     *     \"samplePropertyName\": {\n+     *         \"value\": 20,\n+     *         \"ac\": 200,\n+     *         \"av\": 5,\n+     *         \"ad\": \"The update was successful.\"\n+     *     }\n+     * }\n+     */\n+    public static Set<Property> createWritablePropertyResponse(\n+            @NonNull HashMap<String, Object> propertyPairs,\n+            @NonNull final Integer ackCode,\n+            @NonNull final Long ackVersion,\n+            String ackDescription) {\n+\n+        Set<Property> response = new HashSet<>();\n+\n+        propertyPairs.forEach((k,v) ->\n+            {\n+                if(k == null || k.isEmpty())\n+                {\n+                    throw new IllegalArgumentException(\"One of the propertyPairs keys was null, empty, or white space.\");\n+                }\n \n-        return singleton(new Property(propertyName, embeddedProperty));\n+                if (ackDescription != null && !ackDescription.isEmpty()) {\n+                    response.add(new Property(k, new WritablePropertyResponse(v, ackCode, ackVersion)));\n+                }\n+                else\n+                {\n+                    response.add(new Property(k, new WritablePropertyResponse(v, ackCode, ackVersion, ackDescription)));\n+                }\n+            });\n+\n+        return response;\n     }\n \n     /**\n-     * Create a key-embedded value property patch for read-write properties.\n-     * Embedded value property updates are sent from a device in response to a service-initiated read-write property update.\n+     * Creates a response to a write request on a device property.\n      * @param propertyName The property name, as defined in the DTDL interface.\n      * @param propertyValue The property value, in the format defined in the DTDL interface.\n      * @param componentName (optional) The name of the component in which the property is defined. Can be null for property defined under the root interface.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48af488cef2f1e7da9c7f20e16a7d27e4ca40147"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzMDU0NA==", "bodyText": "will address this", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/960#discussion_r500430544", "createdAt": "2020-10-06T16:21:31Z", "author": {"login": "bikamani"}, "path": "device/iot-device-samples/pnp-device-sample/temperature-controller-device-sample/src/main/java/samples/com/microsoft/azure/sdk/iot/device/PnpConvention.java", "diffHunk": "@@ -121,29 +155,66 @@ public static Message createIotHubMessageUtf8(@NonNull String telemetryName, @No\n      *     }\n      * }\n      */\n-    public static Set<Property> createPropertyEmbeddedValuePatch(\n+    public static Set<Property> createWritablePropertyResponse(\n             @NonNull String propertyName,\n             @NonNull final Object propertyValue,\n             @NonNull final Integer ackCode,\n             @NonNull final Long ackVersion,\n             String ackDescription) {\n \n-        Map<String, Object> embeddedProperty = new HashMap<String, Object>() {{\n-            put(\"value\", propertyValue);\n-            put(\"ac\", ackCode);\n-            put(\"av\", ackVersion);\n-        }};\n+        return createWritablePropertyResponse(new HashMap<String, Object>()\n+        {{\n+            put(propertyName, propertyValue);\n+        }}, ackCode, ackVersion, ackDescription);\n+    }\n \n-        if (ackDescription != null && !ackDescription.isEmpty()) {\n-            embeddedProperty.put(\"ad\", ackDescription);\n-        }\n+    /**\n+     * Creates a response to a write request on a device property.\n+     * @param propertyPairs The name and unserialized value of the property to report.\n+     * @param ackCode The acknowledgment code from the device, for the embedded value property update.\n+     * @param ackVersion The version no. of the service-initiated read-write property update.\n+     * @param ackDescription (optional) The description from the device, accompanying the embedded value property update.\n+     * @return The property patch for embedded value property updates for read-write properties.\n+     *\n+     * The property patch is created in the below format:\n+     * {\n+     *     \"samplePropertyName\": {\n+     *         \"value\": 20,\n+     *         \"ac\": 200,\n+     *         \"av\": 5,\n+     *         \"ad\": \"The update was successful.\"\n+     *     }\n+     * }\n+     */\n+    public static Set<Property> createWritablePropertyResponse(\n+            @NonNull HashMap<String, Object> propertyPairs,\n+            @NonNull final Integer ackCode,\n+            @NonNull final Long ackVersion,\n+            String ackDescription) {\n+\n+        Set<Property> response = new HashSet<>();\n+\n+        propertyPairs.forEach((k,v) ->\n+            {\n+                if(k == null || k.isEmpty())\n+                {\n+                    throw new IllegalArgumentException(\"One of the propertyPairs keys was null, empty, or white space.\");\n+                }\n \n-        return singleton(new Property(propertyName, embeddedProperty));\n+                if (ackDescription != null && !ackDescription.isEmpty()) {\n+                    response.add(new Property(k, new WritablePropertyResponse(v, ackCode, ackVersion)));\n+                }\n+                else\n+                {\n+                    response.add(new Property(k, new WritablePropertyResponse(v, ackCode, ackVersion, ackDescription)));\n+                }\n+            });\n+\n+        return response;\n     }\n \n     /**\n-     * Create a key-embedded value property patch for read-write properties.\n-     * Embedded value property updates are sent from a device in response to a service-initiated read-write property update.\n+     * Creates a response to a write request on a device property.\n      * @param propertyName The property name, as defined in the DTDL interface.\n      * @param propertyValue The property value, in the format defined in the DTDL interface.\n      * @param componentName (optional) The name of the component in which the property is defined. Can be null for property defined under the root interface.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4NDYyOA=="}, "originalCommit": {"oid": "48af488cef2f1e7da9c7f20e16a7d27e4ca40147"}, "originalPosition": 177}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2739, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}