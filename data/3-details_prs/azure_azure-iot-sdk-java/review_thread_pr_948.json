{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1MDk2NTQz", "number": 948, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMDo1MDoyMFrOEov5KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMToxMzo1NFrOEowmTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTYzMTc2OnYy", "diffSide": "LEFT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMDo1MDoyMFrOHaBKkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMDo1MDoyMFrOHaBKkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA0NDExMg==", "bodyText": "This logic is only needed in the max overload to make testing more efficient. I've cleaned up duplicate logic.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/948#discussion_r497044112", "createdAt": "2020-09-29T20:50:20Z", "author": {"login": "vinagesh"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "diffHunk": "@@ -70,11 +77,6 @@ public static DigitalTwinAsyncClient createFromConnectionString(String connectio\n      */\n     public <T> Observable<T> getDigitalTwin (String digitalTwinId, Class<T> clazz)\n     {\n-        if(clazz == null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a0c1aa98014f0bebaa4effa70dfce070651fdc7"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTY4NDAyOnYy", "diffSide": "RIGHT", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/digitaltwin/DigitalTwinClientComponentTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMDo1OTowMlrOHaBtCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMDo1OToxOFrOHaBuIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA1MjkzNg==", "bodyText": "break the lines ... this is too long", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/948#discussion_r497052936", "createdAt": "2020-09-29T20:59:02Z", "author": {"login": "azabbasi"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/digitaltwin/DigitalTwinClientComponentTests.java", "diffHunk": "@@ -151,41 +151,43 @@ public void invokeComponentLevelCommand() throws IOException {\n \n         // act\n         DigitalTwinCommandResponse responseWithNoPayload = this.digitalTwinClient.invokeComponentCommand(deviceId, componentName, commandName, null);\n-        DigitalTwinCommandResponse response = this.digitalTwinClient.invokeComponentCommand(deviceId, componentName, commandName, commandInput);\n-        ServiceResponseWithHeaders<DigitalTwinCommandResponse, DigitalTwinInvokeCommandHeaders> responseWithHeaders = this.digitalTwinClient.invokeComponentCommandWithResponse(deviceId, componentName, commandName, commandInput, options);\n+        DigitalTwinCommandResponse responseWithJsonStringPayload = this.digitalTwinClient.invokeComponentCommand(deviceId, componentName, commandName, jsonStringInput);\n+        DigitalTwinCommandResponse responseWithDatePayload = this.digitalTwinClient.invokeComponentCommand(deviceId, componentName, commandName, commandInput);\n+        ServiceResponseWithHeaders<DigitalTwinCommandResponse, DigitalTwinInvokeCommandHeaders> datePayloadResponseWithHeaders = this.digitalTwinClient.invokeComponentCommandWithResponse(deviceId, componentName, commandName, commandInput, options);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7584cebb51331a6b852128d5218a7f9dce65778b"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA1MzIxNg==", "bodyText": "elsewhere as well", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/948#discussion_r497053216", "createdAt": "2020-09-29T20:59:18Z", "author": {"login": "azabbasi"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/digitaltwin/DigitalTwinClientComponentTests.java", "diffHunk": "@@ -151,41 +151,43 @@ public void invokeComponentLevelCommand() throws IOException {\n \n         // act\n         DigitalTwinCommandResponse responseWithNoPayload = this.digitalTwinClient.invokeComponentCommand(deviceId, componentName, commandName, null);\n-        DigitalTwinCommandResponse response = this.digitalTwinClient.invokeComponentCommand(deviceId, componentName, commandName, commandInput);\n-        ServiceResponseWithHeaders<DigitalTwinCommandResponse, DigitalTwinInvokeCommandHeaders> responseWithHeaders = this.digitalTwinClient.invokeComponentCommandWithResponse(deviceId, componentName, commandName, commandInput, options);\n+        DigitalTwinCommandResponse responseWithJsonStringPayload = this.digitalTwinClient.invokeComponentCommand(deviceId, componentName, commandName, jsonStringInput);\n+        DigitalTwinCommandResponse responseWithDatePayload = this.digitalTwinClient.invokeComponentCommand(deviceId, componentName, commandName, commandInput);\n+        ServiceResponseWithHeaders<DigitalTwinCommandResponse, DigitalTwinInvokeCommandHeaders> datePayloadResponseWithHeaders = this.digitalTwinClient.invokeComponentCommandWithResponse(deviceId, componentName, commandName, commandInput, options);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA1MjkzNg=="}, "originalCommit": {"oid": "7584cebb51331a6b852128d5218a7f9dce65778b"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTc0NzMzOnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMToxMzo1NFrOHaCV1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMToyMjoyMVrOHaCmIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA2MzM4Mg==", "bodyText": "To understand, why do we need to do this?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/948#discussion_r497063382", "createdAt": "2020-09-29T21:13:54Z", "author": {"login": "bikamani"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "diffHunk": "@@ -40,12 +43,16 @@\n         ServiceConnectionString serviceConnectionString = ServiceConnectionStringParser.parseConnectionString(connectionString);\n         SasTokenProvider sasTokenProvider = serviceConnectionString.createSasTokenProvider();\n         String httpsEndpoint = serviceConnectionString.getHttpsEndpoint();\n+        final SimpleModule stringModule = new SimpleModule(\"String Serializer\");\n+        stringModule.addSerializer(new DigitalTwinStringSerializer(String.class, objectMapper));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7584cebb51331a6b852128d5218a7f9dce65778b"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA2NzU1NQ==", "bodyText": "Will sync offline with you on this.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/948#discussion_r497067555", "createdAt": "2020-09-29T21:22:21Z", "author": {"login": "vinagesh"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "diffHunk": "@@ -40,12 +43,16 @@\n         ServiceConnectionString serviceConnectionString = ServiceConnectionStringParser.parseConnectionString(connectionString);\n         SasTokenProvider sasTokenProvider = serviceConnectionString.createSasTokenProvider();\n         String httpsEndpoint = serviceConnectionString.getHttpsEndpoint();\n+        final SimpleModule stringModule = new SimpleModule(\"String Serializer\");\n+        stringModule.addSerializer(new DigitalTwinStringSerializer(String.class, objectMapper));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA2MzM4Mg=="}, "originalCommit": {"oid": "7584cebb51331a6b852128d5218a7f9dce65778b"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2727, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}