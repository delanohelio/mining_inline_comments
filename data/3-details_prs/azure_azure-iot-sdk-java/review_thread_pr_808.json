{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzOTI1NjA4", "number": 808, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjoxMzoxMlrOEFZrCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjozMzoxOVrOEFZ9RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDk4OTU0OnYy", "diffSide": "RIGHT", "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/serializer/FileUploadCompletionNotification.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjoxMzoxMlrOGjkYVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODowNzozOFrOGj9Hmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk0OTM5OA==", "bodyText": "Comment says the method return the new job. Method signature does not not return anything.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/808#discussion_r439949398", "createdAt": "2020-06-15T06:13:12Z", "author": {"login": "barustum"}, "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/serializer/FileUploadCompletionNotification.java", "diffHunk": "@@ -0,0 +1,195 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.deps.serializer;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * The request payload to send to IoT Hub to notify it when a file upload is completed, whether successful or not.\n+ * Must set {@link #setSuccess(Boolean)} and {@link #setCorrelationId(String)}, but all other fields are optional.\n+ */\n+public class FileUploadCompletionNotification\n+{\n+    private static final String CORRELATION_ID_TAG = \"correlationId\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(CORRELATION_ID_TAG)\n+    private String correlationId = null;\n+\n+    private static final String IS_SUCCESS_TAG = \"isSuccess\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(IS_SUCCESS_TAG)\n+    private Boolean isSuccess = null;\n+\n+    private static final String STATUS_CODE_TAG = \"statusCode\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_CODE_TAG)\n+    private Integer statusCode = null;\n+\n+    private static final String STATUS_DESCRIPTION_TAG = \"statusDescription\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_DESCRIPTION_TAG)\n+    private String statusDescription = null;\n+\n+    /**\n+     * Create an instance of the FileUploadCompletionNotification for a single file upload operation using Azure Storage.\n+     *\n+     * @param correlationId the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     *                      for this upload from IoT Hub. This field is mandatory. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param isSuccess whether the file was uploaded successfully. This field is mandatory.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    public FileUploadCompletionNotification(String correlationId, Boolean isSuccess)\n+            throws IllegalArgumentException\n+    {\n+        setCorrelationId(correlationId);\n+        updateStatus(isSuccess, statusCode, statusDescription);\n+    }\n+\n+    /**\n+     * Create an instance of the FileUploadCompletionNotification for a single file upload operation using Azure Storage.\n+     *\n+     * @param correlationId the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     *                      for this upload from IoT Hub. This field is mandatory. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param isSuccess whether the file was uploaded successfully. This field is mandatory.\n+     * @param statusCode is the status for the upload of the file to storage.\n+     * @param statusDescription is the description of the status code.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    public FileUploadCompletionNotification(String correlationId, Boolean isSuccess, Integer statusCode, String statusDescription)\n+            throws IllegalArgumentException\n+    {\n+        setCorrelationId(correlationId);\n+        updateStatus(isSuccess, statusCode, statusDescription);\n+    }\n+\n+    /**\n+     * Construct this notification with json\n+     * @param json the json to parse.\n+     */\n+    public FileUploadCompletionNotification(String json)\n+    {\n+        Gson gson = new GsonBuilder().disableHtmlEscaping().serializeNulls().create();\n+        FileUploadCompletionNotification fileUploadCompletionNotification;\n+\n+        try\n+        {\n+            fileUploadCompletionNotification = gson.fromJson(json, FileUploadCompletionNotification.class);\n+        }\n+        catch (Exception malformed)\n+        {\n+            throw new IllegalArgumentException(\"Malformed json:\" + malformed);\n+        }\n+\n+        this.correlationId = fileUploadCompletionNotification.getCorrelationId();\n+        this.isSuccess = fileUploadCompletionNotification.getSuccess();\n+        this.statusCode = fileUploadCompletionNotification.getStatusCode();\n+        this.statusDescription = fileUploadCompletionNotification.getStatusDescription();\n+    }\n+\n+    /**\n+     * Update the status information in the collection, and return the new json.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9a479958bc470ec11a09d6a9a5f366c3f832c5a"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM1NDcxNA==", "bodyText": "I'm not sure why we had javadoc for a private method, so I'll just delete the whole thing", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/808#discussion_r440354714", "createdAt": "2020-06-15T18:07:38Z", "author": {"login": "timtay-microsoft"}, "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/serializer/FileUploadCompletionNotification.java", "diffHunk": "@@ -0,0 +1,195 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.deps.serializer;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * The request payload to send to IoT Hub to notify it when a file upload is completed, whether successful or not.\n+ * Must set {@link #setSuccess(Boolean)} and {@link #setCorrelationId(String)}, but all other fields are optional.\n+ */\n+public class FileUploadCompletionNotification\n+{\n+    private static final String CORRELATION_ID_TAG = \"correlationId\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(CORRELATION_ID_TAG)\n+    private String correlationId = null;\n+\n+    private static final String IS_SUCCESS_TAG = \"isSuccess\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(IS_SUCCESS_TAG)\n+    private Boolean isSuccess = null;\n+\n+    private static final String STATUS_CODE_TAG = \"statusCode\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_CODE_TAG)\n+    private Integer statusCode = null;\n+\n+    private static final String STATUS_DESCRIPTION_TAG = \"statusDescription\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_DESCRIPTION_TAG)\n+    private String statusDescription = null;\n+\n+    /**\n+     * Create an instance of the FileUploadCompletionNotification for a single file upload operation using Azure Storage.\n+     *\n+     * @param correlationId the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     *                      for this upload from IoT Hub. This field is mandatory. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param isSuccess whether the file was uploaded successfully. This field is mandatory.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    public FileUploadCompletionNotification(String correlationId, Boolean isSuccess)\n+            throws IllegalArgumentException\n+    {\n+        setCorrelationId(correlationId);\n+        updateStatus(isSuccess, statusCode, statusDescription);\n+    }\n+\n+    /**\n+     * Create an instance of the FileUploadCompletionNotification for a single file upload operation using Azure Storage.\n+     *\n+     * @param correlationId the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     *                      for this upload from IoT Hub. This field is mandatory. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param isSuccess whether the file was uploaded successfully. This field is mandatory.\n+     * @param statusCode is the status for the upload of the file to storage.\n+     * @param statusDescription is the description of the status code.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    public FileUploadCompletionNotification(String correlationId, Boolean isSuccess, Integer statusCode, String statusDescription)\n+            throws IllegalArgumentException\n+    {\n+        setCorrelationId(correlationId);\n+        updateStatus(isSuccess, statusCode, statusDescription);\n+    }\n+\n+    /**\n+     * Construct this notification with json\n+     * @param json the json to parse.\n+     */\n+    public FileUploadCompletionNotification(String json)\n+    {\n+        Gson gson = new GsonBuilder().disableHtmlEscaping().serializeNulls().create();\n+        FileUploadCompletionNotification fileUploadCompletionNotification;\n+\n+        try\n+        {\n+            fileUploadCompletionNotification = gson.fromJson(json, FileUploadCompletionNotification.class);\n+        }\n+        catch (Exception malformed)\n+        {\n+            throw new IllegalArgumentException(\"Malformed json:\" + malformed);\n+        }\n+\n+        this.correlationId = fileUploadCompletionNotification.getCorrelationId();\n+        this.isSuccess = fileUploadCompletionNotification.getSuccess();\n+        this.statusCode = fileUploadCompletionNotification.getStatusCode();\n+        this.statusDescription = fileUploadCompletionNotification.getStatusDescription();\n+    }\n+\n+    /**\n+     * Update the status information in the collection, and return the new json.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk0OTM5OA=="}, "originalCommit": {"oid": "f9a479958bc470ec11a09d6a9a5f366c3f832c5a"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDk5NTIwOnYy", "diffSide": "RIGHT", "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/serializer/FileUploadCompletionNotification.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjoxNTo1NVrOGjkbvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODowNzo1M1rOGj9ILw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1MDI3MA==", "bodyText": "Nothing is thrown in this method.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/808#discussion_r439950270", "createdAt": "2020-06-15T06:15:55Z", "author": {"login": "barustum"}, "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/serializer/FileUploadCompletionNotification.java", "diffHunk": "@@ -0,0 +1,195 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.deps.serializer;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * The request payload to send to IoT Hub to notify it when a file upload is completed, whether successful or not.\n+ * Must set {@link #setSuccess(Boolean)} and {@link #setCorrelationId(String)}, but all other fields are optional.\n+ */\n+public class FileUploadCompletionNotification\n+{\n+    private static final String CORRELATION_ID_TAG = \"correlationId\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(CORRELATION_ID_TAG)\n+    private String correlationId = null;\n+\n+    private static final String IS_SUCCESS_TAG = \"isSuccess\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(IS_SUCCESS_TAG)\n+    private Boolean isSuccess = null;\n+\n+    private static final String STATUS_CODE_TAG = \"statusCode\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_CODE_TAG)\n+    private Integer statusCode = null;\n+\n+    private static final String STATUS_DESCRIPTION_TAG = \"statusDescription\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_DESCRIPTION_TAG)\n+    private String statusDescription = null;\n+\n+    /**\n+     * Create an instance of the FileUploadCompletionNotification for a single file upload operation using Azure Storage.\n+     *\n+     * @param correlationId the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     *                      for this upload from IoT Hub. This field is mandatory. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param isSuccess whether the file was uploaded successfully. This field is mandatory.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    public FileUploadCompletionNotification(String correlationId, Boolean isSuccess)\n+            throws IllegalArgumentException\n+    {\n+        setCorrelationId(correlationId);\n+        updateStatus(isSuccess, statusCode, statusDescription);\n+    }\n+\n+    /**\n+     * Create an instance of the FileUploadCompletionNotification for a single file upload operation using Azure Storage.\n+     *\n+     * @param correlationId the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     *                      for this upload from IoT Hub. This field is mandatory. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param isSuccess whether the file was uploaded successfully. This field is mandatory.\n+     * @param statusCode is the status for the upload of the file to storage.\n+     * @param statusDescription is the description of the status code.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    public FileUploadCompletionNotification(String correlationId, Boolean isSuccess, Integer statusCode, String statusDescription)\n+            throws IllegalArgumentException\n+    {\n+        setCorrelationId(correlationId);\n+        updateStatus(isSuccess, statusCode, statusDescription);\n+    }\n+\n+    /**\n+     * Construct this notification with json\n+     * @param json the json to parse.\n+     */\n+    public FileUploadCompletionNotification(String json)\n+    {\n+        Gson gson = new GsonBuilder().disableHtmlEscaping().serializeNulls().create();\n+        FileUploadCompletionNotification fileUploadCompletionNotification;\n+\n+        try\n+        {\n+            fileUploadCompletionNotification = gson.fromJson(json, FileUploadCompletionNotification.class);\n+        }\n+        catch (Exception malformed)\n+        {\n+            throw new IllegalArgumentException(\"Malformed json:\" + malformed);\n+        }\n+\n+        this.correlationId = fileUploadCompletionNotification.getCorrelationId();\n+        this.isSuccess = fileUploadCompletionNotification.getSuccess();\n+        this.statusCode = fileUploadCompletionNotification.getStatusCode();\n+        this.statusDescription = fileUploadCompletionNotification.getStatusDescription();\n+    }\n+\n+    /**\n+     * Update the status information in the collection, and return the new json.\n+     *\n+     * @param isSuccess is a Boolean representing whether the file was uploaded successfully.\n+     * @param statusCode is the status for the upload of the file to storage.\n+     * @param statusDescription is the description of the status code.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    private void updateStatus(Boolean isSuccess, Integer statusCode, String statusDescription) throws IllegalArgumentException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9a479958bc470ec11a09d6a9a5f366c3f832c5a"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM1NDg2Mw==", "bodyText": "See above, I'll delete this javadoc", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/808#discussion_r440354863", "createdAt": "2020-06-15T18:07:53Z", "author": {"login": "timtay-microsoft"}, "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/serializer/FileUploadCompletionNotification.java", "diffHunk": "@@ -0,0 +1,195 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.deps.serializer;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * The request payload to send to IoT Hub to notify it when a file upload is completed, whether successful or not.\n+ * Must set {@link #setSuccess(Boolean)} and {@link #setCorrelationId(String)}, but all other fields are optional.\n+ */\n+public class FileUploadCompletionNotification\n+{\n+    private static final String CORRELATION_ID_TAG = \"correlationId\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(CORRELATION_ID_TAG)\n+    private String correlationId = null;\n+\n+    private static final String IS_SUCCESS_TAG = \"isSuccess\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(IS_SUCCESS_TAG)\n+    private Boolean isSuccess = null;\n+\n+    private static final String STATUS_CODE_TAG = \"statusCode\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_CODE_TAG)\n+    private Integer statusCode = null;\n+\n+    private static final String STATUS_DESCRIPTION_TAG = \"statusDescription\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_DESCRIPTION_TAG)\n+    private String statusDescription = null;\n+\n+    /**\n+     * Create an instance of the FileUploadCompletionNotification for a single file upload operation using Azure Storage.\n+     *\n+     * @param correlationId the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     *                      for this upload from IoT Hub. This field is mandatory. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param isSuccess whether the file was uploaded successfully. This field is mandatory.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    public FileUploadCompletionNotification(String correlationId, Boolean isSuccess)\n+            throws IllegalArgumentException\n+    {\n+        setCorrelationId(correlationId);\n+        updateStatus(isSuccess, statusCode, statusDescription);\n+    }\n+\n+    /**\n+     * Create an instance of the FileUploadCompletionNotification for a single file upload operation using Azure Storage.\n+     *\n+     * @param correlationId the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     *                      for this upload from IoT Hub. This field is mandatory. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param isSuccess whether the file was uploaded successfully. This field is mandatory.\n+     * @param statusCode is the status for the upload of the file to storage.\n+     * @param statusDescription is the description of the status code.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    public FileUploadCompletionNotification(String correlationId, Boolean isSuccess, Integer statusCode, String statusDescription)\n+            throws IllegalArgumentException\n+    {\n+        setCorrelationId(correlationId);\n+        updateStatus(isSuccess, statusCode, statusDescription);\n+    }\n+\n+    /**\n+     * Construct this notification with json\n+     * @param json the json to parse.\n+     */\n+    public FileUploadCompletionNotification(String json)\n+    {\n+        Gson gson = new GsonBuilder().disableHtmlEscaping().serializeNulls().create();\n+        FileUploadCompletionNotification fileUploadCompletionNotification;\n+\n+        try\n+        {\n+            fileUploadCompletionNotification = gson.fromJson(json, FileUploadCompletionNotification.class);\n+        }\n+        catch (Exception malformed)\n+        {\n+            throw new IllegalArgumentException(\"Malformed json:\" + malformed);\n+        }\n+\n+        this.correlationId = fileUploadCompletionNotification.getCorrelationId();\n+        this.isSuccess = fileUploadCompletionNotification.getSuccess();\n+        this.statusCode = fileUploadCompletionNotification.getStatusCode();\n+        this.statusDescription = fileUploadCompletionNotification.getStatusDescription();\n+    }\n+\n+    /**\n+     * Update the status information in the collection, and return the new json.\n+     *\n+     * @param isSuccess is a Boolean representing whether the file was uploaded successfully.\n+     * @param statusCode is the status for the upload of the file to storage.\n+     * @param statusDescription is the description of the status code.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    private void updateStatus(Boolean isSuccess, Integer statusCode, String statusDescription) throws IllegalArgumentException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1MDI3MA=="}, "originalCommit": {"oid": "f9a479958bc470ec11a09d6a9a5f366c3f832c5a"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTAwNjI0OnYy", "diffSide": "RIGHT", "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/serializer/FileUploadCompletionNotification.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjoyMDo0NlrOGjkiBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjoyMDo0NlrOGjkiBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1MTg3OQ==", "bodyText": "'to' a valid json.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/808#discussion_r439951879", "createdAt": "2020-06-15T06:20:46Z", "author": {"login": "barustum"}, "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/serializer/FileUploadCompletionNotification.java", "diffHunk": "@@ -0,0 +1,195 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.deps.serializer;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * The request payload to send to IoT Hub to notify it when a file upload is completed, whether successful or not.\n+ * Must set {@link #setSuccess(Boolean)} and {@link #setCorrelationId(String)}, but all other fields are optional.\n+ */\n+public class FileUploadCompletionNotification\n+{\n+    private static final String CORRELATION_ID_TAG = \"correlationId\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(CORRELATION_ID_TAG)\n+    private String correlationId = null;\n+\n+    private static final String IS_SUCCESS_TAG = \"isSuccess\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(IS_SUCCESS_TAG)\n+    private Boolean isSuccess = null;\n+\n+    private static final String STATUS_CODE_TAG = \"statusCode\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_CODE_TAG)\n+    private Integer statusCode = null;\n+\n+    private static final String STATUS_DESCRIPTION_TAG = \"statusDescription\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_DESCRIPTION_TAG)\n+    private String statusDescription = null;\n+\n+    /**\n+     * Create an instance of the FileUploadCompletionNotification for a single file upload operation using Azure Storage.\n+     *\n+     * @param correlationId the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     *                      for this upload from IoT Hub. This field is mandatory. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param isSuccess whether the file was uploaded successfully. This field is mandatory.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    public FileUploadCompletionNotification(String correlationId, Boolean isSuccess)\n+            throws IllegalArgumentException\n+    {\n+        setCorrelationId(correlationId);\n+        updateStatus(isSuccess, statusCode, statusDescription);\n+    }\n+\n+    /**\n+     * Create an instance of the FileUploadCompletionNotification for a single file upload operation using Azure Storage.\n+     *\n+     * @param correlationId the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     *                      for this upload from IoT Hub. This field is mandatory. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param isSuccess whether the file was uploaded successfully. This field is mandatory.\n+     * @param statusCode is the status for the upload of the file to storage.\n+     * @param statusDescription is the description of the status code.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    public FileUploadCompletionNotification(String correlationId, Boolean isSuccess, Integer statusCode, String statusDescription)\n+            throws IllegalArgumentException\n+    {\n+        setCorrelationId(correlationId);\n+        updateStatus(isSuccess, statusCode, statusDescription);\n+    }\n+\n+    /**\n+     * Construct this notification with json\n+     * @param json the json to parse.\n+     */\n+    public FileUploadCompletionNotification(String json)\n+    {\n+        Gson gson = new GsonBuilder().disableHtmlEscaping().serializeNulls().create();\n+        FileUploadCompletionNotification fileUploadCompletionNotification;\n+\n+        try\n+        {\n+            fileUploadCompletionNotification = gson.fromJson(json, FileUploadCompletionNotification.class);\n+        }\n+        catch (Exception malformed)\n+        {\n+            throw new IllegalArgumentException(\"Malformed json:\" + malformed);\n+        }\n+\n+        this.correlationId = fileUploadCompletionNotification.getCorrelationId();\n+        this.isSuccess = fileUploadCompletionNotification.getSuccess();\n+        this.statusCode = fileUploadCompletionNotification.getStatusCode();\n+        this.statusDescription = fileUploadCompletionNotification.getStatusDescription();\n+    }\n+\n+    /**\n+     * Update the status information in the collection, and return the new json.\n+     *\n+     * @param isSuccess is a Boolean representing whether the file was uploaded successfully.\n+     * @param statusCode is the status for the upload of the file to storage.\n+     * @param statusDescription is the description of the status code.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    private void updateStatus(Boolean isSuccess, Integer statusCode, String statusDescription) throws IllegalArgumentException\n+    {\n+        this.isSuccess = isSuccess;\n+        this.statusCode = statusCode;\n+        this.statusDescription = statusDescription;\n+    }\n+\n+    /**\n+     * Convert this class in a valid json.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9a479958bc470ec11a09d6a9a5f366c3f832c5a"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTAxMjM4OnYy", "diffSide": "RIGHT", "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/serializer/FileUploadCompletionNotification.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjoyMzoyNFrOGjkljg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjoyMzoyNFrOGjkljg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1Mjc4Mg==", "bodyText": "Seems like this description describes the API and not the return value. Maybe remove the 'Get'?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/808#discussion_r439952782", "createdAt": "2020-06-15T06:23:24Z", "author": {"login": "barustum"}, "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/serializer/FileUploadCompletionNotification.java", "diffHunk": "@@ -0,0 +1,195 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.deps.serializer;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * The request payload to send to IoT Hub to notify it when a file upload is completed, whether successful or not.\n+ * Must set {@link #setSuccess(Boolean)} and {@link #setCorrelationId(String)}, but all other fields are optional.\n+ */\n+public class FileUploadCompletionNotification\n+{\n+    private static final String CORRELATION_ID_TAG = \"correlationId\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(CORRELATION_ID_TAG)\n+    private String correlationId = null;\n+\n+    private static final String IS_SUCCESS_TAG = \"isSuccess\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(IS_SUCCESS_TAG)\n+    private Boolean isSuccess = null;\n+\n+    private static final String STATUS_CODE_TAG = \"statusCode\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_CODE_TAG)\n+    private Integer statusCode = null;\n+\n+    private static final String STATUS_DESCRIPTION_TAG = \"statusDescription\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_DESCRIPTION_TAG)\n+    private String statusDescription = null;\n+\n+    /**\n+     * Create an instance of the FileUploadCompletionNotification for a single file upload operation using Azure Storage.\n+     *\n+     * @param correlationId the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     *                      for this upload from IoT Hub. This field is mandatory. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param isSuccess whether the file was uploaded successfully. This field is mandatory.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    public FileUploadCompletionNotification(String correlationId, Boolean isSuccess)\n+            throws IllegalArgumentException\n+    {\n+        setCorrelationId(correlationId);\n+        updateStatus(isSuccess, statusCode, statusDescription);\n+    }\n+\n+    /**\n+     * Create an instance of the FileUploadCompletionNotification for a single file upload operation using Azure Storage.\n+     *\n+     * @param correlationId the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     *                      for this upload from IoT Hub. This field is mandatory. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param isSuccess whether the file was uploaded successfully. This field is mandatory.\n+     * @param statusCode is the status for the upload of the file to storage.\n+     * @param statusDescription is the description of the status code.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    public FileUploadCompletionNotification(String correlationId, Boolean isSuccess, Integer statusCode, String statusDescription)\n+            throws IllegalArgumentException\n+    {\n+        setCorrelationId(correlationId);\n+        updateStatus(isSuccess, statusCode, statusDescription);\n+    }\n+\n+    /**\n+     * Construct this notification with json\n+     * @param json the json to parse.\n+     */\n+    public FileUploadCompletionNotification(String json)\n+    {\n+        Gson gson = new GsonBuilder().disableHtmlEscaping().serializeNulls().create();\n+        FileUploadCompletionNotification fileUploadCompletionNotification;\n+\n+        try\n+        {\n+            fileUploadCompletionNotification = gson.fromJson(json, FileUploadCompletionNotification.class);\n+        }\n+        catch (Exception malformed)\n+        {\n+            throw new IllegalArgumentException(\"Malformed json:\" + malformed);\n+        }\n+\n+        this.correlationId = fileUploadCompletionNotification.getCorrelationId();\n+        this.isSuccess = fileUploadCompletionNotification.getSuccess();\n+        this.statusCode = fileUploadCompletionNotification.getStatusCode();\n+        this.statusDescription = fileUploadCompletionNotification.getStatusDescription();\n+    }\n+\n+    /**\n+     * Update the status information in the collection, and return the new json.\n+     *\n+     * @param isSuccess is a Boolean representing whether the file was uploaded successfully.\n+     * @param statusCode is the status for the upload of the file to storage.\n+     * @param statusDescription is the description of the status code.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    private void updateStatus(Boolean isSuccess, Integer statusCode, String statusDescription) throws IllegalArgumentException\n+    {\n+        this.isSuccess = isSuccess;\n+        this.statusCode = statusCode;\n+        this.statusDescription = statusDescription;\n+    }\n+\n+    /**\n+     * Convert this class in a valid json.\n+     *\n+     * @return a valid json that represents the content of this class.\n+     */\n+    public String toJson()\n+    {\n+        Gson gson = new GsonBuilder().disableHtmlEscaping().serializeNulls().create();\n+\n+        return gson.toJson(this);\n+    }\n+\n+    /**\n+     * Set the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     * for this upload from IoT Hub. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param correlationId the unique identifier that correlates this file upload status to a SAS URI that IoT Hub retreived from Azure Storage earlier.\n+     */\n+    public void setCorrelationId(String correlationId)\n+    {\n+        this.correlationId = correlationId;\n+    }\n+\n+    /**\n+     * @return Get the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9a479958bc470ec11a09d6a9a5f366c3f832c5a"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTAxODM3OnYy", "diffSide": "RIGHT", "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/serializer/FileUploadCompletionNotification.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjoyNjowMVrOGjkpAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODowOTozNlrOGj9Lbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1MzY2NQ==", "bodyText": "do you need a @SuppressWarnings(\"unused\") for this constructor?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/808#discussion_r439953665", "createdAt": "2020-06-15T06:26:01Z", "author": {"login": "barustum"}, "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/serializer/FileUploadCompletionNotification.java", "diffHunk": "@@ -0,0 +1,195 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.deps.serializer;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * The request payload to send to IoT Hub to notify it when a file upload is completed, whether successful or not.\n+ * Must set {@link #setSuccess(Boolean)} and {@link #setCorrelationId(String)}, but all other fields are optional.\n+ */\n+public class FileUploadCompletionNotification\n+{\n+    private static final String CORRELATION_ID_TAG = \"correlationId\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(CORRELATION_ID_TAG)\n+    private String correlationId = null;\n+\n+    private static final String IS_SUCCESS_TAG = \"isSuccess\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(IS_SUCCESS_TAG)\n+    private Boolean isSuccess = null;\n+\n+    private static final String STATUS_CODE_TAG = \"statusCode\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_CODE_TAG)\n+    private Integer statusCode = null;\n+\n+    private static final String STATUS_DESCRIPTION_TAG = \"statusDescription\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_DESCRIPTION_TAG)\n+    private String statusDescription = null;\n+\n+    /**\n+     * Create an instance of the FileUploadCompletionNotification for a single file upload operation using Azure Storage.\n+     *\n+     * @param correlationId the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     *                      for this upload from IoT Hub. This field is mandatory. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param isSuccess whether the file was uploaded successfully. This field is mandatory.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    public FileUploadCompletionNotification(String correlationId, Boolean isSuccess)\n+            throws IllegalArgumentException\n+    {\n+        setCorrelationId(correlationId);\n+        updateStatus(isSuccess, statusCode, statusDescription);\n+    }\n+\n+    /**\n+     * Create an instance of the FileUploadCompletionNotification for a single file upload operation using Azure Storage.\n+     *\n+     * @param correlationId the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     *                      for this upload from IoT Hub. This field is mandatory. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param isSuccess whether the file was uploaded successfully. This field is mandatory.\n+     * @param statusCode is the status for the upload of the file to storage.\n+     * @param statusDescription is the description of the status code.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    public FileUploadCompletionNotification(String correlationId, Boolean isSuccess, Integer statusCode, String statusDescription)\n+            throws IllegalArgumentException\n+    {\n+        setCorrelationId(correlationId);\n+        updateStatus(isSuccess, statusCode, statusDescription);\n+    }\n+\n+    /**\n+     * Construct this notification with json\n+     * @param json the json to parse.\n+     */\n+    public FileUploadCompletionNotification(String json)\n+    {\n+        Gson gson = new GsonBuilder().disableHtmlEscaping().serializeNulls().create();\n+        FileUploadCompletionNotification fileUploadCompletionNotification;\n+\n+        try\n+        {\n+            fileUploadCompletionNotification = gson.fromJson(json, FileUploadCompletionNotification.class);\n+        }\n+        catch (Exception malformed)\n+        {\n+            throw new IllegalArgumentException(\"Malformed json:\" + malformed);\n+        }\n+\n+        this.correlationId = fileUploadCompletionNotification.getCorrelationId();\n+        this.isSuccess = fileUploadCompletionNotification.getSuccess();\n+        this.statusCode = fileUploadCompletionNotification.getStatusCode();\n+        this.statusDescription = fileUploadCompletionNotification.getStatusDescription();\n+    }\n+\n+    /**\n+     * Update the status information in the collection, and return the new json.\n+     *\n+     * @param isSuccess is a Boolean representing whether the file was uploaded successfully.\n+     * @param statusCode is the status for the upload of the file to storage.\n+     * @param statusDescription is the description of the status code.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    private void updateStatus(Boolean isSuccess, Integer statusCode, String statusDescription) throws IllegalArgumentException\n+    {\n+        this.isSuccess = isSuccess;\n+        this.statusCode = statusCode;\n+        this.statusDescription = statusDescription;\n+    }\n+\n+    /**\n+     * Convert this class in a valid json.\n+     *\n+     * @return a valid json that represents the content of this class.\n+     */\n+    public String toJson()\n+    {\n+        Gson gson = new GsonBuilder().disableHtmlEscaping().serializeNulls().create();\n+\n+        return gson.toJson(this);\n+    }\n+\n+    /**\n+     * Set the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     * for this upload from IoT Hub. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param correlationId the unique identifier that correlates this file upload status to a SAS URI that IoT Hub retreived from Azure Storage earlier.\n+     */\n+    public void setCorrelationId(String correlationId)\n+    {\n+        this.correlationId = correlationId;\n+    }\n+\n+    /**\n+     * @return Get the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     */\n+    public String getCorrelationId()\n+    {\n+        return this.correlationId;\n+    }\n+\n+    /**\n+     * @return Get if the file upload was successful\n+     */\n+    public Boolean getSuccess()\n+    {\n+        return this.isSuccess;\n+    }\n+\n+    /**\n+     * Set if the file upload was a success\n+     * @param success true if the file upload was a success. False otherwise.\n+     */\n+    public void setSuccess(Boolean success)\n+    {\n+        this.isSuccess = success;\n+    }\n+\n+    /**\n+     * @return get the status code associated with this file upload.\n+     */\n+    public Integer getStatusCode()\n+    {\n+        return this.statusCode;\n+    }\n+\n+    /**\n+     * Set the status code associated with this file upload request\n+     * @param statusCode The status code associated with this file upload request\n+     */\n+    public void setStatusCode(Integer statusCode)\n+    {\n+        this.statusCode = statusCode;\n+    }\n+\n+    /**\n+     * @return get the status description associated with this file upload.\n+     */\n+    public String getStatusDescription()\n+    {\n+        return this.statusDescription;\n+    }\n+\n+    /**\n+     * Set the status description associated with this file upload request\n+     * @param statusDescription The status description associated with this file upload request\n+     */\n+    public void setStatusDescription(String statusDescription)\n+    {\n+        this.statusDescription = statusDescription;\n+    }\n+\n+    /**\n+     * Empty constructor: Used only to keep GSON happy.\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9a479958bc470ec11a09d6a9a5f366c3f832c5a"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM1NTY5NA==", "bodyText": "This repo doesn't really pay much attention to warnings, so no", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/808#discussion_r440355694", "createdAt": "2020-06-15T18:09:36Z", "author": {"login": "timtay-microsoft"}, "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/serializer/FileUploadCompletionNotification.java", "diffHunk": "@@ -0,0 +1,195 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.deps.serializer;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * The request payload to send to IoT Hub to notify it when a file upload is completed, whether successful or not.\n+ * Must set {@link #setSuccess(Boolean)} and {@link #setCorrelationId(String)}, but all other fields are optional.\n+ */\n+public class FileUploadCompletionNotification\n+{\n+    private static final String CORRELATION_ID_TAG = \"correlationId\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(CORRELATION_ID_TAG)\n+    private String correlationId = null;\n+\n+    private static final String IS_SUCCESS_TAG = \"isSuccess\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(IS_SUCCESS_TAG)\n+    private Boolean isSuccess = null;\n+\n+    private static final String STATUS_CODE_TAG = \"statusCode\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_CODE_TAG)\n+    private Integer statusCode = null;\n+\n+    private static final String STATUS_DESCRIPTION_TAG = \"statusDescription\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_DESCRIPTION_TAG)\n+    private String statusDescription = null;\n+\n+    /**\n+     * Create an instance of the FileUploadCompletionNotification for a single file upload operation using Azure Storage.\n+     *\n+     * @param correlationId the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     *                      for this upload from IoT Hub. This field is mandatory. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param isSuccess whether the file was uploaded successfully. This field is mandatory.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    public FileUploadCompletionNotification(String correlationId, Boolean isSuccess)\n+            throws IllegalArgumentException\n+    {\n+        setCorrelationId(correlationId);\n+        updateStatus(isSuccess, statusCode, statusDescription);\n+    }\n+\n+    /**\n+     * Create an instance of the FileUploadCompletionNotification for a single file upload operation using Azure Storage.\n+     *\n+     * @param correlationId the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     *                      for this upload from IoT Hub. This field is mandatory. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param isSuccess whether the file was uploaded successfully. This field is mandatory.\n+     * @param statusCode is the status for the upload of the file to storage.\n+     * @param statusDescription is the description of the status code.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    public FileUploadCompletionNotification(String correlationId, Boolean isSuccess, Integer statusCode, String statusDescription)\n+            throws IllegalArgumentException\n+    {\n+        setCorrelationId(correlationId);\n+        updateStatus(isSuccess, statusCode, statusDescription);\n+    }\n+\n+    /**\n+     * Construct this notification with json\n+     * @param json the json to parse.\n+     */\n+    public FileUploadCompletionNotification(String json)\n+    {\n+        Gson gson = new GsonBuilder().disableHtmlEscaping().serializeNulls().create();\n+        FileUploadCompletionNotification fileUploadCompletionNotification;\n+\n+        try\n+        {\n+            fileUploadCompletionNotification = gson.fromJson(json, FileUploadCompletionNotification.class);\n+        }\n+        catch (Exception malformed)\n+        {\n+            throw new IllegalArgumentException(\"Malformed json:\" + malformed);\n+        }\n+\n+        this.correlationId = fileUploadCompletionNotification.getCorrelationId();\n+        this.isSuccess = fileUploadCompletionNotification.getSuccess();\n+        this.statusCode = fileUploadCompletionNotification.getStatusCode();\n+        this.statusDescription = fileUploadCompletionNotification.getStatusDescription();\n+    }\n+\n+    /**\n+     * Update the status information in the collection, and return the new json.\n+     *\n+     * @param isSuccess is a Boolean representing whether the file was uploaded successfully.\n+     * @param statusCode is the status for the upload of the file to storage.\n+     * @param statusDescription is the description of the status code.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    private void updateStatus(Boolean isSuccess, Integer statusCode, String statusDescription) throws IllegalArgumentException\n+    {\n+        this.isSuccess = isSuccess;\n+        this.statusCode = statusCode;\n+        this.statusDescription = statusDescription;\n+    }\n+\n+    /**\n+     * Convert this class in a valid json.\n+     *\n+     * @return a valid json that represents the content of this class.\n+     */\n+    public String toJson()\n+    {\n+        Gson gson = new GsonBuilder().disableHtmlEscaping().serializeNulls().create();\n+\n+        return gson.toJson(this);\n+    }\n+\n+    /**\n+     * Set the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     * for this upload from IoT Hub. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param correlationId the unique identifier that correlates this file upload status to a SAS URI that IoT Hub retreived from Azure Storage earlier.\n+     */\n+    public void setCorrelationId(String correlationId)\n+    {\n+        this.correlationId = correlationId;\n+    }\n+\n+    /**\n+     * @return Get the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     */\n+    public String getCorrelationId()\n+    {\n+        return this.correlationId;\n+    }\n+\n+    /**\n+     * @return Get if the file upload was successful\n+     */\n+    public Boolean getSuccess()\n+    {\n+        return this.isSuccess;\n+    }\n+\n+    /**\n+     * Set if the file upload was a success\n+     * @param success true if the file upload was a success. False otherwise.\n+     */\n+    public void setSuccess(Boolean success)\n+    {\n+        this.isSuccess = success;\n+    }\n+\n+    /**\n+     * @return get the status code associated with this file upload.\n+     */\n+    public Integer getStatusCode()\n+    {\n+        return this.statusCode;\n+    }\n+\n+    /**\n+     * Set the status code associated with this file upload request\n+     * @param statusCode The status code associated with this file upload request\n+     */\n+    public void setStatusCode(Integer statusCode)\n+    {\n+        this.statusCode = statusCode;\n+    }\n+\n+    /**\n+     * @return get the status description associated with this file upload.\n+     */\n+    public String getStatusDescription()\n+    {\n+        return this.statusDescription;\n+    }\n+\n+    /**\n+     * Set the status description associated with this file upload request\n+     * @param statusDescription The status description associated with this file upload request\n+     */\n+    public void setStatusDescription(String statusDescription)\n+    {\n+        this.statusDescription = statusDescription;\n+    }\n+\n+    /**\n+     * Empty constructor: Used only to keep GSON happy.\n+     */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1MzY2NQ=="}, "originalCommit": {"oid": "f9a479958bc470ec11a09d6a9a5f366c3f832c5a"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTAyMTU1OnYy", "diffSide": "RIGHT", "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/serializer/FileUploadCompletionNotification.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjoyNzoyNFrOGjkq0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjoyNzoyNFrOGjkq0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1NDEzMA==", "bodyText": "is this 'throws' needed since the method doesn't throw anything?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/808#discussion_r439954130", "createdAt": "2020-06-15T06:27:24Z", "author": {"login": "barustum"}, "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/serializer/FileUploadCompletionNotification.java", "diffHunk": "@@ -0,0 +1,195 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.deps.serializer;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * The request payload to send to IoT Hub to notify it when a file upload is completed, whether successful or not.\n+ * Must set {@link #setSuccess(Boolean)} and {@link #setCorrelationId(String)}, but all other fields are optional.\n+ */\n+public class FileUploadCompletionNotification\n+{\n+    private static final String CORRELATION_ID_TAG = \"correlationId\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(CORRELATION_ID_TAG)\n+    private String correlationId = null;\n+\n+    private static final String IS_SUCCESS_TAG = \"isSuccess\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(IS_SUCCESS_TAG)\n+    private Boolean isSuccess = null;\n+\n+    private static final String STATUS_CODE_TAG = \"statusCode\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_CODE_TAG)\n+    private Integer statusCode = null;\n+\n+    private static final String STATUS_DESCRIPTION_TAG = \"statusDescription\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_DESCRIPTION_TAG)\n+    private String statusDescription = null;\n+\n+    /**\n+     * Create an instance of the FileUploadCompletionNotification for a single file upload operation using Azure Storage.\n+     *\n+     * @param correlationId the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     *                      for this upload from IoT Hub. This field is mandatory. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param isSuccess whether the file was uploaded successfully. This field is mandatory.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    public FileUploadCompletionNotification(String correlationId, Boolean isSuccess)\n+            throws IllegalArgumentException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9a479958bc470ec11a09d6a9a5f366c3f832c5a"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTAyMjE3OnYy", "diffSide": "RIGHT", "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/serializer/FileUploadCompletionNotification.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjoyNzozNVrOGjkrKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODoxMDoxNlrOGj9MzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1NDIxNw==", "bodyText": "is this 'throws' needed since the method doesn't throw anything?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/808#discussion_r439954217", "createdAt": "2020-06-15T06:27:35Z", "author": {"login": "barustum"}, "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/serializer/FileUploadCompletionNotification.java", "diffHunk": "@@ -0,0 +1,195 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.deps.serializer;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * The request payload to send to IoT Hub to notify it when a file upload is completed, whether successful or not.\n+ * Must set {@link #setSuccess(Boolean)} and {@link #setCorrelationId(String)}, but all other fields are optional.\n+ */\n+public class FileUploadCompletionNotification\n+{\n+    private static final String CORRELATION_ID_TAG = \"correlationId\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(CORRELATION_ID_TAG)\n+    private String correlationId = null;\n+\n+    private static final String IS_SUCCESS_TAG = \"isSuccess\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(IS_SUCCESS_TAG)\n+    private Boolean isSuccess = null;\n+\n+    private static final String STATUS_CODE_TAG = \"statusCode\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_CODE_TAG)\n+    private Integer statusCode = null;\n+\n+    private static final String STATUS_DESCRIPTION_TAG = \"statusDescription\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_DESCRIPTION_TAG)\n+    private String statusDescription = null;\n+\n+    /**\n+     * Create an instance of the FileUploadCompletionNotification for a single file upload operation using Azure Storage.\n+     *\n+     * @param correlationId the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     *                      for this upload from IoT Hub. This field is mandatory. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param isSuccess whether the file was uploaded successfully. This field is mandatory.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    public FileUploadCompletionNotification(String correlationId, Boolean isSuccess)\n+            throws IllegalArgumentException\n+    {\n+        setCorrelationId(correlationId);\n+        updateStatus(isSuccess, statusCode, statusDescription);\n+    }\n+\n+    /**\n+     * Create an instance of the FileUploadCompletionNotification for a single file upload operation using Azure Storage.\n+     *\n+     * @param correlationId the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     *                      for this upload from IoT Hub. This field is mandatory. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param isSuccess whether the file was uploaded successfully. This field is mandatory.\n+     * @param statusCode is the status for the upload of the file to storage.\n+     * @param statusDescription is the description of the status code.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    public FileUploadCompletionNotification(String correlationId, Boolean isSuccess, Integer statusCode, String statusDescription)\n+            throws IllegalArgumentException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9a479958bc470ec11a09d6a9a5f366c3f832c5a"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM1NjA0NQ==", "bodyText": "Good catch, there is nothing thrown here anymore so I'll update the method signature and the javadocs", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/808#discussion_r440356045", "createdAt": "2020-06-15T18:10:16Z", "author": {"login": "timtay-microsoft"}, "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/serializer/FileUploadCompletionNotification.java", "diffHunk": "@@ -0,0 +1,195 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.deps.serializer;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * The request payload to send to IoT Hub to notify it when a file upload is completed, whether successful or not.\n+ * Must set {@link #setSuccess(Boolean)} and {@link #setCorrelationId(String)}, but all other fields are optional.\n+ */\n+public class FileUploadCompletionNotification\n+{\n+    private static final String CORRELATION_ID_TAG = \"correlationId\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(CORRELATION_ID_TAG)\n+    private String correlationId = null;\n+\n+    private static final String IS_SUCCESS_TAG = \"isSuccess\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(IS_SUCCESS_TAG)\n+    private Boolean isSuccess = null;\n+\n+    private static final String STATUS_CODE_TAG = \"statusCode\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_CODE_TAG)\n+    private Integer statusCode = null;\n+\n+    private static final String STATUS_DESCRIPTION_TAG = \"statusDescription\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_DESCRIPTION_TAG)\n+    private String statusDescription = null;\n+\n+    /**\n+     * Create an instance of the FileUploadCompletionNotification for a single file upload operation using Azure Storage.\n+     *\n+     * @param correlationId the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     *                      for this upload from IoT Hub. This field is mandatory. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param isSuccess whether the file was uploaded successfully. This field is mandatory.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    public FileUploadCompletionNotification(String correlationId, Boolean isSuccess)\n+            throws IllegalArgumentException\n+    {\n+        setCorrelationId(correlationId);\n+        updateStatus(isSuccess, statusCode, statusDescription);\n+    }\n+\n+    /**\n+     * Create an instance of the FileUploadCompletionNotification for a single file upload operation using Azure Storage.\n+     *\n+     * @param correlationId the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     *                      for this upload from IoT Hub. This field is mandatory. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param isSuccess whether the file was uploaded successfully. This field is mandatory.\n+     * @param statusCode is the status for the upload of the file to storage.\n+     * @param statusDescription is the description of the status code.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    public FileUploadCompletionNotification(String correlationId, Boolean isSuccess, Integer statusCode, String statusDescription)\n+            throws IllegalArgumentException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1NDIxNw=="}, "originalCommit": {"oid": "f9a479958bc470ec11a09d6a9a5f366c3f832c5a"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTAyNDQzOnYy", "diffSide": "RIGHT", "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/serializer/FileUploadCompletionNotification.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjoyODozNFrOGjksew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODoxMjoxMFrOGj9QjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1NDU1NQ==", "bodyText": "do we need a throws IllegalArgumentException for thie constructor?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/808#discussion_r439954555", "createdAt": "2020-06-15T06:28:34Z", "author": {"login": "barustum"}, "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/serializer/FileUploadCompletionNotification.java", "diffHunk": "@@ -0,0 +1,195 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.deps.serializer;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * The request payload to send to IoT Hub to notify it when a file upload is completed, whether successful or not.\n+ * Must set {@link #setSuccess(Boolean)} and {@link #setCorrelationId(String)}, but all other fields are optional.\n+ */\n+public class FileUploadCompletionNotification\n+{\n+    private static final String CORRELATION_ID_TAG = \"correlationId\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(CORRELATION_ID_TAG)\n+    private String correlationId = null;\n+\n+    private static final String IS_SUCCESS_TAG = \"isSuccess\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(IS_SUCCESS_TAG)\n+    private Boolean isSuccess = null;\n+\n+    private static final String STATUS_CODE_TAG = \"statusCode\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_CODE_TAG)\n+    private Integer statusCode = null;\n+\n+    private static final String STATUS_DESCRIPTION_TAG = \"statusDescription\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_DESCRIPTION_TAG)\n+    private String statusDescription = null;\n+\n+    /**\n+     * Create an instance of the FileUploadCompletionNotification for a single file upload operation using Azure Storage.\n+     *\n+     * @param correlationId the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     *                      for this upload from IoT Hub. This field is mandatory. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param isSuccess whether the file was uploaded successfully. This field is mandatory.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    public FileUploadCompletionNotification(String correlationId, Boolean isSuccess)\n+            throws IllegalArgumentException\n+    {\n+        setCorrelationId(correlationId);\n+        updateStatus(isSuccess, statusCode, statusDescription);\n+    }\n+\n+    /**\n+     * Create an instance of the FileUploadCompletionNotification for a single file upload operation using Azure Storage.\n+     *\n+     * @param correlationId the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     *                      for this upload from IoT Hub. This field is mandatory. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param isSuccess whether the file was uploaded successfully. This field is mandatory.\n+     * @param statusCode is the status for the upload of the file to storage.\n+     * @param statusDescription is the description of the status code.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    public FileUploadCompletionNotification(String correlationId, Boolean isSuccess, Integer statusCode, String statusDescription)\n+            throws IllegalArgumentException\n+    {\n+        setCorrelationId(correlationId);\n+        updateStatus(isSuccess, statusCode, statusDescription);\n+    }\n+\n+    /**\n+     * Construct this notification with json\n+     * @param json the json to parse.\n+     */\n+    public FileUploadCompletionNotification(String json)\n+    {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9a479958bc470ec11a09d6a9a5f366c3f832c5a"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM1NzAwNQ==", "bodyText": "No, because IllegalArgumentException is a runtime exception, so java methods don't need to declare them. https://www.tutorialspoint.com/how-to-handle-the-runtime-exception-in-java", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/808#discussion_r440357005", "createdAt": "2020-06-15T18:12:10Z", "author": {"login": "timtay-microsoft"}, "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/serializer/FileUploadCompletionNotification.java", "diffHunk": "@@ -0,0 +1,195 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.deps.serializer;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * The request payload to send to IoT Hub to notify it when a file upload is completed, whether successful or not.\n+ * Must set {@link #setSuccess(Boolean)} and {@link #setCorrelationId(String)}, but all other fields are optional.\n+ */\n+public class FileUploadCompletionNotification\n+{\n+    private static final String CORRELATION_ID_TAG = \"correlationId\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(CORRELATION_ID_TAG)\n+    private String correlationId = null;\n+\n+    private static final String IS_SUCCESS_TAG = \"isSuccess\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(IS_SUCCESS_TAG)\n+    private Boolean isSuccess = null;\n+\n+    private static final String STATUS_CODE_TAG = \"statusCode\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_CODE_TAG)\n+    private Integer statusCode = null;\n+\n+    private static final String STATUS_DESCRIPTION_TAG = \"statusDescription\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_DESCRIPTION_TAG)\n+    private String statusDescription = null;\n+\n+    /**\n+     * Create an instance of the FileUploadCompletionNotification for a single file upload operation using Azure Storage.\n+     *\n+     * @param correlationId the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     *                      for this upload from IoT Hub. This field is mandatory. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param isSuccess whether the file was uploaded successfully. This field is mandatory.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    public FileUploadCompletionNotification(String correlationId, Boolean isSuccess)\n+            throws IllegalArgumentException\n+    {\n+        setCorrelationId(correlationId);\n+        updateStatus(isSuccess, statusCode, statusDescription);\n+    }\n+\n+    /**\n+     * Create an instance of the FileUploadCompletionNotification for a single file upload operation using Azure Storage.\n+     *\n+     * @param correlationId the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     *                      for this upload from IoT Hub. This field is mandatory. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param isSuccess whether the file was uploaded successfully. This field is mandatory.\n+     * @param statusCode is the status for the upload of the file to storage.\n+     * @param statusDescription is the description of the status code.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    public FileUploadCompletionNotification(String correlationId, Boolean isSuccess, Integer statusCode, String statusDescription)\n+            throws IllegalArgumentException\n+    {\n+        setCorrelationId(correlationId);\n+        updateStatus(isSuccess, statusCode, statusDescription);\n+    }\n+\n+    /**\n+     * Construct this notification with json\n+     * @param json the json to parse.\n+     */\n+    public FileUploadCompletionNotification(String json)\n+    {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1NDU1NQ=="}, "originalCommit": {"oid": "f9a479958bc470ec11a09d6a9a5f366c3f832c5a"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTAzMDU3OnYy", "diffSide": "RIGHT", "path": "deps/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/deps/serializer/FileUploadCompletionNotificationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjozMDo1OVrOGjkwGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODoxMjo1OVrOGj9SVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1NTQ4MA==", "bodyText": "FileUploadStatusParser -> FileUploadCompletionNotification", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/808#discussion_r439955480", "createdAt": "2020-06-15T06:30:59Z", "author": {"login": "barustum"}, "path": "deps/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/deps/serializer/FileUploadCompletionNotificationTest.java", "diffHunk": "@@ -77,39 +77,18 @@ private static String createJson(String correlationId, Boolean isSuccess, Intege\n     public void constructor_succeed()\n     {\n         // act\n-        FileUploadStatusParser fileUploadStatusParser = new FileUploadStatusParser(VALID_CORRELATION_ID, VALID_IS_SUCCESS, VALID_STATUS_CODE, VALID_STATUS_DESCRIPTION);\n+        FileUploadCompletionNotification fileUploadStatusParser = new FileUploadCompletionNotification(VALID_CORRELATION_ID, VALID_IS_SUCCESS, VALID_STATUS_CODE, VALID_STATUS_DESCRIPTION);\n \n         // assert\n         assertFileUploadStatus(fileUploadStatusParser, VALID_CORRELATION_ID, VALID_IS_SUCCESS, VALID_STATUS_CODE, VALID_STATUS_DESCRIPTION);\n     }\n \n-    /* Tests_SRS_FILE_UPLOAD_STATUS_21_003: [If one of the provided parameters is null, empty, or not valid, the constructor shall throws IllegalArgumentException.] */\n-    @Test\n-    public void constructor_failed()\n-    {\n-        for (TestParameters test:tests)\n-        {\n-            // act\n-            try\n-            {\n-                new FileUploadStatusParser(test.correlationId, test.isSuccess, test.statusCode, test.statusDescription);\n-                System.out.println(\"Test failed: correlationId=\" + test.correlationId + \", isSuccess=\" + test.isSuccess +\n-                        \", statusCode=\" + test.statusCode + \", statusDescription=\" + test.statusDescription);\n-                assert false;\n-            }\n-            catch (IllegalArgumentException expected)\n-            {\n-                // Don't do anything, expected throw.\n-            }\n-        }\n-    }\n-\n     /* Tests_SRS_FILE_UPLOAD_STATUS_21_004: [The toJson shall return a string with a json that represents the contend of the FileUploadStatusParser.] */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9a479958bc470ec11a09d6a9a5f366c3f832c5a"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM1NzQ2Mw==", "bodyText": "Actually, I should just delete these comments. They are a relic of an out-dated practice we used to do. They aren't worth keeping around anymore", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/808#discussion_r440357463", "createdAt": "2020-06-15T18:12:59Z", "author": {"login": "timtay-microsoft"}, "path": "deps/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/deps/serializer/FileUploadCompletionNotificationTest.java", "diffHunk": "@@ -77,39 +77,18 @@ private static String createJson(String correlationId, Boolean isSuccess, Intege\n     public void constructor_succeed()\n     {\n         // act\n-        FileUploadStatusParser fileUploadStatusParser = new FileUploadStatusParser(VALID_CORRELATION_ID, VALID_IS_SUCCESS, VALID_STATUS_CODE, VALID_STATUS_DESCRIPTION);\n+        FileUploadCompletionNotification fileUploadStatusParser = new FileUploadCompletionNotification(VALID_CORRELATION_ID, VALID_IS_SUCCESS, VALID_STATUS_CODE, VALID_STATUS_DESCRIPTION);\n \n         // assert\n         assertFileUploadStatus(fileUploadStatusParser, VALID_CORRELATION_ID, VALID_IS_SUCCESS, VALID_STATUS_CODE, VALID_STATUS_DESCRIPTION);\n     }\n \n-    /* Tests_SRS_FILE_UPLOAD_STATUS_21_003: [If one of the provided parameters is null, empty, or not valid, the constructor shall throws IllegalArgumentException.] */\n-    @Test\n-    public void constructor_failed()\n-    {\n-        for (TestParameters test:tests)\n-        {\n-            // act\n-            try\n-            {\n-                new FileUploadStatusParser(test.correlationId, test.isSuccess, test.statusCode, test.statusDescription);\n-                System.out.println(\"Test failed: correlationId=\" + test.correlationId + \", isSuccess=\" + test.isSuccess +\n-                        \", statusCode=\" + test.statusCode + \", statusDescription=\" + test.statusDescription);\n-                assert false;\n-            }\n-            catch (IllegalArgumentException expected)\n-            {\n-                // Don't do anything, expected throw.\n-            }\n-        }\n-    }\n-\n     /* Tests_SRS_FILE_UPLOAD_STATUS_21_004: [The toJson shall return a string with a json that represents the contend of the FileUploadStatusParser.] */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1NTQ4MA=="}, "originalCommit": {"oid": "f9a479958bc470ec11a09d6a9a5f366c3f832c5a"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTAzMzQzOnYy", "diffSide": "RIGHT", "path": "deps/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/deps/serializer/FileUploadSasUriRequestTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjozMjoxOVrOGjkx5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjozMjoxOVrOGjkx5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1NTk0Mw==", "bodyText": "contend -> content", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/808#discussion_r439955943", "createdAt": "2020-06-15T06:32:19Z", "author": {"login": "barustum"}, "path": "deps/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/deps/serializer/FileUploadSasUriRequestTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package tests.unit.com.microsoft.azure.sdk.iot.deps.serializer;\n+\n+import com.microsoft.azure.sdk.iot.deps.serializer.FileUploadSasUriRequest;\n+import mockit.Deencapsulation;\n+import org.junit.Test;\n+import tests.unit.com.microsoft.azure.sdk.iot.deps.Helpers;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+/**\n+ * Unit tests for File Upload Request serializer\n+ * 100% methods, 100% lines covered\n+ */\n+public class FileUploadSasUriRequestTest\n+{\n+    private static final String VALID_BLOB_NAME = \"test-device1/image.jpg\";\n+    private static final String INVALID_BLOB_NAME = \"\\u1234 test-device1/image.jpg\";\n+\n+    private static void assertFileUploadRequest(FileUploadSasUriRequest fileUploadSasUriRequest, String expectedBlobName)\n+    {\n+        assertNotNull(fileUploadSasUriRequest);\n+\n+        String blobName = Deencapsulation.getField(fileUploadSasUriRequest, \"blobName\");\n+        assertEquals(expectedBlobName, blobName);\n+    }\n+\n+    /* Tests_SRS_FILE_UPLOAD_REQUEST_21_001: [The constructor shall create an instance of the FileUploadSasUriRequest.] */\n+    /* Tests_SRS_FILE_UPLOAD_REQUEST_21_002: [The constructor shall set the `blobName` in the new class with the provided blob name.] */\n+    @Test\n+    public void constructor_succeed()\n+    {\n+        // act\n+        FileUploadSasUriRequest fileUploadSasUriRequest = new FileUploadSasUriRequest(VALID_BLOB_NAME);\n+\n+        // assert\n+        assertFileUploadRequest(fileUploadSasUriRequest, VALID_BLOB_NAME);\n+    }\n+\n+    /* Tests_SRS_FILE_UPLOAD_REQUEST_21_004: [The toJson shall return a string with a json that represents the contend of the FileUploadSasUriResponse.] */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9a479958bc470ec11a09d6a9a5f366c3f832c5a"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTAzNjIwOnYy", "diffSide": "RIGHT", "path": "deps/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/deps/serializer/FileUploadSasUriRequestTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjozMzoxOVrOGjkzgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjozMzoxOVrOGjkzgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1NjM1Mg==", "bodyText": "FileUploadSasUriResponse -> FileUploadSasUriRequest", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/808#discussion_r439956352", "createdAt": "2020-06-15T06:33:19Z", "author": {"login": "barustum"}, "path": "deps/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/deps/serializer/FileUploadSasUriRequestTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package tests.unit.com.microsoft.azure.sdk.iot.deps.serializer;\n+\n+import com.microsoft.azure.sdk.iot.deps.serializer.FileUploadSasUriRequest;\n+import mockit.Deencapsulation;\n+import org.junit.Test;\n+import tests.unit.com.microsoft.azure.sdk.iot.deps.Helpers;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+/**\n+ * Unit tests for File Upload Request serializer\n+ * 100% methods, 100% lines covered\n+ */\n+public class FileUploadSasUriRequestTest\n+{\n+    private static final String VALID_BLOB_NAME = \"test-device1/image.jpg\";\n+    private static final String INVALID_BLOB_NAME = \"\\u1234 test-device1/image.jpg\";\n+\n+    private static void assertFileUploadRequest(FileUploadSasUriRequest fileUploadSasUriRequest, String expectedBlobName)\n+    {\n+        assertNotNull(fileUploadSasUriRequest);\n+\n+        String blobName = Deencapsulation.getField(fileUploadSasUriRequest, \"blobName\");\n+        assertEquals(expectedBlobName, blobName);\n+    }\n+\n+    /* Tests_SRS_FILE_UPLOAD_REQUEST_21_001: [The constructor shall create an instance of the FileUploadSasUriRequest.] */\n+    /* Tests_SRS_FILE_UPLOAD_REQUEST_21_002: [The constructor shall set the `blobName` in the new class with the provided blob name.] */\n+    @Test\n+    public void constructor_succeed()\n+    {\n+        // act\n+        FileUploadSasUriRequest fileUploadSasUriRequest = new FileUploadSasUriRequest(VALID_BLOB_NAME);\n+\n+        // assert\n+        assertFileUploadRequest(fileUploadSasUriRequest, VALID_BLOB_NAME);\n+    }\n+\n+    /* Tests_SRS_FILE_UPLOAD_REQUEST_21_004: [The toJson shall return a string with a json that represents the contend of the FileUploadSasUriResponse.] */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9a479958bc470ec11a09d6a9a5f366c3f832c5a"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2828, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}