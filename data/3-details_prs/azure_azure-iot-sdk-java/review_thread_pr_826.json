{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNzM2NDk3", "number": 826, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMToyMjo0MlrOEJRPmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzo0NDo1OFrOEKNcyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTU1MTYxOnYy", "diffSide": "LEFT", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMToyMjo0MlrOGpvEeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMToyMjo0MlrOGpvEeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxNTk5NA==", "bodyText": "This type was pretty redundant, and couldn't capture the same state as the IotHubTransport layer had, so I removed this type and just re-used the IotHubConnectionStatus class for this purpose", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/826#discussion_r446415994", "createdAt": "2020-06-26T21:22:42Z", "author": {"login": "timtay-microsoft"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java", "diffHunk": "@@ -68,14 +69,8 @@\n  * The task scheduler for sending and receiving messages for the Device Client\n  */\n @Slf4j\n-public final class DeviceIO\n+public final class DeviceIO implements IotHubConnectionStatusChangeCallback\n {\n-    /** The state of the IoT Hub client's connection with the IoT Hub. */\n-    protected enum IotHubClientState", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b8d123641538ce0a79e63a4ed0ab56b6ff887d"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTU1Mjc2OnYy", "diffSide": "RIGHT", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMToyMzoxNVrOGpvFOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMToyMzoxNVrOGpvFOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxNjE4NA==", "bodyText": "Passing this in as a parameter so that the transpor layer can callback up to this layer when the connection status changes", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/826#discussion_r446416184", "createdAt": "2020-06-26T21:23:15Z", "author": {"login": "timtay-microsoft"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java", "diffHunk": "@@ -119,22 +114,22 @@\n         this.receivePeriodInMilliseconds = receivePeriodInMilliseconds;\n \n         /* Codes_SRS_DEVICE_IO_21_006: [The constructor shall set the `state` as `DISCONNECTED`.] */\n-        this.state = IotHubClientState.CLOSED;\n+        this.state = IotHubConnectionStatus.DISCONNECTED;\n \n         if (protocol == IotHubClientProtocol.AMQPS_WS || protocol == IotHubClientProtocol.MQTT_WS)\n         {\n             this.config.setUseWebsocket(true);\n         }\n \n-        this.transport = new IotHubTransport(config);\n+        this.transport = new IotHubTransport(config, this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b8d123641538ce0a79e63a4ed0ab56b6ff887d"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTU1NTQxOnYy", "diffSide": "LEFT", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMToyNDozOFrOGpvG9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMToyNDozOFrOGpvG9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxNjYzMQ==", "bodyText": "This logic was moved to the connection status callback. That way, this method (which starts up the send/receive thread pool) gets called every time the client goes from DISCONNECTED or DISCONNECTED_RETRYING to CONNECTED. This allows the thread pool to not be active during DISCONNECTED_RETRYING", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/826#discussion_r446416631", "createdAt": "2020-06-26T21:24:38Z", "author": {"login": "timtay-microsoft"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java", "diffHunk": "@@ -161,10 +156,6 @@ void open() throws IOException\n         {\n             throw new IOException(\"Could not open the connection\", e);\n         }\n-\n-        /* Codes_SRS_DEVICE_IO_21_014: [The open shall schedule receive tasks to run every receivePeriodInMilliseconds milliseconds.] */\n-        /* Codes_SRS_DEVICE_IO_21_016: [The open shall set the `state` as `CONNECTED`.] */\n-        commonOpenSetup();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b8d123641538ce0a79e63a4ed0ab56b6ff887d"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTU1NzUyOnYy", "diffSide": "RIGHT", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMToyNTozNlrOGpvIUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMToyNTozNlrOGpvIUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxNjk3Ng==", "bodyText": "this method will be called back from the transport layer every time the state changes. This class should start/stop the send/receive thread pool and then update its own state to be consistent with the transport state", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/826#discussion_r446416976", "createdAt": "2020-06-26T21:25:36Z", "author": {"login": "timtay-microsoft"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java", "diffHunk": "@@ -429,4 +425,25 @@ public void registerConnectionStatusChangeCallback(IotHubConnectionStatusChangeC\n         //Codes_SRS_DEVICE_IO_34_020: [This function shall register the callback with the transport.]\n         this.transport.registerConnectionStatusChangeCallback(statusChangeCallback, callbackContext);\n     }\n+\n+    /*\n+     * IotHubTransport layer will notify this layer when the connection is established and when it is lost. This layer should start/stop\n+     * the send/receive threads accordingly\n+     */\n+    @Override\n+    public void execute(IotHubConnectionStatus status, IotHubConnectionStatusChangeReason statusChangeReason, Throwable throwable, Object callbackContext)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b8d123641538ce0a79e63a4ed0ab56b6ff887d"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTU5MDc0OnYy", "diffSide": "RIGHT", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/IotHubReceiveTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMTozODoyN1rOGpvciA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMTozODoyN1rOGpvciA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQyMjE1Mg==", "bodyText": "See here for a more in-depth explanation on wait/notify, but the short of it is that this thread goes dormant until notified. When dormant, this thread has minimal performance impact on the machine running the SDK", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/826#discussion_r446422152", "createdAt": "2020-06-26T21:38:27Z", "author": {"login": "timtay-microsoft"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/IotHubReceiveTask.java", "diffHunk": "@@ -32,11 +40,24 @@ public void run()\n \n         try\n         {\n-            // Codes_SRS_IOTHUBRECEIVETASK_11_002: [The function shall poll an IoT Hub for messages, invoke the message callback if one exists, and return one of COMPLETE, ABANDON, or REJECT to the IoT Hub.]\n+            // HTTP is the only protocol where the SDK must actively poll for received messages. Because of that, never\n+            // wait on the IoTHubTransport layer to notify this thread that a received message is ready to be handled.\n+            if (this.transport.getProtocol() != IotHubClientProtocol.HTTPS)\n+            {\n+                synchronized (this.receiveThreadLock)\n+                {\n+                    if (!this.transport.hasReceivedMessagesToHandle() && !this.transport.isClosed())\n+                    {\n+                        // AMQP and MQTT layers will notify the IoTHubTransport layer once a message arrives, and at\n+                        // that time, this thread will be notified to handle them.\n+                        this.receiveThreadLock.wait();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b8d123641538ce0a79e63a4ed0ab56b6ff887d"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODIzOTc5OnYy", "diffSide": "LEFT", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMjozODozM1rOGqpf5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMjozODozM1rOGqpf5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM3MzI4Ng==", "bodyText": "Splitting this into two separate schedulers so that there is no chance of this thread pool of size 2 having two send tasks active at once, and both waiting for work to arrive. If that were to happen, then no receive threads will spawn, so any received messages will be stuck.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/826#discussion_r447373286", "createdAt": "2020-06-30T02:38:33Z", "author": {"login": "timtay-microsoft"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java", "diffHunk": "@@ -185,24 +177,30 @@ void addClient(DeviceClientConfig config)\n     /**\n      * Handles logic common to all open functions.\n      */\n-    private void commonOpenSetup()\n+    private void startWorkerThreads()\n     {\n         this.sendTask = new IotHubSendTask(this.transport);\n         this.receiveTask = new IotHubReceiveTask(this.transport);\n \n-        this.taskScheduler = Executors.newScheduledThreadPool(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e335c57bf4e6f7c8c21d4eb5fdedb95f19cbd20f"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTQxMzgxOnYy", "diffSide": "RIGHT", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzo0NDoyNlrOGrHtZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOToxODo0MVrOGrLCPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg2ODI2Mg==", "bodyText": "how are these managed when calls are made in parallel - i.e. I call open() over one thread, and then close() over another thread, at the same time.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/826#discussion_r447868262", "createdAt": "2020-06-30T17:44:26Z", "author": {"login": "abhipsaMisra"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java", "diffHunk": "@@ -146,7 +142,7 @@\n     void open() throws IOException\n     {\n         /* Codes_SRS_DEVICE_IO_21_007: [If the client is already open, the open shall do nothing.] */\n-        if (this.state == IotHubClientState.OPEN)\n+        if (this.state == IotHubConnectionStatus.CONNECTED || this.state == IotHubConnectionStatus.DISCONNECTED_RETRYING)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e335c57bf4e6f7c8c21d4eb5fdedb95f19cbd20f"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkyMjc1MA==", "bodyText": "I can add a state lock for that, sure. Right now, we just hope customers don't do that", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/826#discussion_r447922750", "createdAt": "2020-06-30T19:18:41Z", "author": {"login": "timtay-microsoft"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java", "diffHunk": "@@ -146,7 +142,7 @@\n     void open() throws IOException\n     {\n         /* Codes_SRS_DEVICE_IO_21_007: [If the client is already open, the open shall do nothing.] */\n-        if (this.state == IotHubClientState.OPEN)\n+        if (this.state == IotHubConnectionStatus.CONNECTED || this.state == IotHubConnectionStatus.DISCONNECTED_RETRYING)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg2ODI2Mg=="}, "originalCommit": {"oid": "e335c57bf4e6f7c8c21d4eb5fdedb95f19cbd20f"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTQxNTc5OnYy", "diffSide": "RIGHT", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzo0NDo1OFrOGrHurA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxOToyMDowN1rOGrLE_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg2ODU4OA==", "bodyText": "shouldn't these status updates be made over a lock?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/826#discussion_r447868588", "createdAt": "2020-06-30T17:44:58Z", "author": {"login": "abhipsaMisra"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java", "diffHunk": "@@ -429,4 +432,33 @@ public void registerConnectionStatusChangeCallback(IotHubConnectionStatusChangeC\n         //Codes_SRS_DEVICE_IO_34_020: [This function shall register the callback with the transport.]\n         this.transport.registerConnectionStatusChangeCallback(statusChangeCallback, callbackContext);\n     }\n+\n+    /*\n+     * IotHubTransport layer will notify this layer when the connection is established and when it is lost. This layer should start/stop\n+     * the send/receive threads accordingly\n+     */\n+    @Override\n+    public void execute(IotHubConnectionStatus status, IotHubConnectionStatusChangeReason statusChangeReason, Throwable throwable, Object callbackContext)\n+    {\n+        if (status == IotHubConnectionStatus.DISCONNECTED || status == IotHubConnectionStatus.DISCONNECTED_RETRYING)\n+        {\n+            // No need to keep spawning send/receive tasks during reconnection or when the client is closed\n+            if (this.sendTaskScheduler != null)\n+            {\n+                this.sendTaskScheduler.shutdown();\n+            }\n+\n+            if (this.receiveTaskScheduler != null)\n+            {\n+                this.receiveTaskScheduler.shutdown();\n+            }\n+        }\n+        else if (status == IotHubConnectionStatus.CONNECTED)\n+        {\n+            // Restart the task scheduler so that send/receive tasks start spawning again\n+            this.startWorkerThreads();\n+        }\n+\n+        this.state = status;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e335c57bf4e6f7c8c21d4eb5fdedb95f19cbd20f"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkyMzQ1Mw==", "bodyText": "Sure, I'll protect this with the same lock that I'll add for open/close", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/826#discussion_r447923453", "createdAt": "2020-06-30T19:20:07Z", "author": {"login": "timtay-microsoft"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceIO.java", "diffHunk": "@@ -429,4 +432,33 @@ public void registerConnectionStatusChangeCallback(IotHubConnectionStatusChangeC\n         //Codes_SRS_DEVICE_IO_34_020: [This function shall register the callback with the transport.]\n         this.transport.registerConnectionStatusChangeCallback(statusChangeCallback, callbackContext);\n     }\n+\n+    /*\n+     * IotHubTransport layer will notify this layer when the connection is established and when it is lost. This layer should start/stop\n+     * the send/receive threads accordingly\n+     */\n+    @Override\n+    public void execute(IotHubConnectionStatus status, IotHubConnectionStatusChangeReason statusChangeReason, Throwable throwable, Object callbackContext)\n+    {\n+        if (status == IotHubConnectionStatus.DISCONNECTED || status == IotHubConnectionStatus.DISCONNECTED_RETRYING)\n+        {\n+            // No need to keep spawning send/receive tasks during reconnection or when the client is closed\n+            if (this.sendTaskScheduler != null)\n+            {\n+                this.sendTaskScheduler.shutdown();\n+            }\n+\n+            if (this.receiveTaskScheduler != null)\n+            {\n+                this.receiveTaskScheduler.shutdown();\n+            }\n+        }\n+        else if (status == IotHubConnectionStatus.CONNECTED)\n+        {\n+            // Restart the task scheduler so that send/receive tasks start spawning again\n+            this.startWorkerThreads();\n+        }\n+\n+        this.state = status;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg2ODU4OA=="}, "originalCommit": {"oid": "e335c57bf4e6f7c8c21d4eb5fdedb95f19cbd20f"}, "originalPosition": 236}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2871, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}