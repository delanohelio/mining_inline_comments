{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4NDcyNTIy", "number": 860, "title": "feat(e2e): Add e2e tests for PnP", "bodyText": "This PR is adding e2e tests for PnP model Id changes.\nTested and verified against canary.\nUpdated with\n\nmodules test cases\ndifferent Authentication mechanisms", "createdAt": "2020-07-13T20:28:25Z", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860", "merged": true, "mergeCommit": {"oid": "75352c97a01b986141715aa6227211cc063cb67f"}, "closed": true, "closedAt": "2020-07-15T19:59:19Z", "author": {"login": "bikamani"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc0nUHmgH2gAyNDQ4NDcyNTIyOjhlNjc1YjAzYWM3OTMwYTEyZDk0NjZlMTU5YWY5OTZmYjM2MjY4NWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc1OrVGAFqTQ0OTIxMDI2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8e675b03ac7930a12d9466e159af996fb362685c", "author": {"user": {"login": "bikamani", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/8e675b03ac7930a12d9466e159af996fb362685c", "committedDate": "2020-07-13T20:18:25Z", "message": "add e2e for PnP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75b2cc2301fff0e7e609bf055464a2be459a552a", "author": {"user": {"login": "bikamani", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/75b2cc2301fff0e7e609bf055464a2be459a552a", "committedDate": "2020-07-13T20:24:44Z", "message": "refactor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NTg0MDY5", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#pullrequestreview-447584069", "createdAt": "2020-07-13T20:38:58Z", "commit": {"oid": "75b2cc2301fff0e7e609bf055464a2be459a552a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMDozODo1OVrOGw4-bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMDozODo1OVrOGw4-bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxODMxNg==", "bodyText": "is there as Device and Module in some other imported package that prevents this from being imported at class level?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453918316", "createdAt": "2020-07-13T20:38:59Z", "author": {"login": "abhipsaMisra"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.DeviceTwin.Property;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n+\n+        registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n+\n+        List inputs =  Arrays.asList(\n+                new Object[][]\n+                        {\n+                                {MQTT},\n+                                {MQTT_WS},\n+                        }\n+        );\n+\n+        return inputs;\n+    }\n+\n+    private static class TestDevice\n+    {\n+        String deviceId;\n+        String moduleId;\n+        DeviceClient deviceClient;\n+        ModuleClient moduleClient;\n+    }\n+\n+    public TwinPnPTests.TwinPnPTestInstance testInstance;\n+\n+    public TwinPnPTests(IotHubClientProtocol protocol) throws IOException\n+    {\n+        this.testInstance = new TwinPnPTestInstance(protocol);\n+    }\n+\n+    public class TwinPnPTestInstance\n+    {\n+        public IotHubClientProtocol protocol;\n+        private com.microsoft.azure.sdk.iot.service.Device deviceForRegistryManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75b2cc2301fff0e7e609bf055464a2be459a552a"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NTg0NTE5", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#pullrequestreview-447584519", "createdAt": "2020-07-13T20:39:42Z", "commit": {"oid": "75b2cc2301fff0e7e609bf055464a2be459a552a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMDozOTo0MlrOGw4_-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMDozOTo0MlrOGw4_-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxODcxMg==", "bodyText": "Q - why do we have new TestDevice() here and in TwinPnPTestInstance() constructor as well?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453918712", "createdAt": "2020-07-13T20:39:42Z", "author": {"login": "abhipsaMisra"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.DeviceTwin.Property;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n+\n+        registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n+\n+        List inputs =  Arrays.asList(\n+                new Object[][]\n+                        {\n+                                {MQTT},\n+                                {MQTT_WS},\n+                        }\n+        );\n+\n+        return inputs;\n+    }\n+\n+    private static class TestDevice\n+    {\n+        String deviceId;\n+        String moduleId;\n+        DeviceClient deviceClient;\n+        ModuleClient moduleClient;\n+    }\n+\n+    public TwinPnPTests.TwinPnPTestInstance testInstance;\n+\n+    public TwinPnPTests(IotHubClientProtocol protocol) throws IOException\n+    {\n+        this.testInstance = new TwinPnPTestInstance(protocol);\n+    }\n+\n+    public class TwinPnPTestInstance\n+    {\n+        public IotHubClientProtocol protocol;\n+        private com.microsoft.azure.sdk.iot.service.Device deviceForRegistryManager;\n+        private com.microsoft.azure.sdk.iot.service.Module moduleForRegistryManager;\n+\n+        private DeviceTwin sCDeviceTwin;\n+        private TwinPnPTests.TestDevice testDevice;\n+\n+        public TwinPnPTestInstance(IotHubClientProtocol protocol) throws IOException\n+        {\n+            this.protocol = protocol;\n+            this.sCDeviceTwin = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n+            this.testDevice = new TestDevice();\n+        }\n+    }\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception\n+    {\n+        if (registryManager != null)\n+        {\n+            registryManager.close();\n+            registryManager = null;\n+        }\n+    }\n+\n+    private void createDeviceWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException\n+    {\n+        testInstance.testDevice.deviceClient = new DeviceClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager), protocol, options);\n+        testInstance.testDevice.deviceClient.open();\n+    }\n+\n+    private void createModuleWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException, ModuleClientException {\n+        testInstance.testDevice.moduleClient = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager, testInstance.moduleForRegistryManager), protocol, options);\n+        testInstance.testDevice.moduleClient.open();\n+    }\n+\n+    @Before\n+    public void createDevice() throws Exception\n+    {\n+        testInstance.testDevice = new TestDevice();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75b2cc2301fff0e7e609bf055464a2be459a552a"}, "originalPosition": 118}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717", "author": {"user": {"login": "bikamani", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/683d4e2a991ea047c87079bdea4458d429251717", "committedDate": "2020-07-13T21:27:02Z", "message": "address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NjE4Mzg0", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#pullrequestreview-447618384", "createdAt": "2020-07-13T21:33:34Z", "commit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMTozMzozNFrOGw6rrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMTozMzozNFrOGw6rrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0NjI4Nw==", "bodyText": "Seems like you could also parameterize Device vs Module here", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453946287", "createdAt": "2020-07-13T21:33:34Z", "author": {"login": "timtay-microsoft"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n+\n+        registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n+\n+        List inputs =  Arrays.asList(\n+                new Object[][]\n+                        {\n+                                {MQTT},\n+                                {MQTT_WS},\n+                        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NjIzOTIz", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#pullrequestreview-447623923", "createdAt": "2020-07-13T21:37:58Z", "commit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMTozNzo1OFrOGw60Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMTozNzo1OFrOGw60Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0ODQ1OQ==", "bodyText": "You can move this label up to the class level since all pnp twin tests will be standard tier only", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453948459", "createdAt": "2020-07-13T21:37:58Z", "author": {"login": "timtay-microsoft"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n+\n+        registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n+\n+        List inputs =  Arrays.asList(\n+                new Object[][]\n+                        {\n+                                {MQTT},\n+                                {MQTT_WS},\n+                        }\n+        );\n+\n+        return inputs;\n+    }\n+\n+    private static class TestDevice\n+    {\n+        String deviceId;\n+        String moduleId;\n+        DeviceClient deviceClient;\n+        ModuleClient moduleClient;\n+    }\n+\n+    public TwinPnPTests.TwinPnPTestInstance testInstance;\n+\n+    public TwinPnPTests(IotHubClientProtocol protocol) throws IOException\n+    {\n+        this.testInstance = new TwinPnPTestInstance(protocol);\n+    }\n+\n+    public class TwinPnPTestInstance\n+    {\n+        public IotHubClientProtocol protocol;\n+        private Device deviceForRegistryManager;\n+        private Module moduleForRegistryManager;\n+\n+        private DeviceTwin sCDeviceTwin;\n+        private TwinPnPTests.TestDevice testDevice;\n+\n+        public TwinPnPTestInstance(IotHubClientProtocol protocol) throws IOException\n+        {\n+            this.protocol = protocol;\n+            this.sCDeviceTwin = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n+        }\n+    }\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception\n+    {\n+        if (registryManager != null)\n+        {\n+            registryManager.close();\n+            registryManager = null;\n+        }\n+    }\n+\n+    private void createDeviceWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException\n+    {\n+        testInstance.testDevice.deviceClient = new DeviceClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager), protocol, options);\n+        testInstance.testDevice.deviceClient.open();\n+    }\n+\n+    private void createModuleWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException, ModuleClientException {\n+        testInstance.testDevice.moduleClient = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager, testInstance.moduleForRegistryManager), protocol, options);\n+        testInstance.testDevice.moduleClient.open();\n+    }\n+\n+    @Before\n+    public void createDevice() throws Exception\n+    {\n+        testInstance.testDevice = new TestDevice();\n+        testInstance.testDevice.deviceId = \"java-twin-PnP-e2e-test-\".concat(UUID.randomUUID().toString());\n+        testInstance.testDevice.moduleId = \"java-twin-PnP-module-e2e-test-\".concat(UUID.randomUUID().toString());\n+\n+        testInstance.deviceForRegistryManager = com.microsoft.azure.sdk.iot.service.Device.createFromId(testInstance.testDevice.deviceId, null, null);\n+        testInstance.deviceForRegistryManager = Tools.addDeviceWithRetry(registryManager, testInstance.deviceForRegistryManager);\n+        testInstance.moduleForRegistryManager = com.microsoft.azure.sdk.iot.service.Module.createFromId(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId,null);\n+        testInstance.moduleForRegistryManager = Tools.addModuleWithRetry(registryManager, testInstance.moduleForRegistryManager);\n+\n+    }\n+\n+    @After\n+    public void destroyDevice() throws Exception\n+    {\n+        if (testInstance.testDevice.deviceClient != null)\n+        {\n+            testInstance.testDevice.deviceClient.closeNow();\n+            testInstance.testDevice.deviceClient = null;\n+        }\n+        if (testInstance.testDevice.moduleClient != null)\n+        {\n+            testInstance.testDevice.moduleClient.closeNow();\n+            testInstance.testDevice.moduleClient = null;\n+        }\n+\n+        if (testInstance != null && testInstance.testDevice != null)\n+        {\n+            if (registryManager != null && testInstance.testDevice.deviceId != null && testInstance.testDevice.moduleId !=null)\n+            {\n+                registryManager.removeModule(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId);\n+                registryManager.removeDevice(testInstance.testDevice.deviceId);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @StandardTierHubOnlyTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "originalPosition": 154}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NjMwNDI1", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#pullrequestreview-447630425", "createdAt": "2020-07-13T21:43:17Z", "commit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMTo0MzoxN1rOGw69aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMTo0MzoxN1rOGw69aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MDgyNw==", "bodyText": "No need to set fields to null when you are done with them. Here and below", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453950827", "createdAt": "2020-07-13T21:43:17Z", "author": {"login": "timtay-microsoft"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n+\n+        registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n+\n+        List inputs =  Arrays.asList(\n+                new Object[][]\n+                        {\n+                                {MQTT},\n+                                {MQTT_WS},\n+                        }\n+        );\n+\n+        return inputs;\n+    }\n+\n+    private static class TestDevice\n+    {\n+        String deviceId;\n+        String moduleId;\n+        DeviceClient deviceClient;\n+        ModuleClient moduleClient;\n+    }\n+\n+    public TwinPnPTests.TwinPnPTestInstance testInstance;\n+\n+    public TwinPnPTests(IotHubClientProtocol protocol) throws IOException\n+    {\n+        this.testInstance = new TwinPnPTestInstance(protocol);\n+    }\n+\n+    public class TwinPnPTestInstance\n+    {\n+        public IotHubClientProtocol protocol;\n+        private Device deviceForRegistryManager;\n+        private Module moduleForRegistryManager;\n+\n+        private DeviceTwin sCDeviceTwin;\n+        private TwinPnPTests.TestDevice testDevice;\n+\n+        public TwinPnPTestInstance(IotHubClientProtocol protocol) throws IOException\n+        {\n+            this.protocol = protocol;\n+            this.sCDeviceTwin = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n+        }\n+    }\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception\n+    {\n+        if (registryManager != null)\n+        {\n+            registryManager.close();\n+            registryManager = null;\n+        }\n+    }\n+\n+    private void createDeviceWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException\n+    {\n+        testInstance.testDevice.deviceClient = new DeviceClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager), protocol, options);\n+        testInstance.testDevice.deviceClient.open();\n+    }\n+\n+    private void createModuleWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException, ModuleClientException {\n+        testInstance.testDevice.moduleClient = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager, testInstance.moduleForRegistryManager), protocol, options);\n+        testInstance.testDevice.moduleClient.open();\n+    }\n+\n+    @Before\n+    public void createDevice() throws Exception\n+    {\n+        testInstance.testDevice = new TestDevice();\n+        testInstance.testDevice.deviceId = \"java-twin-PnP-e2e-test-\".concat(UUID.randomUUID().toString());\n+        testInstance.testDevice.moduleId = \"java-twin-PnP-module-e2e-test-\".concat(UUID.randomUUID().toString());\n+\n+        testInstance.deviceForRegistryManager = com.microsoft.azure.sdk.iot.service.Device.createFromId(testInstance.testDevice.deviceId, null, null);\n+        testInstance.deviceForRegistryManager = Tools.addDeviceWithRetry(registryManager, testInstance.deviceForRegistryManager);\n+        testInstance.moduleForRegistryManager = com.microsoft.azure.sdk.iot.service.Module.createFromId(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId,null);\n+        testInstance.moduleForRegistryManager = Tools.addModuleWithRetry(registryManager, testInstance.moduleForRegistryManager);\n+\n+    }\n+\n+    @After\n+    public void destroyDevice() throws Exception\n+    {\n+        if (testInstance.testDevice.deviceClient != null)\n+        {\n+            testInstance.testDevice.deviceClient.closeNow();\n+            testInstance.testDevice.deviceClient = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "originalPosition": 135}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NjMyMDA5", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#pullrequestreview-447632009", "createdAt": "2020-07-13T21:44:31Z", "commit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMTo0NDozMVrOGw6_lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMTo0NDozMVrOGw6_lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MTM4Mw==", "bodyText": "I know you are following the pattern here, but I'd rather this name specified that it is a client. Something like \"twinServiceClient\" or \"twinClient\" instead of \"sCDeviceTwin\"", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453951383", "createdAt": "2020-07-13T21:44:31Z", "author": {"login": "timtay-microsoft"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n+\n+        registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n+\n+        List inputs =  Arrays.asList(\n+                new Object[][]\n+                        {\n+                                {MQTT},\n+                                {MQTT_WS},\n+                        }\n+        );\n+\n+        return inputs;\n+    }\n+\n+    private static class TestDevice\n+    {\n+        String deviceId;\n+        String moduleId;\n+        DeviceClient deviceClient;\n+        ModuleClient moduleClient;\n+    }\n+\n+    public TwinPnPTests.TwinPnPTestInstance testInstance;\n+\n+    public TwinPnPTests(IotHubClientProtocol protocol) throws IOException\n+    {\n+        this.testInstance = new TwinPnPTestInstance(protocol);\n+    }\n+\n+    public class TwinPnPTestInstance\n+    {\n+        public IotHubClientProtocol protocol;\n+        private Device deviceForRegistryManager;\n+        private Module moduleForRegistryManager;\n+\n+        private DeviceTwin sCDeviceTwin;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NjMyNDc4", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#pullrequestreview-447632478", "createdAt": "2020-07-13T21:44:53Z", "commit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMTo0NDo1M1rOGw7AFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMTo0NDo1M1rOGw7AFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MTUxMQ==", "bodyText": "No need to set this to null", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453951511", "createdAt": "2020-07-13T21:44:53Z", "author": {"login": "timtay-microsoft"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n+\n+        registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n+\n+        List inputs =  Arrays.asList(\n+                new Object[][]\n+                        {\n+                                {MQTT},\n+                                {MQTT_WS},\n+                        }\n+        );\n+\n+        return inputs;\n+    }\n+\n+    private static class TestDevice\n+    {\n+        String deviceId;\n+        String moduleId;\n+        DeviceClient deviceClient;\n+        ModuleClient moduleClient;\n+    }\n+\n+    public TwinPnPTests.TwinPnPTestInstance testInstance;\n+\n+    public TwinPnPTests(IotHubClientProtocol protocol) throws IOException\n+    {\n+        this.testInstance = new TwinPnPTestInstance(protocol);\n+    }\n+\n+    public class TwinPnPTestInstance\n+    {\n+        public IotHubClientProtocol protocol;\n+        private Device deviceForRegistryManager;\n+        private Module moduleForRegistryManager;\n+\n+        private DeviceTwin sCDeviceTwin;\n+        private TwinPnPTests.TestDevice testDevice;\n+\n+        public TwinPnPTestInstance(IotHubClientProtocol protocol) throws IOException\n+        {\n+            this.protocol = protocol;\n+            this.sCDeviceTwin = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n+        }\n+    }\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception\n+    {\n+        if (registryManager != null)\n+        {\n+            registryManager.close();\n+            registryManager = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "originalPosition": 100}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e85afa5f34386a4d642e8be147fe951ce67a1b80", "author": {"user": {"login": "bikamani", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/e85afa5f34386a4d642e8be147fe951ce67a1b80", "committedDate": "2020-07-13T21:45:04Z", "message": "move test category"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NjMyODIw", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#pullrequestreview-447632820", "createdAt": "2020-07-13T21:45:22Z", "commit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMTo0NToyMlrOGw7BRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMTo0NToyMlrOGw7BRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MTgxMw==", "bodyText": "What is this variable for?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453951813", "createdAt": "2020-07-13T21:45:22Z", "author": {"login": "prmathur-microsoft"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NjM0MTM3", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#pullrequestreview-447634137", "createdAt": "2020-07-13T21:47:54Z", "commit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMTo0Nzo1NFrOGw7Ijg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMTo0Nzo1NFrOGw7Ijg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MzY3OA==", "bodyText": "are we using this for something?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453953678", "createdAt": "2020-07-13T21:47:54Z", "author": {"login": "vinagesh"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NjM0Mzk1", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#pullrequestreview-447634395", "createdAt": "2020-07-13T21:48:24Z", "commit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMTo0ODoyNFrOGw7J4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMTo0ODoyNFrOGw7J4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1NDAxOA==", "bodyText": "Can model id come from constant?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453954018", "createdAt": "2020-07-13T21:48:24Z", "author": {"login": "prmathur-microsoft"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aece97b0f24a000ead03751f8c10f430a1c40ccb", "author": {"user": {"login": "bikamani", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/aece97b0f24a000ead03751f8c10f430a1c40ccb", "committedDate": "2020-07-13T21:56:27Z", "message": "remove unnecessary code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac295fdcf0b05e7cd168e24715fdd295b6f29a8e", "author": {"user": {"login": "bikamani", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/ac295fdcf0b05e7cd168e24715fdd295b6f29a8e", "committedDate": "2020-07-14T23:49:12Z", "message": "add more test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fb867e24a53e98acf0c695aa145a003da8b89f1", "author": {"user": {"login": "bikamani", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/1fb867e24a53e98acf0c695aa145a003da8b89f1", "committedDate": "2020-07-14T23:51:51Z", "message": "remove conditions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cc534392e7a1a58596b826e5e80b58e2cfa7ea6", "author": {"user": {"login": "bikamani", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/5cc534392e7a1a58596b826e5e80b58e2cfa7ea6", "committedDate": "2020-07-14T23:52:46Z", "message": "add module clients"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MjA2NjI0", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#pullrequestreview-449206624", "createdAt": "2020-07-15T18:05:02Z", "commit": {"oid": "5cc534392e7a1a58596b826e5e80b58e2cfa7ea6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxODowNTowMlrOGyJx-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxODowNTowMlrOGyJx-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI0MjIzNA==", "bodyText": "if basic hub, will none of the tests work?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r455242234", "createdAt": "2020-07-15T18:05:02Z", "author": {"login": "vinagesh"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,234 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.service.BaseDevice;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.auth.AuthenticationType;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.*;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+\n+import javax.net.ssl.SSLContext;\n+import java.io.IOException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static com.microsoft.azure.sdk.iot.service.auth.AuthenticationType.SAS;\n+import static com.microsoft.azure.sdk.iot.service.auth.AuthenticationType.SELF_SIGNED;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@StandardTierHubOnlyTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private String ModelId;\n+\n+    @Parameterized.Parameters(name = \"{0}_{1}_{2}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+\n+        registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n+\n+        X509CertificateGenerator certificateGenerator = new X509CertificateGenerator();\n+        String publicKeyCert = certificateGenerator.getPublicCertificate();\n+        String privateKey = certificateGenerator.getPrivateKey();\n+        String x509Thumbprint = certificateGenerator.getX509Thumbprint();\n+\n+        List inputs = new ArrayList();\n+        inputs.addAll(Arrays.asList(\n+                new Object[][]\n+                        {\n+                                //sas token device client, no proxy\n+                                {MQTT, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+                                {MQTT_WS, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                //x509 device client, no proxy\n+                                {MQTT, SELF_SIGNED, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                //sas token device client, with proxy\n+                                {MQTT_WS, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+                        }\n+        ));\n+\n+        if (!isBasicTierHub)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cc534392e7a1a58596b826e5e80b58e2cfa7ea6"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MjEwMjYw", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#pullrequestreview-449210260", "createdAt": "2020-07-15T18:10:04Z", "commit": {"oid": "5cc534392e7a1a58596b826e5e80b58e2cfa7ea6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1756, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}