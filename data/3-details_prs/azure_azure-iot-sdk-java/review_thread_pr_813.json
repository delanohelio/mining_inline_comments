{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MDQxMjY5", "number": 813, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTozMzoyMVrOEGfTHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTozMzoyMVrOEGfTHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjM5NzEwOnYy", "diffSide": "RIGHT", "path": "device/iot-device-samples/send-event-x509/src/main/java/samples/com/microsoft/azure/sdk/iot/SSLContextBuilder.java", "isResolved": false, "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTozMzoyMVrOGlUdJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMjo0ODowMlrOGlZ5hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4NTYzOA==", "bodyText": "is the use-case here - devices that don't have the root certificates (digicert, baltimore etc) installed on their device, but need to trust those certs?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/813#discussion_r441785638", "createdAt": "2020-06-17T19:33:21Z", "author": {"login": "abhipsaMisra"}, "path": "device/iot-device-samples/send-event-x509/src/main/java/samples/com/microsoft/azure/sdk/iot/SSLContextBuilder.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ *  Copyright (c) Microsoft. All rights reserved.\n+ *  Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+ */\n+\n+package samples.com.microsoft.azure.sdk.iot;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManagerFactory;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.security.*;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.security.interfaces.RSAPrivateKey;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.UUID;\n+\n+/**\n+ * Helper class that demonstrates how to build an SSLContext for x509 authentication from your public and private certificates,\n+ * or how to build an SSLContext for SAS authentication from the default IoT Hub public certificates", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dcc2676c508bf6d893e86ff0078c1dcf7738259"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc5MjA5OQ==", "bodyText": "For SAS based auth? Yes. Users of this SDK always have to have their SSLContext trust iothub's certs. This isn't something that the JVM just picks up from the physical device's certificate store", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/813#discussion_r441792099", "createdAt": "2020-06-17T19:46:01Z", "author": {"login": "timtay-microsoft"}, "path": "device/iot-device-samples/send-event-x509/src/main/java/samples/com/microsoft/azure/sdk/iot/SSLContextBuilder.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ *  Copyright (c) Microsoft. All rights reserved.\n+ *  Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+ */\n+\n+package samples.com.microsoft.azure.sdk.iot;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManagerFactory;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.security.*;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.security.interfaces.RSAPrivateKey;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.UUID;\n+\n+/**\n+ * Helper class that demonstrates how to build an SSLContext for x509 authentication from your public and private certificates,\n+ * or how to build an SSLContext for SAS authentication from the default IoT Hub public certificates", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4NTYzOA=="}, "originalCommit": {"oid": "8dcc2676c508bf6d893e86ff0078c1dcf7738259"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc5MjQ4OA==", "bodyText": "For x509 auth, you would need to load the iothub public cert, your device's public cert, and your device's private key when building the SSLContext", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/813#discussion_r441792488", "createdAt": "2020-06-17T19:46:49Z", "author": {"login": "timtay-microsoft"}, "path": "device/iot-device-samples/send-event-x509/src/main/java/samples/com/microsoft/azure/sdk/iot/SSLContextBuilder.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ *  Copyright (c) Microsoft. All rights reserved.\n+ *  Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+ */\n+\n+package samples.com.microsoft.azure.sdk.iot;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManagerFactory;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.security.*;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.security.interfaces.RSAPrivateKey;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.UUID;\n+\n+/**\n+ * Helper class that demonstrates how to build an SSLContext for x509 authentication from your public and private certificates,\n+ * or how to build an SSLContext for SAS authentication from the default IoT Hub public certificates", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4NTYzOA=="}, "originalCommit": {"oid": "8dcc2676c508bf6d893e86ff0078c1dcf7738259"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc5NDgyNw==", "bodyText": "Users of this SDK always have to have their SSLContext trust iothub's certs. This isn't something that the JVM just picks up from the physical device's certificate store\n\nSo this is something mandatory that needs to be passed by the users, and set by the SDK for every single TLS negotiation that the SDK will execute. In that case, why isn't SSLContext a mandatory argument?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/813#discussion_r441794827", "createdAt": "2020-06-17T19:50:58Z", "author": {"login": "abhipsaMisra"}, "path": "device/iot-device-samples/send-event-x509/src/main/java/samples/com/microsoft/azure/sdk/iot/SSLContextBuilder.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ *  Copyright (c) Microsoft. All rights reserved.\n+ *  Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+ */\n+\n+package samples.com.microsoft.azure.sdk.iot;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManagerFactory;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.security.*;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.security.interfaces.RSAPrivateKey;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.UUID;\n+\n+/**\n+ * Helper class that demonstrates how to build an SSLContext for x509 authentication from your public and private certificates,\n+ * or how to build an SSLContext for SAS authentication from the default IoT Hub public certificates", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4NTYzOA=="}, "originalCommit": {"oid": "8dcc2676c508bf6d893e86ff0078c1dcf7738259"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgzNTEwMg==", "bodyText": "It's mandatory for establishing a connection to Iot hub, regardless of if it is x509 or SAS authentication. For SAS cases, the SDK can just build the SSLContext for the user which makes it optional at the constructor level", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/813#discussion_r441835102", "createdAt": "2020-06-17T21:07:47Z", "author": {"login": "timtay-microsoft"}, "path": "device/iot-device-samples/send-event-x509/src/main/java/samples/com/microsoft/azure/sdk/iot/SSLContextBuilder.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ *  Copyright (c) Microsoft. All rights reserved.\n+ *  Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+ */\n+\n+package samples.com.microsoft.azure.sdk.iot;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManagerFactory;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.security.*;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.security.interfaces.RSAPrivateKey;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.UUID;\n+\n+/**\n+ * Helper class that demonstrates how to build an SSLContext for x509 authentication from your public and private certificates,\n+ * or how to build an SSLContext for SAS authentication from the default IoT Hub public certificates", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4NTYzOA=="}, "originalCommit": {"oid": "8dcc2676c508bf6d893e86ff0078c1dcf7738259"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgzOTM3OQ==", "bodyText": "ok, so for sas based authentication, what is the use-case for the customer wanting to pass this SSLContext to the SDK?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/813#discussion_r441839379", "createdAt": "2020-06-17T21:16:53Z", "author": {"login": "abhipsaMisra"}, "path": "device/iot-device-samples/send-event-x509/src/main/java/samples/com/microsoft/azure/sdk/iot/SSLContextBuilder.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ *  Copyright (c) Microsoft. All rights reserved.\n+ *  Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+ */\n+\n+package samples.com.microsoft.azure.sdk.iot;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManagerFactory;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.security.*;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.security.interfaces.RSAPrivateKey;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.UUID;\n+\n+/**\n+ * Helper class that demonstrates how to build an SSLContext for x509 authentication from your public and private certificates,\n+ * or how to build an SSLContext for SAS authentication from the default IoT Hub public certificates", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4NTYzOA=="}, "originalCommit": {"oid": "8dcc2676c508bf6d893e86ff0078c1dcf7738259"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg0NzQ0OA==", "bodyText": "Perhaps they have some gateway set up between the SDK and IoT Hub and they need to trust more machines than just the iothub. Or perhaps they need to configure the TLS handshake to use a different version or something. I don't know of any customer's making use of these options, but they are there for general flexibility", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/813#discussion_r441847448", "createdAt": "2020-06-17T21:34:45Z", "author": {"login": "timtay-microsoft"}, "path": "device/iot-device-samples/send-event-x509/src/main/java/samples/com/microsoft/azure/sdk/iot/SSLContextBuilder.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ *  Copyright (c) Microsoft. All rights reserved.\n+ *  Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+ */\n+\n+package samples.com.microsoft.azure.sdk.iot;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManagerFactory;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.security.*;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.security.interfaces.RSAPrivateKey;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.UUID;\n+\n+/**\n+ * Helper class that demonstrates how to build an SSLContext for x509 authentication from your public and private certificates,\n+ * or how to build an SSLContext for SAS authentication from the default IoT Hub public certificates", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4NTYzOA=="}, "originalCommit": {"oid": "8dcc2676c508bf6d893e86ff0078c1dcf7738259"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg2MTg2NA==", "bodyText": "Makes sense. I would add the note in comments for ClientOptions.SSLConext that the SDK will automatically create an SSL context to trust IoT hub certs, and if they pass in their custom SSLContext instance, they need to make sure to add IoT Hub's certificate info in there.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/813#discussion_r441861864", "createdAt": "2020-06-17T22:09:51Z", "author": {"login": "abhipsaMisra"}, "path": "device/iot-device-samples/send-event-x509/src/main/java/samples/com/microsoft/azure/sdk/iot/SSLContextBuilder.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ *  Copyright (c) Microsoft. All rights reserved.\n+ *  Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+ */\n+\n+package samples.com.microsoft.azure.sdk.iot;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManagerFactory;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.security.*;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.security.interfaces.RSAPrivateKey;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.UUID;\n+\n+/**\n+ * Helper class that demonstrates how to build an SSLContext for x509 authentication from your public and private certificates,\n+ * or how to build an SSLContext for SAS authentication from the default IoT Hub public certificates", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4NTYzOA=="}, "originalCommit": {"oid": "8dcc2676c508bf6d893e86ff0078c1dcf7738259"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg2MjU1MA==", "bodyText": "So now a different question - the certs info that I see below in the sample, are these the public key info? How does the actual negotiation take place if the JVM cannot look up private key info in my device's certificate store/ I don't have the private key info for these certs?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/813#discussion_r441862550", "createdAt": "2020-06-17T22:11:50Z", "author": {"login": "abhipsaMisra"}, "path": "device/iot-device-samples/send-event-x509/src/main/java/samples/com/microsoft/azure/sdk/iot/SSLContextBuilder.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ *  Copyright (c) Microsoft. All rights reserved.\n+ *  Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+ */\n+\n+package samples.com.microsoft.azure.sdk.iot;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManagerFactory;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.security.*;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.security.interfaces.RSAPrivateKey;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.UUID;\n+\n+/**\n+ * Helper class that demonstrates how to build an SSLContext for x509 authentication from your public and private certificates,\n+ * or how to build an SSLContext for SAS authentication from the default IoT Hub public certificates", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4NTYzOA=="}, "originalCommit": {"oid": "8dcc2676c508bf6d893e86ff0078c1dcf7738259"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg3NDA3OQ==", "bodyText": "Good idea. I'll add a note to that effect in the javadoc for the clientOptions.sslContext", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/813#discussion_r441874079", "createdAt": "2020-06-17T22:45:33Z", "author": {"login": "timtay-microsoft"}, "path": "device/iot-device-samples/send-event-x509/src/main/java/samples/com/microsoft/azure/sdk/iot/SSLContextBuilder.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ *  Copyright (c) Microsoft. All rights reserved.\n+ *  Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+ */\n+\n+package samples.com.microsoft.azure.sdk.iot;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManagerFactory;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.security.*;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.security.interfaces.RSAPrivateKey;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.UUID;\n+\n+/**\n+ * Helper class that demonstrates how to build an SSLContext for x509 authentication from your public and private certificates,\n+ * or how to build an SSLContext for SAS authentication from the default IoT Hub public certificates", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4NTYzOA=="}, "originalCommit": {"oid": "8dcc2676c508bf6d893e86ff0078c1dcf7738259"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg3NDgyMg==", "bodyText": "The certs in the sample code's SSLContextBuilder class are indeed IoT Hub's public certificates. All SSLcontexts used must trust those certs to communicate with IoT Hub.\nThe user has to load their certs into the SSLContext from file or from string. Once that instance of SSLContext has the iothub public cert, their device's private key, and their device's public cert, then the SSL handshake will work for x509 auth.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/813#discussion_r441874822", "createdAt": "2020-06-17T22:48:02Z", "author": {"login": "timtay-microsoft"}, "path": "device/iot-device-samples/send-event-x509/src/main/java/samples/com/microsoft/azure/sdk/iot/SSLContextBuilder.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ *  Copyright (c) Microsoft. All rights reserved.\n+ *  Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+ */\n+\n+package samples.com.microsoft.azure.sdk.iot;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManagerFactory;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.security.*;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.security.interfaces.RSAPrivateKey;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.UUID;\n+\n+/**\n+ * Helper class that demonstrates how to build an SSLContext for x509 authentication from your public and private certificates,\n+ * or how to build an SSLContext for SAS authentication from the default IoT Hub public certificates", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4NTYzOA=="}, "originalCommit": {"oid": "8dcc2676c508bf6d893e86ff0078c1dcf7738259"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2841, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}