{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzOTI1NjA4", "number": 808, "title": "feat(iot-dev): Deprecate existing upload to blob APIs in favor of more granular APIs", "bodyText": "Customers should be free to use whatever version of the Azure Storage SDK that they want, and to configure it however they want. Because of that, the existing file upload API has been split into the three service calls: Get SAS uri from Iot Hub, upload to Azure Storage blob using iothub provided credentials, and then notify Iot hub that a file upload has completed.\nSame as the recent effort on C# SDK that can be seen here: Azure/azure-iot-sdk-csharp#1403", "createdAt": "2020-06-12T23:50:21Z", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/808", "merged": true, "mergeCommit": {"oid": "54769d2373fda4281207d77c6ec33d3623e46252"}, "closed": true, "closedAt": "2020-06-15T22:36:27Z", "author": {"login": "timtay-microsoft"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcqrtaGgH2gAyNDMzOTI1NjA4OjViNDkwMmE5YmU5ODRlMzYwMGM4NWU2OTYzOWFjODE1NGM0Mjc5OGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcrmMJQgH2gAyNDMzOTI1NjA4OjZkYzlmNjg5MDI1MTI2MzhmNjZmMmJkZmJlMGU3NWEzOGYyNzA2MjY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5b4902a9be984e3600c85e69639ac8154c42798b", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/5b4902a9be984e3600c85e69639ac8154c42798b", "committedDate": "2020-06-12T23:46:25Z", "message": "feat(iot-dev): Deprecate existing upload to blob APIs in favor of more granular APIs\n\nCustomers should be free to use whatever version of the Azure Storage SDK that they want, and to configure it however they want. Because of that, the existing file upload API has been split into the three service calls: Get SAS uri from Iot Hub, upload to Azure Storage blob using iothub provided credentials, and then notify Iot hub that a file upload has completed."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bcf8efa92b97c544ae70ab4024918754468de8c", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/9bcf8efa92b97c544ae70ab4024918754468de8c", "committedDate": "2020-06-12T23:50:27Z", "message": "Merge branch 'master' into timtay/fileUpload"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9a479958bc470ec11a09d6a9a5f366c3f832c5a", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/f9a479958bc470ec11a09d6a9a5f366c3f832c5a", "committedDate": "2020-06-13T00:21:22Z", "message": "squash"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMzQ2MTI4", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/808#pullrequestreview-430346128", "createdAt": "2020-06-15T06:13:12Z", "commit": {"oid": "f9a479958bc470ec11a09d6a9a5f366c3f832c5a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjoxMzoxMlrOGjkYVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjoxMzoxMlrOGjkYVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk0OTM5OA==", "bodyText": "Comment says the method return the new job. Method signature does not not return anything.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/808#discussion_r439949398", "createdAt": "2020-06-15T06:13:12Z", "author": {"login": "barustum"}, "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/serializer/FileUploadCompletionNotification.java", "diffHunk": "@@ -0,0 +1,195 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.deps.serializer;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * The request payload to send to IoT Hub to notify it when a file upload is completed, whether successful or not.\n+ * Must set {@link #setSuccess(Boolean)} and {@link #setCorrelationId(String)}, but all other fields are optional.\n+ */\n+public class FileUploadCompletionNotification\n+{\n+    private static final String CORRELATION_ID_TAG = \"correlationId\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(CORRELATION_ID_TAG)\n+    private String correlationId = null;\n+\n+    private static final String IS_SUCCESS_TAG = \"isSuccess\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(IS_SUCCESS_TAG)\n+    private Boolean isSuccess = null;\n+\n+    private static final String STATUS_CODE_TAG = \"statusCode\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_CODE_TAG)\n+    private Integer statusCode = null;\n+\n+    private static final String STATUS_DESCRIPTION_TAG = \"statusDescription\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_DESCRIPTION_TAG)\n+    private String statusDescription = null;\n+\n+    /**\n+     * Create an instance of the FileUploadCompletionNotification for a single file upload operation using Azure Storage.\n+     *\n+     * @param correlationId the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     *                      for this upload from IoT Hub. This field is mandatory. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param isSuccess whether the file was uploaded successfully. This field is mandatory.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    public FileUploadCompletionNotification(String correlationId, Boolean isSuccess)\n+            throws IllegalArgumentException\n+    {\n+        setCorrelationId(correlationId);\n+        updateStatus(isSuccess, statusCode, statusDescription);\n+    }\n+\n+    /**\n+     * Create an instance of the FileUploadCompletionNotification for a single file upload operation using Azure Storage.\n+     *\n+     * @param correlationId the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     *                      for this upload from IoT Hub. This field is mandatory. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param isSuccess whether the file was uploaded successfully. This field is mandatory.\n+     * @param statusCode is the status for the upload of the file to storage.\n+     * @param statusDescription is the description of the status code.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    public FileUploadCompletionNotification(String correlationId, Boolean isSuccess, Integer statusCode, String statusDescription)\n+            throws IllegalArgumentException\n+    {\n+        setCorrelationId(correlationId);\n+        updateStatus(isSuccess, statusCode, statusDescription);\n+    }\n+\n+    /**\n+     * Construct this notification with json\n+     * @param json the json to parse.\n+     */\n+    public FileUploadCompletionNotification(String json)\n+    {\n+        Gson gson = new GsonBuilder().disableHtmlEscaping().serializeNulls().create();\n+        FileUploadCompletionNotification fileUploadCompletionNotification;\n+\n+        try\n+        {\n+            fileUploadCompletionNotification = gson.fromJson(json, FileUploadCompletionNotification.class);\n+        }\n+        catch (Exception malformed)\n+        {\n+            throw new IllegalArgumentException(\"Malformed json:\" + malformed);\n+        }\n+\n+        this.correlationId = fileUploadCompletionNotification.getCorrelationId();\n+        this.isSuccess = fileUploadCompletionNotification.getSuccess();\n+        this.statusCode = fileUploadCompletionNotification.getStatusCode();\n+        this.statusDescription = fileUploadCompletionNotification.getStatusDescription();\n+    }\n+\n+    /**\n+     * Update the status information in the collection, and return the new json.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9a479958bc470ec11a09d6a9a5f366c3f832c5a"}, "originalPosition": 94}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMzQ3MjQ2", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/808#pullrequestreview-430347246", "createdAt": "2020-06-15T06:15:55Z", "commit": {"oid": "f9a479958bc470ec11a09d6a9a5f366c3f832c5a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjoxNTo1NVrOGjkbvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjoxNTo1NVrOGjkbvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1MDI3MA==", "bodyText": "Nothing is thrown in this method.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/808#discussion_r439950270", "createdAt": "2020-06-15T06:15:55Z", "author": {"login": "barustum"}, "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/serializer/FileUploadCompletionNotification.java", "diffHunk": "@@ -0,0 +1,195 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.deps.serializer;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * The request payload to send to IoT Hub to notify it when a file upload is completed, whether successful or not.\n+ * Must set {@link #setSuccess(Boolean)} and {@link #setCorrelationId(String)}, but all other fields are optional.\n+ */\n+public class FileUploadCompletionNotification\n+{\n+    private static final String CORRELATION_ID_TAG = \"correlationId\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(CORRELATION_ID_TAG)\n+    private String correlationId = null;\n+\n+    private static final String IS_SUCCESS_TAG = \"isSuccess\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(IS_SUCCESS_TAG)\n+    private Boolean isSuccess = null;\n+\n+    private static final String STATUS_CODE_TAG = \"statusCode\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_CODE_TAG)\n+    private Integer statusCode = null;\n+\n+    private static final String STATUS_DESCRIPTION_TAG = \"statusDescription\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_DESCRIPTION_TAG)\n+    private String statusDescription = null;\n+\n+    /**\n+     * Create an instance of the FileUploadCompletionNotification for a single file upload operation using Azure Storage.\n+     *\n+     * @param correlationId the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     *                      for this upload from IoT Hub. This field is mandatory. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param isSuccess whether the file was uploaded successfully. This field is mandatory.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    public FileUploadCompletionNotification(String correlationId, Boolean isSuccess)\n+            throws IllegalArgumentException\n+    {\n+        setCorrelationId(correlationId);\n+        updateStatus(isSuccess, statusCode, statusDescription);\n+    }\n+\n+    /**\n+     * Create an instance of the FileUploadCompletionNotification for a single file upload operation using Azure Storage.\n+     *\n+     * @param correlationId the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     *                      for this upload from IoT Hub. This field is mandatory. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param isSuccess whether the file was uploaded successfully. This field is mandatory.\n+     * @param statusCode is the status for the upload of the file to storage.\n+     * @param statusDescription is the description of the status code.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    public FileUploadCompletionNotification(String correlationId, Boolean isSuccess, Integer statusCode, String statusDescription)\n+            throws IllegalArgumentException\n+    {\n+        setCorrelationId(correlationId);\n+        updateStatus(isSuccess, statusCode, statusDescription);\n+    }\n+\n+    /**\n+     * Construct this notification with json\n+     * @param json the json to parse.\n+     */\n+    public FileUploadCompletionNotification(String json)\n+    {\n+        Gson gson = new GsonBuilder().disableHtmlEscaping().serializeNulls().create();\n+        FileUploadCompletionNotification fileUploadCompletionNotification;\n+\n+        try\n+        {\n+            fileUploadCompletionNotification = gson.fromJson(json, FileUploadCompletionNotification.class);\n+        }\n+        catch (Exception malformed)\n+        {\n+            throw new IllegalArgumentException(\"Malformed json:\" + malformed);\n+        }\n+\n+        this.correlationId = fileUploadCompletionNotification.getCorrelationId();\n+        this.isSuccess = fileUploadCompletionNotification.getSuccess();\n+        this.statusCode = fileUploadCompletionNotification.getStatusCode();\n+        this.statusDescription = fileUploadCompletionNotification.getStatusDescription();\n+    }\n+\n+    /**\n+     * Update the status information in the collection, and return the new json.\n+     *\n+     * @param isSuccess is a Boolean representing whether the file was uploaded successfully.\n+     * @param statusCode is the status for the upload of the file to storage.\n+     * @param statusDescription is the description of the status code.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    private void updateStatus(Boolean isSuccess, Integer statusCode, String statusDescription) throws IllegalArgumentException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9a479958bc470ec11a09d6a9a5f366c3f832c5a"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMzQ5MTgw", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/808#pullrequestreview-430349180", "createdAt": "2020-06-15T06:20:46Z", "commit": {"oid": "f9a479958bc470ec11a09d6a9a5f366c3f832c5a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjoyMDo0NlrOGjkiBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjoyMDo0NlrOGjkiBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1MTg3OQ==", "bodyText": "'to' a valid json.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/808#discussion_r439951879", "createdAt": "2020-06-15T06:20:46Z", "author": {"login": "barustum"}, "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/serializer/FileUploadCompletionNotification.java", "diffHunk": "@@ -0,0 +1,195 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.deps.serializer;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * The request payload to send to IoT Hub to notify it when a file upload is completed, whether successful or not.\n+ * Must set {@link #setSuccess(Boolean)} and {@link #setCorrelationId(String)}, but all other fields are optional.\n+ */\n+public class FileUploadCompletionNotification\n+{\n+    private static final String CORRELATION_ID_TAG = \"correlationId\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(CORRELATION_ID_TAG)\n+    private String correlationId = null;\n+\n+    private static final String IS_SUCCESS_TAG = \"isSuccess\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(IS_SUCCESS_TAG)\n+    private Boolean isSuccess = null;\n+\n+    private static final String STATUS_CODE_TAG = \"statusCode\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_CODE_TAG)\n+    private Integer statusCode = null;\n+\n+    private static final String STATUS_DESCRIPTION_TAG = \"statusDescription\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_DESCRIPTION_TAG)\n+    private String statusDescription = null;\n+\n+    /**\n+     * Create an instance of the FileUploadCompletionNotification for a single file upload operation using Azure Storage.\n+     *\n+     * @param correlationId the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     *                      for this upload from IoT Hub. This field is mandatory. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param isSuccess whether the file was uploaded successfully. This field is mandatory.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    public FileUploadCompletionNotification(String correlationId, Boolean isSuccess)\n+            throws IllegalArgumentException\n+    {\n+        setCorrelationId(correlationId);\n+        updateStatus(isSuccess, statusCode, statusDescription);\n+    }\n+\n+    /**\n+     * Create an instance of the FileUploadCompletionNotification for a single file upload operation using Azure Storage.\n+     *\n+     * @param correlationId the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     *                      for this upload from IoT Hub. This field is mandatory. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param isSuccess whether the file was uploaded successfully. This field is mandatory.\n+     * @param statusCode is the status for the upload of the file to storage.\n+     * @param statusDescription is the description of the status code.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    public FileUploadCompletionNotification(String correlationId, Boolean isSuccess, Integer statusCode, String statusDescription)\n+            throws IllegalArgumentException\n+    {\n+        setCorrelationId(correlationId);\n+        updateStatus(isSuccess, statusCode, statusDescription);\n+    }\n+\n+    /**\n+     * Construct this notification with json\n+     * @param json the json to parse.\n+     */\n+    public FileUploadCompletionNotification(String json)\n+    {\n+        Gson gson = new GsonBuilder().disableHtmlEscaping().serializeNulls().create();\n+        FileUploadCompletionNotification fileUploadCompletionNotification;\n+\n+        try\n+        {\n+            fileUploadCompletionNotification = gson.fromJson(json, FileUploadCompletionNotification.class);\n+        }\n+        catch (Exception malformed)\n+        {\n+            throw new IllegalArgumentException(\"Malformed json:\" + malformed);\n+        }\n+\n+        this.correlationId = fileUploadCompletionNotification.getCorrelationId();\n+        this.isSuccess = fileUploadCompletionNotification.getSuccess();\n+        this.statusCode = fileUploadCompletionNotification.getStatusCode();\n+        this.statusDescription = fileUploadCompletionNotification.getStatusDescription();\n+    }\n+\n+    /**\n+     * Update the status information in the collection, and return the new json.\n+     *\n+     * @param isSuccess is a Boolean representing whether the file was uploaded successfully.\n+     * @param statusCode is the status for the upload of the file to storage.\n+     * @param statusDescription is the description of the status code.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    private void updateStatus(Boolean isSuccess, Integer statusCode, String statusDescription) throws IllegalArgumentException\n+    {\n+        this.isSuccess = isSuccess;\n+        this.statusCode = statusCode;\n+        this.statusDescription = statusDescription;\n+    }\n+\n+    /**\n+     * Convert this class in a valid json.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9a479958bc470ec11a09d6a9a5f366c3f832c5a"}, "originalPosition": 109}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMzUwMjY2", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/808#pullrequestreview-430350266", "createdAt": "2020-06-15T06:23:24Z", "commit": {"oid": "f9a479958bc470ec11a09d6a9a5f366c3f832c5a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjoyMzoyNFrOGjkljg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjoyMzoyNFrOGjkljg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1Mjc4Mg==", "bodyText": "Seems like this description describes the API and not the return value. Maybe remove the 'Get'?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/808#discussion_r439952782", "createdAt": "2020-06-15T06:23:24Z", "author": {"login": "barustum"}, "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/serializer/FileUploadCompletionNotification.java", "diffHunk": "@@ -0,0 +1,195 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.deps.serializer;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * The request payload to send to IoT Hub to notify it when a file upload is completed, whether successful or not.\n+ * Must set {@link #setSuccess(Boolean)} and {@link #setCorrelationId(String)}, but all other fields are optional.\n+ */\n+public class FileUploadCompletionNotification\n+{\n+    private static final String CORRELATION_ID_TAG = \"correlationId\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(CORRELATION_ID_TAG)\n+    private String correlationId = null;\n+\n+    private static final String IS_SUCCESS_TAG = \"isSuccess\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(IS_SUCCESS_TAG)\n+    private Boolean isSuccess = null;\n+\n+    private static final String STATUS_CODE_TAG = \"statusCode\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_CODE_TAG)\n+    private Integer statusCode = null;\n+\n+    private static final String STATUS_DESCRIPTION_TAG = \"statusDescription\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_DESCRIPTION_TAG)\n+    private String statusDescription = null;\n+\n+    /**\n+     * Create an instance of the FileUploadCompletionNotification for a single file upload operation using Azure Storage.\n+     *\n+     * @param correlationId the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     *                      for this upload from IoT Hub. This field is mandatory. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param isSuccess whether the file was uploaded successfully. This field is mandatory.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    public FileUploadCompletionNotification(String correlationId, Boolean isSuccess)\n+            throws IllegalArgumentException\n+    {\n+        setCorrelationId(correlationId);\n+        updateStatus(isSuccess, statusCode, statusDescription);\n+    }\n+\n+    /**\n+     * Create an instance of the FileUploadCompletionNotification for a single file upload operation using Azure Storage.\n+     *\n+     * @param correlationId the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     *                      for this upload from IoT Hub. This field is mandatory. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param isSuccess whether the file was uploaded successfully. This field is mandatory.\n+     * @param statusCode is the status for the upload of the file to storage.\n+     * @param statusDescription is the description of the status code.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    public FileUploadCompletionNotification(String correlationId, Boolean isSuccess, Integer statusCode, String statusDescription)\n+            throws IllegalArgumentException\n+    {\n+        setCorrelationId(correlationId);\n+        updateStatus(isSuccess, statusCode, statusDescription);\n+    }\n+\n+    /**\n+     * Construct this notification with json\n+     * @param json the json to parse.\n+     */\n+    public FileUploadCompletionNotification(String json)\n+    {\n+        Gson gson = new GsonBuilder().disableHtmlEscaping().serializeNulls().create();\n+        FileUploadCompletionNotification fileUploadCompletionNotification;\n+\n+        try\n+        {\n+            fileUploadCompletionNotification = gson.fromJson(json, FileUploadCompletionNotification.class);\n+        }\n+        catch (Exception malformed)\n+        {\n+            throw new IllegalArgumentException(\"Malformed json:\" + malformed);\n+        }\n+\n+        this.correlationId = fileUploadCompletionNotification.getCorrelationId();\n+        this.isSuccess = fileUploadCompletionNotification.getSuccess();\n+        this.statusCode = fileUploadCompletionNotification.getStatusCode();\n+        this.statusDescription = fileUploadCompletionNotification.getStatusDescription();\n+    }\n+\n+    /**\n+     * Update the status information in the collection, and return the new json.\n+     *\n+     * @param isSuccess is a Boolean representing whether the file was uploaded successfully.\n+     * @param statusCode is the status for the upload of the file to storage.\n+     * @param statusDescription is the description of the status code.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    private void updateStatus(Boolean isSuccess, Integer statusCode, String statusDescription) throws IllegalArgumentException\n+    {\n+        this.isSuccess = isSuccess;\n+        this.statusCode = statusCode;\n+        this.statusDescription = statusDescription;\n+    }\n+\n+    /**\n+     * Convert this class in a valid json.\n+     *\n+     * @return a valid json that represents the content of this class.\n+     */\n+    public String toJson()\n+    {\n+        Gson gson = new GsonBuilder().disableHtmlEscaping().serializeNulls().create();\n+\n+        return gson.toJson(this);\n+    }\n+\n+    /**\n+     * Set the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     * for this upload from IoT Hub. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param correlationId the unique identifier that correlates this file upload status to a SAS URI that IoT Hub retreived from Azure Storage earlier.\n+     */\n+    public void setCorrelationId(String correlationId)\n+    {\n+        this.correlationId = correlationId;\n+    }\n+\n+    /**\n+     * @return Get the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9a479958bc470ec11a09d6a9a5f366c3f832c5a"}, "originalPosition": 131}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMzUxNDI2", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/808#pullrequestreview-430351426", "createdAt": "2020-06-15T06:26:00Z", "commit": {"oid": "f9a479958bc470ec11a09d6a9a5f366c3f832c5a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjoyNjowMVrOGjkpAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjoyNjowMVrOGjkpAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1MzY2NQ==", "bodyText": "do you need a @SuppressWarnings(\"unused\") for this constructor?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/808#discussion_r439953665", "createdAt": "2020-06-15T06:26:01Z", "author": {"login": "barustum"}, "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/serializer/FileUploadCompletionNotification.java", "diffHunk": "@@ -0,0 +1,195 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.deps.serializer;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * The request payload to send to IoT Hub to notify it when a file upload is completed, whether successful or not.\n+ * Must set {@link #setSuccess(Boolean)} and {@link #setCorrelationId(String)}, but all other fields are optional.\n+ */\n+public class FileUploadCompletionNotification\n+{\n+    private static final String CORRELATION_ID_TAG = \"correlationId\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(CORRELATION_ID_TAG)\n+    private String correlationId = null;\n+\n+    private static final String IS_SUCCESS_TAG = \"isSuccess\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(IS_SUCCESS_TAG)\n+    private Boolean isSuccess = null;\n+\n+    private static final String STATUS_CODE_TAG = \"statusCode\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_CODE_TAG)\n+    private Integer statusCode = null;\n+\n+    private static final String STATUS_DESCRIPTION_TAG = \"statusDescription\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_DESCRIPTION_TAG)\n+    private String statusDescription = null;\n+\n+    /**\n+     * Create an instance of the FileUploadCompletionNotification for a single file upload operation using Azure Storage.\n+     *\n+     * @param correlationId the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     *                      for this upload from IoT Hub. This field is mandatory. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param isSuccess whether the file was uploaded successfully. This field is mandatory.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    public FileUploadCompletionNotification(String correlationId, Boolean isSuccess)\n+            throws IllegalArgumentException\n+    {\n+        setCorrelationId(correlationId);\n+        updateStatus(isSuccess, statusCode, statusDescription);\n+    }\n+\n+    /**\n+     * Create an instance of the FileUploadCompletionNotification for a single file upload operation using Azure Storage.\n+     *\n+     * @param correlationId the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     *                      for this upload from IoT Hub. This field is mandatory. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param isSuccess whether the file was uploaded successfully. This field is mandatory.\n+     * @param statusCode is the status for the upload of the file to storage.\n+     * @param statusDescription is the description of the status code.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    public FileUploadCompletionNotification(String correlationId, Boolean isSuccess, Integer statusCode, String statusDescription)\n+            throws IllegalArgumentException\n+    {\n+        setCorrelationId(correlationId);\n+        updateStatus(isSuccess, statusCode, statusDescription);\n+    }\n+\n+    /**\n+     * Construct this notification with json\n+     * @param json the json to parse.\n+     */\n+    public FileUploadCompletionNotification(String json)\n+    {\n+        Gson gson = new GsonBuilder().disableHtmlEscaping().serializeNulls().create();\n+        FileUploadCompletionNotification fileUploadCompletionNotification;\n+\n+        try\n+        {\n+            fileUploadCompletionNotification = gson.fromJson(json, FileUploadCompletionNotification.class);\n+        }\n+        catch (Exception malformed)\n+        {\n+            throw new IllegalArgumentException(\"Malformed json:\" + malformed);\n+        }\n+\n+        this.correlationId = fileUploadCompletionNotification.getCorrelationId();\n+        this.isSuccess = fileUploadCompletionNotification.getSuccess();\n+        this.statusCode = fileUploadCompletionNotification.getStatusCode();\n+        this.statusDescription = fileUploadCompletionNotification.getStatusDescription();\n+    }\n+\n+    /**\n+     * Update the status information in the collection, and return the new json.\n+     *\n+     * @param isSuccess is a Boolean representing whether the file was uploaded successfully.\n+     * @param statusCode is the status for the upload of the file to storage.\n+     * @param statusDescription is the description of the status code.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    private void updateStatus(Boolean isSuccess, Integer statusCode, String statusDescription) throws IllegalArgumentException\n+    {\n+        this.isSuccess = isSuccess;\n+        this.statusCode = statusCode;\n+        this.statusDescription = statusDescription;\n+    }\n+\n+    /**\n+     * Convert this class in a valid json.\n+     *\n+     * @return a valid json that represents the content of this class.\n+     */\n+    public String toJson()\n+    {\n+        Gson gson = new GsonBuilder().disableHtmlEscaping().serializeNulls().create();\n+\n+        return gson.toJson(this);\n+    }\n+\n+    /**\n+     * Set the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     * for this upload from IoT Hub. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param correlationId the unique identifier that correlates this file upload status to a SAS URI that IoT Hub retreived from Azure Storage earlier.\n+     */\n+    public void setCorrelationId(String correlationId)\n+    {\n+        this.correlationId = correlationId;\n+    }\n+\n+    /**\n+     * @return Get the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     */\n+    public String getCorrelationId()\n+    {\n+        return this.correlationId;\n+    }\n+\n+    /**\n+     * @return Get if the file upload was successful\n+     */\n+    public Boolean getSuccess()\n+    {\n+        return this.isSuccess;\n+    }\n+\n+    /**\n+     * Set if the file upload was a success\n+     * @param success true if the file upload was a success. False otherwise.\n+     */\n+    public void setSuccess(Boolean success)\n+    {\n+        this.isSuccess = success;\n+    }\n+\n+    /**\n+     * @return get the status code associated with this file upload.\n+     */\n+    public Integer getStatusCode()\n+    {\n+        return this.statusCode;\n+    }\n+\n+    /**\n+     * Set the status code associated with this file upload request\n+     * @param statusCode The status code associated with this file upload request\n+     */\n+    public void setStatusCode(Integer statusCode)\n+    {\n+        this.statusCode = statusCode;\n+    }\n+\n+    /**\n+     * @return get the status description associated with this file upload.\n+     */\n+    public String getStatusDescription()\n+    {\n+        return this.statusDescription;\n+    }\n+\n+    /**\n+     * Set the status description associated with this file upload request\n+     * @param statusDescription The status description associated with this file upload request\n+     */\n+    public void setStatusDescription(String statusDescription)\n+    {\n+        this.statusDescription = statusDescription;\n+    }\n+\n+    /**\n+     * Empty constructor: Used only to keep GSON happy.\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9a479958bc470ec11a09d6a9a5f366c3f832c5a"}, "originalPosition": 191}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMzUyMDM1", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/808#pullrequestreview-430352035", "createdAt": "2020-06-15T06:27:24Z", "commit": {"oid": "f9a479958bc470ec11a09d6a9a5f366c3f832c5a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjoyNzoyNFrOGjkq0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjoyNzoyNFrOGjkq0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1NDEzMA==", "bodyText": "is this 'throws' needed since the method doesn't throw anything?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/808#discussion_r439954130", "createdAt": "2020-06-15T06:27:24Z", "author": {"login": "barustum"}, "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/serializer/FileUploadCompletionNotification.java", "diffHunk": "@@ -0,0 +1,195 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.deps.serializer;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * The request payload to send to IoT Hub to notify it when a file upload is completed, whether successful or not.\n+ * Must set {@link #setSuccess(Boolean)} and {@link #setCorrelationId(String)}, but all other fields are optional.\n+ */\n+public class FileUploadCompletionNotification\n+{\n+    private static final String CORRELATION_ID_TAG = \"correlationId\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(CORRELATION_ID_TAG)\n+    private String correlationId = null;\n+\n+    private static final String IS_SUCCESS_TAG = \"isSuccess\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(IS_SUCCESS_TAG)\n+    private Boolean isSuccess = null;\n+\n+    private static final String STATUS_CODE_TAG = \"statusCode\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_CODE_TAG)\n+    private Integer statusCode = null;\n+\n+    private static final String STATUS_DESCRIPTION_TAG = \"statusDescription\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_DESCRIPTION_TAG)\n+    private String statusDescription = null;\n+\n+    /**\n+     * Create an instance of the FileUploadCompletionNotification for a single file upload operation using Azure Storage.\n+     *\n+     * @param correlationId the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     *                      for this upload from IoT Hub. This field is mandatory. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param isSuccess whether the file was uploaded successfully. This field is mandatory.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    public FileUploadCompletionNotification(String correlationId, Boolean isSuccess)\n+            throws IllegalArgumentException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9a479958bc470ec11a09d6a9a5f366c3f832c5a"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMzUyMTQy", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/808#pullrequestreview-430352142", "createdAt": "2020-06-15T06:27:35Z", "commit": {"oid": "f9a479958bc470ec11a09d6a9a5f366c3f832c5a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjoyNzozNVrOGjkrKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjoyNzozNVrOGjkrKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1NDIxNw==", "bodyText": "is this 'throws' needed since the method doesn't throw anything?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/808#discussion_r439954217", "createdAt": "2020-06-15T06:27:35Z", "author": {"login": "barustum"}, "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/serializer/FileUploadCompletionNotification.java", "diffHunk": "@@ -0,0 +1,195 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.deps.serializer;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * The request payload to send to IoT Hub to notify it when a file upload is completed, whether successful or not.\n+ * Must set {@link #setSuccess(Boolean)} and {@link #setCorrelationId(String)}, but all other fields are optional.\n+ */\n+public class FileUploadCompletionNotification\n+{\n+    private static final String CORRELATION_ID_TAG = \"correlationId\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(CORRELATION_ID_TAG)\n+    private String correlationId = null;\n+\n+    private static final String IS_SUCCESS_TAG = \"isSuccess\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(IS_SUCCESS_TAG)\n+    private Boolean isSuccess = null;\n+\n+    private static final String STATUS_CODE_TAG = \"statusCode\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_CODE_TAG)\n+    private Integer statusCode = null;\n+\n+    private static final String STATUS_DESCRIPTION_TAG = \"statusDescription\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_DESCRIPTION_TAG)\n+    private String statusDescription = null;\n+\n+    /**\n+     * Create an instance of the FileUploadCompletionNotification for a single file upload operation using Azure Storage.\n+     *\n+     * @param correlationId the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     *                      for this upload from IoT Hub. This field is mandatory. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param isSuccess whether the file was uploaded successfully. This field is mandatory.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    public FileUploadCompletionNotification(String correlationId, Boolean isSuccess)\n+            throws IllegalArgumentException\n+    {\n+        setCorrelationId(correlationId);\n+        updateStatus(isSuccess, statusCode, statusDescription);\n+    }\n+\n+    /**\n+     * Create an instance of the FileUploadCompletionNotification for a single file upload operation using Azure Storage.\n+     *\n+     * @param correlationId the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     *                      for this upload from IoT Hub. This field is mandatory. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param isSuccess whether the file was uploaded successfully. This field is mandatory.\n+     * @param statusCode is the status for the upload of the file to storage.\n+     * @param statusDescription is the description of the status code.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    public FileUploadCompletionNotification(String correlationId, Boolean isSuccess, Integer statusCode, String statusDescription)\n+            throws IllegalArgumentException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9a479958bc470ec11a09d6a9a5f366c3f832c5a"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMzUyNTYw", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/808#pullrequestreview-430352560", "createdAt": "2020-06-15T06:28:33Z", "commit": {"oid": "f9a479958bc470ec11a09d6a9a5f366c3f832c5a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjoyODozNFrOGjksew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjoyODozNFrOGjksew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1NDU1NQ==", "bodyText": "do we need a throws IllegalArgumentException for thie constructor?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/808#discussion_r439954555", "createdAt": "2020-06-15T06:28:34Z", "author": {"login": "barustum"}, "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/serializer/FileUploadCompletionNotification.java", "diffHunk": "@@ -0,0 +1,195 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.deps.serializer;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * The request payload to send to IoT Hub to notify it when a file upload is completed, whether successful or not.\n+ * Must set {@link #setSuccess(Boolean)} and {@link #setCorrelationId(String)}, but all other fields are optional.\n+ */\n+public class FileUploadCompletionNotification\n+{\n+    private static final String CORRELATION_ID_TAG = \"correlationId\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(CORRELATION_ID_TAG)\n+    private String correlationId = null;\n+\n+    private static final String IS_SUCCESS_TAG = \"isSuccess\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(IS_SUCCESS_TAG)\n+    private Boolean isSuccess = null;\n+\n+    private static final String STATUS_CODE_TAG = \"statusCode\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_CODE_TAG)\n+    private Integer statusCode = null;\n+\n+    private static final String STATUS_DESCRIPTION_TAG = \"statusDescription\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(STATUS_DESCRIPTION_TAG)\n+    private String statusDescription = null;\n+\n+    /**\n+     * Create an instance of the FileUploadCompletionNotification for a single file upload operation using Azure Storage.\n+     *\n+     * @param correlationId the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     *                      for this upload from IoT Hub. This field is mandatory. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param isSuccess whether the file was uploaded successfully. This field is mandatory.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    public FileUploadCompletionNotification(String correlationId, Boolean isSuccess)\n+            throws IllegalArgumentException\n+    {\n+        setCorrelationId(correlationId);\n+        updateStatus(isSuccess, statusCode, statusDescription);\n+    }\n+\n+    /**\n+     * Create an instance of the FileUploadCompletionNotification for a single file upload operation using Azure Storage.\n+     *\n+     * @param correlationId the correlationId that correlates this FileUploadCompletionNotification to the earlier request to get the SAS URI\n+     *                      for this upload from IoT Hub. This field is mandatory. Must equal {@link FileUploadSasUriResponse#getCorrelationId()}.\n+     * @param isSuccess whether the file was uploaded successfully. This field is mandatory.\n+     * @param statusCode is the status for the upload of the file to storage.\n+     * @param statusDescription is the description of the status code.\n+     * @throws IllegalArgumentException if one of the parameters is null, empty, or not valid.\n+     */\n+    public FileUploadCompletionNotification(String correlationId, Boolean isSuccess, Integer statusCode, String statusDescription)\n+            throws IllegalArgumentException\n+    {\n+        setCorrelationId(correlationId);\n+        updateStatus(isSuccess, statusCode, statusDescription);\n+    }\n+\n+    /**\n+     * Construct this notification with json\n+     * @param json the json to parse.\n+     */\n+    public FileUploadCompletionNotification(String json)\n+    {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9a479958bc470ec11a09d6a9a5f366c3f832c5a"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMzUzNjc1", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/808#pullrequestreview-430353675", "createdAt": "2020-06-15T06:30:58Z", "commit": {"oid": "f9a479958bc470ec11a09d6a9a5f366c3f832c5a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjozMDo1OVrOGjkwGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjozMDo1OVrOGjkwGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1NTQ4MA==", "bodyText": "FileUploadStatusParser -> FileUploadCompletionNotification", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/808#discussion_r439955480", "createdAt": "2020-06-15T06:30:59Z", "author": {"login": "barustum"}, "path": "deps/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/deps/serializer/FileUploadCompletionNotificationTest.java", "diffHunk": "@@ -77,39 +77,18 @@ private static String createJson(String correlationId, Boolean isSuccess, Intege\n     public void constructor_succeed()\n     {\n         // act\n-        FileUploadStatusParser fileUploadStatusParser = new FileUploadStatusParser(VALID_CORRELATION_ID, VALID_IS_SUCCESS, VALID_STATUS_CODE, VALID_STATUS_DESCRIPTION);\n+        FileUploadCompletionNotification fileUploadStatusParser = new FileUploadCompletionNotification(VALID_CORRELATION_ID, VALID_IS_SUCCESS, VALID_STATUS_CODE, VALID_STATUS_DESCRIPTION);\n \n         // assert\n         assertFileUploadStatus(fileUploadStatusParser, VALID_CORRELATION_ID, VALID_IS_SUCCESS, VALID_STATUS_CODE, VALID_STATUS_DESCRIPTION);\n     }\n \n-    /* Tests_SRS_FILE_UPLOAD_STATUS_21_003: [If one of the provided parameters is null, empty, or not valid, the constructor shall throws IllegalArgumentException.] */\n-    @Test\n-    public void constructor_failed()\n-    {\n-        for (TestParameters test:tests)\n-        {\n-            // act\n-            try\n-            {\n-                new FileUploadStatusParser(test.correlationId, test.isSuccess, test.statusCode, test.statusDescription);\n-                System.out.println(\"Test failed: correlationId=\" + test.correlationId + \", isSuccess=\" + test.isSuccess +\n-                        \", statusCode=\" + test.statusCode + \", statusDescription=\" + test.statusDescription);\n-                assert false;\n-            }\n-            catch (IllegalArgumentException expected)\n-            {\n-                // Don't do anything, expected throw.\n-            }\n-        }\n-    }\n-\n     /* Tests_SRS_FILE_UPLOAD_STATUS_21_004: [The toJson shall return a string with a json that represents the contend of the FileUploadStatusParser.] */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9a479958bc470ec11a09d6a9a5f366c3f832c5a"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMzU0Mjg1", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/808#pullrequestreview-430354285", "createdAt": "2020-06-15T06:32:19Z", "commit": {"oid": "f9a479958bc470ec11a09d6a9a5f366c3f832c5a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjozMjoxOVrOGjkx5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjozMjoxOVrOGjkx5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1NTk0Mw==", "bodyText": "contend -> content", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/808#discussion_r439955943", "createdAt": "2020-06-15T06:32:19Z", "author": {"login": "barustum"}, "path": "deps/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/deps/serializer/FileUploadSasUriRequestTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package tests.unit.com.microsoft.azure.sdk.iot.deps.serializer;\n+\n+import com.microsoft.azure.sdk.iot.deps.serializer.FileUploadSasUriRequest;\n+import mockit.Deencapsulation;\n+import org.junit.Test;\n+import tests.unit.com.microsoft.azure.sdk.iot.deps.Helpers;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+/**\n+ * Unit tests for File Upload Request serializer\n+ * 100% methods, 100% lines covered\n+ */\n+public class FileUploadSasUriRequestTest\n+{\n+    private static final String VALID_BLOB_NAME = \"test-device1/image.jpg\";\n+    private static final String INVALID_BLOB_NAME = \"\\u1234 test-device1/image.jpg\";\n+\n+    private static void assertFileUploadRequest(FileUploadSasUriRequest fileUploadSasUriRequest, String expectedBlobName)\n+    {\n+        assertNotNull(fileUploadSasUriRequest);\n+\n+        String blobName = Deencapsulation.getField(fileUploadSasUriRequest, \"blobName\");\n+        assertEquals(expectedBlobName, blobName);\n+    }\n+\n+    /* Tests_SRS_FILE_UPLOAD_REQUEST_21_001: [The constructor shall create an instance of the FileUploadSasUriRequest.] */\n+    /* Tests_SRS_FILE_UPLOAD_REQUEST_21_002: [The constructor shall set the `blobName` in the new class with the provided blob name.] */\n+    @Test\n+    public void constructor_succeed()\n+    {\n+        // act\n+        FileUploadSasUriRequest fileUploadSasUriRequest = new FileUploadSasUriRequest(VALID_BLOB_NAME);\n+\n+        // assert\n+        assertFileUploadRequest(fileUploadSasUriRequest, VALID_BLOB_NAME);\n+    }\n+\n+    /* Tests_SRS_FILE_UPLOAD_REQUEST_21_004: [The toJson shall return a string with a json that represents the contend of the FileUploadSasUriResponse.] */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9a479958bc470ec11a09d6a9a5f366c3f832c5a"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMzU0Nzcw", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/808#pullrequestreview-430354770", "createdAt": "2020-06-15T06:33:19Z", "commit": {"oid": "f9a479958bc470ec11a09d6a9a5f366c3f832c5a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjozMzoxOVrOGjkzgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNjozMzoxOVrOGjkzgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1NjM1Mg==", "bodyText": "FileUploadSasUriResponse -> FileUploadSasUriRequest", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/808#discussion_r439956352", "createdAt": "2020-06-15T06:33:19Z", "author": {"login": "barustum"}, "path": "deps/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/deps/serializer/FileUploadSasUriRequestTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package tests.unit.com.microsoft.azure.sdk.iot.deps.serializer;\n+\n+import com.microsoft.azure.sdk.iot.deps.serializer.FileUploadSasUriRequest;\n+import mockit.Deencapsulation;\n+import org.junit.Test;\n+import tests.unit.com.microsoft.azure.sdk.iot.deps.Helpers;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+/**\n+ * Unit tests for File Upload Request serializer\n+ * 100% methods, 100% lines covered\n+ */\n+public class FileUploadSasUriRequestTest\n+{\n+    private static final String VALID_BLOB_NAME = \"test-device1/image.jpg\";\n+    private static final String INVALID_BLOB_NAME = \"\\u1234 test-device1/image.jpg\";\n+\n+    private static void assertFileUploadRequest(FileUploadSasUriRequest fileUploadSasUriRequest, String expectedBlobName)\n+    {\n+        assertNotNull(fileUploadSasUriRequest);\n+\n+        String blobName = Deencapsulation.getField(fileUploadSasUriRequest, \"blobName\");\n+        assertEquals(expectedBlobName, blobName);\n+    }\n+\n+    /* Tests_SRS_FILE_UPLOAD_REQUEST_21_001: [The constructor shall create an instance of the FileUploadSasUriRequest.] */\n+    /* Tests_SRS_FILE_UPLOAD_REQUEST_21_002: [The constructor shall set the `blobName` in the new class with the provided blob name.] */\n+    @Test\n+    public void constructor_succeed()\n+    {\n+        // act\n+        FileUploadSasUriRequest fileUploadSasUriRequest = new FileUploadSasUriRequest(VALID_BLOB_NAME);\n+\n+        // assert\n+        assertFileUploadRequest(fileUploadSasUriRequest, VALID_BLOB_NAME);\n+    }\n+\n+    /* Tests_SRS_FILE_UPLOAD_REQUEST_21_004: [The toJson shall return a string with a json that represents the contend of the FileUploadSasUriResponse.] */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9a479958bc470ec11a09d6a9a5f366c3f832c5a"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "961d67b9d264b941bd30b5a7d4a757c9718f87b9", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/961d67b9d264b941bd30b5a7d4a757c9718f87b9", "committedDate": "2020-06-15T18:14:14Z", "message": "CR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwODkzMTQz", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/808#pullrequestreview-430893143", "createdAt": "2020-06-15T18:31:12Z", "commit": {"oid": "961d67b9d264b941bd30b5a7d4a757c9718f87b9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6dc9f68902512638f66f2bdfbe0e75a38f270626", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/6dc9f68902512638f66f2bdfbe0e75a38f270626", "committedDate": "2020-06-15T19:54:29Z", "message": "squash"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1661, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}