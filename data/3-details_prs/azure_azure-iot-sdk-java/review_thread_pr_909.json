{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgwMTc2NDU3", "number": 909, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjoxMDo0M1rOEgiRVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjoxMDo0M1rOEgiRVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTUxMzgzOnYy", "diffSide": "RIGHT", "path": "device/iot-device-samples/file-upload-sample/src/main/java/samples/com/microsoft/azure/sdk/iot/FileUploadSimpleSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjoxMDo0M1rOHNcuEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjoxMDo0M1rOHNcuEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2NDA4Mw==", "bodyText": "nit: the \"Successfully\" word in the console will be misleading,\nMaybe:\n\"Failed to upload the file. IoT Hub was notified that the SAS URI can be freed\"", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/909#discussion_r483864083", "createdAt": "2020-09-04T22:10:43Z", "author": {"login": "azabbasi"}, "path": "device/iot-device-samples/file-upload-sample/src/main/java/samples/com/microsoft/azure/sdk/iot/FileUploadSimpleSample.java", "diffHunk": "@@ -58,29 +62,64 @@ public static void main(String[] args)\n         IotHubClientProtocol protocol = IotHubClientProtocol.MQTT;\n \n         System.out.println(\"Successfully read input parameters.\");\n-        System.out.format(\"Using communication protocol %s.\\n\",\n-                protocol.name());\n \n         DeviceClient client = new DeviceClient(connString, protocol);\n \n         System.out.println(\"Successfully created an IoT Hub client.\");\n \n         try\n         {\n-\n             File file = new File(fullFileName);\n-            if(file.isDirectory())\n+            if (file.isDirectory())\n             {\n                 throw new IllegalArgumentException(fullFileName + \" is a directory, please provide a single file name, or use the FileUploadSample to upload directories.\");\n             }\n-            else\n+\n+            System.out.println(\"Retrieving SAS URI from IoT Hub...\");\n+            FileUploadSasUriResponse sasUriResponse = client.getFileUploadSasUri(new FileUploadSasUriRequest(file.getName()));\n+\n+            System.out.println(\"Successfully got SAS URI from IoT Hub\");\n+            System.out.println(\"Correlation Id: \" + sasUriResponse.getCorrelationId());\n+            System.out.println(\"Container name: \" + sasUriResponse.getContainerName());\n+            System.out.println(\"Blob name: \" + sasUriResponse.getBlobName());\n+            System.out.println(\"Blob Uri: \" + sasUriResponse.getBlobUri());\n+\n+            System.out.println(\"Using the Azure Storage SDK to upload file to Azure Storage...\");\n+\n+            try (FileInputStream fileInputStream = new FileInputStream(file))\n             {\n-                client.uploadToBlobAsync(file.getName(), new FileInputStream(file), file.length(), new FileUploadStatusCallBack(), null);\n+                // Note that other versions of the Azure Storage SDK can be used here instead. The latest can be found here:\n+                // https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/storage#azure-storage-sdk-client-library-for-java\n+                CloudBlockBlob blob = new CloudBlockBlob(sasUriResponse.getBlobUri());\n+                blob.upload(fileInputStream, file.length());\n             }\n+            catch (Exception e)\n+            {\n+                System.out.println(\"Exception encountered while uploading file to blob: \" + e.getMessage());\n+\n+                System.out.println(\"Failed to upload file to Azure Storage.\");\n+\n+                System.out.println(\"Notifying IoT Hub that the SAS URI can be freed and that the file upload failed.\");\n+\n+                // Note that this is done even when the file upload fails. IoT Hub has a fixed number of SAS URIs allowed active\n+                // at any given time. Once you are done with the file upload, you should free your SAS URI so that other\n+                // SAS URIs can be generated. If a SAS URI is not freed through this API, then it will free itself eventually\n+                // based on how long SAS URIs are configured to live on your IoT Hub.\n+                FileUploadCompletionNotification completionNotification = new FileUploadCompletionNotification(sasUriResponse.getCorrelationId(), false);\n+                client.completeFileUploadAsync(completionNotification);\n \n-            System.out.println(\"File upload started with success\");\n+                System.out.println(\"Successfully notified IoT Hub that the SAS URI can be freed, and that the file upload was a failure.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "694b3e65357a0636cee9a0c26af753660c920d06"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2685, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}