{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NTQ1MzEw", "number": 793, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMjoxNDoyNlrOECYaIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMjozNjozMlrOEDpnZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTMyNTE1OnYy", "diffSide": "LEFT", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/Message.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMjoxNDoyNlrOGezdbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMjoxNDoyNlrOGezdbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk1MzU4MA==", "bodyText": "This log statement was annoying while I was debugging, and I imagine it would be for users, too", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r434953580", "createdAt": "2020-06-04T02:14:26Z", "author": {"login": "timtay-microsoft"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/Message.java", "diffHunk": "@@ -301,7 +301,6 @@ public void setProperty(String name, String value)\n             this.properties.remove(messageProperty);\n         }\n \n-        log.trace(\"Setting message property\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "263b92afa92bb67b995a75c33cd8f6a3a93d88ca"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTMyNzM5OnYy", "diffSide": "LEFT", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/auth/IotHubSasTokenAuthenticationProvider.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMjoxNTo0N1rOGezeyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzowOTo0MFrOGhUQJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk1MzkzMA==", "bodyText": "This was a bug where the token renewal time was much more proactive than it needed to be. Note that it was doing (time in seconds) X (85) which yielded a unit of time between seconds and milliseconds. But the return value was supposed to be in milliseconds", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r434953930", "createdAt": "2020-06-04T02:15:47Z", "author": {"login": "timtay-microsoft"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/auth/IotHubSasTokenAuthenticationProvider.java", "diffHunk": "@@ -120,7 +120,7 @@ public boolean shouldRefreshToken(boolean proactivelyRenew)\n \n     public int getMillisecondsBeforeProactiveRenewal()\n     {\n-        return (int) this.tokenValidSecs * this.timeBufferPercentage;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "263b92afa92bb67b995a75c33cd8f6a3a93d88ca"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxODY0NA==", "bodyText": "Won't the value be 10x larger now?\nIs it a count down or count up?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437018644", "createdAt": "2020-06-08T21:44:08Z", "author": {"login": "drwill-ms"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/auth/IotHubSasTokenAuthenticationProvider.java", "diffHunk": "@@ -120,7 +120,7 @@ public boolean shouldRefreshToken(boolean proactivelyRenew)\n \n     public int getMillisecondsBeforeProactiveRenewal()\n     {\n-        return (int) this.tokenValidSecs * this.timeBufferPercentage;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk1MzkzMA=="}, "originalCommit": {"oid": "263b92afa92bb67b995a75c33cd8f6a3a93d88ca"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3NzkyNw==", "bodyText": "@timtay-microsoft ?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437077927", "createdAt": "2020-06-09T00:52:38Z", "author": {"login": "drwill-ms"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/auth/IotHubSasTokenAuthenticationProvider.java", "diffHunk": "@@ -120,7 +120,7 @@ public boolean shouldRefreshToken(boolean proactivelyRenew)\n \n     public int getMillisecondsBeforeProactiveRenewal()\n     {\n-        return (int) this.tokenValidSecs * this.timeBufferPercentage;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk1MzkzMA=="}, "originalCommit": {"oid": "263b92afa92bb67b995a75c33cd8f6a3a93d88ca"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzMzU2MQ==", "bodyText": "The value will be 10 times larger, yes. The bug here was that the sas token was previously being renewed at 8.5% of its life spent, instead of the intended 85%. This was due to an incorrect mixing of seconds and milliseconds, and the timeBufferPercentage being treated as 85 instead of .85", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437533561", "createdAt": "2020-06-09T15:45:16Z", "author": {"login": "timtay-microsoft"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/auth/IotHubSasTokenAuthenticationProvider.java", "diffHunk": "@@ -120,7 +120,7 @@ public boolean shouldRefreshToken(boolean proactivelyRenew)\n \n     public int getMillisecondsBeforeProactiveRenewal()\n     {\n-        return (int) this.tokenValidSecs * this.timeBufferPercentage;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk1MzkzMA=="}, "originalCommit": {"oid": "263b92afa92bb67b995a75c33cd8f6a3a93d88ca"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU4ODAwNg==", "bodyText": "Please add code comments.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437588006", "createdAt": "2020-06-09T17:09:40Z", "author": {"login": "drwill-ms"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/auth/IotHubSasTokenAuthenticationProvider.java", "diffHunk": "@@ -120,7 +120,7 @@ public boolean shouldRefreshToken(boolean proactivelyRenew)\n \n     public int getMillisecondsBeforeProactiveRenewal()\n     {\n-        return (int) this.tokenValidSecs * this.timeBufferPercentage;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk1MzkzMA=="}, "originalCommit": {"oid": "263b92afa92bb67b995a75c33cd8f6a3a93d88ca"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTMyODkwOnYy", "diffSide": "LEFT", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/IotHubTransportConnection.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMjoxNjo0NVrOGezftg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTo0NToyOVrOGhQ8Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk1NDE2Ng==", "bodyText": "Every call to this API was already passing in an IotHubTransportMessage type (which is a derived type from Message), and it made the amqp refactor easier for this interface to just take a transport message (which has callback info that Message does not)", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r434954166", "createdAt": "2020-06-04T02:16:45Z", "author": {"login": "timtay-microsoft"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/IotHubTransportConnection.java", "diffHunk": "@@ -60,7 +60,7 @@\n      * @return true if the acknowledgement was sent successfully, and false otherwise\n      * @throws TransportException if an exception occurred while sending the acknowledgement\n      */\n-    boolean sendMessageResult(Message message, IotHubMessageResult result) throws TransportException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "263b92afa92bb67b995a75c33cd8f6a3a93d88ca"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxODgyOA==", "bodyText": "Is this change contract breaking?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437018828", "createdAt": "2020-06-08T21:44:37Z", "author": {"login": "drwill-ms"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/IotHubTransportConnection.java", "diffHunk": "@@ -60,7 +60,7 @@\n      * @return true if the acknowledgement was sent successfully, and false otherwise\n      * @throws TransportException if an exception occurred while sending the acknowledgement\n      */\n-    boolean sendMessageResult(Message message, IotHubMessageResult result) throws TransportException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk1NDE2Ng=="}, "originalCommit": {"oid": "263b92afa92bb67b995a75c33cd8f6a3a93d88ca"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzMzcxOQ==", "bodyText": "No, this is an internal interface", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437533719", "createdAt": "2020-06-09T15:45:29Z", "author": {"login": "timtay-microsoft"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/IotHubTransportConnection.java", "diffHunk": "@@ -60,7 +60,7 @@\n      * @return true if the acknowledgement was sent successfully, and false otherwise\n      * @throws TransportException if an exception occurred while sending the acknowledgement\n      */\n-    boolean sendMessageResult(Message message, IotHubMessageResult result) throws TransportException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk1NDE2Ng=="}, "originalCommit": {"oid": "263b92afa92bb67b995a75c33cd8f6a3a93d88ca"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjUwMDk2OnYy", "diffSide": "RIGHT", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/auth/IotHubSasTokenAuthenticationProvider.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMTo0NTowMVrOGgxhkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMTo1Njo0OVrOGgx06Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxOTAyNQ==", "bodyText": "What is divide by 100 for?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437019025", "createdAt": "2020-06-08T21:45:01Z", "author": {"login": "bikamani"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/auth/IotHubSasTokenAuthenticationProvider.java", "diffHunk": "@@ -120,7 +120,7 @@ public boolean shouldRefreshToken(boolean proactivelyRenew)\n \n     public int getMillisecondsBeforeProactiveRenewal()\n     {\n-        return (int) this.tokenValidSecs * this.timeBufferPercentage;\n+        return (int) ((this.tokenValidSecs * 1000) * (this.timeBufferPercentage / 100.0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84c9fc637f82364c1493a9052724bcf164040718"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAyMTY5Ng==", "bodyText": "The field timeBufferPercentage is supposed to represent 85%, but it is just 85 instead of .85", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437021696", "createdAt": "2020-06-08T21:51:22Z", "author": {"login": "timtay-microsoft"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/auth/IotHubSasTokenAuthenticationProvider.java", "diffHunk": "@@ -120,7 +120,7 @@ public boolean shouldRefreshToken(boolean proactivelyRenew)\n \n     public int getMillisecondsBeforeProactiveRenewal()\n     {\n-        return (int) this.tokenValidSecs * this.timeBufferPercentage;\n+        return (int) ((this.tokenValidSecs * 1000) * (this.timeBufferPercentage / 100.0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxOTAyNQ=="}, "originalCommit": {"oid": "84c9fc637f82364c1493a9052724bcf164040718"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAyMzk3Nw==", "bodyText": "Worth a code comment.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437023977", "createdAt": "2020-06-08T21:56:49Z", "author": {"login": "drwill-ms"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/auth/IotHubSasTokenAuthenticationProvider.java", "diffHunk": "@@ -120,7 +120,7 @@ public boolean shouldRefreshToken(boolean proactivelyRenew)\n \n     public int getMillisecondsBeforeProactiveRenewal()\n     {\n-        return (int) this.tokenValidSecs * this.timeBufferPercentage;\n+        return (int) ((this.tokenValidSecs * 1000) * (this.timeBufferPercentage / 100.0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxOTAyNQ=="}, "originalCommit": {"oid": "84c9fc637f82364c1493a9052724bcf164040718"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjUyNTE0OnYy", "diffSide": "RIGHT", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/amqps/AmqpsMethodsSenderLinkHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMTo1NDowOFrOGgxwWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMTo1NDo1NlrOGgxxnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAyMjgxMA==", "bodyText": "if this isn't used outside of the if statement below, can it be moved into it?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437022810", "createdAt": "2020-06-08T21:54:08Z", "author": {"login": "drwill-ms"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/amqps/AmqpsMethodsSenderLinkHandler.java", "diffHunk": "@@ -0,0 +1,124 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.device.transport.amqps;\n+\n+import com.microsoft.azure.sdk.iot.device.DeviceClientConfig;\n+import com.microsoft.azure.sdk.iot.device.Message;\n+import com.microsoft.azure.sdk.iot.device.MessageType;\n+import com.microsoft.azure.sdk.iot.device.transport.IotHubTransportMessage;\n+import org.apache.qpid.proton.amqp.Symbol;\n+import org.apache.qpid.proton.amqp.messaging.ApplicationProperties;\n+import org.apache.qpid.proton.amqp.messaging.Properties;\n+import org.apache.qpid.proton.engine.Sender;\n+import org.apache.qpid.proton.message.impl.MessageImpl;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+public final class AmqpsMethodsSenderLinkHandler extends AmqpsSenderLinkHandler\n+{\n+    private static final String CORRELATION_ID_KEY = \"com.microsoft:channel-correlation-id\";\n+    private static final String CORRELATION_ID_KEY_PREFIX = \"methods:\";\n+\n+    private static final String APPLICATION_PROPERTY_KEY_IOTHUB_STATUS = \"IoThub-status\";\n+\n+    private static final String DEVICE_SENDER_LINK_ENDPOINT_PATH = \"/devices/%s/methods/devicebound\";\n+    private static final String MODULE_SENDER_LINK_ENDPOINT_PATH = \"/devices/%s/modules/%s/methods/devicebound\";\n+\n+    private static final String SENDER_LINK_TAG_PREFIX = \"sender_link_devicemethods-\";\n+\n+    AmqpsMethodsSenderLinkHandler(Sender sender, AmqpsLinkStateCallback amqpsLinkStateCallback, DeviceClientConfig deviceClientConfig, String linkCorrelationId)\n+    {\n+        super(sender, amqpsLinkStateCallback, linkCorrelationId);\n+\n+        this.senderLinkTag = getTag(deviceClientConfig, linkCorrelationId);\n+        this.senderLinkAddress = getAddress(deviceClientConfig);\n+\n+        //Note that this correlation id value must be equivalent to the correlation id in the method receiver link that it is paired with\n+        this.amqpProperties.put(Symbol.getSymbol(CORRELATION_ID_KEY), Symbol.getSymbol(CORRELATION_ID_KEY_PREFIX + this.linkCorrelationId));\n+        this.amqpProperties.put(Symbol.getSymbol(VERSION_IDENTIFIER_KEY), deviceClientConfig.getProductInfo().getUserAgentString());\n+    }\n+\n+    static String getTag(DeviceClientConfig deviceClientConfig, String linkCorrelationId)\n+    {\n+        String moduleId = deviceClientConfig.getModuleId();\n+        String deviceId = deviceClientConfig.getDeviceId();\n+        if (moduleId != null && !moduleId.isEmpty())\n+        {\n+            return SENDER_LINK_TAG_PREFIX + deviceId + \"/\" + moduleId + \"-\" + linkCorrelationId;\n+        }\n+        else\n+        {\n+            return SENDER_LINK_TAG_PREFIX + deviceId + \"-\" + linkCorrelationId;\n+        }\n+    }\n+\n+    private static String getAddress(DeviceClientConfig deviceClientConfig)\n+    {\n+        String moduleId = deviceClientConfig.getModuleId();\n+        String deviceId = deviceClientConfig.getDeviceId();\n+        if (moduleId != null && !moduleId.isEmpty())\n+        {\n+            return String.format(MODULE_SENDER_LINK_ENDPOINT_PATH, deviceId, moduleId);\n+        }\n+        else\n+        {\n+            return String.format(DEVICE_SENDER_LINK_ENDPOINT_PATH, deviceId);\n+        }\n+    }\n+\n+    @Override\n+    public String getLinkInstanceType()\n+    {\n+        return \"methods\";\n+    }\n+\n+    @Override\n+    protected MessageImpl iotHubMessageToProtonMessage(Message message)\n+    {\n+        if (message.getMessageType() == MessageType.DEVICE_METHODS)\n+        {\n+            MessageImpl protonMessage = super.iotHubMessageToProtonMessage(message);\n+            IotHubTransportMessage deviceMethodMessage = (IotHubTransportMessage) message;\n+\n+            Properties properties;\n+            if (protonMessage.getProperties() != null)\n+            {\n+                properties = protonMessage.getProperties();\n+            }\n+            else\n+            {\n+                properties = new Properties();\n+            }\n+\n+            if (deviceMethodMessage.getRequestId() != null)\n+            {\n+                properties.setCorrelationId(UUID.fromString(deviceMethodMessage.getRequestId()));\n+            }\n+\n+            protonMessage.setProperties(properties);\n+\n+            Map<String, Object> userProperties = new HashMap<>();\n+            if (deviceMethodMessage.getStatus() != null)\n+            {\n+                userProperties.put(APPLICATION_PROPERTY_KEY_IOTHUB_STATUS, Integer.parseInt(deviceMethodMessage.getStatus()));\n+            }\n+\n+            Map<String, Object> applicationPropertiesMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84c9fc637f82364c1493a9052724bcf164040718"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAyMzEzNQ==", "bodyText": "It can be moved in there, good catch", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437023135", "createdAt": "2020-06-08T21:54:56Z", "author": {"login": "timtay-microsoft"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/amqps/AmqpsMethodsSenderLinkHandler.java", "diffHunk": "@@ -0,0 +1,124 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.device.transport.amqps;\n+\n+import com.microsoft.azure.sdk.iot.device.DeviceClientConfig;\n+import com.microsoft.azure.sdk.iot.device.Message;\n+import com.microsoft.azure.sdk.iot.device.MessageType;\n+import com.microsoft.azure.sdk.iot.device.transport.IotHubTransportMessage;\n+import org.apache.qpid.proton.amqp.Symbol;\n+import org.apache.qpid.proton.amqp.messaging.ApplicationProperties;\n+import org.apache.qpid.proton.amqp.messaging.Properties;\n+import org.apache.qpid.proton.engine.Sender;\n+import org.apache.qpid.proton.message.impl.MessageImpl;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+public final class AmqpsMethodsSenderLinkHandler extends AmqpsSenderLinkHandler\n+{\n+    private static final String CORRELATION_ID_KEY = \"com.microsoft:channel-correlation-id\";\n+    private static final String CORRELATION_ID_KEY_PREFIX = \"methods:\";\n+\n+    private static final String APPLICATION_PROPERTY_KEY_IOTHUB_STATUS = \"IoThub-status\";\n+\n+    private static final String DEVICE_SENDER_LINK_ENDPOINT_PATH = \"/devices/%s/methods/devicebound\";\n+    private static final String MODULE_SENDER_LINK_ENDPOINT_PATH = \"/devices/%s/modules/%s/methods/devicebound\";\n+\n+    private static final String SENDER_LINK_TAG_PREFIX = \"sender_link_devicemethods-\";\n+\n+    AmqpsMethodsSenderLinkHandler(Sender sender, AmqpsLinkStateCallback amqpsLinkStateCallback, DeviceClientConfig deviceClientConfig, String linkCorrelationId)\n+    {\n+        super(sender, amqpsLinkStateCallback, linkCorrelationId);\n+\n+        this.senderLinkTag = getTag(deviceClientConfig, linkCorrelationId);\n+        this.senderLinkAddress = getAddress(deviceClientConfig);\n+\n+        //Note that this correlation id value must be equivalent to the correlation id in the method receiver link that it is paired with\n+        this.amqpProperties.put(Symbol.getSymbol(CORRELATION_ID_KEY), Symbol.getSymbol(CORRELATION_ID_KEY_PREFIX + this.linkCorrelationId));\n+        this.amqpProperties.put(Symbol.getSymbol(VERSION_IDENTIFIER_KEY), deviceClientConfig.getProductInfo().getUserAgentString());\n+    }\n+\n+    static String getTag(DeviceClientConfig deviceClientConfig, String linkCorrelationId)\n+    {\n+        String moduleId = deviceClientConfig.getModuleId();\n+        String deviceId = deviceClientConfig.getDeviceId();\n+        if (moduleId != null && !moduleId.isEmpty())\n+        {\n+            return SENDER_LINK_TAG_PREFIX + deviceId + \"/\" + moduleId + \"-\" + linkCorrelationId;\n+        }\n+        else\n+        {\n+            return SENDER_LINK_TAG_PREFIX + deviceId + \"-\" + linkCorrelationId;\n+        }\n+    }\n+\n+    private static String getAddress(DeviceClientConfig deviceClientConfig)\n+    {\n+        String moduleId = deviceClientConfig.getModuleId();\n+        String deviceId = deviceClientConfig.getDeviceId();\n+        if (moduleId != null && !moduleId.isEmpty())\n+        {\n+            return String.format(MODULE_SENDER_LINK_ENDPOINT_PATH, deviceId, moduleId);\n+        }\n+        else\n+        {\n+            return String.format(DEVICE_SENDER_LINK_ENDPOINT_PATH, deviceId);\n+        }\n+    }\n+\n+    @Override\n+    public String getLinkInstanceType()\n+    {\n+        return \"methods\";\n+    }\n+\n+    @Override\n+    protected MessageImpl iotHubMessageToProtonMessage(Message message)\n+    {\n+        if (message.getMessageType() == MessageType.DEVICE_METHODS)\n+        {\n+            MessageImpl protonMessage = super.iotHubMessageToProtonMessage(message);\n+            IotHubTransportMessage deviceMethodMessage = (IotHubTransportMessage) message;\n+\n+            Properties properties;\n+            if (protonMessage.getProperties() != null)\n+            {\n+                properties = protonMessage.getProperties();\n+            }\n+            else\n+            {\n+                properties = new Properties();\n+            }\n+\n+            if (deviceMethodMessage.getRequestId() != null)\n+            {\n+                properties.setCorrelationId(UUID.fromString(deviceMethodMessage.getRequestId()));\n+            }\n+\n+            protonMessage.setProperties(properties);\n+\n+            Map<String, Object> userProperties = new HashMap<>();\n+            if (deviceMethodMessage.getStatus() != null)\n+            {\n+                userProperties.put(APPLICATION_PROPERTY_KEY_IOTHUB_STATUS, Integer.parseInt(deviceMethodMessage.getStatus()));\n+            }\n+\n+            Map<String, Object> applicationPropertiesMap;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAyMjgxMA=="}, "originalCommit": {"oid": "84c9fc637f82364c1493a9052724bcf164040718"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjU4MTE0OnYy", "diffSide": "RIGHT", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/amqps/AmqpsCbsReceiverLinkHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMjoxNjoxM1rOGgySXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMjozMzozNFrOGgyrYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzMTUxOA==", "bodyText": "Is this a new line or appears this way on github?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437031518", "createdAt": "2020-06-08T22:16:13Z", "author": {"login": "bikamani"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/amqps/AmqpsCbsReceiverLinkHandler.java", "diffHunk": "@@ -0,0 +1,117 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.device.transport.amqps;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.qpid.proton.amqp.messaging.Properties;\n+import org.apache.qpid.proton.amqp.messaging.Released;\n+import org.apache.qpid.proton.amqp.transport.DeliveryState;\n+import org.apache.qpid.proton.engine.Delivery;\n+import org.apache.qpid.proton.engine.Event;\n+import org.apache.qpid.proton.engine.Receiver;\n+\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Every SAS token based authentication over AMQP requires a CBS session with a sender and receiver link. This\n+ * class defines the receiver link which receives authentication status codes corresponding to each authentication attempt.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84c9fc637f82364c1493a9052724bcf164040718"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzMjkzNQ==", "bodyText": "I'm not sure that I see what you are seeing. This class javadoc is two lines for me", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437032935", "createdAt": "2020-06-08T22:19:56Z", "author": {"login": "timtay-microsoft"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/amqps/AmqpsCbsReceiverLinkHandler.java", "diffHunk": "@@ -0,0 +1,117 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.device.transport.amqps;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.qpid.proton.amqp.messaging.Properties;\n+import org.apache.qpid.proton.amqp.messaging.Released;\n+import org.apache.qpid.proton.amqp.transport.DeliveryState;\n+import org.apache.qpid.proton.engine.Delivery;\n+import org.apache.qpid.proton.engine.Event;\n+import org.apache.qpid.proton.engine.Receiver;\n+\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Every SAS token based authentication over AMQP requires a CBS session with a sender and receiver link. This\n+ * class defines the receiver link which receives authentication status codes corresponding to each authentication attempt.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzMTUxOA=="}, "originalCommit": {"oid": "84c9fc637f82364c1493a9052724bcf164040718"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzNzkyMQ==", "bodyText": "I'm not sure I see what you are seeing", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437037921", "createdAt": "2020-06-08T22:33:34Z", "author": {"login": "timtay-microsoft"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/amqps/AmqpsCbsReceiverLinkHandler.java", "diffHunk": "@@ -0,0 +1,117 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.device.transport.amqps;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.qpid.proton.amqp.messaging.Properties;\n+import org.apache.qpid.proton.amqp.messaging.Released;\n+import org.apache.qpid.proton.amqp.transport.DeliveryState;\n+import org.apache.qpid.proton.engine.Delivery;\n+import org.apache.qpid.proton.engine.Event;\n+import org.apache.qpid.proton.engine.Receiver;\n+\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Every SAS token based authentication over AMQP requires a CBS session with a sender and receiver link. This\n+ * class defines the receiver link which receives authentication status codes corresponding to each authentication attempt.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzMTUxOA=="}, "originalCommit": {"oid": "84c9fc637f82364c1493a9052724bcf164040718"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjU5MTMzOnYy", "diffSide": "RIGHT", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/amqps/AmqpsCbsReceiverLinkHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMjoyMDoyNlrOGgyYhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMjoyMDoyNlrOGgyYhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzMzA5NA==", "bodyText": "should this be defined as private static final String", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437033094", "createdAt": "2020-06-08T22:20:26Z", "author": {"login": "bikamani"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/amqps/AmqpsCbsReceiverLinkHandler.java", "diffHunk": "@@ -0,0 +1,117 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.device.transport.amqps;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.qpid.proton.amqp.messaging.Properties;\n+import org.apache.qpid.proton.amqp.messaging.Released;\n+import org.apache.qpid.proton.amqp.transport.DeliveryState;\n+import org.apache.qpid.proton.engine.Delivery;\n+import org.apache.qpid.proton.engine.Event;\n+import org.apache.qpid.proton.engine.Receiver;\n+\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Every SAS token based authentication over AMQP requires a CBS session with a sender and receiver link. This\n+ * class defines the receiver link which receives authentication status codes corresponding to each authentication attempt.\n+ */\n+@Slf4j\n+public final class AmqpsCbsReceiverLinkHandler extends AmqpsReceiverLinkHandler\n+{\n+    private final static String APPLICATION_PROPERTY_STATUS_CODE = \"status-code\";\n+    private final static String APPLICATION_PROPERTY_STATUS_DESCRIPTION = \"status-description\";\n+\n+    private static final String RECEIVER_LINK_ENDPOINT_PATH = \"$cbs\";\n+    private static final String RECEIVER_LINK_TAG_PREFIX = \"cbs-receiver\";\n+\n+    private Map<UUID, AuthenticationMessageCallback> correlationMap = new ConcurrentHashMap<>();\n+\n+    AmqpsCbsReceiverLinkHandler(Receiver receiver, AmqpsLinkStateCallback amqpsLinkStateCallback)\n+    {\n+        super(receiver, amqpsLinkStateCallback, UUID.randomUUID().toString());\n+        this.receiverLinkTag = RECEIVER_LINK_TAG_PREFIX;\n+        this.receiverLinkAddress = RECEIVER_LINK_ENDPOINT_PATH;\n+    }\n+\n+    static String getCbsTag()\n+    {\n+        return RECEIVER_LINK_TAG_PREFIX;\n+    }\n+\n+    @Override\n+    public String getLinkInstanceType()\n+    {\n+        return \"cbs\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84c9fc637f82364c1493a9052724bcf164040718"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjU5MjUzOnYy", "diffSide": "RIGHT", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/amqps/AmqpsCbsReceiverLinkHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMjoyMDo1N1rOGgyZOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMjoyMzowNVrOGgycRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzMzI3Mw==", "bodyText": "what is correlationmap?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437033273", "createdAt": "2020-06-08T22:20:57Z", "author": {"login": "bikamani"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/amqps/AmqpsCbsReceiverLinkHandler.java", "diffHunk": "@@ -0,0 +1,117 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.device.transport.amqps;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.qpid.proton.amqp.messaging.Properties;\n+import org.apache.qpid.proton.amqp.messaging.Released;\n+import org.apache.qpid.proton.amqp.transport.DeliveryState;\n+import org.apache.qpid.proton.engine.Delivery;\n+import org.apache.qpid.proton.engine.Event;\n+import org.apache.qpid.proton.engine.Receiver;\n+\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Every SAS token based authentication over AMQP requires a CBS session with a sender and receiver link. This\n+ * class defines the receiver link which receives authentication status codes corresponding to each authentication attempt.\n+ */\n+@Slf4j\n+public final class AmqpsCbsReceiverLinkHandler extends AmqpsReceiverLinkHandler\n+{\n+    private final static String APPLICATION_PROPERTY_STATUS_CODE = \"status-code\";\n+    private final static String APPLICATION_PROPERTY_STATUS_DESCRIPTION = \"status-description\";\n+\n+    private static final String RECEIVER_LINK_ENDPOINT_PATH = \"$cbs\";\n+    private static final String RECEIVER_LINK_TAG_PREFIX = \"cbs-receiver\";\n+\n+    private Map<UUID, AuthenticationMessageCallback> correlationMap = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84c9fc637f82364c1493a9052724bcf164040718"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzNDA1Mg==", "bodyText": "I can add some comments to explain this. When the CBS receiver link gets a message from iothub, it needs to correlate that message's correlation id back to a callback so that a device session knows that it was authenticated", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437034052", "createdAt": "2020-06-08T22:23:05Z", "author": {"login": "timtay-microsoft"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/amqps/AmqpsCbsReceiverLinkHandler.java", "diffHunk": "@@ -0,0 +1,117 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.device.transport.amqps;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.qpid.proton.amqp.messaging.Properties;\n+import org.apache.qpid.proton.amqp.messaging.Released;\n+import org.apache.qpid.proton.amqp.transport.DeliveryState;\n+import org.apache.qpid.proton.engine.Delivery;\n+import org.apache.qpid.proton.engine.Event;\n+import org.apache.qpid.proton.engine.Receiver;\n+\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Every SAS token based authentication over AMQP requires a CBS session with a sender and receiver link. This\n+ * class defines the receiver link which receives authentication status codes corresponding to each authentication attempt.\n+ */\n+@Slf4j\n+public final class AmqpsCbsReceiverLinkHandler extends AmqpsReceiverLinkHandler\n+{\n+    private final static String APPLICATION_PROPERTY_STATUS_CODE = \"status-code\";\n+    private final static String APPLICATION_PROPERTY_STATUS_DESCRIPTION = \"status-description\";\n+\n+    private static final String RECEIVER_LINK_ENDPOINT_PATH = \"$cbs\";\n+    private static final String RECEIVER_LINK_TAG_PREFIX = \"cbs-receiver\";\n+\n+    private Map<UUID, AuthenticationMessageCallback> correlationMap = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzMzI3Mw=="}, "originalCommit": {"oid": "84c9fc637f82364c1493a9052724bcf164040718"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjU5ODk5OnYy", "diffSide": "RIGHT", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/amqps/AmqpsCbsSenderLinkHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMjoyMzo0NlrOGgydJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMjoyODozOVrOGgykRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzNDI3OQ==", "bodyText": "you can use CBS_REPLY  here", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437034279", "createdAt": "2020-06-08T22:23:46Z", "author": {"login": "bikamani"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/amqps/AmqpsCbsSenderLinkHandler.java", "diffHunk": "@@ -0,0 +1,120 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.device.transport.amqps;\n+\n+import com.microsoft.azure.sdk.iot.device.DeviceClientConfig;\n+import com.microsoft.azure.sdk.iot.device.Message;\n+import com.microsoft.azure.sdk.iot.device.exceptions.TransportException;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.qpid.proton.Proton;\n+import org.apache.qpid.proton.amqp.messaging.AmqpValue;\n+import org.apache.qpid.proton.amqp.messaging.ApplicationProperties;\n+import org.apache.qpid.proton.amqp.messaging.Properties;\n+import org.apache.qpid.proton.amqp.messaging.Section;\n+import org.apache.qpid.proton.engine.Sender;\n+import org.apache.qpid.proton.message.impl.MessageImpl;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+/**\n+ * Every SAS token based authentication over AMQP requires a CBS session with a sender and receiver link. This\n+ * class defines the sender link which proactively sends renewed sas tokens to keep the device sessions authenticated.\n+ */\n+@Slf4j\n+public final class AmqpsCbsSenderLinkHandler extends AmqpsSenderLinkHandler\n+{\n+    private static final String SENDER_LINK_ENDPOINT_PATH = \"$cbs\";\n+\n+    private static final String SENDER_LINK_TAG_PREFIX = \"cbs-sender\";\n+\n+    private static final String CBS_TO = \"$cbs\";\n+    private static final String CBS_REPLY = \"cbs\";\n+\n+    private static final String OPERATION_KEY = \"operation\";\n+    private static final String TYPE_KEY = \"type\";\n+    private static final String NAME_KEY = \"name\";\n+\n+    private static final String OPERATION_VALUE = \"put-token\";\n+    private static final String TYPE_VALUE = \"servicebus.windows.net:sastoken\";\n+\n+    private static final String DEVICES_PATH = \"/devices/\";\n+\n+    AmqpsCbsSenderLinkHandler(Sender sender, AmqpsLinkStateCallback amqpsLinkStateCallback)\n+    {\n+        super(sender, amqpsLinkStateCallback, UUID.randomUUID().toString());\n+\n+        this.senderLinkTag = SENDER_LINK_TAG_PREFIX;\n+        this.senderLinkAddress = SENDER_LINK_ENDPOINT_PATH;\n+    }\n+\n+    static String getCbsTag()\n+    {\n+        return SENDER_LINK_TAG_PREFIX;\n+    }\n+\n+    @Override\n+    public String getLinkInstanceType()\n+    {\n+        return \"cbs\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84c9fc637f82364c1493a9052724bcf164040718"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzNjEwMA==", "bodyText": "I'll add a private static final variable called LINK_TYPE on all these sender/receiver links instead, so they all feel similar", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437036100", "createdAt": "2020-06-08T22:28:39Z", "author": {"login": "timtay-microsoft"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/amqps/AmqpsCbsSenderLinkHandler.java", "diffHunk": "@@ -0,0 +1,120 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.device.transport.amqps;\n+\n+import com.microsoft.azure.sdk.iot.device.DeviceClientConfig;\n+import com.microsoft.azure.sdk.iot.device.Message;\n+import com.microsoft.azure.sdk.iot.device.exceptions.TransportException;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.qpid.proton.Proton;\n+import org.apache.qpid.proton.amqp.messaging.AmqpValue;\n+import org.apache.qpid.proton.amqp.messaging.ApplicationProperties;\n+import org.apache.qpid.proton.amqp.messaging.Properties;\n+import org.apache.qpid.proton.amqp.messaging.Section;\n+import org.apache.qpid.proton.engine.Sender;\n+import org.apache.qpid.proton.message.impl.MessageImpl;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+/**\n+ * Every SAS token based authentication over AMQP requires a CBS session with a sender and receiver link. This\n+ * class defines the sender link which proactively sends renewed sas tokens to keep the device sessions authenticated.\n+ */\n+@Slf4j\n+public final class AmqpsCbsSenderLinkHandler extends AmqpsSenderLinkHandler\n+{\n+    private static final String SENDER_LINK_ENDPOINT_PATH = \"$cbs\";\n+\n+    private static final String SENDER_LINK_TAG_PREFIX = \"cbs-sender\";\n+\n+    private static final String CBS_TO = \"$cbs\";\n+    private static final String CBS_REPLY = \"cbs\";\n+\n+    private static final String OPERATION_KEY = \"operation\";\n+    private static final String TYPE_KEY = \"type\";\n+    private static final String NAME_KEY = \"name\";\n+\n+    private static final String OPERATION_VALUE = \"put-token\";\n+    private static final String TYPE_VALUE = \"servicebus.windows.net:sastoken\";\n+\n+    private static final String DEVICES_PATH = \"/devices/\";\n+\n+    AmqpsCbsSenderLinkHandler(Sender sender, AmqpsLinkStateCallback amqpsLinkStateCallback)\n+    {\n+        super(sender, amqpsLinkStateCallback, UUID.randomUUID().toString());\n+\n+        this.senderLinkTag = SENDER_LINK_TAG_PREFIX;\n+        this.senderLinkAddress = SENDER_LINK_ENDPOINT_PATH;\n+    }\n+\n+    static String getCbsTag()\n+    {\n+        return SENDER_LINK_TAG_PREFIX;\n+    }\n+\n+    @Override\n+    public String getLinkInstanceType()\n+    {\n+        return \"cbs\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzNDI3OQ=="}, "originalCommit": {"oid": "84c9fc637f82364c1493a9052724bcf164040718"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjYxMDI5OnYy", "diffSide": "RIGHT", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/amqps/AmqpsCbsSenderLinkHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMjoyODoyOVrOGgykCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMjozMDowOFrOGgymbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzNjA0MA==", "bodyText": "In which case is this value null?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437036040", "createdAt": "2020-06-08T22:28:29Z", "author": {"login": "bikamani"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/amqps/AmqpsCbsSenderLinkHandler.java", "diffHunk": "@@ -0,0 +1,120 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.device.transport.amqps;\n+\n+import com.microsoft.azure.sdk.iot.device.DeviceClientConfig;\n+import com.microsoft.azure.sdk.iot.device.Message;\n+import com.microsoft.azure.sdk.iot.device.exceptions.TransportException;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.qpid.proton.Proton;\n+import org.apache.qpid.proton.amqp.messaging.AmqpValue;\n+import org.apache.qpid.proton.amqp.messaging.ApplicationProperties;\n+import org.apache.qpid.proton.amqp.messaging.Properties;\n+import org.apache.qpid.proton.amqp.messaging.Section;\n+import org.apache.qpid.proton.engine.Sender;\n+import org.apache.qpid.proton.message.impl.MessageImpl;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+/**\n+ * Every SAS token based authentication over AMQP requires a CBS session with a sender and receiver link. This\n+ * class defines the sender link which proactively sends renewed sas tokens to keep the device sessions authenticated.\n+ */\n+@Slf4j\n+public final class AmqpsCbsSenderLinkHandler extends AmqpsSenderLinkHandler\n+{\n+    private static final String SENDER_LINK_ENDPOINT_PATH = \"$cbs\";\n+\n+    private static final String SENDER_LINK_TAG_PREFIX = \"cbs-sender\";\n+\n+    private static final String CBS_TO = \"$cbs\";\n+    private static final String CBS_REPLY = \"cbs\";\n+\n+    private static final String OPERATION_KEY = \"operation\";\n+    private static final String TYPE_KEY = \"type\";\n+    private static final String NAME_KEY = \"name\";\n+\n+    private static final String OPERATION_VALUE = \"put-token\";\n+    private static final String TYPE_VALUE = \"servicebus.windows.net:sastoken\";\n+\n+    private static final String DEVICES_PATH = \"/devices/\";\n+\n+    AmqpsCbsSenderLinkHandler(Sender sender, AmqpsLinkStateCallback amqpsLinkStateCallback)\n+    {\n+        super(sender, amqpsLinkStateCallback, UUID.randomUUID().toString());\n+\n+        this.senderLinkTag = SENDER_LINK_TAG_PREFIX;\n+        this.senderLinkAddress = SENDER_LINK_ENDPOINT_PATH;\n+    }\n+\n+    static String getCbsTag()\n+    {\n+        return SENDER_LINK_TAG_PREFIX;\n+    }\n+\n+    @Override\n+    public String getLinkInstanceType()\n+    {\n+        return \"cbs\";\n+    }\n+\n+    UUID sendAuthenticationMessage(DeviceClientConfig deviceClientConfig) throws TransportException\n+    {\n+        UUID correlationId = UUID.randomUUID();\n+        MessageImpl outgoingMessage = createCBSAuthenticationMessage(deviceClientConfig, correlationId);\n+\n+        AmqpsSendResult sendResult = this.sendMessageAndGetDeliveryTag(outgoingMessage);\n+\n+        //This message will be ignored when this send is acknowledged, so just provide an empty message for the map\n+        inProgressMessages.put(sendResult.getDeliveryTag(), new Message());\n+\n+        return correlationId;\n+    }\n+\n+    private MessageImpl createCBSAuthenticationMessage(DeviceClientConfig deviceClientConfig, UUID correlationId) throws TransportException\n+    {\n+        MessageImpl outgoingMessage = (MessageImpl) Proton.message();\n+\n+        Properties properties = new Properties();\n+\n+        // Note that setting \"messageId = correlationId\" is intentional.\n+        // IotHub only responds correctly if this correlation id is set this way\n+        properties.setMessageId(correlationId);\n+\n+        properties.setTo(CBS_TO);\n+        properties.setReplyTo(CBS_REPLY);\n+        outgoingMessage.setProperties(properties);\n+\n+        Map<String, Object> userProperties = new HashMap<>(3);\n+        userProperties.put(OPERATION_KEY, OPERATION_VALUE);\n+        userProperties.put(TYPE_KEY, TYPE_VALUE);\n+\n+        String host = deviceClientConfig.getGatewayHostname();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84c9fc637f82364c1493a9052724bcf164040718"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzNjY1Mw==", "bodyText": "Gateway host name is only not null when connecting to edgehub. Typically, it is null", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437036653", "createdAt": "2020-06-08T22:30:08Z", "author": {"login": "timtay-microsoft"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/amqps/AmqpsCbsSenderLinkHandler.java", "diffHunk": "@@ -0,0 +1,120 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.device.transport.amqps;\n+\n+import com.microsoft.azure.sdk.iot.device.DeviceClientConfig;\n+import com.microsoft.azure.sdk.iot.device.Message;\n+import com.microsoft.azure.sdk.iot.device.exceptions.TransportException;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.qpid.proton.Proton;\n+import org.apache.qpid.proton.amqp.messaging.AmqpValue;\n+import org.apache.qpid.proton.amqp.messaging.ApplicationProperties;\n+import org.apache.qpid.proton.amqp.messaging.Properties;\n+import org.apache.qpid.proton.amqp.messaging.Section;\n+import org.apache.qpid.proton.engine.Sender;\n+import org.apache.qpid.proton.message.impl.MessageImpl;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+/**\n+ * Every SAS token based authentication over AMQP requires a CBS session with a sender and receiver link. This\n+ * class defines the sender link which proactively sends renewed sas tokens to keep the device sessions authenticated.\n+ */\n+@Slf4j\n+public final class AmqpsCbsSenderLinkHandler extends AmqpsSenderLinkHandler\n+{\n+    private static final String SENDER_LINK_ENDPOINT_PATH = \"$cbs\";\n+\n+    private static final String SENDER_LINK_TAG_PREFIX = \"cbs-sender\";\n+\n+    private static final String CBS_TO = \"$cbs\";\n+    private static final String CBS_REPLY = \"cbs\";\n+\n+    private static final String OPERATION_KEY = \"operation\";\n+    private static final String TYPE_KEY = \"type\";\n+    private static final String NAME_KEY = \"name\";\n+\n+    private static final String OPERATION_VALUE = \"put-token\";\n+    private static final String TYPE_VALUE = \"servicebus.windows.net:sastoken\";\n+\n+    private static final String DEVICES_PATH = \"/devices/\";\n+\n+    AmqpsCbsSenderLinkHandler(Sender sender, AmqpsLinkStateCallback amqpsLinkStateCallback)\n+    {\n+        super(sender, amqpsLinkStateCallback, UUID.randomUUID().toString());\n+\n+        this.senderLinkTag = SENDER_LINK_TAG_PREFIX;\n+        this.senderLinkAddress = SENDER_LINK_ENDPOINT_PATH;\n+    }\n+\n+    static String getCbsTag()\n+    {\n+        return SENDER_LINK_TAG_PREFIX;\n+    }\n+\n+    @Override\n+    public String getLinkInstanceType()\n+    {\n+        return \"cbs\";\n+    }\n+\n+    UUID sendAuthenticationMessage(DeviceClientConfig deviceClientConfig) throws TransportException\n+    {\n+        UUID correlationId = UUID.randomUUID();\n+        MessageImpl outgoingMessage = createCBSAuthenticationMessage(deviceClientConfig, correlationId);\n+\n+        AmqpsSendResult sendResult = this.sendMessageAndGetDeliveryTag(outgoingMessage);\n+\n+        //This message will be ignored when this send is acknowledged, so just provide an empty message for the map\n+        inProgressMessages.put(sendResult.getDeliveryTag(), new Message());\n+\n+        return correlationId;\n+    }\n+\n+    private MessageImpl createCBSAuthenticationMessage(DeviceClientConfig deviceClientConfig, UUID correlationId) throws TransportException\n+    {\n+        MessageImpl outgoingMessage = (MessageImpl) Proton.message();\n+\n+        Properties properties = new Properties();\n+\n+        // Note that setting \"messageId = correlationId\" is intentional.\n+        // IotHub only responds correctly if this correlation id is set this way\n+        properties.setMessageId(correlationId);\n+\n+        properties.setTo(CBS_TO);\n+        properties.setReplyTo(CBS_REPLY);\n+        outgoingMessage.setProperties(properties);\n+\n+        Map<String, Object> userProperties = new HashMap<>(3);\n+        userProperties.put(OPERATION_KEY, OPERATION_VALUE);\n+        userProperties.put(TYPE_KEY, TYPE_VALUE);\n+\n+        String host = deviceClientConfig.getGatewayHostname();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzNjA0MA=="}, "originalCommit": {"oid": "84c9fc637f82364c1493a9052724bcf164040718"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjYzMDE1OnYy", "diffSide": "LEFT", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/amqps/AmqpsMessage.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMjozNjozMlrOGgyvpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMjo0NToyNVrOGgy7QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzOTAxMw==", "bodyText": "So all these is not being used?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437039013", "createdAt": "2020-06-08T22:36:32Z", "author": {"login": "bikamani"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/amqps/AmqpsMessage.java", "diffHunk": "@@ -19,96 +17,18 @@\n  */\n public class AmqpsMessage extends MessageImpl\n {\n-    private Delivery _delivery;\n-\n-    private MessageType amqpsMessageType;\n-\n-    public enum ACK_TYPE\n-    {\n-        COMPLETE,\n-        ABANDON,\n-        REJECT\n-    }\n-\n-    private DeviceClientConfig deviceClientConfig;\n+    @Getter\n+    @Setter\n+    private Delivery delivery;\n \n     /**\n      * Sends acknowledgement of this message using the provided ACK_TYPE.\n-     * @param ackType acknowledgement type to send\n-     */\n-    public void acknowledge(ACK_TYPE ackType)\n-    {\n-        switch(ackType)\n-        {\n-            // Codes_SRS_AMQPSMESSAGE_14_001: [If the ACK_TYPE is COMPLETE, the function shall set an Accepted disposition on the private Delivery object.]\n-            case COMPLETE:\n-                _delivery.disposition(Accepted.getInstance());\n-                break;\n-            // Codes_SRS_AMQPSMESSAGE_14_002: [If the ACK_TYPE is ABANDON, the function shall set a Released disposition on the private Delivery object.]\n-            case ABANDON:\n-                _delivery.disposition(Released.getInstance());\n-                break;\n-            // Codes_SRS_AMQPSMESSAGE_14_003: [If the ACK_TYPE is REJECT, the function shall set a Rejected disposition on the private Delivery object.]\n-            case REJECT:\n-                _delivery.disposition(new Rejected());\n-                break;\n-            default:\n-                //This should never happen\n-                throw new IllegalStateException(\"Invalid ack type given. Type \"+ ackType +\" does not exist.\");\n-        }\n-        // Codes_SRS_AMQPSMESSAGE_14_005: [The function shall settle the delivery after setting the proper disposition.]\n-        _delivery.settle();\n-    }\n-\n-    /**\n-     * Set this AmqpsMessage Delivery Object\n-     * @param _delivery the new Delivery\n-     */\n-    public void setDelivery(Delivery _delivery)\n-    {\n-        this._delivery = _delivery;\n-    }\n-\n-    /**\n-     * Get the AmqpsMessageMessageType\n-     * @return The type of the message\n-     */\n-    public MessageType getAmqpsMessageType()\n-    {\n-        // Codes_SRS_AMQPSMESSAGE_12_001: [Getter for the MessageType.]\n-        return amqpsMessageType;\n-    }\n-\n-    /**\n-     * Set the AmqpsMessageMessageType\n      *\n-     * @param amqpsMessageType the new AmqpsMessageMessageType\n-     */\n-    public void setAmqpsMessageType(MessageType amqpsMessageType)\n-    {\n-        // Codes_SRS_AMQPSMESSAGE_12_002: [Setter for the MessageType.]\n-        this.amqpsMessageType = amqpsMessageType;\n-    }\n-\n-    /**\n-     * Get the deviceClientConfig\n-     *\n-     * @return The type of the message\n-     */\n-    public DeviceClientConfig getDeviceClientConfig()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84c9fc637f82364c1493a9052724bcf164040718"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA0MTk4NQ==", "bodyText": "correct", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/793#discussion_r437041985", "createdAt": "2020-06-08T22:45:25Z", "author": {"login": "timtay-microsoft"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/amqps/AmqpsMessage.java", "diffHunk": "@@ -19,96 +17,18 @@\n  */\n public class AmqpsMessage extends MessageImpl\n {\n-    private Delivery _delivery;\n-\n-    private MessageType amqpsMessageType;\n-\n-    public enum ACK_TYPE\n-    {\n-        COMPLETE,\n-        ABANDON,\n-        REJECT\n-    }\n-\n-    private DeviceClientConfig deviceClientConfig;\n+    @Getter\n+    @Setter\n+    private Delivery delivery;\n \n     /**\n      * Sends acknowledgement of this message using the provided ACK_TYPE.\n-     * @param ackType acknowledgement type to send\n-     */\n-    public void acknowledge(ACK_TYPE ackType)\n-    {\n-        switch(ackType)\n-        {\n-            // Codes_SRS_AMQPSMESSAGE_14_001: [If the ACK_TYPE is COMPLETE, the function shall set an Accepted disposition on the private Delivery object.]\n-            case COMPLETE:\n-                _delivery.disposition(Accepted.getInstance());\n-                break;\n-            // Codes_SRS_AMQPSMESSAGE_14_002: [If the ACK_TYPE is ABANDON, the function shall set a Released disposition on the private Delivery object.]\n-            case ABANDON:\n-                _delivery.disposition(Released.getInstance());\n-                break;\n-            // Codes_SRS_AMQPSMESSAGE_14_003: [If the ACK_TYPE is REJECT, the function shall set a Rejected disposition on the private Delivery object.]\n-            case REJECT:\n-                _delivery.disposition(new Rejected());\n-                break;\n-            default:\n-                //This should never happen\n-                throw new IllegalStateException(\"Invalid ack type given. Type \"+ ackType +\" does not exist.\");\n-        }\n-        // Codes_SRS_AMQPSMESSAGE_14_005: [The function shall settle the delivery after setting the proper disposition.]\n-        _delivery.settle();\n-    }\n-\n-    /**\n-     * Set this AmqpsMessage Delivery Object\n-     * @param _delivery the new Delivery\n-     */\n-    public void setDelivery(Delivery _delivery)\n-    {\n-        this._delivery = _delivery;\n-    }\n-\n-    /**\n-     * Get the AmqpsMessageMessageType\n-     * @return The type of the message\n-     */\n-    public MessageType getAmqpsMessageType()\n-    {\n-        // Codes_SRS_AMQPSMESSAGE_12_001: [Getter for the MessageType.]\n-        return amqpsMessageType;\n-    }\n-\n-    /**\n-     * Set the AmqpsMessageMessageType\n      *\n-     * @param amqpsMessageType the new AmqpsMessageMessageType\n-     */\n-    public void setAmqpsMessageType(MessageType amqpsMessageType)\n-    {\n-        // Codes_SRS_AMQPSMESSAGE_12_002: [Setter for the MessageType.]\n-        this.amqpsMessageType = amqpsMessageType;\n-    }\n-\n-    /**\n-     * Get the deviceClientConfig\n-     *\n-     * @return The type of the message\n-     */\n-    public DeviceClientConfig getDeviceClientConfig()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzOTAxMw=="}, "originalCommit": {"oid": "84c9fc637f82364c1493a9052724bcf164040718"}, "originalPosition": 98}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2809, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}