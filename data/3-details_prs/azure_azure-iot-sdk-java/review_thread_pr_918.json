{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4ODUzNTQ4", "number": 918, "reviewThreads": {"totalCount": 58, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMjozMTozNlrOEmWIGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDozNDo0M1rOEpQQzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NjQzODY2OnYy", "diffSide": "RIGHT", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/TransportUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMjozMTozNlrOHWUKZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMjozMTozNlrOHWUKZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE2MTA2Mw==", "bodyText": "Device client should now call the latest GA version for pnp flow only", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r493161063", "createdAt": "2020-09-23T02:31:36Z", "author": {"login": "vinagesh"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/TransportUtils.java", "diffHunk": "@@ -10,7 +10,7 @@\n     public static String IOTHUB_API_VERSION = \"2019-10-01\";\n \n     // The preview API version support has been added to enable support for PnP features. This will be removed once the service goes GA.\n-    public static String IOTHUB_API_VERSION_PREVIEW = \"2020-05-31-preview\";\n+    public static String IOTHUB_API_VERSION_PREVIEW = \"2020-09-30\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89bd8ee689458431662b47b6733fb8b7ea2f40e0"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NjQzOTc5OnYy", "diffSide": "RIGHT", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/digitaltwin/DigitalTwinServiceClientTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMjozMjoxMlrOHWULEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMjozMjoxMlrOHWULEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE2MTIzNA==", "bodyText": "Still a TODO", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r493161234", "createdAt": "2020-09-23T02:32:12Z", "author": {"login": "vinagesh"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/digitaltwin/DigitalTwinServiceClientTests.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.digitaltwin;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89bd8ee689458431662b47b6733fb8b7ea2f40e0"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NjQ0MjUyOnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMjozMzo0MlrOHWUMpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMjozMzo0MlrOHWUMpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE2MTYzNg==", "bodyText": "This is required to generate private jars and will be removed before checking in.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r493161636", "createdAt": "2020-09-23T02:33:42Z", "author": {"login": "vinagesh"}, "path": "service/iot-service-client/pom.xml", "diffHunk": "@@ -32,8 +32,32 @@\n     </scm>\n     <properties>\n         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+        <ms-rest-client-version>1.7.9</ms-rest-client-version>\n     </properties>\n+    <repositories>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89bd8ee689458431662b47b6733fb8b7ea2f40e0"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NjQ0MzY2OnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/ServiceClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMjozNDoxOVrOHWUNUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMjozNDoxOVrOHWUNUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE2MTgxMA==", "bodyText": "Adding missing params so that javadocs does no fail on build", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r493161810", "createdAt": "2020-09-23T02:34:19Z", "author": {"login": "vinagesh"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/ServiceClient.java", "diffHunk": "@@ -89,6 +89,7 @@ protected ServiceClient(IotHubConnectionString iotHubConnectionString, IotHubSer\n      *\n      * @param iotHubConnectionString The ConnectionString object for the IotHub\n      * @param iotHubServiceClientProtocol protocol to use\n+     * @param options options for proxy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89bd8ee689458431662b47b6733fb8b7ea2f40e0"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NjQ0NDc1OnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMjozNDo0OFrOHWUN3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMjozNDo0OFrOHWUN3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE2MTk1MA==", "bodyText": "This is the implementation of pnp APIs and the most important part of the PR.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r493161950", "createdAt": "2020-09-23T02:34:48Z", "author": {"login": "vinagesh"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "diffHunk": "@@ -0,0 +1,216 @@\n+package com.microsoft.azure.sdk.iot.service.digitaltwin;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.SasTokenProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceClientCredentialsProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionString;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionStringParser;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.DigitalTwinsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.IotHubGatewayServiceAPIsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.DigitalTwins;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinGetDigitalTwinHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeRootLevelCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinUpdateDigitalTwinHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.DeserializationHelpers;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.UpdateOperationUtility;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.CommandRequestOptions;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.UpdateRequestOptions;\n+import com.microsoft.rest.*;\n+import com.microsoft.rest.serializer.JacksonAdapter;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Setter;\n+import rx.Observable;\n+import rx.functions.Func1;\n+import rx.schedulers.Schedulers;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static lombok.AccessLevel.PACKAGE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89bd8ee689458431662b47b6733fb8b7ea2f40e0"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTI0MzQwOnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMjoyNzoxNlrOHXDGlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMjoyNzoxNlrOHXDGlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkzMDEzMw==", "bodyText": "copyright", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r493930133", "createdAt": "2020-09-23T22:27:16Z", "author": {"login": "abhipsaMisra"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "diffHunk": "@@ -0,0 +1,218 @@\n+package com.microsoft.azure.sdk.iot.service.digitaltwin;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0cb7b0f6f8553609be356ce554b4421952a248d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTI0OTY4OnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMjozMDowN1rOHXDKQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMjozMDowN1rOHXDKQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkzMTA3NA==", "bodyText": "needs to return Observable<DigitalTwinCommandResponse>", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r493931074", "createdAt": "2020-09-23T22:30:07Z", "author": {"login": "abhipsaMisra"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "diffHunk": "@@ -0,0 +1,218 @@\n+package com.microsoft.azure.sdk.iot.service.digitaltwin;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.SasTokenProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceClientCredentialsProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionString;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionStringParser;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.DigitalTwinsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.IotHubGatewayServiceAPIsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.DigitalTwins;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinGetHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeRootLevelCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinUpdateHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.DeserializationHelpers;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.UpdateOperationUtility;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandRequestOptions;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions;\n+import com.microsoft.rest.*;\n+import com.microsoft.rest.serializer.JacksonAdapter;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Setter;\n+import rx.Observable;\n+import rx.schedulers.Schedulers;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.Tools.*;\n+import static lombok.AccessLevel.PACKAGE;\n+\n+public class DigitalTwinAsyncClient {\n+    @Setter(PACKAGE)\n+    private DigitalTwinsImpl digitalTwin;\n+    private static ObjectMapper objectMapper = new ObjectMapper();\n+\n+    /***\n+     * Creates an implementation instance of {@link DigitalTwins} that is used to invoke the Digital Twin features\n+     * @param connectionString The IoTHub connection string\n+     */\n+    @Builder(builderMethodName = \"buildFromConnectionString\", builderClassName = \"FromConnectionStringBuilder\")\n+    public DigitalTwinAsyncClient(@NonNull String connectionString) {\n+        ServiceConnectionString serviceConnectionString = ServiceConnectionStringParser.parseConnectionString(connectionString);\n+        SasTokenProvider sasTokenProvider = serviceConnectionString.createSasTokenProvider();\n+        String httpsEndpoint = serviceConnectionString.getHttpsEndpoint();\n+\n+        init(sasTokenProvider, httpsEndpoint);\n+    }\n+\n+    private void init(SasTokenProvider sasTokenProvider, String httpsEndpoint) {\n+        RestClient simpleRestClient = new RestClient.Builder()\n+                .withBaseUrl(httpsEndpoint)\n+                .withCredentials(new ServiceClientCredentialsProvider(sasTokenProvider))\n+                .withResponseBuilderFactory(new ServiceResponseBuilder.Factory())\n+                .withSerializerAdapter(new JacksonAdapter())\n+                .build();\n+\n+        IotHubGatewayServiceAPIsImpl protocolLayerClient = new IotHubGatewayServiceAPIsImpl(simpleRestClient);\n+        digitalTwin = new DigitalTwinsImpl(simpleRestClient.retrofit(), protocolLayerClient);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The class to deserialize the application/json into.\n+     * @param <T> The generic type to deserialize the application/json into.\n+     * @return The application/json of the digital twin.\n+     */\n+    public <T> Observable<T> getDigitalTwin (@NonNull String digitalTwinId, Class<T> clazz)\n+    {\n+        return digitalTwin.getDigitalTwinAsync(digitalTwinId)\n+                .filter(Objects::nonNull)\n+                .map(response -> {\n+                    T genericResponse = null;\n+                    try {\n+                        genericResponse = DeserializationHelpers.castObject(objectMapper, response, clazz);\n+                    } catch (JsonProcessingException e) {\n+                        Observable.error(e);\n+                    }\n+                    return genericResponse;\n+                })\n+                .subscribeOn(Schedulers.io());\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The class to deserialize the application/json into.\n+     * @param <T> The generic type to deserialize the application/json into.\n+     * @return A {@link ServiceResponseWithHeaders} representing deserialized application/json of the digital twin with {@link DigitalTwinGetHeaders}.\n+     */\n+    public <T> Observable<ServiceResponseWithHeaders<T, DigitalTwinGetHeaders>> getDigitalTwinWithResponse (@NonNull String digitalTwinId, Class<T> clazz)\n+    {\n+        return digitalTwin.getDigitalTwinWithServiceResponseAsync(digitalTwinId)\n+                .map(response -> {\n+                    T genericResponse = null;\n+                    try {\n+                        genericResponse = DeserializationHelpers.castObject(objectMapper, response.body(), clazz);\n+                    } catch (JsonProcessingException e) {\n+                        Observable.error(e);\n+                    }\n+                    return new ServiceResponseWithHeaders<>(genericResponse, response.headers(), response.response());\n+                })\n+                .subscribeOn(Schedulers.io());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The JSON patch to apply to the specified digital twin. This argument can be created using {@link UpdateOperationUtility}.\n+     * @return A {@link ServiceResponseWithHeaders} with {@link DigitalTwinUpdateHeaders}.\n+     */\n+    public Observable<ServiceResponseWithHeaders<Void, DigitalTwinUpdateHeaders>> updateDigitalTwinWithResponse (@NonNull String digitalTwinId, @NonNull List<Object> digitalTwinUpdateOperations)\n+    {\n+        return digitalTwin.updateDigitalTwinWithServiceResponseAsync(digitalTwinId, digitalTwinUpdateOperations)\n+                .subscribeOn(Schedulers.io());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The JSON patch to apply to the specified digital twin. This argument can be created using {@link UpdateOperationUtility}.\n+     * @param options The optional settings for this request.\n+     * @return A {@link ServiceResponseWithHeaders} with {@link DigitalTwinUpdateHeaders}.\n+     */\n+    public Observable<ServiceResponseWithHeaders<Void, DigitalTwinUpdateHeaders>> updateDigitalTwinWithResponse (@NonNull String digitalTwinId, @NonNull List<Object> digitalTwinUpdateOperations, @NonNull DigitalTwinUpdateRequestOptions options)\n+    {\n+        String ifMatch = options != null ? options.getIfMatch() : null;\n+        return digitalTwin.updateDigitalTwinWithServiceResponseAsync(digitalTwinId, digitalTwinUpdateOperations, ifMatch)\n+                .subscribeOn(Schedulers.io());\n+    }\n+\n+    /**\n+     * Invoke a command on a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param commandName The command to be invoked.\n+     * @param payload The command payload.\n+     * @return The application/json command invocation response.\n+     */\n+    public Observable<String> invokeCommand (@NonNull String digitalTwinId, @NonNull String commandName, String payload)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0cb7b0f6f8553609be356ce554b4421952a248d"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTI1NjkwOnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMjozMzozM1rOHXDOrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMjozMzozM1rOHXDOrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkzMjIwNQ==", "bodyText": "nit: call \".withResponse\" API instead", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r493932205", "createdAt": "2020-09-23T22:33:33Z", "author": {"login": "abhipsaMisra"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "diffHunk": "@@ -0,0 +1,218 @@\n+package com.microsoft.azure.sdk.iot.service.digitaltwin;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.SasTokenProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceClientCredentialsProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionString;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionStringParser;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.DigitalTwinsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.IotHubGatewayServiceAPIsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.DigitalTwins;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinGetHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeRootLevelCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinUpdateHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.DeserializationHelpers;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.UpdateOperationUtility;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandRequestOptions;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions;\n+import com.microsoft.rest.*;\n+import com.microsoft.rest.serializer.JacksonAdapter;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Setter;\n+import rx.Observable;\n+import rx.schedulers.Schedulers;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.Tools.*;\n+import static lombok.AccessLevel.PACKAGE;\n+\n+public class DigitalTwinAsyncClient {\n+    @Setter(PACKAGE)\n+    private DigitalTwinsImpl digitalTwin;\n+    private static ObjectMapper objectMapper = new ObjectMapper();\n+\n+    /***\n+     * Creates an implementation instance of {@link DigitalTwins} that is used to invoke the Digital Twin features\n+     * @param connectionString The IoTHub connection string\n+     */\n+    @Builder(builderMethodName = \"buildFromConnectionString\", builderClassName = \"FromConnectionStringBuilder\")\n+    public DigitalTwinAsyncClient(@NonNull String connectionString) {\n+        ServiceConnectionString serviceConnectionString = ServiceConnectionStringParser.parseConnectionString(connectionString);\n+        SasTokenProvider sasTokenProvider = serviceConnectionString.createSasTokenProvider();\n+        String httpsEndpoint = serviceConnectionString.getHttpsEndpoint();\n+\n+        init(sasTokenProvider, httpsEndpoint);\n+    }\n+\n+    private void init(SasTokenProvider sasTokenProvider, String httpsEndpoint) {\n+        RestClient simpleRestClient = new RestClient.Builder()\n+                .withBaseUrl(httpsEndpoint)\n+                .withCredentials(new ServiceClientCredentialsProvider(sasTokenProvider))\n+                .withResponseBuilderFactory(new ServiceResponseBuilder.Factory())\n+                .withSerializerAdapter(new JacksonAdapter())\n+                .build();\n+\n+        IotHubGatewayServiceAPIsImpl protocolLayerClient = new IotHubGatewayServiceAPIsImpl(simpleRestClient);\n+        digitalTwin = new DigitalTwinsImpl(simpleRestClient.retrofit(), protocolLayerClient);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The class to deserialize the application/json into.\n+     * @param <T> The generic type to deserialize the application/json into.\n+     * @return The application/json of the digital twin.\n+     */\n+    public <T> Observable<T> getDigitalTwin (@NonNull String digitalTwinId, Class<T> clazz)\n+    {\n+        return digitalTwin.getDigitalTwinAsync(digitalTwinId)\n+                .filter(Objects::nonNull)\n+                .map(response -> {\n+                    T genericResponse = null;\n+                    try {\n+                        genericResponse = DeserializationHelpers.castObject(objectMapper, response, clazz);\n+                    } catch (JsonProcessingException e) {\n+                        Observable.error(e);\n+                    }\n+                    return genericResponse;\n+                })\n+                .subscribeOn(Schedulers.io());\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The class to deserialize the application/json into.\n+     * @param <T> The generic type to deserialize the application/json into.\n+     * @return A {@link ServiceResponseWithHeaders} representing deserialized application/json of the digital twin with {@link DigitalTwinGetHeaders}.\n+     */\n+    public <T> Observable<ServiceResponseWithHeaders<T, DigitalTwinGetHeaders>> getDigitalTwinWithResponse (@NonNull String digitalTwinId, Class<T> clazz)\n+    {\n+        return digitalTwin.getDigitalTwinWithServiceResponseAsync(digitalTwinId)\n+                .map(response -> {\n+                    T genericResponse = null;\n+                    try {\n+                        genericResponse = DeserializationHelpers.castObject(objectMapper, response.body(), clazz);\n+                    } catch (JsonProcessingException e) {\n+                        Observable.error(e);\n+                    }\n+                    return new ServiceResponseWithHeaders<>(genericResponse, response.headers(), response.response());\n+                })\n+                .subscribeOn(Schedulers.io());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The JSON patch to apply to the specified digital twin. This argument can be created using {@link UpdateOperationUtility}.\n+     * @return A {@link ServiceResponseWithHeaders} with {@link DigitalTwinUpdateHeaders}.\n+     */\n+    public Observable<ServiceResponseWithHeaders<Void, DigitalTwinUpdateHeaders>> updateDigitalTwinWithResponse (@NonNull String digitalTwinId, @NonNull List<Object> digitalTwinUpdateOperations)\n+    {\n+        return digitalTwin.updateDigitalTwinWithServiceResponseAsync(digitalTwinId, digitalTwinUpdateOperations)\n+                .subscribeOn(Schedulers.io());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The JSON patch to apply to the specified digital twin. This argument can be created using {@link UpdateOperationUtility}.\n+     * @param options The optional settings for this request.\n+     * @return A {@link ServiceResponseWithHeaders} with {@link DigitalTwinUpdateHeaders}.\n+     */\n+    public Observable<ServiceResponseWithHeaders<Void, DigitalTwinUpdateHeaders>> updateDigitalTwinWithResponse (@NonNull String digitalTwinId, @NonNull List<Object> digitalTwinUpdateOperations, @NonNull DigitalTwinUpdateRequestOptions options)\n+    {\n+        String ifMatch = options != null ? options.getIfMatch() : null;\n+        return digitalTwin.updateDigitalTwinWithServiceResponseAsync(digitalTwinId, digitalTwinUpdateOperations, ifMatch)\n+                .subscribeOn(Schedulers.io());\n+    }\n+\n+    /**\n+     * Invoke a command on a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param commandName The command to be invoked.\n+     * @param payload The command payload.\n+     * @return The application/json command invocation response.\n+     */\n+    public Observable<String> invokeCommand (@NonNull String digitalTwinId, @NonNull String commandName, String payload)\n+    {\n+        return digitalTwin.invokeRootLevelCommandAsync(digitalTwinId, commandName, payload, null, null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0cb7b0f6f8553609be356ce554b4421952a248d"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTI2Mzg0OnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMjozNjozM1rOHXDSqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMjozOTowMFrOHXDV3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkzMzIyNg==", "bodyText": "\"String payload\" needs to be @nonnull, there needs to be another API overload without it", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r493933226", "createdAt": "2020-09-23T22:36:33Z", "author": {"login": "abhipsaMisra"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "diffHunk": "@@ -0,0 +1,218 @@\n+package com.microsoft.azure.sdk.iot.service.digitaltwin;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.SasTokenProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceClientCredentialsProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionString;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionStringParser;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.DigitalTwinsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.IotHubGatewayServiceAPIsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.DigitalTwins;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinGetHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeRootLevelCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinUpdateHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.DeserializationHelpers;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.UpdateOperationUtility;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandRequestOptions;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions;\n+import com.microsoft.rest.*;\n+import com.microsoft.rest.serializer.JacksonAdapter;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Setter;\n+import rx.Observable;\n+import rx.schedulers.Schedulers;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.Tools.*;\n+import static lombok.AccessLevel.PACKAGE;\n+\n+public class DigitalTwinAsyncClient {\n+    @Setter(PACKAGE)\n+    private DigitalTwinsImpl digitalTwin;\n+    private static ObjectMapper objectMapper = new ObjectMapper();\n+\n+    /***\n+     * Creates an implementation instance of {@link DigitalTwins} that is used to invoke the Digital Twin features\n+     * @param connectionString The IoTHub connection string\n+     */\n+    @Builder(builderMethodName = \"buildFromConnectionString\", builderClassName = \"FromConnectionStringBuilder\")\n+    public DigitalTwinAsyncClient(@NonNull String connectionString) {\n+        ServiceConnectionString serviceConnectionString = ServiceConnectionStringParser.parseConnectionString(connectionString);\n+        SasTokenProvider sasTokenProvider = serviceConnectionString.createSasTokenProvider();\n+        String httpsEndpoint = serviceConnectionString.getHttpsEndpoint();\n+\n+        init(sasTokenProvider, httpsEndpoint);\n+    }\n+\n+    private void init(SasTokenProvider sasTokenProvider, String httpsEndpoint) {\n+        RestClient simpleRestClient = new RestClient.Builder()\n+                .withBaseUrl(httpsEndpoint)\n+                .withCredentials(new ServiceClientCredentialsProvider(sasTokenProvider))\n+                .withResponseBuilderFactory(new ServiceResponseBuilder.Factory())\n+                .withSerializerAdapter(new JacksonAdapter())\n+                .build();\n+\n+        IotHubGatewayServiceAPIsImpl protocolLayerClient = new IotHubGatewayServiceAPIsImpl(simpleRestClient);\n+        digitalTwin = new DigitalTwinsImpl(simpleRestClient.retrofit(), protocolLayerClient);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The class to deserialize the application/json into.\n+     * @param <T> The generic type to deserialize the application/json into.\n+     * @return The application/json of the digital twin.\n+     */\n+    public <T> Observable<T> getDigitalTwin (@NonNull String digitalTwinId, Class<T> clazz)\n+    {\n+        return digitalTwin.getDigitalTwinAsync(digitalTwinId)\n+                .filter(Objects::nonNull)\n+                .map(response -> {\n+                    T genericResponse = null;\n+                    try {\n+                        genericResponse = DeserializationHelpers.castObject(objectMapper, response, clazz);\n+                    } catch (JsonProcessingException e) {\n+                        Observable.error(e);\n+                    }\n+                    return genericResponse;\n+                })\n+                .subscribeOn(Schedulers.io());\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The class to deserialize the application/json into.\n+     * @param <T> The generic type to deserialize the application/json into.\n+     * @return A {@link ServiceResponseWithHeaders} representing deserialized application/json of the digital twin with {@link DigitalTwinGetHeaders}.\n+     */\n+    public <T> Observable<ServiceResponseWithHeaders<T, DigitalTwinGetHeaders>> getDigitalTwinWithResponse (@NonNull String digitalTwinId, Class<T> clazz)\n+    {\n+        return digitalTwin.getDigitalTwinWithServiceResponseAsync(digitalTwinId)\n+                .map(response -> {\n+                    T genericResponse = null;\n+                    try {\n+                        genericResponse = DeserializationHelpers.castObject(objectMapper, response.body(), clazz);\n+                    } catch (JsonProcessingException e) {\n+                        Observable.error(e);\n+                    }\n+                    return new ServiceResponseWithHeaders<>(genericResponse, response.headers(), response.response());\n+                })\n+                .subscribeOn(Schedulers.io());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The JSON patch to apply to the specified digital twin. This argument can be created using {@link UpdateOperationUtility}.\n+     * @return A {@link ServiceResponseWithHeaders} with {@link DigitalTwinUpdateHeaders}.\n+     */\n+    public Observable<ServiceResponseWithHeaders<Void, DigitalTwinUpdateHeaders>> updateDigitalTwinWithResponse (@NonNull String digitalTwinId, @NonNull List<Object> digitalTwinUpdateOperations)\n+    {\n+        return digitalTwin.updateDigitalTwinWithServiceResponseAsync(digitalTwinId, digitalTwinUpdateOperations)\n+                .subscribeOn(Schedulers.io());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The JSON patch to apply to the specified digital twin. This argument can be created using {@link UpdateOperationUtility}.\n+     * @param options The optional settings for this request.\n+     * @return A {@link ServiceResponseWithHeaders} with {@link DigitalTwinUpdateHeaders}.\n+     */\n+    public Observable<ServiceResponseWithHeaders<Void, DigitalTwinUpdateHeaders>> updateDigitalTwinWithResponse (@NonNull String digitalTwinId, @NonNull List<Object> digitalTwinUpdateOperations, @NonNull DigitalTwinUpdateRequestOptions options)\n+    {\n+        String ifMatch = options != null ? options.getIfMatch() : null;\n+        return digitalTwin.updateDigitalTwinWithServiceResponseAsync(digitalTwinId, digitalTwinUpdateOperations, ifMatch)\n+                .subscribeOn(Schedulers.io());\n+    }\n+\n+    /**\n+     * Invoke a command on a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param commandName The command to be invoked.\n+     * @param payload The command payload.\n+     * @return The application/json command invocation response.\n+     */\n+    public Observable<String> invokeCommand (@NonNull String digitalTwinId, @NonNull String commandName, String payload)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0cb7b0f6f8553609be356ce554b4421952a248d"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkzNDA0NQ==", "bodyText": "@nonnull String digitalTwinId, @nonnull String commandName\n@nonnull String digitalTwinId, @nonnull String commandName, @nonnull String payload\n@nonnull String digitalTwinId, @nonnull String commandName, @nonnull String payload, @nonnull DigitalTwinInvokeCommandRequestOptions options => with http response", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r493934045", "createdAt": "2020-09-23T22:39:00Z", "author": {"login": "abhipsaMisra"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "diffHunk": "@@ -0,0 +1,218 @@\n+package com.microsoft.azure.sdk.iot.service.digitaltwin;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.SasTokenProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceClientCredentialsProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionString;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionStringParser;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.DigitalTwinsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.IotHubGatewayServiceAPIsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.DigitalTwins;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinGetHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeRootLevelCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinUpdateHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.DeserializationHelpers;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.UpdateOperationUtility;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandRequestOptions;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions;\n+import com.microsoft.rest.*;\n+import com.microsoft.rest.serializer.JacksonAdapter;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Setter;\n+import rx.Observable;\n+import rx.schedulers.Schedulers;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.Tools.*;\n+import static lombok.AccessLevel.PACKAGE;\n+\n+public class DigitalTwinAsyncClient {\n+    @Setter(PACKAGE)\n+    private DigitalTwinsImpl digitalTwin;\n+    private static ObjectMapper objectMapper = new ObjectMapper();\n+\n+    /***\n+     * Creates an implementation instance of {@link DigitalTwins} that is used to invoke the Digital Twin features\n+     * @param connectionString The IoTHub connection string\n+     */\n+    @Builder(builderMethodName = \"buildFromConnectionString\", builderClassName = \"FromConnectionStringBuilder\")\n+    public DigitalTwinAsyncClient(@NonNull String connectionString) {\n+        ServiceConnectionString serviceConnectionString = ServiceConnectionStringParser.parseConnectionString(connectionString);\n+        SasTokenProvider sasTokenProvider = serviceConnectionString.createSasTokenProvider();\n+        String httpsEndpoint = serviceConnectionString.getHttpsEndpoint();\n+\n+        init(sasTokenProvider, httpsEndpoint);\n+    }\n+\n+    private void init(SasTokenProvider sasTokenProvider, String httpsEndpoint) {\n+        RestClient simpleRestClient = new RestClient.Builder()\n+                .withBaseUrl(httpsEndpoint)\n+                .withCredentials(new ServiceClientCredentialsProvider(sasTokenProvider))\n+                .withResponseBuilderFactory(new ServiceResponseBuilder.Factory())\n+                .withSerializerAdapter(new JacksonAdapter())\n+                .build();\n+\n+        IotHubGatewayServiceAPIsImpl protocolLayerClient = new IotHubGatewayServiceAPIsImpl(simpleRestClient);\n+        digitalTwin = new DigitalTwinsImpl(simpleRestClient.retrofit(), protocolLayerClient);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The class to deserialize the application/json into.\n+     * @param <T> The generic type to deserialize the application/json into.\n+     * @return The application/json of the digital twin.\n+     */\n+    public <T> Observable<T> getDigitalTwin (@NonNull String digitalTwinId, Class<T> clazz)\n+    {\n+        return digitalTwin.getDigitalTwinAsync(digitalTwinId)\n+                .filter(Objects::nonNull)\n+                .map(response -> {\n+                    T genericResponse = null;\n+                    try {\n+                        genericResponse = DeserializationHelpers.castObject(objectMapper, response, clazz);\n+                    } catch (JsonProcessingException e) {\n+                        Observable.error(e);\n+                    }\n+                    return genericResponse;\n+                })\n+                .subscribeOn(Schedulers.io());\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The class to deserialize the application/json into.\n+     * @param <T> The generic type to deserialize the application/json into.\n+     * @return A {@link ServiceResponseWithHeaders} representing deserialized application/json of the digital twin with {@link DigitalTwinGetHeaders}.\n+     */\n+    public <T> Observable<ServiceResponseWithHeaders<T, DigitalTwinGetHeaders>> getDigitalTwinWithResponse (@NonNull String digitalTwinId, Class<T> clazz)\n+    {\n+        return digitalTwin.getDigitalTwinWithServiceResponseAsync(digitalTwinId)\n+                .map(response -> {\n+                    T genericResponse = null;\n+                    try {\n+                        genericResponse = DeserializationHelpers.castObject(objectMapper, response.body(), clazz);\n+                    } catch (JsonProcessingException e) {\n+                        Observable.error(e);\n+                    }\n+                    return new ServiceResponseWithHeaders<>(genericResponse, response.headers(), response.response());\n+                })\n+                .subscribeOn(Schedulers.io());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The JSON patch to apply to the specified digital twin. This argument can be created using {@link UpdateOperationUtility}.\n+     * @return A {@link ServiceResponseWithHeaders} with {@link DigitalTwinUpdateHeaders}.\n+     */\n+    public Observable<ServiceResponseWithHeaders<Void, DigitalTwinUpdateHeaders>> updateDigitalTwinWithResponse (@NonNull String digitalTwinId, @NonNull List<Object> digitalTwinUpdateOperations)\n+    {\n+        return digitalTwin.updateDigitalTwinWithServiceResponseAsync(digitalTwinId, digitalTwinUpdateOperations)\n+                .subscribeOn(Schedulers.io());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The JSON patch to apply to the specified digital twin. This argument can be created using {@link UpdateOperationUtility}.\n+     * @param options The optional settings for this request.\n+     * @return A {@link ServiceResponseWithHeaders} with {@link DigitalTwinUpdateHeaders}.\n+     */\n+    public Observable<ServiceResponseWithHeaders<Void, DigitalTwinUpdateHeaders>> updateDigitalTwinWithResponse (@NonNull String digitalTwinId, @NonNull List<Object> digitalTwinUpdateOperations, @NonNull DigitalTwinUpdateRequestOptions options)\n+    {\n+        String ifMatch = options != null ? options.getIfMatch() : null;\n+        return digitalTwin.updateDigitalTwinWithServiceResponseAsync(digitalTwinId, digitalTwinUpdateOperations, ifMatch)\n+                .subscribeOn(Schedulers.io());\n+    }\n+\n+    /**\n+     * Invoke a command on a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param commandName The command to be invoked.\n+     * @param payload The command payload.\n+     * @return The application/json command invocation response.\n+     */\n+    public Observable<String> invokeCommand (@NonNull String digitalTwinId, @NonNull String commandName, String payload)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkzMzIyNg=="}, "originalCommit": {"oid": "d0cb7b0f6f8553609be356ce554b4421952a248d"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTI4MTIwOnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMjo0NDoxNlrOHXDdCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMjo0NDoxNlrOHXDdCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkzNTg4Mg==", "bodyText": "add another overload that returns void -> no http response", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r493935882", "createdAt": "2020-09-23T22:44:16Z", "author": {"login": "abhipsaMisra"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "diffHunk": "@@ -0,0 +1,218 @@\n+package com.microsoft.azure.sdk.iot.service.digitaltwin;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.SasTokenProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceClientCredentialsProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionString;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionStringParser;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.DigitalTwinsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.IotHubGatewayServiceAPIsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.DigitalTwins;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinGetHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeRootLevelCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinUpdateHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.DeserializationHelpers;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.UpdateOperationUtility;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandRequestOptions;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions;\n+import com.microsoft.rest.*;\n+import com.microsoft.rest.serializer.JacksonAdapter;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Setter;\n+import rx.Observable;\n+import rx.schedulers.Schedulers;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.Tools.*;\n+import static lombok.AccessLevel.PACKAGE;\n+\n+public class DigitalTwinAsyncClient {\n+    @Setter(PACKAGE)\n+    private DigitalTwinsImpl digitalTwin;\n+    private static ObjectMapper objectMapper = new ObjectMapper();\n+\n+    /***\n+     * Creates an implementation instance of {@link DigitalTwins} that is used to invoke the Digital Twin features\n+     * @param connectionString The IoTHub connection string\n+     */\n+    @Builder(builderMethodName = \"buildFromConnectionString\", builderClassName = \"FromConnectionStringBuilder\")\n+    public DigitalTwinAsyncClient(@NonNull String connectionString) {\n+        ServiceConnectionString serviceConnectionString = ServiceConnectionStringParser.parseConnectionString(connectionString);\n+        SasTokenProvider sasTokenProvider = serviceConnectionString.createSasTokenProvider();\n+        String httpsEndpoint = serviceConnectionString.getHttpsEndpoint();\n+\n+        init(sasTokenProvider, httpsEndpoint);\n+    }\n+\n+    private void init(SasTokenProvider sasTokenProvider, String httpsEndpoint) {\n+        RestClient simpleRestClient = new RestClient.Builder()\n+                .withBaseUrl(httpsEndpoint)\n+                .withCredentials(new ServiceClientCredentialsProvider(sasTokenProvider))\n+                .withResponseBuilderFactory(new ServiceResponseBuilder.Factory())\n+                .withSerializerAdapter(new JacksonAdapter())\n+                .build();\n+\n+        IotHubGatewayServiceAPIsImpl protocolLayerClient = new IotHubGatewayServiceAPIsImpl(simpleRestClient);\n+        digitalTwin = new DigitalTwinsImpl(simpleRestClient.retrofit(), protocolLayerClient);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The class to deserialize the application/json into.\n+     * @param <T> The generic type to deserialize the application/json into.\n+     * @return The application/json of the digital twin.\n+     */\n+    public <T> Observable<T> getDigitalTwin (@NonNull String digitalTwinId, Class<T> clazz)\n+    {\n+        return digitalTwin.getDigitalTwinAsync(digitalTwinId)\n+                .filter(Objects::nonNull)\n+                .map(response -> {\n+                    T genericResponse = null;\n+                    try {\n+                        genericResponse = DeserializationHelpers.castObject(objectMapper, response, clazz);\n+                    } catch (JsonProcessingException e) {\n+                        Observable.error(e);\n+                    }\n+                    return genericResponse;\n+                })\n+                .subscribeOn(Schedulers.io());\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The class to deserialize the application/json into.\n+     * @param <T> The generic type to deserialize the application/json into.\n+     * @return A {@link ServiceResponseWithHeaders} representing deserialized application/json of the digital twin with {@link DigitalTwinGetHeaders}.\n+     */\n+    public <T> Observable<ServiceResponseWithHeaders<T, DigitalTwinGetHeaders>> getDigitalTwinWithResponse (@NonNull String digitalTwinId, Class<T> clazz)\n+    {\n+        return digitalTwin.getDigitalTwinWithServiceResponseAsync(digitalTwinId)\n+                .map(response -> {\n+                    T genericResponse = null;\n+                    try {\n+                        genericResponse = DeserializationHelpers.castObject(objectMapper, response.body(), clazz);\n+                    } catch (JsonProcessingException e) {\n+                        Observable.error(e);\n+                    }\n+                    return new ServiceResponseWithHeaders<>(genericResponse, response.headers(), response.response());\n+                })\n+                .subscribeOn(Schedulers.io());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The JSON patch to apply to the specified digital twin. This argument can be created using {@link UpdateOperationUtility}.\n+     * @return A {@link ServiceResponseWithHeaders} with {@link DigitalTwinUpdateHeaders}.\n+     */\n+    public Observable<ServiceResponseWithHeaders<Void, DigitalTwinUpdateHeaders>> updateDigitalTwinWithResponse (@NonNull String digitalTwinId, @NonNull List<Object> digitalTwinUpdateOperations)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0cb7b0f6f8553609be356ce554b4421952a248d"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Mjk4MDAyOnYy", "diffSide": "RIGHT", "path": "service/iot-service-samples/readme.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDowNTozNlrOHXTMQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDowNTozNlrOHXTMQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE5MzczMA==", "bodyText": "sampl -> sample", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r494193730", "createdAt": "2020-09-24T10:05:36Z", "author": {"login": "barustum"}, "path": "service/iot-service-samples/readme.md", "diffHunk": "@@ -98,6 +99,72 @@ You need to first clone the repository or download the sample project folder on\n \n \tYou can verify the result of your operation by using [Device Explorer or iothub-explorer tool][lnk-manage-iot-hub].\n \n+#### Build and run the DigitalTwin(plug and play) Service Sample application for a device with no components:\n+<br/>\n+\n+> Note: This sample requires the device sample to be running - [Thermostat Device Sample](https://github.com/Azure/azure-iot-sdk-java/tree/master/device/iot-device-samples/pnp-device-sample/thermostat-device-sample)\n+<br/>\n+This sample uses the following simple model which has no components - [Thermostat](https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/samples/Thermostat.json)\n+\n+1. Preparing the digitaltwin service sampl application:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6e59ccfdf4a0945435ccba1edb73e0be8314f34"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Mjk4MDgzOnYy", "diffSide": "RIGHT", "path": "service/iot-service-samples/readme.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDowNTo0NVrOHXTMuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDowNTo0NVrOHXTMuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE5Mzg0OQ==", "bodyText": "sampl -> sample", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r494193849", "createdAt": "2020-09-24T10:05:45Z", "author": {"login": "barustum"}, "path": "service/iot-service-samples/readme.md", "diffHunk": "@@ -98,6 +99,72 @@ You need to first clone the repository or download the sample project folder on\n \n \tYou can verify the result of your operation by using [Device Explorer or iothub-explorer tool][lnk-manage-iot-hub].\n \n+#### Build and run the DigitalTwin(plug and play) Service Sample application for a device with no components:\n+<br/>\n+\n+> Note: This sample requires the device sample to be running - [Thermostat Device Sample](https://github.com/Azure/azure-iot-sdk-java/tree/master/device/iot-device-samples/pnp-device-sample/thermostat-device-sample)\n+<br/>\n+This sample uses the following simple model which has no components - [Thermostat](https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/samples/Thermostat.json)\n+\n+1. Preparing the digitaltwin service sampl application:\n+   1. Set the following environment variables on the terminal from which you want to run the application.\n+\n+      * IOTHUB_CONNECTION_STRING\n+      * DEVICE_ID\n+\n+2. Building the digitaltwin service sampl application:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6e59ccfdf4a0945435ccba1edb73e0be8314f34"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Mjk4MTA1OnYy", "diffSide": "RIGHT", "path": "service/iot-service-samples/readme.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDowNTo0OVrOHXTM2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDowNTo0OVrOHXTM2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE5Mzg4MQ==", "bodyText": "sampl -> sample", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r494193881", "createdAt": "2020-09-24T10:05:49Z", "author": {"login": "barustum"}, "path": "service/iot-service-samples/readme.md", "diffHunk": "@@ -98,6 +99,72 @@ You need to first clone the repository or download the sample project folder on\n \n \tYou can verify the result of your operation by using [Device Explorer or iothub-explorer tool][lnk-manage-iot-hub].\n \n+#### Build and run the DigitalTwin(plug and play) Service Sample application for a device with no components:\n+<br/>\n+\n+> Note: This sample requires the device sample to be running - [Thermostat Device Sample](https://github.com/Azure/azure-iot-sdk-java/tree/master/device/iot-device-samples/pnp-device-sample/thermostat-device-sample)\n+<br/>\n+This sample uses the following simple model which has no components - [Thermostat](https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/samples/Thermostat.json)\n+\n+1. Preparing the digitaltwin service sampl application:\n+   1. Set the following environment variables on the terminal from which you want to run the application.\n+\n+      * IOTHUB_CONNECTION_STRING\n+      * DEVICE_ID\n+\n+2. Building the digitaltwin service sampl application:\n+\n+    To build the digitaltwin service sampl application using Maven, at a command prompt navigate to the **\\service\\iot-service-samples\\digitaltwin-service-samples\\thermostat-service-sample** folder. Then execute the following command and check for build errors:\n+    \n+    ```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6e59ccfdf4a0945435ccba1edb73e0be8314f34"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Mjk4MTQ5OnYy", "diffSide": "RIGHT", "path": "service/iot-service-samples/readme.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDowNTo1NlrOHXTNGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDowNTo1NlrOHXTNGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE5Mzk0Nw==", "bodyText": "sampl -> sample", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r494193947", "createdAt": "2020-09-24T10:05:56Z", "author": {"login": "barustum"}, "path": "service/iot-service-samples/readme.md", "diffHunk": "@@ -98,6 +99,72 @@ You need to first clone the repository or download the sample project folder on\n \n \tYou can verify the result of your operation by using [Device Explorer or iothub-explorer tool][lnk-manage-iot-hub].\n \n+#### Build and run the DigitalTwin(plug and play) Service Sample application for a device with no components:\n+<br/>\n+\n+> Note: This sample requires the device sample to be running - [Thermostat Device Sample](https://github.com/Azure/azure-iot-sdk-java/tree/master/device/iot-device-samples/pnp-device-sample/thermostat-device-sample)\n+<br/>\n+This sample uses the following simple model which has no components - [Thermostat](https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/samples/Thermostat.json)\n+\n+1. Preparing the digitaltwin service sampl application:\n+   1. Set the following environment variables on the terminal from which you want to run the application.\n+\n+      * IOTHUB_CONNECTION_STRING\n+      * DEVICE_ID\n+\n+2. Building the digitaltwin service sampl application:\n+\n+    To build the digitaltwin service sampl application using Maven, at a command prompt navigate to the **\\service\\iot-service-samples\\digitaltwin-service-samples\\thermostat-service-sample** folder. Then execute the following command and check for build errors:\n+    \n+    ```\n+    mvn clean package\n+    ```\n+\n+3. Running the digitaltwin service sampl application:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6e59ccfdf4a0945435ccba1edb73e0be8314f34"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Mjk4MTc5OnYy", "diffSide": "RIGHT", "path": "service/iot-service-samples/readme.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDowNjowMVrOHXTNSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDowNjowMVrOHXTNSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE5Mzk5Mw==", "bodyText": "sampl -> sample", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r494193993", "createdAt": "2020-09-24T10:06:01Z", "author": {"login": "barustum"}, "path": "service/iot-service-samples/readme.md", "diffHunk": "@@ -98,6 +99,72 @@ You need to first clone the repository or download the sample project folder on\n \n \tYou can verify the result of your operation by using [Device Explorer or iothub-explorer tool][lnk-manage-iot-hub].\n \n+#### Build and run the DigitalTwin(plug and play) Service Sample application for a device with no components:\n+<br/>\n+\n+> Note: This sample requires the device sample to be running - [Thermostat Device Sample](https://github.com/Azure/azure-iot-sdk-java/tree/master/device/iot-device-samples/pnp-device-sample/thermostat-device-sample)\n+<br/>\n+This sample uses the following simple model which has no components - [Thermostat](https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/samples/Thermostat.json)\n+\n+1. Preparing the digitaltwin service sampl application:\n+   1. Set the following environment variables on the terminal from which you want to run the application.\n+\n+      * IOTHUB_CONNECTION_STRING\n+      * DEVICE_ID\n+\n+2. Building the digitaltwin service sampl application:\n+\n+    To build the digitaltwin service sampl application using Maven, at a command prompt navigate to the **\\service\\iot-service-samples\\digitaltwin-service-samples\\thermostat-service-sample** folder. Then execute the following command and check for build errors:\n+    \n+    ```\n+    mvn clean package\n+    ```\n+\n+3. Running the digitaltwin service sampl application:\n+\n+\tTo run the digitaltwin service sampl application using Maven, execute the following command.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6e59ccfdf4a0945435ccba1edb73e0be8314f34"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Mjk4MjI4OnYy", "diffSide": "RIGHT", "path": "service/iot-service-samples/readme.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDowNjowOVrOHXTNkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDowNjowOVrOHXTNkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE5NDA2NA==", "bodyText": "sampl -> sample", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r494194064", "createdAt": "2020-09-24T10:06:09Z", "author": {"login": "barustum"}, "path": "service/iot-service-samples/readme.md", "diffHunk": "@@ -98,6 +99,72 @@ You need to first clone the repository or download the sample project folder on\n \n \tYou can verify the result of your operation by using [Device Explorer or iothub-explorer tool][lnk-manage-iot-hub].\n \n+#### Build and run the DigitalTwin(plug and play) Service Sample application for a device with no components:\n+<br/>\n+\n+> Note: This sample requires the device sample to be running - [Thermostat Device Sample](https://github.com/Azure/azure-iot-sdk-java/tree/master/device/iot-device-samples/pnp-device-sample/thermostat-device-sample)\n+<br/>\n+This sample uses the following simple model which has no components - [Thermostat](https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/samples/Thermostat.json)\n+\n+1. Preparing the digitaltwin service sampl application:\n+   1. Set the following environment variables on the terminal from which you want to run the application.\n+\n+      * IOTHUB_CONNECTION_STRING\n+      * DEVICE_ID\n+\n+2. Building the digitaltwin service sampl application:\n+\n+    To build the digitaltwin service sampl application using Maven, at a command prompt navigate to the **\\service\\iot-service-samples\\digitaltwin-service-samples\\thermostat-service-sample** folder. Then execute the following command and check for build errors:\n+    \n+    ```\n+    mvn clean package\n+    ```\n+\n+3. Running the digitaltwin service sampl application:\n+\n+\tTo run the digitaltwin service sampl application using Maven, execute the following command.\n+    \n+    ```\n+    mvn exec:java -Dexec.mainClass=\"samples.com.microsoft.azure.sdk.iot.service.Thermostat\"\n+    ```\n+\n+#### Build and run the DigitalTwin(plug and play) Service Sample application for a device with components:\n+<br/>\n+\n+> Note: This sample requires the device sample to be running - [TemperatureController Device Sample](https://github.com/Azure/azure-iot-sdk-java/tree/master/device/iot-device-samples/pnp-device-sample/temperature-controller-device-sample)\n+<br/>\n+This sample uses the following model which has components - [TemperatureController](https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/samples/TemperatureController.json)\n+\n+1. Preparing the digitaltwin service sampl application:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6e59ccfdf4a0945435ccba1edb73e0be8314f34"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Mjk4MjU3OnYy", "diffSide": "RIGHT", "path": "service/iot-service-samples/readme.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDowNjoxNVrOHXTNww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDowNjoxNVrOHXTNww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE5NDExNQ==", "bodyText": "sampl -> sample", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r494194115", "createdAt": "2020-09-24T10:06:15Z", "author": {"login": "barustum"}, "path": "service/iot-service-samples/readme.md", "diffHunk": "@@ -98,6 +99,72 @@ You need to first clone the repository or download the sample project folder on\n \n \tYou can verify the result of your operation by using [Device Explorer or iothub-explorer tool][lnk-manage-iot-hub].\n \n+#### Build and run the DigitalTwin(plug and play) Service Sample application for a device with no components:\n+<br/>\n+\n+> Note: This sample requires the device sample to be running - [Thermostat Device Sample](https://github.com/Azure/azure-iot-sdk-java/tree/master/device/iot-device-samples/pnp-device-sample/thermostat-device-sample)\n+<br/>\n+This sample uses the following simple model which has no components - [Thermostat](https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/samples/Thermostat.json)\n+\n+1. Preparing the digitaltwin service sampl application:\n+   1. Set the following environment variables on the terminal from which you want to run the application.\n+\n+      * IOTHUB_CONNECTION_STRING\n+      * DEVICE_ID\n+\n+2. Building the digitaltwin service sampl application:\n+\n+    To build the digitaltwin service sampl application using Maven, at a command prompt navigate to the **\\service\\iot-service-samples\\digitaltwin-service-samples\\thermostat-service-sample** folder. Then execute the following command and check for build errors:\n+    \n+    ```\n+    mvn clean package\n+    ```\n+\n+3. Running the digitaltwin service sampl application:\n+\n+\tTo run the digitaltwin service sampl application using Maven, execute the following command.\n+    \n+    ```\n+    mvn exec:java -Dexec.mainClass=\"samples.com.microsoft.azure.sdk.iot.service.Thermostat\"\n+    ```\n+\n+#### Build and run the DigitalTwin(plug and play) Service Sample application for a device with components:\n+<br/>\n+\n+> Note: This sample requires the device sample to be running - [TemperatureController Device Sample](https://github.com/Azure/azure-iot-sdk-java/tree/master/device/iot-device-samples/pnp-device-sample/temperature-controller-device-sample)\n+<br/>\n+This sample uses the following model which has components - [TemperatureController](https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/samples/TemperatureController.json)\n+\n+1. Preparing the digitaltwin service sampl application:\n+   1. Set the following environment variables on the terminal from which you want to run the application.\n+\n+      * IOTHUB_CONNECTION_STRING\n+      * DEVICE_ID\n+\n+2. Install dependencies:\n+\n+    To install required dependencies, at a command prompt navigate to the root **azure-iot-sdk-java** folder. Then execute the following command:\n+    \n+    ```\n+    mvn install -T 2C -DskipTests\n+    ```\n+\n+3. Building the digitaltwin service sample application:\n+\n+    To build the digitaltwin service sample application using Maven, at a command prompt navigate to the **\\service\\iot-service-samples\\digitaltwin-service-samples\\temperature-controller-service-sample** folder. Then execute the following command and check for build errors:\n+    \n+    ```\n+    mvn clean package\n+    ```\n+\n+4. Running the digitaltwin service sampl application:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6e59ccfdf4a0945435ccba1edb73e0be8314f34"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Mjk4MjkzOnYy", "diffSide": "RIGHT", "path": "service/iot-service-samples/readme.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDowNjoyMVrOHXTN-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDowNjoyMVrOHXTN-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE5NDE2OA==", "bodyText": "sampl -> sample", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r494194168", "createdAt": "2020-09-24T10:06:21Z", "author": {"login": "barustum"}, "path": "service/iot-service-samples/readme.md", "diffHunk": "@@ -98,6 +99,72 @@ You need to first clone the repository or download the sample project folder on\n \n \tYou can verify the result of your operation by using [Device Explorer or iothub-explorer tool][lnk-manage-iot-hub].\n \n+#### Build and run the DigitalTwin(plug and play) Service Sample application for a device with no components:\n+<br/>\n+\n+> Note: This sample requires the device sample to be running - [Thermostat Device Sample](https://github.com/Azure/azure-iot-sdk-java/tree/master/device/iot-device-samples/pnp-device-sample/thermostat-device-sample)\n+<br/>\n+This sample uses the following simple model which has no components - [Thermostat](https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/samples/Thermostat.json)\n+\n+1. Preparing the digitaltwin service sampl application:\n+   1. Set the following environment variables on the terminal from which you want to run the application.\n+\n+      * IOTHUB_CONNECTION_STRING\n+      * DEVICE_ID\n+\n+2. Building the digitaltwin service sampl application:\n+\n+    To build the digitaltwin service sampl application using Maven, at a command prompt navigate to the **\\service\\iot-service-samples\\digitaltwin-service-samples\\thermostat-service-sample** folder. Then execute the following command and check for build errors:\n+    \n+    ```\n+    mvn clean package\n+    ```\n+\n+3. Running the digitaltwin service sampl application:\n+\n+\tTo run the digitaltwin service sampl application using Maven, execute the following command.\n+    \n+    ```\n+    mvn exec:java -Dexec.mainClass=\"samples.com.microsoft.azure.sdk.iot.service.Thermostat\"\n+    ```\n+\n+#### Build and run the DigitalTwin(plug and play) Service Sample application for a device with components:\n+<br/>\n+\n+> Note: This sample requires the device sample to be running - [TemperatureController Device Sample](https://github.com/Azure/azure-iot-sdk-java/tree/master/device/iot-device-samples/pnp-device-sample/temperature-controller-device-sample)\n+<br/>\n+This sample uses the following model which has components - [TemperatureController](https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/samples/TemperatureController.json)\n+\n+1. Preparing the digitaltwin service sampl application:\n+   1. Set the following environment variables on the terminal from which you want to run the application.\n+\n+      * IOTHUB_CONNECTION_STRING\n+      * DEVICE_ID\n+\n+2. Install dependencies:\n+\n+    To install required dependencies, at a command prompt navigate to the root **azure-iot-sdk-java** folder. Then execute the following command:\n+    \n+    ```\n+    mvn install -T 2C -DskipTests\n+    ```\n+\n+3. Building the digitaltwin service sample application:\n+\n+    To build the digitaltwin service sample application using Maven, at a command prompt navigate to the **\\service\\iot-service-samples\\digitaltwin-service-samples\\temperature-controller-service-sample** folder. Then execute the following command and check for build errors:\n+    \n+    ```\n+    mvn clean package\n+    ```\n+\n+4. Running the digitaltwin service sampl application:\n+\n+\tTo run the digitaltwin service sampl application using Maven, execute the following command.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6e59ccfdf4a0945435ccba1edb73e0be8314f34"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTgwMzg1OnYy", "diffSide": "RIGHT", "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/twin/RegisterManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMTo0OTo1NlrOHYUQ3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMTo0OTo1NlrOHYUQ3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI1OTg2OQ==", "bodyText": "The other fields in this class don't seem to be using lombok for generating getters and setters. We should be consistent in our usage - update lombok usage for a  fields/ explicitly generate the getter and setters for this field.\nWhat do you think?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r495259869", "createdAt": "2020-09-25T21:49:56Z", "author": {"login": "abhipsaMisra"}, "path": "deps/src/main/java/com/microsoft/azure/sdk/iot/deps/twin/RegisterManager.java", "diffHunk": "@@ -123,6 +125,17 @@\n     @SerializedName(CAPABILITIES_TAG)\n     protected DeviceCapabilities capabilities = null;\n \n+    /**\n+     * The Digital Twin model id of the device and module\n+     * The value will be null for a non-pnp device.\n+     * The value will be null for a pnp device until the device connects and registers with the model id.\n+     */\n+    private static final String MODEL_ID = \"modelId\";\n+    @Expose(serialize = true, deserialize = true)\n+    @SerializedName(MODEL_ID)\n+    @Setter\n+    @Getter\n+    protected String modelId = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "651b1ff7910c059cc58e5b49cd4ecd84a55abc2d"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTgwNjU4OnYy", "diffSide": "RIGHT", "path": "device/iot-device-client/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMTo1MDozMlrOHYUSpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMTo1MDozMlrOHYUSpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI2MDMyNg==", "bodyText": "This shouldn't go into the repo.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r495260326", "createdAt": "2020-09-25T21:50:32Z", "author": {"login": "abhipsaMisra"}, "path": "device/iot-device-client/pom.xml", "diffHunk": "@@ -33,6 +33,24 @@\n     <properties>\n         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n     </properties>\n+    <repositories>\n+        <repository>\n+            <id>AzureIotSdks</id>\n+            <url>https://azure-iot-sdks.pkgs.visualstudio.com/azure-iot-sdks/_packaging/AzureIotSdks/maven/v1</url>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "651b1ff7910c059cc58e5b49cd4ecd84a55abc2d"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTgxNDQwOnYy", "diffSide": "RIGHT", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/plugandplay/PnpHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMTo1MjoxNlrOHYUXhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMTo1MjoxNlrOHYUXhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI2MTU3Mg==", "bodyText": "Doesn't java have a property on Message class to set this directly?\nalso nit: I've update the .NET code to make all these public, and added a comment explaining what they mean and why they are required.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r495261572", "createdAt": "2020-09-25T21:52:16Z", "author": {"login": "abhipsaMisra"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/plugandplay/PnpHelper.java", "diffHunk": "@@ -15,15 +15,16 @@\n \n import static java.util.Collections.singleton;\n import static java.util.Collections.singletonMap;\n-\n+/*\n+ A helper class for formatting command requests and properties as per plug and play convention.\n+*/\n public class PnpHelper {\n \n     private static final String TELEMETRY_COMPONENT_NAME = \"$.sub\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "651b1ff7910c059cc58e5b49cd4ecd84a55abc2d"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzQyNzkyOnYy", "diffSide": "RIGHT", "path": "device/iot-device-samples/pnp-device-sample/temperature-controller-device-sample/src/main/java/samples/com/microsoft/azure/sdk/iot/device/TemperatureController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODowMTozNlrOHYylDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODowMTozNlrOHYylDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc1NjU1OA==", "bodyText": "remove dps as default since bug bash is over", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r495756558", "createdAt": "2020-09-28T08:01:36Z", "author": {"login": "barustum"}, "path": "device/iot-device-samples/pnp-device-sample/temperature-controller-device-sample/src/main/java/samples/com/microsoft/azure/sdk/iot/device/TemperatureController.java", "diffHunk": "@@ -44,13 +44,14 @@\n \n     // DTDL interface used: https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/samples/TemperatureController.json\n     private static final String deviceConnectionString = System.getenv(\"IOTHUB_DEVICE_CONNECTION_STRING\");\n+    // Defaulting to DPS flow for bug bash", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17dac616bf1f635227e00fbaeaabb9af7c280b11"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzQzNDUzOnYy", "diffSide": "RIGHT", "path": "device/iot-device-samples/pnp-device-sample/thermostat-device-sample/src/main/java/samples/com/microsoft/azure/sdk/iot/device/Thermostat.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODowMzozMFrOHYyo9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODowMzozMFrOHYyo9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc1NzU1OQ==", "bodyText": "remove defaulting to dps since bug bash is over", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r495757559", "createdAt": "2020-09-28T08:03:30Z", "author": {"login": "barustum"}, "path": "device/iot-device-samples/pnp-device-sample/thermostat-device-sample/src/main/java/samples/com/microsoft/azure/sdk/iot/device/Thermostat.java", "diffHunk": "@@ -39,10 +39,11 @@\n \n     // DTDL interface used: https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/samples/Thermostat.json\n     private static final String deviceConnectionString = System.getenv(\"IOTHUB_DEVICE_CONNECTION_STRING\");\n+    // Defaulting to DPS flow for bug bash", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17dac616bf1f635227e00fbaeaabb9af7c280b11"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzQ0ODQxOnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceTwinDevice.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODowNzozMlrOHYyxYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODowNzozMlrOHYyxYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc1OTcxMg==", "bodyText": "other private fields do not have a getter and setter. Intentional?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r495759712", "createdAt": "2020-09-28T08:07:32Z", "author": {"login": "barustum"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceTwinDevice.java", "diffHunk": "@@ -34,6 +36,9 @@\n     private Map<String, ConfigurationInfo> configurations = null;\n     private DeviceCapabilities capabilities = null;\n     private String connectionState;\n+    @Getter\n+    @Setter\n+    private String modelId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17dac616bf1f635227e00fbaeaabb9af7c280b11"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzQ2MzUzOnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODoxMjowMlrOHYy6mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODoxMjowMlrOHYy6mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc2MjA3Mg==", "bodyText": "nit: move private method towards the end of the class", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r495762072", "createdAt": "2020-09-28T08:12:02Z", "author": {"login": "barustum"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+package com.microsoft.azure.sdk.iot.service.digitaltwin;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.SasTokenProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceClientCredentialsProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionString;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionStringParser;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.DigitalTwinsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.IotHubGatewayServiceAPIsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.DigitalTwins;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinGetHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeRootLevelCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinUpdateHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.DeserializationHelpers;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.UpdateOperationUtility;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandRequestOptions;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions;\n+import com.microsoft.rest.*;\n+import com.microsoft.rest.serializer.JacksonAdapter;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Setter;\n+import rx.Observable;\n+import rx.schedulers.Schedulers;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.Tools.*;\n+import static lombok.AccessLevel.PACKAGE;\n+\n+public class DigitalTwinAsyncClient {\n+    @Setter(PACKAGE)\n+    private DigitalTwinsImpl digitalTwin;\n+    private static ObjectMapper objectMapper = new ObjectMapper();\n+\n+    /***\n+     * Creates an implementation instance of {@link DigitalTwins} that is used to invoke the Digital Twin features\n+     * @param connectionString The IoTHub connection string\n+     */\n+    @Builder(builderMethodName = \"buildFromConnectionString\", builderClassName = \"FromConnectionStringBuilder\")\n+    public DigitalTwinAsyncClient(@NonNull String connectionString) {\n+        ServiceConnectionString serviceConnectionString = ServiceConnectionStringParser.parseConnectionString(connectionString);\n+        SasTokenProvider sasTokenProvider = serviceConnectionString.createSasTokenProvider();\n+        String httpsEndpoint = serviceConnectionString.getHttpsEndpoint();\n+\n+        init(sasTokenProvider, httpsEndpoint);\n+    }\n+\n+    private void init(SasTokenProvider sasTokenProvider, String httpsEndpoint) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17dac616bf1f635227e00fbaeaabb9af7c280b11"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzQ3ODk1OnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODoxNjoxMlrOHYzDhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODoxNjoxMlrOHYzDhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc2NDM1OA==", "bodyText": "if an exception is thrown and caught here, it seems like we are returning null (through 'return generticResponse'). Is this intentional? or do we expect to rethrow the exception to the user?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r495764358", "createdAt": "2020-09-28T08:16:12Z", "author": {"login": "barustum"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "diffHunk": "@@ -0,0 +1,229 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+package com.microsoft.azure.sdk.iot.service.digitaltwin;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.SasTokenProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceClientCredentialsProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionString;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionStringParser;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.DigitalTwinsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.IotHubGatewayServiceAPIsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.DigitalTwins;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinGetHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeRootLevelCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinUpdateHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.DeserializationHelpers;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.UpdateOperationUtility;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandRequestOptions;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions;\n+import com.microsoft.rest.*;\n+import com.microsoft.rest.serializer.JacksonAdapter;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Setter;\n+import rx.Observable;\n+import rx.schedulers.Schedulers;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.Tools.*;\n+import static lombok.AccessLevel.PACKAGE;\n+\n+public class DigitalTwinAsyncClient {\n+    @Setter(PACKAGE)\n+    private DigitalTwinsImpl digitalTwin;\n+    private static ObjectMapper objectMapper = new ObjectMapper();\n+\n+    /***\n+     * Creates an implementation instance of {@link DigitalTwins} that is used to invoke the Digital Twin features\n+     * @param connectionString The IoTHub connection string\n+     */\n+    @Builder(builderMethodName = \"buildFromConnectionString\", builderClassName = \"FromConnectionStringBuilder\")\n+    public DigitalTwinAsyncClient(@NonNull String connectionString) {\n+        ServiceConnectionString serviceConnectionString = ServiceConnectionStringParser.parseConnectionString(connectionString);\n+        SasTokenProvider sasTokenProvider = serviceConnectionString.createSasTokenProvider();\n+        String httpsEndpoint = serviceConnectionString.getHttpsEndpoint();\n+\n+        init(sasTokenProvider, httpsEndpoint);\n+    }\n+\n+    private void init(SasTokenProvider sasTokenProvider, String httpsEndpoint) {\n+        RestClient simpleRestClient = new RestClient.Builder()\n+                .withBaseUrl(httpsEndpoint)\n+                .withCredentials(new ServiceClientCredentialsProvider(sasTokenProvider))\n+                .withResponseBuilderFactory(new ServiceResponseBuilder.Factory())\n+                .withSerializerAdapter(new JacksonAdapter())\n+                .build();\n+\n+        IotHubGatewayServiceAPIsImpl protocolLayerClient = new IotHubGatewayServiceAPIsImpl(simpleRestClient);\n+        digitalTwin = new DigitalTwinsImpl(simpleRestClient.retrofit(), protocolLayerClient);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The class to deserialize the application/json into.\n+     * @param <T> The generic type to deserialize the application/json into.\n+     * @return The application/json of the digital twin.\n+     */\n+    public <T> Observable<T> getDigitalTwin (@NonNull String digitalTwinId, Class<T> clazz)\n+    {\n+        return digitalTwin.getDigitalTwinAsync(digitalTwinId)\n+                .filter(Objects::nonNull)\n+                .map(response -> {\n+                    T genericResponse = null;\n+                    try {\n+                        genericResponse = DeserializationHelpers.castObject(objectMapper, response, clazz);\n+                    } catch (JsonProcessingException e) {\n+                        Observable.error(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17dac616bf1f635227e00fbaeaabb9af7c280b11"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzUwNDYwOnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODoyMzozNVrOHYzTLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODoyMzozNVrOHYzTLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc2ODM2NQ==", "bodyText": "missing options param", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r495768365", "createdAt": "2020-09-28T08:23:35Z", "author": {"login": "barustum"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinClient.java", "diffHunk": "@@ -0,0 +1,174 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+package com.microsoft.azure.sdk.iot.service.digitaltwin;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.DigitalTwins;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinGetHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeRootLevelCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinUpdateHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.UpdateOperationUtility;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandRequestOptions;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions;\n+import com.microsoft.rest.*;\n+import lombok.NonNull;\n+import lombok.Setter;\n+import rx.Observable;\n+import rx.schedulers.Schedulers;\n+\n+import java.util.List;\n+\n+import static lombok.AccessLevel.PACKAGE;\n+\n+public class DigitalTwinClient {\n+    @Setter(PACKAGE)\n+    private final DigitalTwinAsyncClient digitalTwinAsyncClient;\n+    private static ObjectMapper objectMapper = new ObjectMapper();\n+\n+    /***\n+     * Creates an implementation instance of {@link DigitalTwins} that is used to invoke the Digital Twin features\n+     * @param digitalTwinAsyncClient Digital Twin Async Client\n+     */\n+    public DigitalTwinClient(@NonNull DigitalTwinAsyncClient digitalTwinAsyncClient) {\n+        this.digitalTwinAsyncClient = digitalTwinAsyncClient;\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The class to deserialize the application/json into.\n+     * @param <T> The generic type to deserialize the application/json into.\n+     * @return The application/json of the digital twin.\n+     */\n+    public <T> T getDigitalTwin (@NonNull String digitalTwinId, Class<T> clazz)\n+    {\n+        return digitalTwinAsyncClient.getDigitalTwin(digitalTwinId, clazz)\n+                .toBlocking().single();\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The class to deserialize the application/json into.\n+     * @param <T> The generic type to deserialize the application/json into.\n+     * @return A {@link ServiceResponseWithHeaders} representing deserialized application/json of the digital twin with {@link DigitalTwinGetHeaders}.\n+     */\n+    public <T> ServiceResponseWithHeaders<T, DigitalTwinGetHeaders> getDigitalTwinWithResponse (@NonNull String digitalTwinId, Class<T> clazz)\n+    {\n+        return digitalTwinAsyncClient.getDigitalTwinWithResponse(digitalTwinId, clazz)\n+                .toBlocking().single();\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The JSON patch to apply to the specified digital twin. This argument can be created using {@link UpdateOperationUtility}.\n+     * @return void.\n+     */\n+    public Void updateDigitalTwin (@NonNull String digitalTwinId, @NonNull List<Object> digitalTwinUpdateOperations)\n+    {\n+        return digitalTwinAsyncClient.updateDigitalTwin(digitalTwinId, digitalTwinUpdateOperations)\n+            .toBlocking().single();\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The JSON patch to apply to the specified digital twin. This argument can be created using {@link UpdateOperationUtility}.\n+     * @return A {@link ServiceResponseWithHeaders} with {@link DigitalTwinUpdateHeaders}.\n+     */\n+    public ServiceResponseWithHeaders<Void, DigitalTwinUpdateHeaders> updateDigitalTwinWithResponse (@NonNull String digitalTwinId, @NonNull List<Object> digitalTwinUpdateOperations)\n+    {\n+        return digitalTwinAsyncClient.updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations)\n+                .toBlocking().single();\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The JSON patch to apply to the specified digital twin. This argument can be created using {@link UpdateOperationUtility}.\n+     * @param options The optional settings for this request.\n+     * @return A {@link ServiceResponseWithHeaders} with {@link DigitalTwinUpdateHeaders}.\n+     */\n+    public ServiceResponseWithHeaders<Void, DigitalTwinUpdateHeaders> updateDigitalTwinWithResponse (@NonNull String digitalTwinId, @NonNull List<Object> digitalTwinUpdateOperations, @NonNull DigitalTwinUpdateRequestOptions options)\n+    {\n+        return digitalTwinAsyncClient.updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, options)\n+                .toBlocking().single();\n+    }\n+\n+    /**\n+     * Invoke a command on a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param commandName The command to be invoked.\n+     * @return A {@link DigitalTwinCommandResponse} which contains the application/json command invocation response.\n+     */\n+    public DigitalTwinCommandResponse invokeCommand(@NonNull String digitalTwinId, @NonNull String commandName) {\n+        return digitalTwinAsyncClient.invokeCommand(digitalTwinId, commandName)\n+                .toBlocking().single();\n+    }\n+\n+    /**\n+     * Invoke a command on a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param commandName The command to be invoked.\n+     * @param payload The command payload.\n+     * @return A {@link DigitalTwinCommandResponse} which contains the application/json command invocation response.\n+     */\n+    public DigitalTwinCommandResponse invokeCommand(@NonNull String digitalTwinId, @NonNull String commandName, @NonNull String payload) {\n+        return digitalTwinAsyncClient.invokeCommand(digitalTwinId, commandName, payload)\n+                .toBlocking().single();\n+    }\n+\n+    /**\n+     * Invoke a command on a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param commandName The command to be invoked.\n+     * @param payload The command payload.\n+     * @param options The optional settings for this request.\n+     * @return A {@link ServiceResponseWithHeaders} with {@link DigitalTwinInvokeRootLevelCommandHeaders} and {@link DigitalTwinCommandResponse} which contains the application/json command invocation response.\n+     */\n+    public ServiceResponseWithHeaders<DigitalTwinCommandResponse, DigitalTwinInvokeCommandHeaders> invokeCommandWithResponse(@NonNull String digitalTwinId, @NonNull String commandName, @NonNull String payload, @NonNull DigitalTwinInvokeCommandRequestOptions options) {\n+        return digitalTwinAsyncClient.invokeCommandWithResponse(digitalTwinId, commandName, payload, options)\n+                .toBlocking().single();\n+    }\n+\n+    /**\n+     * Invoke a command on a digital twin component.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param componentName The component name under which the command is defined.\n+     * @param commandName The command to be invoked.\n+     * @return A {@link DigitalTwinCommandResponse} which contains the application/json command invocation response.\n+     */\n+    public DigitalTwinCommandResponse invokeComponentCommand(@NonNull String digitalTwinId, @NonNull String componentName, @NonNull String commandName) {\n+        return digitalTwinAsyncClient.invokeComponentCommand(digitalTwinId, componentName, commandName)\n+                .toBlocking().single();\n+    }\n+\n+    /**\n+     * Invoke a command on a digital twin component.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param componentName The component name under which the command is defined.\n+     * @param commandName The command to be invoked.\n+     * @param payload The command payload.\n+     * @return A {@link DigitalTwinCommandResponse} which contains the application/json command invocation response.\n+     */\n+    public DigitalTwinCommandResponse invokeComponentCommand(@NonNull String digitalTwinId, @NonNull String componentName, @NonNull String commandName, @NonNull String payload) {\n+        return digitalTwinAsyncClient.invokeComponentCommand(digitalTwinId, componentName, commandName, payload)\n+                .toBlocking().single();\n+    }\n+\n+    /**\n+     * Invoke a command on a digital twin component.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param componentName The component name under which the command is defined.\n+     * @param commandName The command to be invoked.\n+     * @param payload The command payload.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17dac616bf1f635227e00fbaeaabb9af7c280b11"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzUzMzczOnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/helpers/UpdateOperationUtility.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODozMToxMlrOHYzkqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODozMToxMlrOHYzkqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3Mjg0MQ==", "bodyText": "remove extra space", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r495772841", "createdAt": "2020-09-28T08:31:12Z", "author": {"login": "barustum"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/helpers/UpdateOperationUtility.java", "diffHunk": "@@ -0,0 +1,169 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+package com.microsoft.azure.sdk.iot.service.digitaltwin.helpers;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A utility to create the JSON patch payload required for update operations such as update digital twin\n+ */\n+public final class UpdateOperationUtility {\n+    private static final String ADD = \"add\";\n+    private static final String REPLACE = \"replace\";\n+    private static final String REMOVE = \"remove\";\n+    private static final ObjectMapper mapper = new ObjectMapper();\n+\n+    private final List<UpdateOperation> operations = new ArrayList<>();\n+\n+    /**\n+     * Gets the JSON patch payload required for update operations.\n+     * @return The JSON patch payload required for update operations.\n+     */\n+    public List<Object> getUpdateOperations() {\n+        return operations.stream().map(op -> mapper.convertValue(op, Object.class)).collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * Include an add operation for a property.\n+     * @param path The path to the property to be added.\n+     * @param value The value to update to.\n+     * @return The UpdateOperationUtility object itself.\n+     */\n+    public UpdateOperationUtility appendAddPropertyOperation(String path, Object value) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17dac616bf1f635227e00fbaeaabb9af7c280b11"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzU0MzQ3OnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/helpers/UpdateOperationUtility.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODozNDowN1rOHYzqvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODozNDowN1rOHYzqvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3NDM5OA==", "bodyText": "add space after the copyright block", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r495774398", "createdAt": "2020-09-28T08:34:07Z", "author": {"login": "barustum"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/helpers/UpdateOperationUtility.java", "diffHunk": "@@ -0,0 +1,169 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+package com.microsoft.azure.sdk.iot.service.digitaltwin.helpers;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17dac616bf1f635227e00fbaeaabb9af7c280b11"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzU1NDgxOnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/models/DigitalTwinCommandResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODozNzowNlrOHYzxjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODozNzowNlrOHYzxjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3NjE0MQ==", "bodyText": "add space after the copyright block", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r495776141", "createdAt": "2020-09-28T08:37:06Z", "author": {"login": "barustum"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/models/DigitalTwinCommandResponse.java", "diffHunk": "@@ -0,0 +1,16 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+package com.microsoft.azure.sdk.iot.service.digitaltwin.models;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17dac616bf1f635227e00fbaeaabb9af7c280b11"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzU1NjIxOnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/models/DigitalTwinInvokeCommandHeaders.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODozNzozMVrOHYzyhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODozNzozMVrOHYzyhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3NjM4OA==", "bodyText": "remove space", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r495776388", "createdAt": "2020-09-28T08:37:31Z", "author": {"login": "barustum"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/models/DigitalTwinInvokeCommandHeaders.java", "diffHunk": "@@ -0,0 +1,13 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+package com.microsoft.azure.sdk.iot.service.digitaltwin.models;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+public final class DigitalTwinInvokeCommandHeaders {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17dac616bf1f635227e00fbaeaabb9af7c280b11"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzU1ODE3OnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/models/DigitalTwinMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODozODowN1rOHYzzww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODozODowN1rOHYzzww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3NjcwNw==", "bodyText": "Add a copyrights block", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r495776707", "createdAt": "2020-09-28T08:38:07Z", "author": {"login": "barustum"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/models/DigitalTwinMetadata.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.microsoft.azure.sdk.iot.service.digitaltwin.models;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17dac616bf1f635227e00fbaeaabb9af7c280b11"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjg1MjE3OnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDowOTowM1rOHazZHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMToyMzoxMlrOHa2JNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2NzAzOQ==", "bodyText": "this looks like 3 spaces intended, and then on line 47 we indent way more than 4. What's up with that?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497867039", "createdAt": "2020-10-01T00:09:03Z", "author": {"login": "drwill-ms"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "diffHunk": "@@ -0,0 +1,249 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.SasTokenProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceClientCredentialsProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionString;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionStringParser;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinGetHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinUpdateHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.DigitalTwinsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.IotHubGatewayServiceAPIsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.DigitalTwins;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeRootLevelCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.serialization.DeserializationHelpers;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.serialization.DigitalTwinStringSerializer;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.*;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.rest.*;\n+import com.microsoft.rest.serializer.JacksonAdapter;\n+import rx.Observable;\n+import rx.schedulers.Schedulers;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.Tools.*;\n+\n+public class DigitalTwinAsyncClient {\n+    private DigitalTwinsImpl digitalTwin;\n+    private static ObjectMapper objectMapper = new ObjectMapper();\n+\n+     DigitalTwinAsyncClient(String connectionString) {\n+        ServiceConnectionString serviceConnectionString = ServiceConnectionStringParser.parseConnectionString(connectionString);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkxMjExNg==", "bodyText": "Fixed", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497912116", "createdAt": "2020-10-01T01:23:12Z", "author": {"login": "bikamani"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "diffHunk": "@@ -0,0 +1,249 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.SasTokenProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceClientCredentialsProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionString;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionStringParser;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinGetHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinUpdateHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.DigitalTwinsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.IotHubGatewayServiceAPIsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.DigitalTwins;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeRootLevelCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.serialization.DeserializationHelpers;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.serialization.DigitalTwinStringSerializer;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.*;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.rest.*;\n+import com.microsoft.rest.serializer.JacksonAdapter;\n+import rx.Observable;\n+import rx.schedulers.Schedulers;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.Tools.*;\n+\n+public class DigitalTwinAsyncClient {\n+    private DigitalTwinsImpl digitalTwin;\n+    private static ObjectMapper objectMapper = new ObjectMapper();\n+\n+     DigitalTwinAsyncClient(String connectionString) {\n+        ServiceConnectionString serviceConnectionString = ServiceConnectionStringParser.parseConnectionString(connectionString);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2NzAzOQ=="}, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjg1MjQxOnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDowOToxNVrOHazZRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMToyNDozM1rOHa2MQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2NzA3OQ==", "bodyText": "extra space after method name", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497867079", "createdAt": "2020-10-01T00:09:15Z", "author": {"login": "drwill-ms"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "diffHunk": "@@ -0,0 +1,249 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.SasTokenProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceClientCredentialsProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionString;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionStringParser;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinGetHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinUpdateHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.DigitalTwinsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.IotHubGatewayServiceAPIsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.DigitalTwins;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeRootLevelCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.serialization.DeserializationHelpers;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.serialization.DigitalTwinStringSerializer;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.*;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.rest.*;\n+import com.microsoft.rest.serializer.JacksonAdapter;\n+import rx.Observable;\n+import rx.schedulers.Schedulers;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.Tools.*;\n+\n+public class DigitalTwinAsyncClient {\n+    private DigitalTwinsImpl digitalTwin;\n+    private static ObjectMapper objectMapper = new ObjectMapper();\n+\n+     DigitalTwinAsyncClient(String connectionString) {\n+        ServiceConnectionString serviceConnectionString = ServiceConnectionStringParser.parseConnectionString(connectionString);\n+        SasTokenProvider sasTokenProvider = serviceConnectionString.createSasTokenProvider();\n+        String httpsEndpoint = serviceConnectionString.getHttpsEndpoint();\n+        final SimpleModule stringModule = new SimpleModule(\"String Serializer\");\n+        stringModule.addSerializer(new DigitalTwinStringSerializer(String.class, objectMapper));\n+\n+        JacksonAdapter adapter = new JacksonAdapter();\n+        adapter.serializer().registerModule(stringModule);\n+        RestClient simpleRestClient = new RestClient.Builder()\n+                .withBaseUrl(httpsEndpoint)\n+                .withCredentials(new ServiceClientCredentialsProvider(sasTokenProvider))\n+                .withResponseBuilderFactory(new ServiceResponseBuilder.Factory())\n+                .withSerializerAdapter(adapter)\n+                .build();\n+\n+        IotHubGatewayServiceAPIsImpl protocolLayerClient = new IotHubGatewayServiceAPIsImpl(simpleRestClient);\n+        digitalTwin = new DigitalTwinsImpl(simpleRestClient.retrofit(), protocolLayerClient);\n+    }\n+\n+    /**\n+     * Creates an implementation instance of {@link DigitalTwins} that is used to invoke the Digital Twin features\n+     * @param connectionString The IoTHub connection string\n+     * @return DigitalTwinAsyncClient\n+     */\n+    public static DigitalTwinAsyncClient createFromConnectionString(String connectionString)\n+    {\n+        return new DigitalTwinAsyncClient(connectionString);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The class to deserialize the application/json into.\n+     * @param <T> The generic type to deserialize the application/json into.\n+     * @return The application/json of the digital twin.\n+     */\n+    public <T> Observable<T> getDigitalTwin (String digitalTwinId, Class<T> clazz)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkxMjg5OA==", "bodyText": "removed here and other places in this class.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497912898", "createdAt": "2020-10-01T01:24:33Z", "author": {"login": "bikamani"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "diffHunk": "@@ -0,0 +1,249 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.SasTokenProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceClientCredentialsProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionString;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionStringParser;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinGetHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinUpdateHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.DigitalTwinsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.IotHubGatewayServiceAPIsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.DigitalTwins;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeRootLevelCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.serialization.DeserializationHelpers;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.serialization.DigitalTwinStringSerializer;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.*;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.rest.*;\n+import com.microsoft.rest.serializer.JacksonAdapter;\n+import rx.Observable;\n+import rx.schedulers.Schedulers;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.Tools.*;\n+\n+public class DigitalTwinAsyncClient {\n+    private DigitalTwinsImpl digitalTwin;\n+    private static ObjectMapper objectMapper = new ObjectMapper();\n+\n+     DigitalTwinAsyncClient(String connectionString) {\n+        ServiceConnectionString serviceConnectionString = ServiceConnectionStringParser.parseConnectionString(connectionString);\n+        SasTokenProvider sasTokenProvider = serviceConnectionString.createSasTokenProvider();\n+        String httpsEndpoint = serviceConnectionString.getHttpsEndpoint();\n+        final SimpleModule stringModule = new SimpleModule(\"String Serializer\");\n+        stringModule.addSerializer(new DigitalTwinStringSerializer(String.class, objectMapper));\n+\n+        JacksonAdapter adapter = new JacksonAdapter();\n+        adapter.serializer().registerModule(stringModule);\n+        RestClient simpleRestClient = new RestClient.Builder()\n+                .withBaseUrl(httpsEndpoint)\n+                .withCredentials(new ServiceClientCredentialsProvider(sasTokenProvider))\n+                .withResponseBuilderFactory(new ServiceResponseBuilder.Factory())\n+                .withSerializerAdapter(adapter)\n+                .build();\n+\n+        IotHubGatewayServiceAPIsImpl protocolLayerClient = new IotHubGatewayServiceAPIsImpl(simpleRestClient);\n+        digitalTwin = new DigitalTwinsImpl(simpleRestClient.retrofit(), protocolLayerClient);\n+    }\n+\n+    /**\n+     * Creates an implementation instance of {@link DigitalTwins} that is used to invoke the Digital Twin features\n+     * @param connectionString The IoTHub connection string\n+     * @return DigitalTwinAsyncClient\n+     */\n+    public static DigitalTwinAsyncClient createFromConnectionString(String connectionString)\n+    {\n+        return new DigitalTwinAsyncClient(connectionString);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The class to deserialize the application/json into.\n+     * @param <T> The generic type to deserialize the application/json into.\n+     * @return The application/json of the digital twin.\n+     */\n+    public <T> Observable<T> getDigitalTwin (String digitalTwinId, Class<T> clazz)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2NzA3OQ=="}, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjg1OTU4OnYy", "diffSide": "RIGHT", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoxMzoxOVrOHazdOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMTozMjoyNlrOHa2fEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2ODA5MQ==", "bodyText": "nit: indentation is off here", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497868091", "createdAt": "2020-10-01T00:13:19Z", "author": {"login": "azabbasi"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.service.BaseDevice;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.auth.AuthenticationType;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.*;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+\n+import javax.net.ssl.SSLContext;\n+import java.io.IOException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static com.microsoft.azure.sdk.iot.service.auth.AuthenticationType.SAS;\n+import static com.microsoft.azure.sdk.iot.service.auth.AuthenticationType.SELF_SIGNED;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@StandardTierHubOnlyTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private String ModelId;\n+\n+    @Parameterized.Parameters(name = \"{0}_{1}_{2}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+\n+        registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n+\n+        X509CertificateGenerator certificateGenerator = new X509CertificateGenerator();\n+        String publicKeyCert = certificateGenerator.getPublicCertificate();\n+        String privateKey = certificateGenerator.getPrivateKey();\n+        String x509Thumbprint = certificateGenerator.getX509Thumbprint();\n+\n+        List inputs = new ArrayList();\n+        inputs.addAll(Arrays.asList(\n+                new Object[][]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2ODEzNQ==", "bodyText": "and below", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497868135", "createdAt": "2020-10-01T00:13:28Z", "author": {"login": "azabbasi"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.service.BaseDevice;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.auth.AuthenticationType;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.*;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+\n+import javax.net.ssl.SSLContext;\n+import java.io.IOException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static com.microsoft.azure.sdk.iot.service.auth.AuthenticationType.SAS;\n+import static com.microsoft.azure.sdk.iot.service.auth.AuthenticationType.SELF_SIGNED;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@StandardTierHubOnlyTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private String ModelId;\n+\n+    @Parameterized.Parameters(name = \"{0}_{1}_{2}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+\n+        registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n+\n+        X509CertificateGenerator certificateGenerator = new X509CertificateGenerator();\n+        String publicKeyCert = certificateGenerator.getPublicCertificate();\n+        String privateKey = certificateGenerator.getPrivateKey();\n+        String x509Thumbprint = certificateGenerator.getX509Thumbprint();\n+\n+        List inputs = new ArrayList();\n+        inputs.addAll(Arrays.asList(\n+                new Object[][]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2ODA5MQ=="}, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkxNzcxMg==", "bodyText": "done", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497917712", "createdAt": "2020-10-01T01:32:26Z", "author": {"login": "bikamani"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.service.BaseDevice;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.auth.AuthenticationType;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.*;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+\n+import javax.net.ssl.SSLContext;\n+import java.io.IOException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static com.microsoft.azure.sdk.iot.service.auth.AuthenticationType.SAS;\n+import static com.microsoft.azure.sdk.iot.service.auth.AuthenticationType.SELF_SIGNED;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@StandardTierHubOnlyTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private String ModelId;\n+\n+    @Parameterized.Parameters(name = \"{0}_{1}_{2}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+\n+        registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n+\n+        X509CertificateGenerator certificateGenerator = new X509CertificateGenerator();\n+        String publicKeyCert = certificateGenerator.getPublicCertificate();\n+        String privateKey = certificateGenerator.getPrivateKey();\n+        String x509Thumbprint = certificateGenerator.getX509Thumbprint();\n+\n+        List inputs = new ArrayList();\n+        inputs.addAll(Arrays.asList(\n+                new Object[][]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2ODA5MQ=="}, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjg2MTQ0OnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/authentication/StaticSasTokenProvider.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoxNDozMVrOHazebg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMToyOTo0M1rOHa2YjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2ODM5OA==", "bodyText": "how does this ever get set?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497868398", "createdAt": "2020-10-01T00:14:31Z", "author": {"login": "drwill-ms"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/authentication/StaticSasTokenProvider.java", "diffHunk": "@@ -0,0 +1,19 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin.authentication;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.NonNull;\n+\n+@AllArgsConstructor\n+public class StaticSasTokenProvider implements SasTokenProvider {\n+\n+    @NonNull\n+    private final String sharedAccessSignature;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3NzM4Mw==", "bodyText": "very good question", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497877383", "createdAt": "2020-10-01T00:29:11Z", "author": {"login": "azabbasi"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/authentication/StaticSasTokenProvider.java", "diffHunk": "@@ -0,0 +1,19 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin.authentication;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.NonNull;\n+\n+@AllArgsConstructor\n+public class StaticSasTokenProvider implements SasTokenProvider {\n+\n+    @NonNull\n+    private final String sharedAccessSignature;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2ODM5OA=="}, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkxNjA0NQ==", "bodyText": "return new StaticSasTokenProvider(sharedAccessSignature);\nin ServiceConnectionString.java\n@AllArgsConstructor generates a constructor with 1 parameter for each field in your class. Fields marked with @nonnull result in null checks on those parameters.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497916045", "createdAt": "2020-10-01T01:29:43Z", "author": {"login": "bikamani"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/authentication/StaticSasTokenProvider.java", "diffHunk": "@@ -0,0 +1,19 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin.authentication;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.NonNull;\n+\n+@AllArgsConstructor\n+public class StaticSasTokenProvider implements SasTokenProvider {\n+\n+    @NonNull\n+    private final String sharedAccessSignature;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2ODM5OA=="}, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjg2NTI0OnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/generated/DigitalTwins.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoxNTo0M1rOHazg4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMTozMTo0N1rOHa2dhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2OTAyNA==", "bodyText": "duplicate summaries on these", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497869024", "createdAt": "2020-10-01T00:15:43Z", "author": {"login": "drwill-ms"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/generated/DigitalTwins.java", "diffHunk": "@@ -0,0 +1,370 @@\n+/**\n+ * Code generated by Microsoft (R) AutoRest Code Generator.\n+ * Changes may cause incorrect behavior and will be lost if the code is\n+ * regenerated.\n+ */\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin.generated;\n+\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinGetDigitalTwinHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeComponentCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeRootLevelCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinUpdateDigitalTwinHeaders;\n+import com.microsoft.rest.RestException;\n+import com.microsoft.rest.ServiceCallback;\n+import com.microsoft.rest.ServiceFuture;\n+import com.microsoft.rest.ServiceResponseWithHeaders;\n+import java.io.IOException;\n+import java.util.List;\n+import rx.Observable;\n+\n+/**\n+ * An instance of this class provides access to all the operations defined\n+ * in DigitalTwins.\n+ */\n+public interface DigitalTwins {\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @throws RestException thrown if the request is rejected by server\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent\n+     * @return the Object object if successful.\n+     */\n+    Object getDigitalTwin(String id);\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceFuture} object\n+     */\n+    ServiceFuture<Object> getDigitalTwinAsync(String id, final ServiceCallback<Object> serviceCallback);\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the observable to the Object object\n+     */\n+    Observable<Object> getDigitalTwinAsync(String id);\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the observable to the Object object\n+     */\n+    Observable<ServiceResponseWithHeaders<Object, DigitalTwinGetDigitalTwinHeaders>> getDigitalTwinWithServiceResponseAsync(String id);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @throws RestException thrown if the request is rejected by server\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent\n+     */\n+    void updateDigitalTwin(String id, List<Object> digitalTwinPatch);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceFuture} object\n+     */\n+    ServiceFuture<Void> updateDigitalTwinAsync(String id, List<Object> digitalTwinPatch, final ServiceCallback<Void> serviceCallback);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceResponseWithHeaders} object if successful.\n+     */\n+    Observable<Void> updateDigitalTwinAsync(String id, List<Object> digitalTwinPatch);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceResponseWithHeaders} object if successful.\n+     */\n+    Observable<ServiceResponseWithHeaders<Void, DigitalTwinUpdateDigitalTwinHeaders>> updateDigitalTwinWithServiceResponseAsync(String id, List<Object> digitalTwinPatch);\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @param ifMatch the String value\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @throws RestException thrown if the request is rejected by server\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent\n+     */\n+    void updateDigitalTwin(String id, List<Object> digitalTwinPatch, String ifMatch);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @param ifMatch the String value\n+     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceFuture} object\n+     */\n+    ServiceFuture<Void> updateDigitalTwinAsync(String id, List<Object> digitalTwinPatch, String ifMatch, final ServiceCallback<Void> serviceCallback);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @param ifMatch the String value\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceResponseWithHeaders} object if successful.\n+     */\n+    Observable<Void> updateDigitalTwinAsync(String id, List<Object> digitalTwinPatch, String ifMatch);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @param ifMatch the String value\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceResponseWithHeaders} object if successful.\n+     */\n+    Observable<ServiceResponseWithHeaders<Void, DigitalTwinUpdateDigitalTwinHeaders>> updateDigitalTwinWithServiceResponseAsync(String id, List<Object> digitalTwinPatch, String ifMatch);\n+\n+    /**\n+     * Invoke a digital twin root level command.\n+     * Invoke a digital twin root level command.\n+     *\n+     * @param id the String value\n+     * @param commandName the String value\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @throws RestException thrown if the request is rejected by server\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent\n+     * @return the Object object if successful.\n+     */\n+    Object invokeRootLevelCommand(String id, String commandName);\n+\n+    /**\n+     * Invoke a digital twin root level command.\n+     * Invoke a digital twin root level command.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3NTk3Ng==", "bodyText": "this is generated code, I wonder why this happened.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497875976", "createdAt": "2020-10-01T00:26:58Z", "author": {"login": "azabbasi"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/generated/DigitalTwins.java", "diffHunk": "@@ -0,0 +1,370 @@\n+/**\n+ * Code generated by Microsoft (R) AutoRest Code Generator.\n+ * Changes may cause incorrect behavior and will be lost if the code is\n+ * regenerated.\n+ */\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin.generated;\n+\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinGetDigitalTwinHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeComponentCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeRootLevelCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinUpdateDigitalTwinHeaders;\n+import com.microsoft.rest.RestException;\n+import com.microsoft.rest.ServiceCallback;\n+import com.microsoft.rest.ServiceFuture;\n+import com.microsoft.rest.ServiceResponseWithHeaders;\n+import java.io.IOException;\n+import java.util.List;\n+import rx.Observable;\n+\n+/**\n+ * An instance of this class provides access to all the operations defined\n+ * in DigitalTwins.\n+ */\n+public interface DigitalTwins {\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @throws RestException thrown if the request is rejected by server\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent\n+     * @return the Object object if successful.\n+     */\n+    Object getDigitalTwin(String id);\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceFuture} object\n+     */\n+    ServiceFuture<Object> getDigitalTwinAsync(String id, final ServiceCallback<Object> serviceCallback);\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the observable to the Object object\n+     */\n+    Observable<Object> getDigitalTwinAsync(String id);\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the observable to the Object object\n+     */\n+    Observable<ServiceResponseWithHeaders<Object, DigitalTwinGetDigitalTwinHeaders>> getDigitalTwinWithServiceResponseAsync(String id);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @throws RestException thrown if the request is rejected by server\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent\n+     */\n+    void updateDigitalTwin(String id, List<Object> digitalTwinPatch);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceFuture} object\n+     */\n+    ServiceFuture<Void> updateDigitalTwinAsync(String id, List<Object> digitalTwinPatch, final ServiceCallback<Void> serviceCallback);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceResponseWithHeaders} object if successful.\n+     */\n+    Observable<Void> updateDigitalTwinAsync(String id, List<Object> digitalTwinPatch);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceResponseWithHeaders} object if successful.\n+     */\n+    Observable<ServiceResponseWithHeaders<Void, DigitalTwinUpdateDigitalTwinHeaders>> updateDigitalTwinWithServiceResponseAsync(String id, List<Object> digitalTwinPatch);\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @param ifMatch the String value\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @throws RestException thrown if the request is rejected by server\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent\n+     */\n+    void updateDigitalTwin(String id, List<Object> digitalTwinPatch, String ifMatch);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @param ifMatch the String value\n+     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceFuture} object\n+     */\n+    ServiceFuture<Void> updateDigitalTwinAsync(String id, List<Object> digitalTwinPatch, String ifMatch, final ServiceCallback<Void> serviceCallback);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @param ifMatch the String value\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceResponseWithHeaders} object if successful.\n+     */\n+    Observable<Void> updateDigitalTwinAsync(String id, List<Object> digitalTwinPatch, String ifMatch);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @param ifMatch the String value\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceResponseWithHeaders} object if successful.\n+     */\n+    Observable<ServiceResponseWithHeaders<Void, DigitalTwinUpdateDigitalTwinHeaders>> updateDigitalTwinWithServiceResponseAsync(String id, List<Object> digitalTwinPatch, String ifMatch);\n+\n+    /**\n+     * Invoke a digital twin root level command.\n+     * Invoke a digital twin root level command.\n+     *\n+     * @param id the String value\n+     * @param commandName the String value\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @throws RestException thrown if the request is rejected by server\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent\n+     * @return the Object object if successful.\n+     */\n+    Object invokeRootLevelCommand(String id, String commandName);\n+\n+    /**\n+     * Invoke a digital twin root level command.\n+     * Invoke a digital twin root level command.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2OTAyNA=="}, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3NjE4NQ==", "bodyText": "same thing on line 153", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497876185", "createdAt": "2020-10-01T00:27:17Z", "author": {"login": "azabbasi"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/generated/DigitalTwins.java", "diffHunk": "@@ -0,0 +1,370 @@\n+/**\n+ * Code generated by Microsoft (R) AutoRest Code Generator.\n+ * Changes may cause incorrect behavior and will be lost if the code is\n+ * regenerated.\n+ */\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin.generated;\n+\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinGetDigitalTwinHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeComponentCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeRootLevelCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinUpdateDigitalTwinHeaders;\n+import com.microsoft.rest.RestException;\n+import com.microsoft.rest.ServiceCallback;\n+import com.microsoft.rest.ServiceFuture;\n+import com.microsoft.rest.ServiceResponseWithHeaders;\n+import java.io.IOException;\n+import java.util.List;\n+import rx.Observable;\n+\n+/**\n+ * An instance of this class provides access to all the operations defined\n+ * in DigitalTwins.\n+ */\n+public interface DigitalTwins {\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @throws RestException thrown if the request is rejected by server\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent\n+     * @return the Object object if successful.\n+     */\n+    Object getDigitalTwin(String id);\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceFuture} object\n+     */\n+    ServiceFuture<Object> getDigitalTwinAsync(String id, final ServiceCallback<Object> serviceCallback);\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the observable to the Object object\n+     */\n+    Observable<Object> getDigitalTwinAsync(String id);\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the observable to the Object object\n+     */\n+    Observable<ServiceResponseWithHeaders<Object, DigitalTwinGetDigitalTwinHeaders>> getDigitalTwinWithServiceResponseAsync(String id);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @throws RestException thrown if the request is rejected by server\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent\n+     */\n+    void updateDigitalTwin(String id, List<Object> digitalTwinPatch);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceFuture} object\n+     */\n+    ServiceFuture<Void> updateDigitalTwinAsync(String id, List<Object> digitalTwinPatch, final ServiceCallback<Void> serviceCallback);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceResponseWithHeaders} object if successful.\n+     */\n+    Observable<Void> updateDigitalTwinAsync(String id, List<Object> digitalTwinPatch);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceResponseWithHeaders} object if successful.\n+     */\n+    Observable<ServiceResponseWithHeaders<Void, DigitalTwinUpdateDigitalTwinHeaders>> updateDigitalTwinWithServiceResponseAsync(String id, List<Object> digitalTwinPatch);\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @param ifMatch the String value\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @throws RestException thrown if the request is rejected by server\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent\n+     */\n+    void updateDigitalTwin(String id, List<Object> digitalTwinPatch, String ifMatch);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @param ifMatch the String value\n+     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceFuture} object\n+     */\n+    ServiceFuture<Void> updateDigitalTwinAsync(String id, List<Object> digitalTwinPatch, String ifMatch, final ServiceCallback<Void> serviceCallback);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @param ifMatch the String value\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceResponseWithHeaders} object if successful.\n+     */\n+    Observable<Void> updateDigitalTwinAsync(String id, List<Object> digitalTwinPatch, String ifMatch);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @param ifMatch the String value\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceResponseWithHeaders} object if successful.\n+     */\n+    Observable<ServiceResponseWithHeaders<Void, DigitalTwinUpdateDigitalTwinHeaders>> updateDigitalTwinWithServiceResponseAsync(String id, List<Object> digitalTwinPatch, String ifMatch);\n+\n+    /**\n+     * Invoke a digital twin root level command.\n+     * Invoke a digital twin root level command.\n+     *\n+     * @param id the String value\n+     * @param commandName the String value\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @throws RestException thrown if the request is rejected by server\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent\n+     * @return the Object object if successful.\n+     */\n+    Object invokeRootLevelCommand(String id, String commandName);\n+\n+    /**\n+     * Invoke a digital twin root level command.\n+     * Invoke a digital twin root level command.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2OTAyNA=="}, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3NjMyMw==", "bodyText": "and everywhere on this file.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497876323", "createdAt": "2020-10-01T00:27:29Z", "author": {"login": "azabbasi"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/generated/DigitalTwins.java", "diffHunk": "@@ -0,0 +1,370 @@\n+/**\n+ * Code generated by Microsoft (R) AutoRest Code Generator.\n+ * Changes may cause incorrect behavior and will be lost if the code is\n+ * regenerated.\n+ */\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin.generated;\n+\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinGetDigitalTwinHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeComponentCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeRootLevelCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinUpdateDigitalTwinHeaders;\n+import com.microsoft.rest.RestException;\n+import com.microsoft.rest.ServiceCallback;\n+import com.microsoft.rest.ServiceFuture;\n+import com.microsoft.rest.ServiceResponseWithHeaders;\n+import java.io.IOException;\n+import java.util.List;\n+import rx.Observable;\n+\n+/**\n+ * An instance of this class provides access to all the operations defined\n+ * in DigitalTwins.\n+ */\n+public interface DigitalTwins {\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @throws RestException thrown if the request is rejected by server\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent\n+     * @return the Object object if successful.\n+     */\n+    Object getDigitalTwin(String id);\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceFuture} object\n+     */\n+    ServiceFuture<Object> getDigitalTwinAsync(String id, final ServiceCallback<Object> serviceCallback);\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the observable to the Object object\n+     */\n+    Observable<Object> getDigitalTwinAsync(String id);\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the observable to the Object object\n+     */\n+    Observable<ServiceResponseWithHeaders<Object, DigitalTwinGetDigitalTwinHeaders>> getDigitalTwinWithServiceResponseAsync(String id);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @throws RestException thrown if the request is rejected by server\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent\n+     */\n+    void updateDigitalTwin(String id, List<Object> digitalTwinPatch);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceFuture} object\n+     */\n+    ServiceFuture<Void> updateDigitalTwinAsync(String id, List<Object> digitalTwinPatch, final ServiceCallback<Void> serviceCallback);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceResponseWithHeaders} object if successful.\n+     */\n+    Observable<Void> updateDigitalTwinAsync(String id, List<Object> digitalTwinPatch);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceResponseWithHeaders} object if successful.\n+     */\n+    Observable<ServiceResponseWithHeaders<Void, DigitalTwinUpdateDigitalTwinHeaders>> updateDigitalTwinWithServiceResponseAsync(String id, List<Object> digitalTwinPatch);\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @param ifMatch the String value\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @throws RestException thrown if the request is rejected by server\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent\n+     */\n+    void updateDigitalTwin(String id, List<Object> digitalTwinPatch, String ifMatch);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @param ifMatch the String value\n+     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceFuture} object\n+     */\n+    ServiceFuture<Void> updateDigitalTwinAsync(String id, List<Object> digitalTwinPatch, String ifMatch, final ServiceCallback<Void> serviceCallback);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @param ifMatch the String value\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceResponseWithHeaders} object if successful.\n+     */\n+    Observable<Void> updateDigitalTwinAsync(String id, List<Object> digitalTwinPatch, String ifMatch);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @param ifMatch the String value\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceResponseWithHeaders} object if successful.\n+     */\n+    Observable<ServiceResponseWithHeaders<Void, DigitalTwinUpdateDigitalTwinHeaders>> updateDigitalTwinWithServiceResponseAsync(String id, List<Object> digitalTwinPatch, String ifMatch);\n+\n+    /**\n+     * Invoke a digital twin root level command.\n+     * Invoke a digital twin root level command.\n+     *\n+     * @param id the String value\n+     * @param commandName the String value\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @throws RestException thrown if the request is rejected by server\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent\n+     * @return the Object object if successful.\n+     */\n+    Object invokeRootLevelCommand(String id, String commandName);\n+\n+    /**\n+     * Invoke a digital twin root level command.\n+     * Invoke a digital twin root level command.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2OTAyNA=="}, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg4MzE3Mg==", "bodyText": "I'm guessing both summary and description have the same value?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497883172", "createdAt": "2020-10-01T00:38:09Z", "author": {"login": "drwill-ms"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/generated/DigitalTwins.java", "diffHunk": "@@ -0,0 +1,370 @@\n+/**\n+ * Code generated by Microsoft (R) AutoRest Code Generator.\n+ * Changes may cause incorrect behavior and will be lost if the code is\n+ * regenerated.\n+ */\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin.generated;\n+\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinGetDigitalTwinHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeComponentCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeRootLevelCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinUpdateDigitalTwinHeaders;\n+import com.microsoft.rest.RestException;\n+import com.microsoft.rest.ServiceCallback;\n+import com.microsoft.rest.ServiceFuture;\n+import com.microsoft.rest.ServiceResponseWithHeaders;\n+import java.io.IOException;\n+import java.util.List;\n+import rx.Observable;\n+\n+/**\n+ * An instance of this class provides access to all the operations defined\n+ * in DigitalTwins.\n+ */\n+public interface DigitalTwins {\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @throws RestException thrown if the request is rejected by server\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent\n+     * @return the Object object if successful.\n+     */\n+    Object getDigitalTwin(String id);\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceFuture} object\n+     */\n+    ServiceFuture<Object> getDigitalTwinAsync(String id, final ServiceCallback<Object> serviceCallback);\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the observable to the Object object\n+     */\n+    Observable<Object> getDigitalTwinAsync(String id);\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the observable to the Object object\n+     */\n+    Observable<ServiceResponseWithHeaders<Object, DigitalTwinGetDigitalTwinHeaders>> getDigitalTwinWithServiceResponseAsync(String id);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @throws RestException thrown if the request is rejected by server\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent\n+     */\n+    void updateDigitalTwin(String id, List<Object> digitalTwinPatch);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceFuture} object\n+     */\n+    ServiceFuture<Void> updateDigitalTwinAsync(String id, List<Object> digitalTwinPatch, final ServiceCallback<Void> serviceCallback);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceResponseWithHeaders} object if successful.\n+     */\n+    Observable<Void> updateDigitalTwinAsync(String id, List<Object> digitalTwinPatch);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceResponseWithHeaders} object if successful.\n+     */\n+    Observable<ServiceResponseWithHeaders<Void, DigitalTwinUpdateDigitalTwinHeaders>> updateDigitalTwinWithServiceResponseAsync(String id, List<Object> digitalTwinPatch);\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @param ifMatch the String value\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @throws RestException thrown if the request is rejected by server\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent\n+     */\n+    void updateDigitalTwin(String id, List<Object> digitalTwinPatch, String ifMatch);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @param ifMatch the String value\n+     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceFuture} object\n+     */\n+    ServiceFuture<Void> updateDigitalTwinAsync(String id, List<Object> digitalTwinPatch, String ifMatch, final ServiceCallback<Void> serviceCallback);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @param ifMatch the String value\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceResponseWithHeaders} object if successful.\n+     */\n+    Observable<Void> updateDigitalTwinAsync(String id, List<Object> digitalTwinPatch, String ifMatch);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @param ifMatch the String value\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceResponseWithHeaders} object if successful.\n+     */\n+    Observable<ServiceResponseWithHeaders<Void, DigitalTwinUpdateDigitalTwinHeaders>> updateDigitalTwinWithServiceResponseAsync(String id, List<Object> digitalTwinPatch, String ifMatch);\n+\n+    /**\n+     * Invoke a digital twin root level command.\n+     * Invoke a digital twin root level command.\n+     *\n+     * @param id the String value\n+     * @param commandName the String value\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @throws RestException thrown if the request is rejected by server\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent\n+     * @return the Object object if successful.\n+     */\n+    Object invokeRootLevelCommand(String id, String commandName);\n+\n+    /**\n+     * Invoke a digital twin root level command.\n+     * Invoke a digital twin root level command.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2OTAyNA=="}, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkxNjYzMg==", "bodyText": "Even if I remove it now, when we generate again it may be there. Do we want to manually update these generated files every time?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497916632", "createdAt": "2020-10-01T01:30:37Z", "author": {"login": "bikamani"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/generated/DigitalTwins.java", "diffHunk": "@@ -0,0 +1,370 @@\n+/**\n+ * Code generated by Microsoft (R) AutoRest Code Generator.\n+ * Changes may cause incorrect behavior and will be lost if the code is\n+ * regenerated.\n+ */\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin.generated;\n+\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinGetDigitalTwinHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeComponentCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeRootLevelCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinUpdateDigitalTwinHeaders;\n+import com.microsoft.rest.RestException;\n+import com.microsoft.rest.ServiceCallback;\n+import com.microsoft.rest.ServiceFuture;\n+import com.microsoft.rest.ServiceResponseWithHeaders;\n+import java.io.IOException;\n+import java.util.List;\n+import rx.Observable;\n+\n+/**\n+ * An instance of this class provides access to all the operations defined\n+ * in DigitalTwins.\n+ */\n+public interface DigitalTwins {\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @throws RestException thrown if the request is rejected by server\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent\n+     * @return the Object object if successful.\n+     */\n+    Object getDigitalTwin(String id);\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceFuture} object\n+     */\n+    ServiceFuture<Object> getDigitalTwinAsync(String id, final ServiceCallback<Object> serviceCallback);\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the observable to the Object object\n+     */\n+    Observable<Object> getDigitalTwinAsync(String id);\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the observable to the Object object\n+     */\n+    Observable<ServiceResponseWithHeaders<Object, DigitalTwinGetDigitalTwinHeaders>> getDigitalTwinWithServiceResponseAsync(String id);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @throws RestException thrown if the request is rejected by server\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent\n+     */\n+    void updateDigitalTwin(String id, List<Object> digitalTwinPatch);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceFuture} object\n+     */\n+    ServiceFuture<Void> updateDigitalTwinAsync(String id, List<Object> digitalTwinPatch, final ServiceCallback<Void> serviceCallback);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceResponseWithHeaders} object if successful.\n+     */\n+    Observable<Void> updateDigitalTwinAsync(String id, List<Object> digitalTwinPatch);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceResponseWithHeaders} object if successful.\n+     */\n+    Observable<ServiceResponseWithHeaders<Void, DigitalTwinUpdateDigitalTwinHeaders>> updateDigitalTwinWithServiceResponseAsync(String id, List<Object> digitalTwinPatch);\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @param ifMatch the String value\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @throws RestException thrown if the request is rejected by server\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent\n+     */\n+    void updateDigitalTwin(String id, List<Object> digitalTwinPatch, String ifMatch);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @param ifMatch the String value\n+     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceFuture} object\n+     */\n+    ServiceFuture<Void> updateDigitalTwinAsync(String id, List<Object> digitalTwinPatch, String ifMatch, final ServiceCallback<Void> serviceCallback);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @param ifMatch the String value\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceResponseWithHeaders} object if successful.\n+     */\n+    Observable<Void> updateDigitalTwinAsync(String id, List<Object> digitalTwinPatch, String ifMatch);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @param ifMatch the String value\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceResponseWithHeaders} object if successful.\n+     */\n+    Observable<ServiceResponseWithHeaders<Void, DigitalTwinUpdateDigitalTwinHeaders>> updateDigitalTwinWithServiceResponseAsync(String id, List<Object> digitalTwinPatch, String ifMatch);\n+\n+    /**\n+     * Invoke a digital twin root level command.\n+     * Invoke a digital twin root level command.\n+     *\n+     * @param id the String value\n+     * @param commandName the String value\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @throws RestException thrown if the request is rejected by server\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent\n+     * @return the Object object if successful.\n+     */\n+    Object invokeRootLevelCommand(String id, String commandName);\n+\n+    /**\n+     * Invoke a digital twin root level command.\n+     * Invoke a digital twin root level command.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2OTAyNA=="}, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkxNzMxOA==", "bodyText": "For now I have removed here and below.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497917318", "createdAt": "2020-10-01T01:31:47Z", "author": {"login": "bikamani"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/generated/DigitalTwins.java", "diffHunk": "@@ -0,0 +1,370 @@\n+/**\n+ * Code generated by Microsoft (R) AutoRest Code Generator.\n+ * Changes may cause incorrect behavior and will be lost if the code is\n+ * regenerated.\n+ */\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin.generated;\n+\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinGetDigitalTwinHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeComponentCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeRootLevelCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinUpdateDigitalTwinHeaders;\n+import com.microsoft.rest.RestException;\n+import com.microsoft.rest.ServiceCallback;\n+import com.microsoft.rest.ServiceFuture;\n+import com.microsoft.rest.ServiceResponseWithHeaders;\n+import java.io.IOException;\n+import java.util.List;\n+import rx.Observable;\n+\n+/**\n+ * An instance of this class provides access to all the operations defined\n+ * in DigitalTwins.\n+ */\n+public interface DigitalTwins {\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @throws RestException thrown if the request is rejected by server\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent\n+     * @return the Object object if successful.\n+     */\n+    Object getDigitalTwin(String id);\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceFuture} object\n+     */\n+    ServiceFuture<Object> getDigitalTwinAsync(String id, final ServiceCallback<Object> serviceCallback);\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the observable to the Object object\n+     */\n+    Observable<Object> getDigitalTwinAsync(String id);\n+\n+    /**\n+     * Gets a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the observable to the Object object\n+     */\n+    Observable<ServiceResponseWithHeaders<Object, DigitalTwinGetDigitalTwinHeaders>> getDigitalTwinWithServiceResponseAsync(String id);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @throws RestException thrown if the request is rejected by server\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent\n+     */\n+    void updateDigitalTwin(String id, List<Object> digitalTwinPatch);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceFuture} object\n+     */\n+    ServiceFuture<Void> updateDigitalTwinAsync(String id, List<Object> digitalTwinPatch, final ServiceCallback<Void> serviceCallback);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceResponseWithHeaders} object if successful.\n+     */\n+    Observable<Void> updateDigitalTwinAsync(String id, List<Object> digitalTwinPatch);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceResponseWithHeaders} object if successful.\n+     */\n+    Observable<ServiceResponseWithHeaders<Void, DigitalTwinUpdateDigitalTwinHeaders>> updateDigitalTwinWithServiceResponseAsync(String id, List<Object> digitalTwinPatch);\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @param ifMatch the String value\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @throws RestException thrown if the request is rejected by server\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent\n+     */\n+    void updateDigitalTwin(String id, List<Object> digitalTwinPatch, String ifMatch);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @param ifMatch the String value\n+     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceFuture} object\n+     */\n+    ServiceFuture<Void> updateDigitalTwinAsync(String id, List<Object> digitalTwinPatch, String ifMatch, final ServiceCallback<Void> serviceCallback);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @param ifMatch the String value\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceResponseWithHeaders} object if successful.\n+     */\n+    Observable<Void> updateDigitalTwinAsync(String id, List<Object> digitalTwinPatch, String ifMatch);\n+\n+    /**\n+     * Updates a digital twin.\n+     *\n+     * @param id Digital Twin ID.\n+     * @param digitalTwinPatch json-patch contents to update.\n+     * @param ifMatch the String value\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @return the {@link ServiceResponseWithHeaders} object if successful.\n+     */\n+    Observable<ServiceResponseWithHeaders<Void, DigitalTwinUpdateDigitalTwinHeaders>> updateDigitalTwinWithServiceResponseAsync(String id, List<Object> digitalTwinPatch, String ifMatch);\n+\n+    /**\n+     * Invoke a digital twin root level command.\n+     * Invoke a digital twin root level command.\n+     *\n+     * @param id the String value\n+     * @param commandName the String value\n+     * @throws IllegalArgumentException thrown if parameters fail the validation\n+     * @throws RestException thrown if the request is rejected by server\n+     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent\n+     * @return the Object object if successful.\n+     */\n+    Object invokeRootLevelCommand(String id, String commandName);\n+\n+    /**\n+     * Invoke a digital twin root level command.\n+     * Invoke a digital twin root level command.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2OTAyNA=="}, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjg3MTE1OnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoxNzowOVrOHazkjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoxNzowOVrOHazkjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2OTk2NQ==", "bodyText": "extra line", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497869965", "createdAt": "2020-10-01T00:17:09Z", "author": {"login": "azabbasi"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "diffHunk": "@@ -0,0 +1,249 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.SasTokenProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceClientCredentialsProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionString;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionStringParser;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinGetHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinUpdateHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.DigitalTwinsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.IotHubGatewayServiceAPIsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.DigitalTwins;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeRootLevelCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.serialization.DeserializationHelpers;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.serialization.DigitalTwinStringSerializer;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.*;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.rest.*;\n+import com.microsoft.rest.serializer.JacksonAdapter;\n+import rx.Observable;\n+import rx.schedulers.Schedulers;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.Tools.*;\n+\n+public class DigitalTwinAsyncClient {\n+    private DigitalTwinsImpl digitalTwin;\n+    private static ObjectMapper objectMapper = new ObjectMapper();\n+\n+     DigitalTwinAsyncClient(String connectionString) {\n+        ServiceConnectionString serviceConnectionString = ServiceConnectionStringParser.parseConnectionString(connectionString);\n+        SasTokenProvider sasTokenProvider = serviceConnectionString.createSasTokenProvider();\n+        String httpsEndpoint = serviceConnectionString.getHttpsEndpoint();\n+        final SimpleModule stringModule = new SimpleModule(\"String Serializer\");\n+        stringModule.addSerializer(new DigitalTwinStringSerializer(String.class, objectMapper));\n+\n+        JacksonAdapter adapter = new JacksonAdapter();\n+        adapter.serializer().registerModule(stringModule);\n+        RestClient simpleRestClient = new RestClient.Builder()\n+                .withBaseUrl(httpsEndpoint)\n+                .withCredentials(new ServiceClientCredentialsProvider(sasTokenProvider))\n+                .withResponseBuilderFactory(new ServiceResponseBuilder.Factory())\n+                .withSerializerAdapter(adapter)\n+                .build();\n+\n+        IotHubGatewayServiceAPIsImpl protocolLayerClient = new IotHubGatewayServiceAPIsImpl(simpleRestClient);\n+        digitalTwin = new DigitalTwinsImpl(simpleRestClient.retrofit(), protocolLayerClient);\n+    }\n+\n+    /**\n+     * Creates an implementation instance of {@link DigitalTwins} that is used to invoke the Digital Twin features\n+     * @param connectionString The IoTHub connection string\n+     * @return DigitalTwinAsyncClient\n+     */\n+    public static DigitalTwinAsyncClient createFromConnectionString(String connectionString)\n+    {\n+        return new DigitalTwinAsyncClient(connectionString);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The class to deserialize the application/json into.\n+     * @param <T> The generic type to deserialize the application/json into.\n+     * @return The application/json of the digital twin.\n+     */\n+    public <T> Observable<T> getDigitalTwin (String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz)\n+                .map(response -> response.body());\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The class to deserialize the application/json into.\n+     * @param <T> The generic type to deserialize the application/json into.\n+     * @return A {@link ServiceResponseWithHeaders} representing deserialized application/json of the digital twin with {@link DigitalTwinGetHeaders}.\n+     */\n+    public <T> Observable<ServiceResponseWithHeaders<T, DigitalTwinGetHeaders>> getDigitalTwinWithResponse (String digitalTwinId, Class<T> clazz)\n+    {\n+        if(clazz == null)\n+        {\n+            throw new IllegalArgumentException(\"Parameter clazz is required and cannot be null.\");\n+        }\n+\n+        return digitalTwin.getDigitalTwinWithServiceResponseAsync(digitalTwinId)\n+                .flatMap(FUNC_TO_DIGITAL_TWIN_GET_RESPONSE)\n+                .flatMap(response -> {\n+                    try {\n+                        T genericResponse = DeserializationHelpers.castObject(objectMapper, response.body(), clazz);\n+                        return Observable.just(new ServiceResponseWithHeaders<>(genericResponse, response.headers(), response.response()));\n+                    } catch (JsonProcessingException e) {\n+                        return Observable.error(new IotHubException(\"Failed to parse the resonse\"));\n+                    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjg3NDIzOnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoxODowMlrOHazmtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoyMDoyOVrOHazswg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3MDUxOA==", "bodyText": "I think instead of null you should create the options with default values and pass it in.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497870518", "createdAt": "2020-10-01T00:18:02Z", "author": {"login": "azabbasi"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "diffHunk": "@@ -0,0 +1,249 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.SasTokenProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceClientCredentialsProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionString;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionStringParser;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinGetHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinUpdateHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.DigitalTwinsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.IotHubGatewayServiceAPIsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.DigitalTwins;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeRootLevelCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.serialization.DeserializationHelpers;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.serialization.DigitalTwinStringSerializer;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.*;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.rest.*;\n+import com.microsoft.rest.serializer.JacksonAdapter;\n+import rx.Observable;\n+import rx.schedulers.Schedulers;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.Tools.*;\n+\n+public class DigitalTwinAsyncClient {\n+    private DigitalTwinsImpl digitalTwin;\n+    private static ObjectMapper objectMapper = new ObjectMapper();\n+\n+     DigitalTwinAsyncClient(String connectionString) {\n+        ServiceConnectionString serviceConnectionString = ServiceConnectionStringParser.parseConnectionString(connectionString);\n+        SasTokenProvider sasTokenProvider = serviceConnectionString.createSasTokenProvider();\n+        String httpsEndpoint = serviceConnectionString.getHttpsEndpoint();\n+        final SimpleModule stringModule = new SimpleModule(\"String Serializer\");\n+        stringModule.addSerializer(new DigitalTwinStringSerializer(String.class, objectMapper));\n+\n+        JacksonAdapter adapter = new JacksonAdapter();\n+        adapter.serializer().registerModule(stringModule);\n+        RestClient simpleRestClient = new RestClient.Builder()\n+                .withBaseUrl(httpsEndpoint)\n+                .withCredentials(new ServiceClientCredentialsProvider(sasTokenProvider))\n+                .withResponseBuilderFactory(new ServiceResponseBuilder.Factory())\n+                .withSerializerAdapter(adapter)\n+                .build();\n+\n+        IotHubGatewayServiceAPIsImpl protocolLayerClient = new IotHubGatewayServiceAPIsImpl(simpleRestClient);\n+        digitalTwin = new DigitalTwinsImpl(simpleRestClient.retrofit(), protocolLayerClient);\n+    }\n+\n+    /**\n+     * Creates an implementation instance of {@link DigitalTwins} that is used to invoke the Digital Twin features\n+     * @param connectionString The IoTHub connection string\n+     * @return DigitalTwinAsyncClient\n+     */\n+    public static DigitalTwinAsyncClient createFromConnectionString(String connectionString)\n+    {\n+        return new DigitalTwinAsyncClient(connectionString);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The class to deserialize the application/json into.\n+     * @param <T> The generic type to deserialize the application/json into.\n+     * @return The application/json of the digital twin.\n+     */\n+    public <T> Observable<T> getDigitalTwin (String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz)\n+                .map(response -> response.body());\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The class to deserialize the application/json into.\n+     * @param <T> The generic type to deserialize the application/json into.\n+     * @return A {@link ServiceResponseWithHeaders} representing deserialized application/json of the digital twin with {@link DigitalTwinGetHeaders}.\n+     */\n+    public <T> Observable<ServiceResponseWithHeaders<T, DigitalTwinGetHeaders>> getDigitalTwinWithResponse (String digitalTwinId, Class<T> clazz)\n+    {\n+        if(clazz == null)\n+        {\n+            throw new IllegalArgumentException(\"Parameter clazz is required and cannot be null.\");\n+        }\n+\n+        return digitalTwin.getDigitalTwinWithServiceResponseAsync(digitalTwinId)\n+                .flatMap(FUNC_TO_DIGITAL_TWIN_GET_RESPONSE)\n+                .flatMap(response -> {\n+                    try {\n+                        T genericResponse = DeserializationHelpers.castObject(objectMapper, response.body(), clazz);\n+                        return Observable.just(new ServiceResponseWithHeaders<>(genericResponse, response.headers(), response.response()));\n+                    } catch (JsonProcessingException e) {\n+                        return Observable.error(new IotHubException(\"Failed to parse the resonse\"));\n+                    }\n+\n+                })\n+                .subscribeOn(Schedulers.io());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The JSON patch to apply to the specified digital twin. This argument can be created using {@link UpdateOperationUtility}.\n+     * @return void.\n+     */\n+    public Observable<Void> updateDigitalTwin (String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        return updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, null)\n+                .map(response -> response.body());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The JSON patch to apply to the specified digital twin. This argument can be created using {@link UpdateOperationUtility}.\n+     * @return A {@link ServiceResponseWithHeaders} with {@link DigitalTwinUpdateHeaders}.\n+     */\n+    public Observable<ServiceResponseWithHeaders<Void, DigitalTwinUpdateHeaders>> updateDigitalTwinWithResponse (String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        return updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3MjA2Ng==", "bodyText": "consider that for all APIs", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497872066", "createdAt": "2020-10-01T00:20:29Z", "author": {"login": "azabbasi"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "diffHunk": "@@ -0,0 +1,249 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.SasTokenProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceClientCredentialsProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionString;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionStringParser;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinGetHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinUpdateHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.DigitalTwinsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.IotHubGatewayServiceAPIsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.DigitalTwins;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeRootLevelCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.serialization.DeserializationHelpers;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.serialization.DigitalTwinStringSerializer;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.*;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.rest.*;\n+import com.microsoft.rest.serializer.JacksonAdapter;\n+import rx.Observable;\n+import rx.schedulers.Schedulers;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.Tools.*;\n+\n+public class DigitalTwinAsyncClient {\n+    private DigitalTwinsImpl digitalTwin;\n+    private static ObjectMapper objectMapper = new ObjectMapper();\n+\n+     DigitalTwinAsyncClient(String connectionString) {\n+        ServiceConnectionString serviceConnectionString = ServiceConnectionStringParser.parseConnectionString(connectionString);\n+        SasTokenProvider sasTokenProvider = serviceConnectionString.createSasTokenProvider();\n+        String httpsEndpoint = serviceConnectionString.getHttpsEndpoint();\n+        final SimpleModule stringModule = new SimpleModule(\"String Serializer\");\n+        stringModule.addSerializer(new DigitalTwinStringSerializer(String.class, objectMapper));\n+\n+        JacksonAdapter adapter = new JacksonAdapter();\n+        adapter.serializer().registerModule(stringModule);\n+        RestClient simpleRestClient = new RestClient.Builder()\n+                .withBaseUrl(httpsEndpoint)\n+                .withCredentials(new ServiceClientCredentialsProvider(sasTokenProvider))\n+                .withResponseBuilderFactory(new ServiceResponseBuilder.Factory())\n+                .withSerializerAdapter(adapter)\n+                .build();\n+\n+        IotHubGatewayServiceAPIsImpl protocolLayerClient = new IotHubGatewayServiceAPIsImpl(simpleRestClient);\n+        digitalTwin = new DigitalTwinsImpl(simpleRestClient.retrofit(), protocolLayerClient);\n+    }\n+\n+    /**\n+     * Creates an implementation instance of {@link DigitalTwins} that is used to invoke the Digital Twin features\n+     * @param connectionString The IoTHub connection string\n+     * @return DigitalTwinAsyncClient\n+     */\n+    public static DigitalTwinAsyncClient createFromConnectionString(String connectionString)\n+    {\n+        return new DigitalTwinAsyncClient(connectionString);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The class to deserialize the application/json into.\n+     * @param <T> The generic type to deserialize the application/json into.\n+     * @return The application/json of the digital twin.\n+     */\n+    public <T> Observable<T> getDigitalTwin (String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz)\n+                .map(response -> response.body());\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The class to deserialize the application/json into.\n+     * @param <T> The generic type to deserialize the application/json into.\n+     * @return A {@link ServiceResponseWithHeaders} representing deserialized application/json of the digital twin with {@link DigitalTwinGetHeaders}.\n+     */\n+    public <T> Observable<ServiceResponseWithHeaders<T, DigitalTwinGetHeaders>> getDigitalTwinWithResponse (String digitalTwinId, Class<T> clazz)\n+    {\n+        if(clazz == null)\n+        {\n+            throw new IllegalArgumentException(\"Parameter clazz is required and cannot be null.\");\n+        }\n+\n+        return digitalTwin.getDigitalTwinWithServiceResponseAsync(digitalTwinId)\n+                .flatMap(FUNC_TO_DIGITAL_TWIN_GET_RESPONSE)\n+                .flatMap(response -> {\n+                    try {\n+                        T genericResponse = DeserializationHelpers.castObject(objectMapper, response.body(), clazz);\n+                        return Observable.just(new ServiceResponseWithHeaders<>(genericResponse, response.headers(), response.response()));\n+                    } catch (JsonProcessingException e) {\n+                        return Observable.error(new IotHubException(\"Failed to parse the resonse\"));\n+                    }\n+\n+                })\n+                .subscribeOn(Schedulers.io());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The JSON patch to apply to the specified digital twin. This argument can be created using {@link UpdateOperationUtility}.\n+     * @return void.\n+     */\n+    public Observable<Void> updateDigitalTwin (String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        return updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, null)\n+                .map(response -> response.body());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The JSON patch to apply to the specified digital twin. This argument can be created using {@link UpdateOperationUtility}.\n+     * @return A {@link ServiceResponseWithHeaders} with {@link DigitalTwinUpdateHeaders}.\n+     */\n+    public Observable<ServiceResponseWithHeaders<Void, DigitalTwinUpdateHeaders>> updateDigitalTwinWithResponse (String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        return updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3MDUxOA=="}, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjg3NzEwOnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoxODo1NlrOHazozw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMTozODo1N1rOHa2v_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3MTA1NQ==", "bodyText": "can we be consistent with the track 2 and the C# sdk and call this _protocolLayer?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497871055", "createdAt": "2020-10-01T00:18:56Z", "author": {"login": "azabbasi"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "diffHunk": "@@ -0,0 +1,249 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.SasTokenProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceClientCredentialsProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionString;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionStringParser;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinGetHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinUpdateHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.DigitalTwinsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.IotHubGatewayServiceAPIsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.DigitalTwins;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeRootLevelCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.serialization.DeserializationHelpers;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.serialization.DigitalTwinStringSerializer;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.*;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.rest.*;\n+import com.microsoft.rest.serializer.JacksonAdapter;\n+import rx.Observable;\n+import rx.schedulers.Schedulers;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.Tools.*;\n+\n+public class DigitalTwinAsyncClient {\n+    private DigitalTwinsImpl digitalTwin;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkyMjA0NQ==", "bodyText": "done", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497922045", "createdAt": "2020-10-01T01:38:57Z", "author": {"login": "bikamani"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "diffHunk": "@@ -0,0 +1,249 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.SasTokenProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceClientCredentialsProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionString;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionStringParser;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinGetHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinUpdateHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.DigitalTwinsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.IotHubGatewayServiceAPIsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.DigitalTwins;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeRootLevelCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.serialization.DeserializationHelpers;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.serialization.DigitalTwinStringSerializer;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.*;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.rest.*;\n+import com.microsoft.rest.serializer.JacksonAdapter;\n+import rx.Observable;\n+import rx.schedulers.Schedulers;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.Tools.*;\n+\n+public class DigitalTwinAsyncClient {\n+    private DigitalTwinsImpl digitalTwin;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3MTA1NQ=="}, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjg3OTE1OnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoxOTozMVrOHazqKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMTo0MDowMVrOHa2ySg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3MTQwMg==", "bodyText": "space after if", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497871402", "createdAt": "2020-10-01T00:19:31Z", "author": {"login": "azabbasi"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "diffHunk": "@@ -0,0 +1,249 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.SasTokenProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceClientCredentialsProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionString;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionStringParser;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinGetHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinUpdateHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.DigitalTwinsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.IotHubGatewayServiceAPIsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.DigitalTwins;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeRootLevelCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.serialization.DeserializationHelpers;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.serialization.DigitalTwinStringSerializer;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.*;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.rest.*;\n+import com.microsoft.rest.serializer.JacksonAdapter;\n+import rx.Observable;\n+import rx.schedulers.Schedulers;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.Tools.*;\n+\n+public class DigitalTwinAsyncClient {\n+    private DigitalTwinsImpl digitalTwin;\n+    private static ObjectMapper objectMapper = new ObjectMapper();\n+\n+     DigitalTwinAsyncClient(String connectionString) {\n+        ServiceConnectionString serviceConnectionString = ServiceConnectionStringParser.parseConnectionString(connectionString);\n+        SasTokenProvider sasTokenProvider = serviceConnectionString.createSasTokenProvider();\n+        String httpsEndpoint = serviceConnectionString.getHttpsEndpoint();\n+        final SimpleModule stringModule = new SimpleModule(\"String Serializer\");\n+        stringModule.addSerializer(new DigitalTwinStringSerializer(String.class, objectMapper));\n+\n+        JacksonAdapter adapter = new JacksonAdapter();\n+        adapter.serializer().registerModule(stringModule);\n+        RestClient simpleRestClient = new RestClient.Builder()\n+                .withBaseUrl(httpsEndpoint)\n+                .withCredentials(new ServiceClientCredentialsProvider(sasTokenProvider))\n+                .withResponseBuilderFactory(new ServiceResponseBuilder.Factory())\n+                .withSerializerAdapter(adapter)\n+                .build();\n+\n+        IotHubGatewayServiceAPIsImpl protocolLayerClient = new IotHubGatewayServiceAPIsImpl(simpleRestClient);\n+        digitalTwin = new DigitalTwinsImpl(simpleRestClient.retrofit(), protocolLayerClient);\n+    }\n+\n+    /**\n+     * Creates an implementation instance of {@link DigitalTwins} that is used to invoke the Digital Twin features\n+     * @param connectionString The IoTHub connection string\n+     * @return DigitalTwinAsyncClient\n+     */\n+    public static DigitalTwinAsyncClient createFromConnectionString(String connectionString)\n+    {\n+        return new DigitalTwinAsyncClient(connectionString);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The class to deserialize the application/json into.\n+     * @param <T> The generic type to deserialize the application/json into.\n+     * @return The application/json of the digital twin.\n+     */\n+    public <T> Observable<T> getDigitalTwin (String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz)\n+                .map(response -> response.body());\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The class to deserialize the application/json into.\n+     * @param <T> The generic type to deserialize the application/json into.\n+     * @return A {@link ServiceResponseWithHeaders} representing deserialized application/json of the digital twin with {@link DigitalTwinGetHeaders}.\n+     */\n+    public <T> Observable<ServiceResponseWithHeaders<T, DigitalTwinGetHeaders>> getDigitalTwinWithResponse (String digitalTwinId, Class<T> clazz)\n+    {\n+        if(clazz == null)\n+        {\n+            throw new IllegalArgumentException(\"Parameter clazz is required and cannot be null.\");\n+        }\n+\n+        return digitalTwin.getDigitalTwinWithServiceResponseAsync(digitalTwinId)\n+                .flatMap(FUNC_TO_DIGITAL_TWIN_GET_RESPONSE)\n+                .flatMap(response -> {\n+                    try {\n+                        T genericResponse = DeserializationHelpers.castObject(objectMapper, response.body(), clazz);\n+                        return Observable.just(new ServiceResponseWithHeaders<>(genericResponse, response.headers(), response.response()));\n+                    } catch (JsonProcessingException e) {\n+                        return Observable.error(new IotHubException(\"Failed to parse the resonse\"));\n+                    }\n+\n+                })\n+                .subscribeOn(Schedulers.io());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The JSON patch to apply to the specified digital twin. This argument can be created using {@link UpdateOperationUtility}.\n+     * @return void.\n+     */\n+    public Observable<Void> updateDigitalTwin (String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        return updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, null)\n+                .map(response -> response.body());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The JSON patch to apply to the specified digital twin. This argument can be created using {@link UpdateOperationUtility}.\n+     * @return A {@link ServiceResponseWithHeaders} with {@link DigitalTwinUpdateHeaders}.\n+     */\n+    public Observable<ServiceResponseWithHeaders<Void, DigitalTwinUpdateHeaders>> updateDigitalTwinWithResponse (String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        return updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, null);\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The JSON patch to apply to the specified digital twin. This argument can be created using {@link UpdateOperationUtility}.\n+     * @param options The optional settings for this request.\n+     * @return A {@link ServiceResponseWithHeaders} with {@link DigitalTwinUpdateHeaders}.\n+     */\n+    public Observable<ServiceResponseWithHeaders<Void, DigitalTwinUpdateHeaders>> updateDigitalTwinWithResponse (String digitalTwinId, List<Object> digitalTwinUpdateOperations, DigitalTwinUpdateRequestOptions options)\n+    {\n+        String ifMatch = options != null ? options.getIfMatch() : null;\n+        return digitalTwin.updateDigitalTwinWithServiceResponseAsync(digitalTwinId, digitalTwinUpdateOperations, ifMatch)\n+                .flatMap(FUNC_TO_DIGITAL_TWIN_UPDATE_RESPONSE)\n+                .subscribeOn(Schedulers.io());\n+    }\n+\n+    /**\n+     * Invoke a command on a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param commandName The command to be invoked.\n+     * @return A {@link DigitalTwinCommandResponse} which contains the application/json command invocation response.\n+     * @throws IOException can be thrown if the provided payload cannot be deserialized to an Object.\n+     */\n+    public Observable<DigitalTwinCommandResponse> invokeCommand (String digitalTwinId, String commandName) throws IOException {\n+        return invokeCommandWithResponse(digitalTwinId, commandName, null, null)\n+                .map(response -> response.body());\n+    }\n+\n+    /**\n+     * Invoke a command on a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param commandName The command to be invoked.\n+     * @param payload The command payload.\n+     * @return A {@link DigitalTwinCommandResponse} which contains the application/json command invocation response.\n+     * @throws IOException can be thrown if the provided payload cannot be deserialized into a valid Json object.\n+     */\n+    public Observable<DigitalTwinCommandResponse> invokeCommand (String digitalTwinId, String commandName, String payload) throws IOException {\n+        // Retrofit does not work well with null in body\n+        return invokeCommandWithResponse(digitalTwinId, commandName, payload, null)\n+                .map(response -> response.body());\n+    }\n+\n+    /**\n+     * Invoke a command on a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param commandName The command to be invoked.\n+     * @param payload The command payload.\n+     * @param options The optional settings for this request.\n+     * @return A {@link ServiceResponseWithHeaders} with {@link DigitalTwinInvokeRootLevelCommandHeaders} and {@link DigitalTwinCommandResponse} which contains the application/json command invocation response.\n+     * @throws IOException can be thrown if the provided payload cannot be deserialized into a valid Json object.\n+     */\n+    public Observable<ServiceResponseWithHeaders<DigitalTwinCommandResponse, DigitalTwinInvokeCommandHeaders>> invokeCommandWithResponse (String digitalTwinId, String commandName, String payload, DigitalTwinInvokeCommandRequestOptions options) throws IOException {\n+        if(options == null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkyMjYzNA==", "bodyText": "done here and other places", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497922634", "createdAt": "2020-10-01T01:40:01Z", "author": {"login": "bikamani"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "diffHunk": "@@ -0,0 +1,249 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.SasTokenProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceClientCredentialsProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionString;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionStringParser;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinGetHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinUpdateHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.DigitalTwinsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.IotHubGatewayServiceAPIsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.DigitalTwins;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeRootLevelCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.serialization.DeserializationHelpers;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.serialization.DigitalTwinStringSerializer;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.*;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.rest.*;\n+import com.microsoft.rest.serializer.JacksonAdapter;\n+import rx.Observable;\n+import rx.schedulers.Schedulers;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.Tools.*;\n+\n+public class DigitalTwinAsyncClient {\n+    private DigitalTwinsImpl digitalTwin;\n+    private static ObjectMapper objectMapper = new ObjectMapper();\n+\n+     DigitalTwinAsyncClient(String connectionString) {\n+        ServiceConnectionString serviceConnectionString = ServiceConnectionStringParser.parseConnectionString(connectionString);\n+        SasTokenProvider sasTokenProvider = serviceConnectionString.createSasTokenProvider();\n+        String httpsEndpoint = serviceConnectionString.getHttpsEndpoint();\n+        final SimpleModule stringModule = new SimpleModule(\"String Serializer\");\n+        stringModule.addSerializer(new DigitalTwinStringSerializer(String.class, objectMapper));\n+\n+        JacksonAdapter adapter = new JacksonAdapter();\n+        adapter.serializer().registerModule(stringModule);\n+        RestClient simpleRestClient = new RestClient.Builder()\n+                .withBaseUrl(httpsEndpoint)\n+                .withCredentials(new ServiceClientCredentialsProvider(sasTokenProvider))\n+                .withResponseBuilderFactory(new ServiceResponseBuilder.Factory())\n+                .withSerializerAdapter(adapter)\n+                .build();\n+\n+        IotHubGatewayServiceAPIsImpl protocolLayerClient = new IotHubGatewayServiceAPIsImpl(simpleRestClient);\n+        digitalTwin = new DigitalTwinsImpl(simpleRestClient.retrofit(), protocolLayerClient);\n+    }\n+\n+    /**\n+     * Creates an implementation instance of {@link DigitalTwins} that is used to invoke the Digital Twin features\n+     * @param connectionString The IoTHub connection string\n+     * @return DigitalTwinAsyncClient\n+     */\n+    public static DigitalTwinAsyncClient createFromConnectionString(String connectionString)\n+    {\n+        return new DigitalTwinAsyncClient(connectionString);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The class to deserialize the application/json into.\n+     * @param <T> The generic type to deserialize the application/json into.\n+     * @return The application/json of the digital twin.\n+     */\n+    public <T> Observable<T> getDigitalTwin (String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz)\n+                .map(response -> response.body());\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The class to deserialize the application/json into.\n+     * @param <T> The generic type to deserialize the application/json into.\n+     * @return A {@link ServiceResponseWithHeaders} representing deserialized application/json of the digital twin with {@link DigitalTwinGetHeaders}.\n+     */\n+    public <T> Observable<ServiceResponseWithHeaders<T, DigitalTwinGetHeaders>> getDigitalTwinWithResponse (String digitalTwinId, Class<T> clazz)\n+    {\n+        if(clazz == null)\n+        {\n+            throw new IllegalArgumentException(\"Parameter clazz is required and cannot be null.\");\n+        }\n+\n+        return digitalTwin.getDigitalTwinWithServiceResponseAsync(digitalTwinId)\n+                .flatMap(FUNC_TO_DIGITAL_TWIN_GET_RESPONSE)\n+                .flatMap(response -> {\n+                    try {\n+                        T genericResponse = DeserializationHelpers.castObject(objectMapper, response.body(), clazz);\n+                        return Observable.just(new ServiceResponseWithHeaders<>(genericResponse, response.headers(), response.response()));\n+                    } catch (JsonProcessingException e) {\n+                        return Observable.error(new IotHubException(\"Failed to parse the resonse\"));\n+                    }\n+\n+                })\n+                .subscribeOn(Schedulers.io());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The JSON patch to apply to the specified digital twin. This argument can be created using {@link UpdateOperationUtility}.\n+     * @return void.\n+     */\n+    public Observable<Void> updateDigitalTwin (String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        return updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, null)\n+                .map(response -> response.body());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The JSON patch to apply to the specified digital twin. This argument can be created using {@link UpdateOperationUtility}.\n+     * @return A {@link ServiceResponseWithHeaders} with {@link DigitalTwinUpdateHeaders}.\n+     */\n+    public Observable<ServiceResponseWithHeaders<Void, DigitalTwinUpdateHeaders>> updateDigitalTwinWithResponse (String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        return updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, null);\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The JSON patch to apply to the specified digital twin. This argument can be created using {@link UpdateOperationUtility}.\n+     * @param options The optional settings for this request.\n+     * @return A {@link ServiceResponseWithHeaders} with {@link DigitalTwinUpdateHeaders}.\n+     */\n+    public Observable<ServiceResponseWithHeaders<Void, DigitalTwinUpdateHeaders>> updateDigitalTwinWithResponse (String digitalTwinId, List<Object> digitalTwinUpdateOperations, DigitalTwinUpdateRequestOptions options)\n+    {\n+        String ifMatch = options != null ? options.getIfMatch() : null;\n+        return digitalTwin.updateDigitalTwinWithServiceResponseAsync(digitalTwinId, digitalTwinUpdateOperations, ifMatch)\n+                .flatMap(FUNC_TO_DIGITAL_TWIN_UPDATE_RESPONSE)\n+                .subscribeOn(Schedulers.io());\n+    }\n+\n+    /**\n+     * Invoke a command on a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param commandName The command to be invoked.\n+     * @return A {@link DigitalTwinCommandResponse} which contains the application/json command invocation response.\n+     * @throws IOException can be thrown if the provided payload cannot be deserialized to an Object.\n+     */\n+    public Observable<DigitalTwinCommandResponse> invokeCommand (String digitalTwinId, String commandName) throws IOException {\n+        return invokeCommandWithResponse(digitalTwinId, commandName, null, null)\n+                .map(response -> response.body());\n+    }\n+\n+    /**\n+     * Invoke a command on a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param commandName The command to be invoked.\n+     * @param payload The command payload.\n+     * @return A {@link DigitalTwinCommandResponse} which contains the application/json command invocation response.\n+     * @throws IOException can be thrown if the provided payload cannot be deserialized into a valid Json object.\n+     */\n+    public Observable<DigitalTwinCommandResponse> invokeCommand (String digitalTwinId, String commandName, String payload) throws IOException {\n+        // Retrofit does not work well with null in body\n+        return invokeCommandWithResponse(digitalTwinId, commandName, payload, null)\n+                .map(response -> response.body());\n+    }\n+\n+    /**\n+     * Invoke a command on a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param commandName The command to be invoked.\n+     * @param payload The command payload.\n+     * @param options The optional settings for this request.\n+     * @return A {@link ServiceResponseWithHeaders} with {@link DigitalTwinInvokeRootLevelCommandHeaders} and {@link DigitalTwinCommandResponse} which contains the application/json command invocation response.\n+     * @throws IOException can be thrown if the provided payload cannot be deserialized into a valid Json object.\n+     */\n+    public Observable<ServiceResponseWithHeaders<DigitalTwinCommandResponse, DigitalTwinInvokeCommandHeaders>> invokeCommandWithResponse (String digitalTwinId, String commandName, String payload, DigitalTwinInvokeCommandRequestOptions options) throws IOException {\n+        if(options == null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3MTQwMg=="}, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjg4MDYzOnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoxOTo1MVrOHazrDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoxOTo1OVrOHazrcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3MTYyOQ==", "bodyText": "space after if", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497871629", "createdAt": "2020-10-01T00:19:51Z", "author": {"login": "azabbasi"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "diffHunk": "@@ -0,0 +1,249 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.SasTokenProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceClientCredentialsProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionString;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionStringParser;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinGetHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinUpdateHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.DigitalTwinsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.IotHubGatewayServiceAPIsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.DigitalTwins;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeRootLevelCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.serialization.DeserializationHelpers;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.serialization.DigitalTwinStringSerializer;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.*;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.rest.*;\n+import com.microsoft.rest.serializer.JacksonAdapter;\n+import rx.Observable;\n+import rx.schedulers.Schedulers;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.Tools.*;\n+\n+public class DigitalTwinAsyncClient {\n+    private DigitalTwinsImpl digitalTwin;\n+    private static ObjectMapper objectMapper = new ObjectMapper();\n+\n+     DigitalTwinAsyncClient(String connectionString) {\n+        ServiceConnectionString serviceConnectionString = ServiceConnectionStringParser.parseConnectionString(connectionString);\n+        SasTokenProvider sasTokenProvider = serviceConnectionString.createSasTokenProvider();\n+        String httpsEndpoint = serviceConnectionString.getHttpsEndpoint();\n+        final SimpleModule stringModule = new SimpleModule(\"String Serializer\");\n+        stringModule.addSerializer(new DigitalTwinStringSerializer(String.class, objectMapper));\n+\n+        JacksonAdapter adapter = new JacksonAdapter();\n+        adapter.serializer().registerModule(stringModule);\n+        RestClient simpleRestClient = new RestClient.Builder()\n+                .withBaseUrl(httpsEndpoint)\n+                .withCredentials(new ServiceClientCredentialsProvider(sasTokenProvider))\n+                .withResponseBuilderFactory(new ServiceResponseBuilder.Factory())\n+                .withSerializerAdapter(adapter)\n+                .build();\n+\n+        IotHubGatewayServiceAPIsImpl protocolLayerClient = new IotHubGatewayServiceAPIsImpl(simpleRestClient);\n+        digitalTwin = new DigitalTwinsImpl(simpleRestClient.retrofit(), protocolLayerClient);\n+    }\n+\n+    /**\n+     * Creates an implementation instance of {@link DigitalTwins} that is used to invoke the Digital Twin features\n+     * @param connectionString The IoTHub connection string\n+     * @return DigitalTwinAsyncClient\n+     */\n+    public static DigitalTwinAsyncClient createFromConnectionString(String connectionString)\n+    {\n+        return new DigitalTwinAsyncClient(connectionString);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The class to deserialize the application/json into.\n+     * @param <T> The generic type to deserialize the application/json into.\n+     * @return The application/json of the digital twin.\n+     */\n+    public <T> Observable<T> getDigitalTwin (String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz)\n+                .map(response -> response.body());\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The class to deserialize the application/json into.\n+     * @param <T> The generic type to deserialize the application/json into.\n+     * @return A {@link ServiceResponseWithHeaders} representing deserialized application/json of the digital twin with {@link DigitalTwinGetHeaders}.\n+     */\n+    public <T> Observable<ServiceResponseWithHeaders<T, DigitalTwinGetHeaders>> getDigitalTwinWithResponse (String digitalTwinId, Class<T> clazz)\n+    {\n+        if(clazz == null)\n+        {\n+            throw new IllegalArgumentException(\"Parameter clazz is required and cannot be null.\");\n+        }\n+\n+        return digitalTwin.getDigitalTwinWithServiceResponseAsync(digitalTwinId)\n+                .flatMap(FUNC_TO_DIGITAL_TWIN_GET_RESPONSE)\n+                .flatMap(response -> {\n+                    try {\n+                        T genericResponse = DeserializationHelpers.castObject(objectMapper, response.body(), clazz);\n+                        return Observable.just(new ServiceResponseWithHeaders<>(genericResponse, response.headers(), response.response()));\n+                    } catch (JsonProcessingException e) {\n+                        return Observable.error(new IotHubException(\"Failed to parse the resonse\"));\n+                    }\n+\n+                })\n+                .subscribeOn(Schedulers.io());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The JSON patch to apply to the specified digital twin. This argument can be created using {@link UpdateOperationUtility}.\n+     * @return void.\n+     */\n+    public Observable<Void> updateDigitalTwin (String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        return updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, null)\n+                .map(response -> response.body());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The JSON patch to apply to the specified digital twin. This argument can be created using {@link UpdateOperationUtility}.\n+     * @return A {@link ServiceResponseWithHeaders} with {@link DigitalTwinUpdateHeaders}.\n+     */\n+    public Observable<ServiceResponseWithHeaders<Void, DigitalTwinUpdateHeaders>> updateDigitalTwinWithResponse (String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        return updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, null);\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The JSON patch to apply to the specified digital twin. This argument can be created using {@link UpdateOperationUtility}.\n+     * @param options The optional settings for this request.\n+     * @return A {@link ServiceResponseWithHeaders} with {@link DigitalTwinUpdateHeaders}.\n+     */\n+    public Observable<ServiceResponseWithHeaders<Void, DigitalTwinUpdateHeaders>> updateDigitalTwinWithResponse (String digitalTwinId, List<Object> digitalTwinUpdateOperations, DigitalTwinUpdateRequestOptions options)\n+    {\n+        String ifMatch = options != null ? options.getIfMatch() : null;\n+        return digitalTwin.updateDigitalTwinWithServiceResponseAsync(digitalTwinId, digitalTwinUpdateOperations, ifMatch)\n+                .flatMap(FUNC_TO_DIGITAL_TWIN_UPDATE_RESPONSE)\n+                .subscribeOn(Schedulers.io());\n+    }\n+\n+    /**\n+     * Invoke a command on a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param commandName The command to be invoked.\n+     * @return A {@link DigitalTwinCommandResponse} which contains the application/json command invocation response.\n+     * @throws IOException can be thrown if the provided payload cannot be deserialized to an Object.\n+     */\n+    public Observable<DigitalTwinCommandResponse> invokeCommand (String digitalTwinId, String commandName) throws IOException {\n+        return invokeCommandWithResponse(digitalTwinId, commandName, null, null)\n+                .map(response -> response.body());\n+    }\n+\n+    /**\n+     * Invoke a command on a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param commandName The command to be invoked.\n+     * @param payload The command payload.\n+     * @return A {@link DigitalTwinCommandResponse} which contains the application/json command invocation response.\n+     * @throws IOException can be thrown if the provided payload cannot be deserialized into a valid Json object.\n+     */\n+    public Observable<DigitalTwinCommandResponse> invokeCommand (String digitalTwinId, String commandName, String payload) throws IOException {\n+        // Retrofit does not work well with null in body\n+        return invokeCommandWithResponse(digitalTwinId, commandName, payload, null)\n+                .map(response -> response.body());\n+    }\n+\n+    /**\n+     * Invoke a command on a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param commandName The command to be invoked.\n+     * @param payload The command payload.\n+     * @param options The optional settings for this request.\n+     * @return A {@link ServiceResponseWithHeaders} with {@link DigitalTwinInvokeRootLevelCommandHeaders} and {@link DigitalTwinCommandResponse} which contains the application/json command invocation response.\n+     * @throws IOException can be thrown if the provided payload cannot be deserialized into a valid Json object.\n+     */\n+    public Observable<ServiceResponseWithHeaders<DigitalTwinCommandResponse, DigitalTwinInvokeCommandHeaders>> invokeCommandWithResponse (String digitalTwinId, String commandName, String payload, DigitalTwinInvokeCommandRequestOptions options) throws IOException {\n+        if(options == null)\n+        {\n+            options = new DigitalTwinInvokeCommandRequestOptions();\n+        }\n+\n+        // Retrofit does not work well with null in body\n+        if(payload == null)\n+        {\n+            payload = \"\";\n+        }\n+\n+        return digitalTwin.invokeRootLevelCommandWithServiceResponseAsync(digitalTwinId, commandName, payload, options.getConnectTimeoutInSeconds(), options.getResponseTimeoutInSeconds())\n+                .flatMap(FUNC_TO_DIGITAL_TWIN_COMMAND_RESPONSE);\n+    }\n+\n+    /**\n+     * Invoke a command on a digital twin component.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param componentName The component name under which the command is defined.\n+     * @param commandName The command to be invoked.\n+     * @return A {@link DigitalTwinCommandResponse} which contains the application/json command invocation response.\n+     * @throws IOException can be thrown if the provided payload cannot be deserialized into a valid Json object.\n+     */\n+    public Observable<DigitalTwinCommandResponse> invokeComponentCommand(String digitalTwinId, String componentName, String commandName) throws IOException {\n+        return invokeComponentCommandWithResponse(digitalTwinId, componentName, commandName, null, null)\n+                .map(response -> response.body());\n+    }\n+\n+    /**\n+     * Invoke a command on a digital twin component.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param componentName The component name under which the command is defined.\n+     * @param commandName The command to be invoked.\n+     * @param payload The command payload.\n+     * @return A {@link DigitalTwinCommandResponse} which contains the application/json command invocation response.\n+     * @throws IOException can be thrown if the provided payload cannot be deserialized into a valid Json object.\n+     */\n+    public Observable<DigitalTwinCommandResponse> invokeComponentCommand(String digitalTwinId, String componentName, String commandName, String payload) throws IOException {\n+        return invokeComponentCommandWithResponse(digitalTwinId, componentName, commandName, payload, null)\n+                .map(response -> response.body());\n+    }\n+\n+    /**\n+     * Invoke a command on a digital twin component.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param componentName The component name under which the command is defined.\n+     * @param commandName The command to be invoked.\n+     * @param payload The command payload.\n+     * @param options The optional settings for this request.\n+     * @return A {@link ServiceResponseWithHeaders} with {@link DigitalTwinInvokeRootLevelCommandHeaders} and {@link DigitalTwinCommandResponse} which contains the application/json command invocation response.\n+     * @throws IOException can be thrown if the provided payload cannot be deserialized into a valid Json object.\n+     */\n+    public Observable<ServiceResponseWithHeaders<DigitalTwinCommandResponse, DigitalTwinInvokeCommandHeaders>> invokeComponentCommandWithResponse (String digitalTwinId, String componentName, String commandName, String payload, DigitalTwinInvokeCommandRequestOptions options) throws IOException {\n+        if(options == null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 235}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3MTcyOA==", "bodyText": "same everywhere", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497871728", "createdAt": "2020-10-01T00:19:59Z", "author": {"login": "azabbasi"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "diffHunk": "@@ -0,0 +1,249 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.SasTokenProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceClientCredentialsProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionString;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionStringParser;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinGetHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinUpdateHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.DigitalTwinsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.IotHubGatewayServiceAPIsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.DigitalTwins;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeRootLevelCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.serialization.DeserializationHelpers;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.serialization.DigitalTwinStringSerializer;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.*;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.rest.*;\n+import com.microsoft.rest.serializer.JacksonAdapter;\n+import rx.Observable;\n+import rx.schedulers.Schedulers;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.Tools.*;\n+\n+public class DigitalTwinAsyncClient {\n+    private DigitalTwinsImpl digitalTwin;\n+    private static ObjectMapper objectMapper = new ObjectMapper();\n+\n+     DigitalTwinAsyncClient(String connectionString) {\n+        ServiceConnectionString serviceConnectionString = ServiceConnectionStringParser.parseConnectionString(connectionString);\n+        SasTokenProvider sasTokenProvider = serviceConnectionString.createSasTokenProvider();\n+        String httpsEndpoint = serviceConnectionString.getHttpsEndpoint();\n+        final SimpleModule stringModule = new SimpleModule(\"String Serializer\");\n+        stringModule.addSerializer(new DigitalTwinStringSerializer(String.class, objectMapper));\n+\n+        JacksonAdapter adapter = new JacksonAdapter();\n+        adapter.serializer().registerModule(stringModule);\n+        RestClient simpleRestClient = new RestClient.Builder()\n+                .withBaseUrl(httpsEndpoint)\n+                .withCredentials(new ServiceClientCredentialsProvider(sasTokenProvider))\n+                .withResponseBuilderFactory(new ServiceResponseBuilder.Factory())\n+                .withSerializerAdapter(adapter)\n+                .build();\n+\n+        IotHubGatewayServiceAPIsImpl protocolLayerClient = new IotHubGatewayServiceAPIsImpl(simpleRestClient);\n+        digitalTwin = new DigitalTwinsImpl(simpleRestClient.retrofit(), protocolLayerClient);\n+    }\n+\n+    /**\n+     * Creates an implementation instance of {@link DigitalTwins} that is used to invoke the Digital Twin features\n+     * @param connectionString The IoTHub connection string\n+     * @return DigitalTwinAsyncClient\n+     */\n+    public static DigitalTwinAsyncClient createFromConnectionString(String connectionString)\n+    {\n+        return new DigitalTwinAsyncClient(connectionString);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The class to deserialize the application/json into.\n+     * @param <T> The generic type to deserialize the application/json into.\n+     * @return The application/json of the digital twin.\n+     */\n+    public <T> Observable<T> getDigitalTwin (String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz)\n+                .map(response -> response.body());\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The class to deserialize the application/json into.\n+     * @param <T> The generic type to deserialize the application/json into.\n+     * @return A {@link ServiceResponseWithHeaders} representing deserialized application/json of the digital twin with {@link DigitalTwinGetHeaders}.\n+     */\n+    public <T> Observable<ServiceResponseWithHeaders<T, DigitalTwinGetHeaders>> getDigitalTwinWithResponse (String digitalTwinId, Class<T> clazz)\n+    {\n+        if(clazz == null)\n+        {\n+            throw new IllegalArgumentException(\"Parameter clazz is required and cannot be null.\");\n+        }\n+\n+        return digitalTwin.getDigitalTwinWithServiceResponseAsync(digitalTwinId)\n+                .flatMap(FUNC_TO_DIGITAL_TWIN_GET_RESPONSE)\n+                .flatMap(response -> {\n+                    try {\n+                        T genericResponse = DeserializationHelpers.castObject(objectMapper, response.body(), clazz);\n+                        return Observable.just(new ServiceResponseWithHeaders<>(genericResponse, response.headers(), response.response()));\n+                    } catch (JsonProcessingException e) {\n+                        return Observable.error(new IotHubException(\"Failed to parse the resonse\"));\n+                    }\n+\n+                })\n+                .subscribeOn(Schedulers.io());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The JSON patch to apply to the specified digital twin. This argument can be created using {@link UpdateOperationUtility}.\n+     * @return void.\n+     */\n+    public Observable<Void> updateDigitalTwin (String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        return updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, null)\n+                .map(response -> response.body());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The JSON patch to apply to the specified digital twin. This argument can be created using {@link UpdateOperationUtility}.\n+     * @return A {@link ServiceResponseWithHeaders} with {@link DigitalTwinUpdateHeaders}.\n+     */\n+    public Observable<ServiceResponseWithHeaders<Void, DigitalTwinUpdateHeaders>> updateDigitalTwinWithResponse (String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        return updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, null);\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The JSON patch to apply to the specified digital twin. This argument can be created using {@link UpdateOperationUtility}.\n+     * @param options The optional settings for this request.\n+     * @return A {@link ServiceResponseWithHeaders} with {@link DigitalTwinUpdateHeaders}.\n+     */\n+    public Observable<ServiceResponseWithHeaders<Void, DigitalTwinUpdateHeaders>> updateDigitalTwinWithResponse (String digitalTwinId, List<Object> digitalTwinUpdateOperations, DigitalTwinUpdateRequestOptions options)\n+    {\n+        String ifMatch = options != null ? options.getIfMatch() : null;\n+        return digitalTwin.updateDigitalTwinWithServiceResponseAsync(digitalTwinId, digitalTwinUpdateOperations, ifMatch)\n+                .flatMap(FUNC_TO_DIGITAL_TWIN_UPDATE_RESPONSE)\n+                .subscribeOn(Schedulers.io());\n+    }\n+\n+    /**\n+     * Invoke a command on a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param commandName The command to be invoked.\n+     * @return A {@link DigitalTwinCommandResponse} which contains the application/json command invocation response.\n+     * @throws IOException can be thrown if the provided payload cannot be deserialized to an Object.\n+     */\n+    public Observable<DigitalTwinCommandResponse> invokeCommand (String digitalTwinId, String commandName) throws IOException {\n+        return invokeCommandWithResponse(digitalTwinId, commandName, null, null)\n+                .map(response -> response.body());\n+    }\n+\n+    /**\n+     * Invoke a command on a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param commandName The command to be invoked.\n+     * @param payload The command payload.\n+     * @return A {@link DigitalTwinCommandResponse} which contains the application/json command invocation response.\n+     * @throws IOException can be thrown if the provided payload cannot be deserialized into a valid Json object.\n+     */\n+    public Observable<DigitalTwinCommandResponse> invokeCommand (String digitalTwinId, String commandName, String payload) throws IOException {\n+        // Retrofit does not work well with null in body\n+        return invokeCommandWithResponse(digitalTwinId, commandName, payload, null)\n+                .map(response -> response.body());\n+    }\n+\n+    /**\n+     * Invoke a command on a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param commandName The command to be invoked.\n+     * @param payload The command payload.\n+     * @param options The optional settings for this request.\n+     * @return A {@link ServiceResponseWithHeaders} with {@link DigitalTwinInvokeRootLevelCommandHeaders} and {@link DigitalTwinCommandResponse} which contains the application/json command invocation response.\n+     * @throws IOException can be thrown if the provided payload cannot be deserialized into a valid Json object.\n+     */\n+    public Observable<ServiceResponseWithHeaders<DigitalTwinCommandResponse, DigitalTwinInvokeCommandHeaders>> invokeCommandWithResponse (String digitalTwinId, String commandName, String payload, DigitalTwinInvokeCommandRequestOptions options) throws IOException {\n+        if(options == null)\n+        {\n+            options = new DigitalTwinInvokeCommandRequestOptions();\n+        }\n+\n+        // Retrofit does not work well with null in body\n+        if(payload == null)\n+        {\n+            payload = \"\";\n+        }\n+\n+        return digitalTwin.invokeRootLevelCommandWithServiceResponseAsync(digitalTwinId, commandName, payload, options.getConnectTimeoutInSeconds(), options.getResponseTimeoutInSeconds())\n+                .flatMap(FUNC_TO_DIGITAL_TWIN_COMMAND_RESPONSE);\n+    }\n+\n+    /**\n+     * Invoke a command on a digital twin component.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param componentName The component name under which the command is defined.\n+     * @param commandName The command to be invoked.\n+     * @return A {@link DigitalTwinCommandResponse} which contains the application/json command invocation response.\n+     * @throws IOException can be thrown if the provided payload cannot be deserialized into a valid Json object.\n+     */\n+    public Observable<DigitalTwinCommandResponse> invokeComponentCommand(String digitalTwinId, String componentName, String commandName) throws IOException {\n+        return invokeComponentCommandWithResponse(digitalTwinId, componentName, commandName, null, null)\n+                .map(response -> response.body());\n+    }\n+\n+    /**\n+     * Invoke a command on a digital twin component.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param componentName The component name under which the command is defined.\n+     * @param commandName The command to be invoked.\n+     * @param payload The command payload.\n+     * @return A {@link DigitalTwinCommandResponse} which contains the application/json command invocation response.\n+     * @throws IOException can be thrown if the provided payload cannot be deserialized into a valid Json object.\n+     */\n+    public Observable<DigitalTwinCommandResponse> invokeComponentCommand(String digitalTwinId, String componentName, String commandName, String payload) throws IOException {\n+        return invokeComponentCommandWithResponse(digitalTwinId, componentName, commandName, payload, null)\n+                .map(response -> response.body());\n+    }\n+\n+    /**\n+     * Invoke a command on a digital twin component.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param componentName The component name under which the command is defined.\n+     * @param commandName The command to be invoked.\n+     * @param payload The command payload.\n+     * @param options The optional settings for this request.\n+     * @return A {@link ServiceResponseWithHeaders} with {@link DigitalTwinInvokeRootLevelCommandHeaders} and {@link DigitalTwinCommandResponse} which contains the application/json command invocation response.\n+     * @throws IOException can be thrown if the provided payload cannot be deserialized into a valid Json object.\n+     */\n+    public Observable<ServiceResponseWithHeaders<DigitalTwinCommandResponse, DigitalTwinInvokeCommandHeaders>> invokeComponentCommandWithResponse (String digitalTwinId, String componentName, String commandName, String payload, DigitalTwinInvokeCommandRequestOptions options) throws IOException {\n+        if(options == null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3MTYyOQ=="}, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 235}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjg4MjExOnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoyMDoxMlrOHazsEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoyMDoxMlrOHazsEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3MTg4OA==", "bodyText": "you can break down the lines ... seems too long", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497871888", "createdAt": "2020-10-01T00:20:12Z", "author": {"login": "azabbasi"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "diffHunk": "@@ -0,0 +1,249 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.SasTokenProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceClientCredentialsProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionString;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionStringParser;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinGetHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinUpdateHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.DigitalTwinsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.IotHubGatewayServiceAPIsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.DigitalTwins;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeRootLevelCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.serialization.DeserializationHelpers;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.serialization.DigitalTwinStringSerializer;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.*;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.rest.*;\n+import com.microsoft.rest.serializer.JacksonAdapter;\n+import rx.Observable;\n+import rx.schedulers.Schedulers;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.Tools.*;\n+\n+public class DigitalTwinAsyncClient {\n+    private DigitalTwinsImpl digitalTwin;\n+    private static ObjectMapper objectMapper = new ObjectMapper();\n+\n+     DigitalTwinAsyncClient(String connectionString) {\n+        ServiceConnectionString serviceConnectionString = ServiceConnectionStringParser.parseConnectionString(connectionString);\n+        SasTokenProvider sasTokenProvider = serviceConnectionString.createSasTokenProvider();\n+        String httpsEndpoint = serviceConnectionString.getHttpsEndpoint();\n+        final SimpleModule stringModule = new SimpleModule(\"String Serializer\");\n+        stringModule.addSerializer(new DigitalTwinStringSerializer(String.class, objectMapper));\n+\n+        JacksonAdapter adapter = new JacksonAdapter();\n+        adapter.serializer().registerModule(stringModule);\n+        RestClient simpleRestClient = new RestClient.Builder()\n+                .withBaseUrl(httpsEndpoint)\n+                .withCredentials(new ServiceClientCredentialsProvider(sasTokenProvider))\n+                .withResponseBuilderFactory(new ServiceResponseBuilder.Factory())\n+                .withSerializerAdapter(adapter)\n+                .build();\n+\n+        IotHubGatewayServiceAPIsImpl protocolLayerClient = new IotHubGatewayServiceAPIsImpl(simpleRestClient);\n+        digitalTwin = new DigitalTwinsImpl(simpleRestClient.retrofit(), protocolLayerClient);\n+    }\n+\n+    /**\n+     * Creates an implementation instance of {@link DigitalTwins} that is used to invoke the Digital Twin features\n+     * @param connectionString The IoTHub connection string\n+     * @return DigitalTwinAsyncClient\n+     */\n+    public static DigitalTwinAsyncClient createFromConnectionString(String connectionString)\n+    {\n+        return new DigitalTwinAsyncClient(connectionString);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The class to deserialize the application/json into.\n+     * @param <T> The generic type to deserialize the application/json into.\n+     * @return The application/json of the digital twin.\n+     */\n+    public <T> Observable<T> getDigitalTwin (String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz)\n+                .map(response -> response.body());\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The class to deserialize the application/json into.\n+     * @param <T> The generic type to deserialize the application/json into.\n+     * @return A {@link ServiceResponseWithHeaders} representing deserialized application/json of the digital twin with {@link DigitalTwinGetHeaders}.\n+     */\n+    public <T> Observable<ServiceResponseWithHeaders<T, DigitalTwinGetHeaders>> getDigitalTwinWithResponse (String digitalTwinId, Class<T> clazz)\n+    {\n+        if(clazz == null)\n+        {\n+            throw new IllegalArgumentException(\"Parameter clazz is required and cannot be null.\");\n+        }\n+\n+        return digitalTwin.getDigitalTwinWithServiceResponseAsync(digitalTwinId)\n+                .flatMap(FUNC_TO_DIGITAL_TWIN_GET_RESPONSE)\n+                .flatMap(response -> {\n+                    try {\n+                        T genericResponse = DeserializationHelpers.castObject(objectMapper, response.body(), clazz);\n+                        return Observable.just(new ServiceResponseWithHeaders<>(genericResponse, response.headers(), response.response()));\n+                    } catch (JsonProcessingException e) {\n+                        return Observable.error(new IotHubException(\"Failed to parse the resonse\"));\n+                    }\n+\n+                })\n+                .subscribeOn(Schedulers.io());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The JSON patch to apply to the specified digital twin. This argument can be created using {@link UpdateOperationUtility}.\n+     * @return void.\n+     */\n+    public Observable<Void> updateDigitalTwin (String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        return updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, null)\n+                .map(response -> response.body());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The JSON patch to apply to the specified digital twin. This argument can be created using {@link UpdateOperationUtility}.\n+     * @return A {@link ServiceResponseWithHeaders} with {@link DigitalTwinUpdateHeaders}.\n+     */\n+    public Observable<ServiceResponseWithHeaders<Void, DigitalTwinUpdateHeaders>> updateDigitalTwinWithResponse (String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        return updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, null);\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The JSON patch to apply to the specified digital twin. This argument can be created using {@link UpdateOperationUtility}.\n+     * @param options The optional settings for this request.\n+     * @return A {@link ServiceResponseWithHeaders} with {@link DigitalTwinUpdateHeaders}.\n+     */\n+    public Observable<ServiceResponseWithHeaders<Void, DigitalTwinUpdateHeaders>> updateDigitalTwinWithResponse (String digitalTwinId, List<Object> digitalTwinUpdateOperations, DigitalTwinUpdateRequestOptions options)\n+    {\n+        String ifMatch = options != null ? options.getIfMatch() : null;\n+        return digitalTwin.updateDigitalTwinWithServiceResponseAsync(digitalTwinId, digitalTwinUpdateOperations, ifMatch)\n+                .flatMap(FUNC_TO_DIGITAL_TWIN_UPDATE_RESPONSE)\n+                .subscribeOn(Schedulers.io());\n+    }\n+\n+    /**\n+     * Invoke a command on a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param commandName The command to be invoked.\n+     * @return A {@link DigitalTwinCommandResponse} which contains the application/json command invocation response.\n+     * @throws IOException can be thrown if the provided payload cannot be deserialized to an Object.\n+     */\n+    public Observable<DigitalTwinCommandResponse> invokeCommand (String digitalTwinId, String commandName) throws IOException {\n+        return invokeCommandWithResponse(digitalTwinId, commandName, null, null)\n+                .map(response -> response.body());\n+    }\n+\n+    /**\n+     * Invoke a command on a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param commandName The command to be invoked.\n+     * @param payload The command payload.\n+     * @return A {@link DigitalTwinCommandResponse} which contains the application/json command invocation response.\n+     * @throws IOException can be thrown if the provided payload cannot be deserialized into a valid Json object.\n+     */\n+    public Observable<DigitalTwinCommandResponse> invokeCommand (String digitalTwinId, String commandName, String payload) throws IOException {\n+        // Retrofit does not work well with null in body\n+        return invokeCommandWithResponse(digitalTwinId, commandName, payload, null)\n+                .map(response -> response.body());\n+    }\n+\n+    /**\n+     * Invoke a command on a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param commandName The command to be invoked.\n+     * @param payload The command payload.\n+     * @param options The optional settings for this request.\n+     * @return A {@link ServiceResponseWithHeaders} with {@link DigitalTwinInvokeRootLevelCommandHeaders} and {@link DigitalTwinCommandResponse} which contains the application/json command invocation response.\n+     * @throws IOException can be thrown if the provided payload cannot be deserialized into a valid Json object.\n+     */\n+    public Observable<ServiceResponseWithHeaders<DigitalTwinCommandResponse, DigitalTwinInvokeCommandHeaders>> invokeCommandWithResponse (String digitalTwinId, String commandName, String payload, DigitalTwinInvokeCommandRequestOptions options) throws IOException {\n+        if(options == null)\n+        {\n+            options = new DigitalTwinInvokeCommandRequestOptions();\n+        }\n+\n+        // Retrofit does not work well with null in body\n+        if(payload == null)\n+        {\n+            payload = \"\";\n+        }\n+\n+        return digitalTwin.invokeRootLevelCommandWithServiceResponseAsync(digitalTwinId, commandName, payload, options.getConnectTimeoutInSeconds(), options.getResponseTimeoutInSeconds())\n+                .flatMap(FUNC_TO_DIGITAL_TWIN_COMMAND_RESPONSE);\n+    }\n+\n+    /**\n+     * Invoke a command on a digital twin component.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param componentName The component name under which the command is defined.\n+     * @param commandName The command to be invoked.\n+     * @return A {@link DigitalTwinCommandResponse} which contains the application/json command invocation response.\n+     * @throws IOException can be thrown if the provided payload cannot be deserialized into a valid Json object.\n+     */\n+    public Observable<DigitalTwinCommandResponse> invokeComponentCommand(String digitalTwinId, String componentName, String commandName) throws IOException {\n+        return invokeComponentCommandWithResponse(digitalTwinId, componentName, commandName, null, null)\n+                .map(response -> response.body());\n+    }\n+\n+    /**\n+     * Invoke a command on a digital twin component.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param componentName The component name under which the command is defined.\n+     * @param commandName The command to be invoked.\n+     * @param payload The command payload.\n+     * @return A {@link DigitalTwinCommandResponse} which contains the application/json command invocation response.\n+     * @throws IOException can be thrown if the provided payload cannot be deserialized into a valid Json object.\n+     */\n+    public Observable<DigitalTwinCommandResponse> invokeComponentCommand(String digitalTwinId, String componentName, String commandName, String payload) throws IOException {\n+        return invokeComponentCommandWithResponse(digitalTwinId, componentName, commandName, payload, null)\n+                .map(response -> response.body());\n+    }\n+\n+    /**\n+     * Invoke a command on a digital twin component.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param componentName The component name under which the command is defined.\n+     * @param commandName The command to be invoked.\n+     * @param payload The command payload.\n+     * @param options The optional settings for this request.\n+     * @return A {@link ServiceResponseWithHeaders} with {@link DigitalTwinInvokeRootLevelCommandHeaders} and {@link DigitalTwinCommandResponse} which contains the application/json command invocation response.\n+     * @throws IOException can be thrown if the provided payload cannot be deserialized into a valid Json object.\n+     */\n+    public Observable<ServiceResponseWithHeaders<DigitalTwinCommandResponse, DigitalTwinInvokeCommandHeaders>> invokeComponentCommandWithResponse (String digitalTwinId, String componentName, String commandName, String payload, DigitalTwinInvokeCommandRequestOptions options) throws IOException {\n+        if(options == null)\n+        {\n+            options = new DigitalTwinInvokeCommandRequestOptions();\n+        }\n+\n+        // Retrofit does not work well with null in body\n+        if(payload == null)\n+        {\n+            payload = \"\";\n+        }\n+\n+        return digitalTwin.invokeComponentCommandWithServiceResponseAsync(digitalTwinId, componentName, commandName, payload, options.getConnectTimeoutInSeconds(), options.getResponseTimeoutInSeconds())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 246}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjg4NDgzOnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoyMDo1NFrOHazt0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoyMDo1NFrOHazt0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3MjMzNw==", "bodyText": "nit: line too long.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497872337", "createdAt": "2020-10-01T00:20:54Z", "author": {"login": "azabbasi"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinAsyncClient.java", "diffHunk": "@@ -0,0 +1,249 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.SasTokenProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceClientCredentialsProvider;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionString;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.authentication.ServiceConnectionStringParser;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinGetHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinUpdateHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.DigitalTwinsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.implementation.IotHubGatewayServiceAPIsImpl;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.DigitalTwins;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeRootLevelCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.serialization.DeserializationHelpers;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.serialization.DigitalTwinStringSerializer;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.*;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.rest.*;\n+import com.microsoft.rest.serializer.JacksonAdapter;\n+import rx.Observable;\n+import rx.schedulers.Schedulers;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.Tools.*;\n+\n+public class DigitalTwinAsyncClient {\n+    private DigitalTwinsImpl digitalTwin;\n+    private static ObjectMapper objectMapper = new ObjectMapper();\n+\n+     DigitalTwinAsyncClient(String connectionString) {\n+        ServiceConnectionString serviceConnectionString = ServiceConnectionStringParser.parseConnectionString(connectionString);\n+        SasTokenProvider sasTokenProvider = serviceConnectionString.createSasTokenProvider();\n+        String httpsEndpoint = serviceConnectionString.getHttpsEndpoint();\n+        final SimpleModule stringModule = new SimpleModule(\"String Serializer\");\n+        stringModule.addSerializer(new DigitalTwinStringSerializer(String.class, objectMapper));\n+\n+        JacksonAdapter adapter = new JacksonAdapter();\n+        adapter.serializer().registerModule(stringModule);\n+        RestClient simpleRestClient = new RestClient.Builder()\n+                .withBaseUrl(httpsEndpoint)\n+                .withCredentials(new ServiceClientCredentialsProvider(sasTokenProvider))\n+                .withResponseBuilderFactory(new ServiceResponseBuilder.Factory())\n+                .withSerializerAdapter(adapter)\n+                .build();\n+\n+        IotHubGatewayServiceAPIsImpl protocolLayerClient = new IotHubGatewayServiceAPIsImpl(simpleRestClient);\n+        digitalTwin = new DigitalTwinsImpl(simpleRestClient.retrofit(), protocolLayerClient);\n+    }\n+\n+    /**\n+     * Creates an implementation instance of {@link DigitalTwins} that is used to invoke the Digital Twin features\n+     * @param connectionString The IoTHub connection string\n+     * @return DigitalTwinAsyncClient\n+     */\n+    public static DigitalTwinAsyncClient createFromConnectionString(String connectionString)\n+    {\n+        return new DigitalTwinAsyncClient(connectionString);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The class to deserialize the application/json into.\n+     * @param <T> The generic type to deserialize the application/json into.\n+     * @return The application/json of the digital twin.\n+     */\n+    public <T> Observable<T> getDigitalTwin (String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz)\n+                .map(response -> response.body());\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The class to deserialize the application/json into.\n+     * @param <T> The generic type to deserialize the application/json into.\n+     * @return A {@link ServiceResponseWithHeaders} representing deserialized application/json of the digital twin with {@link DigitalTwinGetHeaders}.\n+     */\n+    public <T> Observable<ServiceResponseWithHeaders<T, DigitalTwinGetHeaders>> getDigitalTwinWithResponse (String digitalTwinId, Class<T> clazz)\n+    {\n+        if(clazz == null)\n+        {\n+            throw new IllegalArgumentException(\"Parameter clazz is required and cannot be null.\");\n+        }\n+\n+        return digitalTwin.getDigitalTwinWithServiceResponseAsync(digitalTwinId)\n+                .flatMap(FUNC_TO_DIGITAL_TWIN_GET_RESPONSE)\n+                .flatMap(response -> {\n+                    try {\n+                        T genericResponse = DeserializationHelpers.castObject(objectMapper, response.body(), clazz);\n+                        return Observable.just(new ServiceResponseWithHeaders<>(genericResponse, response.headers(), response.response()));\n+                    } catch (JsonProcessingException e) {\n+                        return Observable.error(new IotHubException(\"Failed to parse the resonse\"));\n+                    }\n+\n+                })\n+                .subscribeOn(Schedulers.io());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The JSON patch to apply to the specified digital twin. This argument can be created using {@link UpdateOperationUtility}.\n+     * @return void.\n+     */\n+    public Observable<Void> updateDigitalTwin (String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        return updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, null)\n+                .map(response -> response.body());\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The JSON patch to apply to the specified digital twin. This argument can be created using {@link UpdateOperationUtility}.\n+     * @return A {@link ServiceResponseWithHeaders} with {@link DigitalTwinUpdateHeaders}.\n+     */\n+    public Observable<ServiceResponseWithHeaders<Void, DigitalTwinUpdateHeaders>> updateDigitalTwinWithResponse (String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        return updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, null);\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The JSON patch to apply to the specified digital twin. This argument can be created using {@link UpdateOperationUtility}.\n+     * @param options The optional settings for this request.\n+     * @return A {@link ServiceResponseWithHeaders} with {@link DigitalTwinUpdateHeaders}.\n+     */\n+    public Observable<ServiceResponseWithHeaders<Void, DigitalTwinUpdateHeaders>> updateDigitalTwinWithResponse (String digitalTwinId, List<Object> digitalTwinUpdateOperations, DigitalTwinUpdateRequestOptions options)\n+    {\n+        String ifMatch = options != null ? options.getIfMatch() : null;\n+        return digitalTwin.updateDigitalTwinWithServiceResponseAsync(digitalTwinId, digitalTwinUpdateOperations, ifMatch)\n+                .flatMap(FUNC_TO_DIGITAL_TWIN_UPDATE_RESPONSE)\n+                .subscribeOn(Schedulers.io());\n+    }\n+\n+    /**\n+     * Invoke a command on a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param commandName The command to be invoked.\n+     * @return A {@link DigitalTwinCommandResponse} which contains the application/json command invocation response.\n+     * @throws IOException can be thrown if the provided payload cannot be deserialized to an Object.\n+     */\n+    public Observable<DigitalTwinCommandResponse> invokeCommand (String digitalTwinId, String commandName) throws IOException {\n+        return invokeCommandWithResponse(digitalTwinId, commandName, null, null)\n+                .map(response -> response.body());\n+    }\n+\n+    /**\n+     * Invoke a command on a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param commandName The command to be invoked.\n+     * @param payload The command payload.\n+     * @return A {@link DigitalTwinCommandResponse} which contains the application/json command invocation response.\n+     * @throws IOException can be thrown if the provided payload cannot be deserialized into a valid Json object.\n+     */\n+    public Observable<DigitalTwinCommandResponse> invokeCommand (String digitalTwinId, String commandName, String payload) throws IOException {\n+        // Retrofit does not work well with null in body\n+        return invokeCommandWithResponse(digitalTwinId, commandName, payload, null)\n+                .map(response -> response.body());\n+    }\n+\n+    /**\n+     * Invoke a command on a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param commandName The command to be invoked.\n+     * @param payload The command payload.\n+     * @param options The optional settings for this request.\n+     * @return A {@link ServiceResponseWithHeaders} with {@link DigitalTwinInvokeRootLevelCommandHeaders} and {@link DigitalTwinCommandResponse} which contains the application/json command invocation response.\n+     * @throws IOException can be thrown if the provided payload cannot be deserialized into a valid Json object.\n+     */\n+    public Observable<ServiceResponseWithHeaders<DigitalTwinCommandResponse, DigitalTwinInvokeCommandHeaders>> invokeCommandWithResponse (String digitalTwinId, String commandName, String payload, DigitalTwinInvokeCommandRequestOptions options) throws IOException {\n+        if(options == null)\n+        {\n+            options = new DigitalTwinInvokeCommandRequestOptions();\n+        }\n+\n+        // Retrofit does not work well with null in body\n+        if(payload == null)\n+        {\n+            payload = \"\";\n+        }\n+\n+        return digitalTwin.invokeRootLevelCommandWithServiceResponseAsync(digitalTwinId, commandName, payload, options.getConnectTimeoutInSeconds(), options.getResponseTimeoutInSeconds())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 193}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjg5Mjk2OnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoyMzoyNlrOHazzQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoyMzoyNlrOHazzQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3MzcyOQ==", "bodyText": "nit: line too long", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497873729", "createdAt": "2020-10-01T00:23:26Z", "author": {"login": "azabbasi"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/DigitalTwinClient.java", "diffHunk": "@@ -0,0 +1,172 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin;\n+\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinGetHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinUpdateHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.DigitalTwins;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeRootLevelCommandHeaders;\n+import com.microsoft.azure.sdk.iot.service.digitaltwin.models.*;\n+import com.microsoft.rest.*;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+public class DigitalTwinClient {\n+    private DigitalTwinAsyncClient digitalTwinAsyncClient;\n+\n+    DigitalTwinClient(String connectionString) {\n+        digitalTwinAsyncClient = DigitalTwinAsyncClient.createFromConnectionString(connectionString);\n+    }\n+\n+    /**\n+     * Creates an implementation instance of {@link DigitalTwins} that is used to invoke the Digital Twin features\n+     * @param connectionString The IoTHub connection string\n+     * @return DigitalTwinClient\n+     */\n+    public static DigitalTwinClient createFromConnectionString(String connectionString)\n+    {\n+        return new DigitalTwinClient(connectionString);\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The class to deserialize the application/json into.\n+     * @param <T> The generic type to deserialize the application/json into.\n+     * @return The application/json of the digital twin.\n+     */\n+    public <T> T getDigitalTwin (String digitalTwinId, Class<T> clazz)\n+    {\n+        return getDigitalTwinWithResponse(digitalTwinId, clazz).body();\n+    }\n+\n+    /**\n+     * Gets a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param clazz The class to deserialize the application/json into.\n+     * @param <T> The generic type to deserialize the application/json into.\n+     * @return A {@link ServiceResponseWithHeaders} representing deserialized application/json of the digital twin with {@link DigitalTwinGetHeaders}.\n+     */\n+    public <T> ServiceResponseWithHeaders<T, DigitalTwinGetHeaders> getDigitalTwinWithResponse (String digitalTwinId, Class<T> clazz)\n+    {\n+        return digitalTwinAsyncClient.getDigitalTwinWithResponse(digitalTwinId, clazz)\n+                .toBlocking().single();\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The JSON patch to apply to the specified digital twin. This argument can be created using {@link UpdateOperationUtility}.\n+     * @return void.\n+     */\n+    public Void updateDigitalTwin (String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        return digitalTwinAsyncClient.updateDigitalTwin(digitalTwinId, digitalTwinUpdateOperations)\n+            .toBlocking().single();\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The JSON patch to apply to the specified digital twin. This argument can be created using {@link UpdateOperationUtility}.\n+     * @return A {@link ServiceResponseWithHeaders} with {@link DigitalTwinUpdateHeaders}.\n+     */\n+    public ServiceResponseWithHeaders<Void, DigitalTwinUpdateHeaders> updateDigitalTwinWithResponse (String digitalTwinId, List<Object> digitalTwinUpdateOperations)\n+    {\n+        return updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, null);\n+    }\n+\n+    /**\n+     * Updates a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param digitalTwinUpdateOperations The JSON patch to apply to the specified digital twin. This argument can be created using {@link UpdateOperationUtility}.\n+     * @param options The optional settings for this request.\n+     * @return A {@link ServiceResponseWithHeaders} with {@link DigitalTwinUpdateHeaders}.\n+     */\n+    public ServiceResponseWithHeaders<Void, DigitalTwinUpdateHeaders> updateDigitalTwinWithResponse (String digitalTwinId, List<Object> digitalTwinUpdateOperations, DigitalTwinUpdateRequestOptions options)\n+    {\n+        return digitalTwinAsyncClient.updateDigitalTwinWithResponse(digitalTwinId, digitalTwinUpdateOperations, options)\n+                .toBlocking().single();\n+    }\n+\n+    /**\n+     * Invoke a command on a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param commandName The command to be invoked.\n+     * @return A {@link DigitalTwinCommandResponse} which contains the application/json command invocation response.\n+     * @throws IOException can be thrown if the provided payload cannot be deserialized into a valid Json object.\n+     */\n+    public DigitalTwinCommandResponse invokeCommand(String digitalTwinId, String commandName) throws IOException {\n+        return invokeCommandWithResponse(digitalTwinId, commandName, null, null).body();\n+    }\n+\n+    /**\n+     * Invoke a command on a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param commandName The command to be invoked.\n+     * @param payload The command payload.\n+     * @return A {@link DigitalTwinCommandResponse} which contains the application/json command invocation response.\n+     * @throws IOException can be thrown if the provided payload cannot be deserialized into a valid Json object.\n+     */\n+    public DigitalTwinCommandResponse invokeCommand(String digitalTwinId, String commandName, String payload) throws IOException {\n+        // Retrofit does not work well with null in body\n+        return invokeCommandWithResponse(digitalTwinId, commandName, payload, null).body();\n+    }\n+\n+    /**\n+     * Invoke a command on a digital twin.\n+     * @param digitalTwinId The Id of the digital twin.\n+     * @param commandName The command to be invoked.\n+     * @param payload The command payload.\n+     * @param options The optional settings for this request.\n+     * @return A {@link ServiceResponseWithHeaders} with {@link DigitalTwinInvokeRootLevelCommandHeaders} and {@link DigitalTwinCommandResponse} which contains the application/json command invocation response.\n+     * @throws IOException can be thrown if the provided payload cannot be deserialized into a valid Json object.\n+     */\n+    public ServiceResponseWithHeaders<DigitalTwinCommandResponse, DigitalTwinInvokeCommandHeaders> invokeCommandWithResponse(String digitalTwinId, String commandName, String payload, DigitalTwinInvokeCommandRequestOptions options) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjg5ODc0OnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/authentication/ServiceClientCredentialsProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoyNDo1NVrOHaz3Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMjowNjoyMFrOHa3yZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3NDY5OA==", "bodyText": "nit : indentation", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497874698", "createdAt": "2020-10-01T00:24:55Z", "author": {"login": "azabbasi"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/authentication/ServiceClientCredentialsProvider.java", "diffHunk": "@@ -0,0 +1,31 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin.authentication;;\n+\n+import com.microsoft.rest.credentials.ServiceClientCredentials;\n+import lombok.AllArgsConstructor;\n+import lombok.NonNull;\n+import okhttp3.Interceptor;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n+\n+@AllArgsConstructor\n+public class ServiceClientCredentialsProvider implements ServiceClientCredentials {\n+\n+    private static final String AUTHORIZATION = \"Authorization\";\n+    @NonNull\n+    private final SasTokenProvider sasTokenProvider;\n+\n+    @Override\n+    public void applyCredentialsFilter(OkHttpClient.Builder clientBuilder) {\n+        Interceptor authenticationInterceptor = chain -> {\n+            Request authenticatedRequest = chain.request()\n+                                                .newBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkzOTA0NQ==", "bodyText": "This one and two below, I have left as it is. Wasn't sure if you meant it is more indented but looked fine to me.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497939045", "createdAt": "2020-10-01T02:06:20Z", "author": {"login": "bikamani"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/authentication/ServiceClientCredentialsProvider.java", "diffHunk": "@@ -0,0 +1,31 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin.authentication;;\n+\n+import com.microsoft.rest.credentials.ServiceClientCredentials;\n+import lombok.AllArgsConstructor;\n+import lombok.NonNull;\n+import okhttp3.Interceptor;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n+\n+@AllArgsConstructor\n+public class ServiceClientCredentialsProvider implements ServiceClientCredentials {\n+\n+    private static final String AUTHORIZATION = \"Authorization\";\n+    @NonNull\n+    private final SasTokenProvider sasTokenProvider;\n+\n+    @Override\n+    public void applyCredentialsFilter(OkHttpClient.Builder clientBuilder) {\n+        Interceptor authenticationInterceptor = chain -> {\n+            Request authenticatedRequest = chain.request()\n+                                                .newBuilder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3NDY5OA=="}, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjg5OTQ4OnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/authentication/ServiceConnectionString.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoyNTowOVrOHaz3jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoyNTowOVrOHaz3jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3NDgzMA==", "bodyText": "nit: indentation", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497874830", "createdAt": "2020-10-01T00:25:09Z", "author": {"login": "azabbasi"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/authentication/ServiceConnectionString.java", "diffHunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin.authentication;\n+\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.NonNull;\n+\n+@Getter\n+public class ServiceConnectionString {\n+    private static final String HOST_NAME_REGEX = \"[a-zA-Z0-9_\\\\-\\\\.]+$\";\n+    private static final String SHARED_ACCESS_KEY_NAME_REGEX = \"^[a-zA-Z0-9_\\\\-@\\\\.]+$\";\n+    private static final String SHARED_ACCESS_KEY_REGEX = \"^.+$\";\n+    private static final String SHARED_ACCESS_SIGNATURE_REGEX = \"^.+$\";\n+\n+    private String hostName;\n+    private String httpsEndpoint;\n+    private String sharedAccessKeyName;\n+    private String sharedAccessKey;\n+    private String sharedAccessSignature;\n+\n+    @Builder\n+    ServiceConnectionString(@NonNull String hostName, @NonNull String httpsEndpoint, String sharedAccessKeyName, String sharedAccessKey, String sharedAccessSignature) {\n+        if (!validInput(sharedAccessKeyName, sharedAccessKey, sharedAccessSignature)) {\n+            throw new IllegalArgumentException(\"Specify either both the sharedAccessKey and sharedAccessKeyName, or sharedAccessSignature\");\n+        }\n+\n+        this.hostName = hostName;\n+        this.httpsEndpoint = httpsEndpoint;\n+        this.sharedAccessKeyName = sharedAccessKeyName;\n+        this.sharedAccessKey = sharedAccessKey;\n+        this.sharedAccessSignature = sharedAccessSignature;\n+    }\n+\n+    public SasTokenProvider createSasTokenProvider() {\n+        if (sharedAccessSignature != null) {\n+            return new StaticSasTokenProvider(sharedAccessSignature);\n+        } else {\n+            return SasTokenProviderWithSharedAccessKey.builder()\n+                                                      .hostName(hostName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjkwMTA2OnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/authentication/ServiceConnectionStringParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoyNTozN1rOHaz4lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoyNTozN1rOHaz4lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3NTA5Mg==", "bodyText": "nit: indentation", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497875092", "createdAt": "2020-10-01T00:25:37Z", "author": {"login": "azabbasi"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/authentication/ServiceConnectionStringParser.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin.authentication;\n+\n+import lombok.NonNull;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.StringTokenizer;\n+\n+public final class ServiceConnectionStringParser {\n+    private static final String VALUE_PAIR_DELIMITER = \";\";\n+    private static final String VALUE_PAIR_SEPARATOR = \"=\";\n+\n+    private static final String HOST_NAME_PROPERTY_NAME = \"HostName\";\n+    private static final String SHARED_ACCESS_KEY_NAME_PROPERTY_NAME = \"SharedAccessKeyName\";\n+    private static final String SHARED_ACCESS_KEY_PROPERTY_NAME = \"SharedAccessKey\";\n+    private static final String SHARED_ACCESS_SIGNATURE_PROPERTY_NAME = \"SharedAccessSignature\";\n+\n+    private static final String ENDPOINT_PROTOCOL = \"https\";\n+\n+    private ServiceConnectionStringParser() {\n+    }\n+\n+    public static ServiceConnectionString parseConnectionString(@NonNull String connectionString) {\n+        Map<String, String> keyValueMap = new HashMap<>();\n+\n+        StringTokenizer stringTokenizer1 = new StringTokenizer(connectionString, VALUE_PAIR_DELIMITER);\n+        while (stringTokenizer1.hasMoreTokens()) {\n+            String currentToken = stringTokenizer1.nextToken();\n+\n+            String[] splitString = currentToken.split(VALUE_PAIR_SEPARATOR, 2);\n+            if (splitString.length == 2) {\n+                keyValueMap.put(splitString[0], splitString[1]);\n+            }\n+        }\n+\n+        String hostName = keyValueMap.get(HOST_NAME_PROPERTY_NAME);\n+\n+        return ServiceConnectionString.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjkxNzAyOnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/helpers/Base64.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoyOTo1NVrOHa0DRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDoyOTo1NVrOHa0DRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3NzgzMQ==", "bodyText": "nit: indentation off", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497877831", "createdAt": "2020-10-01T00:29:55Z", "author": {"login": "azabbasi"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/helpers/Base64.java", "diffHunk": "@@ -0,0 +1,284 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin.helpers;\n+\n+public final class Base64 {\n+    private static final byte BYTE_START_UPPERCASE = 'A';\n+    private static final byte BYTE_END_UPPERCASE = 'Z';\n+    private static final byte BYTE_START_LOWERCASE = 'a';\n+    private static final byte BYTE_END_LOWERCASE = 'z';\n+    private static final byte BYTE_START_NUMBER = '0';\n+    private static final byte BYTE_END_NUMBER = '9';\n+    private static final byte BYTE_PLUS = '+';\n+    private static final byte BYTE_SLASH = '/';\n+\n+    private static final int BASE64_END_UPPERCASE = 26;\n+    private static final int BASE64_END_LOWERCASE = 52;\n+    private static final int BASE64_END_NUMBER = 62;\n+    private static final int BASE64_PLUS = 62;\n+    private static final int BASE64_SLASH = 63;\n+    private static final byte BASE64_PAD = '=';\n+\n+    private static final int HALF_NIBBLE = 2;\n+    private static final int ONE_NIBBLE = 4;\n+    private static final int ONE_AND_HALF_NIBBLE = 6;\n+    private static final int ONE_BYTE = 8;\n+    private static final int TWO_BYTES = 16;\n+    private static final int THREE_BYTES = 24;\n+\n+    private static final int ISOLATE_BYTE = 0xFF;\n+    private static final int ISOLATE_BASE64 = 0x3F;\n+    private static final int ISOLATE_LSB_BASE64 = 0x0F;\n+    private static final int ISOLATE_MSB_BASE64 = 0x03;\n+\n+    private static final int BYTE_GROUP_SIZE = 3;\n+    private static final int BASE64_GROUP_SIZE = 4;\n+\n+    private static final int[] BASE64D16_CONVERSION_TABLE =\n+            {\n+                    ((int) 'A' + ((int) 'E' << ONE_BYTE) + ((int) 'I' << TWO_BYTES) + ((int) 'M' << THREE_BYTES)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjkyMTM3OnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/models/DigitalTwinCommandResponse.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDozMDo1N1rOHa0GJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMTo0NjoyNVrOHa3CCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3ODU2Nw==", "bodyText": "These should be marked private", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497878567", "createdAt": "2020-10-01T00:30:57Z", "author": {"login": "azabbasi"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/models/DigitalTwinCommandResponse.java", "diffHunk": "@@ -0,0 +1,39 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin.models;\n+\n+/**\n+ * Represents the device command invocation results.\n+ */\n+public final class DigitalTwinCommandResponse {\n+    /**\n+     * Command invocation result status, as supplied by the device.\n+     */\n+    Integer status;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3ODY3Mw==", "bodyText": "no?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497878673", "createdAt": "2020-10-01T00:31:07Z", "author": {"login": "azabbasi"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/models/DigitalTwinCommandResponse.java", "diffHunk": "@@ -0,0 +1,39 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin.models;\n+\n+/**\n+ * Represents the device command invocation results.\n+ */\n+public final class DigitalTwinCommandResponse {\n+    /**\n+     * Command invocation result status, as supplied by the device.\n+     */\n+    Integer status;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3ODU2Nw=="}, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkyNjY2NA==", "bodyText": "agree", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497926664", "createdAt": "2020-10-01T01:46:25Z", "author": {"login": "bikamani"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/models/DigitalTwinCommandResponse.java", "diffHunk": "@@ -0,0 +1,39 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin.models;\n+\n+/**\n+ * Represents the device command invocation results.\n+ */\n+public final class DigitalTwinCommandResponse {\n+    /**\n+     * Command invocation result status, as supplied by the device.\n+     */\n+    Integer status;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3ODU2Nw=="}, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjkyMzcwOnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/models/DigitalTwinInvokeCommandRequestOptions.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDozMTozNFrOHa0Htg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMTo1MDo0MFrOHa3Ltw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3ODk2Ng==", "bodyText": "javadoc missing", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497878966", "createdAt": "2020-10-01T00:31:34Z", "author": {"login": "azabbasi"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/models/DigitalTwinInvokeCommandRequestOptions.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin.models;\n+\n+/**\n+ * General request options that are applicable, but optional, for invoke command APIs.\n+ */\n+public final class DigitalTwinInvokeCommandRequestOptions {\n+\n+    /**\n+     * The time (in seconds) that the service waits for the device to come online.\n+     * The default is 0 seconds (which means the device must already be online) and the maximum is 300 seconds.\n+     */\n+    private Integer connectTimeoutInSeconds;\n+\n+    /**\n+     * The time (in seconds) that the service waits for the method invocation to return a response.\n+     * The default is 30 seconds, minimum is 5 seconds, and maximum is 300 seconds.\n+     */\n+    private Integer responseTimeoutInSeconds;\n+\n+    public Integer getConnectTimeoutInSeconds()\n+    {\n+        return connectTimeoutInSeconds;\n+    }\n+\n+    public void setConnectTimeoutInSeconds(Integer connectTimeoutInSeconds)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3OTA4MA==", "bodyText": "this and below", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497879080", "createdAt": "2020-10-01T00:31:44Z", "author": {"login": "azabbasi"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/models/DigitalTwinInvokeCommandRequestOptions.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin.models;\n+\n+/**\n+ * General request options that are applicable, but optional, for invoke command APIs.\n+ */\n+public final class DigitalTwinInvokeCommandRequestOptions {\n+\n+    /**\n+     * The time (in seconds) that the service waits for the device to come online.\n+     * The default is 0 seconds (which means the device must already be online) and the maximum is 300 seconds.\n+     */\n+    private Integer connectTimeoutInSeconds;\n+\n+    /**\n+     * The time (in seconds) that the service waits for the method invocation to return a response.\n+     * The default is 30 seconds, minimum is 5 seconds, and maximum is 300 seconds.\n+     */\n+    private Integer responseTimeoutInSeconds;\n+\n+    public Integer getConnectTimeoutInSeconds()\n+    {\n+        return connectTimeoutInSeconds;\n+    }\n+\n+    public void setConnectTimeoutInSeconds(Integer connectTimeoutInSeconds)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3ODk2Ng=="}, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkyODI5MQ==", "bodyText": "This is generated using delombok which does not add documentation unfortunately from private fields above", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497928291", "createdAt": "2020-10-01T01:49:17Z", "author": {"login": "bikamani"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/models/DigitalTwinInvokeCommandRequestOptions.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin.models;\n+\n+/**\n+ * General request options that are applicable, but optional, for invoke command APIs.\n+ */\n+public final class DigitalTwinInvokeCommandRequestOptions {\n+\n+    /**\n+     * The time (in seconds) that the service waits for the device to come online.\n+     * The default is 0 seconds (which means the device must already be online) and the maximum is 300 seconds.\n+     */\n+    private Integer connectTimeoutInSeconds;\n+\n+    /**\n+     * The time (in seconds) that the service waits for the method invocation to return a response.\n+     * The default is 30 seconds, minimum is 5 seconds, and maximum is 300 seconds.\n+     */\n+    private Integer responseTimeoutInSeconds;\n+\n+    public Integer getConnectTimeoutInSeconds()\n+    {\n+        return connectTimeoutInSeconds;\n+    }\n+\n+    public void setConnectTimeoutInSeconds(Integer connectTimeoutInSeconds)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3ODk2Ng=="}, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkyOTE0Mw==", "bodyText": "I have added documentation for now", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497929143", "createdAt": "2020-10-01T01:50:40Z", "author": {"login": "bikamani"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/models/DigitalTwinInvokeCommandRequestOptions.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin.models;\n+\n+/**\n+ * General request options that are applicable, but optional, for invoke command APIs.\n+ */\n+public final class DigitalTwinInvokeCommandRequestOptions {\n+\n+    /**\n+     * The time (in seconds) that the service waits for the device to come online.\n+     * The default is 0 seconds (which means the device must already be online) and the maximum is 300 seconds.\n+     */\n+    private Integer connectTimeoutInSeconds;\n+\n+    /**\n+     * The time (in seconds) that the service waits for the method invocation to return a response.\n+     * The default is 30 seconds, minimum is 5 seconds, and maximum is 300 seconds.\n+     */\n+    private Integer responseTimeoutInSeconds;\n+\n+    public Integer getConnectTimeoutInSeconds()\n+    {\n+        return connectTimeoutInSeconds;\n+    }\n+\n+    public void setConnectTimeoutInSeconds(Integer connectTimeoutInSeconds)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3ODk2Ng=="}, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjkyNzQwOnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/serialization/DigitalTwinMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDozMjozMVrOHa0KHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMTo1Njo1NlrOHa3bLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3OTU4Mg==", "bodyText": "method should be called addWritableProperty", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497879582", "createdAt": "2020-10-01T00:32:31Z", "author": {"login": "azabbasi"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/serialization/DigitalTwinMetadata.java", "diffHunk": "@@ -0,0 +1,66 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin.serialization;\n+\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public final class DigitalTwinMetadata {\n+    /* The Id of the model that the digital twin or component is modeled by. This is present on a digital twin's root level metadata */\n+    @JsonProperty(value = \"$model\", required = true)\n+    private String modelId;\n+\n+    /* Model-defined writable properties' request state. */\n+    @JsonIgnore\n+    private final Map<String, WritableProperty> writeableProperties = new HashMap<>();\n+\n+    /**\n+     * Creates an instance of digital twin metadata.\n+     */\n+    public DigitalTwinMetadata() {\n+    }\n+\n+    /**\n+     * Gets the Id of the model that the digital twin or component is modeled by.\n+     * @return The Id of the model that the digital twin or component is modeled by.\n+     */\n+    public String getModelId() {\n+        return modelId;\n+    }\n+\n+    /**\n+     * Sets the Id of the model that the digital twin or component is modeled by.\n+     * @param modelId The Id of the model that the digital twin or component is modeled by.\n+     * @return The DigitalTwinMetadata object itself.\n+     */\n+    public DigitalTwinMetadata setModelId(String modelId) {\n+        this.modelId = modelId;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the model-defined writable properties' request state.\n+     * For your convenience, the value of each map can be turned into an instance of WritableProperty.\n+     * @return The model-defined writable properties' request state.\n+     */\n+    @JsonAnyGetter\n+    public Map<String, WritableProperty> getWriteableProperties() {\n+        return writeableProperties;\n+    }\n+\n+    /**\n+     * Sets the model-defined writable properties' request state.\n+     * @return The DigitalTwinMetadata object itself.\n+     */\n+    @JsonAnySetter\n+    DigitalTwinMetadata setWritableProperties(String key, WritableProperty value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkzMzEwMA==", "bodyText": "I do agree.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497933100", "createdAt": "2020-10-01T01:56:56Z", "author": {"login": "bikamani"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/serialization/DigitalTwinMetadata.java", "diffHunk": "@@ -0,0 +1,66 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin.serialization;\n+\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public final class DigitalTwinMetadata {\n+    /* The Id of the model that the digital twin or component is modeled by. This is present on a digital twin's root level metadata */\n+    @JsonProperty(value = \"$model\", required = true)\n+    private String modelId;\n+\n+    /* Model-defined writable properties' request state. */\n+    @JsonIgnore\n+    private final Map<String, WritableProperty> writeableProperties = new HashMap<>();\n+\n+    /**\n+     * Creates an instance of digital twin metadata.\n+     */\n+    public DigitalTwinMetadata() {\n+    }\n+\n+    /**\n+     * Gets the Id of the model that the digital twin or component is modeled by.\n+     * @return The Id of the model that the digital twin or component is modeled by.\n+     */\n+    public String getModelId() {\n+        return modelId;\n+    }\n+\n+    /**\n+     * Sets the Id of the model that the digital twin or component is modeled by.\n+     * @param modelId The Id of the model that the digital twin or component is modeled by.\n+     * @return The DigitalTwinMetadata object itself.\n+     */\n+    public DigitalTwinMetadata setModelId(String modelId) {\n+        this.modelId = modelId;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the model-defined writable properties' request state.\n+     * For your convenience, the value of each map can be turned into an instance of WritableProperty.\n+     * @return The model-defined writable properties' request state.\n+     */\n+    @JsonAnyGetter\n+    public Map<String, WritableProperty> getWriteableProperties() {\n+        return writeableProperties;\n+    }\n+\n+    /**\n+     * Sets the model-defined writable properties' request state.\n+     * @return The DigitalTwinMetadata object itself.\n+     */\n+    @JsonAnySetter\n+    DigitalTwinMetadata setWritableProperties(String key, WritableProperty value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg3OTU4Mg=="}, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjkzMDA3OnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/readme.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDozMzoyM1rOHa0L3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDozMzoyM1rOHa0L3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg4MDAyOQ==", "bodyText": "space between if and paren", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497880029", "createdAt": "2020-10-01T00:33:23Z", "author": {"login": "drwill-ms"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/readme.md", "diffHunk": "@@ -0,0 +1,52 @@\n+## Examples\n+\n+You can familiarize yourself with different APIs using [samples for DigitalTwinClient](https://github.com/Azure/azure-iot-sdk-java/tree/master/service/iot-service-samples/digitaltwin-service-samples).\n+\n+## Source code folder structure\n+\n+### /authentication\n+\n+The code for generating shared access signature tokens, used for authentication Http requests against Azure IoT Hub service.\n+\n+### /generated\n+\n+The code generated by autorest using the swagger file defined under [DigitalTwin.json](https://github.com/Azure/azure-iot-sdk-java/blob/master/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/swagger/digitalTwin.json).\n+\n+### /src/Customized\n+\n+The customzied code written to override the following behavior of auto-generated code:\n+\n+- Rename some of the generated types, eg. [DigitalTwinGetHeaders](https://github.com/Azure/azure-iot-sdk-java/blob/master/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/customized/DigitalTwinGetHeaders.java)\n+\n+### /src/models\n+\n+Model classes useful for use with the Digital Twin client operations.\n+\n+### /src/serialization\n+\n+Serialization helpers provided to help serialize/deserialize commonly used types when working with digital twins.\n+\n+## Protocol layer generation:\n+- Go in folder ./swagger and run the powershell script [generateCode.ps1](https://github.com/Azure/azure-iot-sdk-java/blob/master/service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/swagger/generate.ps1). It will pick up the [autorest config](./swagger/autorest.md) and output the results into [generated](./generated) folder. It will also make a few automated changes to the generated protocol layer, that are required for this client library.\n+\n+## Troubleshooting\n+\n+All service operations will throw RestException on failure reported by the service, with helpful error codes and other information.\n+\n+```java\n+try\n+{\n+    ServiceResponseWithHeaders<DigitalTwinCommandResponse, DigitalTwinInvokeCommandHeaders> commandResponse = client.invokeCommandWithResponse(digitalTwinid, commandName, commandInput, options);\n+}\n+catch (RestException ex)\n+{\n+    if(ex.response().code() == 404)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjkzMTMyOnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/serialization/DeserializationHelpers.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDozMzo0M1rOHa0Mpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMjowNToxN1rOHa3viA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg4MDIzMA==", "bodyText": "else should be on the same line, no?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497880230", "createdAt": "2020-10-01T00:33:43Z", "author": {"login": "drwill-ms"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/serialization/DeserializationHelpers.java", "diffHunk": "@@ -0,0 +1,32 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin.serialization;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+public class DeserializationHelpers {\n+\n+    /**\n+     * Converts the payload object into a generic type.\n+     * There are two different paths we will have to take based on the type T\n+     * In case of a String, we need to write the value of the payload as a String\n+     * In case of any other type that the user decides to deserialize the payload, we will use mapper.convertValue to perform the conversion.\n+     * Updates a digital twin.\n+     * @param mapper Object Mapper\n+     * @param payload payload object to cast.\n+     * @param clazz The class to deserialize the object into.\n+     * @param <T> The generic type to deserialize the object into.\n+     * @return T The generic type response.\n+     * @throws JsonProcessingException Json parsing exception.\n+     */\n+    public static <T> T castObject(ObjectMapper mapper, Object payload, Class<T> clazz) throws JsonProcessingException {\n+        if (clazz.isAssignableFrom(String.class)){\n+            return (T)mapper.writeValueAsString(payload);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkyNTMzNw==", "bodyText": "Is that the format we are following?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497925337", "createdAt": "2020-10-01T01:44:20Z", "author": {"login": "bikamani"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/serialization/DeserializationHelpers.java", "diffHunk": "@@ -0,0 +1,32 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin.serialization;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+public class DeserializationHelpers {\n+\n+    /**\n+     * Converts the payload object into a generic type.\n+     * There are two different paths we will have to take based on the type T\n+     * In case of a String, we need to write the value of the payload as a String\n+     * In case of any other type that the user decides to deserialize the payload, we will use mapper.convertValue to perform the conversion.\n+     * Updates a digital twin.\n+     * @param mapper Object Mapper\n+     * @param payload payload object to cast.\n+     * @param clazz The class to deserialize the object into.\n+     * @param <T> The generic type to deserialize the object into.\n+     * @return T The generic type response.\n+     * @throws JsonProcessingException Json parsing exception.\n+     */\n+    public static <T> T castObject(ObjectMapper mapper, Object payload, Class<T> clazz) throws JsonProcessingException {\n+        if (clazz.isAssignableFrom(String.class)){\n+            return (T)mapper.writeValueAsString(payload);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg4MDIzMA=="}, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkzODMxMg==", "bodyText": "I have left it as it is for now.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497938312", "createdAt": "2020-10-01T02:05:17Z", "author": {"login": "bikamani"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/serialization/DeserializationHelpers.java", "diffHunk": "@@ -0,0 +1,32 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.service.digitaltwin.serialization;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+public class DeserializationHelpers {\n+\n+    /**\n+     * Converts the payload object into a generic type.\n+     * There are two different paths we will have to take based on the type T\n+     * In case of a String, we need to write the value of the payload as a String\n+     * In case of any other type that the user decides to deserialize the payload, we will use mapper.convertValue to perform the conversion.\n+     * Updates a digital twin.\n+     * @param mapper Object Mapper\n+     * @param payload payload object to cast.\n+     * @param clazz The class to deserialize the object into.\n+     * @param <T> The generic type to deserialize the object into.\n+     * @return T The generic type response.\n+     * @throws JsonProcessingException Json parsing exception.\n+     */\n+    public static <T> T castObject(ObjectMapper mapper, Object payload, Class<T> clazz) throws JsonProcessingException {\n+        if (clazz.isAssignableFrom(String.class)){\n+            return (T)mapper.writeValueAsString(payload);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg4MDIzMA=="}, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjkzMTQyOnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/swagger/readme.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDozMzo0NVrOHa0MuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMTo1MToxOVrOHa3NcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg4MDI0OA==", "bodyText": "this must have been fun testing :))", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497880248", "createdAt": "2020-10-01T00:33:45Z", "author": {"login": "azabbasi"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/swagger/readme.md", "diffHunk": "@@ -0,0 +1,33 @@\n+# Digital Twin Service Client\n+\n+## Getting Started\n+> see https://aka.ms/autorest\n+\n+The Digital Twin service client using an autogenerated protocol layer that is created by autorest.\n+\n+To create this protocol layer, simply install AutoRest in Node.js via `npm` (`npm install -g autorest`), navigate to this folder and run:\n+\n+`autorest`\n+\n+It will pick the configuration options mentioned below and output the generated files.\n+\n+To see additional help and options, run:\n+`autorest --help`\n+\n+For other options on installation see [Installing Autorest](https://aka.ms/autorest/install) on the AutoRest GitHub page.\n+\n+## Configuration\n+The following settings are used for generating the protocol layer API with AutoRest:\n+\n+```yaml\n+input-file: ./digitalTwin.json\n+\n+# The output always get generated as Java files will be generated under src/main/java/specified/java/package\n+# Specifying the output-folder path as iot-service-client will generate the required folder structure.\n+output-folder: ../../../../../../../../../../../", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkyOTU4NQ==", "bodyText": "I know!! \ud83d\ude06", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497929585", "createdAt": "2020-10-01T01:51:19Z", "author": {"login": "bikamani"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/swagger/readme.md", "diffHunk": "@@ -0,0 +1,33 @@\n+# Digital Twin Service Client\n+\n+## Getting Started\n+> see https://aka.ms/autorest\n+\n+The Digital Twin service client using an autogenerated protocol layer that is created by autorest.\n+\n+To create this protocol layer, simply install AutoRest in Node.js via `npm` (`npm install -g autorest`), navigate to this folder and run:\n+\n+`autorest`\n+\n+It will pick the configuration options mentioned below and output the generated files.\n+\n+To see additional help and options, run:\n+`autorest --help`\n+\n+For other options on installation see [Installing Autorest](https://aka.ms/autorest/install) on the AutoRest GitHub page.\n+\n+## Configuration\n+The following settings are used for generating the protocol layer API with AutoRest:\n+\n+```yaml\n+input-file: ./digitalTwin.json\n+\n+# The output always get generated as Java files will be generated under src/main/java/specified/java/package\n+# Specifying the output-folder path as iot-service-client will generate the required folder structure.\n+output-folder: ../../../../../../../../../../../", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg4MDI0OA=="}, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjkzMjk2OnYy", "diffSide": "RIGHT", "path": "service/iot-service-samples/digitaltwin-service-samples/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDozNDowOVrOHa0Nzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDozNDowOVrOHa0Nzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg4MDUyNg==", "bodyText": "extra lines", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497880526", "createdAt": "2020-10-01T00:34:09Z", "author": {"login": "azabbasi"}, "path": "service/iot-service-samples/digitaltwin-service-samples/pom.xml", "diffHunk": "@@ -0,0 +1,41 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>iot-service-client-parent</artifactId>\n+        <groupId>com.microsoft.azure.sdk.iot</groupId>\n+        <version>1.18.0</version>\n+        <relativePath>../../pom.xml</relativePath>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>digitaltwin-service-samples</artifactId>\n+\n+    <properties>\n+        <slf4j-version>1.7.25</slf4j-version>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>io.reactivex</groupId>\n+            <artifactId>rxjava</artifactId>\n+            <version>1.3.5</version>\n+            <scope>compile</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.microsoft.azure.sdk.iot</groupId>\n+            <artifactId>iot-service-client</artifactId>\n+            <version>1.25.0</version>\n+            <scope>compile</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>\n+            <artifactId>jackson-databind</artifactId>\n+            <version>2.10.1</version>\n+            <scope>compile</scope>\n+        </dependency>\n+    </dependencies>\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjkzMzczOnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/swagger/readme.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDozNDoxOVrOHa0OQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDozNDoxOVrOHa0OQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg4MDY0MQ==", "bodyText": "empty newline after headers", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497880641", "createdAt": "2020-10-01T00:34:19Z", "author": {"login": "drwill-ms"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/digitaltwin/swagger/readme.md", "diffHunk": "@@ -0,0 +1,33 @@\n+# Digital Twin Service Client\n+\n+## Getting Started\n+> see https://aka.ms/autorest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjkzNTE3OnYy", "diffSide": "RIGHT", "path": "service/iot-service-samples/digitaltwin-service-samples/temperature-controller-service-sample/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDozNDo0M1rOHa0PMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwMDozNDo0M1rOHa0PMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg4MDg4Mg==", "bodyText": "extra lines", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/918#discussion_r497880882", "createdAt": "2020-10-01T00:34:43Z", "author": {"login": "azabbasi"}, "path": "service/iot-service-samples/digitaltwin-service-samples/temperature-controller-service-sample/pom.xml", "diffHunk": "@@ -0,0 +1,29 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>iot-service-client-parent</artifactId>\n+        <groupId>com.microsoft.azure.sdk.iot</groupId>\n+        <version>1.18.0</version>\n+        <relativePath>../../../pom.xml</relativePath>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>temperature-controller-service-sample</artifactId>\n+    <dependencies>\n+        <dependency>\n+            <groupId>com.microsoft.azure.sdk.iot</groupId>\n+            <artifactId>iot-service-client</artifactId>\n+            <version>${iot-service-client-version}</version>\n+            <scope>compile</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-log4j12</artifactId>\n+            <version>1.7.29</version>\n+        </dependency>\n+    </dependencies>\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715a10906774d8763ea0b4db3038537c97211809"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2692, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}