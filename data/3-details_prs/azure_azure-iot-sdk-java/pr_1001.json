{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzNDQ2MDM2", "number": 1001, "title": "feat(security-provider): Add helper function to compute derived symmetric keys, add samples", "bodyText": "Symmetric key authentication works a bit differently for individual enrollments and enrollment groups. For enrollment groups, users are expected to compute a derived key for each device provisioned under that group. Previously, we didn't expose a function to do that, or have documentation to explain that users have to do it.\nThis commit splits the symmetric key provisioning samples into individual and group samples so that we can better show the differences in how these flows work. It also exposes a helper function for computing this derived key for convenience.", "createdAt": "2020-11-18T20:17:46Z", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1001", "merged": true, "mergeCommit": {"oid": "2fb40750462ff19fb300bb6151b586cc807fc70c"}, "closed": true, "closedAt": "2020-11-18T22:32:45Z", "author": {"login": "timtay-microsoft"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdd0BFMgH2gAyNTIzNDQ2MDM2OjljZjBkOWFmYmRhOWZhNjkwMTVhZTcwNDRhYmJkYzBlMzMyZTUwNzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdd1F-YAH2gAyNTIzNDQ2MDM2OmQ1OGZkYzAxMGE0NWY2MmI0ZTAxZjZmODE1Njk5ZTNmNDY5N2M0YTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9cf0d9afbda9fa69015ae7044abbdc0e332e5070", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/9cf0d9afbda9fa69015ae7044abbdc0e332e5070", "committedDate": "2020-11-18T20:17:17Z", "message": "feat(security-provider): Add helper function to compute derived symmetric keys, add samples\n\nSymmetric key authentication works a bit differently for individual enrollments and enrollment groups. For enrollment groups, users are expected to compute a derived key for each device provisioned under that group. Previously, we didn't expose a function to do that, or have documentation to explain that users have to do it.\n\nThis commit splits the symmetric key provisioning samples into individual and group samples so that we can better show the differences in how these flows work. It also exposes a helper function for computing this derived key for convenience."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzODQxNTI2", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1001#pullrequestreview-533841526", "createdAt": "2020-11-18T20:18:20Z", "commit": {"oid": "9cf0d9afbda9fa69015ae7044abbdc0e332e5070"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMDoxODoyMFrOH2AeHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMDoxODoyMFrOH2AeHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM5Mjg2MQ==", "bodyText": "We had this helper function in test code, but it would fit nicely as a helper function in our security provider class itself.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1001#discussion_r526392861", "createdAt": "2020-11-18T20:18:20Z", "author": {"login": "timtay-microsoft"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/provisioning/setup/ProvisioningCommon.java", "diffHunk": "@@ -606,13 +604,4 @@ private void createTestIndividualEnrollment(Attestation attestation, AllocationP\n         testInstance.individualEnrollment.setInitialTwin(twinState);\n         testInstance.individualEnrollment = testInstance.provisioningServiceClient.createOrUpdateIndividualEnrollment(testInstance.individualEnrollment);\n     }\n-\n-    public static byte[] ComputeDerivedSymmetricKey(String masterKey, String registrationId) throws InvalidKeyException, NoSuchAlgorithmException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cf0d9afbda9fa69015ae7044abbdc0e332e5070"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e89d95b0c540607f94dfde5b63893f055c1598c0", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/e89d95b0c540607f94dfde5b63893f055c1598c0", "committedDate": "2020-11-18T20:19:21Z", "message": "fixup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7daff7d42509edb24ff30774018411ac151b069", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/d7daff7d42509edb24ff30774018411ac151b069", "committedDate": "2020-11-18T20:25:44Z", "message": "fixup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2548a0a035fa58deeb6c7a42db3724e15277df77", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/2548a0a035fa58deeb6c7a42db3724e15277df77", "committedDate": "2020-11-18T20:26:11Z", "message": "fixup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "107748472105a88bd496ff3c72c95c2fc0e7c8bb", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/107748472105a88bd496ff3c72c95c2fc0e7c8bb", "committedDate": "2020-11-18T20:31:45Z", "message": "fixup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzODQ3ODg5", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1001#pullrequestreview-533847889", "createdAt": "2020-11-18T20:27:06Z", "commit": {"oid": "e89d95b0c540607f94dfde5b63893f055c1598c0"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMDoyNzowNlrOH2A1yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMDoyOTowMVrOH2A54w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM5ODkyMQ==", "bodyText": "nit: maybe rename this to be \"SYMMETRIC_KEY_ENROLLMENT_GROUP\"?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1001#discussion_r526398921", "createdAt": "2020-11-18T20:27:06Z", "author": {"login": "abhipsaMisra"}, "path": "provisioning/provisioning-samples/provisioning-symmetrickey-group-sample/src/main/java/samples/com/microsoft/azure/sdk/iot/ProvisioningSymmetricKeyEnrollmentGroupSample.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ *\n+ *  Copyright (c) Microsoft. All rights reserved.\n+ *  Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+ *\n+ */\n+\n+package samples.com.microsoft.azure.sdk.iot;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.provisioning.device.*;\n+import com.microsoft.azure.sdk.iot.provisioning.device.internal.exceptions.ProvisioningDeviceClientException;\n+import com.microsoft.azure.sdk.iot.provisioning.security.SecurityProviderSymmetricKey;\n+\n+import java.io.IOException;\n+import java.util.Scanner;\n+\n+/**\n+ * Symmetric Key authenticated enrollment group sample\n+ */\n+public class ProvisioningSymmetricKeyEnrollmentGroupSample\n+{\n+    // The scope Id of your DPS instance. This value can be retrieved from the Azure Portal\n+    private static final String SCOPE_ID = \"[Your scope ID here]\";\n+\n+    // Typically \"global.azure-devices-provisioning.net\"\n+    private static final String GLOBAL_ENDPOINT = \"[Your Provisioning Service Global Endpoint here]\";\n+\n+    // The symmetric key of the enrollment group. Unlike with individual enrollments, this key cannot be used directly when provisioning a device.\n+    // Instead, this sample will demonstrate how to derive the symmetric key for your particular device within the enrollment group.\n+    private static final String SYMMETRIC_KEY = \"[Enter your Symmetric Key here]\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e89d95b0c540607f94dfde5b63893f055c1598c0"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM5OTk3MQ==", "bodyText": "good to know \ud83d\udc4d", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1001#discussion_r526399971", "createdAt": "2020-11-18T20:29:01Z", "author": {"login": "abhipsaMisra"}, "path": "provisioning/provisioning-samples/provisioning-symmetrickey-group-sample/src/main/java/samples/com/microsoft/azure/sdk/iot/ProvisioningSymmetricKeyEnrollmentGroupSample.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ *\n+ *  Copyright (c) Microsoft. All rights reserved.\n+ *  Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+ *\n+ */\n+\n+package samples.com.microsoft.azure.sdk.iot;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.provisioning.device.*;\n+import com.microsoft.azure.sdk.iot.provisioning.device.internal.exceptions.ProvisioningDeviceClientException;\n+import com.microsoft.azure.sdk.iot.provisioning.security.SecurityProviderSymmetricKey;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Scanner;\n+\n+/**\n+ * Symmetric Key authenticated enrollment group sample\n+ */\n+public class ProvisioningSymmetricKeyEnrollmentGroupSample\n+{\n+    // The scope Id of your DPS instance. This value can be retrieved from the Azure Portal\n+    private static final String SCOPE_ID = \"[Your scope ID here]\";\n+\n+    // Typically \"global.azure-devices-provisioning.net\"\n+    private static final String GLOBAL_ENDPOINT = \"[Your Provisioning Service Global Endpoint here]\";\n+\n+    // The symmetric key of the enrollment group. Unlike with individual enrollments, this key cannot be used directly when provisioning a device.\n+    // Instead, this sample will demonstrate how to derive the symmetric key for your particular device within the enrollment group.\n+    private static final String SYMMETRIC_KEY = \"[Enter your Symmetric Key here]\";\n+\n+    // The Id to assign to this device when it is provisioned to an IoT Hub. This value is arbitrary outside of some\n+    // character limitations. For sample purposes, this value is filled in for you, but it may be changed.\n+    private static final String PROVISIONED_DEVICE_ID = \"myProvisionedDevice\";\n+\n+    // Uncomment one line to choose which protocol you'd like to use\n+    private static final ProvisioningDeviceClientTransportProtocol PROVISIONING_DEVICE_CLIENT_TRANSPORT_PROTOCOL = ProvisioningDeviceClientTransportProtocol.HTTPS;\n+    //private static final ProvisioningDeviceClientTransportProtocol PROVISIONING_DEVICE_CLIENT_TRANSPORT_PROTOCOL = ProvisioningDeviceClientTransportProtocol.MQTT;\n+    //private static final ProvisioningDeviceClientTransportProtocol PROVISIONING_DEVICE_CLIENT_TRANSPORT_PROTOCOL = ProvisioningDeviceClientTransportProtocol.MQTT_WS;\n+    //private static final ProvisioningDeviceClientTransportProtocol PROVISIONING_DEVICE_CLIENT_TRANSPORT_PROTOCOL = ProvisioningDeviceClientTransportProtocol.AMQPS;\n+    //private static final ProvisioningDeviceClientTransportProtocol PROVISIONING_DEVICE_CLIENT_TRANSPORT_PROTOCOL = ProvisioningDeviceClientTransportProtocol.AMQPS_WS;\n+\n+    private static final int MAX_TIME_TO_WAIT_FOR_REGISTRATION = 10000; // in milliseconds\n+\n+    static class ProvisioningStatus\n+    {\n+        ProvisioningDeviceClientRegistrationResult provisioningDeviceClientRegistrationInfoClient = new ProvisioningDeviceClientRegistrationResult();\n+        Exception exception;\n+    }\n+\n+    static class ProvisioningDeviceClientRegistrationCallbackImpl implements ProvisioningDeviceClientRegistrationCallback\n+    {\n+        @Override\n+        public void run(ProvisioningDeviceClientRegistrationResult provisioningDeviceClientRegistrationResult, Exception exception, Object context)\n+        {\n+            if (context instanceof ProvisioningStatus)\n+            {\n+                ProvisioningStatus status = (ProvisioningStatus) context;\n+                status.provisioningDeviceClientRegistrationInfoClient = provisioningDeviceClientRegistrationResult;\n+                status.exception = exception;\n+            }\n+            else\n+            {\n+                System.out.println(\"Received unknown context\");\n+            }\n+        }\n+    }\n+\n+    private static class IotHubEventCallbackImpl implements IotHubEventCallback\n+    {\n+        @Override\n+        public void execute(IotHubStatusCode responseStatus, Object callbackContext)\n+        {\n+            System.out.println(\"Message received! Response status: \" + responseStatus);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception\n+    {\n+        System.out.println(\"Starting...\");\n+        System.out.println(\"Beginning setup.\");\n+        SecurityProviderSymmetricKey securityClientSymmetricKey = null;\n+        Scanner scanner = new Scanner(System.in);\n+        DeviceClient deviceClient = null;\n+\n+        // Since enrollment groups can be used to provision more than one device, the service requires you to derive the\n+        // symmetric key for your device to provision based on the symmetric key of the enrollment group, and the desired\n+        // device Id of the device you are provisioning\n+\n+        // For the sake of security, you shouldn't save keys into String variables as that places them in heap memory. For the sake\n+        // of simplicity within this sample, though, we will save it as a string. Typically this key would be loaded as byte[] so that\n+        // it can be removed from stack memory.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2548a0a035fa58deeb6c7a42db3724e15277df77"}, "originalPosition": 94}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0898b5f7c6277175da5b939e39b3555f84eb06d7", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/0898b5f7c6277175da5b939e39b3555f84eb06d7", "committedDate": "2020-11-18T20:36:00Z", "message": "fixup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d58fdc010a45f62b4e01f6f815699e3f4697c4a9", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/d58fdc010a45f62b4e01f6f815699e3f4697c4a9", "committedDate": "2020-11-18T21:32:32Z", "message": "fixup"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1506, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}