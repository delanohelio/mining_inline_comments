{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1NjczOTY2", "number": 987, "title": "refactor(iot-dev, e2e): Fix log statement, add throttle resiliency to tests", "bodyText": "Also add bulk add functionality to e2e tests to help with upcoming multiplexing tests since we don't have this feature in our registry manager yet, and may never add it", "createdAt": "2020-11-04T22:26:23Z", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/987", "merged": true, "mergeCommit": {"oid": "1423b557a52c853157fce765af71e62ac5d26763"}, "closed": true, "closedAt": "2020-11-05T01:12:19Z", "author": {"login": "timtay-microsoft"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZVX2eAH2gAyNTE1NjczOTY2OjRjZDVmNWU0NzBmN2EyYmZmMzdiNjFhNTAyZjNhMjY2MDk4MzEzY2M=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZW8izgFqTUyMzgyNTczOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4cd5f5e470f7a2bff37b61a502f3a266098313cc", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/4cd5f5e470f7a2bff37b61a502f3a266098313cc", "committedDate": "2020-11-04T22:19:24Z", "message": "refactor(iot-dev, e2e): Fix log statement, add throttle resiliancy to tests\n\nAlso add bulk add functionality to e2e tests to help with upcoming multiplexing tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzODEwODMw", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/987#pullrequestreview-523810830", "createdAt": "2020-11-04T23:29:26Z", "commit": {"oid": "4cd5f5e470f7a2bff37b61a502f3a266098313cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMzoyOToyNlrOHttZfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMzoyOToyNlrOHttZfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY5MTc3NQ==", "bodyText": "return gson.toJson(exportImportDevices) in a single line ?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/987#discussion_r517691775", "createdAt": "2020-11-04T23:29:26Z", "author": {"login": "vinagesh"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/ExportImportDevicesParser.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package tests.integration.com.microsoft.azure.sdk.iot.helpers;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.annotations.SerializedName;\n+import com.microsoft.azure.sdk.iot.deps.serializer.ExportImportDeviceParser;\n+\n+import java.util.ArrayList;\n+\n+public class ExportImportDevicesParser {\n+    private static final String DEVICES = \"devices\";\n+    @SerializedName(DEVICES)\n+    Iterable<ExportImportDeviceParser> exportImportDevices;\n+    private transient static Gson gson = new Gson();\n+\n+    /**\n+     * Converts this into json and returns it\n+     * @return the json representation of this\n+     */\n+    public String toJson()\n+    {\n+        String json = gson.toJson(exportImportDevices);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cd5f5e470f7a2bff37b61a502f3a266098313cc"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzODExMjc1", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/987#pullrequestreview-523811275", "createdAt": "2020-11-04T23:30:31Z", "commit": {"oid": "4cd5f5e470f7a2bff37b61a502f3a266098313cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMzozMDozMVrOHtta8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMzozMDozMVrOHtta8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY5MjE0Ng==", "bodyText": "minor: \"the json string used to build the ExportImportDevicesParser\" might sound better.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/987#discussion_r517692146", "createdAt": "2020-11-04T23:30:31Z", "author": {"login": "vinagesh"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/ExportImportDevicesParser.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package tests.integration.com.microsoft.azure.sdk.iot.helpers;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.annotations.SerializedName;\n+import com.microsoft.azure.sdk.iot.deps.serializer.ExportImportDeviceParser;\n+\n+import java.util.ArrayList;\n+\n+public class ExportImportDevicesParser {\n+    private static final String DEVICES = \"devices\";\n+    @SerializedName(DEVICES)\n+    Iterable<ExportImportDeviceParser> exportImportDevices;\n+    private transient static Gson gson = new Gson();\n+\n+    /**\n+     * Converts this into json and returns it\n+     * @return the json representation of this\n+     */\n+    public String toJson()\n+    {\n+        String json = gson.toJson(exportImportDevices);\n+        return json;\n+    }\n+\n+    /**\n+     * Empty constructor: Used only to keep GSON happy.\n+     */\n+    public ExportImportDevicesParser()\n+    {\n+        exportImportDevices = new ArrayList<>();\n+    }\n+\n+    /**\n+     * Constructor for an ExportImportDevicesParser that is built using the provided json\n+     * @param json the json string to build the ExportImportDevicesParser out of", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cd5f5e470f7a2bff37b61a502f3a266098313cc"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzODEyMDE1", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/987#pullrequestreview-523812015", "createdAt": "2020-11-04T23:32:16Z", "commit": {"oid": "4cd5f5e470f7a2bff37b61a502f3a266098313cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMzozMjoxN1rOHttdXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMzozMjoxN1rOHttdXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY5Mjc2NA==", "bodyText": "minor: This could be moved below line 51", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/987#discussion_r517692764", "createdAt": "2020-11-04T23:32:17Z", "author": {"login": "vinagesh"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/ExportImportDevicesParser.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package tests.integration.com.microsoft.azure.sdk.iot.helpers;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.annotations.SerializedName;\n+import com.microsoft.azure.sdk.iot.deps.serializer.ExportImportDeviceParser;\n+\n+import java.util.ArrayList;\n+\n+public class ExportImportDevicesParser {\n+    private static final String DEVICES = \"devices\";\n+    @SerializedName(DEVICES)\n+    Iterable<ExportImportDeviceParser> exportImportDevices;\n+    private transient static Gson gson = new Gson();\n+\n+    /**\n+     * Converts this into json and returns it\n+     * @return the json representation of this\n+     */\n+    public String toJson()\n+    {\n+        String json = gson.toJson(exportImportDevices);\n+        return json;\n+    }\n+\n+    /**\n+     * Empty constructor: Used only to keep GSON happy.\n+     */\n+    public ExportImportDevicesParser()\n+    {\n+        exportImportDevices = new ArrayList<>();\n+    }\n+\n+    /**\n+     * Constructor for an ExportImportDevicesParser that is built using the provided json\n+     * @param json the json string to build the ExportImportDevicesParser out of\n+     */\n+    public ExportImportDevicesParser(String json)\n+    {\n+        if (json == null || json.isEmpty())\n+        {\n+            throw new IllegalArgumentException(\"The provided json cannot be null or empty\");\n+        }\n+\n+        ExportImportDevicesParser exportImportDevicesParser = null;\n+        try\n+        {\n+            exportImportDevicesParser = gson.fromJson(json, ExportImportDevicesParser.class);\n+        }\n+        catch (JsonSyntaxException e)\n+        {\n+            throw new IllegalArgumentException(\"The provided json could not be parsed\");\n+        }\n+\n+        this.exportImportDevices = exportImportDevicesParser.getExportImportDevices();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cd5f5e470f7a2bff37b61a502f3a266098313cc"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzODEyNjEx", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/987#pullrequestreview-523812611", "createdAt": "2020-11-04T23:33:50Z", "commit": {"oid": "4cd5f5e470f7a2bff37b61a502f3a266098313cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMzozMzo1MVrOHttfTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMzozMzo1MVrOHttfTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY5MzI2MA==", "bodyText": "Does final mean we can only set this value once in the constructor? Trying to understand how java works.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/987#discussion_r517693260", "createdAt": "2020-11-04T23:33:51Z", "author": {"login": "vinagesh"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/ExportImportDevicesParser.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package tests.integration.com.microsoft.azure.sdk.iot.helpers;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.annotations.SerializedName;\n+import com.microsoft.azure.sdk.iot.deps.serializer.ExportImportDeviceParser;\n+\n+import java.util.ArrayList;\n+\n+public class ExportImportDevicesParser {\n+    private static final String DEVICES = \"devices\";\n+    @SerializedName(DEVICES)\n+    Iterable<ExportImportDeviceParser> exportImportDevices;\n+    private transient static Gson gson = new Gson();\n+\n+    /**\n+     * Converts this into json and returns it\n+     * @return the json representation of this\n+     */\n+    public String toJson()\n+    {\n+        String json = gson.toJson(exportImportDevices);\n+        return json;\n+    }\n+\n+    /**\n+     * Empty constructor: Used only to keep GSON happy.\n+     */\n+    public ExportImportDevicesParser()\n+    {\n+        exportImportDevices = new ArrayList<>();\n+    }\n+\n+    /**\n+     * Constructor for an ExportImportDevicesParser that is built using the provided json\n+     * @param json the json string to build the ExportImportDevicesParser out of\n+     */\n+    public ExportImportDevicesParser(String json)\n+    {\n+        if (json == null || json.isEmpty())\n+        {\n+            throw new IllegalArgumentException(\"The provided json cannot be null or empty\");\n+        }\n+\n+        ExportImportDevicesParser exportImportDevicesParser = null;\n+        try\n+        {\n+            exportImportDevicesParser = gson.fromJson(json, ExportImportDevicesParser.class);\n+        }\n+        catch (JsonSyntaxException e)\n+        {\n+            throw new IllegalArgumentException(\"The provided json could not be parsed\");\n+        }\n+\n+        this.exportImportDevices = exportImportDevicesParser.getExportImportDevices();\n+    }\n+\n+    public final Iterable<ExportImportDeviceParser> getExportImportDevices() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cd5f5e470f7a2bff37b61a502f3a266098313cc"}, "originalPosition": 61}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c9a791a5d591dda87371babc6a6982093a7c14f", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/9c9a791a5d591dda87371babc6a6982093a7c14f", "committedDate": "2020-11-04T23:38:31Z", "message": "feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzODE2MTkz", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/987#pullrequestreview-523816193", "createdAt": "2020-11-04T23:43:08Z", "commit": {"oid": "4cd5f5e470f7a2bff37b61a502f3a266098313cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMzo0MzowOFrOHttsRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMzo0MzowOFrOHttsRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY5NjU4MQ==", "bodyText": "nit: create constant for this", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/987#discussion_r517696581", "createdAt": "2020-11-04T23:43:08Z", "author": {"login": "vinagesh"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/Tools.java", "diffHunk": "@@ -139,6 +153,98 @@ public static Device addDeviceWithRetry(RegistryManager registryManager, Device\n         return ret;\n     }\n \n+    public static void addDevicesWithRetry(List<Device> devices, String connectionString) throws IotHubException, IOException, InterruptedException\n+    {\n+        // IoT hub only allows for bulk adding of devices at up to 100 per request, so take the provided devices iterable\n+        // and break it into 100 devices or smaller chunks\n+        List<Device> subIterable = new ArrayList<>();\n+        List<Device> devicesClone = new ArrayList<>(); //create a clone of the source list so elements can be removed from it instead\n+        devicesClone.addAll(devices);\n+        while (devicesClone.size() > 0)\n+        {\n+            Device device = devicesClone.remove(0);\n+            subIterable.add(device);\n+\n+            // wait until sub list has the Iot Hub limit of 100 devices to add, or until there will be no more devices to add\n+            if (subIterable.size() > 99 || devicesClone.size() <= 0)\n+            {\n+                long startTime = System.currentTimeMillis();\n+                while (System.currentTimeMillis() - startTime < RETRY_TIMEOUT_ON_NETWORK_FAILURE_MILLISECONDS)\n+                {\n+                    try\n+                    {\n+                        addDevices(subIterable, connectionString);\n+                        break;\n+                    }\n+                    catch (UnknownHostException | SocketException | SocketTimeoutException e)\n+                    {\n+                        log.warn(\"Failed to add devices\");\n+                        e.printStackTrace();\n+                        Thread.sleep(WAIT_FOR_RETRY);\n+                        if (System.currentTimeMillis() - startTime >= RETRY_TIMEOUT_ON_NETWORK_FAILURE_MILLISECONDS)\n+                        {\n+                            throw e;\n+                        }\n+                    }\n+\n+                }\n+\n+                // clear the sub list so it can be filled back up again with the next devices to add\n+                subIterable.clear();\n+            }\n+        }\n+    }\n+\n+    // This call mimics what should be a registry manager API for adding devices in bulk. Can be removed once we add support in our\n+    // registry manager for this\n+    public static void addDevices(Iterable<Device> devices, String connectionString) throws IOException, IotHubException {\n+        if (devices == null)\n+        {\n+            throw new IllegalArgumentException(\"devices cannot be null\");\n+        }\n+\n+        IotHubConnectionString iotHubConnectionString = IotHubConnectionString.createConnectionString(connectionString);\n+        URL url = getBulkDeviceAddUrl(iotHubConnectionString);\n+\n+        List<ExportImportDeviceParser> parsers = new ArrayList<>();\n+        for (Device device : devices)\n+        {\n+            ExportImportDeviceParser exportImportDevice = new ExportImportDeviceParser();\n+            exportImportDevice.setId(device.getDeviceId());\n+            AuthenticationParser authenticationParser = new AuthenticationParser();\n+            authenticationParser.setSymmetricKey(new SymmetricKeyParser(device.getSymmetricKey().getPrimaryKey(), device.getSymmetricKey().getSecondaryKey()));\n+            exportImportDevice.setAuthentication(authenticationParser);\n+            exportImportDevice.setImportMode(\"create\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cd5f5e470f7a2bff37b61a502f3a266098313cc"}, "originalPosition": 99}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb1ea40c4035f3fe5db1388b119914e446be0dc7", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/bb1ea40c4035f3fe5db1388b119914e446be0dc7", "committedDate": "2020-11-04T23:46:44Z", "message": "feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzODE4NDYx", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/987#pullrequestreview-523818461", "createdAt": "2020-11-04T23:49:10Z", "commit": {"oid": "4cd5f5e470f7a2bff37b61a502f3a266098313cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMzo0OToxMFrOHtt0Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMzo0OToxMFrOHtt0Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY5ODU5OA==", "bodyText": "Should this be if or while? Are we not adding only one to the list or am I missing something?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/987#discussion_r517698598", "createdAt": "2020-11-04T23:49:10Z", "author": {"login": "vinagesh"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/Tools.java", "diffHunk": "@@ -139,6 +153,98 @@ public static Device addDeviceWithRetry(RegistryManager registryManager, Device\n         return ret;\n     }\n \n+    public static void addDevicesWithRetry(List<Device> devices, String connectionString) throws IotHubException, IOException, InterruptedException\n+    {\n+        // IoT hub only allows for bulk adding of devices at up to 100 per request, so take the provided devices iterable\n+        // and break it into 100 devices or smaller chunks\n+        List<Device> subIterable = new ArrayList<>();\n+        List<Device> devicesClone = new ArrayList<>(); //create a clone of the source list so elements can be removed from it instead\n+        devicesClone.addAll(devices);\n+        while (devicesClone.size() > 0)\n+        {\n+            Device device = devicesClone.remove(0);\n+            subIterable.add(device);\n+\n+            // wait until sub list has the Iot Hub limit of 100 devices to add, or until there will be no more devices to add\n+            if (subIterable.size() > 99 || devicesClone.size() <= 0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cd5f5e470f7a2bff37b61a502f3a266098313cc"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzODIzOTI3", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/987#pullrequestreview-523823927", "createdAt": "2020-11-05T00:04:03Z", "commit": {"oid": "bb1ea40c4035f3fe5db1388b119914e446be0dc7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMDowNDowM1rOHtuGqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMDowNDowM1rOHtuGqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcwMzMzOA==", "bodyText": "Why is this declared outside of the try/catch?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/987#discussion_r517703338", "createdAt": "2020-11-05T00:04:03Z", "author": {"login": "drwill-ms"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/ExportImportDevicesParser.java", "diffHunk": "@@ -0,0 +1,66 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package tests.integration.com.microsoft.azure.sdk.iot.helpers;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.annotations.SerializedName;\n+import com.microsoft.azure.sdk.iot.deps.serializer.ExportImportDeviceParser;\n+\n+import java.util.ArrayList;\n+\n+public class ExportImportDevicesParser {\n+    private static final String DEVICES = \"devices\";\n+    @SerializedName(DEVICES)\n+    Iterable<ExportImportDeviceParser> exportImportDevices;\n+    private transient static Gson gson = new Gson();\n+\n+    /**\n+     * Converts this into json and returns it\n+     * @return the json representation of this\n+     */\n+    public String toJson()\n+    {\n+        return gson.toJson(exportImportDevices);\n+    }\n+\n+    /**\n+     * Empty constructor: Used only to keep GSON happy.\n+     */\n+    public ExportImportDevicesParser()\n+    {\n+        exportImportDevices = new ArrayList<>();\n+    }\n+\n+    /**\n+     * Constructor for an ExportImportDevicesParser that is built using the provided json\n+     * @param json the json string used to build the ExportImportDevicesParser\n+     */\n+    public ExportImportDevicesParser(String json)\n+    {\n+        if (json == null || json.isEmpty())\n+        {\n+            throw new IllegalArgumentException(\"The provided json cannot be null or empty\");\n+        }\n+\n+        ExportImportDevicesParser exportImportDevicesParser;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb1ea40c4035f3fe5db1388b119914e446be0dc7"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "632f6b004635bcc32c1b815158e2b65d36ea78eb", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/632f6b004635bcc32c1b815158e2b65d36ea78eb", "committedDate": "2020-11-05T00:04:59Z", "message": "feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzODI0NjI5", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/987#pullrequestreview-523824629", "createdAt": "2020-11-05T00:06:08Z", "commit": {"oid": "bb1ea40c4035f3fe5db1388b119914e446be0dc7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMDowNjowOFrOHtuJPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMDowNjowOFrOHtuJPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcwMzk5Ng==", "bodyText": "comparison seems numerically backwards (checking the large number before the small number), but maybe that's just me", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/987#discussion_r517703996", "createdAt": "2020-11-05T00:06:08Z", "author": {"login": "drwill-ms"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/Tools.java", "diffHunk": "@@ -139,6 +153,99 @@ public static Device addDeviceWithRetry(RegistryManager registryManager, Device\n         return ret;\n     }\n \n+    public static void addDevicesWithRetry(List<Device> devices, String connectionString) throws IotHubException, IOException, InterruptedException\n+    {\n+        // IoT hub only allows for bulk adding of devices at up to 100 per request, so take the provided devices iterable\n+        // and break it into 100 devices or smaller chunks\n+        List<Device> subIterable = new ArrayList<>();\n+        List<Device> devicesClone = new ArrayList<>(); //create a clone of the source list so elements can be removed from it instead\n+        devicesClone.addAll(devices);\n+        while (devicesClone.size() > 0)\n+        {\n+            Device device = devicesClone.remove(0);\n+            subIterable.add(device);\n+\n+            // wait until sub list has the Iot Hub limit of 100 devices to add, or until there will be no more devices to add\n+            if (subIterable.size() > 99 || devicesClone.size() <= 0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb1ea40c4035f3fe5db1388b119914e446be0dc7"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzODI0ODkw", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/987#pullrequestreview-523824890", "createdAt": "2020-11-05T00:06:57Z", "commit": {"oid": "bb1ea40c4035f3fe5db1388b119914e446be0dc7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMDowNjo1N1rOHtuKCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMDowNjo1N1rOHtuKCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcwNDIwMQ==", "bodyText": "Well that is something interesting that Java can do", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/987#discussion_r517704201", "createdAt": "2020-11-05T00:06:57Z", "author": {"login": "drwill-ms"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/Tools.java", "diffHunk": "@@ -139,6 +153,99 @@ public static Device addDeviceWithRetry(RegistryManager registryManager, Device\n         return ret;\n     }\n \n+    public static void addDevicesWithRetry(List<Device> devices, String connectionString) throws IotHubException, IOException, InterruptedException\n+    {\n+        // IoT hub only allows for bulk adding of devices at up to 100 per request, so take the provided devices iterable\n+        // and break it into 100 devices or smaller chunks\n+        List<Device> subIterable = new ArrayList<>();\n+        List<Device> devicesClone = new ArrayList<>(); //create a clone of the source list so elements can be removed from it instead\n+        devicesClone.addAll(devices);\n+        while (devicesClone.size() > 0)\n+        {\n+            Device device = devicesClone.remove(0);\n+            subIterable.add(device);\n+\n+            // wait until sub list has the Iot Hub limit of 100 devices to add, or until there will be no more devices to add\n+            if (subIterable.size() > 99 || devicesClone.size() <= 0)\n+            {\n+                long startTime = System.currentTimeMillis();\n+                while (System.currentTimeMillis() - startTime < RETRY_TIMEOUT_ON_NETWORK_FAILURE_MILLISECONDS)\n+                {\n+                    try\n+                    {\n+                        addDevices(subIterable, connectionString);\n+                        break;\n+                    }\n+                    catch (UnknownHostException | SocketException | SocketTimeoutException e)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb1ea40c4035f3fe5db1388b119914e446be0dc7"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzODI1MjYw", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/987#pullrequestreview-523825260", "createdAt": "2020-11-05T00:08:06Z", "commit": {"oid": "bb1ea40c4035f3fe5db1388b119914e446be0dc7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMDowODowN1rOHtuLOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMDowODowN1rOHtuLOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcwNDUwNA==", "bodyText": "I only see 2 instances of {}, but 3 parameters. Is the exception parameter a special one?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/987#discussion_r517704504", "createdAt": "2020-11-05T00:08:07Z", "author": {"login": "drwill-ms"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/rules/ThrottleResistantTestRule.java", "diffHunk": "@@ -49,6 +50,19 @@ public void evaluate() throws Throwable {\n                     log.warn(\"Thottling detected in test {}, waiting for {} milliseconds and then re-running the test\", description.getMethodName(), THROTTLING_RETRY_DELAY_MILLISECONDS, e);\n                     Thread.sleep(THROTTLING_RETRY_DELAY_MILLISECONDS);\n                 }\n+                catch (Exception e)\n+                {\n+                    if (e.getMessage() != null && e.getMessage().toLowerCase().contains(CONNECTION_REFUSED))\n+                    {\n+                        log.warn(\"Thottling detected in test {}, waiting for {} milliseconds and then re-running the test\", description.getMethodName(), THROTTLING_RETRY_DELAY_MILLISECONDS, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb1ea40c4035f3fe5db1388b119914e446be0dc7"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzODI1NzM5", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/987#pullrequestreview-523825739", "createdAt": "2020-11-05T00:09:23Z", "commit": {"oid": "632f6b004635bcc32c1b815158e2b65d36ea78eb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1612, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}