{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0NjU5MDk5", "number": 1019, "title": "fix(iot-dev): Fix issue where unregistering a multiplexed device that isn't registered loops infinitely", "bodyText": "This loop happens in the AMQP worker thread, so users wouldn't notice this, but it is still a bug.", "createdAt": "2020-12-08T19:01:15Z", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1019", "merged": true, "mergeCommit": {"oid": "097d8a50a8f8ae29010f5e3b5bd5dc29712188f5"}, "closed": true, "closedAt": "2020-12-08T22:03:54Z", "author": {"login": "timtay-microsoft"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdkO5tkgH2gAyNTM0NjU5MDk5OjNkOWUyY2ViYjEzODQ4ZDMwNjYxMjM4OGY2OTI3MDk3OWQ4NmVjNWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkPcD0AH2gAyNTM0NjU5MDk5OjU2M2FlMWNkNjBjNzYwYmE3MTZiM2Q2MDQ2YTYzYjM1NzU3YzdmOTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3d9e2cebb13848d306612388f69270979d86ec5a", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/3d9e2cebb13848d306612388f69270979d86ec5a", "committedDate": "2020-12-08T19:00:13Z", "message": "fix(iot-dev): Fix issue where unregistering a multiplexed device that isn't registered loops infinitely"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NTQxOTYy", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1019#pullrequestreview-547541962", "createdAt": "2020-12-08T19:03:21Z", "commit": {"oid": "3d9e2cebb13848d306612388f69270979d86ec5a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTowMzoyMVrOIBxdqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTowMzoyMVrOIBxdqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcyOTg5Ng==", "bodyText": "The issue here was that this code forgot to add this config to the set of \"successfully\" unregistered configs so that the end of the function could remove it from the queue of configs to unregister. It can't be removed at this point since that would be a concurrent modification exception since this function loops over that queue.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1019#discussion_r538729896", "createdAt": "2020-12-08T19:03:21Z", "author": {"login": "timtay-microsoft"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/amqps/AmqpsIotHubConnection.java", "diffHunk": "@@ -952,41 +952,41 @@ private void checkForNewlyUnregisteredMultiplexedClientsToStop()\n             {\n                 log.trace(\"Removing session handler for device {}\", amqpsSessionHandler.getDeviceId());\n                 this.sessionHandlers.remove(amqpsSessionHandler);\n-            }\n-            else\n-            {\n-                log.warn(\"Attempted to remove device session for device {} from multiplexed connection, but device was not currently registered.\", configToUnregister.getDeviceId());\n-                return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d9e2cebb13848d306612388f69270979d86ec5a"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3e5e9b76b0a89a521e484c0c7b56066b2a4876e", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/a3e5e9b76b0a89a521e484c0c7b56066b2a4876e", "committedDate": "2020-12-08T19:12:23Z", "message": "fixup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NTU0MjYz", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1019#pullrequestreview-547554263", "createdAt": "2020-12-08T19:19:42Z", "commit": {"oid": "a3e5e9b76b0a89a521e484c0c7b56066b2a4876e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOToxOTo0MlrOIByHIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOToxOTo0MlrOIByHIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc0MDUxMg==", "bodyText": "this line and the one after happen regardless what the code flow is. Maybe move outside the if/else.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1019#discussion_r538740512", "createdAt": "2020-12-08T19:19:42Z", "author": {"login": "barustum"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/amqps/AmqpsIotHubConnection.java", "diffHunk": "@@ -952,41 +952,42 @@ private void checkForNewlyUnregisteredMultiplexedClientsToStop()\n             {\n                 log.trace(\"Removing session handler for device {}\", amqpsSessionHandler.getDeviceId());\n                 this.sessionHandlers.remove(amqpsSessionHandler);\n-            }\n-            else\n-            {\n-                log.warn(\"Attempted to remove device session for device {} from multiplexed connection, but device was not currently registered.\", configToUnregister.getDeviceId());\n-                return;\n-            }\n \n-            // Need to find the sas token renewal handler that is tied to this device\n-            AmqpsSasTokenRenewalHandler sasTokenRenewalHandlerToRemove = null;\n-            for (AmqpsSasTokenRenewalHandler existingSasTokenRenewalHandler : this.sasTokenRenewalHandlers)\n-            {\n-                if (existingSasTokenRenewalHandler.amqpsSessionHandler.getDeviceId().equals(configToUnregister.getDeviceId()))\n+                // Need to find the sas token renewal handler that is tied to this device\n+                AmqpsSasTokenRenewalHandler sasTokenRenewalHandlerToRemove = null;\n+                for (AmqpsSasTokenRenewalHandler existingSasTokenRenewalHandler : this.sasTokenRenewalHandlers)\n                 {\n-                    sasTokenRenewalHandlerToRemove = existingSasTokenRenewalHandler;\n+                    if (existingSasTokenRenewalHandler.amqpsSessionHandler.getDeviceId().equals(configToUnregister.getDeviceId()))\n+                    {\n+                        sasTokenRenewalHandlerToRemove = existingSasTokenRenewalHandler;\n \n-                    // Stop the sas token renewal handler from sending any more authentication messages on behalf of this device\n-                    log.trace(\"Closing sas token renewal handler for device {}\", configToUnregister.getDeviceId());\n-                    sasTokenRenewalHandlerToRemove.close();\n-                    break;\n+                        // Stop the sas token renewal handler from sending any more authentication messages on behalf of this device\n+                        log.trace(\"Closing sas token renewal handler for device {}\", configToUnregister.getDeviceId());\n+                        sasTokenRenewalHandlerToRemove.close();\n+                        break;\n+                    }\n                 }\n-            }\n \n-            if (sasTokenRenewalHandlerToRemove != null)\n-            {\n-                this.sasTokenRenewalHandlers.remove(sasTokenRenewalHandlerToRemove);\n-            }\n+                if (sasTokenRenewalHandlerToRemove != null)\n+                {\n+                    this.sasTokenRenewalHandlers.remove(sasTokenRenewalHandlerToRemove);\n+                }\n \n-            this.reconnectionsScheduled.remove(configToUnregister.getDeviceId());\n+                this.reconnectionsScheduled.remove(configToUnregister.getDeviceId());\n \n-            log.debug(\"Closing device session for multiplexed device {}\", configToUnregister.getDeviceId());\n-            amqpsSessionHandler.closeSession();\n+                log.debug(\"Closing device session for multiplexed device {}\", configToUnregister.getDeviceId());\n+                amqpsSessionHandler.closeSession();\n \n-            configsUnregisteredSuccessfully.add(configToUnregister);\n+                configsUnregisteredSuccessfully.add(configToUnregister);\n \n-            configToUnregister = configsToUnregisterIterator.hasNext() ? configsToUnregisterIterator.next() : null;\n+                configToUnregister = configsToUnregisterIterator.hasNext() ? configsToUnregisterIterator.next() : null;\n+            }\n+            else\n+            {\n+                log.warn(\"Attempted to remove device session for device {} from multiplexed connection, but device was not currently registered.\", configToUnregister.getDeviceId());\n+                configsUnregisteredSuccessfully.add(configToUnregister);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3e5e9b76b0a89a521e484c0c7b56066b2a4876e"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2e1d53e1635c0ddfb4ce950450ab76998070a32", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/e2e1d53e1635c0ddfb4ce950450ab76998070a32", "committedDate": "2020-12-08T19:24:44Z", "message": "fixup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NTYwOTk5", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1019#pullrequestreview-547560999", "createdAt": "2020-12-08T19:28:59Z", "commit": {"oid": "e2e1d53e1635c0ddfb4ce950450ab76998070a32"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOToyODo1OVrOIByerQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOToyODo1OVrOIByerQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc0NjU0MQ==", "bodyText": "extra space before closing brace", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1019#discussion_r538746541", "createdAt": "2020-12-08T19:28:59Z", "author": {"login": "barustum"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/amqps/AmqpsIotHubConnection.java", "diffHunk": "@@ -952,41 +952,40 @@ private void checkForNewlyUnregisteredMultiplexedClientsToStop()\n             {\n                 log.trace(\"Removing session handler for device {}\", amqpsSessionHandler.getDeviceId());\n                 this.sessionHandlers.remove(amqpsSessionHandler);\n-            }\n-            else\n-            {\n-                log.warn(\"Attempted to remove device session for device {} from multiplexed connection, but device was not currently registered.\", configToUnregister.getDeviceId());\n-                return;\n-            }\n \n-            // Need to find the sas token renewal handler that is tied to this device\n-            AmqpsSasTokenRenewalHandler sasTokenRenewalHandlerToRemove = null;\n-            for (AmqpsSasTokenRenewalHandler existingSasTokenRenewalHandler : this.sasTokenRenewalHandlers)\n-            {\n-                if (existingSasTokenRenewalHandler.amqpsSessionHandler.getDeviceId().equals(configToUnregister.getDeviceId()))\n+                // Need to find the sas token renewal handler that is tied to this device\n+                AmqpsSasTokenRenewalHandler sasTokenRenewalHandlerToRemove = null;\n+                for (AmqpsSasTokenRenewalHandler existingSasTokenRenewalHandler : this.sasTokenRenewalHandlers)\n                 {\n-                    sasTokenRenewalHandlerToRemove = existingSasTokenRenewalHandler;\n+                    if (existingSasTokenRenewalHandler.amqpsSessionHandler.getDeviceId().equals(configToUnregister.getDeviceId()))\n+                    {\n+                        sasTokenRenewalHandlerToRemove = existingSasTokenRenewalHandler;\n \n-                    // Stop the sas token renewal handler from sending any more authentication messages on behalf of this device\n-                    log.trace(\"Closing sas token renewal handler for device {}\", configToUnregister.getDeviceId());\n-                    sasTokenRenewalHandlerToRemove.close();\n-                    break;\n+                        // Stop the sas token renewal handler from sending any more authentication messages on behalf of this device\n+                        log.trace(\"Closing sas token renewal handler for device {}\", configToUnregister.getDeviceId());\n+                        sasTokenRenewalHandlerToRemove.close();\n+                        break;\n+                    }\n                 }\n-            }\n \n-            if (sasTokenRenewalHandlerToRemove != null)\n-            {\n-                this.sasTokenRenewalHandlers.remove(sasTokenRenewalHandlerToRemove);\n-            }\n+                if (sasTokenRenewalHandlerToRemove != null)\n+                {\n+                    this.sasTokenRenewalHandlers.remove(sasTokenRenewalHandlerToRemove);\n+                }\n \n-            this.reconnectionsScheduled.remove(configToUnregister.getDeviceId());\n+                this.reconnectionsScheduled.remove(configToUnregister.getDeviceId());\n \n-            log.debug(\"Closing device session for multiplexed device {}\", configToUnregister.getDeviceId());\n-            amqpsSessionHandler.closeSession();\n+                log.debug(\"Closing device session for multiplexed device {}\", configToUnregister.getDeviceId());\n+                amqpsSessionHandler.closeSession();\n+            }\n+            else\n+            {\n+                log.warn(\"Attempted to remove device session for device {} from multiplexed connection, but device was not currently registered.\", configToUnregister.getDeviceId());\n+            }\n \n             configsUnregisteredSuccessfully.add(configToUnregister);\n-\n             configToUnregister = configsToUnregisterIterator.hasNext() ? configsToUnregisterIterator.next() : null;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2e1d53e1635c0ddfb4ce950450ab76998070a32"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NTYxMTMw", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1019#pullrequestreview-547561130", "createdAt": "2020-12-08T19:29:09Z", "commit": {"oid": "e2e1d53e1635c0ddfb4ce950450ab76998070a32"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NTYzMTc3", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1019#pullrequestreview-547563177", "createdAt": "2020-12-08T19:31:55Z", "commit": {"oid": "e2e1d53e1635c0ddfb4ce950450ab76998070a32"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTozMTo1NlrOIBymFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTozMTo1NlrOIBymFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc0ODQzNg==", "bodyText": "consider handling the error/smaller case first, so both blocks appear closer to the if condition. Otherwise, by the time a reader gets down here they've lost the context of what else means.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1019#discussion_r538748436", "createdAt": "2020-12-08T19:31:56Z", "author": {"login": "drwill-ms"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/amqps/AmqpsIotHubConnection.java", "diffHunk": "@@ -952,41 +952,40 @@ private void checkForNewlyUnregisteredMultiplexedClientsToStop()\n             {\n                 log.trace(\"Removing session handler for device {}\", amqpsSessionHandler.getDeviceId());\n                 this.sessionHandlers.remove(amqpsSessionHandler);\n-            }\n-            else\n-            {\n-                log.warn(\"Attempted to remove device session for device {} from multiplexed connection, but device was not currently registered.\", configToUnregister.getDeviceId());\n-                return;\n-            }\n \n-            // Need to find the sas token renewal handler that is tied to this device\n-            AmqpsSasTokenRenewalHandler sasTokenRenewalHandlerToRemove = null;\n-            for (AmqpsSasTokenRenewalHandler existingSasTokenRenewalHandler : this.sasTokenRenewalHandlers)\n-            {\n-                if (existingSasTokenRenewalHandler.amqpsSessionHandler.getDeviceId().equals(configToUnregister.getDeviceId()))\n+                // Need to find the sas token renewal handler that is tied to this device\n+                AmqpsSasTokenRenewalHandler sasTokenRenewalHandlerToRemove = null;\n+                for (AmqpsSasTokenRenewalHandler existingSasTokenRenewalHandler : this.sasTokenRenewalHandlers)\n                 {\n-                    sasTokenRenewalHandlerToRemove = existingSasTokenRenewalHandler;\n+                    if (existingSasTokenRenewalHandler.amqpsSessionHandler.getDeviceId().equals(configToUnregister.getDeviceId()))\n+                    {\n+                        sasTokenRenewalHandlerToRemove = existingSasTokenRenewalHandler;\n \n-                    // Stop the sas token renewal handler from sending any more authentication messages on behalf of this device\n-                    log.trace(\"Closing sas token renewal handler for device {}\", configToUnregister.getDeviceId());\n-                    sasTokenRenewalHandlerToRemove.close();\n-                    break;\n+                        // Stop the sas token renewal handler from sending any more authentication messages on behalf of this device\n+                        log.trace(\"Closing sas token renewal handler for device {}\", configToUnregister.getDeviceId());\n+                        sasTokenRenewalHandlerToRemove.close();\n+                        break;\n+                    }\n                 }\n-            }\n \n-            if (sasTokenRenewalHandlerToRemove != null)\n-            {\n-                this.sasTokenRenewalHandlers.remove(sasTokenRenewalHandlerToRemove);\n-            }\n+                if (sasTokenRenewalHandlerToRemove != null)\n+                {\n+                    this.sasTokenRenewalHandlers.remove(sasTokenRenewalHandlerToRemove);\n+                }\n \n-            this.reconnectionsScheduled.remove(configToUnregister.getDeviceId());\n+                this.reconnectionsScheduled.remove(configToUnregister.getDeviceId());\n \n-            log.debug(\"Closing device session for multiplexed device {}\", configToUnregister.getDeviceId());\n-            amqpsSessionHandler.closeSession();\n+                log.debug(\"Closing device session for multiplexed device {}\", configToUnregister.getDeviceId());\n+                amqpsSessionHandler.closeSession();\n+            }\n+            else", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2e1d53e1635c0ddfb4ce950450ab76998070a32"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NTYzNzM1", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1019#pullrequestreview-547563735", "createdAt": "2020-12-08T19:32:39Z", "commit": {"oid": "e2e1d53e1635c0ddfb4ce950450ab76998070a32"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "563ae1cd60c760ba716b3d6046a63b35757c7f97", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/563ae1cd60c760ba716b3d6046a63b35757c7f97", "committedDate": "2020-12-08T19:37:44Z", "message": "fixup"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1523, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}