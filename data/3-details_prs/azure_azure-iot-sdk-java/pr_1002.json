{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzNTk0MzI5", "number": 1002, "title": "feat(iot-dev): Add client constructors that take sas token provider interface", "bodyText": "Currently, users who have symmetric key authenticated devices have to provide the whole symmetric key to our SDK. Some customers have asked for the ability to just provide the SAS tokens instead so that they can store the symmetric key somewhere else, which is a reasonable ask. This PR add support for that scenario.", "createdAt": "2020-11-19T00:25:05Z", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002", "merged": true, "mergeCommit": {"oid": "62774e785579251b8ce442fcc88e8cc955a9280a"}, "closed": true, "closedAt": "2020-12-01T21:14:17Z", "author": {"login": "timtay-microsoft"}, "timelineItems": {"totalCount": 39, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdd3kSNgBqjQwMTMzODgyMTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdh-P6jAH2gAyNTIzNTk0MzI5OmY0YzIzM2NkMmZhYWUxMWYwOWUyNTViNDIyNGQwYzU3MmM4NDc5ZmY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f56072ce263cfed9a2441e28ec267d55e22a22ac", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/f56072ce263cfed9a2441e28ec267d55e22a22ac", "committedDate": "2020-11-19T00:23:38Z", "message": "feat(iot-dev): Add client constructors that take sas token provider interface"}, "afterCommit": {"oid": "c5b631848ff8c9555404e2a58761288c0ad0f4fe", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/c5b631848ff8c9555404e2a58761288c0ad0f4fe", "committedDate": "2020-11-19T00:25:19Z", "message": "feat(iot-dev): Add client constructors that take sas token provider interface"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c5b631848ff8c9555404e2a58761288c0ad0f4fe", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/c5b631848ff8c9555404e2a58761288c0ad0f4fe", "committedDate": "2020-11-19T00:25:19Z", "message": "feat(iot-dev): Add client constructors that take sas token provider interface"}, "afterCommit": {"oid": "bb3b3c64a8ca03121a9420a5c2eb9dfcc706f0ec", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/bb3b3c64a8ca03121a9420a5c2eb9dfcc706f0ec", "committedDate": "2020-11-19T18:50:08Z", "message": "feat(iot-dev): Add client constructors that take sas token provider interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80c28ecc041f85599b338661eff8c1f1fc81abb5", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/80c28ecc041f85599b338661eff8c1f1fc81abb5", "committedDate": "2020-11-19T18:50:47Z", "message": "feat(iot-dev): Add client constructors that take sas token provider interface"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bb3b3c64a8ca03121a9420a5c2eb9dfcc706f0ec", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/bb3b3c64a8ca03121a9420a5c2eb9dfcc706f0ec", "committedDate": "2020-11-19T18:50:08Z", "message": "feat(iot-dev): Add client constructors that take sas token provider interface"}, "afterCommit": {"oid": "80c28ecc041f85599b338661eff8c1f1fc81abb5", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/80c28ecc041f85599b338661eff8c1f1fc81abb5", "committedDate": "2020-11-19T18:50:47Z", "message": "feat(iot-dev): Add client constructors that take sas token provider interface"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0NzYxMDU2", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#pullrequestreview-534761056", "createdAt": "2020-11-19T19:04:05Z", "commit": {"oid": "80c28ecc041f85599b338661eff8c1f1fc81abb5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOTowNDowNVrOH2tXjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOTowNDowNVrOH2tXjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEyODQ2MA==", "bodyText": "Is AMQPS a thing? or should this be AMQP?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#discussion_r527128460", "createdAt": "2020-11-19T19:04:05Z", "author": {"login": "barustum"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/SasTokenProvider.java", "diffHunk": "@@ -0,0 +1,34 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.sdk.iot.device;\n+\n+/**\n+ * Interface for allowing users to control SAS token generation. To see an example of how SAS tokens can be generated\n+ * from device connection strings, see {@link com.microsoft.azure.sdk.iot.device.auth.IotHubSasToken}.\n+ * @see <a href=\"https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-security#example\">This document</a> for more details on sas tokens.\n+ */\n+public interface SasTokenProvider\n+{\n+    /**\n+     * Returns a SAS token to be used for authentication.\n+     * <p>\n+     * This function will be called each time the client library needs a SAS token. This will follow different patterns\n+     * based on which protocol your client object is using.\n+     * <p>\n+     * For HTTPS, this function will be called for each HTTPS request made (for instance, once per telemetry send), and does not need\n+     * to be a unique token each time. Because of that, users may simply cache and return the same SAS token repeatedly here.\n+     * Alternatively, users can generate very short-lived SAS tokens since they will only need to be valid for a relative short period of time.\n+     * The user of this API is responsible for tracking when to renew the SAS token based on how long the previous token was valid for.\n+     * <p>\n+     * For AMQPS/AMQPS_WS, this function will be called once when first opening the connection, and then will be called again", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c28ecc041f85599b338661eff8c1f1fc81abb5"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0NzYxNzk5", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#pullrequestreview-534761799", "createdAt": "2020-11-19T19:05:06Z", "commit": {"oid": "80c28ecc041f85599b338661eff8c1f1fc81abb5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOTowNTowNlrOH2tZ7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOTowNTowNlrOH2tZ7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEyOTA2OA==", "bodyText": "How come no tricks? `clientOptions?.sslContext\n:(", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#discussion_r527129068", "createdAt": "2020-11-19T19:05:06Z", "author": {"login": "drwill-ms"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClientConfig.java", "diffHunk": "@@ -144,6 +144,22 @@ public DeviceClientConfig(IotHubAuthenticationProvider authenticationProvider) t\n         this.productInfo = new ProductInfo();\n     }\n \n+\n+    public DeviceClientConfig(String hostName, SasTokenProvider sasTokenProvider, ClientOptions clientOptions, String deviceId, String moduleId)\n+    {\n+        this.authenticationProvider = new IotHubSasTokenProvidedAuthenticationProvider(\n+                hostName,\n+                deviceId,\n+                moduleId,\n+                sasTokenProvider,\n+                clientOptions != null ? clientOptions.sslContext : null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c28ecc041f85599b338661eff8c1f1fc81abb5"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0NzYzMTIz", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#pullrequestreview-534763123", "createdAt": "2020-11-19T19:06:59Z", "commit": {"oid": "80c28ecc041f85599b338661eff8c1f1fc81abb5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOTowNjo1OVrOH2teBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOTowNjo1OVrOH2teBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEzMDExNg==", "bodyText": "Is this not customer public (e.g. breaking change)?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#discussion_r527130116", "createdAt": "2020-11-19T19:06:59Z", "author": {"login": "drwill-ms"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/auth/IotHubSasTokenHardwareAuthenticationProvider.java", "diffHunk": "@@ -65,25 +65,14 @@ public IotHubSasTokenHardwareAuthenticationProvider(String hostname, String gate\n     /**\n      * Getter for SasToken. If the saved token has expired, this method shall renew it if possible\n      *\n-     * @param proactivelyRenew if true, this method will generate a fresh sas token even if the previously saved token\n-     *                                 has not expired yet as long as the current token has lived beyond its buffer.\n-     *                                 Use this for pre-emptively renewing sas tokens.\n-\n      * @throws IOException if generating the sas token from the TPM fails\n      * @return The value of SasToken\n      */\n-    public String getRenewedSasToken(boolean proactivelyRenew, boolean forceRenewal) throws IOException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c28ecc041f85599b338661eff8c1f1fc81abb5"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0NzYzODQ4", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#pullrequestreview-534763848", "createdAt": "2020-11-19T19:08:01Z", "commit": {"oid": "80c28ecc041f85599b338661eff8c1f1fc81abb5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOTowODowMVrOH2tgGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOTowODowMVrOH2tgGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEzMDY1MA==", "bodyText": "SAS as it is an acronym", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#discussion_r527130650", "createdAt": "2020-11-19T19:08:01Z", "author": {"login": "drwill-ms"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/auth/IotHubSasTokenProvidedAuthenticationProvider.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+*  Copyright (c) Microsoft. All rights reserved.\n+*  Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+*/\n+\n+package com.microsoft.azure.sdk.iot.device.auth;\n+\n+import com.microsoft.azure.sdk.iot.device.SasTokenProvider;\n+\n+import javax.net.ssl.SSLContext;\n+\n+public class IotHubSasTokenProvidedAuthenticationProvider extends IotHubSasTokenAuthenticationProvider\n+{\n+    SasTokenProvider sasTokenProvider;\n+    char[] lastSasToken;\n+\n+    public IotHubSasTokenProvidedAuthenticationProvider(String hostName, String deviceId, String moduleId, SasTokenProvider sasTokenProvider, SSLContext sslContext) {\n+        super(hostName, null, deviceId, moduleId, sslContext);\n+\n+        if (sasTokenProvider == null)\n+        {\n+            throw new IllegalArgumentException(\"sas token provider cannot be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c28ecc041f85599b338661eff8c1f1fc81abb5"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0NzY0NjIy", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#pullrequestreview-534764622", "createdAt": "2020-11-19T19:09:04Z", "commit": {"oid": "80c28ecc041f85599b338661eff8c1f1fc81abb5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOTowOTowNFrOH2tigw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOTowOTowNFrOH2tigw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEzMTI2Nw==", "bodyText": "Why is this false? If it can be refreshed, wouldn't renewal be necessary?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#discussion_r527131267", "createdAt": "2020-11-19T19:09:04Z", "author": {"login": "drwill-ms"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/auth/IotHubSasTokenProvidedAuthenticationProvider.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+*  Copyright (c) Microsoft. All rights reserved.\n+*  Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+*/\n+\n+package com.microsoft.azure.sdk.iot.device.auth;\n+\n+import com.microsoft.azure.sdk.iot.device.SasTokenProvider;\n+\n+import javax.net.ssl.SSLContext;\n+\n+public class IotHubSasTokenProvidedAuthenticationProvider extends IotHubSasTokenAuthenticationProvider\n+{\n+    SasTokenProvider sasTokenProvider;\n+    char[] lastSasToken;\n+\n+    public IotHubSasTokenProvidedAuthenticationProvider(String hostName, String deviceId, String moduleId, SasTokenProvider sasTokenProvider, SSLContext sslContext) {\n+        super(hostName, null, deviceId, moduleId, sslContext);\n+\n+        if (sasTokenProvider == null)\n+        {\n+            throw new IllegalArgumentException(\"sas token provider cannot be null\");\n+        }\n+\n+        this.sasTokenProvider = sasTokenProvider;\n+    }\n+\n+    @Override\n+    public boolean isRenewalNecessary()\n+    {\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c28ecc041f85599b338661eff8c1f1fc81abb5"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0NzY2MjEy", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#pullrequestreview-534766212", "createdAt": "2020-11-19T19:11:11Z", "commit": {"oid": "80c28ecc041f85599b338661eff8c1f1fc81abb5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOToxMToxMVrOH2tnog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOToxMToxMVrOH2tnog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEzMjU3OA==", "bodyText": "Meaningful class comment", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#discussion_r527132578", "createdAt": "2020-11-19T19:11:11Z", "author": {"login": "drwill-ms"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/auth/IotHubSasTokenProvidedAuthenticationProvider.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+*  Copyright (c) Microsoft. All rights reserved.\n+*  Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+*/\n+\n+package com.microsoft.azure.sdk.iot.device.auth;\n+\n+import com.microsoft.azure.sdk.iot.device.SasTokenProvider;\n+\n+import javax.net.ssl.SSLContext;\n+\n+public class IotHubSasTokenProvidedAuthenticationProvider extends IotHubSasTokenAuthenticationProvider", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c28ecc041f85599b338661eff8c1f1fc81abb5"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0NzY2OTkx", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#pullrequestreview-534766991", "createdAt": "2020-11-19T19:12:13Z", "commit": {"oid": "80c28ecc041f85599b338661eff8c1f1fc81abb5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOToxMjoxNFrOH2tqCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOToxMjoxNFrOH2tqCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEzMzE5Mw==", "bodyText": "I don't see any code referring to 85%", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#discussion_r527133193", "createdAt": "2020-11-19T19:12:14Z", "author": {"login": "drwill-ms"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/auth/IotHubSasTokenProvidedAuthenticationProvider.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+*  Copyright (c) Microsoft. All rights reserved.\n+*  Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+*/\n+\n+package com.microsoft.azure.sdk.iot.device.auth;\n+\n+import com.microsoft.azure.sdk.iot.device.SasTokenProvider;\n+\n+import javax.net.ssl.SSLContext;\n+\n+public class IotHubSasTokenProvidedAuthenticationProvider extends IotHubSasTokenAuthenticationProvider\n+{\n+    SasTokenProvider sasTokenProvider;\n+    char[] lastSasToken;\n+\n+    public IotHubSasTokenProvidedAuthenticationProvider(String hostName, String deviceId, String moduleId, SasTokenProvider sasTokenProvider, SSLContext sslContext) {\n+        super(hostName, null, deviceId, moduleId, sslContext);\n+\n+        if (sasTokenProvider == null)\n+        {\n+            throw new IllegalArgumentException(\"sas token provider cannot be null\");\n+        }\n+\n+        this.sasTokenProvider = sasTokenProvider;\n+    }\n+\n+    @Override\n+    public boolean isRenewalNecessary()\n+    {\n+        return false;\n+    }\n+\n+    @Override\n+    public void setTokenValidSecs(long tokenValidSecs)\n+    {\n+        throw new UnsupportedOperationException(\"Cannot configure sas token time to live when custom sas token provider is in use\");\n+    }\n+\n+    @Override\n+    public boolean canRefreshToken()\n+    {\n+        return true;\n+    }\n+\n+    @Override\n+    public char[] getSasToken()\n+    {\n+        lastSasToken = sasTokenProvider.getSasToken();\n+        return lastSasToken;\n+    }\n+\n+    @Override\n+    public int getMillisecondsBeforeProactiveRenewal()\n+    {\n+        // Seconds since UNIX epoch when this sas token will expire\n+        long expiryTimeSeconds = IotHubSasToken.getExpiryTimeFromToken(new String(lastSasToken));\n+\n+        // Assuming that the token's life \"starts\" now for the sake of figuring out when it needs to be renewed. Users\n+        // could theoretically give us a SAS token that started a while ago, but since we have no way of figuring that out,\n+        // we will conservatively just renew at 85% of the remaining time on the token, rather than 85% of the time the token", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c28ecc041f85599b338661eff8c1f1fc81abb5"}, "originalPosition": 61}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43e6b38caec46a1e29128d56e67fde7d54c16e24", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/43e6b38caec46a1e29128d56e67fde7d54c16e24", "committedDate": "2020-11-19T19:27:40Z", "message": "feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0ODEyOTA0", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#pullrequestreview-534812904", "createdAt": "2020-11-19T20:13:35Z", "commit": {"oid": "43e6b38caec46a1e29128d56e67fde7d54c16e24"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af179dfd7fe12b83fde20f31b4cd00751dfdde11", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/af179dfd7fe12b83fde20f31b4cd00751dfdde11", "committedDate": "2020-11-19T23:40:01Z", "message": "feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "617f075af09615026f4f329046908a771bc10fa6", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/617f075af09615026f4f329046908a771bc10fa6", "committedDate": "2020-11-19T23:53:12Z", "message": "fixup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a74da4005303d57fc9ff09911bf40ff713395f88", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/a74da4005303d57fc9ff09911bf40ff713395f88", "committedDate": "2020-11-20T00:33:14Z", "message": "squash"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c7446ad6ad2858a0b5c5fc53caa25e3e1ca4273", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/7c7446ad6ad2858a0b5c5fc53caa25e3e1ca4273", "committedDate": "2020-11-20T18:35:47Z", "message": "feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8744d7d72feb2590ba6035b33da493357691bf9e", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/8744d7d72feb2590ba6035b33da493357691bf9e", "committedDate": "2020-11-20T19:28:17Z", "message": "feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1NzQ3Nzcx", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#pullrequestreview-535747771", "createdAt": "2020-11-20T20:16:35Z", "commit": {"oid": "8744d7d72feb2590ba6035b33da493357691bf9e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMDoxNjozNVrOH3fYrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMDoxNjozNVrOH3fYrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk0Nzk0OA==", "bodyText": "I wonder if these should be constants in the SDK so someone can just refer to them instead of having to know or refer to your sample.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#discussion_r527947948", "createdAt": "2020-11-20T20:16:35Z", "author": {"login": "drwill-ms"}, "path": "device/iot-device-samples/custom-sas-token-provider-sample/src/main/java/samples/com/microsoft/azure/sdk/iot/CustomSasTokenProviderSample.java", "diffHunk": "@@ -0,0 +1,370 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package samples.com.microsoft.azure.sdk.iot;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.transport.IotHubConnectionStatus;\n+import org.apache.commons.codec.binary.Base64;\n+\n+import javax.crypto.Mac;\n+import javax.crypto.spec.SecretKeySpec;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+\n+/**\n+ * This sample demonstrates how to configure your device client to use a custom SAS token provider instead of\n+ * directly providing it the device's symmetric key.\n+ */\n+public class CustomSasTokenProviderSample\n+{\n+    private static final int D2C_MESSAGE_TIMEOUT = 2000; // 2 seconds\n+    private static List<String> failedMessageListOnClose = new ArrayList(); // List of messages that failed on close\n+\n+    /**\n+     * Helper class for turning symmetric keys into SAS tokens. It also provides some helpful functions around\n+     * if this token should be renewed.\n+     */\n+    protected static class SasToken\n+    {\n+        private static final String RAW_SIGNATURE_FORMAT = \"%s\\n%s\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8744d7d72feb2590ba6035b33da493357691bf9e"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1NzQ4NTcy", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#pullrequestreview-535748572", "createdAt": "2020-11-20T20:17:59Z", "commit": {"oid": "8744d7d72feb2590ba6035b33da493357691bf9e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMDoxNzo1OVrOH3fbLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMDoxNzo1OVrOH3fbLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk0ODU4OQ==", "bodyText": "should first params be on the next line?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#discussion_r527948589", "createdAt": "2020-11-20T20:17:59Z", "author": {"login": "drwill-ms"}, "path": "device/iot-device-samples/custom-sas-token-provider-sample/src/main/java/samples/com/microsoft/azure/sdk/iot/CustomSasTokenProviderSample.java", "diffHunk": "@@ -0,0 +1,370 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package samples.com.microsoft.azure.sdk.iot;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.transport.IotHubConnectionStatus;\n+import org.apache.commons.codec.binary.Base64;\n+\n+import javax.crypto.Mac;\n+import javax.crypto.spec.SecretKeySpec;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+\n+/**\n+ * This sample demonstrates how to configure your device client to use a custom SAS token provider instead of\n+ * directly providing it the device's symmetric key.\n+ */\n+public class CustomSasTokenProviderSample\n+{\n+    private static final int D2C_MESSAGE_TIMEOUT = 2000; // 2 seconds\n+    private static List<String> failedMessageListOnClose = new ArrayList(); // List of messages that failed on close\n+\n+    /**\n+     * Helper class for turning symmetric keys into SAS tokens. It also provides some helpful functions around\n+     * if this token should be renewed.\n+     */\n+    protected static class SasToken\n+    {\n+        private static final String RAW_SIGNATURE_FORMAT = \"%s\\n%s\";\n+        private static final String SHARED_ACCESS_SIGNATURE_FORMAT = \"SharedAccessSignature %s=%s&%s=%s&%s=%d\";\n+        private static final Charset SIGNATURE_CHARSET = StandardCharsets.UTF_8;\n+        private static final String ExpiryTimeFieldKey = \"se\";\n+        private static final String SignatureFieldKey = \"sig\";\n+        private static final String ResourceURIFieldKey = \"sr\";\n+\n+        // When deciding whether to renew SAS tokens or not, it is wise to renew proactively to avoid clock skew issues\n+        // between client and server.\n+        private int renewalBufferSeconds;\n+        private long expiryTimeSeconds;\n+        private final char[] sasToken;\n+\n+        /**\n+         * Generate a new SAS token from your host name, device Id, and device Key.\n+         * @param hostName the host name of your IoT Hub (for instance, \"my-iot-hub.azure-devices.net\").\n+         * @param deviceId the Id of your device.\n+         * @param deviceKey the primary or secondary key of your device.\n+         * @param secondsToLive the number of seconds that the token will live for.\n+         * @param renewalBufferSeconds the number of seconds before the token expires when this instance will recommend renewal via {{@link #shouldRenewSasToken()}}\n+         */\n+        public SasToken(String hostName, String deviceId, String deviceKey, int secondsToLive, int renewalBufferSeconds)\n+        {\n+            this.renewalBufferSeconds = renewalBufferSeconds;\n+\n+            try\n+            {\n+                // expiry time is represented by seconds since the UNIX epoch.\n+                this.expiryTimeSeconds = (System.currentTimeMillis() / 1000) + secondsToLive;\n+\n+                String scope = buildScope(hostName, deviceId);\n+\n+                byte[] signature = String.format(RAW_SIGNATURE_FORMAT, scope, this.expiryTimeSeconds).getBytes(SIGNATURE_CHARSET);\n+                byte[] decodedDeviceKey = Base64.decodeBase64(deviceKey);\n+\n+                // HMAC encrypt the signature\n+                byte[] hmacEncryptedSignature = encryptSignatureHmacSha256(signature, decodedDeviceKey);\n+\n+                // Base64 encode the HMAC encrypted byte[]\n+                byte[] base64EncodedHmacEncryptedSignature = Base64.encodeBase64(hmacEncryptedSignature);\n+\n+                // Convert byte[] of base64 encoded and HMAC encrypted bits to a UTF-8 String\n+                String utf8Sig = new String(base64EncodedHmacEncryptedSignature, SIGNATURE_CHARSET);\n+\n+                // URL encode the string\n+                String urlEncodedSignature = URLEncoder.encode(utf8Sig, SIGNATURE_CHARSET.name());\n+\n+                this.sasToken = String.format(SHARED_ACCESS_SIGNATURE_FORMAT,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8744d7d72feb2590ba6035b33da493357691bf9e"}, "originalPosition": 85}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1NzQ4NzA0", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#pullrequestreview-535748704", "createdAt": "2020-11-20T20:18:10Z", "commit": {"oid": "8744d7d72feb2590ba6035b33da493357691bf9e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMDoxODoxMVrOH3fblQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMDoxODoxMVrOH3fblQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk0ODY5Mw==", "bodyText": "These are tabbed in twice", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#discussion_r527948693", "createdAt": "2020-11-20T20:18:11Z", "author": {"login": "drwill-ms"}, "path": "device/iot-device-samples/custom-sas-token-provider-sample/src/main/java/samples/com/microsoft/azure/sdk/iot/CustomSasTokenProviderSample.java", "diffHunk": "@@ -0,0 +1,370 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package samples.com.microsoft.azure.sdk.iot;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.transport.IotHubConnectionStatus;\n+import org.apache.commons.codec.binary.Base64;\n+\n+import javax.crypto.Mac;\n+import javax.crypto.spec.SecretKeySpec;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+\n+/**\n+ * This sample demonstrates how to configure your device client to use a custom SAS token provider instead of\n+ * directly providing it the device's symmetric key.\n+ */\n+public class CustomSasTokenProviderSample\n+{\n+    private static final int D2C_MESSAGE_TIMEOUT = 2000; // 2 seconds\n+    private static List<String> failedMessageListOnClose = new ArrayList(); // List of messages that failed on close\n+\n+    /**\n+     * Helper class for turning symmetric keys into SAS tokens. It also provides some helpful functions around\n+     * if this token should be renewed.\n+     */\n+    protected static class SasToken\n+    {\n+        private static final String RAW_SIGNATURE_FORMAT = \"%s\\n%s\";\n+        private static final String SHARED_ACCESS_SIGNATURE_FORMAT = \"SharedAccessSignature %s=%s&%s=%s&%s=%d\";\n+        private static final Charset SIGNATURE_CHARSET = StandardCharsets.UTF_8;\n+        private static final String ExpiryTimeFieldKey = \"se\";\n+        private static final String SignatureFieldKey = \"sig\";\n+        private static final String ResourceURIFieldKey = \"sr\";\n+\n+        // When deciding whether to renew SAS tokens or not, it is wise to renew proactively to avoid clock skew issues\n+        // between client and server.\n+        private int renewalBufferSeconds;\n+        private long expiryTimeSeconds;\n+        private final char[] sasToken;\n+\n+        /**\n+         * Generate a new SAS token from your host name, device Id, and device Key.\n+         * @param hostName the host name of your IoT Hub (for instance, \"my-iot-hub.azure-devices.net\").\n+         * @param deviceId the Id of your device.\n+         * @param deviceKey the primary or secondary key of your device.\n+         * @param secondsToLive the number of seconds that the token will live for.\n+         * @param renewalBufferSeconds the number of seconds before the token expires when this instance will recommend renewal via {{@link #shouldRenewSasToken()}}\n+         */\n+        public SasToken(String hostName, String deviceId, String deviceKey, int secondsToLive, int renewalBufferSeconds)\n+        {\n+            this.renewalBufferSeconds = renewalBufferSeconds;\n+\n+            try\n+            {\n+                // expiry time is represented by seconds since the UNIX epoch.\n+                this.expiryTimeSeconds = (System.currentTimeMillis() / 1000) + secondsToLive;\n+\n+                String scope = buildScope(hostName, deviceId);\n+\n+                byte[] signature = String.format(RAW_SIGNATURE_FORMAT, scope, this.expiryTimeSeconds).getBytes(SIGNATURE_CHARSET);\n+                byte[] decodedDeviceKey = Base64.decodeBase64(deviceKey);\n+\n+                // HMAC encrypt the signature\n+                byte[] hmacEncryptedSignature = encryptSignatureHmacSha256(signature, decodedDeviceKey);\n+\n+                // Base64 encode the HMAC encrypted byte[]\n+                byte[] base64EncodedHmacEncryptedSignature = Base64.encodeBase64(hmacEncryptedSignature);\n+\n+                // Convert byte[] of base64 encoded and HMAC encrypted bits to a UTF-8 String\n+                String utf8Sig = new String(base64EncodedHmacEncryptedSignature, SIGNATURE_CHARSET);\n+\n+                // URL encode the string\n+                String urlEncodedSignature = URLEncoder.encode(utf8Sig, SIGNATURE_CHARSET.name());\n+\n+                this.sasToken = String.format(SHARED_ACCESS_SIGNATURE_FORMAT,\n+                        ResourceURIFieldKey,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8744d7d72feb2590ba6035b33da493357691bf9e"}, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1NzQ5MzMz", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#pullrequestreview-535749333", "createdAt": "2020-11-20T20:19:21Z", "commit": {"oid": "8744d7d72feb2590ba6035b33da493357691bf9e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMDoxOToyMVrOH3fdgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMDoxOToyMVrOH3fdgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk0OTE4NQ==", "bodyText": "Why is this format not with the class constants?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#discussion_r527949185", "createdAt": "2020-11-20T20:19:21Z", "author": {"login": "drwill-ms"}, "path": "device/iot-device-samples/custom-sas-token-provider-sample/src/main/java/samples/com/microsoft/azure/sdk/iot/CustomSasTokenProviderSample.java", "diffHunk": "@@ -0,0 +1,370 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package samples.com.microsoft.azure.sdk.iot;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.transport.IotHubConnectionStatus;\n+import org.apache.commons.codec.binary.Base64;\n+\n+import javax.crypto.Mac;\n+import javax.crypto.spec.SecretKeySpec;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+\n+/**\n+ * This sample demonstrates how to configure your device client to use a custom SAS token provider instead of\n+ * directly providing it the device's symmetric key.\n+ */\n+public class CustomSasTokenProviderSample\n+{\n+    private static final int D2C_MESSAGE_TIMEOUT = 2000; // 2 seconds\n+    private static List<String> failedMessageListOnClose = new ArrayList(); // List of messages that failed on close\n+\n+    /**\n+     * Helper class for turning symmetric keys into SAS tokens. It also provides some helpful functions around\n+     * if this token should be renewed.\n+     */\n+    protected static class SasToken\n+    {\n+        private static final String RAW_SIGNATURE_FORMAT = \"%s\\n%s\";\n+        private static final String SHARED_ACCESS_SIGNATURE_FORMAT = \"SharedAccessSignature %s=%s&%s=%s&%s=%d\";\n+        private static final Charset SIGNATURE_CHARSET = StandardCharsets.UTF_8;\n+        private static final String ExpiryTimeFieldKey = \"se\";\n+        private static final String SignatureFieldKey = \"sig\";\n+        private static final String ResourceURIFieldKey = \"sr\";\n+\n+        // When deciding whether to renew SAS tokens or not, it is wise to renew proactively to avoid clock skew issues\n+        // between client and server.\n+        private int renewalBufferSeconds;\n+        private long expiryTimeSeconds;\n+        private final char[] sasToken;\n+\n+        /**\n+         * Generate a new SAS token from your host name, device Id, and device Key.\n+         * @param hostName the host name of your IoT Hub (for instance, \"my-iot-hub.azure-devices.net\").\n+         * @param deviceId the Id of your device.\n+         * @param deviceKey the primary or secondary key of your device.\n+         * @param secondsToLive the number of seconds that the token will live for.\n+         * @param renewalBufferSeconds the number of seconds before the token expires when this instance will recommend renewal via {{@link #shouldRenewSasToken()}}\n+         */\n+        public SasToken(String hostName, String deviceId, String deviceKey, int secondsToLive, int renewalBufferSeconds)\n+        {\n+            this.renewalBufferSeconds = renewalBufferSeconds;\n+\n+            try\n+            {\n+                // expiry time is represented by seconds since the UNIX epoch.\n+                this.expiryTimeSeconds = (System.currentTimeMillis() / 1000) + secondsToLive;\n+\n+                String scope = buildScope(hostName, deviceId);\n+\n+                byte[] signature = String.format(RAW_SIGNATURE_FORMAT, scope, this.expiryTimeSeconds).getBytes(SIGNATURE_CHARSET);\n+                byte[] decodedDeviceKey = Base64.decodeBase64(deviceKey);\n+\n+                // HMAC encrypt the signature\n+                byte[] hmacEncryptedSignature = encryptSignatureHmacSha256(signature, decodedDeviceKey);\n+\n+                // Base64 encode the HMAC encrypted byte[]\n+                byte[] base64EncodedHmacEncryptedSignature = Base64.encodeBase64(hmacEncryptedSignature);\n+\n+                // Convert byte[] of base64 encoded and HMAC encrypted bits to a UTF-8 String\n+                String utf8Sig = new String(base64EncodedHmacEncryptedSignature, SIGNATURE_CHARSET);\n+\n+                // URL encode the string\n+                String urlEncodedSignature = URLEncoder.encode(utf8Sig, SIGNATURE_CHARSET.name());\n+\n+                this.sasToken = String.format(SHARED_ACCESS_SIGNATURE_FORMAT,\n+                        ResourceURIFieldKey,\n+                        scope,\n+                        SignatureFieldKey,\n+                        urlEncodedSignature,\n+                        ExpiryTimeFieldKey,\n+                        this.expiryTimeSeconds).toCharArray();\n+            }\n+            catch (UnsupportedEncodingException | InvalidKeyException | NoSuchAlgorithmException e)\n+            {\n+                // The exceptions here should never be thrown since the algorithm, encoding, and key are all hardcoded\n+                throw new IllegalStateException(\"Failed to generate a new SAS token\", e);\n+            }\n+        }\n+\n+        /**\n+         * Get the SAS token char array.\n+         * @return The SAS token char array.\n+         */\n+        public char[] getValue()\n+        {\n+            return this.sasToken;\n+        }\n+\n+        /**\n+         * Returns if this SAS token should be renewed.\n+         * @return true if this SAS token has expired, or will expire soon (depending on the provided renewal buffer). False, otherwise.\n+         */\n+        public boolean shouldRenewSasToken()\n+        {\n+            long currentTimeSeconds = (System.currentTimeMillis() / 1000);\n+\n+            // It will recommend renewing the token if it is expired, or if it will expire in the next few seconds\n+            return this.expiryTimeSeconds + this.renewalBufferSeconds >= currentTimeSeconds;\n+        }\n+\n+        private byte[] encryptSignatureHmacSha256(byte[] signature, byte[] deviceKey) throws NoSuchAlgorithmException, InvalidKeyException\n+        {\n+            String hmacSha256 = \"HmacSHA256\";\n+\n+            SecretKeySpec secretKey = new SecretKeySpec(deviceKey, hmacSha256);\n+\n+            byte[] encryptedSig = null;\n+            Mac hMacSha256 = Mac.getInstance(hmacSha256);\n+            hMacSha256.init(secretKey);\n+            encryptedSig = hMacSha256.doFinal(signature);\n+\n+            return encryptedSig;\n+        }\n+\n+        private String buildScope(String hostName, String deviceId)\n+        {\n+            return String.format(\"%s/devices/%s\", hostName, deviceId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8744d7d72feb2590ba6035b33da493357691bf9e"}, "originalPosition": 137}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1NzUwNDcy", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#pullrequestreview-535750472", "createdAt": "2020-11-20T20:21:20Z", "commit": {"oid": "8744d7d72feb2590ba6035b33da493357691bf9e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMDoyMToyMFrOH3fhBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMDoyMToyMFrOH3fhBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk1MDA4NQ==", "bodyText": "Spaces around ==", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#discussion_r527950085", "createdAt": "2020-11-20T20:21:20Z", "author": {"login": "drwill-ms"}, "path": "device/iot-device-samples/custom-sas-token-provider-sample/src/main/java/samples/com/microsoft/azure/sdk/iot/CustomSasTokenProviderSample.java", "diffHunk": "@@ -0,0 +1,370 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package samples.com.microsoft.azure.sdk.iot;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.transport.IotHubConnectionStatus;\n+import org.apache.commons.codec.binary.Base64;\n+\n+import javax.crypto.Mac;\n+import javax.crypto.spec.SecretKeySpec;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+\n+/**\n+ * This sample demonstrates how to configure your device client to use a custom SAS token provider instead of\n+ * directly providing it the device's symmetric key.\n+ */\n+public class CustomSasTokenProviderSample\n+{\n+    private static final int D2C_MESSAGE_TIMEOUT = 2000; // 2 seconds\n+    private static List<String> failedMessageListOnClose = new ArrayList(); // List of messages that failed on close\n+\n+    /**\n+     * Helper class for turning symmetric keys into SAS tokens. It also provides some helpful functions around\n+     * if this token should be renewed.\n+     */\n+    protected static class SasToken\n+    {\n+        private static final String RAW_SIGNATURE_FORMAT = \"%s\\n%s\";\n+        private static final String SHARED_ACCESS_SIGNATURE_FORMAT = \"SharedAccessSignature %s=%s&%s=%s&%s=%d\";\n+        private static final Charset SIGNATURE_CHARSET = StandardCharsets.UTF_8;\n+        private static final String ExpiryTimeFieldKey = \"se\";\n+        private static final String SignatureFieldKey = \"sig\";\n+        private static final String ResourceURIFieldKey = \"sr\";\n+\n+        // When deciding whether to renew SAS tokens or not, it is wise to renew proactively to avoid clock skew issues\n+        // between client and server.\n+        private int renewalBufferSeconds;\n+        private long expiryTimeSeconds;\n+        private final char[] sasToken;\n+\n+        /**\n+         * Generate a new SAS token from your host name, device Id, and device Key.\n+         * @param hostName the host name of your IoT Hub (for instance, \"my-iot-hub.azure-devices.net\").\n+         * @param deviceId the Id of your device.\n+         * @param deviceKey the primary or secondary key of your device.\n+         * @param secondsToLive the number of seconds that the token will live for.\n+         * @param renewalBufferSeconds the number of seconds before the token expires when this instance will recommend renewal via {{@link #shouldRenewSasToken()}}\n+         */\n+        public SasToken(String hostName, String deviceId, String deviceKey, int secondsToLive, int renewalBufferSeconds)\n+        {\n+            this.renewalBufferSeconds = renewalBufferSeconds;\n+\n+            try\n+            {\n+                // expiry time is represented by seconds since the UNIX epoch.\n+                this.expiryTimeSeconds = (System.currentTimeMillis() / 1000) + secondsToLive;\n+\n+                String scope = buildScope(hostName, deviceId);\n+\n+                byte[] signature = String.format(RAW_SIGNATURE_FORMAT, scope, this.expiryTimeSeconds).getBytes(SIGNATURE_CHARSET);\n+                byte[] decodedDeviceKey = Base64.decodeBase64(deviceKey);\n+\n+                // HMAC encrypt the signature\n+                byte[] hmacEncryptedSignature = encryptSignatureHmacSha256(signature, decodedDeviceKey);\n+\n+                // Base64 encode the HMAC encrypted byte[]\n+                byte[] base64EncodedHmacEncryptedSignature = Base64.encodeBase64(hmacEncryptedSignature);\n+\n+                // Convert byte[] of base64 encoded and HMAC encrypted bits to a UTF-8 String\n+                String utf8Sig = new String(base64EncodedHmacEncryptedSignature, SIGNATURE_CHARSET);\n+\n+                // URL encode the string\n+                String urlEncodedSignature = URLEncoder.encode(utf8Sig, SIGNATURE_CHARSET.name());\n+\n+                this.sasToken = String.format(SHARED_ACCESS_SIGNATURE_FORMAT,\n+                        ResourceURIFieldKey,\n+                        scope,\n+                        SignatureFieldKey,\n+                        urlEncodedSignature,\n+                        ExpiryTimeFieldKey,\n+                        this.expiryTimeSeconds).toCharArray();\n+            }\n+            catch (UnsupportedEncodingException | InvalidKeyException | NoSuchAlgorithmException e)\n+            {\n+                // The exceptions here should never be thrown since the algorithm, encoding, and key are all hardcoded\n+                throw new IllegalStateException(\"Failed to generate a new SAS token\", e);\n+            }\n+        }\n+\n+        /**\n+         * Get the SAS token char array.\n+         * @return The SAS token char array.\n+         */\n+        public char[] getValue()\n+        {\n+            return this.sasToken;\n+        }\n+\n+        /**\n+         * Returns if this SAS token should be renewed.\n+         * @return true if this SAS token has expired, or will expire soon (depending on the provided renewal buffer). False, otherwise.\n+         */\n+        public boolean shouldRenewSasToken()\n+        {\n+            long currentTimeSeconds = (System.currentTimeMillis() / 1000);\n+\n+            // It will recommend renewing the token if it is expired, or if it will expire in the next few seconds\n+            return this.expiryTimeSeconds + this.renewalBufferSeconds >= currentTimeSeconds;\n+        }\n+\n+        private byte[] encryptSignatureHmacSha256(byte[] signature, byte[] deviceKey) throws NoSuchAlgorithmException, InvalidKeyException\n+        {\n+            String hmacSha256 = \"HmacSHA256\";\n+\n+            SecretKeySpec secretKey = new SecretKeySpec(deviceKey, hmacSha256);\n+\n+            byte[] encryptedSig = null;\n+            Mac hMacSha256 = Mac.getInstance(hmacSha256);\n+            hMacSha256.init(secretKey);\n+            encryptedSig = hMacSha256.doFinal(signature);\n+\n+            return encryptedSig;\n+        }\n+\n+        private String buildScope(String hostName, String deviceId)\n+        {\n+            return String.format(\"%s/devices/%s\", hostName, deviceId);\n+        }\n+    }\n+\n+    /**\n+     * A sample implementation of the {@link SasTokenProvider} interface. It demonstrates how to generate your own SAS\n+     * tokens from your device key, device Id, and host name. It also demonstrates how to choose how long your SAS tokens\n+     * will live for.\n+     *\n+     * The purpose of the {@link SasTokenProvider} interface is to allow users to generate these tokens in separate\n+     * processes from the SDK for security purposes, if they wish. This sample does not demonstrate that scenario.\n+     */\n+    protected static class SasTokenProviderImpl implements SasTokenProvider\n+    {\n+        private String deviceKey;\n+        private String hostName;\n+        private String deviceId;\n+        private int secondsToLivePerToken;\n+        private int renewalBufferSeconds;\n+\n+        private SasToken cachedSasToken;\n+\n+        public SasTokenProviderImpl(String hostName, String deviceId, String deviceKey, int secondsToLivePerToken, int renewalBufferSeconds)\n+        {\n+            this.hostName = hostName;\n+            this.deviceId = deviceId;\n+            this.deviceKey = deviceKey;\n+            this.secondsToLivePerToken = secondsToLivePerToken;\n+            this.renewalBufferSeconds = renewalBufferSeconds;\n+        }\n+\n+        @Override\n+        public char[] getSasToken()\n+        {\n+            if (this.cachedSasToken == null || this.cachedSasToken.shouldRenewSasToken())\n+            {\n+                // if no SAS token is cached, or if the cached token is expired/about to expire, create a new one\n+                this.cachedSasToken = new SasToken(this.hostName, this.deviceId, this.deviceKey, this.secondsToLivePerToken, this.renewalBufferSeconds);\n+                return this.cachedSasToken.getValue();\n+            }\n+            //else if (...)\n+            //{\n+                // It is recommended to have some logic in here that checks to make sure that the device key in use itself\n+                // is still valid. A given device may have it's keys cycled by its owner, and this would be an appropriate\n+                // time to update the device key if a new one was cycled in.\n+            //}\n+            else\n+            {\n+                return this.cachedSasToken.getValue();\n+            }\n+        }\n+    }\n+\n+    protected static class EventCallback implements IotHubEventCallback\n+    {\n+        public void execute(IotHubStatusCode status, Object context)\n+        {\n+            Message msg = (Message) context;\n+\n+            System.out.println(\"IoT Hub responded to message \"+ msg.getMessageId()  + \" with status \" + status.name());\n+\n+            if (status==IotHubStatusCode.MESSAGE_CANCELLED_ONCLOSE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8744d7d72feb2590ba6035b33da493357691bf9e"}, "originalPosition": 198}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1NzU2MDI5", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#pullrequestreview-535756029", "createdAt": "2020-11-20T20:30:54Z", "commit": {"oid": "8744d7d72feb2590ba6035b33da493357691bf9e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMDozMDo1NFrOH3fyYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMDozMDo1NFrOH3fyYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk1NDUyOQ==", "bodyText": "nit: I am a bit confused by the naming of this - we aren't renewing the authentication provider itself, right?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#discussion_r527954529", "createdAt": "2020-11-20T20:30:54Z", "author": {"login": "abhipsaMisra"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/InternalClient.java", "diffHunk": "@@ -138,7 +161,7 @@\n \n     public void open() throws IOException\n     {\n-        if (this.config.getAuthenticationType() == DeviceClientConfig.AuthType.SAS_TOKEN && this.config.getSasTokenAuthentication().isRenewalNecessary())\n+        if (this.config.getAuthenticationType() == DeviceClientConfig.AuthType.SAS_TOKEN && this.config.getSasTokenAuthentication().isAuthenticationProviderRenewalNecessary())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8744d7d72feb2590ba6035b33da493357691bf9e"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1NzYyMjk0", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#pullrequestreview-535762294", "createdAt": "2020-11-20T20:41:53Z", "commit": {"oid": "8744d7d72feb2590ba6035b33da493357691bf9e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMDo0MTo1NFrOH3gEwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMDo0MTo1NFrOH3gEwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk1OTIzMw==", "bodyText": "If I understand coreectly, for a user implementing this interface, they would need to implement their own renewal logic, right? This statement is only for our library's implementation of SasTokenProvider, which incidentally contains the 85% lifetime renewal logic?\nCorrect me if I am wrong, this is what I understand -\nFrom an interface perspective, our library calls getSasToken() whenever it requires a new SAS token (at it's simplest implementation - every time for Http, on CONNECT for Mqtt, while opening cbs link for Amqp).\nFor a user of this interface, you can then add any caching or renewal logic as you require in your implementation of getSasToken(), while the sdk can (edit: and has) additional calls to getSasToken() on reconnection, with an amqp refresh timer, etc.\nIf this is correct, then we should instead state that any renewal or caching logic is the ownership of whoever implements SasTokenProvider interface.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#discussion_r527959233", "createdAt": "2020-11-20T20:41:54Z", "author": {"login": "abhipsaMisra"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/SasTokenProvider.java", "diffHunk": "@@ -0,0 +1,34 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.microsoft.azure.sdk.iot.device;\n+\n+/**\n+ * Interface for allowing users to control SAS token generation. To see an example of how SAS tokens can be generated\n+ * from device connection strings, see {@link com.microsoft.azure.sdk.iot.device.auth.IotHubSasToken}.\n+ * @see <a href=\"https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-security#example\">This document</a> for more details on sas tokens.\n+ */\n+public interface SasTokenProvider\n+{\n+    /**\n+     * Returns a SAS token to be used for authentication.\n+     * <p>\n+     * This function will be called each time the client library needs a SAS token. This will follow different patterns\n+     * based on which protocol your client object is using.\n+     * <p>\n+     * For HTTPS, this function will be called for each HTTPS request made (for instance, once per telemetry send), and does not need\n+     * to be a unique token each time. Because of that, users may simply cache and return the same SAS token repeatedly here.\n+     * Alternatively, users can generate very short-lived SAS tokens since they will only need to be valid for a relative short period of time.\n+     * The user of this API is responsible for tracking when to renew the SAS token based on how long the previous token was valid for.\n+     * <p>\n+     * For AMQPS/AMQPS_WS, this function will be called once when first opening the connection, and then will be called again\n+     * at some point prior to the previous SAS token's expiry time in order to proactively renew the connection's authentication.\n+     * This proactive renewal takes place at around 85% of the previous SAS token's lifespan.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8744d7d72feb2590ba6035b33da493357691bf9e"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1NzY2NDg4", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#pullrequestreview-535766488", "createdAt": "2020-11-20T20:49:32Z", "commit": {"oid": "8744d7d72feb2590ba6035b33da493357691bf9e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMDo0OTozMlrOH3gR4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMDo0OTozMlrOH3gR4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk2MjU5NA==", "bodyText": "ok, this answers a question that I asked above - why do we want to expose something like this? Wouldn't it be easier to simply state that if you create an authentication provider using a shared access signature, then you cannot renew tokens and your client will be unusable once your token expires.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#discussion_r527962594", "createdAt": "2020-11-20T20:49:32Z", "author": {"login": "abhipsaMisra"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/auth/IotHubSasTokenAuthenticationProvider.java", "diffHunk": "@@ -76,10 +76,13 @@ public void setTokenValidSecs(long tokenValidSecs)\n     }\n \n     /**\n-     * Returns true if the saved sas token needs to be manually renewed by the user\n-     * @return true if the saved sas token needs to be manually renewed by the user\n+     * Returns true if the this authentication provider is no longer valid. If true, users will need to create a new\n+     * DeviceClient instance to get a new authentication provider. The most common case for this is if the user\n+     * provides a SAS token, but no symmetric key, and that SAS token has expired. At that point, the user's client\n+     * won't be able to authenticate anymore.\n+     * @return true if the this authentication provider is no longer valid. False otherwise", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8744d7d72feb2590ba6035b33da493357691bf9e"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d4db8201ab1a2b829e90054f23d61239ddb4cfa", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/1d4db8201ab1a2b829e90054f23d61239ddb4cfa", "committedDate": "2020-11-20T21:48:07Z", "message": "feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1ODA1NTgy", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#pullrequestreview-535805582", "createdAt": "2020-11-20T22:00:12Z", "commit": {"oid": "8744d7d72feb2590ba6035b33da493357691bf9e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMjowMDoxMlrOH3iLeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMjowMDoxMlrOH3iLeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk5MzcyMg==", "bodyText": "This class is a public class yes? can we just change the method ?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#discussion_r527993722", "createdAt": "2020-11-20T22:00:12Z", "author": {"login": "azabbasi"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/auth/IotHubSasTokenAuthenticationProvider.java", "diffHunk": "@@ -34,7 +34,7 @@\n     protected IotHubSasToken sasToken;\n \n     public abstract boolean canRefreshToken();\n-    public abstract String getRenewedSasToken(boolean proactivelyRenew, boolean forceRenewal) throws IOException, TransportException;\n+    public abstract char[] getSasToken() throws IOException, TransportException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8744d7d72feb2590ba6035b33da493357691bf9e"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a872ee7d673316f8bf677cd0b0de65e22bcf144a", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/a872ee7d673316f8bf677cd0b0de65e22bcf144a", "committedDate": "2020-11-20T22:11:35Z", "message": "Merge branch 'master' into timtay/sasTokenProvider"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1ODA3OTEw", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#pullrequestreview-535807910", "createdAt": "2020-11-20T22:05:00Z", "commit": {"oid": "8744d7d72feb2590ba6035b33da493357691bf9e"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMjowNTowMFrOH3iTIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMjoyMjowMlrOH3is0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk5NTY4MQ==", "bodyText": "so if we are repurposing this method entirely, where does this logic go? the proactive renewal approach that is.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#discussion_r527995681", "createdAt": "2020-11-20T22:05:00Z", "author": {"login": "azabbasi"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/auth/IotHubSasTokenHardwareAuthenticationProvider.java", "diffHunk": "@@ -65,25 +65,14 @@ public IotHubSasTokenHardwareAuthenticationProvider(String hostname, String gate\n     /**\n      * Getter for SasToken. If the saved token has expired, this method shall renew it if possible\n      *\n-     * @param proactivelyRenew if true, this method will generate a fresh sas token even if the previously saved token", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8744d7d72feb2590ba6035b33da493357691bf9e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk5NjI5OQ==", "bodyText": "did we never use this?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#discussion_r527996299", "createdAt": "2020-11-20T22:06:17Z", "author": {"login": "azabbasi"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/auth/IotHubSasTokenHardwareAuthenticationProvider.java", "diffHunk": "@@ -65,25 +65,14 @@ public IotHubSasTokenHardwareAuthenticationProvider(String hostname, String gate\n     /**\n      * Getter for SasToken. If the saved token has expired, this method shall renew it if possible\n      *\n-     * @param proactivelyRenew if true, this method will generate a fresh sas token even if the previously saved token", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk5NTY4MQ=="}, "originalCommit": {"oid": "8744d7d72feb2590ba6035b33da493357691bf9e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAwMDc4Mw==", "bodyText": "I think it's important to make the distinction that this is a helper class by including that in the name.\nSampleSasTokenHelper ? or something of that nature.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#discussion_r528000783", "createdAt": "2020-11-20T22:17:59Z", "author": {"login": "azabbasi"}, "path": "device/iot-device-samples/custom-sas-token-provider-sample/src/main/java/samples/com/microsoft/azure/sdk/iot/CustomSasTokenProviderSample.java", "diffHunk": "@@ -0,0 +1,371 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package samples.com.microsoft.azure.sdk.iot;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.transport.IotHubConnectionStatus;\n+import org.apache.commons.codec.binary.Base64;\n+\n+import javax.crypto.Mac;\n+import javax.crypto.spec.SecretKeySpec;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+\n+/**\n+ * This sample demonstrates how to configure your device client to use a custom SAS token provider instead of\n+ * directly providing it the device's symmetric key.\n+ */\n+public class CustomSasTokenProviderSample\n+{\n+    private static final int D2C_MESSAGE_TIMEOUT = 2000; // 2 seconds\n+    private static List<String> failedMessageListOnClose = new ArrayList(); // List of messages that failed on close\n+\n+    /**\n+     * Helper class for turning symmetric keys into SAS tokens. It also provides some helpful functions around\n+     * if this token should be renewed.\n+     */\n+    protected static class SasToken", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d4db8201ab1a2b829e90054f23d61239ddb4cfa"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAwMjI1Ng==", "bodyText": "I assume this implementation works out of the box if they provide the connection string. Is that correct?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#discussion_r528002256", "createdAt": "2020-11-20T22:22:02Z", "author": {"login": "azabbasi"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/helpers/SasTokenProviderImpl.java", "diffHunk": "@@ -0,0 +1,45 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package tests.integration.com.microsoft.azure.sdk.iot.helpers;\n+\n+import com.microsoft.azure.sdk.iot.device.IotHubConnectionString;\n+import com.microsoft.azure.sdk.iot.device.SasTokenProvider;\n+import com.microsoft.azure.sdk.iot.device.auth.IotHubSasToken;\n+\n+import java.net.URISyntaxException;\n+\n+/**\n+ * Basic implementation of the SasTokenProvider interface, for test purposes.\n+ */\n+public class SasTokenProviderImpl implements SasTokenProvider", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d4db8201ab1a2b829e90054f23d61239ddb4cfa"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73c78712828840799d7ec90fb62d2ccaed2be0ff", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/73c78712828840799d7ec90fb62d2ccaed2be0ff", "committedDate": "2020-11-20T22:33:33Z", "message": "Merge branch 'master' into timtay/sasTokenProvider"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c2bb2e1692f637ba27911fe7a9209ec3b50c098", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/5c2bb2e1692f637ba27911fe7a9209ec3b50c098", "committedDate": "2020-11-20T23:39:21Z", "message": "feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c4d7ba1d08509a6b38310696b9a13694269a75f", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/0c4d7ba1d08509a6b38310696b9a13694269a75f", "committedDate": "2020-11-30T18:08:01Z", "message": "Merge branch 'master' into timtay/sasTokenProvider"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMjAzMTU1", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#pullrequestreview-541203155", "createdAt": "2020-11-30T18:59:39Z", "commit": {"oid": "0c4d7ba1d08509a6b38310696b9a13694269a75f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODo1OTo0MFrOH8JPGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxODo1OTo0MFrOH8JPGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgyNzkzMA==", "bodyText": "these are tabbed in twice", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#discussion_r532827930", "createdAt": "2020-11-30T18:59:40Z", "author": {"login": "drwill-ms"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClientConfig.java", "diffHunk": "@@ -144,6 +144,22 @@ public DeviceClientConfig(IotHubAuthenticationProvider authenticationProvider) t\n         this.productInfo = new ProductInfo();\n     }\n \n+\n+    public DeviceClientConfig(String hostName, SasTokenProvider sasTokenProvider, ClientOptions clientOptions, String deviceId, String moduleId)\n+    {\n+        this.authenticationProvider = new IotHubSasTokenProvidedAuthenticationProvider(\n+                hostName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c4d7ba1d08509a6b38310696b9a13694269a75f"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMjAzNDk5", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#pullrequestreview-541203499", "createdAt": "2020-11-30T19:00:05Z", "commit": {"oid": "0c4d7ba1d08509a6b38310696b9a13694269a75f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTowMDowNVrOH8JQKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTowMDowNVrOH8JQKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgyODIwMg==", "bodyText": "there are 2 newlines here, when I think 1 is expected", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#discussion_r532828202", "createdAt": "2020-11-30T19:00:05Z", "author": {"login": "drwill-ms"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/InternalClient.java", "diffHunk": "@@ -128,6 +128,29 @@\n         this.deviceIO = new DeviceIO(this.config, sendPeriodMillis, receivePeriodMillis);\n     }\n \n+    InternalClient(String hostName, String deviceId, String moduleId, SasTokenProvider sasTokenProvider, IotHubClientProtocol protocol, ClientOptions clientOptions, long sendPeriodMillis, long receivePeriodMillis)\n+    {\n+        if (hostName == null)\n+        {\n+            throw new IllegalArgumentException(\"Host name cannot be null\");\n+        }\n+\n+        if (protocol == null)\n+        {\n+            throw new IllegalArgumentException(\"Protocol cannot be null.\");\n+        }\n+\n+        this.config = new DeviceClientConfig(hostName, sasTokenProvider, clientOptions, deviceId, moduleId);\n+        this.config.setProtocol(protocol);\n+        if (clientOptions != null)\n+        {\n+            this.config.modelId = clientOptions.getModelId();\n+        }\n+\n+        this.deviceIO = new DeviceIO(this.config, sendPeriodMillis, receivePeriodMillis);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c4d7ba1d08509a6b38310696b9a13694269a75f"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMjEwMjU1", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#pullrequestreview-541210255", "createdAt": "2020-11-30T19:09:18Z", "commit": {"oid": "0c4d7ba1d08509a6b38310696b9a13694269a75f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTowOToxOFrOH8Jk8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTowOToxOFrOH8Jk8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgzMzUyMQ==", "bodyText": "As this is overridden and specified for this impl, I think it warrants a comment as to why it is true.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#discussion_r532833521", "createdAt": "2020-11-30T19:09:18Z", "author": {"login": "drwill-ms"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/auth/IotHubSasTokenProvidedAuthenticationProvider.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+*  Copyright (c) Microsoft. All rights reserved.\n+*  Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+*/\n+\n+package com.microsoft.azure.sdk.iot.device.auth;\n+\n+import com.microsoft.azure.sdk.iot.device.ClientOptions;\n+import com.microsoft.azure.sdk.iot.device.IotHubClientProtocol;\n+import com.microsoft.azure.sdk.iot.device.SasTokenProvider;\n+\n+import javax.net.ssl.SSLContext;\n+\n+/**\n+ * {@link IotHubSasTokenAuthenticationProvider} implementation where the tokens are provided by an instance of {@link SasTokenProvider}.\n+ * This is used in cases like when the user creates a device client with {@link com.microsoft.azure.sdk.iot.device.DeviceClient#DeviceClient(String, String, SasTokenProvider, IotHubClientProtocol, ClientOptions)}\n+ */\n+public class IotHubSasTokenProvidedAuthenticationProvider extends IotHubSasTokenAuthenticationProvider\n+{\n+    SasTokenProvider sasTokenProvider;\n+    char[] lastSasToken;\n+\n+    public IotHubSasTokenProvidedAuthenticationProvider(String hostName, String deviceId, String moduleId, SasTokenProvider sasTokenProvider, SSLContext sslContext) {\n+        super(hostName, null, deviceId, moduleId, sslContext);\n+\n+        if (sasTokenProvider == null)\n+        {\n+            throw new IllegalArgumentException(\"SAS token provider cannot be null\");\n+        }\n+\n+        this.sasTokenProvider = sasTokenProvider;\n+    }\n+\n+    @Override\n+    public boolean isAuthenticationProviderRenewalNecessary()\n+    {\n+        // Renewal of the authentication provider itself is never needed since the SAS token provider is responsible\n+        // for providing SAS tokens indefinitely.\n+        return false;\n+    }\n+\n+    @Override\n+    public void setTokenValidSecs(long tokenValidSecs)\n+    {\n+        throw new UnsupportedOperationException(\"Cannot configure SAS token time to live when custom SAS token provider is in use\");\n+    }\n+\n+    @Override\n+    public boolean canRefreshToken()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c4d7ba1d08509a6b38310696b9a13694269a75f"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMjIwNTA3", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#pullrequestreview-541220507", "createdAt": "2020-11-30T19:23:14Z", "commit": {"oid": "0c4d7ba1d08509a6b38310696b9a13694269a75f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOToyMzoxNFrOH8KFfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOToyMzoxNFrOH8KFfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg0MTg1Mg==", "bodyText": "What's with the weird tabbing going on here where some params are further in than others?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#discussion_r532841852", "createdAt": "2020-11-30T19:23:14Z", "author": {"login": "drwill-ms"}, "path": "device/iot-device-samples/custom-sas-token-provider-sample/src/main/java/samples/com/microsoft/azure/sdk/iot/CustomSasTokenProviderSample.java", "diffHunk": "@@ -0,0 +1,371 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package samples.com.microsoft.azure.sdk.iot;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.transport.IotHubConnectionStatus;\n+import org.apache.commons.codec.binary.Base64;\n+\n+import javax.crypto.Mac;\n+import javax.crypto.spec.SecretKeySpec;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+\n+/**\n+ * This sample demonstrates how to configure your device client to use a custom SAS token provider instead of\n+ * directly providing it the device's symmetric key.\n+ */\n+public class CustomSasTokenProviderSample\n+{\n+    private static final int D2C_MESSAGE_TIMEOUT = 2000; // 2 seconds\n+    private static List<String> failedMessageListOnClose = new ArrayList(); // List of messages that failed on close\n+\n+    /**\n+     * Helper class for turning symmetric keys into SAS tokens. It also provides some helpful functions around\n+     * if this token should be renewed.\n+     */\n+    protected static class SasTokenHelper\n+    {\n+        private static final String RAW_SIGNATURE_FORMAT = \"%s\\n%s\";\n+        private static final String SHARED_ACCESS_SIGNATURE_FORMAT = \"SharedAccessSignature %s=%s&%s=%s&%s=%d\";\n+        private static final String SCOPE_FORMAT = \"%s/devices/%s\";\n+        private static final Charset SIGNATURE_CHARSET = StandardCharsets.UTF_8;\n+        private static final String EXPIRY_TIME_FIELD_KEY = \"se\";\n+        private static final String SIGNATURE_FIELD_KEY = \"sig\";\n+        private static final String RESOURCE_URI_FIELD_KEY = \"sr\";\n+        private static final String HMAC_SHA_256 = \"HmacSHA256\";\n+\n+        // When deciding whether to renew SAS tokens or not, it is wise to renew proactively to avoid clock skew issues\n+        // between client and server.\n+        private int renewalBufferSeconds;\n+        private long expiryTimeSeconds;\n+        private final char[] sasToken;\n+\n+        /**\n+         * Generate a new SAS token from your host name, device Id, and device Key.\n+         * @param hostName the host name of your IoT Hub (for instance, \"my-iot-hub.azure-devices.net\").\n+         * @param deviceId the Id of your device.\n+         * @param deviceKey the primary or secondary key of your device.\n+         * @param secondsToLive the number of seconds that the token will live for.\n+         * @param renewalBufferSeconds the number of seconds before the token expires when this instance will recommend renewal via {{@link #shouldRenewSasToken()}}\n+         */\n+        public SasTokenHelper(String hostName, String deviceId, String deviceKey, int secondsToLive, int renewalBufferSeconds)\n+        {\n+            this.renewalBufferSeconds = renewalBufferSeconds;\n+\n+            try\n+            {\n+                // expiry time is represented by seconds since the UNIX epoch.\n+                this.expiryTimeSeconds = (System.currentTimeMillis() / 1000) + secondsToLive;\n+\n+                String scope = buildScope(hostName, deviceId);\n+\n+                byte[] signature = String.format(RAW_SIGNATURE_FORMAT, scope, this.expiryTimeSeconds).getBytes(SIGNATURE_CHARSET);\n+                byte[] decodedDeviceKey = Base64.decodeBase64(deviceKey);\n+\n+                // HMAC encrypt the signature\n+                byte[] hmacEncryptedSignature = encryptSignatureHmacSha256(signature, decodedDeviceKey);\n+\n+                // Base64 encode the HMAC encrypted byte[]\n+                byte[] base64EncodedHmacEncryptedSignature = Base64.encodeBase64(hmacEncryptedSignature);\n+\n+                // Convert byte[] of base64 encoded and HMAC encrypted bits to a UTF-8 String\n+                String utf8Sig = new String(base64EncodedHmacEncryptedSignature, SIGNATURE_CHARSET);\n+\n+                // URL encode the string\n+                String urlEncodedSignature = URLEncoder.encode(utf8Sig, SIGNATURE_CHARSET.name());\n+\n+                this.sasToken = String.format(\n+                    SHARED_ACCESS_SIGNATURE_FORMAT,\n+                        RESOURCE_URI_FIELD_KEY,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c4d7ba1d08509a6b38310696b9a13694269a75f"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMjI4NTg0", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1002#pullrequestreview-541228584", "createdAt": "2020-11-30T19:34:24Z", "commit": {"oid": "0c4d7ba1d08509a6b38310696b9a13694269a75f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4c233cd2faae11f09e255b4224d0c572c8479ff", "author": {"user": {"login": "timtay-microsoft", "name": null}}, "url": "https://github.com/Azure/azure-iot-sdk-java/commit/f4c233cd2faae11f09e255b4224d0c572c8479ff", "committedDate": "2020-12-01T18:28:14Z", "message": "address cr comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1508, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}