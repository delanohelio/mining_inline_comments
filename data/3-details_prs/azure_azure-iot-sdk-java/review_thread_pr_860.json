{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4NDcyNTIy", "number": 860, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMDozODo1OVrOEN-1-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxODowNTowMlrOEOzF3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDk2NTY5OnYy", "diffSide": "RIGHT", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMDozODo1OVrOGw4-bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMToyMzozOVrOGw6ZCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxODMxNg==", "bodyText": "is there as Device and Module in some other imported package that prevents this from being imported at class level?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453918316", "createdAt": "2020-07-13T20:38:59Z", "author": {"login": "abhipsaMisra"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.DeviceTwin.Property;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n+\n+        registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n+\n+        List inputs =  Arrays.asList(\n+                new Object[][]\n+                        {\n+                                {MQTT},\n+                                {MQTT_WS},\n+                        }\n+        );\n+\n+        return inputs;\n+    }\n+\n+    private static class TestDevice\n+    {\n+        String deviceId;\n+        String moduleId;\n+        DeviceClient deviceClient;\n+        ModuleClient moduleClient;\n+    }\n+\n+    public TwinPnPTests.TwinPnPTestInstance testInstance;\n+\n+    public TwinPnPTests(IotHubClientProtocol protocol) throws IOException\n+    {\n+        this.testInstance = new TwinPnPTestInstance(protocol);\n+    }\n+\n+    public class TwinPnPTestInstance\n+    {\n+        public IotHubClientProtocol protocol;\n+        private com.microsoft.azure.sdk.iot.service.Device deviceForRegistryManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75b2cc2301fff0e7e609bf055464a2be459a552a"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0MTUxNA==", "bodyText": "I moved it to the imports.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453941514", "createdAt": "2020-07-13T21:23:39Z", "author": {"login": "bikamani"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.DeviceTwin.Property;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n+\n+        registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n+\n+        List inputs =  Arrays.asList(\n+                new Object[][]\n+                        {\n+                                {MQTT},\n+                                {MQTT_WS},\n+                        }\n+        );\n+\n+        return inputs;\n+    }\n+\n+    private static class TestDevice\n+    {\n+        String deviceId;\n+        String moduleId;\n+        DeviceClient deviceClient;\n+        ModuleClient moduleClient;\n+    }\n+\n+    public TwinPnPTests.TwinPnPTestInstance testInstance;\n+\n+    public TwinPnPTests(IotHubClientProtocol protocol) throws IOException\n+    {\n+        this.testInstance = new TwinPnPTestInstance(protocol);\n+    }\n+\n+    public class TwinPnPTestInstance\n+    {\n+        public IotHubClientProtocol protocol;\n+        private com.microsoft.azure.sdk.iot.service.Device deviceForRegistryManager;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxODMxNg=="}, "originalCommit": {"oid": "75b2cc2301fff0e7e609bf055464a2be459a552a"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDk2ODMzOnYy", "diffSide": "RIGHT", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMDozOTo0MlrOGw4_-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMToyNjozNlrOGw6fKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxODcxMg==", "bodyText": "Q - why do we have new TestDevice() here and in TwinPnPTestInstance() constructor as well?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453918712", "createdAt": "2020-07-13T20:39:42Z", "author": {"login": "abhipsaMisra"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.DeviceTwin.Property;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n+\n+        registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n+\n+        List inputs =  Arrays.asList(\n+                new Object[][]\n+                        {\n+                                {MQTT},\n+                                {MQTT_WS},\n+                        }\n+        );\n+\n+        return inputs;\n+    }\n+\n+    private static class TestDevice\n+    {\n+        String deviceId;\n+        String moduleId;\n+        DeviceClient deviceClient;\n+        ModuleClient moduleClient;\n+    }\n+\n+    public TwinPnPTests.TwinPnPTestInstance testInstance;\n+\n+    public TwinPnPTests(IotHubClientProtocol protocol) throws IOException\n+    {\n+        this.testInstance = new TwinPnPTestInstance(protocol);\n+    }\n+\n+    public class TwinPnPTestInstance\n+    {\n+        public IotHubClientProtocol protocol;\n+        private com.microsoft.azure.sdk.iot.service.Device deviceForRegistryManager;\n+        private com.microsoft.azure.sdk.iot.service.Module moduleForRegistryManager;\n+\n+        private DeviceTwin sCDeviceTwin;\n+        private TwinPnPTests.TestDevice testDevice;\n+\n+        public TwinPnPTestInstance(IotHubClientProtocol protocol) throws IOException\n+        {\n+            this.protocol = protocol;\n+            this.sCDeviceTwin = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n+            this.testDevice = new TestDevice();\n+        }\n+    }\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception\n+    {\n+        if (registryManager != null)\n+        {\n+            registryManager.close();\n+            registryManager = null;\n+        }\n+    }\n+\n+    private void createDeviceWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException\n+    {\n+        testInstance.testDevice.deviceClient = new DeviceClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager), protocol, options);\n+        testInstance.testDevice.deviceClient.open();\n+    }\n+\n+    private void createModuleWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException, ModuleClientException {\n+        testInstance.testDevice.moduleClient = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager, testInstance.moduleForRegistryManager), protocol, options);\n+        testInstance.testDevice.moduleClient.open();\n+    }\n+\n+    @Before\n+    public void createDevice() throws Exception\n+    {\n+        testInstance.testDevice = new TestDevice();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75b2cc2301fff0e7e609bf055464a2be459a552a"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0MzA4Mg==", "bodyText": "Good catch, removed the one from constructor", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453943082", "createdAt": "2020-07-13T21:26:36Z", "author": {"login": "bikamani"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.DeviceTwin.Property;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n+\n+        registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n+\n+        List inputs =  Arrays.asList(\n+                new Object[][]\n+                        {\n+                                {MQTT},\n+                                {MQTT_WS},\n+                        }\n+        );\n+\n+        return inputs;\n+    }\n+\n+    private static class TestDevice\n+    {\n+        String deviceId;\n+        String moduleId;\n+        DeviceClient deviceClient;\n+        ModuleClient moduleClient;\n+    }\n+\n+    public TwinPnPTests.TwinPnPTestInstance testInstance;\n+\n+    public TwinPnPTests(IotHubClientProtocol protocol) throws IOException\n+    {\n+        this.testInstance = new TwinPnPTestInstance(protocol);\n+    }\n+\n+    public class TwinPnPTestInstance\n+    {\n+        public IotHubClientProtocol protocol;\n+        private com.microsoft.azure.sdk.iot.service.Device deviceForRegistryManager;\n+        private com.microsoft.azure.sdk.iot.service.Module moduleForRegistryManager;\n+\n+        private DeviceTwin sCDeviceTwin;\n+        private TwinPnPTests.TestDevice testDevice;\n+\n+        public TwinPnPTestInstance(IotHubClientProtocol protocol) throws IOException\n+        {\n+            this.protocol = protocol;\n+            this.sCDeviceTwin = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n+            this.testDevice = new TestDevice();\n+        }\n+    }\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception\n+    {\n+        if (registryManager != null)\n+        {\n+            registryManager.close();\n+            registryManager = null;\n+        }\n+    }\n+\n+    private void createDeviceWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException\n+    {\n+        testInstance.testDevice.deviceClient = new DeviceClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager), protocol, options);\n+        testInstance.testDevice.deviceClient.open();\n+    }\n+\n+    private void createModuleWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException, ModuleClientException {\n+        testInstance.testDevice.moduleClient = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager, testInstance.moduleForRegistryManager), protocol, options);\n+        testInstance.testDevice.moduleClient.open();\n+    }\n+\n+    @Before\n+    public void createDevice() throws Exception\n+    {\n+        testInstance.testDevice = new TestDevice();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxODcxMg=="}, "originalCommit": {"oid": "75b2cc2301fff0e7e609bf055464a2be459a552a"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTE0NjUyOnYy", "diffSide": "RIGHT", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMTozMzozNFrOGw6rrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMzo0OTo0MFrOGxpPkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0NjI4Nw==", "bodyText": "Seems like you could also parameterize Device vs Module here", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453946287", "createdAt": "2020-07-13T21:33:34Z", "author": {"login": "timtay-microsoft"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n+\n+        registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n+\n+        List inputs =  Arrays.asList(\n+                new Object[][]\n+                        {\n+                                {MQTT},\n+                                {MQTT_WS},\n+                        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0ODE1Mw==", "bodyText": "See here for an example: \n  \n    \n      azure-iot-sdk-java/iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/SendMessagesCommon.java\n    \n    \n         Line 63\n      in\n      fc2ed81\n    \n    \n    \n    \n\n        \n          \n           {HTTPS, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint, false},", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453948153", "createdAt": "2020-07-13T21:37:16Z", "author": {"login": "timtay-microsoft"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n+\n+        registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n+\n+        List inputs =  Arrays.asList(\n+                new Object[][]\n+                        {\n+                                {MQTT},\n+                                {MQTT_WS},\n+                        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0NjI4Nw=="}, "originalCommit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0OTMxOA==", "bodyText": "cool, let me check that.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453949318", "createdAt": "2020-07-13T21:39:58Z", "author": {"login": "bikamani"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n+\n+        registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n+\n+        List inputs =  Arrays.asList(\n+                new Object[][]\n+                        {\n+                                {MQTT},\n+                                {MQTT_WS},\n+                        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0NjI4Nw=="}, "originalCommit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0OTU3Mw==", "bodyText": "Also x509 vs SAS authentication. Since those two have pretty different connect flows, it would be worth testing that", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453949573", "createdAt": "2020-07-13T21:40:29Z", "author": {"login": "timtay-microsoft"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n+\n+        registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n+\n+        List inputs =  Arrays.asList(\n+                new Object[][]\n+                        {\n+                                {MQTT},\n+                                {MQTT_WS},\n+                        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0NjI4Nw=="}, "originalCommit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwOTEzNw==", "bodyText": "done", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r454709137", "createdAt": "2020-07-14T23:49:40Z", "author": {"login": "bikamani"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n+\n+        registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n+\n+        List inputs =  Arrays.asList(\n+                new Object[][]\n+                        {\n+                                {MQTT},\n+                                {MQTT_WS},\n+                        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0NjI4Nw=="}, "originalCommit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTE2MDc2OnYy", "diffSide": "RIGHT", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMTozNzo1OFrOGw60Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMjowMToyNVrOGw7sBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0ODQ1OQ==", "bodyText": "You can move this label up to the class level since all pnp twin tests will be standard tier only", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453948459", "createdAt": "2020-07-13T21:37:58Z", "author": {"login": "timtay-microsoft"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n+\n+        registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n+\n+        List inputs =  Arrays.asList(\n+                new Object[][]\n+                        {\n+                                {MQTT},\n+                                {MQTT_WS},\n+                        }\n+        );\n+\n+        return inputs;\n+    }\n+\n+    private static class TestDevice\n+    {\n+        String deviceId;\n+        String moduleId;\n+        DeviceClient deviceClient;\n+        ModuleClient moduleClient;\n+    }\n+\n+    public TwinPnPTests.TwinPnPTestInstance testInstance;\n+\n+    public TwinPnPTests(IotHubClientProtocol protocol) throws IOException\n+    {\n+        this.testInstance = new TwinPnPTestInstance(protocol);\n+    }\n+\n+    public class TwinPnPTestInstance\n+    {\n+        public IotHubClientProtocol protocol;\n+        private Device deviceForRegistryManager;\n+        private Module moduleForRegistryManager;\n+\n+        private DeviceTwin sCDeviceTwin;\n+        private TwinPnPTests.TestDevice testDevice;\n+\n+        public TwinPnPTestInstance(IotHubClientProtocol protocol) throws IOException\n+        {\n+            this.protocol = protocol;\n+            this.sCDeviceTwin = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n+        }\n+    }\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception\n+    {\n+        if (registryManager != null)\n+        {\n+            registryManager.close();\n+            registryManager = null;\n+        }\n+    }\n+\n+    private void createDeviceWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException\n+    {\n+        testInstance.testDevice.deviceClient = new DeviceClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager), protocol, options);\n+        testInstance.testDevice.deviceClient.open();\n+    }\n+\n+    private void createModuleWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException, ModuleClientException {\n+        testInstance.testDevice.moduleClient = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager, testInstance.moduleForRegistryManager), protocol, options);\n+        testInstance.testDevice.moduleClient.open();\n+    }\n+\n+    @Before\n+    public void createDevice() throws Exception\n+    {\n+        testInstance.testDevice = new TestDevice();\n+        testInstance.testDevice.deviceId = \"java-twin-PnP-e2e-test-\".concat(UUID.randomUUID().toString());\n+        testInstance.testDevice.moduleId = \"java-twin-PnP-module-e2e-test-\".concat(UUID.randomUUID().toString());\n+\n+        testInstance.deviceForRegistryManager = com.microsoft.azure.sdk.iot.service.Device.createFromId(testInstance.testDevice.deviceId, null, null);\n+        testInstance.deviceForRegistryManager = Tools.addDeviceWithRetry(registryManager, testInstance.deviceForRegistryManager);\n+        testInstance.moduleForRegistryManager = com.microsoft.azure.sdk.iot.service.Module.createFromId(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId,null);\n+        testInstance.moduleForRegistryManager = Tools.addModuleWithRetry(registryManager, testInstance.moduleForRegistryManager);\n+\n+    }\n+\n+    @After\n+    public void destroyDevice() throws Exception\n+    {\n+        if (testInstance.testDevice.deviceClient != null)\n+        {\n+            testInstance.testDevice.deviceClient.closeNow();\n+            testInstance.testDevice.deviceClient = null;\n+        }\n+        if (testInstance.testDevice.moduleClient != null)\n+        {\n+            testInstance.testDevice.moduleClient.closeNow();\n+            testInstance.testDevice.moduleClient = null;\n+        }\n+\n+        if (testInstance != null && testInstance.testDevice != null)\n+        {\n+            if (registryManager != null && testInstance.testDevice.deviceId != null && testInstance.testDevice.moduleId !=null)\n+            {\n+                registryManager.removeModule(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId);\n+                registryManager.removeDevice(testInstance.testDevice.deviceId);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @StandardTierHubOnlyTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MDQwOQ==", "bodyText": "That's true I can move it up in this case", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453950409", "createdAt": "2020-07-13T21:42:20Z", "author": {"login": "bikamani"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n+\n+        registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n+\n+        List inputs =  Arrays.asList(\n+                new Object[][]\n+                        {\n+                                {MQTT},\n+                                {MQTT_WS},\n+                        }\n+        );\n+\n+        return inputs;\n+    }\n+\n+    private static class TestDevice\n+    {\n+        String deviceId;\n+        String moduleId;\n+        DeviceClient deviceClient;\n+        ModuleClient moduleClient;\n+    }\n+\n+    public TwinPnPTests.TwinPnPTestInstance testInstance;\n+\n+    public TwinPnPTests(IotHubClientProtocol protocol) throws IOException\n+    {\n+        this.testInstance = new TwinPnPTestInstance(protocol);\n+    }\n+\n+    public class TwinPnPTestInstance\n+    {\n+        public IotHubClientProtocol protocol;\n+        private Device deviceForRegistryManager;\n+        private Module moduleForRegistryManager;\n+\n+        private DeviceTwin sCDeviceTwin;\n+        private TwinPnPTests.TestDevice testDevice;\n+\n+        public TwinPnPTestInstance(IotHubClientProtocol protocol) throws IOException\n+        {\n+            this.protocol = protocol;\n+            this.sCDeviceTwin = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n+        }\n+    }\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception\n+    {\n+        if (registryManager != null)\n+        {\n+            registryManager.close();\n+            registryManager = null;\n+        }\n+    }\n+\n+    private void createDeviceWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException\n+    {\n+        testInstance.testDevice.deviceClient = new DeviceClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager), protocol, options);\n+        testInstance.testDevice.deviceClient.open();\n+    }\n+\n+    private void createModuleWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException, ModuleClientException {\n+        testInstance.testDevice.moduleClient = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager, testInstance.moduleForRegistryManager), protocol, options);\n+        testInstance.testDevice.moduleClient.open();\n+    }\n+\n+    @Before\n+    public void createDevice() throws Exception\n+    {\n+        testInstance.testDevice = new TestDevice();\n+        testInstance.testDevice.deviceId = \"java-twin-PnP-e2e-test-\".concat(UUID.randomUUID().toString());\n+        testInstance.testDevice.moduleId = \"java-twin-PnP-module-e2e-test-\".concat(UUID.randomUUID().toString());\n+\n+        testInstance.deviceForRegistryManager = com.microsoft.azure.sdk.iot.service.Device.createFromId(testInstance.testDevice.deviceId, null, null);\n+        testInstance.deviceForRegistryManager = Tools.addDeviceWithRetry(registryManager, testInstance.deviceForRegistryManager);\n+        testInstance.moduleForRegistryManager = com.microsoft.azure.sdk.iot.service.Module.createFromId(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId,null);\n+        testInstance.moduleForRegistryManager = Tools.addModuleWithRetry(registryManager, testInstance.moduleForRegistryManager);\n+\n+    }\n+\n+    @After\n+    public void destroyDevice() throws Exception\n+    {\n+        if (testInstance.testDevice.deviceClient != null)\n+        {\n+            testInstance.testDevice.deviceClient.closeNow();\n+            testInstance.testDevice.deviceClient = null;\n+        }\n+        if (testInstance.testDevice.moduleClient != null)\n+        {\n+            testInstance.testDevice.moduleClient.closeNow();\n+            testInstance.testDevice.moduleClient = null;\n+        }\n+\n+        if (testInstance != null && testInstance.testDevice != null)\n+        {\n+            if (registryManager != null && testInstance.testDevice.deviceId != null && testInstance.testDevice.moduleId !=null)\n+            {\n+                registryManager.removeModule(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId);\n+                registryManager.removeDevice(testInstance.testDevice.deviceId);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @StandardTierHubOnlyTest", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0ODQ1OQ=="}, "originalCommit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MjkxOA==", "bodyText": "@timtay-microsoft  Is there something like this for c# as well?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453952918", "createdAt": "2020-07-13T21:46:52Z", "author": {"login": "vinagesh"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n+\n+        registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n+\n+        List inputs =  Arrays.asList(\n+                new Object[][]\n+                        {\n+                                {MQTT},\n+                                {MQTT_WS},\n+                        }\n+        );\n+\n+        return inputs;\n+    }\n+\n+    private static class TestDevice\n+    {\n+        String deviceId;\n+        String moduleId;\n+        DeviceClient deviceClient;\n+        ModuleClient moduleClient;\n+    }\n+\n+    public TwinPnPTests.TwinPnPTestInstance testInstance;\n+\n+    public TwinPnPTests(IotHubClientProtocol protocol) throws IOException\n+    {\n+        this.testInstance = new TwinPnPTestInstance(protocol);\n+    }\n+\n+    public class TwinPnPTestInstance\n+    {\n+        public IotHubClientProtocol protocol;\n+        private Device deviceForRegistryManager;\n+        private Module moduleForRegistryManager;\n+\n+        private DeviceTwin sCDeviceTwin;\n+        private TwinPnPTests.TestDevice testDevice;\n+\n+        public TwinPnPTestInstance(IotHubClientProtocol protocol) throws IOException\n+        {\n+            this.protocol = protocol;\n+            this.sCDeviceTwin = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n+        }\n+    }\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception\n+    {\n+        if (registryManager != null)\n+        {\n+            registryManager.close();\n+            registryManager = null;\n+        }\n+    }\n+\n+    private void createDeviceWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException\n+    {\n+        testInstance.testDevice.deviceClient = new DeviceClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager), protocol, options);\n+        testInstance.testDevice.deviceClient.open();\n+    }\n+\n+    private void createModuleWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException, ModuleClientException {\n+        testInstance.testDevice.moduleClient = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager, testInstance.moduleForRegistryManager), protocol, options);\n+        testInstance.testDevice.moduleClient.open();\n+    }\n+\n+    @Before\n+    public void createDevice() throws Exception\n+    {\n+        testInstance.testDevice = new TestDevice();\n+        testInstance.testDevice.deviceId = \"java-twin-PnP-e2e-test-\".concat(UUID.randomUUID().toString());\n+        testInstance.testDevice.moduleId = \"java-twin-PnP-module-e2e-test-\".concat(UUID.randomUUID().toString());\n+\n+        testInstance.deviceForRegistryManager = com.microsoft.azure.sdk.iot.service.Device.createFromId(testInstance.testDevice.deviceId, null, null);\n+        testInstance.deviceForRegistryManager = Tools.addDeviceWithRetry(registryManager, testInstance.deviceForRegistryManager);\n+        testInstance.moduleForRegistryManager = com.microsoft.azure.sdk.iot.service.Module.createFromId(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId,null);\n+        testInstance.moduleForRegistryManager = Tools.addModuleWithRetry(registryManager, testInstance.moduleForRegistryManager);\n+\n+    }\n+\n+    @After\n+    public void destroyDevice() throws Exception\n+    {\n+        if (testInstance.testDevice.deviceClient != null)\n+        {\n+            testInstance.testDevice.deviceClient.closeNow();\n+            testInstance.testDevice.deviceClient = null;\n+        }\n+        if (testInstance.testDevice.moduleClient != null)\n+        {\n+            testInstance.testDevice.moduleClient.closeNow();\n+            testInstance.testDevice.moduleClient = null;\n+        }\n+\n+        if (testInstance != null && testInstance.testDevice != null)\n+        {\n+            if (registryManager != null && testInstance.testDevice.deviceId != null && testInstance.testDevice.moduleId !=null)\n+            {\n+                registryManager.removeModule(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId);\n+                registryManager.removeDevice(testInstance.testDevice.deviceId);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @StandardTierHubOnlyTest", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0ODQ1OQ=="}, "originalCommit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk2Mjc1Ng==", "bodyText": "Standard vs Basic tier? Not that I know of. C# doesn't test against basic tier hubs", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453962756", "createdAt": "2020-07-13T22:01:25Z", "author": {"login": "timtay-microsoft"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n+\n+        registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n+\n+        List inputs =  Arrays.asList(\n+                new Object[][]\n+                        {\n+                                {MQTT},\n+                                {MQTT_WS},\n+                        }\n+        );\n+\n+        return inputs;\n+    }\n+\n+    private static class TestDevice\n+    {\n+        String deviceId;\n+        String moduleId;\n+        DeviceClient deviceClient;\n+        ModuleClient moduleClient;\n+    }\n+\n+    public TwinPnPTests.TwinPnPTestInstance testInstance;\n+\n+    public TwinPnPTests(IotHubClientProtocol protocol) throws IOException\n+    {\n+        this.testInstance = new TwinPnPTestInstance(protocol);\n+    }\n+\n+    public class TwinPnPTestInstance\n+    {\n+        public IotHubClientProtocol protocol;\n+        private Device deviceForRegistryManager;\n+        private Module moduleForRegistryManager;\n+\n+        private DeviceTwin sCDeviceTwin;\n+        private TwinPnPTests.TestDevice testDevice;\n+\n+        public TwinPnPTestInstance(IotHubClientProtocol protocol) throws IOException\n+        {\n+            this.protocol = protocol;\n+            this.sCDeviceTwin = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n+        }\n+    }\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception\n+    {\n+        if (registryManager != null)\n+        {\n+            registryManager.close();\n+            registryManager = null;\n+        }\n+    }\n+\n+    private void createDeviceWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException\n+    {\n+        testInstance.testDevice.deviceClient = new DeviceClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager), protocol, options);\n+        testInstance.testDevice.deviceClient.open();\n+    }\n+\n+    private void createModuleWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException, ModuleClientException {\n+        testInstance.testDevice.moduleClient = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager, testInstance.moduleForRegistryManager), protocol, options);\n+        testInstance.testDevice.moduleClient.open();\n+    }\n+\n+    @Before\n+    public void createDevice() throws Exception\n+    {\n+        testInstance.testDevice = new TestDevice();\n+        testInstance.testDevice.deviceId = \"java-twin-PnP-e2e-test-\".concat(UUID.randomUUID().toString());\n+        testInstance.testDevice.moduleId = \"java-twin-PnP-module-e2e-test-\".concat(UUID.randomUUID().toString());\n+\n+        testInstance.deviceForRegistryManager = com.microsoft.azure.sdk.iot.service.Device.createFromId(testInstance.testDevice.deviceId, null, null);\n+        testInstance.deviceForRegistryManager = Tools.addDeviceWithRetry(registryManager, testInstance.deviceForRegistryManager);\n+        testInstance.moduleForRegistryManager = com.microsoft.azure.sdk.iot.service.Module.createFromId(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId,null);\n+        testInstance.moduleForRegistryManager = Tools.addModuleWithRetry(registryManager, testInstance.moduleForRegistryManager);\n+\n+    }\n+\n+    @After\n+    public void destroyDevice() throws Exception\n+    {\n+        if (testInstance.testDevice.deviceClient != null)\n+        {\n+            testInstance.testDevice.deviceClient.closeNow();\n+            testInstance.testDevice.deviceClient = null;\n+        }\n+        if (testInstance.testDevice.moduleClient != null)\n+        {\n+            testInstance.testDevice.moduleClient.closeNow();\n+            testInstance.testDevice.moduleClient = null;\n+        }\n+\n+        if (testInstance != null && testInstance.testDevice != null)\n+        {\n+            if (registryManager != null && testInstance.testDevice.deviceId != null && testInstance.testDevice.moduleId !=null)\n+            {\n+                registryManager.removeModule(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId);\n+                registryManager.removeDevice(testInstance.testDevice.deviceId);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @StandardTierHubOnlyTest", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk0ODQ1OQ=="}, "originalCommit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTE3NjIyOnYy", "diffSide": "RIGHT", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMTo0MzoxN1rOGw69aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMjowNzo0NVrOGw79Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MDgyNw==", "bodyText": "No need to set fields to null when you are done with them. Here and below", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453950827", "createdAt": "2020-07-13T21:43:17Z", "author": {"login": "timtay-microsoft"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n+\n+        registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n+\n+        List inputs =  Arrays.asList(\n+                new Object[][]\n+                        {\n+                                {MQTT},\n+                                {MQTT_WS},\n+                        }\n+        );\n+\n+        return inputs;\n+    }\n+\n+    private static class TestDevice\n+    {\n+        String deviceId;\n+        String moduleId;\n+        DeviceClient deviceClient;\n+        ModuleClient moduleClient;\n+    }\n+\n+    public TwinPnPTests.TwinPnPTestInstance testInstance;\n+\n+    public TwinPnPTests(IotHubClientProtocol protocol) throws IOException\n+    {\n+        this.testInstance = new TwinPnPTestInstance(protocol);\n+    }\n+\n+    public class TwinPnPTestInstance\n+    {\n+        public IotHubClientProtocol protocol;\n+        private Device deviceForRegistryManager;\n+        private Module moduleForRegistryManager;\n+\n+        private DeviceTwin sCDeviceTwin;\n+        private TwinPnPTests.TestDevice testDevice;\n+\n+        public TwinPnPTestInstance(IotHubClientProtocol protocol) throws IOException\n+        {\n+            this.protocol = protocol;\n+            this.sCDeviceTwin = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n+        }\n+    }\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception\n+    {\n+        if (registryManager != null)\n+        {\n+            registryManager.close();\n+            registryManager = null;\n+        }\n+    }\n+\n+    private void createDeviceWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException\n+    {\n+        testInstance.testDevice.deviceClient = new DeviceClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager), protocol, options);\n+        testInstance.testDevice.deviceClient.open();\n+    }\n+\n+    private void createModuleWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException, ModuleClientException {\n+        testInstance.testDevice.moduleClient = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager, testInstance.moduleForRegistryManager), protocol, options);\n+        testInstance.testDevice.moduleClient.open();\n+    }\n+\n+    @Before\n+    public void createDevice() throws Exception\n+    {\n+        testInstance.testDevice = new TestDevice();\n+        testInstance.testDevice.deviceId = \"java-twin-PnP-e2e-test-\".concat(UUID.randomUUID().toString());\n+        testInstance.testDevice.moduleId = \"java-twin-PnP-module-e2e-test-\".concat(UUID.randomUUID().toString());\n+\n+        testInstance.deviceForRegistryManager = com.microsoft.azure.sdk.iot.service.Device.createFromId(testInstance.testDevice.deviceId, null, null);\n+        testInstance.deviceForRegistryManager = Tools.addDeviceWithRetry(registryManager, testInstance.deviceForRegistryManager);\n+        testInstance.moduleForRegistryManager = com.microsoft.azure.sdk.iot.service.Module.createFromId(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId,null);\n+        testInstance.moduleForRegistryManager = Tools.addModuleWithRetry(registryManager, testInstance.moduleForRegistryManager);\n+\n+    }\n+\n+    @After\n+    public void destroyDevice() throws Exception\n+    {\n+        if (testInstance.testDevice.deviceClient != null)\n+        {\n+            testInstance.testDevice.deviceClient.closeNow();\n+            testInstance.testDevice.deviceClient = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MzE3Ng==", "bodyText": "why would you want a dangling object?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453953176", "createdAt": "2020-07-13T21:47:14Z", "author": {"login": "prmathur-microsoft"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n+\n+        registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n+\n+        List inputs =  Arrays.asList(\n+                new Object[][]\n+                        {\n+                                {MQTT},\n+                                {MQTT_WS},\n+                        }\n+        );\n+\n+        return inputs;\n+    }\n+\n+    private static class TestDevice\n+    {\n+        String deviceId;\n+        String moduleId;\n+        DeviceClient deviceClient;\n+        ModuleClient moduleClient;\n+    }\n+\n+    public TwinPnPTests.TwinPnPTestInstance testInstance;\n+\n+    public TwinPnPTests(IotHubClientProtocol protocol) throws IOException\n+    {\n+        this.testInstance = new TwinPnPTestInstance(protocol);\n+    }\n+\n+    public class TwinPnPTestInstance\n+    {\n+        public IotHubClientProtocol protocol;\n+        private Device deviceForRegistryManager;\n+        private Module moduleForRegistryManager;\n+\n+        private DeviceTwin sCDeviceTwin;\n+        private TwinPnPTests.TestDevice testDevice;\n+\n+        public TwinPnPTestInstance(IotHubClientProtocol protocol) throws IOException\n+        {\n+            this.protocol = protocol;\n+            this.sCDeviceTwin = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n+        }\n+    }\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception\n+    {\n+        if (registryManager != null)\n+        {\n+            registryManager.close();\n+            registryManager = null;\n+        }\n+    }\n+\n+    private void createDeviceWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException\n+    {\n+        testInstance.testDevice.deviceClient = new DeviceClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager), protocol, options);\n+        testInstance.testDevice.deviceClient.open();\n+    }\n+\n+    private void createModuleWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException, ModuleClientException {\n+        testInstance.testDevice.moduleClient = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager, testInstance.moduleForRegistryManager), protocol, options);\n+        testInstance.testDevice.moduleClient.open();\n+    }\n+\n+    @Before\n+    public void createDevice() throws Exception\n+    {\n+        testInstance.testDevice = new TestDevice();\n+        testInstance.testDevice.deviceId = \"java-twin-PnP-e2e-test-\".concat(UUID.randomUUID().toString());\n+        testInstance.testDevice.moduleId = \"java-twin-PnP-module-e2e-test-\".concat(UUID.randomUUID().toString());\n+\n+        testInstance.deviceForRegistryManager = com.microsoft.azure.sdk.iot.service.Device.createFromId(testInstance.testDevice.deviceId, null, null);\n+        testInstance.deviceForRegistryManager = Tools.addDeviceWithRetry(registryManager, testInstance.deviceForRegistryManager);\n+        testInstance.moduleForRegistryManager = com.microsoft.azure.sdk.iot.service.Module.createFromId(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId,null);\n+        testInstance.moduleForRegistryManager = Tools.addModuleWithRetry(registryManager, testInstance.moduleForRegistryManager);\n+\n+    }\n+\n+    @After\n+    public void destroyDevice() throws Exception\n+    {\n+        if (testInstance.testDevice.deviceClient != null)\n+        {\n+            testInstance.testDevice.deviceClient.closeNow();\n+            testInstance.testDevice.deviceClient = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MDgyNw=="}, "originalCommit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk2NzEyMw==", "bodyText": "http://net-informations.com/java/cjava/objectonull.htm\nThat doesn't help garbage collection as much as you might think", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453967123", "createdAt": "2020-07-13T22:07:45Z", "author": {"login": "timtay-microsoft"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n+\n+        registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n+\n+        List inputs =  Arrays.asList(\n+                new Object[][]\n+                        {\n+                                {MQTT},\n+                                {MQTT_WS},\n+                        }\n+        );\n+\n+        return inputs;\n+    }\n+\n+    private static class TestDevice\n+    {\n+        String deviceId;\n+        String moduleId;\n+        DeviceClient deviceClient;\n+        ModuleClient moduleClient;\n+    }\n+\n+    public TwinPnPTests.TwinPnPTestInstance testInstance;\n+\n+    public TwinPnPTests(IotHubClientProtocol protocol) throws IOException\n+    {\n+        this.testInstance = new TwinPnPTestInstance(protocol);\n+    }\n+\n+    public class TwinPnPTestInstance\n+    {\n+        public IotHubClientProtocol protocol;\n+        private Device deviceForRegistryManager;\n+        private Module moduleForRegistryManager;\n+\n+        private DeviceTwin sCDeviceTwin;\n+        private TwinPnPTests.TestDevice testDevice;\n+\n+        public TwinPnPTestInstance(IotHubClientProtocol protocol) throws IOException\n+        {\n+            this.protocol = protocol;\n+            this.sCDeviceTwin = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n+        }\n+    }\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception\n+    {\n+        if (registryManager != null)\n+        {\n+            registryManager.close();\n+            registryManager = null;\n+        }\n+    }\n+\n+    private void createDeviceWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException\n+    {\n+        testInstance.testDevice.deviceClient = new DeviceClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager), protocol, options);\n+        testInstance.testDevice.deviceClient.open();\n+    }\n+\n+    private void createModuleWithClientOptions(IotHubClientProtocol protocol, ClientOptions options) throws IOException, URISyntaxException, InterruptedException, ModuleClientException {\n+        testInstance.testDevice.moduleClient = new ModuleClient(DeviceConnectionString.get(iotHubConnectionString, testInstance.deviceForRegistryManager, testInstance.moduleForRegistryManager), protocol, options);\n+        testInstance.testDevice.moduleClient.open();\n+    }\n+\n+    @Before\n+    public void createDevice() throws Exception\n+    {\n+        testInstance.testDevice = new TestDevice();\n+        testInstance.testDevice.deviceId = \"java-twin-PnP-e2e-test-\".concat(UUID.randomUUID().toString());\n+        testInstance.testDevice.moduleId = \"java-twin-PnP-module-e2e-test-\".concat(UUID.randomUUID().toString());\n+\n+        testInstance.deviceForRegistryManager = com.microsoft.azure.sdk.iot.service.Device.createFromId(testInstance.testDevice.deviceId, null, null);\n+        testInstance.deviceForRegistryManager = Tools.addDeviceWithRetry(registryManager, testInstance.deviceForRegistryManager);\n+        testInstance.moduleForRegistryManager = com.microsoft.azure.sdk.iot.service.Module.createFromId(testInstance.testDevice.deviceId, testInstance.testDevice.moduleId,null);\n+        testInstance.moduleForRegistryManager = Tools.addModuleWithRetry(registryManager, testInstance.moduleForRegistryManager);\n+\n+    }\n+\n+    @After\n+    public void destroyDevice() throws Exception\n+    {\n+        if (testInstance.testDevice.deviceClient != null)\n+        {\n+            testInstance.testDevice.deviceClient.closeNow();\n+            testInstance.testDevice.deviceClient = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MDgyNw=="}, "originalCommit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTE3OTk1OnYy", "diffSide": "RIGHT", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMTo0NDozMVrOGw6_lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMjowNzoyNFrOGw78Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MTM4Mw==", "bodyText": "I know you are following the pattern here, but I'd rather this name specified that it is a client. Something like \"twinServiceClient\" or \"twinClient\" instead of \"sCDeviceTwin\"", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453951383", "createdAt": "2020-07-13T21:44:31Z", "author": {"login": "timtay-microsoft"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n+\n+        registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n+\n+        List inputs =  Arrays.asList(\n+                new Object[][]\n+                        {\n+                                {MQTT},\n+                                {MQTT_WS},\n+                        }\n+        );\n+\n+        return inputs;\n+    }\n+\n+    private static class TestDevice\n+    {\n+        String deviceId;\n+        String moduleId;\n+        DeviceClient deviceClient;\n+        ModuleClient moduleClient;\n+    }\n+\n+    public TwinPnPTests.TwinPnPTestInstance testInstance;\n+\n+    public TwinPnPTests(IotHubClientProtocol protocol) throws IOException\n+    {\n+        this.testInstance = new TwinPnPTestInstance(protocol);\n+    }\n+\n+    public class TwinPnPTestInstance\n+    {\n+        public IotHubClientProtocol protocol;\n+        private Device deviceForRegistryManager;\n+        private Module moduleForRegistryManager;\n+\n+        private DeviceTwin sCDeviceTwin;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MzYwNw==", "bodyText": "I like that suggestion too. I would follow the same pattern like other tests for less confusion though.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453953607", "createdAt": "2020-07-13T21:47:49Z", "author": {"login": "bikamani"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n+\n+        registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n+\n+        List inputs =  Arrays.asList(\n+                new Object[][]\n+                        {\n+                                {MQTT},\n+                                {MQTT_WS},\n+                        }\n+        );\n+\n+        return inputs;\n+    }\n+\n+    private static class TestDevice\n+    {\n+        String deviceId;\n+        String moduleId;\n+        DeviceClient deviceClient;\n+        ModuleClient moduleClient;\n+    }\n+\n+    public TwinPnPTests.TwinPnPTestInstance testInstance;\n+\n+    public TwinPnPTests(IotHubClientProtocol protocol) throws IOException\n+    {\n+        this.testInstance = new TwinPnPTestInstance(protocol);\n+    }\n+\n+    public class TwinPnPTestInstance\n+    {\n+        public IotHubClientProtocol protocol;\n+        private Device deviceForRegistryManager;\n+        private Module moduleForRegistryManager;\n+\n+        private DeviceTwin sCDeviceTwin;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MTM4Mw=="}, "originalCommit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk2NjkyMw==", "bodyText": "Now would be a good time to rename the other uses of this naming then", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453966923", "createdAt": "2020-07-13T22:07:24Z", "author": {"login": "timtay-microsoft"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n+\n+        registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n+\n+        List inputs =  Arrays.asList(\n+                new Object[][]\n+                        {\n+                                {MQTT},\n+                                {MQTT_WS},\n+                        }\n+        );\n+\n+        return inputs;\n+    }\n+\n+    private static class TestDevice\n+    {\n+        String deviceId;\n+        String moduleId;\n+        DeviceClient deviceClient;\n+        ModuleClient moduleClient;\n+    }\n+\n+    public TwinPnPTests.TwinPnPTestInstance testInstance;\n+\n+    public TwinPnPTests(IotHubClientProtocol protocol) throws IOException\n+    {\n+        this.testInstance = new TwinPnPTestInstance(protocol);\n+    }\n+\n+    public class TwinPnPTestInstance\n+    {\n+        public IotHubClientProtocol protocol;\n+        private Device deviceForRegistryManager;\n+        private Module moduleForRegistryManager;\n+\n+        private DeviceTwin sCDeviceTwin;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MTM4Mw=="}, "originalCommit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTE4MDY3OnYy", "diffSide": "RIGHT", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMTo0NDo1M1rOGw7AFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMTo0NDo1M1rOGw7AFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MTUxMQ==", "bodyText": "No need to set this to null", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453951511", "createdAt": "2020-07-13T21:44:53Z", "author": {"login": "timtay-microsoft"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n+\n+        registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n+\n+        List inputs =  Arrays.asList(\n+                new Object[][]\n+                        {\n+                                {MQTT},\n+                                {MQTT_WS},\n+                        }\n+        );\n+\n+        return inputs;\n+    }\n+\n+    private static class TestDevice\n+    {\n+        String deviceId;\n+        String moduleId;\n+        DeviceClient deviceClient;\n+        ModuleClient moduleClient;\n+    }\n+\n+    public TwinPnPTests.TwinPnPTestInstance testInstance;\n+\n+    public TwinPnPTests(IotHubClientProtocol protocol) throws IOException\n+    {\n+        this.testInstance = new TwinPnPTestInstance(protocol);\n+    }\n+\n+    public class TwinPnPTestInstance\n+    {\n+        public IotHubClientProtocol protocol;\n+        private Device deviceForRegistryManager;\n+        private Module moduleForRegistryManager;\n+\n+        private DeviceTwin sCDeviceTwin;\n+        private TwinPnPTests.TestDevice testDevice;\n+\n+        public TwinPnPTestInstance(IotHubClientProtocol protocol) throws IOException\n+        {\n+            this.protocol = protocol;\n+            this.sCDeviceTwin = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n+        }\n+    }\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception\n+    {\n+        if (registryManager != null)\n+        {\n+            registryManager.close();\n+            registryManager = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTE4Mjk3OnYy", "diffSide": "RIGHT", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMTo0NToyMlrOGw7BRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMTo0OToxNlrOGw7MEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MTgxMw==", "bodyText": "What is this variable for?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453951813", "createdAt": "2020-07-13T21:45:22Z", "author": {"login": "prmathur-microsoft"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MjYyMA==", "bodyText": "isPullRequest? That value is used when evaluating whether or not to run CI tests", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453952620", "createdAt": "2020-07-13T21:46:28Z", "author": {"login": "timtay-microsoft"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MTgxMw=="}, "originalCommit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1NDU3OQ==", "bodyText": "not required, removed those", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453954579", "createdAt": "2020-07-13T21:49:16Z", "author": {"login": "bikamani"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MTgxMw=="}, "originalCommit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTE5NjU1OnYy", "diffSide": "RIGHT", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMTo0Nzo1NFrOGw7Ijg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMTo0OToyNlrOGw7MlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MzY3OA==", "bodyText": "are we using this for something?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453953678", "createdAt": "2020-07-13T21:47:54Z", "author": {"login": "vinagesh"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1NDcwOA==", "bodyText": "not required, removed those", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453954708", "createdAt": "2020-07-13T21:49:26Z", "author": {"login": "bikamani"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+        isPullRequest = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_PULL_REQUEST));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MzY3OA=="}, "originalCommit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTE5OTI1OnYy", "diffSide": "RIGHT", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMTo0ODoyNFrOGw7J4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMzo1MDowMFrOGxpP-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1NDAxOA==", "bodyText": "Can model id come from constant?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453954018", "createdAt": "2020-07-13T21:48:24Z", "author": {"login": "prmathur-microsoft"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1NTIwOA==", "bodyText": "sorry didn't get your question.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453955208", "createdAt": "2020-07-13T21:50:05Z", "author": {"login": "bikamani"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1NDAxOA=="}, "originalCommit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk2NTg0MQ==", "bodyText": "I'd actually like to see this randomized per test so there is no chance of one test interfering with another", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453965841", "createdAt": "2020-07-13T22:05:52Z", "author": {"login": "timtay-microsoft"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1NDAxOA=="}, "originalCommit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk2NjA5MA==", "bodyText": "Is there a restriction to the version number that would keep you from randomizing?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r453966090", "createdAt": "2020-07-13T22:06:14Z", "author": {"login": "timtay-microsoft"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1NDAxOA=="}, "originalCommit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwOTI0Mg==", "bodyText": "Not sure of restriction but added randomizing", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r454709242", "createdAt": "2020-07-14T23:50:00Z", "author": {"login": "bikamani"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,185 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.exceptions.ModuleClientException;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.exceptions.IotHubException;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.DeviceConnectionString;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.IntegrationTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.TestConstants;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private static final String ModelId = \"dtmi:com:test:e2e;1\";\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1NDAxOA=="}, "originalCommit": {"oid": "683d4e2a991ea047c87079bdea4458d429251717"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzOTUyNjA1OnYy", "diffSide": "RIGHT", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxODowNTowMlrOGyJx-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxODowOTozN1rOGyJ8sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI0MjIzNA==", "bodyText": "if basic hub, will none of the tests work?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r455242234", "createdAt": "2020-07-15T18:05:02Z", "author": {"login": "vinagesh"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,234 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.service.BaseDevice;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.auth.AuthenticationType;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.*;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+\n+import javax.net.ssl.SSLContext;\n+import java.io.IOException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static com.microsoft.azure.sdk.iot.service.auth.AuthenticationType.SAS;\n+import static com.microsoft.azure.sdk.iot.service.auth.AuthenticationType.SELF_SIGNED;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@StandardTierHubOnlyTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private String ModelId;\n+\n+    @Parameterized.Parameters(name = \"{0}_{1}_{2}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+\n+        registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n+\n+        X509CertificateGenerator certificateGenerator = new X509CertificateGenerator();\n+        String publicKeyCert = certificateGenerator.getPublicCertificate();\n+        String privateKey = certificateGenerator.getPrivateKey();\n+        String x509Thumbprint = certificateGenerator.getX509Thumbprint();\n+\n+        List inputs = new ArrayList();\n+        inputs.addAll(Arrays.asList(\n+                new Object[][]\n+                        {\n+                                //sas token device client, no proxy\n+                                {MQTT, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+                                {MQTT_WS, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                //x509 device client, no proxy\n+                                {MQTT, SELF_SIGNED, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                //sas token device client, with proxy\n+                                {MQTT_WS, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+                        }\n+        ));\n+\n+        if (!isBasicTierHub)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cc534392e7a1a58596b826e5e80b58e2cfa7ea6"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI0NDk3OA==", "bodyText": "In basic hub, modules are not supported.\nhttps://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-scaling", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/860#discussion_r455244978", "createdAt": "2020-07-15T18:09:37Z", "author": {"login": "bikamani"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/TwinPnPTests.java", "diffHunk": "@@ -0,0 +1,234 @@\n+package tests.integration.com.microsoft.azure.sdk.iot.iothub.twin;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.service.BaseDevice;\n+import com.microsoft.azure.sdk.iot.service.RegistryManager;\n+import com.microsoft.azure.sdk.iot.service.auth.AuthenticationType;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin;\n+import com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice;\n+import com.microsoft.azure.sdk.iot.service.Device;\n+import com.microsoft.azure.sdk.iot.service.Module;\n+import org.junit.After;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.*;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.IotHubTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.annotations.StandardTierHubOnlyTest;\n+import tests.integration.com.microsoft.azure.sdk.iot.helpers.Tools;\n+\n+import javax.net.ssl.SSLContext;\n+import java.io.IOException;\n+import java.util.*;\n+\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.*;\n+import static com.microsoft.azure.sdk.iot.device.IotHubClientProtocol.MQTT_WS;\n+import static com.microsoft.azure.sdk.iot.service.auth.AuthenticationType.SAS;\n+import static com.microsoft.azure.sdk.iot.service.auth.AuthenticationType.SELF_SIGNED;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test class containing all tests to be run for PnP.\n+ */\n+@IotHubTest\n+@StandardTierHubOnlyTest\n+@RunWith(Parameterized.class)\n+public class TwinPnPTests extends IntegrationTest\n+{\n+    protected static String iotHubConnectionString = \"\";\n+    private static RegistryManager registryManager;\n+    private String ModelId;\n+\n+    @Parameterized.Parameters(name = \"{0}_{1}_{2}\")\n+    public static Collection inputs() throws IOException\n+    {\n+        iotHubConnectionString = Tools.retrieveEnvironmentVariableValue(TestConstants.IOT_HUB_CONNECTION_STRING_ENV_VAR_NAME);\n+        isBasicTierHub = Boolean.parseBoolean(Tools.retrieveEnvironmentVariableValue(TestConstants.IS_BASIC_TIER_HUB_ENV_VAR_NAME));\n+\n+        registryManager = RegistryManager.createFromConnectionString(iotHubConnectionString);\n+\n+        X509CertificateGenerator certificateGenerator = new X509CertificateGenerator();\n+        String publicKeyCert = certificateGenerator.getPublicCertificate();\n+        String privateKey = certificateGenerator.getPrivateKey();\n+        String x509Thumbprint = certificateGenerator.getX509Thumbprint();\n+\n+        List inputs = new ArrayList();\n+        inputs.addAll(Arrays.asList(\n+                new Object[][]\n+                        {\n+                                //sas token device client, no proxy\n+                                {MQTT, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+                                {MQTT_WS, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                //x509 device client, no proxy\n+                                {MQTT, SELF_SIGNED, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+\n+                                //sas token device client, with proxy\n+                                {MQTT_WS, SAS, ClientType.DEVICE_CLIENT, publicKeyCert, privateKey, x509Thumbprint},\n+                        }\n+        ));\n+\n+        if (!isBasicTierHub)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI0MjIzNA=="}, "originalCommit": {"oid": "5cc534392e7a1a58596b826e5e80b58e2cfa7ea6"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2913, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}