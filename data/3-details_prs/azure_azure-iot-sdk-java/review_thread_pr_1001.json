{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzNDQ2MDM2", "number": 1001, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMDoxODoyMFrOE6v7xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMDoyOTowMFrOE6wM4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMDM4MjE1OnYy", "diffSide": "LEFT", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/provisioning/setup/ProvisioningCommon.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMDoxODoyMFrOH2AeHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMDoxODoyMFrOH2AeHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM5Mjg2MQ==", "bodyText": "We had this helper function in test code, but it would fit nicely as a helper function in our security provider class itself.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1001#discussion_r526392861", "createdAt": "2020-11-18T20:18:20Z", "author": {"login": "timtay-microsoft"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/provisioning/setup/ProvisioningCommon.java", "diffHunk": "@@ -606,13 +604,4 @@ private void createTestIndividualEnrollment(Attestation attestation, AllocationP\n         testInstance.individualEnrollment.setInitialTwin(twinState);\n         testInstance.individualEnrollment = testInstance.provisioningServiceClient.createOrUpdateIndividualEnrollment(testInstance.individualEnrollment);\n     }\n-\n-    public static byte[] ComputeDerivedSymmetricKey(String masterKey, String registrationId) throws InvalidKeyException, NoSuchAlgorithmException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cf0d9afbda9fa69015ae7044abbdc0e332e5070"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMDQxOTIxOnYy", "diffSide": "RIGHT", "path": "provisioning/provisioning-samples/provisioning-symmetrickey-group-sample/src/main/java/samples/com/microsoft/azure/sdk/iot/ProvisioningSymmetricKeyEnrollmentGroupSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMDoyNzowNlrOH2A1yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMDoyNzowNlrOH2A1yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM5ODkyMQ==", "bodyText": "nit: maybe rename this to be \"SYMMETRIC_KEY_ENROLLMENT_GROUP\"?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1001#discussion_r526398921", "createdAt": "2020-11-18T20:27:06Z", "author": {"login": "abhipsaMisra"}, "path": "provisioning/provisioning-samples/provisioning-symmetrickey-group-sample/src/main/java/samples/com/microsoft/azure/sdk/iot/ProvisioningSymmetricKeyEnrollmentGroupSample.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ *\n+ *  Copyright (c) Microsoft. All rights reserved.\n+ *  Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+ *\n+ */\n+\n+package samples.com.microsoft.azure.sdk.iot;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.provisioning.device.*;\n+import com.microsoft.azure.sdk.iot.provisioning.device.internal.exceptions.ProvisioningDeviceClientException;\n+import com.microsoft.azure.sdk.iot.provisioning.security.SecurityProviderSymmetricKey;\n+\n+import java.io.IOException;\n+import java.util.Scanner;\n+\n+/**\n+ * Symmetric Key authenticated enrollment group sample\n+ */\n+public class ProvisioningSymmetricKeyEnrollmentGroupSample\n+{\n+    // The scope Id of your DPS instance. This value can be retrieved from the Azure Portal\n+    private static final String SCOPE_ID = \"[Your scope ID here]\";\n+\n+    // Typically \"global.azure-devices-provisioning.net\"\n+    private static final String GLOBAL_ENDPOINT = \"[Your Provisioning Service Global Endpoint here]\";\n+\n+    // The symmetric key of the enrollment group. Unlike with individual enrollments, this key cannot be used directly when provisioning a device.\n+    // Instead, this sample will demonstrate how to derive the symmetric key for your particular device within the enrollment group.\n+    private static final String SYMMETRIC_KEY = \"[Enter your Symmetric Key here]\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e89d95b0c540607f94dfde5b63893f055c1598c0"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMDQyNTkzOnYy", "diffSide": "RIGHT", "path": "provisioning/provisioning-samples/provisioning-symmetrickey-group-sample/src/main/java/samples/com/microsoft/azure/sdk/iot/ProvisioningSymmetricKeyEnrollmentGroupSample.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMDoyOTowMVrOH2A54w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMDoyOTowMVrOH2A54w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM5OTk3MQ==", "bodyText": "good to know \ud83d\udc4d", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/1001#discussion_r526399971", "createdAt": "2020-11-18T20:29:01Z", "author": {"login": "abhipsaMisra"}, "path": "provisioning/provisioning-samples/provisioning-symmetrickey-group-sample/src/main/java/samples/com/microsoft/azure/sdk/iot/ProvisioningSymmetricKeyEnrollmentGroupSample.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ *\n+ *  Copyright (c) Microsoft. All rights reserved.\n+ *  Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+ *\n+ */\n+\n+package samples.com.microsoft.azure.sdk.iot;\n+\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.provisioning.device.*;\n+import com.microsoft.azure.sdk.iot.provisioning.device.internal.exceptions.ProvisioningDeviceClientException;\n+import com.microsoft.azure.sdk.iot.provisioning.security.SecurityProviderSymmetricKey;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Scanner;\n+\n+/**\n+ * Symmetric Key authenticated enrollment group sample\n+ */\n+public class ProvisioningSymmetricKeyEnrollmentGroupSample\n+{\n+    // The scope Id of your DPS instance. This value can be retrieved from the Azure Portal\n+    private static final String SCOPE_ID = \"[Your scope ID here]\";\n+\n+    // Typically \"global.azure-devices-provisioning.net\"\n+    private static final String GLOBAL_ENDPOINT = \"[Your Provisioning Service Global Endpoint here]\";\n+\n+    // The symmetric key of the enrollment group. Unlike with individual enrollments, this key cannot be used directly when provisioning a device.\n+    // Instead, this sample will demonstrate how to derive the symmetric key for your particular device within the enrollment group.\n+    private static final String SYMMETRIC_KEY = \"[Enter your Symmetric Key here]\";\n+\n+    // The Id to assign to this device when it is provisioned to an IoT Hub. This value is arbitrary outside of some\n+    // character limitations. For sample purposes, this value is filled in for you, but it may be changed.\n+    private static final String PROVISIONED_DEVICE_ID = \"myProvisionedDevice\";\n+\n+    // Uncomment one line to choose which protocol you'd like to use\n+    private static final ProvisioningDeviceClientTransportProtocol PROVISIONING_DEVICE_CLIENT_TRANSPORT_PROTOCOL = ProvisioningDeviceClientTransportProtocol.HTTPS;\n+    //private static final ProvisioningDeviceClientTransportProtocol PROVISIONING_DEVICE_CLIENT_TRANSPORT_PROTOCOL = ProvisioningDeviceClientTransportProtocol.MQTT;\n+    //private static final ProvisioningDeviceClientTransportProtocol PROVISIONING_DEVICE_CLIENT_TRANSPORT_PROTOCOL = ProvisioningDeviceClientTransportProtocol.MQTT_WS;\n+    //private static final ProvisioningDeviceClientTransportProtocol PROVISIONING_DEVICE_CLIENT_TRANSPORT_PROTOCOL = ProvisioningDeviceClientTransportProtocol.AMQPS;\n+    //private static final ProvisioningDeviceClientTransportProtocol PROVISIONING_DEVICE_CLIENT_TRANSPORT_PROTOCOL = ProvisioningDeviceClientTransportProtocol.AMQPS_WS;\n+\n+    private static final int MAX_TIME_TO_WAIT_FOR_REGISTRATION = 10000; // in milliseconds\n+\n+    static class ProvisioningStatus\n+    {\n+        ProvisioningDeviceClientRegistrationResult provisioningDeviceClientRegistrationInfoClient = new ProvisioningDeviceClientRegistrationResult();\n+        Exception exception;\n+    }\n+\n+    static class ProvisioningDeviceClientRegistrationCallbackImpl implements ProvisioningDeviceClientRegistrationCallback\n+    {\n+        @Override\n+        public void run(ProvisioningDeviceClientRegistrationResult provisioningDeviceClientRegistrationResult, Exception exception, Object context)\n+        {\n+            if (context instanceof ProvisioningStatus)\n+            {\n+                ProvisioningStatus status = (ProvisioningStatus) context;\n+                status.provisioningDeviceClientRegistrationInfoClient = provisioningDeviceClientRegistrationResult;\n+                status.exception = exception;\n+            }\n+            else\n+            {\n+                System.out.println(\"Received unknown context\");\n+            }\n+        }\n+    }\n+\n+    private static class IotHubEventCallbackImpl implements IotHubEventCallback\n+    {\n+        @Override\n+        public void execute(IotHubStatusCode responseStatus, Object callbackContext)\n+        {\n+            System.out.println(\"Message received! Response status: \" + responseStatus);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception\n+    {\n+        System.out.println(\"Starting...\");\n+        System.out.println(\"Beginning setup.\");\n+        SecurityProviderSymmetricKey securityClientSymmetricKey = null;\n+        Scanner scanner = new Scanner(System.in);\n+        DeviceClient deviceClient = null;\n+\n+        // Since enrollment groups can be used to provision more than one device, the service requires you to derive the\n+        // symmetric key for your device to provision based on the symmetric key of the enrollment group, and the desired\n+        // device Id of the device you are provisioning\n+\n+        // For the sake of security, you shouldn't save keys into String variables as that places them in heap memory. For the sake\n+        // of simplicity within this sample, though, we will save it as a string. Typically this key would be loaded as byte[] so that\n+        // it can be removed from stack memory.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2548a0a035fa58deeb6c7a42db3724e15277df77"}, "originalPosition": 94}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2632, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}