{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2Nzc5NDkx", "number": 791, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOToyODoxNlrOEB5C6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMzoyODo0OFrOECWwqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDE4NjY3OnYy", "diffSide": "RIGHT", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/ClientOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOToyODoxNlrOGeA8ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOToyODoxNlrOGeA8ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyNTkyNQ==", "bodyText": "I am calling this the digital twin model id", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434125925", "createdAt": "2020-06-02T19:28:16Z", "author": {"login": "abhipsaMisra"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/ClientOptions.java", "diffHunk": "@@ -0,0 +1,17 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.device;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+public final class ClientOptions\n+{\n+    /**\n+     * The Plug and Play Model Id associated with the device identity.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDE5ODgxOnYy", "diffSide": "RIGHT", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClientConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTozMjowMVrOGeBD5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTozMDo1M1rOGeErRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyNzg0NA==", "bodyText": "Isn't lombok so cool! :)", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434127844", "createdAt": "2020-06-02T19:32:01Z", "author": {"login": "abhipsaMisra"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClientConfig.java", "diffHunk": "@@ -38,6 +39,10 @@\n     private boolean useWebsocket;\n     private ProxySettings proxySettings;\n \n+    @Getter\n+    @Setter(AccessLevel.PROTECTED)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2NzM0OA==", "bodyText": "why not private?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434167348", "createdAt": "2020-06-02T20:50:07Z", "author": {"login": "prmathur-microsoft"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClientConfig.java", "diffHunk": "@@ -38,6 +39,10 @@\n     private boolean useWebsocket;\n     private ProxySettings proxySettings;\n \n+    @Getter\n+    @Setter(AccessLevel.PROTECTED)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyNzg0NA=="}, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE4NzA3Ng==", "bodyText": "lombok looks cool. New learnings for me :)", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434187076", "createdAt": "2020-06-02T21:30:53Z", "author": {"login": "vinagesh"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClientConfig.java", "diffHunk": "@@ -38,6 +39,10 @@\n     private boolean useWebsocket;\n     private ProxySettings proxySettings;\n \n+    @Getter\n+    @Setter(AccessLevel.PROTECTED)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyNzg0NA=="}, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDIwNjQ5OnYy", "diffSide": "RIGHT", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/net/IotHubUri.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTozNDowMlrOGeBIdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTozNDowMlrOGeBIdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyOTAxMw==", "bodyText": "I renamed this to API_VERSION_PREVIEW, and added a comment that clarifies that this is for pnp support", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434129013", "createdAt": "2020-06-02T19:34:02Z", "author": {"login": "abhipsaMisra"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/net/IotHubUri.java", "diffHunk": "@@ -28,6 +28,9 @@\n     /** The API version will be passed as a param in the URI. */\n     public static final String API_VERSION = \"api-version=\" + TransportUtils.IOTHUB_API_VERSION;\n \n+    /** The API version will be passed as a param in the URI for PnP. */\n+    public static final String PNP_API_VERSION = \"api-version=\" + TransportUtils.PNP_IOTHUB_API_VERSION;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDIwNzM4OnYy", "diffSide": "RIGHT", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/TransportUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTozNDoyMlrOGeBJDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTozOTo0NlrOGeBTow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyOTE2Nw==", "bodyText": "This as \"preview\" as well", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434129167", "createdAt": "2020-06-02T19:34:22Z", "author": {"login": "abhipsaMisra"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/TransportUtils.java", "diffHunk": "@@ -8,6 +8,7 @@\n public class TransportUtils\n {\n     public static String IOTHUB_API_VERSION = \"2019-10-01\";\n+    public static String PNP_IOTHUB_API_VERSION = \"2020-05-31-preview\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzMTg3NQ==", "bodyText": "sure can change it", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434131875", "createdAt": "2020-06-02T19:39:46Z", "author": {"login": "bikamani"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/TransportUtils.java", "diffHunk": "@@ -8,6 +8,7 @@\n public class TransportUtils\n {\n     public static String IOTHUB_API_VERSION = \"2019-10-01\";\n+    public static String PNP_IOTHUB_API_VERSION = \"2020-05-31-preview\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyOTE2Nw=="}, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDIxMTYyOnYy", "diffSide": "RIGHT", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/mqtt/MqttIotHubConnection.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTozNTo0N1rOGeBL1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1MDo1OFrOGeFMsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyOTg3OQ==", "bodyText": "modelId == null || modelId.isEmpty()", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434129879", "createdAt": "2020-06-02T19:35:47Z", "author": {"login": "abhipsaMisra"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/mqtt/MqttIotHubConnection.java", "diffHunk": "@@ -151,7 +151,18 @@ else if (this.config.getAuthenticationType() == DeviceClientConfig.AuthType.X509\n                     clientId += \"/\" + moduleId;\n                 }\n \n-                this.iotHubUserName = this.config.getIotHubHostname() + \"/\" + clientId + \"/\" + API_VERSION + \"&\" + clientUserAgentIdentifier;\n+                String apiVersion;\n+                String modelId = this.config.getModelId();\n+                if(modelId == null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NTYzNA==", "bodyText": "Looks like java does not have a single function for this :)", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434195634", "createdAt": "2020-06-02T21:50:58Z", "author": {"login": "vinagesh"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/mqtt/MqttIotHubConnection.java", "diffHunk": "@@ -151,7 +151,18 @@ else if (this.config.getAuthenticationType() == DeviceClientConfig.AuthType.X509\n                     clientId += \"/\" + moduleId;\n                 }\n \n-                this.iotHubUserName = this.config.getIotHubHostname() + \"/\" + clientId + \"/\" + API_VERSION + \"&\" + clientUserAgentIdentifier;\n+                String apiVersion;\n+                String modelId = this.config.getModelId();\n+                if(modelId == null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyOTg3OQ=="}, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDIxNTAxOnYy", "diffSide": "RIGHT", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/mqtt/MqttIotHubConnection.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTozNjo1MFrOGeBN8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMzowODoyNVrOGeG3Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzMDQxOA==", "bodyText": "rename this to serverParam or something similar, this has both api version and model Id (for preview APIs)", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434130418", "createdAt": "2020-06-02T19:36:50Z", "author": {"login": "abhipsaMisra"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/mqtt/MqttIotHubConnection.java", "diffHunk": "@@ -151,7 +151,18 @@ else if (this.config.getAuthenticationType() == DeviceClientConfig.AuthType.X509\n                     clientId += \"/\" + moduleId;\n                 }\n \n-                this.iotHubUserName = this.config.getIotHubHostname() + \"/\" + clientId + \"/\" + API_VERSION + \"&\" + clientUserAgentIdentifier;\n+                String apiVersion;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzMjY5Mg==", "bodyText": "I know. I thought about a better naming! I would be looking any other suggestions too other than serverParam. :)", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434132692", "createdAt": "2020-06-02T19:41:30Z", "author": {"login": "bikamani"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/mqtt/MqttIotHubConnection.java", "diffHunk": "@@ -151,7 +151,18 @@ else if (this.config.getAuthenticationType() == DeviceClientConfig.AuthType.X509\n                     clientId += \"/\" + moduleId;\n                 }\n \n-                this.iotHubUserName = this.config.getIotHubHostname() + \"/\" + clientId + \"/\" + API_VERSION + \"&\" + clientUserAgentIdentifier;\n+                String apiVersion;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzMDQxOA=="}, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NzE5Mg==", "bodyText": "An option to consider might be - Define two variabes - apiVersion, modelIdParam and initialize both inside the if-else. When you do str concatenation later, it should just work (if it works like c#)\nthis.iotHubUserName = this.config.getIotHubHostname() + \"/\" + clientId + \"/?api-version=\" + apiVersion + modelIdParam\nIn java i'm not entirely sure what happens if modelIdParam = null during concatenation", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434197192", "createdAt": "2020-06-02T21:54:51Z", "author": {"login": "vinagesh"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/mqtt/MqttIotHubConnection.java", "diffHunk": "@@ -151,7 +151,18 @@ else if (this.config.getAuthenticationType() == DeviceClientConfig.AuthType.X509\n                     clientId += \"/\" + moduleId;\n                 }\n \n-                this.iotHubUserName = this.config.getIotHubHostname() + \"/\" + clientId + \"/\" + API_VERSION + \"&\" + clientUserAgentIdentifier;\n+                String apiVersion;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzMDQxOA=="}, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIyMjk0Mg==", "bodyText": "I like your suggestion. I also need to check how it works in case where modelId is not part of username. Currently I have it renamed as per Abhipsa's comment", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434222942", "createdAt": "2020-06-02T23:08:25Z", "author": {"login": "bikamani"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/mqtt/MqttIotHubConnection.java", "diffHunk": "@@ -151,7 +151,18 @@ else if (this.config.getAuthenticationType() == DeviceClientConfig.AuthType.X509\n                     clientId += \"/\" + moduleId;\n                 }\n \n-                this.iotHubUserName = this.config.getIotHubHostname() + \"/\" + clientId + \"/\" + API_VERSION + \"&\" + clientUserAgentIdentifier;\n+                String apiVersion;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzMDQxOA=="}, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDIyNDE5OnYy", "diffSide": "RIGHT", "path": "device/iot-device-client/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/device/DeviceClientTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTozOTo0OVrOGeBTuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTo0ODo0M1rOGeBlXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzMTg5Ng==", "bodyText": "how is this assertion relevant here?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434131896", "createdAt": "2020-06-02T19:39:49Z", "author": {"login": "abhipsaMisra"}, "path": "device/iot-device-client/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/device/DeviceClientTest.java", "diffHunk": "@@ -147,6 +148,34 @@ public void constructorSuccess() throws URISyntaxException, IOException\n         };\n     }\n \n+    @Test\n+    public void constructorWithClientOptionsSuccess() throws URISyntaxException, IOException\n+    {\n+        // arrange\n+        final String connString = \"HostName=iothub.device.com;CredentialType=SharedAccessKey;CredentialScope=Device;deviceId=testdevice;SharedAccessKey=adjkl234j52=;\";\n+        final IotHubClientProtocol protocol = IotHubClientProtocol.MQTT;\n+        final ClientOptions clientOptions = new ClientOptions();\n+        clientOptions.setModelId(\"dtmi:Company:device:1\");\n+\n+        // act\n+        final DeviceClient client = new DeviceClient(connString, protocol, clientOptions);\n+\n+        // assert\n+        new Verifications()\n+        {\n+            {\n+                IotHubConnectionString iotHubConnectionString = Deencapsulation.newInstance(IotHubConnectionString.class, connString);\n+                times = 1;\n+\n+                IoTHubConnectionType ioTHubConnectionType = Deencapsulation.getField(client, \"ioTHubConnectionType\");\n+                assertEquals(SINGLE_CLIENT, ioTHubConnectionType);\n+\n+                TransportClient transportClient = Deencapsulation.getField(client, \"transportClient\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzNDg0Nw==", "bodyText": "From our legacy tests:  The constructor shall set the transportClient to null.\nWhat do you think is releavant?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434134847", "createdAt": "2020-06-02T19:45:41Z", "author": {"login": "bikamani"}, "path": "device/iot-device-client/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/device/DeviceClientTest.java", "diffHunk": "@@ -147,6 +148,34 @@ public void constructorSuccess() throws URISyntaxException, IOException\n         };\n     }\n \n+    @Test\n+    public void constructorWithClientOptionsSuccess() throws URISyntaxException, IOException\n+    {\n+        // arrange\n+        final String connString = \"HostName=iothub.device.com;CredentialType=SharedAccessKey;CredentialScope=Device;deviceId=testdevice;SharedAccessKey=adjkl234j52=;\";\n+        final IotHubClientProtocol protocol = IotHubClientProtocol.MQTT;\n+        final ClientOptions clientOptions = new ClientOptions();\n+        clientOptions.setModelId(\"dtmi:Company:device:1\");\n+\n+        // act\n+        final DeviceClient client = new DeviceClient(connString, protocol, clientOptions);\n+\n+        // assert\n+        new Verifications()\n+        {\n+            {\n+                IotHubConnectionString iotHubConnectionString = Deencapsulation.newInstance(IotHubConnectionString.class, connString);\n+                times = 1;\n+\n+                IoTHubConnectionType ioTHubConnectionType = Deencapsulation.getField(client, \"ioTHubConnectionType\");\n+                assertEquals(SINGLE_CLIENT, ioTHubConnectionType);\n+\n+                TransportClient transportClient = Deencapsulation.getField(client, \"transportClient\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzMTg5Ng=="}, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzNjQxNQ==", "bodyText": "I don't understand why initializing a device client sets the transportClient to null, and how that is relevant to this test case.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434136415", "createdAt": "2020-06-02T19:48:43Z", "author": {"login": "abhipsaMisra"}, "path": "device/iot-device-client/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/device/DeviceClientTest.java", "diffHunk": "@@ -147,6 +148,34 @@ public void constructorSuccess() throws URISyntaxException, IOException\n         };\n     }\n \n+    @Test\n+    public void constructorWithClientOptionsSuccess() throws URISyntaxException, IOException\n+    {\n+        // arrange\n+        final String connString = \"HostName=iothub.device.com;CredentialType=SharedAccessKey;CredentialScope=Device;deviceId=testdevice;SharedAccessKey=adjkl234j52=;\";\n+        final IotHubClientProtocol protocol = IotHubClientProtocol.MQTT;\n+        final ClientOptions clientOptions = new ClientOptions();\n+        clientOptions.setModelId(\"dtmi:Company:device:1\");\n+\n+        // act\n+        final DeviceClient client = new DeviceClient(connString, protocol, clientOptions);\n+\n+        // assert\n+        new Verifications()\n+        {\n+            {\n+                IotHubConnectionString iotHubConnectionString = Deencapsulation.newInstance(IotHubConnectionString.class, connString);\n+                times = 1;\n+\n+                IoTHubConnectionType ioTHubConnectionType = Deencapsulation.getField(client, \"ioTHubConnectionType\");\n+                assertEquals(SINGLE_CLIENT, ioTHubConnectionType);\n+\n+                TransportClient transportClient = Deencapsulation.getField(client, \"transportClient\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzMTg5Ng=="}, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDIyODAzOnYy", "diffSide": "RIGHT", "path": "device/iot-device-client/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/device/DeviceClientTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTo0MTowN1rOGeBWJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTo0MTowN1rOGeBWJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzMjUxNg==", "bodyText": "Todo here", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434132516", "createdAt": "2020-06-02T19:41:07Z", "author": {"login": "abhipsaMisra"}, "path": "device/iot-device-client/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/device/DeviceClientTest.java", "diffHunk": "@@ -245,6 +310,28 @@ public void createFromSecurityProviderUsesUriAndDeviceIdAndSavesSecurityProvider\n         };\n     }\n \n+    @Test\n+    public void createFromSecurityProviderUsesUriAndDeviceIdAndSavesSecurityProviderAndCreatesDeviceIOWithClientOptions() throws URISyntaxException, IOException\n+    {\n+        //arrange\n+        final String expectedUri = \"some uri\";\n+        final String expectedDeviceId = \"some device id\";\n+        final IotHubClientProtocol expectedProtocol = IotHubClientProtocol.HTTPS;\n+        final ClientOptions clientOptions = new ClientOptions();\n+        clientOptions.setModelId(\"dtmi:Company:device:1\");\n+\n+        //act\n+        DeviceClient.createFromSecurityProvider(expectedUri, expectedDeviceId, mockSecurityProvider, expectedProtocol);\n+\n+        //assert\n+        new Verifications()\n+        {\n+            {\n+                //TODO add check for super() call", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDIzMTA2OnYy", "diffSide": "RIGHT", "path": "device/iot-device-client/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/device/DeviceClientTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTo0MjoxN1rOGeBYOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTo0ODowMFrOGeBj_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzMzA1MA==", "bodyText": "What are we doing with iotHubConnectionString here?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434133050", "createdAt": "2020-06-02T19:42:17Z", "author": {"login": "abhipsaMisra"}, "path": "device/iot-device-client/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/device/DeviceClientTest.java", "diffHunk": "@@ -147,6 +148,34 @@ public void constructorSuccess() throws URISyntaxException, IOException\n         };\n     }\n \n+    @Test\n+    public void constructorWithClientOptionsSuccess() throws URISyntaxException, IOException\n+    {\n+        // arrange\n+        final String connString = \"HostName=iothub.device.com;CredentialType=SharedAccessKey;CredentialScope=Device;deviceId=testdevice;SharedAccessKey=adjkl234j52=;\";\n+        final IotHubClientProtocol protocol = IotHubClientProtocol.MQTT;\n+        final ClientOptions clientOptions = new ClientOptions();\n+        clientOptions.setModelId(\"dtmi:Company:device:1\");\n+\n+        // act\n+        final DeviceClient client = new DeviceClient(connString, protocol, clientOptions);\n+\n+        // assert\n+        new Verifications()\n+        {\n+            {\n+                IotHubConnectionString iotHubConnectionString = Deencapsulation.newInstance(IotHubConnectionString.class, connString);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzNjA2Mw==", "bodyText": "good catch, it's unused", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434136063", "createdAt": "2020-06-02T19:48:00Z", "author": {"login": "bikamani"}, "path": "device/iot-device-client/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/device/DeviceClientTest.java", "diffHunk": "@@ -147,6 +148,34 @@ public void constructorSuccess() throws URISyntaxException, IOException\n         };\n     }\n \n+    @Test\n+    public void constructorWithClientOptionsSuccess() throws URISyntaxException, IOException\n+    {\n+        // arrange\n+        final String connString = \"HostName=iothub.device.com;CredentialType=SharedAccessKey;CredentialScope=Device;deviceId=testdevice;SharedAccessKey=adjkl234j52=;\";\n+        final IotHubClientProtocol protocol = IotHubClientProtocol.MQTT;\n+        final ClientOptions clientOptions = new ClientOptions();\n+        clientOptions.setModelId(\"dtmi:Company:device:1\");\n+\n+        // act\n+        final DeviceClient client = new DeviceClient(connString, protocol, clientOptions);\n+\n+        // assert\n+        new Verifications()\n+        {\n+            {\n+                IotHubConnectionString iotHubConnectionString = Deencapsulation.newInstance(IotHubConnectionString.class, connString);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzMzA1MA=="}, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDIzMjk2OnYy", "diffSide": "RIGHT", "path": "device/iot-device-client/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/device/DeviceClientTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTo0Mjo1M1rOGeBZdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTo0Mjo1M1rOGeBZdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzMzM2NQ==", "bodyText": "Can you explain what we are testing here?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434133365", "createdAt": "2020-06-02T19:42:53Z", "author": {"login": "abhipsaMisra"}, "path": "device/iot-device-client/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/device/DeviceClientTest.java", "diffHunk": "@@ -222,6 +251,42 @@ public void constructorWithSSLContextSuccess(@Mocked final SSLContext mockedSSLC\n         };\n     }\n \n+    @Test\n+    public void constructorWithSSLContextClientOptionsSuccess(@Mocked final SSLContext mockedSSLContext) throws URISyntaxException\n+    {\n+        // arrange\n+        final String connString =\n+                \"HostName=iothub.device.com;deviceId=testdevice;x509=true\";\n+        final IotHubClientProtocol protocol = IotHubClientProtocol.MQTT;\n+        final ClientOptions clientOptions = new ClientOptions();\n+        clientOptions.setModelId(\"dtmi:Company:device:1\");\n+\n+        new Expectations()\n+        {\n+            {\n+                new IotHubConnectionString(connString);\n+                result = mockIotHubConnectionString;\n+            }\n+        };\n+\n+        // act\n+        final DeviceClient client = new DeviceClient(connString, protocol, mockedSSLContext, clientOptions);\n+\n+        // assert\n+        new Verifications()\n+        {\n+            {\n+                IoTHubConnectionType ioTHubConnectionType = Deencapsulation.getField(client, \"ioTHubConnectionType\");\n+                assertEquals(SINGLE_CLIENT, ioTHubConnectionType);\n+\n+                TransportClient transportClient = Deencapsulation.getField(client, \"transportClient\");\n+                assertNull(transportClient);\n+\n+                new DeviceClientConfig(mockIotHubConnectionString, mockedSSLContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDI0NDA3OnYy", "diffSide": "RIGHT", "path": "device/iot-device-client/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/device/transport/mqtt/MqttIotHubConnectionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTo0NjoxM1rOGeBgSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTo0NjoxM1rOGeBgSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzNTExNQ==", "bodyText": "nit: this assertion is not really relevant to this test", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434135115", "createdAt": "2020-06-02T19:46:13Z", "author": {"login": "abhipsaMisra"}, "path": "device/iot-device-client/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/device/transport/mqtt/MqttIotHubConnectionTest.java", "diffHunk": "@@ -308,6 +310,53 @@ public void openEstablishesConnectionUsingCorrectConfig() throws IOException, Tr\n         };\n     }\n \n+    @Test\n+    public void openEstablishesConnectionUsingModelIdSetsCorrectPreviewApiVersion() throws IOException, TransportException\n+    {\n+        final String expectedSasToken = \"someToken\";\n+        final String serverUri = SSL_PREFIX + iotHubHostName + SSL_PORT_SUFFIX;\n+        baseExpectations();\n+\n+        new Expectations()\n+        {\n+            {\n+                mockConfig.getAuthenticationType();\n+                result = DeviceClientConfig.AuthType.SAS_TOKEN;\n+                mockConfig.getSasTokenAuthentication().getRenewedSasToken(false, false);\n+                result = expectedSasToken;\n+                mockConfig.isUseWebsocket();\n+                result = false;\n+                mockConfig.getModelId();\n+                result = modelId;\n+            }\n+        };\n+\n+        MqttIotHubConnection connection = new MqttIotHubConnection(mockConfig);\n+        Deencapsulation.setField(connection, \"listener\", mockedIotHubListener);\n+        connection.open(mockedQueue, mockedScheduledExecutorService);\n+\n+        final String actualIotHubUserName = Deencapsulation.getField(connection, \"iotHubUserName\");\n+\n+        String clientIdentifier = \"DeviceClientType=\" + URLEncoder.encode(TransportUtils.USER_AGENT_STRING, \"UTF-8\").replaceAll(\"\\\\+\", \"%20\");\n+        assertTrue(actualIotHubUserName.contains(iotHubHostName + \"/\" + deviceId + \"/\" + PNP_API_VERSION));\n+\n+        final String actualUserPassword = Deencapsulation.getField(connection, \"iotHubUserPassword\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDI0NDk3OnYy", "diffSide": "RIGHT", "path": "device/iot-device-client/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/device/transport/mqtt/MqttIotHubConnectionTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTo0NjozMFrOGeBg2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTo1NjoyM1rOGeB08w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzNTI1OQ==", "bodyText": "Add another test for scenario where you don't set the model Id", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434135259", "createdAt": "2020-06-02T19:46:30Z", "author": {"login": "abhipsaMisra"}, "path": "device/iot-device-client/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/device/transport/mqtt/MqttIotHubConnectionTest.java", "diffHunk": "@@ -308,6 +310,53 @@ public void openEstablishesConnectionUsingCorrectConfig() throws IOException, Tr\n         };\n     }\n \n+    @Test\n+    public void openEstablishesConnectionUsingModelIdSetsCorrectPreviewApiVersion() throws IOException, TransportException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzODg1Mg==", "bodyText": "If you look at openEstablishesConnectionUsingCorrectConfig - this does not set model id and makes sure API version is IOTHUB_API_VERSION so it is already covered", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434138852", "createdAt": "2020-06-02T19:53:22Z", "author": {"login": "bikamani"}, "path": "device/iot-device-client/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/device/transport/mqtt/MqttIotHubConnectionTest.java", "diffHunk": "@@ -308,6 +310,53 @@ public void openEstablishesConnectionUsingCorrectConfig() throws IOException, Tr\n         };\n     }\n \n+    @Test\n+    public void openEstablishesConnectionUsingModelIdSetsCorrectPreviewApiVersion() throws IOException, TransportException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzNTI1OQ=="}, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0MDQwMw==", "bodyText": "cool", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434140403", "createdAt": "2020-06-02T19:56:23Z", "author": {"login": "abhipsaMisra"}, "path": "device/iot-device-client/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/device/transport/mqtt/MqttIotHubConnectionTest.java", "diffHunk": "@@ -308,6 +310,53 @@ public void openEstablishesConnectionUsingCorrectConfig() throws IOException, Tr\n         };\n     }\n \n+    @Test\n+    public void openEstablishesConnectionUsingModelIdSetsCorrectPreviewApiVersion() throws IOException, TransportException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzNTI1OQ=="}, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDMyNjI0OnYy", "diffSide": "RIGHT", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/ClientOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDoxMjoyMlrOGeCUkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTozMToyMVrOGeEsCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0ODQ5OQ==", "bodyText": "Add a note that non plug and play users should not set this value", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434148499", "createdAt": "2020-06-02T20:12:22Z", "author": {"login": "timtay-microsoft"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/ClientOptions.java", "diffHunk": "@@ -0,0 +1,17 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.device;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+public final class ClientOptions\n+{\n+    /**\n+     * The Plug and Play Model Id associated with the device identity.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE4NzI3Mw==", "bodyText": "will do", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434187273", "createdAt": "2020-06-02T21:31:21Z", "author": {"login": "bikamani"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/ClientOptions.java", "diffHunk": "@@ -0,0 +1,17 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.device;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+public final class ClientOptions\n+{\n+    /**\n+     * The Plug and Play Model Id associated with the device identity.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0ODQ5OQ=="}, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDMyODM3OnYy", "diffSide": "RIGHT", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/ClientOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDoxMzowMFrOGeCV3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDoxMzowMFrOGeCV3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0ODgyOA==", "bodyText": "Add a description to this class. Something about how it is for constructor time options that won't change for as long as this client exists", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434148828", "createdAt": "2020-06-02T20:13:00Z", "author": {"login": "timtay-microsoft"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/ClientOptions.java", "diffHunk": "@@ -0,0 +1,17 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.device;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+public final class ClientOptions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDMzMDc0OnYy", "diffSide": "RIGHT", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDoxMzo1NVrOGeCXfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTozNTozM1rOGeEzMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0OTI0NA==", "bodyText": "Just make this constructor call your new constructor but with a null client options. No need to call commonConstructorVerifications/setup here and in your new constructor", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434149244", "createdAt": "2020-06-02T20:13:55Z", "author": {"login": "timtay-microsoft"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java", "diffHunk": "@@ -173,7 +173,7 @@ public DeviceClient(String connString, TransportClient transportClient) throws U\n     public DeviceClient(String connString, IotHubClientProtocol protocol) throws URISyntaxException, IllegalArgumentException\n     {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE4OTEwNA==", "bodyText": "Agreed", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434189104", "createdAt": "2020-06-02T21:35:33Z", "author": {"login": "bikamani"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java", "diffHunk": "@@ -173,7 +173,7 @@ public DeviceClient(String connString, TransportClient transportClient) throws U\n     public DeviceClient(String connString, IotHubClientProtocol protocol) throws URISyntaxException, IllegalArgumentException\n     {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0OTI0NA=="}, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDM0MDI4OnYy", "diffSide": "RIGHT", "path": "device/iot-device-client/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/device/DeviceClientTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDoxNzowOVrOGeCd0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo0MTo1N1rOGeE96w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1MDg2Nw==", "bodyText": "What is this import for?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434150867", "createdAt": "2020-06-02T20:17:09Z", "author": {"login": "timtay-microsoft"}, "path": "device/iot-device-client/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/device/DeviceClientTest.java", "diffHunk": "@@ -11,6 +11,7 @@\n import com.microsoft.azure.sdk.iot.device.fileupload.FileUpload;\n import com.microsoft.azure.sdk.iot.device.transport.amqps.IoTHubConnectionType;\n import com.microsoft.azure.sdk.iot.provisioning.security.SecurityProvider;\n+import com.sun.security.ntlm.Client;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MTg1MQ==", "bodyText": "I'll remove it, it may have been added when I was adding some changes.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434191851", "createdAt": "2020-06-02T21:41:57Z", "author": {"login": "bikamani"}, "path": "device/iot-device-client/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/device/DeviceClientTest.java", "diffHunk": "@@ -11,6 +11,7 @@\n import com.microsoft.azure.sdk.iot.device.fileupload.FileUpload;\n import com.microsoft.azure.sdk.iot.device.transport.amqps.IoTHubConnectionType;\n import com.microsoft.azure.sdk.iot.provisioning.security.SecurityProvider;\n+import com.sun.security.ntlm.Client;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1MDg2Nw=="}, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDM0MTIyOnYy", "diffSide": "RIGHT", "path": "device/iot-device-client/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/device/DeviceClientTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDoxNzoyNlrOGeCedQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo0Mjo0NVrOGeE_TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1MTAyOQ==", "bodyText": "TODO?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434151029", "createdAt": "2020-06-02T20:17:26Z", "author": {"login": "timtay-microsoft"}, "path": "device/iot-device-client/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/device/DeviceClientTest.java", "diffHunk": "@@ -245,6 +310,28 @@ public void createFromSecurityProviderUsesUriAndDeviceIdAndSavesSecurityProvider\n         };\n     }\n \n+    @Test\n+    public void createFromSecurityProviderUsesUriAndDeviceIdAndSavesSecurityProviderAndCreatesDeviceIOWithClientOptions() throws URISyntaxException, IOException\n+    {\n+        //arrange\n+        final String expectedUri = \"some uri\";\n+        final String expectedDeviceId = \"some device id\";\n+        final IotHubClientProtocol expectedProtocol = IotHubClientProtocol.HTTPS;\n+        final ClientOptions clientOptions = new ClientOptions();\n+        clientOptions.setModelId(\"dtmi:Company:device:1\");\n+\n+        //act\n+        DeviceClient.createFromSecurityProvider(expectedUri, expectedDeviceId, mockSecurityProvider, expectedProtocol);\n+\n+        //assert\n+        new Verifications()\n+        {\n+            {\n+                //TODO add check for super() call", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MjIwNQ==", "bodyText": "I'll take care of this.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434192205", "createdAt": "2020-06-02T21:42:45Z", "author": {"login": "bikamani"}, "path": "device/iot-device-client/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/device/DeviceClientTest.java", "diffHunk": "@@ -245,6 +310,28 @@ public void createFromSecurityProviderUsesUriAndDeviceIdAndSavesSecurityProvider\n         };\n     }\n \n+    @Test\n+    public void createFromSecurityProviderUsesUriAndDeviceIdAndSavesSecurityProviderAndCreatesDeviceIOWithClientOptions() throws URISyntaxException, IOException\n+    {\n+        //arrange\n+        final String expectedUri = \"some uri\";\n+        final String expectedDeviceId = \"some device id\";\n+        final IotHubClientProtocol expectedProtocol = IotHubClientProtocol.HTTPS;\n+        final ClientOptions clientOptions = new ClientOptions();\n+        clientOptions.setModelId(\"dtmi:Company:device:1\");\n+\n+        //act\n+        DeviceClient.createFromSecurityProvider(expectedUri, expectedDeviceId, mockSecurityProvider, expectedProtocol);\n+\n+        //assert\n+        new Verifications()\n+        {\n+            {\n+                //TODO add check for super() call", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1MTAyOQ=="}, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDM0MjgyOnYy", "diffSide": "RIGHT", "path": "device/iot-device-client/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/device/transport/mqtt/MqttIotHubConnectionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDoxNzo1OVrOGeCfgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDoxNzo1OVrOGeCfgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1MTI5Ng==", "bodyText": "factor out the \"?api-version=\" string and reference it in these two places", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434151296", "createdAt": "2020-06-02T20:17:59Z", "author": {"login": "timtay-microsoft"}, "path": "device/iot-device-client/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/device/transport/mqtt/MqttIotHubConnectionTest.java", "diffHunk": "@@ -42,8 +42,10 @@\n     final String iotHubHostName = \"test.host.name\";\n     final String hubName = \"test.iothub\";\n     final String deviceId = \"test-deviceId\";\n+    final String modelId = \"dtmi:my:company:namespace;1\";\n     final String deviceKey = \"test-devicekey?&test\";\n-    final String API_VERSION = Deencapsulation.getField(MqttIotHubConnection.class, \"API_VERSION\");\n+    final String API_VERSION = \"?api-version=\" + TransportUtils.IOTHUB_API_VERSION;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDQzMjY4OnYy", "diffSide": "RIGHT", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDo0Nzo1MVrOGeDZ5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNzowMDoyM1rOGf2PNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2NjI0Nw==", "bodyText": "Why can't SSLContext be part of clientOptions?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434166247", "createdAt": "2020-06-02T20:47:51Z", "author": {"login": "prmathur-microsoft"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java", "diffHunk": "@@ -229,7 +255,26 @@ public DeviceClient(String connString, IotHubClientProtocol protocol, String pub\n      */\n     public DeviceClient(String connString, IotHubClientProtocol protocol, SSLContext sslContext) throws URISyntaxException\n     {\n-        super(new IotHubConnectionString(connString), protocol, sslContext, SEND_PERIOD_MILLIS, getReceivePeriod(protocol));\n+        super(new IotHubConnectionString(connString), protocol, sslContext, SEND_PERIOD_MILLIS, getReceivePeriod(protocol), null);\n+        commonConstructorVerifications();\n+        commonConstructorSetup();\n+    }\n+\n+    /**\n+     * Creates a device client that uses the provided SSLContext for SSL negotiation\n+     * @param connString the connection string for the device. May be an x509 connection string (format: \"HostName=...;DeviceId=...;x509=true\")\n+     *                   and it may be a SAS connection string (format: \"HostName=...;DeviceId=...;SharedAccessKey=...\"). If\n+     *                   this connection string is an x509 connection string, the client will use the provided SSLContext for authentication.\n+     * @param protocol the protocol to use when communicating with IotHub\n+     * @param sslContext the ssl context that will be used during authentication. If the provided connection string does not contain\n+     *                   SAS based credentials, then the sslContext will be used for x509 authentication. If the provided connection string\n+     *                   does contain SAS based credentials, the sslContext will still be used during SSL negotiation.\n+     * @param clientOptions The options that allow configuration of the device client instance during initialization\n+     * @throws URISyntaxException if the hostname in the connection string is not a valid URI\n+     */\n+    public DeviceClient(String connString, IotHubClientProtocol protocol, SSLContext sslContext, ClientOptions clientOptions) throws URISyntaxException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MzQ0OA==", "bodyText": "How would that work with other constructors?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434193448", "createdAt": "2020-06-02T21:45:34Z", "author": {"login": "bikamani"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java", "diffHunk": "@@ -229,7 +255,26 @@ public DeviceClient(String connString, IotHubClientProtocol protocol, String pub\n      */\n     public DeviceClient(String connString, IotHubClientProtocol protocol, SSLContext sslContext) throws URISyntaxException\n     {\n-        super(new IotHubConnectionString(connString), protocol, sslContext, SEND_PERIOD_MILLIS, getReceivePeriod(protocol));\n+        super(new IotHubConnectionString(connString), protocol, sslContext, SEND_PERIOD_MILLIS, getReceivePeriod(protocol), null);\n+        commonConstructorVerifications();\n+        commonConstructorSetup();\n+    }\n+\n+    /**\n+     * Creates a device client that uses the provided SSLContext for SSL negotiation\n+     * @param connString the connection string for the device. May be an x509 connection string (format: \"HostName=...;DeviceId=...;x509=true\")\n+     *                   and it may be a SAS connection string (format: \"HostName=...;DeviceId=...;SharedAccessKey=...\"). If\n+     *                   this connection string is an x509 connection string, the client will use the provided SSLContext for authentication.\n+     * @param protocol the protocol to use when communicating with IotHub\n+     * @param sslContext the ssl context that will be used during authentication. If the provided connection string does not contain\n+     *                   SAS based credentials, then the sslContext will be used for x509 authentication. If the provided connection string\n+     *                   does contain SAS based credentials, the sslContext will still be used during SSL negotiation.\n+     * @param clientOptions The options that allow configuration of the device client instance during initialization\n+     * @throws URISyntaxException if the hostname in the connection string is not a valid URI\n+     */\n+    public DeviceClient(String connString, IotHubClientProtocol protocol, SSLContext sslContext, ClientOptions clientOptions) throws URISyntaxException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2NjI0Nw=="}, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwMjYyOA==", "bodyText": "Is it possible to just have 2 constructors and maybe SSLContext can be set to null in ClientOptions if user does not want to use it?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434202628", "createdAt": "2020-06-02T22:08:47Z", "author": {"login": "vinagesh"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java", "diffHunk": "@@ -229,7 +255,26 @@ public DeviceClient(String connString, IotHubClientProtocol protocol, String pub\n      */\n     public DeviceClient(String connString, IotHubClientProtocol protocol, SSLContext sslContext) throws URISyntaxException\n     {\n-        super(new IotHubConnectionString(connString), protocol, sslContext, SEND_PERIOD_MILLIS, getReceivePeriod(protocol));\n+        super(new IotHubConnectionString(connString), protocol, sslContext, SEND_PERIOD_MILLIS, getReceivePeriod(protocol), null);\n+        commonConstructorVerifications();\n+        commonConstructorSetup();\n+    }\n+\n+    /**\n+     * Creates a device client that uses the provided SSLContext for SSL negotiation\n+     * @param connString the connection string for the device. May be an x509 connection string (format: \"HostName=...;DeviceId=...;x509=true\")\n+     *                   and it may be a SAS connection string (format: \"HostName=...;DeviceId=...;SharedAccessKey=...\"). If\n+     *                   this connection string is an x509 connection string, the client will use the provided SSLContext for authentication.\n+     * @param protocol the protocol to use when communicating with IotHub\n+     * @param sslContext the ssl context that will be used during authentication. If the provided connection string does not contain\n+     *                   SAS based credentials, then the sslContext will be used for x509 authentication. If the provided connection string\n+     *                   does contain SAS based credentials, the sslContext will still be used during SSL negotiation.\n+     * @param clientOptions The options that allow configuration of the device client instance during initialization\n+     * @throws URISyntaxException if the hostname in the connection string is not a valid URI\n+     */\n+    public DeviceClient(String connString, IotHubClientProtocol protocol, SSLContext sslContext, ClientOptions clientOptions) throws URISyntaxException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2NjI0Nw=="}, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4ODM2MA==", "bodyText": "As this is a new API, I don't see reason why you can't do that.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434788360", "createdAt": "2020-06-03T19:01:24Z", "author": {"login": "prmathur-microsoft"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java", "diffHunk": "@@ -229,7 +255,26 @@ public DeviceClient(String connString, IotHubClientProtocol protocol, String pub\n      */\n     public DeviceClient(String connString, IotHubClientProtocol protocol, SSLContext sslContext) throws URISyntaxException\n     {\n-        super(new IotHubConnectionString(connString), protocol, sslContext, SEND_PERIOD_MILLIS, getReceivePeriod(protocol));\n+        super(new IotHubConnectionString(connString), protocol, sslContext, SEND_PERIOD_MILLIS, getReceivePeriod(protocol), null);\n+        commonConstructorVerifications();\n+        commonConstructorSetup();\n+    }\n+\n+    /**\n+     * Creates a device client that uses the provided SSLContext for SSL negotiation\n+     * @param connString the connection string for the device. May be an x509 connection string (format: \"HostName=...;DeviceId=...;x509=true\")\n+     *                   and it may be a SAS connection string (format: \"HostName=...;DeviceId=...;SharedAccessKey=...\"). If\n+     *                   this connection string is an x509 connection string, the client will use the provided SSLContext for authentication.\n+     * @param protocol the protocol to use when communicating with IotHub\n+     * @param sslContext the ssl context that will be used during authentication. If the provided connection string does not contain\n+     *                   SAS based credentials, then the sslContext will be used for x509 authentication. If the provided connection string\n+     *                   does contain SAS based credentials, the sslContext will still be used during SSL negotiation.\n+     * @param clientOptions The options that allow configuration of the device client instance during initialization\n+     * @throws URISyntaxException if the hostname in the connection string is not a valid URI\n+     */\n+    public DeviceClient(String connString, IotHubClientProtocol protocol, SSLContext sslContext, ClientOptions clientOptions) throws URISyntaxException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2NjI0Nw=="}, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA0NzY2OA==", "bodyText": "We have resolved this offline and I will be sending out a PR for these changes.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r436047668", "createdAt": "2020-06-05T17:00:23Z", "author": {"login": "bikamani"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java", "diffHunk": "@@ -229,7 +255,26 @@ public DeviceClient(String connString, IotHubClientProtocol protocol, String pub\n      */\n     public DeviceClient(String connString, IotHubClientProtocol protocol, SSLContext sslContext) throws URISyntaxException\n     {\n-        super(new IotHubConnectionString(connString), protocol, sslContext, SEND_PERIOD_MILLIS, getReceivePeriod(protocol));\n+        super(new IotHubConnectionString(connString), protocol, sslContext, SEND_PERIOD_MILLIS, getReceivePeriod(protocol), null);\n+        commonConstructorVerifications();\n+        commonConstructorSetup();\n+    }\n+\n+    /**\n+     * Creates a device client that uses the provided SSLContext for SSL negotiation\n+     * @param connString the connection string for the device. May be an x509 connection string (format: \"HostName=...;DeviceId=...;x509=true\")\n+     *                   and it may be a SAS connection string (format: \"HostName=...;DeviceId=...;SharedAccessKey=...\"). If\n+     *                   this connection string is an x509 connection string, the client will use the provided SSLContext for authentication.\n+     * @param protocol the protocol to use when communicating with IotHub\n+     * @param sslContext the ssl context that will be used during authentication. If the provided connection string does not contain\n+     *                   SAS based credentials, then the sslContext will be used for x509 authentication. If the provided connection string\n+     *                   does contain SAS based credentials, the sslContext will still be used during SSL negotiation.\n+     * @param clientOptions The options that allow configuration of the device client instance during initialization\n+     * @throws URISyntaxException if the hostname in the connection string is not a valid URI\n+     */\n+    public DeviceClient(String connString, IotHubClientProtocol protocol, SSLContext sslContext, ClientOptions clientOptions) throws URISyntaxException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2NjI0Nw=="}, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDQzNTYxOnYy", "diffSide": "RIGHT", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDo0ODo1NVrOGeDb1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo0NzowNVrOGeFGoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2Njc0MQ==", "bodyText": "URI is not connection string. Isn't it hostname only?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434166741", "createdAt": "2020-06-02T20:48:55Z", "author": {"login": "prmathur-microsoft"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java", "diffHunk": "@@ -247,7 +292,24 @@ public DeviceClient(String connString, IotHubClientProtocol protocol, SSLContext\n      */\n     public static DeviceClient createFromSecurityProvider(String uri, String deviceId, SecurityProvider securityProvider, IotHubClientProtocol protocol) throws URISyntaxException, IOException\n     {\n-        return new DeviceClient(uri, deviceId, securityProvider, protocol);\n+        return new DeviceClient(uri, deviceId, securityProvider, protocol, null);\n+    }\n+\n+    /**\n+     * Creates a device client that uses the provided security provider for authentication.\n+     *\n+     * @param uri The connection string for iot hub to connect to (format: \"yourHubName.azure-devices.net\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NDA4MA==", "bodyText": "it is hostname. will modify this comment", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434194080", "createdAt": "2020-06-02T21:47:05Z", "author": {"login": "bikamani"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java", "diffHunk": "@@ -247,7 +292,24 @@ public DeviceClient(String connString, IotHubClientProtocol protocol, SSLContext\n      */\n     public static DeviceClient createFromSecurityProvider(String uri, String deviceId, SecurityProvider securityProvider, IotHubClientProtocol protocol) throws URISyntaxException, IOException\n     {\n-        return new DeviceClient(uri, deviceId, securityProvider, protocol);\n+        return new DeviceClient(uri, deviceId, securityProvider, protocol, null);\n+    }\n+\n+    /**\n+     * Creates a device client that uses the provided security provider for authentication.\n+     *\n+     * @param uri The connection string for iot hub to connect to (format: \"yourHubName.azure-devices.net\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2Njc0MQ=="}, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDQ0ODk2OnYy", "diffSide": "RIGHT", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/TransportUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDo1MzoxNFrOGeDkZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1MTo1NlrOGeFOLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2ODkzNA==", "bodyText": "Please add a detail comment as to why are we adding preview API here", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434168934", "createdAt": "2020-06-02T20:53:14Z", "author": {"login": "prmathur-microsoft"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/TransportUtils.java", "diffHunk": "@@ -8,6 +8,7 @@\n public class TransportUtils\n {\n     public static String IOTHUB_API_VERSION = \"2019-10-01\";\n+    public static String PNP_IOTHUB_API_VERSION = \"2020-05-31-preview\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NjAxMg==", "bodyText": "added", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434196012", "createdAt": "2020-06-02T21:51:56Z", "author": {"login": "bikamani"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/TransportUtils.java", "diffHunk": "@@ -8,6 +8,7 @@\n public class TransportUtils\n {\n     public static String IOTHUB_API_VERSION = \"2019-10-01\";\n+    public static String PNP_IOTHUB_API_VERSION = \"2020-05-31-preview\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2ODkzNA=="}, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDYyOTU1OnYy", "diffSide": "RIGHT", "path": "device/iot-device-client/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/device/DeviceClientTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1Njo1MVrOGeFVuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjo1NTowMlrOGeGmkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5Nzk0NQ==", "bodyText": "is this a real connection string or fake?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434197945", "createdAt": "2020-06-02T21:56:51Z", "author": {"login": "vinagesh"}, "path": "device/iot-device-client/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/device/DeviceClientTest.java", "diffHunk": "@@ -147,6 +148,34 @@ public void constructorSuccess() throws URISyntaxException, IOException\n         };\n     }\n \n+    @Test\n+    public void constructorWithClientOptionsSuccess() throws URISyntaxException, IOException\n+    {\n+        // arrange\n+        final String connString = \"HostName=iothub.device.com;CredentialType=SharedAccessKey;CredentialScope=Device;deviceId=testdevice;SharedAccessKey=adjkl234j52=;\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxODY0MQ==", "bodyText": "It is fake may be never changed in our legacy test code. I am removing these tests as they seem unnecessary after rethinking. But this is good to address in follow up PR so I'll keep a note of this.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434218641", "createdAt": "2020-06-02T22:55:02Z", "author": {"login": "bikamani"}, "path": "device/iot-device-client/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/device/DeviceClientTest.java", "diffHunk": "@@ -147,6 +148,34 @@ public void constructorSuccess() throws URISyntaxException, IOException\n         };\n     }\n \n+    @Test\n+    public void constructorWithClientOptionsSuccess() throws URISyntaxException, IOException\n+    {\n+        // arrange\n+        final String connString = \"HostName=iothub.device.com;CredentialType=SharedAccessKey;CredentialScope=Device;deviceId=testdevice;SharedAccessKey=adjkl234j52=;\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5Nzk0NQ=="}, "originalCommit": {"oid": "1130d91ff061e91d8f0c9ac113a412501a363122"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDc5NTMxOnYy", "diffSide": "RIGHT", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMzoxMzowNVrOGeG8ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMzoxMzowNVrOGeG8ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIyNDMyMw==", "bodyText": "the hostname of the", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434224323", "createdAt": "2020-06-02T23:13:05Z", "author": {"login": "timtay-microsoft"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/DeviceClient.java", "diffHunk": "@@ -229,15 +247,32 @@ public DeviceClient(String connString, IotHubClientProtocol protocol, String pub\n      */\n     public DeviceClient(String connString, IotHubClientProtocol protocol, SSLContext sslContext) throws URISyntaxException\n     {\n-        super(new IotHubConnectionString(connString), protocol, sslContext, SEND_PERIOD_MILLIS, getReceivePeriod(protocol));\n+        new DeviceClient(connString, protocol, sslContext, null);\n+    }\n+\n+    /**\n+     * Creates a device client that uses the provided SSLContext for SSL negotiation\n+     * @param connString the connection string for the device. May be an x509 connection string (format: \"HostName=...;DeviceId=...;x509=true\")\n+     *                   and it may be a SAS connection string (format: \"HostName=...;DeviceId=...;SharedAccessKey=...\"). If\n+     *                   this connection string is an x509 connection string, the client will use the provided SSLContext for authentication.\n+     * @param protocol the protocol to use when communicating with IotHub\n+     * @param sslContext the ssl context that will be used during authentication. If the provided connection string does not contain\n+     *                   SAS based credentials, then the sslContext will be used for x509 authentication. If the provided connection string\n+     *                   does contain SAS based credentials, the sslContext will still be used during SSL negotiation.\n+     * @param clientOptions The options that allow configuration of the device client instance during initialization\n+     * @throws URISyntaxException if the hostname in the connection string is not a valid URI\n+     */\n+    public DeviceClient(String connString, IotHubClientProtocol protocol, SSLContext sslContext, ClientOptions clientOptions) throws URISyntaxException\n+    {\n+        super(new IotHubConnectionString(connString), protocol, sslContext, SEND_PERIOD_MILLIS, getReceivePeriod(protocol), clientOptions);\n         commonConstructorVerifications();\n         commonConstructorSetup();\n     }\n \n     /**\n      * Creates a device client that uses the provided security provider for authentication.\n      *\n-     * @param uri The connection string for iot hub to connect to (format: \"yourHubName.azure-devices.net\")\n+     * @param uri The hostname of iot hub to connect to (format: \"yourHubName.azure-devices.net\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3edfdcc2077b7d6b78e66802b6bb8c85d314a4c5"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODA2Mjg4OnYy", "diffSide": "RIGHT", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/ClientOptions.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNzo1NDoxMlrOGenEzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMzo0NTo0N1rOGexLKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc1MDY2OA==", "bodyText": "FYI - we do not want to use the term \"plug and play\" in any public comments/ APIs.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434750668", "createdAt": "2020-06-03T17:54:12Z", "author": {"login": "abhipsaMisra"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/ClientOptions.java", "diffHunk": "@@ -0,0 +1,21 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.device;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+/**\n+ * Options that allow configuration of the device client instance during initialization.\n+ */\n+public final class ClientOptions\n+{\n+    /**\n+     * The Digital Twin Model Id associated with the device identity.\n+     * Non plug and play users should not set this value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a107d7d2568b630ec0874873507b985000c8118"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc1NDI2NQ==", "bodyText": "I am confused, are you suggesting to document this as Digital Twin users?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434754265", "createdAt": "2020-06-03T18:00:14Z", "author": {"login": "bikamani"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/ClientOptions.java", "diffHunk": "@@ -0,0 +1,21 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.device;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+/**\n+ * Options that allow configuration of the device client instance during initialization.\n+ */\n+public final class ClientOptions\n+{\n+    /**\n+     * The Digital Twin Model Id associated with the device identity.\n+     * Non plug and play users should not set this value", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc1MDY2OA=="}, "originalCommit": {"oid": "7a107d7d2568b630ec0874873507b985000c8118"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5MzA3NA==", "bodyText": "I am not sure, digital twin users could potentially confuse users, since there is a different service called \"digital twins\".\n@prmathur-microsoft - any suggestions on which term to use here?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434793074", "createdAt": "2020-06-03T19:10:16Z", "author": {"login": "abhipsaMisra"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/ClientOptions.java", "diffHunk": "@@ -0,0 +1,21 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.device;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+/**\n+ * Options that allow configuration of the device client instance during initialization.\n+ */\n+public final class ClientOptions\n+{\n+    /**\n+     * The Digital Twin Model Id associated with the device identity.\n+     * Non plug and play users should not set this value", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc1MDY2OA=="}, "originalCommit": {"oid": "7a107d7d2568b630ec0874873507b985000c8118"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5NjczMg==", "bodyText": "exactly, that is the reason why I am asking.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434796732", "createdAt": "2020-06-03T19:17:09Z", "author": {"login": "bikamani"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/ClientOptions.java", "diffHunk": "@@ -0,0 +1,21 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.device;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+/**\n+ * Options that allow configuration of the device client instance during initialization.\n+ */\n+public final class ClientOptions\n+{\n+    /**\n+     * The Digital Twin Model Id associated with the device identity.\n+     * Non plug and play users should not set this value", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc1MDY2OA=="}, "originalCommit": {"oid": "7a107d7d2568b630ec0874873507b985000c8118"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxNjEzOA==", "bodyText": "I would leave it at model id and revisit this when we have a better story around this.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434916138", "createdAt": "2020-06-03T23:45:47Z", "author": {"login": "prmathur-microsoft"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/ClientOptions.java", "diffHunk": "@@ -0,0 +1,21 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.device;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+/**\n+ * Options that allow configuration of the device client instance during initialization.\n+ */\n+public final class ClientOptions\n+{\n+    /**\n+     * The Digital Twin Model Id associated with the device identity.\n+     * Non plug and play users should not set this value", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc1MDY2OA=="}, "originalCommit": {"oid": "7a107d7d2568b630ec0874873507b985000c8118"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODI5NzQyOnYy", "diffSide": "RIGHT", "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/mqtt/MqttIotHubConnection.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxOTowMzozOFrOGepcgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxOToxMzoyNFrOGepwzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4OTUwNA==", "bodyText": "shouldn't this be final?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434789504", "createdAt": "2020-06-03T19:03:38Z", "author": {"login": "prmathur-microsoft"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/mqtt/MqttIotHubConnection.java", "diffHunk": "@@ -42,7 +42,7 @@\n     private static final String SSL_PREFIX = \"ssl://\";\n     private static final String SSL_PORT_SUFFIX = \":8883\";\n \n-    private static final String API_VERSION = \"?api-version=\" + TransportUtils.IOTHUB_API_VERSION;\n+    private static String ModelIdParam = \"digital-twin-model-id\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a107d7d2568b630ec0874873507b985000c8118"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5NDcwMQ==", "bodyText": "agreed, will address this", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434794701", "createdAt": "2020-06-03T19:13:24Z", "author": {"login": "bikamani"}, "path": "device/iot-device-client/src/main/java/com/microsoft/azure/sdk/iot/device/transport/mqtt/MqttIotHubConnection.java", "diffHunk": "@@ -42,7 +42,7 @@\n     private static final String SSL_PREFIX = \"ssl://\";\n     private static final String SSL_PORT_SUFFIX = \":8883\";\n \n-    private static final String API_VERSION = \"?api-version=\" + TransportUtils.IOTHUB_API_VERSION;\n+    private static String ModelIdParam = \"digital-twin-model-id\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4OTUwNA=="}, "originalCommit": {"oid": "7a107d7d2568b630ec0874873507b985000c8118"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTA1NTEzOnYy", "diffSide": "RIGHT", "path": "device/iot-device-client/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/device/DeviceClientTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMzoyODo0OFrOGew5CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMzozMTowNlrOGew7pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxMTQ5Nw==", "bodyText": "Why did we have to modify existing e2e?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434911497", "createdAt": "2020-06-03T23:28:48Z", "author": {"login": "prmathur-microsoft"}, "path": "device/iot-device-client/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/device/DeviceClientTest.java", "diffHunk": "@@ -129,7 +129,7 @@ public void constructorSuccess() throws URISyntaxException, IOException\n         final IotHubClientProtocol protocol = IotHubClientProtocol.AMQPS;\n \n         // act\n-        final DeviceClient client = new DeviceClient(connString, protocol);\n+        final DeviceClient client = new DeviceClient(connString, protocol, (ClientOptions) null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fadba8bb34e6809b1caa62262de3bab4a673170c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxMjE2Ng==", "bodyText": "this is ut. nm", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/791#discussion_r434912166", "createdAt": "2020-06-03T23:31:06Z", "author": {"login": "prmathur-microsoft"}, "path": "device/iot-device-client/src/test/java/tests/unit/com/microsoft/azure/sdk/iot/device/DeviceClientTest.java", "diffHunk": "@@ -129,7 +129,7 @@ public void constructorSuccess() throws URISyntaxException, IOException\n         final IotHubClientProtocol protocol = IotHubClientProtocol.AMQPS;\n \n         // act\n-        final DeviceClient client = new DeviceClient(connString, protocol);\n+        final DeviceClient client = new DeviceClient(connString, protocol, (ClientOptions) null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxMTQ5Nw=="}, "originalCommit": {"oid": "fadba8bb34e6809b1caa62262de3bab4a673170c"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2803, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}