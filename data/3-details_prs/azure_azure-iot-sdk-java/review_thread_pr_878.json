{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzMDE2MDUx", "number": 878, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjoxNDoxNFrOEVL8Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxOTozODoxN1rOEW7zjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjUxMTQzOnYy", "diffSide": "RIGHT", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/methods/DeviceMethodTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjoxNDoxNFrOG7zVug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjoxNDoxNFrOG7zVug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2MDMxNA==", "bodyText": "By default, the test instance already has a methodServiceClient, but it isn't setup to use a proxy, so this will create a proxy enabled client for this test in particular", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r465360314", "createdAt": "2020-08-04T22:14:14Z", "author": {"login": "timtay-microsoft"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/methods/DeviceMethodTests.java", "diffHunk": "@@ -483,4 +489,39 @@ public void invokeMethodOnUnregisteredDevice() throws Exception\n             }\n         }\n     }\n+\n+    @Test\n+    @StandardTierHubOnlyTest\n+    public void invokeMethodWithServiceSideProxy() throws Exception\n+    {\n+        if (testInstance.protocol != IotHubClientProtocol.MQTT || testInstance.authenticationType != AuthenticationType.SAS)\n+        {\n+            // This test doesn't really care about the device side protocol or authentication, so just run it once\n+            // when the device is using MQTT with SAS auth\n+            return;\n+        }\n+\n+        String testProxyHostname = \"127.0.0.1\";\n+        int testProxyPort = 8894;\n+        HttpProxyServer proxyServer = DefaultHttpProxyServer.bootstrap()\n+                .withPort(testProxyPort)\n+                .start();\n+\n+        try\n+        {\n+            Proxy serviceSideProxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(testProxyHostname, testProxyPort));\n+\n+            ProxyOptions proxyOptions = new ProxyOptions(serviceSideProxy);\n+            DeviceMethodClientOptions options = DeviceMethodClientOptions.builder().proxyOptions(proxyOptions).build();\n+\n+            this.testInstance.methodServiceClient = DeviceMethod.createFromConnectionString(iotHubConnectionString, options);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4763c59dd7c754e37f1f1520b9abb2e116a83be5"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjUxMjU2OnYy", "diffSide": "RIGHT", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/methods/DeviceMethodTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjoxNDo0MlrOG7zWWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjoxNDo0MlrOG7zWWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2MDQ3Mg==", "bodyText": "This test method uses the above testInstance.methodServiceClient with the proxy configured", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r465360472", "createdAt": "2020-08-04T22:14:42Z", "author": {"login": "timtay-microsoft"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/methods/DeviceMethodTests.java", "diffHunk": "@@ -483,4 +489,39 @@ public void invokeMethodOnUnregisteredDevice() throws Exception\n             }\n         }\n     }\n+\n+    @Test\n+    @StandardTierHubOnlyTest\n+    public void invokeMethodWithServiceSideProxy() throws Exception\n+    {\n+        if (testInstance.protocol != IotHubClientProtocol.MQTT || testInstance.authenticationType != AuthenticationType.SAS)\n+        {\n+            // This test doesn't really care about the device side protocol or authentication, so just run it once\n+            // when the device is using MQTT with SAS auth\n+            return;\n+        }\n+\n+        String testProxyHostname = \"127.0.0.1\";\n+        int testProxyPort = 8894;\n+        HttpProxyServer proxyServer = DefaultHttpProxyServer.bootstrap()\n+                .withPort(testProxyPort)\n+                .start();\n+\n+        try\n+        {\n+            Proxy serviceSideProxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(testProxyHostname, testProxyPort));\n+\n+            ProxyOptions proxyOptions = new ProxyOptions(serviceSideProxy);\n+            DeviceMethodClientOptions options = DeviceMethodClientOptions.builder().proxyOptions(proxyOptions).build();\n+\n+            this.testInstance.methodServiceClient = DeviceMethod.createFromConnectionString(iotHubConnectionString, options);\n+\n+            super.openDeviceClientAndSubscribeToMethods();\n+            super.invokeMethodSucceed();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4763c59dd7c754e37f1f1520b9abb2e116a83be5"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjUxMzkwOnYy", "diffSide": "LEFT", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceTwinCommon.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjoxNToxNFrOG7zXHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjoxNToxNFrOG7zXHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2MDY3MQ==", "bodyText": "In order for some tests to have the twin service client use a proxy, and others to not, each test must have its own", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r465360671", "createdAt": "2020-08-04T22:15:14Z", "author": {"login": "timtay-microsoft"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceTwinCommon.java", "diffHunk": "@@ -146,7 +145,6 @@ public static Collection inputs() throws Exception\n     protected static RegistryManager registryManager;\n     protected InternalClient internalClient;\n     protected static RawTwinQuery scRawTwinQueryClient;\n-    protected static DeviceTwin sCDeviceTwin;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4763c59dd7c754e37f1f1520b9abb2e116a83be5"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjUyMTA2OnYy", "diffSide": "LEFT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethod.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjoxNzo0OVrOG7zbNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxOTozMjozOVrOG-cpzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2MTcxNg==", "bodyText": "These default values have changed to 24 seconds each to follow the RegistryManager pattern", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r465361716", "createdAt": "2020-08-04T22:17:49Z", "author": {"login": "timtay-microsoft"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethod.java", "diffHunk": "@@ -22,9 +23,9 @@\n {\n     private IotHubConnectionString iotHubConnectionString = null;\n     private Integer requestId = 0;\n-    private static final int DEFAULT_RESPONSE_TIMEOUT = 30; // default response timeout is 30 seconds\n-    private static final int DEFAULT_CONNECT_TIMEOUT = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4763c59dd7c754e37f1f1520b9abb2e116a83be5"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEzNDM0OQ==", "bodyText": "nit: If we are changing the default values, can we default to a round number instead? \ud83d\ude04", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r468134349", "createdAt": "2020-08-10T19:32:39Z", "author": {"login": "abhipsaMisra"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethod.java", "diffHunk": "@@ -22,9 +23,9 @@\n {\n     private IotHubConnectionString iotHubConnectionString = null;\n     private Integer requestId = 0;\n-    private static final int DEFAULT_RESPONSE_TIMEOUT = 30; // default response timeout is 30 seconds\n-    private static final int DEFAULT_CONNECT_TIMEOUT = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2MTcxNg=="}, "originalCommit": {"oid": "4763c59dd7c754e37f1f1520b9abb2e116a83be5"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjgzODU1OnYy", "diffSide": "RIGHT", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceTwinCommon.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDo1Mjo1M1rOG72VYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDo1Mjo1M1rOG72VYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwOTM3OA==", "bodyText": "nit: extra line", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r465409378", "createdAt": "2020-08-05T00:52:53Z", "author": {"login": "sharmasejal"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceTwinCommon.java", "diffHunk": "@@ -422,6 +420,8 @@ public DeviceTwinCommon(IotHubClientProtocol protocol, AuthenticationType authen\n         public String x509Thumbprint;\n         public String uuid;\n         public ClientType clientType;\n+        public DeviceTwin sCDeviceTwin;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d13d6874a433711423771bdb0c5bc6b88d3a307"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjg0NDg3OnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethod.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDo1NjoxNFrOG72ZFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDo1NjoxNFrOG72ZFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxMDMyNw==", "bodyText": "add stop punctuation for consistency", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r465410327", "createdAt": "2020-08-05T00:56:14Z", "author": {"login": "sharmasejal"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethod.java", "diffHunk": "@@ -33,17 +34,36 @@\n      * @throws IOException This exception is thrown if the object creation failed\n      */\n     public static DeviceMethod createFromConnectionString(String connectionString) throws IOException\n+    {\n+        return createFromConnectionString(connectionString, DeviceMethodClientOptions.builder()\n+                .httpConnectTimeout(DeviceMethodClientOptions.DEFAULT_HTTP_CONNECT_TIMEOUT_MS)\n+                .httpReadTimeout(DeviceMethodClientOptions.DEFAULT_HTTP_READ_TIMEOUT_MS)\n+                .build());\n+    }\n+\n+    /**\n+     * Create a DeviceMethod instance from the information in the connection string.\n+     *\n+     * @param connectionString is the IoTHub connection string.\n+     * @param options the configurable options for each operation on this client. May not be null.\n+     * @return an instance of the DeviceMethod.\n+     * @throws IOException This exception is thrown if the object creation failed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d13d6874a433711423771bdb0c5bc6b88d3a307"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjg0ODY1OnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceOperations.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDo1ODoxOVrOG72bWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDo1ODoxOVrOG72bWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxMDkwNQ==", "bodyText": "nit: best if we can be consistent with stoppages", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r465410905", "createdAt": "2020-08-05T00:58:19Z", "author": {"login": "sharmasejal"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceOperations.java", "diffHunk": "@@ -140,6 +143,91 @@ public static HttpResponse request(\n         return response;\n     }\n \n+    /**\n+     * Send a http request to the IoTHub using the Twin/Method standard, and return its response.\n+     *\n+     * @param iotHubConnectionString is the connection string for the IoTHub", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d13d6874a433711423771bdb0c5bc6b88d3a307"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjg0OTgxOnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceTwin.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDo1OTowMlrOG72cFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMDo1OTowMlrOG72cFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxMTA5NA==", "bodyText": "nit: same as above", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r465411094", "createdAt": "2020-08-05T00:59:02Z", "author": {"login": "sharmasejal"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceTwin.java", "diffHunk": "@@ -33,22 +34,36 @@\n      * @throws IOException This exception is thrown if the object creation failed\n      */\n     public static DeviceTwin createFromConnectionString(String connectionString) throws IOException\n+    {\n+        return createFromConnectionString(connectionString, DeviceTwinClientOptions.builder()\n+                .httpConnectTimeout(DeviceTwinClientOptions.DEFAULT_HTTP_CONNECT_TIMEOUT_MS)\n+                .httpReadTimeout(DeviceTwinClientOptions.DEFAULT_HTTP_READ_TIMEOUT_MS)\n+                .build());\n+    }\n+\n+    /**\n+     * Static constructor to create instance from connection string\n+     *\n+     * @param connectionString The iot hub connection string\n+     * @param options the configurable options for each operation on this client. May not be null.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d13d6874a433711423771bdb0c5bc6b88d3a307"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjg1MjY0OnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceTwinClientOptions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMTowMDoyMFrOG72drA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMTowMDoyMFrOG72drA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxMTUwMA==", "bodyText": "nit: stop punctuation", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r465411500", "createdAt": "2020-08-05T01:00:20Z", "author": {"login": "sharmasejal"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceTwinClientOptions.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package com.microsoft.azure.sdk.iot.service.devicetwin;\n+\n+import com.microsoft.azure.sdk.iot.service.ProxyOptions;\n+import lombok.Builder;\n+import lombok.Getter;\n+\n+/**\n+ * Configurable options for all twin client operations\n+ */\n+@Builder\n+public class DeviceTwinClientOptions\n+{\n+    protected static final Integer DEFAULT_HTTP_READ_TIMEOUT_MS = 24000; // 24 seconds\n+    protected static final Integer DEFAULT_HTTP_CONNECT_TIMEOUT_MS = 24000; // 24 seconds\n+\n+    /**\n+     * The options that specify what proxy to tunnel through. If null, no proxy will be used", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d13d6874a433711423771bdb0c5bc6b88d3a307"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzAwMzUwOnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceTwinClientOptions.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMjoyMzo0OFrOG731NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNjo1MzoxMVrOG8SS7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMzkwOA==", "bodyText": "Can we not use a common client options for both methods and twins? They seem to be containing settings for the same properties.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r465433908", "createdAt": "2020-08-05T02:23:48Z", "author": {"login": "abhipsaMisra"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceTwinClientOptions.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package com.microsoft.azure.sdk.iot.service.devicetwin;\n+\n+import com.microsoft.azure.sdk.iot.service.ProxyOptions;\n+import lombok.Builder;\n+import lombok.Getter;\n+\n+/**\n+ * Configurable options for all twin client operations.\n+ */\n+@Builder\n+public class DeviceTwinClientOptions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cb2068f13be11a0c302e6af1aef2029d3b827b6"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg2NTA3NQ==", "bodyText": "Right now they are the same, yes, but this separation allows us to add other options that are specific to method/twin/registry later", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r465865075", "createdAt": "2020-08-05T16:49:11Z", "author": {"login": "timtay-microsoft"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceTwinClientOptions.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package com.microsoft.azure.sdk.iot.service.devicetwin;\n+\n+import com.microsoft.azure.sdk.iot.service.ProxyOptions;\n+import lombok.Builder;\n+import lombok.Getter;\n+\n+/**\n+ * Configurable options for all twin client operations.\n+ */\n+@Builder\n+public class DeviceTwinClientOptions", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMzkwOA=="}, "originalCommit": {"oid": "0cb2068f13be11a0c302e6af1aef2029d3b827b6"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg2NzUwMw==", "bodyText": "Plus the one that exists right now is called \"RegistryManagerOptions\" so it would be a bit odd to recycle it for the twin and method clients", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r465867503", "createdAt": "2020-08-05T16:53:11Z", "author": {"login": "timtay-microsoft"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceTwinClientOptions.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package com.microsoft.azure.sdk.iot.service.devicetwin;\n+\n+import com.microsoft.azure.sdk.iot.service.ProxyOptions;\n+import lombok.Builder;\n+import lombok.Getter;\n+\n+/**\n+ * Configurable options for all twin client operations.\n+ */\n+@Builder\n+public class DeviceTwinClientOptions", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMzkwOA=="}, "originalCommit": {"oid": "0cb2068f13be11a0c302e6af1aef2029d3b827b6"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTAyMjM3OnYy", "diffSide": "RIGHT", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceTwinCommon.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMToyNTozNVrOG9EzJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMToyNTozNVrOG9EzJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY5NDk1MA==", "bodyText": "Now is a good time to rename this one like we did for some other tests", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r466694950", "createdAt": "2020-08-06T21:25:35Z", "author": {"login": "bikamani"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceTwinCommon.java", "diffHunk": "@@ -422,6 +420,7 @@ public DeviceTwinCommon(IotHubClientProtocol protocol, AuthenticationType authen\n         public String x509Thumbprint;\n         public String uuid;\n         public ClientType clientType;\n+        public DeviceTwin sCDeviceTwin;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9a9cf16e5a95442c588c51539c3c0679978264e"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTAyODkyOnYy", "diffSide": "RIGHT", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceTwinCommon.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMToyNzo1OVrOG9E3Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODowNjo0MVrOG-ZqBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY5NjAwNg==", "bodyText": "so why are we doing it?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r466696006", "createdAt": "2020-08-06T21:27:59Z", "author": {"login": "bikamani"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceTwinCommon.java", "diffHunk": "@@ -431,6 +430,17 @@ public DeviceTwinTestInstance(IotHubClientProtocol protocol, AuthenticationType\n             this.privateKey = privateKey;\n             this.x509Thumbprint = x509Thumbprint;\n             this.clientType = clientType;\n+\n+            try\n+            {\n+                this.sCDeviceTwin = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n+            }\n+            catch (IOException e)\n+            {\n+                // A little odd to do this, but the createFromConnectionString call doesn't ever actually throw this exception, and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9a9cf16e5a95442c588c51539c3c0679978264e"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA4NTI1NQ==", "bodyText": "I'll get rid of this and just have every twin test constructor declare that they throw this instead", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r468085255", "createdAt": "2020-08-10T18:06:41Z", "author": {"login": "timtay-microsoft"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceTwinCommon.java", "diffHunk": "@@ -431,6 +430,17 @@ public DeviceTwinTestInstance(IotHubClientProtocol protocol, AuthenticationType\n             this.privateKey = privateKey;\n             this.x509Thumbprint = x509Thumbprint;\n             this.clientType = clientType;\n+\n+            try\n+            {\n+                this.sCDeviceTwin = DeviceTwin.createFromConnectionString(iotHubConnectionString);\n+            }\n+            catch (IOException e)\n+            {\n+                // A little odd to do this, but the createFromConnectionString call doesn't ever actually throw this exception, and", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY5NjAwNg=="}, "originalCommit": {"oid": "b9a9cf16e5a95442c588c51539c3c0679978264e"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTAzMzQyOnYy", "diffSide": "RIGHT", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceTwinCommon.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMToyOTo0MFrOG9E6Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMDo0OTo1MlrOHAdLmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY5NjcxOQ==", "bodyText": "Since you are moving this one to test instance. Are others here not used as a common resource?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r466696719", "createdAt": "2020-08-06T21:29:40Z", "author": {"login": "bikamani"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceTwinCommon.java", "diffHunk": "@@ -146,7 +145,6 @@ public static Collection inputs() throws Exception\n     protected static RegistryManager registryManager;\n     protected InternalClient internalClient;\n     protected static RawTwinQuery scRawTwinQueryClient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9a9cf16e5a95442c588c51539c3c0679978264e"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0MDE1NA==", "bodyText": "I can move these to be per-test instance, sure", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r470240154", "createdAt": "2020-08-13T20:49:52Z", "author": {"login": "timtay-microsoft"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceTwinCommon.java", "diffHunk": "@@ -146,7 +145,6 @@ public static Collection inputs() throws Exception\n     protected static RegistryManager registryManager;\n     protected InternalClient internalClient;\n     protected static RawTwinQuery scRawTwinQueryClient;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY5NjcxOQ=="}, "originalCommit": {"oid": "b9a9cf16e5a95442c588c51539c3c0679978264e"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTAzNDk0OnYy", "diffSide": "RIGHT", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceTwinCommon.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMTozMDoxNVrOG9E7Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODowOToxOVrOG-ZvfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY5Njk2Mw==", "bodyText": "When do we see this one - GeneralSecurityException ?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r466696963", "createdAt": "2020-08-06T21:30:15Z", "author": {"login": "bikamani"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceTwinCommon.java", "diffHunk": "@@ -716,7 +725,7 @@ public void execute(IotHubConnectionStatus status, IotHubConnectionStatusChangeR\n         this.internalClient.registerConnectionStatusChangeCallback(connectionStatusUpdateCallback, null);\n     }\n \n-    protected void testGetDeviceTwin() throws IOException, InterruptedException, IotHubException\n+    protected void testGetDeviceTwin() throws IOException, InterruptedException, IotHubException, GeneralSecurityException, ModuleClientException, URISyntaxException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9a9cf16e5a95442c588c51539c3c0679978264e"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA4NjY1Mg==", "bodyText": "When something goes wrong when creating the SSL context", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r468086652", "createdAt": "2020-08-10T18:09:19Z", "author": {"login": "timtay-microsoft"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/setup/DeviceTwinCommon.java", "diffHunk": "@@ -716,7 +725,7 @@ public void execute(IotHubConnectionStatus status, IotHubConnectionStatusChangeR\n         this.internalClient.registerConnectionStatusChangeCallback(connectionStatusUpdateCallback, null);\n     }\n \n-    protected void testGetDeviceTwin() throws IOException, InterruptedException, IotHubException\n+    protected void testGetDeviceTwin() throws IOException, InterruptedException, IotHubException, GeneralSecurityException, ModuleClientException, URISyntaxException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY5Njk2Mw=="}, "originalCommit": {"oid": "b9a9cf16e5a95442c588c51539c3c0679978264e"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTA2MjU1OnYy", "diffSide": "RIGHT", "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/GetTwinTests.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMTo0MDozOVrOG9FL8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODozMDoxOVrOG-abEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwMTI5OQ==", "bodyText": "So if we are using in both the tests, why are we removing @before block?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r466701299", "createdAt": "2020-08-06T21:40:39Z", "author": {"login": "bikamani"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/GetTwinTests.java", "diffHunk": "@@ -38,16 +47,47 @@ public GetTwinTests(IotHubClientProtocol protocol, AuthenticationType authentica\n         super(protocol, authenticationType, clientType, publicKeyCert, privateKey, x509Thumbprint);\n     }\n \n-    @Before\n-    public void setUpNewDeviceAndModule() throws IOException, IotHubException, URISyntaxException, InterruptedException, ModuleClientException, GeneralSecurityException\n+    @Test\n+    @StandardTierHubOnlyTest\n+    public void testGetDeviceTwin() throws IOException, InterruptedException, IotHubException, GeneralSecurityException, ModuleClientException, URISyntaxException\n     {\n         super.setUpNewDeviceAndModule();\n+        super.testGetDeviceTwin();\n     }\n \n     @Test\n     @StandardTierHubOnlyTest\n-    public void testGetDeviceTwin() throws IOException, InterruptedException, IotHubException\n+    public void testGetDeviceTwinWithProxy() throws IOException, InterruptedException, IotHubException, GeneralSecurityException, ModuleClientException, URISyntaxException\n     {\n-        super.testGetDeviceTwin();\n+        if (testInstance.protocol != IotHubClientProtocol.MQTT || testInstance.authenticationType != AuthenticationType.SAS || testInstance.clientType != ClientType.DEVICE_CLIENT)\n+        {\n+            // This test doesn't really care about the device side protocol or authentication, so just run it once\n+            // when the device is using MQTT with SAS auth\n+            return;\n+        }\n+\n+        super.setUpNewDeviceAndModule();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9a9cf16e5a95442c588c51539c3c0679978264e"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA4ODk1Ng==", "bodyText": "The @ Before runs before any of the short circuiting we do at line 66 above. Basically, there is no need to setup for a test that doesn't need to run", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r468088956", "createdAt": "2020-08-10T18:13:43Z", "author": {"login": "timtay-microsoft"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/GetTwinTests.java", "diffHunk": "@@ -38,16 +47,47 @@ public GetTwinTests(IotHubClientProtocol protocol, AuthenticationType authentica\n         super(protocol, authenticationType, clientType, publicKeyCert, privateKey, x509Thumbprint);\n     }\n \n-    @Before\n-    public void setUpNewDeviceAndModule() throws IOException, IotHubException, URISyntaxException, InterruptedException, ModuleClientException, GeneralSecurityException\n+    @Test\n+    @StandardTierHubOnlyTest\n+    public void testGetDeviceTwin() throws IOException, InterruptedException, IotHubException, GeneralSecurityException, ModuleClientException, URISyntaxException\n     {\n         super.setUpNewDeviceAndModule();\n+        super.testGetDeviceTwin();\n     }\n \n     @Test\n     @StandardTierHubOnlyTest\n-    public void testGetDeviceTwin() throws IOException, InterruptedException, IotHubException\n+    public void testGetDeviceTwinWithProxy() throws IOException, InterruptedException, IotHubException, GeneralSecurityException, ModuleClientException, URISyntaxException\n     {\n-        super.testGetDeviceTwin();\n+        if (testInstance.protocol != IotHubClientProtocol.MQTT || testInstance.authenticationType != AuthenticationType.SAS || testInstance.clientType != ClientType.DEVICE_CLIENT)\n+        {\n+            // This test doesn't really care about the device side protocol or authentication, so just run it once\n+            // when the device is using MQTT with SAS auth\n+            return;\n+        }\n+\n+        super.setUpNewDeviceAndModule();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwMTI5OQ=="}, "originalCommit": {"oid": "b9a9cf16e5a95442c588c51539c3c0679978264e"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5NzgwOQ==", "bodyText": "It helps to cut down on device identity creation, which has been a bottleneck lately in our builds", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r468097809", "createdAt": "2020-08-10T18:30:19Z", "author": {"login": "timtay-microsoft"}, "path": "iot-e2e-tests/common/src/test/java/tests/integration/com/microsoft/azure/sdk/iot/iothub/twin/GetTwinTests.java", "diffHunk": "@@ -38,16 +47,47 @@ public GetTwinTests(IotHubClientProtocol protocol, AuthenticationType authentica\n         super(protocol, authenticationType, clientType, publicKeyCert, privateKey, x509Thumbprint);\n     }\n \n-    @Before\n-    public void setUpNewDeviceAndModule() throws IOException, IotHubException, URISyntaxException, InterruptedException, ModuleClientException, GeneralSecurityException\n+    @Test\n+    @StandardTierHubOnlyTest\n+    public void testGetDeviceTwin() throws IOException, InterruptedException, IotHubException, GeneralSecurityException, ModuleClientException, URISyntaxException\n     {\n         super.setUpNewDeviceAndModule();\n+        super.testGetDeviceTwin();\n     }\n \n     @Test\n     @StandardTierHubOnlyTest\n-    public void testGetDeviceTwin() throws IOException, InterruptedException, IotHubException\n+    public void testGetDeviceTwinWithProxy() throws IOException, InterruptedException, IotHubException, GeneralSecurityException, ModuleClientException, URISyntaxException\n     {\n-        super.testGetDeviceTwin();\n+        if (testInstance.protocol != IotHubClientProtocol.MQTT || testInstance.authenticationType != AuthenticationType.SAS || testInstance.clientType != ClientType.DEVICE_CLIENT)\n+        {\n+            // This test doesn't really care about the device side protocol or authentication, so just run it once\n+            // when the device is using MQTT with SAS auth\n+            return;\n+        }\n+\n+        super.setUpNewDeviceAndModule();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwMTI5OQ=="}, "originalCommit": {"oid": "b9a9cf16e5a95442c588c51539c3c0679978264e"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTA2NDc2OnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethod.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMTo0MToyOFrOG9FNQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODoxNDozN1rOG-Z6OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwMTYzNQ==", "bodyText": "nit: can we have the tabbing differentiate between the builder args and createFromConnectionString args. Eg:\npublic static DeviceMethod createFromConnectionString(String connectionString) throws IOException\n{\n    return createFromConnectionString(\n            connectionString,\n            DeviceMethodClientOptions.builder()\n                    .httpConnectTimeout(DeviceMethodClientOptions.DEFAULT_HTTP_CONNECT_TIMEOUT_MS)\n                    .httpReadTimeout(DeviceMethodClientOptions.DEFAULT_HTTP_READ_TIMEOUT_MS)\n                    .build());\n}", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r466701635", "createdAt": "2020-08-06T21:41:28Z", "author": {"login": "abhipsaMisra"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethod.java", "diffHunk": "@@ -22,28 +23,47 @@\n {\n     private IotHubConnectionString iotHubConnectionString = null;\n     private Integer requestId = 0;\n-    private static final int DEFAULT_RESPONSE_TIMEOUT = 30; // default response timeout is 30 seconds\n-    private static final int DEFAULT_CONNECT_TIMEOUT = 0;\n-    private static final int THOUSAND_MS = 1000;\n+\n+    private DeviceMethodClientOptions options;\n+\n     /**\n      * Create a DeviceMethod instance from the information in the connection string.\n      *\n      * @param connectionString is the IoTHub connection string.\n      * @return an instance of the DeviceMethod.\n-     * @throws IOException This exception is thrown if the object creation failed\n+     * @throws IOException This exception is thrown if the object creation failed.\n      */\n     public static DeviceMethod createFromConnectionString(String connectionString) throws IOException\n+    {\n+        return createFromConnectionString(connectionString, DeviceMethodClientOptions.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9a9cf16e5a95442c588c51539c3c0679978264e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA4OTQwMQ==", "bodyText": "I'll do it here and for the same block of code in DeviceTwin.java sure", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r468089401", "createdAt": "2020-08-10T18:14:37Z", "author": {"login": "timtay-microsoft"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethod.java", "diffHunk": "@@ -22,28 +23,47 @@\n {\n     private IotHubConnectionString iotHubConnectionString = null;\n     private Integer requestId = 0;\n-    private static final int DEFAULT_RESPONSE_TIMEOUT = 30; // default response timeout is 30 seconds\n-    private static final int DEFAULT_CONNECT_TIMEOUT = 0;\n-    private static final int THOUSAND_MS = 1000;\n+\n+    private DeviceMethodClientOptions options;\n+\n     /**\n      * Create a DeviceMethod instance from the information in the connection string.\n      *\n      * @param connectionString is the IoTHub connection string.\n      * @return an instance of the DeviceMethod.\n-     * @throws IOException This exception is thrown if the object creation failed\n+     * @throws IOException This exception is thrown if the object creation failed.\n      */\n     public static DeviceMethod createFromConnectionString(String connectionString) throws IOException\n+    {\n+        return createFromConnectionString(connectionString, DeviceMethodClientOptions.builder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwMTYzNQ=="}, "originalCommit": {"oid": "b9a9cf16e5a95442c588c51539c3c0679978264e"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTA4MTc3OnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethodClientOptions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMTo0ODowOFrOG9FX2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODoxNTozMFrOG-Z8VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwNDM0NA==", "bodyText": "Is this a customer request?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r466704344", "createdAt": "2020-08-06T21:48:08Z", "author": {"login": "bikamani"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethodClientOptions.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package com.microsoft.azure.sdk.iot.service.devicetwin;\n+\n+import com.microsoft.azure.sdk.iot.service.ProxyOptions;\n+import lombok.Builder;\n+import lombok.Getter;\n+\n+/**\n+ * Configurable options for all device method operations.\n+ */\n+@Builder\n+public class DeviceMethodClientOptions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9a9cf16e5a95442c588c51539c3c0679978264e"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA4OTk0MQ==", "bodyText": "The builder pattern is just for consistency with our RegistryManagerOptions class. These options are a customer ask to configure, yes", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r468089941", "createdAt": "2020-08-10T18:15:30Z", "author": {"login": "timtay-microsoft"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethodClientOptions.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package com.microsoft.azure.sdk.iot.service.devicetwin;\n+\n+import com.microsoft.azure.sdk.iot.service.ProxyOptions;\n+import lombok.Builder;\n+import lombok.Getter;\n+\n+/**\n+ * Configurable options for all device method operations.\n+ */\n+@Builder\n+public class DeviceMethodClientOptions", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwNDM0NA=="}, "originalCommit": {"oid": "b9a9cf16e5a95442c588c51539c3c0679978264e"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTA4ODUyOnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethodClientOptions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMTo1MDozMlrOG9FcDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODoxNTo1MFrOG-Z88A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwNTQyMw==", "bodyText": "Why are these values 24?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r466705423", "createdAt": "2020-08-06T21:50:32Z", "author": {"login": "bikamani"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethodClientOptions.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package com.microsoft.azure.sdk.iot.service.devicetwin;\n+\n+import com.microsoft.azure.sdk.iot.service.ProxyOptions;\n+import lombok.Builder;\n+import lombok.Getter;\n+\n+/**\n+ * Configurable options for all device method operations.\n+ */\n+@Builder\n+public class DeviceMethodClientOptions\n+{\n+    protected static final Integer DEFAULT_HTTP_READ_TIMEOUT_MS = 24000; // 24 seconds\n+    protected static final Integer DEFAULT_HTTP_CONNECT_TIMEOUT_MS = 24000; // 24 seconds", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9a9cf16e5a95442c588c51539c3c0679978264e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5MDA5Ng==", "bodyText": "These were the defaults before my changes here", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r468090096", "createdAt": "2020-08-10T18:15:50Z", "author": {"login": "timtay-microsoft"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethodClientOptions.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package com.microsoft.azure.sdk.iot.service.devicetwin;\n+\n+import com.microsoft.azure.sdk.iot.service.ProxyOptions;\n+import lombok.Builder;\n+import lombok.Getter;\n+\n+/**\n+ * Configurable options for all device method operations.\n+ */\n+@Builder\n+public class DeviceMethodClientOptions\n+{\n+    protected static final Integer DEFAULT_HTTP_READ_TIMEOUT_MS = 24000; // 24 seconds\n+    protected static final Integer DEFAULT_HTTP_CONNECT_TIMEOUT_MS = 24000; // 24 seconds", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwNTQyMw=="}, "originalCommit": {"oid": "b9a9cf16e5a95442c588c51539c3c0679978264e"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTA4ODU5OnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethod.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMTo1MDozM1rOG9FcGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMDo1MDo1MFrOHAdNow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwNTQzMw==", "bodyText": "If proxy is present as a part of options, then in order to invoke methods and update twins, I'd have to set proxy to their specific \"options\" types, correct?\nWouldn't that be a bit of overhead? What do think about having a ClientOptions type instead (with proxy, and anything else that would be common across the client), and have these operations specific options inherit from that?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r466705433", "createdAt": "2020-08-06T21:50:33Z", "author": {"login": "abhipsaMisra"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethod.java", "diffHunk": "@@ -127,74 +147,43 @@ public synchronized MethodResult invoke(String deviceId, String moduleId, String\n      * @param methodName is the name of the method that shall be invoked on the device.\n      * @param responseTimeoutInSeconds is the maximum waiting time for a response from the device in seconds.\n      * @param connectTimeoutInSeconds is the maximum waiting time for a response from the connection in seconds.\n-     * @param payload is the the method parameter\n-     * @return the status and payload resulted from the method invoke\n-     * @throws IotHubException This exception is thrown if the response verification failed\n-     * @throws IOException This exception is thrown if the IO operation failed\n+     * @param payload is the the method parameter.\n+     * @return the status and payload resulted from the method invoke.\n+     * @throws IotHubException This exception is thrown if the response verification failed.\n+     * @throws IOException This exception is thrown if the IO operation failed.\n      */\n     private synchronized MethodResult invokeMethod(URL url, String methodName, Long responseTimeoutInSeconds, Long connectTimeoutInSeconds, Object payload) throws IotHubException, IOException\n     {\n-        /* Codes_SRS_DEVICEMETHOD_21_006: [The invoke shall throw IllegalArgumentException if the provided responseTimeoutInSeconds is negative.] */\n-        /* Codes_SRS_DEVICEMETHOD_21_007: [The invoke shall throw IllegalArgumentException if the provided connectTimeoutInSeconds is negative.] */\n-        /* Codes_SRS_DEVICEMETHOD_21_014: [The invoke shall bypass the Exception if one of the functions called by invoke failed.] */\n         MethodParser methodParser = new MethodParser(methodName, responseTimeoutInSeconds, connectTimeoutInSeconds, payload);\n \n-        /* Codes_SRS_DEVICEMETHOD_21_011: [The invoke shall add a HTTP body with Json created by the `serializer.MethodParser`.] */\n         String json = methodParser.toJson();\n         if(json == null)\n         {\n-            /* Codes_SRS_DEVICEMETHOD_21_012: [If `MethodParser` return a null Json, the invoke shall throw IllegalArgumentException.] */\n             throw new IllegalArgumentException(\"MethodParser return null Json\");\n         }\n \n-        long  responseTimeout, connectTimeout;\n+        Proxy proxy = options.getProxyOptions() != null ? options.getProxyOptions().getProxy() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9a9cf16e5a95442c588c51539c3c0679978264e"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5MjY3MQ==", "bodyText": "Customers can re-use the same ProxyOptions instance, but you are right that they would have to create separate methods/twin/registry options classes to house that. It is a bit of overhead, sure, but I think this is the easiest design for customer's to understand.\nI'm not sure inheritance here would make for the best user experience. If the constructor for a twin/method service client took a concrete class named ClientOptions, then how am I supposed to know that there is also some TwinClientOptions class that inherits from it that has other options that I may want? I'd rather just have several concrete classes so that the API is quick to pick up and customer's won't miss important configurable options.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r468092671", "createdAt": "2020-08-10T18:20:35Z", "author": {"login": "timtay-microsoft"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethod.java", "diffHunk": "@@ -127,74 +147,43 @@ public synchronized MethodResult invoke(String deviceId, String moduleId, String\n      * @param methodName is the name of the method that shall be invoked on the device.\n      * @param responseTimeoutInSeconds is the maximum waiting time for a response from the device in seconds.\n      * @param connectTimeoutInSeconds is the maximum waiting time for a response from the connection in seconds.\n-     * @param payload is the the method parameter\n-     * @return the status and payload resulted from the method invoke\n-     * @throws IotHubException This exception is thrown if the response verification failed\n-     * @throws IOException This exception is thrown if the IO operation failed\n+     * @param payload is the the method parameter.\n+     * @return the status and payload resulted from the method invoke.\n+     * @throws IotHubException This exception is thrown if the response verification failed.\n+     * @throws IOException This exception is thrown if the IO operation failed.\n      */\n     private synchronized MethodResult invokeMethod(URL url, String methodName, Long responseTimeoutInSeconds, Long connectTimeoutInSeconds, Object payload) throws IotHubException, IOException\n     {\n-        /* Codes_SRS_DEVICEMETHOD_21_006: [The invoke shall throw IllegalArgumentException if the provided responseTimeoutInSeconds is negative.] */\n-        /* Codes_SRS_DEVICEMETHOD_21_007: [The invoke shall throw IllegalArgumentException if the provided connectTimeoutInSeconds is negative.] */\n-        /* Codes_SRS_DEVICEMETHOD_21_014: [The invoke shall bypass the Exception if one of the functions called by invoke failed.] */\n         MethodParser methodParser = new MethodParser(methodName, responseTimeoutInSeconds, connectTimeoutInSeconds, payload);\n \n-        /* Codes_SRS_DEVICEMETHOD_21_011: [The invoke shall add a HTTP body with Json created by the `serializer.MethodParser`.] */\n         String json = methodParser.toJson();\n         if(json == null)\n         {\n-            /* Codes_SRS_DEVICEMETHOD_21_012: [If `MethodParser` return a null Json, the invoke shall throw IllegalArgumentException.] */\n             throw new IllegalArgumentException(\"MethodParser return null Json\");\n         }\n \n-        long  responseTimeout, connectTimeout;\n+        Proxy proxy = options.getProxyOptions() != null ? options.getProxyOptions().getProxy() : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwNTQzMw=="}, "originalCommit": {"oid": "b9a9cf16e5a95442c588c51539c3c0679978264e"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5OTA3Mw==", "bodyText": "Yes, I agree; inheritance will not be solving anything here from customer's perspective, but it might make code maintenance easier for us though.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r468099073", "createdAt": "2020-08-10T18:32:50Z", "author": {"login": "abhipsaMisra"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethod.java", "diffHunk": "@@ -127,74 +147,43 @@ public synchronized MethodResult invoke(String deviceId, String moduleId, String\n      * @param methodName is the name of the method that shall be invoked on the device.\n      * @param responseTimeoutInSeconds is the maximum waiting time for a response from the device in seconds.\n      * @param connectTimeoutInSeconds is the maximum waiting time for a response from the connection in seconds.\n-     * @param payload is the the method parameter\n-     * @return the status and payload resulted from the method invoke\n-     * @throws IotHubException This exception is thrown if the response verification failed\n-     * @throws IOException This exception is thrown if the IO operation failed\n+     * @param payload is the the method parameter.\n+     * @return the status and payload resulted from the method invoke.\n+     * @throws IotHubException This exception is thrown if the response verification failed.\n+     * @throws IOException This exception is thrown if the IO operation failed.\n      */\n     private synchronized MethodResult invokeMethod(URL url, String methodName, Long responseTimeoutInSeconds, Long connectTimeoutInSeconds, Object payload) throws IotHubException, IOException\n     {\n-        /* Codes_SRS_DEVICEMETHOD_21_006: [The invoke shall throw IllegalArgumentException if the provided responseTimeoutInSeconds is negative.] */\n-        /* Codes_SRS_DEVICEMETHOD_21_007: [The invoke shall throw IllegalArgumentException if the provided connectTimeoutInSeconds is negative.] */\n-        /* Codes_SRS_DEVICEMETHOD_21_014: [The invoke shall bypass the Exception if one of the functions called by invoke failed.] */\n         MethodParser methodParser = new MethodParser(methodName, responseTimeoutInSeconds, connectTimeoutInSeconds, payload);\n \n-        /* Codes_SRS_DEVICEMETHOD_21_011: [The invoke shall add a HTTP body with Json created by the `serializer.MethodParser`.] */\n         String json = methodParser.toJson();\n         if(json == null)\n         {\n-            /* Codes_SRS_DEVICEMETHOD_21_012: [If `MethodParser` return a null Json, the invoke shall throw IllegalArgumentException.] */\n             throw new IllegalArgumentException(\"MethodParser return null Json\");\n         }\n \n-        long  responseTimeout, connectTimeout;\n+        Proxy proxy = options.getProxyOptions() != null ? options.getProxyOptions().getProxy() : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwNTQzMw=="}, "originalCommit": {"oid": "b9a9cf16e5a95442c588c51539c3c0679978264e"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0MDY3NQ==", "bodyText": "But what is more important, customer usability or code maintenance? I don't think that we are imposing too much on ourselves here", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r470240675", "createdAt": "2020-08-13T20:50:50Z", "author": {"login": "timtay-microsoft"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethod.java", "diffHunk": "@@ -127,74 +147,43 @@ public synchronized MethodResult invoke(String deviceId, String moduleId, String\n      * @param methodName is the name of the method that shall be invoked on the device.\n      * @param responseTimeoutInSeconds is the maximum waiting time for a response from the device in seconds.\n      * @param connectTimeoutInSeconds is the maximum waiting time for a response from the connection in seconds.\n-     * @param payload is the the method parameter\n-     * @return the status and payload resulted from the method invoke\n-     * @throws IotHubException This exception is thrown if the response verification failed\n-     * @throws IOException This exception is thrown if the IO operation failed\n+     * @param payload is the the method parameter.\n+     * @return the status and payload resulted from the method invoke.\n+     * @throws IotHubException This exception is thrown if the response verification failed.\n+     * @throws IOException This exception is thrown if the IO operation failed.\n      */\n     private synchronized MethodResult invokeMethod(URL url, String methodName, Long responseTimeoutInSeconds, Long connectTimeoutInSeconds, Object payload) throws IotHubException, IOException\n     {\n-        /* Codes_SRS_DEVICEMETHOD_21_006: [The invoke shall throw IllegalArgumentException if the provided responseTimeoutInSeconds is negative.] */\n-        /* Codes_SRS_DEVICEMETHOD_21_007: [The invoke shall throw IllegalArgumentException if the provided connectTimeoutInSeconds is negative.] */\n-        /* Codes_SRS_DEVICEMETHOD_21_014: [The invoke shall bypass the Exception if one of the functions called by invoke failed.] */\n         MethodParser methodParser = new MethodParser(methodName, responseTimeoutInSeconds, connectTimeoutInSeconds, payload);\n \n-        /* Codes_SRS_DEVICEMETHOD_21_011: [The invoke shall add a HTTP body with Json created by the `serializer.MethodParser`.] */\n         String json = methodParser.toJson();\n         if(json == null)\n         {\n-            /* Codes_SRS_DEVICEMETHOD_21_012: [If `MethodParser` return a null Json, the invoke shall throw IllegalArgumentException.] */\n             throw new IllegalArgumentException(\"MethodParser return null Json\");\n         }\n \n-        long  responseTimeout, connectTimeout;\n+        Proxy proxy = options.getProxyOptions() != null ? options.getProxyOptions().getProxy() : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwNTQzMw=="}, "originalCommit": {"oid": "b9a9cf16e5a95442c588c51539c3c0679978264e"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTEyNjEwOnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethodClientOptions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMjowNToxOFrOG9Fy9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODoyMjo0NVrOG-aLiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcxMTI4Ng==", "bodyText": "What happens if these are negative values?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r466711286", "createdAt": "2020-08-06T22:05:18Z", "author": {"login": "bikamani"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethodClientOptions.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package com.microsoft.azure.sdk.iot.service.devicetwin;\n+\n+import com.microsoft.azure.sdk.iot.service.ProxyOptions;\n+import lombok.Builder;\n+import lombok.Getter;\n+\n+/**\n+ * Configurable options for all device method operations.\n+ */\n+@Builder\n+public class DeviceMethodClientOptions\n+{\n+    protected static final Integer DEFAULT_HTTP_READ_TIMEOUT_MS = 24000; // 24 seconds\n+    protected static final Integer DEFAULT_HTTP_CONNECT_TIMEOUT_MS = 24000; // 24 seconds\n+\n+    /**\n+     * The options that specify what proxy to tunnel through. If null, no proxy will be used.\n+     */\n+    @Getter\n+    private ProxyOptions proxyOptions;\n+\n+    /**\n+     * The http read timeout to a specified timeout, in milliseconds. A non-zero value specifies the timeout when reading from\n+     * Input stream after a connection is established to a resource. If the timeout expires before there is data available\n+     * for read, a java.net.SocketTimeoutException is raised. A timeout of zero is interpreted as an infinite timeout.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9a9cf16e5a95442c588c51539c3c0679978264e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5MzgzMw==", "bodyText": "The http library will throw an exception saying \"timeout cannot be negative\"", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r468093833", "createdAt": "2020-08-10T18:22:45Z", "author": {"login": "timtay-microsoft"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceMethodClientOptions.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package com.microsoft.azure.sdk.iot.service.devicetwin;\n+\n+import com.microsoft.azure.sdk.iot.service.ProxyOptions;\n+import lombok.Builder;\n+import lombok.Getter;\n+\n+/**\n+ * Configurable options for all device method operations.\n+ */\n+@Builder\n+public class DeviceMethodClientOptions\n+{\n+    protected static final Integer DEFAULT_HTTP_READ_TIMEOUT_MS = 24000; // 24 seconds\n+    protected static final Integer DEFAULT_HTTP_CONNECT_TIMEOUT_MS = 24000; // 24 seconds\n+\n+    /**\n+     * The options that specify what proxy to tunnel through. If null, no proxy will be used.\n+     */\n+    @Getter\n+    private ProxyOptions proxyOptions;\n+\n+    /**\n+     * The http read timeout to a specified timeout, in milliseconds. A non-zero value specifies the timeout when reading from\n+     * Input stream after a connection is established to a resource. If the timeout expires before there is data available\n+     * for read, a java.net.SocketTimeoutException is raised. A timeout of zero is interpreted as an infinite timeout.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcxMTI4Ng=="}, "originalCommit": {"oid": "b9a9cf16e5a95442c588c51539c3c0679978264e"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTEzOTcwOnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceOperations.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMjoxMToyM1rOG9F7dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODoyMTozNlrOG-aJLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcxMzQ2MA==", "bodyText": "Add a comment about this timeout values being in seconds", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r466713460", "createdAt": "2020-08-06T22:11:23Z", "author": {"login": "bikamani"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceOperations.java", "diffHunk": "@@ -141,9 +144,94 @@ public static HttpResponse request(\n     }\n \n     /**\n-     * Sets headers to be used on next HTTP request\n-     * @param httpHeaders non null and non empty custom headers\n-     * @throws IllegalArgumentException This exception is thrown if headers were null or empty\n+     * Send a http request to the IoTHub using the Twin/Method standard, and return its response.\n+     *\n+     * @param iotHubConnectionString is the connection string for the IoTHub.\n+     * @param url is the Twin URL for the device ID.\n+     * @param method is the HTTP method (GET, POST, DELETE, PATCH, PUT).\n+     * @param payload is the array of bytes that contains the payload.\n+     * @param requestId is an unique number that identify the request.\n+     * @param connectTimeout the http connect timeout to use.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9a9cf16e5a95442c588c51539c3c0679978264e"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5MzIyOA==", "bodyText": "milliseconds, but yeah I'll add a note", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r468093228", "createdAt": "2020-08-10T18:21:36Z", "author": {"login": "timtay-microsoft"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceOperations.java", "diffHunk": "@@ -141,9 +144,94 @@ public static HttpResponse request(\n     }\n \n     /**\n-     * Sets headers to be used on next HTTP request\n-     * @param httpHeaders non null and non empty custom headers\n-     * @throws IllegalArgumentException This exception is thrown if headers were null or empty\n+     * Send a http request to the IoTHub using the Twin/Method standard, and return its response.\n+     *\n+     * @param iotHubConnectionString is the connection string for the IoTHub.\n+     * @param url is the Twin URL for the device ID.\n+     * @param method is the HTTP method (GET, POST, DELETE, PATCH, PUT).\n+     * @param payload is the array of bytes that contains the payload.\n+     * @param requestId is an unique number that identify the request.\n+     * @param connectTimeout the http connect timeout to use.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcxMzQ2MA=="}, "originalCommit": {"oid": "b9a9cf16e5a95442c588c51539c3c0679978264e"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTEzOTg0OnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceOperations.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMjoxMToyNlrOG9F7jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODoyMjoyM1rOG-aKyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcxMzQ4NA==", "bodyText": "should we not check these values >= 0? What's the behavior otherwise?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r466713484", "createdAt": "2020-08-06T22:11:26Z", "author": {"login": "bikamani"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceOperations.java", "diffHunk": "@@ -141,9 +144,94 @@ public static HttpResponse request(\n     }\n \n     /**\n-     * Sets headers to be used on next HTTP request\n-     * @param httpHeaders non null and non empty custom headers\n-     * @throws IllegalArgumentException This exception is thrown if headers were null or empty\n+     * Send a http request to the IoTHub using the Twin/Method standard, and return its response.\n+     *\n+     * @param iotHubConnectionString is the connection string for the IoTHub.\n+     * @param url is the Twin URL for the device ID.\n+     * @param method is the HTTP method (GET, POST, DELETE, PATCH, PUT).\n+     * @param payload is the array of bytes that contains the payload.\n+     * @param requestId is an unique number that identify the request.\n+     * @param connectTimeout the http connect timeout to use.\n+     * @param readTimeout the http read timeout to use.\n+     * @param proxy the proxy to use, or null if no proxy will be used.\n+     * @return the result of the request.\n+     * @throws IotHubException This exception is thrown if the response verification failed.\n+     * @throws IOException This exception is thrown if the IO operation failed.\n+     */\n+    public static HttpResponse request(\n+            IotHubConnectionString iotHubConnectionString,\n+            URL url,\n+            HttpMethod method,\n+            byte[] payload,\n+            String requestId,\n+            int connectTimeout,\n+            int readTimeout,\n+            Proxy proxy)\n+            throws IOException, IotHubException, IllegalArgumentException\n+    {\n+        if (iotHubConnectionString == null)\n+        {\n+            throw new IllegalArgumentException(\"Null ConnectionString\");\n+        }\n+\n+        if (url == null)\n+        {\n+            throw new IllegalArgumentException(\"Null URL\");\n+        }\n+\n+        if (method == null)\n+        {\n+            throw new IllegalArgumentException(\"Null method\");\n+        }\n+\n+        String sasTokenString = new IotHubServiceSasToken(iotHubConnectionString).toString();\n+        if((sasTokenString == null) || sasTokenString.isEmpty())\n+        {\n+            throw new IOException(\"Illegal sasToken null or empty\");\n+        }\n+\n+        HttpRequest request;\n+        if (proxy != null)\n+        {\n+            request = new HttpRequest(url, method, payload, proxy);\n+        }\n+        else\n+        {\n+            request = new HttpRequest(url, method, payload);\n+        }\n+\n+        request.setReadTimeoutMillis(readTimeout);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9a9cf16e5a95442c588c51539c3c0679978264e"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5MzY0MA==", "bodyText": "The http library we use does this check for us and throws an appropriate exception, so I don't see the need to add any checking up here.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r468093640", "createdAt": "2020-08-10T18:22:23Z", "author": {"login": "timtay-microsoft"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceOperations.java", "diffHunk": "@@ -141,9 +144,94 @@ public static HttpResponse request(\n     }\n \n     /**\n-     * Sets headers to be used on next HTTP request\n-     * @param httpHeaders non null and non empty custom headers\n-     * @throws IllegalArgumentException This exception is thrown if headers were null or empty\n+     * Send a http request to the IoTHub using the Twin/Method standard, and return its response.\n+     *\n+     * @param iotHubConnectionString is the connection string for the IoTHub.\n+     * @param url is the Twin URL for the device ID.\n+     * @param method is the HTTP method (GET, POST, DELETE, PATCH, PUT).\n+     * @param payload is the array of bytes that contains the payload.\n+     * @param requestId is an unique number that identify the request.\n+     * @param connectTimeout the http connect timeout to use.\n+     * @param readTimeout the http read timeout to use.\n+     * @param proxy the proxy to use, or null if no proxy will be used.\n+     * @return the result of the request.\n+     * @throws IotHubException This exception is thrown if the response verification failed.\n+     * @throws IOException This exception is thrown if the IO operation failed.\n+     */\n+    public static HttpResponse request(\n+            IotHubConnectionString iotHubConnectionString,\n+            URL url,\n+            HttpMethod method,\n+            byte[] payload,\n+            String requestId,\n+            int connectTimeout,\n+            int readTimeout,\n+            Proxy proxy)\n+            throws IOException, IotHubException, IllegalArgumentException\n+    {\n+        if (iotHubConnectionString == null)\n+        {\n+            throw new IllegalArgumentException(\"Null ConnectionString\");\n+        }\n+\n+        if (url == null)\n+        {\n+            throw new IllegalArgumentException(\"Null URL\");\n+        }\n+\n+        if (method == null)\n+        {\n+            throw new IllegalArgumentException(\"Null method\");\n+        }\n+\n+        String sasTokenString = new IotHubServiceSasToken(iotHubConnectionString).toString();\n+        if((sasTokenString == null) || sasTokenString.isEmpty())\n+        {\n+            throw new IOException(\"Illegal sasToken null or empty\");\n+        }\n+\n+        HttpRequest request;\n+        if (proxy != null)\n+        {\n+            request = new HttpRequest(url, method, payload, proxy);\n+        }\n+        else\n+        {\n+            request = new HttpRequest(url, method, payload);\n+        }\n+\n+        request.setReadTimeoutMillis(readTimeout);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcxMzQ4NA=="}, "originalCommit": {"oid": "b9a9cf16e5a95442c588c51539c3c0679978264e"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTE0Mjg4OnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceOperations.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMjoxMjo0NlrOG9F9bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxODoyNTo0NVrOG-aRwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcxMzk2Nw==", "bodyText": "should we not catch exception here?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r466713967", "createdAt": "2020-08-06T22:12:46Z", "author": {"login": "bikamani"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceOperations.java", "diffHunk": "@@ -141,9 +144,94 @@ public static HttpResponse request(\n     }\n \n     /**\n-     * Sets headers to be used on next HTTP request\n-     * @param httpHeaders non null and non empty custom headers\n-     * @throws IllegalArgumentException This exception is thrown if headers were null or empty\n+     * Send a http request to the IoTHub using the Twin/Method standard, and return its response.\n+     *\n+     * @param iotHubConnectionString is the connection string for the IoTHub.\n+     * @param url is the Twin URL for the device ID.\n+     * @param method is the HTTP method (GET, POST, DELETE, PATCH, PUT).\n+     * @param payload is the array of bytes that contains the payload.\n+     * @param requestId is an unique number that identify the request.\n+     * @param connectTimeout the http connect timeout to use.\n+     * @param readTimeout the http read timeout to use.\n+     * @param proxy the proxy to use, or null if no proxy will be used.\n+     * @return the result of the request.\n+     * @throws IotHubException This exception is thrown if the response verification failed.\n+     * @throws IOException This exception is thrown if the IO operation failed.\n+     */\n+    public static HttpResponse request(\n+            IotHubConnectionString iotHubConnectionString,\n+            URL url,\n+            HttpMethod method,\n+            byte[] payload,\n+            String requestId,\n+            int connectTimeout,\n+            int readTimeout,\n+            Proxy proxy)\n+            throws IOException, IotHubException, IllegalArgumentException\n+    {\n+        if (iotHubConnectionString == null)\n+        {\n+            throw new IllegalArgumentException(\"Null ConnectionString\");\n+        }\n+\n+        if (url == null)\n+        {\n+            throw new IllegalArgumentException(\"Null URL\");\n+        }\n+\n+        if (method == null)\n+        {\n+            throw new IllegalArgumentException(\"Null method\");\n+        }\n+\n+        String sasTokenString = new IotHubServiceSasToken(iotHubConnectionString).toString();\n+        if((sasTokenString == null) || sasTokenString.isEmpty())\n+        {\n+            throw new IOException(\"Illegal sasToken null or empty\");\n+        }\n+\n+        HttpRequest request;\n+        if (proxy != null)\n+        {\n+            request = new HttpRequest(url, method, payload, proxy);\n+        }\n+        else\n+        {\n+            request = new HttpRequest(url, method, payload);\n+        }\n+\n+        request.setReadTimeoutMillis(readTimeout);\n+        request.setConnectTimeoutMillis(connectTimeout);\n+\n+        if((requestId != null) && !requestId.isEmpty())\n+        {\n+            request.setHeaderField(REQUEST_ID, requestId);\n+        }\n+\n+        request.setHeaderField(AUTHORIZATION, sasTokenString);\n+        request.setHeaderField(USER_AGENT, TransportUtils.javaServiceClientIdentifier + TransportUtils.serviceVersion);\n+        request.setHeaderField(ACCEPT, ACCEPT_VALUE);\n+        request.setHeaderField(CONTENT_TYPE, ACCEPT_VALUE + \"; \" + ACCEPT_CHARSET);\n+\n+        if (headers != null)\n+        {\n+            for(Map.Entry<String, String> header : headers.entrySet())\n+            {\n+                request.setHeaderField(header.getKey(), header.getValue());\n+            }\n+\n+            headers = null;\n+        }\n+\n+        HttpResponse response = request.send();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9a9cf16e5a95442c588c51539c3c0679978264e"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5NTQyNQ==", "bodyText": "No, what would we do with the exception if we caught it? For IOExceptions, they will get bubbled up to the user as expected. For hub level exceptions (404, 429, etc) the line below this one check the http response and will generate and throw any appropriate exceptions", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r468095425", "createdAt": "2020-08-10T18:25:45Z", "author": {"login": "timtay-microsoft"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceOperations.java", "diffHunk": "@@ -141,9 +144,94 @@ public static HttpResponse request(\n     }\n \n     /**\n-     * Sets headers to be used on next HTTP request\n-     * @param httpHeaders non null and non empty custom headers\n-     * @throws IllegalArgumentException This exception is thrown if headers were null or empty\n+     * Send a http request to the IoTHub using the Twin/Method standard, and return its response.\n+     *\n+     * @param iotHubConnectionString is the connection string for the IoTHub.\n+     * @param url is the Twin URL for the device ID.\n+     * @param method is the HTTP method (GET, POST, DELETE, PATCH, PUT).\n+     * @param payload is the array of bytes that contains the payload.\n+     * @param requestId is an unique number that identify the request.\n+     * @param connectTimeout the http connect timeout to use.\n+     * @param readTimeout the http read timeout to use.\n+     * @param proxy the proxy to use, or null if no proxy will be used.\n+     * @return the result of the request.\n+     * @throws IotHubException This exception is thrown if the response verification failed.\n+     * @throws IOException This exception is thrown if the IO operation failed.\n+     */\n+    public static HttpResponse request(\n+            IotHubConnectionString iotHubConnectionString,\n+            URL url,\n+            HttpMethod method,\n+            byte[] payload,\n+            String requestId,\n+            int connectTimeout,\n+            int readTimeout,\n+            Proxy proxy)\n+            throws IOException, IotHubException, IllegalArgumentException\n+    {\n+        if (iotHubConnectionString == null)\n+        {\n+            throw new IllegalArgumentException(\"Null ConnectionString\");\n+        }\n+\n+        if (url == null)\n+        {\n+            throw new IllegalArgumentException(\"Null URL\");\n+        }\n+\n+        if (method == null)\n+        {\n+            throw new IllegalArgumentException(\"Null method\");\n+        }\n+\n+        String sasTokenString = new IotHubServiceSasToken(iotHubConnectionString).toString();\n+        if((sasTokenString == null) || sasTokenString.isEmpty())\n+        {\n+            throw new IOException(\"Illegal sasToken null or empty\");\n+        }\n+\n+        HttpRequest request;\n+        if (proxy != null)\n+        {\n+            request = new HttpRequest(url, method, payload, proxy);\n+        }\n+        else\n+        {\n+            request = new HttpRequest(url, method, payload);\n+        }\n+\n+        request.setReadTimeoutMillis(readTimeout);\n+        request.setConnectTimeoutMillis(connectTimeout);\n+\n+        if((requestId != null) && !requestId.isEmpty())\n+        {\n+            request.setHeaderField(REQUEST_ID, requestId);\n+        }\n+\n+        request.setHeaderField(AUTHORIZATION, sasTokenString);\n+        request.setHeaderField(USER_AGENT, TransportUtils.javaServiceClientIdentifier + TransportUtils.serviceVersion);\n+        request.setHeaderField(ACCEPT, ACCEPT_VALUE);\n+        request.setHeaderField(CONTENT_TYPE, ACCEPT_VALUE + \"; \" + ACCEPT_CHARSET);\n+\n+        if (headers != null)\n+        {\n+            for(Map.Entry<String, String> header : headers.entrySet())\n+            {\n+                request.setHeaderField(header.getKey(), header.getValue());\n+            }\n+\n+            headers = null;\n+        }\n+\n+        HttpResponse response = request.send();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcxMzk2Nw=="}, "originalCommit": {"oid": "b9a9cf16e5a95442c588c51539c3c0679978264e"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDgyOTYyOnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceOperations.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxOTozNTowNlrOG-cueQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMDo1MTowNVrOHAdOWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEzNTU0NQ==", "bodyText": "nit: can we add some more context to these exception messages - http method is null, endpoint connecting to is null etc?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r468135545", "createdAt": "2020-08-10T19:35:06Z", "author": {"login": "abhipsaMisra"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceOperations.java", "diffHunk": "@@ -141,9 +144,94 @@ public static HttpResponse request(\n     }\n \n     /**\n-     * Sets headers to be used on next HTTP request\n-     * @param httpHeaders non null and non empty custom headers\n-     * @throws IllegalArgumentException This exception is thrown if headers were null or empty\n+     * Send a http request to the IoTHub using the Twin/Method standard, and return its response.\n+     *\n+     * @param iotHubConnectionString is the connection string for the IoTHub.\n+     * @param url is the Twin URL for the device ID.\n+     * @param method is the HTTP method (GET, POST, DELETE, PATCH, PUT).\n+     * @param payload is the array of bytes that contains the payload.\n+     * @param requestId is an unique number that identify the request.\n+     * @param connectTimeout the http connect timeout to use, in milliseconds.\n+     * @param readTimeout the http read timeout to use, in milliseconds.\n+     * @param proxy the proxy to use, or null if no proxy will be used.\n+     * @return the result of the request.\n+     * @throws IotHubException This exception is thrown if the response verification failed.\n+     * @throws IOException This exception is thrown if the IO operation failed.\n+     */\n+    public static HttpResponse request(\n+            IotHubConnectionString iotHubConnectionString,\n+            URL url,\n+            HttpMethod method,\n+            byte[] payload,\n+            String requestId,\n+            int connectTimeout,\n+            int readTimeout,\n+            Proxy proxy)\n+            throws IOException, IotHubException, IllegalArgumentException\n+    {\n+        if (iotHubConnectionString == null)\n+        {\n+            throw new IllegalArgumentException(\"Null ConnectionString\");\n+        }\n+\n+        if (url == null)\n+        {\n+            throw new IllegalArgumentException(\"Null URL\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7da0f8d9531a021eab767e244234ed44e22c5b85"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0MDg1Ng==", "bodyText": "Sure", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r470240856", "createdAt": "2020-08-13T20:51:05Z", "author": {"login": "timtay-microsoft"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/DeviceOperations.java", "diffHunk": "@@ -141,9 +144,94 @@ public static HttpResponse request(\n     }\n \n     /**\n-     * Sets headers to be used on next HTTP request\n-     * @param httpHeaders non null and non empty custom headers\n-     * @throws IllegalArgumentException This exception is thrown if headers were null or empty\n+     * Send a http request to the IoTHub using the Twin/Method standard, and return its response.\n+     *\n+     * @param iotHubConnectionString is the connection string for the IoTHub.\n+     * @param url is the Twin URL for the device ID.\n+     * @param method is the HTTP method (GET, POST, DELETE, PATCH, PUT).\n+     * @param payload is the array of bytes that contains the payload.\n+     * @param requestId is an unique number that identify the request.\n+     * @param connectTimeout the http connect timeout to use, in milliseconds.\n+     * @param readTimeout the http read timeout to use, in milliseconds.\n+     * @param proxy the proxy to use, or null if no proxy will be used.\n+     * @return the result of the request.\n+     * @throws IotHubException This exception is thrown if the response verification failed.\n+     * @throws IOException This exception is thrown if the IO operation failed.\n+     */\n+    public static HttpResponse request(\n+            IotHubConnectionString iotHubConnectionString,\n+            URL url,\n+            HttpMethod method,\n+            byte[] payload,\n+            String requestId,\n+            int connectTimeout,\n+            int readTimeout,\n+            Proxy proxy)\n+            throws IOException, IotHubException, IllegalArgumentException\n+    {\n+        if (iotHubConnectionString == null)\n+        {\n+            throw new IllegalArgumentException(\"Null ConnectionString\");\n+        }\n+\n+        if (url == null)\n+        {\n+            throw new IllegalArgumentException(\"Null URL\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEzNTU0NQ=="}, "originalCommit": {"oid": "7da0f8d9531a021eab767e244234ed44e22c5b85"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDgzOTgxOnYy", "diffSide": "RIGHT", "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/QueryCollection.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxOTozODoxN1rOG-c0lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMDo1NDoxOVrOHAdU6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEzNzExMA==", "bodyText": "Q - haven't seen this before! Do we have a sample/ test on how these non-sql queries are used?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r468137110", "createdAt": "2020-08-10T19:38:17Z", "author": {"login": "abhipsaMisra"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/QueryCollection.java", "diffHunk": "@@ -116,14 +127,86 @@ protected QueryCollection(int pageSize, QueryType requestQueryType, IotHubConnec\n         this.isInitialQuery = true;\n     }\n \n+    /**\n+     * Constructor for sql based queries\n+     *\n+     * @param query the sql query to use.\n+     * @param pageSize the size of the page to return per query collection response.\n+     * @param requestQueryType the type of query this is.\n+     * @param iotHubConnectionString the connection string to connect with to query against.\n+     * @param url the url to query against.\n+     * @param httpMethod the http method to call with the query.\n+     * @param httpConnectTimeout the http connect timeout to use.\n+     * @param httpReadTimeout the http read timeout to use.\n+     * @throws IllegalArgumentException if page size is 0 or negative, or if the query type is null or unknown, of if the query string is null or empty,\n+     *  or if the provided connection string is null, or if the provided url is null, or if the provided http method is null.\n+     */\n+    protected QueryCollection(String query, int pageSize, QueryType requestQueryType, IotHubConnectionString iotHubConnectionString, URL url, HttpMethod httpMethod, int httpConnectTimeout, int httpReadTimeout, Proxy proxy)\n+    {\n+        this.validateQueryRequestArguments(iotHubConnectionString, url, httpMethod, pageSize, requestQueryType);\n+\n+        ParserUtility.validateQuery(query);\n+\n+        this.pageSize = pageSize;\n+        this.query = query;\n+        this.requestQueryType = requestQueryType;\n+        this.iotHubConnectionString = iotHubConnectionString;\n+        this.responseContinuationToken = null;\n+        this.httpMethod = httpMethod;\n+        this.httpConnectTimeout = httpConnectTimeout;\n+        this.httpReadTimeout = httpReadTimeout;\n+        this.proxy = proxy;\n+        this.url = url;\n+        this.responseQueryType = QueryType.UNKNOWN;\n+\n+        this.isSqlQuery = true;\n+\n+        this.isInitialQuery = true;\n+    }\n+\n+    /**\n+     * Constructor for non-sql based queries.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7da0f8d9531a021eab767e244234ed44e22c5b85"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0MjUzNg==", "bodyText": "Honestly, I'm not sure how this API gets used. \"Non-sql query\" seems contradictory to me", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/878#discussion_r470242536", "createdAt": "2020-08-13T20:54:19Z", "author": {"login": "timtay-microsoft"}, "path": "service/iot-service-client/src/main/java/com/microsoft/azure/sdk/iot/service/devicetwin/QueryCollection.java", "diffHunk": "@@ -116,14 +127,86 @@ protected QueryCollection(int pageSize, QueryType requestQueryType, IotHubConnec\n         this.isInitialQuery = true;\n     }\n \n+    /**\n+     * Constructor for sql based queries\n+     *\n+     * @param query the sql query to use.\n+     * @param pageSize the size of the page to return per query collection response.\n+     * @param requestQueryType the type of query this is.\n+     * @param iotHubConnectionString the connection string to connect with to query against.\n+     * @param url the url to query against.\n+     * @param httpMethod the http method to call with the query.\n+     * @param httpConnectTimeout the http connect timeout to use.\n+     * @param httpReadTimeout the http read timeout to use.\n+     * @throws IllegalArgumentException if page size is 0 or negative, or if the query type is null or unknown, of if the query string is null or empty,\n+     *  or if the provided connection string is null, or if the provided url is null, or if the provided http method is null.\n+     */\n+    protected QueryCollection(String query, int pageSize, QueryType requestQueryType, IotHubConnectionString iotHubConnectionString, URL url, HttpMethod httpMethod, int httpConnectTimeout, int httpReadTimeout, Proxy proxy)\n+    {\n+        this.validateQueryRequestArguments(iotHubConnectionString, url, httpMethod, pageSize, requestQueryType);\n+\n+        ParserUtility.validateQuery(query);\n+\n+        this.pageSize = pageSize;\n+        this.query = query;\n+        this.requestQueryType = requestQueryType;\n+        this.iotHubConnectionString = iotHubConnectionString;\n+        this.responseContinuationToken = null;\n+        this.httpMethod = httpMethod;\n+        this.httpConnectTimeout = httpConnectTimeout;\n+        this.httpReadTimeout = httpReadTimeout;\n+        this.proxy = proxy;\n+        this.url = url;\n+        this.responseQueryType = QueryType.UNKNOWN;\n+\n+        this.isSqlQuery = true;\n+\n+        this.isInitialQuery = true;\n+    }\n+\n+    /**\n+     * Constructor for non-sql based queries.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEzNzExMA=="}, "originalCommit": {"oid": "7da0f8d9531a021eab767e244234ed44e22c5b85"}, "originalPosition": 137}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2927, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}