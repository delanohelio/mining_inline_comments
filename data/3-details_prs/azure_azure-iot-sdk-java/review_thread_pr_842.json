{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1NTIwNTk0", "number": 842, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjo0Mzo0N1rOEMKJvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMDo0NTo0NVrOEMPHkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTg0NzAxOnYy", "diffSide": "RIGHT", "path": "device/iot-device-samples/pnp-device-sample/TemperatureController/src/main/java/samples/com/microsoft/azure/sdk/iot/TemperatureController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjo0Mzo0N1rOGuG-ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjo0Mzo0N1rOGuG-ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwMTk1Nw==", "bodyText": "SneakyThrows: #840 (comment)", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/842#discussion_r451001957", "createdAt": "2020-07-07T16:43:47Z", "author": {"login": "abhipsaMisra"}, "path": "device/iot-device-samples/pnp-device-sample/TemperatureController/src/main/java/samples/com/microsoft/azure/sdk/iot/TemperatureController.java", "diffHunk": "@@ -0,0 +1,382 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package samples.com.microsoft.azure.sdk.iot;\n+\n+import com.microsoft.azure.sdk.iot.deps.twin.TwinCollection;\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.DeviceTwin.*;\n+import com.microsoft.azure.sdk.iot.pnphelpers.PnpHelper;\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.*;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static java.util.Map.*;\n+\n+@Slf4j\n+public class TemperatureController {\n+\n+    public enum StatusCode {\n+        COMPLETED (200),\n+        IN_PROGRESS (202),\n+        NOT_FOUND (404);\n+\n+        private final int value;\n+        StatusCode(int value) {\n+            this.value = value;\n+        }\n+    }\n+\n+    // DTDL interface used: https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/samples/TemperatureController.json\n+    private static final String deviceConnectionString = System.getenv(\"IOTHUB_DEVICE_CONNECTION_STRING\");\n+    private static final String MODEL_ID = \"dtmi:com:example:TemperatureController;1\";\n+    private static final String THERMOSTAT_1 = \"thermostat1\";\n+    private static final String THERMOSTAT_2 = \"thermostat2\";\n+    private static final String SERIAL_NO = \"SR-123456\";\n+\n+    // Plug and play features are available over either MQTT or MQTT_WS.\n+    private static final IotHubClientProtocol protocol = IotHubClientProtocol.MQTT;\n+\n+    private static final Random random = new Random();\n+    private static DeviceClient deviceClient;\n+\n+    // HashMap to hold the temperature updates sent over each \"Thermostat\" component.\n+    // NOTE: Memory constrained device should leverage storage capabilities of an external service to store this information and perform computation.\n+    // See https://docs.microsoft.com/en-us/azure/event-grid/compare-messaging-services for more details.\n+    private static final Map<String, Map<Date, Double>> temperatureReadings = new HashMap<>();\n+\n+    // HashMap to hold the current temperature for each \"Thermostat\" component.\n+    private static final Map<String, Double> temperature = new HashMap<>();\n+\n+    // HashMap to hold the max temperature since last reboot, for each \"Thermostat\" component.\n+    private static final Map<String, Double> maxTemperature = new HashMap<>();\n+\n+    public static void main(String[] args) throws IOException, URISyntaxException {\n+\n+        // This sample follows the following workflow:\n+        // -> Initialize device client instance.\n+        // -> Set handler to receive \"reboot\" command - root interface.\n+        // -> Set handler to receive \"getMaxMinReport\" command - on \"Thermostat\" components.\n+        // -> Set handler to receive \"targetTemperature\" property updates from service - on \"Thermostat\" components.\n+        // -> Send initial device info - \"workingSet\" over telemetry, \"serialNumber\" over reported property update - root interface.\n+        // -> Periodically send \"temperature\" over telemetry - on \"Thermostat\" components.\n+        // -> Send \"maxTempSinceLastReboot\" over property update, when a new max temperature is set - on \"Thermostat\" components.\n+\n+        log.debug(\"Initialize the device client.\");\n+        initializeDeviceClient();\n+\n+        log.debug(\"Set handler for \\\"reboot\\\" command.\");\n+        log.debug(\"Set handler for \\\"getMaxMinReport\\\" command.\");\n+        deviceClient.subscribeToDeviceMethod(new MethodCallback(), null, new MethodIotHubEventCallback(), null);\n+\n+        log.debug(\"Set handler to receive \\\"targetTemperature\\\" updates.\");\n+        deviceClient.startDeviceTwin(new TwinIotHubEventCallback(), null, new GenericPropertyUpdateCallback(), null);\n+        Map<Property, Pair<TwinPropertyCallBack, Object>> desiredPropertyUpdateCallback = Stream.of(\n+                new AbstractMap.SimpleEntry<Property, Pair<TwinPropertyCallBack, Object>>(\n+                        new Property(THERMOSTAT_1, null),\n+                        new Pair<>(new TargetTemperatureUpdateCallback(), THERMOSTAT_1)),\n+                new AbstractMap.SimpleEntry<Property, Pair<TwinPropertyCallBack, Object>>(\n+                        new Property(THERMOSTAT_2, null),\n+                        new Pair<>(new TargetTemperatureUpdateCallback(), THERMOSTAT_2))\n+        ).collect(Collectors.toMap(AbstractMap.SimpleEntry::getKey, AbstractMap.SimpleEntry::getValue));\n+\n+        deviceClient.subscribeToTwinDesiredProperties(desiredPropertyUpdateCallback);\n+\n+        sendDeviceMemory();\n+        sendDeviceSerialNumber();\n+\n+        final AtomicBoolean temperatureReset = new AtomicBoolean(true);\n+        maxTemperature.put(THERMOSTAT_1, 0.0d);\n+        maxTemperature.put(THERMOSTAT_2, 0.0d);\n+\n+        new Thread(new Runnable() {\n+            @SneakyThrows({InterruptedException.class, IOException.class})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f5c71a2d72979d41b29b859130205d87ab552bb"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTg5MzUwOnYy", "diffSide": "RIGHT", "path": "pnp/src/main/java/com/microsoft/azure/sdk/iot/pnphelpers/PnpHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjo1NjoyNlrOGuHb9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzoyMjoxN1rOGuIXKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwOTUyNA==", "bodyText": "For what its worth, the SDK will assign a message id for you if you don't explicitly set one like this", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/842#discussion_r451009524", "createdAt": "2020-07-07T16:56:26Z", "author": {"login": "timtay-microsoft"}, "path": "pnp/src/main/java/com/microsoft/azure/sdk/iot/pnphelpers/PnpHelper.java", "diffHunk": "@@ -0,0 +1,214 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.pnphelpers;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.microsoft.azure.sdk.iot.device.DeviceTwin.Property;\n+import com.microsoft.azure.sdk.iot.device.Message;\n+import lombok.NonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static java.util.Collections.singleton;\n+import static java.util.Collections.singletonMap;\n+\n+public class PnpHelper {\n+\n+    private static final String TELEMETRY_COMPONENT_NAME = \"$.sub\";\n+    private static final String ENCODING_UTF_8 = StandardCharsets.UTF_8.name();\n+    private static final String CONTENT_APPLICATION_JSON = \"application/json\";\n+    private static final String PROPERTY_COMPONENT_IDENTIFIER_KEY = \"__t\";\n+    private static final String PROPERTY_COMPONENT_IDENTIFIER_VALUE = \"c\";\n+\n+    private static final Gson gson = new Gson();\n+    private static final GsonBuilder gsonBuilder = new GsonBuilder();\n+\n+    /**\n+     * Create a plug and play compatible telemetry message.\n+     * @param telemetryName The name of the telemetry, as defined in the DTDL interface. Must be 64 characters or less. For more details refer <see href=\"https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/dtdlv2.md#telemetry\"\n+     * @param telemetryValue The telemetry payload, in the format defined in the DTDL interface.\n+     * @return A plug and play compatible telemetry message, which can be sent to IoT Hub.\n+     */\n+    public static Message createIotHubMessageUtf8(@NonNull String telemetryName, @NonNull Object telemetryValue) {\n+        return createIotHubMessageUtf8(telemetryName, telemetryValue, null);\n+    }\n+\n+    /**\n+     * Create a plug and play compatible telemetry message.\n+     * @param telemetryName The name of the telemetry, as defined in the DTDL interface. Must be 64 characters or less. For more details refer <see href=\"https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/dtdlv2.md#telemetry\"\n+     * @param telemetryValue The telemetry payload, in the format defined in the DTDL interface.\n+     * @param componentName (optional) The name of the component in which the telemetry is defined. Can be null for telemetry defined under the root interface.\n+     * @return A plug and play compatible telemetry message, which can be sent to IoT Hub.\n+     */\n+    public static Message createIotHubMessageUtf8(@NonNull String telemetryName, @NonNull Object telemetryValue, String componentName) {\n+        Map<String, Object> payload = singletonMap(telemetryName, telemetryValue);\n+        String messageId = java.util.UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f5c71a2d72979d41b29b859130205d87ab552bb"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAyNDY4MA==", "bodyText": "Ah, good to know! I'll get of this, then.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/842#discussion_r451024680", "createdAt": "2020-07-07T17:22:17Z", "author": {"login": "abhipsaMisra"}, "path": "pnp/src/main/java/com/microsoft/azure/sdk/iot/pnphelpers/PnpHelper.java", "diffHunk": "@@ -0,0 +1,214 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package com.microsoft.azure.sdk.iot.pnphelpers;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.microsoft.azure.sdk.iot.device.DeviceTwin.Property;\n+import com.microsoft.azure.sdk.iot.device.Message;\n+import lombok.NonNull;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static java.util.Collections.singleton;\n+import static java.util.Collections.singletonMap;\n+\n+public class PnpHelper {\n+\n+    private static final String TELEMETRY_COMPONENT_NAME = \"$.sub\";\n+    private static final String ENCODING_UTF_8 = StandardCharsets.UTF_8.name();\n+    private static final String CONTENT_APPLICATION_JSON = \"application/json\";\n+    private static final String PROPERTY_COMPONENT_IDENTIFIER_KEY = \"__t\";\n+    private static final String PROPERTY_COMPONENT_IDENTIFIER_VALUE = \"c\";\n+\n+    private static final Gson gson = new Gson();\n+    private static final GsonBuilder gsonBuilder = new GsonBuilder();\n+\n+    /**\n+     * Create a plug and play compatible telemetry message.\n+     * @param telemetryName The name of the telemetry, as defined in the DTDL interface. Must be 64 characters or less. For more details refer <see href=\"https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/dtdlv2.md#telemetry\"\n+     * @param telemetryValue The telemetry payload, in the format defined in the DTDL interface.\n+     * @return A plug and play compatible telemetry message, which can be sent to IoT Hub.\n+     */\n+    public static Message createIotHubMessageUtf8(@NonNull String telemetryName, @NonNull Object telemetryValue) {\n+        return createIotHubMessageUtf8(telemetryName, telemetryValue, null);\n+    }\n+\n+    /**\n+     * Create a plug and play compatible telemetry message.\n+     * @param telemetryName The name of the telemetry, as defined in the DTDL interface. Must be 64 characters or less. For more details refer <see href=\"https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/dtdlv2.md#telemetry\"\n+     * @param telemetryValue The telemetry payload, in the format defined in the DTDL interface.\n+     * @param componentName (optional) The name of the component in which the telemetry is defined. Can be null for telemetry defined under the root interface.\n+     * @return A plug and play compatible telemetry message, which can be sent to IoT Hub.\n+     */\n+    public static Message createIotHubMessageUtf8(@NonNull String telemetryName, @NonNull Object telemetryValue, String componentName) {\n+        Map<String, Object> payload = singletonMap(telemetryName, telemetryValue);\n+        String messageId = java.util.UUID.randomUUID().toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwOTUyNA=="}, "originalCommit": {"oid": "6f5c71a2d72979d41b29b859130205d87ab552bb"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjI4NDYyOnYy", "diffSide": "RIGHT", "path": "device/iot-device-samples/pnp-device-sample/TemperatureController/src/main/java/samples/com/microsoft/azure/sdk/iot/TemperatureController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODo0ODowOFrOGuLRcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxOTowOTo1NVrOGuL9nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA3MjM3MQ==", "bodyText": "I would rather call this Component1", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/842#discussion_r451072371", "createdAt": "2020-07-07T18:48:08Z", "author": {"login": "bikamani"}, "path": "device/iot-device-samples/pnp-device-sample/TemperatureController/src/main/java/samples/com/microsoft/azure/sdk/iot/TemperatureController.java", "diffHunk": "@@ -0,0 +1,382 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package samples.com.microsoft.azure.sdk.iot;\n+\n+import com.microsoft.azure.sdk.iot.deps.twin.TwinCollection;\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.DeviceTwin.*;\n+import com.microsoft.azure.sdk.iot.pnphelpers.PnpHelper;\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.*;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static java.util.Map.*;\n+\n+@Slf4j\n+public class TemperatureController {\n+\n+    public enum StatusCode {\n+        COMPLETED (200),\n+        IN_PROGRESS (202),\n+        NOT_FOUND (404);\n+\n+        private final int value;\n+        StatusCode(int value) {\n+            this.value = value;\n+        }\n+    }\n+\n+    // DTDL interface used: https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/samples/TemperatureController.json\n+    private static final String deviceConnectionString = System.getenv(\"IOTHUB_DEVICE_CONNECTION_STRING\");\n+    private static final String MODEL_ID = \"dtmi:com:example:TemperatureController;1\";\n+    private static final String THERMOSTAT_1 = \"thermostat1\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb4054cb019bcc6953c13df320cae7c5a5473fcb"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA4MzY3OQ==", "bodyText": "This is an identifier that you would tend to use in a sample, and model the properties and commands accordingly. So, in this case, it made sense to call this Thermostat1, since it signifies that the component getting modelled is a Thermostat, and the index is 1.\nIf I call this Component1, then my property update handlers, command handlers etc will lose context as to what interface Component1 actually implements.\nDoes that make sense?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/842#discussion_r451083679", "createdAt": "2020-07-07T19:09:55Z", "author": {"login": "abhipsaMisra"}, "path": "device/iot-device-samples/pnp-device-sample/TemperatureController/src/main/java/samples/com/microsoft/azure/sdk/iot/TemperatureController.java", "diffHunk": "@@ -0,0 +1,382 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package samples.com.microsoft.azure.sdk.iot;\n+\n+import com.microsoft.azure.sdk.iot.deps.twin.TwinCollection;\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.DeviceTwin.*;\n+import com.microsoft.azure.sdk.iot.pnphelpers.PnpHelper;\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.*;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static java.util.Map.*;\n+\n+@Slf4j\n+public class TemperatureController {\n+\n+    public enum StatusCode {\n+        COMPLETED (200),\n+        IN_PROGRESS (202),\n+        NOT_FOUND (404);\n+\n+        private final int value;\n+        StatusCode(int value) {\n+            this.value = value;\n+        }\n+    }\n+\n+    // DTDL interface used: https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/samples/TemperatureController.json\n+    private static final String deviceConnectionString = System.getenv(\"IOTHUB_DEVICE_CONNECTION_STRING\");\n+    private static final String MODEL_ID = \"dtmi:com:example:TemperatureController;1\";\n+    private static final String THERMOSTAT_1 = \"thermostat1\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA3MjM3MQ=="}, "originalCommit": {"oid": "cb4054cb019bcc6953c13df320cae7c5a5473fcb"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjI4Njk5OnYy", "diffSide": "RIGHT", "path": "device/iot-device-samples/pnp-device-sample/TemperatureController/src/main/java/samples/com/microsoft/azure/sdk/iot/TemperatureController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODo0ODo1NlrOGuLS6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxOToxNDozOFrOGuMHHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA3Mjc0Nw==", "bodyText": "call it Property to update? or add a comment?", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/842#discussion_r451072747", "createdAt": "2020-07-07T18:48:56Z", "author": {"login": "bikamani"}, "path": "device/iot-device-samples/pnp-device-sample/TemperatureController/src/main/java/samples/com/microsoft/azure/sdk/iot/TemperatureController.java", "diffHunk": "@@ -0,0 +1,382 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package samples.com.microsoft.azure.sdk.iot;\n+\n+import com.microsoft.azure.sdk.iot.deps.twin.TwinCollection;\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.DeviceTwin.*;\n+import com.microsoft.azure.sdk.iot.pnphelpers.PnpHelper;\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.*;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static java.util.Map.*;\n+\n+@Slf4j\n+public class TemperatureController {\n+\n+    public enum StatusCode {\n+        COMPLETED (200),\n+        IN_PROGRESS (202),\n+        NOT_FOUND (404);\n+\n+        private final int value;\n+        StatusCode(int value) {\n+            this.value = value;\n+        }\n+    }\n+\n+    // DTDL interface used: https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/samples/TemperatureController.json\n+    private static final String deviceConnectionString = System.getenv(\"IOTHUB_DEVICE_CONNECTION_STRING\");\n+    private static final String MODEL_ID = \"dtmi:com:example:TemperatureController;1\";\n+    private static final String THERMOSTAT_1 = \"thermostat1\";\n+    private static final String THERMOSTAT_2 = \"thermostat2\";\n+    private static final String SERIAL_NO = \"SR-123456\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb4054cb019bcc6953c13df320cae7c5a5473fcb"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA4NjEwOA==", "bodyText": "This value can ideally be used anywhere, property update/ telemetry/ command response etc. I don't see the value in tying it to the usage here.", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/842#discussion_r451086108", "createdAt": "2020-07-07T19:14:38Z", "author": {"login": "abhipsaMisra"}, "path": "device/iot-device-samples/pnp-device-sample/TemperatureController/src/main/java/samples/com/microsoft/azure/sdk/iot/TemperatureController.java", "diffHunk": "@@ -0,0 +1,382 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+package samples.com.microsoft.azure.sdk.iot;\n+\n+import com.microsoft.azure.sdk.iot.deps.twin.TwinCollection;\n+import com.microsoft.azure.sdk.iot.device.*;\n+import com.microsoft.azure.sdk.iot.device.DeviceTwin.*;\n+import com.microsoft.azure.sdk.iot.pnphelpers.PnpHelper;\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.*;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static java.util.Map.*;\n+\n+@Slf4j\n+public class TemperatureController {\n+\n+    public enum StatusCode {\n+        COMPLETED (200),\n+        IN_PROGRESS (202),\n+        NOT_FOUND (404);\n+\n+        private final int value;\n+        StatusCode(int value) {\n+            this.value = value;\n+        }\n+    }\n+\n+    // DTDL interface used: https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/samples/TemperatureController.json\n+    private static final String deviceConnectionString = System.getenv(\"IOTHUB_DEVICE_CONNECTION_STRING\");\n+    private static final String MODEL_ID = \"dtmi:com:example:TemperatureController;1\";\n+    private static final String THERMOSTAT_1 = \"thermostat1\";\n+    private static final String THERMOSTAT_2 = \"thermostat2\";\n+    private static final String SERIAL_NO = \"SR-123456\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA3Mjc0Nw=="}, "originalCommit": {"oid": "cb4054cb019bcc6953c13df320cae7c5a5473fcb"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjY2MDY2OnYy", "diffSide": "RIGHT", "path": "device/iot-device-samples/pnp-device-sample/Thermostat/src/main/java/samples/com/microsoft/azure/sdk/iot/Thermostat.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMDo0NTo0NVrOGuO9bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMDo0NTo0NVrOGuO9bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEzMjc4Mg==", "bodyText": "Looks like we are adding this file to our own repo as well. So why not point it to our version of it? This repo is not owned by us and it can change so it might be safer to point to our own. Or we don't have a copy on our end so that there is no multi master problem", "url": "https://github.com/Azure/azure-iot-sdk-java/pull/842#discussion_r451132782", "createdAt": "2020-07-07T20:45:45Z", "author": {"login": "vinagesh"}, "path": "device/iot-device-samples/pnp-device-sample/Thermostat/src/main/java/samples/com/microsoft/azure/sdk/iot/Thermostat.java", "diffHunk": "@@ -38,6 +37,7 @@\n         }\n     }\n \n+    // DTDL interface used: https://github.com/Azure/opendigitaltwins-dtdl/blob/master/DTDL/v2/samples/Thermostat.json", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63be2989b8a9d2f46e61acbd996e8f634403940a"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2894, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}