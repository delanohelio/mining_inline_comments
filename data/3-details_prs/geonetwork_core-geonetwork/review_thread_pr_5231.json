{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxMTI1NTMz", "number": 5231, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwOTowMDo0M1rOFDXPMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMToyNDo1NlrOFGJF-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MDcwNzY5OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/fao/geonet/api/processing/ValidateApi.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwOTowMDo0M1rOIC-Xlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxODo1OTowN1rOIDYnHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk4OTkxMQ==", "bodyText": "This check is not correct, when created a new metadata the record is stored in the Metadata table, not in the MetadataDraft table.\nmetadataRepository.findAllByUuid(uuid) should return 1 record if the metadata is approved or is draft, but never published and 2 records if the metadata is published and also has a draft copy. Not really optimal, but maybe can be used these conditions for the checks.", "url": "https://github.com/geonetwork/core-geonetwork/pull/5231#discussion_r539989911", "createdAt": "2020-12-10T09:00:43Z", "author": {"login": "josegar74"}, "path": "services/src/main/java/org/fao/geonet/api/processing/ValidateApi.java", "diffHunk": "@@ -183,27 +188,40 @@ public SimpleMetadataProcessingReport validateRecords(\n             ServiceContext serviceContext = ApiUtils.createServiceContext(request);\n \n             Set<String> records = ApiUtils.getUuidsParameterOrSelection(uuids, bucket, userSession);\n+            report.setTotalRecords(records.size());\n \n             for (String uuid : records) {\n-                if (!metadataRepository.existsMetadataUuid(uuid)) {\n-                    report.incrementNullRecords();\n-                }\n+                int loopConditionCount = 0;\n                 for (AbstractMetadata record : metadataRepository.findAllByUuid(uuid)) {\n-                    if (!accessMan.canEdit(serviceContext, String.valueOf(record.getId()))) {\n-                        report.addNotEditableMetadataId(record.getId());\n-                    } else {\n-                        boolean isValid = validator.doValidate(record, serviceContext.getLanguage());\n-                        if (isValid) {\n-                            report.addMetadataInfos(record.getId(), \"Is valid\");\n-                            new RecordValidationTriggeredEvent(record.getId(), ApiUtils.getUserSession(request.getSession()).getUserIdAsInt(), \"1\").publish(applicationContext);\n+                    if (approved == null ||\n+                        (approved == true && !(record instanceof MetadataDraft)) ||\n+                        (approved == false && record instanceof MetadataDraft)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f161024c3552edec5d1e142c5f450371f145646b"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQxOTg3MA==", "bodyText": "Thinking of it some more I think I was trying to merger draft and approved into one and I need to use them separately.\nI will modify the code so that approved=true only checks for approved records and approved=false checks for working copy.\nDraft will also be a different check - which I think means not approved and not published.\nI will add some checks to the metadatautil for checking is a metadata records isApproved, isPublished and isDraft.\nI will push some changes for this shortly.", "url": "https://github.com/geonetwork/core-geonetwork/pull/5231#discussion_r540419870", "createdAt": "2020-12-10T18:59:07Z", "author": {"login": "ianwallen"}, "path": "services/src/main/java/org/fao/geonet/api/processing/ValidateApi.java", "diffHunk": "@@ -183,27 +188,40 @@ public SimpleMetadataProcessingReport validateRecords(\n             ServiceContext serviceContext = ApiUtils.createServiceContext(request);\n \n             Set<String> records = ApiUtils.getUuidsParameterOrSelection(uuids, bucket, userSession);\n+            report.setTotalRecords(records.size());\n \n             for (String uuid : records) {\n-                if (!metadataRepository.existsMetadataUuid(uuid)) {\n-                    report.incrementNullRecords();\n-                }\n+                int loopConditionCount = 0;\n                 for (AbstractMetadata record : metadataRepository.findAllByUuid(uuid)) {\n-                    if (!accessMan.canEdit(serviceContext, String.valueOf(record.getId()))) {\n-                        report.addNotEditableMetadataId(record.getId());\n-                    } else {\n-                        boolean isValid = validator.doValidate(record, serviceContext.getLanguage());\n-                        if (isValid) {\n-                            report.addMetadataInfos(record.getId(), \"Is valid\");\n-                            new RecordValidationTriggeredEvent(record.getId(), ApiUtils.getUserSession(request.getSession()).getUserIdAsInt(), \"1\").publish(applicationContext);\n+                    if (approved == null ||\n+                        (approved == true && !(record instanceof MetadataDraft)) ||\n+                        (approved == false && record instanceof MetadataDraft)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk4OTkxMQ=="}, "originalCommit": {"oid": "f161024c3552edec5d1e142c5f450371f145646b"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxOTg0NzYzOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/fao/geonet/api/processing/report/MetadataProcessingReport.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMToyNDo1NlrOIHAl5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMToyNDo1NlrOIHAl5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIyMDY0NA==", "bodyText": "Update the message to approved instead of  draft", "url": "https://github.com/geonetwork/core-geonetwork/pull/5231#discussion_r544220644", "createdAt": "2020-12-16T11:24:56Z", "author": {"login": "josegar74"}, "path": "services/src/main/java/org/fao/geonet/api/processing/report/MetadataProcessingReport.java", "diffHunk": "@@ -89,39 +94,88 @@ public MetadataProcessingReport() {\n         return metadataErrors;\n     }\n \n-    public synchronized void addMetadataError(int metadataId, Exception error) {\n+    public synchronized void addMetadataError(int metadataId, String metadataUUID, boolean draft, boolean approved,\n+                                              Exception error) {\n+        Report errorReport = new ErrorReport(error);\n+        errorReport.setUuid(metadataUUID);\n+        errorReport.setDraft(draft);\n+        errorReport.setApproved(approved);\n         if (this.metadataErrors.get(metadataId) == null) {\n             List<Report> errors = new ArrayList<>();\n-            errors.add(new ErrorReport(error));\n+            errors.add(errorReport);\n             this.metadataErrors.put(metadataId, errors);\n         } else {\n-            this.metadataErrors.get(metadataId).add(new ErrorReport(error));\n+            this.metadataErrors.get(metadataId).add(errorReport);\n         }\n     }\n \n-    public synchronized void addMetadataError(int metadataId, String error) {\n+    public void addMetadataError(AbstractMetadata metadata, Exception error) {\n+        addMetadataError(metadata.getId(), metadata.getUuid(), isMetadataDraft(metadata.getId()),\n+            isMetadataApproved(metadata.getId()), error);\n+    }\n+\n+    public synchronized void addMetadataError(int metadataId, String metadataUUID, boolean draft, boolean approved,\n+                                              String error) {\n+        Report errorReport = new ErrorReport(error);\n+        errorReport.setUuid(metadataUUID);\n+        errorReport.setDraft(draft);\n+        errorReport.setApproved(approved);\n         if (this.metadataErrors.get(metadataId) == null) {\n             List<Report> errors = new ArrayList<>();\n-            errors.add(new ErrorReport(error));\n+            errors.add(errorReport);\n             this.metadataErrors.put(metadataId, errors);\n         } else {\n-            this.metadataErrors.get(metadataId).add(new ErrorReport(error));\n+            this.metadataErrors.get(metadataId).add(errorReport);\n         }\n     }\n \n+    public void addMetadataError(AbstractMetadata metadata, String error) {\n+        addMetadataError(metadata.getId(), metadata.getUuid(), isMetadataDraft(metadata.getId()),\n+            isMetadataApproved(metadata.getId()), error);\n+    }\n+\n     @XmlElement(name = \"infos\")\n     public Map<Integer, List<InfoReport>> getMetadataInfos() {\n         return metadataInfos;\n     }\n \n-    public void addMetadataInfos(int metadataId, String message) {\n+    public void addMetadataInfos(int metadataId, String metadataUUID, boolean draft, boolean approved, String message) {\n+        InfoReport infoReport = new InfoReport(message);\n+        infoReport.setUuid(metadataUUID);\n+        infoReport.setDraft(draft);\n+        infoReport.setApproved(approved);\n         if (this.metadataInfos.get(metadataId) == null) {\n             List<InfoReport> infos = new ArrayList<>();\n-            infos.add(new InfoReport(message));\n+            infos.add(infoReport);\n             this.metadataInfos.put(metadataId, infos);\n         } else {\n-            this.metadataInfos.get(metadataId).add(new InfoReport(message));\n+            this.metadataInfos.get(metadataId).add(infoReport);\n+        }\n+    }\n+\n+    public void addMetadataInfos(AbstractMetadata metadata, String message) {\n+        addMetadataInfos(metadata.getId(), metadata.getUuid(), isMetadataDraft(metadata.getId()),\n+            isMetadataApproved(metadata.getId()), message);\n+    }\n+\n+    private boolean isMetadataDraft(int metadataId) {\n+        boolean metadataDraft = false;\n+        try {\n+            metadataDraft = ApplicationContextHolder.get().getBean(IMetadataUtils.class).isMetadataDraft(metadataId);\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Error detecting if metadata is draft\");\n+        }\n+        return metadataDraft;\n+    }\n+\n+    private boolean isMetadataApproved(int metadataId) {\n+        boolean metadataApproved = false;\n+        try {\n+            metadataApproved = ApplicationContextHolder.get().getBean(IMetadataUtils.class).isMetadataApproved(metadataId);\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Error detecting if metadata is draft\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57a9da624a054bfef911f3cfb3fdb51984226b7a"}, "originalPosition": 104}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4235, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}