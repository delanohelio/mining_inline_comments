{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2MDQ4MTY4", "number": 4878, "title": "New LDAP test cases and infrastructure", "bodyText": "I've added more infrastructure to the LDAP system.  I've only made very minor changes to the existing infrastructure, so I think this shouldn't affect anyone.\nThe new infrastructure;\na) It much easier to understand and modify using strategy objects and spring configuration\nb) has a bunch of test case\n* test cases run a pre-configured LDAP server\nThe main difference between this infrastructure and the old infrastructure is that there are much few assumptions about how the LDAP directory is structures (i.e. it searches for users/group instead of assuming where there are in the directory).\nI had a very hard time trying to figure out what the old infrastructure actually did - the documentation was missing, confusing, misleading, or wrong.  There were no test cases, and there was too much work pushed into one object (new infrastructure pushes details in to strategy objects).\nThis infrastructure improves this.\nPlease see the two README.md files and the test cases.", "createdAt": "2020-07-24T02:56:40Z", "url": "https://github.com/geonetwork/core-geonetwork/pull/4878", "merged": true, "mergeCommit": {"oid": "803abb9983abae67b109f48e0743bb86e168edbf"}, "closed": true, "closedAt": "2020-08-07T19:31:56Z", "author": {"login": "davidblasby"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc36_AlAH2gAyNDU2MDQ4MTY4OjZhN2VlYjNkYTdlYTY2MGQ4MWQ4OTIwYzkxMmM0YzU4MGU2YTM0ZWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8pnV0gFqTQ2MzU2MjM3MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6a7eeb3da7ea660d81d8920c912c4c580e6a34eb", "author": {"user": null}, "url": "https://github.com/geonetwork/core-geonetwork/commit/6a7eeb3da7ea660d81d8920c912c4c580e6a34eb", "committedDate": "2020-07-24T02:55:14Z", "message": "initial commit for new LDAP test cases and infrastructure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30244a45459c7412787d95432eb8d902f90464ba", "author": {"user": null}, "url": "https://github.com/geonetwork/core-geonetwork/commit/30244a45459c7412787d95432eb8d902f90464ba", "committedDate": "2020-07-24T03:42:22Z", "message": "fix port change in test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97d78858a37e8ecbd0093a22f7f508da4e39b6aa", "author": {"user": null}, "url": "https://github.com/geonetwork/core-geonetwork/commit/97d78858a37e8ecbd0093a22f7f508da4e39b6aa", "committedDate": "2020-07-28T16:26:50Z", "message": "add some more strategy object, dox"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNzM0NzM1", "url": "https://github.com/geonetwork/core-geonetwork/pull/4878#pullrequestreview-460734735", "createdAt": "2020-08-04T11:42:51Z", "commit": {"oid": "97d78858a37e8ecbd0093a22f7f508da4e39b6aa"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMTo0Mjo1MVrOG7cs8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwODozOToyNlrOG7__QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk4OTQyNA==", "bodyText": "Formatting: extra space character in ( (.", "url": "https://github.com/geonetwork/core-geonetwork/pull/4878#discussion_r464989424", "createdAt": "2020-08-04T11:42:51Z", "author": {"login": "juanluisrp"}, "path": "core/src/main/java/org/fao/geonet/kernel/security/ldap/AbstractLDAPUserDetailsContextMapper.java", "diffHunk": "@@ -91,13 +96,15 @@ public UserDetails mapUserFromContext(DirContextOperations userCtx,\n                                           String username, Collection<? extends GrantedAuthority> authorities) {\n \n         Profile defaultProfile;\n-        if (mapping.get(\"profile\")[1] != null) {\n+        if ( (mapping.get(\"profile\") != null) && (mapping.get(\"profile\")[1] != null)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d78858a37e8ecbd0093a22f7f508da4e39b6aa"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk5MDQ4NA==", "bodyText": "Formatting: missing space before ? operator.", "url": "https://github.com/geonetwork/core-geonetwork/pull/4878#discussion_r464990484", "createdAt": "2020-08-04T11:45:03Z", "author": {"login": "juanluisrp"}, "path": "core/src/main/java/org/fao/geonet/kernel/security/ldap/AbstractLDAPUserDetailsContextMapper.java", "diffHunk": "@@ -91,13 +96,15 @@ public UserDetails mapUserFromContext(DirContextOperations userCtx,\n                                           String username, Collection<? extends GrantedAuthority> authorities) {\n \n         Profile defaultProfile;\n-        if (mapping.get(\"profile\")[1] != null) {\n+        if ( (mapping.get(\"profile\") != null) && (mapping.get(\"profile\")[1] != null)) {\n             defaultProfile = Profile.valueOf(mapping.get(\"profile\")[1]);\n         } else {\n             defaultProfile = Profile.RegisteredUser;\n         }\n         String defaultGroup = mapping.get(\"privilege\")[1];\n-        LDAPUtils ldapUtils = ApplicationContextHolder.get().getBean(LDAPUtils.class);\n+        //allow proper injection\n+        LDAPUtils ldapUtils = this.ldapUtils != null? this.ldapUtils :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d78858a37e8ecbd0093a22f7f508da4e39b6aa"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk5MTAzMQ==", "bodyText": "Why is this conditional assignment needed? Use @Autowired or ApplicationContextHolder.get().getBean() but not both.", "url": "https://github.com/geonetwork/core-geonetwork/pull/4878#discussion_r464991031", "createdAt": "2020-08-04T11:46:09Z", "author": {"login": "juanluisrp"}, "path": "core/src/main/java/org/fao/geonet/kernel/security/ldap/AbstractLDAPUserDetailsContextMapper.java", "diffHunk": "@@ -91,13 +96,15 @@ public UserDetails mapUserFromContext(DirContextOperations userCtx,\n                                           String username, Collection<? extends GrantedAuthority> authorities) {\n \n         Profile defaultProfile;\n-        if (mapping.get(\"profile\")[1] != null) {\n+        if ( (mapping.get(\"profile\") != null) && (mapping.get(\"profile\")[1] != null)) {\n             defaultProfile = Profile.valueOf(mapping.get(\"profile\")[1]);\n         } else {\n             defaultProfile = Profile.RegisteredUser;\n         }\n         String defaultGroup = mapping.get(\"privilege\")[1];\n-        LDAPUtils ldapUtils = ApplicationContextHolder.get().getBean(LDAPUtils.class);\n+        //allow proper injection\n+        LDAPUtils ldapUtils = this.ldapUtils != null? this.ldapUtils :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d78858a37e8ecbd0093a22f7f508da4e39b6aa"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk5MTUyMg==", "bodyText": "Formatting: extra space in ( (.", "url": "https://github.com/geonetwork/core-geonetwork/pull/4878#discussion_r464991522", "createdAt": "2020-08-04T11:47:14Z", "author": {"login": "juanluisrp"}, "path": "core/src/main/java/org/fao/geonet/kernel/security/ldap/AbstractLDAPUserDetailsContextMapper.java", "diffHunk": "@@ -226,6 +236,23 @@ private String getUserInfo(Map<String, ArrayList<String>> userInfo,\n         return getUserInfo(userInfo, attributeName, \"\");\n     }\n \n+    //returns null if not available\n+    private String getValue(Map<String, ArrayList<String>> userInfo,String ldapAttributeName) {\n+        if ( (ldapAttributeName == null) || (userInfo == null)) //bad args", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d78858a37e8ecbd0093a22f7f508da4e39b6aa"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk5MTk4Ng==", "bodyText": "Formatting: extra space in ( ( and missing one after ==.", "url": "https://github.com/geonetwork/core-geonetwork/pull/4878#discussion_r464991986", "createdAt": "2020-08-04T11:48:17Z", "author": {"login": "juanluisrp"}, "path": "core/src/main/java/org/fao/geonet/kernel/security/ldap/AbstractLDAPUserDetailsContextMapper.java", "diffHunk": "@@ -226,6 +236,23 @@ private String getUserInfo(Map<String, ArrayList<String>> userInfo,\n         return getUserInfo(userInfo, attributeName, \"\");\n     }\n \n+    //returns null if not available\n+    private String getValue(Map<String, ArrayList<String>> userInfo,String ldapAttributeName) {\n+        if ( (ldapAttributeName == null) || (userInfo == null)) //bad args\n+            return null;\n+        ArrayList<String> info = userInfo.get(ldapAttributeName);\n+        if ( (info == null) || (info.size() ==0)) //no value supplied", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d78858a37e8ecbd0093a22f7f508da4e39b6aa"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk5MjU5OA==", "bodyText": "Formatting: missing spaces surrounding == operator.", "url": "https://github.com/geonetwork/core-geonetwork/pull/4878#discussion_r464992598", "createdAt": "2020-08-04T11:49:39Z", "author": {"login": "juanluisrp"}, "path": "core/src/main/java/org/fao/geonet/kernel/security/ldap/AbstractLDAPUserDetailsContextMapper.java", "diffHunk": "@@ -226,6 +236,23 @@ private String getUserInfo(Map<String, ArrayList<String>> userInfo,\n         return getUserInfo(userInfo, attributeName, \"\");\n     }\n \n+    //returns null if not available\n+    private String getValue(Map<String, ArrayList<String>> userInfo,String ldapAttributeName) {\n+        if ( (ldapAttributeName == null) || (userInfo == null)) //bad args\n+            return null;\n+        ArrayList<String> info = userInfo.get(ldapAttributeName);\n+        if ( (info == null) || (info.size() ==0)) //no value supplied\n+            return null;\n+        if (info.size()==1) // only one value -- that's it", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d78858a37e8ecbd0093a22f7f508da4e39b6aa"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk5NTUxMQ==", "bodyText": "Since groupName and profile are both String objects, shouldn't be String.equals(String) used here instead of comparing using references?", "url": "https://github.com/geonetwork/core-geonetwork/pull/4878#discussion_r464995511", "createdAt": "2020-08-04T11:54:45Z", "author": {"login": "juanluisrp"}, "path": "core/src/main/java/org/fao/geonet/kernel/security/ldap/LDAPRole.java", "diffHunk": "@@ -0,0 +1,77 @@\n+//=============================================================================\n+//===\tCopyright (C) 2001-2012 Food and Agriculture Organization of the\n+//===\tUnited Nations (FAO-UN), United Nations World Food Programme (WFP)\n+//===\tand United Nations Environment Programme (UNEP)\n+//===\n+//===\tThis program is free software; you can redistribute it and/or modify\n+//===\tit under the terms of the GNU General Public License as published by\n+//===\tthe Free Software Foundation; either version 2 of the License, or (at\n+//===\tyour option) any later version.\n+//===\n+//===\tThis program is distributed in the hope that it will be useful, but\n+//===\tWITHOUT ANY WARRANTY; without even the implied warranty of\n+//===\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+//===\tGeneral Public License for more details.\n+//===\n+//===\tYou should have received a copy of the GNU General Public License\n+//===\talong with this program; if not, write to the Free Software\n+//===\tFoundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA\n+//===\n+//===\tContact: Jeroen Ticheler - FAO - Viale delle Terme di Caracalla 2,\n+//===\tRome - Italy. email: geonetwork@osgeo.org\n+//==============================================================================\n+\n+package org.fao.geonet.kernel.security.ldap;\n+\n+import org.fao.geonet.domain.Profile;\n+\n+/**\n+ * very simple class that just holds a user's group/profile information.\n+ */\n+public class LDAPRole {\n+\n+    String groupName;\n+    Profile profile;\n+\n+\n+    public LDAPRole(String groupName, Profile profile) {\n+        this.groupName = groupName;\n+        this.profile = profile;\n+    }\n+\n+    public LDAPRole(String groupName, String profileName) {\n+        this.groupName = groupName;\n+        this.profile = Profile.findProfileIgnoreCase(profileName);\n+    }\n+\n+\n+    public String getGroupName() {\n+        return groupName;\n+    }\n+\n+    public void setGroupName(String groupName) {\n+        this.groupName = groupName;\n+    }\n+\n+    public Profile getProfile() {\n+        return profile;\n+    }\n+\n+    public void setProfile(Profile profile) {\n+        this.profile = profile;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (!(obj instanceof LDAPRole))\n+            return false;\n+\n+        return this.getGroupName() == ((LDAPRole) obj).getGroupName() &&\n+            this.getProfile().name() == ((LDAPRole) obj).getProfile().name();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d78858a37e8ecbd0093a22f7f508da4e39b6aa"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5Njk4Mw==", "bodyText": "can't this throw a NullPointerExeption if groupName or profile are null?", "url": "https://github.com/geonetwork/core-geonetwork/pull/4878#discussion_r465296983", "createdAt": "2020-08-04T20:00:21Z", "author": {"login": "juanluisrp"}, "path": "core/src/main/java/org/fao/geonet/kernel/security/ldap/LDAPRole.java", "diffHunk": "@@ -0,0 +1,77 @@\n+//=============================================================================\n+//===\tCopyright (C) 2001-2012 Food and Agriculture Organization of the\n+//===\tUnited Nations (FAO-UN), United Nations World Food Programme (WFP)\n+//===\tand United Nations Environment Programme (UNEP)\n+//===\n+//===\tThis program is free software; you can redistribute it and/or modify\n+//===\tit under the terms of the GNU General Public License as published by\n+//===\tthe Free Software Foundation; either version 2 of the License, or (at\n+//===\tyour option) any later version.\n+//===\n+//===\tThis program is distributed in the hope that it will be useful, but\n+//===\tWITHOUT ANY WARRANTY; without even the implied warranty of\n+//===\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+//===\tGeneral Public License for more details.\n+//===\n+//===\tYou should have received a copy of the GNU General Public License\n+//===\talong with this program; if not, write to the Free Software\n+//===\tFoundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA\n+//===\n+//===\tContact: Jeroen Ticheler - FAO - Viale delle Terme di Caracalla 2,\n+//===\tRome - Italy. email: geonetwork@osgeo.org\n+//==============================================================================\n+\n+package org.fao.geonet.kernel.security.ldap;\n+\n+import org.fao.geonet.domain.Profile;\n+\n+/**\n+ * very simple class that just holds a user's group/profile information.\n+ */\n+public class LDAPRole {\n+\n+    String groupName;\n+    Profile profile;\n+\n+\n+    public LDAPRole(String groupName, Profile profile) {\n+        this.groupName = groupName;\n+        this.profile = profile;\n+    }\n+\n+    public LDAPRole(String groupName, String profileName) {\n+        this.groupName = groupName;\n+        this.profile = Profile.findProfileIgnoreCase(profileName);\n+    }\n+\n+\n+    public String getGroupName() {\n+        return groupName;\n+    }\n+\n+    public void setGroupName(String groupName) {\n+        this.groupName = groupName;\n+    }\n+\n+    public Profile getProfile() {\n+        return profile;\n+    }\n+\n+    public void setProfile(Profile profile) {\n+        this.profile = profile;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (!(obj instanceof LDAPRole))\n+            return false;\n+\n+        return this.getGroupName() == ((LDAPRole) obj).getGroupName() &&\n+            this.getProfile().name() == ((LDAPRole) obj).getProfile().name();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return this.getGroupName().hashCode() ^ this.getProfile().name().hashCode() ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d78858a37e8ecbd0093a22f7f508da4e39b6aa"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5Nzk0OQ==", "bodyText": "Not very informative javadoc. Also adding -- is not needed.", "url": "https://github.com/geonetwork/core-geonetwork/pull/4878#discussion_r465297949", "createdAt": "2020-08-04T20:02:12Z", "author": {"login": "juanluisrp"}, "path": "core/src/main/java/org/fao/geonet/kernel/security/ldap/LDAPRoleConverter.java", "diffHunk": "@@ -0,0 +1,49 @@\n+//=============================================================================\n+//===\tCopyright (C) 2001-2012 Food and Agriculture Organization of the\n+//===\tUnited Nations (FAO-UN), United Nations World Food Programme (WFP)\n+//===\tand United Nations Environment Programme (UNEP)\n+//===\n+//===\tThis program is free software; you can redistribute it and/or modify\n+//===\tit under the terms of the GNU General Public License as published by\n+//===\tthe Free Software Foundation; either version 2 of the License, or (at\n+//===\tyour option) any later version.\n+//===\n+//===\tThis program is distributed in the hope that it will be useful, but\n+//===\tWITHOUT ANY WARRANTY; without even the implied warranty of\n+//===\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+//===\tGeneral Public License for more details.\n+//===\n+//===\tYou should have received a copy of the GNU General Public License\n+//===\talong with this program; if not, write to the Free Software\n+//===\tFoundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA\n+//===\n+//===\tContact: Jeroen Ticheler - FAO - Viale delle Terme di Caracalla 2,\n+//===\tRome - Italy. email: geonetwork@osgeo.org\n+//==============================================================================\n+\n+package org.fao.geonet.kernel.security.ldap;\n+\n+import org.fao.geonet.domain.LDAPUser;\n+\n+import javax.naming.directory.Attributes;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+//given information about a LDAP-Group/User, return the gn-groups/gn-profile associated with that person\n+public interface LDAPRoleConverter {\n+\n+    /**\n+     *\n+     * @param userInfo      -- information about the user\n+     * @param userDetails   -- information about the user", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d78858a37e8ecbd0093a22f7f508da4e39b6aa"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5ODM3NA==", "bodyText": "Incomplete header.", "url": "https://github.com/geonetwork/core-geonetwork/pull/4878#discussion_r465298374", "createdAt": "2020-08-04T20:03:03Z", "author": {"login": "juanluisrp"}, "path": "core/src/main/java/org/fao/geonet/kernel/security/ldap/LDAPRoleConverterGroupNameConverter.java", "diffHunk": "@@ -0,0 +1,57 @@\n+//===\tand United Nations Environment Programme (UNEP)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d78858a37e8ecbd0093a22f7f508da4e39b6aa"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5ODY3OQ==", "bodyText": "Formatting: add a space after the , char.", "url": "https://github.com/geonetwork/core-geonetwork/pull/4878#discussion_r465298679", "createdAt": "2020-08-04T20:03:42Z", "author": {"login": "juanluisrp"}, "path": "core/src/main/java/org/fao/geonet/kernel/security/ldap/LDAPRoleConverterGroupNameConverter.java", "diffHunk": "@@ -0,0 +1,57 @@\n+//===\tand United Nations Environment Programme (UNEP)\n+//===\n+//===\tThis program is free software; you can redistribute it and/or modify\n+//===\tit under the terms of the GNU General Public License as published by\n+//===\tthe Free Software Foundation; either version 2 of the License, or (at\n+//===\tyour option) any later version.\n+//===\n+//===\tThis program is distributed in the hope that it will be useful, but\n+//===\tWITHOUT ANY WARRANTY; without even the implied warranty of\n+//===\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+//===\tGeneral Public License for more details.\n+//===\n+//===\tYou should have received a copy of the GNU General Public License\n+//===\talong with this program; if not, write to the Free Software\n+//===\tFoundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA\n+//===\n+//===\tContact: Jeroen Ticheler - FAO - Viale delle Terme di Caracalla 2,\n+//===\tRome - Italy. email: geonetwork@osgeo.org\n+//==============================================================================\n+\n+package org.fao.geonet.kernel.security.ldap;\n+\n+import org.fao.geonet.domain.LDAPUser;\n+\n+import javax.naming.directory.Attributes;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * This does a direct conversion from a LDAP group name to a list of LDAPRoles.\n+ * See LDAPRoleConverterGroupNameParser for another example.\n+ *\n+ */\n+public class LDAPRoleConverterGroupNameConverter implements LDAPRoleConverter {\n+    //groupName (from LDAP) to a list of LDAPRoles (GN-Group and GN-Profile)\n+    Map<String,List<LDAPRole>> convertMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d78858a37e8ecbd0093a22f7f508da4e39b6aa"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5OTUyNA==", "bodyText": "Formatting: Always add curly braces to if sentences, even if its a one liner if statement.\nFormatting: Remove the space in ( (.", "url": "https://github.com/geonetwork/core-geonetwork/pull/4878#discussion_r465299524", "createdAt": "2020-08-04T20:05:23Z", "author": {"login": "juanluisrp"}, "path": "core/src/main/java/org/fao/geonet/kernel/security/ldap/LDAPRoleConverterGroupNameConverter.java", "diffHunk": "@@ -0,0 +1,57 @@\n+//===\tand United Nations Environment Programme (UNEP)\n+//===\n+//===\tThis program is free software; you can redistribute it and/or modify\n+//===\tit under the terms of the GNU General Public License as published by\n+//===\tthe Free Software Foundation; either version 2 of the License, or (at\n+//===\tyour option) any later version.\n+//===\n+//===\tThis program is distributed in the hope that it will be useful, but\n+//===\tWITHOUT ANY WARRANTY; without even the implied warranty of\n+//===\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+//===\tGeneral Public License for more details.\n+//===\n+//===\tYou should have received a copy of the GNU General Public License\n+//===\talong with this program; if not, write to the Free Software\n+//===\tFoundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA\n+//===\n+//===\tContact: Jeroen Ticheler - FAO - Viale delle Terme di Caracalla 2,\n+//===\tRome - Italy. email: geonetwork@osgeo.org\n+//==============================================================================\n+\n+package org.fao.geonet.kernel.security.ldap;\n+\n+import org.fao.geonet.domain.LDAPUser;\n+\n+import javax.naming.directory.Attributes;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * This does a direct conversion from a LDAP group name to a list of LDAPRoles.\n+ * See LDAPRoleConverterGroupNameParser for another example.\n+ *\n+ */\n+public class LDAPRoleConverterGroupNameConverter implements LDAPRoleConverter {\n+    //groupName (from LDAP) to a list of LDAPRoles (GN-Group and GN-Profile)\n+    Map<String,List<LDAPRole>> convertMap;\n+\n+\n+    //given an LDAP role name, find the list of LDAPRoles that are assigned to them.\n+    @Override\n+    public List<LDAPRole> convert(Map<String, ArrayList<String>> userInfo, LDAPUser userDetails, String ldapGroupName, Attributes ldapGroupAttributes) {\n+        if ( (convertMap == null) || (!convertMap.containsKey(ldapGroupName)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d78858a37e8ecbd0093a22f7f508da4e39b6aa"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMwMDEyMQ==", "bodyText": "Incomplete header.", "url": "https://github.com/geonetwork/core-geonetwork/pull/4878#discussion_r465300121", "createdAt": "2020-08-04T20:06:36Z", "author": {"login": "juanluisrp"}, "path": "core/src/main/java/org/fao/geonet/kernel/security/ldap/LDAPRoleConverterGroupNameParser.java", "diffHunk": "@@ -0,0 +1,142 @@\n+//===\tand United Nations Environment Programme (UNEP)\n+//===\n+//===\tThis program is free software; you can redistribute it and/or modify\n+//===\tit under the terms of the GNU General Public License as published by\n+//===\tthe Free Software Foundation; either version 2 of the License, or (at\n+//===\tyour option) any later version.\n+//===\n+//===\tThis program is distributed in the hope that it will be useful, but\n+//===\tWITHOUT ANY WARRANTY; without even the implied warranty of\n+//===\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+//===\tGeneral Public License for more details.\n+//===\n+//===\tYou should have received a copy of the GNU General Public License\n+//===\talong with this program; if not, write to the Free Software\n+//===\tFoundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA\n+//===\n+//===\tContact: Jeroen Ticheler - FAO - Viale delle Terme di Caracalla 2,\n+//===\tRome - Italy. email: geonetwork@osgeo.org\n+//==============================================================================\n+// @author dblasby geocat", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d78858a37e8ecbd0093a22f7f508da4e39b6aa"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMwNzE0MA==", "bodyText": "Formatting: missing spaces after , characters.", "url": "https://github.com/geonetwork/core-geonetwork/pull/4878#discussion_r465307140", "createdAt": "2020-08-04T20:20:25Z", "author": {"login": "juanluisrp"}, "path": "core/src/main/java/org/fao/geonet/kernel/security/ldap/LDAPUserDetailsContextMapperWithProfileSearchEnhanced.java", "diffHunk": "@@ -0,0 +1,212 @@\n+//=============================================================================\n+//===\tCopyright (C) 2001-2012 Food and Agriculture Organization of the\n+//===\tUnited Nations (FAO-UN), United Nations World Food Programme (WFP)\n+//===\tand United Nations Environment Programme (UNEP)\n+//===\n+//===\tThis program is free software; you can redistribute it and/or modify\n+//===\tit under the terms of the GNU General Public License as published by\n+//===\tthe Free Software Foundation; either version 2 of the License, or (at\n+//===\tyour option) any later version.\n+//===\n+//===\tThis program is distributed in the hope that it will be useful, but\n+//===\tWITHOUT ANY WARRANTY; without even the implied warranty of\n+//===\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+//===\tGeneral Public License for more details.\n+//===\n+//===\tYou should have received a copy of the GNU General Public License\n+//===\talong with this program; if not, write to the Free Software\n+//===\tFoundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA\n+//===\n+//===\tContact: Jeroen Ticheler - FAO - Viale delle Terme di Caracalla 2,\n+//===\tRome - Italy. email: geonetwork@osgeo.org\n+//==============================================================================\n+package org.fao.geonet.kernel.security.ldap;\n+\n+import jeeves.component.ProfileManager;\n+import org.fao.geonet.constants.Geonet;\n+import org.fao.geonet.domain.LDAPUser;\n+import org.fao.geonet.domain.Profile;\n+import org.fao.geonet.utils.Log;\n+import org.springframework.util.StringUtils;\n+\n+import javax.naming.NamingEnumeration;\n+import javax.naming.NamingException;\n+import javax.naming.directory.*;\n+import java.text.MessageFormat;\n+import java.util.*;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Get all user information from the LDAP user's attributes excluding profiles and groups which are\n+ * searched in another LDAP location. For profiles and groups, define the search location and the\n+ * extraction pattern.\n+ * <p>\n+ * This search (including subtrees) in the LDAP starting at 'membershipSearchStartObject'\n+ * It will execute the query ldapMembershipQuery.\n+ * for ldapMembershipQuery;\n+ * {0} = username (i.e. what the user types in to login)\n+ * {1} = cn for the ldap user object (short version)  i.e. \"blasby, david\"\n+ * {2} = cn for the ldap user object (full version)   i.e. \"blasby, david,ou=GIS Department,ou=Corporate Users,dc=example,dc=com\"\n+ * ** typically you'll be using {2}\n+\n+ * @author dblasby/francois\n+ */\n+public class LDAPUserDetailsContextMapperWithProfileSearchEnhanced extends AbstractLDAPUserDetailsContextMapper {\n+\n+    //Query used to find group membership\n+    private String ldapMembershipQuery;\n+\n+\n+\n+    //where to start searching in the LDAP\n+    // typically this will be \"\" (search entire directory)\n+    private String membershipSearchStartObject;\n+\n+    //Strategy objects to convert a LDAPRole to GN-role (GN-group and GN-profile)\n+    private List<LDAPRoleConverter> ldapRoleConverters;\n+\n+    public void setLdapRoleConverters(List<LDAPRoleConverter> vals) {\n+        this.ldapRoleConverters = vals;\n+    }\n+\n+    public void setMembershipSearchStartObject(String membershipSearchStartObject) {\n+        this.membershipSearchStartObject = membershipSearchStartObject;\n+    }\n+\n+    public void setLdapMembershipQuery(String ldapMembershipQuery) {\n+        this.ldapMembershipQuery = ldapMembershipQuery;\n+    }\n+\n+\n+\n+    //This will find the shortest \"cn\" attribute given in the object\n+    // typically, there are >1 of these.  I.e. \"blasby, david\" and \"blasby, david,ou=GIS Department,ou=Corporate Users,dc=example,dc=com\"\n+    public String cn_short(Attributes atts) throws NamingException {\n+        Attribute value = atts.get(\"cn\");\n+        List values = Collections.list(value.getAll());\n+        Comparator<String> comparator = (str1, str2) -> str1.length() > str2.length() ? 1 : -1;\n+        String shortest = (String) values.stream().sorted(comparator).findFirst().get();\n+        return shortest;\n+    }\n+\n+    //This will find the longest \"cn\" attribute given in the object\n+    // typically, there are >1 of these.  I.e. \"blasby, david\" and \"blasby, david,ou=GIS Department,ou=Corporate Users,dc=example,dc=com\"\n+    public String cn_short(Map<String, ArrayList<String>> userInfo) {\n+        ArrayList<String> cn = userInfo.get(\"cn\");\n+        if ((cn == null) || (cn.size() == 0))  // bad user!\n+            return null;\n+        Comparator<String> comparator = (str1, str2) -> str1.length() > str2.length() ? 1 : -1;\n+        String shortest = cn.stream().sorted(comparator).findFirst().get();\n+        return shortest;\n+    }\n+\n+    //This will find the longest \"cn\" value given in the map\n+    // typically, there are >1 of these.  I.e. \"blasby, david\" and \"blasby, david,ou=GIS Department,ou=Corporate Users,dc=example,dc=com\"\n+    public String cn_long(Map<String, ArrayList<String>> userInfo) {\n+        ArrayList<String> cn = userInfo.get(\"cn\");\n+        if ((cn == null) || (cn.size() == 0))  // bad user!\n+            return null;\n+        Comparator<String> comparator = (str1, str2) -> str1.length() > str2.length() ? -1 : 1;\n+        String longest = cn.stream().sorted(comparator).findFirst().get();\n+        return longest;\n+    }\n+\n+    //escape a string for the query\n+    //\"blasby\\, david\"  ==> \"blasby\\\\, david\"\n+    //This is required for membership searches in AD\n+    public String escape(String str) {\n+        return str.replace(\"\\\\\", \"\\\\\\\\\");\n+    }\n+\n+    //given a profile name, find the Profile that it matches\n+    //see `profileMapping` for transitions\n+    public Profile getProfile(String pname) {\n+        if ((this.profileMapping != null) && (this.profileMapping.containsKey(pname)))\n+            return this.profileMapping.get(pname);\n+\n+        Profile p = Profile.findProfileIgnoreCase(pname);\n+        return p;\n+    }\n+\n+\n+    //main method to find the user's ldap group memberships\n+    // a) will populate the GN-Group and GN-Profile in userDetails\n+    // b) will look for the \"highest\" Profile given and set that as the user's main profile  -userDetails.getUser().setProfile(highestUserProfile)\n+    protected void setProfilesAndPrivileges(Profile defaultProfile,\n+                                            String defaultGroup, Map<String, ArrayList<String>> userInfo,\n+                                            LDAPUser userDetails) {\n+\n+        if (!StringUtils.isEmpty(ldapMembershipQuery)) {\n+            if (Log.isDebugEnabled(Geonet.LDAP)) {\n+                StringBuffer sb = new StringBuffer(\"Group and profile search:\");\n+                sb.append(\"\\nLDAP Membership Query query: \\t\" + ldapMembershipQuery);\n+                sb.append(\"\\nmembershipSearchStartObject: \\t\" + membershipSearchStartObject);\n+\n+                Log.debug(Geonet.LDAP, sb.toString());\n+            }\n+            // TODO: add more control on values\n+            NamingEnumeration<?> ldapInfoList;\n+            try {\n+                DirContext dc = contextSource.getReadOnlyContext();\n+\n+\n+                String username = escape(userDetails.getUsername());\n+                String cn_short = escape(cn_short(userInfo));\n+                String cn_long = escape(cn_long(userInfo));\n+\n+                String groupsQuery = MessageFormat.format(this.ldapMembershipQuery,\n+                    username, cn_short, cn_long);\n+\n+                SearchControls searchControls = new SearchControls();\n+                searchControls.setSearchScope(SearchControls.SUBTREE_SCOPE); //recursive\n+\n+                ldapInfoList = dc.search(membershipSearchStartObject, groupsQuery, searchControls);\n+\n+                Set<LDAPRole> allRoles = new HashSet<>();\n+\n+                //for each found LDAP-Group\n+                while (ldapInfoList.hasMore()) {\n+                    SearchResult sr = (SearchResult) ldapInfoList.next();\n+                    String ldapGroupName = cn_short(sr.getAttributes());\n+\n+                    //have the converters process the LDAP-Group\n+                    //NOTE: they will return an empty list if they don't know what the role means\n+                    //      allRoles is a set, you can add duplicates to it with no problem...\n+                    for(LDAPRoleConverter converter : this.ldapRoleConverters){\n+                        List<LDAPRole> newRoles = converter.convert(userInfo,userDetails,ldapGroupName,sr.getAttributes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d78858a37e8ecbd0093a22f7f508da4e39b6aa"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMxOTQ1NA==", "bodyText": "Shouldn't we do something with this exception? not just swallow it.", "url": "https://github.com/geonetwork/core-geonetwork/pull/4878#discussion_r465319454", "createdAt": "2020-08-04T20:44:50Z", "author": {"login": "juanluisrp"}, "path": "core/src/main/java/org/fao/geonet/kernel/security/ldap/LDAPUserDetailsContextMapperWithProfileSearchEnhanced.java", "diffHunk": "@@ -0,0 +1,212 @@\n+//=============================================================================\n+//===\tCopyright (C) 2001-2012 Food and Agriculture Organization of the\n+//===\tUnited Nations (FAO-UN), United Nations World Food Programme (WFP)\n+//===\tand United Nations Environment Programme (UNEP)\n+//===\n+//===\tThis program is free software; you can redistribute it and/or modify\n+//===\tit under the terms of the GNU General Public License as published by\n+//===\tthe Free Software Foundation; either version 2 of the License, or (at\n+//===\tyour option) any later version.\n+//===\n+//===\tThis program is distributed in the hope that it will be useful, but\n+//===\tWITHOUT ANY WARRANTY; without even the implied warranty of\n+//===\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+//===\tGeneral Public License for more details.\n+//===\n+//===\tYou should have received a copy of the GNU General Public License\n+//===\talong with this program; if not, write to the Free Software\n+//===\tFoundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA\n+//===\n+//===\tContact: Jeroen Ticheler - FAO - Viale delle Terme di Caracalla 2,\n+//===\tRome - Italy. email: geonetwork@osgeo.org\n+//==============================================================================\n+package org.fao.geonet.kernel.security.ldap;\n+\n+import jeeves.component.ProfileManager;\n+import org.fao.geonet.constants.Geonet;\n+import org.fao.geonet.domain.LDAPUser;\n+import org.fao.geonet.domain.Profile;\n+import org.fao.geonet.utils.Log;\n+import org.springframework.util.StringUtils;\n+\n+import javax.naming.NamingEnumeration;\n+import javax.naming.NamingException;\n+import javax.naming.directory.*;\n+import java.text.MessageFormat;\n+import java.util.*;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Get all user information from the LDAP user's attributes excluding profiles and groups which are\n+ * searched in another LDAP location. For profiles and groups, define the search location and the\n+ * extraction pattern.\n+ * <p>\n+ * This search (including subtrees) in the LDAP starting at 'membershipSearchStartObject'\n+ * It will execute the query ldapMembershipQuery.\n+ * for ldapMembershipQuery;\n+ * {0} = username (i.e. what the user types in to login)\n+ * {1} = cn for the ldap user object (short version)  i.e. \"blasby, david\"\n+ * {2} = cn for the ldap user object (full version)   i.e. \"blasby, david,ou=GIS Department,ou=Corporate Users,dc=example,dc=com\"\n+ * ** typically you'll be using {2}\n+\n+ * @author dblasby/francois\n+ */\n+public class LDAPUserDetailsContextMapperWithProfileSearchEnhanced extends AbstractLDAPUserDetailsContextMapper {\n+\n+    //Query used to find group membership\n+    private String ldapMembershipQuery;\n+\n+\n+\n+    //where to start searching in the LDAP\n+    // typically this will be \"\" (search entire directory)\n+    private String membershipSearchStartObject;\n+\n+    //Strategy objects to convert a LDAPRole to GN-role (GN-group and GN-profile)\n+    private List<LDAPRoleConverter> ldapRoleConverters;\n+\n+    public void setLdapRoleConverters(List<LDAPRoleConverter> vals) {\n+        this.ldapRoleConverters = vals;\n+    }\n+\n+    public void setMembershipSearchStartObject(String membershipSearchStartObject) {\n+        this.membershipSearchStartObject = membershipSearchStartObject;\n+    }\n+\n+    public void setLdapMembershipQuery(String ldapMembershipQuery) {\n+        this.ldapMembershipQuery = ldapMembershipQuery;\n+    }\n+\n+\n+\n+    //This will find the shortest \"cn\" attribute given in the object\n+    // typically, there are >1 of these.  I.e. \"blasby, david\" and \"blasby, david,ou=GIS Department,ou=Corporate Users,dc=example,dc=com\"\n+    public String cn_short(Attributes atts) throws NamingException {\n+        Attribute value = atts.get(\"cn\");\n+        List values = Collections.list(value.getAll());\n+        Comparator<String> comparator = (str1, str2) -> str1.length() > str2.length() ? 1 : -1;\n+        String shortest = (String) values.stream().sorted(comparator).findFirst().get();\n+        return shortest;\n+    }\n+\n+    //This will find the longest \"cn\" attribute given in the object\n+    // typically, there are >1 of these.  I.e. \"blasby, david\" and \"blasby, david,ou=GIS Department,ou=Corporate Users,dc=example,dc=com\"\n+    public String cn_short(Map<String, ArrayList<String>> userInfo) {\n+        ArrayList<String> cn = userInfo.get(\"cn\");\n+        if ((cn == null) || (cn.size() == 0))  // bad user!\n+            return null;\n+        Comparator<String> comparator = (str1, str2) -> str1.length() > str2.length() ? 1 : -1;\n+        String shortest = cn.stream().sorted(comparator).findFirst().get();\n+        return shortest;\n+    }\n+\n+    //This will find the longest \"cn\" value given in the map\n+    // typically, there are >1 of these.  I.e. \"blasby, david\" and \"blasby, david,ou=GIS Department,ou=Corporate Users,dc=example,dc=com\"\n+    public String cn_long(Map<String, ArrayList<String>> userInfo) {\n+        ArrayList<String> cn = userInfo.get(\"cn\");\n+        if ((cn == null) || (cn.size() == 0))  // bad user!\n+            return null;\n+        Comparator<String> comparator = (str1, str2) -> str1.length() > str2.length() ? -1 : 1;\n+        String longest = cn.stream().sorted(comparator).findFirst().get();\n+        return longest;\n+    }\n+\n+    //escape a string for the query\n+    //\"blasby\\, david\"  ==> \"blasby\\\\, david\"\n+    //This is required for membership searches in AD\n+    public String escape(String str) {\n+        return str.replace(\"\\\\\", \"\\\\\\\\\");\n+    }\n+\n+    //given a profile name, find the Profile that it matches\n+    //see `profileMapping` for transitions\n+    public Profile getProfile(String pname) {\n+        if ((this.profileMapping != null) && (this.profileMapping.containsKey(pname)))\n+            return this.profileMapping.get(pname);\n+\n+        Profile p = Profile.findProfileIgnoreCase(pname);\n+        return p;\n+    }\n+\n+\n+    //main method to find the user's ldap group memberships\n+    // a) will populate the GN-Group and GN-Profile in userDetails\n+    // b) will look for the \"highest\" Profile given and set that as the user's main profile  -userDetails.getUser().setProfile(highestUserProfile)\n+    protected void setProfilesAndPrivileges(Profile defaultProfile,\n+                                            String defaultGroup, Map<String, ArrayList<String>> userInfo,\n+                                            LDAPUser userDetails) {\n+\n+        if (!StringUtils.isEmpty(ldapMembershipQuery)) {\n+            if (Log.isDebugEnabled(Geonet.LDAP)) {\n+                StringBuffer sb = new StringBuffer(\"Group and profile search:\");\n+                sb.append(\"\\nLDAP Membership Query query: \\t\" + ldapMembershipQuery);\n+                sb.append(\"\\nmembershipSearchStartObject: \\t\" + membershipSearchStartObject);\n+\n+                Log.debug(Geonet.LDAP, sb.toString());\n+            }\n+            // TODO: add more control on values\n+            NamingEnumeration<?> ldapInfoList;\n+            try {\n+                DirContext dc = contextSource.getReadOnlyContext();\n+\n+\n+                String username = escape(userDetails.getUsername());\n+                String cn_short = escape(cn_short(userInfo));\n+                String cn_long = escape(cn_long(userInfo));\n+\n+                String groupsQuery = MessageFormat.format(this.ldapMembershipQuery,\n+                    username, cn_short, cn_long);\n+\n+                SearchControls searchControls = new SearchControls();\n+                searchControls.setSearchScope(SearchControls.SUBTREE_SCOPE); //recursive\n+\n+                ldapInfoList = dc.search(membershipSearchStartObject, groupsQuery, searchControls);\n+\n+                Set<LDAPRole> allRoles = new HashSet<>();\n+\n+                //for each found LDAP-Group\n+                while (ldapInfoList.hasMore()) {\n+                    SearchResult sr = (SearchResult) ldapInfoList.next();\n+                    String ldapGroupName = cn_short(sr.getAttributes());\n+\n+                    //have the converters process the LDAP-Group\n+                    //NOTE: they will return an empty list if they don't know what the role means\n+                    //      allRoles is a set, you can add duplicates to it with no problem...\n+                    for(LDAPRoleConverter converter : this.ldapRoleConverters){\n+                        List<LDAPRole> newRoles = converter.convert(userInfo,userDetails,ldapGroupName,sr.getAttributes());\n+                        if (newRoles != null)\n+                            allRoles.addAll(newRoles);\n+                    }\n+                }\n+\n+                //we have a set of GN-Role, now add them to the user object\n+                for(LDAPRole role: allRoles) {\n+                    userDetails.addPrivilege(role.getGroupName(), role.getProfile()); //add the profile info\n+                }\n+\n+                //highest access is the \"generic\" access for the user\n+                Profile highestUserProfile = ProfileManager.getHighestProfile(userDetails.getPrivileges().values().toArray(new Profile[0]));\n+                if (highestUserProfile != null) {\n+                    if (Log.isDebugEnabled(Geonet.LDAP)) {\n+                        Log.debug(Geonet.LDAP, \"  Highest user profile is \" + highestUserProfile);\n+                    }\n+                    userDetails.getUser().setProfile(highestUserProfile);\n+                }\n+\n+                // If no profile defined, use default profile\n+                if (userDetails.getUser().getProfile() == null) {\n+                    if (Log.isDebugEnabled(Geonet.LDAP)) {\n+                        Log.debug(Geonet.LDAP, \"  No profile defined in LDAP, using default profile \" + defaultProfile);\n+                    }\n+                    userDetails.getUser().setProfile(defaultProfile);\n+                }\n+\n+            } catch (NamingException e) {\n+                Log.error(Geonet.LDAP, \"Failed to extract profiles and groups. Error is: \" + e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d78858a37e8ecbd0093a22f7f508da4e39b6aa"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMyMDM0Mg==", "bodyText": "Please redact this in a more impersonal way, not I've modified...", "url": "https://github.com/geonetwork/core-geonetwork/pull/4878#discussion_r465320342", "createdAt": "2020-08-04T20:46:26Z", "author": {"login": "juanluisrp"}, "path": "core/src/main/java/org/fao/geonet/kernel/security/ldap/README.md", "diffHunk": "@@ -0,0 +1,40 @@\n+Using LDAPUserDetailsContextMapperWithProfileSearchEnhanced\n+===========================================================\n+\n+I've modified `LDAPUserDetailsContextMapperWithProfileSearch` so it works in more situations, is much simpler, uses strategy objects, and has a good set of test cases.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d78858a37e8ecbd0093a22f7f508da4e39b6aa"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxODkyOQ==", "bodyText": "Incomplete header.", "url": "https://github.com/geonetwork/core-geonetwork/pull/4878#discussion_r465518929", "createdAt": "2020-08-05T07:09:37Z", "author": {"login": "juanluisrp"}, "path": "core/src/test/java/org/fao/geonet/kernel/security/ldap/LDAPRoleConverterTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+//===\tand United Nations Environment Programme (UNEP)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d78858a37e8ecbd0093a22f7f508da4e39b6aa"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxOTk1MA==", "bodyText": "Formatting: Add spaces after ,.", "url": "https://github.com/geonetwork/core-geonetwork/pull/4878#discussion_r465519950", "createdAt": "2020-08-05T07:11:48Z", "author": {"login": "juanluisrp"}, "path": "core/src/test/java/org/fao/geonet/kernel/security/ldap/LDAPRoleConverterTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+//===\tand United Nations Environment Programme (UNEP)\n+//===\n+//===\tThis program is free software; you can redistribute it and/or modify\n+//===\tit under the terms of the GNU General Public License as published by\n+//===\tthe Free Software Foundation; either version 2 of the License, or (at\n+//===\tyour option) any later version.\n+//===\n+//===\tThis program is distributed in the hope that it will be useful, but\n+//===\tWITHOUT ANY WARRANTY; without even the implied warranty of\n+//===\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+//===\tGeneral Public License for more details.\n+//===\n+//===\tYou should have received a copy of the GNU General Public License\n+//===\talong with this program; if not, write to the Free Software\n+//===\tFoundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA\n+//===\n+//===\tContact: Jeroen Ticheler - FAO - Viale delle Terme di Caracalla 2,\n+//===\tRome - Italy. email: geonetwork@osgeo.org\n+//==============================================================================\n+// @author dblasby geocat\n+\n+package org.fao.geonet.kernel.security.ldap;\n+\n+import org.fao.geonet.domain.LDAPUser;\n+import org.fao.geonet.domain.Profile;\n+import org.junit.Test;\n+\n+import java.util.*;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class LDAPRoleConverterTest {\n+\n+    //simple test for parsing \"GCAT_GENERAL_Administrator\"\n+    @Test\n+    public void test_LDAPRoleConverter1() {\n+        LDAPRoleConverterGroupNameParser out = new LDAPRoleConverterGroupNameParser();\n+\n+        LDAPUser userDetails = new LDAPUser(\"dblasby@example.com\");\n+\n+        out.setLdapMembershipQueryParser(\"GCAT_(.*)_(.*)\");\n+        out.setGroupIndexInPattern(1);\n+        out.setProfileIndexInPattern(2);\n+        out.setProfileMapping(null);\n+\n+        List<LDAPRole> result = out.convert(null,userDetails,\"GCAT_GENERAL_Administrator\",null);\n+        assertEquals(1,result.size());\n+        assertEquals(\"GENERAL\", result.get(0).getGroupName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d78858a37e8ecbd0093a22f7f508da4e39b6aa"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyMDIwMg==", "bodyText": "Formatting: Add spaces after ,.", "url": "https://github.com/geonetwork/core-geonetwork/pull/4878#discussion_r465520202", "createdAt": "2020-08-05T07:12:23Z", "author": {"login": "juanluisrp"}, "path": "core/src/test/java/org/fao/geonet/kernel/security/ldap/LDAPRoleConverterTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+//===\tand United Nations Environment Programme (UNEP)\n+//===\n+//===\tThis program is free software; you can redistribute it and/or modify\n+//===\tit under the terms of the GNU General Public License as published by\n+//===\tthe Free Software Foundation; either version 2 of the License, or (at\n+//===\tyour option) any later version.\n+//===\n+//===\tThis program is distributed in the hope that it will be useful, but\n+//===\tWITHOUT ANY WARRANTY; without even the implied warranty of\n+//===\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+//===\tGeneral Public License for more details.\n+//===\n+//===\tYou should have received a copy of the GNU General Public License\n+//===\talong with this program; if not, write to the Free Software\n+//===\tFoundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA\n+//===\n+//===\tContact: Jeroen Ticheler - FAO - Viale delle Terme di Caracalla 2,\n+//===\tRome - Italy. email: geonetwork@osgeo.org\n+//==============================================================================\n+// @author dblasby geocat\n+\n+package org.fao.geonet.kernel.security.ldap;\n+\n+import org.fao.geonet.domain.LDAPUser;\n+import org.fao.geonet.domain.Profile;\n+import org.junit.Test;\n+\n+import java.util.*;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class LDAPRoleConverterTest {\n+\n+    //simple test for parsing \"GCAT_GENERAL_Administrator\"\n+    @Test\n+    public void test_LDAPRoleConverter1() {\n+        LDAPRoleConverterGroupNameParser out = new LDAPRoleConverterGroupNameParser();\n+\n+        LDAPUser userDetails = new LDAPUser(\"dblasby@example.com\");\n+\n+        out.setLdapMembershipQueryParser(\"GCAT_(.*)_(.*)\");\n+        out.setGroupIndexInPattern(1);\n+        out.setProfileIndexInPattern(2);\n+        out.setProfileMapping(null);\n+\n+        List<LDAPRole> result = out.convert(null,userDetails,\"GCAT_GENERAL_Administrator\",null);\n+        assertEquals(1,result.size());\n+        assertEquals(\"GENERAL\", result.get(0).getGroupName());\n+        assertEquals(Profile.Administrator, result.get(0).getProfile());\n+    }\n+\n+    //tests profile mapping (admin -> Administrator)\n+    @Test\n+    public void test_LDAPRoleConverter2() {\n+        LDAPRoleConverterGroupNameParser out = new LDAPRoleConverterGroupNameParser();\n+\n+        LDAPUser userDetails = new LDAPUser(\"dblasby@example.com\");\n+\n+        out.setLdapMembershipQueryParser(\"GCAT_(.*)_(.*)\");\n+        out.setGroupIndexInPattern(1);\n+        out.setProfileIndexInPattern(2);\n+\n+        Map<String,Profile> profileMap = new HashMap<>();\n+        profileMap.put(\"admin\",Profile.Administrator);\n+        profileMap.put(\"editor\",Profile.Editor);\n+\n+        out.setProfileMapping(profileMap);\n+\n+        List<LDAPRole> result = out.convert(null,userDetails,\"GCAT_GENERAL_admin\",null);\n+        assertEquals(1,result.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d78858a37e8ecbd0093a22f7f508da4e39b6aa"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyMDY1Nw==", "bodyText": "Formatting: Add spaces after ,.", "url": "https://github.com/geonetwork/core-geonetwork/pull/4878#discussion_r465520657", "createdAt": "2020-08-05T07:13:21Z", "author": {"login": "juanluisrp"}, "path": "core/src/test/java/org/fao/geonet/kernel/security/ldap/LDAPRoleConverterTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+//===\tand United Nations Environment Programme (UNEP)\n+//===\n+//===\tThis program is free software; you can redistribute it and/or modify\n+//===\tit under the terms of the GNU General Public License as published by\n+//===\tthe Free Software Foundation; either version 2 of the License, or (at\n+//===\tyour option) any later version.\n+//===\n+//===\tThis program is distributed in the hope that it will be useful, but\n+//===\tWITHOUT ANY WARRANTY; without even the implied warranty of\n+//===\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+//===\tGeneral Public License for more details.\n+//===\n+//===\tYou should have received a copy of the GNU General Public License\n+//===\talong with this program; if not, write to the Free Software\n+//===\tFoundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA\n+//===\n+//===\tContact: Jeroen Ticheler - FAO - Viale delle Terme di Caracalla 2,\n+//===\tRome - Italy. email: geonetwork@osgeo.org\n+//==============================================================================\n+// @author dblasby geocat\n+\n+package org.fao.geonet.kernel.security.ldap;\n+\n+import org.fao.geonet.domain.LDAPUser;\n+import org.fao.geonet.domain.Profile;\n+import org.junit.Test;\n+\n+import java.util.*;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class LDAPRoleConverterTest {\n+\n+    //simple test for parsing \"GCAT_GENERAL_Administrator\"\n+    @Test\n+    public void test_LDAPRoleConverter1() {\n+        LDAPRoleConverterGroupNameParser out = new LDAPRoleConverterGroupNameParser();\n+\n+        LDAPUser userDetails = new LDAPUser(\"dblasby@example.com\");\n+\n+        out.setLdapMembershipQueryParser(\"GCAT_(.*)_(.*)\");\n+        out.setGroupIndexInPattern(1);\n+        out.setProfileIndexInPattern(2);\n+        out.setProfileMapping(null);\n+\n+        List<LDAPRole> result = out.convert(null,userDetails,\"GCAT_GENERAL_Administrator\",null);\n+        assertEquals(1,result.size());\n+        assertEquals(\"GENERAL\", result.get(0).getGroupName());\n+        assertEquals(Profile.Administrator, result.get(0).getProfile());\n+    }\n+\n+    //tests profile mapping (admin -> Administrator)\n+    @Test\n+    public void test_LDAPRoleConverter2() {\n+        LDAPRoleConverterGroupNameParser out = new LDAPRoleConverterGroupNameParser();\n+\n+        LDAPUser userDetails = new LDAPUser(\"dblasby@example.com\");\n+\n+        out.setLdapMembershipQueryParser(\"GCAT_(.*)_(.*)\");\n+        out.setGroupIndexInPattern(1);\n+        out.setProfileIndexInPattern(2);\n+\n+        Map<String,Profile> profileMap = new HashMap<>();\n+        profileMap.put(\"admin\",Profile.Administrator);\n+        profileMap.put(\"editor\",Profile.Editor);\n+\n+        out.setProfileMapping(profileMap);\n+\n+        List<LDAPRole> result = out.convert(null,userDetails,\"GCAT_GENERAL_admin\",null);\n+        assertEquals(1,result.size());\n+        assertEquals(\"GENERAL\", result.get(0).getGroupName());\n+        assertEquals(Profile.Administrator, result.get(0).getProfile());\n+    }\n+\n+    //testswhen the LDAP role doesn't match the pattern (shouldn't return anything)\n+    @Test\n+    public void test_LDAPRoleConverter3() {\n+        LDAPRoleConverterGroupNameParser out = new LDAPRoleConverterGroupNameParser();\n+\n+        LDAPUser userDetails = new LDAPUser(\"dblasby@example.com\");\n+\n+        out.setLdapMembershipQueryParser(\"GCAT_(.*)_(.*)\");\n+        out.setGroupIndexInPattern(1);\n+        out.setProfileIndexInPattern(2);\n+\n+        Map<String,Profile> profileMap = new HashMap<>();\n+        profileMap.put(\"admin\",Profile.Administrator);\n+        profileMap.put(\"editor\",Profile.Editor);\n+\n+        out.setProfileMapping(profileMap);\n+\n+        List<LDAPRole> result = out.convert(null,userDetails,\"BAD GROUP NAME\",null);\n+        assertEquals(0,result.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d78858a37e8ecbd0093a22f7f508da4e39b6aa"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyMTI4NQ==", "bodyText": "Use a more expressive test name.", "url": "https://github.com/geonetwork/core-geonetwork/pull/4878#discussion_r465521285", "createdAt": "2020-08-05T07:14:40Z", "author": {"login": "juanluisrp"}, "path": "core/src/test/java/org/fao/geonet/kernel/security/ldap/LDAPRoleConverterTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+//===\tand United Nations Environment Programme (UNEP)\n+//===\n+//===\tThis program is free software; you can redistribute it and/or modify\n+//===\tit under the terms of the GNU General Public License as published by\n+//===\tthe Free Software Foundation; either version 2 of the License, or (at\n+//===\tyour option) any later version.\n+//===\n+//===\tThis program is distributed in the hope that it will be useful, but\n+//===\tWITHOUT ANY WARRANTY; without even the implied warranty of\n+//===\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+//===\tGeneral Public License for more details.\n+//===\n+//===\tYou should have received a copy of the GNU General Public License\n+//===\talong with this program; if not, write to the Free Software\n+//===\tFoundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA\n+//===\n+//===\tContact: Jeroen Ticheler - FAO - Viale delle Terme di Caracalla 2,\n+//===\tRome - Italy. email: geonetwork@osgeo.org\n+//==============================================================================\n+// @author dblasby geocat\n+\n+package org.fao.geonet.kernel.security.ldap;\n+\n+import org.fao.geonet.domain.LDAPUser;\n+import org.fao.geonet.domain.Profile;\n+import org.junit.Test;\n+\n+import java.util.*;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class LDAPRoleConverterTest {\n+\n+    //simple test for parsing \"GCAT_GENERAL_Administrator\"\n+    @Test\n+    public void test_LDAPRoleConverter1() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d78858a37e8ecbd0093a22f7f508da4e39b6aa"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyMTQyMQ==", "bodyText": "Use a more expressive test name.", "url": "https://github.com/geonetwork/core-geonetwork/pull/4878#discussion_r465521421", "createdAt": "2020-08-05T07:14:55Z", "author": {"login": "juanluisrp"}, "path": "core/src/test/java/org/fao/geonet/kernel/security/ldap/LDAPRoleConverterTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+//===\tand United Nations Environment Programme (UNEP)\n+//===\n+//===\tThis program is free software; you can redistribute it and/or modify\n+//===\tit under the terms of the GNU General Public License as published by\n+//===\tthe Free Software Foundation; either version 2 of the License, or (at\n+//===\tyour option) any later version.\n+//===\n+//===\tThis program is distributed in the hope that it will be useful, but\n+//===\tWITHOUT ANY WARRANTY; without even the implied warranty of\n+//===\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+//===\tGeneral Public License for more details.\n+//===\n+//===\tYou should have received a copy of the GNU General Public License\n+//===\talong with this program; if not, write to the Free Software\n+//===\tFoundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA\n+//===\n+//===\tContact: Jeroen Ticheler - FAO - Viale delle Terme di Caracalla 2,\n+//===\tRome - Italy. email: geonetwork@osgeo.org\n+//==============================================================================\n+// @author dblasby geocat\n+\n+package org.fao.geonet.kernel.security.ldap;\n+\n+import org.fao.geonet.domain.LDAPUser;\n+import org.fao.geonet.domain.Profile;\n+import org.junit.Test;\n+\n+import java.util.*;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class LDAPRoleConverterTest {\n+\n+    //simple test for parsing \"GCAT_GENERAL_Administrator\"\n+    @Test\n+    public void test_LDAPRoleConverter1() {\n+        LDAPRoleConverterGroupNameParser out = new LDAPRoleConverterGroupNameParser();\n+\n+        LDAPUser userDetails = new LDAPUser(\"dblasby@example.com\");\n+\n+        out.setLdapMembershipQueryParser(\"GCAT_(.*)_(.*)\");\n+        out.setGroupIndexInPattern(1);\n+        out.setProfileIndexInPattern(2);\n+        out.setProfileMapping(null);\n+\n+        List<LDAPRole> result = out.convert(null,userDetails,\"GCAT_GENERAL_Administrator\",null);\n+        assertEquals(1,result.size());\n+        assertEquals(\"GENERAL\", result.get(0).getGroupName());\n+        assertEquals(Profile.Administrator, result.get(0).getProfile());\n+    }\n+\n+    //tests profile mapping (admin -> Administrator)\n+    @Test\n+    public void test_LDAPRoleConverter2() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d78858a37e8ecbd0093a22f7f508da4e39b6aa"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyMjMyMQ==", "bodyText": "Use a more expressive test name", "url": "https://github.com/geonetwork/core-geonetwork/pull/4878#discussion_r465522321", "createdAt": "2020-08-05T07:16:42Z", "author": {"login": "juanluisrp"}, "path": "core/src/test/java/org/fao/geonet/kernel/security/ldap/LDAPRoleConverterTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+//===\tand United Nations Environment Programme (UNEP)\n+//===\n+//===\tThis program is free software; you can redistribute it and/or modify\n+//===\tit under the terms of the GNU General Public License as published by\n+//===\tthe Free Software Foundation; either version 2 of the License, or (at\n+//===\tyour option) any later version.\n+//===\n+//===\tThis program is distributed in the hope that it will be useful, but\n+//===\tWITHOUT ANY WARRANTY; without even the implied warranty of\n+//===\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+//===\tGeneral Public License for more details.\n+//===\n+//===\tYou should have received a copy of the GNU General Public License\n+//===\talong with this program; if not, write to the Free Software\n+//===\tFoundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA\n+//===\n+//===\tContact: Jeroen Ticheler - FAO - Viale delle Terme di Caracalla 2,\n+//===\tRome - Italy. email: geonetwork@osgeo.org\n+//==============================================================================\n+// @author dblasby geocat\n+\n+package org.fao.geonet.kernel.security.ldap;\n+\n+import org.fao.geonet.domain.LDAPUser;\n+import org.fao.geonet.domain.Profile;\n+import org.junit.Test;\n+\n+import java.util.*;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class LDAPRoleConverterTest {\n+\n+    //simple test for parsing \"GCAT_GENERAL_Administrator\"\n+    @Test\n+    public void test_LDAPRoleConverter1() {\n+        LDAPRoleConverterGroupNameParser out = new LDAPRoleConverterGroupNameParser();\n+\n+        LDAPUser userDetails = new LDAPUser(\"dblasby@example.com\");\n+\n+        out.setLdapMembershipQueryParser(\"GCAT_(.*)_(.*)\");\n+        out.setGroupIndexInPattern(1);\n+        out.setProfileIndexInPattern(2);\n+        out.setProfileMapping(null);\n+\n+        List<LDAPRole> result = out.convert(null,userDetails,\"GCAT_GENERAL_Administrator\",null);\n+        assertEquals(1,result.size());\n+        assertEquals(\"GENERAL\", result.get(0).getGroupName());\n+        assertEquals(Profile.Administrator, result.get(0).getProfile());\n+    }\n+\n+    //tests profile mapping (admin -> Administrator)\n+    @Test\n+    public void test_LDAPRoleConverter2() {\n+        LDAPRoleConverterGroupNameParser out = new LDAPRoleConverterGroupNameParser();\n+\n+        LDAPUser userDetails = new LDAPUser(\"dblasby@example.com\");\n+\n+        out.setLdapMembershipQueryParser(\"GCAT_(.*)_(.*)\");\n+        out.setGroupIndexInPattern(1);\n+        out.setProfileIndexInPattern(2);\n+\n+        Map<String,Profile> profileMap = new HashMap<>();\n+        profileMap.put(\"admin\",Profile.Administrator);\n+        profileMap.put(\"editor\",Profile.Editor);\n+\n+        out.setProfileMapping(profileMap);\n+\n+        List<LDAPRole> result = out.convert(null,userDetails,\"GCAT_GENERAL_admin\",null);\n+        assertEquals(1,result.size());\n+        assertEquals(\"GENERAL\", result.get(0).getGroupName());\n+        assertEquals(Profile.Administrator, result.get(0).getProfile());\n+    }\n+\n+    //testswhen the LDAP role doesn't match the pattern (shouldn't return anything)\n+    @Test\n+    public void test_LDAPRoleConverter3() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d78858a37e8ecbd0093a22f7f508da4e39b6aa"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyMjkxNQ==", "bodyText": "Use a more expressive test name", "url": "https://github.com/geonetwork/core-geonetwork/pull/4878#discussion_r465522915", "createdAt": "2020-08-05T07:17:52Z", "author": {"login": "juanluisrp"}, "path": "core/src/test/java/org/fao/geonet/kernel/security/ldap/LDAPRoleConverterTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+//===\tand United Nations Environment Programme (UNEP)\n+//===\n+//===\tThis program is free software; you can redistribute it and/or modify\n+//===\tit under the terms of the GNU General Public License as published by\n+//===\tthe Free Software Foundation; either version 2 of the License, or (at\n+//===\tyour option) any later version.\n+//===\n+//===\tThis program is distributed in the hope that it will be useful, but\n+//===\tWITHOUT ANY WARRANTY; without even the implied warranty of\n+//===\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+//===\tGeneral Public License for more details.\n+//===\n+//===\tYou should have received a copy of the GNU General Public License\n+//===\talong with this program; if not, write to the Free Software\n+//===\tFoundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA\n+//===\n+//===\tContact: Jeroen Ticheler - FAO - Viale delle Terme di Caracalla 2,\n+//===\tRome - Italy. email: geonetwork@osgeo.org\n+//==============================================================================\n+// @author dblasby geocat\n+\n+package org.fao.geonet.kernel.security.ldap;\n+\n+import org.fao.geonet.domain.LDAPUser;\n+import org.fao.geonet.domain.Profile;\n+import org.junit.Test;\n+\n+import java.util.*;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class LDAPRoleConverterTest {\n+\n+    //simple test for parsing \"GCAT_GENERAL_Administrator\"\n+    @Test\n+    public void test_LDAPRoleConverter1() {\n+        LDAPRoleConverterGroupNameParser out = new LDAPRoleConverterGroupNameParser();\n+\n+        LDAPUser userDetails = new LDAPUser(\"dblasby@example.com\");\n+\n+        out.setLdapMembershipQueryParser(\"GCAT_(.*)_(.*)\");\n+        out.setGroupIndexInPattern(1);\n+        out.setProfileIndexInPattern(2);\n+        out.setProfileMapping(null);\n+\n+        List<LDAPRole> result = out.convert(null,userDetails,\"GCAT_GENERAL_Administrator\",null);\n+        assertEquals(1,result.size());\n+        assertEquals(\"GENERAL\", result.get(0).getGroupName());\n+        assertEquals(Profile.Administrator, result.get(0).getProfile());\n+    }\n+\n+    //tests profile mapping (admin -> Administrator)\n+    @Test\n+    public void test_LDAPRoleConverter2() {\n+        LDAPRoleConverterGroupNameParser out = new LDAPRoleConverterGroupNameParser();\n+\n+        LDAPUser userDetails = new LDAPUser(\"dblasby@example.com\");\n+\n+        out.setLdapMembershipQueryParser(\"GCAT_(.*)_(.*)\");\n+        out.setGroupIndexInPattern(1);\n+        out.setProfileIndexInPattern(2);\n+\n+        Map<String,Profile> profileMap = new HashMap<>();\n+        profileMap.put(\"admin\",Profile.Administrator);\n+        profileMap.put(\"editor\",Profile.Editor);\n+\n+        out.setProfileMapping(profileMap);\n+\n+        List<LDAPRole> result = out.convert(null,userDetails,\"GCAT_GENERAL_admin\",null);\n+        assertEquals(1,result.size());\n+        assertEquals(\"GENERAL\", result.get(0).getGroupName());\n+        assertEquals(Profile.Administrator, result.get(0).getProfile());\n+    }\n+\n+    //testswhen the LDAP role doesn't match the pattern (shouldn't return anything)\n+    @Test\n+    public void test_LDAPRoleConverter3() {\n+        LDAPRoleConverterGroupNameParser out = new LDAPRoleConverterGroupNameParser();\n+\n+        LDAPUser userDetails = new LDAPUser(\"dblasby@example.com\");\n+\n+        out.setLdapMembershipQueryParser(\"GCAT_(.*)_(.*)\");\n+        out.setGroupIndexInPattern(1);\n+        out.setProfileIndexInPattern(2);\n+\n+        Map<String,Profile> profileMap = new HashMap<>();\n+        profileMap.put(\"admin\",Profile.Administrator);\n+        profileMap.put(\"editor\",Profile.Editor);\n+\n+        out.setProfileMapping(profileMap);\n+\n+        List<LDAPRole> result = out.convert(null,userDetails,\"BAD GROUP NAME\",null);\n+        assertEquals(0,result.size());\n+    }\n+\n+    //sets up a direct link between an LDAP group and a list of GN-Roles (gn-group and gn-profile)\n+    //also tests when the LDAP role doesn't match, LDAPRoleConverterGroupNameConverter doesn't return anything\n+    @Test\n+    public void test_LDAPRoleConverterGroupNameConverter1(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d78858a37e8ecbd0093a22f7f508da4e39b6aa"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyMzA0NA==", "bodyText": "Formatting: Add spaces after ,.", "url": "https://github.com/geonetwork/core-geonetwork/pull/4878#discussion_r465523044", "createdAt": "2020-08-05T07:18:10Z", "author": {"login": "juanluisrp"}, "path": "core/src/test/java/org/fao/geonet/kernel/security/ldap/LDAPRoleConverterTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+//===\tand United Nations Environment Programme (UNEP)\n+//===\n+//===\tThis program is free software; you can redistribute it and/or modify\n+//===\tit under the terms of the GNU General Public License as published by\n+//===\tthe Free Software Foundation; either version 2 of the License, or (at\n+//===\tyour option) any later version.\n+//===\n+//===\tThis program is distributed in the hope that it will be useful, but\n+//===\tWITHOUT ANY WARRANTY; without even the implied warranty of\n+//===\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+//===\tGeneral Public License for more details.\n+//===\n+//===\tYou should have received a copy of the GNU General Public License\n+//===\talong with this program; if not, write to the Free Software\n+//===\tFoundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA\n+//===\n+//===\tContact: Jeroen Ticheler - FAO - Viale delle Terme di Caracalla 2,\n+//===\tRome - Italy. email: geonetwork@osgeo.org\n+//==============================================================================\n+// @author dblasby geocat\n+\n+package org.fao.geonet.kernel.security.ldap;\n+\n+import org.fao.geonet.domain.LDAPUser;\n+import org.fao.geonet.domain.Profile;\n+import org.junit.Test;\n+\n+import java.util.*;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class LDAPRoleConverterTest {\n+\n+    //simple test for parsing \"GCAT_GENERAL_Administrator\"\n+    @Test\n+    public void test_LDAPRoleConverter1() {\n+        LDAPRoleConverterGroupNameParser out = new LDAPRoleConverterGroupNameParser();\n+\n+        LDAPUser userDetails = new LDAPUser(\"dblasby@example.com\");\n+\n+        out.setLdapMembershipQueryParser(\"GCAT_(.*)_(.*)\");\n+        out.setGroupIndexInPattern(1);\n+        out.setProfileIndexInPattern(2);\n+        out.setProfileMapping(null);\n+\n+        List<LDAPRole> result = out.convert(null,userDetails,\"GCAT_GENERAL_Administrator\",null);\n+        assertEquals(1,result.size());\n+        assertEquals(\"GENERAL\", result.get(0).getGroupName());\n+        assertEquals(Profile.Administrator, result.get(0).getProfile());\n+    }\n+\n+    //tests profile mapping (admin -> Administrator)\n+    @Test\n+    public void test_LDAPRoleConverter2() {\n+        LDAPRoleConverterGroupNameParser out = new LDAPRoleConverterGroupNameParser();\n+\n+        LDAPUser userDetails = new LDAPUser(\"dblasby@example.com\");\n+\n+        out.setLdapMembershipQueryParser(\"GCAT_(.*)_(.*)\");\n+        out.setGroupIndexInPattern(1);\n+        out.setProfileIndexInPattern(2);\n+\n+        Map<String,Profile> profileMap = new HashMap<>();\n+        profileMap.put(\"admin\",Profile.Administrator);\n+        profileMap.put(\"editor\",Profile.Editor);\n+\n+        out.setProfileMapping(profileMap);\n+\n+        List<LDAPRole> result = out.convert(null,userDetails,\"GCAT_GENERAL_admin\",null);\n+        assertEquals(1,result.size());\n+        assertEquals(\"GENERAL\", result.get(0).getGroupName());\n+        assertEquals(Profile.Administrator, result.get(0).getProfile());\n+    }\n+\n+    //testswhen the LDAP role doesn't match the pattern (shouldn't return anything)\n+    @Test\n+    public void test_LDAPRoleConverter3() {\n+        LDAPRoleConverterGroupNameParser out = new LDAPRoleConverterGroupNameParser();\n+\n+        LDAPUser userDetails = new LDAPUser(\"dblasby@example.com\");\n+\n+        out.setLdapMembershipQueryParser(\"GCAT_(.*)_(.*)\");\n+        out.setGroupIndexInPattern(1);\n+        out.setProfileIndexInPattern(2);\n+\n+        Map<String,Profile> profileMap = new HashMap<>();\n+        profileMap.put(\"admin\",Profile.Administrator);\n+        profileMap.put(\"editor\",Profile.Editor);\n+\n+        out.setProfileMapping(profileMap);\n+\n+        List<LDAPRole> result = out.convert(null,userDetails,\"BAD GROUP NAME\",null);\n+        assertEquals(0,result.size());\n+    }\n+\n+    //sets up a direct link between an LDAP group and a list of GN-Roles (gn-group and gn-profile)\n+    //also tests when the LDAP role doesn't match, LDAPRoleConverterGroupNameConverter doesn't return anything\n+    @Test\n+    public void test_LDAPRoleConverterGroupNameConverter1(){\n+        LDAPRoleConverterGroupNameConverter out = new LDAPRoleConverterGroupNameConverter();\n+\n+        Map<String,List<LDAPRole>> map = new HashMap<>();\n+        List<LDAPRole> roles = new ArrayList<LDAPRole>(\n+                                        Arrays.asList( new LDAPRole(\"group1\",\"Administrator\"),\n+                                                       new LDAPRole(\"group2\",\"Editor\")\n+                                        ));\n+        map.put(\"ldap_abc\",roles);\n+\n+        out.setConvertMap(map);\n+\n+        LDAPUser userDetails = new LDAPUser(\"dblasby@example.com\");\n+\n+        List<LDAPRole> result = out.convert(null,userDetails,\"ldap_abc\",null);\n+        assertEquals(2,result.size());\n+        assertEquals(\"group1\", result.get(0).getGroupName());\n+        assertEquals(Profile.Administrator, result.get(0).getProfile());\n+\n+        assertEquals(\"group2\", result.get(1).getGroupName());\n+        assertEquals(Profile.Editor, result.get(1).getProfile());\n+\n+\n+        result = out.convert(null,userDetails,\"BAD_GROUP_NAME\",null);\n+        assertEquals(0,result.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d78858a37e8ecbd0093a22f7f508da4e39b6aa"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU2NzU1Mw==", "bodyText": "Move these methods to the start of the test class.", "url": "https://github.com/geonetwork/core-geonetwork/pull/4878#discussion_r465567553", "createdAt": "2020-08-05T08:39:26Z", "author": {"login": "juanluisrp"}, "path": "core/src/test/java/org/fao/geonet/kernel/security/ldap/LDAPUserDetailsContextMapperWithProfileSearchEnhancedTest.java", "diffHunk": "@@ -0,0 +1,439 @@\n+/*\n+ * Copyright (C) 2001-2016 Food and Agriculture Organization of the\n+ * United Nations (FAO-UN), United Nations World Food Programme (WFP)\n+ * and United Nations Environment Programme (UNEP)\n+ *\n+ * This program is free software; you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation; either version 2 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA\n+ *\n+ * Contact: Jeroen Ticheler - FAO - Viale delle Terme di Caracalla 2,\n+ * Rome - Italy. email: geonetwork@osgeo.org\n+ */\n+package org.fao.geonet.kernel.security.ldap;\n+\n+import org.apache.directory.api.util.FileUtils;\n+import org.apache.directory.server.annotations.CreateLdapServer;\n+import org.apache.directory.server.annotations.CreateTransport;\n+import org.apache.directory.server.core.annotations.ApplyLdifFiles;\n+import org.apache.directory.server.core.annotations.CreateDS;\n+import org.apache.directory.server.core.annotations.CreatePartition;\n+import org.apache.directory.server.core.api.DirectoryService;\n+import org.apache.directory.server.core.factory.DSAnnotationProcessor;\n+import org.apache.directory.server.core.integ.AbstractLdapTestUnit;\n+import org.apache.directory.server.factory.ServerAnnotationProcessor;\n+import org.apache.directory.server.ldap.LdapServer;\n+import org.fao.geonet.ApplicationContextHolder;\n+import org.fao.geonet.domain.*;\n+import org.fao.geonet.repository.GroupRepository;\n+import org.fao.geonet.repository.UserGroupRepository;\n+import org.fao.geonet.repository.UserRepository;\n+import org.fao.geonet.repository.specification.UserGroupSpecs;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.ldap.core.*;\n+import org.springframework.security.authentication.BadCredentialsException;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.userdetails.UserDetails;\n+import org.springframework.security.ldap.DefaultSpringSecurityContextSource;\n+import org.springframework.security.ldap.LdapUsernameToDnMapper;\n+import org.springframework.security.ldap.LdapUtils;\n+import org.springframework.security.ldap.authentication.LdapAuthenticationProvider;\n+import org.springframework.security.ldap.search.FilterBasedLdapUserSearch;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import javax.naming.Context;\n+import javax.naming.NameClassPair;\n+import javax.naming.NamingEnumeration;\n+import javax.naming.NamingException;\n+import javax.naming.directory.DirContext;\n+import javax.naming.directory.InitialDirContext;\n+import javax.naming.directory.SearchControls;\n+import javax.naming.directory.SearchResult;\n+import java.util.Collections;\n+import java.util.Hashtable;\n+import java.util.List;\n+\n+import static org.junit.Assert.*;\n+\n+\n+// ====================================================================================\n+//  SEE THE DATA.LDIF FILE FOR THE LDAP LAYOUT\n+//\n+//   (it has comments at the top showing the tree)\n+// ====================================================================================\n+\n+//Normally, you would use an org.apache.directory.server.core.integ.FrameworkRunner to run LDAP tests\n+// however, that means you cannot use the SPRING runner, which makes life a bit more difficult.\n+// So, we added setupServer/shutdown() server methods that will start/stop the LDAP server in the same manner.\n+// This allows SPRING tests (with the spring runner) to run with an LDAP server!\n+@CreateLdapServer(\n+    transports = {@CreateTransport(port = 3333, protocol = \"LDAP\", address = \"localhost\")},\n+    allowAnonymousAccess = false\n+)\n+@CreateDS(\n+    name = \"myDS\",\n+    partitions = {@CreatePartition(name = \"test\", suffix = LDAPUserDetailsContextMapperWithProfileSearchEnhancedTest.ldapSearchBase)}\n+)\n+@ApplyLdifFiles({\"org/fao/geonet/kernel/security/ldap/data.ldif\"})\n+//run with spring\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(locations = {\n+    \"classpath:org/fao/geonet/kernel/security/ldap/LDAPUserDetailsContextMapperWithProfileSearchEnhancedTest-context.xml\"})\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.BEFORE_CLASS)\n+public class LDAPUserDetailsContextMapperWithProfileSearchEnhancedTest extends AbstractLdapTestUnit {\n+\n+    @Autowired\n+    private ConfigurableApplicationContext _appContext;\n+\n+    @Autowired\n+    private UserRepository userRepository;\n+\n+    @Autowired\n+    private UserGroupRepository userGroupRepository;\n+\n+    @Autowired\n+    private GroupRepository groupRepository;\n+\n+    @Autowired\n+    DefaultSpringSecurityContextSource contextSource;\n+\n+    @Autowired\n+    LdapUsernameToDnMapper usernameMapper;\n+\n+    @Autowired\n+    LdapUserDetailsManager ldapUserDetailsService;\n+\n+    @Autowired\n+    LDAPUserDetailsContextMapperWithProfileSearchEnhanced ldapUserContextMapper;\n+\n+    @Autowired\n+    LdapAuthenticationProvider ldapAuthProvider;\n+\n+    @Autowired\n+    FilterBasedLdapUserSearch ldapUserSearch;\n+\n+    @Autowired\n+    LDAPRoleConverterGroupNameParser ldapRoleConverterGroupNameParser;\n+\n+    //very simple test\n+    // this will find the DN by searching by username\n+    @Test\n+    public void test_searchingLdapUsernameToDnMapper() {\n+        DistinguishedName name = usernameMapper.buildDn(\"dblasby@example.com\");\n+        assertEquals(\"cn=blasby\\\\, david,ou=GIS Department,ou=Corporate Users\", name.toString());\n+\n+\n+        name = usernameMapper.buildDn(\"jgee@example.com\");\n+        assertEquals(\"cn=gee\\\\, jody,ou=Project Admin,ou=Corporate Users\", name.toString());\n+    }\n+\n+\n+    //trivial test - make sure that the we can access the LDAP server and do a query via the contextSource bean\n+    @Test\n+    public void test_contextSource() throws NamingException {\n+        DirContext ctx = contextSource.getReadOnlyContext();\n+        List<SearchResult> results = queryLDAP(\"(objectClass=*)\", ctx, null, null);\n+        assertTrue(results.size() > 8);\n+    }\n+\n+    //trivial test to make sure ldapUserSearch is working (finds users)\n+    @Test\n+    public void test_ldapUserSearch() {\n+        DirContextOperations result = ldapUserSearch.searchForUser(\"dblasby@example.com\");\n+        assertNotNull(result);\n+        assertEquals(\"cn=blasby\\\\, david,ou=GIS Department,ou=Corporate Users\", result.getDn().toString());\n+    }\n+\n+    //test the ldapUserDetailsService bean by looking for a user\n+    //This bean also imports the LDAP user into geonetwork (i.e. inside UserRepo)\n+    @Test\n+    public void test_ldapUserDetailsService() throws NamingException {\n+        boolean orig_importPrivilegesFromLdap = ldapUserContextMapper.isImportPrivilegesFromLdap();\n+        try {\n+            ldapUserContextMapper.setImportPrivilegesFromLdap(false); // we don't want to do this for this test case - this is just about the basics\n+            UserDetails details = ldapUserDetailsService.loadUserByUsername(\"dblasby@example.com\");\n+            assertNotNull(details);\n+\n+            User user = userRepository.findOneByUsername(\"dblasby@example.com\");\n+            assertNotNull(user);\n+            assertEquals(\"blasby\", user.getSurname());\n+        } finally {\n+            ldapUserContextMapper.setImportPrivilegesFromLdap(orig_importPrivilegesFromLdap); //reset\n+        }\n+    }\n+\n+\n+    //this is the main test - will set group/profiles for the user (dblasby)\n+    @Test\n+    @Transactional\n+    public void test_ldapUserDetailsService_groups_and_profiles_dblasby() throws NamingException {\n+\n+        //make sure its already in the repository, or nothing will happen\n+        Group group = new Group().setName(\"GENERAL\");\n+        group = groupRepository.save(group);\n+\n+\n+        UserDetails details = ldapUserDetailsService.loadUserByUsername(\"dblasby@example.com\");\n+        assertNotNull(details);\n+        assertEquals(3, details.getAuthorities().size());\n+        assertEquals(Profile.Guest.name(), details.getAuthorities().toArray(new GrantedAuthority[0])[0].getAuthority());\n+        assertEquals(Profile.Editor.name(), details.getAuthorities().toArray(new GrantedAuthority[0])[1].getAuthority());\n+        assertEquals(Profile.RegisteredUser.name(), details.getAuthorities().toArray(new GrantedAuthority[0])[2].getAuthority());\n+\n+\n+        LDAPUser user1 = (LDAPUser) details;\n+        assertEquals(1, user1.getPrivileges().size());\n+        assertTrue(user1.getPrivileges().containsKey(\"GENERAL\"));\n+        assertEquals(1, user1.getPrivileges().get(\"GENERAL\").toArray().length);\n+        assertEquals(Profile.Editor, user1.getPrivileges().get(\"GENERAL\").toArray()[0]);\n+\n+\n+        User user = userRepository.findOneByUsername(\"dblasby@example.com\");\n+        assertNotNull(user);\n+        assertEquals(\"blasby\", user.getSurname());\n+        assertEquals(Profile.Editor, user.getProfile());\n+\n+        List<UserGroup> ug = userGroupRepository.findAll(UserGroupSpecs.hasUserId(user.getId()));\n+        assertNotNull(ug);\n+        assertEquals(1, ug.size());\n+        assertEquals(\"GENERAL\", ug.get(0).getGroup().getName());\n+    }\n+\n+    //this is the main test - will set group/profiles for the user (admin)\n+    @Test\n+    @Transactional\n+    public void test_ldapUserDetailsService_groups_and_profiles_admin() throws NamingException {\n+\n+        //make sure its already in the repository, or nothing will happen\n+        Group group = new Group().setName(\"GENERAL\");\n+        group = groupRepository.save(group);\n+\n+\n+        UserDetails details = ldapUserDetailsService.loadUserByUsername(\"admin@example.com\");\n+        assertNotNull(details);\n+\n+        LDAPUser user1 = (LDAPUser) details;\n+        assertEquals(1, user1.getPrivileges().size());\n+        assertTrue(user1.getPrivileges().containsKey(\"GENERAL\"));\n+        assertEquals(1, user1.getPrivileges().get(\"GENERAL\").toArray().length);\n+        assertEquals(Profile.Administrator, user1.getPrivileges().get(\"GENERAL\").toArray()[0]);\n+\n+\n+        User user = userRepository.findOneByUsername(\"admin@example.com\");\n+        assertNotNull(user);\n+        assertEquals(\"admin\", user.getSurname());\n+        assertEquals(Profile.Administrator, user.getProfile());\n+\n+        List<UserGroup> ug = userGroupRepository.findAll(UserGroupSpecs.hasUserId(user.getId()));\n+        assertNotNull(ug);\n+        assertEquals(1, ug.size());\n+        assertEquals(\"GENERAL\", ug.get(0).getGroup().getName());\n+    }\n+\n+    //this is the main test - will set group/profiles for the user (jody)\n+    @Test\n+    @Transactional\n+    public void test_ldapUserDetailsService_groups_and_profiles_jody() throws NamingException {\n+\n+        //make sure its already in the repository, or nothing will happen\n+        Group group = new Group().setName(\"GENERAL\");\n+        group = groupRepository.save(group);\n+\n+\n+        UserDetails details = ldapUserDetailsService.loadUserByUsername(\"jgee@example.com\");\n+        assertNotNull(details);\n+\n+        LDAPUser user1 = (LDAPUser) details;\n+        assertEquals(0, user1.getPrivileges().size());\n+\n+        User user = userRepository.findOneByUsername(\"jgee@example.com\");\n+        assertNotNull(user);\n+        assertEquals(\"gee\", user.getSurname());\n+        assertEquals(Profile.RegisteredUser, user.getProfile());\n+\n+        List<UserGroup> ug = userGroupRepository.findAll(UserGroupSpecs.hasUserId(user.getId()));\n+        assertNotNull(ug);\n+        assertEquals(0, ug.size());\n+    }\n+\n+\n+    @Test\n+    @Transactional\n+    public void test_ldapAuthProvider() {\n+        UsernamePasswordAuthenticationToken userpass = new UsernamePasswordAuthenticationToken(\"dblasby@example.com\", \"blasby1\", null);\n+\n+        Authentication result = ldapAuthProvider.authenticate(userpass);\n+        assertNotNull(result);\n+        assertTrue(result.isAuthenticated());\n+    }\n+\n+    @Test(expected = BadCredentialsException.class)\n+    public void test_ldapAuthProvider_badPass() {\n+        UsernamePasswordAuthenticationToken userpass = new UsernamePasswordAuthenticationToken(\"dblasby@example.com\", \"BAD_PASSWORD\", null);\n+\n+        //will throw because the password is wrong\n+        Authentication result = ldapAuthProvider.authenticate(userpass);\n+    }\n+\n+\n+    //=========================================================================================\n+\n+    public final static String ldapSearchBase = \"dc=example,dc=com\";\n+\n+\n+    DirectoryService LDAPservice = null;\n+    LdapServer ldapServer = null;\n+\n+    public void setupLDAP() throws Exception {\n+        CreateLdapServer classLdapServerBuilder = this.getClass().getAnnotation(CreateLdapServer.class);\n+        CreateDS dsBuilder = this.getClass().getAnnotation(CreateDS.class);\n+        LDAPservice = DSAnnotationProcessor.createDS(dsBuilder);\n+        ApplyLdifFiles applyLdifFiles = this.getClass().getAnnotation(ApplyLdifFiles.class);\n+        DSAnnotationProcessor.injectLdifFiles(applyLdifFiles.clazz(), LDAPservice, applyLdifFiles.value());\n+\n+        CreateLdapServer createLdapServer = getClass().getAnnotation(CreateLdapServer.class);\n+        ldapServer = ServerAnnotationProcessor.instantiateLdapServer(createLdapServer, LDAPservice);\n+        ldapServer.start();\n+    }\n+\n+    public void shutdownLDAP() throws Exception {\n+        ldapServer.stop();\n+        LDAPservice.shutdown();\n+        FileUtils.deleteDirectory(LDAPservice.getInstanceLayout().getInstanceDirectory());\n+    }\n+\n+    @After\n+    public void after() throws Exception {\n+        shutdownLDAP();\n+    }\n+\n+    //gets the spring context\n+    @Before\n+    public void before() throws Exception {\n+        setupLDAP();\n+        ApplicationContextHolder.set(this._appContext); // this is for code using antipattern - ApplicationContextHolder.get().getBean(...)\n+\n+        userRepository.deleteAll();\n+        groupRepository.deleteAll();\n+        userGroupRepository.deleteAll();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d78858a37e8ecbd0093a22f7f508da4e39b6aa"}, "originalPosition": 339}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNTU5ODYx", "url": "https://github.com/geonetwork/core-geonetwork/pull/4878#pullrequestreview-461559861", "createdAt": "2020-08-05T11:08:01Z", "commit": {"oid": "97d78858a37e8ecbd0093a22f7f508da4e39b6aa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMTowODowMlrOG8E3-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMTowODowMlrOG8E3-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY0NzYxMQ==", "bodyText": "Since you are always using the same LDAP configuration for all test why not start and stop the LDAP server only once using @BeforeClass and @AfterClass to call setupLDAP() and shutdownLDAP() methods?\nIn my machine that reduces the run time of the tests from  1m 17s to 800ms", "url": "https://github.com/geonetwork/core-geonetwork/pull/4878#discussion_r465647611", "createdAt": "2020-08-05T11:08:02Z", "author": {"login": "juanluisrp"}, "path": "core/src/test/java/org/fao/geonet/kernel/security/ldap/LDAPUserDetailsContextMapperWithProfileSearchEnhancedTest.java", "diffHunk": "@@ -0,0 +1,439 @@\n+/*\n+ * Copyright (C) 2001-2016 Food and Agriculture Organization of the\n+ * United Nations (FAO-UN), United Nations World Food Programme (WFP)\n+ * and United Nations Environment Programme (UNEP)\n+ *\n+ * This program is free software; you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation; either version 2 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with this program; if not, write to the Free Software\n+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA\n+ *\n+ * Contact: Jeroen Ticheler - FAO - Viale delle Terme di Caracalla 2,\n+ * Rome - Italy. email: geonetwork@osgeo.org\n+ */\n+package org.fao.geonet.kernel.security.ldap;\n+\n+import org.apache.directory.api.util.FileUtils;\n+import org.apache.directory.server.annotations.CreateLdapServer;\n+import org.apache.directory.server.annotations.CreateTransport;\n+import org.apache.directory.server.core.annotations.ApplyLdifFiles;\n+import org.apache.directory.server.core.annotations.CreateDS;\n+import org.apache.directory.server.core.annotations.CreatePartition;\n+import org.apache.directory.server.core.api.DirectoryService;\n+import org.apache.directory.server.core.factory.DSAnnotationProcessor;\n+import org.apache.directory.server.core.integ.AbstractLdapTestUnit;\n+import org.apache.directory.server.factory.ServerAnnotationProcessor;\n+import org.apache.directory.server.ldap.LdapServer;\n+import org.fao.geonet.ApplicationContextHolder;\n+import org.fao.geonet.domain.*;\n+import org.fao.geonet.repository.GroupRepository;\n+import org.fao.geonet.repository.UserGroupRepository;\n+import org.fao.geonet.repository.UserRepository;\n+import org.fao.geonet.repository.specification.UserGroupSpecs;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.ldap.core.*;\n+import org.springframework.security.authentication.BadCredentialsException;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.userdetails.UserDetails;\n+import org.springframework.security.ldap.DefaultSpringSecurityContextSource;\n+import org.springframework.security.ldap.LdapUsernameToDnMapper;\n+import org.springframework.security.ldap.LdapUtils;\n+import org.springframework.security.ldap.authentication.LdapAuthenticationProvider;\n+import org.springframework.security.ldap.search.FilterBasedLdapUserSearch;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import javax.naming.Context;\n+import javax.naming.NameClassPair;\n+import javax.naming.NamingEnumeration;\n+import javax.naming.NamingException;\n+import javax.naming.directory.DirContext;\n+import javax.naming.directory.InitialDirContext;\n+import javax.naming.directory.SearchControls;\n+import javax.naming.directory.SearchResult;\n+import java.util.Collections;\n+import java.util.Hashtable;\n+import java.util.List;\n+\n+import static org.junit.Assert.*;\n+\n+\n+// ====================================================================================\n+//  SEE THE DATA.LDIF FILE FOR THE LDAP LAYOUT\n+//\n+//   (it has comments at the top showing the tree)\n+// ====================================================================================\n+\n+//Normally, you would use an org.apache.directory.server.core.integ.FrameworkRunner to run LDAP tests\n+// however, that means you cannot use the SPRING runner, which makes life a bit more difficult.\n+// So, we added setupServer/shutdown() server methods that will start/stop the LDAP server in the same manner.\n+// This allows SPRING tests (with the spring runner) to run with an LDAP server!\n+@CreateLdapServer(\n+    transports = {@CreateTransport(port = 3333, protocol = \"LDAP\", address = \"localhost\")},\n+    allowAnonymousAccess = false\n+)\n+@CreateDS(\n+    name = \"myDS\",\n+    partitions = {@CreatePartition(name = \"test\", suffix = LDAPUserDetailsContextMapperWithProfileSearchEnhancedTest.ldapSearchBase)}\n+)\n+@ApplyLdifFiles({\"org/fao/geonet/kernel/security/ldap/data.ldif\"})\n+//run with spring\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(locations = {\n+    \"classpath:org/fao/geonet/kernel/security/ldap/LDAPUserDetailsContextMapperWithProfileSearchEnhancedTest-context.xml\"})\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.BEFORE_CLASS)\n+public class LDAPUserDetailsContextMapperWithProfileSearchEnhancedTest extends AbstractLdapTestUnit {\n+\n+    @Autowired\n+    private ConfigurableApplicationContext _appContext;\n+\n+    @Autowired\n+    private UserRepository userRepository;\n+\n+    @Autowired\n+    private UserGroupRepository userGroupRepository;\n+\n+    @Autowired\n+    private GroupRepository groupRepository;\n+\n+    @Autowired\n+    DefaultSpringSecurityContextSource contextSource;\n+\n+    @Autowired\n+    LdapUsernameToDnMapper usernameMapper;\n+\n+    @Autowired\n+    LdapUserDetailsManager ldapUserDetailsService;\n+\n+    @Autowired\n+    LDAPUserDetailsContextMapperWithProfileSearchEnhanced ldapUserContextMapper;\n+\n+    @Autowired\n+    LdapAuthenticationProvider ldapAuthProvider;\n+\n+    @Autowired\n+    FilterBasedLdapUserSearch ldapUserSearch;\n+\n+    @Autowired\n+    LDAPRoleConverterGroupNameParser ldapRoleConverterGroupNameParser;\n+\n+    //very simple test\n+    // this will find the DN by searching by username\n+    @Test\n+    public void test_searchingLdapUsernameToDnMapper() {\n+        DistinguishedName name = usernameMapper.buildDn(\"dblasby@example.com\");\n+        assertEquals(\"cn=blasby\\\\, david,ou=GIS Department,ou=Corporate Users\", name.toString());\n+\n+\n+        name = usernameMapper.buildDn(\"jgee@example.com\");\n+        assertEquals(\"cn=gee\\\\, jody,ou=Project Admin,ou=Corporate Users\", name.toString());\n+    }\n+\n+\n+    //trivial test - make sure that the we can access the LDAP server and do a query via the contextSource bean\n+    @Test\n+    public void test_contextSource() throws NamingException {\n+        DirContext ctx = contextSource.getReadOnlyContext();\n+        List<SearchResult> results = queryLDAP(\"(objectClass=*)\", ctx, null, null);\n+        assertTrue(results.size() > 8);\n+    }\n+\n+    //trivial test to make sure ldapUserSearch is working (finds users)\n+    @Test\n+    public void test_ldapUserSearch() {\n+        DirContextOperations result = ldapUserSearch.searchForUser(\"dblasby@example.com\");\n+        assertNotNull(result);\n+        assertEquals(\"cn=blasby\\\\, david,ou=GIS Department,ou=Corporate Users\", result.getDn().toString());\n+    }\n+\n+    //test the ldapUserDetailsService bean by looking for a user\n+    //This bean also imports the LDAP user into geonetwork (i.e. inside UserRepo)\n+    @Test\n+    public void test_ldapUserDetailsService() throws NamingException {\n+        boolean orig_importPrivilegesFromLdap = ldapUserContextMapper.isImportPrivilegesFromLdap();\n+        try {\n+            ldapUserContextMapper.setImportPrivilegesFromLdap(false); // we don't want to do this for this test case - this is just about the basics\n+            UserDetails details = ldapUserDetailsService.loadUserByUsername(\"dblasby@example.com\");\n+            assertNotNull(details);\n+\n+            User user = userRepository.findOneByUsername(\"dblasby@example.com\");\n+            assertNotNull(user);\n+            assertEquals(\"blasby\", user.getSurname());\n+        } finally {\n+            ldapUserContextMapper.setImportPrivilegesFromLdap(orig_importPrivilegesFromLdap); //reset\n+        }\n+    }\n+\n+\n+    //this is the main test - will set group/profiles for the user (dblasby)\n+    @Test\n+    @Transactional\n+    public void test_ldapUserDetailsService_groups_and_profiles_dblasby() throws NamingException {\n+\n+        //make sure its already in the repository, or nothing will happen\n+        Group group = new Group().setName(\"GENERAL\");\n+        group = groupRepository.save(group);\n+\n+\n+        UserDetails details = ldapUserDetailsService.loadUserByUsername(\"dblasby@example.com\");\n+        assertNotNull(details);\n+        assertEquals(3, details.getAuthorities().size());\n+        assertEquals(Profile.Guest.name(), details.getAuthorities().toArray(new GrantedAuthority[0])[0].getAuthority());\n+        assertEquals(Profile.Editor.name(), details.getAuthorities().toArray(new GrantedAuthority[0])[1].getAuthority());\n+        assertEquals(Profile.RegisteredUser.name(), details.getAuthorities().toArray(new GrantedAuthority[0])[2].getAuthority());\n+\n+\n+        LDAPUser user1 = (LDAPUser) details;\n+        assertEquals(1, user1.getPrivileges().size());\n+        assertTrue(user1.getPrivileges().containsKey(\"GENERAL\"));\n+        assertEquals(1, user1.getPrivileges().get(\"GENERAL\").toArray().length);\n+        assertEquals(Profile.Editor, user1.getPrivileges().get(\"GENERAL\").toArray()[0]);\n+\n+\n+        User user = userRepository.findOneByUsername(\"dblasby@example.com\");\n+        assertNotNull(user);\n+        assertEquals(\"blasby\", user.getSurname());\n+        assertEquals(Profile.Editor, user.getProfile());\n+\n+        List<UserGroup> ug = userGroupRepository.findAll(UserGroupSpecs.hasUserId(user.getId()));\n+        assertNotNull(ug);\n+        assertEquals(1, ug.size());\n+        assertEquals(\"GENERAL\", ug.get(0).getGroup().getName());\n+    }\n+\n+    //this is the main test - will set group/profiles for the user (admin)\n+    @Test\n+    @Transactional\n+    public void test_ldapUserDetailsService_groups_and_profiles_admin() throws NamingException {\n+\n+        //make sure its already in the repository, or nothing will happen\n+        Group group = new Group().setName(\"GENERAL\");\n+        group = groupRepository.save(group);\n+\n+\n+        UserDetails details = ldapUserDetailsService.loadUserByUsername(\"admin@example.com\");\n+        assertNotNull(details);\n+\n+        LDAPUser user1 = (LDAPUser) details;\n+        assertEquals(1, user1.getPrivileges().size());\n+        assertTrue(user1.getPrivileges().containsKey(\"GENERAL\"));\n+        assertEquals(1, user1.getPrivileges().get(\"GENERAL\").toArray().length);\n+        assertEquals(Profile.Administrator, user1.getPrivileges().get(\"GENERAL\").toArray()[0]);\n+\n+\n+        User user = userRepository.findOneByUsername(\"admin@example.com\");\n+        assertNotNull(user);\n+        assertEquals(\"admin\", user.getSurname());\n+        assertEquals(Profile.Administrator, user.getProfile());\n+\n+        List<UserGroup> ug = userGroupRepository.findAll(UserGroupSpecs.hasUserId(user.getId()));\n+        assertNotNull(ug);\n+        assertEquals(1, ug.size());\n+        assertEquals(\"GENERAL\", ug.get(0).getGroup().getName());\n+    }\n+\n+    //this is the main test - will set group/profiles for the user (jody)\n+    @Test\n+    @Transactional\n+    public void test_ldapUserDetailsService_groups_and_profiles_jody() throws NamingException {\n+\n+        //make sure its already in the repository, or nothing will happen\n+        Group group = new Group().setName(\"GENERAL\");\n+        group = groupRepository.save(group);\n+\n+\n+        UserDetails details = ldapUserDetailsService.loadUserByUsername(\"jgee@example.com\");\n+        assertNotNull(details);\n+\n+        LDAPUser user1 = (LDAPUser) details;\n+        assertEquals(0, user1.getPrivileges().size());\n+\n+        User user = userRepository.findOneByUsername(\"jgee@example.com\");\n+        assertNotNull(user);\n+        assertEquals(\"gee\", user.getSurname());\n+        assertEquals(Profile.RegisteredUser, user.getProfile());\n+\n+        List<UserGroup> ug = userGroupRepository.findAll(UserGroupSpecs.hasUserId(user.getId()));\n+        assertNotNull(ug);\n+        assertEquals(0, ug.size());\n+    }\n+\n+\n+    @Test\n+    @Transactional\n+    public void test_ldapAuthProvider() {\n+        UsernamePasswordAuthenticationToken userpass = new UsernamePasswordAuthenticationToken(\"dblasby@example.com\", \"blasby1\", null);\n+\n+        Authentication result = ldapAuthProvider.authenticate(userpass);\n+        assertNotNull(result);\n+        assertTrue(result.isAuthenticated());\n+    }\n+\n+    @Test(expected = BadCredentialsException.class)\n+    public void test_ldapAuthProvider_badPass() {\n+        UsernamePasswordAuthenticationToken userpass = new UsernamePasswordAuthenticationToken(\"dblasby@example.com\", \"BAD_PASSWORD\", null);\n+\n+        //will throw because the password is wrong\n+        Authentication result = ldapAuthProvider.authenticate(userpass);\n+    }\n+\n+\n+    //=========================================================================================\n+\n+    public final static String ldapSearchBase = \"dc=example,dc=com\";\n+\n+\n+    DirectoryService LDAPservice = null;\n+    LdapServer ldapServer = null;\n+\n+    public void setupLDAP() throws Exception {\n+        CreateLdapServer classLdapServerBuilder = this.getClass().getAnnotation(CreateLdapServer.class);\n+        CreateDS dsBuilder = this.getClass().getAnnotation(CreateDS.class);\n+        LDAPservice = DSAnnotationProcessor.createDS(dsBuilder);\n+        ApplyLdifFiles applyLdifFiles = this.getClass().getAnnotation(ApplyLdifFiles.class);\n+        DSAnnotationProcessor.injectLdifFiles(applyLdifFiles.clazz(), LDAPservice, applyLdifFiles.value());\n+\n+        CreateLdapServer createLdapServer = getClass().getAnnotation(CreateLdapServer.class);\n+        ldapServer = ServerAnnotationProcessor.instantiateLdapServer(createLdapServer, LDAPservice);\n+        ldapServer.start();\n+    }\n+\n+    public void shutdownLDAP() throws Exception {\n+        ldapServer.stop();\n+        LDAPservice.shutdown();\n+        FileUtils.deleteDirectory(LDAPservice.getInstanceLayout().getInstanceDirectory());\n+    }\n+\n+    @After\n+    public void after() throws Exception {\n+        shutdownLDAP();\n+    }\n+\n+    //gets the spring context\n+    @Before\n+    public void before() throws Exception {\n+        setupLDAP();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d78858a37e8ecbd0093a22f7f508da4e39b6aa"}, "originalPosition": 333}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee8619c87b0c765629275a2f925155184d385976", "author": {"user": null}, "url": "https://github.com/geonetwork/core-geonetwork/commit/ee8619c87b0c765629275a2f925155184d385976", "committedDate": "2020-08-06T19:47:08Z", "message": "changes from juan's review - mostly formating"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMzg5NDA2", "url": "https://github.com/geonetwork/core-geonetwork/pull/4878#pullrequestreview-463389406", "createdAt": "2020-08-07T15:07:29Z", "commit": {"oid": "ee8619c87b0c765629275a2f925155184d385976"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTowNzoyOVrOG9dgUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTowNzoyOVrOG9dgUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA5OTczMQ==", "bodyText": "Not sure this adds value :P Even if true ....", "url": "https://github.com/geonetwork/core-geonetwork/pull/4878#discussion_r467099731", "createdAt": "2020-08-07T15:07:29Z", "author": {"login": "jodygarnett"}, "path": "core/src/main/java/org/fao/geonet/kernel/security/ldap/README.md", "diffHunk": "@@ -1,7 +1,7 @@\n Using LDAPUserDetailsContextMapperWithProfileSearchEnhanced\n ===========================================================\n \n-I've modified `LDAPUserDetailsContextMapperWithProfileSearch` so it works in more situations, is much simpler, uses strategy objects, and has a good set of test cases.\n+`LDAPUserDetailsContextMapperWithProfileSearch` was modified so it works in more situations, is much simpler, uses strategy objects, and has a good set of test cases.\n \n The original `LDAPUserDetailsContextMapperWithProfileSearch` was extremely difficult to understand.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee8619c87b0c765629275a2f925155184d385976"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNDA3NzE0", "url": "https://github.com/geonetwork/core-geonetwork/pull/4878#pullrequestreview-463407714", "createdAt": "2020-08-07T15:32:39Z", "commit": {"oid": "ee8619c87b0c765629275a2f925155184d385976"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTozMjozOVrOG9eYaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTozMjozOVrOG9eYaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzExNDA4OA==", "bodyText": "This change seems to be the cause of the test failure, by by moving this to beforeclass and after class (rather than before and after test) the apache directory is still running, and using its own eccache.\nApparently each JVM can only have one eccache, and both hibernate and apache directory server want to make use of the technology.\nReference:\n\nCacheService", "url": "https://github.com/geonetwork/core-geonetwork/pull/4878#discussion_r467114088", "createdAt": "2020-08-07T15:32:39Z", "author": {"login": "jodygarnett"}, "path": "core/src/test/java/org/fao/geonet/kernel/security/ldap/LDAPUserDetailsContextMapperWithProfileSearchEnhancedTest.java", "diffHunk": "@@ -135,6 +133,29 @@\n     @Autowired\n     LDAPRoleConverterGroupNameParser ldapRoleConverterGroupNameParser;\n \n+\n+    //=------------------------------------------------------------------\n+\n+    @AfterClass\n+    public static void afterClass() throws Exception {\n+        shutdownLDAP();\n+    }\n+\n+    @BeforeClass\n+    public static void beforeClass() throws Exception {\n+        setupLDAP();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee8619c87b0c765629275a2f925155184d385976"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1b458a8d4b79c1778364f2d3f710615e21dcc9c", "author": {"user": null}, "url": "https://github.com/geonetwork/core-geonetwork/commit/d1b458a8d4b79c1778364f2d3f710615e21dcc9c", "committedDate": "2020-08-07T18:14:01Z", "message": "rollback changes for @BeforeClass and @AfterClass - its causing issues..."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dfdf69b664fe4d527d84c600391ed9ae8e54dc45", "author": {"user": {"login": "juanluisrp", "name": "Juan Luis Rodr\u00edguez Ponce"}}, "url": "https://github.com/geonetwork/core-geonetwork/commit/dfdf69b664fe4d527d84c600391ed9ae8e54dc45", "committedDate": "2020-08-07T18:01:56Z", "message": "Shutdown EHCache CacheManager after LDAP test\n\nAlso use apacheds-all:2.0.0-M24 again to avoid the JAR signature error."}, "afterCommit": {"oid": "d1b458a8d4b79c1778364f2d3f710615e21dcc9c", "author": {"user": null}, "url": "https://github.com/geonetwork/core-geonetwork/commit/d1b458a8d4b79c1778364f2d3f710615e21dcc9c", "committedDate": "2020-08-07T18:14:01Z", "message": "rollback changes for @BeforeClass and @AfterClass - its causing issues..."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNTYyMzcx", "url": "https://github.com/geonetwork/core-geonetwork/pull/4878#pullrequestreview-463562371", "createdAt": "2020-08-07T19:30:37Z", "commit": {"oid": "d1b458a8d4b79c1778364f2d3f710615e21dcc9c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1606, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}