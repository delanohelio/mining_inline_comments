{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwMjg3NTE5", "number": 5118, "title": "Add new feature for supporting CMIS as an external file store", "bodyText": "Add new file store for supporting CMIS supported application.\nhttps://en.wikipedia.org/wiki/Content_Management_Interoperability_Services\nBy adding support external content management systems it allows for the following benefits.\n\nSupport rich content and functionality of a content management services.\nCentral storage allowing better support for clustering (future version of GN)\nSimilar to cloud storage such as S3 however it does not require cloud services to run.\n\nSetup was tested using Open Text and ,  Alfresco.\nChanges in this PR\n\nAdd support for CMIS to store resources on the CMIS supported application\nUpdate resource dialog box to support versioning and management link (if enabled in configuration)\n\nUpdate the config-spring-geonetwork.xml configuration so that file store selection so that it can be done at runtime without requiring custom build.  This allow for the selection of the default file store (FileSystem), CMIS or S3.\n\nExample Alfresco\nAlfresco is the easiest to setup\n\nQuickly setup and Alfresco installation using Virtual Box and the following image.\nhttps://bitnami.com/stack/alfresco/virtual-machine\nCreate a user in alfresco that will be the owner of the content.\nCreate the CMIS_BASE_REPOSITORY_PATH (suggest: geonetwork) in alfresco and grant the user created above write access.\n\nNext you can set the configuration files or use env configuration.\nExample (configuration files)\n\nSet CMIS as the file store\nhttps://github.com/geonetwork/core-geonetwork/compare/master...ianwallen:cmis_support?expand=1#diff-89b263990ea6093c0c5e5d1269eb327e65959228d9da5d8676f4556ca55d1d5fR193-R204\nSet CMIS configuration (See config-cmis.xml)\n\nExample (using env variables)\nEnable CMIS store\n       GEONETWORK_STORE_TYPE=cmis\n\nCMIS configuration\n       CMIS_REPOSITORY_ID=-default-\n       CMIS_USERNAME=username\n       CMIS_PASSWORD=password\n       CMIS_SERVICES_BASE_URL=http://localhost:8080/alfresco\n       CMIS_BASE_REPOSITORY_PATH=geonetwork\n       CMIS_BINDING_TYPE=browser\n       CMIS_BROWSER_URL=/api/-default-/public/cmis/versions/1.1/browser\n\nTo see version number in File store\n       CMIS_VERSIONING_ENABLED=true\n\nTo see external resource management link in File store\nConfiguration option\n       CMIS_EXTERNAL_RESOURCE_MANAGEMENT_URL=http://localhost:8080/share/page/document-details?nodeRef=workspace://SpacesStore/{cmisobjectid}\n\nOptional external resource management configuration\n       CMIS_EXTERNAL_RESOURCE_MANAGEMENT_WINDOW_PARAMETERS=toolbar=0,width=600,height=600\n       CMIS_EXTERNAL_RESOURCE_MANAGEMENT_MODAL_ENABLED=true\n\nKnown issue\n\n\nWhen working with the workflow the working copy will only copy the last version of the document to the working copy so working copies will also start with version 1 even though the approved copy is at a higher version.  This may cause confusion.\nVersions could be copied as well however this could cause a large performance hit. (see the following https://stackoverflow.com/questions/48669716/cmis-alfresco-copy-all-versions-of-a-document)\nA new issue will be created to look into this issue after this PR is approved.\n\n\nAll logos are not loaded on initial load. Only the default gn logo is loaded.", "createdAt": "2020-10-26T20:27:34Z", "url": "https://github.com/geonetwork/core-geonetwork/pull/5118", "merged": true, "mergeCommit": {"oid": "25486c1cacb8583562cbea842b340aae88e1688b"}, "closed": true, "closedAt": "2021-01-04T10:11:09Z", "author": {"login": "ianwallen"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWaGSTAH2gAyNTEwMjg3NTE5Ojc0MmVmOTU1ZDFmMjdhNmQwMmM1ZmEyMTRhZjcyMDA0ZjM2YmJlYmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmxXU1gFqTU1Mzg1MjIxOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "742ef955d1f27a6d02c5fa214af72004f36bbebe", "author": {"user": {"login": "ianwallen", "name": "Ian"}}, "url": "https://github.com/geonetwork/core-geonetwork/commit/742ef955d1f27a6d02c5fa214af72004f36bbebe", "committedDate": "2020-10-26T20:07:58Z", "message": "Add new feature for supporting CMIS as an external file storage of resources."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e72e45dde0be8b74c27d3d5dcbb1e4a4307e615e", "author": {"user": {"login": "ianwallen", "name": "Ian"}}, "url": "https://github.com/geonetwork/core-geonetwork/commit/e72e45dde0be8b74c27d3d5dcbb1e4a4307e615e", "committedDate": "2020-10-30T11:11:14Z", "message": "Fix some issues on UNIX env where the first \"/\" from the key was removed causing errors."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NDY0MTEz", "url": "https://github.com/geonetwork/core-geonetwork/pull/5118#pullrequestreview-524464113", "createdAt": "2020-11-05T16:52:37Z", "commit": {"oid": "e72e45dde0be8b74c27d3d5dcbb1e4a4307e615e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNjo1MjozN1rOHuMnDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNjo1MjozN1rOHuMnDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIwMzE0OQ==", "bodyText": "manage id root pom dependency management?", "url": "https://github.com/geonetwork/core-geonetwork/pull/5118#discussion_r518203149", "createdAt": "2020-11-05T16:52:37Z", "author": {"login": "jodygarnett"}, "path": "core/pom.xml", "diffHunk": "@@ -355,6 +355,24 @@\n       <version>${project.version}</version>\n     </dependency>\n \n+    <dependency>\n+      <groupId>org.apache.chemistry.opencmis</groupId>\n+      <artifactId>chemistry-opencmis-client-api</artifactId>\n+      <version>1.1.0</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e72e45dde0be8b74c27d3d5dcbb1e4a4307e615e"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b2543ad409e07bc0c9dd2033e60d3decdd2335b", "author": {"user": {"login": "ianwallen", "name": "Ian"}}, "url": "https://github.com/geonetwork/core-geonetwork/commit/5b2543ad409e07bc0c9dd2033e60d3decdd2335b", "committedDate": "2020-11-13T21:10:33Z", "message": "Did some performance improvements to help reduce the number of calls to the api Fixed addFiles function that was not working"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f8bee7a162f7be5e41ae2595d2fa1004fc6dda5", "author": {"user": {"login": "ianwallen", "name": "Ian"}}, "url": "https://github.com/geonetwork/core-geonetwork/commit/5f8bee7a162f7be5e41ae2595d2fa1004fc6dda5", "committedDate": "2020-11-17T21:22:31Z", "message": "Add better support for deriving metadata dir using the configurable MetadataDataDir()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48d097638a137b8a2c9f0d5a4223714afc2c4633", "author": {"user": {"login": "ianwallen", "name": "Ian"}}, "url": "https://github.com/geonetwork/core-geonetwork/commit/48d097638a137b8a2c9f0d5a4223714afc2c4633", "committedDate": "2020-11-19T18:23:03Z", "message": "Fix permission bug when downloading attachment listing."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MjA4Mzgy", "url": "https://github.com/geonetwork/core-geonetwork/pull/5118#pullrequestreview-535208382", "createdAt": "2020-11-20T08:25:47Z", "commit": {"oid": "48d097638a137b8a2c9f0d5a4223714afc2c4633"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwODoyNTo0N1rOH3FOyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOToyOTowMlrOH3Hy8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUxOTQzMw==", "bodyText": "Is this property not relevant for Alfresco?", "url": "https://github.com/geonetwork/core-geonetwork/pull/5118#discussion_r527519433", "createdAt": "2020-11-20T08:25:47Z", "author": {"login": "josegar74"}, "path": "core/src/main/resources/config-store/config-cmis.xml", "diffHunk": "@@ -0,0 +1,84 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright (C) 2001-2016 Food and Agriculture Organization of the\n+  ~ United Nations (FAO-UN), United Nations World Food Programme (WFP)\n+  ~ and United Nations Environment Programme (UNEP)\n+  ~\n+  ~ This program is free software; you can redistribute it and/or modify\n+  ~ it under the terms of the GNU General Public License as published by\n+  ~ the Free Software Foundation; either version 2 of the License, or (at\n+  ~ your option) any later version.\n+  ~\n+  ~ This program is distributed in the hope that it will be useful, but\n+  ~ WITHOUT ANY WARRANTY; without even the implied warranty of\n+  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+  ~ General Public License for more details.\n+  ~\n+  ~ You should have received a copy of the GNU General Public License\n+  ~ along with this program; if not, write to the Free Software\n+  ~ Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA\n+  ~\n+  ~ Contact: Jeroen Ticheler - FAO - Viale delle Terme di Caracalla 2,\n+  ~ Rome - Italy. email: geonetwork@osgeo.org\n+  -->\n+\n+<beans\n+        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+        xmlns=\"http://www.springframework.org/schema/beans\"\n+        xsi:schemaLocation=\"\n+\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n+    \">\n+\n+<!--   If you want data stored in cmis compliant application, use the following: -->\n+<!-- Alfrsco sample -->\n+<!--    <bean id=\"cmisconfiguration\" class=\"org.fao.geonet.resources.CMISConfiguration\">-->\n+<!--      <property name=\"baseRepositoryPath\" value=\"geonetwork\"/>-->\n+<!--      <property name=\"servicesBaseUrl\" value=\"http://localhost:8080/alfresco\"/>-->\n+<!--      <property name=\"bindingType\" value=\"browser\"/>-->\n+<!--      <property name=\"browserUrl\" value=\"/api/-default-/public/cmis/versions/1.1/browser\"/>-->\n+<!--      <property name=\"username\" value=\"username\"/>-->\n+<!--      <property name=\"password\" value=\"password\"/>      -->\n+<!--      &lt;!&ndash;property name=\"bindingType\" value=\"atompub\"/>-->\n+<!--      <property name=\"atompubUrl\" value=\"/api/-default-/public/cmis/versions/1.1/atom\"/&ndash;&gt;-->\n+<!--      &lt;!&ndash;property name=\"bindingType\" value=\"webservices\"/>-->\n+<!--      <property name=\"webservicesBaseUrl\" value=\"/cmisws\"/&ndash;&gt;-->\n+<!--    </bean>-->\n+\n+<!-- Open Text sample -->\n+<!--<bean id=\"cmisconfiguration\" class=\"org.fao.geonet.resources.CMISConfiguration\">-->\n+<!--    <property name=\"repositoryName\" value=\"Enterprise\"/>-->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48d097638a137b8a2c9f0d5a4223714afc2c4633"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUzNjcxMA==", "bodyText": "Seem not used, to remove", "url": "https://github.com/geonetwork/core-geonetwork/pull/5118#discussion_r527536710", "createdAt": "2020-11-20T08:57:38Z", "author": {"login": "josegar74"}, "path": "core/src/main/java/org/fao/geonet/api/records/attachments/CMISStore.java", "diffHunk": "@@ -0,0 +1,618 @@\n+/*\n+ * =============================================================================\n+ * ===\tCopyright (C) 2001-2016 Food and Agriculture Organization of the\n+ * ===\tUnited Nations (FAO-UN), United Nations World Food Programme (WFP)\n+ * ===\tand United Nations Environment Programme (UNEP)\n+ * ===\n+ * ===\tThis program is free software; you can redistribute it and/or modify\n+ * ===\tit under the terms of the GNU General Public License as published by\n+ * ===\tthe Free Software Foundation; either version 2 of the License, or (at\n+ * ===\tyour option) any later version.\n+ * ===\n+ * ===\tThis program is distributed in the hope that it will be useful, but\n+ * ===\tWITHOUT ANY WARRANTY; without even the implied warranty of\n+ * ===\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * ===\tGeneral Public License for more details.\n+ * ===\n+ * ===\tYou should have received a copy of the GNU General Public License\n+ * ===\talong with this program; if not, write to the Free Software\n+ * ===\tFoundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA\n+ * ===\n+ * ===\tContact: Jeroen Ticheler - FAO - Viale delle Terme di Caracalla 2,\n+ * ===\tRome - Italy. email: geonetwork@osgeo.org\n+ * ==============================================================================\n+ */\n+package org.fao.geonet.api.records.attachments;\n+\n+\n+import jeeves.server.context.ServiceContext;\n+import org.apache.chemistry.opencmis.client.api.*;\n+import org.apache.chemistry.opencmis.commons.PropertyIds;\n+import org.apache.chemistry.opencmis.commons.data.ContentStream;\n+import org.apache.chemistry.opencmis.commons.enums.UnfileObject;\n+import org.apache.chemistry.opencmis.commons.enums.VersioningState;\n+import org.apache.chemistry.opencmis.commons.exceptions.CmisConstraintException;\n+import org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException;\n+import org.apache.chemistry.opencmis.commons.exceptions.CmisPermissionDeniedException;\n+import org.apache.log4j.Logger;\n+import org.fao.geonet.ApplicationContextHolder;\n+import org.fao.geonet.api.exception.NotAllowedException;\n+import org.fao.geonet.api.exception.ResourceNotFoundException;\n+import org.fao.geonet.constants.Geonet;\n+import org.fao.geonet.domain.MetadataResource;\n+import org.fao.geonet.domain.MetadataResourceVisibility;\n+import org.fao.geonet.kernel.GeonetworkDataDirectory;\n+import org.fao.geonet.kernel.setting.SettingManager;\n+import org.fao.geonet.languages.IsoLanguagesMapper;\n+import org.fao.geonet.lib.Lib;\n+import org.fao.geonet.resources.CMISConfiguration;\n+import org.fao.geonet.utils.Log;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.util.StringUtils;\n+\n+import java.io.*;\n+import java.nio.file.*;\n+import java.util.*;\n+import javax.annotation.Nullable;\n+\n+public class CMISStore extends AbstractStore {\n+\n+    private Path baseMetadataDir = null;\n+\n+    @Autowired\n+    CMISConfiguration CMISConfiguration;\n+\n+    @Override\n+    public List<MetadataResource> getResources(final ServiceContext context, final String metadataUuid,\n+                                               final MetadataResourceVisibility visibility, String filter, Boolean approved) throws Exception {\n+        final int metadataId = canDownload(context, metadataUuid, visibility, approved);\n+        final SettingManager settingManager = context.getBean(SettingManager.class);\n+\n+        final String resourceTypeDir = getMetadataDir(context, metadataId) + CMISConfiguration.getFolderDelimiter() + visibility.toString();\n+\n+        List<MetadataResource> resourceList = new ArrayList<>();\n+        if (filter == null) {\n+            filter = FilesystemStore.DEFAULT_FILTER;\n+        }\n+\n+        PathMatcher matcher =\n+                FileSystems.getDefault().getPathMatcher(\"glob:\" + filter);\n+\n+        OperationContext operationContext = CMISConfiguration.getClient().createOperationContext();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48d097638a137b8a2c9f0d5a4223714afc2c4633"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU0MTkxNw==", "bodyText": "Review long lines like this one, to add breaklines.", "url": "https://github.com/geonetwork/core-geonetwork/pull/5118#discussion_r527541917", "createdAt": "2020-11-20T09:03:26Z", "author": {"login": "josegar74"}, "path": "core/src/main/java/org/fao/geonet/api/records/attachments/CMISStore.java", "diffHunk": "@@ -0,0 +1,618 @@\n+/*\n+ * =============================================================================\n+ * ===\tCopyright (C) 2001-2016 Food and Agriculture Organization of the\n+ * ===\tUnited Nations (FAO-UN), United Nations World Food Programme (WFP)\n+ * ===\tand United Nations Environment Programme (UNEP)\n+ * ===\n+ * ===\tThis program is free software; you can redistribute it and/or modify\n+ * ===\tit under the terms of the GNU General Public License as published by\n+ * ===\tthe Free Software Foundation; either version 2 of the License, or (at\n+ * ===\tyour option) any later version.\n+ * ===\n+ * ===\tThis program is distributed in the hope that it will be useful, but\n+ * ===\tWITHOUT ANY WARRANTY; without even the implied warranty of\n+ * ===\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * ===\tGeneral Public License for more details.\n+ * ===\n+ * ===\tYou should have received a copy of the GNU General Public License\n+ * ===\talong with this program; if not, write to the Free Software\n+ * ===\tFoundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA\n+ * ===\n+ * ===\tContact: Jeroen Ticheler - FAO - Viale delle Terme di Caracalla 2,\n+ * ===\tRome - Italy. email: geonetwork@osgeo.org\n+ * ==============================================================================\n+ */\n+package org.fao.geonet.api.records.attachments;\n+\n+\n+import jeeves.server.context.ServiceContext;\n+import org.apache.chemistry.opencmis.client.api.*;\n+import org.apache.chemistry.opencmis.commons.PropertyIds;\n+import org.apache.chemistry.opencmis.commons.data.ContentStream;\n+import org.apache.chemistry.opencmis.commons.enums.UnfileObject;\n+import org.apache.chemistry.opencmis.commons.enums.VersioningState;\n+import org.apache.chemistry.opencmis.commons.exceptions.CmisConstraintException;\n+import org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException;\n+import org.apache.chemistry.opencmis.commons.exceptions.CmisPermissionDeniedException;\n+import org.apache.log4j.Logger;\n+import org.fao.geonet.ApplicationContextHolder;\n+import org.fao.geonet.api.exception.NotAllowedException;\n+import org.fao.geonet.api.exception.ResourceNotFoundException;\n+import org.fao.geonet.constants.Geonet;\n+import org.fao.geonet.domain.MetadataResource;\n+import org.fao.geonet.domain.MetadataResourceVisibility;\n+import org.fao.geonet.kernel.GeonetworkDataDirectory;\n+import org.fao.geonet.kernel.setting.SettingManager;\n+import org.fao.geonet.languages.IsoLanguagesMapper;\n+import org.fao.geonet.lib.Lib;\n+import org.fao.geonet.resources.CMISConfiguration;\n+import org.fao.geonet.utils.Log;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.util.StringUtils;\n+\n+import java.io.*;\n+import java.nio.file.*;\n+import java.util.*;\n+import javax.annotation.Nullable;\n+\n+public class CMISStore extends AbstractStore {\n+\n+    private Path baseMetadataDir = null;\n+\n+    @Autowired\n+    CMISConfiguration CMISConfiguration;\n+\n+    @Override\n+    public List<MetadataResource> getResources(final ServiceContext context, final String metadataUuid,\n+                                               final MetadataResourceVisibility visibility, String filter, Boolean approved) throws Exception {\n+        final int metadataId = canDownload(context, metadataUuid, visibility, approved);\n+        final SettingManager settingManager = context.getBean(SettingManager.class);\n+\n+        final String resourceTypeDir = getMetadataDir(context, metadataId) + CMISConfiguration.getFolderDelimiter() + visibility.toString();\n+\n+        List<MetadataResource> resourceList = new ArrayList<>();\n+        if (filter == null) {\n+            filter = FilesystemStore.DEFAULT_FILTER;\n+        }\n+\n+        PathMatcher matcher =\n+                FileSystems.getDefault().getPathMatcher(\"glob:\" + filter);\n+\n+        OperationContext operationContext = CMISConfiguration.getClient().createOperationContext();\n+\n+        try {\n+            Folder parentFolder = (Folder) CMISConfiguration.getClient().getObjectByPath(resourceTypeDir);\n+\n+            Map<String, Document> documentMap = getCmisObjectMap(parentFolder, null);\n+            for (Map.Entry<String, Document> entry : documentMap.entrySet()) {\n+                Document object = entry.getValue();\n+                String cmisFilePath = entry.getKey();\n+                // Only add to the list if it is a document and it matches the filter.\n+                if (object instanceof Document) {\n+                    Path keyPath = new File(cmisFilePath).toPath().getFileName();\n+                    if (matcher.matches(keyPath)) {\n+                        final String filename = getFilename(cmisFilePath);\n+                        MetadataResource resource = createResourceDescription(context, settingManager, metadataUuid, visibility, filename, object.getContentStreamLength(),\n+                                object.getLastModificationDate().getTime(), object.getVersionLabel(), metadataId);\n+                        resourceList.add(resource);\n+                    }\n+                }\n+            }\n+        } catch (CmisObjectNotFoundException e) {\n+            // ignore as it means that there is not data to list.\n+        }\n+\n+\n+        resourceList.sort(MetadataResourceVisibility.sortByFileName);\n+\n+        return resourceList;\n+    }\n+\n+    private MetadataResource createResourceDescription(final ServiceContext context, final SettingManager settingManager, final String metadataUuid,\n+                                                       final MetadataResourceVisibility visibility, final String resourceId, long size, Date lastModification, String version, int metadataId) {\n+        String filename = getFilename(metadataUuid, resourceId);\n+\n+        String versionValue = null;\n+        if (CMISConfiguration.isVersioningEnabled()) {\n+            versionValue = version;\n+        }\n+\n+        MetadataResource.ExternalResourceManagementProperties externalResourceManagementProperties = getExternalResourceManagementProperties(context, metadataId, metadataUuid, visibility, resourceId, filename, version);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48d097638a137b8a2c9f0d5a4223714afc2c4633"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU1MzI3Ng==", "bodyText": "Should be relevant for null and throw an Exception?", "url": "https://github.com/geonetwork/core-geonetwork/pull/5118#discussion_r527553276", "createdAt": "2020-11-20T09:15:22Z", "author": {"login": "josegar74"}, "path": "core/src/main/java/org/fao/geonet/resources/CMISConfiguration.java", "diffHunk": "@@ -0,0 +1,443 @@\n+package org.fao.geonet.resources;\n+\n+import org.apache.chemistry.opencmis.client.api.Repository;\n+import org.apache.chemistry.opencmis.client.api.Session;\n+import org.apache.chemistry.opencmis.client.api.SessionFactory;\n+import org.apache.chemistry.opencmis.client.runtime.SessionFactoryImpl;\n+import org.apache.chemistry.opencmis.commons.SessionParameter;\n+import org.apache.chemistry.opencmis.commons.enums.BindingType;\n+import org.apache.commons.lang.BooleanUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.fao.geonet.constants.Geonet;\n+import org.fao.geonet.utils.Log;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.PostConstruct;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Configuration parameters are based on the following\n+ * https://chemistry.apache.org/java/developing/dev-session-parameters.html\n+ */\n+public class CMISConfiguration {\n+    private Session client = null;\n+\n+    private final String CMIS_FOLDER_DELIMITER = \"/\"; // Specs indicate that \"/\" is the folder delimiter/separator - not sure if other delimiter can be used?.\n+    private final String CMIS_DEFAULT_WEBSERVICES_ACL_SERVICE = \"/services/ACLService?wsdl\";\n+    private final String CMIS_DEFAULT_WEBSERVICES_DISCOVERY_SERVICE = \"/services/DiscoveryService?wsdl\";\n+    private final String CMIS_DEFAULT_WEBSERVICES_MULTIFILING_SERVICE = \"/services/MultiFilingService?wsdl\";\n+    private final String CMIS_DEFAULT_WEBSERVICES_NAVIGATION_SERVICE = \"/services/NavigationService?wsdl\";\n+    private final String CMIS_DEFAULT_WEBSERVICES_OBJECT_SERVICE = \"/services/ObjectService?wsdl\";\n+    private final String CMIS_DEFAULT_WEBSERVICES_POLICY_SERVICE = \"/services/PolicyService?wsdl\";\n+    private final String CMIS_DEFAULT_WEBSERVICES_RELATIONSHIP_SERVICE = \"/services/RelationshipService?wsdl\";\n+    private final String CMIS_DEFAULT_WEBSERVICES_REPOSITORY_SERVICE = \"/services/RepositoryService?wsdl\";\n+    private final String CMIS_DEFAULT_WEBSERVICES_VERSIONING_SERVICE = \"/services/VersioningService?wsdl\";\n+    private final String CMIS_DEFAULT_WEBSERVICES_BASE_URL_SERVICE = \"/cmis\";\n+    private final String CMIS_DEFAULT_BROWSER_URL_SERVICE = \"/browser\";\n+    private final String CMIS_DEFAULT_ATOMPUB_URL_SERVICE = \"/atom\";\n+\n+    private final String CMIS_DEFAULT_EXTERNAL_RESOURCE_MANAGEMENT_WINDOW_PARAMETERS = \"toolbar=0,width=600,height=600\";\n+    private final Boolean CMIS_DEFAULT_EXTERNAL_RESOURCE_MANAGEMENT_MODAL_ENABLED = true;\n+    private final Boolean CMIS_DEFAULT_VERSIONING_ENABLED = false;\n+\n+    private String servicesBaseUrl = System.getenv(\"CMIS_SERVICES_BASE_URL\");\n+    private String bindingType = System.getenv(\"CMIS_BINDING_TYPE\");\n+    private String baseRepositoryPath = System.getenv(\"CMIS_BASE_REPOSITORY_PATH\");\n+    private String username = System.getenv(\"CMIS_USERNAME\");\n+    private String password = System.getenv(\"CMIS_PASSWORD\");\n+    private String repositoryId = System.getenv(\"CMIS_REPOSITORY_ID\");\n+    private String repositoryName = System.getenv(\"CMIS_REPOSITORY_NAME\");\n+    /**\n+     * Url used for managing enhanced resource properties related to the metadata.\n+     */\n+    private String externalResourceManagementUrl = System.getenv(\"CMIS_EXTERNAL_RESOURCE_MANAGEMENT_URL\");\n+    private String externalResourceManagementWindowParameters = System.getenv(\"CMIS_EXTERNAL_RESOURCE_MANAGEMENT_WINDOW_PARAMETERS\");\n+    private Boolean externalResourceManagementModalEnabled = BooleanUtils.toBooleanObject(System.getenv(\"CMIS_EXTERNAL_RESOURCE_MANAGEMENT_MODAL_ENABLED\"));\n+    /*\n+     * Enable option to add versioning in the link to the resource.\n+     */\n+    private Boolean versioningEnabled = BooleanUtils.toBooleanObject(System.getenv(\"CMIS_VERSIONING_ENABLED\"));\n+\n+    private String webservicesRepositoryService = System.getenv(\"CMIS_WEBSERVICES_REPOSITORY_SERVICE\");\n+    private String webservicesNavigationService = System.getenv(\"CMIS_WEBSERVICES_NAVIGATION_SERVICE\");\n+    private String webservicesObjectService = System.getenv(\"CMIS_WEBSERVICES_OBJECT_SERVICE\");\n+    private String webservicesVersioningService = System.getenv(\"CMIS_WEBSERVICES_VERSIONING_SERVICE\");\n+    private String webservicesDiscoveryService = System.getenv(\"CMIS_WEBSERVICES_DISCOVERY_SERVICE\");\n+    private String webservicesRelationshipService = System.getenv(\"CMIS_WEBSERVICES_RELATIONSHIP_SERVICE\");\n+    private String webservicesMultifilingService = System.getenv(\"CMIS_WEBSERVICES_MULTIFILING_SERVICE\");\n+    private String webservicesPolicyService = System.getenv(\"CMIS_WEBSERVICES_POLICY_SERVICE\");\n+    private String webservicesAclService = System.getenv(\"CMIS_WEBSERVICES_ACL_SERVICE\");\n+    private String webservicesMemoryThreshold = System.getenv(\"CMIS_WEBSERVICES_MEMORY_THRESHOLD\");\n+    private String webservicesBaseUrl = System.getenv(\"CMIS_WEBSERVICES_BASE_URL\");\n+\n+    private String browserUrl = System.getenv(\"CMIS_BROWSER_URL\");\n+\n+    private String atompubUrl = System.getenv(\"CMIS_ATOMPUB_URL\");\n+\n+    @Nonnull\n+    public String getServicesBaseUrl() {\n+        return servicesBaseUrl;\n+    }\n+\n+    public void setServicesBaseUrl(String servicesBaseUrl) {\n+        this.servicesBaseUrl = servicesBaseUrl;\n+    }\n+\n+    public void setUsername(String username) {\n+        this.username = username;\n+    }\n+\n+    public void setPassword(String password) {\n+        this.password = password;\n+    }\n+\n+    @Nonnull\n+    public String getBindingType() {\n+        return this.bindingType;\n+    }\n+\n+    public void setBindingType(String bindingTypeString) {\n+        if (StringUtils.isEmpty(bindingTypeString)) {\n+            this.bindingType = null;\n+        } else {\n+            this.bindingType = BindingType.fromValue(bindingTypeString).value();\n+        }\n+    }\n+\n+    @Nonnull\n+    private BindingType getBindingTypeObject() {\n+        return BindingType.fromValue(bindingType);\n+    }\n+\n+    private void setBindingTypeObject(BindingType bindingType) {\n+        this.bindingType = bindingType.value();\n+    }\n+\n+    public String getBaseRepositoryPath() {\n+        return baseRepositoryPath;\n+    }\n+\n+    public void setBaseRepositoryPath(String baseRepositoryPath) {\n+        this.baseRepositoryPath = baseRepositoryPath;\n+    }\n+\n+    @Nonnull\n+    public String getRepositoryId() {\n+        return repositoryId;\n+    }\n+\n+    public void setRepositoryId(String repositoryId) {\n+        this.repositoryId = repositoryId;\n+    }\n+\n+    @Nonnull\n+    public String getRepositoryName() {\n+        return repositoryName;\n+    }\n+\n+    public void setRepositoryName(String repositoryName) {\n+        this.repositoryName = repositoryName;\n+    }\n+\n+    @Nonnull\n+    public String getExternalResourceManagementUrl() {\n+        return externalResourceManagementUrl;\n+    }\n+\n+    public void setExternalResourceManagementUrl(String externalResourceManagementUrl) {\n+        this.externalResourceManagementUrl = externalResourceManagementUrl;\n+    }\n+\n+    @Nonnull\n+    public String getExternalResourceManagementWindowParameters() {\n+        if (externalResourceManagementWindowParameters == null) {\n+            return CMIS_DEFAULT_EXTERNAL_RESOURCE_MANAGEMENT_WINDOW_PARAMETERS;\n+        } else {\n+            return externalResourceManagementWindowParameters;\n+        }\n+    }\n+\n+    public void setExternalResourceManagementWindowParameters(String externalResourceManagementWindowParameters) {\n+        this.externalResourceManagementWindowParameters = externalResourceManagementWindowParameters;\n+    }\n+\n+    @Nonnull\n+    public Boolean isExternalResourceManagementModal() {\n+        if (externalResourceManagementModalEnabled == null) {\n+            return CMIS_DEFAULT_EXTERNAL_RESOURCE_MANAGEMENT_MODAL_ENABLED;\n+        } else {\n+            return externalResourceManagementModalEnabled;\n+        }\n+    }\n+\n+    public void setExternalResourceManagementModal(Boolean externalResourceManagementModalEnabled) {\n+        this.externalResourceManagementModalEnabled = externalResourceManagementModalEnabled;\n+    }\n+\n+    public void setExternalResourceManagementModalEnabled(String externalResourceManagementModalEnabled) {\n+        this.externalResourceManagementModalEnabled = BooleanUtils.toBooleanObject(externalResourceManagementModalEnabled);;\n+    }\n+\n+    @Nonnull\n+    public Boolean isVersioningEnabled() {\n+        if (versioningEnabled == null) {\n+            \n+            return CMIS_DEFAULT_VERSIONING_ENABLED;\n+        } else {\n+            return versioningEnabled;\n+        }\n+    }\n+\n+    public void setVersioningEnabled(Boolean versioningEnabled) {\n+        this.versioningEnabled = versioningEnabled;\n+    }\n+\n+    public void setVersioningEnabled(String versioningEnabled) {\n+        this.versioningEnabled = BooleanUtils.toBooleanObject(versioningEnabled);;\n+    }\n+\n+    @Nonnull\n+    public String getWebservicesRepositoryService() {\n+        return getServiceUrl(getWebservicesBaseUrl(), webservicesRepositoryService, CMIS_DEFAULT_WEBSERVICES_REPOSITORY_SERVICE);\n+    }\n+\n+    public void setWebservicesRepositoryService(String webservicesRepositoryService) {\n+        this.webservicesRepositoryService = webservicesRepositoryService;\n+    }\n+\n+    @Nonnull\n+    public String getWebservicesNavigationService() {\n+        return getServiceUrl(getWebservicesBaseUrl(), webservicesNavigationService, CMIS_DEFAULT_WEBSERVICES_NAVIGATION_SERVICE);\n+    }\n+\n+    public void setWebservicesNavigationService(String webservicesNavigationService) {\n+        this.webservicesNavigationService = webservicesNavigationService;\n+    }\n+\n+    @Nonnull\n+    public String getWebservicesObjectService() {\n+        return getServiceUrl(getWebservicesBaseUrl(), webservicesObjectService, CMIS_DEFAULT_WEBSERVICES_OBJECT_SERVICE);\n+    }\n+\n+    public void setWebservicesObjectService(String webservicesObjectService) {\n+        this.webservicesObjectService = webservicesObjectService;\n+    }\n+\n+    @Nonnull\n+    public String getWebservicesVersioningService() {\n+        return getServiceUrl(getWebservicesBaseUrl(), webservicesVersioningService, CMIS_DEFAULT_WEBSERVICES_VERSIONING_SERVICE);\n+    }\n+\n+    public void setWebservicesVersioningService(String webservicesVersioningService) {\n+        this.webservicesVersioningService = webservicesVersioningService;\n+    }\n+\n+    @Nonnull\n+    public String getWebservicesDiscoveryService() {\n+        return getServiceUrl(getWebservicesBaseUrl(), webservicesDiscoveryService, CMIS_DEFAULT_WEBSERVICES_DISCOVERY_SERVICE);\n+    }\n+\n+    public void setWebservicesDiscoveryService(String webservicesDiscoveryService) {\n+        this.webservicesDiscoveryService = webservicesDiscoveryService;\n+    }\n+\n+    @Nonnull\n+    public String getWebservicesRelationshipService() {\n+        return getServiceUrl(getWebservicesBaseUrl(), webservicesRelationshipService, CMIS_DEFAULT_WEBSERVICES_RELATIONSHIP_SERVICE);\n+    }\n+\n+    public void setWebservicesRelationshipService(String webservicesRelationshipService) {\n+        this.webservicesRelationshipService = webservicesRelationshipService;\n+    }\n+\n+    @Nonnull\n+    public String getWebservicesMultifilingService() {\n+        return getServiceUrl(getWebservicesBaseUrl(), webservicesMultifilingService, CMIS_DEFAULT_WEBSERVICES_MULTIFILING_SERVICE);\n+    }\n+\n+    public void setWebservicesMultifilingService(String webservicesMultifilingService) {\n+        this.webservicesMultifilingService = webservicesMultifilingService;\n+    }\n+\n+    @Nonnull\n+    public String getWebservicesPolicyService() {\n+        return getServiceUrl(getWebservicesBaseUrl(), webservicesPolicyService, CMIS_DEFAULT_WEBSERVICES_POLICY_SERVICE);\n+    }\n+\n+    public void setWebservicesPolicyService(String webservicesPolicyService) {\n+        this.webservicesPolicyService = webservicesPolicyService;\n+    }\n+\n+    @Nonnull\n+    public String getWebservicesAclService() {\n+        return getServiceUrl(getWebservicesBaseUrl(), webservicesAclService, CMIS_DEFAULT_WEBSERVICES_ACL_SERVICE);\n+    }\n+\n+    public void setWebservicesAclService(String webservicesAclService) {\n+        this.webservicesAclService = webservicesAclService;\n+    }\n+\n+    @Nonnull\n+    public String getWebservicesMemoryThreshold() {\n+        return webservicesMemoryThreshold;\n+    }\n+\n+    public void setWebservicesMemoryThreshold(String webservicesMemoryThreshold) {\n+        this.webservicesMemoryThreshold = webservicesMemoryThreshold;\n+    }\n+\n+    @Nonnull\n+    public String getWebservicesBaseUrl() {\n+        return getServiceUrl(servicesBaseUrl, webservicesBaseUrl, CMIS_DEFAULT_WEBSERVICES_BASE_URL_SERVICE);\n+    }\n+\n+    public void setWebservicesBaseUrl(String webservicesBaseUrl) {\n+        this.webservicesBaseUrl = webservicesBaseUrl;\n+    }\n+\n+    @Nonnull\n+    public String getBrowserUrl() {\n+        return getServiceUrl(servicesBaseUrl, browserUrl, CMIS_DEFAULT_BROWSER_URL_SERVICE);\n+    }\n+\n+    public void setBrowserUrl(String browserUrl) {\n+        this.browserUrl = browserUrl;\n+    }\n+\n+    @Nonnull\n+    public String getAtompubUrl() {\n+        return getServiceUrl(servicesBaseUrl, atompubUrl, CMIS_DEFAULT_ATOMPUB_URL_SERVICE);\n+    }\n+\n+    public void setAtompubUrl(String atompubUrl) {\n+        this.atompubUrl = atompubUrl;\n+    }\n+\n+    @PostConstruct\n+    public void init() {\n+        // default factory implementation\n+        Map<String, String> parameters = new HashMap<String, String>();\n+\n+        this.baseRepositoryPath = baseRepositoryPath;\n+        if (this.baseRepositoryPath == null) {\n+            this.baseRepositoryPath = \"\";\n+        }\n+\n+        // Base path should end with delimiter.\n+        if (this.baseRepositoryPath.endsWith(CMIS_FOLDER_DELIMITER)) {\n+            this.baseRepositoryPath = this.baseRepositoryPath.substring(1);\n+        }\n+\n+        // Base path should start with delimiter (unless it is the root for which it would remain as an empty string).\n+        if (baseRepositoryPath.length() > 1 && !baseRepositoryPath.startsWith(CMIS_FOLDER_DELIMITER)) {\n+            this.baseRepositoryPath = CMIS_FOLDER_DELIMITER + baseRepositoryPath;\n+        }\n+\n+        if (username != null) {\n+            // user credentials\n+            parameters.put(SessionParameter.USER, username);\n+            parameters.put(SessionParameter.PASSWORD, password);\n+\n+            username = null;\n+            password = null;\n+        }\n+\n+        // connection settings\n+        if (getBindingTypeObject() == null) {\n+            throw new IllegalArgumentException(\"CMIS Binding type must be supplied\");\n+        }\n+\n+        String repositoryUrl;\n+        switch (getBindingTypeObject()) {\n+            case WEBSERVICES:\n+                parameters.put(SessionParameter.WEBSERVICES_ACL_SERVICE, getWebservicesAclService());\n+                parameters.put(SessionParameter.WEBSERVICES_DISCOVERY_SERVICE, getWebservicesDiscoveryService());\n+                parameters.put(SessionParameter.WEBSERVICES_MULTIFILING_SERVICE, getWebservicesMultifilingService());\n+                parameters.put(SessionParameter.WEBSERVICES_NAVIGATION_SERVICE, getWebservicesNavigationService());\n+                parameters.put(SessionParameter.WEBSERVICES_OBJECT_SERVICE, getWebservicesObjectService());\n+                parameters.put(SessionParameter.WEBSERVICES_POLICY_SERVICE, getWebservicesPolicyService());\n+                parameters.put(SessionParameter.WEBSERVICES_RELATIONSHIP_SERVICE, getWebservicesRelationshipService());\n+                parameters.put(SessionParameter.WEBSERVICES_REPOSITORY_SERVICE, getWebservicesRepositoryService());\n+                parameters.put(SessionParameter.WEBSERVICES_VERSIONING_SERVICE, getWebservicesVersioningService());\n+                repositoryUrl=getWebservicesBaseUrl();\n+                break;\n+            case BROWSER:\n+                parameters.put(SessionParameter.BROWSER_URL, getBrowserUrl());\n+                repositoryUrl=getBrowserUrl();\n+                break;\n+            case ATOMPUB:\n+                parameters.put(SessionParameter.ATOMPUB_URL, getAtompubUrl());\n+                repositoryUrl=getAtompubUrl();\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Unsupported CMIS Binding type '\" + getBindingTypeObject().value() + \"'.\");\n+        }\n+        parameters.put(SessionParameter.BINDING_TYPE, getBindingTypeObject().value());\n+\n+        SessionFactory factory = SessionFactoryImpl.newInstance();\n+\n+        if (repositoryId == null) {\n+            if (repositoryName != null) {\n+                // Try to find the repository by name.\n+                for (Repository repository:factory.getRepositories(parameters)) {\n+                    if (repository.getName().equalsIgnoreCase(repositoryName)) {\n+                        this.repositoryId = repository.getId();\n+                        break;\n+                    }\n+                }\n+            } else {\n+                // If repository id is not set then lets get the first repository.\n+                // Some product only have one repository.\n+                Repository repository = factory.getRepositories(parameters).get(0);\n+                this.repositoryId = repository.getId();\n+                this.repositoryName = repository.getName();\n+            }\n+        } else {\n+            // Try to find the repository name for the id that we have specified..\n+            for (Repository repository : factory.getRepositories(parameters)) {\n+                if (repository.getId().equalsIgnoreCase(this.repositoryId)) {\n+                    this.repositoryName = repository.getName();\n+                    break;\n+                }\n+            }\n+        }\n+\n+        parameters.put(SessionParameter.REPOSITORY_ID, repositoryId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48d097638a137b8a2c9f0d5a4223714afc2c4633"}, "originalPosition": 406}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU1MzYxNw==", "bodyText": "Maybe use StringUtils.isEmpty", "url": "https://github.com/geonetwork/core-geonetwork/pull/5118#discussion_r527553617", "createdAt": "2020-11-20T09:15:59Z", "author": {"login": "josegar74"}, "path": "core/src/main/java/org/fao/geonet/resources/CMISConfiguration.java", "diffHunk": "@@ -0,0 +1,443 @@\n+package org.fao.geonet.resources;\n+\n+import org.apache.chemistry.opencmis.client.api.Repository;\n+import org.apache.chemistry.opencmis.client.api.Session;\n+import org.apache.chemistry.opencmis.client.api.SessionFactory;\n+import org.apache.chemistry.opencmis.client.runtime.SessionFactoryImpl;\n+import org.apache.chemistry.opencmis.commons.SessionParameter;\n+import org.apache.chemistry.opencmis.commons.enums.BindingType;\n+import org.apache.commons.lang.BooleanUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.fao.geonet.constants.Geonet;\n+import org.fao.geonet.utils.Log;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.PostConstruct;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Configuration parameters are based on the following\n+ * https://chemistry.apache.org/java/developing/dev-session-parameters.html\n+ */\n+public class CMISConfiguration {\n+    private Session client = null;\n+\n+    private final String CMIS_FOLDER_DELIMITER = \"/\"; // Specs indicate that \"/\" is the folder delimiter/separator - not sure if other delimiter can be used?.\n+    private final String CMIS_DEFAULT_WEBSERVICES_ACL_SERVICE = \"/services/ACLService?wsdl\";\n+    private final String CMIS_DEFAULT_WEBSERVICES_DISCOVERY_SERVICE = \"/services/DiscoveryService?wsdl\";\n+    private final String CMIS_DEFAULT_WEBSERVICES_MULTIFILING_SERVICE = \"/services/MultiFilingService?wsdl\";\n+    private final String CMIS_DEFAULT_WEBSERVICES_NAVIGATION_SERVICE = \"/services/NavigationService?wsdl\";\n+    private final String CMIS_DEFAULT_WEBSERVICES_OBJECT_SERVICE = \"/services/ObjectService?wsdl\";\n+    private final String CMIS_DEFAULT_WEBSERVICES_POLICY_SERVICE = \"/services/PolicyService?wsdl\";\n+    private final String CMIS_DEFAULT_WEBSERVICES_RELATIONSHIP_SERVICE = \"/services/RelationshipService?wsdl\";\n+    private final String CMIS_DEFAULT_WEBSERVICES_REPOSITORY_SERVICE = \"/services/RepositoryService?wsdl\";\n+    private final String CMIS_DEFAULT_WEBSERVICES_VERSIONING_SERVICE = \"/services/VersioningService?wsdl\";\n+    private final String CMIS_DEFAULT_WEBSERVICES_BASE_URL_SERVICE = \"/cmis\";\n+    private final String CMIS_DEFAULT_BROWSER_URL_SERVICE = \"/browser\";\n+    private final String CMIS_DEFAULT_ATOMPUB_URL_SERVICE = \"/atom\";\n+\n+    private final String CMIS_DEFAULT_EXTERNAL_RESOURCE_MANAGEMENT_WINDOW_PARAMETERS = \"toolbar=0,width=600,height=600\";\n+    private final Boolean CMIS_DEFAULT_EXTERNAL_RESOURCE_MANAGEMENT_MODAL_ENABLED = true;\n+    private final Boolean CMIS_DEFAULT_VERSIONING_ENABLED = false;\n+\n+    private String servicesBaseUrl = System.getenv(\"CMIS_SERVICES_BASE_URL\");\n+    private String bindingType = System.getenv(\"CMIS_BINDING_TYPE\");\n+    private String baseRepositoryPath = System.getenv(\"CMIS_BASE_REPOSITORY_PATH\");\n+    private String username = System.getenv(\"CMIS_USERNAME\");\n+    private String password = System.getenv(\"CMIS_PASSWORD\");\n+    private String repositoryId = System.getenv(\"CMIS_REPOSITORY_ID\");\n+    private String repositoryName = System.getenv(\"CMIS_REPOSITORY_NAME\");\n+    /**\n+     * Url used for managing enhanced resource properties related to the metadata.\n+     */\n+    private String externalResourceManagementUrl = System.getenv(\"CMIS_EXTERNAL_RESOURCE_MANAGEMENT_URL\");\n+    private String externalResourceManagementWindowParameters = System.getenv(\"CMIS_EXTERNAL_RESOURCE_MANAGEMENT_WINDOW_PARAMETERS\");\n+    private Boolean externalResourceManagementModalEnabled = BooleanUtils.toBooleanObject(System.getenv(\"CMIS_EXTERNAL_RESOURCE_MANAGEMENT_MODAL_ENABLED\"));\n+    /*\n+     * Enable option to add versioning in the link to the resource.\n+     */\n+    private Boolean versioningEnabled = BooleanUtils.toBooleanObject(System.getenv(\"CMIS_VERSIONING_ENABLED\"));\n+\n+    private String webservicesRepositoryService = System.getenv(\"CMIS_WEBSERVICES_REPOSITORY_SERVICE\");\n+    private String webservicesNavigationService = System.getenv(\"CMIS_WEBSERVICES_NAVIGATION_SERVICE\");\n+    private String webservicesObjectService = System.getenv(\"CMIS_WEBSERVICES_OBJECT_SERVICE\");\n+    private String webservicesVersioningService = System.getenv(\"CMIS_WEBSERVICES_VERSIONING_SERVICE\");\n+    private String webservicesDiscoveryService = System.getenv(\"CMIS_WEBSERVICES_DISCOVERY_SERVICE\");\n+    private String webservicesRelationshipService = System.getenv(\"CMIS_WEBSERVICES_RELATIONSHIP_SERVICE\");\n+    private String webservicesMultifilingService = System.getenv(\"CMIS_WEBSERVICES_MULTIFILING_SERVICE\");\n+    private String webservicesPolicyService = System.getenv(\"CMIS_WEBSERVICES_POLICY_SERVICE\");\n+    private String webservicesAclService = System.getenv(\"CMIS_WEBSERVICES_ACL_SERVICE\");\n+    private String webservicesMemoryThreshold = System.getenv(\"CMIS_WEBSERVICES_MEMORY_THRESHOLD\");\n+    private String webservicesBaseUrl = System.getenv(\"CMIS_WEBSERVICES_BASE_URL\");\n+\n+    private String browserUrl = System.getenv(\"CMIS_BROWSER_URL\");\n+\n+    private String atompubUrl = System.getenv(\"CMIS_ATOMPUB_URL\");\n+\n+    @Nonnull\n+    public String getServicesBaseUrl() {\n+        return servicesBaseUrl;\n+    }\n+\n+    public void setServicesBaseUrl(String servicesBaseUrl) {\n+        this.servicesBaseUrl = servicesBaseUrl;\n+    }\n+\n+    public void setUsername(String username) {\n+        this.username = username;\n+    }\n+\n+    public void setPassword(String password) {\n+        this.password = password;\n+    }\n+\n+    @Nonnull\n+    public String getBindingType() {\n+        return this.bindingType;\n+    }\n+\n+    public void setBindingType(String bindingTypeString) {\n+        if (StringUtils.isEmpty(bindingTypeString)) {\n+            this.bindingType = null;\n+        } else {\n+            this.bindingType = BindingType.fromValue(bindingTypeString).value();\n+        }\n+    }\n+\n+    @Nonnull\n+    private BindingType getBindingTypeObject() {\n+        return BindingType.fromValue(bindingType);\n+    }\n+\n+    private void setBindingTypeObject(BindingType bindingType) {\n+        this.bindingType = bindingType.value();\n+    }\n+\n+    public String getBaseRepositoryPath() {\n+        return baseRepositoryPath;\n+    }\n+\n+    public void setBaseRepositoryPath(String baseRepositoryPath) {\n+        this.baseRepositoryPath = baseRepositoryPath;\n+    }\n+\n+    @Nonnull\n+    public String getRepositoryId() {\n+        return repositoryId;\n+    }\n+\n+    public void setRepositoryId(String repositoryId) {\n+        this.repositoryId = repositoryId;\n+    }\n+\n+    @Nonnull\n+    public String getRepositoryName() {\n+        return repositoryName;\n+    }\n+\n+    public void setRepositoryName(String repositoryName) {\n+        this.repositoryName = repositoryName;\n+    }\n+\n+    @Nonnull\n+    public String getExternalResourceManagementUrl() {\n+        return externalResourceManagementUrl;\n+    }\n+\n+    public void setExternalResourceManagementUrl(String externalResourceManagementUrl) {\n+        this.externalResourceManagementUrl = externalResourceManagementUrl;\n+    }\n+\n+    @Nonnull\n+    public String getExternalResourceManagementWindowParameters() {\n+        if (externalResourceManagementWindowParameters == null) {\n+            return CMIS_DEFAULT_EXTERNAL_RESOURCE_MANAGEMENT_WINDOW_PARAMETERS;\n+        } else {\n+            return externalResourceManagementWindowParameters;\n+        }\n+    }\n+\n+    public void setExternalResourceManagementWindowParameters(String externalResourceManagementWindowParameters) {\n+        this.externalResourceManagementWindowParameters = externalResourceManagementWindowParameters;\n+    }\n+\n+    @Nonnull\n+    public Boolean isExternalResourceManagementModal() {\n+        if (externalResourceManagementModalEnabled == null) {\n+            return CMIS_DEFAULT_EXTERNAL_RESOURCE_MANAGEMENT_MODAL_ENABLED;\n+        } else {\n+            return externalResourceManagementModalEnabled;\n+        }\n+    }\n+\n+    public void setExternalResourceManagementModal(Boolean externalResourceManagementModalEnabled) {\n+        this.externalResourceManagementModalEnabled = externalResourceManagementModalEnabled;\n+    }\n+\n+    public void setExternalResourceManagementModalEnabled(String externalResourceManagementModalEnabled) {\n+        this.externalResourceManagementModalEnabled = BooleanUtils.toBooleanObject(externalResourceManagementModalEnabled);;\n+    }\n+\n+    @Nonnull\n+    public Boolean isVersioningEnabled() {\n+        if (versioningEnabled == null) {\n+            \n+            return CMIS_DEFAULT_VERSIONING_ENABLED;\n+        } else {\n+            return versioningEnabled;\n+        }\n+    }\n+\n+    public void setVersioningEnabled(Boolean versioningEnabled) {\n+        this.versioningEnabled = versioningEnabled;\n+    }\n+\n+    public void setVersioningEnabled(String versioningEnabled) {\n+        this.versioningEnabled = BooleanUtils.toBooleanObject(versioningEnabled);;\n+    }\n+\n+    @Nonnull\n+    public String getWebservicesRepositoryService() {\n+        return getServiceUrl(getWebservicesBaseUrl(), webservicesRepositoryService, CMIS_DEFAULT_WEBSERVICES_REPOSITORY_SERVICE);\n+    }\n+\n+    public void setWebservicesRepositoryService(String webservicesRepositoryService) {\n+        this.webservicesRepositoryService = webservicesRepositoryService;\n+    }\n+\n+    @Nonnull\n+    public String getWebservicesNavigationService() {\n+        return getServiceUrl(getWebservicesBaseUrl(), webservicesNavigationService, CMIS_DEFAULT_WEBSERVICES_NAVIGATION_SERVICE);\n+    }\n+\n+    public void setWebservicesNavigationService(String webservicesNavigationService) {\n+        this.webservicesNavigationService = webservicesNavigationService;\n+    }\n+\n+    @Nonnull\n+    public String getWebservicesObjectService() {\n+        return getServiceUrl(getWebservicesBaseUrl(), webservicesObjectService, CMIS_DEFAULT_WEBSERVICES_OBJECT_SERVICE);\n+    }\n+\n+    public void setWebservicesObjectService(String webservicesObjectService) {\n+        this.webservicesObjectService = webservicesObjectService;\n+    }\n+\n+    @Nonnull\n+    public String getWebservicesVersioningService() {\n+        return getServiceUrl(getWebservicesBaseUrl(), webservicesVersioningService, CMIS_DEFAULT_WEBSERVICES_VERSIONING_SERVICE);\n+    }\n+\n+    public void setWebservicesVersioningService(String webservicesVersioningService) {\n+        this.webservicesVersioningService = webservicesVersioningService;\n+    }\n+\n+    @Nonnull\n+    public String getWebservicesDiscoveryService() {\n+        return getServiceUrl(getWebservicesBaseUrl(), webservicesDiscoveryService, CMIS_DEFAULT_WEBSERVICES_DISCOVERY_SERVICE);\n+    }\n+\n+    public void setWebservicesDiscoveryService(String webservicesDiscoveryService) {\n+        this.webservicesDiscoveryService = webservicesDiscoveryService;\n+    }\n+\n+    @Nonnull\n+    public String getWebservicesRelationshipService() {\n+        return getServiceUrl(getWebservicesBaseUrl(), webservicesRelationshipService, CMIS_DEFAULT_WEBSERVICES_RELATIONSHIP_SERVICE);\n+    }\n+\n+    public void setWebservicesRelationshipService(String webservicesRelationshipService) {\n+        this.webservicesRelationshipService = webservicesRelationshipService;\n+    }\n+\n+    @Nonnull\n+    public String getWebservicesMultifilingService() {\n+        return getServiceUrl(getWebservicesBaseUrl(), webservicesMultifilingService, CMIS_DEFAULT_WEBSERVICES_MULTIFILING_SERVICE);\n+    }\n+\n+    public void setWebservicesMultifilingService(String webservicesMultifilingService) {\n+        this.webservicesMultifilingService = webservicesMultifilingService;\n+    }\n+\n+    @Nonnull\n+    public String getWebservicesPolicyService() {\n+        return getServiceUrl(getWebservicesBaseUrl(), webservicesPolicyService, CMIS_DEFAULT_WEBSERVICES_POLICY_SERVICE);\n+    }\n+\n+    public void setWebservicesPolicyService(String webservicesPolicyService) {\n+        this.webservicesPolicyService = webservicesPolicyService;\n+    }\n+\n+    @Nonnull\n+    public String getWebservicesAclService() {\n+        return getServiceUrl(getWebservicesBaseUrl(), webservicesAclService, CMIS_DEFAULT_WEBSERVICES_ACL_SERVICE);\n+    }\n+\n+    public void setWebservicesAclService(String webservicesAclService) {\n+        this.webservicesAclService = webservicesAclService;\n+    }\n+\n+    @Nonnull\n+    public String getWebservicesMemoryThreshold() {\n+        return webservicesMemoryThreshold;\n+    }\n+\n+    public void setWebservicesMemoryThreshold(String webservicesMemoryThreshold) {\n+        this.webservicesMemoryThreshold = webservicesMemoryThreshold;\n+    }\n+\n+    @Nonnull\n+    public String getWebservicesBaseUrl() {\n+        return getServiceUrl(servicesBaseUrl, webservicesBaseUrl, CMIS_DEFAULT_WEBSERVICES_BASE_URL_SERVICE);\n+    }\n+\n+    public void setWebservicesBaseUrl(String webservicesBaseUrl) {\n+        this.webservicesBaseUrl = webservicesBaseUrl;\n+    }\n+\n+    @Nonnull\n+    public String getBrowserUrl() {\n+        return getServiceUrl(servicesBaseUrl, browserUrl, CMIS_DEFAULT_BROWSER_URL_SERVICE);\n+    }\n+\n+    public void setBrowserUrl(String browserUrl) {\n+        this.browserUrl = browserUrl;\n+    }\n+\n+    @Nonnull\n+    public String getAtompubUrl() {\n+        return getServiceUrl(servicesBaseUrl, atompubUrl, CMIS_DEFAULT_ATOMPUB_URL_SERVICE);\n+    }\n+\n+    public void setAtompubUrl(String atompubUrl) {\n+        this.atompubUrl = atompubUrl;\n+    }\n+\n+    @PostConstruct\n+    public void init() {\n+        // default factory implementation\n+        Map<String, String> parameters = new HashMap<String, String>();\n+\n+        this.baseRepositoryPath = baseRepositoryPath;\n+        if (this.baseRepositoryPath == null) {\n+            this.baseRepositoryPath = \"\";\n+        }\n+\n+        // Base path should end with delimiter.\n+        if (this.baseRepositoryPath.endsWith(CMIS_FOLDER_DELIMITER)) {\n+            this.baseRepositoryPath = this.baseRepositoryPath.substring(1);\n+        }\n+\n+        // Base path should start with delimiter (unless it is the root for which it would remain as an empty string).\n+        if (baseRepositoryPath.length() > 1 && !baseRepositoryPath.startsWith(CMIS_FOLDER_DELIMITER)) {\n+            this.baseRepositoryPath = CMIS_FOLDER_DELIMITER + baseRepositoryPath;\n+        }\n+\n+        if (username != null) {\n+            // user credentials\n+            parameters.put(SessionParameter.USER, username);\n+            parameters.put(SessionParameter.PASSWORD, password);\n+\n+            username = null;\n+            password = null;\n+        }\n+\n+        // connection settings\n+        if (getBindingTypeObject() == null) {\n+            throw new IllegalArgumentException(\"CMIS Binding type must be supplied\");\n+        }\n+\n+        String repositoryUrl;\n+        switch (getBindingTypeObject()) {\n+            case WEBSERVICES:\n+                parameters.put(SessionParameter.WEBSERVICES_ACL_SERVICE, getWebservicesAclService());\n+                parameters.put(SessionParameter.WEBSERVICES_DISCOVERY_SERVICE, getWebservicesDiscoveryService());\n+                parameters.put(SessionParameter.WEBSERVICES_MULTIFILING_SERVICE, getWebservicesMultifilingService());\n+                parameters.put(SessionParameter.WEBSERVICES_NAVIGATION_SERVICE, getWebservicesNavigationService());\n+                parameters.put(SessionParameter.WEBSERVICES_OBJECT_SERVICE, getWebservicesObjectService());\n+                parameters.put(SessionParameter.WEBSERVICES_POLICY_SERVICE, getWebservicesPolicyService());\n+                parameters.put(SessionParameter.WEBSERVICES_RELATIONSHIP_SERVICE, getWebservicesRelationshipService());\n+                parameters.put(SessionParameter.WEBSERVICES_REPOSITORY_SERVICE, getWebservicesRepositoryService());\n+                parameters.put(SessionParameter.WEBSERVICES_VERSIONING_SERVICE, getWebservicesVersioningService());\n+                repositoryUrl=getWebservicesBaseUrl();\n+                break;\n+            case BROWSER:\n+                parameters.put(SessionParameter.BROWSER_URL, getBrowserUrl());\n+                repositoryUrl=getBrowserUrl();\n+                break;\n+            case ATOMPUB:\n+                parameters.put(SessionParameter.ATOMPUB_URL, getAtompubUrl());\n+                repositoryUrl=getAtompubUrl();\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Unsupported CMIS Binding type '\" + getBindingTypeObject().value() + \"'.\");\n+        }\n+        parameters.put(SessionParameter.BINDING_TYPE, getBindingTypeObject().value());\n+\n+        SessionFactory factory = SessionFactoryImpl.newInstance();\n+\n+        if (repositoryId == null) {\n+            if (repositoryName != null) {\n+                // Try to find the repository by name.\n+                for (Repository repository:factory.getRepositories(parameters)) {\n+                    if (repository.getName().equalsIgnoreCase(repositoryName)) {\n+                        this.repositoryId = repository.getId();\n+                        break;\n+                    }\n+                }\n+            } else {\n+                // If repository id is not set then lets get the first repository.\n+                // Some product only have one repository.\n+                Repository repository = factory.getRepositories(parameters).get(0);\n+                this.repositoryId = repository.getId();\n+                this.repositoryName = repository.getName();\n+            }\n+        } else {\n+            // Try to find the repository name for the id that we have specified..\n+            for (Repository repository : factory.getRepositories(parameters)) {\n+                if (repository.getId().equalsIgnoreCase(this.repositoryId)) {\n+                    this.repositoryName = repository.getName();\n+                    break;\n+                }\n+            }\n+        }\n+\n+        parameters.put(SessionParameter.REPOSITORY_ID, repositoryId);\n+\n+        client = factory.createSession(parameters);\n+        Log.info(Geonet.RESOURCES, \"Connected to CMIS using binding '\" + client.getBinding().getBindingType().value() + \"' with base url '\" +\n+                repositoryUrl + \"' using product '\" + client.getRepositoryInfo().getProductName() + \"' version '\" +\n+                client.getRepositoryInfo().getProductVersion() + \"'.\");\n+    }\n+\n+    @Nonnull\n+    public Session getClient() {\n+        return client;\n+    }\n+\n+    public String getFolderDelimiter() {\n+        return CMIS_FOLDER_DELIMITER;\n+    }\n+\n+    /**\n+     * Generte a full url based on the supplied entered serviceurl and the default.\n+     *\n+     * @param baseUrl                Base url\n+     * @param serviceUrl             Supplied service url (This could start with / or http. If it starts with http then ignore baseUrl)\n+     * @param defaultServicePathInfo default ending url for the service.\n+     * @return a full url to the service.\n+     */\n+    private String getServiceUrl(String baseUrl, String serviceUrl, String defaultServicePathInfo) {\n+        // If no service url was not supplied then lets default to the base url plus the default path info\n+        if (serviceUrl == null || serviceUrl.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48d097638a137b8a2c9f0d5a4223714afc2c4633"}, "originalPosition": 433}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU1NDcyOQ==", "bodyText": "Add file header", "url": "https://github.com/geonetwork/core-geonetwork/pull/5118#discussion_r527554729", "createdAt": "2020-11-20T09:17:54Z", "author": {"login": "josegar74"}, "path": "core/src/main/java/org/fao/geonet/resources/CMISResources.java", "diffHunk": "@@ -0,0 +1,491 @@\n+package org.fao.geonet.resources;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48d097638a137b8a2c9f0d5a4223714afc2c4633"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU1NDgyOA==", "bodyText": "Add file header", "url": "https://github.com/geonetwork/core-geonetwork/pull/5118#discussion_r527554828", "createdAt": "2020-11-20T09:18:02Z", "author": {"login": "josegar74"}, "path": "core/src/main/java/org/fao/geonet/resources/CMISConfiguration.java", "diffHunk": "@@ -0,0 +1,443 @@\n+package org.fao.geonet.resources;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48d097638a137b8a2c9f0d5a4223714afc2c4633"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU1ODA5NQ==", "bodyText": "Is this something to solve?", "url": "https://github.com/geonetwork/core-geonetwork/pull/5118#discussion_r527558095", "createdAt": "2020-11-20T09:23:39Z", "author": {"login": "josegar74"}, "path": "core/src/main/java/org/fao/geonet/resources/CMISResources.java", "diffHunk": "@@ -0,0 +1,491 @@\n+package org.fao.geonet.resources;\n+\n+\n+import jeeves.config.springutil.JeevesDelegatingFilterProxy;\n+import jeeves.server.context.ServiceContext;\n+import org.apache.chemistry.opencmis.client.api.*;\n+import org.apache.chemistry.opencmis.client.runtime.DocumentImpl;\n+import org.apache.chemistry.opencmis.commons.PropertyIds;\n+import org.apache.chemistry.opencmis.commons.data.ContentStream;\n+import org.apache.chemistry.opencmis.commons.enums.VersioningState;\n+import org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException;\n+import org.apache.chemistry.opencmis.commons.exceptions.CmisPermissionDeniedException;\n+import org.apache.commons.io.FilenameUtils;\n+import org.fao.geonet.api.exception.NotAllowedException;\n+import org.fao.geonet.constants.Geonet;\n+import org.fao.geonet.domain.Pair;\n+import org.fao.geonet.kernel.GeonetworkDataDirectory;\n+import org.fao.geonet.utils.IO;\n+import org.fao.geonet.utils.Log;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.ConfigurableApplicationContext;\n+\n+import java.awt.image.BufferedImage;\n+import java.io.*;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.FileTime;\n+import java.util.*;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import javax.imageio.ImageIO;\n+import javax.servlet.ServletContext;\n+\n+public class CMISResources extends Resources {\n+    @Autowired\n+    CMISConfiguration CMISConfiguration;\n+\n+    private Path resourceBaseDir = null;\n+\n+    @Override\n+    public Path locateResourcesDir(final ServletContext context, final ApplicationContext applicationContext) {\n+        this.resourceBaseDir = applicationContext.getBean(GeonetworkDataDirectory.class).getSystemDataDir().relativize(applicationContext.getBean(GeonetworkDataDirectory.class).getResourcesDir());\n+        return this.resourceBaseDir;\n+    }\n+\n+    private String getKey(final Path dir, final String name) {\n+        return getKey(dir.resolve(name));\n+    }\n+\n+    private String getKey(final Path path) {\n+\n+        // Get keyPath as a relative path from /.\n+        Path keyPath;\n+        if (path.startsWith(Paths.get(\"/\"))) {\n+            keyPath = Paths.get(\"/\").relativize(path);\n+        } else {\n+            keyPath = path;\n+        }\n+\n+\n+        if (resourceBaseDir != null) {\n+            // If it starts with resource folder then it is missing the basePath so add it.\n+            if (keyPath.startsWith(resourceBaseDir)) {\n+                keyPath = Paths.get(CMISConfiguration.getBaseRepositoryPath()).resolve(keyPath);\n+            } else {\n+                Path resourceDir = Paths.get(CMISConfiguration.getBaseRepositoryPath()).resolve(resourceBaseDir);\n+                // If it starts with the resource dir by not starting with a \"/\" then add the \"/\"\n+                if (keyPath.startsWith(Paths.get(\"/\").relativize(resourceDir))) {\n+                    keyPath = Paths.get(\"/\").resolve(keyPath);\n+                } else {\n+                    // If it does not start with resource folder then it is missing so add it.\n+                    if (!keyPath.startsWith(resourceDir)) {\n+                        keyPath = resourceDir.resolve(keyPath);\n+                    }\n+                }\n+            }\n+        }\n+\n+        String key;\n+        // For windows it may be \"\\\" in which case we need to change it to folderDelimiter which is normally \"/\"\n+        if (keyPath.getFileSystem().getSeparator().equals(CMISConfiguration.getFolderDelimiter())) {\n+            key = keyPath.toString();\n+        } else {\n+            key = keyPath.toString().replace(keyPath.getFileSystem().getSeparator(), CMISConfiguration.getFolderDelimiter());\n+        }\n+        // For Windows, the pathString may start with // so remove one if this is the case.\n+        if (key.startsWith(\"//\")) {\n+            key = key.substring(1);\n+        }\n+\n+        // Make sure the key that is returns starts with \"/\"\n+        if (key.startsWith(CMISConfiguration.getFolderDelimiter())) {\n+            return key;\n+        } else {\n+            return CMISConfiguration.getFolderDelimiter() + key;\n+        }\n+    }\n+\n+    private Path getKeyPath(String key) {\n+        // Keypath should not reference the base path so it should be removed.\n+        return Paths.get(key.substring(CMISConfiguration.getBaseRepositoryPath().length()));\n+    }\n+\n+    @Nullable\n+    @Override\n+    protected Path findImagePath(final String imageName, final Path logosDir) {\n+        String key = getKey(logosDir, imageName);\n+        if (imageName.indexOf('.') > -1) {\n+            if (CMISConfiguration.getClient().existsPath(key)) {\n+                return getKeyPath(key);\n+            } else {\n+                Log.warning(Geonet.RESOURCES,\n+                        String.format(\"Unable to locate image resource '%s'.\", key));\n+            }\n+        } else {\n+            try {\n+                CmisObject cmisObject = CMISConfiguration.getClient().getObjectByPath(key);\n+                Folder folder = (Folder) cmisObject;\n+\n+                OperationContext operationContext = CMISConfiguration.getClient().createOperationContext();\n+                ItemIterable<CmisObject> children = folder.getChildren(operationContext);\n+\n+                for (CmisObject object : children) {\n+                    if (object instanceof Document) {\n+                        String ext = FilenameUtils.getExtension(object.getName());\n+                        if (IMAGE_EXTENSIONS.contains(ext.toLowerCase())) {\n+                            //Todo not sure if name will be correct.\n+                            return getKeyPath(((Document) object).getName());\n+                        }\n+\n+                    }\n+                }\n+            } catch (CmisObjectNotFoundException e) {\n+                Log.warning(Geonet.RESOURCES,\n+                        String.format(\"Unable to locate image resource '%s'.\", key));\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public ResourceHolder getImage(final ServiceContext context, final String imageName,\n+                                   final Path logosDir) {\n+        Path path = findImagePath(imageName, logosDir);\n+        if (path != null) {\n+            String key = getKey(path);\n+            return new CMISResourceHolder(key, false);\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    @Override\n+    public ResourceHolder getWritableImage(final ServiceContext context, final String imageName,\n+                                           final Path logosDir) {\n+        return new CMISResourceHolder(getKey(logosDir, imageName), true);\n+    }\n+\n+    @Override\n+    Pair<byte[], Long> loadResource(final Path resourcesDir, final ServletContext context,\n+                                    final Path appPath, final String filename, final byte[] defaultValue,\n+                                    final long loadSince) throws IOException {\n+        final Path file = locateResource(resourcesDir, context, appPath, filename);\n+        final String key = getKey(file);\n+        try {\n+            final CmisObject object = CMISConfiguration.getClient().getObjectByPath(key);\n+            if (object != null) {\n+                final long lastModified = object.getLastModificationDate().toInstant().toEpochMilli();\n+                try (InputStream in = ((Document) object).getContentStream().getStream()) {\n+                    if (loadSince < 0 || lastModified > loadSince) {\n+                        byte[] content = new byte[(int) ((Document) object).getContentStreamLength()];\n+                        new DataInputStream(in).readFully(content);\n+                        return Pair.read(content, lastModified);\n+                    } else {\n+                        return Pair.read(defaultValue, loadSince);\n+                    }\n+                }\n+            } else {\n+                Log.info(Log.RESOURCES, \"Error loading resource \" + CMISConfiguration.getRepositoryId() + \":\" + key);\n+            }\n+        } catch (CmisObjectNotFoundException e) {\n+            Log.warning(Geonet.RESOURCES,\n+                    String.format(\"Unable to locate resource '%s'.\", key));\n+            // Ignore not found error.\n+        }\n+        return Pair.read(defaultValue, -1L);\n+    }\n+\n+    @Override\n+    protected Path locateResource(@Nullable final Path resourcesDir, final ServletContext context,\n+                                  final Path appPath, @Nonnull String filename) throws IOException {\n+        if (filename.charAt(0) == '/' || filename.charAt(0) == '\\\\') {\n+            filename = filename.substring(1);\n+        }\n+\n+        final String key;\n+        if (resourcesDir != null) {\n+            key = getKey(resourcesDir, filename);\n+        } else {\n+            key = CMISConfiguration.getFolderDelimiter() +  filename;\n+        }\n+\n+        boolean keyExists=false;\n+        // Use getObjectByPath as it does caching while existsPath does not.\n+        try {\n+            CMISConfiguration.getClient().getObjectByPath(key);\n+            keyExists = true;\n+        } catch (CmisObjectNotFoundException e) {\n+            keyExists=false;\n+        }\n+\n+        if (!keyExists) {\n+            Path webappCopy = null;\n+            if (context != null) {\n+                final String realPath = context.getRealPath(filename);\n+                if (realPath != null) {\n+                    webappCopy = IO.toPath(realPath);\n+                }\n+            }\n+\n+            if (webappCopy == null) {\n+                webappCopy = appPath.resolve(filename);  // TODO: this won't work...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48d097638a137b8a2c9f0d5a4223714afc2c4633"}, "originalPosition": 227}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2MDAyOQ==", "bodyText": "Should not be moved to a finally block?", "url": "https://github.com/geonetwork/core-geonetwork/pull/5118#discussion_r527560029", "createdAt": "2020-11-20T09:26:48Z", "author": {"login": "josegar74"}, "path": "core/src/main/java/org/fao/geonet/resources/CMISResources.java", "diffHunk": "@@ -0,0 +1,491 @@\n+package org.fao.geonet.resources;\n+\n+\n+import jeeves.config.springutil.JeevesDelegatingFilterProxy;\n+import jeeves.server.context.ServiceContext;\n+import org.apache.chemistry.opencmis.client.api.*;\n+import org.apache.chemistry.opencmis.client.runtime.DocumentImpl;\n+import org.apache.chemistry.opencmis.commons.PropertyIds;\n+import org.apache.chemistry.opencmis.commons.data.ContentStream;\n+import org.apache.chemistry.opencmis.commons.enums.VersioningState;\n+import org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException;\n+import org.apache.chemistry.opencmis.commons.exceptions.CmisPermissionDeniedException;\n+import org.apache.commons.io.FilenameUtils;\n+import org.fao.geonet.api.exception.NotAllowedException;\n+import org.fao.geonet.constants.Geonet;\n+import org.fao.geonet.domain.Pair;\n+import org.fao.geonet.kernel.GeonetworkDataDirectory;\n+import org.fao.geonet.utils.IO;\n+import org.fao.geonet.utils.Log;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.ConfigurableApplicationContext;\n+\n+import java.awt.image.BufferedImage;\n+import java.io.*;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.FileTime;\n+import java.util.*;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import javax.imageio.ImageIO;\n+import javax.servlet.ServletContext;\n+\n+public class CMISResources extends Resources {\n+    @Autowired\n+    CMISConfiguration CMISConfiguration;\n+\n+    private Path resourceBaseDir = null;\n+\n+    @Override\n+    public Path locateResourcesDir(final ServletContext context, final ApplicationContext applicationContext) {\n+        this.resourceBaseDir = applicationContext.getBean(GeonetworkDataDirectory.class).getSystemDataDir().relativize(applicationContext.getBean(GeonetworkDataDirectory.class).getResourcesDir());\n+        return this.resourceBaseDir;\n+    }\n+\n+    private String getKey(final Path dir, final String name) {\n+        return getKey(dir.resolve(name));\n+    }\n+\n+    private String getKey(final Path path) {\n+\n+        // Get keyPath as a relative path from /.\n+        Path keyPath;\n+        if (path.startsWith(Paths.get(\"/\"))) {\n+            keyPath = Paths.get(\"/\").relativize(path);\n+        } else {\n+            keyPath = path;\n+        }\n+\n+\n+        if (resourceBaseDir != null) {\n+            // If it starts with resource folder then it is missing the basePath so add it.\n+            if (keyPath.startsWith(resourceBaseDir)) {\n+                keyPath = Paths.get(CMISConfiguration.getBaseRepositoryPath()).resolve(keyPath);\n+            } else {\n+                Path resourceDir = Paths.get(CMISConfiguration.getBaseRepositoryPath()).resolve(resourceBaseDir);\n+                // If it starts with the resource dir by not starting with a \"/\" then add the \"/\"\n+                if (keyPath.startsWith(Paths.get(\"/\").relativize(resourceDir))) {\n+                    keyPath = Paths.get(\"/\").resolve(keyPath);\n+                } else {\n+                    // If it does not start with resource folder then it is missing so add it.\n+                    if (!keyPath.startsWith(resourceDir)) {\n+                        keyPath = resourceDir.resolve(keyPath);\n+                    }\n+                }\n+            }\n+        }\n+\n+        String key;\n+        // For windows it may be \"\\\" in which case we need to change it to folderDelimiter which is normally \"/\"\n+        if (keyPath.getFileSystem().getSeparator().equals(CMISConfiguration.getFolderDelimiter())) {\n+            key = keyPath.toString();\n+        } else {\n+            key = keyPath.toString().replace(keyPath.getFileSystem().getSeparator(), CMISConfiguration.getFolderDelimiter());\n+        }\n+        // For Windows, the pathString may start with // so remove one if this is the case.\n+        if (key.startsWith(\"//\")) {\n+            key = key.substring(1);\n+        }\n+\n+        // Make sure the key that is returns starts with \"/\"\n+        if (key.startsWith(CMISConfiguration.getFolderDelimiter())) {\n+            return key;\n+        } else {\n+            return CMISConfiguration.getFolderDelimiter() + key;\n+        }\n+    }\n+\n+    private Path getKeyPath(String key) {\n+        // Keypath should not reference the base path so it should be removed.\n+        return Paths.get(key.substring(CMISConfiguration.getBaseRepositoryPath().length()));\n+    }\n+\n+    @Nullable\n+    @Override\n+    protected Path findImagePath(final String imageName, final Path logosDir) {\n+        String key = getKey(logosDir, imageName);\n+        if (imageName.indexOf('.') > -1) {\n+            if (CMISConfiguration.getClient().existsPath(key)) {\n+                return getKeyPath(key);\n+            } else {\n+                Log.warning(Geonet.RESOURCES,\n+                        String.format(\"Unable to locate image resource '%s'.\", key));\n+            }\n+        } else {\n+            try {\n+                CmisObject cmisObject = CMISConfiguration.getClient().getObjectByPath(key);\n+                Folder folder = (Folder) cmisObject;\n+\n+                OperationContext operationContext = CMISConfiguration.getClient().createOperationContext();\n+                ItemIterable<CmisObject> children = folder.getChildren(operationContext);\n+\n+                for (CmisObject object : children) {\n+                    if (object instanceof Document) {\n+                        String ext = FilenameUtils.getExtension(object.getName());\n+                        if (IMAGE_EXTENSIONS.contains(ext.toLowerCase())) {\n+                            //Todo not sure if name will be correct.\n+                            return getKeyPath(((Document) object).getName());\n+                        }\n+\n+                    }\n+                }\n+            } catch (CmisObjectNotFoundException e) {\n+                Log.warning(Geonet.RESOURCES,\n+                        String.format(\"Unable to locate image resource '%s'.\", key));\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public ResourceHolder getImage(final ServiceContext context, final String imageName,\n+                                   final Path logosDir) {\n+        Path path = findImagePath(imageName, logosDir);\n+        if (path != null) {\n+            String key = getKey(path);\n+            return new CMISResourceHolder(key, false);\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    @Override\n+    public ResourceHolder getWritableImage(final ServiceContext context, final String imageName,\n+                                           final Path logosDir) {\n+        return new CMISResourceHolder(getKey(logosDir, imageName), true);\n+    }\n+\n+    @Override\n+    Pair<byte[], Long> loadResource(final Path resourcesDir, final ServletContext context,\n+                                    final Path appPath, final String filename, final byte[] defaultValue,\n+                                    final long loadSince) throws IOException {\n+        final Path file = locateResource(resourcesDir, context, appPath, filename);\n+        final String key = getKey(file);\n+        try {\n+            final CmisObject object = CMISConfiguration.getClient().getObjectByPath(key);\n+            if (object != null) {\n+                final long lastModified = object.getLastModificationDate().toInstant().toEpochMilli();\n+                try (InputStream in = ((Document) object).getContentStream().getStream()) {\n+                    if (loadSince < 0 || lastModified > loadSince) {\n+                        byte[] content = new byte[(int) ((Document) object).getContentStreamLength()];\n+                        new DataInputStream(in).readFully(content);\n+                        return Pair.read(content, lastModified);\n+                    } else {\n+                        return Pair.read(defaultValue, loadSince);\n+                    }\n+                }\n+            } else {\n+                Log.info(Log.RESOURCES, \"Error loading resource \" + CMISConfiguration.getRepositoryId() + \":\" + key);\n+            }\n+        } catch (CmisObjectNotFoundException e) {\n+            Log.warning(Geonet.RESOURCES,\n+                    String.format(\"Unable to locate resource '%s'.\", key));\n+            // Ignore not found error.\n+        }\n+        return Pair.read(defaultValue, -1L);\n+    }\n+\n+    @Override\n+    protected Path locateResource(@Nullable final Path resourcesDir, final ServletContext context,\n+                                  final Path appPath, @Nonnull String filename) throws IOException {\n+        if (filename.charAt(0) == '/' || filename.charAt(0) == '\\\\') {\n+            filename = filename.substring(1);\n+        }\n+\n+        final String key;\n+        if (resourcesDir != null) {\n+            key = getKey(resourcesDir, filename);\n+        } else {\n+            key = CMISConfiguration.getFolderDelimiter() +  filename;\n+        }\n+\n+        boolean keyExists=false;\n+        // Use getObjectByPath as it does caching while existsPath does not.\n+        try {\n+            CMISConfiguration.getClient().getObjectByPath(key);\n+            keyExists = true;\n+        } catch (CmisObjectNotFoundException e) {\n+            keyExists=false;\n+        }\n+\n+        if (!keyExists) {\n+            Path webappCopy = null;\n+            if (context != null) {\n+                final String realPath = context.getRealPath(filename);\n+                if (realPath != null) {\n+                    webappCopy = IO.toPath(realPath);\n+                }\n+            }\n+\n+            if (webappCopy == null) {\n+                webappCopy = appPath.resolve(filename);  // TODO: this won't work...\n+            }\n+            if (!java.nio.file.Files.isReadable(webappCopy)) {\n+                final ConfigurableApplicationContext applicationContext =\n+                        JeevesDelegatingFilterProxy.getApplicationContextFromServletContext(context);\n+                if (resourcesDir.equals(locateResourcesDir(context, applicationContext))) {\n+                    webappCopy = super.locateResourcesDir(context, applicationContext).resolve(filename);\n+                }\n+            }\n+            if (java.nio.file.Files.isReadable(webappCopy)) {\n+                try (ResourceHolder holder = new CMISResourceHolder(key, true)) {\n+                    Log.info(Log.RESOURCES, \"Copying \" + webappCopy + \" to \" + key);\n+                    Files.copy(webappCopy, holder.getPath(), StandardCopyOption.REPLACE_EXISTING);\n+                }\n+            } else {\n+\n+                final String suffix = FilenameUtils.getExtension(key);\n+\n+                // find a different format and convert it to our desired format\n+                if (IMAGE_WRITE_SUFFIXES.contains(suffix.toLowerCase())) {\n+                    final String suffixless = FilenameUtils.removeExtension(key);\n+                    final String suffixlessKeyFilename = FilenameUtils.getName(suffixless);\n+                    final String suffixlessKeyFolder = getKey(Paths.get(FilenameUtils.getFullPath(suffixless)));\n+\n+                    OperationContext oc = CMISConfiguration.getClient().createOperationContext();\n+\n+                    try {\n+                        Folder resourceFolder = (Folder) CMISConfiguration.getClient().getObjectByPath(suffixlessKeyFolder, oc);\n+                        Map<String, Document> documentMap = getCmisObjectMap(resourceFolder, null, suffixlessKeyFilename);\n+\n+                        for (Map.Entry<String,Document> entry : documentMap.entrySet()) {\n+                            Document object = entry.getValue();\n+                            String cmisFilePath = entry.getKey();\n+                            final String ext = FilenameUtils.getExtension(object.getName()).toLowerCase();\n+                            if (IMAGE_READ_SUFFIXES.contains(ext)) {\n+                                try (ResourceHolder in = new CMISResourceHolder(object.getName(), true);\n+                                     ResourceHolder out = new CMISResourceHolder(key, true)) {\n+                                    try (InputStream inS = IO.newInputStream(in.getPath());\n+                                         OutputStream outS = java.nio.file.Files.newOutputStream(out.getPath())) {\n+                                        Log.info(Log.RESOURCES, \"Converting \" + cmisFilePath + \" to \" + key);\n+                                        BufferedImage image = ImageIO.read(inS);\n+                                        ImageIO.write(image, suffix, outS);\n+                                        break;\n+                                    } catch (IOException e) {\n+                                        if (context != null) {\n+                                            context.log(\"Unable to convert image from \" + in.getPath() + \" to \" +\n+                                                    out.getPath(), e);\n+                                        } else {\n+                                            Log.warning(Log.RESOURCES, \"Unable to convert image from \" +\n+                                                    in.getPath() + \" to \" + out.getPath(), e);\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    } catch (CmisObjectNotFoundException e) {\n+                        Log.warning(Geonet.RESOURCES,\n+                                String.format(\"Unable to locate resource folder '%s'.\", suffixlessKeyFolder));\n+                        // Ignore not found error.\n+                    }\n+                }\n+\n+            }\n+        }\n+\n+        return getKeyPath(key);\n+    }\n+\n+    @Override\n+    protected void addFiles(final DirectoryStream.Filter<Path> iconFilter, final Path webappDir,\n+                            final HashSet<Path> result) {\n+\n+        String keyFolder = getKey(webappDir) + CMISConfiguration.getFolderDelimiter();\n+        CmisObject cmisObject = CMISConfiguration.getClient().getObjectByPath(keyFolder);\n+        Folder folder = (Folder) cmisObject;\n+\n+        ItemIterable<CmisObject> children = folder.getChildren();\n+\n+        for (CmisObject object : children) {\n+            if (object instanceof Document) {\n+                final Path curPath = getKeyPath(((DocumentImpl) object).getPaths().get(0));\n+                try {\n+                    if (iconFilter.accept(curPath)) {\n+                        result.add(curPath);\n+                    }\n+                } catch (IOException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Nullable\n+    @Override\n+    public FileTime getLastModified(final Path resourcesDir, final ServletContext context,\n+                                    final Path appPath, final String filename) throws IOException {\n+        final Path file = locateResource(resourcesDir, context, appPath, filename);\n+        final String key = getKey(file);\n+        try {\n+            final CmisObject object = CMISConfiguration.getClient().getObjectByPath(key);\n+            if (object == null) {\n+                return null;\n+            } else {\n+                return FileTime.from(object.getLastModificationDate().toInstant());\n+            }\n+        } catch (CmisObjectNotFoundException e) {\n+            // Ignore not found error.\n+        }\n+        // key does not exist\n+        return null;\n+    }\n+\n+    @Override\n+    public void deleteImageIfExists(final String image, final Path dir) {\n+        Path icon = findImagePath(image, dir);\n+        if (icon != null) {\n+            CMISConfiguration.getClient().deleteByPath(getKey(icon));\n+        }\n+    }\n+\n+    private class CMISResourceHolder implements ResourceHolder {\n+        private final String key;\n+        private Path path = null;\n+        private boolean writeOnClose = false;\n+\n+        private CMISResourceHolder(final String key, boolean writeOnClose) {\n+            this.key = key;\n+            this.writeOnClose = writeOnClose;\n+        }\n+\n+        @Override\n+        public Path getPath() {\n+            if (path != null) {\n+                return path;\n+            }\n+            final String[] splittedKey = key.split(CMISConfiguration.getFolderDelimiter());\n+            try {\n+                path = java.nio.file.Files.createTempFile(\"\", splittedKey[splittedKey.length - 1]);\n+                try {\n+                    final CmisObject object = CMISConfiguration.getClient().getObjectByPath(key);\n+                    if (object == null) {\n+                        if (writeOnClose) {\n+                            Files.delete(path);\n+                        }\n+                    } else {\n+                        try (InputStream in = ((Document) object).getContentStream().getStream()) {\n+                            java.nio.file.Files.copy(in, path,\n+                                    StandardCopyOption.REPLACE_EXISTING);\n+                        }\n+                    }\n+                } catch (CmisObjectNotFoundException e) {\n+                    if (writeOnClose) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48d097638a137b8a2c9f0d5a4223714afc2c4633"}, "originalPosition": 378}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2MTQ1OQ==", "bodyText": "Should be added in try / finally block?", "url": "https://github.com/geonetwork/core-geonetwork/pull/5118#discussion_r527561459", "createdAt": "2020-11-20T09:29:02Z", "author": {"login": "josegar74"}, "path": "core/src/main/java/org/fao/geonet/resources/CMISResources.java", "diffHunk": "@@ -0,0 +1,491 @@\n+package org.fao.geonet.resources;\n+\n+\n+import jeeves.config.springutil.JeevesDelegatingFilterProxy;\n+import jeeves.server.context.ServiceContext;\n+import org.apache.chemistry.opencmis.client.api.*;\n+import org.apache.chemistry.opencmis.client.runtime.DocumentImpl;\n+import org.apache.chemistry.opencmis.commons.PropertyIds;\n+import org.apache.chemistry.opencmis.commons.data.ContentStream;\n+import org.apache.chemistry.opencmis.commons.enums.VersioningState;\n+import org.apache.chemistry.opencmis.commons.exceptions.CmisObjectNotFoundException;\n+import org.apache.chemistry.opencmis.commons.exceptions.CmisPermissionDeniedException;\n+import org.apache.commons.io.FilenameUtils;\n+import org.fao.geonet.api.exception.NotAllowedException;\n+import org.fao.geonet.constants.Geonet;\n+import org.fao.geonet.domain.Pair;\n+import org.fao.geonet.kernel.GeonetworkDataDirectory;\n+import org.fao.geonet.utils.IO;\n+import org.fao.geonet.utils.Log;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.ConfigurableApplicationContext;\n+\n+import java.awt.image.BufferedImage;\n+import java.io.*;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.FileTime;\n+import java.util.*;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import javax.imageio.ImageIO;\n+import javax.servlet.ServletContext;\n+\n+public class CMISResources extends Resources {\n+    @Autowired\n+    CMISConfiguration CMISConfiguration;\n+\n+    private Path resourceBaseDir = null;\n+\n+    @Override\n+    public Path locateResourcesDir(final ServletContext context, final ApplicationContext applicationContext) {\n+        this.resourceBaseDir = applicationContext.getBean(GeonetworkDataDirectory.class).getSystemDataDir().relativize(applicationContext.getBean(GeonetworkDataDirectory.class).getResourcesDir());\n+        return this.resourceBaseDir;\n+    }\n+\n+    private String getKey(final Path dir, final String name) {\n+        return getKey(dir.resolve(name));\n+    }\n+\n+    private String getKey(final Path path) {\n+\n+        // Get keyPath as a relative path from /.\n+        Path keyPath;\n+        if (path.startsWith(Paths.get(\"/\"))) {\n+            keyPath = Paths.get(\"/\").relativize(path);\n+        } else {\n+            keyPath = path;\n+        }\n+\n+\n+        if (resourceBaseDir != null) {\n+            // If it starts with resource folder then it is missing the basePath so add it.\n+            if (keyPath.startsWith(resourceBaseDir)) {\n+                keyPath = Paths.get(CMISConfiguration.getBaseRepositoryPath()).resolve(keyPath);\n+            } else {\n+                Path resourceDir = Paths.get(CMISConfiguration.getBaseRepositoryPath()).resolve(resourceBaseDir);\n+                // If it starts with the resource dir by not starting with a \"/\" then add the \"/\"\n+                if (keyPath.startsWith(Paths.get(\"/\").relativize(resourceDir))) {\n+                    keyPath = Paths.get(\"/\").resolve(keyPath);\n+                } else {\n+                    // If it does not start with resource folder then it is missing so add it.\n+                    if (!keyPath.startsWith(resourceDir)) {\n+                        keyPath = resourceDir.resolve(keyPath);\n+                    }\n+                }\n+            }\n+        }\n+\n+        String key;\n+        // For windows it may be \"\\\" in which case we need to change it to folderDelimiter which is normally \"/\"\n+        if (keyPath.getFileSystem().getSeparator().equals(CMISConfiguration.getFolderDelimiter())) {\n+            key = keyPath.toString();\n+        } else {\n+            key = keyPath.toString().replace(keyPath.getFileSystem().getSeparator(), CMISConfiguration.getFolderDelimiter());\n+        }\n+        // For Windows, the pathString may start with // so remove one if this is the case.\n+        if (key.startsWith(\"//\")) {\n+            key = key.substring(1);\n+        }\n+\n+        // Make sure the key that is returns starts with \"/\"\n+        if (key.startsWith(CMISConfiguration.getFolderDelimiter())) {\n+            return key;\n+        } else {\n+            return CMISConfiguration.getFolderDelimiter() + key;\n+        }\n+    }\n+\n+    private Path getKeyPath(String key) {\n+        // Keypath should not reference the base path so it should be removed.\n+        return Paths.get(key.substring(CMISConfiguration.getBaseRepositoryPath().length()));\n+    }\n+\n+    @Nullable\n+    @Override\n+    protected Path findImagePath(final String imageName, final Path logosDir) {\n+        String key = getKey(logosDir, imageName);\n+        if (imageName.indexOf('.') > -1) {\n+            if (CMISConfiguration.getClient().existsPath(key)) {\n+                return getKeyPath(key);\n+            } else {\n+                Log.warning(Geonet.RESOURCES,\n+                        String.format(\"Unable to locate image resource '%s'.\", key));\n+            }\n+        } else {\n+            try {\n+                CmisObject cmisObject = CMISConfiguration.getClient().getObjectByPath(key);\n+                Folder folder = (Folder) cmisObject;\n+\n+                OperationContext operationContext = CMISConfiguration.getClient().createOperationContext();\n+                ItemIterable<CmisObject> children = folder.getChildren(operationContext);\n+\n+                for (CmisObject object : children) {\n+                    if (object instanceof Document) {\n+                        String ext = FilenameUtils.getExtension(object.getName());\n+                        if (IMAGE_EXTENSIONS.contains(ext.toLowerCase())) {\n+                            //Todo not sure if name will be correct.\n+                            return getKeyPath(((Document) object).getName());\n+                        }\n+\n+                    }\n+                }\n+            } catch (CmisObjectNotFoundException e) {\n+                Log.warning(Geonet.RESOURCES,\n+                        String.format(\"Unable to locate image resource '%s'.\", key));\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public ResourceHolder getImage(final ServiceContext context, final String imageName,\n+                                   final Path logosDir) {\n+        Path path = findImagePath(imageName, logosDir);\n+        if (path != null) {\n+            String key = getKey(path);\n+            return new CMISResourceHolder(key, false);\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    @Override\n+    public ResourceHolder getWritableImage(final ServiceContext context, final String imageName,\n+                                           final Path logosDir) {\n+        return new CMISResourceHolder(getKey(logosDir, imageName), true);\n+    }\n+\n+    @Override\n+    Pair<byte[], Long> loadResource(final Path resourcesDir, final ServletContext context,\n+                                    final Path appPath, final String filename, final byte[] defaultValue,\n+                                    final long loadSince) throws IOException {\n+        final Path file = locateResource(resourcesDir, context, appPath, filename);\n+        final String key = getKey(file);\n+        try {\n+            final CmisObject object = CMISConfiguration.getClient().getObjectByPath(key);\n+            if (object != null) {\n+                final long lastModified = object.getLastModificationDate().toInstant().toEpochMilli();\n+                try (InputStream in = ((Document) object).getContentStream().getStream()) {\n+                    if (loadSince < 0 || lastModified > loadSince) {\n+                        byte[] content = new byte[(int) ((Document) object).getContentStreamLength()];\n+                        new DataInputStream(in).readFully(content);\n+                        return Pair.read(content, lastModified);\n+                    } else {\n+                        return Pair.read(defaultValue, loadSince);\n+                    }\n+                }\n+            } else {\n+                Log.info(Log.RESOURCES, \"Error loading resource \" + CMISConfiguration.getRepositoryId() + \":\" + key);\n+            }\n+        } catch (CmisObjectNotFoundException e) {\n+            Log.warning(Geonet.RESOURCES,\n+                    String.format(\"Unable to locate resource '%s'.\", key));\n+            // Ignore not found error.\n+        }\n+        return Pair.read(defaultValue, -1L);\n+    }\n+\n+    @Override\n+    protected Path locateResource(@Nullable final Path resourcesDir, final ServletContext context,\n+                                  final Path appPath, @Nonnull String filename) throws IOException {\n+        if (filename.charAt(0) == '/' || filename.charAt(0) == '\\\\') {\n+            filename = filename.substring(1);\n+        }\n+\n+        final String key;\n+        if (resourcesDir != null) {\n+            key = getKey(resourcesDir, filename);\n+        } else {\n+            key = CMISConfiguration.getFolderDelimiter() +  filename;\n+        }\n+\n+        boolean keyExists=false;\n+        // Use getObjectByPath as it does caching while existsPath does not.\n+        try {\n+            CMISConfiguration.getClient().getObjectByPath(key);\n+            keyExists = true;\n+        } catch (CmisObjectNotFoundException e) {\n+            keyExists=false;\n+        }\n+\n+        if (!keyExists) {\n+            Path webappCopy = null;\n+            if (context != null) {\n+                final String realPath = context.getRealPath(filename);\n+                if (realPath != null) {\n+                    webappCopy = IO.toPath(realPath);\n+                }\n+            }\n+\n+            if (webappCopy == null) {\n+                webappCopy = appPath.resolve(filename);  // TODO: this won't work...\n+            }\n+            if (!java.nio.file.Files.isReadable(webappCopy)) {\n+                final ConfigurableApplicationContext applicationContext =\n+                        JeevesDelegatingFilterProxy.getApplicationContextFromServletContext(context);\n+                if (resourcesDir.equals(locateResourcesDir(context, applicationContext))) {\n+                    webappCopy = super.locateResourcesDir(context, applicationContext).resolve(filename);\n+                }\n+            }\n+            if (java.nio.file.Files.isReadable(webappCopy)) {\n+                try (ResourceHolder holder = new CMISResourceHolder(key, true)) {\n+                    Log.info(Log.RESOURCES, \"Copying \" + webappCopy + \" to \" + key);\n+                    Files.copy(webappCopy, holder.getPath(), StandardCopyOption.REPLACE_EXISTING);\n+                }\n+            } else {\n+\n+                final String suffix = FilenameUtils.getExtension(key);\n+\n+                // find a different format and convert it to our desired format\n+                if (IMAGE_WRITE_SUFFIXES.contains(suffix.toLowerCase())) {\n+                    final String suffixless = FilenameUtils.removeExtension(key);\n+                    final String suffixlessKeyFilename = FilenameUtils.getName(suffixless);\n+                    final String suffixlessKeyFolder = getKey(Paths.get(FilenameUtils.getFullPath(suffixless)));\n+\n+                    OperationContext oc = CMISConfiguration.getClient().createOperationContext();\n+\n+                    try {\n+                        Folder resourceFolder = (Folder) CMISConfiguration.getClient().getObjectByPath(suffixlessKeyFolder, oc);\n+                        Map<String, Document> documentMap = getCmisObjectMap(resourceFolder, null, suffixlessKeyFilename);\n+\n+                        for (Map.Entry<String,Document> entry : documentMap.entrySet()) {\n+                            Document object = entry.getValue();\n+                            String cmisFilePath = entry.getKey();\n+                            final String ext = FilenameUtils.getExtension(object.getName()).toLowerCase();\n+                            if (IMAGE_READ_SUFFIXES.contains(ext)) {\n+                                try (ResourceHolder in = new CMISResourceHolder(object.getName(), true);\n+                                     ResourceHolder out = new CMISResourceHolder(key, true)) {\n+                                    try (InputStream inS = IO.newInputStream(in.getPath());\n+                                         OutputStream outS = java.nio.file.Files.newOutputStream(out.getPath())) {\n+                                        Log.info(Log.RESOURCES, \"Converting \" + cmisFilePath + \" to \" + key);\n+                                        BufferedImage image = ImageIO.read(inS);\n+                                        ImageIO.write(image, suffix, outS);\n+                                        break;\n+                                    } catch (IOException e) {\n+                                        if (context != null) {\n+                                            context.log(\"Unable to convert image from \" + in.getPath() + \" to \" +\n+                                                    out.getPath(), e);\n+                                        } else {\n+                                            Log.warning(Log.RESOURCES, \"Unable to convert image from \" +\n+                                                    in.getPath() + \" to \" + out.getPath(), e);\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    } catch (CmisObjectNotFoundException e) {\n+                        Log.warning(Geonet.RESOURCES,\n+                                String.format(\"Unable to locate resource folder '%s'.\", suffixlessKeyFolder));\n+                        // Ignore not found error.\n+                    }\n+                }\n+\n+            }\n+        }\n+\n+        return getKeyPath(key);\n+    }\n+\n+    @Override\n+    protected void addFiles(final DirectoryStream.Filter<Path> iconFilter, final Path webappDir,\n+                            final HashSet<Path> result) {\n+\n+        String keyFolder = getKey(webappDir) + CMISConfiguration.getFolderDelimiter();\n+        CmisObject cmisObject = CMISConfiguration.getClient().getObjectByPath(keyFolder);\n+        Folder folder = (Folder) cmisObject;\n+\n+        ItemIterable<CmisObject> children = folder.getChildren();\n+\n+        for (CmisObject object : children) {\n+            if (object instanceof Document) {\n+                final Path curPath = getKeyPath(((DocumentImpl) object).getPaths().get(0));\n+                try {\n+                    if (iconFilter.accept(curPath)) {\n+                        result.add(curPath);\n+                    }\n+                } catch (IOException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Nullable\n+    @Override\n+    public FileTime getLastModified(final Path resourcesDir, final ServletContext context,\n+                                    final Path appPath, final String filename) throws IOException {\n+        final Path file = locateResource(resourcesDir, context, appPath, filename);\n+        final String key = getKey(file);\n+        try {\n+            final CmisObject object = CMISConfiguration.getClient().getObjectByPath(key);\n+            if (object == null) {\n+                return null;\n+            } else {\n+                return FileTime.from(object.getLastModificationDate().toInstant());\n+            }\n+        } catch (CmisObjectNotFoundException e) {\n+            // Ignore not found error.\n+        }\n+        // key does not exist\n+        return null;\n+    }\n+\n+    @Override\n+    public void deleteImageIfExists(final String image, final Path dir) {\n+        Path icon = findImagePath(image, dir);\n+        if (icon != null) {\n+            CMISConfiguration.getClient().deleteByPath(getKey(icon));\n+        }\n+    }\n+\n+    private class CMISResourceHolder implements ResourceHolder {\n+        private final String key;\n+        private Path path = null;\n+        private boolean writeOnClose = false;\n+\n+        private CMISResourceHolder(final String key, boolean writeOnClose) {\n+            this.key = key;\n+            this.writeOnClose = writeOnClose;\n+        }\n+\n+        @Override\n+        public Path getPath() {\n+            if (path != null) {\n+                return path;\n+            }\n+            final String[] splittedKey = key.split(CMISConfiguration.getFolderDelimiter());\n+            try {\n+                path = java.nio.file.Files.createTempFile(\"\", splittedKey[splittedKey.length - 1]);\n+                try {\n+                    final CmisObject object = CMISConfiguration.getClient().getObjectByPath(key);\n+                    if (object == null) {\n+                        if (writeOnClose) {\n+                            Files.delete(path);\n+                        }\n+                    } else {\n+                        try (InputStream in = ((Document) object).getContentStream().getStream()) {\n+                            java.nio.file.Files.copy(in, path,\n+                                    StandardCopyOption.REPLACE_EXISTING);\n+                        }\n+                    }\n+                } catch (CmisObjectNotFoundException e) {\n+                    if (writeOnClose) {\n+                        Files.delete(path);\n+                    }\n+                }\n+            } catch (IOException e) {\n+                throw new RuntimeException(e);\n+            }\n+\n+            return path;\n+        }\n+\n+        @Override\n+        public String getRelativePath() {\n+            return key;\n+        }\n+\n+        @Override\n+        public FileTime getLastModifiedTime() {\n+            final CmisObject object = CMISConfiguration.getClient().getObjectByPath(key);\n+            if (object == null) {\n+                return null;\n+            } else {\n+                return FileTime.from(object.getLastModificationDate().toInstant());\n+            }\n+        }\n+\n+        @Override\n+        public void abort() {\n+            writeOnClose = false;\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            if (path == null) {\n+                return;\n+            }\n+            if (writeOnClose && Files.isReadable(path)) {\n+                // Don't use caching for this process.\n+                OperationContext oc = CMISConfiguration.getClient().createOperationContext();\n+                oc.setCacheEnabled(false);\n+\n+                // Split the filename and parent folder from the key.\n+                int lastFolderDelimiterKeyIndex = key.lastIndexOf(CMISConfiguration.getFolderDelimiter());\n+                String filenameKey = key.substring(lastFolderDelimiterKeyIndex + 1);\n+                String parentKey = key.substring(0, lastFolderDelimiterKeyIndex);\n+\n+                Map<String, Object> properties = new HashMap<String, Object>();\n+                properties.put(PropertyIds.OBJECT_TYPE_ID, \"cmis:document\");\n+                properties.put(PropertyIds.NAME, filenameKey);\n+\n+                InputStream stream = Files.newInputStream(path);\n+                ContentStream contentStream = CMISConfiguration.getClient().getObjectFactory().createContentStream(key, Files.size(path), Files.probeContentType(path), stream);\n+\n+                if (CMISConfiguration.getClient().existsPath(key)) {\n+                    try {\n+                        // If the document is found then we are updating the existing document.\n+                        Document doc = (Document) CMISConfiguration.getClient().getObjectByPath(key, oc);\n+                        doc.updateProperties(properties, true);\n+                        doc.setContentStream(contentStream, true, true);\n+\n+                        Log.info(Geonet.RESOURCES,\n+                                String.format(\"Updated resource '%s'. Current version '%s'.\", key, doc.getVersionLabel()));\n+                    } catch (CmisPermissionDeniedException ex) {\n+                        Log.warning(Geonet.RESOURCES, String.format(\n+                                \"No permissions to update resource '%s'.\", key));\n+                        throw new NotAllowedException(String.format(\n+                                \"No permissions to update resource '%s'.\", key));\n+                    }\n+                } else {\n+                    // Get parent folder.\n+                    try {\n+                        Folder parentFolder;\n+                        try {\n+                            parentFolder = (Folder) CMISConfiguration.getClient().getObjectByPath(parentKey, oc);\n+                        } catch (CmisObjectNotFoundException e) {\n+                            // Create parent folder if it does not exists.\n+                            ObjectId objectId = CMISConfiguration.getClient().createPath(parentKey, \"cmis:folder\");\n+                            parentFolder = (Folder) CMISConfiguration.getClient().getObject(objectId, oc);\n+                        }\n+\n+                        Document doc = parentFolder.createDocument(properties, contentStream, VersioningState.MAJOR);\n+\n+                        Log.info(Geonet.RESOURCES,\n+                                String.format(\"Added resource '%s'.\", doc.getPaths().get(0)));\n+                    } catch (CmisPermissionDeniedException ex) {\n+                        Log.warning(Geonet.RESOURCES, String.format(\n+                                \"No permissions to add resource '%s'.\", key));\n+                        throw new NotAllowedException(String.format(\n+                                \"No permissions to add resource '%s'.\", key));\n+                    }\n+                }\n+            }\n+            java.nio.file.Files.delete(path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48d097638a137b8a2c9f0d5a4223714afc2c4633"}, "originalPosition": 470}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01c53763c11ef8276082bc4df5671b6680f439cf", "author": {"user": {"login": "ianwallen", "name": "Ian"}}, "url": "https://github.com/geonetwork/core-geonetwork/commit/01c53763c11ef8276082bc4df5671b6680f439cf", "committedDate": "2020-11-24T17:50:20Z", "message": "Applied corrections\n- Add missing headers\n- Add try finally block\n- Made repositoryId or repositoryName mandatory\n- Updated sample repository configuration to include externalResourceManagement parameters\n- removed unused code."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "173faa12e7b7c6fad63df3859ca60e1f28ddcf4b", "author": {"user": {"login": "ianwallen", "name": "Ian"}}, "url": "https://github.com/geonetwork/core-geonetwork/commit/173faa12e7b7c6fad63df3859ca60e1f28ddcf4b", "committedDate": "2020-11-26T23:55:22Z", "message": "Fixed bugs with loggo resources and other bugs. Removed null check after getObjectByPath since it will throw cmisObjectNotFoundException instead of setting it to null. Fixed cases where the approved flag was not set correctly and it was retrieving wrong data. - Also modified the get url so that it returned url with proper approval flag so it did not need to be done in javascript. - Also added metadataId to FilesystemStoreResource to make it easier to directly identify the metadata record. use temp folder instead of tempfile as the tempfile was causing weird filenames when we duplicated a metadata record or created a working copy Fixed a couple issue with the resources."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22da39d84ed9835dcd0aa4aa5e0de33968c4eb1b", "author": {"user": {"login": "ianwallen", "name": "Ian"}}, "url": "https://github.com/geonetwork/core-geonetwork/commit/22da39d84ed9835dcd0aa4aa5e0de33968c4eb1b", "committedDate": "2020-11-27T18:53:16Z", "message": "Fixed unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "349f44f87e529d11c259718831aae2524c9ff157", "author": {"user": {"login": "ianwallen", "name": "Ian"}}, "url": "https://github.com/geonetwork/core-geonetwork/commit/349f44f87e529d11c259718831aae2524c9ff157", "committedDate": "2020-11-30T13:42:49Z", "message": "Fix patch url to support case where url may already have a query string."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "028ed302ea8ef784d40ffbb78450e6450dc41078", "author": {"user": {"login": "ianwallen", "name": "Ian"}}, "url": "https://github.com/geonetwork/core-geonetwork/commit/028ed302ea8ef784d40ffbb78450e6450dc41078", "committedDate": "2020-11-30T19:41:35Z", "message": "Reverted changes related to the approved attachment url and appended the approved where required.\nOtherwise it was using the url in the resource and the resource should not have the approved parameter.\n\nRevert \"Fix patch url to support case where url may already have a query string.\"\n\nThis reverts commit 349f44f87e529d11c259718831aae2524c9ff157.\n\nRevert \"Fixed unit test\"\n\nThis reverts commit 22da39d84ed9835dcd0aa4aa5e0de33968c4eb1b."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzODUyMjE4", "url": "https://github.com/geonetwork/core-geonetwork/pull/5118#pullrequestreview-553852218", "createdAt": "2020-12-16T16:17:11Z", "commit": {"oid": "028ed302ea8ef784d40ffbb78450e6450dc41078"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1764, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}