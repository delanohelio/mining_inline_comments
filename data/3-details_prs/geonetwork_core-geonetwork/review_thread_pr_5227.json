{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwMDA2NTc1", "number": 5227, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNzozMTo0NVrOE--6Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNzozOTozMFrOE-_Cbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDc3ODM1OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/fao/geonet/api/processing/MInspireEtfValidateProcess.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNzozMTo0NVrOH8bRfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNzozMTo0NVrOH8bRfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEyMzQ1NQ==", "bodyText": "Should be checked for empty or null with StringUtils.isEmpty(mode)?", "url": "https://github.com/geonetwork/core-geonetwork/pull/5227#discussion_r533123455", "createdAt": "2020-12-01T07:31:45Z", "author": {"login": "josegar74"}, "path": "services/src/main/java/org/fao/geonet/api/processing/MInspireEtfValidateProcess.java", "diffHunk": "@@ -177,33 +179,65 @@ public Object doInTransaction(TransactionStatus transaction) throws Throwable {\n                                             }\n \n                                             if (applyCondition) {\n-                                                String testId = inspireValidatorUtils.submitFile(serviceContext, URL,\n-                                                    new ByteArrayInputStream(mdToValidate.getBytes()), entry.getKey(), record.getUuid());\n \n-                                                inspireValidatorUtils.waitUntilReady(serviceContext, URL, testId);\n-\n-                                                String reportUrl = inspireValidatorUtils.getReportUrl(URL, testId);\n-                                                String reportXmlUrl = InspireValidatorUtils.getReportUrlXML(URL, testId);\n-                                                String reportXml = inspireValidatorUtils.retrieveReport(serviceContext, reportXmlUrl);\n-\n-                                                String validationStatus = inspireValidatorUtils.isPassed(serviceContext, URL, testId);\n-\n-                                                MetadataValidationStatus metadataValidationStatus =\n-                                                    inspireValidatorUtils.calculateValidationStatus(validationStatus);\n-\n-                                                MetadataValidation metadataValidation = new MetadataValidation()\n-                                                    .setId(new MetadataValidationId(record.getId(), \"inspire\"))\n-                                                    .setStatus(metadataValidationStatus).setRequired(false)\n-                                                    .setReportUrl(reportUrl).setReportContent(reportXml);\n-\n-                                                metadataValidationRepository.save(metadataValidation);\n-\n-                                                //new RecordValidationTriggeredEvent(record.getId(),\n-                                                //    ApiUtils.getUserSession(request.getSession()).getUserIdAsInt(),\n-                                                //    metadataValidation.getStatus().getCode()).publish(appContext);\n-\n-                                                reindexMetadata = true;\n-                                                inspireMetadata = true;\n+                                                String testId = null;\n+                                                String getRecordByIdUrl = null;\n+                                                if (mode == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44f50ffb5dd3bc98b774d757614532e66a7318ac"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDc4NDQxOnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/fao/geonet/api/records/InspireValidationApi.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNzozNDowNlrOH8bVMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNzozNDowNlrOH8bVMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEyNDQwMg==", "bodyText": "Should be checked for empty or null with StringUtils.isEmpty(mode)?", "url": "https://github.com/geonetwork/core-geonetwork/pull/5227#discussion_r533124402", "createdAt": "2020-12-01T07:34:06Z", "author": {"login": "josegar74"}, "path": "services/src/main/java/org/fao/geonet/api/records/InspireValidationApi.java", "diffHunk": "@@ -197,49 +223,68 @@ String validateRecordForInspire(\n                 // TODO: Add support for such validation from not editing session ?\n             }\n \n-            // Use formatter to convert the record\n-            if (!schema.equals(\"iso19139\")) {\n-                try {\n-                    ServiceContext context = ApiUtils.createServiceContext(request);\n-                    Key key = new Key(metadata.getId(), \"eng\", FormatType.xml, \"iso19139\", true, FormatterWidth._100);\n-\n-                    final FormatterApi.FormatMetadata formatMetadata =\n-                        new FormatterApi().new FormatMetadata(context, key, nativeRequest);\n-                    final byte[] data = formatMetadata.call().data;\n-                    md = Xml.loadString(new String(data, StandardCharsets.UTF_8), false);\n-                } catch (Exception e) {\n-                    response.setStatus(HttpStatus.SC_NOT_FOUND);\n-                    return String.format(\"Metadata with id '%s' is in schema '%s'. No iso19139 formatter found. Error is %s\", id, schema, e.getMessage());\n+            if (mode == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44f50ffb5dd3bc98b774d757614532e66a7318ac"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDc5MDA4OnYy", "diffSide": "RIGHT", "path": "services/src/main/java/org/fao/geonet/api/records/editing/InspireValidatorUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNzozNjowOFrOH8bYng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNzozNjowOFrOH8bYng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEyNTI3OA==", "bodyText": "Can be removed?", "url": "https://github.com/geonetwork/core-geonetwork/pull/5227#discussion_r533125278", "createdAt": "2020-12-01T07:36:08Z", "author": {"login": "josegar74"}, "path": "services/src/main/java/org/fao/geonet/api/records/editing/InspireValidatorUtils.java", "diffHunk": "@@ -574,6 +585,41 @@ public String submitFile(ServiceContext context, String serviceEndpoint, InputSt\n         }\n     }\n \n+    /**\n+     * Submit URL to the external ETF validator.\n+     *\n+     * @param record    the record\n+     * @param testsuite\n+     * @return the string\n+     * @throws IOException   Signals that an I/O exception has occurred.\n+     * @throws JSONException the JSON exception\n+     */\n+    public String submitUrl(ServiceContext context, String serviceEndpoint, String getRecordById, String testsuite, String testTitle)\n+        throws IOException {\n+\n+        try {\n+            if (checkServiceStatus(context, serviceEndpoint)) {\n+                // Get the tests to execute\n+                List<String> tests = getTests(context, serviceEndpoint, testsuite);\n+                if (tests == null || tests.size() == 0) {\n+                    Log.error(Log.SERVICE,\n+                        \"Default test sequence not supported. Check org.fao.geonet.api.records.editing.InspireValidatorUtils.TESTS_TO_RUN_TG13.\",\n+                        new Exception());\n+                    return null;\n+                }\n+                // Return test id from Inspire service\n+                return testRun(context, serviceEndpoint, getRecordById, tests, testTitle);\n+\n+            } else {\n+                ServiceNotFoundEx ex = new ServiceNotFoundEx(serviceEndpoint);\n+                Log.error(Log.SERVICE, \"Service unavailable.\", ex);\n+                throw ex;\n+            }\n+        } finally {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44f50ffb5dd3bc98b774d757614532e66a7318ac"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDc5OTgyOnYy", "diffSide": "RIGHT", "path": "web-ui/src/main/resources/catalog/components/validationtools/partials/mdValidationTools.html", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNzozOTozMFrOH8beqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNzo0ODozMFrOH8butw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEyNjgyNw==", "bodyText": "I understand for now requires to update the UI to use the mode attribute? Would be good after merging the pull request to create an issue to improve this using a setting in a future pull request.", "url": "https://github.com/geonetwork/core-geonetwork/pull/5227#discussion_r533126827", "createdAt": "2020-12-01T07:39:30Z", "author": {"login": "josegar74"}, "path": "web-ui/src/main/resources/catalog/components/validationtools/partials/mdValidationTools.html", "diffHunk": "@@ -44,7 +44,12 @@\n             class=\"fa fa-chevron-right\"/>&nbsp;\n \n           <span>{{key}}</span>\n-      </a>\n+        </a>\n+        <!--", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44f50ffb5dd3bc98b774d757614532e66a7318ac"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEzMDkzNQ==", "bodyText": "Yep we have been discussing it with users and we don't really know what should be configurable and how. If using CSW, then record as to be public and if using a portal endpoint, then the record has to be published in that portal filter. So it adds some constraints that it can be hard to figure out by the end user. So upload is easier from that point of view. But yes the config can be added later on.", "url": "https://github.com/geonetwork/core-geonetwork/pull/5227#discussion_r533130935", "createdAt": "2020-12-01T07:48:30Z", "author": {"login": "fxprunayre"}, "path": "web-ui/src/main/resources/catalog/components/validationtools/partials/mdValidationTools.html", "diffHunk": "@@ -44,7 +44,12 @@\n             class=\"fa fa-chevron-right\"/>&nbsp;\n \n           <span>{{key}}</span>\n-      </a>\n+        </a>\n+        <!--", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEyNjgyNw=="}, "originalCommit": {"oid": "44f50ffb5dd3bc98b774d757614532e66a7318ac"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4231, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}