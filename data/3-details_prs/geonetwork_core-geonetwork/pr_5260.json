{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5MTcyNjYy", "number": 5260, "title": "Review ServiceContext resource leak", "bodyText": "This pull request introduce some logic to review handling of service context thread local, control using:\n-Djeeves.server.context.policy=TRACE\n\nThe default DIRECT policy reflects the 3.10.x handling of service context, TRACE logs any unexpected state (indicating possible resource leak), and STRICT throws an exception when enchanting an unexpected state.\nUsing this setting I have introduced try / finally logic around the use of ServiceContext with respect to thread local, examples are included in the javadocs of each method that creates a ServiceContext.\nExample:\ntry {\n     context = serviceMan.createServiceContext(\"AppHandler\", appContext);\n     context.setAsThreadLocal();\n     ...\n} finally {\n     context.clearAsThreadLocal();\n     context.clear();\n }\n\nExample of a method that creates a service context and allocates it to the current thread:\nServiceContext context = ApiUtils.createServiceContext(request, iso3langCode);\ntry {\n     ...\n}\nfinally {\n     serviceContext.clearAsThreadLocal();\n     serviceContext.clear();\n}\n\nThe use of clear is to help the garbage collector with explicitly setting to null ServiceContext fields when no longer in use.\n\nUse of finalize not considered as we want to control resource allocation\nUse of close considered for try-with-resource syntax but would of resulted in greater disruption to code base\nIn some cases a ServiceContext is shared over to another thread, so you may find a few examples of tasks where clear() is not called\nIn general the party making the serviceContext is responsible for cleaning up, add comments to document any examples where this is not the case\n\nUpdates:\n\nBranch has been rebased to avoid sharing a mess of experimenting\nTransactionManager updated with debug messages to check rolledBack and committed", "createdAt": "2020-12-14T06:21:44Z", "url": "https://github.com/geonetwork/core-geonetwork/pull/5260", "merged": true, "mergeCommit": {"oid": "2c125906a3ac04a43abd5a83118b00d333ce0e98"}, "closed": true, "closedAt": "2021-03-09T14:05:00Z", "author": {"login": "jodygarnett"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmALSOgBqjQxMDc0OTQwODU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd9J2YzABqjQzNjg4NDY2MjE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "56f4b104b0b4ee8f1371fb73e2b876d5f8cb750c", "author": {"user": {"login": "jodygarnett", "name": "Jody Garnett"}}, "url": "https://github.com/geonetwork/core-geonetwork/commit/56f4b104b0b4ee8f1371fb73e2b876d5f8cb750c", "committedDate": "2020-12-14T06:33:17Z", "message": "Skip image based tests that fail on macOS"}, "afterCommit": {"oid": "a3d4cdbe4c1b12da622a503a9be91f352ebba15c", "author": {"user": {"login": "jodygarnett", "name": "Jody Garnett"}}, "url": "https://github.com/geonetwork/core-geonetwork/commit/a3d4cdbe4c1b12da622a503a9be91f352ebba15c", "committedDate": "2020-12-14T06:57:30Z", "message": "Introduce try / finally service context cleanup to tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxMTM4NDM1", "url": "https://github.com/geonetwork/core-geonetwork/pull/5260#pullrequestreview-551138435", "createdAt": "2020-12-14T08:31:35Z", "commit": {"oid": "a3d4cdbe4c1b12da622a503a9be91f352ebba15c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwODozMTozNVrOIFFDpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwODozMTozNVrOIFFDpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE5NjY0Ng==", "bodyText": "This is pretty ugly coding, keeping a throwable in order to report back who called setAsThreadLocal() in case of future conflict (the approach may confuse debuggers configured to stop when a Throwable is created).", "url": "https://github.com/geonetwork/core-geonetwork/pull/5260#discussion_r542196646", "createdAt": "2020-12-14T08:31:35Z", "author": {"login": "jodygarnett"}, "path": "core/src/main/java/jeeves/server/context/ServiceContext.java", "diffHunk": "@@ -115,10 +160,168 @@ public static ServiceContext get() {\n \n     /**\n      * Called to set the Service context for this thread and inherited threads.\n+     *\n+     * If you call this method you are responsible for thread context management and {@link #clearAsThreadLocal()}.\n+     * <pre>\n+     * try {\n+     *     context.setAsThreadLocal();\n+     * }\n+     * finally {\n+     *     context.clearAsThreadLocal();\n+     * }\n+     * </pre>\n      */\n     public void setAsThreadLocal() {\n+        ServiceContext check = THREAD_LOCAL_INSTANCE.get();\n+\n+        if( POLICY == ThreadLocalPolicy.DIRECT || check == null){\n+            // step one set thread local\n+            THREAD_LOCAL_INSTANCE.set(this);\n+            // step two ensure ApplicationContextHolder thread local kept in sync\n+            ApplicationContextHolder.set(this.getApplicationContext());\n+            // step three details on allocation\n+            allocation = new Throwable(\"ServiceContext allocated to thread\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3d4cdbe4c1b12da622a503a9be91f352ebba15c"}, "originalPosition": 87}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MzczNDEy", "url": "https://github.com/geonetwork/core-geonetwork/pull/5260#pullrequestreview-556373412", "createdAt": "2020-12-21T13:20:59Z", "commit": {"oid": "a3d4cdbe4c1b12da622a503a9be91f352ebba15c"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMzoyMDo1OVrOIJYBuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMzozNjo0MlrOIJYfbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjcwMTc1Mw==", "bodyText": "This seem not used later.", "url": "https://github.com/geonetwork/core-geonetwork/pull/5260#discussion_r546701753", "createdAt": "2020-12-21T13:20:59Z", "author": {"login": "josegar74"}, "path": "core/src/main/java/jeeves/transaction/TransactionManager.java", "diffHunk": "@@ -77,25 +80,57 @@\n             if (exception[0] == null) {\n                 exception[0] = e;\n             }\n-            rolledBack = true;\n-            doRollback(context, transactionManager, transaction);\n+\n+            try {\n+                doRollback(context, transactionManager, transaction);\n+            }\n+            finally {\n+                rolledBack = true;\n+            }\n         } finally {\n             try {\n-                if (readOnly) {\n-                    doRollback(context, transactionManager, transaction);\n+                if (readOnly && !rolledBack) {\n+                    try {\n+                        doRollback(context, transactionManager, transaction);\n+                    }\n+                    finally {\n+                        rolledBack = true;\n+                    }\n                 } else if (!rolledBack && (isNewTransaction || commitBehavior == CommitBehavior.ALWAYS_COMMIT)) {\n                     doCommit(context, transactionManager, transaction);\n                 }\n             } catch (TransactionSystemException e) {\n                 if (!(e.getOriginalException() instanceof RollbackException)) {\n                     Log.error(Log.JEEVES, \"ERROR committing transaction, will try to rollback\", e);\n-                    doRollback(context, transactionManager, transaction);\n+                    if (!rolledBack) {\n+                        try {\n+                            doRollback(context, transactionManager, transaction);\n+                        }\n+                        finally {\n+                            rolledBack = true;\n+                        }\n+                    }\n                 } else {\n                     Log.debug(Log.JEEVES, \"ERROR committing transaction, will try to rollback\", e);\n+                    if (!rolledBack) {\n+                        try {\n+                            doRollback(context, transactionManager, transaction);\n+                        }\n+                        finally {\n+                            rolledBack = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3d4cdbe4c1b12da622a503a9be91f352ebba15c"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjcwMTg1OA==", "bodyText": "This seem not used later.", "url": "https://github.com/geonetwork/core-geonetwork/pull/5260#discussion_r546701858", "createdAt": "2020-12-21T13:21:13Z", "author": {"login": "josegar74"}, "path": "core/src/main/java/jeeves/transaction/TransactionManager.java", "diffHunk": "@@ -77,25 +80,57 @@\n             if (exception[0] == null) {\n                 exception[0] = e;\n             }\n-            rolledBack = true;\n-            doRollback(context, transactionManager, transaction);\n+\n+            try {\n+                doRollback(context, transactionManager, transaction);\n+            }\n+            finally {\n+                rolledBack = true;\n+            }\n         } finally {\n             try {\n-                if (readOnly) {\n-                    doRollback(context, transactionManager, transaction);\n+                if (readOnly && !rolledBack) {\n+                    try {\n+                        doRollback(context, transactionManager, transaction);\n+                    }\n+                    finally {\n+                        rolledBack = true;\n+                    }\n                 } else if (!rolledBack && (isNewTransaction || commitBehavior == CommitBehavior.ALWAYS_COMMIT)) {\n                     doCommit(context, transactionManager, transaction);\n                 }\n             } catch (TransactionSystemException e) {\n                 if (!(e.getOriginalException() instanceof RollbackException)) {\n                     Log.error(Log.JEEVES, \"ERROR committing transaction, will try to rollback\", e);\n-                    doRollback(context, transactionManager, transaction);\n+                    if (!rolledBack) {\n+                        try {\n+                            doRollback(context, transactionManager, transaction);\n+                        }\n+                        finally {\n+                            rolledBack = true;\n+                        }\n+                    }\n                 } else {\n                     Log.debug(Log.JEEVES, \"ERROR committing transaction, will try to rollback\", e);\n+                    if (!rolledBack) {\n+                        try {\n+                            doRollback(context, transactionManager, transaction);\n+                        }\n+                        finally {\n+                            rolledBack = true;\n+                        }\n+                    }\n                 }\n             } catch (Throwable t) {\n                 Log.error(Log.JEEVES, \"ERROR committing transaction, will try to rollback\", t);\n-                doRollback(context, transactionManager, transaction);\n+                if (!rolledBack) {\n+                    try {\n+                        doRollback(context, transactionManager, transaction);\n+                    }\n+                    finally {\n+                        rolledBack = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3d4cdbe4c1b12da622a503a9be91f352ebba15c"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjcwMTk1OQ==", "bodyText": "This seem not used later.", "url": "https://github.com/geonetwork/core-geonetwork/pull/5260#discussion_r546701959", "createdAt": "2020-12-21T13:21:27Z", "author": {"login": "josegar74"}, "path": "core/src/main/java/jeeves/transaction/TransactionManager.java", "diffHunk": "@@ -77,25 +80,57 @@\n             if (exception[0] == null) {\n                 exception[0] = e;\n             }\n-            rolledBack = true;\n-            doRollback(context, transactionManager, transaction);\n+\n+            try {\n+                doRollback(context, transactionManager, transaction);\n+            }\n+            finally {\n+                rolledBack = true;\n+            }\n         } finally {\n             try {\n-                if (readOnly) {\n-                    doRollback(context, transactionManager, transaction);\n+                if (readOnly && !rolledBack) {\n+                    try {\n+                        doRollback(context, transactionManager, transaction);\n+                    }\n+                    finally {\n+                        rolledBack = true;\n+                    }\n                 } else if (!rolledBack && (isNewTransaction || commitBehavior == CommitBehavior.ALWAYS_COMMIT)) {\n                     doCommit(context, transactionManager, transaction);\n                 }\n             } catch (TransactionSystemException e) {\n                 if (!(e.getOriginalException() instanceof RollbackException)) {\n                     Log.error(Log.JEEVES, \"ERROR committing transaction, will try to rollback\", e);\n-                    doRollback(context, transactionManager, transaction);\n+                    if (!rolledBack) {\n+                        try {\n+                            doRollback(context, transactionManager, transaction);\n+                        }\n+                        finally {\n+                            rolledBack = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3d4cdbe4c1b12da622a503a9be91f352ebba15c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjcwMjg4NA==", "bodyText": "Is the intention that the code continues?", "url": "https://github.com/geonetwork/core-geonetwork/pull/5260#discussion_r546702884", "createdAt": "2020-12-21T13:23:32Z", "author": {"login": "josegar74"}, "path": "core/src/main/java/jeeves/transaction/TransactionManager.java", "diffHunk": "@@ -113,43 +148,158 @@\n \n     protected static void doCommit(ApplicationContext context, PlatformTransactionManager transactionManager, TransactionStatus transaction) {\n \n-        for (BeforeCommitTransactionListener listener : context.getBeansOfType(BeforeCommitTransactionListener.class).values()) {\n-            listener.beforeCommit(transaction);\n+        try {\n+            fireBeforeCommit(context, transactionManager, transaction);\n+        }\n+        catch( Throwable t ){\n+            Log.warning(Log.JEEVES, \"Commit transaction - before:\", t);\n+        }\n+        try {\n+            transactionManager.commit(transaction);\n+        }\n+        finally {\n+            try {\n+                fireAfterCommit(context, transactionManager, transaction);\n+            }\n+            catch( Throwable t) {\n+                Log.warning(Log.JEEVES, \"Commit transaction - after:\", t);\n+            }\n+        }\n+    }\n+\n+    private static void fireAfterCommit(ApplicationContext context,\n+                                         PlatformTransactionManager transactionManager,\n+                                         @Nullable TransactionStatus transaction) throws Throwable {\n+        Throwable afterCommitFailure = null;\n+\n+        Collection<AfterCommitTransactionListener> listeners = context.getBeansOfType\n+            (AfterCommitTransactionListener.class).values();\n+        for (AfterCommitTransactionListener listener : listeners) {\n+            try {\n+                listener.afterCommit(transaction);\n+            }\n+            catch (Throwable t){\n+                Log.debug(Log.JEEVES, \"Listener \"+listener.toString()+\" newTransaction callback failed: \"+ t);\n+                afterCommitFailure = t;\n+            }\n+        }\n+        if (afterCommitFailure != null){\n+            throw afterCommitFailure;\n         }\n+    }\n \n-        transactionManager.commit(transaction);\n+    private static void fireBeforeCommit(ApplicationContext context,\n+                                           PlatformTransactionManager transactionManager,\n+                                           @Nullable TransactionStatus transaction) throws Throwable {\n+        Throwable beforeCommitFailure = null;\n \n-        for (AfterCommitTransactionListener listener : context.getBeansOfType(AfterCommitTransactionListener.class).values()) {\n-            listener.afterCommit(transaction);\n+        Collection<BeforeCommitTransactionListener> listeners = context.getBeansOfType\n+            (BeforeCommitTransactionListener.class).values();\n+        for (BeforeCommitTransactionListener listener : listeners) {\n+            try {\n+                listener.beforeCommit(transaction);\n+            }\n+            catch (Throwable t){\n+                Log.debug(Log.JEEVES, \"Listener \"+listener.toString()+\" newTransaction callback failed: \"+ t);\n+                beforeCommitFailure = t;\n+            }\n+        }\n+        if (beforeCommitFailure != null){\n+            throw beforeCommitFailure;\n         }\n     }\n \n+    private static void fireNewTransaction(ApplicationContext context,\n+                                          PlatformTransactionManager transactionManager,\n+                                          @Nullable TransactionStatus transaction) throws Throwable {\n+        Throwable newTransactionFailure = null;\n+\n+        Collection<NewTransactionListener> listeners = context.getBeansOfType\n+            (NewTransactionListener.class).values();\n+        for (NewTransactionListener listener : listeners) {\n+            try {\n+                listener.newTransaction(transaction);\n+            }\n+            catch (Throwable t){\n+                Log.debug(Log.JEEVES, \"Listener \"+listener.toString()+\" newTransaction callback failed: \"+ t);\n+                newTransactionFailure = t;\n+            }\n+        }\n+        if (newTransactionFailure != null){\n+            throw newTransactionFailure;\n+        }\n+    }\n+\n+    private static void fireAfterRollback(ApplicationContext context,\n+                                    PlatformTransactionManager transactionManager,\n+                                    @Nullable TransactionStatus transaction) throws Throwable {\n+        Throwable afterRollbackFailure = null;\n+\n+        Collection<AfterRollbackTransactionListener> listeners = context.getBeansOfType\n+            (AfterRollbackTransactionListener.class).values();\n+        for (AfterRollbackTransactionListener listener : listeners) {\n+            try {\n+                listener.afterRollback(transaction);\n+            }\n+            catch (Throwable t){\n+                Log.debug(Log.JEEVES, \"Listener \"+listener.toString()+\" afterRollback callback failed: \"+ t);\n+                afterRollbackFailure = t;\n+            }\n+        }\n+        if (afterRollbackFailure != null){\n+            throw afterRollbackFailure;\n+        }\n+    }\n+\n+    private static void fireBeforeRollback(ApplicationContext context,\n+                                           PlatformTransactionManager transactionManager,\n+                                           @Nullable TransactionStatus transaction) throws Throwable {\n+        Throwable beforeRollbackFailure = null;\n+\n+        Collection<BeforeRollbackTransactionListener> listeners = context.getBeansOfType\n+            (BeforeRollbackTransactionListener.class).values();\n+        for (BeforeRollbackTransactionListener listener : listeners) {\n+            try {\n+                listener.beforeRollback(transaction);\n+            }\n+            catch (Throwable t){\n+                Log.debug(Log.JEEVES, \"Listener \"+listener.toString()+\" beforeRollback callback failed: \"+ t);\n+                beforeRollbackFailure = t;\n+            }\n+        }\n+        if (beforeRollbackFailure != null){\n+            throw beforeRollbackFailure;\n+        }\n+    }\n+\n+\n     private static void doRollback(ApplicationContext context,\n                                    PlatformTransactionManager transactionManager,\n                                    @Nullable TransactionStatus transaction) {\n+        if ( transaction == null || transaction.isCompleted()){\n+            // nothing to do", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3d4cdbe4c1b12da622a503a9be91f352ebba15c"}, "originalPosition": 218}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjcwNDM3Mg==", "bodyText": "In previous code when a listener failed, seem no further processing, now all are processed and thrown the exception of the last one that fails. It can be fine, but want to confirm that is the intention.", "url": "https://github.com/geonetwork/core-geonetwork/pull/5260#discussion_r546704372", "createdAt": "2020-12-21T13:26:26Z", "author": {"login": "josegar74"}, "path": "core/src/main/java/jeeves/transaction/TransactionManager.java", "diffHunk": "@@ -113,43 +148,158 @@\n \n     protected static void doCommit(ApplicationContext context, PlatformTransactionManager transactionManager, TransactionStatus transaction) {\n \n-        for (BeforeCommitTransactionListener listener : context.getBeansOfType(BeforeCommitTransactionListener.class).values()) {\n-            listener.beforeCommit(transaction);\n+        try {\n+            fireBeforeCommit(context, transactionManager, transaction);\n+        }\n+        catch( Throwable t ){\n+            Log.warning(Log.JEEVES, \"Commit transaction - before:\", t);\n+        }\n+        try {\n+            transactionManager.commit(transaction);\n+        }\n+        finally {\n+            try {\n+                fireAfterCommit(context, transactionManager, transaction);\n+            }\n+            catch( Throwable t) {\n+                Log.warning(Log.JEEVES, \"Commit transaction - after:\", t);\n+            }\n+        }\n+    }\n+\n+    private static void fireAfterCommit(ApplicationContext context,\n+                                         PlatformTransactionManager transactionManager,\n+                                         @Nullable TransactionStatus transaction) throws Throwable {\n+        Throwable afterCommitFailure = null;\n+\n+        Collection<AfterCommitTransactionListener> listeners = context.getBeansOfType\n+            (AfterCommitTransactionListener.class).values();\n+        for (AfterCommitTransactionListener listener : listeners) {\n+            try {\n+                listener.afterCommit(transaction);\n+            }\n+            catch (Throwable t){\n+                Log.debug(Log.JEEVES, \"Listener \"+listener.toString()+\" newTransaction callback failed: \"+ t);\n+                afterCommitFailure = t;\n+            }\n+        }\n+        if (afterCommitFailure != null){\n+            throw afterCommitFailure;\n         }\n+    }\n \n-        transactionManager.commit(transaction);\n+    private static void fireBeforeCommit(ApplicationContext context,\n+                                           PlatformTransactionManager transactionManager,\n+                                           @Nullable TransactionStatus transaction) throws Throwable {\n+        Throwable beforeCommitFailure = null;\n \n-        for (AfterCommitTransactionListener listener : context.getBeansOfType(AfterCommitTransactionListener.class).values()) {\n-            listener.afterCommit(transaction);\n+        Collection<BeforeCommitTransactionListener> listeners = context.getBeansOfType\n+            (BeforeCommitTransactionListener.class).values();\n+        for (BeforeCommitTransactionListener listener : listeners) {\n+            try {\n+                listener.beforeCommit(transaction);\n+            }\n+            catch (Throwable t){\n+                Log.debug(Log.JEEVES, \"Listener \"+listener.toString()+\" newTransaction callback failed: \"+ t);\n+                beforeCommitFailure = t;\n+            }\n+        }\n+        if (beforeCommitFailure != null){\n+            throw beforeCommitFailure;\n         }\n     }\n \n+    private static void fireNewTransaction(ApplicationContext context,\n+                                          PlatformTransactionManager transactionManager,\n+                                          @Nullable TransactionStatus transaction) throws Throwable {\n+        Throwable newTransactionFailure = null;\n+\n+        Collection<NewTransactionListener> listeners = context.getBeansOfType\n+            (NewTransactionListener.class).values();\n+        for (NewTransactionListener listener : listeners) {\n+            try {\n+                listener.newTransaction(transaction);\n+            }\n+            catch (Throwable t){\n+                Log.debug(Log.JEEVES, \"Listener \"+listener.toString()+\" newTransaction callback failed: \"+ t);\n+                newTransactionFailure = t;\n+            }\n+        }\n+        if (newTransactionFailure != null){\n+            throw newTransactionFailure;\n+        }\n+    }\n+\n+    private static void fireAfterRollback(ApplicationContext context,\n+                                    PlatformTransactionManager transactionManager,\n+                                    @Nullable TransactionStatus transaction) throws Throwable {\n+        Throwable afterRollbackFailure = null;\n+\n+        Collection<AfterRollbackTransactionListener> listeners = context.getBeansOfType\n+            (AfterRollbackTransactionListener.class).values();\n+        for (AfterRollbackTransactionListener listener : listeners) {\n+            try {\n+                listener.afterRollback(transaction);\n+            }\n+            catch (Throwable t){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3d4cdbe4c1b12da622a503a9be91f352ebba15c"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjcwNzM5NA==", "bodyText": "To confirm no need to call _context.clear() as this code runs in a custom thread?", "url": "https://github.com/geonetwork/core-geonetwork/pull/5260#discussion_r546707394", "createdAt": "2020-12-21T13:32:47Z", "author": {"login": "josegar74"}, "path": "core/src/main/java/org/fao/geonet/kernel/IndexMetadataTask.java", "diffHunk": "@@ -125,6 +125,7 @@ public void run() {\n             Log.error(Geonet.INDEX_ENGINE, \"Error occurred indexing metadata\", e);\n         } finally {\n             _batchIndex.remove(this);\n+            _context.clearAsThreadLocal();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3d4cdbe4c1b12da622a503a9be91f352ebba15c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjcwODYxNg==", "bodyText": "I see some code in the API package creating a ServiceContext, but not calling the clear method at the end (for example: \n  \n    \n      core-geonetwork/services/src/main/java/org/fao/geonet/api/groups/GroupsApi.java\n    \n    \n        Lines 189 to 258\n      in\n      23910ce\n    \n    \n    \n    \n\n        \n          \n           public void getGroupLogo( \n        \n\n        \n          \n               @ApiParam(value = \"Group identifier\", required = true) @PathVariable(value = \"groupId\") final Integer groupId, \n        \n\n        \n          \n               @ApiIgnore final WebRequest webRequest, \n        \n\n        \n          \n               HttpServletRequest request, \n        \n\n        \n          \n               HttpServletResponse response) throws ResourceNotFoundException { \n        \n\n        \n          \n            \n        \n\n        \n          \n               Locale locale = languageUtils.parseAcceptLanguage(request.getLocales()); \n        \n\n        \n          \n            \n        \n\n        \n          \n               ApplicationContext context = ApplicationContextHolder.get(); \n        \n\n        \n          \n               ServiceContext serviceContext = ApiUtils.createServiceContext(request, locale.getISO3Country()); \n        \n\n        \n          \n               if (context == null) { \n        \n\n        \n          \n                   throw new RuntimeException(\"ServiceContext not available\"); \n        \n\n        \n          \n               } \n        \n\n        \n          \n            \n        \n\n        \n          \n               Group group = groupRepository.findOne(groupId); \n        \n\n        \n          \n               if (group == null) { \n        \n\n        \n          \n                   throw new ResourceNotFoundException(messages.getMessage(\"api.groups.group_not_found\", new \n        \n\n        \n          \n                       Object[]{groupId}, locale)); \n        \n\n        \n          \n               } \n        \n\n        \n          \n               try { \n        \n\n        \n          \n                   final Resources resources = context.getBean(Resources.class); \n        \n\n        \n          \n                   final String logoUUID = group.getLogo(); \n        \n\n        \n          \n                   if (StringUtils.isNotBlank(logoUUID) && !logoUUID.startsWith(\"http://\") && !logoUUID.startsWith(\"https//\")) { \n        \n\n        \n          \n                       try (Resources.ResourceHolder image = getImage(resources, serviceContext, group)){ \n        \n\n        \n          \n                           if (image != null) { \n        \n\n        \n          \n                               FileTime lastModifiedTime = image.getLastModifiedTime(); \n        \n\n        \n          \n                               response.setDateHeader(\"Expires\", System.currentTimeMillis() + SIX_HOURS * 1000L); \n        \n\n        \n          \n                               if (webRequest.checkNotModified(lastModifiedTime.toMillis())) { \n        \n\n        \n          \n                                   // webRequest.checkNotModified sets the right HTTP headers \n        \n\n        \n          \n                                   return; \n        \n\n        \n          \n                               } \n        \n\n        \n          \n                               response.setContentType(AttachmentsApi.getFileContentType(image.getPath())); \n        \n\n        \n          \n                               response.setContentLength((int) Files.size(image.getPath())); \n        \n\n        \n          \n                               response.addHeader(\"Cache-Control\", \"max-age=\" + SIX_HOURS + \", public\"); \n        \n\n        \n          \n                               FileUtils.copyFile(image.getPath().toFile(), response.getOutputStream()); \n        \n\n        \n          \n                               return; \n        \n\n        \n          \n                           } \n        \n\n        \n          \n                       } \n        \n\n        \n          \n                   } \n        \n\n        \n          \n            \n        \n\n        \n          \n                   // no logo image found. Return a transparent 1x1 png \n        \n\n        \n          \n                   FileTime lastModifiedTime = FileTime.fromMillis(0); \n        \n\n        \n          \n                   if (webRequest.checkNotModified(lastModifiedTime.toMillis())) { \n        \n\n        \n          \n                       return; \n        \n\n        \n          \n                   } \n        \n\n        \n          \n                   response.setContentType(\"image/png\"); \n        \n\n        \n          \n                   response.setContentLength(TRANSPARENT_1_X_1_PNG.length); \n        \n\n        \n          \n                   response.addHeader(\"Cache-Control\", \"max-age=\" + SIX_HOURS + \", public\"); \n        \n\n        \n          \n                   response.getOutputStream().write(TRANSPARENT_1_X_1_PNG); \n        \n\n        \n          \n            \n        \n\n        \n          \n               } catch (IOException e) { \n        \n\n        \n          \n                   Log.error(LOGGER, String.format(\"There was an error accessing the logo of the group with id '%d'\", \n        \n\n        \n          \n                       groupId)); \n        \n\n        \n          \n                   throw new RuntimeException(e); \n        \n\n        \n          \n               } \n        \n\n        \n          \n           } \n        \n\n        \n          \n            \n        \n\n        \n          \n           private static Resources.ResourceHolder getImage(Resources resources, ServiceContext serviceContext, Group group) throws IOException { \n        \n\n        \n          \n               final Path logosDir = resources.locateLogosDir(serviceContext); \n        \n\n        \n          \n               final Path harvesterLogosDir = resources.locateHarvesterLogosDir(serviceContext); \n        \n\n        \n          \n               final String logoUUID = group.getLogo(); \n        \n\n        \n          \n               Resources.ResourceHolder image = null; \n        \n\n        \n          \n               if (StringUtils.isNotBlank(logoUUID) && !logoUUID.startsWith(\"http://\") && !logoUUID.startsWith(\"https//\")) { \n        \n\n        \n          \n                   image = resources.getImage(serviceContext, logoUUID, logosDir); \n        \n\n        \n          \n                   if (image == null) { \n        \n\n        \n          \n                       image = resources.getImage(serviceContext, logoUUID, harvesterLogosDir); \n        \n\n        \n          \n                   } \n        \n\n        \n          \n               } \n        \n\n        \n          \n               return image; \n        \n\n        \n          \n           } \n        \n    \n  \n\n)\nIs this due to the way of creating the ServiceContext (serviceManager.createServiceContext vs ApiUtils.createServiceContext)?", "url": "https://github.com/geonetwork/core-geonetwork/pull/5260#discussion_r546708616", "createdAt": "2020-12-21T13:35:13Z", "author": {"login": "josegar74"}, "path": "services/src/main/java/org/fao/geonet/api/records/formatters/Register.java", "diffHunk": "@@ -145,6 +145,7 @@ public JSONObject serviceSpecificExec(HttpServletRequest request,\n             return response;\n         } finally {\n             IO.deleteFile(uploadedFile, false, Geonet.FORMATTER);\n+            context.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3d4cdbe4c1b12da622a503a9be91f352ebba15c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjcwOTM1OA==", "bodyText": "This code seem more for testing?", "url": "https://github.com/geonetwork/core-geonetwork/pull/5260#discussion_r546709358", "createdAt": "2020-12-21T13:36:42Z", "author": {"login": "josegar74"}, "path": "web/src/main/java/org/fao/geonet/GeonetworkHttpSessionListener.java", "diffHunk": "@@ -0,0 +1,111 @@\n+//=============================================================================\n+//===\tCopyright (C) 2001-2007 Food and Agriculture Organization of the\n+//===\tUnited Nations (FAO-UN), United Nations World Food Programme (WFP)\n+//===\tand United Nations Environment Programme (UNEP)\n+//===\n+//===\tThis program is free software; you can redistribute it and/or modify\n+//===\tit under the terms of the GNU General Public License as published by\n+//===\tthe Free Software Foundation; either version 2 of the License, or (at\n+//===\tyour option) any later version.\n+//===\n+//===\tThis program is distributed in the hope that it will be useful, but\n+//===\tWITHOUT ANY WARRANTY; without even the implied warranty of\n+//===\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+//===\tGeneral Public License for more details.\n+//===\n+//===\tYou should have received a copy of the GNU General Public License\n+//===\talong with this program; if not, write to the Free Software\n+//===\tFoundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA\n+//===\n+//===\tContact: Jeroen Ticheler - FAO - Viale delle Terme di Caracalla 2,\n+//===\tRome - Italy. email: geonetwork@osgeo.org\n+//==============================================================================\n+package org.fao.geonet;\n+\n+import jeeves.config.springutil.JeevesApplicationContext;\n+import jeeves.constants.Jeeves;\n+import jeeves.server.UserSession;\n+import org.fao.geonet.utils.Log;\n+\n+import javax.servlet.ServletContext;\n+import javax.servlet.http.HttpSession;\n+import javax.servlet.http.HttpSessionEvent;\n+import javax.servlet.http.HttpSessionListener;\n+import java.util.Enumeration;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Used to keep track of the number of active sessions.\\\n+ */\n+public class GeonetworkHttpSessionListener implements HttpSessionListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3d4cdbe4c1b12da622a503a9be91f352ebba15c"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2NzM3OTY3", "url": "https://github.com/geonetwork/core-geonetwork/pull/5260#pullrequestreview-556737967", "createdAt": "2020-12-22T00:03:38Z", "commit": {"oid": "a3d4cdbe4c1b12da622a503a9be91f352ebba15c"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fbd3e5bbf81c1c4bbd4dde36155ca557bc1afbb8", "author": {"user": {"login": "jodygarnett", "name": "Jody Garnett"}}, "url": "https://github.com/geonetwork/core-geonetwork/commit/fbd3e5bbf81c1c4bbd4dde36155ca557bc1afbb8", "committedDate": "2020-12-22T06:13:19Z", "message": "Check rollBack and committed with additional log messages"}, "afterCommit": {"oid": "9cebf79164064053563624e367a26a52a109c387", "author": {"user": {"login": "jodygarnett", "name": "Jody Garnett"}}, "url": "https://github.com/geonetwork/core-geonetwork/commit/9cebf79164064053563624e367a26a52a109c387", "committedDate": "2021-01-05T20:20:07Z", "message": "Introduce try / finally service context cleanup to tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "06692d78096c93322210778541e20cf6521ca2e3", "author": {"user": {"login": "jodygarnett", "name": "Jody Garnett"}}, "url": "https://github.com/geonetwork/core-geonetwork/commit/06692d78096c93322210778541e20cf6521ca2e3", "committedDate": "2021-01-05T22:07:58Z", "message": "Default to TRACE logging unusual service context use\n\nFor backport use of DIRECT is recommended."}, "afterCommit": {"oid": "a908c404ad2563809a67a9ebe71a3ce507531ef7", "author": {"user": {"login": "jodygarnett", "name": "Jody Garnett"}}, "url": "https://github.com/geonetwork/core-geonetwork/commit/a908c404ad2563809a67a9ebe71a3ce507531ef7", "committedDate": "2021-01-08T15:35:37Z", "message": "Default to TRACE logging unusual service context use\n\nFor backport use of DIRECT is recommended."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0MzgxNTgw", "url": "https://github.com/geonetwork/core-geonetwork/pull/5260#pullrequestreview-564381580", "createdAt": "2021-01-08T16:07:02Z", "commit": {"oid": "a908c404ad2563809a67a9ebe71a3ce507531ef7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28605f0b877e44ea7fe5c31661b094e160382973", "author": {"user": {"login": "jodygarnett", "name": "Jody Garnett"}}, "url": "https://github.com/geonetwork/core-geonetwork/commit/28605f0b877e44ea7fe5c31661b094e160382973", "committedDate": "2021-02-23T22:17:37Z", "message": "Add debug logging for HTTP session created / destroyed\n\nUsed to track potential service context leaks."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8103a85dd637545b8ab5ef75f0c4b17bf745622", "author": {"user": {"login": "jodygarnett", "name": "Jody Garnett"}}, "url": "https://github.com/geonetwork/core-geonetwork/commit/b8103a85dd637545b8ab5ef75f0c4b17bf745622", "committedDate": "2021-02-23T22:17:55Z", "message": "ServiceLocator API contract for setAsThreadLocal() / clearAsThreadLocal() / clear()\n\nDocument api contract with respect to clearing up thread local use."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fad3719aea04704cd7fee77b5d6333bc033a5f62", "author": {"user": {"login": "jodygarnett", "name": "Jody Garnett"}}, "url": "https://github.com/geonetwork/core-geonetwork/commit/fad3719aea04704cd7fee77b5d6333bc033a5f62", "committedDate": "2021-02-24T00:05:18Z", "message": "Introduce try / finally managmeent of ServiceContext"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "210b97b3d149bc504475f0de966060190d3e1a42", "author": {"user": {"login": "jodygarnett", "name": "Jody Garnett"}}, "url": "https://github.com/geonetwork/core-geonetwork/commit/210b97b3d149bc504475f0de966060190d3e1a42", "committedDate": "2021-02-24T00:08:28Z", "message": "Clear XFrameOptionsFilter cache"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a908c404ad2563809a67a9ebe71a3ce507531ef7", "author": {"user": {"login": "jodygarnett", "name": "Jody Garnett"}}, "url": "https://github.com/geonetwork/core-geonetwork/commit/a908c404ad2563809a67a9ebe71a3ce507531ef7", "committedDate": "2021-01-08T15:35:37Z", "message": "Default to TRACE logging unusual service context use\n\nFor backport use of DIRECT is recommended."}, "afterCommit": {"oid": "e3fc0b3310f9a4d8889005c968a7c90ebfb8d66e", "author": {"user": {"login": "jodygarnett", "name": "Jody Garnett"}}, "url": "https://github.com/geonetwork/core-geonetwork/commit/e3fc0b3310f9a4d8889005c968a7c90ebfb8d66e", "committedDate": "2021-02-24T00:22:48Z", "message": "Default to TRACE logging unusual service context use\n\nFor backport use of DIRECT is recommended."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f98fb566bc604e5eb609a389b65889cd062b946b", "author": {"user": {"login": "jodygarnett", "name": "Jody Garnett"}}, "url": "https://github.com/geonetwork/core-geonetwork/commit/f98fb566bc604e5eb609a389b65889cd062b946b", "committedDate": "2021-02-24T05:14:25Z", "message": "Introduce try / finally service context cleanup to tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9acb3fb8264b56bd8db3ecc546c6221f9dbe115e", "author": {"user": {"login": "jodygarnett", "name": "Jody Garnett"}}, "url": "https://github.com/geonetwork/core-geonetwork/commit/9acb3fb8264b56bd8db3ecc546c6221f9dbe115e", "committedDate": "2021-02-24T05:14:41Z", "message": "Default to TRACE logging unusual service context use\n\nFor backport use of DIRECT is recommended."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1aa81bab807122649d7e6e159533e2fda7b54846", "author": {"user": {"login": "jodygarnett", "name": "Jody Garnett"}}, "url": "https://github.com/geonetwork/core-geonetwork/commit/1aa81bab807122649d7e6e159533e2fda7b54846", "committedDate": "2021-02-24T00:37:42Z", "message": "compile error"}, "afterCommit": {"oid": "9acb3fb8264b56bd8db3ecc546c6221f9dbe115e", "author": {"user": {"login": "jodygarnett", "name": "Jody Garnett"}}, "url": "https://github.com/geonetwork/core-geonetwork/commit/9acb3fb8264b56bd8db3ecc546c6221f9dbe115e", "committedDate": "2021-02-24T05:14:41Z", "message": "Default to TRACE logging unusual service context use\n\nFor backport use of DIRECT is recommended."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1720, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}