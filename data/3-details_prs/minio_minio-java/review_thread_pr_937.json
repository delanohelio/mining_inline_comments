{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4NDM5Njc3", "number": 937, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwODo1OToyOVrOD8ymkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNTozOTozMlrOEEWlEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDcwMjI0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/ListIncompleteUploadsBucketArgs.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwODo1OToyOVrOGV8cVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwODo1OToyOVrOGV8cVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY2MzU3Mw==", "bodyText": "We would need to sync name with API i.e. ListIncompleteUploadsArgs is more appropriate.", "url": "https://github.com/minio/minio-java/pull/937#discussion_r425663573", "createdAt": "2020-05-15T08:59:29Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/ListIncompleteUploadsBucketArgs.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.minio;\n+\n+/** Argument class of @see #listIncompleteUploads(ListIncompleteUploadsBucketArgs args). */\n+public class ListIncompleteUploadsBucketArgs extends BucketArgs {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9242386f8cabd23d412d53c7729fb8f45e896abe"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDYyMjU0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/ListIncompleteUploadsBucketArgs.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwODo0NTo1M1rOGYBcIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwODo0NTo1M1rOGYBcIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg0MjU5NA==", "bodyText": "License header to be added.", "url": "https://github.com/minio/minio-java/pull/937#discussion_r427842594", "createdAt": "2020-05-20T08:45:53Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/ListIncompleteUploadsBucketArgs.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.minio;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "562c157fffa506214c7484e373a1cc49b7dfb398"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDY4NjAxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/MinioClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwOTowMTo0OFrOGYCFgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwOTowMTo0OFrOGYCFgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg1MzE4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @return Iterable&ltResult&ltUpload&gt&gt - Lazy iterator contains object upload information.\n          \n          \n            \n               * @return Iterable&lt;Result&lt;Upload&gt;&gt; - Lazy iterator contains object upload information.", "url": "https://github.com/minio/minio-java/pull/937#discussion_r427853187", "createdAt": "2020-05-20T09:01:48Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -4450,12 +4458,36 @@ public void removeAllBucketNotification(String bucketName)\n    * @param prefix Object name starts with prefix.\n    * @param recursive List recursively than directory structure emulation.\n    * @return Iterable&ltResult&ltUpload&gt&gt - Lazy iterator contains object upload information.\n-   * @see #listIncompleteUploads(String bucketName)\n-   * @see #listIncompleteUploads(String bucketName, String prefix)\n+   * @see #listIncompleteUploads(ListIncompleteUploadsBucketArgs args)\n    */\n+  @Deprecated\n   public Iterable<Result<Upload>> listIncompleteUploads(\n       String bucketName, String prefix, boolean recursive) {\n-    return listIncompleteUploads(bucketName, prefix, recursive, true);\n+    return listIncompleteUploads(\n+        ListIncompleteUploadsBucketArgs.builder()\n+            .bucket(bucketName)\n+            .prefix(prefix)\n+            .recursive(recursive)\n+            .build());\n+  }\n+\n+  /**\n+   * Lists incomplete object upload information of a bucket for prefix recursively.\n+   *\n+   * <pre>Example:{@code\n+   * Iterable<Result<Upload>> results =\n+   *     minioClient.listIncompleteUploads(ListIncompleteUploadsBucketArgs args);\n+   * for (Result<Upload> result : results) {\n+   *   Upload upload = result.get();\n+   *   System.out.println(upload.uploadId() + \", \" + upload.objectName());\n+   * }\n+   * }</pre>\n+   *\n+   * @param args Arguments for listing incomplete uploads.\n+   * @return Iterable&ltResult&ltUpload&gt&gt - Lazy iterator contains object upload information.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "562c157fffa506214c7484e373a1cc49b7dfb398"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODQzNjQwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/ListIncompleteUploadsArgs.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNTo1MDoyNVrOGYnAQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNToyNDo1NVrOGgPkzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ1ODA0OA==", "bodyText": "Could you add all parameters like listObjects()? Similarly you could check reusing/modifying existing objectIterator class to accommodate this listing as well.", "url": "https://github.com/minio/minio-java/pull/937#discussion_r428458048", "createdAt": "2020-05-21T05:50:25Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/ListIncompleteUploadsArgs.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio;\n+\n+/** Argument class of @see #listIncompleteUploads(ListIncompleteUploadsArgs args). */\n+public class ListIncompleteUploadsArgs extends BucketArgs {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7363336e7068ee87fdafd61bb974e7726758a586"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2Mjc5Nw==", "bodyText": "IMO this not feasible as there are two different API's expecting different  query parameters.\nList Incomplete upload : https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListMultipartUploads.html\nGET /?uploads&Delimiter=Delimiter&EncodingType=EncodingType&KeyMarker=KeyMarker&MaxUploads=MaxUploads&Prefix=Prefix&UploadIdMarker=UploadIdMarker HTTP/1.1\nHost: Bucket.s3.amazonaws.com\n\nList Objects : https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListObjectsV2.html\nGET /?list-type=2&ContinuationToken=ContinuationToken&Delimiter=Delimiter&EncodingType=EncodingType&FetchOwner=FetchOwner&MaxKeys=MaxKeys&Prefix=Prefix&StartAfter=StartAfter HTTP/1.1\nHost: Bucket.s3.amazonaws.com\nx-amz-request-payer: RequestPayer\n\nAs far as using object Iterator is concerned it implements Iterator of Item type, (ObjectIterator implements Iterator<Result<Item>> ) while list incompleteUpload needs Iterator of type Upload Iterator<Result<Upload>> . Item and Upload the the different response classes for these api.\nIMO  listObjects and listIncompleteObjects being separate is correct.", "url": "https://github.com/minio/minio-java/pull/937#discussion_r436462797", "createdAt": "2020-06-08T05:24:55Z", "author": {"login": "sinhaashish"}, "path": "api/src/main/java/io/minio/ListIncompleteUploadsArgs.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio;\n+\n+/** Argument class of @see #listIncompleteUploads(ListIncompleteUploadsArgs args). */\n+public class ListIncompleteUploadsArgs extends BucketArgs {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ1ODA0OA=="}, "originalCommit": {"oid": "7363336e7068ee87fdafd61bb974e7726758a586"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTE1OTMzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/ListIncompleteUploadsArgs.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjozMToyOVrOGhyjLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjozMToyOVrOGhyjLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA4NDM5OQ==", "bodyText": "encoding-type can be set with only one option i.e. it looks boolean. We could have urlEncoding(boolean flag) would be more appropriate\nAs encoding-type=url is helpful to get properly encoded string of unicode/control characters in names, we could set it as default.", "url": "https://github.com/minio/minio-java/pull/937#discussion_r438084399", "createdAt": "2020-06-10T12:31:29Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/ListIncompleteUploadsArgs.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio;\n+\n+/** Argument class of @see #listIncompleteUploads(ListIncompleteUploadsArgs args). */\n+public class ListIncompleteUploadsArgs extends BucketArgs {\n+  private String prefix;\n+  private String delimiter;\n+  private String encodingType;\n+  private String keyMarker;\n+  private Integer maxUploads;\n+  private String uploadIdMarker;\n+  private boolean recursive;\n+\n+  public String prefix() {\n+    return prefix;\n+  }\n+\n+  public String delimiter() {\n+    return delimiter;\n+  }\n+\n+  public String encodingType() {\n+    return encodingType;\n+  }\n+\n+  public String keyMarker() {\n+    return keyMarker;\n+  }\n+\n+  public Integer maxUploads() {\n+    return maxUploads;\n+  }\n+\n+  public String uploadIdMarker() {\n+    return uploadIdMarker;\n+  }\n+\n+  public boolean recursive() {\n+    return recursive;\n+  }\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  /** Argument builder of @see #listIncompleteUploads(ListIncompleteUploadsArgs args). */\n+  public static final class Builder extends BucketArgs.Builder<Builder, ListIncompleteUploadsArgs> {\n+    public Builder prefix(String prefix) {\n+      operations.add(args -> args.prefix = prefix);\n+      return this;\n+    }\n+\n+    public Builder delimitter(String delimiter) {\n+      operations.add(args -> args.delimiter = delimiter);\n+      return this;\n+    }\n+\n+    public Builder encodingType(String encodingType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9862e92bff8ba9160604109146df509673bbfb83"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTYyMjU4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/ListIncompleteUploadsArgs.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDoyMDoxMVrOGh3JkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDoyMDoxMVrOGh3JkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE1OTc2MA==", "bodyText": "keyMarker cannot be \"\"; but can be null. You could use validateNullOrNotEmpty()", "url": "https://github.com/minio/minio-java/pull/937#discussion_r438159760", "createdAt": "2020-06-10T14:20:11Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/ListIncompleteUploadsArgs.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio;\n+\n+/** Argument class of @see #listIncompleteUploads(ListIncompleteUploadsArgs args). */\n+public class ListIncompleteUploadsArgs extends BucketArgs {\n+  private String prefix;\n+  private String delimiter;\n+  private String encodingType;\n+  private String keyMarker;\n+  private Integer maxUploads;\n+  private String uploadIdMarker;\n+  private boolean recursive;\n+\n+  public String prefix() {\n+    return prefix;\n+  }\n+\n+  public String delimiter() {\n+    return delimiter;\n+  }\n+\n+  public String encodingType() {\n+    return encodingType;\n+  }\n+\n+  public String keyMarker() {\n+    return keyMarker;\n+  }\n+\n+  public Integer maxUploads() {\n+    return maxUploads;\n+  }\n+\n+  public String uploadIdMarker() {\n+    return uploadIdMarker;\n+  }\n+\n+  public boolean recursive() {\n+    return recursive;\n+  }\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  /** Argument builder of @see #listIncompleteUploads(ListIncompleteUploadsArgs args). */\n+  public static final class Builder extends BucketArgs.Builder<Builder, ListIncompleteUploadsArgs> {\n+    public Builder prefix(String prefix) {\n+      operations.add(args -> args.prefix = prefix);\n+      return this;\n+    }\n+\n+    public Builder delimitter(String delimiter) {\n+      operations.add(args -> args.delimiter = delimiter);\n+      return this;\n+    }\n+\n+    public Builder encodingType(String encodingType) {\n+      if (!encodingType.equals(\"url\")) {\n+        throw new IllegalArgumentException(\" valid value for encodingType is url \");\n+      }\n+      operations.add(args -> args.encodingType = encodingType);\n+      return this;\n+    }\n+\n+    public Builder keyMarker(String keyMarker) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9862e92bff8ba9160604109146df509673bbfb83"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTYyODI0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/ListIncompleteUploadsArgs.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDoyMToyMFrOGh3NNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDoyMToyMFrOGh3NNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE2MDY5Mw==", "bodyText": "you could remove trailing/leading extra spaces at 1 and 1000", "url": "https://github.com/minio/minio-java/pull/937#discussion_r438160693", "createdAt": "2020-06-10T14:21:20Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/ListIncompleteUploadsArgs.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio;\n+\n+/** Argument class of @see #listIncompleteUploads(ListIncompleteUploadsArgs args). */\n+public class ListIncompleteUploadsArgs extends BucketArgs {\n+  private String prefix;\n+  private String delimiter;\n+  private String encodingType;\n+  private String keyMarker;\n+  private Integer maxUploads;\n+  private String uploadIdMarker;\n+  private boolean recursive;\n+\n+  public String prefix() {\n+    return prefix;\n+  }\n+\n+  public String delimiter() {\n+    return delimiter;\n+  }\n+\n+  public String encodingType() {\n+    return encodingType;\n+  }\n+\n+  public String keyMarker() {\n+    return keyMarker;\n+  }\n+\n+  public Integer maxUploads() {\n+    return maxUploads;\n+  }\n+\n+  public String uploadIdMarker() {\n+    return uploadIdMarker;\n+  }\n+\n+  public boolean recursive() {\n+    return recursive;\n+  }\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  /** Argument builder of @see #listIncompleteUploads(ListIncompleteUploadsArgs args). */\n+  public static final class Builder extends BucketArgs.Builder<Builder, ListIncompleteUploadsArgs> {\n+    public Builder prefix(String prefix) {\n+      operations.add(args -> args.prefix = prefix);\n+      return this;\n+    }\n+\n+    public Builder delimitter(String delimiter) {\n+      operations.add(args -> args.delimiter = delimiter);\n+      return this;\n+    }\n+\n+    public Builder encodingType(String encodingType) {\n+      if (!encodingType.equals(\"url\")) {\n+        throw new IllegalArgumentException(\" valid value for encodingType is url \");\n+      }\n+      operations.add(args -> args.encodingType = encodingType);\n+      return this;\n+    }\n+\n+    public Builder keyMarker(String keyMarker) {\n+      operations.add(args -> args.keyMarker = keyMarker);\n+      return this;\n+    }\n+\n+    public Builder maxUploads(int maxUploads) {\n+      if (maxUploads < 1 || maxUploads > 1000) {\n+        throw new IllegalArgumentException(\"maxUploads must be minimum 1  to maximum  1000\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9862e92bff8ba9160604109146df509673bbfb83"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTYzMTkwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/ListIncompleteUploadsArgs.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDoyMjoxMFrOGh3PrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDoyMjoxMFrOGh3PrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE2MTMyNA==", "bodyText": "uploadIdMarker cannot be \"\"; but can be null. You could use validateNullOrNotEmpty()", "url": "https://github.com/minio/minio-java/pull/937#discussion_r438161324", "createdAt": "2020-06-10T14:22:10Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/ListIncompleteUploadsArgs.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio;\n+\n+/** Argument class of @see #listIncompleteUploads(ListIncompleteUploadsArgs args). */\n+public class ListIncompleteUploadsArgs extends BucketArgs {\n+  private String prefix;\n+  private String delimiter;\n+  private String encodingType;\n+  private String keyMarker;\n+  private Integer maxUploads;\n+  private String uploadIdMarker;\n+  private boolean recursive;\n+\n+  public String prefix() {\n+    return prefix;\n+  }\n+\n+  public String delimiter() {\n+    return delimiter;\n+  }\n+\n+  public String encodingType() {\n+    return encodingType;\n+  }\n+\n+  public String keyMarker() {\n+    return keyMarker;\n+  }\n+\n+  public Integer maxUploads() {\n+    return maxUploads;\n+  }\n+\n+  public String uploadIdMarker() {\n+    return uploadIdMarker;\n+  }\n+\n+  public boolean recursive() {\n+    return recursive;\n+  }\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  /** Argument builder of @see #listIncompleteUploads(ListIncompleteUploadsArgs args). */\n+  public static final class Builder extends BucketArgs.Builder<Builder, ListIncompleteUploadsArgs> {\n+    public Builder prefix(String prefix) {\n+      operations.add(args -> args.prefix = prefix);\n+      return this;\n+    }\n+\n+    public Builder delimitter(String delimiter) {\n+      operations.add(args -> args.delimiter = delimiter);\n+      return this;\n+    }\n+\n+    public Builder encodingType(String encodingType) {\n+      if (!encodingType.equals(\"url\")) {\n+        throw new IllegalArgumentException(\" valid value for encodingType is url \");\n+      }\n+      operations.add(args -> args.encodingType = encodingType);\n+      return this;\n+    }\n+\n+    public Builder keyMarker(String keyMarker) {\n+      operations.add(args -> args.keyMarker = keyMarker);\n+      return this;\n+    }\n+\n+    public Builder maxUploads(int maxUploads) {\n+      if (maxUploads < 1 || maxUploads > 1000) {\n+        throw new IllegalArgumentException(\"maxUploads must be minimum 1  to maximum  1000\");\n+      }\n+      operations.add(args -> args.maxUploads = maxUploads);\n+      return this;\n+    }\n+\n+    public Builder uploadIdMarker(String uploadIdMarker) {\n+      operations.add(args -> args.uploadIdMarker = uploadIdMarker);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9862e92bff8ba9160604109146df509673bbfb83"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTk4NTkyOnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNTozNjo0OVrOGh6zBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNTozNjo0OVrOGh6zBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIxOTUyNg==", "bodyText": "Please remove redundant comments", "url": "https://github.com/minio/minio-java/pull/937#discussion_r438219526", "createdAt": "2020-06-10T15:36:49Z", "author": {"login": "anjalshireesh"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -1859,8 +1859,8 @@ public static void listIncompleteUploads_test1() throws Exception {\n         }\n       }\n \n-      client.removeIncompleteUpload(\n-          RemoveIncompleteUploadArgs.builder().bucket(bucketName).object(objectName).build());\n+      // client.removeIncompleteUpload(\n+      //     RemoveIncompleteUploadArgs.builder().bucket(bucketName).object(objectName).build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9862e92bff8ba9160604109146df509673bbfb83"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTk5Njk3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/MinioClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNTozOTozMlrOGh66cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNTozOTozMlrOGh66cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIyMTQyNQ==", "bodyText": "Please fix the comment formatting.", "url": "https://github.com/minio/minio-java/pull/937#discussion_r438221425", "createdAt": "2020-06-10T15:39:32Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -5985,32 +6003,29 @@ public void deleteBucketNotification(DeleteBucketNotificationArgs args)\n    */\n   public Iterable<Result<Upload>> listIncompleteUploads(ListIncompleteUploadsArgs args) {\n     checkArgs(args);\n-    return listIncompleteUploads(args.bucket(), args.prefix(), args.recursive(), true);\n+    return this.listIncompleteUploads(args, true);\n   }\n \n-  /**\n-   * Returns Iterable<Result<Upload>> of given bucket name, prefix and recursive flag. All parts\n-   * size are aggregated when aggregatePartSize is true.\n-   */\n+  // /**\n+  //  * Returns Iterable<Result<Upload>> of given ListIncompleteUploadsArgs argumentsr. All parts\n+  //  * size are aggregated when aggregatePartSize is true.\n+  //  */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9862e92bff8ba9160604109146df509673bbfb83"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 700, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}