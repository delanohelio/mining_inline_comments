{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4Mzc0OTU2", "number": 936, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjo1NzoyOFrOD9406g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzoxODo0MVrOD95TAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjIwNzc4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/MinioClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjo1NzoyOFrOGXp0iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjo1NzoyOFrOGXp0iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ1NTYyNQ==", "bodyText": "Instead of preparing and passing the extra headers and query-params from this specific method, can we look at making this a generic feature that works for all the APIs? So if these arguments are present, the corresponding headers and query parameters should automatically get added in the requests without having to write extra code in the corresponding method.", "url": "https://github.com/minio/minio-java/pull/936#discussion_r427455625", "createdAt": "2020-05-19T16:57:28Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -1552,24 +1546,92 @@ public ObjectStat statObject(String bucketName, String objectName)\n    * @throws XmlParserException thrown to indicate XML parsing error.\n    * @see ObjectStat\n    */\n+  @Deprecated\n   public ObjectStat statObject(String bucketName, String objectName, ServerSideEncryption sse)\n       throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n           InternalException, InvalidBucketNameException, InvalidKeyException,\n           InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n-    checkReadRequestSse(sse);\n-    checkBucketName(bucketName);\n-    checkObjectName(objectName);\n+    return statObject(\n+        StatObjectArgs.builder().bucket(bucketName).object(objectName).ssec(sse).build());\n+  }\n \n-    Map<String, String> headers = null;\n-    if (sse != null) {\n-      headers = sse.headers();\n+  /**\n+   * Gets information of an object.\n+   *\n+   * <pre>Example:{@code\n+   * // Get information of an object.\n+   * ObjectStat objectStat =\n+   *     minioClient.statObject(\n+   *         StatObjectArgs.builder().bucket(\"my-bucketname\").object(\"my-objectname\").build());\n+   *\n+   * // Get information of SSE-C encrypted object.\n+   * ObjectStat objectStat =\n+   *     minioClient.statObject(\n+   *         StatObjectArgs.builder()\n+   *             .bucket(\"my-bucketname\")\n+   *             .object(\"my-objectname\")\n+   *             .ssec(ssec)\n+   *             .build());\n+   *\n+   * // Get information of a versioned object.\n+   * ObjectStat objectStat =\n+   *     minioClient.statObject(\n+   *         StatObjectArgs.builder()\n+   *             .bucket(\"my-bucketname\")\n+   *             .object(\"my-objectname\")\n+   *             .versionId(\"version-id\")\n+   *             .build());\n+   *\n+   * // Get information of a SSE-C encrypted versioned object.\n+   * ObjectStat objectStat =\n+   *     minioClient.statObject(\n+   *         StatObjectArgs.builder()\n+   *             .bucket(\"my-bucketname\")\n+   *             .object(\"my-objectname\")\n+   *             .versionId(\"version-id\")\n+   *             .ssec(ssec)\n+   *             .build());\n+   * }</pre>\n+   *\n+   * @param args {@link StatObjectArgs} object.\n+   * @return {@link ObjectStat} - Populated object information and metadata.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   * @see ObjectStat\n+   */\n+  public ObjectStat statObject(StatObjectArgs args)\n+      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n+          InternalException, InvalidBucketNameException, InvalidKeyException,\n+          InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n+    if (args == null) {\n+      throw new IllegalArgumentException(\"null arguments\");\n     }\n \n-    Response response = executeHead(bucketName, objectName, headers);\n-    try {\n-      return new ObjectStat(bucketName, objectName, response.headers());\n-    } finally {\n-      response.close();\n+    checkReadRequestSse(args.ssec());\n+\n+    Multimap<String, String> headers = HashMultimap.create();\n+    headers.putAll(args.extraHeaders());\n+    if (args.ssec() != null) {\n+      headers.putAll(Multimaps.forMap(args.ssec().headers()));\n+    }\n+\n+    Multimap<String, String> queryParams = HashMultimap.create();\n+    queryParams.putAll(args.extraQueryParams());\n+    if (args.versionId() != null) {\n+      queryParams.put(\"versionId\", args.versionId());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "557a037da91cd5d2dda1b0cef5422b6f632c0789"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjI2NTU2OnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzoxMzozMFrOGXqalQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzoxMzozMFrOGXqalQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ2NTM2NQ==", "bodyText": "The first part inside try block can be extracted out into a method, say putTestObject()", "url": "https://github.com/minio/minio-java/pull/936#discussion_r427465365", "createdAt": "2020-05-19T17:13:30Z", "author": {"login": "anjalshireesh"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -1103,14 +1097,79 @@ public static void statObject_test3() throws Exception {\n       }\n     } catch (Exception e) {\n       mintFailedLog(\n-          \"statObject(String bucketName, \\\"randomName/\\\")\",\n+          \"statObject(StatObjectArgs args) with non-existing object\",\n           null,\n           startTime,\n           null,\n           e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n       throw e;\n     } finally {\n-      mintSuccessLog(\"statObject(String bucketName, \\\"randomName/\\\"`)\", null, startTime);\n+      mintSuccessLog(\"statObject(StatObjectArgs args) with non-existing object\", null, startTime);\n+    }\n+  }\n+\n+  /** Test: with extra headers/query params: statObject(StatObjectArgs args). */\n+  public static void statObject_test4() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: with extra headers/query params: statObject(StatObjectArgs args)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    try {\n+      String objectName = getRandomName();\n+      Map<String, String> headerMap = new HashMap<>();\n+      headerMap.put(\"Content-Type\", customContentType);\n+      headerMap.put(\"my-custom-data\", \"foo\");\n+      try (final InputStream is = new ContentInputStream(1)) {\n+        PutObjectOptions options = new PutObjectOptions(1, -1);\n+        options.setHeaders(headerMap);\n+        options.setContentType(customContentType);\n+        client.putObject(bucketName, objectName, is, options);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "557a037da91cd5d2dda1b0cef5422b6f632c0789"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjI4NDgyOnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzoxODo0MVrOGXqnEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzoxODo0MVrOGXqnEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ2ODU2MA==", "bodyText": "I see the same condition for statObject_test2() as well. Maybe there can be a single if block for all the tests that depend on this condition?", "url": "https://github.com/minio/minio-java/pull/936#discussion_r427468560", "createdAt": "2020-05-19T17:18:41Z", "author": {"login": "anjalshireesh"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -4112,10 +4187,7 @@ public static void runTests() throws Exception {\n     selectObjectContent_test1();\n \n     // SSE_C tests will only work over TLS connection\n-    Locale locale = Locale.ENGLISH;\n-    boolean tlsEnabled = endpoint.toLowerCase(locale).contains(\"https://\");\n-    if (tlsEnabled) {\n-      statObject_test2();\n+    if (endpoint.toLowerCase(Locale.US).contains(\"https://\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "557a037da91cd5d2dda1b0cef5422b6f632c0789"}, "originalPosition": 284}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 696, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}