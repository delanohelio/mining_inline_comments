{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI5NjYzNjc2", "number": 972, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMDo0NjoxN1rOEEogew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMjoxNDozMlrOEFgr_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjkzNDM1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/PutObjectArgs.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMDo0NjoxN1rOGiYDSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMDo0NjoxN1rOGiYDSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY5ODgyNw==", "bodyText": "Can be moved into a separate method, say validatePartSize\nand/or\na method that can validate the given combination of partSize and objectSize", "url": "https://github.com/minio/minio-java/pull/972#discussion_r438698827", "createdAt": "2020-06-11T10:46:17Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/PutObjectArgs.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio;\n+\n+import java.io.BufferedInputStream;\n+import java.io.InputStream;\n+\n+/** Argument class of MinioClient.putObject(). */\n+public class PutObjectArgs extends ObjectWriteArgs {\n+  private BufferedInputStream stream;\n+  private long objectSize;\n+  private long partSize;\n+  private int partCount;\n+  private String contentType;\n+\n+  public BufferedInputStream stream() {\n+    return stream;\n+  }\n+\n+  public long objectSize() {\n+    return objectSize;\n+  }\n+\n+  public long partSize() {\n+    return partSize;\n+  }\n+\n+  public int partCount() {\n+    return partCount;\n+  }\n+\n+  /**\n+   * Gets content type. It returns if content type is set (or) value of \"Content-Type\" header (or)\n+   * default \"application/octet-stream\".\n+   */\n+  public String contentType() {\n+    if (contentType != null) {\n+      return contentType;\n+    }\n+\n+    if (this.headers().containsKey(\"Content-Type\")) {\n+      return this.headers().get(\"Content-Type\").iterator().next();\n+    }\n+\n+    return \"application/octet-stream\";\n+  }\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  /** Argument builder of {@link PutObjectArgs}. */\n+  public static final class Builder extends ObjectWriteArgs.Builder<Builder, PutObjectArgs> {\n+    @Override\n+    protected void validate(PutObjectArgs args) {\n+      super.validate(args);\n+      validateNotNull(args.stream, \"stream\");\n+    }\n+\n+    /**\n+     * Sets stream to upload. Two ways to provide object/part sizes.\n+     *\n+     * <ul>\n+     *   <li>If object size is unknown, pass -1 to objectSize and pass valid partSize.\n+     *   <li>If object size is known, pass -1 to partSize for auto detect; else pass valid partSize\n+     *       to control memory usage and no. of parts in upload.\n+     *   <li>If partSize is greater than objectSize, objectSize is used as partSize.\n+     * </ul>\n+     *\n+     * <p>A valid part size is between 5MiB to 5GiB (both limits inclusive).\n+     */\n+    public Builder stream(InputStream stream, long objectSize, long partSize) {\n+      validateNotNull(stream, \"stream\");\n+\n+      int partCount = -1;\n+\n+      if (partSize > 0) {\n+        if (partSize < MIN_MULTIPART_SIZE) {\n+          throw new IllegalArgumentException(\n+              \"part size \" + partSize + \" is not supported; minimum allowed 5MiB\");\n+        }\n+\n+        if (partSize > MAX_PART_SIZE) {\n+          throw new IllegalArgumentException(\n+              \"part size \" + partSize + \" is not supported; maximum allowed 5GiB\");\n+        }\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98d6ed38bf0daee4caf1c1cfe40f607d5cf451ee"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzA5MDMwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/PutObjectArgs.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMTo0MzozNVrOGiZnEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMTo0MzozNVrOGiZnEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcyNDM3MQ==", "bodyText": "The part size calculation logic (including part from the if block) can be moved to a separate method, with a comment explaining the logic.", "url": "https://github.com/minio/minio-java/pull/972#discussion_r438724371", "createdAt": "2020-06-11T11:43:35Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/PutObjectArgs.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio;\n+\n+import java.io.BufferedInputStream;\n+import java.io.InputStream;\n+\n+/** Argument class of MinioClient.putObject(). */\n+public class PutObjectArgs extends ObjectWriteArgs {\n+  private BufferedInputStream stream;\n+  private long objectSize;\n+  private long partSize;\n+  private int partCount;\n+  private String contentType;\n+\n+  public BufferedInputStream stream() {\n+    return stream;\n+  }\n+\n+  public long objectSize() {\n+    return objectSize;\n+  }\n+\n+  public long partSize() {\n+    return partSize;\n+  }\n+\n+  public int partCount() {\n+    return partCount;\n+  }\n+\n+  /**\n+   * Gets content type. It returns if content type is set (or) value of \"Content-Type\" header (or)\n+   * default \"application/octet-stream\".\n+   */\n+  public String contentType() {\n+    if (contentType != null) {\n+      return contentType;\n+    }\n+\n+    if (this.headers().containsKey(\"Content-Type\")) {\n+      return this.headers().get(\"Content-Type\").iterator().next();\n+    }\n+\n+    return \"application/octet-stream\";\n+  }\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  /** Argument builder of {@link PutObjectArgs}. */\n+  public static final class Builder extends ObjectWriteArgs.Builder<Builder, PutObjectArgs> {\n+    @Override\n+    protected void validate(PutObjectArgs args) {\n+      super.validate(args);\n+      validateNotNull(args.stream, \"stream\");\n+    }\n+\n+    /**\n+     * Sets stream to upload. Two ways to provide object/part sizes.\n+     *\n+     * <ul>\n+     *   <li>If object size is unknown, pass -1 to objectSize and pass valid partSize.\n+     *   <li>If object size is known, pass -1 to partSize for auto detect; else pass valid partSize\n+     *       to control memory usage and no. of parts in upload.\n+     *   <li>If partSize is greater than objectSize, objectSize is used as partSize.\n+     * </ul>\n+     *\n+     * <p>A valid part size is between 5MiB to 5GiB (both limits inclusive).\n+     */\n+    public Builder stream(InputStream stream, long objectSize, long partSize) {\n+      validateNotNull(stream, \"stream\");\n+\n+      int partCount = -1;\n+\n+      if (partSize > 0) {\n+        if (partSize < MIN_MULTIPART_SIZE) {\n+          throw new IllegalArgumentException(\n+              \"part size \" + partSize + \" is not supported; minimum allowed 5MiB\");\n+        }\n+\n+        if (partSize > MAX_PART_SIZE) {\n+          throw new IllegalArgumentException(\n+              \"part size \" + partSize + \" is not supported; maximum allowed 5GiB\");\n+        }\n+      }\n+\n+      if (objectSize >= 0) {\n+        if (objectSize > MAX_OBJECT_SIZE) {\n+          throw new IllegalArgumentException(\n+              \"object size \" + objectSize + \" is not supported; maximum allowed 5TiB\");\n+        }\n+\n+        if (partSize > 0) {\n+          if (partSize > objectSize) {\n+            partSize = objectSize;\n+          }\n+\n+          partCount = (int) Math.ceil((double) objectSize / partSize);\n+          if (partCount > MAX_MULTIPART_COUNT) {\n+            throw new IllegalArgumentException(\n+                \"object size \"\n+                    + objectSize\n+                    + \" and part size \"\n+                    + partSize\n+                    + \" make more than \"\n+                    + MAX_MULTIPART_COUNT\n+                    + \"parts for upload\");\n+          }\n+        } else {\n+          double pSize = Math.ceil((double) objectSize / MAX_MULTIPART_COUNT);\n+          pSize = Math.ceil(pSize / MIN_MULTIPART_SIZE) * MIN_MULTIPART_SIZE;\n+\n+          partSize = (long) pSize;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98d6ed38bf0daee4caf1c1cfe40f607d5cf451ee"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzEwMjAyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/PutObjectArgs.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMTo0NzoyOFrOGiZuOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNDoyNjowOFrOGjGAwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcyNjIwMA==", "bodyText": "In what scenario be pSize <= 0 at this place?", "url": "https://github.com/minio/minio-java/pull/972#discussion_r438726200", "createdAt": "2020-06-11T11:47:28Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/PutObjectArgs.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio;\n+\n+import java.io.BufferedInputStream;\n+import java.io.InputStream;\n+\n+/** Argument class of MinioClient.putObject(). */\n+public class PutObjectArgs extends ObjectWriteArgs {\n+  private BufferedInputStream stream;\n+  private long objectSize;\n+  private long partSize;\n+  private int partCount;\n+  private String contentType;\n+\n+  public BufferedInputStream stream() {\n+    return stream;\n+  }\n+\n+  public long objectSize() {\n+    return objectSize;\n+  }\n+\n+  public long partSize() {\n+    return partSize;\n+  }\n+\n+  public int partCount() {\n+    return partCount;\n+  }\n+\n+  /**\n+   * Gets content type. It returns if content type is set (or) value of \"Content-Type\" header (or)\n+   * default \"application/octet-stream\".\n+   */\n+  public String contentType() {\n+    if (contentType != null) {\n+      return contentType;\n+    }\n+\n+    if (this.headers().containsKey(\"Content-Type\")) {\n+      return this.headers().get(\"Content-Type\").iterator().next();\n+    }\n+\n+    return \"application/octet-stream\";\n+  }\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  /** Argument builder of {@link PutObjectArgs}. */\n+  public static final class Builder extends ObjectWriteArgs.Builder<Builder, PutObjectArgs> {\n+    @Override\n+    protected void validate(PutObjectArgs args) {\n+      super.validate(args);\n+      validateNotNull(args.stream, \"stream\");\n+    }\n+\n+    /**\n+     * Sets stream to upload. Two ways to provide object/part sizes.\n+     *\n+     * <ul>\n+     *   <li>If object size is unknown, pass -1 to objectSize and pass valid partSize.\n+     *   <li>If object size is known, pass -1 to partSize for auto detect; else pass valid partSize\n+     *       to control memory usage and no. of parts in upload.\n+     *   <li>If partSize is greater than objectSize, objectSize is used as partSize.\n+     * </ul>\n+     *\n+     * <p>A valid part size is between 5MiB to 5GiB (both limits inclusive).\n+     */\n+    public Builder stream(InputStream stream, long objectSize, long partSize) {\n+      validateNotNull(stream, \"stream\");\n+\n+      int partCount = -1;\n+\n+      if (partSize > 0) {\n+        if (partSize < MIN_MULTIPART_SIZE) {\n+          throw new IllegalArgumentException(\n+              \"part size \" + partSize + \" is not supported; minimum allowed 5MiB\");\n+        }\n+\n+        if (partSize > MAX_PART_SIZE) {\n+          throw new IllegalArgumentException(\n+              \"part size \" + partSize + \" is not supported; maximum allowed 5GiB\");\n+        }\n+      }\n+\n+      if (objectSize >= 0) {\n+        if (objectSize > MAX_OBJECT_SIZE) {\n+          throw new IllegalArgumentException(\n+              \"object size \" + objectSize + \" is not supported; maximum allowed 5TiB\");\n+        }\n+\n+        if (partSize > 0) {\n+          if (partSize > objectSize) {\n+            partSize = objectSize;\n+          }\n+\n+          partCount = (int) Math.ceil((double) objectSize / partSize);\n+          if (partCount > MAX_MULTIPART_COUNT) {\n+            throw new IllegalArgumentException(\n+                \"object size \"\n+                    + objectSize\n+                    + \" and part size \"\n+                    + partSize\n+                    + \" make more than \"\n+                    + MAX_MULTIPART_COUNT\n+                    + \"parts for upload\");\n+          }\n+        } else {\n+          double pSize = Math.ceil((double) objectSize / MAX_MULTIPART_COUNT);\n+          pSize = Math.ceil(pSize / MIN_MULTIPART_SIZE) * MIN_MULTIPART_SIZE;\n+\n+          partSize = (long) pSize;\n+\n+          if (pSize > 0) {\n+            partCount = (int) Math.ceil(objectSize / pSize);\n+          } else {\n+            partCount = 1;\n+          }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98d6ed38bf0daee4caf1c1cfe40f607d5cf451ee"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ1MTg0MQ==", "bodyText": "In case of input stream size is unknown, there is possibility that user could pass wrong  partSize <= 0", "url": "https://github.com/minio/minio-java/pull/972#discussion_r439451841", "createdAt": "2020-06-12T14:26:08Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/PutObjectArgs.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio;\n+\n+import java.io.BufferedInputStream;\n+import java.io.InputStream;\n+\n+/** Argument class of MinioClient.putObject(). */\n+public class PutObjectArgs extends ObjectWriteArgs {\n+  private BufferedInputStream stream;\n+  private long objectSize;\n+  private long partSize;\n+  private int partCount;\n+  private String contentType;\n+\n+  public BufferedInputStream stream() {\n+    return stream;\n+  }\n+\n+  public long objectSize() {\n+    return objectSize;\n+  }\n+\n+  public long partSize() {\n+    return partSize;\n+  }\n+\n+  public int partCount() {\n+    return partCount;\n+  }\n+\n+  /**\n+   * Gets content type. It returns if content type is set (or) value of \"Content-Type\" header (or)\n+   * default \"application/octet-stream\".\n+   */\n+  public String contentType() {\n+    if (contentType != null) {\n+      return contentType;\n+    }\n+\n+    if (this.headers().containsKey(\"Content-Type\")) {\n+      return this.headers().get(\"Content-Type\").iterator().next();\n+    }\n+\n+    return \"application/octet-stream\";\n+  }\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  /** Argument builder of {@link PutObjectArgs}. */\n+  public static final class Builder extends ObjectWriteArgs.Builder<Builder, PutObjectArgs> {\n+    @Override\n+    protected void validate(PutObjectArgs args) {\n+      super.validate(args);\n+      validateNotNull(args.stream, \"stream\");\n+    }\n+\n+    /**\n+     * Sets stream to upload. Two ways to provide object/part sizes.\n+     *\n+     * <ul>\n+     *   <li>If object size is unknown, pass -1 to objectSize and pass valid partSize.\n+     *   <li>If object size is known, pass -1 to partSize for auto detect; else pass valid partSize\n+     *       to control memory usage and no. of parts in upload.\n+     *   <li>If partSize is greater than objectSize, objectSize is used as partSize.\n+     * </ul>\n+     *\n+     * <p>A valid part size is between 5MiB to 5GiB (both limits inclusive).\n+     */\n+    public Builder stream(InputStream stream, long objectSize, long partSize) {\n+      validateNotNull(stream, \"stream\");\n+\n+      int partCount = -1;\n+\n+      if (partSize > 0) {\n+        if (partSize < MIN_MULTIPART_SIZE) {\n+          throw new IllegalArgumentException(\n+              \"part size \" + partSize + \" is not supported; minimum allowed 5MiB\");\n+        }\n+\n+        if (partSize > MAX_PART_SIZE) {\n+          throw new IllegalArgumentException(\n+              \"part size \" + partSize + \" is not supported; maximum allowed 5GiB\");\n+        }\n+      }\n+\n+      if (objectSize >= 0) {\n+        if (objectSize > MAX_OBJECT_SIZE) {\n+          throw new IllegalArgumentException(\n+              \"object size \" + objectSize + \" is not supported; maximum allowed 5TiB\");\n+        }\n+\n+        if (partSize > 0) {\n+          if (partSize > objectSize) {\n+            partSize = objectSize;\n+          }\n+\n+          partCount = (int) Math.ceil((double) objectSize / partSize);\n+          if (partCount > MAX_MULTIPART_COUNT) {\n+            throw new IllegalArgumentException(\n+                \"object size \"\n+                    + objectSize\n+                    + \" and part size \"\n+                    + partSize\n+                    + \" make more than \"\n+                    + MAX_MULTIPART_COUNT\n+                    + \"parts for upload\");\n+          }\n+        } else {\n+          double pSize = Math.ceil((double) objectSize / MAX_MULTIPART_COUNT);\n+          pSize = Math.ceil(pSize / MIN_MULTIPART_SIZE) * MIN_MULTIPART_SIZE;\n+\n+          partSize = (long) pSize;\n+\n+          if (pSize > 0) {\n+            partCount = (int) Math.ceil(objectSize / pSize);\n+          } else {\n+            partCount = 1;\n+          }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcyNjIwMA=="}, "originalCommit": {"oid": "98d6ed38bf0daee4caf1c1cfe40f607d5cf451ee"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzExMTQ0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/PutObjectArgs.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMTo1MDo1MlrOGiZ0QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMTo1MDo1MlrOGiZ0QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcyNzc0NQ==", "bodyText": "These two variables may not be required..", "url": "https://github.com/minio/minio-java/pull/972#discussion_r438727745", "createdAt": "2020-06-11T11:50:52Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/PutObjectArgs.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio;\n+\n+import java.io.BufferedInputStream;\n+import java.io.InputStream;\n+\n+/** Argument class of MinioClient.putObject(). */\n+public class PutObjectArgs extends ObjectWriteArgs {\n+  private BufferedInputStream stream;\n+  private long objectSize;\n+  private long partSize;\n+  private int partCount;\n+  private String contentType;\n+\n+  public BufferedInputStream stream() {\n+    return stream;\n+  }\n+\n+  public long objectSize() {\n+    return objectSize;\n+  }\n+\n+  public long partSize() {\n+    return partSize;\n+  }\n+\n+  public int partCount() {\n+    return partCount;\n+  }\n+\n+  /**\n+   * Gets content type. It returns if content type is set (or) value of \"Content-Type\" header (or)\n+   * default \"application/octet-stream\".\n+   */\n+  public String contentType() {\n+    if (contentType != null) {\n+      return contentType;\n+    }\n+\n+    if (this.headers().containsKey(\"Content-Type\")) {\n+      return this.headers().get(\"Content-Type\").iterator().next();\n+    }\n+\n+    return \"application/octet-stream\";\n+  }\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  /** Argument builder of {@link PutObjectArgs}. */\n+  public static final class Builder extends ObjectWriteArgs.Builder<Builder, PutObjectArgs> {\n+    @Override\n+    protected void validate(PutObjectArgs args) {\n+      super.validate(args);\n+      validateNotNull(args.stream, \"stream\");\n+    }\n+\n+    /**\n+     * Sets stream to upload. Two ways to provide object/part sizes.\n+     *\n+     * <ul>\n+     *   <li>If object size is unknown, pass -1 to objectSize and pass valid partSize.\n+     *   <li>If object size is known, pass -1 to partSize for auto detect; else pass valid partSize\n+     *       to control memory usage and no. of parts in upload.\n+     *   <li>If partSize is greater than objectSize, objectSize is used as partSize.\n+     * </ul>\n+     *\n+     * <p>A valid part size is between 5MiB to 5GiB (both limits inclusive).\n+     */\n+    public Builder stream(InputStream stream, long objectSize, long partSize) {\n+      validateNotNull(stream, \"stream\");\n+\n+      int partCount = -1;\n+\n+      if (partSize > 0) {\n+        if (partSize < MIN_MULTIPART_SIZE) {\n+          throw new IllegalArgumentException(\n+              \"part size \" + partSize + \" is not supported; minimum allowed 5MiB\");\n+        }\n+\n+        if (partSize > MAX_PART_SIZE) {\n+          throw new IllegalArgumentException(\n+              \"part size \" + partSize + \" is not supported; maximum allowed 5GiB\");\n+        }\n+      }\n+\n+      if (objectSize >= 0) {\n+        if (objectSize > MAX_OBJECT_SIZE) {\n+          throw new IllegalArgumentException(\n+              \"object size \" + objectSize + \" is not supported; maximum allowed 5TiB\");\n+        }\n+\n+        if (partSize > 0) {\n+          if (partSize > objectSize) {\n+            partSize = objectSize;\n+          }\n+\n+          partCount = (int) Math.ceil((double) objectSize / partSize);\n+          if (partCount > MAX_MULTIPART_COUNT) {\n+            throw new IllegalArgumentException(\n+                \"object size \"\n+                    + objectSize\n+                    + \" and part size \"\n+                    + partSize\n+                    + \" make more than \"\n+                    + MAX_MULTIPART_COUNT\n+                    + \"parts for upload\");\n+          }\n+        } else {\n+          double pSize = Math.ceil((double) objectSize / MAX_MULTIPART_COUNT);\n+          pSize = Math.ceil(pSize / MIN_MULTIPART_SIZE) * MIN_MULTIPART_SIZE;\n+\n+          partSize = (long) pSize;\n+\n+          if (pSize > 0) {\n+            partCount = (int) Math.ceil(objectSize / pSize);\n+          } else {\n+            partCount = 1;\n+          }\n+        }\n+      } else if (partSize <= 0) {\n+        throw new IllegalArgumentException(\n+            \"valid part size must be provided when object size is unknown\");\n+      }\n+\n+      final BufferedInputStream bis =\n+          (stream instanceof BufferedInputStream)\n+              ? (BufferedInputStream) stream\n+              : new BufferedInputStream(stream);\n+      final long finalPartSize = partSize;\n+      final int finalPartCount = partCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98d6ed38bf0daee4caf1c1cfe40f607d5cf451ee"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzE1ODkyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/UploadObjectArgs.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjowNzowMVrOGiaSFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNToxMToxOVrOGjHrCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczNTM4Mg==", "bodyText": "There's a lot of overlap with PutObjectArgs. Can this be extracted out into a common base class?", "url": "https://github.com/minio/minio-java/pull/972#discussion_r438735382", "createdAt": "2020-06-11T12:07:01Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/UploadObjectArgs.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+\n+/** Argument class of MinioClient.uploadObject(). */\n+public class UploadObjectArgs extends ObjectWriteArgs {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98d6ed38bf0daee4caf1c1cfe40f607d5cf451ee"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ3OTA1MA==", "bodyText": "done", "url": "https://github.com/minio/minio-java/pull/972#discussion_r439479050", "createdAt": "2020-06-12T15:11:19Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/UploadObjectArgs.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+\n+/** Argument class of MinioClient.uploadObject(). */\n+public class UploadObjectArgs extends ObjectWriteArgs {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczNTM4Mg=="}, "originalCommit": {"oid": "98d6ed38bf0daee4caf1c1cfe40f607d5cf451ee"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzE5MTg4OnYy", "diffSide": "RIGHT", "path": "examples/DownloadObject.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjoxODoyM1rOGianTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMjowNDozOFrOGjBieg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc0MDgxMg==", "bodyText": "Comment can indicate ssec usage", "url": "https://github.com/minio/minio-java/pull/972#discussion_r438740812", "createdAt": "2020-06-11T12:18:23Z", "author": {"login": "anjalshireesh"}, "path": "examples/DownloadObject.java", "diffHunk": "@@ -37,14 +40,33 @@ public static void main(String[] args)\n       // MinioClient minioClient = new MinioClient(\"https://s3.amazonaws.com\", \"YOUR-ACCESSKEYID\",\n       //                                           \"YOUR-SECRETACCESSKEY\");\n \n-      // Download 'my-objectname' from 'my-bucketname' to 'my-filename'\n-      minioClient.downloadObject(\n-          DownloadObjectArgs.builder()\n-              .bucket(\"my-bucketname\")\n-              .object(\"my-objectname\")\n-              .fileName(\"my-filename\")\n-              .build());\n-      System.out.println(\"my-objectname is successfully downloaded to my-filename\");\n+      {\n+        // Download 'my-objectname' from 'my-bucketname' to 'my-filename'\n+        minioClient.downloadObject(\n+            DownloadObjectArgs.builder()\n+                .bucket(\"my-bucketname\")\n+                .object(\"my-objectname\")\n+                .filename(\"my-filename\")\n+                .build());\n+        System.out.println(\"my-objectname is successfully downloaded to my-filename\");\n+      }\n+\n+      {\n+        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\n+        keyGen.init(256);\n+        ServerSideEncryptionCustomerKey ssec =\n+            ServerSideEncryption.withCustomerKey(keyGen.generateKey());\n+\n+        // Download encrypted 'my-objectname' from 'my-bucketname' to 'my-filename'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98d6ed38bf0daee4caf1c1cfe40f607d5cf451ee"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM3ODU1NA==", "bodyText": "done", "url": "https://github.com/minio/minio-java/pull/972#discussion_r439378554", "createdAt": "2020-06-12T12:04:38Z", "author": {"login": "balamurugana"}, "path": "examples/DownloadObject.java", "diffHunk": "@@ -37,14 +40,33 @@ public static void main(String[] args)\n       // MinioClient minioClient = new MinioClient(\"https://s3.amazonaws.com\", \"YOUR-ACCESSKEYID\",\n       //                                           \"YOUR-SECRETACCESSKEY\");\n \n-      // Download 'my-objectname' from 'my-bucketname' to 'my-filename'\n-      minioClient.downloadObject(\n-          DownloadObjectArgs.builder()\n-              .bucket(\"my-bucketname\")\n-              .object(\"my-objectname\")\n-              .fileName(\"my-filename\")\n-              .build());\n-      System.out.println(\"my-objectname is successfully downloaded to my-filename\");\n+      {\n+        // Download 'my-objectname' from 'my-bucketname' to 'my-filename'\n+        minioClient.downloadObject(\n+            DownloadObjectArgs.builder()\n+                .bucket(\"my-bucketname\")\n+                .object(\"my-objectname\")\n+                .filename(\"my-filename\")\n+                .build());\n+        System.out.println(\"my-objectname is successfully downloaded to my-filename\");\n+      }\n+\n+      {\n+        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\n+        keyGen.init(256);\n+        ServerSideEncryptionCustomerKey ssec =\n+            ServerSideEncryption.withCustomerKey(keyGen.generateKey());\n+\n+        // Download encrypted 'my-objectname' from 'my-bucketname' to 'my-filename'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc0MDgxMg=="}, "originalCommit": {"oid": "98d6ed38bf0daee4caf1c1cfe40f607d5cf451ee"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzM2MjA4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/MinioClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzowOTowN1rOGicSkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNDoyMjo1NFrOGjF5Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2ODI3NQ==", "bodyText": "Some of the validations here are the same as those in PutObjectArgs. Might be a good idea to put them in a common method and call from both places.", "url": "https://github.com/minio/minio-java/pull/972#discussion_r438768275", "createdAt": "2020-06-11T13:09:07Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -2587,7 +2588,7 @@ public void composeObject(\n         size -= src.offset();\n       }\n \n-      if (size < PutObjectOptions.MIN_MULTIPART_SIZE\n+      if (size < ObjectWriteArgs.MIN_MULTIPART_SIZE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98d6ed38bf0daee4caf1c1cfe40f607d5cf451ee"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ0OTkyNw==", "bodyText": "This will be taken care when we add arg buildet to composeObject()", "url": "https://github.com/minio/minio-java/pull/972#discussion_r439449927", "createdAt": "2020-06-12T14:22:54Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -2587,7 +2588,7 @@ public void composeObject(\n         size -= src.offset();\n       }\n \n-      if (size < PutObjectOptions.MIN_MULTIPART_SIZE\n+      if (size < ObjectWriteArgs.MIN_MULTIPART_SIZE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2ODI3NQ=="}, "originalCommit": {"oid": "98d6ed38bf0daee4caf1c1cfe40f607d5cf451ee"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzQzODMyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/MinioClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzoyOToxN1rOGidDGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMjo0Mzo0OVrOGjCkcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc4MDY5OQ==", "bodyText": "Maybe just log/print the exception so that it can be debugged..", "url": "https://github.com/minio/minio-java/pull/972#discussion_r438780699", "createdAt": "2020-06-11T13:29:17Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -7202,31 +7309,91 @@ protected void abortMultipartUpload(String bucketName, String objectName, String\n    * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n    * @throws XmlParserException thrown to indicate XML parsing error.\n    */\n+  @Deprecated\n   protected void completeMultipartUpload(\n       String bucketName, String objectName, String uploadId, Part[] parts)\n       throws InvalidBucketNameException, IllegalArgumentException, NoSuchAlgorithmException,\n           InsufficientDataException, IOException, InvalidKeyException, ServerException,\n           XmlParserException, ErrorResponseException, InternalException, InvalidResponseException {\n-    Map<String, String> queryParamMap = new HashMap<>();\n-    queryParamMap.put(UPLOAD_ID, uploadId);\n-    CompleteMultipartUpload completeManifest = new CompleteMultipartUpload(parts);\n-    Response response = executePost(bucketName, objectName, null, queryParamMap, completeManifest);\n-    String bodyContent = \"\";\n-    try (ResponseBody body = response.body()) {\n-      bodyContent = new String(body.bytes(), StandardCharsets.UTF_8);\n-      bodyContent = bodyContent.trim();\n+    completeMultipartUpload(bucketName, null, objectName, uploadId, parts, null, null);\n+  }\n+\n+  /**\n+   * Do <a\n+   * href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html\">CompleteMultipartUpload\n+   * S3 API</a>.\n+   *\n+   * @param bucketName Name of the bucket.\n+   * @param region Region of the bucket.\n+   * @param objectName Object name in the bucket.\n+   * @param uploadId Upload ID.\n+   * @param parts List of parts.\n+   * @param extraHeaders Extra headers.\n+   * @param extraQueryParams Extra query parameters.\n+   * @return {@link ObjectWriteReply} object.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   */\n+  protected ObjectWriteReply completeMultipartUpload(\n+      String bucketName,\n+      String region,\n+      String objectName,\n+      String uploadId,\n+      Part[] parts,\n+      Multimap<String, String> extraHeaders,\n+      Multimap<String, String> extraQueryParams)\n+      throws InvalidBucketNameException, IllegalArgumentException, NoSuchAlgorithmException,\n+          InsufficientDataException, IOException, InvalidKeyException, ServerException,\n+          XmlParserException, ErrorResponseException, InternalException, InvalidResponseException {\n+    Multimap<String, String> queryParams = HashMultimap.create();\n+    if (extraQueryParams != null) {\n+      queryParams.putAll(extraQueryParams);\n     }\n+    queryParams.put(UPLOAD_ID, uploadId);\n \n-    // Handle if body contains error.\n-    if (!bodyContent.isEmpty()) {\n-      try {\n-        if (Xml.validate(ErrorResponse.class, bodyContent)) {\n-          ErrorResponse errorResponse = Xml.unmarshal(ErrorResponse.class, bodyContent);\n-          throw new ErrorResponseException(errorResponse, response);\n+    try (Response response =\n+        execute(\n+            Method.POST,\n+            bucketName,\n+            objectName,\n+            (region != null) ? region : getRegion(bucketName),\n+            extraHeaders,\n+            queryParams,\n+            new CompleteMultipartUpload(parts),\n+            0)) {\n+      String etag = null;\n+\n+      String bodyContent = new String(response.body().bytes(), StandardCharsets.UTF_8);\n+      bodyContent = bodyContent.trim();\n+      if (!bodyContent.isEmpty()) {\n+        try {\n+          if (Xml.validate(ErrorResponse.class, bodyContent)) {\n+            ErrorResponse errorResponse = Xml.unmarshal(ErrorResponse.class, bodyContent);\n+            throw new ErrorResponseException(errorResponse, response);\n+          }\n+        } catch (XmlParserException e) {\n+          // As it is not <Error> message, ignore this exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98d6ed38bf0daee4caf1c1cfe40f607d5cf451ee"}, "originalPosition": 585}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM5NTQ0MQ==", "bodyText": "done", "url": "https://github.com/minio/minio-java/pull/972#discussion_r439395441", "createdAt": "2020-06-12T12:43:49Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -7202,31 +7309,91 @@ protected void abortMultipartUpload(String bucketName, String objectName, String\n    * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n    * @throws XmlParserException thrown to indicate XML parsing error.\n    */\n+  @Deprecated\n   protected void completeMultipartUpload(\n       String bucketName, String objectName, String uploadId, Part[] parts)\n       throws InvalidBucketNameException, IllegalArgumentException, NoSuchAlgorithmException,\n           InsufficientDataException, IOException, InvalidKeyException, ServerException,\n           XmlParserException, ErrorResponseException, InternalException, InvalidResponseException {\n-    Map<String, String> queryParamMap = new HashMap<>();\n-    queryParamMap.put(UPLOAD_ID, uploadId);\n-    CompleteMultipartUpload completeManifest = new CompleteMultipartUpload(parts);\n-    Response response = executePost(bucketName, objectName, null, queryParamMap, completeManifest);\n-    String bodyContent = \"\";\n-    try (ResponseBody body = response.body()) {\n-      bodyContent = new String(body.bytes(), StandardCharsets.UTF_8);\n-      bodyContent = bodyContent.trim();\n+    completeMultipartUpload(bucketName, null, objectName, uploadId, parts, null, null);\n+  }\n+\n+  /**\n+   * Do <a\n+   * href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html\">CompleteMultipartUpload\n+   * S3 API</a>.\n+   *\n+   * @param bucketName Name of the bucket.\n+   * @param region Region of the bucket.\n+   * @param objectName Object name in the bucket.\n+   * @param uploadId Upload ID.\n+   * @param parts List of parts.\n+   * @param extraHeaders Extra headers.\n+   * @param extraQueryParams Extra query parameters.\n+   * @return {@link ObjectWriteReply} object.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   */\n+  protected ObjectWriteReply completeMultipartUpload(\n+      String bucketName,\n+      String region,\n+      String objectName,\n+      String uploadId,\n+      Part[] parts,\n+      Multimap<String, String> extraHeaders,\n+      Multimap<String, String> extraQueryParams)\n+      throws InvalidBucketNameException, IllegalArgumentException, NoSuchAlgorithmException,\n+          InsufficientDataException, IOException, InvalidKeyException, ServerException,\n+          XmlParserException, ErrorResponseException, InternalException, InvalidResponseException {\n+    Multimap<String, String> queryParams = HashMultimap.create();\n+    if (extraQueryParams != null) {\n+      queryParams.putAll(extraQueryParams);\n     }\n+    queryParams.put(UPLOAD_ID, uploadId);\n \n-    // Handle if body contains error.\n-    if (!bodyContent.isEmpty()) {\n-      try {\n-        if (Xml.validate(ErrorResponse.class, bodyContent)) {\n-          ErrorResponse errorResponse = Xml.unmarshal(ErrorResponse.class, bodyContent);\n-          throw new ErrorResponseException(errorResponse, response);\n+    try (Response response =\n+        execute(\n+            Method.POST,\n+            bucketName,\n+            objectName,\n+            (region != null) ? region : getRegion(bucketName),\n+            extraHeaders,\n+            queryParams,\n+            new CompleteMultipartUpload(parts),\n+            0)) {\n+      String etag = null;\n+\n+      String bodyContent = new String(response.body().bytes(), StandardCharsets.UTF_8);\n+      bodyContent = bodyContent.trim();\n+      if (!bodyContent.isEmpty()) {\n+        try {\n+          if (Xml.validate(ErrorResponse.class, bodyContent)) {\n+            ErrorResponse errorResponse = Xml.unmarshal(ErrorResponse.class, bodyContent);\n+            throw new ErrorResponseException(errorResponse, response);\n+          }\n+        } catch (XmlParserException e) {\n+          // As it is not <Error> message, ignore this exception", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc4MDY5OQ=="}, "originalCommit": {"oid": "98d6ed38bf0daee4caf1c1cfe40f607d5cf451ee"}, "originalPosition": 585}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjEzODg1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/MinioClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMjoxNDozMlrOGjvjUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoyMTozN1rOGjx4aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEzMjQzNA==", "bodyText": "Why is ssec not used ?", "url": "https://github.com/minio/minio-java/pull/972#discussion_r440132434", "createdAt": "2020-06-15T12:14:32Z", "author": {"login": "sinhaashish"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -5053,47 +5074,21 @@ private void putObject(\n    * @throws IOException thrown to indicate I/O error on S3 operation.\n    * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n    * @throws XmlParserException thrown to indicate XML parsing error.\n+   * @deprecated use {@link #uploadObject(UploadObjectArgs)}\n    */\n+  @Deprecated\n   public void putObject(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e414f8eab1174acea716ee3bef55d128bb5f2640"}, "originalPosition": 299}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE3MDYwMA==", "bodyText": "Oops! Missed it. Fixing now.", "url": "https://github.com/minio/minio-java/pull/972#discussion_r440170600", "createdAt": "2020-06-15T13:21:37Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -5053,47 +5074,21 @@ private void putObject(\n    * @throws IOException thrown to indicate I/O error on S3 operation.\n    * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n    * @throws XmlParserException thrown to indicate XML parsing error.\n+   * @deprecated use {@link #uploadObject(UploadObjectArgs)}\n    */\n+  @Deprecated\n   public void putObject(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEzMjQzNA=="}, "originalCommit": {"oid": "e414f8eab1174acea716ee3bef55d128bb5f2640"}, "originalPosition": 299}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 736, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}