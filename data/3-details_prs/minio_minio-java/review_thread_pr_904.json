{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNTY2ODE1", "number": 904, "reviewThreads": {"totalCount": 57, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMTo0NDoxMVrODyCM2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjoxOTowMVrODzz4cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzkxNDQ4OnYy", "diffSide": "RIGHT", "path": "examples/SetGetBucketObjectLockConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMTo0NDoxMVrOGF16dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoxMDowNFrOGF7kPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc3OTM4MQ==", "bodyText": "Shouldn't this be bucketConfig.duration() instead of bucketConfig.duration().duration()", "url": "https://github.com/minio/minio-java/pull/904#discussion_r408779381", "createdAt": "2020-04-15T11:44:11Z", "author": {"login": "nitisht"}, "path": "examples/SetGetBucketObjectLockConfig.java", "diffHunk": "@@ -56,7 +56,8 @@ public static void main(String[] args)\n \n       System.out.println(\"Default retention configuration of bucket\");\n       System.out.println(\"Mode: \" + bucketConfig.mode());\n-      System.out.println(\"Duration: \" + bucketConfig.duration());\n+      System.out.println(\n+          \"Duration: \" + bucketConfig.duration().duration() + \" \" + bucketConfig.duration().unit());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc0b914021d3f3a1a49e22dd87881bc70c269e3a"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgwNDMyOQ==", "bodyText": "bucketConfig.duration() returns a RetentionDuration object which actually contains the duration and unit i.e. days or years.\nReturning bucketConfig.duration()  will  just print the object which is  composed of the name of the class, an @ symbol and the hashcode of the object in hexadecimal.\nWe need to fetch the exact duration and unit and thus this change is needed.", "url": "https://github.com/minio/minio-java/pull/904#discussion_r408804329", "createdAt": "2020-04-15T12:30:38Z", "author": {"login": "sinhaashish"}, "path": "examples/SetGetBucketObjectLockConfig.java", "diffHunk": "@@ -56,7 +56,8 @@ public static void main(String[] args)\n \n       System.out.println(\"Default retention configuration of bucket\");\n       System.out.println(\"Mode: \" + bucketConfig.mode());\n-      System.out.println(\"Duration: \" + bucketConfig.duration());\n+      System.out.println(\n+          \"Duration: \" + bucketConfig.duration().duration() + \" \" + bucketConfig.duration().unit());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc3OTM4MQ=="}, "originalCommit": {"oid": "bc0b914021d3f3a1a49e22dd87881bc70c269e3a"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3MTk5Ng==", "bodyText": "Have toString() to RetentionDurationDays and RetentionDurationYears classes to have friendlier message.", "url": "https://github.com/minio/minio-java/pull/904#discussion_r408871996", "createdAt": "2020-04-15T14:10:04Z", "author": {"login": "balamurugana"}, "path": "examples/SetGetBucketObjectLockConfig.java", "diffHunk": "@@ -56,7 +56,8 @@ public static void main(String[] args)\n \n       System.out.println(\"Default retention configuration of bucket\");\n       System.out.println(\"Mode: \" + bucketConfig.mode());\n-      System.out.println(\"Duration: \" + bucketConfig.duration());\n+      System.out.println(\n+          \"Duration: \" + bucketConfig.duration().duration() + \" \" + bucketConfig.duration().unit());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc3OTM4MQ=="}, "originalCommit": {"oid": "bc0b914021d3f3a1a49e22dd87881bc70c269e3a"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODQ4ODY5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/messages/RetentionDurationDays.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDowODozMVrOGF7f3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDowODozMVrOGF7f3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3MDg3OQ==", "bodyText": "Have no arg constructor to RetentionDurationYears too.", "url": "https://github.com/minio/minio-java/pull/904#discussion_r408870879", "createdAt": "2020-04-15T14:08:31Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/messages/RetentionDurationDays.java", "diffHunk": "@@ -25,6 +25,8 @@\n   @Text(required = false)\n   private Integer days;\n \n+  public RetentionDurationDays() {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc0b914021d3f3a1a49e22dd87881bc70c269e3a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODc4NDI2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/messages/RetentionDurationDays.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToxMDo1OVrOGF-dQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToxMDo1OVrOGF-dQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxOTM2Mw==", "bodyText": "days may be null. Below is the right way to fix\nif (days == null) {\n  return null;\n}\n\nreturn days.toString() + ((days == 1) ? \" day\" : \" days\");", "url": "https://github.com/minio/minio-java/pull/904#discussion_r408919363", "createdAt": "2020-04-15T15:10:59Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/messages/RetentionDurationDays.java", "diffHunk": "@@ -36,4 +38,10 @@ public RetentionDurationUnit unit() {\n   public int duration() {\n     return days;\n   }\n+\n+  /** Returns RetentionDurationDays as string. */\n+  @Override\n+  public String toString() {\n+    return (days == 1) ? days + \" day\" : days + \" days\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6745475e46b3d6c92bbea3982a3af10676262d31"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODc4NjMzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/messages/RetentionDurationYears.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToxMToyNVrOGF-eng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToxMToyNVrOGF-eng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxOTcxMA==", "bodyText": "same as above", "url": "https://github.com/minio/minio-java/pull/904#discussion_r408919710", "createdAt": "2020-04-15T15:11:25Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/messages/RetentionDurationYears.java", "diffHunk": "@@ -36,4 +38,10 @@ public RetentionDurationUnit unit() {\n   public int duration() {\n     return years;\n   }\n+\n+  /** Returns RetentionDurationYears as string. */\n+  @Override\n+  public String toString() {\n+    return (years == 1) ? years + \" year\" : years + \" years\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6745475e46b3d6c92bbea3982a3af10676262d31"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODc5MDk2OnYy", "diffSide": "RIGHT", "path": "examples/SetGetBucketObjectLockConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToxMjoyNVrOGF-hjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToxMjoyNVrOGF-hjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyMDQ2Mw==", "bodyText": "no change required", "url": "https://github.com/minio/minio-java/pull/904#discussion_r408920463", "createdAt": "2020-04-15T15:12:25Z", "author": {"login": "balamurugana"}, "path": "examples/SetGetBucketObjectLockConfig.java", "diffHunk": "@@ -54,9 +54,8 @@ public static void main(String[] args)\n       // Get object lock configuration\n       ObjectLockConfiguration bucketConfig = s3Client.getDefaultRetention(\"my-bucketname\");\n \n-      System.out.println(\"Default retention configuration of bucket\");\n-      System.out.println(\"Mode: \" + bucketConfig.mode());\n-      System.out.println(\"Duration: \" + bucketConfig.duration());\n+      System.out.print(\"Default retention configuration of bucket is \");\n+      System.out.println(bucketConfig.mode() + \" mode for \" + bucketConfig.duration().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6745475e46b3d6c92bbea3982a3af10676262d31"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTE1NzEzOnYy", "diffSide": "RIGHT", "path": "examples/SetGetBucketObjectLockConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjozNjoyNFrOGGCJIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjozNjoyNFrOGGCJIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3OTc0Ng==", "bodyText": "Why not a new line?", "url": "https://github.com/minio/minio-java/pull/904#discussion_r408979746", "createdAt": "2020-04-15T16:36:24Z", "author": {"login": "balamurugana"}, "path": "examples/SetGetBucketObjectLockConfig.java", "diffHunk": "@@ -54,7 +54,7 @@ public static void main(String[] args)\n       // Get object lock configuration\n       ObjectLockConfiguration bucketConfig = s3Client.getDefaultRetention(\"my-bucketname\");\n \n-      System.out.println(\"Default retention configuration of bucket\");\n+      System.out.print(\"Default retention configuration of bucket  \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eed207fdf77067c0c6a4d02115a6252552a566c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTQ3Mjk1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/messages/ObjectLockConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODowMDoxNVrOGGFSHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODowMDoxNVrOGGFSHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAzMTE5Ng==", "bodyText": "This fix is incorrect. Either both values non-null or null. i.e. mode != null && duration != null and mode == null && duration == null are valid.\nBasically you need to have current if as else if", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409031196", "createdAt": "2020-04-15T18:00:15Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/messages/ObjectLockConfiguration.java", "diffHunk": "@@ -45,7 +45,7 @@ public ObjectLockConfiguration(RetentionMode mode, RetentionDuration duration)\n       this.rule = new Rule(mode, duration);\n     }\n \n-    if (mode != null || duration != null) {\n+    if (mode == null || duration == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bdbc4a876de4884683c25d1dd1f6de8373cae96"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTQ4MjM0OnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODowMzowM1rOGGFYRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODowMzowM1rOGGFYRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAzMjc3Mw==", "bodyText": "use ContentInputStream here with 1 KB size.", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409032773", "createdAt": "2020-04-15T18:03:03Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,196 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /**\n+   * Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   * disableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   */\n+  public static void enableDisableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      StringBuilder builder = new StringBuilder();\n+      for (int i = 0; i < 10; i++) {\n+        builder.append(\n+            \"Sphinx of black quartz, judge my vow: Used by Adobe InDesign to display font samples. \");\n+        builder.append(\"(29 letters)\\n\");\n+        builder.append(\n+            \"Jackdaws love my big sphinx of quartz: Similarly, used by Windows XP for some fonts. \");\n+        builder.append(\"---\\n\");\n+      }\n+      // Create a InputStream for object upload.\n+      ByteArrayInputStream bais = new ByteArrayInputStream(builder.toString().getBytes(\"UTF-8\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bdbc4a876de4884683c25d1dd1f6de8373cae96"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTUwMDE1OnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODowNzo1OFrOGGFjTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODowNzo1OFrOGGFjTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAzNTU5OQ==", "bodyText": "we would need to have two separate tests here.\n\nenableObjectLegalHold() - enable legal hold on an object; on success, overwrite/delete object should fail\ndisableObjectLegalHold() - disable legal hold on an object; on success, overwrite/delete object should succeed", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409035599", "createdAt": "2020-04-15T18:07:58Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,196 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /**\n+   * Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   * disableObjectLegalHold(String bucketName, String objectName, String versionId)\n+   */\n+  public static void enableDisableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bdbc4a876de4884683c25d1dd1f6de8373cae96"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTYzODY0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/messages/ObjectLockConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo0NjoyN1rOGGG7Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo0NjoyN1rOGGG7Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA1ODA5MA==", "bodyText": "Can we not elaborate a bit more on the error here? by doing\nif (mode != null && duration != null) {\n} else if (mode == null) {\n       IllegalArgumentException(\"mode is null\");\n} else if (duration == null) {\n       IllegalArgumentException(\"duration is null\");\n}", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409058090", "createdAt": "2020-04-15T18:46:27Z", "author": {"login": "harshavardhana"}, "path": "api/src/main/java/io/minio/messages/ObjectLockConfiguration.java", "diffHunk": "@@ -43,9 +43,7 @@ public ObjectLockConfiguration(RetentionMode mode, RetentionDuration duration)\n       throws IllegalArgumentException {\n     if (mode != null && duration != null) {\n       this.rule = new Rule(mode, duration);\n-    }\n-\n-    if (mode == null || duration == null) {\n+    } else if (mode != null || duration != null) {\n       throw new IllegalArgumentException(\"mode or duration is null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8583469e670b627c2fc976a786890bfa9a816fe"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTgyNzU1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/messages/ObjectLockConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo0MDoxMVrOGGIyQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo0MDoxMVrOGGIyQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA4ODU3OQ==", "bodyText": "This is wrong check. You would need to preserve current if with else if with specific error message is requested\n    else if (mode != null || duration != null) {\n      if (mode == null) {\n        throw new IllegalArgumentException(\"mode is null\");\n      }\n      throw new IllegalArgumentException(\"duration is null\");\n    }", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409088579", "createdAt": "2020-04-15T19:40:11Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/messages/ObjectLockConfiguration.java", "diffHunk": "@@ -43,10 +43,10 @@ public ObjectLockConfiguration(RetentionMode mode, RetentionDuration duration)\n       throws IllegalArgumentException {\n     if (mode != null && duration != null) {\n       this.rule = new Rule(mode, duration);\n-    }\n-\n-    if (mode != null || duration != null) {\n-      throw new IllegalArgumentException(\"mode or duration is null\");\n+    } else if (mode == null) {\n+      throw new IllegalArgumentException(\"mode is null\");\n+    } else if (duration == null) {\n+      throw new IllegalArgumentException(\"duration is null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4851b03fca36e3809a0c50aadf4dd807b590e9f1"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTAwNTUzOnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDowNjowNlrOGGTyeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDowNjowNlrOGGTyeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI2ODg1Ng==", "bodyText": "bucketName is good enough.", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409268856", "createdAt": "2020-04-16T04:06:06Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a56f177b7cd72462843f01890ab1eb379a06549a"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTAwNzI1OnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDowNzowNVrOGGTzZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNDozMToyMVrOGG_m9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI2OTA5NQ==", "bodyText": "Is this error message same in AWS S3?", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409269095", "createdAt": "2020-04-16T04:07:05Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a56f177b7cd72462843f01890ab1eb379a06549a"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk4NjgwNw==", "bodyText": "AWS doesn't error out if  version is  not passed. So removed this check.", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409986807", "createdAt": "2020-04-17T04:31:21Z", "author": {"login": "sinhaashish"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI2OTA5NQ=="}, "originalCommit": {"oid": "a56f177b7cd72462843f01890ab1eb379a06549a"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTAwOTMwOnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDowODoyOFrOGGT0ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDowODoyOFrOGGT0ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI2OTQwNg==", "bodyText": "same as above", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409269406", "createdAt": "2020-04-16T04:08:28Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a56f177b7cd72462843f01890ab1eb379a06549a"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTAxMTU5OnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDowOTo0M1rOGGT14g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDowOTo0M1rOGGT14g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI2OTczMA==", "bodyText": "just bucketName is good enough", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409269730", "createdAt": "2020-04-16T04:09:43Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+\n+    try {\n+\n+      String bucketNameWithLock = getRandomName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a56f177b7cd72462843f01890ab1eb379a06549a"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTAxMzk1OnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDoxMToxNFrOGGT3NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDoxMToxNFrOGGT3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3MDA2OA==", "bodyText": "align with method name i.e. setDefaultRetention", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409270068", "createdAt": "2020-04-16T04:11:14Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultObjectLock_test() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a56f177b7cd72462843f01890ab1eb379a06549a"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTAxNDc1OnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDoxMTo1MFrOGGT3rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDoxMTo1MFrOGGT3rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3MDE4OQ==", "bodyText": "same as above", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409270189", "createdAt": "2020-04-16T04:11:50Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+\n+    try {\n+\n+      String bucketNameWithLock = getRandomName();\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      client.removeBucket(bucketNameWithLock);\n+      mintSuccessLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setDefaultRetention (String bucketName)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getDefaultRetention(String bucketName). */\n+  public static void getDefaultObjectLock_test() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a56f177b7cd72462843f01890ab1eb379a06549a"}, "originalPosition": 231}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTAxNTkzOnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDoxMjoyMFrOGGT4SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDoxMjoyMFrOGGT4SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3MDM0NQ==", "bodyText": "same as above", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409270345", "createdAt": "2020-04-16T04:12:20Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+\n+    try {\n+\n+      String bucketNameWithLock = getRandomName();\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      client.removeBucket(bucketNameWithLock);\n+      mintSuccessLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setDefaultRetention (String bucketName)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getDefaultRetention(String bucketName). */\n+  public static void getDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: getDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameWithLock = getRandomName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a56f177b7cd72462843f01890ab1eb379a06549a"}, "originalPosition": 237}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTAyMzAzOnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDoxNjoxN1rOGGT8NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDoxNjoxN1rOGGT8NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3MTM0OQ==", "bodyText": "use == operator to avoid NullPointerException", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409271349", "createdAt": "2020-04-16T04:16:17Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+\n+    try {\n+\n+      String bucketNameWithLock = getRandomName();\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      client.removeBucket(bucketNameWithLock);\n+      mintSuccessLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setDefaultRetention (String bucketName)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getDefaultRetention(String bucketName). */\n+  public static void getDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: getDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameWithLock = getRandomName();\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      // Get object lock configuration\n+      ObjectLockConfiguration bucketConfig = client.getDefaultRetention(bucketNameWithLock);\n+\n+      if (!bucketConfig.mode().equals(RetentionMode.COMPLIANCE)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a56f177b7cd72462843f01890ab1eb379a06549a"}, "originalPosition": 249}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTAyODcwOnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDoxOTo0OFrOGGT_dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwOToxNDowM1rOGGcFdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3MjE4Mw==", "bodyText": "For AWS S3, versionId should be passed i.e. this call will fail. Can you confirm?", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409272183", "createdAt": "2020-04-16T04:19:48Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a56f177b7cd72462843f01890ab1eb379a06549a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5NTIxMQ==", "bodyText": "Modified the code in MinioClient.java to\n    if (versionId != null && !versionId.isEmpty()) {\n      queryParamMap.put(\"versionId\", versionId);\n    }\n\nSo here in test case if we pass \"\" , the versionId is not set and this test passes against S3.", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409395211", "createdAt": "2020-04-16T08:59:08Z", "author": {"login": "sinhaashish"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3MjE4Mw=="}, "originalCommit": {"oid": "a56f177b7cd72462843f01890ab1eb379a06549a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQwNDc5MA==", "bodyText": "We may need to use this logic in all methods accepting versionId argument.", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409404790", "createdAt": "2020-04-16T09:14:03Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3MjE4Mw=="}, "originalCommit": {"oid": "a56f177b7cd72462843f01890ab1eb379a06549a"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTAzMzgwOnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDoyMjozNVrOGGUCVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDoyMjozNVrOGGUCVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3MjkxNg==", "bodyText": "you are not capturing this error in case of mint mode. we need this error in mint mode too.", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409272916", "createdAt": "2020-04-16T04:22:35Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a56f177b7cd72462843f01890ab1eb379a06549a"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTAzODAzOnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDoyNDo1M1rOGGUEyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDoyNDo1M1rOGGUEyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3MzU0NQ==", "bodyText": "same as above", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409273545", "createdAt": "2020-04-16T04:24:53Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a56f177b7cd72462843f01890ab1eb379a06549a"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTA0MTYxOnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDoyNzowNVrOGGUG_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNDozMTo1MlrOGG_nhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NDEwOA==", "bodyText": "this cleanup won't be executed if one of above conditions throw exceptions. you would need to fix it accordingly.", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409274108", "createdAt": "2020-04-16T04:27:05Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a56f177b7cd72462843f01890ab1eb379a06549a"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk4Njk0OQ==", "bodyText": "added finally block for cleanup", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409986949", "createdAt": "2020-04-17T04:31:52Z", "author": {"login": "sinhaashish"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NDEwOA=="}, "originalCommit": {"oid": "a56f177b7cd72462843f01890ab1eb379a06549a"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTA0MzMxOnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDoyODoxMVrOGGUIBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDoyODoxMVrOGGUIBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NDM3NA==", "bodyText": "same as above", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409274374", "createdAt": "2020-04-16T04:28:11Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a56f177b7cd72462843f01890ab1eb379a06549a"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTA0MzYyOnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDoyODoyNVrOGGUIPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDoyODoyNVrOGGUIPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NDQzMA==", "bodyText": "same as above", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409274430", "createdAt": "2020-04-16T04:28:25Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a56f177b7cd72462843f01890ab1eb379a06549a"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTA0ODY1OnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDozMToyM1rOGGULKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDozMToyM1rOGGULKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NTE3OA==", "bodyText": "repetitive catch block here.", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409275178", "createdAt": "2020-04-16T04:31:23Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a56f177b7cd72462843f01890ab1eb379a06549a"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTA0ODgzOnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDozMTozM1rOGGULRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDozMTozM1rOGGULRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NTIwNw==", "bodyText": "repetitive catch block here.", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409275207", "createdAt": "2020-04-16T04:31:33Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a56f177b7cd72462843f01890ab1eb379a06549a"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTA0OTU1OnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDozMTo1MlrOGGULpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDozMTo1MlrOGGULpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NTMwMQ==", "bodyText": "this try has no meaning", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409275301", "createdAt": "2020-04-16T04:31:52Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a56f177b7cd72462843f01890ab1eb379a06549a"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTA1MDY1OnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDozMjozOVrOGGUMVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDozMjozOVrOGGUMVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NTQ3OA==", "bodyText": "this clean up won't be executed if above throws an exception.", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409275478", "createdAt": "2020-04-16T04:32:39Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a56f177b7cd72462843f01890ab1eb379a06549a"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTA1NTg0OnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDozNTozN1rOGGUPVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDozNTozN1rOGGUPVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NjI0NQ==", "bodyText": "rename has expectedConfig", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409276245", "createdAt": "2020-04-16T04:35:37Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+\n+    try {\n+\n+      String bucketNameWithLock = getRandomName();\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      client.removeBucket(bucketNameWithLock);\n+      mintSuccessLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setDefaultRetention (String bucketName)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getDefaultRetention(String bucketName). */\n+  public static void getDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: getDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameWithLock = getRandomName();\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a56f177b7cd72462843f01890ab1eb379a06549a"}, "originalPosition": 242}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTA1NjE1OnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDozNTo1M1rOGGUPig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDozNTo1M1rOGGUPig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NjI5OA==", "bodyText": "have it as config", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409276298", "createdAt": "2020-04-16T04:35:53Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+\n+    try {\n+\n+      String bucketNameWithLock = getRandomName();\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      client.removeBucket(bucketNameWithLock);\n+      mintSuccessLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setDefaultRetention (String bucketName)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getDefaultRetention(String bucketName). */\n+  public static void getDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: getDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameWithLock = getRandomName();\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      // Get object lock configuration\n+      ObjectLockConfiguration bucketConfig = client.getDefaultRetention(bucketNameWithLock);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a56f177b7cd72462843f01890ab1eb379a06549a"}, "originalPosition": 247}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTA1NzA4OnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDozNjoyNFrOGGUQDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDozNjoyNFrOGGUQDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NjQyOA==", "bodyText": "this should be captured in mint mode as well", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409276428", "createdAt": "2020-04-16T04:36:24Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+\n+    try {\n+\n+      String bucketNameWithLock = getRandomName();\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      client.removeBucket(bucketNameWithLock);\n+      mintSuccessLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setDefaultRetention (String bucketName)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getDefaultRetention(String bucketName). */\n+  public static void getDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: getDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameWithLock = getRandomName();\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      // Get object lock configuration\n+      ObjectLockConfiguration bucketConfig = client.getDefaultRetention(bucketNameWithLock);\n+\n+      if (!bucketConfig.mode().equals(RetentionMode.COMPLIANCE)) {\n+        System.out.println(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a56f177b7cd72462843f01890ab1eb379a06549a"}, "originalPosition": 250}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTA2MTk0OnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDozOToyM1rOGGUSwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDozOToyM1rOGGUSwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NzEyMA==", "bodyText": "This check should be optimal\nconfig.duration().unit() == expectedConfig.duration().unit() && config.duration().duration() == expectedConfig.duration().duration()", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409277120", "createdAt": "2020-04-16T04:39:23Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+\n+    try {\n+\n+      String bucketNameWithLock = getRandomName();\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      client.removeBucket(bucketNameWithLock);\n+      mintSuccessLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setDefaultRetention (String bucketName)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getDefaultRetention(String bucketName). */\n+  public static void getDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: getDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameWithLock = getRandomName();\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      // Get object lock configuration\n+      ObjectLockConfiguration bucketConfig = client.getDefaultRetention(bucketNameWithLock);\n+\n+      if (!bucketConfig.mode().equals(RetentionMode.COMPLIANCE)) {\n+        System.out.println(\n+            \"FAILED. expected mode : \"\n+                + RetentionMode.COMPLIANCE\n+                + \", got: \"\n+                + bucketConfig.mode());\n+      }\n+\n+      if (!(bucketConfig.duration().duration() + \" \" + bucketConfig.duration().unit())\n+          .equals(\"10 DAYS\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a56f177b7cd72462843f01890ab1eb379a06549a"}, "originalPosition": 258}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTA2Mjg3OnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDozOTo1N1rOGGUTTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDozOTo1N1rOGGUTTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NzI2Mw==", "bodyText": "capture in mint mode too", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409277263", "createdAt": "2020-04-16T04:39:57Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+\n+    try {\n+\n+      String bucketNameWithLock = getRandomName();\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      client.removeBucket(bucketNameWithLock);\n+      mintSuccessLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setDefaultRetention (String bucketName)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getDefaultRetention(String bucketName). */\n+  public static void getDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: getDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameWithLock = getRandomName();\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      // Get object lock configuration\n+      ObjectLockConfiguration bucketConfig = client.getDefaultRetention(bucketNameWithLock);\n+\n+      if (!bucketConfig.mode().equals(RetentionMode.COMPLIANCE)) {\n+        System.out.println(\n+            \"FAILED. expected mode : \"\n+                + RetentionMode.COMPLIANCE\n+                + \", got: \"\n+                + bucketConfig.mode());\n+      }\n+\n+      if (!(bucketConfig.duration().duration() + \" \" + bucketConfig.duration().unit())\n+          .equals(\"10 DAYS\")) {\n+        System.out.println(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a56f177b7cd72462843f01890ab1eb379a06549a"}, "originalPosition": 259}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTA2Mzk2OnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDo0MDozNlrOGGUT9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDo0MDozNlrOGGUT9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NzQzMA==", "bodyText": "there is already stringifier.", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409277430", "createdAt": "2020-04-16T04:40:36Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+\n+    try {\n+\n+      String bucketNameWithLock = getRandomName();\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      client.removeBucket(bucketNameWithLock);\n+      mintSuccessLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setDefaultRetention (String bucketName)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getDefaultRetention(String bucketName). */\n+  public static void getDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: getDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameWithLock = getRandomName();\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      // Get object lock configuration\n+      ObjectLockConfiguration bucketConfig = client.getDefaultRetention(bucketNameWithLock);\n+\n+      if (!bucketConfig.mode().equals(RetentionMode.COMPLIANCE)) {\n+        System.out.println(\n+            \"FAILED. expected mode : \"\n+                + RetentionMode.COMPLIANCE\n+                + \", got: \"\n+                + bucketConfig.mode());\n+      }\n+\n+      if (!(bucketConfig.duration().duration() + \" \" + bucketConfig.duration().unit())\n+          .equals(\"10 DAYS\")) {\n+        System.out.println(\n+            \"FAILED. expected duration : \"\n+                + \"10 DAYS\"\n+                + \", got: \"\n+                + (bucketConfig.duration().duration() + \" \" + bucketConfig.duration().unit()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a56f177b7cd72462843f01890ab1eb379a06549a"}, "originalPosition": 263}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTA2NDU5OnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDo0MDo1NlrOGGUUWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDo0MDo1NlrOGGUUWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NzUzMQ==", "bodyText": "you should use expectedConfig.duration()", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409277531", "createdAt": "2020-04-16T04:40:56Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+\n+    try {\n+\n+      String bucketNameWithLock = getRandomName();\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      client.removeBucket(bucketNameWithLock);\n+      mintSuccessLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setDefaultRetention (String bucketName)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getDefaultRetention(String bucketName). */\n+  public static void getDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: getDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameWithLock = getRandomName();\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      // Get object lock configuration\n+      ObjectLockConfiguration bucketConfig = client.getDefaultRetention(bucketNameWithLock);\n+\n+      if (!bucketConfig.mode().equals(RetentionMode.COMPLIANCE)) {\n+        System.out.println(\n+            \"FAILED. expected mode : \"\n+                + RetentionMode.COMPLIANCE\n+                + \", got: \"\n+                + bucketConfig.mode());\n+      }\n+\n+      if (!(bucketConfig.duration().duration() + \" \" + bucketConfig.duration().unit())\n+          .equals(\"10 DAYS\")) {\n+        System.out.println(\n+            \"FAILED. expected duration : \"\n+                + \"10 DAYS\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a56f177b7cd72462843f01890ab1eb379a06549a"}, "originalPosition": 261}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTA2NTMzOnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDo0MToyOFrOGGUUzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDo0MToyOFrOGGUUzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NzY0Ng==", "bodyText": "cleanup issue in case of exception raised.", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409277646", "createdAt": "2020-04-16T04:41:28Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,293 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (ErrorResponseException e) {\n+        if (!e.errorResponse()\n+            .message()\n+            .equals(\"Object is WORM protected and cannot be overwritten\")) {\n+          mintFailedLog(\n+              \"enableObjectLegalHold\",\n+              \"(String bucketName, String objectName, String versionId)\",\n+              startTime,\n+              null,\n+              e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+          throw e;\n+        }\n+      }\n+\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+      client.removeObject(bucketNameLegalHold, objectName);\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameLegalHold = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketNameLegalHold, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"True\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketNameLegalHold, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \"\n+                + \"False\"\n+                + \", got: \"\n+                + client.isObjectLegalHoldEnabled(bucketNameLegalHold, objectName, \"\"));\n+      }\n+\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketNameLegalHold, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+      try {\n+        client.removeObject(bucketNameLegalHold, objectName);\n+      } catch (Exception e) {\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+\n+      client.removeBucket(bucketNameLegalHold);\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+\n+    try {\n+\n+      String bucketNameWithLock = getRandomName();\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      client.removeBucket(bucketNameWithLock);\n+      mintSuccessLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setDefaultRetention (String bucketName)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getDefaultRetention(String bucketName). */\n+  public static void getDefaultObjectLock_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: getDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketNameWithLock = getRandomName();\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketNameWithLock, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketNameWithLock, config);\n+      // Get object lock configuration\n+      ObjectLockConfiguration bucketConfig = client.getDefaultRetention(bucketNameWithLock);\n+\n+      if (!bucketConfig.mode().equals(RetentionMode.COMPLIANCE)) {\n+        System.out.println(\n+            \"FAILED. expected mode : \"\n+                + RetentionMode.COMPLIANCE\n+                + \", got: \"\n+                + bucketConfig.mode());\n+      }\n+\n+      if (!(bucketConfig.duration().duration() + \" \" + bucketConfig.duration().unit())\n+          .equals(\"10 DAYS\")) {\n+        System.out.println(\n+            \"FAILED. expected duration : \"\n+                + \"10 DAYS\"\n+                + \", got: \"\n+                + (bucketConfig.duration().duration() + \" \" + bucketConfig.duration().unit()));\n+      }\n+\n+      client.removeBucket(bucketNameWithLock);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a56f177b7cd72462843f01890ab1eb379a06549a"}, "originalPosition": 266}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTM1NTQzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/ErrorCode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMjozNjoyNVrOGG93mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMjozNjoyNVrOGG93mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk1ODI5Nw==", "bodyText": "keep this list sorted", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409958297", "createdAt": "2020-04-17T02:36:25Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/ErrorCode.java", "diffHunk": "@@ -156,7 +156,10 @@\n   USER_KEY_MUST_BE_SPECIFIED(\n       \"UserKeyMustBeSpecified\",\n       \"The bucket POST must contain the specified field name or check the order of the fields\"),\n-  X_AMZ_CONTENT_SHA256_MISMATCH(\"XAmzContentSHA256Mismatch\", \"content SHA256 mismatch\");\n+  X_AMZ_CONTENT_SHA256_MISMATCH(\"XAmzContentSHA256Mismatch\", \"content SHA256 mismatch\"),\n+  NO_SUCH_OBJECT_LOCK_CONFIGURATION(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7a2e3b1873442104f1558678f991dcc1043b2dd"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTM2NjY4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/MinioClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMjo0MTo1OVrOGG9-AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMjo0MTo1OVrOGG9-AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk1OTkzNw==", "bodyText": "use try-with-resource.\ntry (Response response = executeGet(bucketName, objectName, null, queryParamMap) {\n...\n...\n} catch (ErrorResponseException e) {\n  if (e.errorResponse().errorCode() != ErrorCode.NO_SUCH_OBJECT_LOCK_CONFIGURATION) {\n    throw e;\n  }\n}\n\nreturn null;", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409959937", "createdAt": "2020-04-17T02:41:59Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -3517,16 +3515,27 @@ public Retention getObjectRetention(String bucketName, String objectName, String\n     Map<String, String> queryParamMap = new HashMap<>();\n     queryParamMap.put(\"retention\", \"\");\n \n-    if (versionId == null) {\n-      queryParamMap.put(\"versionId\", \"\");\n-    } else {\n+    if (versionId != null && !versionId.isEmpty()) {\n       queryParamMap.put(\"versionId\", versionId);\n     }\n \n-    Response response = executeGet(bucketName, objectName, null, queryParamMap);\n-    try (ResponseBody body = response.body()) {\n-      return Xml.unmarshal(Retention.class, body.charStream());\n+    Response response = null;\n+    Retention retention = new Retention();\n+    try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7a2e3b1873442104f1558678f991dcc1043b2dd"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTM3NjIwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/MinioClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMjo0NzoxNVrOGG-DZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMjo0NzoxNVrOGG-DZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk2MTMxOQ==", "bodyText": "use try-with-resource.\ntry (Response response = executeGet(bucketName, objectName, null, queryParamMap)) {\n....\n....\n} catch (ErrorResponseException e) {\n  if (e.errorResponse().errorCode() != ErrorCode.NO_SUCH_OBJECT_LOCK_CONFIGURATION) {\n    throw e;\n  }\n}\n\nreturn false;", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409961319", "createdAt": "2020-04-17T02:47:15Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -3641,23 +3646,31 @@ public void disableObjectLegalHold(String bucketName, String objectName, String\n    * @throws XmlParserException thrown to indicate XML parsing error.\n    */\n   public boolean isObjectLegalHoldEnabled(String bucketName, String objectName, String versionId)\n-      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n-          InternalException, InvalidBucketNameException, InvalidKeyException,\n-          InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n+      throws IllegalArgumentException, InsufficientDataException, InternalException,\n+          InvalidBucketNameException, InvalidKeyException, InvalidResponseException, IOException,\n+          NoSuchAlgorithmException, XmlParserException {\n     Map<String, String> queryParamMap = new HashMap<>();\n     queryParamMap.put(\"legal-hold\", \"\");\n \n-    if (versionId == null) {\n-      queryParamMap.put(\"versionId\", \"\");\n-    } else {\n+    if (versionId != null && !versionId.isEmpty()) {\n       queryParamMap.put(\"versionId\", versionId);\n     }\n-    Response response = executeGet(bucketName, objectName, null, queryParamMap);\n-\n-    try (ResponseBody body = response.body()) {\n+    Response response = null;\n+    try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7a2e3b1873442104f1558678f991dcc1043b2dd"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTQxMDE1OnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMzowNjozM1rOGG-XJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMzowNjozM1rOGG-XJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk2NjM3Mg==", "bodyText": "This is problematic to have an failure here. Below logic is better to handle corners.\n    try {\n      client.makeBucket(...);\n      try {\n        client.putObject(...);\n        client.enableObjectLegalHold(...);\n        if (!client.isObjectLegalHoldEnabled(...)) {\n          throw Exception(...);\n        }\n        client.disableObjectLegalHold(...);\n        mintSucessLog(...);\n      } finally {\n        client.removeObject(...);\n        client.removeBucket(...);\n      }\n    } catch (Exception e) {\n      ErrorResponse errorResponse = null;\n      if (e instanceof ErrorResponseException) {\n        ErrorResponseException exp = (ErrorResponseException) e;\n        errorResponse = exp.errorResponse();\n      }\n\n      // Ignore NotImplemented error\n      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n        mintIgnoredLog(\n            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n            null,\n            startTime);\n      } else {\n        mintFailedLog(\n            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n            null,\n            startTime,\n            null,\n            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n        throw e;\n      }\n    }", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409966372", "createdAt": "2020-04-17T03:06:33Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,254 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketName, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketName, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \" + \"True\" + \", got: False \");\n+\n+        mintFailedLog(\n+            \"enableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            \"FAILED\" + \" >>> \",\n+            \" expected Object Legal Hold Enabled to be : \" + \"True\" + \", got: False\");\n+      }\n+\n+      client.disableObjectLegalHold(bucketName, objectName, \"\");\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    } finally {\n+      client.removeObject(bucketName, objectName);\n+      client.removeBucket(bucketName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7a2e3b1873442104f1558678f991dcc1043b2dd"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTQxMjgzOnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMzowODoxM1rOGG-Yug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMzowODoxM1rOGG-Yug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk2Njc3OA==", "bodyText": "return null to versionId than empty string. you can fix this everywhere in FunctionalTest", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409966778", "createdAt": "2020-04-17T03:08:13Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,254 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketName, objectName, \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7a2e3b1873442104f1558678f991dcc1043b2dd"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTQxNzQxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/MinioClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMzoxMDo1MlrOGG-bbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMzoxMDo1MlrOGG-bbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk2NzQ2OA==", "bodyText": "We still throw ErrorResponseException, hence there is no change here.", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409967468", "createdAt": "2020-04-17T03:10:52Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -3641,23 +3646,31 @@ public void disableObjectLegalHold(String bucketName, String objectName, String\n    * @throws XmlParserException thrown to indicate XML parsing error.\n    */\n   public boolean isObjectLegalHoldEnabled(String bucketName, String objectName, String versionId)\n-      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n-          InternalException, InvalidBucketNameException, InvalidKeyException,\n-          InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n+      throws IllegalArgumentException, InsufficientDataException, InternalException,\n+          InvalidBucketNameException, InvalidKeyException, InvalidResponseException, IOException,\n+          NoSuchAlgorithmException, XmlParserException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7a2e3b1873442104f1558678f991dcc1043b2dd"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTQxOTgxOnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMzoxMjozMFrOGG-cyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMzoxMjozMFrOGG-cyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk2NzgxNg==", "bodyText": "above logic applies here.", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409967816", "createdAt": "2020-04-17T03:12:30Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,254 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketName, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketName, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \" + \"True\" + \", got: False \");\n+\n+        mintFailedLog(\n+            \"enableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            \"FAILED\" + \" >>> \",\n+            \" expected Object Legal Hold Enabled to be : \" + \"True\" + \", got: False\");\n+      }\n+\n+      client.disableObjectLegalHold(bucketName, objectName, \"\");\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    } finally {\n+      client.removeObject(bucketName, objectName);\n+      client.removeBucket(bucketName);\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7a2e3b1873442104f1558678f991dcc1043b2dd"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTQyMTI2OnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMzoxMzoyN1rOGG-dqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMzoxMzoyN1rOGG-dqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk2ODA0Mw==", "bodyText": "above logic applies here.", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409968043", "createdAt": "2020-04-17T03:13:27Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,254 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketName, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketName, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \" + \"True\" + \", got: False \");\n+\n+        mintFailedLog(\n+            \"enableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            \"FAILED\" + \" >>> \",\n+            \" expected Object Legal Hold Enabled to be : \" + \"True\" + \", got: False\");\n+      }\n+\n+      client.disableObjectLegalHold(bucketName, objectName, \"\");\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    } finally {\n+      client.removeObject(bucketName, objectName);\n+      client.removeBucket(bucketName);\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketName, objectName, \"\");\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketName, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketName, objectName, \"\")) {\n+        if (client.isObjectLegalHoldEnabled(bucketName, objectName, \"\")) {\n+          System.out.println(\n+              \"FAILED. expected Object Legal Hold Enabled to be : \" + \"False\" + \", got: True\");\n+        }\n+\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            \"FAILED\" + \" >>> \",\n+            \" expected Object Legal Hold Enabled to be : \" + \"False\" + \", got: True\");\n+      }\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    } finally {\n+      client.removeObject(bucketName, objectName);\n+      client.removeBucket(bucketName);\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultRetention_test() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7a2e3b1873442104f1558678f991dcc1043b2dd"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTQyMjAyOnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMzoxMzo0NlrOGG-eDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMzoxMzo0NlrOGG-eDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk2ODE0Mg==", "bodyText": "above logic applies here.", "url": "https://github.com/minio/minio-java/pull/904#discussion_r409968142", "createdAt": "2020-04-17T03:13:46Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,254 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketName, objectName, \"\");\n+\n+      if (!client.isObjectLegalHoldEnabled(bucketName, objectName, \"\")) {\n+        System.out.println(\n+            \"FAILED. expected Object Legal Hold Enabled to be : \" + \"True\" + \", got: False \");\n+\n+        mintFailedLog(\n+            \"enableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            \"FAILED\" + \" >>> \",\n+            \" expected Object Legal Hold Enabled to be : \" + \"True\" + \", got: False\");\n+      }\n+\n+      client.disableObjectLegalHold(bucketName, objectName, \"\");\n+      mintSuccessLog(\n+          \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    } finally {\n+      client.removeObject(bucketName, objectName);\n+      client.removeBucket(bucketName);\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      // Enable object legal hold.\n+      client.enableObjectLegalHold(bucketName, objectName, \"\");\n+\n+      // Enable object legal hold.\n+      client.disableObjectLegalHold(bucketName, objectName, \"\");\n+\n+      if (client.isObjectLegalHoldEnabled(bucketName, objectName, \"\")) {\n+        if (client.isObjectLegalHoldEnabled(bucketName, objectName, \"\")) {\n+          System.out.println(\n+              \"FAILED. expected Object Legal Hold Enabled to be : \" + \"False\" + \", got: True\");\n+        }\n+\n+        mintFailedLog(\n+            \"disableObjectLegalHold\",\n+            \"(String bucketName, String objectName, String versionId)\",\n+            startTime,\n+            \"FAILED\" + \" >>> \",\n+            \" expected Object Legal Hold Enabled to be : \" + \"False\" + \", got: True\");\n+      }\n+      try (final InputStream is = new ContentInputStream(1 * KB)) {\n+        client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+      }\n+\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    } finally {\n+      client.removeObject(bucketName, objectName);\n+      client.removeBucket(bucketName);\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultRetention_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketName, null, true);\n+      // Declaring config with Retention mode as Compliance and duration as 10 day\n+      ObjectLockConfiguration config =\n+          new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+      // Set object lock configuration\n+      client.setDefaultRetention(bucketName, config);\n+      mintSuccessLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setDefaultRetention (String bucketName)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    } finally {\n+      client.removeBucket(bucketName);\n+    }\n+  }\n+\n+  /** Test: getDefaultRetention(String bucketName). */\n+  public static void getDefaultRetention_test() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7a2e3b1873442104f1558678f991dcc1043b2dd"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Nzc5NDg5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/MinioClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzowMDowNFrOGHV6HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzowMDowNFrOGHV6HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM1MjE1Nw==", "bodyText": "you could directly use response.body().charStream()", "url": "https://github.com/minio/minio-java/pull/904#discussion_r410352157", "createdAt": "2020-04-17T17:00:04Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -3517,16 +3515,20 @@ public Retention getObjectRetention(String bucketName, String objectName, String\n     Map<String, String> queryParamMap = new HashMap<>();\n     queryParamMap.put(\"retention\", \"\");\n \n-    if (versionId == null) {\n-      queryParamMap.put(\"versionId\", \"\");\n-    } else {\n+    if (versionId != null && !versionId.isEmpty()) {\n       queryParamMap.put(\"versionId\", versionId);\n     }\n \n-    Response response = executeGet(bucketName, objectName, null, queryParamMap);\n-    try (ResponseBody body = response.body()) {\n-      return Xml.unmarshal(Retention.class, body.charStream());\n+    try (Response response = executeGet(bucketName, objectName, null, queryParamMap)) {\n+      ResponseBody body = response.body();\n+      Retention retention = Xml.unmarshal(Retention.class, body.charStream());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9560470e32d6469ea0d42d72fafd0795607f9ff4"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Nzc5NzQ1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/MinioClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzowMDo1MFrOGHV7uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzowMDo1MFrOGHV7uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM1MjU2OQ==", "bodyText": "wrong check. e.errorResponse().errorCode() != ErrorCode.NO_SUCH_OBJECT_LOCK_CONFIGURATION", "url": "https://github.com/minio/minio-java/pull/904#discussion_r410352569", "createdAt": "2020-04-17T17:00:50Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -3517,16 +3515,20 @@ public Retention getObjectRetention(String bucketName, String objectName, String\n     Map<String, String> queryParamMap = new HashMap<>();\n     queryParamMap.put(\"retention\", \"\");\n \n-    if (versionId == null) {\n-      queryParamMap.put(\"versionId\", \"\");\n-    } else {\n+    if (versionId != null && !versionId.isEmpty()) {\n       queryParamMap.put(\"versionId\", versionId);\n     }\n \n-    Response response = executeGet(bucketName, objectName, null, queryParamMap);\n-    try (ResponseBody body = response.body()) {\n-      return Xml.unmarshal(Retention.class, body.charStream());\n+    try (Response response = executeGet(bucketName, objectName, null, queryParamMap)) {\n+      ResponseBody body = response.body();\n+      Retention retention = Xml.unmarshal(Retention.class, body.charStream());\n+      return retention;\n+    } catch (ErrorResponseException e) {\n+      if (e.errorResponse().errorCode() == ErrorCode.NO_SUCH_OBJECT_LOCK_CONFIGURATION) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9560470e32d6469ea0d42d72fafd0795607f9ff4"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Nzc5OTgxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/MinioClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzowMTozNVrOGHV9RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzowMTozNVrOGHV9RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM1Mjk2NA==", "bodyText": "same as above", "url": "https://github.com/minio/minio-java/pull/904#discussion_r410352964", "createdAt": "2020-04-17T17:01:35Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -3647,17 +3645,20 @@ public boolean isObjectLegalHoldEnabled(String bucketName, String objectName, St\n     Map<String, String> queryParamMap = new HashMap<>();\n     queryParamMap.put(\"legal-hold\", \"\");\n \n-    if (versionId == null) {\n-      queryParamMap.put(\"versionId\", \"\");\n-    } else {\n+    if (versionId != null && !versionId.isEmpty()) {\n       queryParamMap.put(\"versionId\", versionId);\n     }\n-    Response response = executeGet(bucketName, objectName, null, queryParamMap);\n \n-    try (ResponseBody body = response.body()) {\n+    try (Response response = executeGet(bucketName, objectName, null, queryParamMap)) {\n+      ResponseBody body = response.body();\n       LegalHold result = Xml.unmarshal(LegalHold.class, body.charStream());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9560470e32d6469ea0d42d72fafd0795607f9ff4"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzgzMDg2OnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzoxMjowNFrOGHWRig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzoxMjowNFrOGHWRig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM1ODE1NA==", "bodyText": "you could directly use and remove unused variables.\nif (!client.isObjectLegalHoldEnabled(bucketName, objectName, null)) {\n  throw new Exception(\"[FAILED] isObjectLegalHoldEnabled(): expected: true, got: false\");\n}", "url": "https://github.com/minio/minio-java/pull/904#discussion_r410358154", "createdAt": "2020-04-17T17:12:04Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,241 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+        // Enable object legal hold.\n+        boolean expectedStatus = true;\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+\n+        boolean isObjectLockEnabled = client.isObjectLegalHoldEnabled(bucketName, objectName, null);\n+        if (!isObjectLockEnabled) {\n+          throw new Exception(\n+              \"[FAILED] Expected: Is Object Legal Hold Enabled to be \"\n+                  + expectedStatus\n+                  + \", Got: \"\n+                  + isObjectLockEnabled);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9560470e32d6469ea0d42d72fafd0795607f9ff4"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzgzNTI3OnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzoxMzoyOFrOGHWUVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzoxMzoyOFrOGHWUVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM1ODg3MQ==", "bodyText": "you could directly use and remove unused variables.\nif (client.isObjectLegalHoldEnabled(bucketName, objectName, null)) {\n  throw new Exception(\"[FAILED] isObjectLegalHoldEnabled(): expected: false, got: true\");\n}", "url": "https://github.com/minio/minio-java/pull/904#discussion_r410358871", "createdAt": "2020-04-17T17:13:28Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,241 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+        // Enable object legal hold.\n+        boolean expectedStatus = true;\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+\n+        boolean isObjectLockEnabled = client.isObjectLegalHoldEnabled(bucketName, objectName, null);\n+        if (!isObjectLockEnabled) {\n+          throw new Exception(\n+              \"[FAILED] Expected: Is Object Legal Hold Enabled to be \"\n+                  + expectedStatus\n+                  + \", Got: \"\n+                  + isObjectLockEnabled);\n+        }\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+        mintSuccessLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } finally {\n+        client.removeObject(bucketName, objectName);\n+        client.removeBucket(bucketName);\n+      }\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+\n+        // Enable object legal hold.\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+\n+        // Enable object legal hold.\n+        boolean expectedStatus = false;\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+\n+        boolean isObjectLockEnabled = client.isObjectLegalHoldEnabled(bucketName, objectName, null);\n+\n+        if (isObjectLockEnabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9560470e32d6469ea0d42d72fafd0795607f9ff4"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzgzOTk1OnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzoxNDo0NlrOGHWXQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzoxNDo0NlrOGHWXQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM1OTYxOA==", "bodyText": "you can remove these obvious comments.", "url": "https://github.com/minio/minio-java/pull/904#discussion_r410359618", "createdAt": "2020-04-17T17:14:46Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,241 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+        // Enable object legal hold.\n+        boolean expectedStatus = true;\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+\n+        boolean isObjectLockEnabled = client.isObjectLegalHoldEnabled(bucketName, objectName, null);\n+        if (!isObjectLockEnabled) {\n+          throw new Exception(\n+              \"[FAILED] Expected: Is Object Legal Hold Enabled to be \"\n+                  + expectedStatus\n+                  + \", Got: \"\n+                  + isObjectLockEnabled);\n+        }\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+        mintSuccessLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } finally {\n+        client.removeObject(bucketName, objectName);\n+        client.removeBucket(bucketName);\n+      }\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+\n+        // Enable object legal hold.\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+\n+        // Enable object legal hold.\n+        boolean expectedStatus = false;\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+\n+        boolean isObjectLockEnabled = client.isObjectLegalHoldEnabled(bucketName, objectName, null);\n+\n+        if (isObjectLockEnabled) {\n+          throw new Exception(\n+              \"[FAILED] Expected: Is Object Legal Hold Enabled to be \"\n+                  + expectedStatus\n+                  + \", Got: \"\n+                  + isObjectLockEnabled);\n+        }\n+      } finally {\n+        client.removeObject(bucketName, objectName);\n+        client.removeBucket(bucketName);\n+      }\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultRetention_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        // Declaring config with Retention mode as Compliance and duration as 10 day", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9560470e32d6469ea0d42d72fafd0795607f9ff4"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Nzg0MDk0OnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzoxNTowMlrOGHWX2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzoxNTowMlrOGHWX2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM1OTc3MA==", "bodyText": "you can remove these obvious comments everywhere.", "url": "https://github.com/minio/minio-java/pull/904#discussion_r410359770", "createdAt": "2020-04-17T17:15:02Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,241 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+        // Enable object legal hold.\n+        boolean expectedStatus = true;\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+\n+        boolean isObjectLockEnabled = client.isObjectLegalHoldEnabled(bucketName, objectName, null);\n+        if (!isObjectLockEnabled) {\n+          throw new Exception(\n+              \"[FAILED] Expected: Is Object Legal Hold Enabled to be \"\n+                  + expectedStatus\n+                  + \", Got: \"\n+                  + isObjectLockEnabled);\n+        }\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+        mintSuccessLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } finally {\n+        client.removeObject(bucketName, objectName);\n+        client.removeBucket(bucketName);\n+      }\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+\n+        // Enable object legal hold.\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+\n+        // Enable object legal hold.\n+        boolean expectedStatus = false;\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+\n+        boolean isObjectLockEnabled = client.isObjectLegalHoldEnabled(bucketName, objectName, null);\n+\n+        if (isObjectLockEnabled) {\n+          throw new Exception(\n+              \"[FAILED] Expected: Is Object Legal Hold Enabled to be \"\n+                  + expectedStatus\n+                  + \", Got: \"\n+                  + isObjectLockEnabled);\n+        }\n+      } finally {\n+        client.removeObject(bucketName, objectName);\n+        client.removeBucket(bucketName);\n+      }\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultRetention_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        // Declaring config with Retention mode as Compliance and duration as 10 day\n+        ObjectLockConfiguration config =\n+            new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+        // Set object lock configuration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9560470e32d6469ea0d42d72fafd0795607f9ff4"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Nzg0NzM4OnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzoxNzowMlrOGHWb_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzoxNzowMlrOGHWb_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM2MDgyOQ==", "bodyText": "you can use new RetentionDurationYears(N) for completeness.", "url": "https://github.com/minio/minio-java/pull/904#discussion_r410360829", "createdAt": "2020-04-17T17:17:02Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,241 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+        // Enable object legal hold.\n+        boolean expectedStatus = true;\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+\n+        boolean isObjectLockEnabled = client.isObjectLegalHoldEnabled(bucketName, objectName, null);\n+        if (!isObjectLockEnabled) {\n+          throw new Exception(\n+              \"[FAILED] Expected: Is Object Legal Hold Enabled to be \"\n+                  + expectedStatus\n+                  + \", Got: \"\n+                  + isObjectLockEnabled);\n+        }\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+        mintSuccessLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } finally {\n+        client.removeObject(bucketName, objectName);\n+        client.removeBucket(bucketName);\n+      }\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+\n+        // Enable object legal hold.\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+\n+        // Enable object legal hold.\n+        boolean expectedStatus = false;\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+\n+        boolean isObjectLockEnabled = client.isObjectLegalHoldEnabled(bucketName, objectName, null);\n+\n+        if (isObjectLockEnabled) {\n+          throw new Exception(\n+              \"[FAILED] Expected: Is Object Legal Hold Enabled to be \"\n+                  + expectedStatus\n+                  + \", Got: \"\n+                  + isObjectLockEnabled);\n+        }\n+      } finally {\n+        client.removeObject(bucketName, objectName);\n+        client.removeBucket(bucketName);\n+      }\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultRetention_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        // Declaring config with Retention mode as Compliance and duration as 10 day\n+        ObjectLockConfiguration config =\n+            new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+\n+        // Set object lock configuration\n+        client.setDefaultRetention(bucketName, config);\n+      } finally {\n+        client.removeBucket(bucketName);\n+      }\n+      mintSuccessLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setDefaultRetention (String bucketName)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setDefaultRetention (String bucketName)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getDefaultRetention(String bucketName). */\n+  public static void getDefaultRetention_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: getDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    try {\n+      // Create bucket with object lock functionality enabled\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        // Declaring config with Retention mode as Compliance and duration as 10 day\n+        ObjectLockConfiguration expectedConfig =\n+            new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9560470e32d6469ea0d42d72fafd0795607f9ff4"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjUyNzAzOnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjoxNjoxNFrOGIcj6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjozODozOVrOGIdjzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwOTczOA==", "bodyText": "After setting enableObjectLegalHold we should attempt deleting the object and confirm that fails.", "url": "https://github.com/minio/minio-java/pull/904#discussion_r411509738", "createdAt": "2020-04-20T16:16:14Z", "author": {"login": "nitisht"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,230 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+        if (!client.isObjectLegalHoldEnabled(bucketName, objectName, null)) {\n+          throw new Exception(\"[FAILED] isObjectLegalHoldEnabled(): expected: true, got: false\");\n+        }\n+        client.disableObjectLegalHold(bucketName, objectName, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2b9130ea9de8cd9d7f27e51471c0f8ab7dcf03f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxODQ2OA==", "bodyText": "This was earlier implemented, but removed as of now as it works with MinIO, but when ran against S3 with versionId as null it succeeds. (deleted the object).\nYou need specific object version to fail thus it was removed.", "url": "https://github.com/minio/minio-java/pull/904#discussion_r411518468", "createdAt": "2020-04-20T16:28:10Z", "author": {"login": "sinhaashish"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,230 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+        if (!client.isObjectLegalHoldEnabled(bucketName, objectName, null)) {\n+          throw new Exception(\"[FAILED] isObjectLegalHoldEnabled(): expected: true, got: false\");\n+        }\n+        client.disableObjectLegalHold(bucketName, objectName, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwOTczOA=="}, "originalCommit": {"oid": "b2b9130ea9de8cd9d7f27e51471c0f8ab7dcf03f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUyNjA5Mg==", "bodyText": "IMO we can target to validate MinIO implementation", "url": "https://github.com/minio/minio-java/pull/904#discussion_r411526092", "createdAt": "2020-04-20T16:38:39Z", "author": {"login": "nitisht"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,230 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+        if (!client.isObjectLegalHoldEnabled(bucketName, objectName, null)) {\n+          throw new Exception(\"[FAILED] isObjectLegalHoldEnabled(): expected: true, got: false\");\n+        }\n+        client.disableObjectLegalHold(bucketName, objectName, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwOTczOA=="}, "originalCommit": {"oid": "b2b9130ea9de8cd9d7f27e51471c0f8ab7dcf03f"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjUzNTYzOnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjoxODowN1rOGIcpOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjoxODowN1rOGIcpOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxMTA5Nw==", "bodyText": "Here after disableObjectLegalHold we can attempt a delete and confirm that works", "url": "https://github.com/minio/minio-java/pull/904#discussion_r411511097", "createdAt": "2020-04-20T16:18:07Z", "author": {"login": "nitisht"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,230 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+        if (!client.isObjectLegalHoldEnabled(bucketName, objectName, null)) {\n+          throw new Exception(\"[FAILED] isObjectLegalHoldEnabled(): expected: true, got: false\");\n+        }\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+        mintSuccessLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } finally {\n+        client.removeObject(bucketName, objectName);\n+        client.removeBucket(bucketName);\n+      }\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+        client.disableObjectLegalHold(bucketName, objectName, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2b9130ea9de8cd9d7f27e51471c0f8ab7dcf03f"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjU0MDAxOnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjoxOTowMVrOGIcr2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjozNTo0N1rOGIdbeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxMTc2OQ==", "bodyText": "Here also we can attempt an upload and confirm the uploaded object can't be deleted.", "url": "https://github.com/minio/minio-java/pull/904#discussion_r411511769", "createdAt": "2020-04-20T16:19:01Z", "author": {"login": "nitisht"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,230 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+        if (!client.isObjectLegalHoldEnabled(bucketName, objectName, null)) {\n+          throw new Exception(\"[FAILED] isObjectLegalHoldEnabled(): expected: true, got: false\");\n+        }\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+        mintSuccessLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } finally {\n+        client.removeObject(bucketName, objectName);\n+        client.removeBucket(bucketName);\n+      }\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+        if (client.isObjectLegalHoldEnabled(bucketName, objectName, null)) {\n+          throw new Exception(\"[FAILED] isObjectLegalHoldEnabled(): expected: false, got: true\");\n+        }\n+      } finally {\n+        client.removeObject(bucketName, objectName);\n+        client.removeBucket(bucketName);\n+      }\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultRetention_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        ObjectLockConfiguration config =\n+            new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+        client.setDefaultRetention(bucketName, config);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2b9130ea9de8cd9d7f27e51471c0f8ab7dcf03f"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxNzAwNQ==", "bodyText": "If we do so, we can't do clean up of the test.", "url": "https://github.com/minio/minio-java/pull/904#discussion_r411517005", "createdAt": "2020-04-20T16:26:12Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,230 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+        if (!client.isObjectLegalHoldEnabled(bucketName, objectName, null)) {\n+          throw new Exception(\"[FAILED] isObjectLegalHoldEnabled(): expected: true, got: false\");\n+        }\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+        mintSuccessLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } finally {\n+        client.removeObject(bucketName, objectName);\n+        client.removeBucket(bucketName);\n+      }\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+        if (client.isObjectLegalHoldEnabled(bucketName, objectName, null)) {\n+          throw new Exception(\"[FAILED] isObjectLegalHoldEnabled(): expected: false, got: true\");\n+        }\n+      } finally {\n+        client.removeObject(bucketName, objectName);\n+        client.removeBucket(bucketName);\n+      }\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultRetention_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        ObjectLockConfiguration config =\n+            new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+        client.setDefaultRetention(bucketName, config);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxMTc2OQ=="}, "originalCommit": {"oid": "b2b9130ea9de8cd9d7f27e51471c0f8ab7dcf03f"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUyMzk2MQ==", "bodyText": "IMO Testing the MinIO Server's behaviour is more important, since this test will become part of Mint. It will be used to validate MinIO Server behaviour. We generally test against Play or Local MinIO instances - in both cases cleanup is not that important", "url": "https://github.com/minio/minio-java/pull/904#discussion_r411523961", "createdAt": "2020-04-20T16:35:47Z", "author": {"login": "nitisht"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3284,6 +3284,230 @@ public static void composeObject_test6() throws Exception {\n     }\n   }\n \n+  /** Test: enableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void enableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: enableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+        if (!client.isObjectLegalHoldEnabled(bucketName, objectName, null)) {\n+          throw new Exception(\"[FAILED] isObjectLegalHoldEnabled(): expected: true, got: false\");\n+        }\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+        mintSuccessLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } finally {\n+        client.removeObject(bucketName, objectName);\n+        client.removeBucket(bucketName);\n+      }\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableObjectLegalHold(String bucketName, String objectName, String versionId) */\n+  public static void disableObjectLegalHold_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: disableObjectLegalHold(String bucketName, String objectName, String versionId)\");\n+    }\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n+        }\n+        client.enableObjectLegalHold(bucketName, objectName, null);\n+        client.disableObjectLegalHold(bucketName, objectName, null);\n+        if (client.isObjectLegalHoldEnabled(bucketName, objectName, null)) {\n+          throw new Exception(\"[FAILED] isObjectLegalHoldEnabled(): expected: false, got: true\");\n+        }\n+      } finally {\n+        client.removeObject(bucketName, objectName);\n+        client.removeBucket(bucketName);\n+      }\n+      mintSuccessLog(\n+          \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+          null,\n+          startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime);\n+      } else {\n+        mintFailedLog(\n+            \"disableObjectLegalHold(String bucketName, String objectName, String versionId)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: setDefaultRetention(String bucketName). */\n+  public static void setDefaultRetention_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setDefaultRetention(String bucketName)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+\n+    try {\n+      client.makeBucket(bucketName, null, true);\n+      try {\n+        ObjectLockConfiguration config =\n+            new ObjectLockConfiguration(RetentionMode.COMPLIANCE, new RetentionDurationDays(10));\n+        client.setDefaultRetention(bucketName, config);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxMTc2OQ=="}, "originalCommit": {"oid": "b2b9130ea9de8cd9d7f27e51471c0f8ab7dcf03f"}, "originalPosition": 125}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 666, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}