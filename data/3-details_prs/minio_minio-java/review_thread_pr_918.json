{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyNDMzNTk3", "number": 918, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMjoyMDowMVrOD8c-wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwODo0OToyNlrOD-4HIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NzE1OTcwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/MinioClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMjoyMDowMVrOGVZlWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMjoyMDowMVrOGVZlWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA5MjQ0MQ==", "bodyText": "IMO this PR can be reviewed once  setObjectTags uses builder pattern similar to setBucketTags", "url": "https://github.com/minio/minio-java/pull/918#discussion_r425092441", "createdAt": "2020-05-14T12:20:01Z", "author": {"login": "sinhaashish"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -4869,6 +4857,235 @@ public SelectResponseStream selectObjectContent(\n     return new SelectResponseStream(response.body().byteStream());\n   }\n \n+  /**\n+   * Gets tags of a bucket.\n+   *\n+   * <pre>Example:{@code\n+   * Tags tags =\n+   *     minioClient.getBucketTags(GetBucketTagsArgs.builder().bucket(\"my-bucketname\").build());\n+   * }</pre>\n+   *\n+   * @param args {@link GetBucketTagsArgs} object.\n+   * @return {@link Tags} - Tags.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   */\n+  public Tags getBucketTags(GetBucketTagsArgs args)\n+      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n+          InternalException, InvalidBucketNameException, InvalidKeyException,\n+          InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n+    if (args == null) {\n+      throw new IllegalArgumentException(\"null arguments\");\n+    }\n+\n+    Map<String, String> queryParamMap = new HashMap<>();\n+    queryParamMap.put(\"tagging\", \"\");\n+\n+    try {\n+      Response response = executeGet(args.bucketName(), null, null, queryParamMap);\n+      try (ResponseBody body = response.body()) {\n+        return Xml.unmarshal(Tags.class, body.charStream());\n+      }\n+    } catch (ErrorResponseException e) {\n+      if (e.errorResponse().errorCode() != ErrorCode.NO_SUCH_TAG_SET) {\n+        throw e;\n+      }\n+    }\n+\n+    return new Tags();\n+  }\n+\n+  /**\n+   * Sets tags to a bucket.\n+   *\n+   * <pre>Example:{@code\n+   * Map<String, String> map = new HashMap<>();\n+   * map.put(\"Project\", \"Project One\");\n+   * map.put(\"User\", \"jsmith\");\n+   * minioClient.setBucketTags(\n+   *     SetBucketTagsArgs.builder().bucket(\"my-bucketname\").tags(map).build());\n+   * }</pre>\n+   *\n+   * @param args {@link SetBucketTagsArgs} object.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   */\n+  public void setBucketTags(SetBucketTagsArgs args)\n+      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n+          InternalException, InvalidBucketNameException, InvalidKeyException,\n+          InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n+    if (args == null) {\n+      throw new IllegalArgumentException(\"null arguments\");\n+    }\n+\n+    Map<String, String> queryParamMap = new HashMap<>();\n+    queryParamMap.put(\"tagging\", \"\");\n+    Response response = executePut(args.bucketName(), null, null, queryParamMap, args.tags(), 0);\n+    response.body().close();\n+  }\n+\n+  /**\n+   * Deletes tags of a bucket.\n+   *\n+   * <pre>Example:{@code\n+   * minioClient.deleteBucketTags(DeleteBucketTagsArgs.builder().bucket(\"my-bucketname\").build());\n+   * }</pre>\n+   *\n+   * @param args {@link DeleteBucketTagsArgs} object.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   */\n+  public void deleteBucketTags(DeleteBucketTagsArgs args)\n+      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n+          InternalException, InvalidBucketNameException, InvalidKeyException,\n+          InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n+    if (args == null) {\n+      throw new IllegalArgumentException(\"null arguments\");\n+    }\n+\n+    Map<String, String> queryParamMap = new HashMap<>();\n+    queryParamMap.put(\"tagging\", \"\");\n+    Response response = executeDelete(args.bucketName(), null, queryParamMap);\n+    response.body().close();\n+  }\n+\n+  /**\n+   * Gets tags of an object.\n+   *\n+   * <pre>Example:{@code\n+   * Tags tags = minioClient.getObjectTags(\"my-bucketname\");\n+   * }</pre>\n+   *\n+   * @param bucketName Name of the bucket.\n+   * @param objectName Object name in the bucket.\n+   * @return {@link Tags} - Tags.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   */\n+  public Tags getObjectTags(String bucketName, String objectName)\n+      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n+          InternalException, InvalidBucketNameException, InvalidKeyException,\n+          InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n+    checkBucketName(bucketName);\n+    checkObjectName(objectName);\n+\n+    Map<String, String> queryParamMap = new HashMap<>();\n+    queryParamMap.put(\"tagging\", \"\");\n+\n+    Response response = executeGet(bucketName, objectName, null, queryParamMap);\n+    try (ResponseBody body = response.body()) {\n+      return Xml.unmarshal(Tags.class, body.charStream());\n+    }\n+  }\n+\n+  /**\n+   * Sets tags to an object.\n+   *\n+   * <pre>Example:{@code\n+   * Map<String, String> map = new HashMap<>();\n+   * map.put(\"Project\", \"Project One\");\n+   * map.put(\"User\", \"jsmith\");\n+   * minioClient.setObjectTags(\"my-bucketname\", Tags.newObjectTags(map));\n+   * }</pre>\n+   *\n+   * @param bucketName Name of the bucket.\n+   * @param objectName Object name in the bucket.\n+   * @param tags {@link Tags} to be set.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   */\n+  public void setObjectTags(String bucketName, String objectName, Tags tags)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0337167577d326fcd89959ba43e0b8a01f122d4"}, "originalPosition": 263}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjEzNDM0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/MinioClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNTo0NTozN1rOGZLV9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOToxNTozN1rOGZQWtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1MzQyOA==", "bodyText": "Does this mean invalid bucket names will raise different exceptions for bucketName and srcBucketName ?", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429053428", "createdAt": "2020-05-22T05:45:37Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -2084,16 +2082,14 @@ public void copyObject(\n       throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n           InternalException, InvalidBucketNameException, InvalidKeyException,\n           InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n-    if ((bucketName == null) || (bucketName.isEmpty())) {\n-      throw new IllegalArgumentException(\"bucket name cannot be empty\");\n-    }\n-\n+    checkBucketName(bucketName);\n     checkObjectName(objectName);\n-\n     checkWriteRequestSse(sse);\n \n-    if ((srcBucketName == null) || (srcBucketName.isEmpty())) {\n-      throw new IllegalArgumentException(\"Source bucket name cannot be empty\");\n+    try {\n+      checkBucketName(srcBucketName);\n+    } catch (InvalidBucketNameException e) {\n+      throw new IllegalArgumentException(\"invalid source bucket name\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1173679665510e7ace023a0d378cf6befe5f790d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEzNTU0MQ==", "bodyText": "I will revert non-related changes as arg builder will take care respectively.", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429135541", "createdAt": "2020-05-22T09:15:37Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -2084,16 +2082,14 @@ public void copyObject(\n       throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n           InternalException, InvalidBucketNameException, InvalidKeyException,\n           InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n-    if ((bucketName == null) || (bucketName.isEmpty())) {\n-      throw new IllegalArgumentException(\"bucket name cannot be empty\");\n-    }\n-\n+    checkBucketName(bucketName);\n     checkObjectName(objectName);\n-\n     checkWriteRequestSse(sse);\n \n-    if ((srcBucketName == null) || (srcBucketName.isEmpty())) {\n-      throw new IllegalArgumentException(\"Source bucket name cannot be empty\");\n+    try {\n+      checkBucketName(srcBucketName);\n+    } catch (InvalidBucketNameException e) {\n+      throw new IllegalArgumentException(\"invalid source bucket name\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1MzQyOA=="}, "originalCommit": {"oid": "1173679665510e7ace023a0d378cf6befe5f790d"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjE0MDAxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/MinioClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNTo0OTowMVrOGZLZaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMToyMDowNVrOGZTp0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1NDMxNQ==", "bodyText": "Just like the checkBucketName, we can consider introducing a checkNullArgs also", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429054315", "createdAt": "2020-05-22T05:49:01Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -5001,6 +4989,243 @@ public SelectResponseStream selectObjectContent(\n     return new SelectResponseStream(response.body().byteStream());\n   }\n \n+  /**\n+   * Gets tags of a bucket.\n+   *\n+   * <pre>Example:{@code\n+   * Tags tags =\n+   *     minioClient.getBucketTags(GetBucketTagsArgs.builder().bucket(\"my-bucketname\").build());\n+   * }</pre>\n+   *\n+   * @param args {@link GetBucketTagsArgs} object.\n+   * @return {@link Tags} - Tags.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   */\n+  public Tags getBucketTags(GetBucketTagsArgs args)\n+      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n+          InternalException, InvalidBucketNameException, InvalidKeyException,\n+          InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n+    if (args == null) {\n+      throw new IllegalArgumentException(\"null arguments\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1173679665510e7ace023a0d378cf6befe5f790d"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE4OTU4NQ==", "bodyText": "Done", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429189585", "createdAt": "2020-05-22T11:20:05Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -5001,6 +4989,243 @@ public SelectResponseStream selectObjectContent(\n     return new SelectResponseStream(response.body().byteStream());\n   }\n \n+  /**\n+   * Gets tags of a bucket.\n+   *\n+   * <pre>Example:{@code\n+   * Tags tags =\n+   *     minioClient.getBucketTags(GetBucketTagsArgs.builder().bucket(\"my-bucketname\").build());\n+   * }</pre>\n+   *\n+   * @param args {@link GetBucketTagsArgs} object.\n+   * @return {@link Tags} - Tags.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   */\n+  public Tags getBucketTags(GetBucketTagsArgs args)\n+      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n+          InternalException, InvalidBucketNameException, InvalidKeyException,\n+          InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n+    if (args == null) {\n+      throw new IllegalArgumentException(\"null arguments\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1NDMxNQ=="}, "originalCommit": {"oid": "1173679665510e7ace023a0d378cf6befe5f790d"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjI2MTU4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/MinioClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjo1MTo1NVrOGZMilg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTo0NDozMlrOGZRMeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA3MzA0Ng==", "bodyText": "Maybe these two lines can go into a private method called taggingParams() which can then be directly used in the call to the executeGet() method.\nWill be useful as same code is being used in multiple methods.", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429073046", "createdAt": "2020-05-22T06:51:55Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -5001,6 +4989,243 @@ public SelectResponseStream selectObjectContent(\n     return new SelectResponseStream(response.body().byteStream());\n   }\n \n+  /**\n+   * Gets tags of a bucket.\n+   *\n+   * <pre>Example:{@code\n+   * Tags tags =\n+   *     minioClient.getBucketTags(GetBucketTagsArgs.builder().bucket(\"my-bucketname\").build());\n+   * }</pre>\n+   *\n+   * @param args {@link GetBucketTagsArgs} object.\n+   * @return {@link Tags} - Tags.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   */\n+  public Tags getBucketTags(GetBucketTagsArgs args)\n+      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n+          InternalException, InvalidBucketNameException, InvalidKeyException,\n+          InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n+    if (args == null) {\n+      throw new IllegalArgumentException(\"null arguments\");\n+    }\n+\n+    Map<String, String> queryParamMap = new HashMap<>();\n+    queryParamMap.put(\"tagging\", \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1173679665510e7ace023a0d378cf6befe5f790d"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE0OTMwNQ==", "bodyText": "I think we would need to fix this across everywhere using Multimap. It can be done in separate PR.", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429149305", "createdAt": "2020-05-22T09:44:32Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -5001,6 +4989,243 @@ public SelectResponseStream selectObjectContent(\n     return new SelectResponseStream(response.body().byteStream());\n   }\n \n+  /**\n+   * Gets tags of a bucket.\n+   *\n+   * <pre>Example:{@code\n+   * Tags tags =\n+   *     minioClient.getBucketTags(GetBucketTagsArgs.builder().bucket(\"my-bucketname\").build());\n+   * }</pre>\n+   *\n+   * @param args {@link GetBucketTagsArgs} object.\n+   * @return {@link Tags} - Tags.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   */\n+  public Tags getBucketTags(GetBucketTagsArgs args)\n+      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n+          InternalException, InvalidBucketNameException, InvalidKeyException,\n+          InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n+    if (args == null) {\n+      throw new IllegalArgumentException(\"null arguments\");\n+    }\n+\n+    Map<String, String> queryParamMap = new HashMap<>();\n+    queryParamMap.put(\"tagging\", \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA3MzA0Ng=="}, "originalCommit": {"oid": "1173679665510e7ace023a0d378cf6befe5f790d"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjMxNzc2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/MinioClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNzoxNjo0N1rOGZNFrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTozODozOVrOGZRCGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4MjAzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Response response = executePut(args.bucket(), null, null, queryParamMap, args.tags(), 0);\n          \n          \n            \n                response.body().close();\n          \n          \n            \n                executePut(args.bucket(), null, null, queryParamMap, args.tags(), 0).body().close();\n          \n      \n    \n    \n  \n\nThe variable response doesn't seem necessary.", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429082031", "createdAt": "2020-05-22T07:16:47Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -5001,6 +4989,243 @@ public SelectResponseStream selectObjectContent(\n     return new SelectResponseStream(response.body().byteStream());\n   }\n \n+  /**\n+   * Gets tags of a bucket.\n+   *\n+   * <pre>Example:{@code\n+   * Tags tags =\n+   *     minioClient.getBucketTags(GetBucketTagsArgs.builder().bucket(\"my-bucketname\").build());\n+   * }</pre>\n+   *\n+   * @param args {@link GetBucketTagsArgs} object.\n+   * @return {@link Tags} - Tags.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   */\n+  public Tags getBucketTags(GetBucketTagsArgs args)\n+      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n+          InternalException, InvalidBucketNameException, InvalidKeyException,\n+          InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n+    if (args == null) {\n+      throw new IllegalArgumentException(\"null arguments\");\n+    }\n+\n+    Map<String, String> queryParamMap = new HashMap<>();\n+    queryParamMap.put(\"tagging\", \"\");\n+\n+    try {\n+      Response response = executeGet(args.bucket(), null, null, queryParamMap);\n+      try (ResponseBody body = response.body()) {\n+        return Xml.unmarshal(Tags.class, body.charStream());\n+      }\n+    } catch (ErrorResponseException e) {\n+      if (e.errorResponse().errorCode() != ErrorCode.NO_SUCH_TAG_SET) {\n+        throw e;\n+      }\n+    }\n+\n+    return new Tags();\n+  }\n+\n+  /**\n+   * Sets tags to a bucket.\n+   *\n+   * <pre>Example:{@code\n+   * Map<String, String> map = new HashMap<>();\n+   * map.put(\"Project\", \"Project One\");\n+   * map.put(\"User\", \"jsmith\");\n+   * minioClient.setBucketTags(\n+   *     SetBucketTagsArgs.builder().bucket(\"my-bucketname\").tags(map).build());\n+   * }</pre>\n+   *\n+   * @param args {@link SetBucketTagsArgs} object.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   */\n+  public void setBucketTags(SetBucketTagsArgs args)\n+      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n+          InternalException, InvalidBucketNameException, InvalidKeyException,\n+          InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n+    if (args == null) {\n+      throw new IllegalArgumentException(\"null arguments\");\n+    }\n+\n+    Map<String, String> queryParamMap = new HashMap<>();\n+    queryParamMap.put(\"tagging\", \"\");\n+    Response response = executePut(args.bucket(), null, null, queryParamMap, args.tags(), 0);\n+    response.body().close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1173679665510e7ace023a0d378cf6befe5f790d"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE0NjY1MA==", "bodyText": "Done with little different", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429146650", "createdAt": "2020-05-22T09:38:39Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -5001,6 +4989,243 @@ public SelectResponseStream selectObjectContent(\n     return new SelectResponseStream(response.body().byteStream());\n   }\n \n+  /**\n+   * Gets tags of a bucket.\n+   *\n+   * <pre>Example:{@code\n+   * Tags tags =\n+   *     minioClient.getBucketTags(GetBucketTagsArgs.builder().bucket(\"my-bucketname\").build());\n+   * }</pre>\n+   *\n+   * @param args {@link GetBucketTagsArgs} object.\n+   * @return {@link Tags} - Tags.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   */\n+  public Tags getBucketTags(GetBucketTagsArgs args)\n+      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n+          InternalException, InvalidBucketNameException, InvalidKeyException,\n+          InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n+    if (args == null) {\n+      throw new IllegalArgumentException(\"null arguments\");\n+    }\n+\n+    Map<String, String> queryParamMap = new HashMap<>();\n+    queryParamMap.put(\"tagging\", \"\");\n+\n+    try {\n+      Response response = executeGet(args.bucket(), null, null, queryParamMap);\n+      try (ResponseBody body = response.body()) {\n+        return Xml.unmarshal(Tags.class, body.charStream());\n+      }\n+    } catch (ErrorResponseException e) {\n+      if (e.errorResponse().errorCode() != ErrorCode.NO_SUCH_TAG_SET) {\n+        throw e;\n+      }\n+    }\n+\n+    return new Tags();\n+  }\n+\n+  /**\n+   * Sets tags to a bucket.\n+   *\n+   * <pre>Example:{@code\n+   * Map<String, String> map = new HashMap<>();\n+   * map.put(\"Project\", \"Project One\");\n+   * map.put(\"User\", \"jsmith\");\n+   * minioClient.setBucketTags(\n+   *     SetBucketTagsArgs.builder().bucket(\"my-bucketname\").tags(map).build());\n+   * }</pre>\n+   *\n+   * @param args {@link SetBucketTagsArgs} object.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   */\n+  public void setBucketTags(SetBucketTagsArgs args)\n+      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n+          InternalException, InvalidBucketNameException, InvalidKeyException,\n+          InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n+    if (args == null) {\n+      throw new IllegalArgumentException(\"null arguments\");\n+    }\n+\n+    Map<String, String> queryParamMap = new HashMap<>();\n+    queryParamMap.put(\"tagging\", \"\");\n+    Response response = executePut(args.bucket(), null, null, queryParamMap, args.tags(), 0);\n+    response.body().close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4MjAzMQ=="}, "originalCommit": {"oid": "1173679665510e7ace023a0d378cf6befe5f790d"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjMyODQ5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/MinioClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNzoyMToyMlrOGZNMlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTozNjowNlrOGZQ9pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4Mzc5Ng==", "bodyText": "One try block and the response variable can be avoided with something like:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                try {\n          \n          \n            \n                  Response response = executeGet(args.bucket(), null, null, queryParamMap);\n          \n          \n            \n                  try (ResponseBody body = response.body()) {\n          \n          \n            \n                    return Xml.unmarshal(Tags.class, body.charStream());\n          \n          \n            \n                  }\n          \n          \n            \n                try (ResponseBody body = executeGet(args.bucket(), null, null, queryParamMap).body()) {\n          \n          \n            \n                  return Xml.unmarshal(Tags.class, body.charStream());", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429083796", "createdAt": "2020-05-22T07:21:22Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -5001,6 +4989,243 @@ public SelectResponseStream selectObjectContent(\n     return new SelectResponseStream(response.body().byteStream());\n   }\n \n+  /**\n+   * Gets tags of a bucket.\n+   *\n+   * <pre>Example:{@code\n+   * Tags tags =\n+   *     minioClient.getBucketTags(GetBucketTagsArgs.builder().bucket(\"my-bucketname\").build());\n+   * }</pre>\n+   *\n+   * @param args {@link GetBucketTagsArgs} object.\n+   * @return {@link Tags} - Tags.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   */\n+  public Tags getBucketTags(GetBucketTagsArgs args)\n+      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n+          InternalException, InvalidBucketNameException, InvalidKeyException,\n+          InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n+    if (args == null) {\n+      throw new IllegalArgumentException(\"null arguments\");\n+    }\n+\n+    Map<String, String> queryParamMap = new HashMap<>();\n+    queryParamMap.put(\"tagging\", \"\");\n+\n+    try {\n+      Response response = executeGet(args.bucket(), null, null, queryParamMap);\n+      try (ResponseBody body = response.body()) {\n+        return Xml.unmarshal(Tags.class, body.charStream());\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1173679665510e7ace023a0d378cf6befe5f790d"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE0NTUxMA==", "bodyText": "Done with little different", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429145510", "createdAt": "2020-05-22T09:36:06Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -5001,6 +4989,243 @@ public SelectResponseStream selectObjectContent(\n     return new SelectResponseStream(response.body().byteStream());\n   }\n \n+  /**\n+   * Gets tags of a bucket.\n+   *\n+   * <pre>Example:{@code\n+   * Tags tags =\n+   *     minioClient.getBucketTags(GetBucketTagsArgs.builder().bucket(\"my-bucketname\").build());\n+   * }</pre>\n+   *\n+   * @param args {@link GetBucketTagsArgs} object.\n+   * @return {@link Tags} - Tags.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   */\n+  public Tags getBucketTags(GetBucketTagsArgs args)\n+      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n+          InternalException, InvalidBucketNameException, InvalidKeyException,\n+          InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n+    if (args == null) {\n+      throw new IllegalArgumentException(\"null arguments\");\n+    }\n+\n+    Map<String, String> queryParamMap = new HashMap<>();\n+    queryParamMap.put(\"tagging\", \"\");\n+\n+    try {\n+      Response response = executeGet(args.bucket(), null, null, queryParamMap);\n+      try (ResponseBody body = response.body()) {\n+        return Xml.unmarshal(Tags.class, body.charStream());\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4Mzc5Ng=="}, "originalCommit": {"oid": "1173679665510e7ace023a0d378cf6befe5f790d"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjM3MjI2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/messages/Tags.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNzozNzo1OVrOGZNnBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTo1MToyOFrOGZRZLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA5MDU2NA==", "bodyText": "Should this condition not throw an exception?", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429090564", "createdAt": "2020-05-22T07:37:59Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/messages/Tags.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio.messages;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.simpleframework.xml.ElementMap;\n+import org.simpleframework.xml.Namespace;\n+import org.simpleframework.xml.Path;\n+import org.simpleframework.xml.Root;\n+\n+/**\n+ * Object representation of request XML of <a\n+ * href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketTagging.html\">PutBucketTagging\n+ * API</a> and <a\n+ * href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObjectTagging.html\">PutObjectTagging\n+ * API</a> response XML of <a\n+ * href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketTagging.html\">GetBucketTagging\n+ * API</a> and <a\n+ * href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectTagging.html\">GetObjectTagging\n+ * API</a>.\n+ */\n+@Root(name = \"Tagging\", strict = false)\n+@Namespace(reference = \"http://s3.amazonaws.com/doc/2006-03-01/\")\n+public class Tags {\n+  /*\n+   * Limits are specified in https://docs.aws.amazon.com/AmazonS3/latest/dev/object-tagging.html and\n+   * https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#tag-restrictions\n+   */\n+  private static final int MAX_KEY_LENGTH = 128;\n+  private static final int MAX_VALUE_LENGTH = 256;\n+  private static final int MAX_OBJECT_TAG_COUNT = 10;\n+  private static final int MAX_TAG_COUNT = 50;\n+\n+  @Path(value = \"TagSet\")\n+  @ElementMap(\n+      attribute = false,\n+      entry = \"Tag\",\n+      inline = true,\n+      key = \"Key\",\n+      value = \"Value\",\n+      required = false)\n+  Map<String, String> tags;\n+\n+  public Tags() {}\n+\n+  private Tags(Map<String, String> tags, boolean isObject) throws IllegalArgumentException {\n+    if (tags == null) {\n+      return;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1173679665510e7ace023a0d378cf6befe5f790d"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE1MjU1Ng==", "bodyText": "Setting null tags is fine which is meant to remove all existing tags. In this case <Tagging /> XML is sent.", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429152556", "createdAt": "2020-05-22T09:51:28Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/messages/Tags.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio.messages;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.simpleframework.xml.ElementMap;\n+import org.simpleframework.xml.Namespace;\n+import org.simpleframework.xml.Path;\n+import org.simpleframework.xml.Root;\n+\n+/**\n+ * Object representation of request XML of <a\n+ * href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketTagging.html\">PutBucketTagging\n+ * API</a> and <a\n+ * href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObjectTagging.html\">PutObjectTagging\n+ * API</a> response XML of <a\n+ * href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketTagging.html\">GetBucketTagging\n+ * API</a> and <a\n+ * href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectTagging.html\">GetObjectTagging\n+ * API</a>.\n+ */\n+@Root(name = \"Tagging\", strict = false)\n+@Namespace(reference = \"http://s3.amazonaws.com/doc/2006-03-01/\")\n+public class Tags {\n+  /*\n+   * Limits are specified in https://docs.aws.amazon.com/AmazonS3/latest/dev/object-tagging.html and\n+   * https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#tag-restrictions\n+   */\n+  private static final int MAX_KEY_LENGTH = 128;\n+  private static final int MAX_VALUE_LENGTH = 256;\n+  private static final int MAX_OBJECT_TAG_COUNT = 10;\n+  private static final int MAX_TAG_COUNT = 50;\n+\n+  @Path(value = \"TagSet\")\n+  @ElementMap(\n+      attribute = false,\n+      entry = \"Tag\",\n+      inline = true,\n+      key = \"Key\",\n+      value = \"Value\",\n+      required = false)\n+  Map<String, String> tags;\n+\n+  public Tags() {}\n+\n+  private Tags(Map<String, String> tags, boolean isObject) throws IllegalArgumentException {\n+    if (tags == null) {\n+      return;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA5MDU2NA=="}, "originalCommit": {"oid": "1173679665510e7ace023a0d378cf6befe5f790d"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjM4NTUxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/messages/Tags.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNzo0Mjo0OFrOGZNvQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTo1NzowOVrOGZRjVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA5MjY3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (isObject) {\n          \n          \n            \n                  if (tags.size() > MAX_OBJECT_TAG_COUNT) {\n          \n          \n            \n                    throw new IllegalArgumentException(\n          \n          \n            \n                        \"too many object tags; allowed = \" + MAX_OBJECT_TAG_COUNT + \", found = \" + tags.size());\n          \n          \n            \n                  }\n          \n          \n            \n                } else if (tags.size() > MAX_TAG_COUNT) {\n          \n          \n            \n                  throw new IllegalArgumentException(\n          \n          \n            \n                      \"too many bucket tags; allowed = \" + MAX_TAG_COUNT + \", found = \" + tags.size());\n          \n          \n            \n                }\n          \n          \n            \n                String type = isObject ? \"object\" : \"bucket\"\n          \n          \n            \n                int limit = isObject ? MAX_OBJECT_TAG_COUNT : MAX_TAG_COUNT\n          \n          \n            \n                if(tags.size() > limit) {\n          \n          \n            \n                  throw new IllegalArgumentException(\n          \n          \n            \n                    \"too many \" + type + \" tags; allowed = \" + limit + \", found = \" + tags.size());\n          \n          \n            \n                }", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429092672", "createdAt": "2020-05-22T07:42:48Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/messages/Tags.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio.messages;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.simpleframework.xml.ElementMap;\n+import org.simpleframework.xml.Namespace;\n+import org.simpleframework.xml.Path;\n+import org.simpleframework.xml.Root;\n+\n+/**\n+ * Object representation of request XML of <a\n+ * href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketTagging.html\">PutBucketTagging\n+ * API</a> and <a\n+ * href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObjectTagging.html\">PutObjectTagging\n+ * API</a> response XML of <a\n+ * href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketTagging.html\">GetBucketTagging\n+ * API</a> and <a\n+ * href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectTagging.html\">GetObjectTagging\n+ * API</a>.\n+ */\n+@Root(name = \"Tagging\", strict = false)\n+@Namespace(reference = \"http://s3.amazonaws.com/doc/2006-03-01/\")\n+public class Tags {\n+  /*\n+   * Limits are specified in https://docs.aws.amazon.com/AmazonS3/latest/dev/object-tagging.html and\n+   * https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#tag-restrictions\n+   */\n+  private static final int MAX_KEY_LENGTH = 128;\n+  private static final int MAX_VALUE_LENGTH = 256;\n+  private static final int MAX_OBJECT_TAG_COUNT = 10;\n+  private static final int MAX_TAG_COUNT = 50;\n+\n+  @Path(value = \"TagSet\")\n+  @ElementMap(\n+      attribute = false,\n+      entry = \"Tag\",\n+      inline = true,\n+      key = \"Key\",\n+      value = \"Value\",\n+      required = false)\n+  Map<String, String> tags;\n+\n+  public Tags() {}\n+\n+  private Tags(Map<String, String> tags, boolean isObject) throws IllegalArgumentException {\n+    if (tags == null) {\n+      return;\n+    }\n+\n+    if (isObject) {\n+      if (tags.size() > MAX_OBJECT_TAG_COUNT) {\n+        throw new IllegalArgumentException(\n+            \"too many object tags; allowed = \" + MAX_OBJECT_TAG_COUNT + \", found = \" + tags.size());\n+      }\n+    } else if (tags.size() > MAX_TAG_COUNT) {\n+      throw new IllegalArgumentException(\n+          \"too many bucket tags; allowed = \" + MAX_TAG_COUNT + \", found = \" + tags.size());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1173679665510e7ace023a0d378cf6befe5f790d"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE1NTE1Ng==", "bodyText": "Done", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429155156", "createdAt": "2020-05-22T09:57:09Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/messages/Tags.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio.messages;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.simpleframework.xml.ElementMap;\n+import org.simpleframework.xml.Namespace;\n+import org.simpleframework.xml.Path;\n+import org.simpleframework.xml.Root;\n+\n+/**\n+ * Object representation of request XML of <a\n+ * href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketTagging.html\">PutBucketTagging\n+ * API</a> and <a\n+ * href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObjectTagging.html\">PutObjectTagging\n+ * API</a> response XML of <a\n+ * href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketTagging.html\">GetBucketTagging\n+ * API</a> and <a\n+ * href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectTagging.html\">GetObjectTagging\n+ * API</a>.\n+ */\n+@Root(name = \"Tagging\", strict = false)\n+@Namespace(reference = \"http://s3.amazonaws.com/doc/2006-03-01/\")\n+public class Tags {\n+  /*\n+   * Limits are specified in https://docs.aws.amazon.com/AmazonS3/latest/dev/object-tagging.html and\n+   * https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#tag-restrictions\n+   */\n+  private static final int MAX_KEY_LENGTH = 128;\n+  private static final int MAX_VALUE_LENGTH = 256;\n+  private static final int MAX_OBJECT_TAG_COUNT = 10;\n+  private static final int MAX_TAG_COUNT = 50;\n+\n+  @Path(value = \"TagSet\")\n+  @ElementMap(\n+      attribute = false,\n+      entry = \"Tag\",\n+      inline = true,\n+      key = \"Key\",\n+      value = \"Value\",\n+      required = false)\n+  Map<String, String> tags;\n+\n+  public Tags() {}\n+\n+  private Tags(Map<String, String> tags, boolean isObject) throws IllegalArgumentException {\n+    if (tags == null) {\n+      return;\n+    }\n+\n+    if (isObject) {\n+      if (tags.size() > MAX_OBJECT_TAG_COUNT) {\n+        throw new IllegalArgumentException(\n+            \"too many object tags; allowed = \" + MAX_OBJECT_TAG_COUNT + \", found = \" + tags.size());\n+      }\n+    } else if (tags.size() > MAX_TAG_COUNT) {\n+      throw new IllegalArgumentException(\n+          \"too many bucket tags; allowed = \" + MAX_TAG_COUNT + \", found = \" + tags.size());\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA5MjY3Mg=="}, "originalCommit": {"oid": "1173679665510e7ace023a0d378cf6befe5f790d"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjM5NTcxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/messages/Tags.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNzo0NjozOFrOGZN1tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTo1OTowNlrOGZRm6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA5NDMyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (tags == null) {\n          \n          \n            \n                  return Collections.unmodifiableMap(new HashMap<>());\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                return Collections.unmodifiableMap(tags);\n          \n          \n            \n              }\n          \n          \n            \n                return Collections.unmodifiableMap(tags == null ? new HashMap<>() : tags)", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429094327", "createdAt": "2020-05-22T07:46:38Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/messages/Tags.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio.messages;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.simpleframework.xml.ElementMap;\n+import org.simpleframework.xml.Namespace;\n+import org.simpleframework.xml.Path;\n+import org.simpleframework.xml.Root;\n+\n+/**\n+ * Object representation of request XML of <a\n+ * href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketTagging.html\">PutBucketTagging\n+ * API</a> and <a\n+ * href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObjectTagging.html\">PutObjectTagging\n+ * API</a> response XML of <a\n+ * href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketTagging.html\">GetBucketTagging\n+ * API</a> and <a\n+ * href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectTagging.html\">GetObjectTagging\n+ * API</a>.\n+ */\n+@Root(name = \"Tagging\", strict = false)\n+@Namespace(reference = \"http://s3.amazonaws.com/doc/2006-03-01/\")\n+public class Tags {\n+  /*\n+   * Limits are specified in https://docs.aws.amazon.com/AmazonS3/latest/dev/object-tagging.html and\n+   * https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#tag-restrictions\n+   */\n+  private static final int MAX_KEY_LENGTH = 128;\n+  private static final int MAX_VALUE_LENGTH = 256;\n+  private static final int MAX_OBJECT_TAG_COUNT = 10;\n+  private static final int MAX_TAG_COUNT = 50;\n+\n+  @Path(value = \"TagSet\")\n+  @ElementMap(\n+      attribute = false,\n+      entry = \"Tag\",\n+      inline = true,\n+      key = \"Key\",\n+      value = \"Value\",\n+      required = false)\n+  Map<String, String> tags;\n+\n+  public Tags() {}\n+\n+  private Tags(Map<String, String> tags, boolean isObject) throws IllegalArgumentException {\n+    if (tags == null) {\n+      return;\n+    }\n+\n+    if (isObject) {\n+      if (tags.size() > MAX_OBJECT_TAG_COUNT) {\n+        throw new IllegalArgumentException(\n+            \"too many object tags; allowed = \" + MAX_OBJECT_TAG_COUNT + \", found = \" + tags.size());\n+      }\n+    } else if (tags.size() > MAX_TAG_COUNT) {\n+      throw new IllegalArgumentException(\n+          \"too many bucket tags; allowed = \" + MAX_TAG_COUNT + \", found = \" + tags.size());\n+    }\n+\n+    for (Map.Entry<String, String> entry : tags.entrySet()) {\n+      String key = entry.getKey();\n+      if (key.length() == 0 || key.length() > MAX_KEY_LENGTH || key.contains(\"&\")) {\n+        throw new IllegalArgumentException(\"invalid tag key '\" + key + \"'\");\n+      }\n+\n+      String value = entry.getValue();\n+      if (value.length() > MAX_VALUE_LENGTH || value.contains(\"&\")) {\n+        throw new IllegalArgumentException(\"invalid tag value '\" + value + \"'\");\n+      }\n+    }\n+\n+    this.tags = Collections.unmodifiableMap(tags);\n+  }\n+\n+  /** Creates new bucket tags. */\n+  public static Tags newBucketTags(Map<String, String> tags) throws IllegalArgumentException {\n+    return new Tags(tags, false);\n+  }\n+\n+  /** Creates new object tags. */\n+  public static Tags newObjectTags(Map<String, String> tags) throws IllegalArgumentException {\n+    return new Tags(tags, true);\n+  }\n+\n+  /** Returns tags. */\n+  public Map<String, String> get() {\n+    if (tags == null) {\n+      return Collections.unmodifiableMap(new HashMap<>());\n+    }\n+\n+    return Collections.unmodifiableMap(tags);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1173679665510e7ace023a0d378cf6befe5f790d"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE1NjA3NA==", "bodyText": "Done", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429156074", "createdAt": "2020-05-22T09:59:06Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/messages/Tags.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio.messages;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.simpleframework.xml.ElementMap;\n+import org.simpleframework.xml.Namespace;\n+import org.simpleframework.xml.Path;\n+import org.simpleframework.xml.Root;\n+\n+/**\n+ * Object representation of request XML of <a\n+ * href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketTagging.html\">PutBucketTagging\n+ * API</a> and <a\n+ * href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObjectTagging.html\">PutObjectTagging\n+ * API</a> response XML of <a\n+ * href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketTagging.html\">GetBucketTagging\n+ * API</a> and <a\n+ * href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectTagging.html\">GetObjectTagging\n+ * API</a>.\n+ */\n+@Root(name = \"Tagging\", strict = false)\n+@Namespace(reference = \"http://s3.amazonaws.com/doc/2006-03-01/\")\n+public class Tags {\n+  /*\n+   * Limits are specified in https://docs.aws.amazon.com/AmazonS3/latest/dev/object-tagging.html and\n+   * https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#tag-restrictions\n+   */\n+  private static final int MAX_KEY_LENGTH = 128;\n+  private static final int MAX_VALUE_LENGTH = 256;\n+  private static final int MAX_OBJECT_TAG_COUNT = 10;\n+  private static final int MAX_TAG_COUNT = 50;\n+\n+  @Path(value = \"TagSet\")\n+  @ElementMap(\n+      attribute = false,\n+      entry = \"Tag\",\n+      inline = true,\n+      key = \"Key\",\n+      value = \"Value\",\n+      required = false)\n+  Map<String, String> tags;\n+\n+  public Tags() {}\n+\n+  private Tags(Map<String, String> tags, boolean isObject) throws IllegalArgumentException {\n+    if (tags == null) {\n+      return;\n+    }\n+\n+    if (isObject) {\n+      if (tags.size() > MAX_OBJECT_TAG_COUNT) {\n+        throw new IllegalArgumentException(\n+            \"too many object tags; allowed = \" + MAX_OBJECT_TAG_COUNT + \", found = \" + tags.size());\n+      }\n+    } else if (tags.size() > MAX_TAG_COUNT) {\n+      throw new IllegalArgumentException(\n+          \"too many bucket tags; allowed = \" + MAX_TAG_COUNT + \", found = \" + tags.size());\n+    }\n+\n+    for (Map.Entry<String, String> entry : tags.entrySet()) {\n+      String key = entry.getKey();\n+      if (key.length() == 0 || key.length() > MAX_KEY_LENGTH || key.contains(\"&\")) {\n+        throw new IllegalArgumentException(\"invalid tag key '\" + key + \"'\");\n+      }\n+\n+      String value = entry.getValue();\n+      if (value.length() > MAX_VALUE_LENGTH || value.contains(\"&\")) {\n+        throw new IllegalArgumentException(\"invalid tag value '\" + value + \"'\");\n+      }\n+    }\n+\n+    this.tags = Collections.unmodifiableMap(tags);\n+  }\n+\n+  /** Creates new bucket tags. */\n+  public static Tags newBucketTags(Map<String, String> tags) throws IllegalArgumentException {\n+    return new Tags(tags, false);\n+  }\n+\n+  /** Creates new object tags. */\n+  public static Tags newObjectTags(Map<String, String> tags) throws IllegalArgumentException {\n+    return new Tags(tags, true);\n+  }\n+\n+  /** Returns tags. */\n+  public Map<String, String> get() {\n+    if (tags == null) {\n+      return Collections.unmodifiableMap(new HashMap<>());\n+    }\n+\n+    return Collections.unmodifiableMap(tags);\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA5NDMyNw=="}, "originalCommit": {"oid": "1173679665510e7ace023a0d378cf6befe5f790d"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjUyOTgyOnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwODozMzoyMVrOGZPJRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNDozMzoxNFrOGZZXuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTExNTcxOQ==", "bodyText": "Better to have two separate catch blocks - one for the specific ErrorResponseException and the other for the generic Exception\nSince the part of ignoring NOT_IMPLEMENTED is used multiple times, the whole logic can be implemented in a common method, to look something like ignoreNotImplemented(exp, \"setBucketTags(SetBucketTagsArgs args)\", startTime);", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429115719", "createdAt": "2020-05-22T08:33:21Z", "author": {"login": "anjalshireesh"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -4242,6 +4249,308 @@ public static void selectObjectContent_test1() throws Exception {\n     }\n   }\n \n+  /** Test: setBucketTags(SetBucketTagsArgs args). */\n+  public static void setBucketTags_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setBucketTags(SetBucketTagsArgs args)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    try {\n+      client.makeBucket(MakeBucketArgs.builder().bucket(bucketName).build());\n+      try {\n+        Map<String, String> map = new HashMap<>();\n+        map.put(\"Project\", \"Project One\");\n+        map.put(\"User\", \"jsmith\");\n+        client.setBucketTags(SetBucketTagsArgs.builder().bucket(bucketName).tags(map).build());\n+        mintSuccessLog(\"setBucketTags(SetBucketTagsArgs args)\", null, startTime);\n+      } finally {\n+        client.removeBucket(RemoveBucketArgs.builder().bucket(bucketName).build());\n+      }\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setBucketTags(SetBucketTagsArgs args)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setBucketTags(SetBucketTagsArgs args)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1173679665510e7ace023a0d378cf6befe5f790d"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE4Njk4MQ==", "bodyText": "I avoided that for repetition of code\n\n    } catch (ErrorResponseException e) {\n      // Ignore NotImplemented error\n      if (e.errorResponse().errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n        mintIgnoredLog(\"deleteObjectTags(String bucketName)\", null, startTime);\n      } else {\n        mintFailedLog(\n            \"deleteObjectTags(String bucketName)\",\n            null,\n            startTime,\n            null,\n            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n        throw e;\n      }\n    } catch (Exception e) {\n        mintFailedLog(\n            \"deleteObjectTags(String bucketName)\",\n            null,\n            startTime,\n            null,\n            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n        throw e;\n    }\n\nThis problem is there across all tests. We would need to find a better way to do that and fix everywhere. I am limiting the scope of this PR.", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429186981", "createdAt": "2020-05-22T11:13:12Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -4242,6 +4249,308 @@ public static void selectObjectContent_test1() throws Exception {\n     }\n   }\n \n+  /** Test: setBucketTags(SetBucketTagsArgs args). */\n+  public static void setBucketTags_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setBucketTags(SetBucketTagsArgs args)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    try {\n+      client.makeBucket(MakeBucketArgs.builder().bucket(bucketName).build());\n+      try {\n+        Map<String, String> map = new HashMap<>();\n+        map.put(\"Project\", \"Project One\");\n+        map.put(\"User\", \"jsmith\");\n+        client.setBucketTags(SetBucketTagsArgs.builder().bucket(bucketName).tags(map).build());\n+        mintSuccessLog(\"setBucketTags(SetBucketTagsArgs args)\", null, startTime);\n+      } finally {\n+        client.removeBucket(RemoveBucketArgs.builder().bucket(bucketName).build());\n+      }\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setBucketTags(SetBucketTagsArgs args)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setBucketTags(SetBucketTagsArgs args)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTExNTcxOQ=="}, "originalCommit": {"oid": "1173679665510e7ace023a0d378cf6befe5f790d"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIyNzU3Nw==", "bodyText": "In that case, I would suggest simplifying the code as follows:\n\n    } catch (Exception e) {\n      if (e instanceof ErrorResponseException) {\n        if (((ErrorResponseException) e).errorResponse().errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n          mintIgnoredLog(\"setBucketTags(SetBucketTagsArgs args)\", null, startTime);\n          return;\n        }\n      }\n      mintFailedLog(\n          \"setBucketTags(SetBucketTagsArgs args)\",\n          null,\n          startTime,\n          null,\n          e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n      throw e;\n    }\n\nSince this code is repeated many times in this PR itself, I suggest to create a method and use it only in these places as of now, thus not increasing the scope of the PR. Using the same (or a similar) method in all other places can be done in a separate PR.", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429227577", "createdAt": "2020-05-22T12:51:52Z", "author": {"login": "anjalshireesh"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -4242,6 +4249,308 @@ public static void selectObjectContent_test1() throws Exception {\n     }\n   }\n \n+  /** Test: setBucketTags(SetBucketTagsArgs args). */\n+  public static void setBucketTags_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setBucketTags(SetBucketTagsArgs args)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    try {\n+      client.makeBucket(MakeBucketArgs.builder().bucket(bucketName).build());\n+      try {\n+        Map<String, String> map = new HashMap<>();\n+        map.put(\"Project\", \"Project One\");\n+        map.put(\"User\", \"jsmith\");\n+        client.setBucketTags(SetBucketTagsArgs.builder().bucket(bucketName).tags(map).build());\n+        mintSuccessLog(\"setBucketTags(SetBucketTagsArgs args)\", null, startTime);\n+      } finally {\n+        client.removeBucket(RemoveBucketArgs.builder().bucket(bucketName).build());\n+      }\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setBucketTags(SetBucketTagsArgs args)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setBucketTags(SetBucketTagsArgs args)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTExNTcxOQ=="}, "originalCommit": {"oid": "1173679665510e7ace023a0d378cf6befe5f790d"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI4MzI1OQ==", "bodyText": "done", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429283259", "createdAt": "2020-05-22T14:33:14Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -4242,6 +4249,308 @@ public static void selectObjectContent_test1() throws Exception {\n     }\n   }\n \n+  /** Test: setBucketTags(SetBucketTagsArgs args). */\n+  public static void setBucketTags_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setBucketTags(SetBucketTagsArgs args)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    try {\n+      client.makeBucket(MakeBucketArgs.builder().bucket(bucketName).build());\n+      try {\n+        Map<String, String> map = new HashMap<>();\n+        map.put(\"Project\", \"Project One\");\n+        map.put(\"User\", \"jsmith\");\n+        client.setBucketTags(SetBucketTagsArgs.builder().bucket(bucketName).tags(map).build());\n+        mintSuccessLog(\"setBucketTags(SetBucketTagsArgs args)\", null, startTime);\n+      } finally {\n+        client.removeBucket(RemoveBucketArgs.builder().bucket(bucketName).build());\n+      }\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setBucketTags(SetBucketTagsArgs args)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setBucketTags(SetBucketTagsArgs args)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTExNTcxOQ=="}, "originalCommit": {"oid": "1173679665510e7ace023a0d378cf6befe5f790d"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjU3NjM1OnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwODo0OToyNlrOGZPm8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDozNDowNFrOGZShRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyMzMxMg==", "bodyText": "Maybe we should do one getBucketTags after the delete and verify that the tags have indeed got deleted?", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429123312", "createdAt": "2020-05-22T08:49:26Z", "author": {"login": "anjalshireesh"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -4242,6 +4249,308 @@ public static void selectObjectContent_test1() throws Exception {\n     }\n   }\n \n+  /** Test: setBucketTags(SetBucketTagsArgs args). */\n+  public static void setBucketTags_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setBucketTags(SetBucketTagsArgs args)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    try {\n+      client.makeBucket(MakeBucketArgs.builder().bucket(bucketName).build());\n+      try {\n+        Map<String, String> map = new HashMap<>();\n+        map.put(\"Project\", \"Project One\");\n+        map.put(\"User\", \"jsmith\");\n+        client.setBucketTags(SetBucketTagsArgs.builder().bucket(bucketName).tags(map).build());\n+        mintSuccessLog(\"setBucketTags(SetBucketTagsArgs args)\", null, startTime);\n+      } finally {\n+        client.removeBucket(RemoveBucketArgs.builder().bucket(bucketName).build());\n+      }\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setBucketTags(SetBucketTagsArgs args)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setBucketTags(SetBucketTagsArgs args)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getBucketTags(GetBucketTagsArgs args). */\n+  public static void getBucketTags_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: getBucketTags(GetBucketTagsArgs args)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    try {\n+      client.makeBucket(MakeBucketArgs.builder().bucket(bucketName).build());\n+      try {\n+        Map<String, String> map = new HashMap<>();\n+        Tags tags = client.getBucketTags(GetBucketTagsArgs.builder().bucket(bucketName).build());\n+        if (!map.equals(tags.get())) {\n+          throw new Exception(\"expected: \" + map + \", got: \" + tags.get());\n+        }\n+\n+        map.put(\"Project\", \"Project One\");\n+        map.put(\"User\", \"jsmith\");\n+        client.setBucketTags(SetBucketTagsArgs.builder().bucket(bucketName).tags(map).build());\n+        tags = client.getBucketTags(GetBucketTagsArgs.builder().bucket(bucketName).build());\n+        if (!map.equals(tags.get())) {\n+          throw new Exception(\"expected: \" + map + \", got: \" + tags.get());\n+        }\n+        mintSuccessLog(\"getBucketTags(GetBucketTagsArgs args)\", null, startTime);\n+      } finally {\n+        client.removeBucket(RemoveBucketArgs.builder().bucket(bucketName).build());\n+      }\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"getBucketTags(GetBucketTagsArgs args)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"getBucketTags(GetBucketTagsArgs args)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: deleteBucketTags(DeleteBucketTagsArgs args). */\n+  public static void deleteBucketTags_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: deleteBucketTags(DeleteBucketTagsArgs args)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    try {\n+      client.makeBucket(MakeBucketArgs.builder().bucket(bucketName).build());\n+      try {\n+        // Delete should succeed.\n+        client.deleteBucketTags(DeleteBucketTagsArgs.builder().bucket(bucketName).build());\n+\n+        Map<String, String> map = new HashMap<>();\n+        map.put(\"Project\", \"Project One\");\n+        map.put(\"User\", \"jsmith\");\n+        client.setBucketTags(SetBucketTagsArgs.builder().bucket(bucketName).tags(map).build());\n+        client.deleteBucketTags(DeleteBucketTagsArgs.builder().bucket(bucketName).build());\n+        mintSuccessLog(\"deleteBucketTags(DeleteBucketTagsArgs args)\", null, startTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1173679665510e7ace023a0d378cf6befe5f790d"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE3MTAxNA==", "bodyText": "Done", "url": "https://github.com/minio/minio-java/pull/918#discussion_r429171014", "createdAt": "2020-05-22T10:34:04Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -4242,6 +4249,308 @@ public static void selectObjectContent_test1() throws Exception {\n     }\n   }\n \n+  /** Test: setBucketTags(SetBucketTagsArgs args). */\n+  public static void setBucketTags_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setBucketTags(SetBucketTagsArgs args)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    try {\n+      client.makeBucket(MakeBucketArgs.builder().bucket(bucketName).build());\n+      try {\n+        Map<String, String> map = new HashMap<>();\n+        map.put(\"Project\", \"Project One\");\n+        map.put(\"User\", \"jsmith\");\n+        client.setBucketTags(SetBucketTagsArgs.builder().bucket(bucketName).tags(map).build());\n+        mintSuccessLog(\"setBucketTags(SetBucketTagsArgs args)\", null, startTime);\n+      } finally {\n+        client.removeBucket(RemoveBucketArgs.builder().bucket(bucketName).build());\n+      }\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setBucketTags(SetBucketTagsArgs args)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setBucketTags(SetBucketTagsArgs args)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getBucketTags(GetBucketTagsArgs args). */\n+  public static void getBucketTags_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: getBucketTags(GetBucketTagsArgs args)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    try {\n+      client.makeBucket(MakeBucketArgs.builder().bucket(bucketName).build());\n+      try {\n+        Map<String, String> map = new HashMap<>();\n+        Tags tags = client.getBucketTags(GetBucketTagsArgs.builder().bucket(bucketName).build());\n+        if (!map.equals(tags.get())) {\n+          throw new Exception(\"expected: \" + map + \", got: \" + tags.get());\n+        }\n+\n+        map.put(\"Project\", \"Project One\");\n+        map.put(\"User\", \"jsmith\");\n+        client.setBucketTags(SetBucketTagsArgs.builder().bucket(bucketName).tags(map).build());\n+        tags = client.getBucketTags(GetBucketTagsArgs.builder().bucket(bucketName).build());\n+        if (!map.equals(tags.get())) {\n+          throw new Exception(\"expected: \" + map + \", got: \" + tags.get());\n+        }\n+        mintSuccessLog(\"getBucketTags(GetBucketTagsArgs args)\", null, startTime);\n+      } finally {\n+        client.removeBucket(RemoveBucketArgs.builder().bucket(bucketName).build());\n+      }\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"getBucketTags(GetBucketTagsArgs args)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"getBucketTags(GetBucketTagsArgs args)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: deleteBucketTags(DeleteBucketTagsArgs args). */\n+  public static void deleteBucketTags_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: deleteBucketTags(DeleteBucketTagsArgs args)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    try {\n+      client.makeBucket(MakeBucketArgs.builder().bucket(bucketName).build());\n+      try {\n+        // Delete should succeed.\n+        client.deleteBucketTags(DeleteBucketTagsArgs.builder().bucket(bucketName).build());\n+\n+        Map<String, String> map = new HashMap<>();\n+        map.put(\"Project\", \"Project One\");\n+        map.put(\"User\", \"jsmith\");\n+        client.setBucketTags(SetBucketTagsArgs.builder().bucket(bucketName).tags(map).build());\n+        client.deleteBucketTags(DeleteBucketTagsArgs.builder().bucket(bucketName).build());\n+        mintSuccessLog(\"deleteBucketTags(DeleteBucketTagsArgs args)\", null, startTime);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyMzMxMg=="}, "originalCommit": {"oid": "1173679665510e7ace023a0d378cf6befe5f790d"}, "originalPosition": 145}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 675, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}