{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMzM1NjY5", "number": 979, "title": "Add builder support to Compose object api", "bodyText": "Changes with this PR\n\nComposeSource class changed , the copyCondition is removed.\nComposeSource class extends ObjectVersionArgs and builder pattern is used to initialise it.\nComposeObject uses copyObject in case partsCount is 1.\nuploadPartCopy and createMultipartUpload  started using MultiMap.\nReturns ObjectWriteResponse for copyObject and composeObject", "createdAt": "2020-06-11T21:15:54Z", "url": "https://github.com/minio/minio-java/pull/979", "merged": true, "mergeCommit": {"oid": "0014bf3984842a26ef4b58a5ba5635b9f4f88190"}, "closed": true, "closedAt": "2020-06-22T10:09:02Z", "author": {"login": "sinhaashish"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcqkY6tAFqTQyOTYyNTk2Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABctt_01gFqTQzNDc4MzQwMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NjI1OTYy", "url": "https://github.com/minio/minio-java/pull/979#pullrequestreview-429625962", "createdAt": "2020-06-12T10:16:41Z", "commit": {"oid": "11cd1aa8822a05c9aeb11838caf908d1f4bbee91"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDoxNjo0MVrOGi-xMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNToxMDowNFrOGjHoQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMzMzE3MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected void validateNullOrEmpty(Long arg, String argName) {\n          \n          \n            \n                protected void validateNullOrPositive(Number arg, String argName) {\n          \n      \n    \n    \n  \n\n\nEmpty doesn't make sense for Long\nChange the type of the first argument to Number so that it can be used to validate other numeric types as well.", "url": "https://github.com/minio/minio-java/pull/979#discussion_r439333170", "createdAt": "2020-06-12T10:16:41Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/BaseArgs.java", "diffHunk": "@@ -65,6 +65,12 @@ protected void validateNullOrNotEmptyString(String arg, String argName) {\n       }\n     }\n \n+    protected void validateNullOrEmpty(Long arg, String argName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11cd1aa8822a05c9aeb11838caf908d1f4bbee91"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMzNTY1Nw==", "bodyText": "Override the validate(args) method and call validateSources from it (and any other validations that might be required before making the API call).", "url": "https://github.com/minio/minio-java/pull/979#discussion_r439335657", "createdAt": "2020-06-12T10:22:26Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/ComposeObjectArgs.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio;\n+\n+import java.util.List;\n+\n+public class ComposeObjectArgs extends ObjectWriteArgs {\n+  List<ComposeSourceArgs> sources;\n+\n+  public List<ComposeSourceArgs> sources() {\n+    return sources;\n+  }\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  public static final class Builder extends ObjectWriteArgs.Builder<Builder, ComposeObjectArgs> {\n+    public Builder sources(List<ComposeSourceArgs> sources) {\n+      validateSources(sources);\n+      operations.add(args -> args.sources = sources);\n+      return this;\n+    }\n+\n+    private void validateSources(List<ComposeSourceArgs> sources) {\n+      if (sources.isEmpty()) {\n+        throw new IllegalArgumentException(\"compose sources cannot be empty\");\n+      }\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11cd1aa8822a05c9aeb11838caf908d1f4bbee91"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0Mzc5MQ==", "bodyText": "This line is not required as super.validateSse(url) internally does the same.", "url": "https://github.com/minio/minio-java/pull/979#discussion_r439343791", "createdAt": "2020-06-12T10:42:02Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/ComposeSourceArgs.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio;\n+\n+import com.google.common.collect.HashMultimap;\n+import com.google.common.collect.Multimap;\n+import com.google.common.collect.Multimaps;\n+import java.time.ZonedDateTime;\n+import okhttp3.HttpUrl;\n+\n+/** Argument class of MinioClient.composeObject(). */\n+public class ComposeSourceArgs extends ObjectWriteArgs {\n+  private String srcVersionId;\n+  private Long srcOffset;\n+  private Long srcLength;\n+  private long srcObjectSize;\n+  private ServerSideEncryptionCustomerKey srcSsec;\n+  private Multimap<String, String> headers;\n+\n+  private String srcMatchETag;\n+  private String srcNotMatchETag;\n+  private ZonedDateTime srcModifiedSince;\n+  private ZonedDateTime srcUnmodifiedSince;\n+  private Directive metadataDirective;\n+  private Directive taggingDirective;\n+\n+  public String srcBucket() {\n+    return bucketName;\n+  }\n+\n+  public String srcObject() {\n+    return objectName;\n+  }\n+\n+  public String srcVersionId() {\n+    return srcVersionId;\n+  }\n+\n+  public Long srcOffset() {\n+    return srcOffset;\n+  }\n+\n+  public Long srcLength() {\n+    return srcLength;\n+  }\n+\n+  public long objectSize() {\n+    return srcObjectSize;\n+  }\n+\n+  public ServerSideEncryptionCustomerKey srcSsec() {\n+    return srcSsec;\n+  }\n+\n+  public String srcMatchETag() {\n+    return srcMatchETag;\n+  }\n+\n+  public String srcNotMatchETag() {\n+    return srcNotMatchETag;\n+  }\n+\n+  public ZonedDateTime srcModifiedSince() {\n+    return srcModifiedSince;\n+  }\n+\n+  public ZonedDateTime srcUnmodifiedSince() {\n+    return srcUnmodifiedSince;\n+  }\n+\n+  public Directive metadataDirective() {\n+    return metadataDirective;\n+  }\n+\n+  public Directive taggingDirective() {\n+    return taggingDirective;\n+  }\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  @Override\n+  public void validateSse(HttpUrl url) {\n+    super.validateSse(url);\n+    checkSse(srcSsec, url);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11cd1aa8822a05c9aeb11838caf908d1f4bbee91"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0NTEwOA==", "bodyText": "Validations can be moved to a separate method", "url": "https://github.com/minio/minio-java/pull/979#discussion_r439345108", "createdAt": "2020-06-12T10:44:55Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/ComposeSourceArgs.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio;\n+\n+import com.google.common.collect.HashMultimap;\n+import com.google.common.collect.Multimap;\n+import com.google.common.collect.Multimaps;\n+import java.time.ZonedDateTime;\n+import okhttp3.HttpUrl;\n+\n+/** Argument class of MinioClient.composeObject(). */\n+public class ComposeSourceArgs extends ObjectWriteArgs {\n+  private String srcVersionId;\n+  private Long srcOffset;\n+  private Long srcLength;\n+  private long srcObjectSize;\n+  private ServerSideEncryptionCustomerKey srcSsec;\n+  private Multimap<String, String> headers;\n+\n+  private String srcMatchETag;\n+  private String srcNotMatchETag;\n+  private ZonedDateTime srcModifiedSince;\n+  private ZonedDateTime srcUnmodifiedSince;\n+  private Directive metadataDirective;\n+  private Directive taggingDirective;\n+\n+  public String srcBucket() {\n+    return bucketName;\n+  }\n+\n+  public String srcObject() {\n+    return objectName;\n+  }\n+\n+  public String srcVersionId() {\n+    return srcVersionId;\n+  }\n+\n+  public Long srcOffset() {\n+    return srcOffset;\n+  }\n+\n+  public Long srcLength() {\n+    return srcLength;\n+  }\n+\n+  public long objectSize() {\n+    return srcObjectSize;\n+  }\n+\n+  public ServerSideEncryptionCustomerKey srcSsec() {\n+    return srcSsec;\n+  }\n+\n+  public String srcMatchETag() {\n+    return srcMatchETag;\n+  }\n+\n+  public String srcNotMatchETag() {\n+    return srcNotMatchETag;\n+  }\n+\n+  public ZonedDateTime srcModifiedSince() {\n+    return srcModifiedSince;\n+  }\n+\n+  public ZonedDateTime srcUnmodifiedSince() {\n+    return srcUnmodifiedSince;\n+  }\n+\n+  public Directive metadataDirective() {\n+    return metadataDirective;\n+  }\n+\n+  public Directive taggingDirective() {\n+    return taggingDirective;\n+  }\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  @Override\n+  public void validateSse(HttpUrl url) {\n+    super.validateSse(url);\n+    checkSse(srcSsec, url);\n+  }\n+\n+  public Multimap<String, String> headers() {\n+    return headers;\n+  }\n+\n+  /** Constructs header . */\n+  public void buildHeaders(long objectSize, String etag) throws IllegalArgumentException {\n+    if (srcOffset != null && srcOffset >= objectSize) {\n+      throw new IllegalArgumentException(\n+          \"source \"\n+              + bucketName\n+              + \"/\"\n+              + objectName\n+              + \": offset \"\n+              + srcOffset\n+              + \" is beyond object size \"\n+              + objectSize);\n+    }\n+\n+    if (srcLength != null) {\n+      if (srcLength > objectSize) {\n+        throw new IllegalArgumentException(\n+            \"source \"\n+                + bucketName\n+                + \"/\"\n+                + objectName\n+                + \": length \"\n+                + srcLength\n+                + \" is beyond object size \"\n+                + objectSize);\n+      }\n+\n+      if (srcOffset + srcLength > objectSize) {\n+        throw new IllegalArgumentException(\n+            \"source \"\n+                + bucketName\n+                + \"/\"\n+                + objectName\n+                + \": compose size \"\n+                + (srcOffset + srcLength)\n+                + \" is beyond object size \"\n+                + objectSize);\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11cd1aa8822a05c9aeb11838caf908d1f4bbee91"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM1MTkzMw==", "bodyText": "This is not required as super.validate(args) internally invokes validateBucketName anyway", "url": "https://github.com/minio/minio-java/pull/979#discussion_r439351933", "createdAt": "2020-06-12T10:59:25Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/ComposeSourceArgs.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio;\n+\n+import com.google.common.collect.HashMultimap;\n+import com.google.common.collect.Multimap;\n+import com.google.common.collect.Multimaps;\n+import java.time.ZonedDateTime;\n+import okhttp3.HttpUrl;\n+\n+/** Argument class of MinioClient.composeObject(). */\n+public class ComposeSourceArgs extends ObjectWriteArgs {\n+  private String srcVersionId;\n+  private Long srcOffset;\n+  private Long srcLength;\n+  private long srcObjectSize;\n+  private ServerSideEncryptionCustomerKey srcSsec;\n+  private Multimap<String, String> headers;\n+\n+  private String srcMatchETag;\n+  private String srcNotMatchETag;\n+  private ZonedDateTime srcModifiedSince;\n+  private ZonedDateTime srcUnmodifiedSince;\n+  private Directive metadataDirective;\n+  private Directive taggingDirective;\n+\n+  public String srcBucket() {\n+    return bucketName;\n+  }\n+\n+  public String srcObject() {\n+    return objectName;\n+  }\n+\n+  public String srcVersionId() {\n+    return srcVersionId;\n+  }\n+\n+  public Long srcOffset() {\n+    return srcOffset;\n+  }\n+\n+  public Long srcLength() {\n+    return srcLength;\n+  }\n+\n+  public long objectSize() {\n+    return srcObjectSize;\n+  }\n+\n+  public ServerSideEncryptionCustomerKey srcSsec() {\n+    return srcSsec;\n+  }\n+\n+  public String srcMatchETag() {\n+    return srcMatchETag;\n+  }\n+\n+  public String srcNotMatchETag() {\n+    return srcNotMatchETag;\n+  }\n+\n+  public ZonedDateTime srcModifiedSince() {\n+    return srcModifiedSince;\n+  }\n+\n+  public ZonedDateTime srcUnmodifiedSince() {\n+    return srcUnmodifiedSince;\n+  }\n+\n+  public Directive metadataDirective() {\n+    return metadataDirective;\n+  }\n+\n+  public Directive taggingDirective() {\n+    return taggingDirective;\n+  }\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  @Override\n+  public void validateSse(HttpUrl url) {\n+    super.validateSse(url);\n+    checkSse(srcSsec, url);\n+  }\n+\n+  public Multimap<String, String> headers() {\n+    return headers;\n+  }\n+\n+  /** Constructs header . */\n+  public void buildHeaders(long objectSize, String etag) throws IllegalArgumentException {\n+    if (srcOffset != null && srcOffset >= objectSize) {\n+      throw new IllegalArgumentException(\n+          \"source \"\n+              + bucketName\n+              + \"/\"\n+              + objectName\n+              + \": offset \"\n+              + srcOffset\n+              + \" is beyond object size \"\n+              + objectSize);\n+    }\n+\n+    if (srcLength != null) {\n+      if (srcLength > objectSize) {\n+        throw new IllegalArgumentException(\n+            \"source \"\n+                + bucketName\n+                + \"/\"\n+                + objectName\n+                + \": length \"\n+                + srcLength\n+                + \" is beyond object size \"\n+                + objectSize);\n+      }\n+\n+      if (srcOffset + srcLength > objectSize) {\n+        throw new IllegalArgumentException(\n+            \"source \"\n+                + bucketName\n+                + \"/\"\n+                + objectName\n+                + \": compose size \"\n+                + (srcOffset + srcLength)\n+                + \" is beyond object size \"\n+                + objectSize);\n+      }\n+    }\n+\n+    Multimap<String, String> headers = HashMultimap.create();\n+    headers.put(\"x-amz-copy-source\", S3Escaper.encodePath(bucketName + \"/\" + objectName));\n+    headers.put(\"x-amz-copy-source-if-match\", etag);\n+\n+    if (extraHeaders() != null) {\n+      headers.putAll(extraHeaders());\n+    }\n+\n+    if (srcMatchETag != null) {\n+      headers.put(\"x-amz-copy-source-if-match\", srcMatchETag);\n+    }\n+\n+    if (srcSsec != null) {\n+      headers.putAll(Multimaps.forMap(srcSsec.copySourceHeaders()));\n+    }\n+\n+    if (srcNotMatchETag != null) {\n+      headers.put(\"x-amz-copy-source-if-none-match\", srcNotMatchETag);\n+    }\n+\n+    if (srcModifiedSince != null) {\n+      headers.put(\n+          \"x-amz-copy-source-if-modified-since\",\n+          srcModifiedSince.format(Time.HTTP_HEADER_DATE_FORMAT));\n+    }\n+\n+    if (srcUnmodifiedSince != null) {\n+      headers.put(\n+          \"x-amz-copy-source-if-unmodified-since\",\n+          srcUnmodifiedSince.format(Time.HTTP_HEADER_DATE_FORMAT));\n+    }\n+\n+    if (metadataDirective != null) {\n+      headers.put(\"x-amz-metadata-directive\", metadataDirective.name());\n+    }\n+\n+    if (taggingDirective != null) {\n+      headers.put(\"x-amz-tagging-directive\", taggingDirective.name());\n+    }\n+\n+    this.srcObjectSize = objectSize;\n+    this.headers = headers;\n+  }\n+\n+  /** Argument builder of {@link ComposeSourceArgs}. */\n+  public static final class Builder extends ObjectWriteArgs.Builder<Builder, ComposeSourceArgs> {\n+    @Override\n+    protected void validate(ComposeSourceArgs args) {\n+      super.validate(args);\n+      validateBucketName(args.bucket());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11cd1aa8822a05c9aeb11838caf908d1f4bbee91"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM2MDU1Mw==", "bodyText": "Needs to be updated with the new builder based syntax", "url": "https://github.com/minio/minio-java/pull/979#discussion_r439360553", "createdAt": "2020-06-12T11:18:20Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -2751,6 +2753,258 @@ public void composeObject(\n     }\n   }\n \n+  /**\n+   * Creates an object by combining data from different source objects using server-side copy.\n+   *\n+   * <pre>Example:{@code\n+   * List<ComposeSource> sourceObjectList = new ArrayList<ComposeSource>();\n+   * sourceObjectList.add(new ComposeSource(\"my-job-bucket\", \"my-objectname-part-one\"));\n+   * sourceObjectList.add(new ComposeSource(\"my-job-bucket\", \"my-objectname-part-two\"));\n+   * sourceObjectList.add(new ComposeSource(\"my-job-bucket\", \"my-objectname-part-three\"));\n+   *\n+   * // Create my-bucketname/my-objectname by combining source object list.\n+   * minioClient.composeObject(\"my-bucketname\", \"my-objectname\", sourceObjectList,\n+   *     null, null);\n+   *\n+   * // Create my-bucketname/my-objectname with user metadata by combining source object\n+   * // list.\n+   * minioClient.composeObject(\"my-bucketname\", \"my-objectname\", sourceObjectList,\n+   *     userMetadata, null);\n+   *\n+   * // Create my-bucketname/my-objectname with user metadata and server-side encryption\n+   * // by combining source object list.\n+   * minioClient.composeObject(\"my-bucketname\", \"my-objectname\", sourceObjectList,\n+   *     userMetadata, sse);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11cd1aa8822a05c9aeb11838caf908d1f4bbee91"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM2MDc4Mw==", "bodyText": "This method should internally call the new one.", "url": "https://github.com/minio/minio-java/pull/979#discussion_r439360783", "createdAt": "2020-06-12T11:19:05Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -2542,7 +2542,9 @@ public void copyObject(CopyObjectArgs args)\n    * @throws IOException thrown to indicate I/O error on S3 operation.\n    * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n    * @throws XmlParserException thrown to indicate XML parsing error.\n+   * @deprecated use {@link #composeObject(ComposeObjectArgs)}\n    */\n+  @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11cd1aa8822a05c9aeb11838caf908d1f4bbee91"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM2MTI4MA==", "bodyText": "Add the javadoc deprecation comment as well\nCan this method internally call the new one?", "url": "https://github.com/minio/minio-java/pull/979#discussion_r439361280", "createdAt": "2020-06-12T11:20:30Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -7251,6 +7505,7 @@ protected void completeMultipartUpload(\n    * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n    * @throws XmlParserException thrown to indicate XML parsing error.\n    */\n+  @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11cd1aa8822a05c9aeb11838caf908d1f4bbee91"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM2MTY3Mg==", "bodyText": "All arguments are not covered", "url": "https://github.com/minio/minio-java/pull/979#discussion_r439361672", "createdAt": "2020-06-12T11:21:32Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -7273,6 +7528,67 @@ protected String createMultipartUpload(\n     }\n   }\n \n+  /**\n+   * Do <a\n+   * href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html\">CreateMultipartUpload\n+   * S3 API</a>.\n+   *\n+   * @param bucketName Name of the bucket.\n+   * @param objectName Object name in the bucket.\n+   * @param headers Request headers.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11cd1aa8822a05c9aeb11838caf908d1f4bbee91"}, "originalPosition": 288}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM2MjczNw==", "bodyText": "Can be private if being used only from the same class.", "url": "https://github.com/minio/minio-java/pull/979#discussion_r439362737", "createdAt": "2020-06-12T11:24:34Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -7645,4 +7961,56 @@ protected String uploadPartCopy(\n       return result.etag();\n     }\n   }\n+\n+  /**\n+   * Do <a\n+   * href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPartCopy.html\">UploadPartCopy\n+   * S3 API</a>.\n+   *\n+   * @param bucketName Name of the bucket.\n+   * @param objectName Object name in the bucket.\n+   * @param uploadId Upload ID.\n+   * @param partNumber Part number.\n+   * @param headerMap Source object definitions.\n+   * @return String - Contains ETag.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   */\n+  protected String uploadPartCopy(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11cd1aa8822a05c9aeb11838caf908d1f4bbee91"}, "originalPosition": 373}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ3NTQ2Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** Test: ccomposeObject(ComposeObjectArgs args). */\n          \n          \n            \n              /** Test: composeObject(ComposeObjectArgs args). */", "url": "https://github.com/minio/minio-java/pull/979#discussion_r439475463", "createdAt": "2020-06-12T15:04:58Z", "author": {"login": "anjalshireesh"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -2669,17 +2677,14 @@ public static void copyObject_test11() throws Exception {\n         false);\n   }\n \n-  /**\n-   * Test: composeObject(String bucketName, String objectName, List&lt;ComposeSource&gt;\n-   * composeSources,Map &lt;String, String&gt; headerMap, ServerSideEncryption sseTarget).\n-   */\n+  /** Test: ccomposeObject(ComposeObjectArgs args). */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11cd1aa8822a05c9aeb11838caf908d1f4bbee91"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ3ODMzOQ==", "bodyText": "Did you mean testArgs ?", "url": "https://github.com/minio/minio-java/pull/979#discussion_r439478339", "createdAt": "2020-06-12T15:10:04Z", "author": {"login": "anjalshireesh"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -2755,130 +2738,90 @@ public static void composeObject_test2() throws Exception {\n       PutObjectOptions options = new PutObjectOptions(6 * MB, -1);\n       client.putObject(bucketName, filename1, filename1, options);\n       client.putObject(bucketName, filename2, filename2, options);\n-      ComposeSource s1 = new ComposeSource(bucketName, filename1, 10L, 6291436L, null, null, null);\n-      ComposeSource s2 = new ComposeSource(bucketName, filename2, null, null, null, null, null);\n+      ComposeSourceArgs s1 =\n+          ComposeSourceArgs.builder()\n+              .bucket(bucketName)\n+              .object(filename1)\n+              .srcOffset(10L)\n+              .srcLength(6291436L)\n+              .build();\n+      ComposeSourceArgs s2 =\n+          ComposeSourceArgs.builder().bucket(bucketName).object(filename2).build();\n \n-      List<ComposeSource> listSourceObjects = new ArrayList<ComposeSource>();\n+      List<ComposeSourceArgs> listSourceObjects = new ArrayList<ComposeSourceArgs>();\n       listSourceObjects.add(s1);\n       listSourceObjects.add(s2);\n-\n-      client.composeObject(bucketName, destinationObjectName, listSourceObjects, null, null);\n-      Files.delete(Paths.get(filename1));\n-      Files.delete(Paths.get(filename2));\n-\n-      client.removeObject(RemoveObjectArgs.builder().bucket(bucketName).object(filename1).build());\n-      client.removeObject(RemoveObjectArgs.builder().bucket(bucketName).object(filename2).build());\n-      client.removeObject(\n-          RemoveObjectArgs.builder().bucket(bucketName).object(destinationObjectName).build());\n-\n-      mintSuccessLog(\n-          \"composeObject(String bucketName, String objectName,List<ComposeSource> composeSources, \"\n-              + \"Map <String,String > headerMap, ServerSideEncryption sseTarget)\",\n-          \"with offset and length.\",\n-          startTime);\n-\n-    } catch (Exception e) {\n-      ErrorResponse errorResponse = null;\n-      if (e instanceof ErrorResponseException) {\n-        ErrorResponseException exp = (ErrorResponseException) e;\n-        errorResponse = exp.errorResponse();\n-      }\n-\n-      // Ignore NotImplemented error\n-      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n-        mintIgnoredLog(\n-            \"composeObject(String bucketName, String objectName,List<ComposeSource> composeSources, \"\n-                + \"Map <String,String > headerMap, ServerSideEncryption sseTarget)\"\n-                + \"with offset and length.\",\n-            null,\n-            startTime);\n-      } else {\n-        mintFailedLog(\n-            \"composeObject(String bucketName, String objectName,List<ComposeSource> composeSources, \"\n-                + \"Map <String,String > headerMap, ServerSideEncryption sseTarget)\",\n-            \"with offset and length.\",\n-            startTime,\n-            null,\n-            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n-        throw e;\n+      try {\n+        client.composeObject(\n+            ComposeObjectArgs.builder()\n+                .bucket(bucketName)\n+                .object(destinationObjectName)\n+                .sources(listSourceObjects)\n+                .build());\n+        client.removeObject(\n+            RemoveObjectArgs.builder().bucket(bucketName).object(destinationObjectName).build());\n+      } finally {\n+        deleteFilesAndObjects(bucketName, new String[] {filename1, filename2});\n       }\n+      mintSuccessLog(methodName, mintArgs, startTime);\n+    } catch (Exception e) {\n+      handleException(methodName, mintArgs, startTime, e);\n     }\n   }\n \n-  /**\n-   * Test: composeObject(String bucketName, String objectName, List&lt;ComposeSource&gt;\n-   * composeSources,Map &lt;String, String&gt; headerMap, ServerSideEncryption sseTarget).\n-   */\n+  /** Test: composeObject(ComposeObjectArgs args) with one source. */\n   public static void composeObject_test3() throws Exception {\n+    String methodName = \"composeObject(ComposeObjectArgs args)\";\n+    String testTags = \"with one source\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11cd1aa8822a05c9aeb11838caf908d1f4bbee91"}, "originalPosition": 241}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "11cd1aa8822a05c9aeb11838caf908d1f4bbee91", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/11cd1aa8822a05c9aeb11838caf908d1f4bbee91", "committedDate": "2020-06-11T21:12:35Z", "message": "Add builder support to Compose object api"}, "afterCommit": {"oid": "0cf5205af174cff84e8bceb1bd9b7172df3dadf0", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/0cf5205af174cff84e8bceb1bd9b7172df3dadf0", "committedDate": "2020-06-15T08:05:27Z", "message": "Address review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0cf5205af174cff84e8bceb1bd9b7172df3dadf0", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/0cf5205af174cff84e8bceb1bd9b7172df3dadf0", "committedDate": "2020-06-15T08:05:27Z", "message": "Address review comments"}, "afterCommit": {"oid": "8c65613eab24dbd3cc34536515d73df366f282fc", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/8c65613eab24dbd3cc34536515d73df366f282fc", "committedDate": "2020-06-15T09:53:34Z", "message": "Address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNTUwMTU4", "url": "https://github.com/minio/minio-java/pull/979#pullrequestreview-431550158", "createdAt": "2020-06-16T14:14:32Z", "commit": {"oid": "8c65613eab24dbd3cc34536515d73df366f282fc"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDoxNDozMlrOGkdcFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDoxNDozMlrOGkdcFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg4NDI0NQ==", "bodyText": "Since this method is not doing anything apart from calling the super method, it is not required anymore.", "url": "https://github.com/minio/minio-java/pull/979#discussion_r440884245", "createdAt": "2020-06-16T14:14:32Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/ComposeSource.java", "diffHunk": "@@ -153,56 +152,52 @@ public void buildHeaders(long objectSize, String etag) throws IllegalArgumentExc\n                 + objectSize);\n       }\n     }\n+  }\n \n-    Map<String, String> headers = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n-    headers.put(\"x-amz-copy-source\", S3Escaper.encodePath(bucketName + \"/\" + objectName));\n-    headers.put(\"x-amz-copy-source-if-match\", etag);\n-\n-    if (headerMap != null) {\n-      headers.putAll(headerMap);\n+  /** Argument builder of {@link ComposeSource}. */\n+  public static final class Builder extends ObjectVersionArgs.Builder<Builder, ComposeSource> {\n+    @Override\n+    protected void validate(ComposeSource args) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c65613eab24dbd3cc34536515d73df366f282fc"}, "originalPosition": 192}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8c65613eab24dbd3cc34536515d73df366f282fc", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/8c65613eab24dbd3cc34536515d73df366f282fc", "committedDate": "2020-06-15T09:53:34Z", "message": "Address review comments"}, "afterCommit": {"oid": "3b5d42f70c0a906002002148c25c84bee13be223", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/3b5d42f70c0a906002002148c25c84bee13be223", "committedDate": "2020-06-17T09:31:08Z", "message": "ObjectWriteResponse from composeObject & copyObject"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3b5d42f70c0a906002002148c25c84bee13be223", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/3b5d42f70c0a906002002148c25c84bee13be223", "committedDate": "2020-06-17T09:31:08Z", "message": "ObjectWriteResponse from composeObject & copyObject"}, "afterCommit": {"oid": "ea96a3aa90dce8b6568183d34d767ea3252bba3b", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/ea96a3aa90dce8b6568183d34d767ea3252bba3b", "committedDate": "2020-06-17T09:57:50Z", "message": "ObjectWriteResponse from composeObject & copyObject"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2e013da8a6fea707dcb10c44b7f5f8e44dbbda6b", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/2e013da8a6fea707dcb10c44b7f5f8e44dbbda6b", "committedDate": "2020-06-17T10:56:24Z", "message": "Modify ObjectWriteResponse"}, "afterCommit": {"oid": "31168c12e1dd9a69237286aff08da5705db50d8e", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/31168c12e1dd9a69237286aff08da5705db50d8e", "committedDate": "2020-06-17T13:20:02Z", "message": "Modify ObjectWriteResponse"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMzkzODM4", "url": "https://github.com/minio/minio-java/pull/979#pullrequestreview-432393838", "createdAt": "2020-06-17T13:21:55Z", "commit": {"oid": "31168c12e1dd9a69237286aff08da5705db50d8e"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMzg0OTc4", "url": "https://github.com/minio/minio-java/pull/979#pullrequestreview-432384978", "createdAt": "2020-06-17T13:12:03Z", "commit": {"oid": "2e013da8a6fea707dcb10c44b7f5f8e44dbbda6b"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzoxMjowM1rOGlFCdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwMjo1Nzo0NFrOGld6Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMzA0Ng==", "bodyText": "you would need to have prototype public ObjectWriteResponse composeObject(ComposeObjectArgs args)", "url": "https://github.com/minio/minio-java/pull/979#discussion_r441533046", "createdAt": "2020-06-17T13:12:03Z", "author": {"login": "balamurugana"}, "path": "docs/API.md", "diffHunk": "@@ -977,41 +977,63 @@ minioClient.setDefaultRetention(\n ## 3. Object operations\n \n  <a name=\"composeObject\"></a>\n-### composeObject(String bucketName, String objectName, List<ComposeSource> sources, Map<String,String> headerMap, ServerSideEncryption sse)\n-`public void composeObject(String bucketName, String objectName, List<ComposeSource> sources, Map<String,String> headerMap, ServerSideEncryption sse)` _[[Javadoc]](http://minio.github.io/minio-java/io/minio/MinioClient.html#composeObject-java.lang.String-java.lang.String-java.util.List-java.util.Map-io.minio.ServerSideEncryption-)_\n+### composeObject(ComposeObjectArgs  args)\n+`public ObjectWriteResponse composeObject(ComposeObjectArgs)` _[[Javadoc]](http://minio.github.io/minio-java/io/minio/MinioClient.html#composeObject-io.minio.ComposeObjectArgs--)_", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e013da8a6fea707dcb10c44b7f5f8e44dbbda6b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMzg1NA==", "bodyText": "Space before :", "url": "https://github.com/minio/minio-java/pull/979#discussion_r441533854", "createdAt": "2020-06-17T13:13:15Z", "author": {"login": "balamurugana"}, "path": "docs/API.md", "diffHunk": "@@ -1810,3 +1840,5 @@ ObjectStat objectStat =\n [ListIncompleteUploadsArgs]: http://minio.github.io/minio-java/io/minio/ListIncompleteUploadsArgs.html\n [PutObjectArgs]: http://minio.github.io/minio-java/io/minio/PutObjectArgs.html\n [UploadObjectArgs]: http://minio.github.io/minio-java/io/minio/UploadObjectArgs.html\n+[ComposeObjectArgs]: http://minio.github.io/minio-java/io/minio/ComposeObjectArgs.html\n+[ObjectWriteResponse] : http://minio.github.io/minio-java/io/minio/ObjectWriteResponse.html", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e013da8a6fea707dcb10c44b7f5f8e44dbbda6b"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzNDU0Ng==", "bodyText": "You  could have description as Information of created object", "url": "https://github.com/minio/minio-java/pull/979#discussion_r441534546", "createdAt": "2020-06-17T13:14:24Z", "author": {"login": "balamurugana"}, "path": "docs/API.md", "diffHunk": "@@ -1449,6 +1475,10 @@ __Parameters__\n |:----------|:------------------|:------------|\n | ``args``  | _[PutObjectArgs]_ | Arguments.  |\n \n+| Returns                                                                     |\n+|:----------------------------------------------------------------------------|\n+| _[ObjectWriteResponse]_ - Response class of any APIs doing object creation. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e013da8a6fea707dcb10c44b7f5f8e44dbbda6b"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY5NjkxOA==", "bodyText": "null check needs to be done for sources", "url": "https://github.com/minio/minio-java/pull/979#discussion_r441696918", "createdAt": "2020-06-17T17:06:18Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/ComposeObjectArgs.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio;\n+\n+import java.util.List;\n+\n+public class ComposeObjectArgs extends ObjectWriteArgs {\n+  List<ComposeSource> sources;\n+\n+  public List<ComposeSource> sources() {\n+    return sources;\n+  }\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  public static final class Builder extends ObjectWriteArgs.Builder<Builder, ComposeObjectArgs> {\n+    @Override\n+    protected void validate(ComposeObjectArgs args) {\n+      super.validate(args);\n+      validateSources(args.sources);\n+    }\n+\n+    public Builder sources(List<ComposeSource> sources) {\n+      validateSources(sources);\n+      operations.add(args -> args.sources = sources);\n+      return this;\n+    }\n+\n+    private void validateSources(List<ComposeSource> sources) {\n+      if (sources.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31168c12e1dd9a69237286aff08da5705db50d8e"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY5ODQ0MQ==", "bodyText": "Remove unwanted white spaces.", "url": "https://github.com/minio/minio-java/pull/979#discussion_r441698441", "createdAt": "2020-06-17T17:08:50Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/ComposeSource.java", "diffHunk": "@@ -17,105 +17,104 @@\n \n package io.minio;\n \n-import java.util.Collections;\n-import java.util.Map;\n-import java.util.TreeMap;\n+import com.google.common.collect.HashMultimap;\n+import com.google.common.collect.Multimap;\n+import com.google.common.collect.Multimaps;\n+import java.time.ZonedDateTime;\n \n /** Source information to compose object. */\n-public class ComposeSource {\n-  private String bucketName;\n-  private String objectName;\n+public class ComposeSource extends ObjectVersionArgs {\n   private Long offset;\n   private Long length;\n-  private Map<String, String> headerMap;\n-  private CopyConditions copyConditions;\n-  private ServerSideEncryptionCustomerKey ssec;\n   private long objectSize;\n-  private Map<String, String> headers;\n+  private String matchETag;\n+  private String notMatchETag;\n+  private ZonedDateTime modifiedSince;\n+  private ZonedDateTime unmodifiedSince;\n+  private ServerSideEncryptionCustomerKey ssec;\n+\n+  private Multimap<String, String> headers;\n \n-  /** Create new ComposeSource for given bucket and object. */\n-  public ComposeSource(String bucketName, String objectName) throws IllegalArgumentException {\n-    this(bucketName, objectName, null, null, null, null, null);\n+  public Long offset() {\n+    return offset;\n   }\n \n-  /** Create new ComposeSource for given bucket, object, offset and length. */\n-  public ComposeSource(String bucketName, String objectName, Long offset, Long length)\n-      throws IllegalArgumentException {\n-    this(bucketName, objectName, offset, length, null, null, null);\n+  public Long length() {\n+    return length;\n   }\n \n-  /** Create new ComposeSource for given bucket, object, offset, length and headerMap. */\n-  public ComposeSource(\n-      String bucketName, String objectName, Long offset, Long length, Map<String, String> headerMap)\n-      throws IllegalArgumentException {\n-    this(bucketName, objectName, offset, length, headerMap, null, null);\n+  public long objectSize() {\n+    return objectSize;\n   }\n \n-  /**\n-   * Create new ComposeSource for given bucket, object, offset, length, headerMap and\n-   * CopyConditions.\n-   */\n-  public ComposeSource(\n-      String bucketName,\n-      String objectName,\n-      Long offset,\n-      Long length,\n-      Map<String, String> headerMap,\n-      CopyConditions copyConditions)\n-      throws IllegalArgumentException {\n-    this(bucketName, objectName, offset, length, headerMap, copyConditions, null);\n+  public String matchETag() {\n+    return matchETag;\n   }\n \n-  /**\n-   * Creates new ComposeSource for given bucket, object, offset, length, headerMap, CopyConditions\n-   * and server side encryption.\n-   *\n-   * @throws IllegalArgumentException upon invalid value is passed to a method.\n-   */\n-  public ComposeSource(\n-      String bucketName,\n-      String objectName,\n-      Long offset,\n-      Long length,\n-      Map<String, String> headerMap,\n-      CopyConditions copyConditions,\n-      ServerSideEncryptionCustomerKey ssec)\n-      throws IllegalArgumentException {\n-    if (bucketName == null) {\n-      throw new IllegalArgumentException(\"Source bucket name cannot be empty\");\n+  public String notMatchETag() {\n+    return notMatchETag;\n+  }\n+\n+  public ZonedDateTime modifiedSince() {\n+    return modifiedSince;\n+  }\n+\n+  public ZonedDateTime unmodifiedSince() {\n+    return unmodifiedSince;\n+  }\n+\n+  public Multimap<String, String> headers() {\n+    return headers;\n+  }\n+\n+  public ServerSideEncryptionCustomerKey ssec() {\n+    return ssec;\n+  }\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  /** Constructs header . */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31168c12e1dd9a69237286aff08da5705db50d8e"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzNzMzNw==", "bodyText": "This is CompleteMultipartUpload behaviour i.e. Error is returned with 200 OK. Here, you need to do XML parsing for CopyObjectResult", "url": "https://github.com/minio/minio-java/pull/979#discussion_r441937337", "createdAt": "2020-06-18T02:45:20Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -2499,8 +2499,42 @@ public void copyObject(CopyObjectArgs args)\n             null,\n             null,\n             0)) {\n-      // For now ignore the copyObjectResult, just read and parse it.\n-      Xml.unmarshal(CopyObjectResult.class, response.body().charStream());\n+\n+      String bodyContent = new String(response.body().bytes(), StandardCharsets.UTF_8);\n+      bodyContent = bodyContent.trim();\n+      if (!bodyContent.isEmpty()) {\n+        try {\n+          if (Xml.validate(ErrorResponse.class, bodyContent)) {\n+            ErrorResponse errorResponse = Xml.unmarshal(ErrorResponse.class, bodyContent);\n+            throw new ErrorResponseException(errorResponse, response);\n+          }\n+        } catch (XmlParserException e) {\n+          // As it is not <Error> message, fall-back to parse CopyObjectResult XML.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31168c12e1dd9a69237286aff08da5705db50d8e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzNzUxMw==", "bodyText": "You need to pass ``args.region()` here.", "url": "https://github.com/minio/minio-java/pull/979#discussion_r441937513", "createdAt": "2020-06-18T02:45:57Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -2499,8 +2499,42 @@ public void copyObject(CopyObjectArgs args)\n             null,\n             null,\n             0)) {\n-      // For now ignore the copyObjectResult, just read and parse it.\n-      Xml.unmarshal(CopyObjectResult.class, response.body().charStream());\n+\n+      String bodyContent = new String(response.body().bytes(), StandardCharsets.UTF_8);\n+      bodyContent = bodyContent.trim();\n+      if (!bodyContent.isEmpty()) {\n+        try {\n+          if (Xml.validate(ErrorResponse.class, bodyContent)) {\n+            ErrorResponse errorResponse = Xml.unmarshal(ErrorResponse.class, bodyContent);\n+            throw new ErrorResponseException(errorResponse, response);\n+          }\n+        } catch (XmlParserException e) {\n+          // As it is not <Error> message, fall-back to parse CopyObjectResult XML.\n+        }\n+\n+        try {\n+          CopyObjectResult result = Xml.unmarshal(CopyObjectResult.class, bodyContent);\n+          return new ObjectWriteResponse(\n+              response.headers(),\n+              args.bucket(),\n+              getRegion(args.bucket()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31168c12e1dd9a69237286aff08da5705db50d8e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzODMzOA==", "bodyText": "ObjectWriteArgs comes with headers and userMetadata. You would need to avoid extraHeaders and extraQueryParams usage unless required in examples and references.", "url": "https://github.com/minio/minio-java/pull/979#discussion_r441938338", "createdAt": "2020-06-18T02:49:12Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -2555,29 +2591,104 @@ public void composeObject(\n           InternalException, InvalidBucketNameException, InvalidKeyException,\n           InvalidResponseException, IOException, NoSuchAlgorithmException, ServerException,\n           XmlParserException {\n-    if ((bucketName == null) || (bucketName.isEmpty())) {\n-      throw new IllegalArgumentException(\"bucket name cannot be empty\");\n-    }\n \n-    checkObjectName(objectName);\n+    ComposeObjectArgs.Builder builder =\n+        ComposeObjectArgs.builder()\n+            .bucket(bucketName)\n+            .object(objectName)\n+            .extraHeaders(Multimaps.forMap(headerMap))\n+            .sources(sources)\n+            .sse(sse);\n \n-    if (sources.isEmpty()) {\n-      throw new IllegalArgumentException(\"compose sources cannot be empty\");\n-    }\n+    composeObject(builder.build());\n+  }\n \n-    checkWriteRequestSse(sse);\n+  /**\n+   * Creates an object by combining data from different source objects using server-side copy.\n+   *\n+   * <pre>Example:{@code\n+   * List<ComposeSource> sourceObjectList = new ArrayList<ComposeSource>();\n+   *\n+   * sourceObjectList.add(\n+   *    ComposeSource.builder().bucket(\"my-job-bucket\").object(\"my-objectname-part-one\").build());\n+   * sourceObjectList.add(\n+   *    ComposeSource.builder().bucket(\"my-job-bucket\").object(\"my-objectname-part-two\").build());\n+   * sourceObjectList.add(\n+   *    ComposeSource.builder().bucket(\"my-job-bucket\").object(\"my-objectname-part-three\").build());\n+   *\n+   * // Create my-bucketname/my-objectname by combining source object list.\n+   * minioClient.composeObject(\n+   *    ComposeObjectArgs.builder()\n+   *        .bucket(\"my-bucketname\")\n+   *        .object(\"my-objectname\")\n+   *        .sources(sourceObjectList)\n+   *        .build());\n+   *\n+   * // Create my-bucketname/my-objectname with user metadata by combining source object\n+   * // list.\n+   * minioClient.composeObject(\n+   *     ComposeObjectArgs.builder()\n+   *        .bucket(\"my-bucketname\")\n+   *        .object(\"my-objectname\")\n+   *        .sources(sourceObjectList)\n+   *        .extraHeaders(Multimaps.forMap(userMetadata))\n+   *        .build());\n+   *\n+   * // Create my-bucketname/my-objectname with user metadata and server-side encryption\n+   * // by combining source object list.\n+   * minioClient.composeObject(\n+   *   ComposeObjectArgs.builder()\n+   *        .bucket(\"my-bucketname\")\n+   *        .object(\"my-objectname\")\n+   *        .sources(sourceObjectList)\n+   *        .extraHeaders(Multimaps.forMap(userMetadata))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31168c12e1dd9a69237286aff08da5705db50d8e"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzODYxMw==", "bodyText": "You would need to use these constants from ObjectWriteArgs", "url": "https://github.com/minio/minio-java/pull/979#discussion_r441938613", "createdAt": "2020-06-18T02:50:17Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -2589,105 +2700,111 @@ public void composeObject(\n         size -= src.offset();\n       }\n \n-      if (size < ObjectWriteArgs.MIN_MULTIPART_SIZE\n+      if (size < PutObjectOptions.MIN_MULTIPART_SIZE\n           && sources.size() != 1\n           && i != (sources.size() - 1)) {\n         throw new IllegalArgumentException(\n             \"source \"\n-                + src.bucketName()\n+                + src.bucket()\n                 + \"/\"\n-                + src.objectName()\n+                + src.object()\n                 + \": size \"\n                 + size\n                 + \" must be greater than \"\n-                + ObjectWriteArgs.MIN_MULTIPART_SIZE);\n+                + PutObjectOptions.MIN_MULTIPART_SIZE);\n       }\n \n       objectSize += size;\n-      if (objectSize > ObjectWriteArgs.MAX_OBJECT_SIZE) {\n+      if (objectSize > PutObjectOptions.MAX_OBJECT_SIZE) {\n         throw new IllegalArgumentException(\n-            \"Destination object size must be less than \" + ObjectWriteArgs.MAX_OBJECT_SIZE);\n+            \"Destination object size must be less than \" + PutObjectOptions.MAX_OBJECT_SIZE);\n       }\n \n-      if (size > ObjectWriteArgs.MAX_PART_SIZE) {\n-        long count = size / ObjectWriteArgs.MAX_PART_SIZE;\n-        long lastPartSize = size - (count * ObjectWriteArgs.MAX_PART_SIZE);\n+      if (size > PutObjectOptions.MAX_PART_SIZE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31168c12e1dd9a69237286aff08da5705db50d8e"}, "originalPosition": 212}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzODkxOA==", "bodyText": "extraHeaders and extraQueryParams are always non-null. You would need to use them directly.", "url": "https://github.com/minio/minio-java/pull/979#discussion_r441938918", "createdAt": "2020-06-18T02:51:22Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -2589,105 +2700,111 @@ public void composeObject(\n         size -= src.offset();\n       }\n \n-      if (size < ObjectWriteArgs.MIN_MULTIPART_SIZE\n+      if (size < PutObjectOptions.MIN_MULTIPART_SIZE\n           && sources.size() != 1\n           && i != (sources.size() - 1)) {\n         throw new IllegalArgumentException(\n             \"source \"\n-                + src.bucketName()\n+                + src.bucket()\n                 + \"/\"\n-                + src.objectName()\n+                + src.object()\n                 + \": size \"\n                 + size\n                 + \" must be greater than \"\n-                + ObjectWriteArgs.MIN_MULTIPART_SIZE);\n+                + PutObjectOptions.MIN_MULTIPART_SIZE);\n       }\n \n       objectSize += size;\n-      if (objectSize > ObjectWriteArgs.MAX_OBJECT_SIZE) {\n+      if (objectSize > PutObjectOptions.MAX_OBJECT_SIZE) {\n         throw new IllegalArgumentException(\n-            \"Destination object size must be less than \" + ObjectWriteArgs.MAX_OBJECT_SIZE);\n+            \"Destination object size must be less than \" + PutObjectOptions.MAX_OBJECT_SIZE);\n       }\n \n-      if (size > ObjectWriteArgs.MAX_PART_SIZE) {\n-        long count = size / ObjectWriteArgs.MAX_PART_SIZE;\n-        long lastPartSize = size - (count * ObjectWriteArgs.MAX_PART_SIZE);\n+      if (size > PutObjectOptions.MAX_PART_SIZE) {\n+        long count = size / PutObjectOptions.MAX_PART_SIZE;\n+        long lastPartSize = size - (count * PutObjectOptions.MAX_PART_SIZE);\n         if (lastPartSize > 0) {\n           count++;\n         } else {\n-          lastPartSize = ObjectWriteArgs.MAX_PART_SIZE;\n+          lastPartSize = PutObjectOptions.MAX_PART_SIZE;\n         }\n \n-        if (lastPartSize < ObjectWriteArgs.MIN_MULTIPART_SIZE\n+        if (lastPartSize < PutObjectOptions.MIN_MULTIPART_SIZE\n             && sources.size() != 1\n             && i != (sources.size() - 1)) {\n           throw new IllegalArgumentException(\n               \"source \"\n-                  + src.bucketName()\n+                  + src.bucket()\n                   + \"/\"\n-                  + src.objectName()\n+                  + src.object()\n                   + \": \"\n                   + \"for multipart split upload of \"\n                   + size\n                   + \", last part size is less than \"\n-                  + ObjectWriteArgs.MIN_MULTIPART_SIZE);\n+                  + PutObjectOptions.MIN_MULTIPART_SIZE);\n         }\n \n         partsCount += (int) count;\n       } else {\n         partsCount++;\n       }\n \n-      if (partsCount > ObjectWriteArgs.MAX_MULTIPART_COUNT) {\n+      if (partsCount > PutObjectOptions.MAX_MULTIPART_COUNT) {\n         throw new IllegalArgumentException(\n             \"Compose sources create more than allowed multipart count \"\n-                + ObjectWriteArgs.MAX_MULTIPART_COUNT);\n+                + PutObjectOptions.MAX_MULTIPART_COUNT);\n       }\n     }\n \n     if (partsCount == 1) {\n       ComposeSource src = sources.get(0);\n-      if (headerMap == null) {\n-        headerMap = new HashMap<>();\n+      Multimap<String, String> headers = HashMultimap.create();\n+      if (args.extraHeaders() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31168c12e1dd9a69237286aff08da5705db50d8e"}, "originalPosition": 260}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzOTQ2Nw==", "bodyText": "We should deprecate this method and use other one.", "url": "https://github.com/minio/minio-java/pull/979#discussion_r441939467", "createdAt": "2020-06-18T02:53:33Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -7515,17 +7643,16 @@ protected ObjectWriteResponse completeMultipartUpload(\n    * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n    * @throws XmlParserException thrown to indicate XML parsing error.\n    */\n-  @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31168c12e1dd9a69237286aff08da5705db50d8e"}, "originalPosition": 433}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzOTk5NA==", "bodyText": "Use String[] files. I prefer filenames instread of files", "url": "https://github.com/minio/minio-java/pull/979#discussion_r441939994", "createdAt": "2020-06-18T02:55:43Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -421,6 +422,13 @@ private static void handleException(String methodName, String args, long startTi\n     throw e;\n   }\n \n+  private static void deleteFilesAndObjects(String bucketName, String files[]) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31168c12e1dd9a69237286aff08da5705db50d8e"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk0MDUwNg==", "bodyText": "This method is not necessary. you could use removeObjects() then this for", "url": "https://github.com/minio/minio-java/pull/979#discussion_r441940506", "createdAt": "2020-06-18T02:57:44Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -421,6 +422,13 @@ private static void handleException(String methodName, String args, long startTi\n     throw e;\n   }\n \n+  private static void deleteFilesAndObjects(String bucketName, String files[]) throws Exception {\n+    for (String filename : files) {\n+      Files.delete(Paths.get(filename));\n+      client.removeObject(RemoveObjectArgs.builder().bucket(bucketName).object(filename).build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31168c12e1dd9a69237286aff08da5705db50d8e"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNzkzMjky", "url": "https://github.com/minio/minio-java/pull/979#pullrequestreview-433793292", "createdAt": "2020-06-19T04:23:43Z", "commit": {"oid": "99b7354724fb6d660dfb738ca2142c1201da039b"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNDoyMzo0NFrOGmHlvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNDozODo0OVrOGmHycg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYyMzQyMA==", "bodyText": "Sources should not be null or empty.", "url": "https://github.com/minio/minio-java/pull/979#discussion_r442623420", "createdAt": "2020-06-19T04:23:44Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/ComposeObjectArgs.java", "diffHunk": "@@ -43,7 +43,7 @@ public Builder sources(List<ComposeSource> sources) {\n     }\n \n     private void validateSources(List<ComposeSource> sources) {\n-      if (sources.isEmpty()) {\n+      if (sources == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99b7354724fb6d660dfb738ca2142c1201da039b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYyNDA4Mw==", "bodyText": "extra whitespace.", "url": "https://github.com/minio/minio-java/pull/979#discussion_r442624083", "createdAt": "2020-06-19T04:26:43Z", "author": {"login": "balamurugana"}, "path": "docs/API.md", "diffHunk": "@@ -977,41 +977,63 @@ minioClient.setDefaultRetention(\n ## 3. Object operations\n \n  <a name=\"composeObject\"></a>\n-### composeObject(String bucketName, String objectName, List<ComposeSource> sources, Map<String,String> headerMap, ServerSideEncryption sse)\n-`public void composeObject(String bucketName, String objectName, List<ComposeSource> sources, Map<String,String> headerMap, ServerSideEncryption sse)` _[[Javadoc]](http://minio.github.io/minio-java/io/minio/MinioClient.html#composeObject-java.lang.String-java.lang.String-java.util.List-java.util.Map-io.minio.ServerSideEncryption-)_\n+### composeObject(ComposeObjectArgs  args)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99b7354724fb6d660dfb738ca2142c1201da039b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYyNDYwNQ==", "bodyText": "Contains information of created object is more correct here.", "url": "https://github.com/minio/minio-java/pull/979#discussion_r442624605", "createdAt": "2020-06-19T04:29:11Z", "author": {"login": "balamurugana"}, "path": "docs/API.md", "diffHunk": "@@ -977,41 +977,63 @@ minioClient.setDefaultRetention(\n ## 3. Object operations\n \n  <a name=\"composeObject\"></a>\n-### composeObject(String bucketName, String objectName, List<ComposeSource> sources, Map<String,String> headerMap, ServerSideEncryption sse)\n-`public void composeObject(String bucketName, String objectName, List<ComposeSource> sources, Map<String,String> headerMap, ServerSideEncryption sse)` _[[Javadoc]](http://minio.github.io/minio-java/io/minio/MinioClient.html#composeObject-java.lang.String-java.lang.String-java.util.List-java.util.Map-io.minio.ServerSideEncryption-)_\n+### composeObject(ComposeObjectArgs  args)\n+`public ObjectWriteResponse composeObject(ComposeObjectArgs args)` _[[Javadoc]](http://minio.github.io/minio-java/io/minio/MinioClient.html#composeObject-io.minio.ComposeObjectArgs--)_\n \n Creates an object by combining data from different source objects using server-side copy.\n \n  __Parameters__\n-| Param          | Type                     | Description                        |\n-|:---------------|:-------------------------|:-----------------------------------|\n-| ``bucketName`` | _String_                 | Name of the bucket.                |\n-| ``objectName`` | _String_                 | Object name to be created.         |\n-| ``sources``    | _List<[ComposeSource]>_  | List of compose sources.           |\n-| ``headerMap``  | _Map<String,String>_     | (Optional) User metadata.          |\n-| ``sse``        | _[ServerSideEncryption]_ | (Optional) Server-side encryption. |\n+| Param          | Type                     | Description   |\n+|:---------------|:-------------------------|:--------------|\n+| ``args``       | _[ComposeObjectArgs]_    | Arguments.    |\n+\n+| Returns                                                                     |\n+|:----------------------------------------------------------------------------|\n+| _[ObjectWriteResponse]_ - Contains object versionId, etag and headers.      |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99b7354724fb6d660dfb738ca2142c1201da039b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYyNDc1MA==", "bodyText": "same as above", "url": "https://github.com/minio/minio-java/pull/979#discussion_r442624750", "createdAt": "2020-06-19T04:29:43Z", "author": {"login": "balamurugana"}, "path": "docs/API.md", "diffHunk": "@@ -1020,6 +1042,10 @@ __Parameters__\n |:----------|:-------------------|:------------|\n | ``args``  | _[CopyObjectArgs]_ | Arguments.  |\n \n+| Returns                                                                     |\n+|:----------------------------------------------------------------------------|\n+| _[ObjectWriteResponse]_ - Contains object versionId, etag and headers.      |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99b7354724fb6d660dfb738ca2142c1201da039b"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYyNDgzMA==", "bodyText": "same as above", "url": "https://github.com/minio/minio-java/pull/979#discussion_r442624830", "createdAt": "2020-06-19T04:30:08Z", "author": {"login": "balamurugana"}, "path": "docs/API.md", "diffHunk": "@@ -1449,6 +1475,10 @@ __Parameters__\n |:----------|:------------------|:------------|\n | ``args``  | _[PutObjectArgs]_ | Arguments.  |\n \n+| Returns                                                                     |\n+|:----------------------------------------------------------------------------|\n+| _[ObjectWriteResponse]_ - Contains object versionId, etag and headers.      |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99b7354724fb6d660dfb738ca2142c1201da039b"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYyNTQwNg==", "bodyText": "Why can't it be just  Xml.unmarshal(CopyObjectResult.class, response.body().charStream()); ? There is no need to read the body to a string and parse it later.", "url": "https://github.com/minio/minio-java/pull/979#discussion_r442625406", "createdAt": "2020-06-19T04:32:40Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -2499,8 +2499,33 @@ public void copyObject(CopyObjectArgs args)\n             null,\n             null,\n             0)) {\n-      // For now ignore the copyObjectResult, just read and parse it.\n-      Xml.unmarshal(CopyObjectResult.class, response.body().charStream());\n+\n+      String bodyContent = new String(response.body().bytes(), StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99b7354724fb6d660dfb738ca2142c1201da039b"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYyNTU4OA==", "bodyText": "Do not call getRegion() for ObjectWriteResponse. You need to use args.region(). This is applicable everywhere.", "url": "https://github.com/minio/minio-java/pull/979#discussion_r442625588", "createdAt": "2020-06-19T04:33:39Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -2499,8 +2499,33 @@ public void copyObject(CopyObjectArgs args)\n             null,\n             null,\n             0)) {\n-      // For now ignore the copyObjectResult, just read and parse it.\n-      Xml.unmarshal(CopyObjectResult.class, response.body().charStream());\n+\n+      String bodyContent = new String(response.body().bytes(), StandardCharsets.UTF_8);\n+      bodyContent = bodyContent.trim();\n+      if (!bodyContent.isEmpty()) {\n+        try {\n+          CopyObjectResult result = Xml.unmarshal(CopyObjectResult.class, bodyContent);\n+          return new ObjectWriteResponse(\n+              response.headers(),\n+              args.bucket(),\n+              args.region(),\n+              args.object(),\n+              result.etag(),\n+              response.header(\"x-amz-version-id\"));\n+        } catch (XmlParserException e) {\n+          // As this CopyObjectResult REST call succeeded, just log it.\n+          Logger.getLogger(MinioClient.class.getName())\n+              .warning(\n+                  \"S3 service returned unknown XML for CopyObjectResult REST API. \" + bodyContent);\n+        }\n+      }\n+      return new ObjectWriteResponse(\n+          response.headers(),\n+          args.bucket(),\n+          getRegion(args.bucket()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99b7354724fb6d660dfb738ca2142c1201da039b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYyNTY5OQ==", "bodyText": "Why not setting etag?", "url": "https://github.com/minio/minio-java/pull/979#discussion_r442625699", "createdAt": "2020-06-19T04:34:07Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -2499,8 +2499,33 @@ public void copyObject(CopyObjectArgs args)\n             null,\n             null,\n             0)) {\n-      // For now ignore the copyObjectResult, just read and parse it.\n-      Xml.unmarshal(CopyObjectResult.class, response.body().charStream());\n+\n+      String bodyContent = new String(response.body().bytes(), StandardCharsets.UTF_8);\n+      bodyContent = bodyContent.trim();\n+      if (!bodyContent.isEmpty()) {\n+        try {\n+          CopyObjectResult result = Xml.unmarshal(CopyObjectResult.class, bodyContent);\n+          return new ObjectWriteResponse(\n+              response.headers(),\n+              args.bucket(),\n+              args.region(),\n+              args.object(),\n+              result.etag(),\n+              response.header(\"x-amz-version-id\"));\n+        } catch (XmlParserException e) {\n+          // As this CopyObjectResult REST call succeeded, just log it.\n+          Logger.getLogger(MinioClient.class.getName())\n+              .warning(\n+                  \"S3 service returned unknown XML for CopyObjectResult REST API. \" + bodyContent);\n+        }\n+      }\n+      return new ObjectWriteResponse(\n+          response.headers(),\n+          args.bucket(),\n+          getRegion(args.bucket()),\n+          args.object(),\n+          null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99b7354724fb6d660dfb738ca2142c1201da039b"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYyNjQ4NQ==", "bodyText": "remove this commented code.", "url": "https://github.com/minio/minio-java/pull/979#discussion_r442626485", "createdAt": "2020-06-19T04:37:50Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -421,6 +422,34 @@ private static void handleException(String methodName, String args, long startTi\n     throw e;\n   }\n \n+  // private static void deleteFilesAndObjects(String bucketName, String[] filenames) throws\n+  // Exception {\n+  //   for (String filename : filenames) {\n+  //     Files.delete(Paths.get(filename));\n+  //\n+  // client.removeObject(RemoveObjectArgs.builder().bucket(bucketName).object(filename).build());\n+  //   }\n+  // }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99b7354724fb6d660dfb738ca2142c1201da039b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYyNjY3NA==", "bodyText": "Can't you use removeObjects() method available in this class?\nIts better to call object removal first, then file removal later.", "url": "https://github.com/minio/minio-java/pull/979#discussion_r442626674", "createdAt": "2020-06-19T04:38:49Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -421,6 +422,34 @@ private static void handleException(String methodName, String args, long startTi\n     throw e;\n   }\n \n+  // private static void deleteFilesAndObjects(String bucketName, String[] filenames) throws\n+  // Exception {\n+  //   for (String filename : filenames) {\n+  //     Files.delete(Paths.get(filename));\n+  //\n+  // client.removeObject(RemoveObjectArgs.builder().bucket(bucketName).object(filename).build());\n+  //   }\n+  // }\n+\n+  private static void deleteFilesAndObjects(String bucketName, String[] filenames)\n+      throws Exception {\n+    for (String filename : filenames) {\n+      Files.delete(Paths.get(filename));\n+    }\n+    List<DeleteObject> objects =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99b7354724fb6d660dfb738ca2142c1201da039b"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53866d15c676ab84062d9e357fc19a786b1790c8", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/53866d15c676ab84062d9e357fc19a786b1790c8", "committedDate": "2020-06-20T09:05:11Z", "message": "Add builder support to Compose object api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d105addf9980f55203b71970b7ba91446e34a943", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/d105addf9980f55203b71970b7ba91446e34a943", "committedDate": "2020-06-20T09:05:11Z", "message": "Address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "099e360a9930be0cff1016029b3401a6ae226b83", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/099e360a9930be0cff1016029b3401a6ae226b83", "committedDate": "2020-06-20T09:05:11Z", "message": "ObjectWriteResponse from composeObject & copyObject"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfe2334e2f10a0b023ad510c60e7cc9f6d481943", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/cfe2334e2f10a0b023ad510c60e7cc9f6d481943", "committedDate": "2020-06-20T09:05:11Z", "message": "Modify ObjectWriteResponse"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b5f96f5de48145521966124ab0f0291fca0e368", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/1b5f96f5de48145521966124ab0f0291fca0e368", "committedDate": "2020-06-20T09:05:11Z", "message": "Address Bala's review comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21d5df86a3f012df68a83414c63c78158ecdd3b6", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/21d5df86a3f012df68a83414c63c78158ecdd3b6", "committedDate": "2020-06-20T17:36:37Z", "message": "Address more comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "788562e9db9f599a79cd47950057b14a63b0c95d", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/788562e9db9f599a79cd47950057b14a63b0c95d", "committedDate": "2020-06-19T12:28:54Z", "message": "Address more comments"}, "afterCommit": {"oid": "21d5df86a3f012df68a83414c63c78158ecdd3b6", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/21d5df86a3f012df68a83414c63c78158ecdd3b6", "committedDate": "2020-06-20T17:36:37Z", "message": "Address more comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NDY2NjQx", "url": "https://github.com/minio/minio-java/pull/979#pullrequestreview-434466641", "createdAt": "2020-06-21T03:21:44Z", "commit": {"oid": "21d5df86a3f012df68a83414c63c78158ecdd3b6"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwMzoyMTo0NVrOGmpZ8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwMzo1NTowOVrOGmpf4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3NzQ1Ng==", "bodyText": "You would need to use args.validateSse(this.baseUrl);", "url": "https://github.com/minio/minio-java/pull/979#discussion_r443177456", "createdAt": "2020-06-21T03:21:45Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -2557,29 +2566,102 @@ public void composeObject(\n           InternalException, InvalidBucketNameException, InvalidKeyException,\n           InvalidResponseException, IOException, NoSuchAlgorithmException, ServerException,\n           XmlParserException {\n-    if ((bucketName == null) || (bucketName.isEmpty())) {\n-      throw new IllegalArgumentException(\"bucket name cannot be empty\");\n-    }\n \n-    checkObjectName(objectName);\n+    ComposeObjectArgs.Builder builder =\n+        ComposeObjectArgs.builder()\n+            .bucket(bucketName)\n+            .object(objectName)\n+            .headers(Multimaps.forMap(headerMap))\n+            .sources(sources)\n+            .sse(sse);\n \n-    if (sources.isEmpty()) {\n-      throw new IllegalArgumentException(\"compose sources cannot be empty\");\n-    }\n+    composeObject(builder.build());\n+  }\n \n-    checkWriteRequestSse(sse);\n+  /**\n+   * Creates an object by combining data from different source objects using server-side copy.\n+   *\n+   * <pre>Example:{@code\n+   * List<ComposeSource> sourceObjectList = new ArrayList<ComposeSource>();\n+   *\n+   * sourceObjectList.add(\n+   *    ComposeSource.builder().bucket(\"my-job-bucket\").object(\"my-objectname-part-one\").build());\n+   * sourceObjectList.add(\n+   *    ComposeSource.builder().bucket(\"my-job-bucket\").object(\"my-objectname-part-two\").build());\n+   * sourceObjectList.add(\n+   *    ComposeSource.builder().bucket(\"my-job-bucket\").object(\"my-objectname-part-three\").build());\n+   *\n+   * // Create my-bucketname/my-objectname by combining source object list.\n+   * minioClient.composeObject(\n+   *    ComposeObjectArgs.builder()\n+   *        .bucket(\"my-bucketname\")\n+   *        .object(\"my-objectname\")\n+   *        .sources(sourceObjectList)\n+   *        .build());\n+   *\n+   * // Create my-bucketname/my-objectname with user metadata by combining source object\n+   * // list.\n+   * minioClient.composeObject(\n+   *     ComposeObjectArgs.builder()\n+   *        .bucket(\"my-bucketname\")\n+   *        .object(\"my-objectname\")\n+   *        .sources(sourceObjectList)\n+   *        .build());\n+   *\n+   * // Create my-bucketname/my-objectname with user metadata and server-side encryption\n+   * // by combining source object list.\n+   * minioClient.composeObject(\n+   *   ComposeObjectArgs.builder()\n+   *        .bucket(\"my-bucketname\")\n+   *        .object(\"my-objectname\")\n+   *        .sources(sourceObjectList)\n+   *        .ssec(sse)\n+   *        .build());\n+   *\n+   * }</pre>\n+   *\n+   * @param args {@link ComposeObjectArgs} object.\n+   * @return {@link ObjectWriteResponse} object.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   */\n+  public ObjectWriteResponse composeObject(ComposeObjectArgs args)\n+      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n+          InternalException, InvalidBucketNameException, InvalidKeyException,\n+          InvalidResponseException, IOException, NoSuchAlgorithmException, ServerException,\n+          XmlParserException {\n+\n+    checkWriteRequestSse(args.sse());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21d5df86a3f012df68a83414c63c78158ecdd3b6"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3NzgyOQ==", "bodyText": "You would need to have below method in ComposeSource class and use it here.\n`\n  public void validateSse(HttpUrl url) {\n    checkSse(srcSsec, url);\n  }", "url": "https://github.com/minio/minio-java/pull/979#discussion_r443177829", "createdAt": "2020-06-21T03:30:05Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -2557,29 +2566,102 @@ public void composeObject(\n           InternalException, InvalidBucketNameException, InvalidKeyException,\n           InvalidResponseException, IOException, NoSuchAlgorithmException, ServerException,\n           XmlParserException {\n-    if ((bucketName == null) || (bucketName.isEmpty())) {\n-      throw new IllegalArgumentException(\"bucket name cannot be empty\");\n-    }\n \n-    checkObjectName(objectName);\n+    ComposeObjectArgs.Builder builder =\n+        ComposeObjectArgs.builder()\n+            .bucket(bucketName)\n+            .object(objectName)\n+            .headers(Multimaps.forMap(headerMap))\n+            .sources(sources)\n+            .sse(sse);\n \n-    if (sources.isEmpty()) {\n-      throw new IllegalArgumentException(\"compose sources cannot be empty\");\n-    }\n+    composeObject(builder.build());\n+  }\n \n-    checkWriteRequestSse(sse);\n+  /**\n+   * Creates an object by combining data from different source objects using server-side copy.\n+   *\n+   * <pre>Example:{@code\n+   * List<ComposeSource> sourceObjectList = new ArrayList<ComposeSource>();\n+   *\n+   * sourceObjectList.add(\n+   *    ComposeSource.builder().bucket(\"my-job-bucket\").object(\"my-objectname-part-one\").build());\n+   * sourceObjectList.add(\n+   *    ComposeSource.builder().bucket(\"my-job-bucket\").object(\"my-objectname-part-two\").build());\n+   * sourceObjectList.add(\n+   *    ComposeSource.builder().bucket(\"my-job-bucket\").object(\"my-objectname-part-three\").build());\n+   *\n+   * // Create my-bucketname/my-objectname by combining source object list.\n+   * minioClient.composeObject(\n+   *    ComposeObjectArgs.builder()\n+   *        .bucket(\"my-bucketname\")\n+   *        .object(\"my-objectname\")\n+   *        .sources(sourceObjectList)\n+   *        .build());\n+   *\n+   * // Create my-bucketname/my-objectname with user metadata by combining source object\n+   * // list.\n+   * minioClient.composeObject(\n+   *     ComposeObjectArgs.builder()\n+   *        .bucket(\"my-bucketname\")\n+   *        .object(\"my-objectname\")\n+   *        .sources(sourceObjectList)\n+   *        .build());\n+   *\n+   * // Create my-bucketname/my-objectname with user metadata and server-side encryption\n+   * // by combining source object list.\n+   * minioClient.composeObject(\n+   *   ComposeObjectArgs.builder()\n+   *        .bucket(\"my-bucketname\")\n+   *        .object(\"my-objectname\")\n+   *        .sources(sourceObjectList)\n+   *        .ssec(sse)\n+   *        .build());\n+   *\n+   * }</pre>\n+   *\n+   * @param args {@link ComposeObjectArgs} object.\n+   * @return {@link ObjectWriteResponse} object.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   */\n+  public ObjectWriteResponse composeObject(ComposeObjectArgs args)\n+      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n+          InternalException, InvalidBucketNameException, InvalidKeyException,\n+          InvalidResponseException, IOException, NoSuchAlgorithmException, ServerException,\n+          XmlParserException {\n+\n+    checkWriteRequestSse(args.sse());\n \n     long objectSize = 0;\n     int partsCount = 0;\n+    List<ComposeSource> sources = args.sources();\n     for (int i = 0; i < sources.size(); i++) {\n       ComposeSource src = sources.get(i);\n \n       checkReadRequestSse(src.ssec());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21d5df86a3f012df68a83414c63c78158ecdd3b6"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3ODA1NA==", "bodyText": "You would need to use headers() not extraHeaders(). headers member data is updated in ComposeSource.buildHeaders()", "url": "https://github.com/minio/minio-java/pull/979#discussion_r443178054", "createdAt": "2020-06-21T03:34:48Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -2557,29 +2566,102 @@ public void composeObject(\n           InternalException, InvalidBucketNameException, InvalidKeyException,\n           InvalidResponseException, IOException, NoSuchAlgorithmException, ServerException,\n           XmlParserException {\n-    if ((bucketName == null) || (bucketName.isEmpty())) {\n-      throw new IllegalArgumentException(\"bucket name cannot be empty\");\n-    }\n \n-    checkObjectName(objectName);\n+    ComposeObjectArgs.Builder builder =\n+        ComposeObjectArgs.builder()\n+            .bucket(bucketName)\n+            .object(objectName)\n+            .headers(Multimaps.forMap(headerMap))\n+            .sources(sources)\n+            .sse(sse);\n \n-    if (sources.isEmpty()) {\n-      throw new IllegalArgumentException(\"compose sources cannot be empty\");\n-    }\n+    composeObject(builder.build());\n+  }\n \n-    checkWriteRequestSse(sse);\n+  /**\n+   * Creates an object by combining data from different source objects using server-side copy.\n+   *\n+   * <pre>Example:{@code\n+   * List<ComposeSource> sourceObjectList = new ArrayList<ComposeSource>();\n+   *\n+   * sourceObjectList.add(\n+   *    ComposeSource.builder().bucket(\"my-job-bucket\").object(\"my-objectname-part-one\").build());\n+   * sourceObjectList.add(\n+   *    ComposeSource.builder().bucket(\"my-job-bucket\").object(\"my-objectname-part-two\").build());\n+   * sourceObjectList.add(\n+   *    ComposeSource.builder().bucket(\"my-job-bucket\").object(\"my-objectname-part-three\").build());\n+   *\n+   * // Create my-bucketname/my-objectname by combining source object list.\n+   * minioClient.composeObject(\n+   *    ComposeObjectArgs.builder()\n+   *        .bucket(\"my-bucketname\")\n+   *        .object(\"my-objectname\")\n+   *        .sources(sourceObjectList)\n+   *        .build());\n+   *\n+   * // Create my-bucketname/my-objectname with user metadata by combining source object\n+   * // list.\n+   * minioClient.composeObject(\n+   *     ComposeObjectArgs.builder()\n+   *        .bucket(\"my-bucketname\")\n+   *        .object(\"my-objectname\")\n+   *        .sources(sourceObjectList)\n+   *        .build());\n+   *\n+   * // Create my-bucketname/my-objectname with user metadata and server-side encryption\n+   * // by combining source object list.\n+   * minioClient.composeObject(\n+   *   ComposeObjectArgs.builder()\n+   *        .bucket(\"my-bucketname\")\n+   *        .object(\"my-objectname\")\n+   *        .sources(sourceObjectList)\n+   *        .ssec(sse)\n+   *        .build());\n+   *\n+   * }</pre>\n+   *\n+   * @param args {@link ComposeObjectArgs} object.\n+   * @return {@link ObjectWriteResponse} object.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   */\n+  public ObjectWriteResponse composeObject(ComposeObjectArgs args)\n+      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n+          InternalException, InvalidBucketNameException, InvalidKeyException,\n+          InvalidResponseException, IOException, NoSuchAlgorithmException, ServerException,\n+          XmlParserException {\n+\n+    checkWriteRequestSse(args.sse());\n \n     long objectSize = 0;\n     int partsCount = 0;\n+    List<ComposeSource> sources = args.sources();\n     for (int i = 0; i < sources.size(); i++) {\n       ComposeSource src = sources.get(i);\n \n       checkReadRequestSse(src.ssec());\n \n-      ObjectStat stat = statObject(src.bucketName(), src.objectName(), src.ssec());\n+      ObjectStat stat =\n+          statObject(\n+              StatObjectArgs.builder()\n+                  .bucket(src.bucket())\n+                  .object(src.object())\n+                  .versionId(src.versionId())\n+                  .ssec(src.ssec())\n+                  .build());\n+\n       src.buildHeaders(stat.length(), stat.etag());\n \n-      if (i != 0 && src.headers().containsKey(\"x-amz-meta-x-amz-key\")) {\n+      if (i != 0 && src.extraHeaders().containsKey(\"x-amz-meta-x-amz-key\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21d5df86a3f012df68a83414c63c78158ecdd3b6"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3ODI0Mw==", "bodyText": "sseHeaders is always empty. We don't need to add that.", "url": "https://github.com/minio/minio-java/pull/979#discussion_r443178243", "createdAt": "2020-06-21T03:38:54Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -2649,47 +2731,51 @@ public void composeObject(\n \n     if (partsCount == 1) {\n       ComposeSource src = sources.get(0);\n-      if (headerMap == null) {\n-        headerMap = new HashMap<>();\n-      }\n+      Multimap<String, String> headers = HashMultimap.create();\n+      headers.putAll(args.extraHeaders());\n+      headers.putAll(args.headers);\n       if ((src.offset() != null) && (src.length() == null)) {\n-        headerMap.put(\"x-amz-copy-source-range\", \"bytes=\" + src.offset() + \"-\");\n+        headers.put(\"x-amz-copy-source-range\", \"bytes=\" + src.offset() + \"-\");\n       }\n \n       if ((src.offset() != null) && (src.length() != null)) {\n-        headerMap.put(\n+        headers.put(\n             \"x-amz-copy-source-range\",\n             \"bytes=\" + src.offset() + \"-\" + (src.offset() + src.length() - 1));\n       }\n-      copyObject(\n-          bucketName,\n-          objectName,\n-          headerMap,\n-          sse,\n-          src.bucketName(),\n-          src.objectName(),\n-          src.ssec(),\n-          src.copyConditions());\n-      return;\n-    }\n-\n-    Map<String, String> sseHeaders = null;\n-    if (sse != null) {\n-      sseHeaders = sse.headers();\n-      if (headerMap == null) {\n-        headerMap = new HashMap<>();\n-      }\n+      return copyObject(\n+          CopyObjectArgs.builder()\n+              .bucket(args.bucket())\n+              .object(args.object())\n+              .headers(args.extraHeaders)\n+              .sse(args.sse())\n+              .srcBucket(src.bucket())\n+              .srcObject(src.object())\n+              .srcVersionId(src.versionId())\n+              .srcSsec(src.ssec())\n+              .srcMatchETag(src.matchETag())\n+              .srcNotMatchETag(src.notMatchETag())\n+              .srcModifiedSince(src.modifiedSince())\n+              .srcUnmodifiedSince(src.unmodifiedSince())\n+              .build());\n+    }\n+\n+    Multimap<String, String> sseHeaders = HashMultimap.create();\n+    Multimap<String, String> headerMap = HashMultimap.create();\n+    if (args.sse() != null) {\n+      sseHeaders.putAll(Multimaps.forMap(args.sse().headers()));\n+      headerMap.putAll(args.extraHeaders());\n+      headerMap.putAll(args.headers);\n       headerMap.putAll(sseHeaders);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21d5df86a3f012df68a83414c63c78158ecdd3b6"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3ODgyNQ==", "bodyText": "copyObject() only works with one source and without range. You would need to fix it accordingly.", "url": "https://github.com/minio/minio-java/pull/979#discussion_r443178825", "createdAt": "2020-06-21T03:51:28Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -2649,47 +2731,51 @@ public void composeObject(\n \n     if (partsCount == 1) {\n       ComposeSource src = sources.get(0);\n-      if (headerMap == null) {\n-        headerMap = new HashMap<>();\n-      }\n+      Multimap<String, String> headers = HashMultimap.create();\n+      headers.putAll(args.extraHeaders());\n+      headers.putAll(args.headers);\n       if ((src.offset() != null) && (src.length() == null)) {\n-        headerMap.put(\"x-amz-copy-source-range\", \"bytes=\" + src.offset() + \"-\");\n+        headers.put(\"x-amz-copy-source-range\", \"bytes=\" + src.offset() + \"-\");\n       }\n \n       if ((src.offset() != null) && (src.length() != null)) {\n-        headerMap.put(\n+        headers.put(\n             \"x-amz-copy-source-range\",\n             \"bytes=\" + src.offset() + \"-\" + (src.offset() + src.length() - 1));\n       }\n-      copyObject(\n-          bucketName,\n-          objectName,\n-          headerMap,\n-          sse,\n-          src.bucketName(),\n-          src.objectName(),\n-          src.ssec(),\n-          src.copyConditions());\n-      return;\n-    }\n-\n-    Map<String, String> sseHeaders = null;\n-    if (sse != null) {\n-      sseHeaders = sse.headers();\n-      if (headerMap == null) {\n-        headerMap = new HashMap<>();\n-      }\n+      return copyObject(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21d5df86a3f012df68a83414c63c78158ecdd3b6"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3ODkwMw==", "bodyText": "We are providing core level support by protected. Any reason ti change it to private?\nCreate one more method with Multimap than change it here.", "url": "https://github.com/minio/minio-java/pull/979#discussion_r443178903", "createdAt": "2020-06-21T03:53:15Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -8156,19 +8244,29 @@ protected String uploadPart(\n    * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n    * @throws XmlParserException thrown to indicate XML parsing error.\n    */\n-  protected String uploadPartCopy(\n+  private String uploadPartCopy(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21d5df86a3f012df68a83414c63c78158ecdd3b6"}, "originalPosition": 326}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3ODk0Mw==", "bodyText": "Limit width of the table.", "url": "https://github.com/minio/minio-java/pull/979#discussion_r443178943", "createdAt": "2020-06-21T03:54:36Z", "author": {"login": "balamurugana"}, "path": "docs/API.md", "diffHunk": "@@ -990,42 +990,64 @@ minioClient.setDefaultRetention(\n \n ## 3. Object operations\n \n- <a name=\"composeObject\"></a>\n-### composeObject(String bucketName, String objectName, List<ComposeSource> sources, Map<String,String> headerMap, ServerSideEncryption sse)\n-`public void composeObject(String bucketName, String objectName, List<ComposeSource> sources, Map<String,String> headerMap, ServerSideEncryption sse)` _[[Javadoc]](http://minio.github.io/minio-java/io/minio/MinioClient.html#composeObject-java.lang.String-java.lang.String-java.util.List-java.util.Map-io.minio.ServerSideEncryption-)_\n+<a name=\"composeObject\"></a>\n+### composeObject(ComposeObjectArgs args)\n+`public ObjectWriteResponse composeObject(ComposeObjectArgs args)` _[[Javadoc]](http://minio.github.io/minio-java/io/minio/MinioClient.html#composeObject-io.minio.ComposeObjectArgs--)_\n \n Creates an object by combining data from different source objects using server-side copy.\n \n  __Parameters__\n-| Param          | Type                     | Description                        |\n-|:---------------|:-------------------------|:-----------------------------------|\n-| ``bucketName`` | _String_                 | Name of the bucket.                |\n-| ``objectName`` | _String_                 | Object name to be created.         |\n-| ``sources``    | _List<[ComposeSource]>_  | List of compose sources.           |\n-| ``headerMap``  | _Map<String,String>_     | (Optional) User metadata.          |\n-| ``sse``        | _[ServerSideEncryption]_ | (Optional) Server-side encryption. |\n+| Param          | Type                     | Description   |\n+|:---------------|:-------------------------|:--------------|\n+| ``args``       | _[ComposeObjectArgs]_    | Arguments.    |\n+\n+| Returns                                                                     |\n+|:----------------------------------------------------------------------------|\n+| _[ObjectWriteResponse]_ - Contains information of created object.           |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21d5df86a3f012df68a83414c63c78158ecdd3b6"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3ODk1OA==", "bodyText": "Same as above.", "url": "https://github.com/minio/minio-java/pull/979#discussion_r443178958", "createdAt": "2020-06-21T03:54:56Z", "author": {"login": "balamurugana"}, "path": "docs/API.md", "diffHunk": "@@ -1034,6 +1056,10 @@ __Parameters__\n |:----------|:-------------------|:------------|\n | ``args``  | _[CopyObjectArgs]_ | Arguments.  |\n \n+| Returns                                                                     |\n+|:----------------------------------------------------------------------------|\n+| _[ObjectWriteResponse]_ - Contains information of created object.           |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21d5df86a3f012df68a83414c63c78158ecdd3b6"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3ODk3Nw==", "bodyText": "Same as above.", "url": "https://github.com/minio/minio-java/pull/979#discussion_r443178977", "createdAt": "2020-06-21T03:55:09Z", "author": {"login": "balamurugana"}, "path": "docs/API.md", "diffHunk": "@@ -1463,6 +1489,10 @@ __Parameters__\n |:----------|:------------------|:------------|\n | ``args``  | _[PutObjectArgs]_ | Arguments.  |\n \n+| Returns                                                                     |\n+|:----------------------------------------------------------------------------|\n+| _[ObjectWriteResponse]_ - Contains information of created object.           |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21d5df86a3f012df68a83414c63c78158ecdd3b6"}, "originalPosition": 113}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e22aef88283dca2335dfe183e5e4d76f7bf9e9e2", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/e22aef88283dca2335dfe183e5e4d76f7bf9e9e2", "committedDate": "2020-06-22T01:41:35Z", "message": "resolving comments"}, "afterCommit": {"oid": "0a93db625381c0497fc96ae0c6e15eb858823069", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/0a93db625381c0497fc96ae0c6e15eb858823069", "committedDate": "2020-06-22T02:32:35Z", "message": "resolving comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40934b06150fbe6cb431b906087680a23cf1b756", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/40934b06150fbe6cb431b906087680a23cf1b756", "committedDate": "2020-06-22T02:40:22Z", "message": "resolving comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0a93db625381c0497fc96ae0c6e15eb858823069", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/0a93db625381c0497fc96ae0c6e15eb858823069", "committedDate": "2020-06-22T02:32:35Z", "message": "resolving comments"}, "afterCommit": {"oid": "40934b06150fbe6cb431b906087680a23cf1b756", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/40934b06150fbe6cb431b906087680a23cf1b756", "committedDate": "2020-06-22T02:40:22Z", "message": "resolving comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NTc4MzMx", "url": "https://github.com/minio/minio-java/pull/979#pullrequestreview-434578331", "createdAt": "2020-06-22T03:09:41Z", "commit": {"oid": "40934b06150fbe6cb431b906087680a23cf1b756"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMzowOTo0MlrOGmwukg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMzozNTowNlrOGmxAWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI5NzQyNg==", "bodyText": "You would need to do if (args.sources.size() == 1 && src.offset() == null && src.length() == null) {\nNo need to use sources.get(0) because src is already pointing to sources.get(0)", "url": "https://github.com/minio/minio-java/pull/979#discussion_r443297426", "createdAt": "2020-06-22T03:09:42Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -2647,49 +2715,45 @@ public void composeObject(\n       }\n     }\n \n-    if (partsCount == 1) {\n+    if (args.sources().size() == 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40934b06150fbe6cb431b906087680a23cf1b756"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI5ODA4NA==", "bodyText": "Isn't it headers.putAll(args.headers()) ? Not sure why there is no compiler error to this line.\nWhy is it required to create combined headers here? Can't you use them directly like .extraHeaders(args.extraHeaders()).headers(args.headers()) ?", "url": "https://github.com/minio/minio-java/pull/979#discussion_r443298084", "createdAt": "2020-06-22T03:13:03Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -2647,49 +2715,45 @@ public void composeObject(\n       }\n     }\n \n-    if (partsCount == 1) {\n+    if (args.sources().size() == 1) {\n       ComposeSource src = sources.get(0);\n-      if (headerMap == null) {\n-        headerMap = new HashMap<>();\n-      }\n-      if ((src.offset() != null) && (src.length() == null)) {\n-        headerMap.put(\"x-amz-copy-source-range\", \"bytes=\" + src.offset() + \"-\");\n-      }\n-\n-      if ((src.offset() != null) && (src.length() != null)) {\n-        headerMap.put(\n-            \"x-amz-copy-source-range\",\n-            \"bytes=\" + src.offset() + \"-\" + (src.offset() + src.length() - 1));\n+      Multimap<String, String> headers = HashMultimap.create();\n+      headers.putAll(args.extraHeaders());\n+      headers.putAll(args.headers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40934b06150fbe6cb431b906087680a23cf1b756"}, "originalPosition": 215}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMwMDU5NA==", "bodyText": "use createMultipartUpload() like String uploadId = createMultipartUpload(args.bucket(), args.region(), args.object(), args.genHeaders(), args.extraQueryParams());\nmove this line at 1242", "url": "https://github.com/minio/minio-java/pull/979#discussion_r443300594", "createdAt": "2020-06-22T03:27:13Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -2647,49 +2715,45 @@ public void composeObject(\n       }\n     }\n \n-    if (partsCount == 1) {\n+    if (args.sources().size() == 1) {\n       ComposeSource src = sources.get(0);\n-      if (headerMap == null) {\n-        headerMap = new HashMap<>();\n-      }\n-      if ((src.offset() != null) && (src.length() == null)) {\n-        headerMap.put(\"x-amz-copy-source-range\", \"bytes=\" + src.offset() + \"-\");\n-      }\n-\n-      if ((src.offset() != null) && (src.length() != null)) {\n-        headerMap.put(\n-            \"x-amz-copy-source-range\",\n-            \"bytes=\" + src.offset() + \"-\" + (src.offset() + src.length() - 1));\n+      Multimap<String, String> headers = HashMultimap.create();\n+      headers.putAll(args.extraHeaders());\n+      headers.putAll(args.headers);\n+      if (src.offset() == null && src.length() == null) {\n+        return copyObject(\n+            CopyObjectArgs.builder()\n+                .bucket(args.bucket())\n+                .object(args.object())\n+                .headers(args.extraHeaders())\n+                .sse(args.sse())\n+                .srcBucket(src.bucket())\n+                .srcObject(src.object())\n+                .srcVersionId(src.versionId())\n+                .srcSsec(src.ssec())\n+                .srcMatchETag(src.matchETag())\n+                .srcNotMatchETag(src.notMatchETag())\n+                .srcModifiedSince(src.modifiedSince())\n+                .srcUnmodifiedSince(src.unmodifiedSince())\n+                .build());\n       }\n-      copyObject(\n-          bucketName,\n-          objectName,\n-          headerMap,\n-          sse,\n-          src.bucketName(),\n-          src.objectName(),\n-          src.ssec(),\n-          src.copyConditions());\n-      return;\n     }\n \n-    Map<String, String> sseHeaders = null;\n-    if (sse != null) {\n-      sseHeaders = sse.headers();\n-      if (headerMap == null) {\n-        headerMap = new HashMap<>();\n-      }\n-      headerMap.putAll(sseHeaders);\n+    Multimap<String, String> sseHeaders = HashMultimap.create();\n+    Multimap<String, String> headerMap = HashMultimap.create();\n+    if (args.sse() != null) {\n+      sseHeaders.putAll(Multimaps.forMap(args.sse().headers()));\n+      headerMap.putAll(args.extraHeaders());\n+      headerMap.putAll(args.headers);\n     }\n \n-    String uploadId = createMultipartUpload(bucketName, objectName, headerMap);\n+    String uploadId = createMultipartUpload(args.bucket(), null, args.object(), headerMap, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40934b06150fbe6cb431b906087680a23cf1b756"}, "originalPosition": 261}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMwMTUxNQ==", "bodyText": "Isn't it headers.putAll(args.headers()) ? Not sure why there is no compiler error to this line.", "url": "https://github.com/minio/minio-java/pull/979#discussion_r443301515", "createdAt": "2020-06-22T03:32:23Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -2647,49 +2715,45 @@ public void composeObject(\n       }\n     }\n \n-    if (partsCount == 1) {\n+    if (args.sources().size() == 1) {\n       ComposeSource src = sources.get(0);\n-      if (headerMap == null) {\n-        headerMap = new HashMap<>();\n-      }\n-      if ((src.offset() != null) && (src.length() == null)) {\n-        headerMap.put(\"x-amz-copy-source-range\", \"bytes=\" + src.offset() + \"-\");\n-      }\n-\n-      if ((src.offset() != null) && (src.length() != null)) {\n-        headerMap.put(\n-            \"x-amz-copy-source-range\",\n-            \"bytes=\" + src.offset() + \"-\" + (src.offset() + src.length() - 1));\n+      Multimap<String, String> headers = HashMultimap.create();\n+      headers.putAll(args.extraHeaders());\n+      headers.putAll(args.headers);\n+      if (src.offset() == null && src.length() == null) {\n+        return copyObject(\n+            CopyObjectArgs.builder()\n+                .bucket(args.bucket())\n+                .object(args.object())\n+                .headers(args.extraHeaders())\n+                .sse(args.sse())\n+                .srcBucket(src.bucket())\n+                .srcObject(src.object())\n+                .srcVersionId(src.versionId())\n+                .srcSsec(src.ssec())\n+                .srcMatchETag(src.matchETag())\n+                .srcNotMatchETag(src.notMatchETag())\n+                .srcModifiedSince(src.modifiedSince())\n+                .srcUnmodifiedSince(src.unmodifiedSince())\n+                .build());\n       }\n-      copyObject(\n-          bucketName,\n-          objectName,\n-          headerMap,\n-          sse,\n-          src.bucketName(),\n-          src.objectName(),\n-          src.ssec(),\n-          src.copyConditions());\n-      return;\n     }\n \n-    Map<String, String> sseHeaders = null;\n-    if (sse != null) {\n-      sseHeaders = sse.headers();\n-      if (headerMap == null) {\n-        headerMap = new HashMap<>();\n-      }\n-      headerMap.putAll(sseHeaders);\n+    Multimap<String, String> sseHeaders = HashMultimap.create();\n+    Multimap<String, String> headerMap = HashMultimap.create();\n+    if (args.sse() != null) {\n+      sseHeaders.putAll(Multimaps.forMap(args.sse().headers()));\n+      headerMap.putAll(args.extraHeaders());\n+      headerMap.putAll(args.headers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40934b06150fbe6cb431b906087680a23cf1b756"}, "originalPosition": 257}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMwMTk0NA==", "bodyText": "abortMultipartUpload() should be called  not if (args.sources.size() == 1 && src.offset() == null && src.length() == null) {", "url": "https://github.com/minio/minio-java/pull/979#discussion_r443301944", "createdAt": "2020-06-22T03:34:55Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -2745,12 +2809,13 @@ public void composeObject(\n         }\n       }\n \n-      completeMultipartUpload(bucketName, objectName, uploadId, totalParts);\n+      return completeMultipartUpload(\n+          args.bucket(), getRegion(args.bucket()), args.object(), uploadId, totalParts, null, null);\n     } catch (RuntimeException e) {\n-      abortMultipartUpload(bucketName, objectName, uploadId);\n+      abortMultipartUpload(args.bucket(), args.object(), uploadId);\n       throw e;\n     } catch (Exception e) {\n-      abortMultipartUpload(bucketName, objectName, uploadId);\n+      abortMultipartUpload(args.bucket(), args.object(), uploadId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40934b06150fbe6cb431b906087680a23cf1b756"}, "originalPosition": 318}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMwMTk3Nw==", "bodyText": "abortMultipartUpload() should be called  not if (args.sources.size() == 1 && src.offset() == null && src.length() == null) {", "url": "https://github.com/minio/minio-java/pull/979#discussion_r443301977", "createdAt": "2020-06-22T03:35:06Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -2745,12 +2809,13 @@ public void composeObject(\n         }\n       }\n \n-      completeMultipartUpload(bucketName, objectName, uploadId, totalParts);\n+      return completeMultipartUpload(\n+          args.bucket(), getRegion(args.bucket()), args.object(), uploadId, totalParts, null, null);\n     } catch (RuntimeException e) {\n-      abortMultipartUpload(bucketName, objectName, uploadId);\n+      abortMultipartUpload(args.bucket(), args.object(), uploadId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40934b06150fbe6cb431b906087680a23cf1b756"}, "originalPosition": 314}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "105b906739bf92b980e7fa30da035e1d80ea0b2e", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/105b906739bf92b980e7fa30da035e1d80ea0b2e", "committedDate": "2020-06-22T09:47:45Z", "message": "Handle sse"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "65557a669d45a60e68e15f7703e578619804b332", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/65557a669d45a60e68e15f7703e578619804b332", "committedDate": "2020-06-22T09:40:26Z", "message": "Handle sse"}, "afterCommit": {"oid": "105b906739bf92b980e7fa30da035e1d80ea0b2e", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/105b906739bf92b980e7fa30da035e1d80ea0b2e", "committedDate": "2020-06-22T09:47:45Z", "message": "Handle sse"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NzgyNDgw", "url": "https://github.com/minio/minio-java/pull/979#pullrequestreview-434782480", "createdAt": "2020-06-22T10:06:48Z", "commit": {"oid": "105b906739bf92b980e7fa30da035e1d80ea0b2e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NzgzNDAy", "url": "https://github.com/minio/minio-java/pull/979#pullrequestreview-434783402", "createdAt": "2020-06-22T10:08:07Z", "commit": {"oid": "105b906739bf92b980e7fa30da035e1d80ea0b2e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1931, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}